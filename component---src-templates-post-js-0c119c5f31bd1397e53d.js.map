{"version":3,"file":"component---src-templates-post-js-0c119c5f31bd1397e53d.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/TagList.jsx","webpack://gatsby-starter-default/./src/components/Avatar.js","webpack://gatsby-starter-default/./src/components/SocialMediaButtons.jsx","webpack://gatsby-starter-default/./src/components/TwitterShareButton.jsx","webpack://gatsby-starter-default/./src/templates/post.js","webpack://gatsby-starter-default/./src/utils.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nconst TagList = ({ tags }) => (\n  <ul className=\"list-inline tags\">\n    {tags.map((tag) => (\n      <li key={tag}>\n        <Link className=\"tag-link\" to={`/node/tags/jenkins/${tag}`}>\n          {tag}\n        </Link>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default TagList;\n","import React from 'react';\nimport { GatsbyImage, getImage, StaticImage } from 'gatsby-plugin-image';\n\nconst Avatar = ({ name, avatar }) => (\n  <div>\n    {avatar?.childImageSharp && <GatsbyImage image={getImage(avatar)} alt={name} />}\n    {!avatar?.childImageSharp && <StaticImage src=\"../../content/images/logos/transparent/transparent.svg\" alt={name} width={128} />}\n  </div>\n);\n\nexport default Avatar;\n","import React from 'react';\n\nconst SocialMediaButtons = ({\n  github, twitter, blog, linkedin,\n}) => (\n  <ul className=\"author social-media-buttons\">\n    {github && (<li className=\"author\"><a href={`https://github.com/${github}`} target=\"_blank\" rel=\"noreferrer noopener\">Github</a></li>)}\n    {twitter && (<li className=\"author\"><a href={`https://twitter.com/${twitter}`} target=\"_blank\" rel=\"noreferrer noopener\">Twitter</a></li>)}\n    {blog && (<li className=\"author\"><a href={blog} target=\"_blank\" rel=\"noreferrer noopener\">Blog</a></li>)}\n    {linkedin && (<li className=\"author\"><a href={`https://www.linkedin.com/in/${linkedin}`} target=\"_blank\" rel=\"noreferrer noopener\">LinkedIn</a></li>)}\n  </ul>\n);\n\nexport default SocialMediaButtons;\n","import React from 'react';\nimport { withPrefix, graphql, useStaticQuery } from 'gatsby';\n\nconst TwitterShareButton = ({ title, path }) => {\n  const { site: { siteMetadata: { siteUrl } } } = useStaticQuery(graphql`query { site { siteMetadata { siteUrl } } }`);\n\n  const url = new URL(siteUrl);\n  url.pathname = withPrefix(path);\n  return (\n    <a\n      className=\"twitter-share-button\"\n      href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&amp;url=${encodeURIComponent(url.toString())}`}\n      data-lang=\"en\"\n      rel=\"noreferrer nofollow\"\n      target=\"_blank\"\n    >\n      Tweet\n    </a>\n  );\n};\nexport default TwitterShareButton;\n","import * as React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Avatar from '../components/Avatar';\nimport SocialMediaButtons from '../components/SocialMediaButtons';\nimport TagList from '../components/TagList';\nimport TwitterShareButton from '../components/TwitterShareButton';\nimport { reactJoin } from '../utils';\n\nconst Author = ({\n  name,\n  html,\n  blogroll,\n  slug,\n  avatar,\n  twitter,\n  github,\n  linkedin,\n  blog,\n}) => (\n  <div>\n    {!blogroll && (<h2>{name}</h2>)}\n    <table className=\"author box\">\n      <tbody>\n        <tr>\n          <td style={{ width: avatar?.childImageSharp?.gatsbyImageData?.width || 128 }}>\n            <Avatar avatar={avatar} name={name} />\n          </td>\n          <td>\n            {!blogroll && (\n            <b className=\"author name\">\n              <Link to={slug}>\n                {name}\n              </Link>\n            </b>\n            )}\n            {html && (<p dangerouslySetInnerHTML={{ __html: html }} />)}\n            {!html && (\n            <p>\n              {`This author has no biography defined.\n            See social media links referenced below.`}\n            </p>\n            )}\n            <SocialMediaButtons twitter={twitter} github={github} linkedin={linkedin} blog={blog} />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n);\n\nconst Authors = ({ authors, blogroll }) => (\n  <div id=\"about-the-author\">\n    <b className=\"author about-header\">\n      About the Author\n      {authors.length > 1 ? 's' : ''}\n    </b>\n    {authors.map((author) => <Author key={author.id} blogroll={blogroll} {...author} />)}\n  </div>\n);\n\nconst Post = ({ data }) => {\n  const {\n    title, date, authors, html, tags, slug,\n  } = data.blog;\n  return (\n    <Layout>\n      <div className=\"container blog-post\">\n        <div className=\"row body\">\n          <div id=\"content\" className=\"col-md-11 col-md-offset-1 main-content\">\n            <div className=\"content-top\">\n              <h1>\n                <Link to={slug} title={title}>{title}</Link>\n              </h1>\n              <div style={{ float: 'right', clear: 'all' }}>\n                <TwitterShareButton title={title} path={slug} />\n                <div className=\"post-attrs\">\n                  <span className=\"submitted\">\n                    Published on\n                    {' '}\n                    {new Date(date).toLocaleDateString()}\n                    {' '}\n                    by\n                    {' '}\n                    {reactJoin(authors.map((a) => <Link to={a.slug}>{a.name}</Link>), ', ')}\n                  </span>\n                  <TagList tags={tags || []} />\n                </div>\n                <div dangerouslySetInnerHTML={{ __html: html }} />\n                <Authors authors={authors} blogroll />\n              </div>\n              TODO-partial(&apos;discuss.html&apos;)\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Post;\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    blog(id: { eq: $id }) {\n      html\n      id\n      title\n      date\n      slug\n      authors {\n        ...AuthorFragment\n      }\n    }\n  }\n`;\n","export const reactJoin = (elements, joiner) => (elements.length ? elements.reduce((prev, curr) => [prev, joiner, curr]) : []);\nexport const SHORT_MONTH_NAMES = [\n  'Jan', 'Feb', 'March', 'April', 'May', 'Jun',\n  'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec',\n];\n"],"names":["tags","className","map","tag","key","Link","to","name","avatar","childImageSharp","G","image","getImage","alt","S","src","width","github","twitter","blog","linkedin","href","target","rel","title","path","siteUrl","useStaticQuery","site","siteMetadata","url","URL","pathname","withPrefix","encodeURIComponent","toString","Author","html","blogroll","slug","style","gatsbyImageData","dangerouslySetInnerHTML","__html","Authors","authors","id","length","author","data","date","float","clear","Date","toLocaleDateString","reactJoin","a","TagList","elements","joiner","reduce","prev","curr","SHORT_MONTH_NAMES"],"sourceRoot":""}