{
    "componentChunkName": "component---src-templates-simplepage-js",
    "path": "/security/advisory/2013-01-04/re-keying",
    "result": {"data":{"simplePage":{"html":"<div class=\"paragraph\">\n<p>Due to the <a href=\"/security/advisory/2013-01-04/\">security vulnerability</a>, it is possible that the cryptographic key used to store secrets (such as various password, API tokens, anything else that the UI uses the password input field) in your Jenkins was compromised by someone who has HTTP access to your Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>To plug this hole, Jenkins 1.497 introduced a new mechanism to store secrets that make this kind of wide-spread problem less likely in the future. As you use Jenkins and save configurations of various Jenkins objects, configuration XML files are overwritten and they will start using this new encryption key.</p>\n</div>\n<div class=\"paragraph\">\n<p>However, some jobs may not get any configuration changes in a timely fashion, and in such a situation, the corresponding configuration XML files on the disk will be potentially at risk.</p>\n</div>\n<div class=\"paragraph\">\n<p>Therefore, Jenkins 1.497 offers a functionality to actively re-key the encrypted secrets in your entire <code>$JENKINS_HOME</code>. This process involves scanning <code>$JENKINS_HOME</code> recursively and find secrets encrypted by using the old (and therefore possibly compromised) key. Once found, they are replaced by the same plain text encrypted by the fresh key.</p>\n</div>\n<div class=\"paragraph\">\n<p>Because this involves modifying data in <code>$JENKINS_HOME</code>, the administrator should consider the following trade-offs in choosing when to run this.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"before-you-start\"><a class=\"anchor\" href=\"#before-you-start\"></a>Before you start</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"what-it-does\"><a class=\"anchor\" href=\"#what-it-does\"></a>What it does</h3>\n<div class=\"paragraph\">\n<p>As the re-keying process finds old data and rewrites them, files are backed up to <code>$JENKINS_HOME/jenkins.security.RekeySecretAdminMonitor/backups</code>. In an unlikely event that the rewrite process causes a problem down the road, you can get your original data back from this directory. Nonetheless, you may want to back up <code>$JENKINS_HOME</code> before you run the re-keying process.</p>\n</div>\n<div class=\"paragraph\">\n<p>The re-keying process works transparently to the running Jenkins instance. Updates of files are done atomically (by creating files in new names then rename into the original), so it will not affect the concurrent read by other parts of Jenkins. And if other parts of Jenkins so happen to be updating the same file, both will contain the data encrypted by the new key.</p>\n</div>\n<div class=\"paragraph\">\n<p>With that said, for those who want to be extra cautious, we provided an option to schedule the re-keying operation upon the next boot. Upon the boot, Jenkins will run the re-keying operation, and resumes the normal service only after this process is complete. From outside, this will look no different from the regular prolonged startup wait screen.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once started, the re-keying process recursively looks for files with the <code>.xml</code> extension in <code>$JENKINS_HOME</code>, which can take some time on a larger installation. To mitigate this, the recursion logic is designed to skip directories that are known not to contain any encrypted secrets. This includes \"workspace\", \"artifacts\", and \"plugins\".</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"what-youll-lose-once-you-re-key\"><a class=\"anchor\" href=\"#what-youll-lose-once-you-re-key\"></a>What you&#8217;ll lose once you re-key</h3>\n<div class=\"paragraph\">\n<p>Because older versions of Jenkins do not understand the new mechanism to encrypt secrets, rewritten configuration files cannot be read back by older Jenkins without loss of information. More specifically, it&#8217;ll fail to load the encrypted secrets but it&#8217;ll read back everything else OK.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you find yourself needing to downgrade after the re-keying operation, please restore the older files from <code>$JENKINS_HOME/jenkins.security.RekeySecretAdminMonitor/backups</code>.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"while-you-re-key\"><a class=\"anchor\" href=\"#while-you-re-key\"></a>While you re-key</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The re-keying operation is idempotent, in that you can run it multiple times without causing a harm. The new key is generated as soon as you launch Jenkins 1.497, and all that the re-keying process is doing is to overwrite the data to use this new key. For this reason, you can safely rerun the re-keying operation should one fail/abort in the middle.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you start running re-keying process either in the background or during the boot, you can monitor its progress by looking at <code>$JENKINS_HOME/jenkins.security.RekeySecretAdminMonitor/rekey.log</code>. For background re-keying operation, this log is visible by following the link in the \"Manage Jenkins\" page. The \"scanning\" log line is meant to be an indication of where the process currently is. It only prints one line for every 100 files scanned.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are in the middle of the background re-keying operation and found that you need to reboot/shutdown Jenkins, you can do so without harm. You just need to re-run the re-keying process later. The same thing applies if you are in the middle of the boot-time re-keying operation and found that you need to bring it to the operation right away. You simply kill the Jenkins process and restart. It&#8217;ll come up without running another re-keying operation.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"after-you-re-key\"><a class=\"anchor\" href=\"#after-you-re-key\"></a>After you re-key</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once the re-keying process is completed, the aforementioned backup directory should be moved off from the Jenkins controller file system to prevent future leakage of the sensitive data.</p>\n</div>\n<div class=\"paragraph\">\n<p>To really verify that the re-keying process didn&#8217;t cause any issues, you&#8217;ll have to reboot Jenkins one more time, so that fresh reads will be attempted from disk.</p>\n</div>\n<div class=\"paragraph\">\n<p>We apologize for your inconvenience.</p>\n</div>\n</div>\n</div>","id":"security/advisory/2013-01-04/re-keying.adoc","title":"Re-keying"}},"pageContext":{"id":"security/advisory/2013-01-04/re-keying.adoc"}},
    "staticQueryHashes": ["3649515864"]}