{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/author/romenrg",
    "result": {"data":{"author":{"avatar":{"childImageSharp":null},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/author/romenrg","twitter":"romenrg"},"allBlog":{"edges":[{"node":{"date":"2019-05-30T00:00:00.000Z","id":"0cba81fa-0a2a-5225-8fdf-6ce66f9aa4d5","slug":"/blog/2019/05/30/becoming-contributor-newbie-tickets/","strippedHtml":"Two months ago I published an introductory article on\nthe journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about\nthe multiple ways in which we can participate and contribute. Then, a first—​basic—​contribution I made to the site\nrepository was described.\n\nNow, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.\n\nGetting started with tickets and processes\n\nBeginners guide to contributing and Jenkins Jira\n\nReviewing the developer section in jenkins.io is probably the best starting point, and a\nreference link to keep handy. The beginners guide to contributing to Jenkins\ncan also be useful, since it points to different repositories, tools (such as the issue tracker) and governance documents.\nBesides, it describes best practices for commit messages, code style conventions, PR guidelines, etc.\n\nOnce we get a general understanding of the former and want to actually start coding, we may get stuck trying to come up\nwith something to work on.\n\nVisiting the Jenkins issue tracker, feels like the natural next\nstep, since it is full of potential bugs and enhancements that have already been reported by the community. However, it\nis quite easy to feel overwhelmed by the possibilities listed there. Bear in mind that in a 10+-year-old project like\nthis, most of the things that are reported are tricky for a newcomer to work on. For that reason, filtering by\nnewbie-friendly tickets is probably\nthe best idea.\n\nFigure 1. Screenshot displaying the list of newbie-friendly tickets in the Jenkins Jira\n\nSelecting a ticket\n\nIn my case, I spent some time reviewing the newbie-friendly tickets, until I found one\nthat seemed interesting to me and also looked like something I would be able to fix:\n\nFigure 2. Screenshot of the ticket I decided to work on\n\nProcesses\n\nAt this stage, when we have decided to take ownership of a ticket, it’s a good practice to let the rest of the community\nknow that we are planning to start working on it. We can do so easily, by assigning the ticket to ourselves (see the\n“ Assign ” button below the ticket summary).\n\nAssigning the ticket to ourselves in the Jenkins Jira will allow any other contributors to know that we are planning to\ntake care of the ticket; and in case they are also interested in contributing to it, they will know who to reach if they\nwant to coordinate work or ask for status. That said, it is worth mentioning that assigning a ticket to yourself does\nnot mean that other contributors cannot work on it from then onwards. Jenkins is an open-source project and anyone is\nwelcome to create their own PRs, so anybody can propose their own solution to the ticket. But as you can guess, if the\nticket is assigned to somebody, most people will probably reach the assignee before starting to work on it.\n\nRelated to the former, it is also important to bear in mind that we should not postpone work on the ticket for too long\nonce we have assigned the ticket to ourselves. Other potential contributors might be ignoring the ticket because they\nsee yourself assigned to it.\n\nOnce we are about to actually start working on the ticket, it is also a good practice to click the “ Start Progress ”\nbutton. This action will change the status to “ In progress ”, signaling to the community that we are currently working\non this particular ticket.\n\nSetting up the necessary stuff on our computer\n\nConfiguring, installing and testing\n\nAs described in the first article of this journey, the\ninitial step to start contributing to a particular repository is to fork it to our GitHub account, and then clone it to\nour local computer.\n\nAs usual, in the Jenkins core repository the CONTRIBUTING file\ndescribes the necessary steps to get the repository working locally. This includes installing the necessary development\ntools: Java Development Kit ( OpenJDK is the recommended choice), Maven and any IDE supporting\nMaven projects. Note that instructions to install JDK and Maven are linked in the contributing guidelines.\n\nOnce we have all the necessary tools installed and configured, we are ready to build Jenkins locally\nand also to run tests.\n\nGetting down to business\n\nReviewing ticket details\n\nNow that I was ready to start working on the ticket, I had to review it in more detail, to fully understand the problem.\n\nThe description of the ticket I was planning to work on included two links. The first one was to\na screenshot that showed the actual bug. It showed\nhow several non-compatible plugins were being selected when clicking “ All ”, even though the intended behavior was to\nonly select the compatible plugins. The second link was a reference to a code fragment\nthat showed other validations that had to be taken into account when checking if a plugin update was compatible or not\nwith the current installation.\n\nReproducing the issue locally\n\nEven though I had now understood the issue in better detail, I had not seen it myself live yet, so it seemed to me that\nthe next logical step was to reproduce it locally.\n\nTo reproduce the issue locally in our computer, we can either use the local war file that we can generate by\nbuilding Jenkins from the source code\nor we can download the latest Jenkins version available and run it locally. When I worked\non this ticket, the latest available version was 2.172 and, when I built if from the sources I saw version 2.173-SNAPSHOT,\nwhich was the next version, in which the community was already working on.\n\nIn general it is a good idea to reproduce bugs locally, not only to get a better understanding, but also to make sure\nthey are actual issues. It could always be an issue happening only on the reporter’s end (e.g. some user misconfiguration).\nOr it could be a ticket referencing an old issue that has been fixed already. This latest possibility didn’t sound that\nstrange to me, since the ticket was one month old. It could have been handled by someone else in the meantime, without\nnoticing the ticket existed. Or the contributor might have forgotten to update the ticket in the issue tracker after the\nfix was committed.\n\nSo, for all the reasons above, I ran the latest Jenkins version locally. From a terminal, I went to the\nfolder in which the war file was placed, and ran java -jar jenkins.war, which starts Jenkins locally on http://localhost:8080.\n\nFrom the home page I navigated to the Plugin Manager (clicking the “ Manage Jenkins ” link in the left hand side and\nthen selecting “ Manage Plugins ” in the list).\n\nIn the Manage Plugins page, the list of plugin updates appears. In my case, since I re-used an old JENKINS_HOME\nfrom an older installation, several plugins showed up in the list, requiring updates. That allowed me to test the behavior\nthat was supposed to be failing.\n\nWhen I clicked on the “Select all” option at the bottom, this is what I got:\n\nFigure 3. Screenshot showing the error, reproduced locally, after clicking “Select All”\n\nAs it had been reported in the ticket, the behavior was inconsistent. In a previous version, the behavior of the “ All ”\nselector had been changed (with the best intent), aiming to only check the compatible plugins. However, as can be seen\nin the screenshot, the behavior was not the expected one. Now, neither “all” nor “only compatible” plugins were being\nselected, since some plugins with compatibility issues were also being checked, unintentionally.\n\nFiguring out a fix\n\nWhen reading the conversation in the original PR in which the behavior of the “ All ” selector had been changed, I saw a\nsuggestion of having a separate “ Compatible ” selector, thus leaving the “ All ” selector with the traditional behavior.\nI liked the idea, so I decided to include it as part of my proposed change.\n\nAt this stage, I had a clear picture of the different things I needed to change. These included: 1) The UI, to add a new\nselector for “Compatible” plugins only, 2) the JS code that applied the changes to the interface when the selectors were\nclicked and 3) probably the back-end method that was determining if a plugin was compatible or not.\n\nApplying the change\n\nAs usual, and as it is also recommended in the contributing guidelines, I created a separate feature branch to work on\nthe ticket.\n\nAfter reviewing the code, I spent some time figuring out which pieces I needed to change, both in the back-end and also\nin the front-end. For more details about the changes I had to make, you can take a look at the changes in my PR.\n\nAs a basic summary, I learned that the classic Jenkins UI was built using Jelly\nand, after understanding its basics, I modified the index.jelly file to include the new selector, assigning the\nfunction that checked the compatible plugins to this new selector, and re-using the existing “toggle” function to set\nall checkboxes to true in the case of “ All ”. I also had to modify the behavior of the checkPluginsWithoutWarnings\nJavaScript function, to un-check the incompatible ones, since there was now an actual “ All ” selector that was not there\npreviously, and that un-check case was not being taken into account. Then, I created a new back-end Java method\nisCompatible, inside the UpdateSite.java class, which now calls all the different methods that check different\ncompatibilities and returns the combined boolean result. For this change, I included an automated test to verify the\ncorrect behavior of the method, contributing to the test coverage of the project. Finally, I modified the table.jelly\nfile to call the new back-end method from the UI, replacing the existing one that was not taking all cases into account.\n\nAs you can see, the change involved touching different technologies, but even if you face a similar situation in which\nyou are not familiar with some of them, my advice would be carry on, don’t let that stop you. As software engineers, we\nshould focus on our evergreen skills, rather than on knowing\nspecific technologies; adapting to whatever framework we have to use at a given moment, learning whatever we need about\nthe new technology to complete the task and applying cross-framework principles and best practices to provide a quality\nsolution.\n\nResult\n\nAfter the changes described above, the resulting UI includes a new option, and the corresponding behaviors of the three\nselectors work as expected:\n\nFigure 4. Screenshot of the new version, displaying the behavior achieved by clicking the new “Compatible” selector\n\nPublishing the change\n\nSubmitting a Pull Request\n\nIn the contributing guidelines of the Jenkins core repository there is also a section about proposing changes,\nwhich describes the necessary steps that have to be followed in order to create a Pull Request (PR) with our change.\n\nFurthermore, there is a PR template in\nthe repository, which will be loaded automatically when creating a new PR and that will serve as a basis for us to provide\nthe necessary information for the reviewers. We are expected to: include a link to the ticket, list the proposed changelog\nentries describing our changes, complete the submitter checklist and add mentions to the desired reviewers (if any).\n\nIn my case, I followed the template when creating my PR,\ncompleting all sections. I linked the Jira ticket, provided two proposed changelog entries, completed the submitter\nchecklist and added three desired reviewers (explaining why I thought their reviews would be valuable). I also linked\nthe original PR that was referenced in the ticket, to provide further context.\n\nFigure 5. Screenshot of the PR I submitted\n\nThe approve and merge process\n\nAs stated in the contributing guidelines, typically two approvals are needed for the PR to be merged; and it can take\nfrom a few days to a couple of weeks to get them. Sometimes, one approval from a reviewer and a 1-week delay without\nextra reviews is considered enough to set the PR as ready-for-merge. However, both the time-to-merge and the number\nof approvals necessary might vary, depending on the complexity of the change or the area of Jenkins core that it affects.\n\nAfter the necessary approvals have been received, a Jenkins core maintainer will set the PR as ready-for-merge, which\nwill lead to it being merged into the master branch when one of the following releases are being prepared.\n\nIn my case, I received a review by Daniel (the reporter of the ticket and one of my “desired reviewers”) the very day I\nsubmitted the PR (April 14th). He made several very useful suggestions, which led to changes from my side. After those\nchanges, Daniel made minor remarks and my PR got another review, which was its first approval. After a week had passed\nwithout further news, I added the remaining minor suggestions from Daniel and a few days later received another approval,\nto which Daniel’s final approval was added, leading the PR to be labeled ready-for-merge, being later merged the same\nday (April 26th).\n\nFigure 6. Screenshot of the final state of the PR, after being merged\n\nRelease\n\nFor every new release, repository maintainers will select a set of PRs that have already been labeled ready-for-merge,\nmerge them to master, prepare changelogs (often using the suggestions included in the PRs by the authors) and proceed with\nthe creation of the new release. There is no additional action required from Pull Request authors at this point.\n\nEvery week a new version of Jenkins is released, so when your PR is merged, your changes will—​most likely—​become part\nof the following weekly release of Jenkins.\n\nEventually, your changes will also reach the Long-term support (LTS) release, which is\na different release line, aimed for more conservative users. This release line gets synced with the weekly release by\npicking, every 12 weeks, a relatively recent weekly release as baseline for the new LTS release. In between, intermediate\nLTS releases are created only to include important bug fixes, cherry-picked from the weekly releases. New features are\ntypically delayed until the next baseline for the LTS release is defined.\n\nRegarding the example described in this post, it was released in Jenkins 2.175 (weekly release), soon after being\nmerged. And will probably be included in the next LTS, which should be released next month (June 2019).\n\nDone!\n\nAnd that’s it! We have now covered the whole lifecycle of a new proposed change to Jenkins core. We have reviewed the\nprocess from the very beginning, picking a ticket from the Jenkins issue tracker; all the way to the end, having our\nchange released in a new Jenkins version.\n\nIf you have never contributed but are willing to do so, I hope this article motivates you to go back to the list of\nnewbie-friendly tickets, find one that looks interesting to you, and follow the steps described above, until you see\nyour own change released in a new Jenkins version.\n\nRemember, don’t try to solve a complicated issue as your first ticket, there are plenty of easier ways in which you can\ncontribute, and every little helps!","title":"Becoming a Jenkins contributor: Newbie-friendly tickets","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/author/romenrg","twitter":"romenrg"}]}},{"node":{"date":"2019-03-29T00:00:00.000Z","id":"994d7fe1-0a77-5a87-a6ff-1ab920df5676","slug":"/blog/2019/03/29/becoming-contributor-intro/","strippedHtml":"As a software engineer, for many years I have used open source software (frameworks, libraries, tools…​) in the\ndifferent companies I have worked at. However, I had never been able to engage in an open-source project as a\ncontributor, until now.\n\nSince I made my first—​ridiculously simple—​commit into Jenkins, six months ago (in September, 2018), I have been\nattempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,\nchallenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often\ndifficult to know where to start and also difficult to come up with a plan to keep moving forward and contributing\nregularly, and in more meaningful ways over time.\n\nWhen it comes to the Jenkins project, I have encountered challenges that others trying to get into the community are\nlikely to encounter. For that reason, I have decided to go ahead and share my journey of becoming a more engaged Jenkins\ncontributor.\n\nI plan to publish roughly 1 post per month, describing this journey. I will attempt to start contributing to the pieces\nthat are easier to start with, transitioning towards more complex contributions over time.\n\nWhere to start\n\njenkins.io\n\nTo become a Jenkins contributor, the most obvious place to start looking at is jenkins.io. In the\ntop navbar there is a Community dropdown, with several links to different sections. The first entry,\nOverview, takes us to the “Participate and contribute” section.\n\nIn this section we get lots of information about the many ways in which we can engage with the Jenkins project and\ncommunity. Even though the intention is to display all the possible options, allowing the reader to choose, it can feel\na bit overwhelming.\n\nThe page is divided into two columns, the column on the left shows the different options to participate, while the\ncolumn on the right shows the different options to contribute.\n\nSuggestions to Participate\n\nIn the left column of the “Participate and contribute” page, there are several ideas on how to engage with the community,\nranging from communicating to reviewing changes or providing feedback.\n\nOne of the pieces that got me confused at first in this area were the communication channels. There are many different\nchannels for communication. There are several mailing lists and there are also IRC\nand Gitter channels.\n\nDuring my first attempts to get involved, I subscribed to many of the mailing lists and several IRC and Gitter channels,\nbut I quickly noticed that there is significant communication going on; and that most threads in the most active lists\nand channels are specific to issues users or developers have. So, unless your goal is to support other users right away\n(if you are an experienced Jenkins user already it might be the case) or you plan to ask questions that you already\nhave in mind, I would advise against spending too much time on this at first.\n\nEven though it is great to see how the community members support each other, the amount of communication might be\noverwhelming for a newcomer, and if you are also trying to contribute to the project (either with translations,\ndocumentation or code), following these conversations might not be the best way to start.\n\nSuggestions to Contribute\n\nIn the right column of the “Participate and contribute” page there are several ideas on how to contribute, mostly\ngrouped into: writing code, translating, documenting and testing.\n\nIn following posts, I will be going through all of these types of contributions, as well as through some of the\nsuggestions to participate, which include reviewing Pull Requests (PRs) or providing feedback (either reporting new\nissues or replicating cases other users have already described, providing additional information to help the maintainer\nreproduce and fix them).\n\nMy first contribution in this journey\n\nWhen looking at the “Participate and contribute” page, I noticed a couple of things in that page that I could help\nimprove. And I was actually planning to pick one of those as the first example of a contribution for this post. But\nwhen I was reading the contributing guidelines of the repository, I found an even easier contribution I could make,\nwhich I thought would be a great example to illustrate how simple it could be to start contributing. So I decided to go\nahead with it.\n\nThe website repository\n\nIn the ”Document” section there is a link to the\ncontributing guidelines of the jenkins.io repository.\nThe CONTRIBUTING file is a common file present in the root folder of most open-source-project repositories.\n\nFollowing the link to that file, I reached the jenkins.io repository, which is the one that contains the sources for\nthe corresponding website—​which also includes this blog. And, in fact, the contributing file was the first file I\nwanted to review, in order to learn more about how to contribute to the website.\n\nFound a broken link\n\nWhen reading the contributing file, I learned about the Awestruct static site generator, which is the tool used to\ntransform the AsciiDoc source files in the repo into a website. However, when I clicked the link to learn more about it, I noticed it was broken. The domain had expired.\n\nWhy not fix it?\n\nThis was the opportunity I chose to show other newcomers how easy it can be to start contributing.\n\nForking the repository\n\nThe first step, as usual, would be to fork the repository and clone it to my machine.\n\nApplying the change\n\nThe next step would be to apply the change to the corresponding file. To do so, I created a new branch\n“alternative-awestruct-link” and applied the change there:\n\nMaking sure everything builds correctly and tests pass\n\nEven though in this case my contribution was not to the actual website, but to the contributing guidelines (and for\nthat reason was unlikely to break anything), it is a best practice to get used to the regular process every\ncontribution should follow, making sure everything builds correctly after any change.\n\nAs stated in the contributing guidelines themselves, in order to build this repository we just have to run the default\n“make” target, in the root of the repository.\n\nOnce the command execution finishes, if everything looks good, we are ready to go to the next step: creating the PR.\n\nCreating the PR\n\nOnce my change had been committed and pushed to my repository, I just had to create the PR. We have an easy way to do so\nby just clicking the link that we get in our git logs once the push is completed, although we can create the PR directly\nthrough the GitHub UI, if we prefer so; or even use “hub”, the GitHub CLI, to do it.\n\nIn this case, I just clicked the link, which took me to the PR creation page on GitHub. Once there, I added a\ndescription and created the PR.\n\nWhen a PR to this repository is created, we notice there are some checks that start running. Jenkins repositories are\nconfigured to notify the “Jenkins on Jenkins”, which runs the corresponding CI pipelines for\neach repository, as described in the corresponding Jenkinsfile.\n\nOnce the checks are completed, we can see the result in the PR:\n\nAnd if we want to see the details of the execution, we can follow the “Show all checks” link:\n\nPR Review\n\nNow that the PR has been created and all automated checks are passing, we only have to wait for peer code reviews.\n\nOnce someone approves the PR and it is later merged, your contribution is integrated into the master branch of the\nrepository, becoming part of the next release.\n\nI have contributed!\n\nThis contribution I made is a trivial one, with very little complexity and it might not be the most interesting one if\nyou are trying to contribute code to the Jenkins project itself.\n\nHowever, for me, as the contributor, it was a great way to get familiar with the repository, its contributing\nguidelines, the technology behind the jenkins.io website; and, above anything else, to start “losing the fear” of\ncontributing to an open source project like Jenkins.\n\nSo, if you are in the same position I was, do not hesitate. Go ahead and find your own first contribution. Every little\ncounts!","title":"The journey of becoming a Jenkins contributor: Introduction","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/author/romenrg","twitter":"romenrg"}]}}]}},"pageContext":{"author":"romenrg","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}