{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/author/jrawlings",
    "result": {"data":{"author":{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8e8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg","srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/77b35/jrawlings.jpg 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/d4a57/jrawlings.jpg 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/68974/jrawlings.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/ef6ff/jrawlings.webp 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/8257c/jrawlings.webp 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/6766a/jrawlings.webp 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/22bfc/jrawlings.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rawlingsj","html":"<div class=\"paragraph\">\n<p>James has a passion for continuous delivery and software automation in general.  Continually looking at\nways to help improve developers experience for the cloud.  James works on the OSS project <a href=\"https://jenkins-x.io/\">Jenkins X</a></p>\n</div>","id":"jrawlings","irc":null,"linkedin":null,"name":"James Rawlings","slug":"/blog/author/jrawlings","twitter":"jdrawlings"},"allBlog":{"edges":[{"node":{"date":"2018-07-19T00:00:00.000Z","id":"e791a263-9144-5400-9cc7-12e369131b87","slug":"/blog/2018/07/19/jenkins-x-accelerate/","strippedHtml":"Jenkins X uses Capabilities identified by the \"Accelerate:  The Science Behind Devops\"\n\nJenkins X is a reimagined CI/CD implementation for the Cloud which is heavily influence by the\nState of DevOps reports and more recently the book\n\"Accelerate: The Science Behind Devops\" by\nNicole Forsgren,\nJez Humble and\nGene Kim\n\nYears of gathering data from real world teams and organisations which has been analyzed by inspiring thought leaders and data\nscientists from the DevOps world, \"Accelerate\" recommends a number of capabilities that Jenkins X is implementing so\nusers gain the scientifically proven benefits, out of the box. We’ve started documenting the capabilities that are available\ntoday and will continue as more become available.\n\nCredit: thanks to tracymiranda for the image\n\nUse version control for all artifacts\n\nThe Weaveworks folks coined the term GitOps which we love.  Any change to an environment, whether it be a new application,\nversion upgrade, resource limit change or simple application configuration should be raised as a Pull Request to Git, have\nchecks run against it like a form of CI for environments and approved by a team that has control over what goes into the\nrelated environment.  We can now enable governance and have full traceability for any change to an environment.\n\nRelated Accelerate capability:  Use version control for all production artifacts\n\nAutomate your deployment process\n\nEnvironments\n\nJenkins X will automatically create Git backed environments during installation and makes it easy to add new ones using\njx create environment.  Additionally when creating new applications via a quickstart ( jx create quickstart), Java based\nSpringBoot ( jx create spring) or importing existing applications ( jx import), Jenkins X will both automatically add\nCI / CD pipelines and setup the jobs, git repos and webhooks to enable an automated deployment process.\n\nOut of the box Jenkins X creates Staging and Production (this is customisable) permanent environments as well as temporary\nenvironments for preview applications from Pull Requests.\n\nPreviews Environments\n\nWe are trying to move as much testing, security, validation and experimentation for a change before it’s merged to master.\nWith the use of temporary dynamically created Preview Environments any pull request can have a preview version built and\ndeployed, including libraries that feed into a downstream deployable application.  This means we can code review, test,\ncollaborate better with all teams that are involved in agreeing that change can go live.\n\nUltimately Jenkins X wants to provide a way that developers, testers, designers and product managers can be as sure as they\ncan that when a change is merged to master it works as expected.  We want to be confident the proposed change does not\nnegatively affect any service or feature as well as deliver the value it is intended to.\n\nWhere Preview Environments get really interesting is when we are able to progress a PR through various stages of maturity and\nconfidence where we begin to direct a percentage of real production traffic like beta users to it.  We can then analyse the\nvalue of the proposed change and possible run multiple automated experiments over time using Hypothesis Driven Development.\nThis helps give us better understanding of how the change will perform when released to all users.\n\nRelated Accelerate capability: Foster and enable team experimentation\n\nUsing preview environments is a great way to introduce better test automation.  While Jenkins X enables this we don’t yet\nhave examples of automated tests being run against a preview environment.  A simple test would be to ensure the application\nstarts ok and Kubernetes liveness check pass for an amount of time. This relates to\n\nRelated Accelerate capability: Implement Test Automation\nRelated Accelerate capability: Automate your deployment process\n\nPermanent Environments\n\nIn software development we’re used to working with multiple environments in the lead up to a change being promoted to a live\nproduction environment.  Whilst this seems business as usual it can cause significant delays to other changes if for any\nreason that it is deemed not fit via some process that didn’t happen pre merge to master.  Subsequent commits then become\nblocked and can cause delay of urgent changes being promoted to production.\n\nAs above Jenkins X wants any changes and experiments to be validated before it is merged to master.  We would like changes in\na staging environment to be held there for a short amount of time before being promoted, ideally in an automated fashion.\n\nThe default Jenkins X pipelines provide deployment automation via environments.  These are customisable to suite your own\nCI / CD pipeline requirements.\n\nJenkins X recommends Staging should act as a near as possible reflection on production, ideally with real production data\nshadowed to it using a service mesh to understand the behaviour.  This also helps when developing changes in preview where we\ncan link to non production services in staging.\n\nRelated Accelerate capability: Automate your deployment process\n\nUse trunk-based development\n\nThe Accelerate book found that teams which use trunk based development with short lived branches performed better.  This has\nalways worked for the Jenkins X core team members so this was an easy capability for Jenkins X to implement when setting up\nGit repositories and CI/CD jobs.\n\nImplement Continuous Integration\n\nJenkins X sees CI as the effort of validating a proposed change via pull requests before it is merged to controller.  Jenkins X\nwill automatically configure source code repositories, Jenkins and Kubernetes to provide Continuous Integration of the box.\n\nImplement Continuous Delivery\n\nJenkins X sees CD as the effort of taking that change after it’s been merged to controller through to running in a live\nenvironment.  Jenkins X automates many parts in a release pipeline:\n\nJenkins X advocates the use of semantic versioning.  We use git tags to calculate the next release version which means we\ndon’t need to store the latest release version in the controller branch.  Where release systems do store the last or next version\nin Git repos it means CD becomes hard, as a commit in a release pipeline back to controller triggers a new release.  This results\nin a recursive release trigger.  Using a Git tag helps avoid this situation which Jenkins X completely automates.\n\nJenkins X will automatically create a released version on every merge to master which can then potentially progress\nthrough to production.\n\nUse loosely coupled architecture\n\nBy targeting Kubernetes users of Jenkins X can take advantage of many of the cloud features that help design and develop\nloosely coupled solutions.  Service discovery, fault tolerance, scalability, health checks, rolling upgrades, container\nscheduling and orchestration to name just a few examples of where Kubernetes helps.\n\nArchitect for empowered teams\n\nJenkins X aims to help polyglot application developers.  Right now Jenkins X has quickstarts and automated CI/CD setup with\nlanguage detection for Golang, Java, NodeJS, .Net, React, Angular, Rust, Swift and more to come.  What this also does is\nprovide a consistent Way of Working so developers can concentrate on developing.\n\nJenkins X also provides many addons, for example Grafana and Prometheus for automated metrics collection and visualisation.\nIn this example centralised metrics help understand how your applications behave when built and deployed on Kubernetes.\n\nDevPods are another feature which enables developers to edit source code in their\nlocal IDE, behind the scenes it is then synced to the cloud and rapidly built and redeployed.\n\nJenkins X believes providing developers automation that helps them experiment in the cloud, with different technologies and\nfeedback empowers them to make the best decisions - faster.\n\nFancy a closer look?\n\nMyself, James Strachan and\nRob Davies are going to be presenting and running workshops at\nDevOps World  | Jenkins World.  We’ll also be hanging out at the Jenkins X demo\narea so come and say hello and see what’s the latest cool and exiting things to come out of Jenkins X.  Use JWFOSS for 30%\ndiscount off registration\n\nWant to get involved?\n\nJenkins X is open source, the community mainly hangs out in the\nJenkins X Kubernetes slack channels and for tips on being more involved with Jenkins X\ntake a look at our contributing docs.  We’ve been helping lots of folks get into open source, learn\nnew technoligies and languages like golang.  Why not get involved?\n\nDemo\n\nIf you’ve not already seen it here’s a video showing a spring boot quickstart with automatic CI/CD pipelines and preview environments.","title":"Accelerate with Jenkins X","tags":["jenkinsx","developer","kubernetes"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8e8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg","srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/77b35/jrawlings.jpg 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/d4a57/jrawlings.jpg 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/68974/jrawlings.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/ef6ff/jrawlings.webp 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/8257c/jrawlings.webp 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/6766a/jrawlings.webp 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/22bfc/jrawlings.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rawlingsj","html":"<div class=\"paragraph\">\n<p>James has a passion for continuous delivery and software automation in general.  Continually looking at\nways to help improve developers experience for the cloud.  James works on the OSS project <a href=\"https://jenkins-x.io/\">Jenkins X</a></p>\n</div>","id":"jrawlings","irc":null,"linkedin":null,"name":"James Rawlings","slug":"/blog/author/jrawlings","twitter":"jdrawlings"}]}},{"node":{"date":"2018-05-08T00:00:00.000Z","id":"29ad061f-dba2-536d-91b4-878d290af36d","slug":"/blog/2018/05/08/jenkins-x-anchore/","strippedHtml":"Anchore provides docker image analysis for user defined acceptance policies to allow automated image validation and acceptance.\n\nAs developers we would like to know if a change we are proposing introduces a\nCommon Vulnerability and Exposure (CVE).\nAs operators we would like to know what running applications are affected if a new CVE is discovered.\n\nNow in Jenkins X pipelines, if we find an\nAnchore engine service running we will add the preview and release images to be analyzed.\nThis means we can look at any environment including previews (created from Pull Requests)\nto see if your application contains a CVE.\n\nUpgrade\n\nStart by checking your current Jenkins X version:\n\njx version\n\nIf your Jenkins X platform is older than 0.0.903, then first you will need to upgrade to at least 0.0.922:\n\njx upgrade cli\njx upgrade platform\n\nInstall addon\n\nYou can install the\nAnchore engine addon\nwhen you are in your Jenkins X team home environment.\n\njx env dev\njx create addon anchore\n\nThis will install the engine in a seperate anchore namespace\nand create a service link in the current team home environment\nso our pipeline builds can add docker images to Anchore for analysis.\n\nCreate an application\n\nYou can now create a new quickstart:\n\njx create quickstart\n\nList any CVEs\n\nOnce the build has run you will be able to check for CVEs in any environment incluing previews created for pull requests.\n\njx get cve --environment staging\n\nDemo\n\nHere’s a 4 minute video that demonstrates the steps above:\n\nUpgrading existing pipelines\n\nIf you have an existing application pipeline and and want enable image analysis you can update your Jenkinsfile,\nin the preview stage after the skaffold step add the line\n\nsh \"jx step validate --min-jx-version 1.2.36\"\nsh \"jx step post build --image \\$JENKINS_X_DOCKER_REGISTRY_SERVICE_HOST:\\$JENKINS_X_DOCKER_REGISTRY_SERVICE_PORT/$ORG/$APP_NAME:$PREVIEW_VERSION\"\n\nIn the master stage the add this line after the skaffold step\n\nsh \"jx step validate --min-jx-version 1.2.36\"\nsh \"jx step post build --image \\$JENKINS_X_DOCKER_REGISTRY_SERVICE_HOST:\\$JENKINS_X_DOCKER_REGISTRY_SERVICE_PORT/$ORG/$APP_NAME:\\$(cat VERSION)\"\n\nFor any questions please find us - we mainly hang out on Slack at\n#jenkins-x-dev - or see\njenkins-x.io/community for other channels.","title":"Jenkins X: Announcing CVE docker image analysis with Anchore","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8e8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg","srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/77b35/jrawlings.jpg 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/d4a57/jrawlings.jpg 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/68974/jrawlings.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/ef6ff/jrawlings.webp 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/8257c/jrawlings.webp 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/6766a/jrawlings.webp 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/22bfc/jrawlings.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rawlingsj","html":"<div class=\"paragraph\">\n<p>James has a passion for continuous delivery and software automation in general.  Continually looking at\nways to help improve developers experience for the cloud.  James works on the OSS project <a href=\"https://jenkins-x.io/\">Jenkins X</a></p>\n</div>","id":"jrawlings","irc":null,"linkedin":null,"name":"James Rawlings","slug":"/blog/author/jrawlings","twitter":"jdrawlings"}]}},{"node":{"date":"2018-04-16T00:00:00.000Z","id":"5bccde5f-c4ec-5989-8dc2-3f6097a019eb","slug":"/blog/2018/04/16/jenkins-x-explained-part1/","strippedHtml":"Jenkins X is an opinionated platform for providing CI / CD on top of\nKubernetes.\nWe’ve chosen a set of core applications that we install and wire together so things work out-of-the-box, providing a\nturn key experience. This blog aims to build on previous introductions to Jenkins X and provide a deeper\ninsight to what you get when you install Jenkins X.\n\nSo what happens? After downloading the jx CLI you will now be able to create clusters with public cloud providers\nor install onto an existing Kubernetes cluster.\n\nThis command will create a cluster on your cloud provider of choice.\n\njx create cluster\n\nAlternatively you can bring your own Kubernetes cluster and install Jenkins X on it:\n\njx install\n\nThat said, we’ve found that creating a new cluster on a public cloud such as GKE\nis a lot way easier to start as we can be sure of the state of the cluster.\nFor example we know that storage, networking and loadbalancers will be working as expected.\nCreating a cluster on GKE takes only a few minutes so it’s a great way to try things out as well as run your\nenterprise workloads.\n\nFor now lets assume we are using GKE. When jx create cluster has finished you will see some output in the\nterminal that also includes the default admin password to use when logging into the core applications below.\nThere is a flag --default-admin-password you can use to set this password yourself.\n\nAccessing applications\n\nWe automatically install an Nginx ingress controller running with an external loadbalancer pointing at it’s\nKubernetes service. We also generate all the Kubernetes Ingress rules using a golang library called\n\" exposecontroller\".\nThis runs as a Kubernetes Job triggered by a\nHelm hook once any application is installed to the cluster.\n\nUsing \"exposecontroller\" means we can control all the ingress rules for an environment using a single set of\nconfigurations, rather than each application needing to know how to expose the kubernetes service to the outside world.\nThis also means we can easily switch between HTTP and HTTPS plus support intregration with projects like\ncert-manager for auto generation of signed TLS certificates.\n\nEnvironments\n\nOne important point to make is Jenkins X aims to use terminology that developers are familiar with. That’s not\nto say we are changing Kubernetes fundamentals, it’s more that if you don’t know Kubernetes concepts then we aim\nto help you still adopt the cloud technology and pull back the curtain as you gain confidence and experience.\nTo that point, a core part of Jenkins X are \"environments\". An environment can have one or more applications running\nin it. In Kubernetes term an \"environment\" maps to the concept of a \"namespace\" in code.\n\nThe installation by default created three environments, this is customisable but by default we have a \"dev\", a \"staging\"\nand a \"production environment\". To list, select, or switch between these environments run:\n\njx env\n\nJenkins X core applications\n\nIn the \"dev\" environment we have installed a number of core applications we believe are required at a minimum\nto start folks off with CI/CD on Kubernetes. We can easily add to these core apps using Jenkins X addons but\nfor now lets focus on the core apps. Jenkins X comes with configuration that wires these services together,\nmeaning everything works together straight away. This dramatically reduces the time to get started with Kubernetes\nas all the passwords, environment variables and config files are all setup up to work with each other.\n\nJenkins — provides both CI and CD automation. There is an effort to decompose Jenkins over time to\nbecome more cloud native and make use of Kubernetes concepts around CRDs, storage and scaling for example.\n\nNexus — acts as a dependency cache for Nodejs and Java applications to dramatically improve build\ntimes. After an initial build of a SpringBoot application the build time is reduced from 12 mins to 4. We\nhave not yet but intend to demonstrate swapping this with Artifactory soon.\n\nDocker Registry — an in cluster docker registry where our pipelines push application images, we will\nsoon switch to using native cloud provider registries such as Google Container Registry, Azure Container\nRegistry or Amazon Elastic Container Registry (ECR) for example.\n\nChartmuseum — a registry for publishing Helm charts\n\nMonocular — a UI used for discovering and running Helm charts\n\nHelm\n\nWe learned a lot in our early days with fabric8 on Kubernetes and there were some projects from the ecosystem\nthat either weren’t around or (at the time) didn’t work with OpenShift, therefore we were restricted when\nmaking some design decisions. A couple of years on and now with Jenkins X we were able to look at other OSS\nprojects that have been flourishing, so I was very happy to start looking at Helm.\nHelm is a package manager for Kubernetes and allows easy installation and upgrades of applications.\n\nIt was pretty clear that for Jenkins to evolve and include deployments to the cloud we should embrace Helm\nand provide an opinionated experience that helps teams and developers. The core applications mentioned above\nmeans Jenkins X provides an out of the box integrated CI/CD solution for Helm.\n\nWe know that helm has limitations but with the work on\nHelm 3, the focus of the Kubernetes\nsig-apps group, the Kubernetes community and investment we see from key organisations such as Microsoft, we feel Helm\nis currently the best way to install and upgrade applications on Kubernetes.\n\nGitOps\n\nWe mentioned earlier that we setup three environments by default. What this means is for the staging and production\nenvironments we created:\n\nKubernetes namespace\n\nAn environment resource ( CustomResourceDefinition)\nin the dev environment which includes details of how applications are promoted to it and includes various team\nsettings.\n\nA git repository that we store what applications and their versions should be present in that environment.\nThese are stored in a Helm requirements.yaml file\n\nA Jenkins Pipeline job: explained in more detail below\n\nCI/CD for Environments\n\nHaving a Jenkins Pipeline Job for each environment means that Pull Requests to the git repo trigger a CI\njob.  For now that job performs basic validation but in the future will include ‘gates’ to ensure a change to that\nenvironment has passed expected checks such as QA tasks, gain enough approvals from the correct people, etc -\nYES CI for environments!\n\nOnce CI checks have passed the new application or version change can be merged. Only users that have karma\ncan merge the Pull Request and therefore we get RBAC plus traceability for our environment deployments.\n\nThis means every application manifest, their version and configuration including storage requirements, resource\nneeds and secrets for your environments are stored in Git repositories. Given a disaster recovery scenario this\nis exactly what you want.\n\nDid I just say secrets in Git? Yes! We will be providing a nicer experience to helps folks get set up but we\nourselves encrypt our secrets and  store them in Git, then decrypt them when we come to install and upgrade.\n\nHere’s our Git repo https://github.com/jenkins-x/cloud-environments/blob/a1edcc6/env-jx-infra/secrets.yaml.\n\nWe do all this with the help of a Helm wrapper called helm secrets.\nI’m working on a followup blog post with examples, better explanations and how to guides + add better integration\nwith JX in the coming weeks.\n\nFancy getting involved?\n\nWe mainly hangout in the jenkins-x Kubernetes slack channels and for tips on\nbeing more involved with Jenkins X take a look at our contributing docs\n\nIf you’ve not already seen it here’s a video showing the create cluster explained in this blog.","title":"Jenkins X Explained Part 1 - an integrated CI/CD solution for Kubernetes","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8e8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg","srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/77b35/jrawlings.jpg 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/d4a57/jrawlings.jpg 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/68974/jrawlings.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/ef6ff/jrawlings.webp 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/8257c/jrawlings.webp 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/6766a/jrawlings.webp 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/22bfc/jrawlings.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rawlingsj","html":"<div class=\"paragraph\">\n<p>James has a passion for continuous delivery and software automation in general.  Continually looking at\nways to help improve developers experience for the cloud.  James works on the OSS project <a href=\"https://jenkins-x.io/\">Jenkins X</a></p>\n</div>","id":"jrawlings","irc":null,"linkedin":null,"name":"James Rawlings","slug":"/blog/author/jrawlings","twitter":"jdrawlings"}]}}]}},"pageContext":{"author":"jrawlings","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}