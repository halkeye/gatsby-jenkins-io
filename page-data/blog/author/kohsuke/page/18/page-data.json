{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/author/kohsuke/page/18",
    "result": {"data":{"author":{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"},"allBlog":{"edges":[{"node":{"date":"2010-10-21T00:00:00.000Z","id":"d6bfdd2f-2091-5e76-b392-af86d9ff1a5e","slug":"/blog/2010/10/21/hudson-user-meet-up-in-jerusalem/","strippedHtml":"+\nIn tradition of taking advantages of my travel, https://www.tikalk.com/[Tikal], https://web.archive.org/web/20171202185204/https://exlibris.co.il/[ExLibris], and https://infradna.com/[InfraDNA] hosted a Hudson users meetup in Jerusalem yesterday. +\n +\n\n+\nimage:https://web.archive.org/web/20150327193330if_/http://www.gate1travel.com/israel-travel/Images/photos/JerusalemNight.jpg[image] +\n\n+\n+\n\n+\nThere were 10+ people from Jerusalem and Tel Aviv who came over, which was great given the lack of upfront advertisement (my fault.) I did a short presentation about the current state of the Hudson project and where we are focusing efforts on. Then we had a very energetic Q&A sessions that lasted like 3 hours. +\n +\n\n+\nimage:https://hudson-labs.org/sites/default/files/images/DSC00105.preview.JPG[image,width=400] +\n\n+\n+\n\n+\nPeople from Tikal told me that they deploy and manage a lot of Hudson instances, so their feedbacks in the workflow/choreography/orchestration related features were very useful. And as usual, people have some positively fascinating crazy use cases — One of the participants was from a semiconductor company that builds GPU, and he said he tests their graphics cards with Hudson, which involves multiple reboots of a computer, installing software, and making sure the card doesn't produce unwanted visual artifacts! +\n +\n\n+\nAfter the discussion, we went out for a nice dinner in a restraunt inside one of the old buildings (one of the many things Jerusalem is good at!), and by the time I got back to the hotel it was 11pm. You can see https://www.tikalk.com/alm/hudson-israeli-users-group-meetup[Ittay's take on this meetup here]. +\n +\n\n+\nimage:https://hudson-labs.org/sites/default/files/images/IMG_0199.JPG[image,height=400] +\n\n+\n+\n\n+\nOne of my concerns before starting this world-wide spontaneous Hudson users meetups was if enough people show up, but I'm starting to feel comfortable now that I've done several. Hudson appears to be entrenched everywhere, and people are interested in finding out their neighbors who are using them. So stay tuned for future Hudson meetups around the world — it might be in your city!","title":"Hudson User Meet-up in Jerusalem","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-09-02T00:00:00.000Z","id":"9cbddb28-b3f3-50db-851e-8dc3b544dec7","slug":"/blog/2010/09/02/recent-label-and-matrix-project-improvement/","strippedHtml":"Today, I’d highlight two recent improvements to the label and matrix projects.\n\nWhen you have multiple agents in your Hudson build farm, you can use labels to classify agents by their capability/environment/architecture/etc. For example, your one agent might have “32bit” and “windows” label, while another one might have “linux”, “ubuntu”, and “64bit.” (with plugins like platform-labeler plugin, you can attach labels automatically, too.) Or if you do Selenium testing, you might add browser names as labels to indicate which agent has which browser available.\n\nWith such set up, you then specify that such and such jobs can be only run on such and such labels. For example, you might say your “test-foo” job requires the “windows” label, while your “compile-bar” job might require the “macos” label.\nStarting 1.372, Hudson now lets you use boolean expressions here, instead of just specifying one label as the requirement. For example, your “seleniumTest-zot” job can now say it requires “windows&&firefox” since it’s meant to run on Windows with Firefox. Or if your job requires a shell script, you might say “!windows” to indicate that it has to be run somewhere that’s not Windows.\n\nLabels are also often used in the context of the multi-configuration project (a.k.a. matrix project.) In a multi-configuration project, you specify what to execute to build your project, then specify a number of “axes” that represents the variable and their possible values to execute a build. There are several different kinds of axes (and this is of course extensible), and one of them is the label axis.\n\nFor example, say you have a test suite that you want to run on Windows, Linux, and Solaris, to make sure it works correctly under all these environments. In such a case, you define one label axis, and tell Hudson that you have three possible values “windows”, “linux”, and “solaris.” When you build this project, Hudson will run your build three times by finding appropriate agent that carries the specified label.\n\nIn 1.373, you can now specify multiple label axes. For example, you might have a C++ project that needs to be compiled on various platforms. In such a case, you can define one label axis to be “windows”, “linux”, “solaris”, and you can define another label axis to be “32bit” and “64bit”. This will generate 3x2=6 combinations to be executed.\n\nSometimes the exhaustive combinations do not make sense. In such a case, you can use a filter boolean expression to eliminate some values. You can also use the same mechanism to create a sparse matrix — that is, you tell Hudson to reduce the coverage to 33%, and Hudson will eliminate every 2 out of 3 combinations.\n\nFinally, I’d like to thank Sandia National Laboratories for sponsoring this work, which made it possible for InfraDNA to provide this feature to the community. People often think that contributing code is the only way to give back to the project, but sponsoring features like this is another great way to do it.","title":"Recent label and matrix project improvement","tags":["development","core","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-09-01T00:00:00.000Z","id":"5b8f7dab-40ba-5e57-9d6a-7185e39ffb1a","slug":"/blog/2010/09/01/copenhagen-hudson-user-meetup/","strippedHtml":"September is turning into a meetup month for the Hudson community. In parallel to the meetup in Oslo and the meetup in JavaOne, Nokia and InfraDNA are hosting a meetup in Copenhagen on September 6th, Monday. Read on for the details.\n\nThe current tentative plan is to do a short \"state of the union / what’s new\" kind of presentation, then use the rest of the time for open mic Q&A, but if you have other ideas, or better yet if you want to do some talks, please let me know. I think the event will be fun.\n\nIf you plan on coming, please drop me a note, so that we can get some sense of the attendance.\n\nWhen: September 6th, 18:30\n\nWhere: Auditorium 1, Nokia Denmark A/S, København ( map)\n\nFood will be provided.","title":"Copenhagen Hudson User Meetup","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-08-31T00:00:00.000Z","id":"4e8f1e15-fa1f-5d4d-a8b5-f848a400e7f7","slug":"/blog/2010/08/31/hudson-at-javazone-meetup-in-oslo/","strippedHtml":"JavaZone is a big Java conference in Scandinavia, and Hudson is well represented there. On September 8th, Håkon Snøtun will be presenting \"Top 5 plugins for Hudson and Chuck Norris.\" and on September 9th, I’ll be presenting \"Getting more out of your Hudson.\"\n\nBut more importantly, what is a conference without drinking!? So in that spirit, InfraDNA will be organizing a Hudson User Meetup at The Scotsman from Sep 8th 19:30 ( website.) We’ll get together, have some drinks, and enjoy geeky conversations.\n\nSo if you are local or visiting Oslo for JavaZone, come join us. If you plan to join us at The Scotsman, please RSVP, and watch out for my twitter updates for any last minute time/location changes.","title":"Hudson at JavaZone, Meetup in Oslo ","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-08-29T00:00:00.000Z","id":"06839a62-5b96-5e18-85d0-180621816c20","slug":"/blog/2010/08/29/hudson-user-meet-up-in-copenhagen-oslo/","strippedHtml":"I’ll be in Copenhagen from 9/5-9/7 and in Oslo 9/8-9/9 to present in JavaZone. I’d like to take advantage of the opportunities and have user meet-up events in those cities. Depending on the number of participants, it could be just a drink in a bar, or a talk in a meeting room.\n\nSo if you are:\n\nin those cities,\n\navailable in the evening of 9/6, 9/8, or 9/9, and\n\nwilling to attend such an event,\n\n... then please let me know.\n\nAlso, if you have an office in those cities and willing to provide a space for an event, that would be extra appreciated!","title":"Hudson User Meet-up in Copenhagen/Oslo","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-08-26T00:00:00.000Z","id":"018d1a20-48d9-5c5c-a118-69b37fcf1358","slug":"/blog/2010/08/26/cloudbees-announce-hudson-as-a-service/","strippedHtml":"CloudBees announced the beta availability of their new Hudson-as-a-service \"HaaS\" today. I see this as yet another validation to Hudson, and as such, I welcome this new addition to the community and wish them well! — more companies betting on Hudson means we’ll get more investment to the project, which is all goodness for Hudson users. It’s been 5 months since I left Oracle to start InfraDNA, and I was initially worried about a possible negative impact on adoption, but instead Hudson has shown with no sign of slowing down (see picture on the right, from Andrew’s report, which shows # of estimated active installations that participates to our usage stats survey). And InfraDNA is going well too - we’ve helped companies big and small to improve their Hudson usage/adoption, and our commercial value-add Hudson distribution is getting plenty of interest.\n\nHosted Hudson offers an interesting trade-off, compared to on-premises Hudson. On the plus side, given the current hourly pricing of public clouds like EC2 and Rackspace, you get a better pricing model, as CloudBees charge by minutes. You also get rid of machines and upfront cost, which is great for small business. On top of that, you can also expect them to gradually develop more value-adds and better integration to various other pieces, which can get really interesting.\n\nOn the down side, you have less control over the environment that runs the builds, and you do not have access back to your intranet environment (think databases that you need to talk to, for example.) Also, in the current pricing (8.5 cents/hour of EC2 vs 1 cent/minute of CB), if your build takes longer than 9 minutes, you’ll save more by just using Hudson EC2 plugin.\n\nOn a related note, I think one of the sweet spots is Hudson that’s well integrated with on-premises cloud solution. As you can see in the discussion with Liferay Hudson setup, with sufficient load it gets cheaper to have your own hardware, and many companies need some degree of control to the build/test environment that matches with their production environment. Plus with those on-premises virtualized environments, you can do snapshots and forks, which can be made to do very interesting things.\n\nFinally, I think the part that everyone can agree on is that the elasticity of build environment is hugely useful to the CI environment, as I discussed in my JavaOne 2009 talk ( slides.) I’m very happy to see that the foundation work we’ve made in Hudson for this is getting validated more and more, and I think the added elasticity will drive a lot more changes in Hudson and more broadly into the way we develop software. It is an exciting time!","title":"CloudBees announce Hudson-as-a-Service","tags":["general","core"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-08-20T00:00:00.000Z","id":"685bfc55-97fd-5448-894a-707a72830f64","slug":"/blog/2010/08/20/hudson-sauce-ondemand-webinar/","strippedHtml":"On September 1st, I’ll be presenting in a Sauce Labs webinar about Hudson and Sauce OnDemand. The talk will discuss how Hudson can be used with Sauce OnDemand, naturally, but it’ll also cover broader Hudson/Selenium integrations.\n\nPlease register to this free event, and looking forward to seeing to you virtually.","title":"Hudson / Sauce OnDemand webinar","tags":["general","news"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-08-11T00:00:00.000Z","id":"f277d4c3-07e9-5f66-9263-d554ef23f136","slug":"/blog/2010/08/11/quiet-period-feature/","strippedHtml":"Commits often come in a burst. This seems to happen mainly for two reasons — people sometimes forget to commit some files, and in the tranquility of waiting for your SCM to finish a commit, people sometimes realize the problems in the commit and they quickly make follow-up changes. The conventional wisdom is that the CI server should wait for the burst to finish before attempting a build. This is said to reduce the chance of having broken build, and it is also sometimes useful in reducing the average turn-around time for builds that take longer.\n\nAs such, Hudson is capable of waiting for a commit burst to be over before it triggers a new build, and this feature is called \"quiet period.\" There are two parts in Hudson that interacts with the quiet period. One is the SCM polling behavior and the other is the queue.\n\nThe queue portion of the quiet period is straight-forward. When a build is scheduled into the queue with quiet period, the build will sit in the queue until the quiet period expires. If during this period, additional attempts are made to put the same build in the queue, the quiet period resets to its initial value. For example, if the quiet period is 5 minutes, and the build is put into the queue 9:00am and 9:03am, the actual build will only happen after 9:08am. Thus another way to think of the quiet period is that you are requiring a certain period of inactivity.\n\nThe above applies to all the mechanisms in Hudson that puts builds into the queue. This includes REST API call, CLI call, downstream triggers, and SCM pollings. So if you implement some kind of a \"push\" mechanism in your SCM to notify Hudson of a new commit, then you get the desired effect by just setting the quiet period in Hudson, and those push scripts don’t have to do anything tricky.\n\nIt is also possible for some of those to override the quiet period configured in the project. For example, when you click \"Build Now\" button in your browser, your browser is making a REST API call, but with the quiet period of zero. I used to run a \"push\" script that looks into a commit message and overrides the quiet period by taking advantages of this feature.\n\nThe other portion of the quiet period that often matters is the SCM polling behaviour. Up until Hudson 1.346, the way Hudson defined the SCM abstraction made it impossible for SCMs to correctly report newly detected commits since the last polling. Instead, it was only possible to report if the repository is newer than the workspace. As a result, if the polling interval is set shorter than the quiet period, the build stayed in the quiet period forever. This was tracked in HUDSON-2180.\n\nHudson 1.346 fixed this issue, and so if you are using a newer version of Hudson and SCM plugins that take advantage of this improvement, then everything works as expected. Otherwise, avoid setting quiet period longer than the polling interval.","title":"Quiet Period Feature","tags":["general","core","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}}]}},"pageContext":{"author":"kohsuke","limit":8,"skip":136,"numPages":19,"currentPage":18}},
    "staticQueryHashes": ["3649515864"]}