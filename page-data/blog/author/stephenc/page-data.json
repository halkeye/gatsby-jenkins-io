{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/author/stephenc",
    "result": {"data":{"author":{"avatar":null,"blog":null,"github":"stephenc","html":"","id":"stephenc","irc":null,"linkedin":null,"name":"Stephen Connolly","slug":"/blog/author/stephenc","twitter":"connolly_s"},"allBlog":{"edges":[{"node":{"date":"2017-02-06T00:00:00.000Z","id":"46885786-902f-55cb-b263-cae8df8f0611","slug":"/blog/2017/02/06/scm-api-2-take2/","strippedHtml":"In January we\nannounced the release of SCM API 2.0.\nAfter the original release was published we identified four new high-impact\nissues.  We decided to remove the new versions of the plugins from the update\ncenter until those issues could be resolved. The issues have now been resolved\nand the plugins are now available from the update center.\n\nSummary for busy Jenkins Administrators\n\nUpgrading should make multi-branch projects much better.  When you are ready to\nupgrade you must ensure that you upgrade all the required plugins.  If you miss\nsome, just upgrade them and restart to fix the issue. And of course, it’s\nalways a good idea to take a backup of your JENKINS_HOME before upgrading any\nplugins.\n\nIn the list below, version numbers in bold indicate a change from the\noriginal version in the\noriginal announcement\n\nFolders Plugin\n\n5.17 or newer\n\nSCM API Plugin\n\n2.0.2 or newer\n\nBranch API Plugin\n\n2.0.2 or newer\n\nGit Plugin\n\nThis depends on the exact release line of the Git plugin that you are using.\n\nFollowing the 2.6.x release line: 2.6.4 or newer\n\nFollowing the 3.0.x release line ( recommended): 3.0.4 or newer\n\nMercurial Plugin\n\n1.58 or newer\n\nGitHub Branch Source Plugin\n\n2.0.1 or newer\n\nBitBucket Branch Source Plugin\n\n2.0.2 or newer\n\nGitHub Organization Folders Plugin\n\n1.6\n\nPipeline Multibranch Plugin\n\n2.12 or newer\n\nIf you are using the Blue Ocean plugin\n\nBlue Ocean Plugin\n\n1.0.0-b22 or newer\n\nOther plugins that may require updating:\n\nGitHub API Plugin\n\n1.84 or newer\n\nGitHub Plugin\n\n1.25.0 or newer\n\nIf you upgrade to Branch API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins and you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.\n\nThe solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.\n\nAfter an upgrade you will see the data migration warning (see the screenshot in\nJENKINS-41608 for an\nexample) this is normal and expected.  The unreadable data will be removed by\nthe next scan / index or can be removed manually using the Discard Unreadable\nData button.  The warning will disappear on the next restart after the\nunreadable data has been removed.\n\nPlease update to the versions listed above. If you want to know more about the\nissues and how they were resolved, see the next section.\n\nAnalysis of the issues\n\nThe issues described below are resolved with these plugin releases:\n\nFolders Plugin: 5.17\n\nSCM API Plugin: 2.0.2\n\nBranch API Plugin: 2.0.2\n\nGit Plugin: Either 2.6.4 or 3.0.4\n\nGitHub Branch Source Plugin: 2.0.1\n\nBitBucket Branch Source Plugin: 2.0.2\n\nPipeline Multibranch Plugin: 2.12\n\nJENKINS-41121: GitHub Branch Source upgrade can cause a lot of rebuilds :\n\nMigration of GitHub branches from 1.x to 2.x resulted in a change of the\nimplementation class used to identify branches.  Some other other bugs in\nBranch API had been fixed and the combined effect resulted in a rebuild of all\nGitHub Branches (not PRs) after an upgrade to GitHub Branch Source Plugin\n2.0.0.  This rebuild was referred to as a \"build storm\".\n\nResolution:\n\nThe SCM API plugin was enhanced to add an extension point that allows for a second round of data migration when upgrading.\n\nThe second round of data migration allows plugins implementing the SCM API contract to fix implementation class issues in context.\n\nThe Branch API plugin was enhanced to use this new extension point.\n\nThe GitHub Branch Source plugin was enhanced to provide an implementation of this extension point.\n\nJENKINS-41255: Upgrading from a navigator that did not assign consistent source ids to a version that does assign consistent source ids causes a build storm on first scan :\n\nThe GitHub Branch Source and BitBucket Branch Source plugins in 1.x were not\nassigning consistent IDs to multi-branch projects discovered in an Organization\nFolder.  Both plugins were fixed in 2.0.0 to assign consistent IDs as a change\nof ID would result in a rebuild of all projects.  What was missed is that the\nvery first scan of an Organization Folder after an upgrade will change the\nrandomly assigned ID assigned by the 1.x plugins into the consistent ID\nassigned by the 2.0.0 plugins and consequently trigger a rebuild of all\nbranches. This rebuild was referred to as a \"build storm\".\n\nResolution:\n\nThe Branch API plugin was enhanced to detect the case where a branch source has\nbeen changed but the change is only changing the ID.  When such changes are\nidentified, the downstream references of the ID are all updated which will\nprevent a build storm.\n\nJENKINS-41313: On first index after upgrade to 2.0.0 all open PRs are rebuilt :\n\nThe BitBucket Branch Source 1.x did not store all the information about PRs\nthat is required by the SCM API 2.0.x model.  This could well have resulted in\nsubtle effects when manually triggering a rebuild of a merge PR if the PR’s\ntarget branch has been modified after the PR branch was first detected by\nJenkins. Consequently, as the information is required, BitBucket Branch Source\nplugin 2.0.0 populated the information with dummy values which would force the\ncorrect information to be retrieved.  The side-effect is that all PR branches\nwould be rebuilt.\n\nResolution:\n\nThe changes in SCM API 2.0.2 introduced to resolve JENKINS-41121 provided a path to resolve this issue without causing a rebuild of all PR branches.\n\nThe BitBucket Branch Source plugin was enhanced to provide an implementation of the new SCM API extension point that connects to BitBucket and retrieves the missing information.\n\nJENKINS-41124: Can’t get a human readable job name anymore :\n\nDuring initial testing of the Branch API 2.0.0 release an issue was identified\nwith how Organization Folders handled unusual names.  None of the existing\nimplementations of the SCMNavigator API could generate such unusual names due\nto form validation on GitHub / BitBucket replacing unusual characters with -\nwhen creating a repository.\n\nIt would be irresponsible to rely on external services sanitizing their input\ndata for the correct operation of Organization Folders.  Consequently, in\nBranch API 2.0.0 the names were all transformed into URL safe names, with the\noriginal URLs still resolving to the original projects so that any existing\nsaved links would remain functional.\n\nQuite a number of people objected to this change of URL scheme.\n\nResolution:\n\nThere has been a convention in Jenkins that the on-disk storage structure for\njobs mirrors the URL structure. This is only a convention and there is nothing specific in the code that\nmandates following the convention.\n\nThe Folders Plugin was enhanced to allow for computed folders (where the item\nnames are provided by an external source) to provide a strategy to use when\ngenerating the on-disk storage names as well as the URL component names for\nthe folder’s child items.\n\nThe Branch API plugin was enhanced to use this new strategy for name transformation.\n\nThe net effect of this change is that the URLs remain the same as for 1.x but\nthe on-disk storage uses transformed names that are future proofed against\nany new SCMNavigator implementations where the backing service allows names\nthat are problematic to use as filesystem directory names.\n\nSide-effect:\n\nThe Branch API 2.0.0 approach handled the transformation of names by renaming the items using the Jenkins Item rename API.\n\nThe Branch API 2.0.2 approach does not rename the child items as it is only the on-disk storage location that is moved.\n\nThis means that the Jenkins Item rename API cannot be used.\n\nAt this time, the only known side-effect is in the Job Configuration History plugin.\nThe configuration history of each child item will still be tracked going\nforward after the upgrade.  The pre-upgrade configuration history is also\nretained.  Because the Jenkins Item rename API cannot be used to flag the\nconfiguration file location change, there is no association between the\npre-upgrade history chain and the post-upgrade history chain.","title":"SCM API 2.0 Release Take 2","tags":["development","plugins"],"authors":[{"avatar":null,"blog":null,"github":"stephenc","html":"","id":"stephenc","irc":null,"linkedin":null,"name":"Stephen Connolly","slug":"/blog/author/stephenc","twitter":"connolly_s"}]}},{"node":{"date":"2017-01-17T00:00:00.000Z","id":"23308d18-32ba-5461-b5aa-74f746e5049f","slug":"/blog/2017/01/17/scm-api-2.0-release/","strippedHtml":"The regressions\ndiscovered after release have now been resolved and this post has been updated with the correct plugin version numbers.\n\nSee this post for more details.\n\nWe are announcing the\nSCM API\n2.0.x and\nBranch API\n2.0.x release lines.\n\nDownstream of this there are also some great improvements to a number of popular plugins including:\n\nGitHub Branch Source\n\nBitBucket branch source\n\nGit\n\nMercurial\n\nPipeline Multibranch\n\nGitHub Organization Folders\n\nThere are some gotcha’s that Jenkins administrators will need to be aware of.\n\nAlways take a backup of your JENKINS_HOME before upgrading any plugins.\n\nWe want to give you the whole story, but the take home message is this:\n\nWhen updating the\nSCM API\nand/or\nBranch API\nplugins to the 2.0.x release lines, if you have any of the\nGitHub Organization Folders,\nGitHub Branch Source\nand/or\nBitBucket branch source\nplugins installed then you must upgrade them all to 2.0.x at the same time or Bad Things™ will happen.\n\n— A Jenkins Administrator\n\nDo NOT upgrade some of these plugins but not others!\nDoing so may cause your jobs to fail to load.\n\nIf you don’t care about the hows and whys, you can just skip down to this section but if you are curious…​ here we go!\n\nThe back-story\n\nWay back in September 2013 we announced the\nLiterate plugin,\nas an experimental new way of modeling branch development in Jenkins.\n\nWhen you are performing an experiment, the recommendation is to do just enough work to let you perform the test.\nHowever, the culture in Jenkins is to always try and produce reusable components that others can use in ways you have not anticipated.\n\nSo when releasing the initial version of the\nLiterate plugin\nwe also separated the Literate specific bits from the SCM specific concepts and multi-branch concepts.\nThese were lower level concepts were organized into the following plugins:\n\nSCM API -\nwhich was intended to be a plugin to hold a next generation API for interacting with source control systems.\n\nBranch API -\nwhich was intended to be a plugin to hold the multi-branch functionality that was abstracted from the usage by the Literate plugin.\n\nIn addition, we released updates to three of the more common SCM plugins which included implementations of the SCM API:\n\nGit plugin\n\nSubversion plugin\n\nMercurial plugin\n\nWhile there was some interest in the Literate plugin, it did not gain much traction - there are only 39 Jenkins instances running the Literate plugin as of December 2016.\n\nIn terms of the reusable components, we had only made a minimal implementation with some limitations:\n\nVery basic event support - events can only trigger a re-scan of the entire repository.\nThis was acceptable at the time because the only three implementations use a local cache of the remote state so re-scanning is quick.\n\nNo implementation of the SCMFileSystem API.\nAs a result it is not possible for plugins like\nPipeline Multibranch\nto get the Jenkinsfile from the remote repository without needing to checkout the repository into a workspace.\n\nNo documentation on how plugin developers are supposed to implement the SCM API\n\nNo documentation on how plugin developers are supposed to consume the SCM API (if they wanted to do something like Branch API but not the same way as Branch API)\n\nNo documentation on how plugin developers are supposed to implement the Branch API to create their own multi-branch project types\n\nNo documentation on for users on how the Branch API based project types are expected to work.\n\nRoll forward to November 2015 and Jenkins Pipeline got a release of the\nPipeline Multibranch.\nIt seems that pairing Pipeline with Branch API style multi-branch is much more successful than Literate - there are close to 60,000 instances running the pipeline multi-branch plugin as of December 2016.\n\nThere also were two new SCM plugins implementing the SCM API:\n\nGitHub Branch Source Plugin\n\nBitBucket Branch Source Plugin\n\nUnlike the previous implementations of the SCM API, however, these plugins do not maintain a local cache of the repository state.\nRather they make queries via the GitHub / BitBucket REST APIs on demand.\n\nThe above design decision exposed one of the initial MVP compromises of the SCM API plugin: very basic event support.\nUnder the SCM API 1.x model, the only event that an SCMSource can signal is something changed, go look at everything again.\nWhen you are accessing an API that only allows 5,000 API calls per hour, performing a full scan of the entire repository just to pick up a change in one branch does not make optimum usage of that 5,000 calls/hour rate limit.\n\nSo we decided that perhaps the SCM API and Branch API plugins have left their Minimum Viability Experiment state and the corresponding limitations should be addressed.\n\nEnter SCM API 2.0.x and Branch API 2.0.x\n\nSo what has changed in the\nSCM API\n2.0.x and\nBranch API\n2.0.x release lines?\nThese plugin releases include:\n\ndocumentation on how plugin developers are supposed to\nimplement the SCM API\n\ndocumentation on how plugin developers are supposed to\nconsume the SCM API\n(if they wanted to do something like Branch API but not the same way as Branch API)\n\ndocumentation on how plugin developers are supposed to\nimplement the Branch API\nto create their own multi-branch project types\n\ngeneric documentation for users on\nhow Branch API based project types are intended to work\n\na full featured\nevent system\nthat allows implementers to provide fine grained notifications to consumers\n\nlots\nand\nlots\nof new automated tests\n\na mock implementation\nof the SCM API to help consumers of the SCM API test their usage.\n\nIn addition, we have upgraded the following plugins to include the new fine-grained event support:\n\nGit Plugin\n\nMercurial Plugin\n\nOk, that was the good news.\nHere is the bad news.\n\nWe found out that the GitHub Branch Source and BitBucket Branch Source plugins had made invalid assumptions about how to implement the SCM API.\nTo be clear, this was not the plugin developers fault: at the time there was no documentation on how to implement the SCM API.\n\nBut fixing the issues that we found means that you have to be careful about which specific combinations of plugin versions you have installed.\n\nSCM API Plugin\n\nTechnically, the 2.0.x line of this plugin is both API and on-disk compatible with plugins compiled against older version lines.\n\nHowever, the 1.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins have hard-coded assumptions about internal implementation of the SCM API that are no longer valid in the 2.0.x line.\n\nIf you upgrade to SCM API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins and you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.\n\nThe solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.\n\nIf you upgrade the SCM API plugin to the 2.0.x line and do not upgrade the Branch API plugin to the 2.0.x line then you will not get any of the benefits of the new version of the SCM API plugin.\n\nBranch API Plugin\n\nThe 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.\nTechnically, the API is compatible with plugins compiled against older version lines.\n\nThe 1.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins have implemented hacks that make assumptions about internal implementation of the Branch API that are no longer valid in the 2.0.x line.\n\nThe Pipeline Multibranch plugin made a few minor invalid assumptions about how to implement a Multibranch project type.\nFor example, if you do not upgrade the Pipeline Multibranch plugin in tandem then you will be unable to manually delete an orphaned item before the orphaned item retention strategy runs, which should be significantly less frequently with the new event support.\n\nIf you upgrade to Branch API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins and you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.\n\nThe solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.\n\nGit Plugin\n\nThe new releases of this plugin are both API and on-disk compatible with plugins compiled against the previous releases.\n\nThe 2.0.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins require that you upgrade your Git Plugin to one of the versions that supports SCM API 2.0.x.\nIn general, the required upgrade will be performed automatically when you upgrade your GitHub Branch Source and BitBucket Branch Source plugins.\n\nMercurial Plugin\n\nThe new release of this plugin is both API and on-disk compatible with plugins compiled against the previous releases.\n\nThe 2.0.x line of the BitBucket Branch Source plugins require that you upgrade your Mercurial Plugin to the 2.0.x line.\nIn general, the required upgrade will be performed automatically when you upgrade your  BitBucket Branch Source plugins.\n\nBitBucket Branch Source Plugin\n\nThe 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.\n\nGitHub Branch Source Plugin\n\nThe 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.\n\nIf you upgrade to GitHub Branch Source 2.0.x and you have the GitHub Organization Folders plugin installed, you must upgrade that plugin to the tombstone release.\n\nGitHub Organization Folders Plugin\n\nThe functionality of this plugin has been migrated to the GitHub Branch Source plugin.\nYou will need to upgrade to the tombstone release in order to ensure all the data has been migrated to the classes in the GitHub Branch Source plugin.\n\nOnce you have upgraded to the tombstone version and all GitHub Organization Folders have had a full scan completed successfully, you can disable and uninstall the GitHub Organization Folders plugin.\nThere will be no more releases of this plugin after the tombstone.\nThe tombstone is only required for data migration.\n\nSummary for busy Jenkins Administrators\n\nUpgrading should make multi-branch projects much better.\nWhen you are ready to upgrade you must ensure that you upgrade all the required plugins.\nIf you miss some, just upgrade them and restart to fix the issue.\n\nFolders Plugin\n\n5.16 5.17 or newer\n\nSCM API Plugin\n\n2.0.1 2.0.2 or newer\n\nBranch API Plugin\n\n2.0.0 2.0.2 or newer\n\nGit Plugin\n\nEither 2.6.2 2.6.4 or newer in the 2.6.x line or 3.0.2 3.0.4 or newer\n\nMercurial Plugin\n\n2.0.0 or newer\n\nGitHub Branch Source Plugin\n\n2.0.0 2.0.1 or newer\n\nBitBucket Branch Source Plugin\n\n2.0.0 2.0.2 or newer\n\nGitHub Organization Folders Plugin\n\n1.6\n\nPipeline Multibranch Plugin\n\n2.10 2.12 or newer\n\nIf you are using the Blue Ocean plugin\n\nBlue Ocean Plugin\n\n1.0.0-b22 or newer\n\nOther plugins that may require updating:\n\nGitHub API Plugin\n\n1.84 or newer\n\nGitHub Plugin\n\n1.25.0 or newer\n\nAfter an upgrade you will see the data migration warning (see the screenshot in JENKINS-41608 for an example) this is normal and expected.\nThe unreadable data will be removed by the next scan / index or can be removed manually using the Discard Unreadable Data button.\nThe warning will disappear on the next restart after the unreadable data has been removed.\n\nSummary for busy Jenkins users\n\nSCM API 2.0.x adds fine-grained event support.\nThis should significantly improve the responsiveness of multi-branch projects.\nThis should significantly reduce your GitHub API rate limit usage.\n\nIf you are using the\nGitHub Branch Source\nor\nGitHub Organization Folders\nplugins then upgrading will significantly reduce the API calls made by Jenkins to GitHub.\n\nIf you are using any of the upgraded SCM plugins (e.g. Git, Mercurial, GitHub Branch Source, BitBucket Branch Source) then upgrading will significantly improve the responsiveness to push event notifications.\n\nSummary for busy SCM plugin developers\n\nYou should read the new\ndocumentation\non how plugin developers are supposed to implement the SCM API\n\nWhere to now dear Literate Plugin\n\nThe persistent reader may be wondering what happens now to the Literate plugin.\n\nFor me, the logical heir of the Literate Plugin is the\nPipeline Model Definition plugin.\nThis new plugin has the advantage of an easy to read pipeline syntax with the extra functionality that I suspect was preventing people from adopting Literate.\n\nThe good news is that the Pipeline Model Definition already has 5000 installations as of December 2016 and I expect up-take to keep on growing.","title":"SCM API turns 2.0 and what that means for you","tags":["development","plugins"],"authors":[{"avatar":null,"blog":null,"github":"stephenc","html":"","id":"stephenc","irc":null,"linkedin":null,"name":"Stephen Connolly","slug":"/blog/author/stephenc","twitter":"connolly_s"}]}}]}},"pageContext":{"author":"stephenc","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}