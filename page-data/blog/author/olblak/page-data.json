{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/author/olblak",
    "result": {"data":{"author":{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/author/olblak","twitter":"0lblak"},"allBlog":{"edges":[{"node":{"date":"2021-09-20T00:00:00.000Z","id":"4a603f29-d1fa-5828-bebd-39a9d9b5c6b1","slug":"/blog/2021/09/20/election-period-opened/","strippedHtml":"Dear all,\n\nTime flies and the Jenkins elections period is here.\n\nThis year, two board seats and all officer positions are up for election.\nThanks, Oleg Nenashev and Ullrich Hafner who led the Jenkins project as board members for the last two years.\nThanks, Tim Jacomb, Daniel Beck, Mark Waite for your dedication as officers over the past year.\n\nWe already had two successful editions in a row. I want us to continue on that path.\nThis is a tremendous opportunity for community members to influence the direction of the project for the next two years.\nTo make this year’s election even better, we slightly modified the process by leveraging our new community platform aka community.jenkins.io.\n\nTo participate in the election, we ask every Jenkins community member to have an account on community.jenkins.io.\nYou can either reuse your Github account or create a new discourse account specific to community.jenkins.io.\nThe second requirement is to be able to showcase at least one contribution done before the first of September 2021.\nAs mentioned on jenkins.io.io/participate, they are many different ways to contribute to Jenkins and for many of them, it’s very difficult to measure.\nTherefore we’ll trust participants and will not require that they provide evidence of contribution as part of their voter registration. We reserve the right to ban the specific account from the election process if we identify abuse.\nThe election works in three stages:\n\nIdentify voters and nominees\n\nVoting period\n\nAnnounce results\n\nVoters\n\nTo invite participants to vote, we need a list of email’s addresses that we would share with the Condorcet Internet Voting Service.\nTherefore we ask every community member who matches the requirements to join the group election-voter on community.jenkins.io.\nThe group will be open for joining during the registration period after we’ll close registration during the voting period.\nWe’ll use emails from the “election-voter” group members.\n\nNominees\n\nDuring the same period, we invite every community member to nominate candidates by sending a message to the group election-committee mentioning the position and the motivation.\nOn the 31 of October, the nomination period will end. We’ll notify all the nominees and get confirmation that they are interested in running as a candidate.\nThe list of candidates will be announced on the 7th of November.\n\nEverybody can nominate candidates.\n\nThis year we are looking for nominees for the following positions:\n\nBoard members\n\nDocumentation Officer\n\nEvents Officer\n\nInfrastructure Officer\n\nRelease Officer\n\nSecurity Officer\n\nMore information about the different roles can be found on jenkins.io/project/team-leads.\n\nElection\n\nOn the 7th of November, once voters and candidates are identified, we’ll invite everybody by email to vote using civs.cs.cornell.edu.\nAt this stage of the election, nobody will be allowed to register.\nVoting deadline is the 30th of November.\n\nResult\n\nAs soon as we have the election results, we’ll publish them.\nElected members will begin their official roles on the 3rd of December 2021.\n\nKey Dates\n\nSep 20: Nomination and voter registration begin\n\nOct 31: Nomination deadline\n\nNov 07: Candidates announced, Registration deadline, voting start\n\nNov 30: Voting deadline\n\nDec 03: Results announced\n\nKey Information:\n\nEverybody can suggest candidates by sending a private message to the group election-committee.\n\nVoters register for the election by joining the public group election-voter.\n\nEmail participants will be shared with Condorcet Voting System to send voting invitations.\n\nNobody can register for the election once we send invitations to Condorcet Voting System.\n\nOnce the election is over, every member of the group\"election-voter\" will get a badge on https://community.jenkins.io as a “2021 Election Participant”.\n\nOnce the election is over, every nominee will get the badge “2021 Election Nominee”.\n\nCheers,","title":"Jenkins Election 2021","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/author/olblak","twitter":"0lblak"}]}},{"node":{"date":"2021-03-15T00:00:00.000Z","id":"0cdf29b8-8d09-5818-971a-659c5fc9353a","slug":"/blog/2021/03/15/update-center-certificate-rotation/","strippedHtml":"On the 29th of March 2021, we’ll rotate the Jenkins update center certificate.\nThe existing certificate expires in April 2021.\nWhen the new certificate is installed on March 29, 2021, Jenkins versions older than 2.178 (April 2018), won’t be able to communicate with the default and experimental update centers.\nInstances using alternative update centers (self-hosted or vendor-provided) will not be affected by this change.\nRegarding plugins update, the update-center usually supports up to one-year-old Jenkins core versions with 2.204 being the oldest version supported.\n\nIf you don’t update regularly, please review the Jenkins security advisories and use this change as your motivation to update to a more recent Jenkins version.\n\nWho\n\nJenkins users running Jenkins versions older than 2.178 will not see any further updates after the update center certificate change March 29, 2021.\n\nJenkins developers will not see plugin updates when they use mvn hpi:run to test their plugin if the Jenkins version is older than 2.178.\nPlugin developers can update their minimum Jenkins version to a newer Jenkins version.\nRefer to the guidelines in\"Choosing a Jenkins version\" when selecting the new minimum Jenkins version.\nPlugin developers may also be able to test with a newer Jenkins version using arguments like mvn -Djenkins.version=2.249.1 hpi:run.\n\nJenkins users running versions 2.178 or newer are not affected by this change.\n\nWhat\n\nJenkins uses the update center to identify updates to core and to plugins.\nThe service signs its metadata with a certificate that is cross-signed by a root certificate.\nJenkins is bundled with the root certificate so it can confirm the authenticity of update center data.\nWhen updates are available, an alert is shown to Jenkins users that reminds them to update.\n\nWhy\n\nThe root certificate bundled in Jenkins was created in April 2011 and will expire in April 2021.\nWe prepared for this rotation in April 2018 when we bundled the new root certificate with Jenkins core releases.\nIt’s now time to use the new root certificate with a new update center certificate.\nThe new root certificate will expire in April 2028.\n\nYou can follow the work for this certificate rotation in this ticket INFRA-2902\n\nSo again, keep your instance updated and everything should be fine.\n\nSee you in 2028,\n\nVarious Links:\n\nINFRA-2902 - Rotate the update center certificate\n\nINFRA-2732 - Annual certificate update\n\nINFRA-1502 - Add new root certificate (2018)\n\njenkins-infra/update-center2 - Jenkins update center certificates\n\nupdates.jenkins.io - Jenkins update center\n\nadvisories - Jenkins security advisories","title":"Update-Center certificate rotation","tags":["announcement","update-center"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/author/olblak","twitter":"0lblak"}]}},{"node":{"date":"2020-06-17T00:00:00.000Z","id":"d04987cd-4df5-5758-b9a2-2f39da9d1862","slug":"/blog/2020/06/17/infra-and-aws-donation/","strippedHtml":"The Jenkins project relies heavily on its infrastructure.\nWe use websites like www.jenkins.io and plugins.jenkins.io, ticketing systems like issues.jenkins.io, CI/CD infrastructure like ci.jenkins.io, and many other services.\nJust to provide some context about the Jenkins infrastructure scale, here are some stats from April 2020:\n\nOver 600 000 people visited www.jenkins.io\n\nOver 250 000 Jenkins servers regularly checked the\nJenkins package server and the\nJenkins update server\n\nOver 43 000 continuous integration jobs ran on ci.jenkins.io\n\nOver 950 plugins ran their continuous integration pipelines on ci.jenkins.io\n\nCountry by country visitors to jenkins.io\n\nThe Jenkins project, as an open source project, is built and maintained by its awesome community.\nLike in any organization, there are specific people who make sure that those services are always up and running.\nEveryone is welcome to participate.\nInfrastructure is no exception, we are always looking for new contributors to the infrastructure!\n\nWhile we can’t share publicly everything like secrets and certificates,\nwe still try to be as transparent as possible so that everybody can understand and improve our infrastructure without having privileged access.\nWhat better way than using Git to manage infrastructure work?\n\nWho said GitOps?\n\nSince the creation of the Jenkins-infra organization on GitHub in March 2008, more than 650 people have contributed to over 80 git repositories.\nThose contributions make the Jenkins community what it is today.\nIf you can’t find something there, it probably means that some help is welcomed.\n\nMore recently, with help from Gavin Mogan, Tim Jacomb, and Alex Earl, big achievements have been possible on many fronts like automating Jenkins releases, refreshing plugins.jenkins.io, adding new agents to ci.jenkins.io, and maintaining our Kubernetes cluster.\nWe thank them for their help and for the infrastructure progress they have enabled.\n\nInfrastructure at Scale\n\nRunning infrastructure at the scale the Jenkins project does is expensive and sometimes quite challenging.\nWe are fortunate enough to be supported by many leading companies that provide us their expertise, their products, and their support.\n\nRecently, Amazon Web Services donated $60 000 to run Jenkins infrastructure on the AWS cloud.\nWe’re so grateful for their donation and for the flexibility it provides.\nWe’re running Linux agents with AMD64 and ARM64 architectures on AWS.\nWe’re using AWS cloud for our Windows agents.\nThe generous infrastructure donation from Amazon Web Services has increased our continuous integration capacity and broadened our platform coverage.\n\nOur Sponsors\n\nMajor sponsors of the Jenkins infrastructure include\nCloudBees,\nOregon State University Open Source Lab,\nContinuous Delivery Foundation,\nRed Hat,\nAmazon Web Services, and\nGitHub.\n\nAdditional sponsors of Jenkins infrastructure services and software include\nAtlassian,\nDatadog,\nFastly,\nIBM.\nJFrog,\nPagerduty,\nRackspace,\nSentry,\nServerion,\nSpinUp,\nTsinghua University, and\nXMission.\n\nEach of these organizations support the Jenkins project in their own way.\nWe thank them for their contributions, their support and for their willingness to help the Jenkins community.\n\nhttps://www.jenkins.io/projects/infrastructure/","title":"Jenkins Infrastructure: Stats, Updates, and AWS sponsorship","tags":["aws","community","infrastructure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/author/olblak","twitter":"0lblak"}]}},{"node":{"date":"2020-01-10T00:00:00.000Z","id":"57fae2bf-06be-518a-aa90-8776f373d812","slug":"/blog/2020/01/10/fosdem-is-coming/","strippedHtml":"FOSDEM 2020 is coming and with it, a lot of great folks come in town.\nIt’s always a great moment to meet Jenkins community members, share stories and get inspired.\nI hope that this year will be as great as it always been and for that, we organize a few things\n\nThings we’ll do\n\nDuring the whole event, we’ll be virtually on the Gitter\n\nOn the Thursday 30 of January, there will be two workshops one about Jenkins Pipelines lead by Mark Waite, and a second one about JenkinsX by Viktor Farcic.\n\nOn the Friday 31 of January, the Jenkins project will hold a Contributor Summit where we invite active contributors and those who are interested in working on foundation projects, e.g. key architecture changes and projects (UX, JCasC, Cloud native Jenkins, etc.), governance, infrastructure. There will be no user-focused topics (no presentations, no trainings, etc.) but we will focus on defining key priorities for the project, building a roadmap and resolving issues we have in the project at the moment.\nWe’ll end up the day with our now traditional Orval and flemish beef stew at Le Roy d’Espagne\n\nFinally the FOSDEM, the 01 and 02 of February, we’ll all be at FOSDEM. So come and say \"hi\" at the Jenkins/JenkinsX stand, inside the CICD Devroom.\n\nOr just come and share beers\n\nCheers","title":"FOSDEM 2020 is coming","tags":["fosdem","events","community","outreach-programs"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/author/olblak","twitter":"0lblak"}]}},{"node":{"date":"2018-09-14T00:00:00.000Z","id":"9d454b50-9959-5557-8c15-e1041ef6bff4","slug":"/blog/2018/09/14/speaker-blog-jenkins-builds-jenkins/","strippedHtml":"Next week Olivier Vernin from CloudBees and Brian Benz from Microsoft will be presenting a session at DevOps World | Jenkins World about how Microsoft has been working with Jenkins to build Jenkins plugins and produce Jenkins on Microsoft Azure.\nThese plugins run Jenkins on Azure Linux and Windows VMs, Kubernetes, azure App service, as well as deploy artifacts to those Azure platforms and more.\nAll are open source and available on GitHub.\n\nHere’s our session, where we’ll be sharing successes and challenges of getting the infrastructure up and running:\n\nTuesday, September 18\n\nSession: Developing and Delivering Jenkins in the cloud\n11:15am - 12:00pm Brian Benz with Olivier Vernin, CloudBees\n\nIn this session, we’ll discuss the real-life implementation of Jenkins' development and delivery infrastructure in the cloud as it has evolved from a mix of platforms to Microsoft Azure.\nExpect a frank discussion of how issues that were encountered along the way were overcome, how the architecture has evolved, and what’s on the roadmap.\nWe’ll share important tips and tricks for implementing your own Jenkins infrastructure on any cloud, based on Jenkins' own experience with their implementation.\n\nSee you in San Francisco!\n\nCome meet us at\nDevOps World | Jenkins World 2018 on September 16-19th in San Francisco.\nWe will be hanging out around the OSS space, eager to answer more questions.\n\nRegister with the code JWFOSS for a 30% discount off your pass.","title":"Want to know how Jenkins builds Jenkins? Catch this session at DevOps World | Jenkins World next week in San Francisco!","tags":["jenkinsworld","jenkinsworld2018","azure","infrastructure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/author/olblak","twitter":"0lblak"}]}},{"node":{"date":"2018-07-23T00:00:00.000Z","id":"bc08dba7-169b-5284-bbaa-6f3d64408472","slug":"/blog/2018/07/23/javadoc-service-improvements/","strippedHtml":"Jenkins infrastructure is continuously improving.\nThe latest service to get some attention and major improvement is the Jenkins javadoc.\n\nThere were a number of issues affecting that service:\n\nIrregular updates -\nDevelopers wouldn’t find the latest java documentation because of inadequate update frequence.\n\nBroken HTTPS support -\nwhen users would go to the Javadoc site they would get an unsafe site warning and then an incorrect redirection.\n\nObsolete content - Javadoc was not cleaned up correctly and plenty of obsolete pages remained which confused end users.\n\nAs Jenkins services\nmigrate to Azure infrastructure,\nsomething that needed to be done was to move the javadoc service there as a standalone service.\nI took the same approach as jenkins.io, putting data on an azure file storage, using a nginx proxy in front of it and running on kubernetes.\nThis approach brings multiple benefits:\n\nWe store static files on an azure file storage which brings data reliability, redundancy, etc.\n\nWe use Kubernetes Ingress to configure HTTP/HTTPS endpoint\n\nWe use Kubernetes Service to provide load balancing\n\nWe use Kubernetes deployment to deploy default nginx containers with azure file storage volume.\n\nHTTP/HTTPS workflow\n\n+----------------------+     goes on     +------------------------------+\n  |  Jenkins Developer   |---------------->+  https://javadoc.jenkins.io  |\n  +----------------------+                 +------------------------------+\n                                                                      |\n  +-------------------------------------------------------------------|---------+\n  | Kubernetes Cluster:                                               |         |\n  |                                                                   |         |\n  | +---------------------+     +-------------------+     +-----------v------+  |\n  | | Deployment: Javadoc |     | Service: javadoc  <-----| Ingress: javadoc |  |\n  + +---------------------+     +-------------------+     +------------------+  |\n  |                                           |                                 |\n  |                          -----------------+                                 |\n  |                          |                |                                 |\n  |                          |                |                                 |\n  | +------------------------v--+    +--------v------------------+              |\n  | | Pod: javadoc              |    | Pod: javadoc              |              |\n  | | container: \"nginx:alpine\" |    | container: \"nginx:alpine\" |              |\n  | | +-----------------------+ |    | +-----------------------+ |              |\n  | | | Volume:               | |    | | Volume:               | |              |\n  | | | /usr/share/nginx/html | |    | | /usr/share/nginx/html | |              |\n  | | +-------------------+---+ |    | +----+------------------+ |              |\n  | +---------------------|-----+    +------|--------------------+              |\n  |                       |                 |                                   |\n  +-----------------------|-----------------|-----------------------------------+\n                          |                 |\n                          |                 |\n                       +--+-----------------+-----------+\n                       |   Azure File Storage: javadoc  |\n                       +--------------------------------+\n\nThe javadoc static files are now generated by a Jenkins\njob regularly and then published from a trusted jenkins instance.\nWe only update what has changed and remove obsolete documents.\nMore information can be find\nhere\n\nThe next thing in continuously improving is also to look at the user experience of the javadoc to make it easier to discover javadoc for other components or versions.\n( Help Needed)\n\nThese changes all go towards improving the developer experience for those using javadocs and making life easier for core and plugin developers.\nSee the new and improved javadoc service here\nJenkins Javadoc.","title":"Jenkins Javadoc: Service Improvements","tags":["javadoc","azure","infrastructure","kubernetes"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/author/olblak","twitter":"0lblak"}]}},{"node":{"date":"2018-03-12T00:00:00.000Z","id":"b9886e8d-a501-5b7a-8e2a-2ba26132ecae","slug":"/blog/2018/03/12/browser-usage/","strippedHtml":"Over the last year, several efforts were done on jenkins.io like\nsecurity advisories or documentation\nand I wanted to understand the impact it had on its traffic.\n\nI had a look to the Google Analytics account used for jenkins.io and it was\ninteresting to discover which browsers are used by Jenkins visitors and how\nthis compares with other websites. So I decided to analyze one year of data\nfrom January 2017 to January 2018. Then I selected\nstatcounter\nas an external data source in order to compare results from jenkins.io.\n\nFirst, let’s talk about numbers:\n\nDuring that period, 3,496,245 users across the world visited this website.\n\nThis is a growth of 52.69% visitors compared to the year before.\n\n92.28% of them used a desktop, 6.63% were on mobile and only 1.10% on a tablet.\n\nTable 1. Browser Usage\n\nBrowser\nPercentage\n\nChrome\n69.82%\n\nFirefox\n14.75%\n\nSafari\n6.44%\n\nIE\n5.84%\n\nEdge\n1.59%\n\nWe clearly see that 91% of Jenkins.io visitors only use three browsers. Chrome\nis by far the leader followed by Firefox and Safari.\n\nObviously those numbers taken alone don’t mean anything, so let’s try to put\nthem in perspective with another data source.\n\nNetscape 4.8 was still used by 15 visitors over the year.\n\n6 visitors used their Nintendo DS.\n\nStatCounter\n\nLet’s now compare our previous results with the same time period from\nstatcounter who argues to collect data from\n2million websites.  Statcounter allow us to display browsers stats based on 4\ndifferent categories, 'All platform', 'Desktop', 'Tablet' or 'Mobile'. + For\nthis comparison, I am interested by 'All platform' and of course 'Desktop' as\n92.28% of Jenkins.io visitors use a desktop.\n\nTable 2. Browser Market Share Across All Platforms\n\nBrowser\nPercentage\n\nChrome\n54.13%\n\nSafari\n14.50%\n\nUC Browser\n8.25%\n\nFirefox\n6.15%\n\nIE\n3.89%\n\nExcepted Chrome who still leads the ranking with \"only\" 54%, all the others\nactors are totally shuffled.  Safari moved to the 2nd place with 14.50% 'UC\nBrowser' appeared in the top 3 with 8.25% where only 0.10% of Jenkins.io\nvisitors were using UC browser.  Firefox moved to the 4th places with only\n6.15%.  It’s interesting how this \"All platform\" browser market share from\nstatcounter doesn’t reflect Jenkins.io visitors' habits.\n( Source )\n\nNow at a first glance, results look more similar to the Jenkins.io visitors;\nexcepted for Chrome and Firefox which shed some percentages in favor of\nInternet Explorer and Edge.  This promotes IE to the 3rd place with 8.86% of\nusage, and downgrade Safari to the 4th place with 6,44%.  Compared to\nJenkins.io results, Edge is still at the 5th position.  It’s very interesting\nto see how this ranking is so different from the \"All platform\" one but follows\nthe same pattern coming from Jenkins.io visitors.  This highlights how browser\nchoices are strongly influenced by the platform used and contrary to a general\ntrend,\nJenkins.io visitors remain desktop users.  This absence of mobile users\nprobably explains why some browsers are so under represented within Jenkins\nvisitors.\n( Source )\n\nTable 3. Browser Market Share on the Desktop\n\nBrowser\nUsage\n\nChrome\n63.59%\n\nFirefox\n13.75%\n\nIE\n8.86%\n\nSafari\n5.50%\n\nEdge\n4.35%\n\nConclusion\n\nThese observations should be carefully interpreted as it may be overestimated or underestimated (depending on various factors)  and doesn’t take into consideration local specificities.\n\nJenkins.io visitors are a majority of desktop users.\nThey are aligned with the world trends when we talk about desktop browsers however only a minority of them come from a mobile.\nThis is probably because jenkins.io is not (yet) mobile friendly and obsiously this would be a nice improvement to have.\n\nAll contributions are welcomed and especially for mobile user experience.","title":"Browser Market Share on jenkins.io","tags":["stats"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/author/olblak","twitter":"0lblak"}]}},{"node":{"date":"2017-05-15T00:00:00.000Z","id":"355e4b5a-0c27-5f01-94a5-7a981139c2fb","slug":"/blog/2017/05/15/kubernetes-journey-on-azure/","strippedHtml":"With the\nongoing migration to Azure,\nI would like to share my thoughts regarding one of the biggest challenges we\nhave faced thus far: orchestrating container infrastructure. Many of the\nJenkins project’s applications are run as Docker containers, making Kubernetes\na logical choice as far as running our containers, but it presents its own set\nof challenges. For example, what would the workflow from development to\nproduction look like?\n\nBefore going deeper into the challenges, let’s review the requirements we\nstarted with:\n\nGit\n\nWe found it mandatory to keep track of all the infrastructure changes in Git\nrepositories, including secrets, in order to facilitate reviewing,\nvalidation, rollback, etc of all infra changes.\n\nTests\n\nInfrastructure contributors are geographically distributed and in different\ntimezones.  Getting feedback can take time, so we heavily rely on a lot of\ntests before any changes can be merged.\n\nAutomation\n\nThe change submitter is not necessarily the person who will deploy it.\nRepetitive tasks are error prone and a waste of time.\nFor these reasons, all steps must be automated and stay as simple as possible.\n\nA high level overview of our \"infrastructure as code\" workflow would look like:\n\nInfrastructure as Code Workflow\n\n__________       _________       ______________\n  |         |      |        |      |             |\n  | Changes | ---->|  Test  |----->| Deployment  |\n  |_________|      |________|  ^   |_____________|\n                               |\n                        ______________\n                       |             |\n                       | Validation  |\n                       |_____________|\n\nWe identified two possible approaches for implementing our container\norchestration with Kubernetes:\n\nThe Jenkins Way: Jenkins is triggered by a Git commit, runs the tests, and\nafter validation, Jenkins deploys changes into production.\n\nThe Puppet Way: Jenkins is triggered by a Git commit, runs the tests, and\nafter validation, it triggers Puppet to deploy into production.\n\nLet’s discuss these two approaches in detail.\n\nThe Jenkins Way\n\nWorkflow\n\n_________________       ____________________       ______________\n  |                |      |                   |      |             |\n  |    Github:     |      |     Jenkins:      |      |   Jenkins:  |\n  | Commit trigger | ---->| Test & Validation | ---->|  Deployment |\n  |________________|      |___________________|      |_____________|\n\nIn this approach, Jenkins is used to test, validate, and deploy our Kubernetes\nconfiguration files. kubectl can be run on a directory and is idempotent.\nThis means that we can run it as often as we want: the result will not change.\nTheoretically, this is the simplest way. The only thing needed is to run\nkubectl command each time Jenkins detects changes.\n\nThe following Jenkinsfile gives an example of this workflow.\n\nJenkinsfile\n\npipeline {\n    agent any\n    stages {\n      stage('Init'){\n        steps {\n          sh 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl'\n        }\n      }\n      stage('Test'){\n        steps {\n          sh 'Run tests'\n        }\n      }\n      stage('Deploy'){\n        steps {\n          sh './kubectl apply -R true -f my_project'\n        }\n      }\n    }\n  }\n\nThe devil is in the details of course, and it was not as easy as it looked at\nfirst sight.\n\nOrder matters\n\nSome resources needed to be deployed before others. A workaround was to use\nnumbers as file names. But this added extra logic at file name level, for\nexample:\n\nproject/00-nginx-ingress\nproject/09-www.jenkins.io\n\nPortability\n\nThe deployment environments needed to be the same across development machines\nand the Jenkins host. Although this a well-known problem, it was not easy to\nsolve.  The more the project grew, the more our scripts needed additional tools\n( make, bats, jq gpg, etc).  The more tools we used, the more issues\nappeared because of the different versions used.\n\nAnother challenge that emerged when dealing with different environments was:\nhow should we manage environment-specific configurations (dev, prod, etc)?\nWould it be better to define different configuration files per environment?\nPerhaps, but this means code duplication, or using file templates which would require\nmore tools ( sed, jinja2, erb), and more work.\n\nThere wasn’t a golden rule we discovered, and the answer is probably somewhere in between.\n\nIn any case, the good news is that a Jenkinsfile provides an easy way to\nexecute tasks from a Docker image, and an image can contain all the necessary\ntools in our environment. We can even use different Docker images for each\nstage along the way.\n\nIn the following example, I use the my_env Docker image. It contains all the\ntools needed to test, validate, and deploy changes.\n\nJenkinsfile\n\npipeline{\n  agent {\n    docker{\n      image 'my_env:1.0'\n    }\n  }\n  options{\n    buildDiscarder(logRotator(numToKeepStr: '10'))\n    disableConcurrentBuilds()\n    timeout(time: 1, unit: 'HOURS')\n  }\n  triggers{\n    pollSCM('* * * * *')\n  }\n  stages{\n    stage('Init'){\n      steps{\n        // Init everything required to deploy our infra\n        sh 'make init'\n      }\n    }\n    stage('Test'){\n      steps{\n       // Run tests to validate changes\n       sh 'make test'\n      }\n    }\n    stage('Deploy'){\n      steps{\n       // Deploy changes in production\n       sh 'make deploy'\n      }\n    }\n  }\n  post{\n    always {\n      sh 'make notify'\n    }\n  }\n}\n\nSecret credentials\n\nManaging secrets is a big subject and brings with it many different\nrequirements which are very hard to fulfill.  For obvious reasons, we couldn’t\npublish the credentials used within the infra project.  On the other hand, we\nneeded to keep track and share them, particularly for the Jenkins node that\ndeploys our cluster.  This means that we needed a way to encrypt or decrypt\nthose credentials depending on permissions, environments, etc.  We analyzed two\ndifferent approaches to handle this:\n\nStoring secrets in a key management tool like Key Vault or Vault and use them like a Kubernetes \"secret\" type of resource.\n→ Unfortunately, these tools are not yet integrated in Kubernetes. But we may come back to this option later.\nKubernetes issue: 10439\n\nPublishing and encrypting using a public GPG key.\nThis means that everybody can encrypt credentials for the infrastructure project but only the owner of the private key can decrypt credentials.\nThis solution implies:\n\nScripting: as secrets need to be decrypted at deployment time.\n\nTemplates: as secret values will change depending on the environment.\n→ Each Jenkins node should only have the private key to decrypt secrets associated to its environment.\n\nScripting\n\nFinally, the system we had built was hard to work with.  Our initial\nJenkinsfile which only ran one kubectl command slowly become a bunch of\nscripts to accommodate for:\n\nResources needing to be updated only in some situations.\n\nSecrets needing to be encrypted/decrypted.\n\nTests needing to be run.\n\nIn the end, the amount of scripts required to deploy the Kubernetes resources\nstarted to become unwieldy and we began asking ourselves: \"aren’t we\nre-inventing the wheel?\"\n\nThe Puppet Way\n\nThe Jenkins project already uses Puppet, so we decided to look at using Puppet\nto orchestrate our container deployment with Kubernetes.\n\nWorkflow\n\n_________________       ____________________       _____________\n  |                |      |                   |      |            |\n  |    Github:     |      |     Jenkins:      |      | Puppet:    |\n  | Commit trigger | ---->| Test & Validation | ---->| Deployment |\n  |________________|      |___________________|      |____________|\n\nIn this workflow, Puppet is used to template and deploy all Kubernetes\nconfigurations files needed to orchestrate our cluster.\nPuppet is also used to automate basic kubectl operations such as 'apply' or\n'remove' for various resources based on file changes.\n\nPuppet workflow\n\n______________________\n|                     |\n|  Puppet Code:       |\n|    .                |\n|    ├── apply.pp     |\n|    ├── kubectl.pp   |\n|    ├── params.pp    |\n|    └── resources    |\n|        ├── lego.pp  |\n|        └── nginx.pp |\n|_____________________|\n          |                                        _________________________________\n          |                                       |                                |\n          |                                       |  Host: Prod orchestrator       |\n          |                                       |    /home/k8s/                  |\n          |                                       |    .                           |\n          |                                       |    └── resources               |\n          | Puppet generate workspace             |        ├── lego                |\n          └-------------------------------------->|        │   ├── configmap.yaml  |\n            Puppet apply workspaces' resources on |        │   ├── deployment.yaml |\n          ----------------------------------------|        │   └── namespace.yaml  |\n          |                                       |        └── nginx               |\n          v                                       |            ├── deployment.yaml |\n ______________                                   |            ├── namespace.yaml  |\n |     Azure:  |                                  |            └── service.yaml    |\n | K8s Cluster |                                  |________________________________|\n |_____________|\n\nThe main benefit of this approach is letting Puppet manage the environment and run\ncommon tasks. In the following example, we define a Puppet class for Datadog.\n\nPuppet class for resource Datadog\n\n# Deploy datadog resources on kubernetes cluster\n#   Class: profile::kubernetes::resources::datadog\n#\n#   This class deploy a datadog agent on each kubernetes node\n#\n#   Parameters:\n#     $apiKey:\n#       Contain datadog api key.\n#       Used in secret template\nclass profile::kubernetes::resources::datadog (\n    $apiKey = base64('encode', $::datadog_agent::api_key, 'strict')\n  ){\n  include ::stdlib\n  include profile::kubernetes::params\n  require profile::kubernetes::kubectl\n\n  file { \"${profile::kubernetes::params::resources}/datadog\":\n    ensure => 'directory',\n    owner  => $profile::kubernetes::params::user,\n  }\n\n  profile::kubernetes::apply { 'datadog/secret.yaml':\n    parameters => {\n        'apiKey' => $apiKey\n    },\n  }\n  profile::kubernetes::apply { 'datadog/daemonset.yaml':}\n  profile::kubernetes::apply { 'datadog/deployment.yaml':}\n\n  # As secrets change do not trigger pods update,\n  # we must reload pods 'manually' in order to use updated secrets.\n  # If we delete a pod defined by a daemonset,\n  # this daemonset will recreate pods automatically.\n  exec { 'Reload datadog pods':\n    path        => [\"${profile::kubernetes::params::bin}/\"],\n    command     => 'kubectl delete pods -l app=datadog',\n    refreshonly => true,\n    environment => [\"KUBECONFIG=${profile::kubernetes::params::home}/.kube/config\"] ,\n    logoutput   => true,\n    subscribe   => [\n      Exec['apply datadog/secret.yaml'],\n      Exec['apply datadog/daemonset.yaml'],\n    ],\n  }\n}\n\n→\nMore \"resources\" examples\n\nLet’s compare the Puppet way with the challenges discovered with the Jenkins\nway.\n\nOrder Matters\n\nWith Puppet, it becomes easier to define priorities as\nPuppet provides relationship meta parameters and the function 'require' (see\nalso:\nPuppet\nrelationships).\n\nIn our Datadog example, we can be sure that deployment will respect the following order:\n\ndatadog/secret.yaml -> datadog/daemonset.yaml -> datadog/deployment.yaml\n\nCurrently, our Puppet code only applies configuration when it detects file\nchanges.  It would be better to compare local files with the cluster\nconfiguration in order to trigger the required updates, but we haven’t found a\ngood way to implement this yet.\n\nPortability\n\nAs Puppet is used to configure working environments, it becomes easier to be\nsure that all tools are present and correctly configured.  It’s also easier to\nreplicate environments and run tests on them with tools like\nRSpec-puppet, Serverspec or\nVagrant.\n\nIn our Datadog example, we can also easily change the Datadog API key depending\non the environment with Hiera.\n\nSecret credentials\n\nAs we were already using Hiera GPG\nwith Puppet, we decided to continue to use it, making managing secrets for\ncontainers very simple.\n\nScripting\n\nOf course the Puppet DSL is used, and even if it seems harder at the beginning,\nPuppet simplifies a lot the management of Kubernetes configuration files.\n\nConclusion\n\nIt was much easier to bootstrap the project with a full CI workflow within\nJenkins as long as the Kubernetes project itself stays basic. But as soon as\nthe project grew, and we started deploying different applications with\ndifferent configurations per environment, it became easier to delegate\nKubernetes management to Puppet.\n\nIf you have any comments feel free to send a message to\nJenkins Infra mailing list.\n\nThanks\n\nThanks to Lindsay Vanheyste, Jean Marc Meessen, and Damien Duportal for their feedback.","title":"A journey to Kubernetes on Azure","tags":["puppet","kubernetes","docker","azure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/author/olblak","twitter":"0lblak"}]}}]}},"pageContext":{"author":"olblak","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}