{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/author/rishabhbudhouliya",
    "result": {"data":{"author":{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/author/rishabhbudhouliya","twitter":null},"allBlog":{"edges":[{"node":{"date":"2021-07-27T00:00:00.000Z","id":"65407863-9614-55a2-b325-2efe99f2c375","slug":"/blog/2021/07/27/git-credentials-binding-phase-1/","strippedHtml":"Google Summer of Code 2021 is implementing git credentials binding for sh, bat, and powershell .\nGit credentials binding is one of the most requested features for Jenkins Pipeline (see jira:JENKINS-28335[]).\n\nThe project involves extending the Credentials Binding Plugin to create custom bindings for two types of credentials essential to establish a remote connection with a git repository\n\nUsername/Password\n\nSSH Private Key\n\nWhy use git credentials binding?\n\nMany operations in a Jenkins Pipeline or Freestyle job can benefit from authenticated access to git repositories.\nAuthenticated access to a git repository allows a Jenkins job to\n\napply a tag and push the tag\n\nmerge a commit and push the merge\n\nupdate submodules from private repositories\n\nretrieve large files with git LFS\n\nThe git credentials username / password binding included in git plugin 4.8.0 allows Pipeline and Freestyle jobs to use command line git from sh, bat, and powershell for authenticated access to git repositories.\n\nHow to use git credentials binding?\n\nThe binding is accessible using the withCredentials Pipeline step.\nIt requires two parameters:\n\ncredentialsId\n\nReference id provided by creating a Username/Password type credential in the Jenkins configuration. To understand how to configure credentials in a Jenkins environment: Using Credentials\n\ngitToolName\n\nName of the git installation in the machine running the Jenkins instance\n(Check Global Tool Configuration section in Jenkins UI)\n\nNote: In case a user is not aware of the git tool installation of the particular machine, the default git installation will be chosen.\n\nExamples\n\nThe withCredentials wrapper allows declarative and scripted Pipeline jobs to perform authenticated command line git operations with sh , bat , and powershell tasks.\n\nShell example\n\nwithCredentials([gitUsernamePassword(credentialsId: 'my-credentials-id', gitToolName: 'git-tool')]) {\n  sh 'git fetch --all'\n}\n\nBatch example\n\nwithCredentials([gitUsernamePassword(credentialsId: 'my-credentials-id', gitToolName: 'git-tool')]) {\n  bat 'git submodule update --init --recursive'\n}\n\nPowershell example\n\nwithCredentials([gitUsernamePassword(credentialsId: 'my-credentials-id', gitToolName: 'git-tool')]) {\n  powershell 'git push'\n}\n\nThe Pipeline Syntax Snippet Generator is a good way to explore the syntax of the withCredentials step and the git username / password credentials binding.\n\nLimitations\n\nThe git credentials username / password binding has been tested on command line git versions 1.8.3 through 2.32.0.\nIt has been tested on CentOS 7, CentOS 8, Debian 9, Debian 10, FreeBSD 12, OpenBSD 6.9, openSUSE 15.2, Ubuntu 18.04, Ubuntu 20.04, Ubuntu 21.04, and Windows 10.\nProcessor testing has included amd64, arm32, arm64, and s390x.\n\nThe binding does not support private key credentials.\nThe binding is not supported on command line git versions prior to 1.8.3.\n\nWhat’s next?\n\nPrivate key credentials support is coming soon.","title":"Git username / password credentials binding","tags":["git"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/author/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/author/rishabhbudhouliya","twitter":null}]}},{"node":{"date":"2020-08-29T00:00:00.000Z","id":"a6cfa2b5-a75a-5920-892a-2548994c1318","slug":"/blog/2020/08/29/git-performance-improvement-phase3/","strippedHtml":"Since the beginning of the project, the core value which drove its progress was \"To enhance the user experience for running Jenkins jobs by reducing the overall execution time\".\n\nTo achieve this goal, we laid out a path:\n\nCompare the two existing git implementations i.e CliGitAPIImpl and JGitAPIImpl using performance benchmarking\n\nUse the results to create a feature which would improve the overall performance of git plugin\n\nAlso, fix existing user reported performance issues\n\nLet’s take a journey to understand how we’ve built the new features. If you’d like to skip the journey part, you can directly go to the [major performance improvements] section and the [minor performance section] to see what we’ve done!\n\nJourney to release\n\nThe project started with deciding to choose a git operation and then trying to compare the performance of that operation by using command line git and then with JGit.\n\nStage 1: Benchmark results with git fetch\n\nThe performance of git fetch (average execution time/op) is strongly correlated to the size of a repository\n\nThere exists an inflection point on the scale of repository size after which the nature of JGit performance changes (it starts to degrade)\n\nAfter running multiple benchmarks, it is safe to say that for a large sized repository command line git would be a better choice of implementation.\n\nWe can use this insight to implement a feature which avoids JGit with large repositories.\n\nStage 2: Comparing platforms\n\nThe project was also concerned that there might be important differences between operating systems.\nFor example, what if command line Git for Windows performed very differently than command line Git on Linux or FreeBSD?\nBenchmarks were run to compare fetch performance on several platforms.\n\nRunning git fetch operation for a 400 MiB sized repository on:\n\nAMD64 Microsoft Winders\n\nAMD64 FreeBSD\n\nIBM PowerPC 64 LE Ubuntu 18\n\nIBM System 390 Ubuntu 18\n\nThe result of running this experiment is given below:\n\nThe difference in performance between git and JGit remains constant across all platforms.\n\nBenchmark results on one platform are applicable to all platforms.\n\nStage 3: Performance of git fetch and repository structure\n\nThe area of the circle enclosing each parameter signifies the strength of the positive correlation between the performance of a git fetch operation and that parameter. From the diagram:\n\nSize of the aggregated objects is the dominant player in determining the execution time for a git fetch\n\nNumber of branches and Number of tags play a similar role but are strongly overshadowed by size of repository\n\nNumber of commits has a negligible effect on the performance of running git fetch\n\nAfter running these experiments from Stage-1 to Stage-3, we developed a solution called the GitToolChooser which is explained in the next stage\n\nStage 4: Faster checkout with Git tool chooser\n\nThis feature takes the responsibility of choosing the optimal implementation from the user and hands it to the plugin. It takes the decision of recommending an implementation on the basis of the size of the repository. Here is how it works.\n\nThe image above depicts the performance enhancements we have performed over the course of the GSoC project. These improvements have enabled the checkout step to be finished within half of what it used to take earlier in some cases.\n\nLet’s talk about performance improvements in two parts.\n\nMajor performance improvements\n\nBuilding Tensorflow (~800 MiB) using a Jenkins pipeline, there is over 50% reduction in overall time spent in completing a job!\nThe result is consistent multiple platforms.\n\nThe reason for such a decrease is the fact that JGit degrades in performance when we are talking about large sized repositories. Since the GitToolChooser is aware of this fact, it chooses to recommend command line git instead which saves the user some time.\n\nMinor performance improvements\n\nNote: Enable JGit before using the new performance features to let GitToolChooser work with more options → Here’s how\n\nBuilding the git plugin (~ 20 MiB) using a Jenkins pipeline, there is a drop of a second across all platforms when performance enhancement is enabled. Also, eliminating a redundant fetch reduces unnecessary load on git servers.\n\nThe reason for this change is the fact that JGit performs better than command line git for small sized repositories (<50MiB) as an already warmed up JVM favors the native Java implementation.\n\nReleases\n\nGit Plugin 4.4.0\n\nAdd GitToolChooser\n\nRemove redundant fetch\n\nGit Client Plugin 3.4.0\n\nAdd support to communicate compatibility of JGit with certain additional SCM behaviors\n\nThe road ahead\n\nSupport from other branch source plugins\n\nPlugins like the GitHub Branch Source Plugin or GitLab Branch Source Plugin need to extend an extension point provided by the git plugin to facilitate the exchange of information related to size of a remote repository hosted by the particular git provider\n\nJENKINS-63519 : GitToolChooser predicts the wrong implementation\n\nAddition of this feature to GitSCMSource\n\nDetection of lock related delays accessing the cache directories present on the controller\n\nThis issue was reported by the plugin maintainer Mark Waite, there is a need to reproduce the issue first and then find a possible solution.\n\nReaching out\n\nFeel free to reach out to us for any questions or feedback on the project’s\nGitter Channel or the\nJenkins Developer Mailing list.\nReport an issue at Jenkins Jira.\n\nUseful Links\n\nPhase 1 Blog: https://www.jenkins.io/blog/2020/07/09/git-performance-improvement-phase1/\n\nPhase 2 Blog: https://www.jenkins.io/blog/2020/07/29/git-performance-improvement-phase2/\n\nProject Page: https://www.jenkins.io/projects/gsoc/2020/projects/git-plugin-performance/\n\nDemonstration","title":"Git Plugin Performance Improvement: Final Phase and Release","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/author/rishabhbudhouliya","twitter":null}]}},{"node":{"date":"2020-07-29T00:00:00.000Z","id":"84676949-9b05-55b1-b843-435c0ff0696d","slug":"/blog/2020/07/29/git-performance-improvement-phase2/","strippedHtml":"The second phase of the Git Plugin Performance Improvement project has been great in terms of the progress we have achieved in implementing performance improvement insights\nderived from the phase one JMH micro-benchmark experiments.\n\nWhat we’ve learned so far in this project is that a git fetch is highly correlated to the size of the remote repository. In order to make fetch improvements in this plugin, our task was to find the difference in performance for the two available git implementations in the Git Plugin, git and JGit.\n\nOur major finding was that git performs much better than JGit when it comes to a large sized repository (>100 MiB). Interestingly, JGit performs better than git when size of the repository is less than 100 MiB.\n\nIn this phase, we were successful in coding this derived knowledge from the benchmarks into a new functionality called the\nGitToolChooser.\n\nGitToolChooser\n\nThis class aims to add the functionality of recommending a git implementation on the basis of the size of a repository which has a strong correlation to the performance of git fetch (from performance Benchmarks).\n\nIt utilizes two heuristics to calculate the size:\n\nUsing cached .git dir from multibranch projects to estimate the size of a repository\n\nProviding an extension point which, upon implementation, can use REST APIs exposed by git service providers like Github, GitLab, etc to fetch the size of the remote repository.\n\nWill it optimize your Jenkins instance?\nThat requires one of the following:\n\nyou have a multibranch project in your Jenkins instance, the plugin can use that to recommend the optimal git implementation\n\nyou have a branch Source Plugin installed in the Jenkins instance, the particular branch source plugin will recommend a git implementation using REST APIs provided by GitHub or GitLab respectively.\n\nThe architecture and code for this class is at: PR-931\n\nNote : This functionality is an upcoming feature in the subsequent Git Plugin release.\n\nJMH benchmarks in multiple environments\n\nThe benchmarks were being executed on Linux and macOS machines frequently but there was a need to check if the results gained from those benchmarks would hold true across more platforms to ensure that the solution (GitToolChooser) is generally platform-agnostic.\n\nTo test this hypothesis, we performed an experiment:\n\nRunning git fetch operation for a 400 MiB sized repository on:\n\nWindows\n\nFreeBSD 12\n\nppc64le\n\ns390x\n\nThe result of running this experiment is given below:\n\nObservations:\n\nppc64le and s390x are able to run the operation in almost half the time it takes for the Windows or FreeBSD 12 machine. This behavior may be attributed to the increased computational power of those machines.\n\nThe difference in performance between git and JGit remains constant across all platforms which is a positive sign for the GitToolChooser as its recommendation would be consistent across multiple devices and operating systems.\n\nRelease Plan 🚀\n\nJENKINS-49757 - Avoid double fetch from Git checkout step\nThis issue was fixed in phase one, avoids the second fetch in redundant cases.\nIt will be shipped with some benchmarks on the change in performance due to the removal of the second fetch.\n\nPR-574\n\nPR-904\n\nGitToolChooser\n\nPR-931\nThis pull request is under review, will be shipped in one of the subsequent Git Plugin releases.\n\nCurrent Challenges with GitToolChooser\n\nImplement the extension point to support GitHub Branch Source Plugin, Gitlab Branch Source Plugin and Gitea Plugin.\n\nThe current version of JGit doesn’t support LFS checkout and sparse checkout, need to make sure that the recommendation doesn’t break existing use cases.\n\nFuture Work\n\nIn phase three, we wish to:\n\nRelease a new version of the Git and Git Client Plugin with the features developed during the project\n\nContinue to explore more areas for performance improvement\n\nAdd a new git operation: git clone (Stretch Goal)\n\nReaching Out\n\nFeel free to reach out to us for any questions or feedback on the project’s Gitter Channel or the Jenkins\nDeveloper Mailing list.\n\nProject Page\n\nPhase 1 Blog Post","title":"Git Plugin Performance Improvement Phase-2 Progress","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/author/rishabhbudhouliya","twitter":null}]}},{"node":{"date":"2020-07-09T00:00:00.000Z","id":"615c1ac2-c3da-5001-be28-908ac6008d94","slug":"/blog/2020/07/09/git-performance-improvement-phase1/","strippedHtml":"Git Plugin Performance Improvement is a Google Summer of Code 2020 project.\nIt aims to improve the performance of the git plugin, which provides fundamental git functionalities.\n\nInternally, the plugin provides these functionalities using two implementations: command line git and JGit (pure java implementation).\n\nCLI git is the default implementation for the plugin, a user can switch to JGit if needed\n\nThe project is divided into two parallel stages:\n\nStage 1 : Create benchmarks which evaluate the execution time of a git operation provided by CLI git and JGit using JMH, a micro benchmarking test harness.\n\nStage 2 : Implement the insights gained from the analysis into the plugin to improve the overall performance of the plugin.\n\nThe project also aims to fix any existing performance bottlenecks within the plugin as well.\n\nBenchmarks\n\nThe benchmarks are written using JMH. It was introduced in a GSoC 2019 project to Jenkins.\n\nJMH is provided within the plugin through the Jenkins Unit Test Harness POM dependency.\n\nThe JMH benchmarks are created and run within the git client plugin\n\nDuring phase-1, we have created benchmarks for two operations: \"git fetch\" and \"git ls-remote\"\n\nResults and Analysis\n\nThe benchmark analysis for git fetch:\n\nGit fetch results\n\nThe performance of git fetch (average execution time/op) is strongly correlated to the size of a repository\n\nThere exists an inflection point on the scale of repository size after which the nature of JGit performance changes (it starts to degrade)\n\nAfter running multiple benchmarks, it is safe to say that for a large sized repository CLI-git would be a better choice of implementation.\n\nWe can use this insight to implement a feature which avoids JGit when it comes to large repositories.\n\nPlease refer to PR-521 for an elaborate explanation on these results\n\nNote: Repository size means du -h .git\n\nFixing redundant fetch issue\n\nThe git plugin performs two fetch operations instead of one while performing a fresh checkout of a remote git repository.\n\nTo fix this issue, we had to safely remove the second fetch keeping multiple use-cases in mind. The fix itself was not difficult to code, but to do that safely without breaking any existing use-case was a challenging task.\n\nFurther Plan\n\nAfter consolidating a benchmarking strategy during Phase 1, the next steps will be:\n\nProvide functionality to the git plugin, which enables it to estimate the size of the repository without cloning it.\n\nBroaden the scope of benchmarking strategy\n\nConsider parameters like number of branches, references and commit history to find a relation with the performance of a git operation\n\nThe git plugin depends on other plugins like Credentials which might require benchmarking the plugin itself and the effects of these external dependencies on the plugin’s performance\n\nFocus on other use-cases of the plugin\n\nFor phase-1, I focused on the checkout step and the operations involved with it\n\nFor the next phase, the focus will shift to other areas like Multibranch pipelines or Organisation Folders\n\nHow can you help?\n\nIf you have reached this far of the blog, you might be interested in the project.\n\nTo help, you can\n\nReview the benchmarks in the benchmarks module\n\nAnalyse the benchmarks results available on ci.jenkins.io [soon]\n\nCome visit our Gitter channel: https://gitter.im/jenkinsci/git-plugin","title":"Git Plugin Performance Improvement: Phase-1","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/author/rishabhbudhouliya","twitter":null}]}}]}},"pageContext":{"author":"rishabhbudhouliya","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}