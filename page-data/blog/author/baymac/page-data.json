{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/author/baymac",
    "result": {"data":{"author":{"avatar":{"childImageSharp":null},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/author/baymac","twitter":"baymac04"},"allBlog":{"edges":[{"node":{"date":"2020-02-19T00:00:00.000Z","id":"21c55fa8-27ea-50d0-a167-c780371a54d9","slug":"/blog/2020/02/19/jenkins-world-lisbon-with-love-from-india/","strippedHtml":"After an amazing three months of development period in the summer of 2019 with Jenkins Project, I was a better developer, loved open source, met\npassionate people and had fun at work. Jenkins is not just a community, it is a family. When GSoC period was over, we received swags from Jenkins.\nNatasha Stopa (one of the students in GSoC 2019) was invited to attend DevOps World | Jenkins World San Francisco.\nIt was nice to see her enjoy there. But guess what? Jenkins also invited three other students (Abhyudaya, Long and me) to DevOps World | Jenkins World Lisbon.\nI was super psyched when Marky Jackson (one of my project mentors) broke the news to me.\n\nThe trip to Lisbon required to sort a few things like flight tickets, hotel booking, passport, visa etc. Oleg Nenashev had scheduled meetings to discuss\nand help us with arranging everything for our travel. Thanks to him. :)\n\nFrom India to Lisbon (Dec 1)\n\nAbhyudaya and I boarded our flight from Indira Gandhi Airport (New Delhi) to Lisbon on December 1, 2019 morning at 0500 hours (local time). It was a fine\ntrip with an hour layover in Istanbul Ataturk Airport. We arrived in Lisbon at 1500 hours (local time). The weather in Lisbon was terrific. A mild cold\nbut strong sea breeze was the starting point of me falling in love with the place. We arrived at our hotel (Novotel Lisboa) in an Uber. Oleg met us at\nthe lobby to help us with check-in. It was great to finally meet him in person after months of knowing and working together. We had a good chat about the\nevent, what to expect and other sightseeing areas. After a short time of refresh, Long who traveled from Berlin a day before met us at the restaurant. We\nhad a brief chat knowing each other, had our food and went to bed. The next day was Hackfest. We hit the bed after that as we had to reach Centro de\nCongressos de Lisboa (CCL) where the event was organised by 0900 hours.\n\nDay 0 (Dec 2)\n\nI woke up early for a short jog in the streets. Lisbon is a city made on hills. The streets have beautiful mosaic styled pavements. It was\nnice to see around the city. Then Abhyudaya and me went for breakfast and reached CCL in an Uber at 0815 hours.\n\nThere was a round table sitting arrangement in an auditorium. It was like a meet-and-greet event to interact with other developers (some known and some new).\nEverybody had to figure out their problem statements and work on it. There was milk, juice, sandwiches which gave us energy throughout the day. I took a\nsmall break to come out of the building to go to the other side of the road which was on the banks of Tagus River. From there you could have very close\nview underneath the Ponte 25 de Abril (looks strikingly similar to Golden Gate Bridge). You can also see The Sanctuary of Christ the King on the other side\nof the river (again looks similar to Christ the Redeemer in Rio, Brazil). It was great to kick off the event with Hackfest. At the end of Hackfest some of\nus presented our work. Later, we went to a nearby restaurant to have burgers which apparently was the best burger I ever had (could be because I hadn’t\ntried too many burgers before :P). We talked and interacted with people from other parts of the world for about an hour and a half then went back to our hotel\nrooms.\n\nDay 1 (Dec 3)\n\nThe conference officially began on this day. Abyudaya and me had breakfast and took the shuttle to CCL. We collected our t-shirts and IDs. The event managing team\nmade an app for DevOps World | Jenkins World (DWJW) Lisbon with all schedules and other informations which was incredibly convenient for all attendees.\nThere were multiple sessions/events on different topics related to Jenkins or DevOps in general. I attended the Jenkins and Jenkins X contributor summit.\nHad a nice lunch and went around to explore Lisbon. I went to Padrao dos Descobrimentos and the beautiful Belem Palace. Had some Pasteis de Belem\n(a popular Portuguese desert). Took a tram to Praça do Comércio. It is Lisbon’s most important square. You will find lots of tourists, street bands,\nsea food restaurants, shops for every budget, the famous pink street and so much more. Later that evening we had a party hosted by EURODOG (European\nDevOps Group) at Lisboa Marriott. It was a nice party to network with developers over casual wine and beer. We later head out to a nearby Indian restaurant\nfor Kebab and rice.\n\nDay 2 (Dec 4)\n\nThe second day began with the opening keynote. Later went to the Jenkins X Introduction, Deploying K8s with Jenkins on GCP, Build top mobile games\nby King in that order. Also occasionally hitting the sponsors booth to have a chat and collect some swags. In the evening there was the superhero\nthemed party, sponsored by Sonatype. It was probably the most fun event in the entire conference. The expo hall had an entirely different look with the party lights on,\npeople wearing capes, fun events going around. There were artists dressed in a Bumblebee, a Batman, a Superman, a Supergirl, a Thor and more superhero\ncostumes! I was previously made aware of the interesting parties at Jenkins World but the experience was very different. People from all over the world had\ncome together to celebrate the 15 years of success of an open source software. After partying from 5 to 7 we went back to the hotel. I spent some time\nto prepare the slides for the next day’s presentation and went to bed.\n\nDay 3 (Dec 5)\n\nThe third and final day of conference began with Jenkins World Fun Run. I missed the keynote for being late and other setup required for the\npresentation. My laptop was broken so had to do all the setup for demo on a friend’s laptop. The situation felt like a Jenkins admin under fire\nfor a production bug. After being under pressure for a while, took a break to admire the developer comics and had a chat with the graffiti painter.\nDuring lunch it was time for the GSoC presentation at the Jenkins community booth. All our presentation went well and we also interacted with real users.\nThen we had the GSoC Team pic at the Jenkins community booth. Later Abhyudaya and me gave our presentation at the lightning talks as well upon Mark Waite’s\nrequest. The event concluded with emotional goodbyes.\n\nAll GSoC Students were invited for dinner at Corinthia Lisboa’s Soul Garden restaurant. The party comprised of Oleg, Mark and his lovely wife, Liam, Tracy,\nAlyssa and Olivier. We had a very nice conversation and I had a very delicious Bacalhau (cod fish) dish. Then bid final goodbye to everybody.\n\nIt was a wonderful experience in a wonderful country among wonderful people. Hats off to the management team lead by Alyssa Tong and co. An event this big was\ncarried out without any hiccups! Everybody contributed their part to the event which made it very interactive and fun. Checkout some of my swags:\n\nA big shout out to the Jenkins project and CloudBees for sponsoring this trip. Also thank you Jenkins and Google Summer of Code for support. :)","title":"My DevOps World | Jenkins World Lisbon Experience","tags":["gitlab","devopsworld","jenkinsworld","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/author/baymac","twitter":"baymac04"}]}},{"node":{"date":"2019-08-23T00:00:00.000Z","id":"eddbf0dc-37bf-5f4d-8a6e-0bef8711db73","slug":"/blog/2019/08/23/introducing-gitlab-branch-source-plugin/","strippedHtml":"The GitLab Branch Source Plugin has come out of its beta stage and has been released to the Jenkins update center. It allows you to create job based on GitLab user or group or subgroup project(s). You can either:\n\nImport a single project’s branches as jobs from a GitLab user/group/subgroup (Multibranch Pipeline Job)\n\nImport all or a subset of projects as jobs from a GitLab user/group/subgroup (GitLab Group Job or GitLab Folder Organization)\n\nThe GitLab Group project scans the projects, importing the pipeline jobs it identifies based on the criteria provided. After a project is imported, Jenkins immediately runs the jobs based on the Jenkinsfile pipeline script and notifies the status to GitLab Pipeline Status. This plugin unlike other Branch Source Plugins provides GitLab server configuration which can be configured in Configure System. Jenkins Configuration as Code (JCasC) can also be used to configure the server. To learn more about server configuration see my previous blog post.\n\nRequirements\n\nJenkins - 2.176.2 (LTS)\n\nGitLab - v11.0+\n\nCreating a Job\n\nTo create a Multibranch Pipeline Job (with GitLab branch source) or GitLab Group Job, you must have GitLab Personal Access Token added to the server configuration. The credentials is used to fetch meta data of the project(s) and to set up hooks on GitLab Server. If the token has admin access you can also set up System Hooks while Web Hooks can be set up from any user token.\n\nCreate a Multibranch Pipeline Job\n\nGo to Jenkins > New Item > Multibranch Pipeline > Add Source > GitLab Project\n\nServer - Select your desired GitLab server from the dropdown, needs to be configured before creating this job.\n\nCheckout Credentials - Add credentials of type SSHPrivateKey or Username/Password if there are any private projects to be built by the plugin. If all projects are public then no checkout credentials required. Checkout credential is different from the credential (of type GitLab Personal Access Token) setup in GitLab server config.\n\nOwner - Can be a user, group or subgroup. Depending on this the Projects field is populated.\n\nProjects - Select the project you want to build from the dropdown.\n\nBehaviours - These traits are very powerful tool to configure the build logic and post build logic. We have defined new traits. You can see all the information in repository documentation.\n\nSave and wait for the branches indexing. You are free to navigate from here, the job progress is displayed to the left hand side.\n\nAfter the indexing, the imported project listed all the branches, merge requests and tags as jobs.\n\nOn visiting each job, you will find some action items on the left hand side:\n\nYou can trigger the job manually by selecting Build Now.\n\nYou can visiting the particular branch/merge request/tag on your GitLab Server by selecting the corresponding button.\n\nCreate a GitLab Group Job Type\n\nGo to Jenkins > New Item > GitLab Group\n\nYou can notice the configuration is very similar to Multibranch Pipeline Job with only Projects field missing. You can add all the projects inside your Owner i.e. User/Group/Subgroup. The form validation will check with your GitLab server if the owner is valid. You can add Discover subgroup project trait which allows you to discover this child projects of all subgroups inside a Group or Subgroup but this trait is not applicable to User. While indexing, web hook is created in each project. GitLab Api doesn’t support creation of Group web hooks so this plugin doesn’t support that feature which is only available in GitLab EE.\n\nYou can now explore your imported projects, configuring different settings on each of those folders if needed.\n\nGitLab Pipeline Status Notification\n\nGitLab is notified about build status from the point of queuing of jobs.\n\nSuccess - the job was successful\n\nFailure - the job failed and the merge request is not ready to be merged\n\nError - something unexpected happened; example: the job was aborted in Jenkins\n\nPending - the job is waiting in the build queue\n\nOn GitLab Pipeline status are hyperlinks to the corresponding Jenkins job build. To see the Pipeline Stages and the console output you will be required to visit your Jenkins server. We also planned to notify the pipeline stages to GitLab but it came with some drawbacks which has been addressed so far but there is future plan to add it as trait.\n\nYou can also skip notifying GitLab about the pipeline status by selecting Skip pipeline status notifications from the traits list.\n\nMerge Requests\n\nImplementing support for Merge Requests for the projects was challenging. First, MRs are of 2 types i.e. Origin branches and Forked Project branches so there had to be different implementation for each head. Second, MRs from forks can be from untrusted sources, so a new strategy Trust Members was implemented which allows CI to build MRs only from trusted users who have accesslevel of Developer / Maintainer / Owner.\n\nThird, MRs from forks do not support pipeline status notification due to GitLab issue, see this. You can add a trait Log Build Status as Comment on GitLab that allows you to add a sudo user (leave empty if you want owner user) to comment on the commit/tag/mrs the build result. To add a sudo user your token must have admin access. By default only failure/error are logged as comment but you can also enable logging of success build by ticking the checkbox.\n\nSometimes, Merge Requests fail due to external errors so you want to trigger rebuild of mr by commenting jenkins rebuild. To enable this trigger add the trait Trigger build on merge request comment. The comment body can be changed in the trait. For security reasons, commentor should have Developer / Maintainer / Owner accesslevel in the project.\n\nHooks\n\nWeb hooks are automatically created on your projects if configured to do so in server configuration. Web hooks are ensured to pass through a CSRF filter. Jenkins listens to web hooks on the path /gitlab-webhook/post. On GitLab web hooks are triggered on the following events:\n\nPush Event - when a commit or branch is pushed\n\nTag Event - when a new tag is created\n\nMerge Request Event - when a merge request is created/updated\n\nNote Event - when a comment is made on a merge request\n\nYou can also set up System Hooks on your GitLab server if your token has admin access. System hooks are triggered when new projects are created, Jenkins triggers a rescan of the new project based on the configuration and sets up web hook on it. Jenkins listens to system hooks on the path /gitlab-systemhook/post. On GitLab system hooks are triigered on Repository Update Events.\n\nYou can also use Override Hook Management mode trait to override the default hook management and choose if you want to use a different context (say Item) or disable it altogether.\n\nJob DSL and JCasC\n\nYou can use Job DSL to create jobs. Here’s an example of Job DSL script:\n\norganizationFolder('GitLab Organization Folder') {\n    description(\"GitLab org folder created with Job DSL\")\n    displayName('My Project')\n    // \"Projects\"\n    organizations {\n        gitLabSCMNavigator {\n            projectOwner(\"baymac\")\n            credentialsId(\"i<3GitLab\")\n            serverName(\"gitlab-3214\")\n            // \"Traits\" (\"Behaviours\" in the GUI) that are \"declarative-compatible\"\n            traits {\n                subGroupProjectDiscoveryTrait() // discover projects inside subgroups\n                gitLabBranchDiscovery {\n                    strategyId(3) // discover all branches\n                }\n                originMergeRequestDiscoveryTrait {\n                    strategyId(1) // discover MRs and merge them with target branch\n                }\n                gitLabTagDiscovery() // discover tags\n            }\n        }\n    }\n    // \"Traits\" (\"Behaviours\" in the GUI) that are NOT \"declarative-compatible\"\n    // For some 'traits, we need to configure this stuff by hand until JobDSL handles it\n    // https://issues.jenkins.io/browse/JENKINS-45504\n    configure {\n        def traits = it / navigators / 'io.jenkins.plugins.gitlabbranchsource.GitLabSCMNavigator' / traits\n        traits\n\nYou can also use JCasC to directly create job from a Job DSL script. For example see the plugin repository.\n\nHow to talk to us about bugs or new features?\n\nThis project uses Jenkins JIRA to track issues. You can file issues under gitlab-branch-source-plugin component.\n\nSend your mail in the Developer Mailing list.\n\nJoin our Gitter channel.\n\nFuture work\n\nActively maintain GitLab Branch Source Plugin and take feedbacks from users to improve the plugin’s user experience.\n\nExtend support for GitLab Pipeline to Blueocean.\n\nResources\n\nGitLab API Plugin\n\nGitLab API Plugin Wiki\n\nGitLab Branch Source Plugin\n\nProject Summary\n\nGitHub Branch Source Plugin Release\n\nThank you Jenkins and Google Summer of Code :)","title":"Introducing new GitLab Branch Source Plugin","tags":["gitlab","plugins","pipeline","multibranch","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/author/baymac","twitter":"baymac04"}]}},{"node":{"date":"2019-06-29T00:00:00.000Z","id":"7b06e02e-ca3c-5b58-8850-3e214fd8268e","slug":"/blog/2019/06/29/phase-1-multibranch-pipeline-support-for-gitlab/","strippedHtml":"This is one of the Jenkins project in GSoC 2019. We are working on adding support\nfor Multi-branch\nPipeline Jobs and Folder Organisation in GitLab. The plan is to create the following\nplugins:\n\nGitLab API Plugin - Wraps GitLab Java APIs.\n\nGitLab Branch Source Plugin - Contains two packages:\n\nio.jenkins.plugins.gitlabserverconfig - Manages server configuration and web hooks management.\nIdeally should reside inside another plugin with name GitLab Plugin. In future, this package should\nbe moved into a new plugin.\n\nio.jenkins.plugins.gitlabbranchsource - Adds GitLab Branch Source for Multi-branch Pipeline Jobs (including\nMerge Requests) and Folder organisation.\n\nPresent State\n\nFreeStyle Job and Pipeline(Single Branch) Job are fully supported.\n\nMulti-branch Pipeline Job is partially supported (no MRs detection).\n\nGitLab Folder Organisation is not supported.\n\nGoals of this project\n\nImplement a lightweight GitLab Plugin that depends on GitLab API Plugin.\n\nFollow convention of 3 separate plugins i.e. GitLab Plugin, GitLab API Plugin, GitLab Branch Source Plugin.\n\nImplement GitLab Branch Source Plugin with support for Multi-branch Pipeline Jobs.\n\nSupport new Jenkins features such as\nJenkins Code as Configuration (JCasC),\nIncremental Tools.\n\nClear & Efficient design.\n\nSupport new SCM Trait APIs.\n\nSupport Java 8 and above.\n\nBuilding the plugin\n\nNo binaries are available for this plugin as the plugin is in the very early alpha stage, and not ready for the general\npublic quite yet.  If you want to jump in early, you can try building it yourself from source.\n\nInstallation:\n\nCheckout source code to your local machine:\n\ngit clone https://github.com/baymac/gitlab-branch-source-plugin.git\n\ncd gitlab-branch-source-plugin\n\nInstall the plugin:\n\nmvn clean install\n\nmvn clean install -DskipTests # to skip tests\n\nRun the plugin:\n\nmvn hpi:run # runs a Jenkins instance at localhost:8080\n\nmvn hpi:run -Djetty.port= # to run on your desired port number\n\nIf you want to test it with your Jenkins server, after mvn clean install follow these steps in your Jenkins instance:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nSelect Advanced tab\n\nIn Upload Plugin section, select Choose file\n\nSelect $ /target/gitlab-branch-source.hpi\n\nSelect Upload\n\nSelect Install without restart\n\nUsage\n\nAssuming plugin installation has done been already.\n\nSetting up GitLab Server Configuration on Jenkins\n\nOn jenkins, select Manage Jenkins\n\nSelect Configure System\n\nScroll down to find the GitLab section\n\nSelect Add GitLab Server | Select GitLab Server\n\nNow you will now see the GitLab Server Configuration options.\n\nThere are 4 fields that needs to be configured:\n\nName - Plugin automatically generates an unique server name for you. User may want to configure this field\nto suit their needs but should make sure it is sufficiently unique. We recommend to keep it as it is.\n\nServer URL - Contains the URL to your GitLab Server. By default it is set to \"https://gitlab.com\". User can\nmodify it to enter their GitLab Server URL e.g. https://gitlab.gnome.org/, http://gitlab.example.com:7990. etc.\n\nCredentials - Contains a list of credentials entries that are of type GitLab Personal Access Token. When\nno credential has been added it shows \"-none-\". User can add a credential by clicking \"Add\" button.\n\nWeb Hook - This field is a checkbox. If you want the plugin to setup a webhook on your GitLab project(s)\nrelated jobs, check this box. The plugin listens to a URL for the concerned GitLab project(s) and when an event\noccurs in the GitLab Server, the server sends an event trigger to the URL where the web hook is setup. If you\nwant continuous integration (or continuous delivery) on your GitLab project then you may want to automatically\nset it up.\n\nAdding a Personal Access Token Credentials (To automatically generate Personal Access Token see\nnext section):\n\nUser is required to add a GitLab Personal Access Token type credentials entry to securely persist the token\ninside Jenkins.\n\nGenerate a Personal Access Token on your GitLab Server:\n\nSelect profile dropdown menu from top-right corner\n\nSelect Settings\n\nSelect Access Token from left column\n\nEnter a name | Set Scope to api, read_user, read_repository\n\nSelect Create Personal Access Token\n\nCopy the token generated\n\nReturn to Jenkins | Select Add in Credentials field | Select Jenkins\n\nSet Kind to GitLab Personal Access Token\n\nEnter Token\n\nEnter a unique id in ID\n\nEnter a human readable description\n\nSelect Add\n\nTesting connection:\n\nSelect your desired token in the Credentials dropdown\n\nSelect Test Connection\n\nIt should return something like Credentials verified for user\n\nSelect Apply (at the bottom)\n\nGitLab Server is now setup on Jenkins\n\nCreating Personal Access Token within Jenkins\n\nAlternatively, users can generate a GitLab Personal Access Token within Jenkins itself and automatically add the\nGitLab Personal Access Token credentials to Jenkins server credentials.\n\nSelect Advanced at the bottom of GitLab Section\n\nSelect Manage Additional GitLab Actions\n\nSelect Convert login and password to token\n\nSet the GitLab Server URL\n\nThere are 2 options to generate token;\n\nFrom credentials - To select an already persisting Username Password Credentials or add an Username Password\ncredential to persist it.\n\nFrom login and password - If this is a one time thing then you can directly enter you credentials to the text boxes\nand the username/password credential is not persisted.\n\nAfter setting your username/password credential, select Create token credentials.\n\nThe token creator will create a Personal Access Token in your GitLab Server for the given user with the\nrequired scope and also create a credentials for the same inside Jenkins server. You can go back to the GitLab Server\nConfiguration to select the new credentials generated (select \"-none-\" first then new credentials will appear). For\nsecurity reasons this token is not revealed as plain text rather returns an id. It is a 128-bit long UUID-4 string\n(36 characters).\n\nConfiguration as Code\n\nNo need for messing around in the UI. Jenkins Configuration as Code (JCasC) or simply Configuration as Code Plugin\nallows you to configure Jenkins via a yaml file. If you are a first time user, you can learn more about JCasC\nhere.\n\nAdd configuration YAML:\n\nThere are multiple ways to load JCasC yaml file to configure Jenkins:\n\nJCasC by default searches for a file with the name jenkins.yaml in $JENKINS_ROOT.\n\nThe JCasC looks for an environment variable CASC_JENKINS_CONFIG which contains the path\nfor the configuration yaml file.\n\nA path to a folder containing a set of config files e.g. /var/jenkins_home/casc_configs.\n\nA full path to a single file e.g. /var/jenkins_home/casc_configs/jenkins.yaml.\n\nA URL pointing to a file served on the web e.g. /jenkins.yaml\" class=\"bare\">https:// /jenkins.yaml .\n\nYou can also set the configuration yaml path in the UI. Go to /configuration-as-code.\nEnter path or URL to jenkins.yaml and select Apply New Configuration.\n\nAn example of configuring GitLab server via jenkins.yaml :\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - gitlabPersonalAccessToken:\n              scope: SYSTEM\n              id: \"i<3GitLab\"\n              token: \"XfsqZvVtAx5YCph5bq3r\" # gitlab personal access token\n\nunclassified:\n  gitLabServers:\n    servers:\n      - credentialsId: \"i<3GitLab\"\n        manageHooks: true\n        name: \"gitlab.com\"\n        serverUrl: \"https://gitlab.com\"\n\nFor better security, see handling secrets\nsection in JCasC\ndocumentation.\n\nFuture Scope of work\n\nThe second phase of GSoC will be utilized to develop GitLab Branch Source. The new feature is a work in progress, but\nthe codebase is unstable and requires lot of bugfixes. Some features like Multibranch Pipeline Jobs are functioning\nproperly. More about it at the end of second phase.\n\nIssue Tracking\n\nThis project uses Jenkins JIRA to track issues. You can file issues under\ngitlab-branch-source-plugin component.\n\nAcknowledgements\n\nThis plugin is built and maintained by the Google Summer of Code (GSoC) Team for\nMulti-branch Pipeline\nSupport for GitLab. A lot of inspiration was drawn from GitLab Plugin, Gitea Plugin and GitHub Plugin.\n\nOur team consists of: baymac, LinuxSuRen,\nMarky, Joseph,\nJustin, Jeff.\n\nWith support from: Oleg, Greg,\nOwen.\n\nAlso thanks to entire Jenkins community for contributing with technical expertise and inspiration.\n\nLinks\n\nPhase 1 demo\n\nPresentation slides\n\nGitLab API Plugin\n\nGitLab Branch Source Plugin\n\nGitLab API Plugin Wiki\n\nIssue Tracker for Phase 1\n\nBlog","title":"Multi-branch Pipeline Jobs Support for GitLab SCM","tags":["gitlab","plugins","pipeline","credentials","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/author/baymac","twitter":"baymac04"}]}}]}},"pageContext":{"author":"baymac","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}