{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/author/cyberax",
    "result": {"data":{"author":{"avatar":null,"blog":null,"github":"Cyberax","html":"","id":"cyberax","irc":null,"linkedin":null,"name":"Aleksei Besogonov","slug":"blog/author/cyberax","twitter":null},"allBlog":{"edges":[{"node":{"date":"2016-06-10T00:00:00.000Z","id":"14ea0208-9b66-5e17-a4c1-d9b43525e9f4","slug":"/blog/2016/06/10/save-costs-with-ec2-spot-fleet/","strippedHtml":"This is a guest post by Aleksei Besogonov, Senior Software Developer at\nAmazon Web Services.\n\nEarlier this year, we published a case study on how\nLyft has used Amazon EC2 Spot instances to save 75% on their continuous delivery\ninfrastructure costs by simply changing four lines of code. Several other EC2 customers like Mozilla have\nalso reduced costs of their\ncontinuous integration, deployment and testing pipelines by up to 90% on Spot instances. You can view\nthe current savings on Spot instances over EC2 On-demand instances using the\nSpot Bid Advisor :\n\nAWS Spot instances are spare EC2 instances that you can bid on. While your Spot instances may be\nterminated when EC2’s spare capacity declines, you can automatically replenish these instances and\nmaintain your target capacity using\nEC2 Spot fleets. As each\ninstance type and Availability Zone provides an alternative capacity pool, you can select multiple\nsuch pools to launch the lowest priced instances currently available by launching a Spot\nfleet on the Amazon EC2 Spot Requests console\nor using the AWS CLI/SDK tools.\n\nIn this walkthrough, we’ll show you how to configure Jenkins to automatically scale a fleet of Spot\ninstances up or down depending on the number jobs to be completed.\n\nRequest an Amazon EC2 Spot fleet\n\nTo get started, login to Amazon EC2 console, and click on Spot Requests\nin the left hand navigation pane. Alternatively, you can directly login to\nAmazon EC2 Spot Requests console. Then click on the\nRequest Spot Instances button at the top of the dashboard.\n\nIn the Spot instance launch wizard, select the Request & Maintain option to request a Spot fleet that automatically\nprovisions the most cost-effective EC2 Spot instances, and replenishes them if interrupted. Enter an initial\ntarget capacity, choose an AMI, and select multiple instance types to automatically provision the lowest priced\ninstances available.\n\nOn the next page, ensure that you have selected a key pair, complete the launch wizard, and note the Spot\nfleet request ID.\n\nAmazon EC2 Spot fleet automates finding the lowest priced instances for you, and enables your Jenkins cluster\nto maintain the required capacity; so, you don’t need any bidding algorithms to provision the optimal Spot\ninstances over time.\n\nConfigure Jenkins\n\nInstall the Plugin\n\nFrom the Jenkins dashboard, select Manage Jenkins, and then click Manage Plugins. On the Available tab,\nsearch for and select the EC2 Fleet Jenkins Plugin. Then click the Install button.\n\nAfter the plugin installation is completed, select Manage Jenkins from the Jenkins dashboard, and\nclick Configure System. In the Cloud section, select Amazon Spot Fleet to add a new Cloud.\n\nConfigure AWS Credentials\n\nNext, we will configure the AWS and agent node credentials. Click the Add button next to AWS Credentials,\nselect Jenkins, and enter your AWS Access Key, secret, and ID.\n\nNext, click the Add button in the Spot fleet launcher to configure your agents with an SSH key.\nSelect Jenkins, and enter the username and private key (from the key pair you configured in your Spot fleet request)\nas shown below.\n\nConfirm that the AWS and SSH credentials you just added are selected. Then choose the region, and the Spot fleet\nrequest ID from the drop-down. You can also enter the maximum idle time before your cluster automatically scales\ndown, and the maximum cluster size that it can scale up to.\n\nSubmit Jobs and View Status\n\nAfter you have finished the previous step, you can view the EC2 Fleet Status in the left hand navigation pane on\nthe Jenkins dashboard. Now, as you submit more jobs, Jenkins will automatically scale your Spot fleet to add more\nnodes. You can view these new nodes executing jobs under the Build Executor Status.\nAfter the jobs are done, if the nodes remain free for the specified idle time (configured in the previous step),\nthen Jenkins releases the nodes, automatically scaling down your Spot fleet nodes.\n\nBuild faster and cheaper\n\nIf you have a story to share about your team or product, or have a question to ask, do leave a comment\nfor us; we’d love to connect with you!","title":"Save up to 90% of CI cost on AWS with Jenkins and EC2 Spot Fleet","tags":["aws","plugins","ec2"],"authors":[{"avatar":null,"blog":null,"github":"Cyberax","html":"","id":"cyberax","irc":null,"linkedin":null,"name":"Aleksei Besogonov","slug":"blog/author/cyberax","twitter":null}]}}]}},"pageContext":{"author":"cyberax","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}