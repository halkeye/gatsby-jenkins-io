{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/author/pvtuan10",
    "result": {"data":{"author":{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg","srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/77b35/pvtuan10.jpg 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/d4a57/pvtuan10.jpg 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/ef6ff/pvtuan10.webp 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/8257c/pvtuan10.webp 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/6766a/pvtuan10.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/author/pvtuan10","twitter":null},"allBlog":{"edges":[{"node":{"date":"2018-07-23T00:00:00.000Z","id":"c28896d2-8e68-54bb-a656-dea6d6148131","slug":"/blog/2018/07/23/remoting-kafka-plugin-1.0-release/","strippedHtml":"I am very excited to announce that we have recently released 1.0 version of Remoting Kafka Plugin under Jenkins Plugin. You can check the CHANGELOG to see the features included in this release.\n\nAbout me\n\nMy name is Pham Vu Tuan, I am a final year undergraduate student from Singapore. This is the first time I participate in Google Summer of Code and contribute to an open-source organization.\n\nMentors\n\nI have GSoC mentors who help me in this project Oleg Nenashev and Supun Wanniarachchi. Besides that, I also receive great support from developers in remoting project Devin Nusbaum and Jeff Thompson.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nThis project aims to develop a plugin in order to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins.\n\nBenefits to the community\n\nProvide a new method to connect agent to controller using Kafka besides existing methods such as JNLP or SSH Build Agents plugin.\n\nHelp to resolve the existing issues with the TCP protocol between controller and agent communication in Jenkins.\n\nHelp to resolve traffic prioritization and multi-agent communications issue in Jenkins.\n\nWhy Kafka?\n\nWhen planning for this project, we want to use traditional message queue system such as ActiveMQ or RabbitMQ. However, after some discussion, we decided to have a try with Kafka with more suitable features with this project:\n\nKafka itself is not a queue like ActiveMQ or RabbitMQ, it is a distributed, replicated commit log. This helps to remove message delivery complexity we have in traditional queue system.\n\nWe need to support data streaming as a requirement, and Kafka is good at this aspect, which RabbitMQ is lack of.\n\nKafka is said to have a better scalability and good support from the development community.\n\nArchitecture Overview\n\nThe project consists of multiple components:\n\nKafka Client Library - new command transport implementation, producer and consumer client logic.\n\nRemoting Kafka Plugin - plugin implementation with KafkaGlobalConfiguration, KafkaComputerLauncher and KafkaSecretManager.\n\nRemoting Kafka Agent - A custom JAR agent with remoting JAR packaged together with a custom Engine implementation to setup a communication channel with Kafka. The agent is also packaged as a Docker image in DockerHub.\n\nAll the components are packaged together with Docker Compose.\n\nThe below diagram is the overview of the current architecture:\n\nWith this design, controller is not communicating with agent using direct TCP communication anymore, all the communication commands are transfered with Kafka.\n\nFeatures\n\nThe project is now under the third coding phase and we have some features available in 1.0 release.\n\n1. Kafka Global Configuration with support of credentials plugin to store secrets.\n\n2. Launch agent with Kafka Launcher.\n\n3. Launch agent from CLI using agent JAR with secret provided to ensure security.\n\n4. Run jobs, pipeline using Kafka agent.\n\n5. Kafka communication between controller and agent.\n\nRemoting operations are being executed over Kafka. In the log you may see:\n\nCommand execution (SlaveInstallerFactoryImpl.isWindows())\n\nClassloading (Classloader.fetch())\n\nLog streaming (Pipe.chunk())\n\nHow to run demo\n\nWe have setup a ready-to-fly demo for this plugin. You can try to run a demo of the plugin by following this instruction.\nFeatures in the demo:\n\nDocker Compose starts preconfigured controller and agent instance, they connect automatically using Kafka launcher.\n\nKafka is secured and encrypted with SSL.\n\nThere few demo jobs in the instance so that a user can launch a job on the agent.\n\nKakfa Manager supported in localhost:9000 to support monitoring of Kafka cluster.\n\nPhase 2 Presentation Slides\n\nPhase 2 Presentation Video\n\nLinks\n\nGitHub Repository\n\nWiki\n\nPlugin Site\n\nProject Info\n\nIntroduction Blogpost\n\nPhase 1 Evaluation Slides\n\nPhase 2 Evaluation Slides\n\nPhase 1 Evaluation Video\n\nPhase 2 Evaluation Video","title":"Remoting Kafka Plugin 1.0: A new method to connect agents","tags":["plugins","gsoc","gsoc2018","remoting","kafka"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg","srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/77b35/pvtuan10.jpg 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/d4a57/pvtuan10.jpg 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/ef6ff/pvtuan10.webp 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/8257c/pvtuan10.webp 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/6766a/pvtuan10.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/author/pvtuan10","twitter":null}]}},{"node":{"date":"2018-07-05T00:00:00.000Z","id":"b1c89781-ce73-5eec-8d31-bf7f51174f63","slug":"/blog/2018/07/05/remoting-over-message-bus-alpha-release/","strippedHtml":"I am happy to announce that we have recently released an alpha version of Remoting Kafka Plugin to the Experimental Update Center. You can check the CHANGELOG to see the features included in this initial release.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nRemoting Kafka Plugin is a plugin developed under Jenkins Google Summer of Code 2018. The plugin is developed to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins. A quick introduction of the project can be found in this introduction blogpost.\n\nHow to use the plugin?\n\nThe instructions to run the plugin in alpha version are written here. Feel free to have a try and let us know your feedback on Gitter or the mailing list.\n\nLinks\n\nAlpha Changelog\n\nIntroduction Blogpost\n\nGitHub Repository\n\nProject Page\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Update: Alpha release of Remoting Kafka Plugin","tags":["plugins","gsoc","gsoc2018","remoting","alpha-release"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg","srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/77b35/pvtuan10.jpg 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/d4a57/pvtuan10.jpg 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/ef6ff/pvtuan10.webp 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/8257c/pvtuan10.webp 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/6766a/pvtuan10.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/author/pvtuan10","twitter":null}]}},{"node":{"date":"2018-06-18T00:00:00.000Z","id":"88647b04-059d-549e-a712-a9dfe1d2427e","slug":"/blog/2018/06/18/remoting-over-message-bus/","strippedHtml":"About me\n\nMy name is Pham Vu Tuan, I am a final year undergraduate student from Singapore. This is the first time I participate in Google Summer of Code and contribute to an open-source organization. I am very excited to contribute this summer.\n\nMentors\n\nI have GSoC mentors who help me in this project Oleg Nenashev and Supun Wanniarachchi. Besides that, I also receive great support from developers in remoting project Devin Nusbaum and Jeff Thompson.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nThis project aims to develop a plugin in order to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins.\n\nWhy Kafka?\n\nWhen planning for this project, we want to use traditional message queue system such as ActiveMQ or RabbitMQ. However, after some discussion, we decided to have a try with Kafka with more suitable features with this project:\n\nKafka itself is not a queue like ActiveMQ or RabbitMQ, it is a distributed, replicated commit log. This helps to remove message delivery complexity we have in traditional queue system.\n\nWe need to support data streaming as a requirement, and Kafka is good at this aspect, which RabbitMQ is lack of.\n\nKafka is said to have a better scalability and good support from the development community.\n\nCurrent State\n\nThe project is reaching the end of the first phase and here are things we have achieved so far:\n\nSetup project as a set of Docker Compose components: Kafka cluster, Jenkins controller (with plugin) and a custom agent (JAR).\n\nCreate a PoC with new command transport implementation to support Kafka, which involves of command invocation, RMI, classloading and data streaming.\n\nMake neccessary changes in Remoting and Jenkins core to make them extensible for the use of this project.\n\nDecide to use Kafka as a suitable final implementation.\n\nWe planned to release an alpha version of this plugin by the end of this phase, but decided to move this release to the second phase because we need to wait for remoting and core patches to be released.\n\nArchitecture Overview\n\nThe project consists of multiple components:\n\nKafka Client Library - new command transport implementation, producer and consumer client logic.\n\nRemoting Kafka Plugin - plugin implementation with KafkaGlobalConfiguration and KafkaComputerLauncher.\n\nRemoting Kafka Agent - A custom JAR agent with remoting JAR packaged together with a custom Engine implementation to setup a communication channel with Kafka.\n\nAll the components are packaged together with Docker Compose.\n\nThe below diagram is the overview of the current architecture:\n\nWith this design, controller is not communicating with agent using direct TCP communication anymore, all the communication commands are transfered with Kafka.\n\nFeatures\n\n1. Kafka Global Configuration\n\n2. Custom agent start up as a JAR\n\nUser can start running an agent with the following command:\n\n3. Launch agents with Kafka\n\n4. Commands transferred between controller and agent over Kafka\n\nRemoting operations are being executed over Kafka. In the log you may see:\n\nClassloading (Classloader.fetch())\n\nLog streaming (Pipe.chunk())\n\n5. Run jobs with remoting Kafka\n\nIt is possible to run jobs on Agents connected over Kafka\n\nNext Phase Plan\n\nHere are the tasks planned for the next phase:\n\nSupport security for controller-agent connection:\n\nKafka authentication/authorization ( JENKINS-51472, JENKINS-51473).\n\nAgent secrets ( JENKINS-51470).\n\nImprove Kafka producer-consumer model to ensure reliability ( JENKINS-51942).\n\nBug fixing.\n\nRelease alpha version and address feedback ( JENKINS-51713).\n\nHow to run demo\n\nYou can try to run a demo of the plugin by following the instruction.\n\nLinks\n\nGitHub Repository\n\nProject Page\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Intro: Jenkins Remoting over Message Bus/Queue","tags":["plugins","gsoc","gsoc2018","remoting"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg","srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/77b35/pvtuan10.jpg 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/d4a57/pvtuan10.jpg 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/ef6ff/pvtuan10.webp 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/8257c/pvtuan10.webp 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/6766a/pvtuan10.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/author/pvtuan10","twitter":null}]}}]}},"pageContext":{"author":"pvtuan10","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}