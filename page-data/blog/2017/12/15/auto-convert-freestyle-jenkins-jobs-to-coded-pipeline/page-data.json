{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/12/15/auto-convert-freestyle-jenkins-jobs-to-coded-pipeline/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This is a guest post by Sanil Pillai, Director of Labs &amp; Strategic Insights, Infostretch</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.infostretch.com\">Infostretch</a> has created a\n<a href=\"https://plugins.jenkins.io/convert-to-pipeline\">plugin</a> for teams\nupgrading from Freestyle Jobs to Pipelines as code with Jenkins Pipeline.\nThis new plugin streamlines the process and accelerates\npipeline on-boarding for any new set of applications. Previously, when\nupgrading to Jenkins Pipeline, converting Freestyle Jobs required developers\nto drill down on each one of those hundreds (or thousands!)  of jobs to understand\ntools, configurations, URLs, parameters, and more before rewriting them in\n<a href=\"/doc/book/pipeline/syntax\">Pipeline syntax</a>. This process is very manual,\nerror-prone, lengthy, and not cost-effective. Beyond saving time, the new\nplugin also assures adherence to proper coding standards and separates complex\nbusiness logic and standards declaration from execution flow.</p>\n</div>\n<div class=\"paragraph\">\n<p>Key features:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Convert single freestyle job to pipeline</p>\n</li>\n<li>\n<p>Convert chain of freestyle jobs to single pipeline</p>\n</li>\n<li>\n<p>Works with both Jenkins and CloudBees Jenkins Enterprise</p>\n</li>\n<li>\n<p>Plugin can be customized to support any Freestyle plugin and an\norganization&#8217;s <a href=\"/doc/book/pipeline/shared-libraries\">Pipeline Shared Library</a>,\nor Groovy coding standards.</p>\n</li>\n<li>\n<p>Works with CloudBees' Role-based Access Control to help the new Pipelines\ncomply with existing security policies.</p>\n</li>\n<li>\n<p>Direct migration of properties such as \"Build with Parameters\" to newly\ncreated Pipelines.</p>\n</li>\n<li>\n<p>Direct migration of Agent on which job is to be run with support for multiple agent labels across different downstream jobs</p>\n</li>\n<li>\n<p>Environment properties: JDK, NodeJS</p>\n</li>\n<li>\n<p>Supports Git SCM.</p>\n</li>\n<li>\n<p>Build steps: Maven, Ant, Shell, Batch, and Ansible Playbook.</p>\n</li>\n<li>\n<p>Post build actions: artifact archiver, simple mailer, TestNG reports, JUnit reports, checkstyle publisher</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Now, let’s take a look at how to get started:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Click on a link at Root level or Folder level or Job level.</p>\n<div class=\"imageblock middle\">\n<div class=\"content\">\n<img src=\"/images/post-images/freestyle-converter/Image01-Jenkins-Pipeline-Infostretch.png\" alt=\"Image01 Jenkins Pipeline Infostretch\">\n</div>\n</div>\n</li>\n<li>\n<p>Select the job from the drop-down list that is the beginning point of the\n\"chain\". If job level link is clicked, this drop-down list will not be visible.</p>\n<div class=\"imageblock middle\">\n<div class=\"content\">\n<img src=\"/images/post-images/freestyle-converter/Image02-Jenkins-Pipeline-Infostretch.png\" alt=\"Image02 Jenkins Pipeline Infostretch\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Provide the new pipeline job name. If this is not specified, the plugin will\nattempt to create a new pipeline job with the naming convention of\n\"oldname-pipeline\".</p>\n</div>\n</li>\n<li>\n<p>Check \"Recursively convert downstream jobs if any?\" if you wish to have all the\ndownstream jobs converted into this new pipeline. The plugin will write all the\nlogic of current and downstream jobs into a single pipeline.</p>\n</li>\n<li>\n<p>Check \"Commit Jenkinsfile?\" if you would like the plugin to create a\nJenkinsfile and commit it back to the SCM. The plugin will commit the\nJenkinsfile at the root of the SCM repository it finds in the first job\n(selected in step 1 above). It will attempt to commit to this repo using the\ncredentials it finds in the first job.</p>\n</li>\n<li>\n<p>Do note that the plugin will checkout the repo in to a temporary workspace on\nthe controller (JENKINS_HOME/plugins/convert-to-    pipeline/ws). Once the\nconversion is complete and Jenkinsfile is committed back to the repo, the\nworkspace will be deleted.</p>\n</li>\n<li>\n<p>Click \"Convert\" to convert the Freestyle job configurations to a single\nscripted pipeline job. Once the conversion is complete and the new job is\ncreated, you will be redirected to the newly created pipeline job.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>That’s it!</p>\n</div>\n<div class=\"paragraph\">\n<p>To learn more about plugin usage, customization and to see a demo\nclick <a href=\"https://www.youtube.com/watch?v=Xx7AbPM4KYM&amp;feature=youtu.be\">here</a>\nto watch the webinar replay on-demand.</p>\n</div>","id":"c2ac3d30-6b1c-5338-a437-133b5ebc730e","title":"Auto-Convert Freestyle Jobs to Jenkins Pipeline","date":"2017-12-15T00:00:00.000Z","slug":"/blog/2017/12/15/auto-convert-freestyle-jenkins-jobs-to-coded-pipeline/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Director of Labs &amp; Strategic Insights, Infostretch</p>\n</div>","id":"spillai","irc":null,"linkedin":null,"name":"Sanil Pillai","slug":"/blog/authors/spillai/","twitter":null}]}},"pageContext":{"id":"c2ac3d30-6b1c-5338-a437-133b5ebc730e"}},
    "staticQueryHashes": ["1271460761","3649515864"]}