{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/02/06/scm-api-2-take2/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>In January we\n<a href=\"/blog/2017/01/17/scm-api-2/\">announced the release of SCM API 2.0</a>.\nAfter the original release was published we identified four new high-impact\nissues.  We decided to remove the new versions of the plugins from the update\ncenter until those issues could be resolved. The issues have now been resolved\nand the plugins are now available from the update center.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"summary-for-busy-jenkins-administrators\"><a class=\"anchor\" href=\"#summary-for-busy-jenkins-administrators\"></a>Summary for busy Jenkins Administrators</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Upgrading should make multi-branch projects much better.  When you are ready to\nupgrade you must ensure that you upgrade all the required plugins.  If you miss\nsome, just upgrade them and restart to fix the issue. And of course, it&#8217;s\nalways a good idea to take a backup of your <code>JENKINS_HOME</code> before upgrading any\nplugins.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the list below, version numbers in <strong>bold</strong> indicate a change from the\noriginal version in the\n<a href=\"/blog/2017/01/17/scm-api-2/\">original announcement</a></p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Folders Plugin</dt>\n<dd>\n<p><strong>5.17</strong> or newer</p>\n</dd>\n<dt class=\"hdlist1\">SCM API Plugin</dt>\n<dd>\n<p><strong>2.0.2</strong> or newer</p>\n</dd>\n<dt class=\"hdlist1\">Branch API Plugin</dt>\n<dd>\n<p><strong>2.0.2</strong> or newer</p>\n</dd>\n<dt class=\"hdlist1\">Git Plugin</dt>\n<dd>\n<p>This depends on the exact release line of the Git plugin that you are using.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Following the 2.6.x release line: <strong>2.6.4</strong> or newer</p>\n</li>\n<li>\n<p>Following the 3.0.x release line (<em>recommended</em>): <strong>3.0.4</strong> or newer</p>\n</li>\n</ul>\n</div>\n</dd>\n<dt class=\"hdlist1\">Mercurial Plugin</dt>\n<dd>\n<p>1.58 or newer</p>\n</dd>\n<dt class=\"hdlist1\">GitHub Branch Source Plugin</dt>\n<dd>\n<p><strong>2.0.1</strong> or newer</p>\n</dd>\n<dt class=\"hdlist1\">BitBucket Branch Source Plugin</dt>\n<dd>\n<p><strong>2.0.2</strong> or newer</p>\n</dd>\n<dt class=\"hdlist1\">GitHub Organization Folders Plugin</dt>\n<dd>\n<p>1.6</p>\n</dd>\n<dt class=\"hdlist1\">Pipeline Multibranch Plugin</dt>\n<dd>\n<p><strong>2.12</strong> or newer</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>If you are using the <a href=\"https://plugins.jenkins.io/blueocean\">Blue Ocean plugin</a></p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Blue Ocean Plugin</dt>\n<dd>\n<p><strong>1.0.0-b22</strong> or newer</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>Other plugins that may require updating:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">GitHub API Plugin</dt>\n<dd>\n<p>1.84 or newer</p>\n</dd>\n<dt class=\"hdlist1\">GitHub Plugin</dt>\n<dd>\n<p>1.25.0 or newer</p>\n</dd>\n</dl>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>If you upgrade to Branch API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins <strong>and</strong> you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.</p>\n</div>\n<div class=\"paragraph\">\n<p>The solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>After an upgrade you will see the data migration warning (see the screenshot in\n<a href=\"https://issues.jenkins.io/browse/JENKINS-41608\">JENKINS-41608</a> for an\nexample) this is normal and expected.  The unreadable data will be removed by\nthe next scan / index or can be removed manually using the <em>Discard Unreadable\nData</em> button.  The warning will disappear on the next restart after the\nunreadable data has been removed.</p>\n</div>\n<div class=\"paragraph\">\n<p>Please update to the versions listed above. If you want to know more about the\nissues and how they were resolved, see the next section.</p>\n</div>\n<hr>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"analysis-of-the-issues\"><a class=\"anchor\" href=\"#analysis-of-the-issues\"></a>Analysis of the issues</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The issues described below are resolved with these plugin releases:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Folders Plugin: <strong>5.17</strong></p>\n</li>\n<li>\n<p>SCM API Plugin: <strong>2.0.2</strong></p>\n</li>\n<li>\n<p>Branch API Plugin: <strong>2.0.2</strong></p>\n</li>\n<li>\n<p>Git Plugin: <strong>Either</strong> <strong>2.6.4</strong> <strong>or</strong> <strong>3.0.4</strong></p>\n</li>\n<li>\n<p>GitHub Branch Source Plugin: <strong>2.0.1</strong></p>\n</li>\n<li>\n<p>BitBucket Branch Source Plugin: <strong>2.0.2</strong></p>\n</li>\n<li>\n<p>Pipeline Multibranch Plugin: <strong>2.12</strong></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://issues.jenkins.io/browse/JENKINS-41121\">JENKINS-41121: GitHub Branch Source upgrade can cause a lot of rebuilds</a>:</p>\n</div>\n<div class=\"paragraph\">\n<p>Migration of GitHub branches from 1.x to 2.x resulted in a change of the\nimplementation class used to identify branches.  Some other other bugs in\nBranch API had been fixed and the combined effect resulted in a rebuild of all\nGitHub Branches (not PRs) after an upgrade to GitHub Branch Source Plugin\n2.0.0.  This rebuild was referred to as a \"build storm\".</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Resolution:</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The SCM API plugin was enhanced to add an extension point that allows for a second round of data migration when upgrading.</p>\n</li>\n<li>\n<p>The second round of data migration allows plugins implementing the SCM API contract to fix implementation class issues in context.</p>\n</li>\n<li>\n<p>The Branch API plugin was enhanced to use this new extension point.</p>\n</li>\n<li>\n<p>The GitHub Branch Source plugin was enhanced to provide an implementation of this extension point.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://issues.jenkins.io/browse/JENKINS-41255\">JENKINS-41255: Upgrading from a navigator that did not assign consistent source ids to a version that does assign consistent source ids causes a build storm on first scan</a>:</p>\n</div>\n<div class=\"paragraph\">\n<p>The GitHub Branch Source and BitBucket Branch Source plugins in 1.x were not\nassigning consistent IDs to multi-branch projects discovered in an Organization\nFolder.  Both plugins were fixed in 2.0.0 to assign consistent IDs as a change\nof ID would result in a rebuild of all projects.  What was missed is that the\nvery first scan of an Organization Folder after an upgrade will change the\nrandomly assigned ID assigned by the 1.x plugins into the consistent ID\nassigned by the 2.0.0 plugins and consequently trigger a rebuild of all\nbranches. This rebuild was referred to as a \"build storm\".</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Resolution:</strong></p>\n</div>\n<div class=\"paragraph\">\n<p>The Branch API plugin was enhanced to detect the case where a branch source has\nbeen changed but the change is only changing the ID.  When such changes are\nidentified, the downstream references of the ID are all updated which will\nprevent a build storm.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://issues.jenkins.io/browse/JENKINS-41313\">JENKINS-41313: On first index after upgrade to 2.0.0 all open PRs are rebuilt</a>:</p>\n</div>\n<div class=\"paragraph\">\n<p>The BitBucket Branch Source 1.x did not store all the information about PRs\nthat is required by the SCM API 2.0.x model.  This could well have resulted in\nsubtle effects when manually triggering a rebuild of a merge PR if the PR&#8217;s\ntarget branch has been modified after the PR branch was first detected by\nJenkins. Consequently, as the information is required, BitBucket Branch Source\nplugin 2.0.0 populated the information with dummy values which would force the\ncorrect information to be retrieved.  The side-effect is that all PR branches\nwould be rebuilt.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Resolution:</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The changes in SCM API 2.0.2 introduced to resolve JENKINS-41121 provided a path to resolve this issue without causing a rebuild of all PR branches.</p>\n</li>\n<li>\n<p>The BitBucket Branch Source plugin was enhanced to provide an implementation of the new SCM API extension point that connects to BitBucket and retrieves the missing information.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://issues.jenkins.io/browse/JENKINS-41124\">JENKINS-41124: Can&#8217;t get a human readable job name anymore</a>:</p>\n</div>\n<div class=\"paragraph\">\n<p>During initial testing of the Branch API 2.0.0 release an issue was identified\nwith how Organization Folders handled unusual names.  None of the existing\nimplementations of the <code>SCMNavigator</code> API could generate such unusual names due\nto form validation on GitHub / BitBucket replacing unusual characters with <code>-</code>\nwhen creating a repository.</p>\n</div>\n<div class=\"paragraph\">\n<p>It would be irresponsible to rely on external services sanitizing their input\ndata for the correct operation of Organization Folders.  Consequently, in\nBranch API 2.0.0 the names were all transformed into URL safe names, with the\noriginal URLs still resolving to the original projects so that any existing\nsaved links would remain functional.</p>\n</div>\n<div class=\"paragraph\">\n<p>Quite a number of people objected to this change of URL scheme.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Resolution:</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>There has been a convention in Jenkins that the on-disk storage structure for\njobs mirrors the URL structure. This is only a convention and there is nothing specific in the code that\nmandates following the convention.</p>\n</li>\n<li>\n<p>The Folders Plugin was enhanced to allow for computed folders (where the item\nnames are provided by an external source) to provide a strategy to use when\ngenerating the on-disk storage names as well as the URL component names for\nthe folder&#8217;s child items.</p>\n</li>\n<li>\n<p>The Branch API plugin was enhanced to use this new strategy for name transformation.</p>\n</li>\n<li>\n<p>The net effect of this change is that the URLs remain the same as for 1.x but\nthe on-disk storage uses transformed names that are future proofed against\nany new SCMNavigator implementations where the backing service allows names\nthat are problematic to use as filesystem directory names.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><strong>Side-effect:</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The Branch API 2.0.0 approach handled the transformation of names by renaming the items using the Jenkins Item rename API.</p>\n</li>\n<li>\n<p>The Branch API 2.0.2 approach does not rename the child items as it is only the on-disk storage location that is moved.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This means that the Jenkins Item rename API cannot be used.</p>\n</div>\n<div class=\"paragraph\">\n<p>At this time, the only known side-effect is in the  <a href=\"https://plugins.jenkins.io/jobConfigHistory\">Job Configuration History</a> plugin.\nThe configuration history of each child item will still be tracked going\nforward after the upgrade.  The pre-upgrade configuration history is also\nretained.  Because the Jenkins Item rename API cannot be used to flag the\nconfiguration file location change, there is no association between the\npre-upgrade history chain and the post-upgrade history chain.</p>\n</div>\n</div>\n</div>","id":"46885786-902f-55cb-b263-cae8df8f0611","title":"SCM API 2.0 Release Take 2","date":"2017-02-06T00:00:00.000Z","slug":"/blog/2017/02/06/scm-api-2-take2/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"stephenc","html":"","id":"stephenc","irc":null,"linkedin":null,"name":"Stephen Connolly","slug":"/blog/authors/stephenc/","twitter":"connolly_s"}]}},"pageContext":{"id":"46885786-902f-55cb-b263-cae8df8f0611"}},
    "staticQueryHashes": ["1271460761","3649515864"]}