{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/02/03/declarative-pipeline-ga/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This is a guest post by\n<a href=\"https://github.com/HRMPW\">Patrick Wolf</a>,\nDirector of Product Management at\n<a href=\"https://cloudbees.com\">CloudBees</a>\nand contributor to\nthe Jenkins project.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>I am very excited to announce the addition of\n<a href=\"https://plugins.jenkins.io/pipeline-model-definition\">Declarative Pipeline syntax</a>\n1.0 to\n<a href=\"https://plugins.jenkins.io/workflow-aggregator\">Jenkins Pipeline.</a>\nWe think this new syntax will enable everyone involved in DevOps, regardless of expertise,\nto participate in the continuous delivery process. Whether creating, editing or reviewing\na pipeline, having a straightforward structure helps to understand and predict the\nflow of the pipeline and provides a common foundation across all pipelines.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"pipeline-as-code\"><a class=\"anchor\" href=\"#pipeline-as-code\"></a>Pipeline as Code</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Pipeline as Code was one of the pillars of the Jenkins 2.0 release and an\nessential part of implementing continuous delivery (CD). Defining all of the\nstages of an application&#8217;s CD pipeline within a <code>Jenkinsfile</code> and checking it\ninto the repository with the application code provides all of the benefits\ninherent in source control management (SCM):</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Retain history of all changes to Pipeline</p>\n</li>\n<li>\n<p>Rollback to a previous Pipeline version</p>\n</li>\n<li>\n<p>View diffs and merge changes to the Pipeline</p>\n</li>\n<li>\n<p>Test new Pipeline steps in branches</p>\n</li>\n<li>\n<p>Run the same Pipeline on a different Jenkins server</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"getting-started-with-declarative-pipeline\"><a class=\"anchor\" href=\"#getting-started-with-declarative-pipeline\"></a>Getting Started with Declarative Pipeline</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We recommend people begin using it for all their Pipeline definitions in Jenkins.\nThe plugin has been available for use and testing starting with the 0.1 release that was debuted at\n<a href=\"https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines\">Jenkins World</a>\nin September. Since then, it has already been installed in over 5,000 Jenkins\nenvironments.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you haven&#8217;t tried Pipeline or have considered Pipeline in the past, I\nbelieve this new syntax is much more approachable with an easier adoption curve\nto quickly realize all of the benefits of Pipeline as Code. In addition, the\npre-defined structure of Declarative makes it possible to create and edit\nPipelines with a graphical user interface (GUI). The Blue Ocean team is\nactively working on a\n<a href=\"/blog/2017/01/20/blueocean-dev-log-jan2/#editor\">Visual Pipeline Editor</a>\nwhich will be included in an upcoming release.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you have already begun using Pipelines in Jenkins, I believe that this new\nalternative syntax can help expand that usage.</p>\n</div>\n<div class=\"paragraph\">\n<p>The original syntax for defining Pipelines in Jenkins is a Groovy DSL that\nallows most of the features of full\n<a href=\"https://en.wikipedia.org/wiki/Imperative_programming\">imperative programming</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This syntax is still fully supported and is now\nreferred to as \"Scripted Pipeline Syntax\" to distinguish it from \"Declarative\nPipeline Syntax.\" Both use the same underlying execution engine in Jenkins and\nboth will generate the same results in\n<a href=\"https://plugins.jenkins.io/pipeline-stage-view\">Pipeline Stage View</a>\nor Blue Ocean visualizations. All existing\n<a href=\"/doc/pipeline/steps\">Pipeline steps</a>,\nGlobal Variables, and\n<a href=\"/doc/book/pipeline/shared-libraries\">Shared Libraries</a>\ncan be used in either. You can now create more cookie-cutter Pipelines and\nextend the power of Pipeline to all users regardless of Groovy expertise.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"declarative-pipeline-features\"><a class=\"anchor\" href=\"#declarative-pipeline-features\"></a>Declarative Pipeline Features</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/Lint_%28software%29\">Syntax Checking</a></p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Immediate runtime syntax checking with explicit error messages.</p>\n</li>\n<li>\n<p>API endpoint for linting a <code>Jenkinsfile</code>.</p>\n</li>\n<li>\n<p>CLI command to lint a <code>Jenkinsfile</code>.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/docker-workflow\">Docker Pipeline integration</a></p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Run all stages in a single container.</p>\n</li>\n<li>\n<p>Run each stage in a different container.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>Easy configuration</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Quickly define parameters for your Pipeline.</p>\n</li>\n<li>\n<p>Quickly define environment variables and credentials for your Pipeline.</p>\n</li>\n<li>\n<p>Quickly define options (such as timeout, retry, build discarding) for your Pipeline.</p>\n</li>\n<li>\n<p>Round trip editing with the Visual Pipeline Editor (watch for preview release shortly).</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>Conditional actions</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Send notifications or take actions depending upon success or failure.</p>\n</li>\n<li>\n<p>Skip stages based on branches, environment, or other Boolean expression.\nrelease shortly)</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"where-can-i-learn-more\"><a class=\"anchor\" href=\"#where-can-i-learn-more\"></a>Where Can I Learn More?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Be on the lookout for future blog posts detailing specific examples of\nscenarios or features in Declarative Pipeline. Andrew Bayer, one of the primary\ndevelopers behind Declarative Pipeline, will be presenting at\n<a href=\"https://fosdem.org/2017/schedule/event/declarative_pipeline/\">FOSDEM</a>\nin Brussels, Belgium this weekend. We have also scheduled an online\n<a href=\"https://www.meetup.com/Jenkins-online-meetup/events/237317346/\">Jenkins Meetup (JAM)</a>\nlater this month to demo the features of Declarative Pipeline and give a sneak\npeek at the upcoming Blue Ocean Pipeline Editor.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the meantime, all the\n<a href=\"/doc/\">Pipeline documentation</a>\nhas been updated to incorporate a\n<a href=\"/doc/pipeline/tour/hello-world\">Guided Tour</a>,\nand a\n<a href=\"/doc/book/pipeline/syntax\">Syntax Reference</a>\nwith numerous examples to help you get on your way to using Pipeline.  Simply\nupgrade to the latest version, 2.5 or later of the Pipeline in Jenkins to\nenable all of these great features.</p>\n</div>\n</div>\n</div>","id":"eba78b86-bbf2-5022-a3c9-27efc09a20e1","title":"Declarative Pipeline Syntax 1.0 is now available","date":"2017-02-03T00:00:00.000Z","slug":"/blog/2017/02/03/declarative-pipeline-ga/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"HRMPW","html":"","id":"hrmpw","irc":null,"linkedin":null,"name":"Patrick Wolf","slug":"/blog/author/hrmpw","twitter":"hrmpw"}]}},"pageContext":{"next":"/blog/2017/02/06/scm-api-2-take2/","previous":"/blog/2017/02/03/blueocean-devlog-feb/","id":"eba78b86-bbf2-5022-a3c9-27efc09a20e1"}},
    "staticQueryHashes": ["1271460761","3649515864"]}