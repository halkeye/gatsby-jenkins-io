{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/02/07/declarative-maven-project/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><strong>Declare Your Pipelines!</strong>\n<a href=\"/blog/2017/02/03/declarative-pipeline-ga/\">Declarative Pipeline 1.0 is here</a>!\nThis is first in a series of blog posts that will show some of the cool features of\n<a href=\"/doc/book/pipeline/syntax/#declarative-pipeline\">Declarative Pipeline</a>.\nFor several of these posts, I&#8217;ll be revisiting some of my\n<a href=\"/blog/2016/07/18/pipeline-notifications/\">previous posts</a>\non using various plugins with (Scripted) Pipeline,\nand seeing how those are implemented in Declarative Pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>To start though, let&#8217;s get familiar with the basic structure of a Declarative Pipeline\nby creating a simple Pipeline for a Maven-based Java project - the\n<a href=\"https://plugins.jenkins.io/junit\">Jenkins JUnit plugin</a>.\nWe&#8217;ll create a minimal Declarative Pipeline,\nadd the settings needed to install Maven and the JDK,\nand finally we&#8217;ll actually run Maven to build the plugin.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"set-up\"><a class=\"anchor\" href=\"#set-up\"></a>Set up</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>With Declarative, it is still possible to run Pipelines edited directly in the\nJenkins web UI, but one of the key features of \"Pipeline as Code\" is\nchecking-in and being able to track changes.  For this post, I&#8217;m going to use\nthe\n<a href=\"https://github.com/bitwiseman/junit-plugin/tree/blog/add-declarative-pipeline\"><code>blog/add-declarative-pipeline</code></a>\nbranch of\n<a href=\"https://github.com/bitwiseman/junit-plugin\">my fork</a> of the JUnit plugin.\nI&#8217;m going to set up a Multi-branch Pipeline and point it at my repository.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-07/junit-config.png\" alt=\"JUnit Multi-branch Pipeline Configuration\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve also set this Pipeline&#8217;s Git configuration to automatically \"clean after\ncheckout\" and to only keep the ten most recent runs.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"writing-a-minimal-pipeline\"><a class=\"anchor\" href=\"#writing-a-minimal-pipeline\"></a>Writing a Minimal Pipeline</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>As has been said before, Declarative Pipeline provides a more structured,\n\"opinionated\" way to create Pipelines. I&#8217;m going to start by creating a minimal\nDeclarative Pipeline and adding it to my branch.  Below is a minimal Pipeline\n(with annotations) that just prints a message:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline { <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n    agent any // &lt;2&gt; <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n    stages { <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n        stage('Build') { <i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\n            steps { <i class=\"conum\" data-value=\"6\"></i><b>(6)</b>\n               echo 'This is a minimal pipeline.' <i class=\"conum\" data-value=\"7\"></i><b>(7)</b>\n            }\n        }\n    }\n}\n// Scripted //\nnode { <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n    checkout scm <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n    stage ('Build') { <i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\n        echo 'This is a minimal pipeline.' <i class=\"conum\" data-value=\"6\"></i><b>(6)</b>\n    }\n}</pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>All Declarative Pipelines start with a <code>pipeline</code> section.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>Select where to run this Pipeline, in this case \"any\" agent, regardless of label.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>Declarative automatically performs a checkout of source code on the agent,\nwhereas Scripted Pipeline users must explicitly call <code>checkout scm</code>,</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>A Declarative Pipeline is defined as a series of stages.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"5\"></i><b>5</b></td>\n<td>Run the \"Build\" stage.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"6\"></i><b>6</b></td>\n<td>Each stage in a Declarative Pipeline runs a series of steps.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"7\"></i><b>7</b></td>\n<td>Run the <code>echo</code> step to print a message in the Console Output.</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nIf you are familiar with Scripted Pipeline, you can toggle the above\nDeclarative code sample to show the Scripted equivalent.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Once I add the Pipeline above to my <code>Jenkinsfile</code> and run \"Branch Indexing\", my\nJenkins will pick it up and run run it.  We see that the Declarative Pipeline\nhas added stage called \"Declarative: Checkout SCM\":</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-07/junit-minimal.png\" alt=\"Minimal Declarative Pipeline\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This a \"dynamic stage\", one of several the kinds that Declarative Pipeline adds\nas needed for clearer reporting.  In this case, it is a stage in which the\nDeclarative Pipeline automatically checkouts out source code on the agent.</p>\n</div>\n<div class=\"paragraph\">\n<p>As you can see above, we didn&#8217;t have to tell it do any of this,</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Console Output</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>[Pipeline] node\nRunning on osx_mbp in /Users/bitwiseman/jenkins/agents/osx_mbp/workspace/blog_add-declarative-pipeline\n[Pipeline] {\n[Pipeline] stage\n[Pipeline] { (Declarative: Checkout SCM)\n[Pipeline] checkout\nCloning the remote Git repository\n{ ... truncated 20 lines ... }\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Build)\n[Pipeline] echo\nThis is a minimal pipeline\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n[Pipeline] // node\n[Pipeline] End of Pipeline\nFinished: SUCCESS</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Declarative Pipeline syntax is a little more verbose than the equivalent Scripted Pipeline,\nbut the added detail gives a clearer, more consistent view of what the Pipeline is supposed to do.\nIt also gives us a structure into which we can add more configuration details about this Pipeline.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"adding-tools-to-pipeline\"><a class=\"anchor\" href=\"#adding-tools-to-pipeline\"></a>Adding Tools to Pipeline</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The next thing we&#8217;ll add in this Pipeline is a <code>tools</code> section to let us use\nMaven.  The <code>tools</code> section is one of several sections we can add under\n<code>pipeline</code>, which affect the configuration of the rest of the Pipeline.  (We&#8217;ll\nlook at the others, including <code>agent</code>, in later posts.) Each tool entry will\nmake whatever settings changes, such as updating <code>PATH</code> or other environment\nvariables, to make the named tool available in the current pipeline.  It will\nalso automatically install the named tool if that tool is configured to do so\nunder \"Managing Jenkins\" &#8594; \"Global Tool Configuration\".</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n    agent any\n    tools { <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n        maven 'Maven 3.3.9' <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n        jdk 'jdk8' <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n    }\n    stages {\n        stage ('Initialize') {\n            steps {\n                sh '''\n                    echo \"PATH = ${PATH}\"\n                    echo \"M2_HOME = ${M2_HOME}\"\n                ''' <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n            }\n        }\n\n        stage ('Build') {\n            steps {\n                echo 'This is a minimal pipeline.'\n            }\n        }\n    }\n}\n// Scripted Not Defined //</pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><code>tools</code> section for adding tool settings.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>Configure this Pipeline to use the Maven version matching \"Maven 3.3.9\"\n(configured in \"Managing Jenkins\" &#8594; \"Global Tool Configuration\").</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>Configure this Pipeline to use the Maven version matching \"jdk8\"\n(configured in \"Managing Jenkins\" &#8594; \"Global Tool Configuration\").</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>These will show the values of <code>PATH</code> and <code>M2_HOME</code> environment variables.</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>When we run this updated Pipeline the same way we ran the first, we see that\nthe Declarative Pipeline has added another stage called \"Declarative: Tool\nInstall\": In the console output, we see that during this particular stage \"Maven 3.3.9\" gets installed,\nand the <code>PATH</code> and <code>M2_HOME</code> environment variables are set:</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-07/junit-tools.png\" alt=\"Declarative Pipeline with Tools Section\">\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Console Output</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>{ ... truncated lines ... }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Declarative: Tool Install)\n[Pipeline] tool\nUnpacking https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.3.9/apache-maven-3.3.9-bin.zip\nto /Users/bitwiseman/jenkins/agents/osx_mbp/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.3.9\non osx_mbp\n[Pipeline] envVarsForTool\n[Pipeline] tool\n[Pipeline] envVarsForTool\n[Pipeline] }\n[Pipeline] // stage\n{ ... }\nPATH = /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/bin:/Users/bitwiseman/jenkins/agents/osx_mbp/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.3.9/bin:...\nM2_HOME = /Users/bitwiseman/jenkins/agents/osx_mbp/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.3.9\n{ ... }</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"running-a-maven-build\"><a class=\"anchor\" href=\"#running-a-maven-build\"></a>Running a Maven Build</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Finally, running a Maven build is trivial.  The <code>tools</code> section already added\nMaven and JDK8 to the <code>PATH</code>, all we need to do is call <code>mvn install</code>.  It\nwould be nice if I could split the build and the tests into separate stages,\nbut Maven is famous for not liking when people do that, so I&#8217;ll leave it alone\nfor now.</p>\n</div>\n<div class=\"paragraph\">\n<p>Instead, let&#8217;s load up the results of the build using the JUnit plugin,\nhowever the version that was just built, sorry.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n    agent any\n    tools {\n        maven 'Maven 3.3.9'\n        jdk 'jdk8'\n    }\n    stages {\n        stage ('Initialize') {\n            steps {\n                sh '''\n                    echo \"PATH = ${PATH}\"\n                    echo \"M2_HOME = ${M2_HOME}\"\n                '''\n            }\n        }\n\n        stage ('Build') {\n            steps {\n                sh 'mvn -Dmaven.test.failure.ignore=true install' <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n            }\n            post {\n                success {\n                    junit 'target/surefire-reports/**/*.xml' <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n                }\n            }\n        }\n    }\n}\n// Scripted //\nnode {\n    checkout scm\n\n    String jdktool = tool name: \"jdk8\", type: 'hudson.model.JDK'\n    def mvnHome = tool name: 'mvn'\n\n    /* Set JAVA_HOME, and special PATH variables. */\n    List javaEnv = [\n        \"PATH+MVN=${jdktool}/bin:${mvnHome}/bin\",\n        \"M2_HOME=${mvnHome}\",\n        \"JAVA_HOME=${jdktool}\"\n    ]\n\n    withEnv(javaEnv) {\n    stage ('Initialize') {\n        sh '''\n            echo \"PATH = ${PATH}\"\n            echo \"M2_HOME = ${M2_HOME}\"\n        '''\n    }\n    stage ('Build') {\n        try {\n            sh 'mvn -Dmaven.test.failure.ignore=true install'\n        } catch (e) {\n            currentBuild.result = 'FAILURE'\n        }\n    }\n    stage ('Post') {\n        if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n            junit 'target/surefire-reports/**/*.xml'  <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n        }\n    }\n}</pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>Call <code>mvn</code>, the version configured by the <code>tools</code> section will be first on the path.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>If the maven build succeeded, archive the JUnit test reports for display in the Jenkins web UI.\nWe&#8217;ll discuss the\n<a href=\"/doc/book/pipeline/syntax/#post\"><code>post</code> section</a> in detail in the next blog post.</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nIf you are familiar with Scripted Pipeline, you can toggle the above\nDeclarative code sample to show the Scripted equivalent.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Below is the console output for this last revision:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Console Output</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>{ ... truncated lines ... }\n+ mvn install\n[INFO] Scanning for projects...\n[WARNING] The POM for org.jenkins-ci.tools:maven-hpi-plugin:jar:1.119 is missing, no dependency information available\n[WARNING] Failed to build parent project for org.jenkins-ci.plugins:junit:hpi:1.20-SNAPSHOT\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building JUnit Plugin 1.20-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- maven-hpi-plugin:1.119:validate (default-validate) @ junit ---\n[INFO]\n[INFO] --- maven-enforcer-plugin:1.3.1:display-info (display-info) @ junit ---\n[INFO] Maven Version: 3.3.9\n[INFO] JDK Version: 1.8.0_92 normalized as: 1.8.0-92\n[INFO] OS Info: Arch: x86_64 Family: mac Name: mac os x Version: 10.12.3\n[INFO]\n{ ... }\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 03:25 min\n[INFO] Finished at: 2017-02-06T22:43:41-08:00\n[INFO] Final Memory: 84M/1265M\n[INFO] ------------------------------------------------------------------------</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The new Declarative syntax is a significant step forward for Jenkins Pipeline.\nIt trades some verbosity and constraints for much greater clarity and\nmaintainability.  In the coming weeks, I&#8217;ll be adding new blog posts\ndemonstrating various features of the Declarative syntax along with some recent\nJenkins Pipeline improvements.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://plugins.jenkins.io/pipeline-model-definition\">Declarative Pipeline</a></p>\n</li>\n<li>\n<p><a href=\"/doc/book/pipeline/syntax/#declarative-pipeline\">Declarative Pipeline Syntax Reference</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/junit\">Jenkins JUnit plugin</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","id":"df12ba62-13a1-5a1b-88f3-afc58f167e79","title":"Declarative Pipeline for Maven Projects","date":"2017-02-07T00:00:00.000Z","slug":"/blog/2017/02/07/declarative-maven-project/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"blog/author/lnewman","twitter":"bitwiseman"}]}},"pageContext":{"next":"/blog/2017/02/07/gsoc2017-announcement/","previous":"/blog/2017/02/06/scm-api-2-take2/","id":"df12ba62-13a1-5a1b-88f3-afc58f167e79"}},
    "staticQueryHashes": ["1271460761","3649515864"]}