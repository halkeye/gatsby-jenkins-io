{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/02/23/declarative-saucelabs-xunit/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><strong>Declare Your Pipelines!</strong>\n<a href=\"/blog/2017/02/03/declarative-pipeline-ga/\">Declarative Pipeline 1.0 is here</a>!\nThis is the fourth post in a series showing some of the cool features of\n<a href=\"/doc/book/pipeline/syntax/#declarative-pipeline\">Declarative Pipeline</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the\n<a href=\"/blog/2017/02/15/declarative-notifications/\">previous post</a>,\nwe integrated several notification services into a Declarative Pipeline.\nWe kept our Pipeline clean and easy to understand\nby using a shared library to make a custom step called <code>sendNotifications</code>\nthat we called at the start and end of our Pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this blog post, we&#8217;ll start by translating the Scripted Pipeline in the sample project I worked with\nin\n\"<a href=\"/blog/2016/08/29/sauce-pipeline/\">Browser-testing with Sauce OnDemand and Pipeline</a>\"\nand\n\"<a href=\"/blog/2016/10/31/xunit-reporting/\">xUnit and Pipeline</a>\"\nto Declarative.\nWe&#8217;ll make our Pipeline clearer by adding an <code>environment</code> directive\nto define some environment variables, and then moving some code to a shared library.\nFinally, we&#8217;ll look at using the <code>when</code> directive to add simple conditional behavior to our Pipeline.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"setup\"><a class=\"anchor\" href=\"#setup\"></a>Setup</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The setup for this post uses the same repository as the two posts above,\n<a href=\"https://github.com/bitwiseman/JS-Nightwatch.js\">my fork</a>\nof the\n<a href=\"https://github.com/saucelabs-sample-test-frameworks/JS-Nightwatch.js\">JS-Nightwatch.js sample project</a>.\nI&#8217;ve once again created a branch specifically for this blog post,\nthis time called\n<a href=\"https://github.com/bitwiseman/JS-Nightwatch.js/tree/blog/declarative/sauce\"><code>blog/declarative/sauce</code></a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Like the two posts above, this Pipeline will use the\n<a href=\"https://plugins.jenkins.io/xunit\">xUnit</a> and\n<a href=\"https://plugins.jenkins.io/sauce-ondemand\">Sauce OnDemand</a> plugins.\nThe xUnit plugin only needs to be installed, the Sauce OnDemand needs additional configuration.\nFollow\n<a href=\"https://wiki.saucelabs.com/display/DOCS/Installing+and+Configuring+the+Sauce+OnDemand+Plugin+for+Jenkins\">Sauce Labs' configuration instructions</a>\nto create an account with Sauce Labs and add your Sauce Labs credentials to Jenkins.\nThe Sauce OnDemand plugin will automatically install\n<a href=\"https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy\">Sauce Connect</a>\nfor us when we call it from our Pipeline.</p>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-important\" title=\"Important\"></i>\n</td>\n<td class=\"content\">\nBe sure to you have the latest version of the\n<a href=\"https://plugins.jenkins.io/sauce-ondemand\">Sauce OnDemand</a> plugin (1.160 or newer).\nIt has several fixes required for this post.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>For a shared library, I&#8217;ve still got the one from the\n<a href=\"/blog/2017/02/15/declarative-notifications/\">previous post</a>.\nTo set up this \"Global Pipeline Library,\" navigate to \"Manage Jenkins\" &#8594; \"Configure System\"\nin the Jenkins web UI.\nOnce there, under \"Global Pipeline Libraries\", add a new library.\nThen set the name to <code>bitwiseman-shared</code>, point it at my repository,\nand set the default branch for the library to <code>master</code>.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-15/shared-library.png\" alt=\"Global Pipeline Library\" width=\"800\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"reducing-complexity-with-declarative\"><a class=\"anchor\" href=\"#reducing-complexity-with-declarative\"></a>Reducing Complexity with Declarative</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you&#8217;ve been following along through this series,\nthis first step will be quite familiar by now.\nWe&#8217;ll start from the Pipeline we had at the end of the xUnit post\nand translate it to Declarative.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n    agent any\n    options {\n        // Nightwatch.js supports color ouput, so wrap add his option\n        ansiColor colorMapName: 'XTerm'\n    }\n    stages {\n        stage (\"Build\") {\n            steps {\n                // Install dependencies\n                sh 'npm install'\n            }\n        }\n        stage (\"Test\") {\n            steps {\n                // Add sauce credentials\n                sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n                    // Start sauce connect\n                    sauceconnect() {\n                        // Run selenium tests using Nightwatch.js\n                        // Ignore error codes. The junit publisher will cover setting build status.\n                        sh \"./node_modules/.bin/nightwatch -e chrome,firefox,ie,edge --test tests/guineaPig.js || true\"\n                    }\n                }\n            }\n            post {\n                always {\n                    step([$class: 'XUnitBuilder',\n                        thresholds: [\n                            [$class: 'SkippedThreshold', failureThreshold: '0'],\n                            // Allow for a significant number of failures\n                            // Keeping this threshold so that overwhelming failures are guaranteed\n                            //     to still fail the build\n                            [$class: 'FailedThreshold', failureThreshold: '10']],\n                        tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\n                    saucePublisher()\n                }\n            }\n        }\n    }\n// Scripted //\nnode {\n    stage \"Build\"\n    checkout scm\n\n    // Install dependencies\n    sh 'npm install'\n\n    stage \"Test\"\n    // Add sauce credentials\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n        // Start sauce connect\n        sauceconnect() {\n\n            // List of browser configs we'll be testing against.\n            def platform_configs = [\n                'chrome',\n                'firefox',\n                'ie',\n                'edge'\n            ].join(',')\n\n            // Nightwatch.js supports color ouput, so wrap this step for ansi color\n            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {\n                // Run selenium tests using Nightwatch.js\n                // Ignore error codes. The junit publisher will cover setting build status.\n                sh \"./node_modules/.bin/nightwatch -e ${platform_configs} --test tests/guineaPig.js || true\"\n            }\n\n            step([$class: 'XUnitBuilder',\n                thresholds: [\n                    [$class: 'SkippedThreshold', failureThreshold: '0'],\n                    // Allow for a significant number of failures\n                    // Keeping this threshold so that overwhelming failures are guaranteed\n                    //     to still fail the build\n                    [$class: 'FailedThreshold', failureThreshold: '10']],\n                tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\n            saucePublisher()\n        }\n    }\n}</pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-23/blue-ocean.png\" alt=\"Blue Ocean Run\" width=\"800\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-23/sauce-report.png\" alt=\"SauceLabs Test Report\" width=\"800\">\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nBlue Ocean doesn&#8217;t support displaying SauceLabs test reports yet\n(see <a href=\"https://issues.jenkins.io/browse/JENKINS-42242\">JENKINS-42242</a>).\nTo view the report above, I had to switch back to the stage view of this run.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"elevating-settings-using-environment\"><a class=\"anchor\" href=\"#elevating-settings-using-environment\"></a>Elevating Settings using <code>environment</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Each time we&#8217;ve moved a project from Scripted Pipeline to Declarative,\nwe&#8217;ve found the cleaner format of Declarative Pipeline highlights the less\nclear parts of the existing Pipeline.\nIn this case, the first thing that jumps out at me is that the parameters of the\nSaucelabs and Nightwatch execution are hardcoded and buried down in the middle of our Pipeline.\nThis is a relatively short Pipeline, so it isn&#8217;t terribly hard to find them,\nbut as this pipeline grows and changes it would be better if those values were kept separate.\nIn Scripted, we&#8217;d have defined some variables,\nbut Declarative doesn&#8217;t allow us to define variables in the usual Groovy sense.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>environment</code> directive let&#8217;s us set some environment variables\nand use them later in our pipeline.\nAs you&#8217;d expect, the <code>environment</code> directive is just a set of name-value pairs.\nEnvironment variables are accessible in Pipeline via <code>env.variableName</code> (or just <code>variableName</code>)\nand in shell scripts as standard environment variables, typically <code>$variableName</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s move the list of browsers, the test filter, and the sauce credential string to environment variables.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">    environment {\n        saucelabsCredentialId = 'f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a'\n        sauceTestFilter = 'tests/guineaPig.js'\n        platformConfigs = 'chrome,firefox,ie,edge'\n    }\n    stages {\n        /* ... unchanged ... */\n        stage (\"Test\") {\n            steps {\n                // Add sauce credentials\n                sauce(saucelabsCredentialId) {\n                    // Start sauce connect\n                    sauceconnect() {\n                        // Run selenium tests using Nightwatch.js\n                        // Ignore error codes. The junit publisher will cover setting build status.\n                        sh \"./node_modules/.bin/nightwatch -e ${env.platformConfigs} --test ${env.sauceTestFilter} || true\" <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n                    }\n                }\n            }\n            post { /* ... unchanged ... */ }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>This double-quoted string causes Groovy to replace the variables with their\nliteral values before passing to <code>sh</code>.\nThis could also be written using singe-quotes:\n<code>sh './node_modules/.bin/nightwatch -e $platformConfigs --test $sauceTestFilter || true'</code>.\nWith a single quoted string, the string is passed as written to the shell,\nand then <strong>the shell</strong> does the variable substitution.</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"moving-complex-code-to-shared-libraries\"><a class=\"anchor\" href=\"#moving-complex-code-to-shared-libraries\"></a>Moving Complex Code to Shared Libraries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now that we have settings separated from the code, we can do some code clean up.\nUnlike the previous post, we don&#8217;t have any repeating code,\nbut we do have some distractions.\nThe nesting of <code>sauce</code>, <code>sauceconnect</code>, and <code>sh nightwatch</code> seems excessive,\nand that xUnit <code>step</code> is a bit ugly as well.\nLet&#8217;s move those into our shared library as custom steps with parameters.\nWe&#8217;ll change the <code>Jenkinsfile</code> in our main project,\nand add the custom steps to a branch named\n<code>blog/declarative/sauce</code> in our library repository.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">@Library('bitwiseman-shared@blog/declarative/sauce') _\n\n/* ... unchanged ... */\n\nstage (\"Test\") {\n    steps {\n        sauceNightwatch saucelabsCredentialId,\n            platformConfigs,\n            sauceTestFilter\n    }\n    post {\n        always {\n            xUnitPublishResults 'reports/**',\n                /* failWhenSkippedExceeds */ 0,\n                /* failWhenFailedExceeds */ 10\n\n            saucePublisher()\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">vars/sauceNightwatch.groovy</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def call(String sauceCredential, String platforms = null, String testFilter = null) {\n    platforms = platforms ? \"-e '\" + platforms + \"'\" : ''\n    testFilter = testFilter ? \"--test '\" + testFilter + \"'\" : ''\n\n    // Add sauce credentials\n    sauce(sauceCredential) {\n        // Start sauce connect\n        sauceconnect() {\n            // Run selenium tests using Nightwatch.js\n            // Ignore error codes. The junit publisher will cover setting build status.\n            sh \"./node_modules/.bin/nightwatch ${platforms} ${testFilter} || true\" <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>In this form, this could not be written using a literal single-quoted string.\nHere, <code>platforms</code> and <code>testFilter</code> are groovy variables, not environment variables.</td>\n</tr>\n</table>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">vars/xUnitPublishResults.groovy</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def call(String pattern, Integer failWhenSkippedExceeds,\n        Integer failWhenFailedExceeds) {\n    step([$class: 'XUnitBuilder',\n        thresholds: [\n            [$class: 'SkippedThreshold', failureThreshold: failWhenSkippedExceeds.toString()],\n            // Allow for a significant number of failures\n            // Keeping this threshold so that overwhelming failures are guaranteed\n            //     to still fail the build\n            [$class: 'FailedThreshold', failureThreshold: failWhenFailedExceeds.toString()]],\n        tools: [[$class: 'JUnitType', pattern: pattern]]])\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"running-conditional-stages-using-when\"><a class=\"anchor\" href=\"#running-conditional-stages-using-when\"></a>Running Conditional Stages using <code>when</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This is a sample web testing project.\nWe probably wouldn&#8217;t deploy it like we would production code,\nbut we might still want to deploy somewhere,\nby publishing it to an artifact repository, for example.\nThis project is hosted on GitHub and uses feature branches and pull requests to make changes.\nI&#8217;d like to use the same Pipeline for feature branches, pull requests, and the master branch,\nbut I only want to deploy from master.</p>\n</div>\n<div class=\"paragraph\">\n<p>In Scripted, we&#8217;d wrap a <code>stage</code> in an <code>if-then</code> and check if the branch for\nthe current run is named \"master\".\nDeclarative doesn&#8217;t support that kind of general conditional behavior.\nInstead, it provides a\n<a href=\"/doc/book/pipeline/syntax/#when\"><code>when</code> directive</a>\nthat can be added to <code>stage</code> sections.\nThe <code>when</code> directive supports several types of conditions, including a <code>branch</code> condition,\nwhere the stage will run when the branch name matches the specified pattern.\nThat is exactly what we need here.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">stages {\n    /* ... unchanged ... */\n    stage ('Deploy') {\n        when {\n            branch 'master'\n        }\n        steps {\n             echo 'Placeholder for deploy steps.'\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When we run our Pipeline with this new stage, we get the following outputs:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Log output for 'feature/test' branch</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>...\nFinished Sauce Labs test publisher\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Deploy)\nStage 'Deploy' skipped due to when conditional\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n...</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Log output for 'master' branch</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>...\nFinished Sauce Labs test publisher\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Deploy)\n[Pipeline] echo\nPlaceholder for deploy steps.\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n...</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I have to say, our latest Declarative Pipeline turned out extremely well.\nI think someone coming from Freestyle jobs, with little to no experience with Pipeline or Groovy,\nwould still be able to look at this Declarative Pipeline and make sense of what it is doing.\nWe&#8217;ve added new functionality to our Pipeline while making it easier to understand\nand maintain.</p>\n</div>\n<div class=\"paragraph\">\n<p>I hope you&#8217;ve learned as much as I have during this blog series.\nI&#8217;m excited to see that even in the the short time since Declarative 1.0 was released,\nteams are already using it in make improvements similar to what those we&#8217;ve covered in this series.\nThanks for reading!</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://plugins.jenkins.io/xunit\">xUnit</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/sauce-ondemand\">Sauce OnDemand</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/pipeline-model-definition\">Declarative Pipeline plugin</a></p>\n</li>\n<li>\n<p><a href=\"/doc/book/pipeline/syntax/#declarative-pipeline\">Declarative Pipeline Syntax Reference</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/bitwiseman/JS-Nightwatch.js/tree/blog/declarative/sauce\">Pipeline source for this post</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/bitwiseman/jenkins-pipeline-shared/tree/blog/declarative/sauce\">Pipeline Shared Library source for this post</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","id":"4617d4e9-51f3-58b1-8cf1-558aa14ce01d","title":"Browser testing and conditional logic in Declarative Pipeline","date":"2017-02-23T00:00:00.000Z","slug":"/blog/2017/02/23/declarative-saucelabs-xunit/","authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},"pageContext":{"id":"4617d4e9-51f3-58b1-8cf1-558aa14ce01d"}},
    "staticQueryHashes": ["1271460761","3649515864"]}