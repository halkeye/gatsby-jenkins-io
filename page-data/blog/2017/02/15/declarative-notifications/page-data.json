{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/02/15/declarative-notifications/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><strong>Declare Your Pipelines!</strong>\n<a href=\"/blog/2017/02/03/declarative-pipeline-ga/\">Declarative Pipeline 1.0 is here</a>!\nThis is the third post in a series showing some of the cool features of\n<a href=\"/doc/book/pipeline/syntax/#declarative-pipeline\">Declarative Pipeline</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the\n<a href=\"/blog/2017/02/10/declarative-html-publisher/\">previous post</a>,\nwe converted a Scripted Pipeline to a Declarative Pipeline, adding descriptive stages\nand <code>post</code> sections.  In one of those <code>post</code> blocks, we included a placeholder for\nsending notifications.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this blog post, we&#8217;ll repeat what I did in\n\"<a href=\"/blog/2016/07/18/pipeline-notifications/\">Sending Notifications in Pipeline</a>\nbut this time in Declarative Pipeline.\nFirst we&#8217;ll integrate calls to notification services Slack, HipChat, and Email into our Pipeline.\nThen we&#8217;ll refactor those calls into a single Step in a Shared Library, which\nwe&#8217;ll reuse as needed, keeping our <code>Jenkinsfile</code> concise and understandable.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"setup\"><a class=\"anchor\" href=\"#setup\"></a>Setup</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The setup for this post is almost the same as\n<a href=\"/blog/2017/02/10/declarative-html-publisher/\">my previous Declarative Pipeline post</a>.\nI&#8217;ve used a new branch in\n<a href=\"https://github.com/bitwiseman/hermann\">my fork</a> of the\n<a href=\"https://github.com/reiseburo/hermann\">Hermann project</a>:\n<a href=\"https://github.com/bitwiseman/hermann/tree/blog/declarative/notifications\"><code>blog/declarative/notifications</code></a>.\nI&#8217;d already set up a Multibranch Pipeline and pointed it at my repository,\nso the new branch will be picked up and built automatically.</p>\n</div>\n<div class=\"paragraph\">\n<p>I still have my notification targets (where we&#8217;ll send notifications) that I created for the\n\"<a href=\"/blog/2016/07/18/pipeline-notifications/\">Sending Notifications in Pipeline</a>\" blog post.\nTake a look at that post to review how I setup the\n<a href=\"https://plugins.jenkins.io/slack\">Slack</a>,\n<a href=\"https://plugins.jenkins.io/hipchat\">HipChat</a>,\nand <a href=\"https://plugins.jenkins.io/email-ext\">Email-ext</a>\nplugins to use those channels.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"adding-notifications\"><a class=\"anchor\" href=\"#adding-notifications\"></a>Adding Notifications</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We&#8217;ll start from the same Pipeline we had at the end of the previous post.</p>\n</div>\n<div class=\"paragraph\">\n<p>This Pipeline works quite well, except it doesn&#8217;t print anything at the start of\nthe run, and that final <code>always</code> directive only prints a message to the console log.\nLet&#8217;s start by getting the notifications working like we did in the original post.\nWe&#8217;ll just copy-and-paste the three notification steps (with different parameters)\nto get the notifications working for started, success, and failure.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">pipeline {\n  /* ... unchanged ... */\n  stages {\n    stage ('Start') {\n      steps {\n        // send build started notifications\n        slackSend (color: '#FFFF00', message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n        // send to HipChat\n        hipchatSend (color: 'YELLOW', notify: true,\n            message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n          )\n\n        // send to email\n        emailext (\n            subject: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n            body: \"\"\"&lt;p&gt;STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':&lt;/p&gt;\n              &lt;p&gt;Check console output at &amp;QUOT;&lt;a href='${env.BUILD_URL}'&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&amp;QUOT;&lt;/p&gt;\"\"\",\n            recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n          )\n      }\n    }\n    /* ... unchanged ... */\n  }\n  post {\n    success {\n      slackSend (color: '#00FF00', message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n      hipchatSend (color: 'GREEN', notify: true,\n          message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n        )\n\n      emailext (\n          subject: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n          body: \"\"\"&lt;p&gt;SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':&lt;/p&gt;\n            &lt;p&gt;Check console output at &amp;QUOT;&lt;a href='${env.BUILD_URL}'&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&amp;QUOT;&lt;/p&gt;\"\"\",\n          recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n        )\n    }\n\n    failure {\n      slackSend (color: '#FF0000', message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n      hipchatSend (color: 'RED', notify: true,\n          message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n        )\n\n      emailext (\n          subject: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n          body: \"\"\"&lt;p&gt;FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':&lt;/p&gt;\n            &lt;p&gt;Check console output at &amp;QUOT;&lt;a href='${env.BUILD_URL}'&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&amp;QUOT;&lt;/p&gt;\"\"\",\n          recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n        )\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-15/blueocean-notifications.png\" alt=\"Blue Ocean Run with Notifications\" width=\"800\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"moving-notifications-to-shared-library\"><a class=\"anchor\" href=\"#moving-notifications-to-shared-library\"></a>Moving Notifications to Shared Library</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This new Pipeline works and our Declarative Pipeline sends notifications; however,\nit is extremely ugly. In the original post using Scripted Pipeline,\nI defined a single method that I called at both the start and end of the pipeline.\nI&#8217;d like to do that here as well, but Declarative doesn&#8217;t support creating methods\nthat are accessible to multiple stages.\nFor this, we&#8217;ll need to turn to\n<a href=\"/doc/book/pipeline/shared-libraries/\">Shared Libraries</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Shared Libraries, as the name suggests,\nlet Jenkins Pipelines share code instead of copying it to each new project.\nShared Libraries are not specific to Declarative; they were released in their\ncurrent form several months ago and were useful in Scripted Pipeline.\nDue to Declarative Pipeline&#8217;s lack of support for defining methods,\nShared Libraries take on a vital role.  They are the only supported way within\nDeclarative Pipeline to define methods or classes that we want to use in more than one stage.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>The lack of support for defining methods that are accessible in multiple stages,\nis a known issue, with at least two JIRA tickets:\n<a href=\"https://issues.jenkins.io/browse/JENKINS-41335\">JENKINS-41335</a> and\n<a href=\"https://issues.jenkins.io/browse/JENKINS-41396\">JENKINS-41396</a>.\nFor this series, I chose to stick to using features that are fully supported\nin Declarative Pipeline at this time.\nThe internet has plenty of hacked together solutions that <strong>happen to work today</strong>,\nbut I wanted to highlight current best practices and dependable solutions.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"setting-up-a-shared-library\"><a class=\"anchor\" href=\"#setting-up-a-shared-library\"></a>Setting up a Shared Library</h3>\n<div class=\"paragraph\">\n<p>I&#8217;ve created a simple shared library repository for this series of posts, called\n<a href=\"https://github.com/bitwiseman/jenkins-pipeline-shared\">jenkins-pipeline-shared</a>.\nThe shared library functionality has too many configuration options to cover in one post.\nI&#8217;ve chosen to configure this library as a \"Global Pipeline Library,\"\naccessible from any project on my Jenkins controller.\nTo setup a \"Global Pipeline Library,\" I navigated to \"Manage Jenkins\" &#8594; \"Configure System\"\nin the Jenkins web UI.\nOnce there, under \"Global Pipeline Libraries\", I added a new library.\nI then set the name to <code>bitwiseman-shared</code>, pointed it at my repository,\nand set the default branch for the library to <code>master</code>,\nbut I&#8217;ll override that in my <code>Jenkinsfile</code>.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-15/shared-library.png\" alt=\"Global Pipeline Library\" width=\"800\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"moving-the-code-to-the-library\"><a class=\"anchor\" href=\"#moving-the-code-to-the-library\"></a>Moving the Code to the Library</h3>\n<div class=\"paragraph\">\n<p>Adding a Step to a library involves creating a file with the name of our Step,\nadding our code to a <code>call()</code> method inside that file,\nand replacing the appropriate code in our <code>Jenkinsfile</code> with the new Step calls.\nLibraries can be set to load \"implicitly,\"\nmaking their default branch automatically available to all Pipelines,\nor they can be loaded manually using a <code>@Library</code> annotation.\nThe branch for implicitly loaded libraries can also be overridden using the <code>@Library</code> annotation.</p>\n</div>\n<div class=\"paragraph\">\n<p>The minimal set of dependencies for <code>sendNotifications</code> means we can\nbasically copy-and-paste the code from the original blog post.\nWe&#8217;ll check this change into a branch in the library named\n<code>blog/declarative/notifications</code>, the same as my branch in the <code>hermann</code> repository.\nThis will let us make changes on the master branch later without breaking this example.\nWe&#8217;ll then use the <code>@Library</code> directive to tell Jenkins to use that branch&#8217;s version\nof the library with this Pipeline.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\n#!groovy\n@Library('bitwiseman-shared@blog/declarative/notifications') _ <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\npipeline {\n  agent {\n    // Use docker container\n    docker {\n      image 'ruby:2.3'\n    }\n  }\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Start') {\n      steps {\n        // send build started notifications\n        sendNotifications 'STARTED'\n      }\n    }\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      steps {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      sendNotifications currentBuild.result\n    }\n  }\n}\n// Scripted //</pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>The <code>_</code> here is intentional.\n<a href=\"https://en.wikipedia.org/wiki/Java_annotation\">Java/Groovy Annotations</a>\nsuch as <code>@Library</code> must be applied to an element.\nThat is often a <code>using</code> statement, but that isn&#8217;t needed here so by convention we use an <code>\\_</code>.</td>\n</tr>\n</table>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">vars/sendNotifications.groovy</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">#!/usr/bin/env groovy\n\n/**\n * Send notifications based on build status string\n */\ndef call(String buildStatus = 'STARTED') {\n  // build status of null means successful\n  buildStatus = buildStatus ?: 'SUCCESS'\n\n  // Default values\n  def colorName = 'RED'\n  def colorCode = '#FF0000'\n  def subject = \"${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\"\n  def summary = \"${subject} (${env.BUILD_URL})\"\n  def details = \"\"\"&lt;p&gt;${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':&lt;/p&gt;\n    &lt;p&gt;Check console output at &amp;QUOT;&lt;a href='${env.BUILD_URL}'&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&amp;QUOT;&lt;/p&gt;\"\"\"\n\n  // Override default values based on build status\n  if (buildStatus == 'STARTED') {\n    color = 'YELLOW'\n    colorCode = '#FFFF00'\n  } else if (buildStatus == 'SUCCESS') {\n    color = 'GREEN'\n    colorCode = '#00FF00'\n  } else {\n    color = 'RED'\n    colorCode = '#FF0000'\n  }\n\n  // Send notifications\n  slackSend (color: colorCode, message: summary)\n\n  hipchatSend (color: color, notify: true, message: summary)\n\n  emailext (\n      to: 'bitwiseman@bitwiseman.com',\n      subject: subject,\n      body: details,\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-15/blueocean-notifications-finished.png\" alt=\"Global Pipeline Library\" width=\"800\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-15/popups.png\" alt=\"HipChat and Slack Popups\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-15/mailcatcher.png\" alt=\"MailCatcher List\">\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In this post we added notifications to our Declarative Pipeline.\nWe wanted to move our repetitive notification code into a method;\nhowever, Declarative Pipeline prevented us from defining a method in our <code>Jenkinsfile</code>.\nInstead, with the help of the Shared Library feature,\nwe were able to define a <code>sendNotifications</code> Step that we could call from our <code>Jenkinsfile</code>.\nThis maintained the clarity of our Pipeline and will let us easily reuse this Step in other projects.\nI was pleased to see how little the resulting Pipeline differed from where we started.\nThe changes were restricted to the start and end of the file with no reformatting elsewhere.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the next post, we&#8217;ll cover more about shared libraries and how to\nrun Sauce OnDemand with xUnit Reporting in Declarative Pipeline.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://plugins.jenkins.io/pipeline-model-definition\">Declarative Pipeline plugin</a></p>\n</li>\n<li>\n<p><a href=\"/doc/book/pipeline/syntax/#declarative-pipeline\">Declarative Pipeline Syntax Reference</a></p>\n</li>\n<li>\n<p><a href=\"/doc/book/pipeline/shared-libraries/\">Shared Library reference</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/bitwiseman/hermann/tree/blog/declarative/notifications\">Pipeline source for this post</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/bitwiseman/jenkins-pipeline-shared/tree/blog/declarative/notifications\">Pipeline Shared Library source for this post</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","id":"76a4ff94-6194-5d56-a94c-3287ec832681","title":"Declarative Pipeline: Notifications and Shared Libraries","date":"2017-02-15T00:00:00.000Z","slug":"/blog/2017/02/15/declarative-notifications/","authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},"pageContext":{"id":"76a4ff94-6194-5d56-a94c-3287ec832681"}},
    "staticQueryHashes": ["1271460761","3649515864"]}