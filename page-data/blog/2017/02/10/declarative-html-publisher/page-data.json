{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/02/10/declarative-html-publisher/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><strong>Declare Your Pipelines!</strong>\n<a href=\"/blog/2017/02/03/declarative-pipeline-ga/\">Declarative Pipeline 1.0 is here</a>!\nThis is the second post in a series showing some of the cool features of\n<a href=\"/doc/book/pipeline/syntax/#declarative-pipeline\">Declarative Pipeline</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the\n<a href=\"/blog/2017/02/07/declarative-maven-project/\">previous blog post</a>,\nwe created a simple Declarative Pipeline.\nIn this blog post, we&#8217;ll go back and look at the Scripted Pipeline for the\n<a href=\"/blog/2016/07/01/html-publisher-plugin/\">Publishing HTML Reports in Pipeline</a> blog post.\nWe&#8217;ll convert that Pipeline to Declarative syntax (including <code>properties</code>), go\ninto more detail on the <code>post</code> section, and then we&#8217;ll use the <code>agent</code>\ndirective to switch our Pipeline to run in Docker.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"setup\"><a class=\"anchor\" href=\"#setup\"></a>Setup</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>For this post, I&#8217;m going to use the\n<a href=\"https://github.com/bitwiseman/hermann/tree/blog/declarative/html\"><code>blog/add-declarative/html</code></a>\nbranch of\n<a href=\"https://github.com/bitwiseman/hermann\">my fork</a> of the\n<a href=\"https://github.com/reiseburo/hermann\">hermann project</a>.\nI&#8217;ve set up a Multibranch Pipeline and pointed it at my repository\nthe same as did it previous post.\nAlso the same as before, I&#8217;ve set this Pipeline&#8217;s Git configuration to\nautomatically \"Clean after checkout\".</p>\n</div>\n<div class=\"paragraph\">\n<p>This time we already have a Pipeline checked in.\nI&#8217;ll run it a few times to get a baseline.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-10/scripted-build.png\" alt=\"Stage view\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-10/scripted-rcov.png\" alt=\"RCov Report\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"converting-to-declarative\"><a class=\"anchor\" href=\"#converting-to-declarative\"></a>Converting to Declarative</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Let&#8217;s start by converting the Scripted Pipeline straight to Declarative.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n  agent any // &lt;1&gt; <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n  options {\n    // Keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10')) <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n  }\n  stages {\n    stage ('Build') { <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n      steps {\n        // install required gems\n        sh 'bundle install'\n\n        // build and run tests with coverage\n        sh 'bundle exec rake build spec'\n\n        // Archive the built artifacts\n        archive includes: 'pkg/*.gem'\n\n        // publish html\n        publishHTML target: [\n            allowMissing: false,\n            alwaysLinkToLastBuild: false,\n            keepAll: true,\n            reportDir: 'coverage',\n            reportFiles: 'index.html',\n            reportName: 'RCov Report'\n          ]\n      }\n    }\n  }\n}\n// Scripted //\nproperties([[$class: 'BuildDiscarderProperty',\n                strategy: [$class: 'LogRotator', numToKeepStr: '10']]]) <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\nnode { <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  stage ('Build') { <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n\n    // Checkout\n    checkout scm <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\n    // install required gems\n    sh 'bundle install'\n\n    // build and run tests with coverage\n    sh 'bundle exec rake build spec'\n\n    // Archive the built artifacts\n    archive includes: 'pkg/*.gem'\n\n    // publish html\n    publishHTML [\n        allowMissing: false,\n        alwaysLinkToLastBuild: false,\n        keepAll: true,\n        reportDir: 'coverage',\n        reportFiles: 'index.html',\n        reportName: 'RCov Report'\n      ]\n\n  }\n}</pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>Select where to run this Pipeline, in this case \"any\" agent, regardless of label.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>Declarative automatically performs a checkout of source code on the agent,\nwhereas Scripted Pipeline users must explicitly call <code>checkout scm</code>.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>Set the Pipeline option to preserve the ten most recent runs.\nThis overrides the default behavior from the Multibranch parent of this Pipeline.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>Run the \"Build\" stage.</td>\n</tr>\n</table>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-10/declarative-build.png\" alt=\"Stage view\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now that we have this Pipeline in Declarative form, let&#8217;s take a minute to do a\nlittle clean up.  We&#8217;ll split out the <code>bundle</code> actions a little more and move\nsteps into logically grouped stages.  Rather than having one monolithic \"Build\"\nstage, we&#8217;ll have details for each stage.  As long as we&#8217;re prettying things\nup, let&#8217;s switch to using <a href=\"/projects/blueocean/\">Blue Ocean</a> to view our\nbuilds, as well.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n  agent any\n  options {\n    // Keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required gems\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n\n        // Archive the built artifacts\n        archive includes: 'pkg/*.gem'\n      }\n    }\n    stage ('Test') {\n      steps {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n\n        // publish html\n        publishHTML target: [\n            allowMissing: false,\n            alwaysLinkToLastBuild: false,\n            keepAll: true,\n            reportDir: 'coverage',\n            reportFiles: 'index.html',\n            reportName: 'RCov Report'\n          ]\n      }\n    }\n  }\n}\n// Scripted //</pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-10/declarative-stages.png\" alt=\"Blue Ocean View\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"using-post-sections\"><a class=\"anchor\" href=\"#using-post-sections\"></a>Using <code>post</code> sections</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This looks pretty good, but if we think about it\nthe <code>archive</code> and <code>publishHTML</code> steps are really post-stage actions.\nThey should only occur when the rest of their stage succeeds.\nAs our Pipeline gets more complex we might need to add actions that always happen\neven if a stage or the Pipeline as a whole fail.</p>\n</div>\n<div class=\"paragraph\">\n<p>In Scripted Pipeline, we would use <code>try-catch-finally</code>,\nbut we cannot do that in Declarative.\nOne of the defining features of the Declarative Pipeline\nis that it does not allow script-based control structures\nsuch as <code>for</code> loops, <code>if-then-else</code> blocks, or <code>try-catch-finally</code> blocks.\nOf course, internally Step implementations can still contain whatever conditional logic they want,\nbut the Declarative Pipeline cannot.</p>\n</div>\n<div class=\"paragraph\">\n<p>Instead of free-form conditional logic,\nDeclarative Pipeline provides a set of Pipeline-specific controls:\n<a href=\"/doc/book/pipeline/syntax/#when\"><code>when</code> directives</a>, which we&#8217;ll look at in\na later blog post in this series, control whether to execute the steps in a stage,\nand\n<a href=\"/doc/book/pipeline/syntax/#post\"><code>post</code> sections</a>\ncontrol which actions to take based on result of a single stage\nor a whole Pipeline.  <code>post</code> supports a number of\n<a href=\"/doc/book/pipeline/syntax/#post-conditions\">run conditions</a>,\nincluding <code>always</code> (execute no matter what) and <code>changed</code>\n(execute when the result differs from previous run).\nWe&#8217;ll use <code>success</code> to run <code>archive</code> and <code>publishHTML</code> when their respective stages complete.\nWe&#8217;ll also use an <code>always</code> block with a placeholder for sending notifications,\nwhich I&#8217;ll implement in the next blog post.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n  agent any\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required gems\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      steps {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      echo \"Send notifications for result: ${currentBuild.result}\"\n    }\n  }\n}\n// Scripted //</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"switching-agent-to-run-in-docker\"><a class=\"anchor\" href=\"#switching-agent-to-run-in-docker\"></a>Switching <code>agent</code> to run in Docker</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code>agent</code> can actually accept\n<a href=\"/doc/book/pipeline/syntax/#agent-parameters\">several other parameters</a> instead of <code>any</code>.\nWe could filter on <code>label \"some-label\"</code>, for example,\nwhich would be the equivalent of <code>node ('some-label')</code> in Scripted Pipeline.\nHowever, <code>agent</code> also lets us just as easily switch to using a Docker container,\nwhich replaces a more complicated set of changes in Scripted Pipeline:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">pipeline {\n  agent {\n    // Use docker container\n    docker {\n      image 'ruby:2.3'\n    }\n  }\n  /* ... unchanged ... */\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If I needed to, I could add a <code>label</code> filter under <code>docker</code>\nto select a node to host the Docker container.\nI already have Docker available on all my agents, so I don&#8217;t need <code>label</code> -\nthis works as is.\nAs you can see below, the Docker container spins up at the start of the run\nand the pipeline runs inside it.  Simple!</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-02-10/declarative-docker.png\" alt=\"Docker Container Started\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>At first glance, the Declarative Pipeline&#8217;s removal of control structures seems\nlike it would be too constrictive.  However, it replaces those structures with\nfacilities like the <code>post</code> section, that give us reasonable control over the\nflow our our Pipeline while still improving readability and maintainability.\nIn the next blog post, we&#8217;ll add notifications to this pipeline\nand look at how to use Shared Libraries with Declarative\nPipeline to share code and keep Pipelines easy to understand.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://plugins.jenkins.io/pipeline-model-definition\">Declarative Pipeline plugin</a></p>\n</li>\n<li>\n<p><a href=\"/doc/book/pipeline/syntax/#declarative-pipeline\">Declarative Pipeline Syntax Reference</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/bitwiseman/hermann/tree/blog/declarative/html\">Pipeline source for this post</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","id":"06a04f0b-7823-5a11-8c3a-d385a336b68c","title":"Declarative Pipeline: Publishing HTML Reports","date":"2017-02-10T00:00:00.000Z","slug":"/blog/2017/02/10/declarative-html-publisher/","authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},"pageContext":{"id":"06a04f0b-7823-5a11-8c3a-d385a336b68c"}},
    "staticQueryHashes": ["1271460761","3649515864"]}