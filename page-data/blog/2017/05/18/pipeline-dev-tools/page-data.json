{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/05/18/pipeline-dev-tools/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve only been working with Pipeline for about a year.\nPipeline in and of itself has been a huge improvement over old-style Jenkins projects.\nAs a developer, it has been so great be able work with Jenkins Pipelines\nusing the same tools I use for writing any other kind of code.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve also found a number of tools that are super helpful specifically\nfor developing pipelines. Some were easy to find like the\n<a href=\"/doc/book/pipeline/getting-started#built-in-documentation\">built-in documentation</a>\nand the\n<a href=\"/doc/book/pipeline/getting-started#snippet-generator\">Snippet Generator</a>.\nOthers were not as obvious or were only recently released.\nIn this post, I&#8217;ll show how a few of those tools make working with Pipelines\neven better.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"the-blue-ocean-pipeline-editor\"><a class=\"anchor\" href=\"#the-blue-ocean-pipeline-editor\"></a>The Blue Ocean Pipeline Editor</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The best way to start this list is with the most recent and coolest\narrival in this space: the Blue Ocean Pipeline Editor.  The editor only works\nwith Declarative Pipelines, but it brings a sleek new user experience to writing\nPipelines.  My recent screencast, released as part of the Blue Ocean Launch,\ngives good sense of how useful the editor is:</p>\n</div>\n<div class=\"videoblock\">\n<div class=\"content\">\n<iframe width=\"852\" height=\"480\" src=\"https://www.youtube.com/embed/5Nct-jrZBbM?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"command-line-pipeline-linter\"><a class=\"anchor\" href=\"#command-line-pipeline-linter\"></a>Command-line Pipeline Linter</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>One of the neat features of the Blue Ocean Pipeline Editor is that it does basic\nvalidation on our Declarative Pipelines before they are even committed or Run.\nThis feature is based on the\n<a href=\"/doc/book/pipeline/development#linter\">Declarative Pipeline Linter</a>\nwhich can be accessed from the command-line even if you don&#8217;t have Blue Ocean\ninstalled.</p>\n</div>\n<div class=\"paragraph\">\n<p>When I was working on the\n<a href=\"/blog/2017/02/10/declarative-html-publisher\">Declarative Pipeline: Publishing HTML Reports</a>\nblog post, I was still learning the declarative syntax and I made a lot lot of mistakes.\nGetting quick feedback about the whether my Pipeline was in a sane state made writing that blog much easier.\nI wrote a simple shell script that would run my Jenkinsfile through the Declarative Pipeline Linter.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">pipelint.sh - Linting via HTTP POST using <code>curl</code></div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-bash\" data-lang=\"bash\"># curl (REST API)\n# User\nJENKINS_USER=bitwisenote-jenkins1\n\n# Api key from \"/me/configure\" on my Jenkins instance\nJENKINS_USER_KEY=--my secret, get your own--\n\n# Url for my local Jenkins instance.\nJENKINS_URL=http://$JENKINS_USER:$JENKINS_USER_KEY@localhost:32769 <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n# JENKINS_CRUMB is needed if your Jenkins controller has CRSF protection enabled (which it should)\nJENKINS_CRUMB=`curl \"$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\\\":\\\",//crumb)\"`\ncurl -X POST -H $JENKINS_CRUMB -F \"jenkinsfile=&lt;Jenkinsfile\" $JENKINS_URL/pipeline-model-converter/validate</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>This is not secure.  I&#8217;m running this locally only.\nSee <a href=\"/doc/book/managing/cli\">Jenkins CLI</a> for details on how to do this securely.</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>With this script, I was able to find the error in this this Pipeline without\nhaving to take the time to run it in Jenkins: (Can you spot the mistake?)</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">#!groovy\n\npipeline {\n  agent any\n\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      step {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      echo \"Send notifications for result: ${currentBuild.result}\"\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When I ran my <code>pipelint.sh</code> script on this pipeline it reported this error:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   3831      0 --:--:-- --:--:-- --:--:--  4181\nErrors encountered validating Jenkinsfile:\nWorkflowScript: 30: Unknown stage section \"step\". Starting with version 0.5, steps in a stage must be in a steps block. @ line 30, column 5.\n       stage ('Test') {\n       ^\n\nWorkflowScript: 30: Nothing to execute within stage \"Test\" @ line 34, column 5.\n       stage ('Test') {\n       ^</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Doh. I forgot the \"s\" on <code>steps</code> on line 35. Once I added the \"s\" and ran\n<code>pipelint.sh</code> again, I got an all clear.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   5610      0 --:--:-- --:--:-- --:--:--  5750\nJenkinsfile successfully validated.</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This didn&#8217;t mean there weren&#8217;t other errors, but for a two second smoke test I&#8217;ll take it.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"replay\"><a class=\"anchor\" href=\"#replay\"></a>Replay</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I love being able to use source control to track changes to my Pipelines\nright alongside the rest of the code in a project.  There are also times,\nwhen prototyping or debugging, that I need to iterate quickly on a series\nof possible Pipeline changes.\nThe Replay feature let&#8217;s me do that and see the results,\nwithout committing those changes to source control.</p>\n</div>\n<div class=\"paragraph\">\n<p>When I wanted to take the previous Pipeline from <code>agent any</code> to using Docker via\nthe <code>docker { &#8230;&#8203; }</code> directive, I used the Replay feature to test it out:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Selected the previously completed run in the build history</p>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/doc/book/resources/pipeline/replay-previous-run.png\" alt=\"Previous Pipeline Run\">\n</div>\n</div>\n</li>\n<li>\n<p>Clicked \"Replay\" in the left menu</p>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/doc/book/resources/pipeline/replay-left-bar.png\" alt=\"Replay Left-menu Button\">\n</div>\n</div>\n</li>\n<li>\n<p>Made modifications and click \"Run\". In this example, I replaced <code>any</code> with the <code>docker { &#8230;&#8203; }</code> directive.</p>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/doc/book/resources/pipeline/replay-modified.png\" alt=\"Replay Left-menu Button\">\n</div>\n</div>\n</li>\n<li>\n<p>Checked the results of changes looked good.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Once I worked any bugs out of my Pipeline,\nI used Replay to view the Pipeline for the last run and copy it back to my\n<code>Jenkinsfile</code> and create a commit for that change.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This is far from a complete list of the tools out there for working with Pipeline.\nThere are many more and the number is growing.\nFor example, one tool  I just recently heard about and haven&#8217;t had a chance to delve into\nis the\n<a href=\"https://github.com/lesfurets/JenkinsPipelineUnit\">Pipeline Unit Testing Framework</a>,\nwhich promises the ability to test Pipelines before running them.\nIt&#8217;s been a fun year and I can&#8217;t wait to see what the next year holds for Pipeline.</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"content\">\n<div class=\"paragraph\">\n<p>How do you work with Pipeline?\nDo you have a tool that you feel has greatly improved your development experience\nwith Pipeline?  I&#8217;m interested in hear about others Jenkins user&#8217;s favorite ways\nof working with Pipeline.  Drop me a line via\n<a href=\"mail:bitwiseman@gmail.com\">email</a> or on the\n<a href=\"https://webchat.freenode.net/?channels=jenkins\">#jenkins</a> IRC channel.</p>\n</div>\n</div>\n</div>\n</div>\n</div>","id":"231f2272-acd6-5bb2-beae-e3871de86c48","title":"Pipeline Development Tools","date":"2017-05-18T00:00:00.000Z","slug":"/blog/2017/05/18/pipeline-dev-tools/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"blog/author/lnewman","twitter":"bitwiseman"}]}},"pageContext":{"next":"/blog/2017/06/13/blueocean-1-1/","previous":"/blog/2017/05/15/kubernetes-journey-on-azure/","id":"231f2272-acd6-5bb2-beae-e3871de86c48"}},
    "staticQueryHashes": ["1271460761","3649515864"]}