{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/06/27/speaker-blog-SAS-jenkins-world/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by Brent Laster, Senior Manager, Research and Development at\n<a href=\"https://www.sas.com/en_us/home.html\">SAS</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"/doc/book/pipeline\">Jenkins Pipeline</a>\nhas fundamentally changed how users can orchestrate their pipelines and workflows.\nEssentially, anything that you can do in a script or program can now be done in a <code>Jenkinsfile</code> or in a pipeline script created within the application.\nBut just because you can do nearly anything directly in those mechanisms doesn&#8217;t mean you necessarily should.</p>\n</div>\n<div class=\"paragraph\">\n<p>In some cases, it&#8217;s better to abstract the functionality out separately from your main Pipeline.\nPreviously, the main way to do this in Jenkins itself was through creating plugins.\nWith Jenkins 2 and the tight incorporation of Pipeline, we now have another approach â€“ shared libraries.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Brent will be\n<a href=\"https://jenkinsworld20162017.sched.com/event/ALMq/extending-your-pipeline-with-shared-libraries-global-functions-and-external-code\">presenting</a>\nmore of this topic at <a href=\"https://www.cloudbees.com/jenkinsworld/home\">Jenkins World</a> in\nAugust, register with the code <code>JWFOSS</code> for a 30% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"/doc/book/pipeline/shared-libraries\">Shared libraries</a>\nprovide solutions for a number of situations that can be challenging or time-consuming to deal with in Pipeline.\nAmong them:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Providing common routines that can be accessed across a number of pipelines or within a designated scope (more on scope later)</p>\n</li>\n<li>\n<p>Abstracting out complex or restricted code</p>\n</li>\n<li>\n<p>Providing a means to execute scripted code from calls in declarative pipelines (where scripted code is not normally allowed)</p>\n</li>\n<li>\n<p>Simplifying calls in a script to custom code that only differ by calling parameters</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>To understand how to use shared libraries in Pipeline, we first need to understand how they are constructed.\nA shared library for Jenkins consists of a source code repository with a structure like the one below:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2017-06-27/jw-speaker-blog-sas-1.png\" alt=\"jw speaker blog sas 1\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Each of the top-level directories has its own purpose.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <strong>resources</strong> directory can have non-groovy resources that get loaded via the <code>libraryResource</code> step.\nThink of this as a place to store supporting data files such as json files.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <strong>src</strong> directory uses a structure similar to the standard Java <code>src</code> layout.\nThis area is added to the <code>classpath</code> when a Pipeline that includes this shared library is executed.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <strong>vars</strong> directory holds global variables that should be accessible from pipeline scripts.\nA corresponding <code>.txt</code> file can be included that defines documentation for objects here.\nIf found, this will be pulled in as part of the documentation in the Jenkins application.</p>\n</div>\n<div class=\"paragraph\">\n<p>Although you might think that it would always be best to define library functions in the src structure, it actually works better in many cases to define them in the vars area.\nThe notion of a global variable may not correspond very well to a global function, but you can think of it as the function being a global value that can be pulled in and used in your pipeline.\nIn fact, to work in a declarative style pipeline, having your function in the vars area is the only option.</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s look at a simple function that we can create for a shared library.\nIn this case, we&#8217;ll just wrap picking up the location of the Gradle installation from Jenkins and calling the corresponding executable with whatever tasks are passed in as arguments.\nThe code is below:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">/vars/gbuild.groovy</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def call(args) {\n      sh \"${tool 'gradle3'}/bin/gradle ${args}\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Notice that we are using a structured form here with the def call syntax.\nThis allows us to simply invoke the routine in our pipeline (assuming we have loaded the shared library) based on the name of the file in the vars area.\nFor example, since we named this file <strong>gbuild.groovy</strong>, then we can invoke it in our pipeline via a step like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">gbuild 'clean compileJava'</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>So, how do we get our shared library loaded to use in our pipeline?\nThe shared library itself is just code in the structure outlined above committed/pushed into a source code repository that Jenkins can access.\nIn our example, we&#8217;ll assume we&#8217;ve staged, committed, and pushed this code into a local Git repository on the system at <code>/opt/git/shared-library.git</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Like most other things in Jenkins, we need to first tell Jenkins where this shared library can be found and how to reference it \"globally\" so that pipelines can reference it specifically.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, though, we need to decide at what scope you want this shared library to be available.\nThe most common case is making it a \"global shared library\" so that all Pipelines can access it.\nHowever, we also have the option of only making shared libraries available for projects in a particular Jenkins <strong>Folder</strong> structure,\nor those in a <strong>Multibranch Pipeline</strong>, or those in a <strong>GitHub Organization</strong> pipeline project.</p>\n</div>\n<div class=\"paragraph\">\n<p>To keep it simple, we&#8217;ll just define ours to be globally available to all pipelines.\nDoing this is a two-step process.\nWe first tell Jenkins what we want to call the library and define some default behavior for Jenkins related to the library,\nsuch as whether we wanted it loaded implicitly for all pipelines.\nThis is done in the <strong>Global Pipeline Libraries</strong> section of the <strong>Configure System</strong> page.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2017-06-27/jw-speaker-blog-sas-2.png\" alt=\"jw speaker blog sas 2\" width=\"800\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>For the second part, we need to tell Jenkins where the actual source repository for the shared library is located.\nSCM plugins that have been modified to understand how to work with shared libraries are called \"<strong>Modern SCM</strong>\".\nThe git plugin in one of these updated plugin, so we just supply the information in the same <strong>Configure System</strong> page.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2017-06-27/jw-speaker-blog-sas-3.png\" alt=\"jw speaker blog sas 3\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>After configuring Jenkins so that it can find the shared library repository, we can load the shared library into our pipeline using the <code>@Library('&lt;library name&gt;')</code> annotation.\nSince <a href=\"https://docs.oracle.com/javase/1.5.0/docs/guide/language/annotations.html\">Annotations</a>\nare designed to annotate something that follows them,\nwe need to either include a specific import statement, or, if we want to include everything, we can use an underscore character as a placeholder.\nSo our basic step to load the library in a pipeline would be:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">@Library('Utilities2') _</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Based on this step, when Jenkins runs our Pipeline, it will first go out to the repository that holds the shared library and clone down a copy to use.\nThe log output during this part of the pipeline execution would look something like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>Loading library Utilities2@master\n &gt; git rev-parse --is-inside-work-tree # timeout=10\nSetting origin to /opt/git/shared-libraries\n &gt; git config remote.origin.url /opt/git/shared-libraries # timeout=10\nFetching origin...\nFetching upstream changes from origin\n &gt; git --version # timeout=10\nusing GIT_SSH to set credentials Jenkins2 SSH\n &gt; git fetch --tags --progress origin +refs/heads/*:refs/remotes/origin/*\n &gt; git rev-parse master^{commit} # timeout=10\n &gt; git rev-parse origin/master^{commit} # timeout=10\nCloning the remote Git repository\nCloning repository /opt/git/shared-libraries</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then Pipeline can call our shared library <code>gbuild</code> function and translate it to the desired Gradle build commands.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>First time build.\nSkipping changelog.\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Compile)\n[Pipeline] tool\n[Pipeline] sh\n[gsummit17_lab2-4T357CUTJORMC2TIF7WW5LMRR37F7PM2QRUHXUNSRTWTTRHB3XGA]\nRunning shell script\n+ /usr/share/gradle/bin/gradle clean compileJava -x test\nStarting a Gradle Daemon (subsequent builds will be faster)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This is a very basic illustration of how using shared libraries work.\nThere is much more detail and functionality surrounding shared libraries, and extending your pipeline in general, than we can cover here.</p>\n</div>\n<div class=\"paragraph\">\n<p>Be sure to catch my talk on\n<a href=\"https://jenkinsworld20162017.sched.com/event/ALMq/extending-your-pipeline-with-shared-libraries-global-functions-and-external-code\">Extending your Pipeline with Shared Libraries, Global Functions and External Code</a>\nat <a href=\"https://www.cloudbees.com/jenkinsworld\">Jenkins World 2017</a>.\nAlso, watch for my new book on\n<a href=\"https://www.amazon.com/Jenkins-Deployment-Pipeline-Generation-Automation/dp/1491979593/ref=sr_1_2?ie=UTF8&amp;qid=1497984947&amp;sr=8-2&amp;keywords=Brent+laster\">Jenkins 2 Up and Running</a>\nwhich will have a dedicated chapter on this â€“ expected to be available later this year from O&#8217;Reilly.</p>\n</div>","id":"c68cdf2d-4588-5bfa-80b3-2a0c1581eedd","title":"Extending your Pipeline with Shared Libraries, Global Functions and External Code","date":"2017-06-27T00:00:00.000Z","slug":"/blog/2017/06/27/speaker-blog-SAS-jenkins-world/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"blog/author/hinman","twitter":null}]}},"pageContext":{"next":"/blog/2017/07/03/contributor-summit/","previous":"/blog/2017/06/26/share-jenkins-world-keynote-stage/","id":"c68cdf2d-4588-5bfa-80b3-2a0c1581eedd"}},
    "staticQueryHashes": ["1271460761","3649515864"]}