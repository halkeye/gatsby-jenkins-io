{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/01/19/converting-conditional-to-pipeline/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect1\">\n<h2 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\"></a>Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>With all the new developments in\n<a href=\"/doc/book/pipeline/\">Jenkins Pipeline</a> (and\n<a href=\"/blog/2017/01/12/declarative-pipeline-beta-2/\">Declarative Pipeline on the horizon</a>),\nit&#8217;s easy to forget what we did to create \"pipelines\" before\n<strong>Pipeline</strong>.\nThere are number of plugins, some that have been around since the very beginning,\nthat enable users to create \"pipelines\" in Jenkins.\nFor example, basic job chaining worked well in many cases, and the\n<a href=\"https://plugins.jenkins.io/parameterized-trigger\">Parameterized Trigger plugin</a>\nmade chaining more flexible.\nHowever, creating chained jobs with conditional behavior was\nstill one of the harder things to do in Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>The\n<a href=\"https://plugins.jenkins.io/conditional-buildstep\">Conditional BuildStep plugin</a>\nis a powerful tool that has allowed Jenkins users to write Jenkins jobs with complex conditional logic.\nIn this post, we&#8217;ll take a look at how we might converting Freestyle jobs that\ninclude conditional build steps to Jenkins Pipeline.\nUnlike Freestyle jobs, implementing conditional operations in Jenkins Pipeline is trivial,\nbut matching the behavior of complex conditional build steps will require a bit more care.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"graphical-programming\"><a class=\"anchor\" href=\"#graphical-programming\"></a>Graphical Programming</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Conditional BuildStep plugin lets users add conditional logic to Freestyle\njobs from within the Jenkins web UI.  It does this by:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Adding two types of Conditional BuildStep (\"Single\" and \"Multiple\") -\nthese build steps contain one or more other build steps to be run when the configured\ncondition is met</p>\n</li>\n<li>\n<p>Adding a set of Condition operations -\nthese control whether the Conditional BuildStep execute the contained step(s)</p>\n</li>\n<li>\n<p>Leveraging the Token Macro facility -\nthese provide values to the Conditions for evaluation</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>In the example below, this project will run the shell script step when the value of the\n<code>REQUESTED_ACTION</code> token equals \"greeting\".</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-01-19/freestyle-conditional-param.png\" alt=\"Freestyle Job Parameters\" width=\"800\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-01-19/freestyle-conditional-config.png\" alt=\"Freestyle Job Conditional BuildStep\" width=\"800\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s the output when I run this project with <code>REQUESTED_ACTION</code> set to \"greeting\":</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>Run condition [Strings match] enabling prebuild for step [Execute shell]\nStrings match run condition: string 1=[greeting], string 2=[greeting]\nRun condition [Strings match] enabling perform for step [Execute shell]\n[freestyle-conditional] $ /bin/sh -xe /var/folders/hp/f7yc_mwj2tq1hmbv_5n10v2c0000gn/T/hudson5963233933358491209.sh\n+ echo 'Hello, bitwiseman!'\nHello, bitwiseman!\nFinished: SUCCESS</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And when I pass the value \"silence\":</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>Run condition [Strings match] enabling prebuild for step [Execute shell]\nStrings match run condition: string 1=[silence], string 2=[greeting]\nRun condition [Strings match] preventing perform for step [Execute shell]\nFinished: SUCCESS</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This is a simple example but the conditional step can contain any regular build step.\nWhen combined with other plugins, it can control whether to send notifications,\ngather data from other sources, wait for user feedback, or call other projects.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Conditional BuildStep plugin does a great job of leveraging strengths of\nthe Jenkins web UI, Freestyle jobs, and UI-based programming,\nbut it is also hampered by their limitations.\nThe Jenkins web UI can be clunky and confusing at times.\nLike the steps in any Freestyle job, these conditional steps are only\nstored and viewable in Jenkins.\nThey are not versioned with other product or build code and can&#8217;t be code reviewed.\nLike any number of UI-based programming tools, it has to make trade-offs between clarity\nand flexibility: more options or clearer presentation.\nThere&#8217;s only so much space on the screen.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"converting-to-pipeline\"><a class=\"anchor\" href=\"#converting-to-pipeline\"></a>Converting to Pipeline</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Jenkins Pipeline, on the other hand, enables users to implement their pipeline as code.\nPipeline code can be written directly in the Jenkins Web UI or in any text editor.\nIt is a full-featured programming language,\nwhich gives users access to much broader set of conditional statements\nwithout the restrictions of UI-based programming.</p>\n</div>\n<div class=\"paragraph\">\n<p>So, taking the example above, the Pipeline equivalent is:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n    agent any\n    parameters {\n        choice(\n            choices: ['greeting' , 'silence'],\n            description: '',\n            name: 'REQUESTED_ACTION')\n    }\n\n    stages {\n        stage ('Speak') {\n            when {\n                // Only say hello if a \"greeting\" is requested\n                expression { params.REQUESTED_ACTION == 'greeting' }\n            }\n            steps {\n                echo \"Hello, bitwiseman!\"\n            }\n        }\n    }\n}\n// Script //\nproperties ([\n    parameters ([\n        choice (\n            choices: ['greeting', 'silence'],\n            description: '',\n            name : 'REQUESTED_ACTION')\n    ])\n])\n\nnode {\n    stage ('Speak') {\n        // Only say hello if a \"greeting\" is requested\n        if (params.REQUESTED_ACTION == 'greeting') {\n            echo \"Hello, bitwiseman!\"\n        }\n    }\n}</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When I run this project with <code>REQUESTED_ACTION</code> set to \"greeting\", here&#8217;s the output:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>[Pipeline] node\nRunning on osx_mbp in /Users/bitwiseman/jenkins/agents/osx_mbp/workspace/pipeline-conditional\n[Pipeline] {\n[Pipeline] stage\n[Pipeline] { (Speak)\n[Pipeline] echo\nHello, bitwiseman!\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n[Pipeline] // node\n[Pipeline] End of Pipeline\nFinished: SUCCESS</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When I pass the value \"silence\", the only change is \"Hello, bitwiseman!\" is not printed.</p>\n</div>\n<div class=\"paragraph\">\n<p>Some might argue that the Pipeline code is a bit harder to understand on first reading.\nOthers would say the UI is just as confusing if not more so.\nEither way, the Pipeline representation is considerably more compact than the Jenkins UI presentation.\nPipeline also lets us add helpful comments, which we can&#8217;t do in the Freestyle UI.\nAnd we can easily put this Pipeline in a <code>Jenkinsfile</code> to be code-reviewed, checked-in, and versioned\nalong with the rest of our code.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"conditions\"><a class=\"anchor\" href=\"#conditions\"></a>Conditions</h3>\n<div class=\"paragraph\">\n<p>The previous example showed the \"Strings match\" condition and its Pipeline equivalent.\nLet&#8217;s look at couple more interesting conditions and their Jenkins Pipeline equivalents.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"boolean-condition\"><a class=\"anchor\" href=\"#boolean-condition\"></a>Boolean condition</h4>\n<div class=\"paragraph\">\n<p>You might think that a boolean condition would be the simplest condition, but it isn&#8217;t.\nSince it works with string values from tokens, the Conditional BuildStep plugin offers\na number of ways to indicate true or false.\nTruth is a case insensitive match of one of the following:\n<code>1</code> (the number one), <code>Y</code>, <code>YES</code>, <code>T</code>, <code>TRUE</code>, <code>ON</code> or <code>RUN</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Pipeline can duplicate these, but depending on the scenario we might consider\nwhether a simpler expression would suffice.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Pipeline</div>\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nwhen {\n    // case insensitive regular expression for truthy values\n    expression { return token ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }\n}\nsteps {\n    /* step */\n}\n\n// Script //\n// case insensitive regular expression for truthy values\nif (token ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/) {\n    /* step */\n}</pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"logical-or-of-conditions\"><a class=\"anchor\" href=\"#logical-or-of-conditions\"></a>Logical \"OR\" of conditions</h4>\n<div class=\"paragraph\">\n<p>This condition wraps other conditions.\nIt takes their results as inputs and performs a logical \"or\" of the results.\nThe <code>AND</code> and <code>NOT</code> conditions do the same, performing their respective operations.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Pipeline</div>\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nwhen {\n    // A or B\n    expression { return A || B }\n}\nsteps {\n    /* step */\n}\n\n// Script //\n// A or B\nif (A || B) {\n    /* step */\n}</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"tokens\"><a class=\"anchor\" href=\"#tokens\"></a>Tokens</h3>\n<div class=\"paragraph\">\n<p>Tokens can be considerably more work than conditions.\nThere are more of them and they cover a much broader range of behaviors.\nThe previous example showed one of the simpler cases, accessing a build parameter,\nwhere the token has a direct equivalent in Pipeline.\nHowever, many tokens don&#8217;t have direct equivalents,\nsome take a parameters (adding to their complexity),\nand some provide information that is simply not exposed in Pipeline yet.\nSo, determining how to migrate tokens needs to be done on case-by-case basis.</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s look at a few examples.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"file-token\"><a class=\"anchor\" href=\"#file-token\"></a>\"FILE\" token</h4>\n<div class=\"paragraph\">\n<p><strong>Expands to the contents of a file. The file path is relative to the build workspace root.</strong></p>\n</div>\n<div class=\"paragraph\">\n<p><em>${FILE,path=\"PATH\"}</em></p>\n</div>\n<div class=\"paragraph\">\n<p>This token maps directly to the <code>readFile</code> step.\nThe only difference is the file path for <code>readFile</code> is relative to the\ncurrent working directory on the agent, but that is the workspace root by default.\nNo problem.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Pipeline</div>\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nwhen {\n    expression { return readFile('pom.xml').contains('mycomponent') }\n}\nsteps {\n    /* step */\n}\n\n// Script //\nif (readFile('pom.xml').contains('mycomponent')) {\n    /* step */\n}</pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"git_branch\"><a class=\"anchor\" href=\"#git_branch\"></a>GIT_BRANCH</h4>\n<div class=\"paragraph\">\n<p><strong>Expands to the name of the branch that was built.</strong></p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Parameters</strong> (descriptions omitted): <em>all</em>, <em>fullName</em>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This information may or may not be exposed in Pipeline.  If you&#8217;re using the\n<a href=\"https://plugins.jenkins.io/workflow-multibranch\">Pipeline Multibranch plugin</a>\n<code>env.BRANCH_NAME</code> will give similar basic information, but doesn&#8217;t offer the parameters.\nThere are also\n<a href=\"https://issues.jenkins.io/browse/JENKINS-35230\">several</a>\n<a href=\"https://issues.jenkins.io/browse/JENKINS-24141\">issues</a>\nfiled around <code>GIT_*</code> tokens in Pipeline.\nUntil they are addressed fully, we can follow the pattern shown in\n<a href=\"https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/gitcommit/gitcommit.groovy\">pipeline-examples</a>,\nexecuting a shell to get the information we need.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Pipeline</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">GIT_BRANCH = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"changes_since_last_success\"><a class=\"anchor\" href=\"#changes_since_last_success\"></a>CHANGES_SINCE_LAST_SUCCESS</h4>\n<div class=\"paragraph\">\n<p><strong>Displays the changes since the last successful build.</strong></p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Parameters</strong> (descriptions omitted):\n<em>reverse</em>, <em>format</em>, <em>changesFormat</em>, <em>showPaths</em>, <em>pathFormat</em>,\n<em>showDependencies</em>, <em>dateFormat</em>, <em>regex</em>, <em>replace</em>, <em>default</em>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Not only is the information provided by this token not exposed in Pipeline,\nthe token has ten optional parameters, including format strings and regular expression\nsearches. There are a number of ways we might get similar information in Pipeline.\nEach have their own particular limitations and ways they differ from the token output.\nThen we&#8217;ll need to consider how each of the parameters changes the output.\nIf nothing else, translating this token is clearly beyond the scope of this post.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"slightly-more-complex-example\"><a class=\"anchor\" href=\"#slightly-more-complex-example\"></a>Slightly More Complex Example</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Let&#8217;s do one more example that shows some of these conditions and tokens.\nThis time we&#8217;ll perform different build steps depending on what branch we&#8217;re building.\nWe&#8217;ll take two build parameters: <code>BRANCH_PATTERN</code> and <code>FORCE_FULL_BUILD</code>.\nBased on <code>BRANCH_PATTERN</code>, we&#8217;ll checkout a repository.\nIf we&#8217;re building on the <code>master</code> branch or the user checked <code>FORCE_FULL_BUILD</code>,\nwe&#8217;ll call three other builds in parallel\n(<code>full-build-linux</code>, <code>full-build-mac</code>, and <code>full-build-windows</code>),\nwait for them to finish, and report the result.\nIf we&#8217;re not building on the <code>master</code> branch and the user did not check <code>FORCE_FULL_BUILD</code>,\nwe&#8217;ll print a message saying we skipped the full builds.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"freestyle\"><a class=\"anchor\" href=\"#freestyle\"></a>Freestyle</h3>\n<div class=\"paragraph\">\n<p>Here&#8217;s the configuration for Freestyle version.\n(It&#8217;s pretty long.  Feel free to <a href=\"#longer-pipeline\">skip down to the Pipeline version</a>):</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>The Pipeline version of this job determines the <code>GIT_BRANCH</code> branch by\nrunning a shell script that returns the current local branch name.\nThis means that the Pipeline version must checkout to a local branch (not a detached head).</p>\n</div>\n<div class=\"paragraph\">\n<p>Freestyle version of this job does not require a local branch, <code>GIT_BRANCH</code> is set automatically.\nHowever, to maintain functional parity, the Freestyle version of this job includes\n\"Checkout to Specific Local Branch\" as well.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2017-01-19/freestyle-conditional-long-full.png\" alt=\"Longer Freestyle Job\" width=\"800\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"longer-pipeline\"><a class=\"anchor\" href=\"#longer-pipeline\"></a>Pipeline</h3>\n<div class=\"paragraph\">\n<p>Here&#8217;s the equivalent Pipeline:</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Freestyle version of this job is not stored in source control.</p>\n</div>\n<div class=\"paragraph\">\n<p>In general, the Pipeline version of this job would be stored in source control,\nwould <code>checkout scm</code>, and would run that same repository.\nHowever, to maintain functional parity, the Pipeline version shown does a checkout\nfrom source control but is not stored in that repository.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Pipeline</div>\n<div class=\"content\">\n<pre class=\"nowrap\">// Script //\nproperties ([\n    parameters ([\n        string (\n            defaultValue: '*',\n            description: '',\n            name : 'BRANCH_PATTERN'),\n        booleanParam (\n            defaultValue: false,\n            description: '',\n            name : 'FORCE_FULL_BUILD')\n    ])\n])\n\nnode {\n    stage ('Prepare') {\n        checkout([$class: 'GitSCM',\n            branches: [[name: \"origin/${BRANCH_PATTERN}\"]],\n            doGenerateSubmoduleConfigurations: false,\n            extensions: [[$class: 'LocalBranch']],\n            submoduleCfg: [],\n            userRemoteConfigs: [[\n                credentialsId: 'bitwiseman_github',\n                url: 'https://github.com/bitwiseman/hermann']]])\n    }\n\n    stage ('Build') {\n        GIT_BRANCH = 'origin/' + sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n        if (GIT_BRANCH == 'origin/master' || params.FORCE_FULL_BUILD) {\n\n            // Freestyle build trigger calls a list of jobs\n            // Pipeline build() step only calls one job\n            // To run all three jobs in parallel, we use \"parallel\" step\n            // https://jenkins.io/doc/pipeline/examples/#jobs-in-parallel\n            parallel (\n                linux: {\n                    build job: 'full-build-linux', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                },\n                mac: {\n                    build job: 'full-build-mac', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                },\n                windows: {\n                    build job: 'full-build-windows', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                },\n                failFast: false)\n\n        } else {\n            echo 'Skipped full build.'\n        }\n    }\n}\n// Declarative //\npipeline {\n    agent any\n    parameters {\n        string (\n            defaultValue: '*',\n            description: '',\n            name : 'BRANCH_PATTERN')\n        booleanParam (\n            defaultValue: false,\n            description: '',\n            name : 'FORCE_FULL_BUILD')\n    }\n\n    stages {\n        stage ('Prepare') {\n            steps {\n                checkout([$class: 'GitSCM',\n                    branches: [[name: \"origin/${BRANCH_PATTERN}\"]],\n                    doGenerateSubmoduleConfigurations: false,\n                    extensions: [[$class: 'LocalBranch']],\n                    submoduleCfg: [],\n                    userRemoteConfigs: [[\n                        credentialsId: 'bitwiseman_github',\n                        url: 'https://github.com/bitwiseman/hermann']]])\n            }\n        }\n\n        stage ('Build') {\n            when {\n                expression {\n                    GIT_BRANCH = 'origin/' + sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n                    return GIT_BRANCH == 'origin/master' || params.FORCE_FULL_BUILD\n                }\n            }\n            steps {\n                // Freestyle build trigger calls a list of jobs\n                // Pipeline build() step only calls one job\n                // To run all three jobs in parallel, we use \"parallel\" step\n                // https://jenkins.io/doc/pipeline/examples/#jobs-in-parallel\n                parallel (\n                    linux: {\n                        build job: 'full-build-linux', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                    },\n                    mac: {\n                        build job: 'full-build-mac', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                    },\n                    windows: {\n                        build job: 'full-build-windows', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                    },\n                    failFast: false)\n            }\n        }\n        stage ('Build Skipped') {\n            when {\n                expression {\n                    GIT_BRANCH = 'origin/' + sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n                    return !(GIT_BRANCH == 'origin/master' || params.FORCE_FULL_BUILD)\n                }\n            }\n            steps {\n                echo 'Skipped full build.'\n            }\n        }\n    }\n}</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>As I said before, the Conditional BuildStep plugin is great.\nIt provides a clear, easy to understand way to add conditional logic to any Freestyle job.\nBefore Pipeline, it was one of the few plugins to do this and it remains one of the most popular plugins.\nNow that we have Pipeline, we can implement conditional logic directly in code.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is blog post discussed how to approach converting conditional build steps to Pipeline\nand showed a couple concrete examples.  Overall, I&#8217;m pleased with the results so far.\nI found scenarios which could not easily be migrated to Pipeline, but even those\nare only more difficult, rather than impossible.</p>\n</div>\n<div class=\"paragraph\">\n<p>The next thing to do is add a section to the\n<a href=\"/doc/book/\">Jenkins Handbook</a> documenting the Pipeline\nequivalent of all of the Conditions and the most commonly used Tokens.\nLook for it soon!</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://plugins.jenkins.io/conditional-buildstep\">Conditional BuildStep plugin</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","id":"437a3a39-d6ca-5875-b27d-0189cefc4150","title":"Converting Conditional Build Steps to Jenkins Pipeline","date":"2017-01-19T00:00:00.000Z","slug":"/blog/2017/01/19/converting-conditional-to-pipeline/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},"pageContext":{"next":"/blog/2017/01/20/blueocean-dev-log-jan2/","previous":"/blog/2017/01/17/scm-api-2.0-release/","id":"437a3a39-d6ca-5875-b27d-0189cefc4150"}},
    "staticQueryHashes": ["1271460761","3649515864"]}