{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/01/12/declarative-pipeline-beta-2/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>This week, we released the second beta of the new\n<a href=\"https://plugins.jenkins.io/pipeline-model-definition\">Declarative Pipeline syntax</a>,\navailable in the Update Center now as version 0.8.1 of <em>Pipeline: Model Definition</em>.\nYou can read more about Declarative Pipeline\n<a href=\"/blog/2016/12/19/declarative-pipeline-beta/\">in the blog post introducing the first beta</a>\nfrom December, but we wanted to update you all on the syntax changes in the\nsecond beta. These syntax changes are the last compatibility-breaking changes to\nthe syntax before the 1.0 release planned for February, so you can safely start\nusing the 0.8.1 syntax now without needing to change it when 1.0 is released.</p>\n</div>\n<div class=\"paragraph\">\n<p>A full syntax reference is <a href=\"https://github.com/jenkinsci/pipeline-model-definition-plugin/wiki/Syntax-Reference\">available on the wiki</a> as well.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"syntax-changes\"><a class=\"anchor\" href=\"#syntax-changes\"></a>Syntax Changes</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"changed-agent-configuration-to-block-structure\"><a class=\"anchor\" href=\"#changed-agent-configuration-to-block-structure\"></a>Changed \"agent\" configuration to block structure</h3>\n<div class=\"paragraph\">\n<p>In order to support more detailed and clear configuration of agents, as well as\nmaking agent syntax more consistent with the rest of the Declarative Pipeline\nsyntax, we&#8217;ve moved the agent configuration into blocks. The <code>agent any</code> and\n<code>agent none</code> configurations work the same as previously, but <code>label</code>, <code>docker</code>\nand <code>dockerfile</code> now look like the following:</p>\n</div>\n<div class=\"paragraph\">\n<p>Just specifying a label is simple.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nagent {\n    label \"some-label\"\n}\n// Script //</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If you&#8217;re just specifying a Docker image, you can use this simple syntax.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nagent {\n    docker \"ubuntu:16.04\"\n}\n// Script //</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you are specifying a label or other arguments, docker looks like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nagent {\n    docker {\n        image \"ubuntu:16.04\"\n        label \"docker-label\"\n        args \"-v /tmp:/tmp -p 8000:8000\"\n    }\n}\n// Script //</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you&#8217;re building an image from \"Dockerfile\" in your repository and\ndon&#8217;t care what node is used or have additional arguments, you can again\nuse a simple syntax.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nagent {\n    dockerfile true\n}\n// Script //</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you&#8217;re building an image from a different file, or have a label or other\narguments, use the following syntax:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nagent {\n    dockerfile {\n        filename \"OtherDockerfile\"\n        label \"docker-label\"\n        args \"-v /tmp:/tmp -p 8000:8000\"\n    }\n}\n// Script //</pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"improved-when-conditions\"><a class=\"anchor\" href=\"#improved-when-conditions\"></a>Improved \"when\" conditions</h3>\n<div class=\"paragraph\">\n<p>We introduced the <code>when</code> section a couple releases ago, but have made some\nchanges to its syntax here in 0.8.1. We wanted to add some simpler ways to\nspecify common conditions, and that required we re-work the syntax accordingly.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"branch\"><a class=\"anchor\" href=\"#branch\"></a>Branch</h4>\n<div class=\"paragraph\">\n<p>One of the most common conditions is running a stage only if you&#8217;re on a\nspecific branch. You can also use wildcards like \"*/master\".</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nwhen {\n    branch \"master\"\n}\n// Script //</pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"environment\"><a class=\"anchor\" href=\"#environment\"></a>Environment</h4>\n<div class=\"paragraph\">\n<p>Another built-in condition is the environment condition, which checks to see\nif a given environment variable is set to a given value.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nwhen {\n    environment name: \"SOME_ENV_VAR\", value: \"SOME_VALUE\"\n}\n// Script //</pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"expression\"><a class=\"anchor\" href=\"#expression\"></a>Expression</h4>\n<div class=\"paragraph\">\n<p>Lastly, there&#8217;s the expression condition, which resolves an arbitrary\nPipeline expression. If the return value of that expression isn&#8217;t false or\nnull, the stage will execute.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\nwhen {\n    expression {\n        echo \"Should I run?\"\n        return \"foo\" == \"bar\"\n    }\n}\n// Script //</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"options-replaces-properties-and-wrappers\"><a class=\"anchor\" href=\"#options-replaces-properties-and-wrappers\"></a>\"options\" replaces \"properties\" and \"wrappers\"</h3>\n<div class=\"paragraph\">\n<p>We&#8217;ve renamed the <code>properties</code> section to <code>options</code>, due to needing to add new\nDeclarative-specific options and to cut down on confusion. The <code>options</code> section\nis now where you&#8217;ll put general Pipeline options like <code>buildDiscarder</code>,\nDeclarative-specific options like <code>skipDefaultCheckout</code>, and block-scoped steps\nthat should wrap the execution of the entire build, like <code>timeout</code> or\n<code>timestamps</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\n\noptions {\n    buildDiscarder(logRotator(numToKeepStr:'1'))\n    skipDefaultCheckout()\n    timeout(time: 5, unit: 'MINUTES')\n}\n// Script //</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"heading-towards-1-0\"><a class=\"anchor\" href=\"#heading-towards-1-0\"></a>Heading towards 1.0!</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>While we may still add more functionality to the Declarative Pipeline syntax,\nwe won&#8217;t be making any changes to existing syntax for the 1.0 release. This\nmeans that any pipelines you write against the 0.8.1 syntax will keep working\nfor the foreseeable future without any changes. So if you&#8217;re already using\nDeclarative Pipelines, make sure to update your `Jenkinsfile`s after upgrading\nto 0.8.1, and if you haven&#8217;t been using Declarative Pipelines yet, install the\n<a href=\"https://plugins.jenkins.io/pipeline-model-definition\"><em>Pipeline: Model Definition</em></a> plugin and\ngive them a try!</p>\n</div>\n</div>\n</div>","id":"2ff4e12b-c7b0-5650-8366-ce14906b5f15","title":"Declarative Pipeline Syntax Beta 2 release","date":"2017-01-12T00:00:00.000Z","slug":"/blog/2017/01/12/declarative-pipeline-beta-2/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"<div class=\"paragraph\">\n<p>Andrew was a core committer to Hudson and the author of numerous plugins.</p>\n</div>","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"blog/author/abayer","twitter":"abayer"}]}},"pageContext":{"next":"/blog/2017/01/13/blueocean-dev-log-jan/","previous":"/blog/2017/01/11/jenkins-world-2017-cfp/","id":"2ff4e12b-c7b0-5650-8366-ce14906b5f15"}},
    "staticQueryHashes": ["1271460761","3649515864"]}