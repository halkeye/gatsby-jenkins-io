{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/08/17/speaker-blog-blazemeter/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This is a guest post by Guy Salton, Sr. Professional Services Engineer for\n<a href=\"https://www.blazemeter.com/ca-technologies\">CA BlazeMeter</a>.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.blazemeter.com/blog/running-jmeter-test-jenkins-pipeline-tutorial\">Jenkins\nPipeline</a> is an important Jenkins feature for creating and managing a project\nin Jenkins. This is opposed to the traditional way of creating a Jenkins\nproject by using the Jenkins GUI. When running your open-source load test,\nJenkins Pipeline enables resilience, execution control, advanced logic and\nVersion Control management.  This blog post will explain how to run any\nopen-source load test with Jenkins Pipeline, through Taurus.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://gettaurus.org/\">Taurus</a> is an open source test automation framework\nthat enables running and analyzing tests from 9 open source load and functional\ntesting tools: <a href=\"https://www.blazemeter.com/jmeter-load-testing\">JMeter</a>,\nSelenium, Gatling, The Grinder, Locust, Tsung, Siege, Apache Bench, and PBench.\nTest results can be analyzed in Taurus. For advanced analyses or running tests\nin the cloud, Taurus integrates with\n<a href=\"https://info.blazemeter.com/testing-landing-page-url\">BlazeMeter</a>.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Guy will be\n<a href=\"https://jenkinsworld20162017.sched.com/event/BYQn/learn-to-release-faster-by-load-testing-with-jenkins-free?iframe=no\">presenting</a>\nmore on this topic at\n<a href=\"https://www.cloudbees.com/jenkinsworld/home\">Jenkins World</a> in August,\nregister with the code <code>JWFOSS</code> for a 30% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"getting-started-with-taurus\"><a class=\"anchor\" href=\"#getting-started-with-taurus\"></a>Getting started with Taurus</h3>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Install <a href=\"https://gettaurus.org\">Taurus</a>.</p>\n</li>\n<li>\n<p>Create the following Taurus configuration in YAML. Learn more about YAML in Taurus from\n<a href=\"https://gettaurus.org/docs/YAMLTutorial/\">this tutorial</a>.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-yaml\" data-lang=\"yaml\">## execution:\n- concurrency: 100\n  hold-for: 10m\n  ramp-up: 120s\n  scenario: Thread Group\nscenarios:\n  Thread Group:\n    requests:\n    - label: blazedemo\n      method: GET\n      url: http://blazedemo.com/</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This script runs 100 concurrent users, holds the load for 10 minutes, the\nramp-up is 120 seconds and the thread group runs one GET request to\n<code>blazedemo.com</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can specify an executor by adding <code>executor: &lt;executor_name&gt;</code> to the\nscript. Otherwise, the default executor will be JMeter. In the background,\nTaurus will create an artifact directory with a jmx file (or a Scala file if\nyou run Gatling, a Python file if you are running Selenium, etc.).</p>\n</div>\n</li>\n<li>\n<p>Open a terminal and run: <code>bzt &lt;file_name&gt;.yml</code></p>\n</li>\n<li>\n<p>View the test results:</p>\n</li>\n</ol>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-1.png\" alt=\"Viewing test results from Taurus\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If you want to conduct an in-depth analysis of your test results, run your\ntests on BlazeMeter. You will be able to monitor KPIs through advanced and\ncolorful reports, evaluate system health over time, and run your tests from\nmultiple geo-locations.</p>\n</div>\n<div class=\"paragraph\">\n<p>Run the following command from the terminal:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-bash\" data-lang=\"bash\">bzt &lt;file_name&gt;.yml -report</code></pre>\n</div>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-2.png\" alt=\"Viewing test results in Blazemeter\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"integrate-taurus-with-pipeline\"><a class=\"anchor\" href=\"#integrate-taurus-with-pipeline\"></a>Integrate Taurus With Pipeline</h3>\n<div class=\"paragraph\">\n<p>To run Taurus through <a href=\"/doc/book/pipeline\">Pipeline</a>, you can also go\nstraight to Jenkins after creating your Taurus script.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Open Jenkins &#8594; New Item &#8594; Fill in an item name &#8594; Click on ‘Pipeline’</p>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-3.png\" alt=\"blazemeter speaker blog 2017 3\">\n</div>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-4.png\" alt=\"blazemeter speaker blog 2017 4\">\n</div>\n</div>\n</li>\n<li>\n<p>Now create a Pipeline script. You can include all parts of\nyour CI/CD process in this script: Commit, Build, Unit Test, Performance Test,\netc., by creating different stages.</p>\n<div class=\"paragraph\">\n<p>This Pipeline has three stages: The first is called “build”. In this example it\nis empty, but you can add commands that will build your code. The second,\ncalled “Performance Tests”, creates a folder called “Taurus-Repo” and runs the\nTaurus script that we created. At the same time (note the “parallel” command),\nthere is a “sleep” command for 60 seconds. Obviously it makes no sense to put\nthose two commands together, this is just to show you the option of running 2\ncommands in parallel. The third stage called “Deploy” is also empty in this\nexample. This is where you could deploy your new version.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n   stage('Build') {\n      // Run the Taurus build\n   }\n   stage('Performance Tests') {\n    parallel(\n        BlazeMeterTest: {\n            dir ('Taurus-Repo') {\n                sh 'bzt &lt;file_name&gt;.yml -report'\n            }\n        },\n        Analysis: {\n            sleep 60\n        })\n   }\n\n   stage(‘Deploy’) {\n   }\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-5.png\" alt=\"blazemeter speaker blog 2017 5\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Note that you can either add the Pipeline inline, or choose the “Pipeline\nscript from SCM” option and add the URL to the script on GitHub (in this case\nyou need to upload a <code>Jenkinsfile</code> to GitHub). With \"Pipeline from SCM\",\nwhenever you need to update the tests, you can just add new commits to the\n<code>Jenkinsfile</code>.</p>\n</div>\n</li>\n<li>\n<p>Save the Pipeline</p>\n</li>\n<li>\n<p>Click on ‘Build Now’ to run the Pipeline</p>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-6.png\" alt=\"blazemeter speaker blog 2017 6\">\n</div>\n</div>\n</li>\n<li>\n<p>Click on the new Build that is running now (build #6 in this example).</p>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-7.png\" alt=\"blazemeter speaker blog 2017 7\">\n</div>\n</div>\n</li>\n<li>\n<p>Click on ‘Console Output’ to see the test results:</p>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-8.png\" alt=\"blazemeter speaker blog 2017 8\">\n</div>\n</div>\n</li>\n<li>\n<p>In the Console Output you can see the test results and also the link to the report in BlazeMeter.</p>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-9.png\" alt=\"blazemeter speaker blog 2017 9\">\n</div>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/blazemeter/blazemeter-speaker-blog-2017-10.png\" alt=\"blazemeter speaker blog 2017 10\">\n</div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>That’s it! Jenkins Pipeline is now running open-source load testing tools via Taurus.</p>\n</div>\n<div class=\"paragraph\">\n<p>Come to\n<a href=\"https://jenkinsworld20162017.sched.com/event/BYQn/learn-to-release-faster-by-load-testing-with-jenkins-free\">my\nfree hands-on workshop “Learn to Release Faster by Load Testing With Jenkins”</a>\nat Jenkins World 2017 on Tuesday August 29th from 1-5pm.  You will learn how to\ntest continuously with Jenkins, JMeter, BlazeMeter and Taurus, including how to\nrun JMeter with Jenkins, run the BlazeMeter plugin for Jenkins and how to use\nopen-source Taurus.</p>\n</div>\n<div class=\"paragraph\">\n<p>To learn more about BlazeMeter,\n<a href=\"https://info.blazemeter.com/testing-landing-page2\">click here</a>.</p>\n</div>\n</div>","id":"9f425a12-2f6e-51cd-8c44-5ddce8f1bcb3","title":"Running load tests in Jenkins Pipeline with Taurus","date":"2017-08-17T00:00:00.000Z","slug":"/blog/2017/08/17/speaker-blog-blazemeter/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"blog/author/hinman","twitter":null}]}},"pageContext":{"next":"/blog/2017/08/18/declarative-pipelines-at-jenkinsworld/","previous":"/blog/2017/08/11/remoting-update/","id":"9f425a12-2f6e-51cd-8c44-5ddce8f1bcb3"}},
    "staticQueryHashes": ["1271460761","3649515864"]}