{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/07/17/speaker-blog-care/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by Mandy Hubbard, Software Engineer/QA Architect at\n<a href=\"https://www.care.com\">Care.com</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Imagine this: It’s 4:30pm on a Friday,\nyou have a major release on Monday, and your Jenkins server goes down.\nIt doesn&#8217;t matter if it experienced a hardware failure,\nfell victim to a catastrophic\n<a href=\"https://en.wikipedia.org/wiki/Fat-finger_error\">fat-finger error</a>,\nor just got hit by a meteor - your Jenkins server is toast.\nHow long did it take to perfect your Pipeline,\nall your Continuous Delivery jobs, plugins, and credentials?\nHopefully you at least have a recent backup of your Jenkins home directory,\nbut you’re still going have to work over the weekend with IT to procure a new server,\ninstall it, and do full regression testing to be up and running by Monday morning.\nGo ahead and take a moment, go to your car and just scream.\nIt will help &#8230;&#8203; a little.</p>\n</div>\n<div class=\"paragraph\">\n<p>But what if you could have a Jenkins environment that is completely disposable,\none that could be easily rebuilt at any time?\nUsing <a href=\"https://www.docker.com/\">Docker</a> and Joyent’s\n<a href=\"https://www.joyent.com/containerpilot\">ContainerPilot</a>, the team at\n<a href=\"https://www.care.com/homepay\">Care.com HomePay</a>\nhas created a production Jenkins environment that is completely software-defined.\nEverything required to set up a new Jenkins environment is stored in source control,\nversioned, and released just like any other software.\nAt Jenkins World, I’ll do a developer deep-dive into this approach during my technical session,\n<a href=\"https://jenkinsworld20162017.sched.com/event/ALPr/disposable-jenkins\">Indispensable, Disposable Jenkins</a>,\nincluding a demo of bringing up a fully configured Jenkins server in a Docker container.\nFor now, let me give you a basic outline of what we&#8217;ve done.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Mandy will be\n<a href=\"https://jenkinsworld20162017.sched.com/event/ALPr/disposable-jenkins\">presenting</a>\nmore on this topic at\n<a href=\"https://www.cloudbees.com/jenkinsworld/home\">Jenkins World</a> in August,\nregister with the code <code>JWFOSS</code> for a 30% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>First, we add ContainerPilot to our Jenkins image by including it in the <code>Dockerfile</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>## ContainerPilot\n\nENV CONTAINERPILOT_VERSION 2.7.0\nENV CONTAINERPILOT_SHA256 3cf91aabd3d3651613942d65359be9af0f6a25a1df9ec9bd9ea94d980724ee13\nENV CONTAINERPILOT file:///etc/containerpilot/containerpilot.json\n\nRUN curl -Lso /tmp/containerpilot.tar.gz https://github.com/joyent/containerpilot/releases/download/${CONTAINERPILOT_VERSION}/containerpilot-${CONTAINERPILOT_VERSION}.tar.gz &amp;&amp; \\\n    echo \"${CONTAINERPILOT_SHA256}  /tmp/containerpilot.tar.gz\" | sha256sum -c &amp;&amp; \\\n    tar zxf /tmp/containerpilot.tar.gz -C /bin &amp;&amp; \\\nrm /tmp/containerpilot.tar.gz</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then we specify <code>containerpilot</code> as the Docker command in the <code>docker-compose.yml</code>\nand pass the Jenkins startup script as an argument.\nThis allows ContainerPilot to perform our preStart business before starting the Jenkins server.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">docker-compose.yml</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-yaml\" data-lang=\"yaml\">jenkins:\n    image: devmandy/auto-jenkins:latest\n    restart: always\n    mem_limit: 8g\n    ports:\n      - 80\n      - 22\n    dns:\n      - 8.8.8.8\n      - 127.0.0.1\n    env_file: _env\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      - CONSUL=consul\n    links:\n      - consul:consul\n    ports:\n      - \"8080:80\"\n      - \"2222:22\"\n    command: &gt;\n      containerpilot\n      /usr/local/bin/jenkins.sh</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Configuration data is read from a Docker Compose <code>_env</code> file,\nas specified in the <code>docker-compose.yml</code> file,\nand stored in environment variables inside the container.\nThis is an example of our _env file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">_env</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>GITHUB_TOKEN=&lt;my Github user token&gt;\nGITHUB_USERNAME=DevMandy\nGITHUB_ORGANIZATION=DevMandy\nDOCKERHUB_ORGANIZATION=DevMandy\nDOCKERHUB_USERNAME=DevMandy\nDOCKERHUB_PASSWORD=&lt;my Dockerhub password&gt;\nDOCKER_HOST=&lt;my Docker host, or localhost&gt;\nSLACK_TEAM_DOMAIN=DevMandy\nSLACK_CHANNEL=jenkinsbuilds\nSLACK_TOKEN=&lt;my Slack token&gt;\nBASIC_AUTH=&lt;my basic auth token&gt;\nAD_NAME=&lt;my AD domain&gt;\nAD_SERVER=&lt;my AD server&gt;\nPRIVATE_KEY=&lt;my ssh private key, munged by a setup script&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins stores its credentials and plugin information in various xml files.\nThe <code>preStart</code> script modifies the relevant files,\nsubstituting the environment variables as appropriate,\nusing a set of command line utilities called <code>xmlstarlet</code>.\nHere is an example method from our <code>preStart</code> script that configures Github credentials:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-bash\" data-lang=\"bash\">github_credentials_setup() {\n    ## Setting Up Github username in credentials.xml file\n    echo\n    echo -e \"Adding Github username to credentials.xml file for SSH key\"\n    xmlstarlet \\\n        ed \\\n        --inplace \\\n        -u '//com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey[id=\"github\"]/username' \\\n        -v ${GITHUB_USERNAME} \\\n        ${JENKINS_HOME}/credentials.xml\n\n    echo -e \"Adding Github username to credentials.xml file for Github token\"\n    xmlstarlet \\\n        ed \\\n         --inplace \\\n        -u '//com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl[id=\"github_token\"]/username' \\\n        -v ${GITHUB_USERNAME} \\\n        ${JENKINS_HOME}/credentials.xml\n\n    PASSWORD=${GITHUB_TOKEN}\n    echo -e \"Adding Github token to credentials.xml\"\n    xmlstarlet \\\n        ed \\\n        --inplace \\\n        -u '//com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl[id=\"github_token\"]/password' \\\n        -v ${PASSWORD} \\\n        ${JENKINS_HOME}/credentials.xml\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This approach can be used to automate all things Jenkins.\nThese are just a few of the things I’ll show you in my Jenkins World session,\nwhich you can build on to automate anything else your Jenkins environment needs.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Creation of credentials sets for interacting with third party services\nlike Github, Docker Hub and Slack</p>\n</li>\n<li>\n<p>Configuration of the <a href=\"https://plugins.jenkins.io/active-directory\">Active Directory plugin</a>\nand setup of matrix-based security</p>\n</li>\n<li>\n<p>Configuration of the <a href=\"https://plugins.jenkins.io/github-organization-folder\">Github Organization plugin</a>,\nwhich results in the automatic creation of all Jenkins pipeline jobs\nby scanning the organization for all repositories containing a <code>Jenkinsfile</code></p>\n</li>\n<li>\n<p>Configuration of the\n<a href=\"https://plugins.jenkins.io/docker-workflow\">Docker Pipeline plugin</a>, including creating templates for all custom build agents</p>\n</li>\n<li>\n<p>Configuration of the <a href=\"https://plugins.jenkins.io/workflow-cps-global-lib\">Global Pipeline Libraries plugin</a></p>\n</li>\n<li>\n<p>Configuration of the <a href=\"https://plugins.jenkins.io/slack\">Slack Notifier plugin</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>With software-defined Jenkins, pipeline infrastructure\ngains the same flexibility and resiliency as the rest of the development pipeline.\nIf we decide to change our Jenkins configuration in any way –\nfor example installing a new plugin or upgrading an existing one,\nadding a new global library, or adding new Docker images for build agents –\nwe simply edit our <code>preStart</code> script to include these changes, build a new Docker image,\nand the Jenkins environment is automatically reconfigured when we start a new container.\nBecause the entire configuration specification lives in a Github repository,\nchanges are merged to the \"master\" branch using pull requests,\nand our Jenkins Docker image is tagged using\n<a href=\"https://semver.org/\">semantic versioning</a> just like any other component.\nJenkins can be both indispensable and completely disposable at the same time.</p>\n</div>","id":"0116e3f0-03af-5f1b-b064-5d44aaf60398","title":"Indispensable, Disposable Jenkins","date":"2017-07-17T00:00:00.000Z","slug":"/blog/2017/07/17/speaker-blog-care/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman","twitter":null}]}},"pageContext":{"id":"0116e3f0-03af-5f1b-b064-5d44aaf60398"}},
    "staticQueryHashes": ["1271460761","3649515864"]}