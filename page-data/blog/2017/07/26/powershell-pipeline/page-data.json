{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/07/26/powershell-pipeline/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>I am pleased to announce Microsoft PowerShell support for Jenkins Pipeline!\nAs of <a href=\"https://plugins.jenkins.io/durable-task\">Durable Task 1.14</a> and\n<a href=\"https://plugins.jenkins.io/workflow-durable-task-step\">Pipeline Nodes and Processes Plugin 2.12</a>, you will now be able to run Microsoft PowerShell scripts\ndirectly in your Jenkins Pipeline projects.  This blog post covers the basics\nof getting started with Microsoft PowerShell in Pipeline and provides some\nbasic examples.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"introduction-to-microsoft-powershell\"><a class=\"anchor\" href=\"#introduction-to-microsoft-powershell\"></a>Introduction to Microsoft PowerShell</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>PowerShell is Microsoft&#8217;s open source and cross platform command line shell, as\nwell as an automation and configuration tool/framework which has a broad user\nbase. PowerShell can be used to perform common system administration tasks in\nWindows, macOS, and Linux environments. It can also be used as a general\npurpose scripting language. Now that Jenkins Pipeline supports PowerShell, you\ncan enjoy the rich set of features in PowerShell for your daily DevOps work.</p>\n</div>\n<div class=\"paragraph\">\n<p>Before diving into using PowerShell in your Pipeline, I recommend reading the\n<a href=\"https://msdn.microsoft.com/en-us/library/ms714469(v=vs.85).aspx\">Windows\nPowerShell Reference</a> as well as the\n<a href=\"https://blogs.msdn.microsoft.com/powershell/\">PowerShell Team Blog</a> for an\nintroduction to PowerShell features, utilities, and as a quick look into the\nPowerShell language.  Microsoft also has an active\n<a href=\"https://github.com/powershell/powershell\">PowerShell community</a> on GitHub,\nwhich I highly recommend visiting to submit feature requests and bug\nreports as you see fit. Jenkins Pipeline currently supports Microsoft\nPowerShell 3.0 or higher, so also be sure to check which version of PowerShell\nis installed on your system in order to take advantage of PowerShell in your\nPipeline.  Please note that we recommend that you upgrade to the latest stable\nversion of PowerShell available, which as of this writing is version 5.1.14393.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"the-powershell-step\"><a class=\"anchor\" href=\"#the-powershell-step\"></a>The <code>powershell</code> step</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    powershell 'Write-Output \"Hello, World!\"'\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"using-microsoft-powershell-in-pipeline\"><a class=\"anchor\" href=\"#using-microsoft-powershell-in-pipeline\"></a>Using Microsoft PowerShell in Pipeline</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Writing PowerShell code as part of your pipeline is incredibly simple. The step that you will use is\nsimply <code>powershell</code>, and it includes the same optional parameters as the\nWindows Batch (<code>bat</code>) step, including:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>returnStdout: Returns the standard output stream with a default encoding of UTF-8 (alternative encoding is optional)</p>\n</li>\n<li>\n<p>returnStatus: Returns the exit status (integer) of the PowerShell script</p>\n</li>\n</ul>\n</div>\n<div class=\"sect2\">\n<h3 id=\"examples\"><a class=\"anchor\" href=\"#examples\"></a>Examples</h3>\n<div class=\"sect3\">\n<h4 id=\"capture-exit-status-of-a-powershell-script\"><a class=\"anchor\" href=\"#capture-exit-status-of-a-powershell-script\"></a>Capture exit status of a PowerShell script</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    def status = powershell(returnStatus: true, script: 'ipconfig')\n    if (status == 0) {\n        // Success!\n    }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"capture-and-print-the-output-of-a-powershell-script\"><a class=\"anchor\" href=\"#capture-and-print-the-output-of-a-powershell-script\"></a>Capture and print the output of a PowerShell script</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    def msg = powershell(returnStdout: true, script: 'Write-Output \"PowerShell is mighty!\"')\n    println msg\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"which-streams-get-returned-when-i-use-returnstdout\"><a class=\"anchor\" href=\"#which-streams-get-returned-when-i-use-returnstdout\"></a>Which streams get returned when I use <code>returnStdout</code>?</h3>\n<div class=\"paragraph\">\n<p>Until the release of PowerShell 5, there were five distinct output streams. PowerShell 5 introduced a sixth stream for pushing \"informational\" content,\nwith the added benefit of being able to capture messages sent to Write-Host. Each row of the following table describes a PowerShell stream along with\nthe corresponding Cmdlet used for writing to the stream for that particular row. Please keep in mind that stream 6 and associated cmdlets either\ndo not exist or exhibit alternate behavior in versions of PowerShell earlier than version 5.</p>\n</div>\n<table class=\"tableblock frame-ends grid-all\" style=\"width: 40%;\">\n<colgroup>\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3334%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Stream</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n<th class=\"tableblock halign-left valign-top\">Cmdlet</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">1</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Output stream (e.g. stdOut)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Write-Output</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">2</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Error stream (e.g. stdErr)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Write-Error</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">3</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Warning stream</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Write-Warning</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">4</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Verbose stream</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Write-Verbose</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">5</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Debug stream</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Write-Debug</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">6</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Information stream</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Write-Information (or Write-Host with <a href=\"https://blogs.technet.microsoft.com/heyscriptingguy/2015/07/04/weekend-scripter-welcome-to-the-powershell-information-stream/\">caveats</a>)</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\">\n<p>If you are using the <code>returnStdout</code> option of the <code>powershell</code> Pipeline step\nthen <strong>only</strong> stream 1 will be returned, while streams 2-6 will be redirected to\nthe console output. For example:</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"write-to-all-available-streams-and-return-the-standard-output\"><a class=\"anchor\" href=\"#write-to-all-available-streams-and-return-the-standard-output\"></a>Write to all available streams and return the standard output</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    def stdout = powershell(returnStdout: true, script: '''\n        # Enable streams 3-6\n        $WarningPreference = 'Continue'\n        $VerbosePreference = 'Continue'\n        $DebugPreference = 'Continue'\n        $InformationPreference = 'Continue'\n\n        Write-Output 'Hello, World!'\n        Write-Error 'Something terrible has happened!'\n        Write-Warning 'Warning! There is nothing wrong with your television set'\n        Write-Verbose 'Do not attempt to adjust the picture'\n        Write-Debug 'We will control the horizontal.  We will control the vertical'\n        Write-Information 'We can change the focus to a soft blur or sharpen it to crystal clarity.'\n    ''')\n    println stdout\n}</code></pre>\n</div>\n</div>\n<div class=\"sect4\">\n<h5 id=\"console-output\"><a class=\"anchor\" href=\"#console-output\"></a>Console output:</h5>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>[Pipeline] {\n[Pipeline] powershell\n[TestStreams] Running PowerShell script\n﻿&lt;Jenkins Home&gt;\\workspace\\TestStreams@tmp\\durable-4d924c2d\\powershellScript.ps1 : Something terrible has\nhappened!\nAt ﻿&lt;Jenkins Home&gt;\\workspace\\TestStreams@tmp\\durable-4d924c2d\\powershellMain.ps1:2 char:1\n+ &amp; '﻿&lt;Jenkins Home&gt;\\workspace\\TestStreams@tmp\\durable-4d924c ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,powershellScript.ps1\n\nWarning! There is nothing wrong with your television set\nDo not attempt to adjust the picture\nWe will control the horizontal.  We will control the vertical\nWe can change the focus to a soft blur or sharpen it to crystal clarity.\nHello, World!\n[Pipeline] }\n[Pipeline] // node\n[Pipeline] End of Pipeline\nERROR: script returned exit code 1\nFinished: FAILURE</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Note that \"Hello, World!\" gets printed last even though it is the first output\nstatement in my script.  Another interesting aspect of this example is that the\n<code>powershell</code> step failed, which ultimately caused the job to fail. The failure\nin this example is due to the PowerShell error stream being non-empty, which\ntherefore caused the step to result in a non-zero exit status. However, as you\nwill soon discover, there are a variety of causes for a failing <code>powershell</code>\nstep.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"what-causes-a-failing-exit-status\"><a class=\"anchor\" href=\"#what-causes-a-failing-exit-status\"></a>What causes a failing exit status?</h3>\n<div class=\"paragraph\">\n<p>When you execute a <code>powershell</code> step, it may produce a non-zero exit code and\nfail your pipeline build.  This is very similar to other shell steps with some\ninteresting caveats. Your <code>powershell</code> step may produce a failing exit status\nin the following instances:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Something in your PowerShell script has thrown an exception</p>\n</li>\n<li>\n<p>Your PowerShell script explicitly calls <code>exit</code> with a non-zero exit code</p>\n</li>\n<li>\n<p>Your PowerShell script calls a native application that produces a non-zero <code>$LastExitCode</code></p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>$LastExitCode is an <a href=\"https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_automatic_variables\">automatic variable</a> that is set after executing a native application</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>Your PowerShell script results in a non-empty error stream (with or without throwing an exception)</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Overriding the exit status behavior of your <code>powershell</code> step can be achieved\nby explicitly exiting from your script as long as the failure was not caused by\nan unhandled exception. For example:</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"unavoidable-failure-caused-by-an-unhandled-exception\"><a class=\"anchor\" href=\"#unavoidable-failure-caused-by-an-unhandled-exception\"></a>Unavoidable failure caused by an unhandled exception</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    powershell '''\n        throw 'Error! Problem Exists Between Keyboard And Chair'\n        exit 0  # Unreachable code\n    '''\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"failed-step-caused-by-a-non-empty-error-stream\"><a class=\"anchor\" href=\"#failed-step-caused-by-a-non-empty-error-stream\"></a>Failed step caused by a non-empty error stream</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    powershell '''\n        Write-Error 'Error! Problem Exists Between Keyboard And Chair'\n    '''\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"failure-prevented-by-an-explicit-exit\"><a class=\"anchor\" href=\"#failure-prevented-by-an-explicit-exit\"></a>Failure prevented by an explicit exit</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    powershell '''\n        Write-Error 'Error! Problem Exists Between Keyboard And Chair'\n        exit 0\n    '''\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"scripts-vs-cmdlets\"><a class=\"anchor\" href=\"#scripts-vs-cmdlets\"></a>Scripts vs. Cmdlets</h3>\n<div class=\"paragraph\">\n<p>A Cmdlet is a small lightweight utility written in either C#, and compiled, or\nwritten in PowerShell directly. Depending on what your goal is in your pipeline\nyou can make use of Cmdlets directly in your pipeline code, call a self\ncontained PowerShell script, or some mixture of the two. If your strategy is to\nkeep each <code>powershell</code> step as short and succinct as possible then it may make\nsense for you to write a library of Cmdlets, but if you have monolithic scripts\nthen it may make sense for you to call those scripts directly from your\npipeline. The choice is entirely up to you, as both scenarios are supported.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"thanks-for-reading-and-have-fun\"><a class=\"anchor\" href=\"#thanks-for-reading-and-have-fun\"></a>Thanks for reading, and have fun!</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I sincerely hope that this post has encouraged you to try using PowerShell in\nyour Jenkins Pipeline. Please do not hesitate to file an issue against the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Durable+Task+Plugin\">durable-task</a>\nplugin on\n<a href=\"https://issues.jenkins.io/secure/IssueNavigator.jspa?mode=hide&amp;reset=true&amp;jqlQuery=project+%3D+JENKINS+AND+status+in+%28Open%2C+%22In+Progress%22%2C+Reopened%29+AND+component+%3D+%27durable-task-plugin%27\">JIRA</a>\nif you have discovered any problem that you suspect is related to the\n<code>powershell</code> step.  For general PowerShell related issues or inquiries\nplease route your questions to the\n<a href=\"https://github.com/powershell/powershell\">PowerShell community</a>.</p>\n</div>\n</div>\n</div>","id":"a5452093-8b55-5ee4-8314-15bc7e02cd41","title":"Microsoft PowerShell Support for Pipeline","date":"2017-07-26T00:00:00.000Z","slug":"/blog/2017/07/26/powershell-pipeline/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"gabloe","html":"","id":"gabloe","irc":null,"linkedin":null,"name":"Gabriel Loewen","slug":"/blog/author/gabloe","twitter":null}]}},"pageContext":{"next":"/blog/2017/07/27/standardizing-builds-with-shared-libraries/","previous":"/blog/2017/07/21/scaling-jenkins-with-kubernetes-on-google-container-engine/","id":"a5452093-8b55-5ee4-8314-15bc7e02cd41"}},
    "staticQueryHashes": ["1271460761","3649515864"]}