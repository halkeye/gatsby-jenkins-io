{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/07/27/standardizing-builds-with-shared-libraries/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by Alvin Huang, DevOps Engineer at\n<a href=\"https://www.fireeye.com\">FireEye</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>As a security company, FireEye relentlessly protects our customers from cyber attacks. To act\nquickly on intelligence and expertise learned, the feedback loop from the front lines to features\nand capabilities in software must be small. Jenkins helps us achieve this by allowing us to build,\ntest, and deploy to our hardware and software platforms faster, so we can stop the bad guys\nbefore they reach our customers.</p>\n</div>\n<div class=\"paragraph\">\n<p>More capabilities and functionalities in our product offerings means more applications and\nsystems, which means more software builds and jobs in Jenkins. Within the FaaS (FireEye as a\nService) organization, the tens of Jenkins jobs that were manageable manually in the web GUI\nquickly grew to hundreds of jobs that required more automation. Along the way, we outgrew\nour old legacy datacenter and were tasked with migrating 150+ Freestyle jobs on an old 1.x\nJenkins instance to a newer 2.x instance in the new datacenter in 60 days.</p>\n</div>\n<div class=\"paragraph\">\n<p>Copying Freestyle job XML configuration files to the new server would leave\ntechnical debt.  Using Freestyle job templates would be better but for\ncomplicated jobs that require multiple templates, this would still create large\ndependency chains that would be hard to trace in the log output. Finally,\ndevelopers were not excited about having to replicate global changes, such as\nadd an email recipient when a new member joins the team, across tens of jobs\nmanually or using the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Configuration+Slicing+Plugin\">Configuration\nSlicer</a>. We needed a way to migrate the jobs in a timely fashion while getting\nrid of as much technical debt as possible.</p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins Pipeline to the rescue! In 2.0, Jenkins added the capability to create pipelines as first-\nclass entities. At FireEye, we leveraged many of the features available in pipeline to aid in the\nmigration process including the ability to:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>create Pipeline as Code in a <code>Jenkinsfile</code> stored in SCM</p>\n</li>\n<li>\n<p>create Jenkins projects automatically when new branches or repos get added with a <code>Jenkinsfile</code></p>\n</li>\n<li>\n<p>continue jobs after the Jenkins controller or build agent crashes</p>\n</li>\n<li>\n<p>and most importantly, build a Pipeline\n<a href=\"/doc/book/pipeline/shared-libraries\">Shared Library</a> that keeps projects\n<a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY</a> and\nallows new applications to be on boarded into Jenkins within seconds</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>However, Jenkins Pipeline came with a DSL that our users would have to learn to translate their\nFreestyle jobs to pipeline jobs. This would be a significant undertaking across multiple teams\njust to create Jenkins jobs. Instead, the DevOps team identified similarities across all the\nFreestyle jobs that we were migrating, learned the Jenkins DSL to become SMEs for the\norganization, and built a shared library of functions and wrappers that saved each Dev/QA\nengineer hours of time.</p>\n</div>\n<div class=\"paragraph\">\n<p>Below is an example function we created to promote builds in Artifactory:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">vars/promoteBuild.groovy</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def call(source_repo, target_repo, build_name, build_number) {\n    stage('Promote to Production repo') {\n        milestone label: 'promote to production'\n        input 'Promote this build to Production?'\n\n        node {\n            Artifactory.server(getArtifactoryServerID()).promote([\n                'buildName'   : build_name,\n                'buildNumber' : build_number,\n                'targetRepo'  : target_repo,\n                'sourceRepo'  : source_repo,\n                'copy'        : true,\n            ])\n    }\n}\n\ndef call(source_repo, target_repo) {\n    buildInfo = getBuildInfo()\n\n    call(source_repo, target_repo, buildInfo.name, buildInfo.number)\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Rather than learning the Jenkins DSL and looking up how the Artifactory Plugin worked in\nPipeline, users could easily call this function and pass it parameters to do the promotion work\nfor them. In the Shared Library, we can also create build wrappers of opinionated workflows,\nthat encompasses multiple functions, based on a set of parameters defined in the Jenkinsfile.\nIn addition to migrating the jobs, we also had to migrate the build agents. No one knew the\nexact list of packages, versions, and build tools installed on each build server, so rebuilding\nthem would be extremely difficult. Rather than copying the VMs or trying to figure out what\npackages were on the build agents, we opted to use Docker to build containers with all\ndependencies needed for an application.</p>\n</div>\n<div class=\"paragraph\">\n<p>I hope you will join me at my Jenkins World session:\n<a href=\"https://jenkinsworld20162017.sched.com/event/ALOj/codifying-the-build-and-release-process-with-a-jenkins-pipeline-shared-library\">Codifying the Build and Release Process with a Jenkins\nPipeline Shared Library</a>, as I deep dive into the inner workings of our Shared\nPipeline Library and explore how we integrated Docker into our CI/CD pipeline.\nCome see how we can turn a <code>Jenkinsfile</code> with just a set of parameters like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">standardBuild {\n    machine          = 'docker'\n    dev_branch       = 'develop'\n    release_branch   = 'master'\n    artifact_apttern = '*.rpm'\n    html_pattern     = [keepAll: true, reportDir: '.', reportFiles: 'output.html', reportName: 'OutputReport']\n    dev_repo         = 'pipeline-examples-dev'\n    prod_repo        = 'pipeline-examples-prod'\n    pr_script        = 'make prs'\n    dev_script       = 'make dev'\n    release_script   = 'make release'\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>and a <code>Dockerfile</code> like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>FROM faas/el7-python:base\n\nRUN yum install -y python-virtualenv \\\n        rpm-build &amp;&amp; \\\n        yum clean all</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Into a full Jenkins Pipeline like this:</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jenkinsworld2017/fireeye-pipeline.png\" alt=\"Full Stage View\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As we look ahead at FireEye, I will explore how the Shared Library sets us up for easier future\nmigrations of other tools such as Puppet, JIRA, and Artifactory, and easier integration with new\ntools like Openshift. I will also cover our strategies for deployments and plans to move to\nDeclarative Pipeline.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Alvin will be\n<a href=\"https://jenkinsworld20162017.sched.com/event/ALOj/codifying-the-build-and-release-process-with-a-jenkins-pipeline-shared-library\">presenting</a>\nmore on this topic at\n<a href=\"https://www.cloudbees.com/jenkinsworld/home\">Jenkins World</a> in August,\nregister with the code <code>JWFOSS</code> for a 30% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>","id":"92796c2d-9e8b-530e-82dd-441263269c06","title":"Codifying the Build and Release Process with a Pipeline Shared Library","date":"2017-07-27T00:00:00.000Z","slug":"/blog/2017/07/27/standardizing-builds-with-shared-libraries/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},"pageContext":{"next":"/blog/2017/08/03/jenkinsworld-ask-the-experts/","previous":"/blog/2017/07/26/powershell-pipeline/","id":"92796c2d-9e8b-530e-82dd-441263269c06"}},
    "staticQueryHashes": ["1271460761","3649515864"]}