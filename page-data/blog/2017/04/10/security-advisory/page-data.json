{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/04/10/security-advisory/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-important\" title=\"Important\"></i>\n</td>\n<td class=\"content\">\nThese are not security fixes you can apply blindly. We strongly recommend you read this post, as well as the <a href=\"/security/advisory/2017-04-10/\">security advisory</a> to understand what the vulnerabilities are, whether and how they affect you, and what to expect when upgrading plugins.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Multiple Jenkins plugins received updates today that fix several security vulnerabilities or other security-related issues:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://plugins.jenkins.io/email-ext\">Email Extension (Email-ext)</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/envinject\">Environment Injector (EnvInject)</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/extensible-choice-parameter\">Extensible Choice Parameter</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/groovy\">Groovy</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/job-dsl\">Job DSL</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/lockable-resources\">Lockable Resources</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/matrix-auth\">Matrix Authorization</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/role-strategy\">Role Strategy</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/warnings\">Warnings</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>We also included some plugins that received security fixes in the past that haven&#8217;t been mentioned in a security advisory before:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Active+Choices+Plugin\">Active Choices (uno-choice)</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/extended-choice-parameter\">Extended Choice Parameter</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/groovy-postbuild\">Groovy Postbuild</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/groovy-label-assignment\">Groovy Label Assignment</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, we included other plugins in the advisory that are not getting updated today, but whose vulnerabilities are similar to those of plugins getting fixed.\nIn total, over 30 plugins are part of the <a href=\"/security/advisory/2017-04-10/\">advisory</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>While there are fixes for other vulnerabilities as well, the majority of the advisory (and the rest of this blog post) is about arbitrary code execution vulnerabilities in Jenkins plugins.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"background\"><a class=\"anchor\" href=\"#background\"></a>Background</h3>\n<div class=\"paragraph\">\n<p>Jenkins administrators have long been able to use the Groovy script console and related functionality to execute arbitrary code in Jenkins for diagnostic or otherwise administrative purposes.\nRather than having to rely on plugins implementing the desired functionality, experienced Jenkins admins were able to run a number of scripts as needed to implement various administrative features.</p>\n</div>\n<div class=\"paragraph\">\n<p>This bled over into plugins:\nIt&#8217;s just <em>easy</em> for a plugin developer to build on top of Groovy and let the users figure out exactly what they want to do.\nUnfortunately, for a long time, there was no technology in Jenkins to limit what could be done in Groovy scripts, so anywhere Groovy would be executed, arbitrary code could be executed.</p>\n</div>\n<div class=\"paragraph\">\n<p>We were treating this as a security issue for the first time in the fix for SECURITY-125, about two years ago, something that first required splitting off the Matrix Project type from core into a plugin, and making use of <a href=\"https://plugins.jenkins.io/script-security\">Script Security Plugin</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Unfortunately, other plugins weren&#8217;t integrating with Script Security plugin.\nAnd even diligent administrators who understand the problem of arbitrary code execution via Groovy scripts may not be able to tell whether a given plugin is affected:\nIn some cases, you&#8217;d need to dive into the source code to see whether, and how, it uses Groovy in a way that can be exploited by regular users to perform actions they otherwise wouldn&#8217;t be allowed to do.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"about-the-advisory\"><a class=\"anchor\" href=\"#about-the-advisory\"></a>About the advisory</h3>\n<div class=\"paragraph\">\n<p>Broadly speaking, there are three levels of severity for scripting related vulnerabilities in Jenkins:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The lowest severity ones are those that confuse <em>Overall/Administer</em> and <em>Overall/Run Scripts</em> permissions.\nThese are irrelevant for most Jenkins instances.\nMore on that later.</p>\n</li>\n<li>\n<p>The next level up are vulnerabilities that effectively grant the ability to run arbitrary scripts to users who are able to configure jobs.\nWhile these users aren&#8217;t administrators, they have a nontrivial level of permissions, so are <em>somewhat</em> trusted.\nThis is often a difficult configuration to adequately secure, but it&#8217;s a supported configuration, and any plugin that undermines the security of this configuration will be treated as having a vulnerability.</p>\n</li>\n<li>\n<p>The most severe ones are those that require little or no access to Jenkins to successfully exploit.\nThis typically does require the <em>Overall/Read</em> permission to access certain endpoints, but Pipeline as Code may allow people with SCM commit access to exploit scripting related weaknesses as well.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Arbitrary code execution is a serious enough issue that publishing a security advisory for just a few plugins would actually be detrimental to overall security:\nMalicious users would be able to review the fixes we do publish, and try to find other plugins affected by a similar vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"/security/advisory/2017-04-10/\">The advisory issued today</a> lists all plugins we could find that implement any arbitrary code execution vulnerability (i.e. all three levels described above).\nAs this affects over 30 plugins, many of them not actively maintained, the problem exceeds the capacity of the Jenkins security team to address them all.</p>\n</div>\n<div class=\"paragraph\">\n<p>For that reason, <a href=\"/security\">the Jenkins security team</a> decided that we would fix as many of the plugins as we can handle, and leaving the others to their maintainers.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"how-to-proceed\"><a class=\"anchor\" href=\"#how-to-proceed\"></a>How to proceed</h3>\n<div class=\"paragraph\">\n<p>We strongly advise administrators to review the list of affected plugins in the advisory, and look for any plugins that are installed on their instances.\nIt is very likely there&#8217;s at least one plugin installed that is affected by this.\nIf you&#8217;re on Jenkins 2.40 or newer, or Jenkins LTS 2.32.2 or newer, a warning will appear that informs you about vulnerable plugins you currently have installed.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you&#8217;ve determined which plugins you use are included in the advisory, you need to determine whether it is something that affects your particular setup.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>If the vulnerability confuses <em>Overall/Administer</em> and <em>Overall/Run Scripts</em>, but all administrators of your Jenkins instance are able to run scripts anyway, this vulnerability is not a problem for you.\nThis is the case in the vast majority of Jenkins instances.\nOnly custom setups, typically to allow for hosted Jenkins services, don&#8217;t grant <em>Overall/Run Scripts</em> permission to administrators.</p>\n</li>\n<li>\n<p>If the vulnerability allows users with the permission to e.g. configure jobs to execute arbitrary code, it is only a problem if there are users that have the lower permission (e.g. <em>Item/Configure</em>) but not the higher (<em>Overall/Run Scripts</em>).\nSimple authorization strategies like <em>Logged in users can do anything</em> are therefore not affected by this issue.</p>\n</li>\n<li>\n<p>Even vulnerabilities that require no notable permissions in Jenkins may have prerequisites to be exploitable.\nFor example, <em>Overall/Read</em> access may be required, but only granted to users who are also administrators, or in Pipeline as Code setups, everyone with SCM commit access may also be a Jenkins administrator.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The above should guide your decision how urgently you should upgrade affected plugins with a fix, or disable affected plugins without a fix.\nRemember that you may decide in the future to reconfigure Jenkins in a way that makes previously irrelevant permission distinctions a huge problem, so it is not a good idea to continue using vulnerable plugin versions indefinitely.</p>\n</div>\n<div class=\"paragraph\">\n<p>After deciding to upgrade a plugin, review the advisory and the plugin documentation for information about the migration.\nThe scripts provided in <a href=\"https://github.com/jenkinsci-cert/security-advisory-2017-04-10\">this GitHub repository</a> may help you in determining whether you&#8217;re using affected features.\nIf you&#8217;re not using any of the affected features, it&#8217;s likely that there won&#8217;t be any problems and you can just upgrade.\nIf you are using affected features, you should carefully read the documentation on how the upgrade works: Affected plugin features may effectively be disabled until an administrator approves the scripts in use, potentially resulting in build failures.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"distributing-vulnerable-plugins\"><a class=\"anchor\" href=\"#distributing-vulnerable-plugins\"></a>Distributing vulnerable plugins</h3>\n<div class=\"paragraph\">\n<p>Finally, there&#8217;s the issue of distribution:\nThe Jenkins project historically has performed little to no oversight over the plugins that are being published.\nThis is a direct consequence of the <a href=\"/project/governance\">governance document</a>, which gives plugin maintainers a lot of control over their plugins.</p>\n</div>\n<div class=\"paragraph\">\n<p>That said, in exceptional circumstances, the Jenkins project can, and should, protect its users:\nIf a plugin maintainer were to upload a clearly malicious plugin, we wouldn&#8217;t stand by the side and continue distributing it.\nIn the case of plugins with known (unintended) vulnerabilities, this obviously becomes more difficult.\nThis has been <a href=\"https://groups.google.com/d/msg/jenkinsci-dev/NaAqqChOVmY/BvA_TuzjAQAJ\">discussed in the abstract a while back</a> on the <a href=\"/mailing-lists\">jenkinsci-dev mailing list</a>, and the majority of participants in that discussion agreed that we should suspend distribution of vulnerable plugins if the security team doesn&#8217;t have the capacity to address the problem, and the vulnerability would remain unfixed otherwise.</p>\n</div>\n<div class=\"paragraph\">\n<p>We decided to temporarily suspend distribution of plugins via the Jenkins project update sites if they allow users with lower privileges (no <em>Overall/Administer</em>) to execute arbitrary code.\nUsers who really need to download these plugins can do so via our <a href=\"https://repo.jenkins-ci.org/\">Artifactory Maven repository</a>.\nOnce an affected plugin receives a fix, we&#8217;d of course resume distribution via the update sites.</p>\n</div>\n<div class=\"paragraph\">\n<p>Plugins that mistake <em>Overall/Administer</em> and <em>Overall/Run Scripts</em> continue being distributed, albeit with <a href=\"/blog/2017/01/10/security-warnings/\">a warning shown to Jenkins administrators</a>, as the setup required for this to make a difference is pretty rare.</p>\n</div>\n<div class=\"paragraph\">\n<p>Unfortunately, we were unable to adequately inform all plugin maintainers before publication of the advisory, so there are several plugins with fewer than 500 installations that are actively maintained but whose maintainers we didn&#8217;t contact prior to this advisory.\nFor that, I am really sorry, and can only ask for understanding from the maintainers of affected plugins.\nThe number of affected plugins and the coordination and review required simply exceeded our capabilities.</p>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>Subscribe to the <a href=\"/mailing-lists\">jenkinsci-advisories mailing list</a> to receive important notifications related to Jenkins security.</p>\n</div>\n</div>","id":"2ff77860-9123-5dcf-b79a-b4d987a5169e","title":"Important Scripting-related Security Advisory","date":"2017-04-10T00:00:00.000Z","slug":"/blog/2017/04/10/security-advisory/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and member of the <a href=\"/security/#team\">Jenkins security team</a>.\nHe was the inaugural Jenkins security officer from 2015 to 2021.\nHe sometimes contributes to developer documentation and project infrastructure in his spare time.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},"pageContext":{"next":"/blog/2017/04/11/new-cli/","previous":"/blog/2017/04/10/jenkins-has-upgraded-to-java-8/","id":"2ff77860-9123-5dcf-b79a-b4d987a5169e"}},
    "staticQueryHashes": ["1271460761","3649515864"]}