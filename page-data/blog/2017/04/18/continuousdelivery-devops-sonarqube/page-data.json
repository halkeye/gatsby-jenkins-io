{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/04/18/continuousdelivery-devops-sonarqube/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This is a guest post by <a href=\"https://github.com/michaelhuettermann\">Michael HÃ¼ttermann</a>. Michael is an expert\nin Continuous Delivery, DevOps and SCM/ALM. More information about him at <a href=\"http://huettermann.net\">huettermann.net</a>, or\nfollow him on Twitter: <a href=\"https://twitter.com/huettermann\">@huettermann</a>.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Continuous Delivery and DevOps are well known and widely spread practices nowadays. It is commonly accepted that it\nis crucial to form great teams and define shared goals first and then choose and integrate the tools fitting best to\ngiven tasks. Often it is a mashup of lightweight tools, which are integrated to build up Continuous Delivery pipelines\nand underpin DevOps initiatives. In this blog post, we zoom in to an important part of the overall pipeline, that is the discipline\noften called <em>Continuous Inspection</em>, which comprises inspecting code and injecting a quality gate on that, and show how artifacts can\nbe uploaded after the quality gate was met. DevOps enabler tools covered are Jenkins, SonarQube, and Artifactory.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"the-use-case\"><a class=\"anchor\" href=\"#the-use-case\"></a>The Use Case</h3>\n<div class=\"paragraph\">\n<p>You already know that quality cannot be injected after the fact, rather it should be part of the process and product from the very beginning.\nAs a commonly used good practice, it is strongly recommended to inspect the code and make findings visible, as soon as possible.\nFor that <a href=\"https://www.sonarqube.com\">SonarQube</a> is a great choice. But SonarQube is not just running on any isolated\nisland, it is integrated in a Delivery Pipeline. As part of the pipeline, the code is inspected, and only if the code is fine according to defined\nrequirements, in other words: it meets the quality gates, the built artifacts are uploaded to the binary repository manager.</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s consider the following scenario. One of the busy developers has to fix code, and checks in changes to the central\nversion control system. The day was long and the night short, and against all team commitments the developer\ndid not check the quality of the code in the local sandbox. Luckily, there is the build engine <a href=\"https://www.jenkins.io\">Jenkins</a>\nwhich serves as a single point of truth, implementing the Delivery Pipeline with its native pipeline features, and as a handy coincidence\nSonarQube has support for Jenkins pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>The change triggers a new run of the pipeline. Oh no! The build pipeline broke, and the change is not further processed.\nIn the following image you see that a defined quality gate was missed. The visualizing is done with Jenkins Blue Ocean.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/sonarqube-jenkins/01_PipelineFailedBlueOcean.png\" alt=\"01 PipelineFailedBlueOcean\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"sonarqube-inspection\"><a class=\"anchor\" href=\"#sonarqube-inspection\"></a>SonarQube inspection</h3>\n<div class=\"paragraph\">\n<p>What is the underlying issue? We can open the SonarQube web application and drill down to the finding. In the Java code, obviously a string literal is not placed on the right side.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/sonarqube-jenkins/02_Finding.png\" alt=\"02 Finding\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>During a team meeting it was decided to define this to be a <em>Blocker</em>, and SonarQube was configured accordingly. Furthermore, a SonarQube quality gate was created to break any build, if a <em>blocker</em> was identified. Let&#8217;s now quickly look into the code.\nYes, SonarQube is right, there is the issue with the following code snippet.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/sonarqube-jenkins/03_FindingVisualizedInCode.png\" alt=\"03 FindingVisualizedInCode\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>We do not want to discuss in detail all used tools, and also covering the complete Jenkins build job would be out of scope.\nBut the interesting extract here in regard of the inspection is the following <em>stage</em> defined in Jenkins pipeline DSL:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">config.xml: SonarQube inspection</div>\n<div class=\"content\">\n<pre class=\"nowrap\">    stage('SonarQube analysis') { <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n        withSonarQubeEnv('Sonar') { <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n          sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar ' + <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n          '-f all/pom.xml ' +\n          '-Dsonar.projectKey=com.huettermann:all:master ' +\n          '-Dsonar.login=$SONAR_UN ' +\n          '-Dsonar.password=$SONAR_PW ' +\n          '-Dsonar.language=java ' +\n          '-Dsonar.sources=. ' +\n          '-Dsonar.tests=. ' +\n          '-Dsonar.test.inclusions=**/*Test*/** ' +\n          '-Dsonar.exclusions=**/*Test*/**'\n        }\n    }</pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>The dedicated stage for running the SonarQube analysis.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>Allow to select the SonarQube server you want to interact with.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>Running and configuring the scanner, many options available, check the docs.</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Many options are available to integrate and configure SonarQube. Please consult the documentation for alternatives. Same applies to the other covered tools.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"sonarqube-quality-gate\"><a class=\"anchor\" href=\"#sonarqube-quality-gate\"></a>SonarQube Quality Gate</h3>\n<div class=\"paragraph\">\n<p>As part of a Jenkins pipeline stage, SonarQube is configured to run and inspect the code. But this is just the first part,\nbecause we now also want to add the quality gate in order to break the build. The next stage is covering exactly that, see\nnext snippet. The pipeline is paused until the quality gate is computed, specifically the <em>waitForQualityGate</em> step will pause the\npipeline until SonarQube analysis is completed and returns the quality gate status. In case a quality gate was missed, the build breaks.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">config.xml: SonarQube Quality Gate</div>\n<div class=\"content\">\n<pre class=\"nowrap\">    stage(\"SonarQube Quality Gate\") { <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n        timeout(time: 1, unit: 'HOURS') { <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n           def qg = waitForQualityGate() <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n           if (qg.status != 'OK') {\n             error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n           }\n        }\n    }</pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>The defined quality gate stage.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>A timeout to define when to proceed without waiting for any results for ever.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>Here we wait for the OK. Underlying implementation is done with SonarQube&#8217;s <em>webhooks</em> feature.</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This blog post is an appetizer, and scripts are excerpts. For more information, please consult the respective documentation, or a good book, or the great community, or ask your local expert.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Since they all work in a wonderful Agile team, the next available colleague just promptly fixes the issue. After checking in\nthe fixed code, the build pipeline runs again.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/sonarqube-jenkins/04_PipelineFixedBlueOcean.png\" alt=\"04 PipelineFixedBlueOcean\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The pipeline was processed successfully, including the SonarQube quality gate, and as the final step, the packaged and tested artifact was\ndeployed to <a href=\"https://www.jfrog.org/artifactory\">Artifactory</a>. There are a couple of different flexible ways how to upload the artifacts,\nthe one we use here is using an upload spec to actually collect and upload the artifact which was built at the very beginning of the pipeline.\nAlso meta information are published to Artifactory, since it is the context which matters and thus we can add valuable labels to the artifact for further processing.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">config.xml: Upload to Artifactory</div>\n<div class=\"content\">\n<pre class=\"nowrap\">stage ('Distribute binaries') { <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n    def SERVER_ID = '4711' <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n    def server = Artifactory.server SERVER_ID\n    def uploadSpec = <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n    \"\"\"\n    {\n    \"files\": [\n        {\n            \"pattern\": \"all/target/all-(*).war\",\n            \"target\": \"libs-snapshots-local/com/huettermann/web/{1}/\"\n        }\n      ]\n    }\n    \"\"\"\n    def buildInfo = Artifactory.newBuildInfo() <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n    buildInfo.env.capture = true <i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\n    buildInfo=server.upload(uploadSpec) <i class=\"conum\" data-value=\"6\"></i><b>(6)</b>\n    server.publishBuildInfo(buildInfo) <i class=\"conum\" data-value=\"7\"></i><b>(7)</b>\n}</pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>The stage responsible for uploading the binary.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>The server can be defined Jenkins wide, or as part of the build step, as done here.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>In the upload spec, in JSON format, we define what to deploy to which target, in a fine-grained way.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>The build info contains meta information attached to the artifact.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"5\"></i><b>5</b></td>\n<td>We want to capture environmental data.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"6\"></i><b>6</b></td>\n<td>Upload of artifact, according to upload spec.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"7\"></i><b>7</b></td>\n<td>Build info are published as well.</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Now let&#8217;s see check that the binary was deployed to Artifactory, successfully. As part of the context information, also a reference to the\nproducing Jenkins build job is available for better traceability.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/sonarqube-jenkins/05_BinaryDeployedInArtifactory.png\" alt=\"05 BinaryDeployedInArtifactory\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"summary\"><a class=\"anchor\" href=\"#summary\"></a>Summary</h3>\n<div class=\"paragraph\">\n<p>In this blog post, we&#8217;ve discovered tips and tricks to integrate Jenkins with SonarQube, how to define\nJenkins stages with the Jenkins pipeline DSL, how those stages are visualized with Jenkins Blue Ocean, and how the artifact\nwas deployed to our binary repository manager Artifactory.\nNow I wish you a lot of further fun with your great tools of choice to implement your Continuous Delivery pipelines.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"references\"><a class=\"anchor\" href=\"#references\"></a>References</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://jenkins.io/\">Jenkins 2</a></p>\n</li>\n<li>\n<p><a href=\"https://www.sonarqube.org/\">Sonarqube</a></p>\n</li>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/SonarQube+plugin\">Sonarqube Jenkins plugin</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jfrog.com/artifactory/\">Artifactory</a></p>\n</li>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Artifactory+Plugin\">Jenkins Artifactory plugin</a></p>\n</li>\n<li>\n<p><a href=\"http://huettermann.net/devops/\">'DevOps for Developers', Apress, 2012</a></p>\n</li>\n<li>\n<p><a href=\"http://huettermann.net/alm/\">'Agile ALM', Manning, 2011</a></p>\n</li>\n</ul>\n</div>\n</div>","id":"714ef576-2af6-5d69-a880-a3280836f4e4","title":"Delivery Pipelines, with Jenkins 2, SonarQube, and Artifactory","date":"2017-04-18T00:00:00.000Z","slug":"/blog/2017/04/18/continuousdelivery-devops-sonarqube/","links":{"discourse":""},"authors":[]}},"pageContext":{"next":"/blog/2017/04/20/secure-jenkins-on-azure/","previous":"/blog/2017/04/12/welcome-to-blue-ocean-dashboard/","id":"714ef576-2af6-5d69-a880-a3280836f4e4"}},
    "staticQueryHashes": ["1271460761","3649515864"]}