{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/09/25/declarative-1.2-released/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>After a few months of work on its key features, I&#8217;m happy to announce the\n1.2 release of\n<a href=\"/doc/book/pipeline/syntax/#declarative-pipeline\">Declarative Pipeline</a>!\nOn behalf of the contributors developing Pipeline, I thought it would be\nhelpful to discuss three of the key changes.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/declarative-1.2/pipeline-parallel-stages.png\" alt=\"A Pipeline with Parallel stages\"></span></p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"parallel-stages\"><a class=\"anchor\" href=\"#parallel-stages\"></a>Parallel Stages</h3>\n<div class=\"paragraph\">\n<p>First, we&#8217;ve added syntax support for parallel stages. In earlier versions of\nDeclarative Pipeline, the only way to run chunks of Pipeline code in parallel\nwas to use the <code>parallel</code> step inside the <code>steps</code> block for a stage, like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">/* .. snip .. */\nstage('run-parallel-branches') {\n  steps {\n    parallel(\n      a: {\n        echo \"This is branch a\"\n      },\n      b: {\n        echo \"This is branch b\"\n      }\n    )\n  }\n}\n/* .. snip .. */</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>While this works, it doesn&#8217;t integrate well with the rest of the Declarative\nPipeline syntax. For example, to run each parallel branch on a different agent,\nyou need to use a <code>node</code> step, and if you do that, the output of the parallel\nbranch won&#8217;t be available for <code>post</code> directives (at a <code>stage</code> or <code>pipeline</code>\nlevel). Basically the old <code>parallel</code> step required you to use Scripted Pipeline\nwithin a Declarative Pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>But now with Declarative Pipeline 1.2, we&#8217;ve introduced a true Declarative\nsyntax for running stages in parallel:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">pipeline {\n    agent none\n    stages {\n        stage('Run Tests') {\n            parallel {\n                stage('Test On Windows') {\n                    agent {\n                        label \"windows\"\n                    }\n                    steps {\n                        bat \"run-tests.bat\"\n                    }\n                    post {\n                        always {\n                            junit \"**/TEST-*.xml\"\n                        }\n                    }\n                }\n                stage('Test On Linux') {\n                    agent {\n                        label \"linux\"\n                    }\n                    steps {\n                        sh \"run-tests.sh\"\n                    }\n                    post {\n                        always {\n                            junit \"**/TEST-*.xml\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can now specify either <code>steps</code> or <code>parallel</code> for a <code>stage</code>, and within\n<code>parallel</code>, you can specify a list of <code>stage</code> directives to run in parallel,\nwith all the configuration you&#8217;re used to for a <code>stage</code> in Declarative\nPipeline. We think this will be really useful for cross-platform builds and\ntesting, as an example. Support for parallel stages will be in the\nsoon-to-be-released Blue Ocean Pipeline Editor 1.3 as well.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find more documentation on parallel stages in the\n<a href=\"/doc/book/pipeline/syntax/\">User Handbook</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"defining-declarative-pipelines-in-shared-libraries\"><a class=\"anchor\" href=\"#defining-declarative-pipelines-in-shared-libraries\"></a>Defining Declarative Pipelines in Shared Libraries</h3>\n<div class=\"paragraph\">\n<p>Until the 1.2 release, Declarative Pipelines did not officially support\ndefining your <code>pipeline</code> blocks in a shared library. Some of you may have tried\nthat out and found that it could work in some cases, but since it was never an\nofficially supported feature, it was vulnerable to breaking due to necessary\nchanges for the supported use cases of Declarative. But with 1.2, we&#8217;ve added\nofficial support for defining <code>pipeline</code> blocks in <code>src/<strong>.groovy</code> files in your\nshared libraries. Within your <code>src/</strong>.groovy</code> file&#8217;s <code>call</code> method, you can\ncall <code>pipeline { &#8230;&#8203; }</code>, or possibly different <code>pipeline { &#8230;&#8203; }</code> blocks\ndepending on <code>if</code> conditions and the like. Note that only one <code>pipeline { &#8230;&#8203; }</code>\nblock can actually be executed per run - you&#8217;ll get an error if a second one\ntries to execute!</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"major-improvements-to-parsing-and-environment-variables\"><a class=\"anchor\" href=\"#major-improvements-to-parsing-and-environment-variables\"></a>Major Improvements to Parsing and Environment Variables</h3>\n<div class=\"paragraph\">\n<p>Hopefully, you&#8217;ll never actually care about this change, but we&#8217;re very happy\nabout it nonetheless. The original approach used for actually taking the\n<code>pipeline { &#8230;&#8203; }</code> block and executing its contents was designed almost two\nyears ago, and wasn&#8217;t very well suited to how you all are actually using\nDeclarative Pipelines. In our attempts to work around some of those limitations,\nwe made the parsing logic even more complicated and fragile, resulting in an\n<a href=\"https://issues.jenkins.io/issues/?jql=labels%20%3D%20declarative-variable-and-method-resolution\">impressive\nnumber of bugs</a>, mainly relating to inconsistencies and bad behavior with\n<code>environment</code> variables.</p>\n</div>\n<div class=\"paragraph\">\n<p>In Declarative 1.2, we&#8217;ve replaced the runtime parsing logic completely with a\nfar more robust system, which also happens to fix most of those bugs at the\nsame time! While not every issue has been resolved, you may find that you can\nuse <code>environment</code> variables in more places, escaping is more consistent,\nWindows paths are no longer handled incorrectly, and a lot more. Again, we&#8217;re\nhoping you&#8217;ve never had the misfortune to run into any of these bugs, but if\nyou have, well, they&#8217;re fixed now, and it&#8217;s going to be a lot easier for us to\nfix any future issues that may arise relating to <code>environment</code> variables, <code>when</code>\nexpressions, and more. Also, the parsing at the very beginning of your build\nmay be about 0.5 seconds faster. =)</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"more-to-come\"><a class=\"anchor\" href=\"#more-to-come\"></a>More to Come!</h3>\n<div class=\"paragraph\">\n<p>While we don&#8217;t have any concrete plans for what will be going into Declarative\nPipelines 1.3, rest assured that we&#8217;ve got some great new features in mind, as\nwell as our continuing dedication to fixing the bugs you encounter and report.\nSo please do keep <a href=\"https://issues.jenkins.io/\">opening tickets</a> for\nissues and feature requests. Thanks!</p>\n</div>\n</div>","id":"ec7b8ed5-f69c-5e84-9b65-735961d0c5cf","title":"Parallel stages with Declarative Pipeline 1.2","date":"2017-09-25T00:00:00.000Z","slug":"/blog/2017/09/25/declarative-1.2-released/","authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},"pageContext":{"id":"ec7b8ed5-f69c-5e84-9b65-735961d0c5cf"}},
    "staticQueryHashes": ["1271460761","3649515864"]}