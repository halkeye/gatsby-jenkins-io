{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2017/10/02/pipeline-templates-with-shared-libraries/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by Philip Stroh, Software Architect at\n<a href=\"https://www.timocom.com\">TimoCom</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>When building multiple microservices - e.g. with Spring Boot - the integration\nand delivery pipelines of your services will most likely be very similar.\nSurely, you don&#8217;t want to copy-and-paste Pipeline code from one <code>Jenkinsfile</code>\nto another if you develop a new service or if there are adaptions in your\ndelivery process. Instead you would like to define something like a pipeline\n\"template\" that can be applied easily to all of your services.</p>\n</div>\n<div class=\"paragraph\">\n<p>The requirement for a common pipeline that can be used in multiple projects does not only emerge in microservice architectures. It&#8217;s valid for all areas where applications are\nbuilt on a similar technology stack or deployed in a standardized way (e.g. pre-packages as containers).</p>\n</div>\n<div class=\"paragraph\">\n<p>In this blog post I&#8217;d like to outline the possibility to create such a pipeline \"template\" using Jenkins Shared Libraries. If\nyou&#8217;re not yet familiar with Shared Libraries I&#8217;d recommend having a look at\n<a href=\"/doc/book/pipeline/shared-libraries\">the documentation</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The following code shows a (simplified) integration and delivery Pipeline for a\nSpring Boot application in declarative syntax.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">JenkinsFile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">pipeline {\n    agent any\n    environment {\n        branch = 'master'\n        scmUrl = 'ssh://git@myScmServer.com/repos/myRepo.git'\n        serverPort = '8080'\n        developmentServer = 'dev-myproject.mycompany.com'\n        stagingServer = 'staging-myproject.mycompany.com'\n        productionServer = 'production-myproject.mycompany.com'\n    }\n    stages {\n        stage('checkout git') {\n            steps {\n                git branch: branch, credentialsId: 'GitCredentials', url: scmUrl\n            }\n        }\n\n        stage('build') {\n            steps {\n                sh 'mvn clean package -DskipTests=true'\n            }\n        }\n\n        stage ('test') {\n            steps {\n                parallel (\n                    \"unit tests\": { sh 'mvn test' },\n                    \"integration tests\": { sh 'mvn integration-test' }\n                )\n            }\n        }\n\n        stage('deploy development'){\n            steps {\n                deploy(developmentServer, serverPort)\n            }\n        }\n\n        stage('deploy staging'){\n            steps {\n                deploy(stagingServer, serverPort)\n            }\n        }\n\n        stage('deploy production'){\n            steps {\n                deploy(productionServer, serverPort)\n            }\n        }\n    }\n    post {\n        failure {\n            mail to: 'team@example.com', subject: 'Pipeline failed', body: \"${env.BUILD_URL}\"\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This Pipeline builds the application, runs unit as well as integration tests and deploys the application to\nseveral environments. It uses a global variable \"deploy\" that is provided within a Shared Library. The deploy method\ncopies the JAR-File to a remote server and starts the application. Through the handy REST endpoints of Spring Boot\nActuator a previous version of the application is stopped beforehand. Afterwards the deployment is verified via the\nhealth status monitor of the application.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">vars/deploy.groovy</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def call(def server, def port) {\n    httpRequest httpMode: 'POST', url: \"http://${server}:${port}/shutdown\", validResponseCodes: '200,408'\n    sshagent(['RemoteCredentials']) {\n        sh \"scp target/*.jar root@${server}:/opt/jenkins-demo.jar\"\n        sh \"ssh root@${server} nohup java -Dserver.port=${port} -jar /opt/jenkins-demo.jar &amp;\"\n    }\n    retry (3) {\n        sleep 5\n        httpRequest url:\"http://${server}:${port}/health\", validResponseCodes: '200', validResponseContent: '\"status\":\"UP\"'\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The common approach to reuse pipeline code is to put methods like \"deploy\" into\na Shared Library. If we now start developing the next application of the same\nfashion we can use this method for deployments as well. But often there are\neven more similarities within projects of one company. E.g. applications are\nbuilt, tested and deployed in the same way into the same environments\n(development, staging and production). In this case it is possible to define\nthe whole Pipeline as a global variable within a Shared Library. The next code\nsnippet defines a Pipeline \"template\" for all of our Spring Boot applications.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">vars/myDeliveryPipeline.groovy</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def call(Map pipelineParams) {\n\n    pipeline {\n        agent any\n        stages {\n            stage('checkout git') {\n                steps {\n                    git branch: pipelineParams.branch, credentialsId: 'GitCredentials', url: pipelineParams.scmUrl\n                }\n            }\n\n            stage('build') {\n                steps {\n                    sh 'mvn clean package -DskipTests=true'\n                }\n            }\n\n            stage ('test') {\n                steps {\n                    parallel (\n                        \"unit tests\": { sh 'mvn test' },\n                        \"integration tests\": { sh 'mvn integration-test' }\n                    )\n                }\n            }\n\n            stage('deploy developmentServer'){\n                steps {\n                    deploy(pipelineParams.developmentServer, pipelineParams.serverPort)\n                }\n            }\n\n            stage('deploy staging'){\n                steps {\n                    deploy(pipelineParams.stagingServer, pipelineParams.serverPort)\n                }\n            }\n\n            stage('deploy production'){\n                steps {\n                    deploy(pipelineParams.productionServer, pipelineParams.serverPort)\n                }\n            }\n        }\n        post {\n            failure {\n                mail to: pipelineParams.email, subject: 'Pipeline failed', body: \"${env.BUILD_URL}\"\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now we can setup the Pipeline of one of our applications with the following method call:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">myDeliveryPipeline(branch: 'master', scmUrl: 'ssh://git@myScmServer.com/repos/myRepo.git',\n                   email: 'team@example.com', serverPort: '8080',\n                   developmentServer: 'dev-myproject.mycompany.com',\n                   stagingServer: 'staging-myproject.mycompany.com',\n                   productionServer: 'production-myproject.mycompany.com')</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The Shared library documentation mentions the ability to encapsulate\nsimilarities between several Pipelines with a global variable. It shows how we\ncan enhance our template approach and build a higher-level DSL step:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">vars/myDeliveryPipeline.groovy</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def call(body) {\n    // evaluate the body block, and collect configuration into the object\n    def pipelineParams= [:]\n    body.resolveStrategy = Closure.DELEGATE_FIRST\n    body.delegate = pipelineParams\n    body()\n\n    pipeline {\n        // our complete declarative pipeline can go in here\n        ...\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now we can even use our own DSL-step to set up the integration and deployment Pipeline of our project:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">myDeliveryPipeline {\n    branch = 'master'\n    scmUrl = 'ssh://git@myScmServer.com/repos/myRepo.git'\n    email = 'team@example.com'\n    serverPort = '8080'\n    developmentServer = 'dev-myproject.mycompany.com'\n    stagingServer = 'staging-myproject.mycompany.com'\n    productionServer = 'production-myproject.mycompany.com'\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The blog post showed how a common Pipeline template can be developed using the\nShared Library functionality in Jenkins. The approach allows to create a\nstandard Pipeline that can be reused by applications that are built in a\nsimilar way.</p>\n</div>\n<div class=\"paragraph\">\n<p>It works for Declarative and Scripted Pipelines as well. For declarative\npipelines the ability to define a Pipeline block in a Shared Library is\nofficial supported since version 1.2 (see the recent blog post on\n<a href=\"/blog/2017/09/25/declarative-1/\">Declarative Pipeline 1.2</a>).</p>\n</div>","id":"3c59e404-8125-5869-a3c8-98dd83976f14","title":"Share a standard Pipeline across multiple projects with Shared Libraries","date":"2017-10-02T00:00:00.000Z","slug":"/blog/2017/10/02/pipeline-templates-with-shared-libraries/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"pstrh","html":"","id":"pstrh","irc":null,"linkedin":null,"name":"Philip Stroh","slug":"blog/author/pstrh","twitter":null}]}},"pageContext":{"next":"/blog/2017/10/06/hacktoberfest/","previous":"/blog/2017/09/29/jenkins-contributor-awards-at-jenkins-world/","id":"3c59e404-8125-5869-a3c8-98dd83976f14"}},
    "staticQueryHashes": ["1271460761","3649515864"]}