{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2020/05/11/docker-windows-agents/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>We would like to announce the availability of official Windows agent images for Docker.\nThese images allow provisioning Jenkins agents with Windows OS on Docker and Kubernetes.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image right center\"><img src=\"/images/docker/dockerJenkins.png\" alt=\"Jenkins and Docker\" height=\"224\"></span></p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"new-images\"><a class=\"anchor\" href=\"#new-images\"></a>New images</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>All official Docker images for agents now provide <code>nanoserver-1809</code> and <code>windowsservercore-1809</code> tags which include Windows images and, at the moment, Java 8 (these are like the <code>latest</code> tag).\nWe also provide tags with explicit Java selection, e.g. <code>jdk8-windowsservercore-1809</code> or <code>jdk11-nanoserver-1809</code>.\nVersion tags are also available, e.g. <code>jenkins/agent:4.3-4-jdk8-nanoserver-1809</code>.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://hub.docker.com/r/jenkins/agent\">jenkins/agent</a> is a basic agent which bundles the agent.jar for agent &#8656; &#8658; controller communication. This is most useful as a base image for other images.\nWindows images are available starting from version <a href=\"https://github.com/jenkinsci/docker-agent/releases/tag/4.3-4\">4.3-4</a></p>\n</li>\n<li>\n<p><a href=\"https://hub.docker.com/r/jenkins/inbound-agent\">jenkins/inbound-agent</a> is an agent that is based on the jenkins/agent image above. It provides a wrapper script written in PowerShell to help specify the parameters to agent.jar.\nWindows images are available starting from version <a href=\"https://github.com/jenkinsci/docker-inbound-agent/releases/tag/4.3-4\">4.3-4</a></p>\n</li>\n<li>\n<p><a href=\"https://hub.docker.com/r/jenkins/ssh-agent\">jenkins/ssh-agent</a> is an image which has OpenSSH installed and should be used with the <a href=\"https://plugins.jenkins.io/ssh-slaves\">SSH Build Agents Plugin</a>.\nWindows images are available starting from version <a href=\"https://github.com/jenkinsci/docker-ssh-agent/releases/tag/2.1.0\">2.1.0</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"using-windows-docker-images\"><a class=\"anchor\" href=\"#using-windows-docker-images\"></a>Using Windows Docker images</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the new images, you will need a proper Docker or Kubernetes environment which supports running Windows containers.\nFor Windows desktop users, the easiest way is to use <a href=\"https://docs.docker.com/docker-for-windows/\">Docker for Windows</a>.\nWindows support in Kubernetes is documented <a href=\"https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/\">here</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"jenkinsagent\"><a class=\"anchor\" href=\"#jenkinsagent\"></a>jenkins/agent</h3>\n<div class=\"paragraph\">\n<p>The jenkins/agent image is a simple agent with the JDK and the agent.jar (Jenkins Remoting library).</p>\n</div>\n<div class=\"paragraph\">\n<p>There are two main use cases for this image:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>As a base image for other Docker images (e.g., <code>FROM jenkins/agent:jdk8-nanoserver-1809</code> in your Dockerfile). The jenkins/inbound-agent is based on this image.</p>\n</li>\n<li>\n<p>This image may also be used to launch an agent using the <strong>Launch method</strong> of <strong>Launch agent via execution of command on the master</strong>.  This allows the controller to launch the agent inside the docker container automatically.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>To run the agent for the second use case, you would specify the following command on the Jenkins controller after setting <strong>Remote root directory</strong> to <code>C:\\Users\\jenkins\\agent</code>:</p>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">docker run -i --rm --name agent --init jenkins/agent:jdk8-windowsservercore-1809 java -jar C:/ProgramData/Jenkins/agent.jar</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><br></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"jenkinsinbound-agent\"><a class=\"anchor\" href=\"#jenkinsinbound-agent\"></a>jenkins/inbound-agent</h3>\n<div class=\"paragraph\">\n<p>The inbound-agent Docker image tries to provide a higher level interaction with the agent.jar executable. It provides a PowerShell wrapper script around agent.jar and it is specified as the entrypoint so that you just need to pass in some command line arguments to run the agent. A <a href=\"https://github.com/jenkinsci/docker-inbound-agent\">pull request</a> has been opened which documents these command line parameters and environment variables.</p>\n</div>\n<div class=\"paragraph\">\n<p>Example:</p>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">docker run jenkins/inbound-agent:windowsservercore-1809 `\n   -Url http://jenkins-server:port `\n   -WorkDir=C:/Users/jenkins/Agent `\n   -Secret &lt;SECRET&gt; `\n   -Name &lt;AGENTNAME&gt;</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Example using environment variables:</p>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">docker run -e \"JENKINS_URL=http://jenkins-server:port\" -e \"JENKINS_AGENT_NAME=AGENTNAME\" `\n   jenkins/inbound-agent:windowsservercore-1809 `\n   -WorkDir=C:/Users/jenkins/Agent `\n   -Secret &lt;SECRET&gt; `\n   -Name &lt;AGENTNAME&gt;</pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThe <code>-Url</code>, <code>-Name</code> and <code>-Secret</code> parameters are required, but can be specified as either command line parameters or environment variables.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><br></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"jenkinsssh-agent\"><a class=\"anchor\" href=\"#jenkinsssh-agent\"></a>jenkins/ssh-agent</h3>\n<div class=\"paragraph\">\n<p>As mentioned above the jenkins/ssh-agent docker image is based on SSH communication with the controller, rather than the remoting TCP or WebSocket protocols. The image sets up a <code>jenkins</code> user and the OpenSSH server so that the controller can connect to the agent via SSH. The image expects an SSH public key as a parameter and puts that key into the <code>authorized_keys</code> file for the <code>jenkins</code> user. The private key should be specified in the agent configuration on the controller to allow the controller to connect.</p>\n</div>\n<div class=\"paragraph\">\n<p>Example:</p>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">docker run jenkins/ssh-agent:jdk8-windowsservercore-1809 \"&lt;public key&gt;\"</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also pass the public key as an environment variable when using <code>docker run</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Example:</p>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">docker run -e \"JENKINS_AGENT_SSH_PUBKEY=&lt;public key&gt;\" jenkins/ssh-agent:jdk8-windowsservercore-1809</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You will then be able to connect this agent using the <a href=\"https://plugins.jenkins.io/ssh-slaves\">SSH Build Agents Plugin</a> as \"jenkins\" with the matching private key.</p>\n</div>\n<div class=\"paragraph\">\n<p><br></p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"whats-next\"><a class=\"anchor\" href=\"#whats-next\"></a>What&#8217;s next?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We are considering providing versions based on <em>Windows Server 2019 build 1909</em> so that Jenkins users can run these images on GKE clusters (see <a href=\"https://github.com/jenkinsci/docker-agent/issues/134\">this issue</a>).</p>\n</div>\n<div class=\"paragraph\">\n<p>We are also looking into providing multiarch manifests which would allow Windows images to be part of the <code>latest</code> tag.</p>\n</div>\n<div class=\"paragraph\">\n<p>There is also an <a href=\"https://github.com/jenkinsci/docker/pull/924\">open pull-request</a> to create a Windows based Docker image for a Jenkins controller. There hasn&#8217;t been a lot of requests for this, but to make the offerings complete for Windows users, the pull request was created.</p>\n</div>\n<div class=\"paragraph\">\n<p>For plans unrelated to Windows, please see the <a href=\"/blog/2020/05/06/docker-agent-image-renaming/\">Docker images for agents: New names and What&#8217;s next</a> blogpost.</p>\n</div>\n</div>\n</div>","id":"a9a89ae0-1c8f-5566-81ab-6fdf73b725f7","title":"Windows Docker Agent Images: General Availability","date":"2020-05-11T00:00:00.000Z","slug":"/blog/2020/05/11/docker-windows-agents/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/slide_o_mix.jpg"},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix/","twitter":"alexcearl"}]}},"pageContext":{"id":"a9a89ae0-1c8f-5566-81ab-6fdf73b725f7"}},
    "staticQueryHashes": ["1271460761","3649515864"]}