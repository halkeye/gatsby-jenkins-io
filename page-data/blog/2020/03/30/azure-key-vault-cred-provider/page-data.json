{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2020/03/30/azure-key-vault-cred-provider/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph lead\">\n<p><a href=\"https://azure.microsoft.com/en-gb/services/key-vault/\">Azure Key Vault</a> is a product for securely managing keys, secrets and certificates.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;m happy to announce two new features in the <a href=\"https://plugins.jenkins.io/azure-keyvault/\">Azure Key Vault</a> plugin:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>a <a href=\"https://github.com/jenkinsci/credentials-plugin/blob/master/docs/user.adoc#credentials-providers\">credential provider</a> to tightly link Jenkins and Azure Key Vault.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>huge thanks to <a href=\"https://github.com/gavinfish\">Jie Shen</a> for contributing this</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>integration with the <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc#secret-sources\">configuration-as-code</a> plugin.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><em>These changes were released in <a href=\"https://github.com/jenkinsci/azure-keyvault-plugin/releases/tag/azure-keyvault-1.8\">v1.8</a> but make sure to run the latest version of the plugin, there has been some fixes since then.</em></p>\n</div>\n<div class=\"paragraph\">\n<p>Some advantages of using the credential provider rather than your own scripts:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>your Jenkins jobs consume the credentials with no knowledge of Azure Key Vault, so they stay vendor-independent.</p>\n</li>\n<li>\n<p>the provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Slack Notifications plugin.</p>\n</li>\n<li>\n<p>credential usage is recorded in the central Jenkins credentials tracking log.</p>\n</li>\n<li>\n<p>Jenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Azure Key Vault while consuming other credentials from your existing providers.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><em>Note: Currently only secret text credentials are supported via the credential provider, you can use the configuration-as-code integration to load the secret from Azure Key Vault into the System Credential Provider to work around this limitation.</em></p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"getting-started\"><a class=\"anchor\" href=\"#getting-started\"></a>Getting started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Install the <a href=\"https://plugins.jenkins.io/azure-keyvault/\">Azure Key Vault</a> plugin</p>\n</div>\n<div class=\"paragraph\">\n<p>Then you will need to configure the plugin.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"azure-authentication\"><a class=\"anchor\" href=\"#azure-authentication\"></a>Azure authentication</h3>\n<div class=\"paragraph\">\n<p>There&#8217;s two types of authentication you can use 'Microsoft Azure Service Principal' or 'Managed Identities for Azure Resources'</p>\n</div>\n<div class=\"paragraph\">\n<p>The easiest one to set this up quickly with is the 'Microsoft Azure Service Principal',</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-shell\" data-lang=\"shell\">$ az ad sp create-for-rbac --name http://service-principal-name\nCreating a role assignment under the scope of \"/subscriptions/ff251390-d7c3-4d2f-8352-f9c6f0cc8f3b\"\n  Retrying role assignment creation: 1/36\n  Retrying role assignment creation: 2/36\n{\n  \"appId\": \"021b5050-9177-4268-a300-7880f2beede3\",\n  \"displayName\": \"service-principal-name\",\n  \"name\": \"http://service-principal-name\",\n  \"password\": \"d9d0d1ba-d16f-4e85-9b48-81ea45a46448\",\n  \"tenant\": \"7e593e3e-9a1e-4c3d-a26a-b5f71de28463\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If this doesn’t work then take a look at the <a href=\"https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest\">Microsoft documentation</a> for creating a service principal.</p>\n</div>\n<div class=\"paragraph\">\n<p><em>Note: for production 'Managed Identities for Azure Resources' is more secure as there&#8217;s no password involved and you don&#8217;t need to worry about the service principal&#8217;s password or certificate expiring.</em></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"vault-setup\"><a class=\"anchor\" href=\"#vault-setup\"></a>Vault setup</h3>\n<div class=\"paragraph\">\n<p>You need to create a vault and give your service principal access to it:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-shell\" data-lang=\"shell\">RESOURCE_GROUP_NAME=my-resource-group\naz group create --location uksouth --name $RESOURCE_GROUP_NAME\n\nVAULT=my-vault # you will need a unique name for the vault\naz keyvault create --resource-group $RESOURCE_GROUP_NAME --name $VAULT\naz keyvault set-policy --resource-group $RESOURCE_GROUP_NAME --name $VAULT \\\n  --secret-permissions get list --spn http://service-principal-name</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"jenkins-credential\"><a class=\"anchor\" href=\"#jenkins-credential\"></a>Jenkins credential</h3>\n<div class=\"paragraph\">\n<p>The next step is to configure the credential in Jenkins:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>click 'Credentials'</p>\n</li>\n<li>\n<p>click 'System' (it&#8217;ll appear below the Credentials link in the side bar)</p>\n</li>\n<li>\n<p>click 'Global credentials (unrestricted)'</p>\n</li>\n<li>\n<p>click 'Add Credentials'</p>\n</li>\n<li>\n<p>select 'Microsoft Azure Service Principal'\n<span class=\"image\"><img src=\"/images/post-images/azure-key-vault/azure-service-principal-drop-down.png\" alt=\"Microsoft Azure Service Principal dropdown\"></span></p>\n</li>\n<li>\n<p>fill out the form from the credential created above, appId is 'Client ID', password is 'Client Secret'\n<span class=\"image\"><img src=\"/images/post-images/azure-key-vault/azure-service-principal-configuration.png\" alt=\"Microsoft Azure Service Principal credential configuration\"></span></p>\n</li>\n<li>\n<p>click 'Verify Service Principal', you should see 'Successfully verified the Microsoft Azure Service Principal'.</p>\n</li>\n<li>\n<p>click 'Save'</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"jenkins-azure-key-vault-plugin-configuration\"><a class=\"anchor\" href=\"#jenkins-azure-key-vault-plugin-configuration\"></a>Jenkins Azure Key Vault plugin configuration</h3>\n<div class=\"paragraph\">\n<p>You now have a credential you can use to interact with Azure resources from Jenkins, now you need to configure the plugin:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>go back to the Jenkins home page</p>\n</li>\n<li>\n<p>click 'Manage Jenkins'</p>\n</li>\n<li>\n<p>click 'Configure System'</p>\n</li>\n<li>\n<p>search for 'Azure Key Vault Plugin'</p>\n</li>\n<li>\n<p>enter your vault url and select your credential\n<span class=\"image\"><img src=\"/images/post-images/azure-key-vault/azure-key-vault-global-config.png\" alt=\"Azure Key Vault plugin configuration\"></span></p>\n</li>\n<li>\n<p>click 'Save'</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"store-a-secret-in-azure-key-vault\"><a class=\"anchor\" href=\"#store-a-secret-in-azure-key-vault\"></a>Store a secret in Azure Key Vault</h3>\n<div class=\"paragraph\">\n<p>For the step after this you will need a secret, so let&#8217;s create one now:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-shell\" data-lang=\"shell\">$ az keyvault secret set --vault-name $YOUR_VAULT --name secret-key --value my-super-secret</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"create-a-pipeline\"><a class=\"anchor\" href=\"#create-a-pipeline\"></a>Create a pipeline</h3>\n<div class=\"paragraph\">\n<p>Install the <a href=\"https://plugins.jenkins.io/workflow-aggregator/\">Pipeline</a> plugin if you don&#8217;t already have it.</p>\n</div>\n<div class=\"paragraph\">\n<p>From the Jenkins home page, click 'New item', and then:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>enter a name, i.e. 'key-vault-test'</p>\n</li>\n<li>\n<p>click on 'Pipeline'</p>\n</li>\n<li>\n<p>add the following to the pipeline definition:</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n  agent any\n  environment {\n    SECRET_KEY = credentials('secret-key')\n  }\n  stages {\n    stage('Foo') {\n      steps {\n        echo SECRET_KEY\n        echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n      }\n    }\n  }\n}\n\n// Scripted //\nwithCredentials([string(credentialsId: 'secret-key', variable: 'SECRET_KEY')]) {\n    echo SECRET_KEY\n    echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n}</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You have now successfully retrieved a credential from Azure Key Vault using native Jenkins credentials integration.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"configuration-as-code-integration\"><a class=\"anchor\" href=\"#configuration-as-code-integration\"></a>configuration-as-code integration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph lead\">\n<p>The Configuration as Code plugin has been designed as an opinionated way to configure Jenkins based on human-readable declarative configuration files. Writing such a file should be easy without being a Jenkins expert.</p>\n</div>\n<div class=\"paragraph\">\n<p>For many secrets the credential provider is enough,\nbut when integrating with other plugins you will likely need more than string credentials.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can use the <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">configuration-as-code plugin</a> (aka JCasC) to allow integrating with other credential types.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"configure-authentication\"><a class=\"anchor\" href=\"#configure-authentication\"></a>configure authentication</h3>\n<div class=\"paragraph\">\n<p>As the JCasC plugin runs during initial startup the Azure Key Vault credential provider needs to be configured before JCasC runs during startup.</p>\n</div>\n<div class=\"paragraph\">\n<p>The easiest way to do that is via environment variables set before Jenkins starts up:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-shell\" data-lang=\"shell\">export AZURE_KEYVAULT_URL=https://my.vault.azure.net\nexport AZURE_KEYVAULT_SP_CLIENT_ID=...\nexport AZURE_KEYVAULT_SP_CLIENT_SECRET=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>See the <a href=\"https://github.com/jenkinsci/azure-keyvault-plugin#via-system-properties\">azure-keyvault documentation</a> for other authentication options.</p>\n</div>\n<div class=\"paragraph\">\n<p>You will now be able to refer to Azure Key Vault secret IDs in your jenkins.yaml file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-yaml\" data-lang=\"yaml\">credentials:\n  system:\n    domainCredentials:\n      - credentials:\n        - usernamePassword:\n            description: \"GitHub\"\n            id: \"jenkins-github\"\n            password: \"${jenkins-github-apikey}\"\n            scope: GLOBAL\n            username: \"jenkinsadmin\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Thanks for reading, send feedback on twitter using the tweet button in the top right, any issues or feature requests use <a href=\"https://github.com/jenkinsci/azure-keyvault-plugin/issues\">GitHub issues</a>.</p>\n</div>\n</div>\n</div>\n</div>","id":"479ec095-b427-5e47-95a5-1bca6fbc97c5","title":"Introducing the Azure Key Vault Credentials Provider for Jenkins","date":"2020-03-30T00:00:00.000Z","slug":"/blog/2020/03/30/azure-key-vault-cred-provider/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja/","twitter":"Tjaynz"}]}},"pageContext":{"id":"479ec095-b427-5e47-95a5-1bca6fbc97c5"}},
    "staticQueryHashes": ["1271460761","3649515864"]}