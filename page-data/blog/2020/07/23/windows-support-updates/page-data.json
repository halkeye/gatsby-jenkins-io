{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2020/07/23/windows-support-updates/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>In this article, I would like to announce the new <a href=\"/doc/administration/requirements/windows/\">Windows support policy</a>\nwhich was introduced in the Jenkins project in June 2020.\nThis policy sets an expectation about how we handle issues and patches related to Windows support for the Jenkins server and agents, and how we organize testing of Windows support in the project.\nWe will also talk about .NET Framework 2.0 support removal in <a href=\"/changelog/#v2.248\">Jenkins 2.248</a>,\nand about new Windows service management features and fixes Jenkins users get with this release.</p>\n</div>\n<div class=\"imageblock text-center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2020/07-windows-support-updates/header_image.png\" alt=\"header image\">\n</div>\n<div class=\"title\">Figure 1. Jenkins on Windows</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"why\"><a class=\"anchor\" href=\"#why\"></a>Why?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In theory, Jenkins can run everywhere where you can run Java 8 or Java 11, but, in practice, there are some limitations.\nThe Jenkins core and some plugins contain native code, and hence they rely on operating systems and platforms.\nWe use Java Native Access and Java Native Runtime libraries which provide wide platform support for low-level operations,\nbut there are platform-specific cases not covered by such generic libraries.\nIn the case of Windows platforms we use <a href=\"https://github.com/winsw/winsw\">Windows Service Wrapper (WinSW)</a> and\n<a href=\"https://github.com/kohsuke/winp\">Windows Process Management Library (WinP)</a>.\nThese libraries depend on particular Windows API versions and, in the case of Windows services, on .NET Framework.</p>\n</div>\n<div class=\"paragraph\">\n<p>Historically Jenkins had no documented support policy for Windows,\nand we were accepting patches for all versions which existed since the Hudson inception in 2004.\nIt became a serious obstacle for Windows component maintainers who had to be very conservative about incoming patches so that we could avoid breaking instances running on old platforms.\nLack of testing for older platforms did not help either.\nAnd it is not just about maintenance overhead.\nUsers were impacted as well, because it blocked us from adopting some new Windows features and making Jenkins more stable/maintainable on modern platforms.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"new-policy\"><a class=\"anchor\" href=\"#new-policy\"></a>New policy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To set proper expectations about Windows support,\nin the new policy we defined four support levels.\nSee the <a href=\"/doc/administration/requirements/windows/\">Windows support policy page</a> for the actual information about the support levels and the supported platforms.\nThis blogpost captures the support state as of Jul 23, 2020:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Level 1 - Full Support</dt>\n<dd>\n<p>We run automated testing for these platforms, and we intend to timely fix the reported issues.\nThis support level includes 64-bit (amd-64) Windows Server versions with the latest GA update pack,\nand versions used in the official Jenkins server and agent Docker images.</p>\n</dd>\n<dt class=\"hdlist1\">Level 2 - Supported</dt>\n<dd>\n<p>We do not actively test these platforms, but we intend to keep compatibility.\nWe are happy to accept patches.\nThis support level includes 64-bit (amd64) Windows Server and Windows 10 versions generally supported by Microsoft.</p>\n</dd>\n<dt class=\"hdlist1\">Level 3 - Patches considered</dt>\n<dd>\n<p>The platforms are generally expected to work, but they may have limitations and extra requirements.\nWe do not test compatibility, and we may drop support if needed.\nWe will consider patches if they do not put Level 1/2 platforms at risk and if they do not create maintenance overhead.\nThis support level includes non-amd64 platforms like x86 (32-bit) and AArch64 (Arm).\nIt also applies to non-mainstream release lines like Windows Embedded, preview releases, and versions no longer supported by Microsoft.</p>\n</dd>\n<dt class=\"hdlist1\">Level 4 - Unsupported</dt>\n<dd>\n<p>These versions are known to be incompatible or to have severe limitations.\nWe do not support the listed platforms, and we will not accept patches.\nAt the moment this level applies to platforms released before 2008.</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>When the policy was introduced, there were questions raised about platforms listed in the <em>Level 3</em> support category.\nFirst of all, these platforms are still supported.\nUsers are welcome to run Jenkins on these platforms.\nWe recognize the importance of the platforms listed there, and we intend to keep compatibility with them.\nAt the same time, particular functionality may break there due to the lack of testing when we update Jenkins or upstream dependencies.\nIt may take a while until a fix is submitted by a user or contributor,\nbecause we do not maintain development environments for these platforms.\nBy setting a Level 3 support level, we want to set an explicit expectation about those limitations.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are interested in expanding the official Windows support policy and adding more platforms there,\nwe invite you to participate in <a href=\"/participate/test/\">quality assurance of Jenkins</a>.\nYou may contribute by expanding test automation for Jenkins,\ncontributing test environments for your platforms,\nor participating in the <a href=\"/download/lts/\">LTS release candidate testing</a> and reporting results.\nPlease contact us via <a href=\"/sigs/platform/\">Platform SIG</a> channels if you are interested.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"windows-service-management-changes-in-jenkins-2-248\"><a class=\"anchor\" href=\"#windows-service-management-changes-in-jenkins-2-248\"></a>Windows Service Management changes in Jenkins 2.248</h2>\n<div class=\"sectionbody\">\n<div class=\"imageblock right\">\n<div class=\"content\">\n<img src=\"/images/post-images/2020/07-windows-support-updates/winsw-logo.png\" alt=\"winsw logo\" width=\"224px\">\n</div>\n<div class=\"title\">Figure 2. WinSW Logo</div>\n</div>\n<div class=\"paragraph\">\n<p>Although the policy was introduced more than 1 month ago,\n<a href=\"/changelog/#v2.248\">Jenkins 2.248</a> is the first release where the new policy is applied.\nStarting from this release, we won&#8217;t support .NET Framework 2.0 for launching the Jenkins server or agents as Windows services.\n .NET Framework 4.0 or above is now required for using the default service management features.</p>\n</div>\n<div class=\"paragraph\">\n<p>This release also upgrades <a href=\"https://github.com/winsw/winsw\">Windows Service Wrapper (WinSW)</a> from 2.3.0 to 2.9.0 and replaces the bundled binary from .NET Framework 2.0 to 4.0.\nThere are many improvements and fixes in these versions,\nbig thanks to <a href=\"https://github.com/NextTurn\">NextTurn</a> and all other contributors.\nYou can find the full WinSW changelog <a href=\"https://github.com/winsw/winsw/releases\">here</a>,\njust a few highlights important to Jenkins users:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Prompt for permission elevation when administrative access is required.\nNow Jenkins users do not need to run the agent process as Administrator to install the agent as a service from GUI.</p>\n</li>\n<li>\n<p>Enable TLS 1.1/1.2 in .NET Framework 4.0 packages on Windows 7 and Windows Server 2008 R2.</p>\n</li>\n<li>\n<p>Enable strong cryptography when running .NET Framework 4.0 binaries on .NET 4.6.</p>\n</li>\n<li>\n<p>Support security descriptor string in the Windows service definition.</p>\n</li>\n<li>\n<p>Support 'If-Modified-Since' and proxy settings for automatic downloads.</p>\n</li>\n<li>\n<p>Fix Runaway Process Killer extension so that it does not kill wrong processes with the same PID on startup.</p>\n</li>\n<li>\n<p>Fix the default domain name in the <code>serviceaccount</code> parameter (jira:JENKINS-12660[])</p>\n</li>\n<li>\n<p>Fix archiving of old logs in the <code>roll-by-size-time</code> mode.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>As you may see, there are many improvements available with this version,\nand we hope that it will make Windows service installation even more reliable.\nSome of the changes in WinSW also replaced old workarounds in the Jenkins core,\nmaking the code more maintainable.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"use-cases-affected-by-net-framework-2-0-support-removal\"><a class=\"anchor\" href=\"#use-cases-affected-by-net-framework-2-0-support-removal\"></a>Use-cases affected by .NET Framework 2.0 support removal</h3>\n<div class=\"paragraph\">\n<p>If you use .NET Framework 2.0 to run the Jenkins Windows services,\nthe following use-cases are likely to be affected:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Installing the Jenkins server as a Windows service from Web UI.\nThe official MSI Installer supports .NET Framework 2.0 for the moment, but it will be changed in future versions.</p>\n</li>\n<li>\n<p>Installing agents as Windows services from GUI.\nThis feature is provided by in <a href=\"https://github.com/jenkinsci/windows-slave-installer-module\">Windows Agent Installer Module</a> from the Jenkins core.</p>\n</li>\n<li>\n<p>Installing agents over Windows Management Instrumentation (WMI) via the <a href=\"https://plugins.jenkins.io/windows-slaves\">WMI Windows Agents</a> plugin</p>\n</li>\n<li>\n<p>Auto-updating of Windows service wrappers on agents installed from GUI.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"upgrade-guidelines\"><a class=\"anchor\" href=\"#upgrade-guidelines\"></a>Upgrade guidelines</h3>\n<div class=\"paragraph\">\n<p>If all of your Jenkins server and agent instances already use .NET Framework 4.0 or above,\nthere are no special upgrade steps required.\nPlease enjoy the new features!</p>\n</div>\n<div class=\"paragraph\">\n<p>If you run the Jenkins server as a Windows Service with .NET Framework 2.0,\nthis instance will require an upgrade of .NET Framework to version 4.0 or above.\nWe recommend running with .NET Framework 4.6.1 or above,\nbecause this .NET version provides many platform features by default\n(e.g. TLS 1.2 encryption and strong cryptography),\nand Windows Service Wrapper does not have to apply custom workarounds.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to continue running some of your agents with .NET Framework 2.0,\nthe following extra upgrade steps are required:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Disable auto-upgrade of Windows Service Wrapper on agents by setting the\n<code>-Dorg.jenkinsci.modules.windows_slave_installer.disableAutoUpdate=true</code> flag on the Jenkins server side.</p>\n</li>\n<li>\n<p>Upgrade agents with .NET Framework 4.0+ by downloading the recent Windows Service Wrapper 2.x\nversion from <a href=\"https://github.com/winsw/winsw/releases\">WinSW GitHub Releases</a>\nand manually replacing the wrapper \".exe\" files in the agent workspaces.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"whats-next\"><a class=\"anchor\" href=\"#whats-next\"></a>What&#8217;s next?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We plan to continue expanding the Windows support in Jenkins,\nincluding providing official Docker images for newer Windows versions.\nFor example, there is already a <a href=\"https://github.com/jenkinsci/docker-agent/pull/145\">pull request</a> which will introduce official agent images for Windows Server Core LTSC 2019 and\nfor Windows Server Core and Nano Server 1909.\nWe are also interested to keep expanding test coverage for Windows platforms.\nAny contributions and feedback will be appreciated!</p>\n</div>\n<div class=\"paragraph\">\n<p>We also keep working on improving Windows Services.\n<a href=\"/blog/authors/buddhikac96\">Buddhika Chathuranga</a>, a Google Summer of Code 2020 student, is working on support for YAML Configurations in Windows Service Wrapper,\nand on better verification of XML and YAML Configurations.\nSee the details on the <a href=\"/projects/gsoc/2020/projects/winsw-yaml-configs/\">project page</a> and in the\n<a href=\"/blog/2020/07/08/winsw-yaml-support/\">Coding Phase 1 Report</a>.\nIn addition to that, there is ongoing work on a new <a href=\"https://github.com/winsw/winsw/tree/v3\">Windows Service Wrapper 3.0</a> release which will redesign CLI and introduce a lot more improvements.\nIf you are interested in contributing to Windows Service Wrapper,\nsee the guidelines <a href=\"https://github.com/winsw/winsw/blob/master/CONTRIBUTING.md\">here</a>.\nWe will also appreciate your feedback on the <a href=\"https://gitter.im/winsw/winsw\">WinSW Gitter channel</a>.</p>\n</div>\n</div>\n</div>","id":"fd686e1c-3df7-5236-8624-f2cd50ed3461","title":"Jenkins 2.248: Windows Support Updates","date":"2020-07-23T00:00:00.000Z","slug":"/blog/2020/07/23/windows-support-updates/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},"pageContext":{"next":"/blog/2020/07/24/external-fingerprint-storage-phase-2/","previous":"/blog/2020/07/15/xss-severity/","id":"fd686e1c-3df7-5236-8624-f2cd50ed3461"}},
    "staticQueryHashes": ["1271460761","3649515864"]}