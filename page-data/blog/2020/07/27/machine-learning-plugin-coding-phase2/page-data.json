{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2020/07/27/machine-learning-plugin-coding-phase2/",
    "result": {"data":{"blog":{"html":"<div class=\"imageblock text-center\">\n<div class=\"content\">\n<img src=\"/images/gsoc/jenkins-gsoc-logo_small.png\" alt=\"jenkins gsoc logo small\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Welcome back folks!</p>\n</div>\n<div class=\"paragraph\">\n<p>This blog post is about my coding phase 2 in Jenkins <a href=\"/projects/gsoc/2020/projects/machine-learning/\">Machine Learning Plugin</a> for this GSoC 2020.\nAfter successfully passing the evaluation and demo in the phase 1, our team went ahead for facing the challenges in phase 2.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\"></a>Summary</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This phase of coding was well spent by documentation and by fixing many bugs.\nAs the main feature of connecting to an IPython Kernel is done in phase 1, we were able to focus on fixing minor/major bugs and documenting for the users.\nAccording to the <a href=\"https://issues.jenkins.io/browse/JENKINS-62927\">JENKINS-62927</a> issue, a Docker agent was built to facilitate users without concerning plugin dependencies in python.\nIn the act of deprecation of Python 2, we ported our plugin to support Python 3.\nWe have tested our plugin in Conda, venv and Windows environments.\nMachine learning plugin has successfully passed the end to end test. A feature for a code editor is needed for further discussion/analysis as we have done a simple editor that may be useful in other ways in the future. <a href=\"https://github.com/jenkinsci/machine-learning-plugin/pull/35\">PR#35</a></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"main-features-of-machine-learning-plugin\"><a class=\"anchor\" href=\"#main-features-of-machine-learning-plugin\"></a>Main features of Machine Learning plugin</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Run Jupyter notebook, (Zeppelin) JSON and Python files</p>\n</li>\n<li>\n<p>Run Python code directly</p>\n</li>\n<li>\n<p>Convert Jupyter Notebooks to Python and JSON</p>\n</li>\n<li>\n<p>Configure IPython kernel properties</p>\n</li>\n<li>\n<p>Support to execute Notebooks/Python on Agent</p>\n</li>\n<li>\n<p>Support for Windows and Linux</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"upcoming-features\"><a class=\"anchor\" href=\"#upcoming-features\"></a>Upcoming features</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Extract graph/map/images from the code</p>\n</li>\n<li>\n<p>Save artifacts according to the step name</p>\n</li>\n<li>\n<p>Generate reports for corresponding build</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"future-improvements\"><a class=\"anchor\" href=\"#future-improvements\"></a>Future improvements</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Usage of JupyterRestClient</p>\n</li>\n<li>\n<p>Support for multiple language kernels</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Note : There is no commitment on future improvements during GSoC period</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"sect2\">\n<h3 id=\"docker-agent\"><a class=\"anchor\" href=\"#docker-agent\"></a>Docker agent</h3>\n<div class=\"paragraph\">\n<p>The following Dockerfile can be used to build the Docker container as an agent for the Machine Learning plugin. This docker agent can be used to run  notebooks or python scripts.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>FROM jenkins/agent:latest\n\nMAINTAINER Loghi &lt;loghijiaha@gmail.com&gt;\n\nUSER root\n\nRUN apt update &amp;&amp; apt install --no-install-recommends python3 -y \\\n    python3-pip \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.txt /requirements.txt\n\nRUN pip3 install --upgrade pip setuptools &amp;&amp; \\\n    pip3 install --no-cache-dir -r /requirements.txt &amp;&amp; \\\n    ln -sf /usr/bin/python3 /usr/bin/python &amp;&amp; \\\n    ln -sf /usr/bin/pip3 /usr/bin/pip\n\nUSER jenkins</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"ported-to-python-3\"><a class=\"anchor\" href=\"#ported-to-python-3\"></a>Ported to Python 3</h3>\n<div class=\"paragraph\">\n<p>As discussed in the previous meeting, we concluded that the plugin should support Python 3 as Python 2.7+ has been deprecated since the beginning of 2020. Pull request for docker agent should be also ported to Python 3 support.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"jupyter-rest-client-api\"><a class=\"anchor\" href=\"#jupyter-rest-client-api\"></a>Jupyter Rest Client API</h3>\n<div class=\"paragraph\">\n<p>The Jupyter Notebook server API seemed to be promising that it can be also used to run notebooks and codes. There were 3 api implementations that were merged in the master. But we had to focus on what was proposed in the design document and had to finish all must-have issues/works. Jupyter REST client was left for future implementation. It is also a good start to contribute to the plugin from the community.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"fixed-bugs-for-running-in-agent\"><a class=\"anchor\" href=\"#fixed-bugs-for-running-in-agent\"></a>Fixed bugs for running in agent</h3>\n<div class=\"paragraph\">\n<p>There were a few bugs related to the file path of notebooks while building a job. The major problem was caused by the python dependencies needed to connect to a IPython kernel. All issues/bugs were fixed before the timeline given.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"r-support-as-a-future-improvement\"><a class=\"anchor\" href=\"#r-support-as-a-future-improvement\"></a>R support as a future improvement</h3>\n<div class=\"paragraph\">\n<p>This is what we tried to give a glimpse of knowledge that this plugin can be extended for multi language support in the future. There was a conclusion that the kernel should be selected dynamically using extension of the script file(like <code>eval_model.rb</code> or <code>train_model.r</code>), instead of scripting the same code for each kernel.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"documentation-and-end-to-end-testing\"><a class=\"anchor\" href=\"#documentation-and-end-to-end-testing\"></a>Documentation and End to End testing</h3>\n<div class=\"paragraph\">\n<p>A well explained documentation was published in the repository. A guided tutorial to run a notebook checked out from a git repo in an agent was included in the <a href=\"https://github.com/jenkinsci/machine-learning-plugin/blob/master/docs/ML-docker-agent.adoc\">docs</a> page. Mentors helped to test our plugin in both Linux and Windows.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"code-editor-with-rebuild-feature\"><a class=\"anchor\" href=\"#code-editor-with-rebuild-feature\"></a>Code editor with rebuild feature</h3>\n<div class=\"paragraph\">\n<p>Code editor was filtered as a nice to have feature in the design document. After grabbing the idea of Jenkinsfile replay editor, I could do the same for the code. At the same time, when we are getting the source code from git, it is not an elegant way of editing code in the original code. After the discussion, we had to leave the PR open that may have use cases in the future if needed.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"jenkins-lts-update\"><a class=\"anchor\" href=\"#jenkins-lts-update\"></a>Jenkins LTS update</h3>\n<div class=\"paragraph\">\n<p>The plugin has been updated to support Jenkins LTS 2.204.1 as 2.164.3 had some problems with installing pipeline supported API/plugin</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"installation-for-experimental-version\"><a class=\"anchor\" href=\"#installation-for-experimental-version\"></a>Installation for experimental version</h2>\n<div class=\"sectionbody\">\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Enable the <a href=\"/doc/developer/publishing/releasing-experimental-updates/#using-the-experimental-update-center\">experimental update center</a></p>\n</li>\n<li>\n<p>Search for <code>Machine Learning Plugin</code> and check the box along it.</p>\n</li>\n<li>\n<p>Click on <code>Install without restart</code></p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>The plugin should now be installed on your system.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"resources\"><a class=\"anchor\" href=\"#resources\"></a>Resources</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"/blog/2020/06/03/machine-learning-plugin-community-bonding/\">Community Bonding blog post</a></p>\n</li>\n<li>\n<p><a href=\"/blog/2020/06/30/machine-learning-plugin-coding-phase1/\">Phase 1 blog post</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkinsci/machine-learning-plugin.git\">Github</a></p>\n</li>\n<li>\n<p><a href=\"/projects/gsoc/2020/projects/machine-learning/\">Project page</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.google.com/document/d/10FjktNmWpdjgbGg3tEViadV_JNevn9W0sMOu-bF8m-o/edit?usp=sharing\">Design document</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","id":"0b676e9e-8bca-5401-ad70-50c30452b445","title":"Machine Learning Plugin project - Coding Phase 2 blog post","date":"2020-07-27T00:00:00.000Z","slug":"/blog/2020/07/27/machine-learning-plugin-coding-phase2/","links":{"discourse":""},"authors":[]}},"pageContext":{"next":"/blog/2020/07/27/repository-signing-keys-changing/","previous":"/blog/2020/07/27/custom-distribution-service/","id":"0b676e9e-8bca-5401-ad70-50c30452b445"}},
    "staticQueryHashes": ["1271460761","3649515864"]}