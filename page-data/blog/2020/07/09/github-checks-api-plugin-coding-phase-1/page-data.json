{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2020/07/09/github-checks-api-plugin-coding-phase-1/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>This blog post is about our coding phase 1 progress on GSoC project: <a href=\"/projects/gsoc/2020/projects/github-checks/\">GitHub Checks API Plugin</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The GitHub Checks API is a highly customized way to integrate CI tools to make reports for pull-requests (PRs).\nIt allows users to see CI reports on GitHub pages directly.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2020/07-github-checks-api-plugin-coding-phase-1/github-check-run.png\" alt=\"github check run\">\n</div>\n<div class=\"title\">Figure 1. GitHub Check Run Screenshot from GitHub Docs</div>\n</div>\n<div class=\"paragraph\">\n<p>What&#8217;s more exciting is that it can leave annotations on specific lines of code, just as the comments people left while reviewing.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2020/07-github-checks-api-plugin-coding-phase-1/github-check-annotations.png\" alt=\"github check annotations\">\n</div>\n<div class=\"title\">Figure 2. Check Run Annotation Screenshot from GitHub Docs</div>\n</div>\n<div class=\"paragraph\">\n<p>While on Jenkins' side, the source code view provided by <a href=\"https://plugins.jenkins.io/warnings-ng/\">Warnings Next Generation Plugin</a> does pretty much the same thing.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2020/07-github-checks-api-plugin-coding-phase-1/source-view.png\" alt=\"source view\">\n</div>\n<div class=\"title\">Figure 3. Source Code View from Warnings Next Generation Plugin</div>\n</div>\n<div class=\"paragraph\">\n<p>Utilizing such features through GitHub Checks API, it would make Jenkins more convenient to GitHub users.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"features-from-coding-phase-1\"><a class=\"anchor\" href=\"#features-from-coding-phase-1\"></a>Features from Coding Phase 1</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In the past month, our team was mostly working on the general checks API and an implementation for GitHub checks API.</p>\n</div>\n<div class=\"videoblock\">\n<div class=\"title\">GitHub Checks API Plugin Demo [starts from 50:15]</div>\n<div class=\"content\">\n<iframe width=\"800\" height=\"420\" src=\"https://www.youtube.com/embed/HQLhakpx5mk?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"general-checks-api\"><a class=\"anchor\" href=\"#general-checks-api\"></a>General Checks API</h3>\n<div class=\"paragraph\">\n<p>Although the general checks API is developed based on the semantic meaning of GitHub Checks API, we still want to prepare it for similar concepts on other platforms like <a href=\"https://docs.gitlab.com/ee/api/commits.html#commit-status\">Commit Status API</a> from GitLab.\nContributions for implementations on these platforms will be welcomed in the future.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"github-checks-api-implementation\"><a class=\"anchor\" href=\"#github-checks-api-implementation\"></a>GitHub Checks API Implementation</h3>\n<div class=\"paragraph\">\n<p>Our work on supporting GitHub Checks API is mostly done by now.\nBesides, we implemented a consumer to automatically create a check run that simply indicates the current stage of a Jenkins build.\nAfter the release, Jenkins developers (especially publisher plugin ones) can create their own GitHub checks for a GitHub branch source project by consuming our API.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Example:</strong> To create a check run like:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2020/07-github-checks-api-plugin-coding-phase-1/created-check-run.png\" alt=\"Created Check Run\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Consumers need to use our API in this way:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-java\" data-lang=\"java\">ChecksDetails details = new ChecksDetailsBuilder()\n        .withName(\"Jenkins\")\n        .withStatus(ChecksStatus.COMPLETED)\n        .withDetailsURL(\"https://ci.jenkins.io\")\n        .withStartedAt(LocalDateTime.now(ZoneOffset.UTC))\n        .withCompletedAt(LocalDateTime.now(ZoneOffset.UTC))\n        .withConclusion(ChecksConclusion.SUCCESS)\n        .withOutput(new ChecksOutputBuilder()\n                .withTitle(\"Jenkins Check\")\n                .withSummary(\"# A Successful Build\")\n                .withText(\"## 0 Failures\")\n                .withAnnotations(Arrays.asList(\n                        new ChecksAnnotationBuilder()\n                                .withPath(\"Jenkinsfile\")\n                                .withLine(1)\n                                .withAnnotationLevel(ChecksAnnotationLevel.NOTICE)\n                                .withMessage(\"say hello to Jenkins\")\n                                .withStartColumn(0)\n                                .withEndColumn(20)\n                                .withTitle(\"Hello Jenkins\")\n                                .withRawDetails(\"a simple echo command\")\n                                .build(),\n                        new ChecksAnnotationBuilder()\n                                .withPath(\"Jenkinsfile\")\n                                .withLine(2)\n                                .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n                                .withMessage(\"say hello to GitHub Checks API\")\n                                .withStartColumn(0)\n                                .withEndColumn(30)\n                                .withTitle(\"Hello GitHub Checks API\")\n                                .withRawDetails(\"a simple echo command\")\n                                .build()))\n                .build())\n        .withActions(Collections.singletonList(\n                new ChecksAction(\"formatting\", \"format code\", \"#0\")))\n        .build();\n\nChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\npublisher.publish(details);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"future-works\"><a class=\"anchor\" href=\"#future-works\"></a>Future Works</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The next step is integrating our API into <a href=\"https://plugins.jenkins.io/warnings-ng/\">Warnings Next Generation Plugin</a> and <a href=\"https://plugins.jenkins.io/code-coverage-api/\">Code Coverage API Plugin</a> consume our API.\nAfter that, pipeline support will be added: users can publish checks directly in a pipeline script without requiring a consumer plugin that support the checks.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"resources\"><a class=\"anchor\" href=\"#resources\"></a>Resources</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/jenkinsci/checks-api-plugin\">GitHub Repository</a></p>\n</li>\n<li>\n<p><a href=\"/projects/gsoc/2020/projects/github-checks/\">Project Page</a></p>\n</li>\n<li>\n<p><a href=\"https://gitter.im/jenkinsci/github-checks-api\">Gitter Channel</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"references\"><a class=\"anchor\" href=\"#references\"></a>References</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://docs.github.com/en/developers/apps/creating-ci-tests-with-the-checks-api\">GitHub Doc: Creating CI tests with the Checks API</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md#source-code-view\">Warnings Next Generation Plugin: Source Code View</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","id":"f26945c7-7d59-55b5-84e1-9d4e82638d84","title":"GitHub Checks API Plugin Project - Coding Phase 1","date":"2020-07-09T00:00:00.000Z","slug":"/blog/2020/07/09/github-checks-api-plugin-coding-phase-1/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"XiongKezhi","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 Student. Kezhi is an open source enthusiast who enjoys sharing ideas with other developers. He started contributing to Jenkins in March 2020. Currently, he is working on <a href=\"https://github.com/XiongKezhi/checks-api-plugin\">GitHub Checks API Plugin</a>.</p>\n</div>","id":"XiongKezhi","irc":null,"linkedin":"kezhi-xiong-44234a188","name":"Kezhi Xiong","slug":"blog/author/xiongkezhi","twitter":"AugustX_"}]}},"pageContext":{"next":"/blog/2020/07/15/xss-severity/","previous":"/blog/2020/07/09/git-performance-improvement-phase1/","id":"f26945c7-7d59-55b5-84e1-9d4e82638d84"}},
    "staticQueryHashes": ["1271460761","3649515864"]}