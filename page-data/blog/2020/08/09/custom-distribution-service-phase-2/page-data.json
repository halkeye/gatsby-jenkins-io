{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2020/08/09/custom-distribution-service-phase-2/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>Hello everyone,\nIt is time to wrap up another successfull phase for the <a href=\"https://github.com/jenkinsci/custom-distribution-service\">custom distribution service project</a>,\nand we have incorporated most of the features that we had planned at the start of the phase.\nIt has been an immense learning curve for me and the entire team.</p>\n</div>\n<div class=\"paragraph\">\n<p>To understand what the project is about and the past progress, please refer to the phase one blogpost\n<a href=\"/blog/2020/07/27/custom-distribution-service/\">here</a>.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"front-end\"><a class=\"anchor\" href=\"#front-end\"></a>Front-End</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"filters-for-plugins\"><a class=\"anchor\" href=\"#filters-for-plugins\"></a>Filters for Plugins</h3>\n<div class=\"paragraph\">\n<p>In the previous phase we implemented the ability to add plugins to the configuration,\nand the ability to search these plugins via a search bar.\nSometimes though we would like to filter these plugins based on their usage,\npopularity, stars etc. Hence we have added a certain set of filters to these plugins.\nWe support only four major filters for now. They are:</p>\n</div>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>Title</p>\n</li>\n<li>\n<p>Most installed</p>\n</li>\n<li>\n<p>Relevance</p>\n</li>\n<li>\n<p>Trending</p>\n</li>\n</ol>\n</div>\n<div class=\"sect3\">\n<h4 id=\"filter-implementation\"><a class=\"anchor\" href=\"#filter-implementation\"></a>Filter implementation</h4>\n<div class=\"paragraph\">\n<p>The major heavy lifting is done by the plugin api which takes in the necessary parameters\nand returns the relevant plugins in the form of a json object,\nhere is an example of the api call url: <code>const url = <a href=\"https://plugins.jenkins.io/api/plugins?$params\" class=\"bare\">https://plugins.jenkins.io/api/plugins?$params</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>For details, see:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Feature request <a href=\"https://github.com/jenkinsci/custom-distribution-service/issues/9\">#9</a></p>\n</li>\n<li>\n<p>Pull Request <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/76\">#76</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"community-configurations\"><a class=\"anchor\" href=\"#community-configurations\"></a>Community Configurations</h3>\n<div class=\"paragraph\">\n<p>One major deliverable for the project was the ability for users to share the configurations developed by them, so that they can be used widely within the community.\nFor example we see quite a lot of jenkins configurations involve being run on AWS and kubernetes and so on. Therefore it would be really good for the community to have a place to find and run\nthese configurations right out of the box.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/gsoc-custom-jenkins-service-distribution/comm-config.png\" alt=\"community-config\" width=\"938\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"design-decision\"><a class=\"anchor\" href=\"#design-decision\"></a>Design Decision</h3>\n<div class=\"paragraph\">\n<p>The major design decision taken here was whether to include the configurations inside\nthe repository or to have them in a completely new repository.\nLet us talk about both these approaches.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"having-the-configurations-in-the-current-repository\"><a class=\"anchor\" href=\"#having-the-configurations-in-the-current-repository\"></a>Having the configurations in the current repository:</h4>\n<div class=\"paragraph\">\n<p>This allows us to have all of the relevant configurations inside the repository itself,\nand so users would not have to go fetch this in different repositories.\nWe could have issues with the release cycle and dependencies since,\nit would have to happen along with the custom distribution service project releases.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"having-the-configurations-in-a-different-repository\"><a class=\"anchor\" href=\"#having-the-configurations-in-a-different-repository\"></a>Having the configurations in a different repository:</h4>\n<div class=\"paragraph\">\n<p>This allows us to manage all of the configurations and the relevant dependencies separately and easily,\nthus avoiding any release conflict with the current repository.\nHowever it would be a bit difficult if users were to not find this repository.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Decision</strong> : We still cannot quite agree on what is the best method so for now,\nI have included the url from which the community configurations are picked up as a\nconfiguration variable in the <strong>.env</strong> file which can be configured later and\ntherefore it can be up to the user to configure. Another advantage of having it configurable,\nis that the user can decide to load configurations which are private to his organization as well.</p>\n</div>\n<div class=\"paragraph\">\n<p>For details, see:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Issue <a href=\"https://github.com/jenkinsci/custom-distribution-service/issues/6161\">#6161</a></p>\n</li>\n<li>\n<p>Pull Request <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/73\">#73</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"back-end\"><a class=\"anchor\" href=\"#back-end\"></a>Back-End</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"war-generation\"><a class=\"anchor\" href=\"#war-generation\"></a>War Generation</h3>\n<div class=\"paragraph\">\n<p>The ability to generate and download war files has finally been achieved,\nthe reason this feature took so long to complete is because we had some difficulty\nin implementing the war generation and its tests. However this has been completed\nand can now be tested successfully.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"things-to-take-care-while-generating-war-files\"><a class=\"anchor\" href=\"#things-to-take-care-while-generating-war-files\"></a>Things to take care while generating war files</h4>\n<div class=\"paragraph\">\n<p>In its current state the war generation cannot include <strong>casc.yml</strong> or <strong>groovy</strong> files\nif they are included in the configuration they would have to be added externally.\nThere is an issue opened <a href=\"https://github.com/jenkinsci/custom-distribution-service/issues/117\">here</a>.\nThe war file generation would yell at you if you tried to build a war file with a jcasc file configuration.</p>\n</div>\n<div class=\"paragraph\">\n<p>For details, see:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Issue <a href=\"https://github.com/jenkinsci/custom-distribution-service/issues/60\">#60</a></p>\n</li>\n<li>\n<p>Pull Request <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/68\">#68</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"pull-request-creation\"><a class=\"anchor\" href=\"#pull-request-creation\"></a>Pull Request Creation</h3>\n<div class=\"paragraph\">\n<p>This feature was included in the design document that I created after my GSoC selection.\nIt involves the ability to create pull requests via the front-end of the service.\nThe User Story behind this feature was that <strong>If I want to share a configuration with the community and I do not quite know how to use github or I do not want to do it via the terminal</strong>.\nThis feature includes creation of a bot that handles the creation of pull requests in the repository.\nThis bot would have to be installed by the jenkins organization in this repository and the bot would handle the rest.</p>\n</div>\n<div class=\"paragraph\">\n<p>For details, see:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Issue <a href=\"https://github.com/jenkinsci/custom-distribution-service/issues/59\">#59</a></p>\n</li>\n<li>\n<p>Pull Request <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/72\">#72</a></p>\n</li>\n</ul>\n</div>\n<div class=\"sect3\">\n<h4 id=\"disclaimer\"><a class=\"anchor\" href=\"#disclaimer\"></a>Disclaimer:</h4>\n<div class=\"paragraph\">\n<p>This feature has however been put on the back-burner for now because\nwe are focusing on getting the project to be self hosted and therefore\nwould like to implement this once we have a clear path for the project to be hosted by the jenkins-infra team.If you would like to participate in the discussion here are the links for the pull requests,\n<a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/72\">PR 1</a> and link: <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/66\">PR 2</a>, or you can even jump in our <a href=\"https://gitter.im/jenkinsci/jenkins-custom-distribution-service\">gitter channel</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you have been following my posts,\nI mentioned in my second week blog post that pulling in the json file consisting of more than\n1600 plugins took a bit more time that my liking.\nWe managed to solve that issue using a caching mechanism,\nso now the files are pulled in the first time you start the service and downloaded in a temporary folder. The next time you want to view the plugin cards they are pulled in directly from the temp directory <strong>bam !</strong> thereby reducing time.</p>\n</div>\n<div class=\"paragraph\">\n<p>For details see Pull Request <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/90\">#90</a></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"fixes-and-improvements\"><a class=\"anchor\" href=\"#fixes-and-improvements\"></a>Fixes and improvements</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"port-8080\"><a class=\"anchor\" href=\"#port-8080\"></a>Port 8080</h3>\n<div class=\"paragraph\">\n<p>Port 8080 now does have a message instead of a whitelabel error message which is present\nby default in the spring-boot tomcat server setup.\nTurns out it requires overriding a particular class, and inserting a custom message</p>\n</div>\n<div class=\"paragraph\">\n<p>For details, see:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Pull Request <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/92\">#92</a></p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"war-generation-2\"><a class=\"anchor\" href=\"#war-generation-2\"></a>War Generation</h3>\n<div class=\"paragraph\">\n<p>Till now while you were generating the war file,\nif something went wrong during genration the service would not complain it would just swallow the error and throw back a corrupted <strong>war</strong> file,\nhowever now we have added an error support feature\nthat will alert you when something goes wrong, the error is not very informative as of now,\nbut we are working on making it more informative in the future.</p>\n</div>\n<div class=\"paragraph\">\n<p>For details, see:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>War generation error handling <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/91\">#91</a></p>\n</li>\n<li>\n<p>Add Github controller and jwt helper <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/66\">#66</a></p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"dockerfile\"><a class=\"anchor\" href=\"#dockerfile\"></a>Dockerfile</h3>\n<div class=\"paragraph\">\n<p>One of the major milestones of this phase was to have a project that can be self hosted,\nneedless to say we needed the dockerfile i.e docker-compose.yml to spin the project with a few commands.\nThe major issue we faced here was that there was a bit of a problem making the two containers talk to each other. Let me give you a little bit of context here.\nOur docker-compose is constructed using two separate dockerfiles one for the backend of the service and the other for the front-end.\nThe backend makes api calls to the front-end via the proxy url i.e localhost:8080.\nWe now had to change this since the network bridge between the two containers spoke to each other via the backend-server name i.e <strong>app-server</strong>.\nTo brige that gap we have this PR that ensured that the docker compose works flawlessly.</p>\n</div>\n<div class=\"paragraph\">\n<p>For details, see:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Pull Request <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/82\">#82</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>However there is a minor draw-back of the above approach was now the entire\nproject just relied on the docker compose and could not run using the simple\ncombination of <strong>npm</strong> and <strong>maven</strong> since the proxy was different.\nIn order to fix this I decided to follow a multiple environment approach,\nwhere we have multiple environment files that pick up the correct proxy and insert it at build time,\nto elaborate further we have two environment files,\n(using the env-cmd library ) <strong>.env</strong> and the <strong>docker.env</strong> and we insert,\nthe correct file depending on how you want to build the project.\nFor instance if you want to run it using the dockerfile the command that is run under the hood is something along these lines&#8201;&#8212;&#8201;<strong>npm --env-cmd -f docker.env start scripts</strong>.</p>\n</div>\n<div class=\"paragraph\">\n<p>For details, see:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Pull Request <a href=\"https://github.com/jenkinsci/custom-distribution-service/pull/88\">#88</a></p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"other-links\"><a class=\"anchor\" href=\"#other-links\"></a>Other links</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://gitter.im/jenkinsci/jenkins-custom-distribution-service\">Gitter Channel Link</a><br>\n<a href=\"https://docs.google.com/document/d/1C7VQJ92Yhr0KRDcNVHYxn4ri7OL9IGZmgxY6UFON6-g/edit?usp=sharing\">GSoC Proposal</a><br>\n<a href=\"https://docs.google.com/document/d/1-ujWVJ2a5VYkUF6UA7m4bEpSDxmb3mJZhCbmoKO716U/edit?usp=sharing\">Design Document</a><br>\n<a href=\"https://docs.google.com/document/d/1DSCH-3wh6uV9Rm_j8PcBzq2lvQPhZ31AIwmWkEaLxvc/edit?usp=sharing\">Daily Notes</a><br>\n<a href=\"https://youtu.be/HQLhakpx5mk?t=547\">Demo</a></p>\n</div>\n</div>\n</div>\n</div>","id":"babe2cb7-b1f3-538d-a0da-40bd4f32b839","title":"Custom Distribution Service : Phase 2 Blogpost","date":"2020-08-09T00:00:00.000Z","slug":"/blog/2020/08/09/custom-distribution-service-phase-2/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/authors/sladyn98","twitter":"SladynN"}]}},"pageContext":{"next":"/blog/2020/08/12/windows-installers-upgrade/","previous":"/blog/2020/08/04/cdf-graduation/","id":"babe2cb7-b1f3-538d-a0da-40bd4f32b839"}},
    "staticQueryHashes": ["1271460761","3649515864"]}