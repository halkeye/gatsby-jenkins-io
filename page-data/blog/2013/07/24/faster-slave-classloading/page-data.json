{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2013/07/24/faster-slave-classloading/",
    "result": {"data":{"blog":{"html":"<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nhttps://en.wikipedia.org/wiki/Chloride[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Calcium_chloride_CaCl2.jpg/320px-Calcium_chloride_CaCl2.jpg[image]] +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">+\n+</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nJenkins comes with https://github.com/jenkinsci/remoting[the remoting library] that it uses to communicate between a controller and agents. This is a pretty awesome library, I think, which served us well. +\n +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nOne of the things this remoting layer does it to transfer the Java byte code on demand from the controller to agents on demand. This approach helps us keep agent deployment simple, as you don't have to keep the controller and all the agents in sync, but it also made the agent start-up slower, because none of the byte code loaded to agents are kept around. It was all forgotten once the agent gets disconnected. +\n +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nWhen agents are static and stays online for hours, this wasn't a problem at all. But as more and more agents become elastic (think EC2 or CloudBees DEV@cloud), This delay is becoming more and more noticeable. A similar issue happens when the Maven project type, which uses the same remoting library to talk to the running Maven build. +\n +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nAnother related performance bottleneck is the round-trip latency. When your agent is far away from a controller, every classloading would incur a network round-trip, and it can add up quickly. This is because Java classloading abstraction is funamentally chatty. +\n +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nJesse and I https://issues.jenkins.io/browse/JENKINS-15120[started seriously thinking about this problem] last year, and we've https://github.com/jenkinsci/remoting/pull/10[kept a branch going] to address this problem. +\n +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nAfter several trans-atlantic hacking during flights, we were finally able to release this in 1.519. +\n +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nStarting this version, the remoting layer uses a local jar file cache to store jar files that were downloaded from the controller. This pretty much eliminated the need to send class files over the wire. +\n +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nIn addition, the controller will analyze class files as a agent request them and \"push down\" information about how related other classes should be loaded by the agent. This speculative \"prefetching\" saves the agent from making an expensive network round trip to the controller. +\n +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nIn https://jenkins-ci.361315.n4.nabble.com/Efficient-class-jar-prefetching-in-remoting-td4665943.html[my benchmark using Maven builds, the prefetching cut the # of roundtrips to about half]. +\n +</pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre class=\"nowrap\"> +\nIf you do a lot of Maven builds, or if you have elastic agents, we highly encourage you to upgrade. +\n +\n +\n +\n +</pre>\n</div>\n</div>","id":"09e534e0-e44f-586f-90d1-da7658ecc78a","title":"Faster agent classloading","date":"2013-07-24T00:00:00.000Z","slug":"/blog/2013/07/24/faster-slave-classloading/","authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},"pageContext":{"id":"09e534e0-e44f-586f-90d1-da7658ecc78a"}},
    "staticQueryHashes": ["1271460761","3649515864"]}