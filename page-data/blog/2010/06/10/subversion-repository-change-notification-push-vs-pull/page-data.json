{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2010/06/10/subversion-repository-change-notification-push-vs-pull/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>People often configure <a href=\"https://en.wikipedia.org/wiki/Hudson%20%28software%29\">Hudson</a> to start a new build whenever a change is made to the repository. In fact, this is often considered central to the practice of continuous integration.</p>\n</div>\n<div class=\"paragraph\">\n<p>There are two ways to achieve this. One is the \"pull\" model, where Hudson periodically reaches out to a Subversion repository to see if there is any changes. The other is the \"push\" model, where you make the Subversion repository reach out to Hudson.</p>\n</div>\n<div class=\"paragraph\">\n<p>Both approaches have trade-offs. The pull model is easier to configure, since you can do this entirely from Hudson. But this comes at the expense of increased load to the Subversion server. Even though the overhead of Subversion polling is relatively low, as you add more projects to Hudson and increase the polling frequency, the overhead may get non-trivial (imagine the number of Hudson pollings that the poor <a href=\"https://java.net\">java.net</a> Subversion server gets, for example.) A more serious downside, in my opinion, is that this increases the delay from your commit to a build. For example, if your build just takes 5 mins, then even if you poll every minute, you pay on average 30 seconds delay before a build starts â€” a 10% overhead!</p>\n</div>\n<div class=\"paragraph\">\n<p>The push approach eliminates those two downsides, but it requires a post-commit hook configuration in the Subversion repository, which has to be done manually by the administrator, because those scripts are not exposed to external systems like Hudson.</p>\n</div>\n<div class=\"paragraph\">\n<p>With that said, if you do have an access to the Subversion repository post-commit hook, I highly recommend the push approach, and in Hudson we made it as easy as possible to configure the set up. Here&#8217;s the script you&#8217;ll need in your post-commit hook:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>REPOS=\"$1\" REV=\"$2\" UUID=\\`svnlook uuid $REPOS\\` /usr/bin/wget \\\n       --header \"Content-Type:text/plain;charset=UTF-8\" \\\n       --post-data \"\\`svnlook changed --revision $REV $REPOS\\`\" \\\n       --output-document \"-\" \\\n       https://server/hudson/subversion/${UUID}/notifyCommit?rev=$REV</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This script basically just tells Hudson that there was a change in a repository. Hudson will then check this information against all the jobs that have a polling configured, and schedule the builds accordingly. The beauty of this approach is two-folds:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The script doesn&#8217;t change when you add/remove/rename jobs.</p>\n</li>\n<li>\n<p>The overhead is constant regardless of the number of jobs.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>If you haven&#8217;t configured a push setup yet, now is the time to do so!</p>\n</div>","id":"47ba57bf-9dea-510b-9ec1-8e71951d4fd8","title":"Subversion repository change notification: push vs pull","date":"2010-06-10T00:00:00.000Z","slug":"/blog/2010/06/10/subversion-repository-change-notification-push-vs-pull/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},"pageContext":{"next":"/blog/2010/06/11/casual-fridays-directing-traffic-with-hudson/","previous":"/blog/2010/06/09/welcome-to-hudson-labs/","id":"47ba57bf-9dea-510b-9ec1-8e71951d4fd8"}},
    "staticQueryHashes": ["1271460761","3649515864"]}