{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2010/02/10/keeping-your-configuration-and-data-in-subversion/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>We all know that keeping important files in version control is critical, as it ensures problematic changes can be reverted and can serve as a backup mechanism as well. Code and resources are often kept in version control, but it can be easy to forget your continuous integration (CI) server itself! If a disk were to die or fall victim to a <a href=\"https://twitter.com/progrium/status/7646048501\">misplaced</a> <code>rm -rf</code>, you could lose all the history and configuration associated with the jobs your CI server manages.</p>\n</div>\n<div class=\"paragraph\">\n<p>It&#8217;s pretty simple to create a repository, but it isn&#8217;t obvious which parts of your $HUDSON_HOME you&#8217;ll want to backup. You&#8217;ll also want to have some automation so new projects get added to the repository, and deleted ones get removed. Luckily we have a great tool to handle this: Hudson!</p>\n</div>\n<div class=\"paragraph\">\n<p>We have a Hudson job which runs nightly, performs the appropriate SVN commands, and checks in. The high-level overview of this job is basically:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Add any new jobs, users, plugin configurations, et cetera: <code>svn add -q --parents <strong>.xml jobs/</strong>/config.xml users/<strong>/config.xml userContent/</strong></code></p>\n</li>\n<li>\n<p>Remove anything from SVN that no longer exists (such as a deleted job): <code>svn status | grep '!' | awk '{print $2;}' | xargs -r svn rm</code></p>\n</li>\n<li>\n<p>Check it in! <code>svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\"</code>\nYou&#8217;ll want to make sure to use the <code>--non-interactive</code> option for any automated svn operations, as this ensures Subversion won&#8217;t hang asking a question but instead fail immediately. You may also need to provide your password with the <code>--password</code> option.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>To make such a Hudson job, create a new job, tie it to the controller (since this is where the configuration files are), set it to build periodically (we use &#8220;@midnight&#8221;), and add an &#8220;Execute shell&#8221; build step. Here&#8217;s the full script we use, to put into the build step:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-bash\" data-lang=\"bash\"># Change into your HUDSON_HOME.\ncd /opt/hudson\n# Add any new conf files, jobs, users, and content.\nsvn add -q --parents *.xml jobs/*/config.xml users/*/config.xml userContent/*\n# Ignore things in the root we don't care about.\necho -e \"warnlogn*.logn*.tmpn*.oldn*.bakn*.jarn*.json\" &gt; myignores\nsvn propset svn:ignore -F myignores . &amp;&amp; rm myignores\n# Ignore things in jobs/* we don't care about.\necho -e \"buildsnlast*nnext*n*.txtn*.lognworkspace*ncoberturanjavadocnhtmlreportsnncoverndoclinks\" &gt; myignores\nsvn propset svn:ignore -F myignores jobs/* &amp;&amp; rm myignores\n# Remove anything from SVN that no longer exists in Hudson.\nsvn status | grep '!' | awk '{print $2;}' | xargs -r svn rm\n# And finally, check in of course, showing status before and after for logging.\nsvn st &amp;&amp; svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\" &amp;&amp; svn st</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You&#8217;ll notice this does some extra things like set the svn:ignores property to provide a relatively clean <code>svn st</code> which it shows before and after the commit for logging purposes. One thing this job <em>doesn&#8217;t</em> do is put the build results of your jobs in version control. Because historical build logs and artifacts will never change and are also potentially large, a periodic (daily or weekly) <code>cp</code> or <code>rsync</code> of the <strong>jobs</strong> directory will still give you restorability while keeping your repository lean.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now you can sleep well at night knowing that your CI server is safe and sound. If you are doing a similar thing with Hudson or another CI system, let us know about your solution!</p>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p><strong>Editor&#8217;s Note:</strong> <a href=\"https://twitter.com/MikeRooney\">Mike Rooney</a> is a Software Engineer at <a href=\"https://twitter.com/Genius_com\">Genius.com</a>, provider of real-time marketing automation software connecting marketing and sales. You can read more posts from Mike and other Geniuses at <a href=\"https://eng.genius.com\">eng.genius.com</a></p>\n</div>","id":"bf65fc5d-5128-5381-a704-e7da235ac78d","title":"Keeping your configuration and data in Subversion","date":"2010-02-10T00:00:00.000Z","slug":"/blog/2010/02/10/keeping-your-configuration-and-data-in-subversion/","links":{"discourse":""},"authors":[]}},"pageContext":{"next":"/blog/2010/02/11/spotlight-on-ita-software/","previous":"/blog/2010/02/09/whats-going-on-with-the-hudsons-infrastructure/","id":"bf65fc5d-5128-5381-a704-e7da235ac78d"}},
    "staticQueryHashes": ["1271460761","3649515864"]}