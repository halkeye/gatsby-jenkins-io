{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2021/04/21/tekton-plugin/",
    "result": {"data":{"blog":{"html":"<div class=\"sect1\">\n<h2 id=\"what-is-tekton\"><a class=\"anchor\" href=\"#what-is-tekton\"></a>What is Tekton?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><span class=\"image right\"><img src=\"/images/projects/tekton-client-plugin/logo.png\" alt=\"TektonLogo\" width=\"200\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://tekton.dev/\">Tekton</a> is a powerful and flexible open-source framework for creating CI/CD systems, allowing developers to build, test, and deploy across cloud providers and on-premises systems.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"why-use-tekton\"><a class=\"anchor\" href=\"#why-use-tekton\"></a>Why use Tekton?</h3>\n<div class=\"paragraph\">\n<p>Tekton pipelines have a number of benefits:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>they are cloud native and designed from the ground up for kubernetes</p>\n</li>\n<li>\n<p>each Tekton <code>Pipeline</code> is fully declarative and completely self described; it does not depend on any separate out of band Jenkins controllers, plugins or plugin/controller configurations</p>\n</li>\n<li>\n<p>each <code>Pipeline Task</code> runs as a stand alone kubernetes <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\">Pod</a> which is completely independent of any other pods and pipelines and are fully scheduled by Kubernetes to maximise resilience and optimize resource usage. A bad pipeline cannot take down another one &amp; the kubernetes scheduler manages them all</p>\n</li>\n<li>\n<p>each step can be any command in any container image with whatever secrets, volume mounts, environment variables and resource limits you need</p>\n</li>\n<li>\n<p>there is no need to bundle a JVM or Jenkins Remoting container into the pod so you can keep resources and cost down</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"why-use-jenkins-and-tekton-together\"><a class=\"anchor\" href=\"#why-use-jenkins-and-tekton-together\"></a>Why use Jenkins and Tekton together?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Jenkins is the most popular open source automation server around. Lots of developers use it every day to get things done.\nJenkins can now be used to automate <a href=\"https://tekton.dev/\">Tekton</a> pipelines too which helps teams digitally transform to more cloud native solutions for their CI and CD.\nIn such a case, you can use Tekton pipeline engine while getting all benefits from Jenkins as an orchestrator, user interface and the reporting engine.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"introducing-the-tekton-plugin-for-jenkins\"><a class=\"anchor\" href=\"#introducing-the-tekton-plugin-for-jenkins\"></a>Introducing the Tekton Plugin for Jenkins</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <a href=\"https://github.com/jenkinsci/tekton-client-plugin\">Tekton Client plugin for Jenkins</a> lets you easily use Jenkins to automate creating and running Tekton pipelines.\nIt bridges the Kubernetes learning gap and allows invoking Tekton Pipelines and resources through Jenkins.\nThis allows users to not have much of the Kubernetes specific knowledge beforehand and work.</p>\n</div>\n<div class=\"paragraph\">\n<p>Its a single Jenkins plugin to install - so it&#8217;s easy to use.</p>\n</div>\n<div class=\"paragraph\">\n<p>For background check out the  blog post <a href=\"https://cd.foundation/blog/2020/11/05/bridging-the-gap-with-tekton-client-plugin-for-jenkins/\">Bridging the Gap with Tekton-client-plugin for Jenkins</a> by the founder of the plugin <a href=\"https://github.com/waveywaves\">Vibhav Bobade</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"requirements\"><a class=\"anchor\" href=\"#requirements\"></a>Requirements</h3>\n<div class=\"paragraph\">\n<p>The <a href=\"https://github.com/jenkinsci/tekton-client-plugin\">Tekton Client plugin for jenkins</a> assumes you have access to a kubernetes cluster.</p>\n</div>\n<div class=\"paragraph\">\n<p>The kubernetes cluster should have <a href=\"https://tekton.dev/\">Tekton pipelines</a> installed.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you have not yet installed <a href=\"https://tekton.dev/\">Tekton</a> you could use this <a href=\"https://github.com/cdfoundation/tekton-helm-chart\">tekton helm chart</a></p>\n</div>\n<div class=\"paragraph\">\n<p>The Jenkins controller should also have kubernetes RBAC access to be able to create Tekton resources and watch them and their associated pods and pod logs.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are running your Jenkins controller inside Kubernetes then an easy way to setup the RBAC is to install the <a href=\"https://github.com/jenkins-x-charts/jenkins-resources\">Jenkins Resource Helm Chart</a> in the same namespace as your Jenkins controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>Another option is to use an <a href=\"https://jenkins-x.io/v3/\">installation of Jenkins X</a> and let it <a href=\"https://jenkins-x.io/v3/admin/guides/jenkins/\">setup a Jenkins controller via GitOps</a></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"specifying-the-tekton-pipelines\"><a class=\"anchor\" href=\"#specifying-the-tekton-pipelines\"></a>Specifying the Tekton pipelines</h3>\n<div class=\"paragraph\">\n<p>You can configure the Tekton pipeline via:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>a file path in a git clone block</p>\n</li>\n<li>\n<p>a URL to a tekton YAML file</p>\n</li>\n<li>\n<p>a block of YAML</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>We recommend defining Tekton pipelines as YAML files and checking them into a git repository so that you can use <a href=\"https://jenkins-x.io/v3/devops/patterns/gitops/\">GitOps</a> and follow the <a href=\"https://jenkins-x.io/v3/devops/patterns/pipeline_as_code/\">Pipeline As Code</a> pattern.</p>\n</div>\n<div class=\"paragraph\">\n<p>This means that you can version your pipelines in git. It also means you can benefit from the <a href=\"https://jenkins-x.io/v3/develop/pipelines/editing/#ide-support\">various IDE plugins</a> available for Tekton such as <a href=\"https://github.com/redhat-developer/vscode-tekton#tekton-pipelines-extension--\">VS Code</a> and <a href=\"https://plugins.jetbrains.com/plugin/14096-tekton-pipelines-by-red-hat\">IDEA</a> so that you get auto completion, formatting and validation while editing the YAML.</p>\n</div>\n<div class=\"paragraph\">\n<p>So you can use the usual Git provider support in Jenkins to clone the git repository that contains then Tekton YAML file then reference the file by name.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"reusing-pipelines-from-the-tekton-catalog\"><a class=\"anchor\" href=\"#reusing-pipelines-from-the-tekton-catalog\"></a>Reusing Pipelines from the Tekton Catalog</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <a href=\"https://github.com/tektoncd/catalog\">Tekton Catalog</a> defines a ton of Tekton Tasks you can reuse in your pipelines</p>\n</div>\n<div class=\"paragraph\">\n<p>We have found when it comes to a microsevices style architecture you end up with lots of repositories and pipelines. Then using a <a href=\"https://jenkins-x.io/v3/devops/patterns/pipeline_as_code/\">Pipeline As Code</a> pattern with <a href=\"https://jenkins-x.io/v3/devops/patterns/gitops/\">GitOps</a> we want to <a href=\"https://jenkins-x.io/v3/devops/patterns/version_everything/\">Version Everything</a> but also make it easy for any repository to use any version of any task or pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>e.g. you may have many repositories using the current version of a pipeline but want to try out a new change to the pipeline in just 1 repository to verify it works well; then if it does, incrementally roll that change out to more repositories.</p>\n</div>\n<div class=\"paragraph\">\n<p>This can make it hard trying to reuse as much as you can across the different git repositories while also minimising the number of versions and forks of git repositories you have and simplifying the maintenance of all of the pipelines.</p>\n</div>\n<div class=\"paragraph\">\n<p>We have found on the <a href=\"https://jenkins-x.io/\">Jenkins X project</a> that <a href=\"https://jenkins-x.io/blog/2021/02/25/gitops-pipelines/\">a nice way to do this via GitOps</a> such that we reference versioned Tekton Tasks and Pipelines in git so that they are easy to <a href=\"https://jenkins-x.io/v3/develop/pipelines/catalog/#referencing-a-task-or-step\">reuse</a> or <a href=\"https://jenkins-x.io/v3/develop/pipelines/catalog/#overriding-a-pipeline-step-locally\">override</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>So we reuse Tasks and Pipelines via the <a href=\"https://jenkins-x.io/v3/develop/pipelines/catalog/#sourceuri-notation\">uses: image notation</a> which lets us keep all of our Tekton Tasks and Pipelines in vanilla Tekton YAML; so that the IDE completion and validation works - but we can easily reuse Tasks or steps from libraries while also <a href=\"https://jenkins-x.io/v3/devops/patterns/version_everything/\">Versioning Everything</a></p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Note</strong> that if wish to reuse steps/tasks via the <a href=\"https://jenkins-x.io/v3/develop/pipelines/catalog/#sourceuri-notation\">uses: image notation</a> then you must click the <code>Tekton Catalog</code> flag in your Job definition which will then resolve the <code>uses:</code> clause with the actual step/task.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"what-is-jenkins-x\"><a class=\"anchor\" href=\"#what-is-jenkins-x\"></a>What is Jenkins X?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><span class=\"image right\"><img src=\"/images/jenkins-x/logo-with-text.svg\" alt=\"Jenkins X Logo\" width=\"250\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The <a href=\"https://jenkins-x.io/\">Jenkins X project</a> automates your CI/CD on kubernetes to help you <a href=\"https://jenkins-x.io/v3/devops/accelerate/\">accelerate</a>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://jenkins-x.io/v3/develop/create-project/\">Automated CI/CD pipelines</a> lets you focus on your actually application code while Jenkins X automatically creates battle tested <a href=\"https://github.com/tektoncd/pipeline\">Tekton</a> CI/CD pipelines for your project which are <a href=\"https://jenkins-x.io/blog/2021/02/25/gitops-pipelines/\">managed via GitOps</a> so that its super easy to keep your pipelines up to date across your repositories or to upgrade or <a href=\"https://jenkins-x.io/v3/develop/pipelines/catalog/#overriding-a-pipeline-step-locally\">override pipelines or steps</a> for specific repositories.</p>\n</li>\n<li>\n<p><a href=\"https://jenkins-x.io/v3/develop/environments/promotion\">Automatic promotion of versioned artifacts</a> via <a href=\"https://jenkins-x.io/v3/devops/patterns/gitops/\">GitOps</a> through your <a href=\"https://jenkins-x.io/v3/develop/environments/\">Environments</a> such as <code>Staging</code>, <code>Pre-production</code> and <code>Production</code> whether they are running in the same kubernetes cluster or you are using <a href=\"https://jenkins-x.io/v3/admin/guides/multi-cluster/\">multiple clusters for your environments</a></p>\n</li>\n<li>\n<p><a href=\"https://jenkins-x.io/v3/develop/environments/preview/\">Preview Environments</a> lets you propose code changes via Pull Requests and have a Preview Environment automatically created, running your code in kubernetes to get fast feedback from your team before agreeing to merge changes to the main branch</p>\n</li>\n<li>\n<p><a href=\"https://jenkins-x.io/v3/develop/developing/#using-chatops\">ChatOps</a> comment on Pull Requests to give feedback, approve/hold changes, trigger optional pipelines for additional testing and other <a href=\"https://jenkins-x.io/v3/develop/reference/chatops/\">ChatOps commands</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>All of the above is implemented in reusable Tekton pipelines.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"reusing-jenkins-x-pipelines\"><a class=\"anchor\" href=\"#reusing-jenkins-x-pipelines\"></a>Reusing Jenkins X Pipelines</h3>\n<div class=\"paragraph\">\n<p>So how can we reuse automated CI/CD pipelines from <a href=\"https://jenkins-x.io/\">Jenkins X project</a> from Jenkins?</p>\n</div>\n<div class=\"paragraph\">\n<p>Make sure you have the <a href=\"https://github.com/jenkinsci/tekton-client-plugin\">Tekton Client plugin for Jenkins</a> installed in your Jenkins server.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"using-a-working-template\"><a class=\"anchor\" href=\"#using-a-working-template\"></a>Using a working template</h4>\n<div class=\"paragraph\">\n<p>If you want to start with a working example then</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/jstrachan/node-example/generate\">Create A Git Repository From This Template</a></p>\n</li>\n<li>\n<p>add a new <code>Frestyle project</code> to your Jenkins server</p>\n</li>\n<li>\n<p>enable the <code>Git</code> source code management for your new github.com repository</p>\n</li>\n<li>\n<p>click <code>Add build Step</code> (near the bottom of the page) and then select <code>Tekton : Create Resource (Raw)</code></p>\n</li>\n<li>\n<p>make sure that <code>FILE</code> is selected for the input and enter the name <code>.lighthouse/jenkins-x/release.yaml</code> for the file name</p>\n</li>\n<li>\n<p>if you are using a Jenkins X cluster enter <code>jx</code> for the namespace</p>\n</li>\n<li>\n<p>ensure that <code>Enable Tekton Catalog</code> is checked</p>\n</li>\n<li>\n<p>now save the pipeline - it should look something like this:</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/projects/tekton-client-plugin/example.png\" alt=\"Jenkins Console\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Now if you trigger the pipeline you should see it create a Tekton Pipeline and you should see the output of the tekton pipeline in the Jenkins console. The pipeline is actually running as a completely separate Pod in kubernetes; the Jenkins controller just tails the log into the console.</p>\n</div>\n<div class=\"paragraph\">\n<p>In a Jenkins X cluster this pipeline should just work (reusing all the cloud resources and IAM roles setup by the Terraform) but in an arbitrary kubernetes cluster you may get issues around not being able to push images or promote due to lack of GitOps environments being defined which we can help you work through via the <a href=\"https://jenkins-x.io/community/#slack\">Jenkins X slack room</a></p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"using-an-existing-repository\"><a class=\"anchor\" href=\"#using-an-existing-repository\"></a>Using an existing repository</h3>\n<div class=\"paragraph\">\n<p>You can configure a Pull Request or Release pipeline in your project by copying the YAML file for the <a href=\"https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/packs\">language pack</a> you wish to use.</p>\n</div>\n<div class=\"paragraph\">\n<p>e.g. if you are using maven then copy <a href=\"https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/packs/maven-java11/.lighthouse/jenkins-x/pullrequest.yaml\">pullrequest.yaml</a> or <a href=\"https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/packs/maven-java11/.lighthouse/jenkins-x/release.yaml\">release.yaml</a> into your projects source code then reference it from your Jenkins Job:</p>\n</div>\n<div class=\"paragraph\">\n<p>Then follow the above instructions for setting up a <code>Freestyle project</code> for your git repository and referencing the file name for your pipeline.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"overriding-steps\"><a class=\"anchor\" href=\"#overriding-steps\"></a>Overriding steps</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Being able to reuse steps from libraries of pipelines is awesome; but sometimes you need to change things. The assumptions, commands, arguments, environment variables or approaches used for every step in a library may not quite match what you need on a specific application. You may need to run steps before/after steps in the library or you may need to override a specific step to do something different.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can easily <a href=\"/v3/develop/pipelines/catalog/#customizing-an-inherited-step\">customize any inherited step</a> in any shared pipeline or <a href=\"https://jenkins-x.io/v3/develop/pipelines/catalog/#adding-your-own-steps\">add custom steps before/after any step</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The fact that all the Tekton YAML is fully declarative makes it super easy to modify things via your IDE with validation and smart completion and not have to use a scripting language and understand complex shared pipeline libraries.</p>\n</div>\n<div class=\"paragraph\">\n<p>The easiest way to try overriding a step is to install the <a href=\"\">jx binary to your $PATH</a> then <a href=\"/v3/develop/pipelines/catalog/#overriding-a-pipeline-step-locally\">use the jx pipeline override command</a> which will create a new locally overridden step you can then just edit in your IDE.</p>\n</div>\n<div class=\"paragraph\">\n<p>Then at any time you can <a href=\"https://jenkins-x.io/v3/develop/pipelines/catalog/#viewing-the-effective-pipeline\">view the effective pipeline when you make local changes</a></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"comparing-the-kubernetes-and-tekton-plugins\"><a class=\"anchor\" href=\"#comparing-the-kubernetes-and-tekton-plugins\"></a>Comparing the Kubernetes and Tekton plugins</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Those of you using Jenkins on a <a href=\"https://kubernetes.io/\">Kubernetes</a> cluster are probably using the <a href=\"https://plugins.jenkins.io/kubernetes/\">kubernetes plugin</a> right now.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/jenkinsci/kubernetes-plugin/tree/master/examples/declarative_from_yaml_file\">Here is an example</a> of how to use a <a href=\"https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/declarative_from_yaml_file/Jenkinsfile\">Jenkinsfile</a> with a <a href=\"https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/declarative_from_yaml_file/KubernetesPod.yaml\">pod YAML file</a> so that you can run commands in different containers in the pod.</p>\n</div>\n<div class=\"paragraph\">\n<p>What this means is that:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>a kubernetes pod is created based on the <a href=\"https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/declarative_from_yaml_file/KubernetesPod.yaml\">pod YAML file</a> which is scheduled by kubernetes</p>\n</li>\n<li>\n<p>the <a href=\"https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/declarative_from_yaml_file/Jenkinsfile\">Jenkinsfile</a> runs on the Jenkins controller talking over Jenkins remoting to the pod to tell it to run commands in different containers. The pod includes the <code>jnlp</code> container which does the remoting between the Jenkins controller and the pod</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This has a few issues:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>each container in the pod must have a shell so that jnlp can invoke commands. This may mean you have to create your own images</p>\n</li>\n<li>\n<p>it can be a little slow to start since there is chattiness with the Jenkins controller and the pod - whereas with Tekton pods just start and run locally without any coodination with the Jenkins controller</p>\n</li>\n<li>\n<p>you have to maintain 2 files: the <code>Jenkinsfile</code> and the <code>pod.yaml</code> and it&#8217;s hard to share/override both of those files across multiple repositories as you need to make changes (e.g. overriding environment variables/images/commands/resource limits on demand on steps).</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Though one downside of the tekton approach is that by default there is no automatic synchronisation of state; after a Task in tekton completes there&#8217;s no automatic upload of state to the Jenkins controllers disk. You can always add a step in your Task to upload workspace state to the Jenkins controller if that&#8217;s what you want.</p>\n</div>\n<div class=\"paragraph\">\n<p>Though remember that tekton plugin doesn&#8217;t take anything away; so you can mix and match the kubernetes and tekton plugins to suit your needs.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We are really excited about the combination of Jenkins, <a href=\"https://tekton.dev/\">Tekton</a> and <a href=\"https://jenkins-x.io/\">Jenkins X</a> letting developers pick the best tool for the job while becoming more cloud native and increasing the automation help reduce the amount of manual work creating and maintaining pipelines while also helping to improve the quality and practices of our CI/CD.</p>\n</div>\n<div class=\"paragraph\">\n<p>Please try it out and <a href=\"https://github.com/jenkinsci/tekton-client-plugin/issues\">let us know how you get on</a>!</p>\n</div>\n</div>\n</div>","id":"be129944-4fa0-5e51-a899-a198162b78c4","title":"Easily reuse Tekton and Jenkins X from Jenkins","date":"2021-04-21T00:00:00.000Z","slug":"/blog/2021/04/21/tekton-plugin/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg","srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/77b35/jstrachan.jpg 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/d4a57/jstrachan.jpg 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/68974/jstrachan.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/ef6ff/jstrachan.webp 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/8257c/jstrachan.webp 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/6766a/jstrachan.webp 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/22bfc/jstrachan.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/jstrachan.jpeg"},"blog":null,"github":"jstrachan","html":"<div class=\"paragraph\">\n<p>James is a long time open source contributor, created the Groovy programming language and Apache Camel integration framework.\nFor the past few years he&#8217;s been working on CI/CD with Kubernetes.</p>\n</div>","id":"jstrachan","irc":null,"linkedin":null,"name":"James Strachan","slug":"/blog/authors/jstrachan","twitter":"jstrachan"}]}},"pageContext":{"id":"be129944-4fa0-5e51-a899-a198162b78c4"}},
    "staticQueryHashes": ["1271460761","3649515864"]}