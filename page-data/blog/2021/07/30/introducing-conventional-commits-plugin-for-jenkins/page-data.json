{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2021/07/30/introducing-conventional-commits-plugin-for-jenkins/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p><span class=\"image center center\"><img src=\"/images/gsoc/2021/conventional-commits/conventionalCommitsPluginForJenkins.png\" alt=\"GSoC\" height=\"420\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The conventional commits plugin is a Google Summer of Code project.\nSpecial thanks to the mentors Gareth Evans, Kristin Whetstone, Olivier Vernin and Allan Burdajewicz.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"what-are-conventional-commits\"><a class=\"anchor\" href=\"#what-are-conventional-commits\"></a>What are Conventional Commits</h3>\n<div class=\"paragraph\">\n<p>According to the <a href=\"https://www.conventionalcommits.org/\">official website</a>, conventonal commits are, \"A specification for adding human and machine readable meaning to commit messages.\"</p>\n</div>\n<div class=\"paragraph\">\n<p>Conventional commits are a lightweight convention on top of commit messages.</p>\n</div>\n<div class=\"paragraph\">\n<p>The following table shows major structural elements offered by the conventional commits convention.</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 50%;\">\n<col style=\"width: 50%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Structural Element</th>\n<th class=\"tableblock halign-left valign-top\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Chore</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>chore: improve logging</code></p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Fix</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>fix: minor bug fix</code></p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Feat</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>feat: add a new feature</code></p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Breaking Change</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>BREAKING CHANGE: reimplement</code></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"why-conventional-commits\"><a class=\"anchor\" href=\"#why-conventional-commits\"></a>Why Conventional Commits</h3>\n<div class=\"paragraph\">\n<p>As the CI/CD world is moving more towards complete automation and minimal human interaction, the ability to fully automate a release is desired.\nConventional Commits enable the use of automated systems on top of commit messages.\nThese systems can \"truly\" automate a release with almost no human interaction.</p>\n</div>\n<div class=\"paragraph\">\n<p>The convention dovetails with <a href=\"https://semver.org/\">semantic versioning</a>.\nLet&#8217;s take an example, a maven project is currently versioned at <code>1.2.0</code>.\nThe following table shows how conventional commits would bump the version depending on the type of the commit.</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3334%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Commit Message</th>\n<th class=\"tableblock halign-left valign-top\">Version Bump</th>\n<th class=\"tableblock halign-left valign-top\">SemVer Equivalent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>chore: improve logging</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>1.2.0</code> &#8594; <code>1.2.0</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">No version bump</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>fix: minor bug fix</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>1.2.0</code> &#8594; <code>1.2.1</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Increment in the patch version</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>feat: add a new feature</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>1.2.0</code> &#8594; <code>1.3.0</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Increment in the minor version</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>BREAKING CHANGE: reimplement</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>1.2.0</code> &#8594; <code>2.0.0</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Increment in the major version</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"the-conventional-commits-plugin\"><a class=\"anchor\" href=\"#the-conventional-commits-plugin\"></a>The Conventional Commits Plugin</h3>\n<div class=\"paragraph\">\n<p>The conventional commits plugin is a Jenkins plugin to programatically determine the next semantic version of a git repository using:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Last tagged version</p>\n</li>\n<li>\n<p>Commit message log</p>\n</li>\n<li>\n<p>Current version of the project</p>\n</li>\n</ul>\n</div>\n<div class=\"sect3\">\n<h4 id=\"how-it-works\"><a class=\"anchor\" href=\"#how-it-works\"></a>How it works?</h4>\n<div class=\"paragraph\">\n<p>The plugin will read the commit messages from the latest tag or the current version of the project till the latest commit.\nUsing this information it will determine what would be the next semantic Version for that particular project.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"supported-project-types\"><a class=\"anchor\" href=\"#supported-project-types\"></a>Supported Project Types?</h4>\n<div class=\"paragraph\">\n<p>Currently the plugin can read the current version from various configuration files of the following project types:</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 50%;\">\n<col style=\"width: 50%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Project Type</th>\n<th class=\"tableblock halign-left valign-top\">Configuration File(s) Read</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Maven</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">pom.xml</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gradle</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">build.gradle</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Make</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Makefile</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Python</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">setup.py</p>\n<p class=\"tableblock\">setup.cfg</p>\n<p class=\"tableblock\">pyproject.toml</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Helm</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Charts.yml</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Node (NPM)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">package.json</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"sect3\">\n<h4 id=\"how-to-request-a-project-type-support\"><a class=\"anchor\" href=\"#how-to-request-a-project-type-support\"></a>How to request a project type support?</h4>\n<div class=\"paragraph\">\n<p>Please feel free to open an issue on the <a href=\"https://github.com/jenkinsci/conventional-commits-plugin/\">GitHub repository</a> of the plugin.</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"how-to-use-the-plugin\"><a class=\"anchor\" href=\"#how-to-use-the-plugin\"></a>How to use the plugin</h3>\n<div class=\"paragraph\">\n<p>Recommended way of using the plugin is to add a step in a <a href=\"https://www.jenkins.io/doc/pipeline/tour/hello-world/#what-is-a-jenkins-pipeline\">Jenkins Pipeline Project</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><code>nextVersion()</code> is the pipeline step to be used.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>pipeline {\n    agent any\n\n    environment {\n        NEXT_VERSION = nextVersion()\n    }\n\n    stages {\n        stage('Hello') {\n            steps {\n                echo \"next version = ${NEXT_VERSION}\"\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Tip: <em>The pipeline step can also be generated with the help of the Snippet Generator.</em>\n<em>Please select \"nextVersion\" in the Sample Step drop down and then click on \"Generate Pipeline Snippet\"</em></p>\n</div>\n<div class=\"paragraph\">\n<p>The plugin is released on every feature using JEP-229.</p>\n</div>\n<div class=\"paragraph\">\n<p>The plugin is available to download from the <a href=\"https://plugins.jenkins.io/conventional-commits\">plugins site</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"demo\"><a class=\"anchor\" href=\"#demo\"></a>Demo</h3>\n<div class=\"paragraph\">\n<p>You can watch the plugin in action in a demo presented at the GSoC Midterm Presentations</p>\n</div>\n<div class=\"videoblock\">\n<div class=\"content\">\n<iframe width=\"800\" height=\"420\" src=\"https://www.youtube.com/embed/_D0hiA1Cgz8?rel=0&amp;start=3219\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"next-steps\"><a class=\"anchor\" href=\"#next-steps\"></a>Next Steps</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Support for pre-release information. Example: <code>1.0.0-alpha</code>, <code>1.0.0-beta</code>, etc</p>\n</li>\n<li>\n<p>Support for build metadata. Example: <code>1.0.0-beta+exp.sha.5114f85</code></p>\n</li>\n<li>\n<p>Optionally writing the calcuated \"Next Version\" into the project&#8217;s configuration file. Example: <code>pom.xml</code> for a maven project, <code>setup.py</code> for python.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"feedback\"><a class=\"anchor\" href=\"#feedback\"></a>Feedback</h3>\n<div class=\"paragraph\">\n<p>We would love to hear your feedback &amp; suggestions for the plugin.</p>\n</div>\n<div class=\"paragraph\">\n<p>Please reach out on the plugin&#8217;s <a href=\"https://github.com/jenkinsci/conventional-commits-plugin\">GitHub</a> repository, the <a href=\"https://gitter.im/jenkinsci/conventional-commits-plugin\">Gitter</a> channel or start a discussion on <a href=\"https://community.jenkins.io\">community.jenkins.io</a>.</p>\n</div>\n</div>","id":"ec28a413-ce25-5776-ac1c-84b03c9452d9","title":"Introducing the Conventional Commits Plugin for Jenkins","date":"2021-07-30T00:00:00.000Z","slug":"/blog/2021/07/30/introducing-conventional-commits-plugin-for-jenkins/","links":{"discourse":"https://community.jenkins.io/t/introducing-the-conventional-commits-plugin/272"},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#688898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png","srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/ff5a3/adi10hero.png 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b18f9/adi10hero.png 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b9e30/adi10hero.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8ba60/adi10hero.webp 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/a9ea7/adi10hero.webp 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8c23b/adi10hero.webp 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/fc98a/adi10hero.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":131}}},"blog":null,"github":"adi10hero","html":"<div class=\"paragraph\">\n<p>Aditya is a curiosity driven individual striving to find ingenious solutions to real-world problems. He is an open-source enthusiast and a life long learner.</p>\n</div>","id":"adi10hero","irc":null,"linkedin":null,"name":"Aditya Srivastava","slug":"/blog/author/adi10hero","twitter":"adi10hero"}]}},"pageContext":{"next":"/blog/2021/07/31/remoting-monitoring-phase-1/","previous":"/blog/2021/07/27/git-credentials-binding-phase-1/","id":"ec28a413-ce25-5776-ac1c-84b03c9452d9"}},
    "staticQueryHashes": ["1271460761","3649515864"]}