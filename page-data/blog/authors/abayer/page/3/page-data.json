{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/authors/abayer//page/3",
    "result": {"data":{"author":{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"},"allBlog":{"edges":[{"node":{"date":"2010-08-17T00:00:00.000Z","id":"6b7df70f-bfc3-514d-be8c-58d039483ca5","slug":"/blog/2010/08/17/hudson-anonymous-usage-data/","strippedHtml":"In late 2008, the Hudson team released version 1.264 which added an anonymous reporting feature (you can opt-out in the \"Manage Hudson\" screen). The reporting feature has been sending information back to the Hudson team to help us understand how Hudson is used in aggregate; the info being reported includes the number of jobs configured, agent configurations, what plugins (and what versions of those plugins) are installed, and more. This data has not been available publicly until now! The raw data needed to be decrypted and scrubbed of any potentially identifying information, such as non-public plugin names or usernames in snapshot versions. We’ve finally scrubbed the data and are making it available!\n\nThe data is currently in monthly JSON bundles, organized by unique install key. We’ve filtered out reports of installations without any jobs configured, as well as any installations with only one report in a given month.\n\nIf you’d like access to the data, please send an email to dev@hudson.dev.java.net or jump onto the IRC channel and ask - we’ll send you the URL and a private username/password which you’ll need to access the info. We’re also planning to do more analysis of the data ourselves, for now feast your eyes on this spreadsheet, which shows the total number of unique installations seen per month and the number of unique installations of each publicly available plugin per month.\n\n+\n(Andrew is a core committer to Hudson and the author of numerous plugins. He's the build guy at https://digg.com[Digg], who, by the way, https://jobs.digg.com/[are hiring]!) +\n +\n\n+","title":"Hudson Anonymous Usage Data","tags":["general","core","just for fun","meta","news","plugins","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2010-08-02T00:00:00.000Z","id":"39857c82-9e13-5cee-bbe3-208d7d4e51d5","slug":"/blog/2010/08/02/dogfooding-hudson-were-looking-for-slaves/","strippedHtml":"As you may have noticed, thanks to the link on this and the other pages here at hudson-labs.org, the Hudson development community has recently introduced ci.hudson-labs.org, the official Hudson-on-Hudson instance. We’re currently building Hudson proper, the Hudson core RC branch, individual builds for the various Hudson plugins and Gerrit, as well as various libraries and infrastructure jobs Hudson depends on.\n\nWe’re currently running all those builds on a dedicated Linux agent, generously provided to the Hudson project by Digg, my employer. This has been great - except for the day when I’d just added all the individual plugin jobs for the first time, we haven’t had real problems with capacity. But we are limited in the environments we can run our tests on as a result of only having a Linux agent. We’re currently playing with a temporary Windows agent, but we’d really like to have at least one more permanent Windows agent, and a Mac agent as well, so that we can run Hudson’s core integration tests on those platforms as well. Since this is Hudson we’re talking about, we don’t need the agent to be in any given physical location - we just need it to be running the agent process and talking to our server. If you’re interested in helping us out with this, please contact me at andrew dot bayer at gmail dot com. Thanks!\n\n+\n(Andrew is a core committer to Hudson and the author of numerous plugins. He's the build guy at https://digg.com[Digg], who, by the way, https://jobs.digg.com/[are hiring]!)","title":"Dogfooding Hudson - We're Looking for Agents!","tags":["infrastructure","core","meta","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2010-07-28T00:00:00.000Z","id":"a07fba72-78a8-535c-9379-13f2b06ac4db","slug":"/blog/2010/07/28/hosting-your-hudson-plugin-at-github/","strippedHtml":"For as long as Hudson’s had a plugin model and development community, we’ve provided source code and binary hosting through our Subversion repo at java.net. But what if you’re a plugin developer and you don’t want to use Subversion? Well, we have an alternative for your source code: host it with Hudson on GitHub.\n\nTo get this in place, send an email to dev@hudson.dev.java.net (or ask in the IRC channel) asking to get a repository created for your plugin at Github. Make sure to include the name of the plugin and your Github username (and the Github usernames of any other developers who’ll be pushing to your plugin’s repo). If your plugin is already in Github, include the URL for the existing repo so that we can fork it. One of the Hudson admins will create the repository (forking if appropriate) and add the user(s) to the list of users with push access to the Hudson-hosted repositories at Github. Once you hear back from them, you’ll be able to push code to the new repository.\n\nYou will need to make a few changes to your plugin’s POM, as compared to what works for a plugin POM in the java.net Subversion tree.\n\nFirst, add the following to the ` section: +\n +\n`+                org.apache.maven.plugins         maven-release-plugin         2.0                                 org.apache.maven.scm             maven-scm-provider-gitexe             1.3                           +` +\n +\nThis is needed to make sure we're overriding the parent POM's SCM provider settings. Next, add the following to the ` section:\n\n+                     org.jvnet.wagon-svn         wagon-svn         1.9            +\n\nThis is needed because we’re still going to be using wagon-svn to deploy the artifacts in the release process. Lastly, add an ` section, within the ` section of the POM, like the following:\n\n+        scm:git:git://github.com/hudson/your-plugin-repo.git     scm:git:git@github.com:hudson/your-plugin-repo.git https://github.com/hudson/your-plugin-repo +\n\nAs with the first section, this is needed to override the default SCM settings in the parent POM. Make sure to change \"your-plugin-repo\" to your actual plugin repository name, of course! It’d also be a good idea to put a link to your Github repo on your plugin’s wiki page at the Hudson wiki, since the default source link will go to Subversion.\n\nNow, with these changes in place, committed and pushed to the master branch in your plugin’s repository, you should be able to run \"mvn release:prepare release:perform\" just as you would if the plugin were hosted in Subversion, with your plugin showing up in the Update Center within a few hours. Be sure that you’ve configured the login information for the java.net Maven repository, as detailed here - this is still needed for plugins hosted at and released from Github, since Hudson’s Maven repository still lives at java.net. If you run into any issues releasing your plugin from Github, first be sure to review the wiki page on plugin hosting, which addresses many of the issues you may encounter when running the Maven release plugin.\n\nIf you’re still stumped, feel free to email the Hudson developer list or ask in the IRC channel for help.\n\n+\n(Andrew is a core committer to Hudson and the author of numerous plugins. He's the build guy at https://digg.com[Digg], who, by the way, https://jobs.digg.com/[are hiring]!)","title":"Hosting your Hudson plugin at Github","tags":["development","meta","plugins","tutorial","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2010-07-22T00:00:00.000Z","id":"08e48751-f7b4-532a-b55b-cdc118c5acc2","slug":"/blog/2010/07/22/continuous-deployment-on-the-new-digg/","strippedHtml":"In my capacity as Build Guy at Digg, I’ve written up a blog post on our new continuous deployment/code review/pre-tested commit workflow. We’re using a combination of Hudson, Git and Gerrit, Selenium and more to make sure that every change going to Digg’s new site has been thoroughly tested.\n\nRead the whole post, with all the juicy details over on Digg’s Technology Blog!","title":"Continuous Deployment on the new Digg","tags":["general","core","guest post","links","plugins","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}}]}},"pageContext":{"author":"abayer","limit":8,"skip":16,"numPages":3,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}