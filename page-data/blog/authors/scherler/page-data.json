{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/authors/scherler",
    "result": {"data":{"author":{"avatar":null,"blog":null,"github":"scherler","html":"<div class=\"paragraph\">\n<p>Thorsten Scherler has a broad background in open source consulting, training and solutions since 2002.\nHe&#8217;s an engineer at CloudBees, working full time on the <a href=\"https://jenkins.io/projects/blueocean/\">Blue Ocean</a> front end.\nHe left Germany in 2003 after finishing his university degrees and has been living in sunny Seville ever since.</p>\n</div>","id":"scherler","irc":null,"linkedin":null,"name":"Thorsten Scherler","slug":"/blog/authors/scherler","twitter":"thorScherler"},"allBlog":{"edges":[{"node":{"date":"2018-06-27T00:00:00.000Z","id":"c68773a2-1f81-56bc-af65-71e0703df409","slug":"/blog/2018/06/27/new-login-page/","strippedHtml":"This blog post gives an introduction to the new design for the login and signup forms and Jenkins is (re)starting pages introduced in Jenkins 2.128.\nThe first part of the blog post is an introduction to the new design and UX for Jenkins users.\nThe later part is talking about extensibility in a more technical manner, aimed at plugin developers.\n\nOverview\n\nThe recent changes to some core pages provide new design and UX and further dropping all external dependencies to prevent\nany possible malicious javascript introduced by third party libraries.\nTo be clear, this never was an issue with previous releases of Jenkins, but having read this article, this author believes that the article has good points and leading by example may raise awareness of data protection.\n\nThis meant to drop the usage of the jelly layout lib (aka xmlns:l=\"/lib/layout\") and as well the page decorators it\nsupported. However there is a new SimplePageDecorator extension point (discussed below) which can be used to modify the look and feel for the login and sign up page.\n\nThe following pages have given a new design:\n\nJenkins is (re)starting pages\n\nLogin\n\nSign up\n\nUX enhancement\n\nForm validation has changed to give inline feedback about data validation errors in the same form.\n\nLogin\n\nSign up\n\nThe above image shows that the validation is now done on all input fields instead of before breaking on the\nfirst error found, which should lead to fewer retry cycles.\n\nInstead of forcing the user to repeat the password, the new UX introduces the possibility to display the password in\nclear text. Further a basic password strength meter indicates password strength to the user while she enters the password.\n\nCustomizing the UI\n\nThe re-/starting screens do not support the concept of decorators very well, hence the decision to not support them for these pages.\n\nThe SimplePageDecorator is the key component for customization and uses three different files to\nallow overriding the look and feel of the login and signup pages.\n\nsimple-head.jelly\n\nsimple-header.jelly\n\nsimple-footer.jelly\n\nAll of the above SimplePageDecorator Jelly files are supported in the login page. The following snippet is a minimal excerpt\nof the login page, showing how it makes use of SimplePageDecorator.\n\nThe sign-up page only supports the simple-head.jelly:\n\nSimplePageDecorator - custom implementations\n\nHave a look at Login Theme Plugin, which allows you to\nconfigure your own custom content to be injected into the new login/sign-up page.\n\nTo allow easy customisation the decorator only implements one instance by the principal \"first-come-first-serve\".\nIf jenkins finds an extension of the SimplePageDecorator it will use the Jelly files provided by that plugin.\nOtherwise Jenkins will fall back to the default implementation.\n\n@Extension\npublic class MySimplePageDecorator extends SimplePageDecorator {\n   public String getProductName() {\n     return \"MyJenkins\";\n   }\n}\n\nThe above will take override over the default because the default implementation has a very low ordinal ( @Extension(ordinal=-9999))\nIf you have competing plugins implementing SimplePageDecorator, the implementation with the highest ordinal will be used.\n\nAs a simple example, to customize the logo we display in the login page, create a simple-head.jelly with the following content:\n\nTo customize the login page further, create a simple-header.jelly like this:\n\nWelcome to ${it.productName}!\n\nFor example, I used this technique to create a prototype of a login page for a CloudBees product I am working on:\n\nConclusion\n\nWe hope you like the recent changes to some core pages and as well the new design and UX. We further hope you feel enabled to\ncustomize the look and feel to adopt your needs with the SimplePageDecorator.","title":"New design, UX and extensibility digest for login page et. al.","tags":["core","developer","ux"],"authors":[{"avatar":null,"blog":null,"github":"scherler","html":"<div class=\"paragraph\">\n<p>Thorsten Scherler has a broad background in open source consulting, training and solutions since 2002.\nHe&#8217;s an engineer at CloudBees, working full time on the <a href=\"https://jenkins.io/projects/blueocean/\">Blue Ocean</a> front end.\nHe left Germany in 2003 after finishing his university degrees and has been living in sunny Seville ever since.</p>\n</div>","id":"scherler","irc":null,"linkedin":null,"name":"Thorsten Scherler","slug":"/blog/authors/scherler","twitter":"thorScherler"}]}}]}},"pageContext":{"author":"scherler","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}