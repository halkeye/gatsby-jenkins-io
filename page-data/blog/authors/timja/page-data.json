{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/authors/timja",
    "result": {"data":{"author":{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja","twitter":"Tjaynz"},"allBlog":{"edges":[{"node":{"date":"2021-10-28T00:00:00.000Z","id":"bb5b6b61-0b2c-523e-9fa6-6f2912642e51","slug":"/blog/2021/10/28/introducing-junit-external-storage/","strippedHtml":"In common CI/CD use-cases a lot of the space is consumed by test reports.\nThis data is stored within JENKINS_HOME,\nand the current storage format requires huge overheads when retrieving statistics and, especially, trends.\nIn order to display trends, each report has to be loaded and then processed in-memory.\n\nThe main purpose of externalising Test Results is to optimize Jenkins performance and storage\nby querying the desired data from external storages.\n\nI’m please to announce that the JUnit Plugin external storage is now available for use.\n\nGetting started\n\nInstall your database vendor specific plugin, you can use the Jenkins plugin site to search for it:\n\nhttps://plugins.jenkins.io/ui/search/?labels=database\n\ne.g. you could install the PostgreSQL Database plugin.\n\nWe currently support PostgreSQL or MySQL, but can support others, just create an issue or send a pull request.\n\nFrom Jenkins UI\n\nNavigate to: Manage Jenkins → Configure System → Junit\n\nIn the dropdown select 'SQL Database'\n\nNow configure your Database connection details.\n\nSearch for 'Global Database' on the same 'Configure System' page.\n\nSelect the database implementation you want to use and click 'Test Connection' to verify Jenkins can connect\n\nClick 'Save'\n\nConfiguration as code\n\nIf you want to configure the plugin via Configuration as Code then see the below sample:\n\nunclassified:\n  globalDatabaseConfiguration:\n    database:\n      postgreSQL:\n        database: \"jenkins\"\n        hostname: \"${DB_HOST_NAME}\"\n        password: \"${DB_PASSWORD}\"\n        username: \"${DB_USERNAME}\"\n        validationQuery: \"SELECT 1\"\n  junitTestResultStorage:\n    storage: \"database\"\n\nUsing the plugin\n\nNow run some builds, here’s an example pipeline configuration to get you started if you’re just trying out the plugin:\n\nnode {\n  writeFile file: 'x.xml', text: '''\n\n'''\n  junit 'x.xml'\n}\n\nYou will see a test result trend appear like below on the builds project page:\n\nIf you check on the controller’s file system you will see no junitResult.xml for new builds.\n\nIf you connect to your database and run:\n\nSELECT * FROM caseresults;\n\nYou will see a number of test results in the database.\n\nWhat happens to existing test results?\n\nExisting test results will stay on disk but will not be loaded.\n\nCurrently there is no migration scripts or plugin functionality to do this, if you need it then please raise an issue.\n\nHow are test results cleaned up\n\nWhen a job or build is deleted the related test results are removed.\n\nThis is expected to be done as part of a 'Build Discarder'.\n\nIf you wish to keep your results longer than this you can disable this feature by enabling:\n\nSkip cleanup of test result on build deletion on the system configuration page.\n\nIf you need more complex cleanup strategies built into the plugin then please raise an issue.\n\nAPI\n\nThe API is defined at:\n\njenkinsdoc:junit:io.jenkins.plugins.junit.storage.JunitTestResultStorage[]\n\njenkinsdoc:junit:io.jenkins.plugins.junit.storage.JunitTestResultStorageDescriptor[]\n\njenkinsdoc:junit:io.jenkins.plugins.junit.storage.TestResultImpl[]\n\nJunitTestResultStorage#load is passed a job name and build which can be used to construct an instance of the external storage implementation.\n\nThis implementation will then act on that job and build except for the optimised calls that act across all builds.\n\nThe API contains the basic methods like getFailCount, getSkipCount, but also APIs that are optimised for retrieving data for the trend graphs on the job page and the test result history page.\n\nThese allow single API calls to be made for what used to be a lot of work for Jenkins to look up before.\n\nFeedback\n\nI would love to hear your feedback & suggestions for this feature.\n\nPlease create an issue at https://github.com/jenkinsci/junit-plugin or provide feedback on https://community.jenkins.io","title":"Introducing external storage for JUnit test results","tags":["cloud-native","pluggable-storage","junit"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja","twitter":"Tjaynz"}]}},{"node":{"date":"2020-05-25T00:00:00.000Z","id":"bbaf3958-fe7d-5fd6-a06c-16651d385923","slug":"/blog/2020/05/25/read-only-jenkins-announcement/","strippedHtml":"I’m excited to announce that the 'read-only' Jenkins feature is now available for preview.\nThis feature allows restricting configuration UIs and APIs while providing access to essential Jenkins system configuration, diagnostics, and self-monitoring tools through Web UI.\nSuch mode is critical for instances managed as code, e.g. with Jenkins Configuration-as-Code plugin.\nIt is delivered as a part of the jep:224[Readonly system configuration] effort.\n\nYou will want to use at least Jenkins 2.238 to have all the features mentioned in this post.\n\nRead-only Jenkins currently allows users to have access to:\n\njob configuration\n\nsystem configuration\n\nplugin manager\n\nsystem logs\n\ncloud configuration\n\nagent configuration\n\nagent logs\n\nFor more planned integrations see the jira:JENKINS-12548[] epic.\n\nRead-only Jenkins is split into three permissions:\n\nJob/ExtendedRead - Read-only access to job configurations\n\nexisted since 2009 but the UI didn’t do anything to indicate to the users\nthat they couldn’t edit the job configuration page.\nThis has now been adapted to the new read-only engine.\n\nAgent/ExtendedRead - Read-only access to agent configurations\n\nexisted since 2013 but it was undocumented and only allowed access to API and no UI\n\nUI support added in Jenkins 2.238\n\nOverall/SystemRead - Read-only access to Jenkins system configuration.\nIt is very useful for Jenkins instances managed as code, e.g. with help of the Jenkins Configuration as Code Plugin.\n\nIntroduced in Jenkins 2.222 as a part of jep:224[Readonly system configuration]\n\nYou can selectively grant the permission(s) as you wish.\n\nWhy do I want this?\n\nGiven the rise of the configuration-as-code plugin a lot of Jenkins instances are fully managed as code,\nwhich means that no changes are allowed through the UI.\n\nThe problem with this is you don’t know when new plugin versions are available and in order to see what other configuration options are available to a plugin you currently need the 'Administer' permission.\n\nRead-only access to system administration information allows users who are not administrators to more easily debug build issues.\nFor example, given a 'Jenkins' error message in a build the user can check:\n\nwhich plugins are installed\n\nthe version of the plugin\n\nThis can allow the user to solve their issue themselves and makes it easier for the user to report an issue with a plugin directly to the maintainers.\n\nWhat can I expect\n\nAll built in UI controls have been adapted to clearly distinguish between\nan editable control and a control you don’t have permission to edit:\n\nEditable:\n\nNon editable:\n\nNote: there are other controls such as in the credentials and pipeline plugins that have\nnot been updated yet.\n\nAction buttons, (Such as 'Save' and 'Apply') have been hidden in most cases.\n\nWork will continue on read-only configuration.  Some plugins need support added and certain controls\ncould have some improvements done to render better.\n\nHow can I use it?\n\nThese permissions are currently available in beta and for now disabled by default.\nYou can enable them by installing the Extended read permission plugin v3.2 or above.\n\nThen you will need to add the following permissions to a user / group depending on your use case:\n\nOverall/SystemRead\n\nJob/ExtendedRead\n\nAgent/ExtendedRead\n\nNote: You will need to set the Overall/Read and Job/Read permissions as well.  You might\nwant to consider creating a role containing the required permissions.\n\nHere is an example using the Configuration as Code plugin and the Folder-based Authorization Strategy plugin :\n\njenkins:\n  authorizationStrategy:\n    folderBased:\n      globalRoles:\n        - name: \"admin\"\n          permissions:\n            - id: \"Overall/Administer\"\n          sids:\n            - \"admin\"\n        - name: \"global read\"\n          permissions:\n            - id: \"Agent/ExtendedRead\"\n            - id: \"Overall/SystemRead\"\n            - id: \"Overall/Read\"\n            - id: \"Job/Read\"\n            - id: \"Job/ExtendedRead\"\n          sids:\n            - \"reader\"\n\nI can’t see a configuration that I think should be allowed\n\nMost of Jenkins itself has been updated to support read-only Jenkins, but not very many plugins.\nPlease create an enhancement issue on the plugins issue tracker.\nIf the plugin uses Jira to track issues, then you can add it to the jira:JENKINS-12548[] epic.\n\nHow do I update my plugin to support it\n\nSee the Read only view section of the developer documentation.\n\nWhat’s next\n\nIn this release we introduce a foundation feature which is already supported in all key Jenkins core controls and in some plugins.\nThere are many plugins which contribute to global configurations and diagnostics which still need to be adapted to support the new mode.\nWe will keep working on this feature and its adoption so that the next LTS baseline in September provides a full-fledged user experience for Jenkins admins.\n\nSystem read permission is a featured project in the UI/UX Hackfest\nhappening May 25-29 2020. If you want to get involved please check it out!","title":"Read-only Jenkins Configuration","tags":["system-read","extended-read","configuration-as-code","announcement"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja","twitter":"Tjaynz"}]}},{"node":{"date":"2020-04-16T00:00:00.000Z","id":"c9bdc8f4-e8bc-5080-883f-d67fbd7f7847","slug":"/blog/2020/04/16/github-app-authentication/","strippedHtml":"This blogpost was updated to reflect the general availability of the feature after the release of GitHub Branch Source 2.7.1 on April 26th, 2020.\n\nI’m excited to announce support for authenticating as a GitHub app in Jenkins.\nThis has been a long awaited feature by many users.\nIt has been released in GitHub Branch Source 2.7.1 which is now available in the Jenkins update centers.\n\nAuthenticating as a GitHub app brings many benefits:\n\nLarger rate limits - The rate limit for a GitHub app scales with your organization size,\nwhereas a user based token has a limit of 5000 regardless of how many repositories you have.\n\nUser-independent authentication - Each GitHub app has its own user-independent authentication. No more need for 'bot' users or figuring out who should be the owner of 2FA or OAuth tokens.\n\nImproved security and tighter permissions - GitHub Apps offer much finer-grained permissions compared to a service user and its personal access tokens. This lets the Jenkins GitHub app require a much smaller set of privileges to run properly.\n\nAccess to GitHub Checks API - GitHub Apps can access the the GitHub Checks API to create check runs and check suites from Jenkins jobs and provide detailed feedback on commits as well as code annotation\n\nGetting started\n\nInstall the GitHub Branch Source plugin,\nmake sure the version is 2.7.1 or above.\n\nConfiguring the GitHub Organization Folder\n\nFollow the GitHub App Authentication setup guide.  These instructions are also linked from the plugin’s README on GitHub.\n\nOnce you’ve finished setting it up, Jenkins will validate your credential and you should see your new rate limit.\nHere’s an example on a large org:\n\nHow do I get an API token in my pipeline?\n\nIn addition to usage of GitHub App authentication for Multi-Branch Pipeline, you can also use app authentication directly in your Pipelines.\nYou can access the Bearer token for the GitHub API by just loading a 'Username/Password' credential as usual,\nthe plugin will handle authenticating with GitHub in the background.\n\nThis could be used to call additional GitHub API endpoints from your pipeline, possibly the\ndeployments api or you may wish to implement your own\nchecks api integration until Jenkins supports this out of the box.\n\nNote: the API token you get will only be valid for one hour, don’t get it at the start of the pipeline and assume it will be valid all the way through\n\nExample: Let’s submit a check run to Jenkins from our Pipeline:\n\npipeline {\n  agent any\n\n  stages{\n    stage('Check run') {\n      steps {\n        withCredentials([usernamePassword(credentialsId: 'githubapp-jenkins',\n                                          usernameVariable: 'GITHUB_APP',\n                                          passwordVariable: 'GITHUB_ACCESS_TOKEN')]) {\n            sh '''\n            curl -H \"Content-Type: application/json\" \\\n                 -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n                 -H \"authorization: Bearer ${GITHUB_ACCESS_TOKEN}\" \\\n                 -d '{ \"name\": \"check_run\", \\\n                       \"head_sha\": \"'${GIT_COMMIT}'\", \\\n                       \"status\": \"in_progress\", \\\n                       \"external_id\": \"42\", \\\n                       \"started_at\": \"2020-03-05T11:14:52Z\", \\\n                       \"output\": { \"title\": \"Check run from Jenkins!\", \\\n                                   \"summary\": \"This is a check run which has been generated from Jenkins as GitHub App\", \\\n                                   \"text\": \"...and that is awesome\"}}' https://api.github.com/repos/ / /check-runs\n            '''\n        }\n      }\n    }\n  }\n}\n\nWhat’s next\n\nGitHub Apps authentication in Jenkins is a huge improvement.  Many teams have already started using it and have helped improve it by giving pre-release feedback. There are more improvements on the way.\n\nThere’s a proposed Google Summer of Code project: GitHub Checks API for Jenkins Plugins.\nIt will look at integrating with the Checks API,\nwith a focus on reporting issues found using the warnings-ng plugin\ndirectly onto the GitHub pull requests, along with test results summary on GitHub.\nHopefully it will make the Pipeline example below much simpler for Jenkins users :)\nIf you want to get involved with this, join the GSoC Gitter channel\nand ask how you can help.","title":"GitHub App authentication support released","tags":["github","github-branch-source","pipeline","announcement"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja","twitter":"Tjaynz"}]}},{"node":{"date":"2020-03-30T00:00:00.000Z","id":"479ec095-b427-5e47-95a5-1bca6fbc97c5","slug":"/blog/2020/03/30/azure-key-vault-cred-provider/","strippedHtml":"Azure Key Vault is a product for securely managing keys, secrets and certificates.\n\nI’m happy to announce two new features in the Azure Key Vault plugin:\n\na credential provider to tightly link Jenkins and Azure Key Vault.\n\nhuge thanks to Jie Shen for contributing this\n\nintegration with the configuration-as-code plugin.\n\nThese changes were released in v1.8 but make sure to run the latest version of the plugin, there has been some fixes since then.\n\nSome advantages of using the credential provider rather than your own scripts:\n\nyour Jenkins jobs consume the credentials with no knowledge of Azure Key Vault, so they stay vendor-independent.\n\nthe provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Slack Notifications plugin.\n\ncredential usage is recorded in the central Jenkins credentials tracking log.\n\nJenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Azure Key Vault while consuming other credentials from your existing providers.\n\nNote: Currently only secret text credentials are supported via the credential provider, you can use the configuration-as-code integration to load the secret from Azure Key Vault into the System Credential Provider to work around this limitation.\n\nGetting started\n\nInstall the Azure Key Vault plugin\n\nThen you will need to configure the plugin.\n\nAzure authentication\n\nThere’s two types of authentication you can use 'Microsoft Azure Service Principal' or 'Managed Identities for Azure Resources'\n\nThe easiest one to set this up quickly with is the 'Microsoft Azure Service Principal',\n\n$ az ad sp create-for-rbac --name http://service-principal-name\nCreating a role assignment under the scope of \"/subscriptions/ff251390-d7c3-4d2f-8352-f9c6f0cc8f3b\"\n  Retrying role assignment creation: 1/36\n  Retrying role assignment creation: 2/36\n{\n  \"appId\": \"021b5050-9177-4268-a300-7880f2beede3\",\n  \"displayName\": \"service-principal-name\",\n  \"name\": \"http://service-principal-name\",\n  \"password\": \"d9d0d1ba-d16f-4e85-9b48-81ea45a46448\",\n  \"tenant\": \"7e593e3e-9a1e-4c3d-a26a-b5f71de28463\"\n}\n\nIf this doesn’t work then take a look at the Microsoft documentation for creating a service principal.\n\nNote: for production 'Managed Identities for Azure Resources' is more secure as there’s no password involved and you don’t need to worry about the service principal’s password or certificate expiring.\n\nVault setup\n\nYou need to create a vault and give your service principal access to it:\n\nRESOURCE_GROUP_NAME=my-resource-group\naz group create --location uksouth --name $RESOURCE_GROUP_NAME\n\nVAULT=my-vault # you will need a unique name for the vault\naz keyvault create --resource-group $RESOURCE_GROUP_NAME --name $VAULT\naz keyvault set-policy --resource-group $RESOURCE_GROUP_NAME --name $VAULT \\\n  --secret-permissions get list --spn http://service-principal-name\n\nJenkins credential\n\nThe next step is to configure the credential in Jenkins:\n\nclick 'Credentials'\n\nclick 'System' (it’ll appear below the Credentials link in the side bar)\n\nclick 'Global credentials (unrestricted)'\n\nclick 'Add Credentials'\n\nselect 'Microsoft Azure Service Principal'\n\nfill out the form from the credential created above, appId is 'Client ID', password is 'Client Secret'\n\nclick 'Verify Service Principal', you should see 'Successfully verified the Microsoft Azure Service Principal'.\n\nclick 'Save'\n\nJenkins Azure Key Vault plugin configuration\n\nYou now have a credential you can use to interact with Azure resources from Jenkins, now you need to configure the plugin:\n\ngo back to the Jenkins home page\n\nclick 'Manage Jenkins'\n\nclick 'Configure System'\n\nsearch for 'Azure Key Vault Plugin'\n\nenter your vault url and select your credential\n\nclick 'Save'\n\nStore a secret in Azure Key Vault\n\nFor the step after this you will need a secret, so let’s create one now:\n\n$ az keyvault secret set --vault-name $YOUR_VAULT --name secret-key --value my-super-secret\n\nCreate a pipeline\n\nInstall the Pipeline plugin if you don’t already have it.\n\nFrom the Jenkins home page, click 'New item', and then:\n\nenter a name, i.e. 'key-vault-test'\n\nclick on 'Pipeline'\n\nadd the following to the pipeline definition:\n\n// Declarative //\npipeline {\n  agent any\n  environment {\n    SECRET_KEY = credentials('secret-key')\n  }\n  stages {\n    stage('Foo') {\n      steps {\n        echo SECRET_KEY\n        echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n      }\n    }\n  }\n}\n\n// Scripted //\nwithCredentials([string(credentialsId: 'secret-key', variable: 'SECRET_KEY')]) {\n    echo SECRET_KEY\n    echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n}\n\nYou have now successfully retrieved a credential from Azure Key Vault using native Jenkins credentials integration.\n\nconfiguration-as-code integration\n\nThe Configuration as Code plugin has been designed as an opinionated way to configure Jenkins based on human-readable declarative configuration files. Writing such a file should be easy without being a Jenkins expert.\n\nFor many secrets the credential provider is enough,\nbut when integrating with other plugins you will likely need more than string credentials.\n\nYou can use the configuration-as-code plugin (aka JCasC) to allow integrating with other credential types.\n\nconfigure authentication\n\nAs the JCasC plugin runs during initial startup the Azure Key Vault credential provider needs to be configured before JCasC runs during startup.\n\nThe easiest way to do that is via environment variables set before Jenkins starts up:\n\nexport AZURE_KEYVAULT_URL=https://my.vault.azure.net\nexport AZURE_KEYVAULT_SP_CLIENT_ID=...\nexport AZURE_KEYVAULT_SP_CLIENT_SECRET=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\n\nSee the azure-keyvault documentation for other authentication options.\n\nYou will now be able to refer to Azure Key Vault secret IDs in your jenkins.yaml file:\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n        - usernamePassword:\n            description: \"GitHub\"\n            id: \"jenkins-github\"\n            password: \"${jenkins-github-apikey}\"\n            scope: GLOBAL\n            username: \"jenkinsadmin\"\n\nThanks for reading, send feedback on twitter using the tweet button in the top right, any issues or feature requests use GitHub issues.","title":"Introducing the Azure Key Vault Credentials Provider for Jenkins","tags":["jenkins","pipeline","security","azure","credentials","credential-provider","configuration-as-code"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja","twitter":"Tjaynz"}]}}]}},"pageContext":{"author":"timja","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}