{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/authors/rtyler//page/4",
    "result": {"data":{"author":{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"},"allBlog":{"edges":[{"node":{"date":"2016-04-22T00:00:00.000Z","id":"be010022-b98d-5767-afad-a1578cc4e23f","slug":"/blog/2016/04/22/possible-infra-compromise/","strippedHtml":"Last week, the infrastructure team identified the potential compromise of a key\ninfrastructure machine. This compromise could have taken advantage of, what\ncould be categorized as, an attempt to target contributors with elevated\naccess. Unfortunately, when facing the uncertainty of a potential compromise,\nthe safest option is to treat it as if it were an actual incident, and react\naccordingly. The machine in question had access to binaries published to our\nprimary and secondary mirrors, and to contributor account information.\n\nSince this machine is not the source of truth for Jenkins binaries, we verified\nthat the files distributed to Jenkins users: plugins, packages, etc, were not\ntampered with. We cannot, however, verify that contributor account information\nwas not accessed or tampered with and, as a proactive measure, we are issuing a\npassword reset for all contributor accounts. We have also spent significant effort\nmigrating all key services off of the potentially compromised machine to\n(virtual) hardware so the machine can be re-imaged or decommissioned entirely.\n\nWhat you should do now\n\nIf you have ever filed an issue in JIRA,\nedited a wiki page, released a plugin or\notherwise created an account via the Jenkins\nwebsite, you have a Jenkins community account. You should be receiving a\npassword reset email shortly, but if you have re-used your Jenkins account\npassword with other services we strongly encourage you to update your passwords\nwith those other services.  If you’re not already using one, we also encourage\nthe use of a password manager for generating and managing service-specific\npasswords.\n\nThe generated password sent out is temporary and will expire if you do not\nuse it to update your account. Once it expires you will need recover your\naccount with the password reset\nin the accounts app.\n\nThis does not apply to your own Jenkins installation, or any account that you\nmay use to log into it. If you do not have a Jenkins community account, there is\nno action you need to take.\n\nWhat we’re doing to prevent events like this in the future\n\nAs stated above, the potentially compromised machine is being removed from our\ninfrastructure. That helps address the immediate problem but doesn’t put\nguarantees in place for the future. To help prevent potential issues in the\nfuture we’re taking the following actions:\n\nIncorporating more security policy enforcement into our\nPuppet-driven infrastructure. Without a\nconfiguration management tool enforcing a given state for some legacy services,\nuser error and manual mis-configurations can adversely affect project security.\nAs of right now, all key services are managed by Puppet.\n\nBalkanizing our machine and permissions model more. The machine affected was\nliterally the first independent (outside of Sun) piece of project\ninfrastructure and like many legacy systems, it grew to host a multitude of\nservices. We are rapidly evolving away from that model with increasing levels\nof user and host separation for project services.\n\nIn a similar vein, we have also introduced a trusted zone in our\ninfrastructure which is not routable on the public internet, where sensitive\noperations, such as generating update center information, can be managed and\nsecured more effectively.\n\nWe are performing an infrastructure permissions audit. Some portions of our\ninfrastructure are 6+ years old and have had contributors come and go. Any\ninactive users with unnecessarily elevated permissions in the project\ninfrastructure will have those permissions revoked.\n\nI would like to extend thanks, on behalf of the Jenkins project, to\nCloudBees for their help in funding and\nmigrating this infrastructure.\n\nIf you have further questions about the Jenkins project infrastructure, you can\njoin us in the #jenkins-infra channel on Freenode\nor in an Infrastructure Q&A session I’ve scheduled for next Wednesday (April\n27) at 20:00 UTC (12:00 PST).","title":"Possible Jenkins Project Infrastructure Compromise","tags":["infra","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-04-15T00:00:00.000Z","id":"fa2f2d1b-91d5-5e2e-9783-72c7059face6","slug":"/blog/2016/04/15/the-need-for-pipeline/","strippedHtml":"This is a cross-post of\nan article authored\nby Viktor Farcic on the\nCloudBees blog. Viktor is also the author\nof The DevOps 2.0 Toolkit, which\nexplores Jenkins, the Pipeline plugin, and the ecosystem\naround it in much more detail.\n\nOver the years, Jenkins has become the undisputed ruler among continuous\nintegration (CI), delivery and deployment (CD) tools. It, in a way, defined the\nCI/CD processes we use today. As a result of its leadership, many other products\nhave tried to overthrow it from its position. Among others, we got Bamboo and\nTeam City attempting to get a piece of the market. At the same time, new\nproducts emerged with a service approach (as opposed to on-premises). Some of\nthem are Travis, CircleCI and Shippable. Be that as it may, none managed to get\neven close to Jenkins' adoption. Today, depending on the source we use, Jenkins\nholds between 50-70% of the whole CI/CD tools market. The reason behind such a\nhigh percentage is its dedication to open source principles set from the very\nbeginning by Kohsuke Kawaguchi. Those same principles were the reason he forked\nJenkins from Hudson. The community behind the project, as well as commercial\nentities behind enterprise versions, are continuously improving the way it works\nand adding new features and capabilities. They are redefining not only the way\nJenkins behaves but also the CI/CD practices in a much broader sense. One of\nthose new features is the Jenkins Pipeline plugin. Before we\ndive into it, let us take a step back and discuss the reasons that led us to\ninitiate the move away from Freestyle jobs and towards the Pipeline.\n\nThe Need for Change\n\nOver time, Jenkins, like most other self-hosted CI/CD tools, tends to accumulate\na vast number of jobs. Having a lot of them causes quite an increase in\nmaintenance cost. Maintaining ten jobs is easy. It becomes a bit harder (but\nstill bearable) to manage a hundred. When the number of jobs increases to\nhundreds or even thousands, managing them becomes very tedious and time\ndemanding.\n\nIf you are not proficient with Jenkins (or other CI/CD tools) or you do not work\nfor a big project, you might think that hundreds of jobs is excessive. The truth\nis that such a number is reached over a relatively short period when teams\nare practicing continuous delivery or deployment. Let’s say that an average\nCD flow has the following set of tasks that should be run on each commit:\nbuilding, pre-deployment testing, deployment to a staging environment,\npost-deployment testing and deployment to production. That’s five groups of\ntasks that are often divided into, at least, five separate Jenkins jobs. In\nreality, there are often more than five jobs for a single CD flow, but let\nus keep it an optimistic estimate. How many different CD flows does a medium\nsized company have? With twenty, we are already reaching a three digits\nnumber. That’s quite a lot of  jobs to cope with even though the estimates\nwe used are too optimistic for all but the smallest entities.\n\nNow, imagine that we need to change all those jobs from, let’s say, Maven to\nGradle. We can choose to start modifying them through the Jenkins UI, but that\ntakes too much time. We can apply changes directly to Jenkins XML files that\nrepresent those jobs but that is too complicated and error prone. Besides,\nunless we write a script that will do the modifications for us, we would\nprobably not save much time with this approach. There are quite a few plugins\nthat can help us to apply changes to multiple jobs at once, but none of them is\ntruly successful (at least among free plugins). They all suffer from one\ndeficiency or another. The problem is not whether we have the tools to perform\nmassive changes to our jobs, but whether jobs are defined in a way that they can\nbe easily maintained.\n\nBesides the sheer number of Jenkins jobs, another critical Jenkins' pain point\nis centralization. While having everything in one location provides a lot of\nbenefits (visibility, reporting and so on), it also poses quite a few\ndifficulties. Since the emergence of agile methodologies, there’s been a huge\nmovement towards self-sufficient teams. Instead of horizontal organization with\nseparate development, testing, infrastructure, operations and other groups, more\nand more companies are moving (or already moved) towards self-sufficient teams\norganized vertically. As a result, having one centralized place that defines all\nthe CD flows becomes a liability and often impedes us from splitting teams\nvertically based on projects. Members of a team should be able to collaborate\neffectively without too much reliance on other teams or departments. Translated\nto CD needs, that means that each team should be able to define the deployment\nflow of the application they are developing.\n\nFinally, Jenkins, like many other tools, relies heavily on its UI. While that is\nwelcome and needed as a way to get a visual overview through dashboards and\nreports, it is suboptimal as a way to define the delivery and deployment flows.\nJenkins originated in an era when it was fashionable to use UIs for everything.\nIf you worked in this industry long enough you probably saw the swarm of tools\nthat rely completely on UIs, drag & drop operations and a lot of forms that\nshould be filled. As a result, we got tools that produce artifacts that cannot\nbe easily stored in a code repository and are hard to reason with when anything\nbut simple operations are to be performed. Things changed since then, and now we\nknow that many things (deployment flow being one of them) are much easier to\nexpress through code. That can be observed when, for example, we try to define a\ncomplex flow through many Jenkins jobs. When deployment complexity requires\nconditional executions and some kind of a simple intelligence that depends on\nresults of different steps, chained jobs are truly complicated and often\nimpossible to create.\n\nAll things considered, the major pain points Jenkins had until recently are as\nfollows.\n\nTendency to create a vast number of jobs\n\nRelatively hard and costly maintenance\n\nCentralization of everything\n\nLack of powerful and easy ways to specify deployment flow through code\n\nThis list is, by no means, unique to Jenkins. Other CI/CD tools have at least\none of the same problems or suffer from deficiencies that Jenkins solved a long\ntime ago. Since the focus of this article is Jenkins, I won’t dive into a\ncomparison between the CI/CD tools.\n\nLuckily, all those, and many other deficiencies are now a thing of the past.\nWith the emergence of the\nPipeline\nplugin and many others that were created on\ntop of it, Jenkins entered a new era and proved itself as a dominant player in\nthe CI/CD market. A whole new ecosystem was born, and the door was opened for\nvery exciting possibilities in the future.\n\nBefore we dive into the Jenkins Pipeline and the toolset that surrounds it, let\nus quickly go through the needs of a modern CD flow.\n\nContinuous Delivery or Deployment Flow with Jenkins\n\nWhen embarking on the CD journey for the first time, newcomers tend to think\nthat the tasks that constitute the flow are straightforward and linear. While\nthat might be true with small projects, in most cases things are much more\ncomplicated than that. You might think that the flow consists of building,\ntesting and deployment, and that the approach is linear and follows the\nall-or-nothing rule. Build invokes testing and testing invokes deployment. If\none of them fails, the developer gets a notification, fixes the problem and\ncommits the code that will initiate the repetition of the process.\n\nIn most instances, the process is far more complex. There are many tasks to run,\nand each of them might produce a failure. In some cases, a failure should only\nstop the process. However, more often than not, some additional logic should be\nexecuted as part of the after-failure cleanup. For example, what happens if\npost-deployment tests fail after a new release was deployed to production? We\ncannot just stop the flow and declare the build a failure. We might need to\nrevert to the previous release, rollback the proxy, de-register the service and\nso on. I won’t go into many examples of situations that require complex flow\nwith many tasks, conditionals that depend on results, parallel execution and so\non. Instead, I’ll share a diagram of one of the flows I worked on.\n\nSome tasks are run in one of the testing servers (yellow) while others are run\non the production cluster (blue). While any task might produce an error, in some\ncases such an outcome triggers a separate set of tasks. Some parts of the flow\nare not linear and depend on task results. Some tasks should be executed in\nparallel to improve the overall time required to run them. The list goes on and\non. Please note that this discussion is not about the best way to execute the\ndeployment flow but only a demonstration that the complexity can be, often, very\nhigh and cannot be solved by a simple chaining of Freestyle jobs. Even in cases\nwhen such chaining is possible, the maintenance cost tends to be very high.\n\nOne of the CD objectives we are unable to solve through chained jobs, or is\nproved to be difficult to implement, is conditional logic. In many cases, it is\nnot enough to simply chain jobs in a linear fashion. Often, we do not want only\nto create a job A that, once it’s finished running, executes job B, which, in\nturn, invokes job C. In real-world situations, things are more complicated than\nthat. We want to run some tasks (let’s call them job A), and, depending on the\nresult, invoke jobs B1 or B2, then run in parallel C1, C2 and C3, and, finally,\nexecute job D only when all C jobs are finished successfully. If this were a\nprogram or a script, we would have no problem accomplishing something like that,\nsince all modern programming languages allow us to employ conditional logic in a\nsimple and efficient way. Chained Jenkins jobs, created through its UI, pose\ndifficulties to create even a simple conditional logic. Truth be told, some\nplugins can help us with conditional logic. We have Conditional Build Steps,\nParameterised Trigger, Promotions and others. However, one of the major issues\nwith these plugins is configuration. It tends to be scattered across multiple\nlocations, hard to maintain and with little visibility.\n\nResource allocation needs a careful thought and is, often, more complicated than\na simple decision to run a job on a predefined agent. There are cases when agent\nshould be decided dynamically, workspace should be defined during runtime and\ncleanup depends on a result of some action.\n\nWhile a continuous deployment process means that the whole pipeline ends with\ndeployment to production, many businesses are not ready for such a goal or have\nuse-cases when it is not appropriate. Any other process with a smaller scope, be\nit continuous delivery or continuous integration, often requires some human\ninteraction. A step in the pipeline might need someone’s confirmation, a failed\nprocess might require a manual input about reasons for the failure, and so on.\nThe requirement for human interaction should be an integral part of the pipeline\nand should allow us to pause, inspect and resume the flow. At least, until we\nreach the true continuous deployment stage.\n\nThe industry is, slowly, moving towards microservices architectures. However,\nthe transformation process might take a long time to be adopted, and even more\nto be implemented. Until then, we are stuck with monolithic applications that\noften require a long time for deployment pipelines to be fully executed. It is\nnot uncommon for them to run for a couple of hours, or even days. In such cases,\nfailure of the process, or the whole node the process is running on, should not\nmean that everything needs to be repeated. We should have a mechanism to\ncontinue the flow from defined checkpoints, thus avoiding costly repetition,\npotential delays and additional costs. That is not to say that long-running\ndeployment flows are appropriate or recommended. A well-designed CD process\nshould run within minutes, if not seconds. However, such a process requires not\nonly the flow to be designed well, but also the architecture of our applications\nto be changed. Since, in many cases, that does not seem to be a viable option,\nresumable points of the flow are a time saver.\n\nAll those needs, and many others, needed to be addressed in Jenkins if it was to\ncontinue being a dominant CI/CD tool. Fortunately, developers behind the project\nunderstood those needs and, as a result, we got the Jenkins Pipeline plugin. The\nfuture of Jenkins lies in a transition from Freestyle chained jobs to a single\npipeline expressed as code. Modern delivery flows cannot be expressed and easily\nmaintained through UI drag 'n drop features, nor through chained jobs. They can\nneither be defined through YAML (Yet Another Markup Language) definitions\nproposed by some of the newer tools (which I’m not going to name). We need to go\nback to code as a primary way to define not only the applications and services\nwe are developing but almost everything else. Many other types of tools adopted\nthat approach, and it was time for us to get that option for CI/CD processes as\nwell.","title":"The Need For Jenkins Pipeline","tags":["jenkins2","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-04-07T00:00:00.000Z","id":"e79f0919-bcdb-509d-81fc-767eb7210b3a","slug":"/blog/2016/04/07/2.0-release-candidate/","strippedHtml":"Those who fervently watch the\njenkinsci-dev@\nlist, like I do, may have caught Daniel\nBeck 's email today which quietly referenced a significant milestone on the\nroad to 2.0 which has been reached: the first 2.0 release\ncandidate is here!\n\nThe release candidate process, in short, is the final stabilization and testing\nperiod before the final release of Jenkins 2.0. If you have the\ncycles to help test, please download the release candidate and give\nus your feedback as soon as possible!\n\nThe release candidate process also means that changes targeting release after\n2.0 can start landing in the master branch, laying the groundwork 2.1 and\nbeyond.\n\nI pushed the merge to 'master'. So anything targeting 2.1+ can be now proposed\nin pull requests to that branch.\n\nAnything happening on '2.0' branch will be limited to critical fixes for the 2.0\nrelease specifically.\n\n— Daniel Beck\n\nCompared to the\n2.0 beta release, the first\nrelease candidate has a number of fixes for issues discovered in the alpha and beta\nprocess. Most notable perhaps is the stabilization of a system property which\nconfiguration management tools, like Puppet/Chef/Ansible/etc, can use to suppress\nthe user-friendly Getting Started wizard. Since users of those tools\nhave alternative means of ensuring security and correctness of their Jenkins\ninstallations, the out-of-the-box experience can be skipped.\n\nBased on our\nrough\ntimeline this gives us a couple weeks to test the release candidates and get\nready for a big exciting release of 2.0 at the end of April!","title":"Jenkins 2.0 Release Candidate available!","tags":["jenkins2"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-02-29T00:00:00.000Z","id":"ae0d63e1-b43b-5b6d-8c92-24abb7eb3f56","slug":"/blog/2016/02/29/jenkins2-alphas/","strippedHtml":"After first\nannouncing the\nJenkins 2.0 effort last fall, we are pleased to announce the availability of\nthe first Jenkins 2.0 alpha builds. For months we have had builds\navailable from the jenkins_2.0\nbranch of development, but the \"alpha\" builds mark Jenkins 2.0 being\nofficially made available for testing and feedback.\n\nDownload 2.0-alpha now\n\nJenkins 2.0 Highlights\n\nPipeline as Code\n\nThe new Pipeline functionality in Jenkins allows you\nto define configuration as code, which can be checked in and version controlled\nalong with the rest of your project’s source code.\n\nDefining your pipeline’s configuration as code makes it easier to create a\nsimple \"build and test\" pipeline, while enabling more advanced and complex\npipelines through the expressive Groovy-based domain specific language.\n\nOut of the box experience\n\nFor new users, Jenkins 2.0 starts off with set of recommended plugins, seen in\nthe image above,  to help get you started with the right set of tools to get up\nand running with Jenkins quickly.\n\nFor the more adventurous users, the Jenkins 2.0 initial setup process\nalso allows you to pick and choose exactly the plugins you want to meet\nyour specific needs.\n\nTotally backwards compatible\n\nJenkins 2.0 is a drop-in replacement of the Jenkins 1.x series of releases\nand fully backward compatible. There will be practically no reason not to\nupgrade once 2.0 is released in the next couple of months.\n\nTell us what you think!\n\nWe’re very interested in your feedback on what you think of the Jenkins 2.0\npreview releases.\n\nIf you use Twitter, you can leave us some feedback\non\nTwitter\n\nOur jenkinsci-users\nmailing list is also available for feedback in\nthis thread\n\nAnd of course, since this is a preview release, if you find any issues please\nreport them to our\nissue tracker\nto the JENKINS project.","title":"Jenkins 2.0 alphas released","tags":["core","jenkins2"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-02-06T00:00:00.000Z","id":"9cf2e2c2-42c4-541c-a75c-dd611f27f560","slug":"/blog/2016/02/06/scale14x-conference-report/","strippedHtml":"Historically January has always been a very big month for the Jenkins\ncommunity. Between FOSDEM\nSouthern California Linux Expo (also known as\nSCaLE) we seem to hand out more stickers during the last week in January than\nany other week of the year.\n\nThis year’s SCaLE 14X conference finally outgrew the LAX Hilton in Los Angeles,\nwhere it had been hosted in years past, and moved over to the Pasadena\nConvention Center in Pasadena California. While the organizers of the\nconference expanded their scope, so did the Jenkins project!\n\nIn addition to our normal Jenkins stickers, we also had some special edition\nstickers with special\nlogos to give away this year, namely:\n\nAngry Jenkins\n\nGeneral Jenkins\n\nSuperhero Jenkins\n\n\"Cute\" Jenkins\n\nNinja Jenkins\n\nTo accompany the stickers we also had both blue Jenkins and red \"Angry Jenkins\"\npins. Savvy Jenkins users might recognize \"Angry Jenkins\" from the Jenkins\nserver’s internal 500 page; fortunately however very few people that came by\nthe booth to say 'hello' were familiar with Angry Jenkins.\n\nTalking Points\n\nAside from talking about the cool stickers and pins, we spent the vast\nmajority of time talking about Jenkins to two groups of people:\n\nthose who never had actually used Jenkins, even if they had heard of it\n\nusers who knew plenty about Jenkins but hadn’t actually heard about some of\nthe Jenkins 2.0 Proposals.\n\nAnecdotally, it seemed like most of the people that I talked to about \"Jenkins\n2.0\" were pretty excited about the Jenkinsfile idea and starting to define\ntheir build processes and delivery pipelines as code\nin their source repositories.\n\nPerhaps more importantly though, we spoke with many users about where Jenkins\nis causing them pain or frustration. Speaking directly with users at events\nlike SCaLE or Jenkins Area Meetups is always fun, having a high-bandwidth\nconversation about what we can do better and/or offering solutions/workarounds\nto hopefully relieve some pain-points.\n\nIn one such case, a contributor approached me and complained that he had\nemailed the developers' mailing list and frustratingly never actually received\na response. Comically enough, neither of us were able to find the email he had\nsent the mailing list (whoops!) but because of the dynamic nature of booth-duty\nat SCaLE, we got him squared away with a repository to contribute a\nJenkins Charm for the Juju\nconfiguration management tool.\n\nJammin'\n\nAmong the booth-duty highlights was meeting a few folks who were interested on\nstarting a southern California Jenkins meetup. Over the days following the\nconference, and a brief discussion on the\njenkinsci-jam@\nmailing list, and the\nLos Angeles\nJenkins Area Meetup was born!\n\nI’m looking forward to the meetup growing over the next couple months and\nhelping build a stronger local Jenkins community in Southern Califonia for the\nother 51 weeks a year that SCaLE isn’t happening.\n\nSCaLE is one of my more favorite\nopen source conferences, the positive community in attendance, a kid-friendly\natmosphere (\"Game Night\" was a blast) and the broad spectrum of sessions\navailable make it a great way to spent the weekend in southern California.\n\nWe hope to see you there again next year!","title":"SCaLE 14x Conference Report","tags":["scale","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-01-07T00:00:00.000Z","id":"89aaaaa5-cde6-5023-9381-353a81e305b6","slug":"/blog/2016/01/07/official-code-of-conduct/","strippedHtml":"Over the past couple months, we have been working on a long overdue\nCode of Conduct for the Jenkins project (meeting minutes\nhere\nand\nhere).\nFollowing in the footsteps of other projects like the\nApache Software\nFoundation, Go lang and\ncountless others, we have adopted this\ncode of conduct to help set guidelines for what behaviors are acceptable, and\nwhat behaviors are not, when acting within the Jenkins community or on behalf\nof the Jenkins project.\n\nI would like to extend our gratitude to the authors of\nthe Contributor Covenant who provided us\nwith a very good and mostly finished Code of Conduct template. We have\nadapted the covenant to meet the unique needs of a multifaceted\nproject like Jenkins.\n\nThe document itself is broken down into three sections, all of which I\nencourage you to read:\n\nThe code of conduct itself\n\nInstructions on how to report problems\n\nAn outline of how violations will be handled\n\nSimilar to many other process and philisophical documents in the Jenkins\nproject, the document is not etched in stone and is therefore intended to be\nupdated. If you’re interested in participating in the discussion about this,\nand other topics around how the Jenkins project operates, I invite you to the\n#jenkins-community IRC channel on the Freenode\nnetwork or to our regularly scheduled\ngovernance\nmeetings.","title":"Jenkins Code of Conduct","tags":null,"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-01-05T00:00:00.000Z","id":"fb18b31a-ae20-5fc0-b8ee-ee41aae1e2b0","slug":"/blog/2016/01/05/new-website/","strippedHtml":"When I first started working on the Jenkins\nwebsite, then called by a different name, I selected\nDrupal, an extensible content management system, to\nget the job done. Like Jenkins itself, Drupal is easy to set up, install\nplugins and authoring content is done in a web UI. For the past seven years Drupal\nhas served us well, but it is time to move on to something better suited for our needs.\n\nThe general requirements for something newer were:\n\nEasy to edit and create content\n\nChanges to content should be tracked and reviewable\n\nAny Jenkins contributor should be able to participate\n\nSupport mixed content types\n\nThe consensus was that a statically-generated site, with raw content hosted on\nGitHub, would meet the majority of the \"ease-of-use\" type requirements. The\nremainder could be addressed depending on the implementation. A couple of years\nago I tried to rebuild the site with static content using\nJekyll, commonly used by\nGitHub Pages, but the effort stalled as I ran\ninto challenges with the mixture of content types we need to manage (stories,\nevents, pages, people, etc).\n\nHaving recently discovered Awestruct, a more\nversatile and sophisticated static-site generator that powers sites like\nasciidoctor.org, I ventured down that path.\n\nTo make a long story short, over the holiday break I finally pulled the trigger\nand switched jenkins-ci.org over to the new site. In fact, the page you’re\nreading right now was authored and published via our new\njenkins static site.\n\nIf you look at the bottom left-hand corner of this page\nthere is a link titled \"Improve this page\" which will take you directly to\nGitHub to edit this post!\n\nWe have many more improvements to come for the Jenkins website, which are\ntracked\nin JIRA, but for now I invite members of the Jenkins community to help curate,\ncorrect and create new blog posts and pages for jenkins-ci.org!\n\nCheck it all out on GitHub","title":"A new Jenkins website","tags":["www"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-01-04T00:00:00.000Z","id":"384f4bba-69ff-5581-81d1-4fe0ea905976","slug":"/blog/2016/01/04/jenkins-at-scale14x/","strippedHtml":"For the past few years, a couple members of the Jenkins project have made the\ntrip to Los Angeles for the\nSouthern California Linux Expo.\nDespite the name it’s a fairly broad open source technology conference and\nsince it is hosted prior to FOSDEM, it’s also a good\nconference to get us in the open source mood after the holiday break.\n\nUnlike previous years, when SCaLE was hosted at the LAX Hilton, this year it has\ngrown and moved to the\nPasadena Convention\nCenter. There, as with previous years, we’ll have a table in the expo hall with plenty of\nstickers and perhaps some other forms of swag available for devotees to\ncollect.\n\nThe expo hall will be open January 23rd and January 24th, and a few Jenkins\ncontributors will be there to ask questions to, talk about CI/CD and hand out\nstickers.\n\nAdditionally, I have a presentation on\nSaturday, January 23rd titled\n\" Continuous\nDelivery of Infrastructure with Jenkins\"\n\nTalk abstract \"\"\nIn this talk we will review continuous delivery concepts and put them into\npractice by building a continuous delivery pipeline with Jenkins to test, stage\nand deploy to infrastructure code to production. Reducing the effort, error\nrate and time it takes to deploy a configuration to change to production means\nless time fighting fires and more time doing what you want.\n\"\"\n\nDuring the talk I’ll be highlighting some of the positive, and negative,\npatterns used by the Jenkins\ninfrastructure team to manage, test and deliver the Jenkins project’s own\ninfrastructure. Sort of a followup from my\n2014 PuppetConf talk about\nmigrating Jenkins infrastructure from controllerless\nPuppet to a\nPuppet Enterprise oriented\ninstallation.\n\nIf you’re in the LA area, we hope to see you for SCaLE 14X in Pasadena!","title":"Jenkins at SCaLE 14x","tags":["meetup","jam"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}}]}},"pageContext":{"author":"rtyler","limit":8,"skip":24,"numPages":21,"currentPage":4}},
    "staticQueryHashes": ["3649515864"]}