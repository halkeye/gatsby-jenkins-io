{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/authors/uhafner",
    "result": {"data":{"author":{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/uhafner.jpg"},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/authors/uhafner","twitter":null},"allBlog":{"edges":[{"node":{"date":"2020-12-03T00:00:00.000Z","id":"2b02956c-1094-559a-9408-ef0c76b5fdb1","slug":"/blog/2020/12/03/election-results/","strippedHtml":"The Jenkins community has recently completed the 2020 elections.\nOn behalf of the Jenkins community and the elections committee,\nwe congratulate all newly elected board members and officers!\nWe also thank all candidates and voters who participated this year.\n\nElection results:\n\nGavin Mogan and Marky Jackson will join\nKohsuke Kawaguchi, Ullrich Hafner and Oleg Nenashev\non the Jenkins Governance Board\n\nTim Jacomb was elected as Release Officer\n\nMarky Jackson will become the new Events Officer (uncontested)\n\nOlivier Vernin will continue in the role of Infrastructure Officer for another term (uncontested)\n\nDaniel Beck will continue in the role of Security Officer for another term (uncontested)\n\nMark Waite will continue in the role of Documentation Officer for another term (uncontested)\n\nThe board positions and officer roles are an essential part of Jenkins' community governance and well-being,\nand we are excited to see contributors taking these roles.\nIf you are interested to learn more, please see the blog post below.\n\nGovernance Board election details\n\nThis year we had nine candidates participating in Jenkins Governance Board elections:\nAndrey Falko, Ewelina Wilkosz, Frederic Gurr, Gavin Mogan, Justin Harringa,\nMark Waite, Marky Jackson, Steven Terrana, and Zhao Xiaojie (Rick).\nAll of them are awesome community leaders who actively contribute to the Jenkins project and\nrepresent its users.\nIt would be an honor to have them on the Jenkins board.\nRegardless of the election results, we appreciate their participation and the time they invested in these elections.\n\nThis year we were electing 2 governance board members.\nWe were using the Condorcet Internet Voting Service that allows voters to rank their choices rather than just picking their one favorite choice.\nYou can find full voting results here :\n\nMark Waite  (Condorcet winner: wins contests with all other choices)\n\nMarky Jackson loses to Mark Waite by 48–12\n\nGavin Mogan loses to Mark Waite by 51–10, loses to Marky Jackson by 31–20\n\nEwelina Wilkosz  loses to Mark Waite by 48–14, loses to Gavin Mogan by 29–28\n\nJustin Harringa  loses to Mark Waite by 51–11, loses to Ewelina Wilkosz by 35–16\n\nSteven Terrana  loses to Mark Waite by 47–16, loses to Justin Harringa by 20–19\n\nZhao Xiaojie (Rick)  loses to Mark Waite by 57–5, loses to Steven Terrana by 25–24\n\nFrederic Gurr  loses to Mark Waite by 52–10, loses to Zhao Xiaojie (Rick) by 25–24\n\nAndrey Falko  loses to Mark Waite by 56–6, loses to Frederic Gurr by 26–13\n\nAlthough Mark Waite came first in the voting results,\nbeing on the board would violate the Corporate Involvement clause which states that\n\"the number of board members affiliated with one company must be less than 50%\".\nMark will continue to be Documentation officer.\nRegardless of his official role, Mark has been leading many initiatives and helping a lot with various aspects of the community governance.\n\nCongratulations to Marky and Gavin, and thanks to all candidates!\nAll new board members are elected for a 2-year term unless they decide to step down earlier.\nThe estimated end of the term for them is December 02, 2022.\nWe would also like to thank Alex Earl and R. Tyler Croy who step down from the Jenkins Governance Board this year.\nThanks to them for all contributions and for continued community leadership.\n\nStatement from Marky Jackson:\n\nIt is a tremendous honor to be elected to this roles. I am so humbled.\nBeing part of this community is a fantastic opportunity that I have had. It has given me so many joys. Whether helping to foster community collaboration, working on the roadmap, leading various SIG’s or helping meetups or conferences, this community has given me so much.\nMy goals are bridging the Jenkins project with other interoperability projects, defining the roadmap, achieving roadmap goals, continuing to help meetups thrive, and our conferences focus on the community. I want to ensure we are transparent in our goals and how we achieved them. I want to continue to build up a welcoming community that holds diversity and inclusion at the forefront.\nI look forward to working with the other members of the Governance Board to continue to deliver on the incredible things this project is known for.\n\n— Marky Jackson, Jenkins Governance Board Member and Events Officer\n\nStatement from Gavin Mogan:\n\nGavin here. I’m still in shock that I got voted in for the Jenkins board.\nIt felt like yesterday I just got started helping people randomly on IRC. This is truly exciting.\nI plan to continue to help out as much as I can wherever I can, just in a bit more official capacity.\nThis is truly exciting. I have no firm plans or agenda, just keep pushing advocacy and getting people to help each other in a positive and safe way.\nMy specialities lie in outside of Jenkins core, whether it be working on the plugin site, or hanging out on IRC, Gitter and Reddit helping out where I can.\n\n— Gavin Mogan, Jenkins Governance Board Member\n\nOfficer election details\n\nAll 5 officer positions were up for election this year.\nThese roles have a 1-year term, with the estimated end of term on Dec 02, 2021.\nAfter the initial review of nominations and confirmations with potential candidates,\n4 officer positions were uncontested:\n\nOlivier Vernin - Infrastructure officer.\n\nMarky Jackson - Events officer.\nMarky inherits this role from Alyssa Tong\nwho decided to step down from the officer role and to focus on the Jenkins community marketing,\nincluding Jenkins Is The Way and many other initiatives started by Alyssa.\n\nMark Waite - Documentation officer.\n\nDaniel Beck - Security officer.\n\nThanks to all Jenkins officers for their continued leadership!\nOfficers take responsibility for many day-to-day processes in the Jenkins community and lead the contributor teams working on them.\nIt requires significant time commitment, and it is not taken for granted.\n\nRelease Officer election results\n\nTim Jacomb won the biggest support as a Release officer ( voting results).\nTim will replace in this role Oliver Gondža\nwho has been leading the Release Team and the release processes since 2016 when the role was officially introduced.\n\nTim Jacomb (Condorcet winner: wins contests with all other choices)\n\nBaptiste Mathus  loses to Tim Jacomb by 40–23\n\nVictor Martinez  loses to Tim Jacomb by 38–25, loses to Baptiste Mathus by 32–31\n\nHere is a statement from Tim Jacomb:\n\nI’m excited for the year ahead, let’s see where we can take the Jenkins release area in the future.\nAs a Release Officer I would like to increase automation, ease onboarding of new contributors to the release team,\nand ensure that responsibilities rotate among people so that I wouldn’t be a bottleneck for any task.\n\n— Tim Jacomb, Jenkins Release Officer\n\nThanks to Alyssa Tong and Oliver Gondža for their long-time service as Jenkins officers!\nWe are looking to continue working with them in the Jenkins community.\nAnd congratulations to Tim Jacomb and Marky Jackson for joining the team!\n\nStatistics\n\nThis year we had 92 registered voters and around 65 actual votes.\nIt is significantly lower than in the 2019 elections when we had almost 350 voters.\nIt can be partially explained by the change of the communication process.\nThis year we decided to not use the previous voter registration system,\nand we relied on the user and developer mailing lists instead of sending messages to the entire LDAP user database.\nThis is definitely something we need to review at the retrospective.\n\nWhat’s next for the board?\n\nThe last year was awesome for the Jenkins project governance.\nWith help of many contributors and with the renewed board,\nwe have been able to facilitate many initiatives in the Jenkins project,\nfor example hosting contributor summits,\npublishing the public roadmap,\nCode of Conduct update,\nterminology changes,\nand graduation in the Continuous Delivery Foundation.\nThere is a lot more work to do to grow the community and to ensure the long term sustainability of the project.\n\nIn short term, our key priority is to organize knowledge and permission transfers to the new board members and officers so that they can be effective in their new roles.\nThe board will also focus on maintaining the Jenkins governance processes\n(meetings, budget approvals, funding, etc.) and defining the next steps and priorities.\n\nThere are many longer-term initiatives the board could facilitate:\nlong-anticipated features and architecture changes,\nchanging the Jenkins Enhancement Proposal process,\ncreating better communication channels with Jenkins users,\nand onboarding of new contributors and maintainers.\nSuch initiatives are instrumental for the evolution of the Jenkins project.\nThe ideas will be discussed in mailing lists and during governance meetings.\nIf you would like to share your vision and ideas about what’s needed in the project,\nit is definitely a great time to contribute!\n\nFeedback\n\nJenkins project plans to conduct elections every year.\nWe will appreciate and welcome any feedback regarding the election process so that we can improve the process.\nWe have started a Retrospective document for these elections.\nEveryone can suggest changes in this document, and we will integrate them.\nThere will be also a public retrospective review at the next Advocacy and Outreach SIG meeting on Dec 17.\n\nIf you have any private feedback you would like to share,\nplease send an email to the Jenkins Board.\nIf you would like to raise any issues about the election process,\nplease contact one of the elected Governance Board members.\n\nReferences\n\nJenkins Governance Board\n\nJenkins Board Election Process\n\nJenkins Officers\n\n2020 election announcement\n\n2020 election candidates\n\nRetrospective document","title":"2020 Jenkins Board and Officer Elections Results","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/slide_o_mix.jpg"},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix","twitter":"alexcearl"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/uhafner.jpg"},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/authors/uhafner","twitter":null}]}},{"node":{"date":"2020-03-17T00:00:00.000Z","id":"d79e4a42-13d6-5155-8cc3-c8c31c9738ff","slug":"/blog/2020/03/17/ui-plugins/","strippedHtml":"This article has been presented in an recorded online session\nduring the Jenkins 2020 UI/UX Hackfest.\n\nFor Jenkins a large number of plugins are available that visualize the results of a wide variety of build steps. There\nare plugins available to render the test results, the code coverage, the static analysis and so on. All of these plugins\ntypically pick up the build results of a given build step and show them in the user interface. In order to render these\ndetails most of the plugins use static HTML pages, since this type of user interface is the standard visualization in\nJenkins since its inception in 2007.\n\nIn order to improve the look and feel and the user experience of these plugins it makes sense to move forward and\nincorporate some modern Java Script libraries and components. Since development of Blue Ocean has been stopped (see\nJenkins mailing list post)\nplugin authors need to decide on their own, which UI technologies are helpful for that task. However, the universe of\nmodern UI components is so overwhelming that it makes sense to pick up only a small set of components that are proven\nto be useful and compatible with Jenkins underlying web technologies. Moreover, the initial setup of\nincorporating such a new component is quite large so it would be helpful if that work needs to be done only once.\n\nThis guide introduces a few UI components\nthat make sense to be used by all plugin authors in the future to provide a rich user interface for reports in Jenkins.\nIn order to simplify the usage of these libraries in the context of Jenkins as a Java based web application, these\nJava Script libraries and components have been packaged as ordinary Jenkins plugins.\n\nIn the following sections, these new components will be introduced step by step. In order to see how these components\ncan be used a plugin, I demonstrate the new features while enhancing the existing\nForensics Plugin with a new user\ninterface. Since the Warnings Next Generation Plugin also uses these new components, you can see additional examples\nin the documentation of the warnings plugin\nor in our public ci.jenkins.io instance, that\nalready is using these components in the detail views of the warnings plugin.\n\n1. New user interface plugins\n\nThe following UI components are provided as new Jenkins plugins:\n\njquery3-api-plugin :\nProvides jQuery 3 for Jenkins Plugins.\njQuery is — as described on their home page — a fast, small, and feature-rich JavaScript library. It makes things\nlike HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API\nthat works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the\nway that millions of people write JavaScript.\n\nbootstrap4-api-plugin :\nProvides Bootstrap 4 for Jenkins Plugins. Bootstrap is — according to their self-perception — the world’s most popular front-end component library to build responsive, mobile-first projects on the web. It is\nan open source toolkit for developing with HTML, CSS, and JS. Developers can quickly prototype their ideas or\nbuild entire apps with their Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful plugins\nbuilt on jQuery.\n\ndata-tables-api-plugin :\nProvides DataTables for Jenkins Plugins.\nDataTables is a plug-in for the jQuery Javascript library. It is a highly flexible tool, built upon the foundations\nof progressive enhancement, that adds all of these advanced features to any HTML table:\n\nPrevious, next and page navigation\n\nFilter results by text search\n\nSort data by multiple columns at once\n\nDOM, Javascript, Ajax and server-side processing\n\nEasily theme-able\n\nMobile friendly\n\necharts-api-plugin :\nProvides ECharts for Jenkins Plugins. ECharts is an open-sourced\nJavaScript visualization tool to create intuitive, interactive, and highly-customizable charts. It\ncan run fluently on PC and mobile devices and it is compatible with most modern\nWeb Browsers.\n\nfont-awesome-api-plugin :\nProvides Font Awesome for Jenkins Plugins. Font Awesome has vector icons and social logos,\naccording to their self-perception it is the web’s most popular icon set and toolkit. Currently, it contains more than\n1,500 free icons.\n\npopper-api-plugin\nProvides Popper.js for Jenkins Plugins. Popper can\neasily position tooltips, popovers or anything else with just a line of code.\n\nplugin-util-api-plugin : This small plugin provides\nsome helper and base classes to simplify the creation of reporters in Jenkins. This plugin also\nprovides a set of architecture rules that can be included in an architecture test suite of your plugin.\n\n2. Required changes for a plugin POM\n\nIn order to use these plugins you need to add them as dependencies in your plugin pom. You can use the following snippet\nto add them all:\n\npom.xml\n\n[...]\n\n1.0.2\n5.12.0-7\n4.4.1-10\n4.6.0-8\n1.10.20-13\n[...]\n\nio.jenkins.plugins\nplugin-util-api\n${plugin-util-api.version}\n\nio.jenkins.plugins\nfont-awesome-api\n${font-awesome-api.version}\n\nio.jenkins.plugins\nbootstrap4-api\n${bootstrap4-api.version}\n\nio.jenkins.plugins\necharts-api\n${echarts-api.version}\n\nio.jenkins.plugins\ndata-tables-api\n${data-tables-api.version}\n\n[...]\n\n[...]\n\nAlternatively, you have a look at the POM files of the\nWarnings Next Generation Plugin or the\nForensics API Plugin which already use these\nplugins.\n\n3. General structure of a reporter\n\nIn this section I will explain some fundamentals of the design of Jenkins, i.e. the Java model and the associated\nuser interface elements. If you are already familiar on how to implement the corresponding extension points of a\nreporter plugin (see section Extensibility in Jenkins'\ndeveloper guide), then you can skip this section and head directly to Section 3.1.\n\nJenkins organizes projects using the static object model structure shown in Figure 1.\n\nFigure 1. Jenkins design - high level view of the Java model\n\nThe top level items in Jenkins user interface are jobs (at least the top level items\nwe are interested in). Jenkins contains several jobs of different types (Freestyle jobs, Maven Jobs, Pipelines, etc.).\n\nEach of these jobs contains an arbitrary number of builds (or more technically, runs). Each build is identified by its\nunique build number. Jenkins plugins can attach results to these builds, e.g. build artifacts, test results,\nanalysis reports, etc. In order to attach such a result, a plugin technically needs to implement and create an action\nthat stores these results.\n\nThese Java objects are visualized in several different views, which are described in more detail in the following\nsections. The top-level view that shows all available Jobs is shown in Figure 2.\n\nFigure 2. Jenkins view showing all available jobs\n\nPlugins can also contribute UI elements in these views, but this is out of scope of this guide.\n\nEach job has a detail view, where plugins can extend corresponding extension points and provide summary boxes and\ntrend charts. Typically, summary boxes for reporters are not required on the job level, so I describe only trend charts\nin more detail, see section Section 5.5.2.\n\nFigure 3. Jenkins view showing details about a job\n\nEach build has a detail view as well. Here plugins can provide summary boxes similar to the boxes for the job details\nview. Typically, plugins show here only a short summary and provide a link to detailed results, see Figure 4 for\nan example.\n\nFigure 4. Jenkins view showing details about a build\n\nThe last element in the view hierarchy actually is a dedicated view that shows the results of a specific plugin. E.g.,\nthere are views to show the test results, the analysis results, and so on. It is totally up to a given plugin what\nelements should be shown there. In the next few sections I will introduce some new UI components that can be used\nto show the corresponding results in a pleasant way.\n\n3.1. Extending Jenkins object model\n\nSince reporters typically are composed in a similar way, I extended Jenkins' original object model\n(see Figure 1) with some additional elements, so it will be much simpler to create or implement\na new reporter plugin. This new model is shown in Figure 5. The central element is a build action that\nwill store the results of a plugin reporter. This action will be attached to each build and will hold (and persist) the\nresults for a reporter. The detail data of each action will be automatically stored in an additional file, so the\nmemory footprint of Jenkins can be kept small if the details are never requested by users. Additionally, this\naction is also used to simplify the creation of project actions and trend charts, see Section 5.5.2.\n\nFigure 5. Jenkins reporter design - high level view of the model for reporter plugins\n\n4. Git Forensics plugin\n\nThe elements in this tutorial will be all used in the new\nForensics API Plugin (actually the plugin is not new, it is a dependency of the\nWarnings Next Generation Plugin). You can download the plugin content\nand see in more detail how these new components can be used in practice. Or you can change this plugin just to see\nhow these new components can be parametrized.\n\nIf you are using Git as source code management system then this plugin will mine\nthe repository in the style of\nCode as a Crime Scene\n(Adam Tornhill, November 2013) to determine statistics of the contained source code files:\n\ntotal number of commits\n\ntotal number of different authors\n\ncreation time\n\nlast modification time\n\nThe plugin provides a new step (or post build publisher) that starts the repository mining and stores\nthe collected information in a Jenkins action (see Figure 5). Afterwards you get a new\nbuild summary that shows the total number of scanned files (as trend and as build result). From\nhere you can navigate to the details view that shows the scanned files in a table that can be\nsimply sorted and filtered. You also will get some pie charts that show important aspects of the\ncommit history.\n\nPlease note that this functionality of the plugin still is a proof of concept: the performance of this step heavily\ndepends on the size and the number of commits of your Git repository. Currently it scans the whole repository in each\nbuild. In the near future I hope to find a volunteer who is interested in replacing this dumb algorithm with an incremental scanner.\n\n5. Introducing the new  UI components\n\nAs already mentioned in Section 3, a details view is plugin specific. What is shown and how these\nelements are presented is up to the individual plugin author. So in the next sections I provide some examples\nand new concepts that plugins can use as building blocks for their own content.\n\n5.1. Modern icons\n\nJenkins plugins typically do not use icons very frequently. Most plugins provide an icon for the actions and that’s it.\nIf you intend to use icons in other places, plugin authors are left on their own: the recommended Tango icon set is more\nthan 10 years old and too limited nowadays. There are several options available, but the most popular is the\nFont Awesome Icon Set. It provides more than 1500 free icons that follow the same\ndesign guidelines:\n\nFigure 6. Font Awesome icons in Jenkins plugins\n\nIn order to use Font Awesome icons in a plugin you simply need a dependency to the corresponding\nfont-awesome-api-plugin. Then you can use any of the solid icons\nby using the new tag svg-icon in your jelly view:\n\nindex.jelly\n\n[...]\n\n[...]\n\nIf you are generating views using Java code, then you also can use the class SvgTag to generate the\nHTML markup for such an icon.\n\n5.2. Grid layout\n\nJenkins currently includes in all views an old and patched version of Boostrap’s grid system (with 24 columns). This version\nis not compatible with Boostrap 4 or any of the JS libraries that depend on Bootstrap4. In order to use Bootstrap 4\nfeatures we need to replace the Jenkins provided layout.jelly file with a patched version, that does not load\nthe broken grid system. I’m planning to create a PR that fixes the grid in Jenkins core, but that will take some time.\nUntil then you will need to use the provided layout.jelly of the Boostrap4 plugin, see below.\n\nThe first thing to decide is, which elements should be shown on a plugin page and how much space each element\nshould occupy. Typically, all visible components are mapped on the available space using a simple grid.\nIn a Jenkins view we have a fixed header and footer and a navigation bar on the left\n(20 percent of the horizontal space). The rest of a screen can be used by\na details view. In order to simplify the distribution of elements in that remaining space we use\nBootstrap’s grid system.\n\nFigure 7. Jenkins layout with a details view that contains a grid system\n\nThat means, a view is split into 12 columns and and arbitrary number of rows. This grid system is simple to use\n(but complex enough to also support fancy screen layouts) - I won’t go into\ndetails here, please refer to the Bootstrap documentation\nfor details.\n\nFor the forensics detail view we use a simple grid of two rows and two columns. Since the number of columns always is 12\nwe need to create two \"fat\" columns that fill 6 of the standard columns.\nIn order to create such a view in our\nplugin we need to create a view given as a jelly file and a corresponding Java view model object. A view with this layout\nis shown in the following snippet:\n\nindex.jelly\n\n(1)\n\n(2)\n(3)\n\n(4)\n(5)\nContent of column 1 in row 1\n\n(6)\nContent of column 2 in row 1\n\n(7)\n(8)\nContent of row 2\n\n1\nUse a custom layout based on Bootstrap: since Jenkins core contains an old version of Bootstrap,\nwe need to replace the standard layout.jelly file.\n\n2\nImport Bootstrap 4: Importing of JS and CSS components is done using the adjunct concept,\nwhich is the preferred way of referencing static resources within Jenkins' Stapler Web framework.\n\n3\nThe whole view will be placed into a fluid container that fills up the whole screen (100% width).\n\n4\nA new row of the view is specified with class row. The additional class py-3 defines the padding to use for\nthis row, see Bootstrap Spacing for more details.\n\n5\nSince Bootstrap automatically splits up a row into 12 equal sized columns we define here\nthat the first column should occupy 6 of these 12 columns. You can also leave off the detailed numbers, then Bootstrap will\nautomatically distribute the content in the available space. Just be aware that this not what you want in most of the times.\n\n6\nThe second column uses the remaining space, i.e. 6 of the 12 columns.\n\n7\nThe second row uses the same layout as row 1.\n\n8\nThere is only one column for row 1, it will fill the whole available space.\n\nYou can also specify different column layouts for one row, based on the actual visible size of the screen.\nThis helps to improve the layout for larger screens. In the warnings plugin you will find\nan example: on small devices, there is one card visible that shows one pie chart in a carousel. If you are\nopening the same page on a larger device, then two of the pie charts are shown side by side and the carousel is hidden.\n\n5.3. Cards\n\nWhen presenting information of a plugin as a block, typically plain text elements are shown. This will normally result\nin some kind of boring web pages. In order to create a more appealing interface, it makes sense to present such information\nin a card, that has a border, a header, an icon, and so on. In order to create such a\nBootstrap card a small jelly tag has been provided by the new\nBootstrap plugin that simplifies this task for a plugin.\nSuch a card can be easily created in a jelly view in the following way:\n\nContent of the card\n\nIn Figure 8 examples of such cards are shown. The cards in the upper row contain pie charts that show the\ndistribution of the number of authors and commits in the whole repository. The card at the bottom shows the detail\ninformation in a DataTable. The visualization is not limited to charts or tables, you can\nshow any kind of HTML content in there. You can show any icon of your\nplugin in these cards, but it is recommended to use one of the existing Font Awesome icons\nto get a consistent look and feel in Jenkins' plugin ecosystem.\n\nFigure 8. Bootstraps cards in Jenkins plugins\n\nNote that the size of the cards is determined by the grid configuration, see Section 5.2.\n\n5.4. Tables\n\nA common UI element to show plugin details is a table control. Most plugins (and Jenkins core) typically use\nplain HTML tables. However, if the table should show a large number of rows then using a more sophisticated control\nlike DataTables makes more sense. Using this JS based table control provides additional\nfeatures at no cost:\n\nfilter results by text search\n\nprovide pagination of the result set\n\nsort data by multiple columns at once\n\nobtain table rows using Ajax calls\n\nshow and hide columns based on the screen resolution\n\nIn order to use DataTables in a view there are two options, you can either decorate existing\nstatic HTML tables (see Section 5.4.1) or populate the table content using Ajax (see Section 5.4.2).\n\n5.4.1. Tables with static HTML content\n\nThe easiest way of using DataTables is by creating a static HTML table that will be decorated by simply calling the\nconstructor of the datatable. This approach involves no special handling on the Java and Jelly side, so I think it is\nsufficient to follow the example in the DataTables\ndocumentation. Just make sure that after building the table in your Jelly file you need to decorate the table\nwith the following piece of code:\n\n[...]\n\n[...]\n\n[...]\n\n1\nreplace id with the ID of your HTML table element\n\nIn the Forensics plugin no such static table is used so far, but you can have a look at the\ntable that shows fixed warnings\nin the warnings plugin to see how such a table can be decorated.\n\n5.4.2. Tables with dynamic model based content\n\nWhile static HTML tables are easy to implement, they have several limitations. So it makes sense to follow a more\nsophisticated approach. Typically, tables in user interfaces are defined by using a corresponding table (and row) model.\nJava Swing successfully provides such a\ntable model concept since the early days of Java.\nI adapted these concepts for Jenkins and DataTables as well. In order to create a table in a Jenkins view a plugin\nneeds to provide a table model class, that provides the following information:\n\nthe ID of the table (since there might be several tables in the view)\n\nthe model of the columns (i.e., the number, type, and header labels of the columns)\n\nthe content of the table (i.e. the individual row objects)\n\nYou will find an example of such a table in the Forensics plugin: here a table lists\nthe files in your Git repository combined with the corresponding commit statistics (number of authors,\nnumber of commits, last modification, first commit). A screenshot of that table is shown in Figure 9.\n\nFigure 9. Dynamic Table in the Forensics plugin\n\nIn order to create such a table in Jenkins, you need to create a table model class that derives from TableModel.\nIn Figure 10 a diagram of the corresponding classes in the Forensics plugin is shown.\n\nFigure 10. Table model of the Forensics plugin\n\nTable column model\n\nThis first thing a table model class defines is a model of the available columns by creating corresponding\nTableColumn instances. For each column you need to specify a header label and the name of the bean property that\nshould be shown in the corresponding column (the row elements are actually Java beans: each column will\nshow one distinct property of such a bean, see next section). You can\nuse any of the supported column types by simply providing a\nString or Integer based column.\n\nTable rows content\n\nAdditionally, a table model class provides the content of the rows. This getRows() method\nwill be invoked asynchronously using an Ajax call. Typically, this method simply returns a list of Java Bean instances,\nthat provide the properties of each column (see previous section). These objects will be converted automatically\nto an array of JSON objects, the basic data structure required for the DataTables API.\nYou will find a fully working example table model\nimplementation in the Git repository of the forensics plugin in the class\nForensicsTableModel.\n\nIn order to use such a table in your plugin view you need to create the table in the associated\nJelly file using the new table tag:\n\nindex.jelly\n\n[...]\n\n(1)\n[...]\n\n1\nreplace id with the id of your table\n\nThe only parameter you need to provide for the table is the model — it is typically part of the corresponding\nJenkins view model class (this object is referenced with ${it} in the view).\nIn order to connect the corresponding Jenkins view model class with the table, the view model class needs to\nimplement the AsyncTableContentProvider interface. Or even simpler, let your view model class derive from\nDefaultAsyncTableContentProvider. This relationship is required, so that Jenkins can automatically create\nand bind a proxy for the Ajax calls that will automatically fill the table content after the HTML page has been created.\n\nIf we put all those pieces together, we are required to define a model similar to the model of the Forensics plugin,\nthat is shown in Figure 11.\n\nFigure 11. Jenkins reporter design - high level view of the model for reporter plugins\n\nAs already described in Figure 5 the plugin needs to attach a BuildAction to each build. The\nForensics plugin attaches a ForensicBuildAction to the build. This action stores a RepositoryStatistics instance,\nthat contains the repository results for a given build. This action delegates all Stapler requests to a new\nstaplerdoc:org.kohsuke.stapler.StaplerProxy[Stapler proxy instance] so we can keep the\naction clean of user interface code. This ForensicsViewModel class then acts as view model that provides the server\nside model for the corresponding Jelly view given by the file index.jelly.\n\nWhile this approach looks quite complex at a first view, you will see that the actual implementation part\nis quite small. Most of the boilerplate code is already provided by the base classes and you need to implement\nonly a few methods. Using this concept also provides some additional features, that are part of the DataTables plugin:\n\nOrdering of columns is persisted automatically in the browser local storage.\n\nPaging size is persisted automatically in the browser local storage.\n\nThe Ajax calls are actually invoked only if a table will become visible. So if you have\nseveral tables hidden in tabs then the content will be loaded on demand only, reducing the amount of data\nto be transferred.\n\nThere is an option available to provide an additional details row that can be expanded with a + symbol,\nsee warnings plugin table for details.\n\n5.5. Charts\n\nA plugin reporter typically also reports some kind of trend from build to build. Up to now Jenkins core provides only a\nquite limited concept of rendering such trends as trend charts. The\nJFreeChart framework offered by Jenkins core is a server\nside rendering engine that creates charts as static PNG images that will be included on the job and details pages.\nNowadays, several powerful JS based charting libraries are available, that do the same job\n(well actually an even better job) on the client side. That has the advantage that these charts can be customized\non each client without affecting the server performance. Moreover, you get a lot of additional\nfeatures (like zooming, animation, etc.) for free. Additionally, these charting libraries not only support the typical\nbuild trend charts but also a lot of additional charts types that can be used to improve the user experience of\na plugin.\nOne of those charting libraries is ECharts : this library has a powerful API\nand supports literally every chart type one can image of. You can get some impressions of the features on the\nexamples page of the library.\n\nIn order to use these charts one can embed charts that use this library by importing the corresponding JS files and by\ndefining the chart in the corresponding Jelly file. While that already works quite well it\nwill be still somewhat cumbersome to provide the corresponding model for these charts from Jenkins build results. So\nI added a powerful Java API that helps to create the model for these charts on the Java side. This API provides the\nfollowing features:\n\nCreate trend charts based on a collection of build results.\n\nSeparate the chart type from the aggregation in order to simplify unit testing of the chart model.\n\nToggle the type of the X-Axis between build number or build date (with automatic aggregation of results that\nhave been recorded at the same day).\n\nAutomatic conversion of the Java model to the required JSON model for the JS side.\n\nSupport for pie and line charts (more to come soon).\n\nThose charts can be used as trend chart in the project page (see Figure 3) or as information chart in the details\nview of a plugin (see Section 5).\n\n5.5.1. Pie charts\n\nA simple but still informative chart is a pie chart that illustrates numerical proportions of plugin data. In the Forensics\nplugin I am using this chart to show the numerical proportions of the number of authors or commits for the\nsource code files in the Git repository (see Figure 8). In the warnings plugin I use this chart to show the\nnumerical proportions of the new, outstanding, or fixed warnings, see Figure 12.\n\nFigure 12. Pie chart in the Warnings plugin\n\nIn order to include such a chart in your details view, you can use the provided pie-chart tag.\nIn the following snippet you see this tag in action (embedded in a Bootstrap card, see Section 5.3):\n\nindex.jelly\n\n[...]\n<c:pie-chart id=\"authors\" model=\"${it.authorsModel}\" height=\"256\" />\n\n[...]\n\nYou need to provide a unique ID for this chart and the corresponding model value. The model must be the JSON\nrepresentation of a corresponding PieChartModel instance. Such a model can be created with a couple of lines:\n\nViewModel.java\n\n[...]\n    PieChartModel model = new PieChartModel(\"Title\");\n\n    model.add(new PieData(\"Segment 1 name\", 10), Palette.RED);\n    model.add(new PieData(\"Segment 2 name\", 15), Palette.GREEN);\n    model.add(new PieData(\"Segment 3 name\", 20), Palette.YELLOW);\n\n    String json = new JacksonFacade().toJson(model);\n    [...]\n\n5.5.2. Trend charts on the job level view\n\nIn order to show a trend that renders a line chart on the job page (see Figure 3) you need to provide a so called\nfloating box (stored in the file floatingBox.jelly of your job action (see Section 3)).\nThe content of this file is quite simple and contains just a trend-chart tag:\n\nfloatingBox.jelly\n\n<c:trend-chart it=\"${from}\" title=\"${%SCM Files Count Trend}\" enableLinks=\"true\"/>\n\nOn the Java side the model for the chart needs to be provided in the corresponding sub class of JobAction (which is\nthe owner of the floating box). Since the computation of trend charts is quite expensive on the server side as well\n(several builds need to be read from disk and the interesting data points need to be computed) this process has been\nput into a separate background job. Once the computation is done the result is shown via an Ajax call. In order to\nhide these details for plugin authors you should simply derive your JobAction class from the corresponding\nAsyncTrendJobAction class, that already contains the boilerplate code. So your static plugin object model will actually\nbecome a little bit more complex:\n\nFigure 13. Jenkins chart model design\n\nBasically, you need to implement the method LinesChartModel createChartModel() to create the line\nchart. This method is quite simple to implement, since most of the hard work is provided by the library: you will\ninvoke with an iterator of your build actions, starting with the latest build. The iterator advances from build to build\nuntil no more results are available (or the maximum number of builds to consider has been reached). The most important\nthing to implement in your plugin is the way how data points are computed for a given BuildAction. Here is an example of\nsuch a SeriesBuilder implementation in the Forensics Plugin:\n\nFilesCountSeriesBuilder.java\n\npackage io.jenkins.plugins.forensics.miner;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport edu.hm.hafner.echarts.SeriesBuilder;\n\n/**\n * Builds one x-axis point for the series of a line chart showing the number of files in the repository.\n *\n * @author Ullrich Hafner\n */\npublic class FilesCountSeriesBuilder extends SeriesBuilder {\n    static final String TOTALS_KEY = \"total\";\n\n    @Override\n    protected Map computeSeries(final ForensicsBuildAction current) {\n        Map series = new HashMap<>();\n        series.put(TOTALS_KEY, current.getNumberOfFiles());\n        return series;\n    }\n}\n\nYou are not limited to a single line chart. You can show several lines in a single chart, you can show stacked values,\nor even the delta between some values. You can also have a look at the\ncharts of the warnings plugin\nto see some of these features in detail.\n\nFigure 14. Trend chart with several lines in the Warnings plugin\n\nFigure 15. Trend chart with stacked lines in the Warnings plugin","title":"Hands On: Beautify the user interface of Jenkins reporter plugins","tags":["ui","ux","plugins","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/uhafner.jpg"},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/authors/uhafner","twitter":null}]}},{"node":{"date":"2018-09-11T00:00:00.000Z","id":"023ce63a-1296-5fa9-b1fd-4c4141fdc95b","slug":"/blog/2018/09/11/speaker-blog-warnings-plugin/","strippedHtml":"Jenkins' Warnings plugin collects compiler warnings or issues reported by static analysis tools and visualizes the\nresults. The plugin (and the associated static analysis plugin suite) has been part of the Jenkins plugin eco-system\nfor more than ten years now. In order to optimize user experience and support Pipeline, a major rewrite of\nthe whole set of plugins was necessary. This new version (code name White Mountain) is now available as a public\nbeta. Please download and install this new version and help us to identify problems before the API is sealed.\n\nThe new release is available in the\nexperimental update center.\nIt has built-in support for almost hundred static analysis tools (including several compilers), see the list of\nsupported report formats.\n\nFeatures overview\n\nThe Warnings plugin provides the following features when added as a post build action (or step) to a job:\n\nThe plugin scans the console log of a Jenkins build or files in the workspace of your job for any kind of issues.\nThere are almost one hundred\nreport formats supported.\nAmong the problems it can detect:\n\nerrors from your compiler (C, C#, Java, etc.)\n\nwarnings from a static analysis tool (CheckStyle, StyleCop, SpotBugs, etc.)\n\nduplications from a copy-and-paste detector (CPD, Simian, etc.)\n\nvulnerabilities\n\nopen tasks in comments of your source files\n\nThe plugin publishes a report of the issues found in your build, so you can navigate to a summary report from the\nmain build page. From there you can also dive into the details:\n\ndistribution of new, fixed and outstanding issues\n\ndistribution of the issues by severity, category, type, module, or package\n\nlist of all issues including helpful comments from the reporting tool\n\nannotated source code of the affected files\n\ntrend charts of the issues\n\nIn the next sections, I’ll show the new and enhanced features in more detail.\n\nOne plugin for all tools\n\nPreviously the warnings plugin was part of the static analysis suite that provided the same set of features through\nseveral plugins (CheckStyle, PMD, Static Analysis Utilities, Analysis Collector etc.).\nIn order to simplify the user experience and the development process, these\nplugins and the core functionality have been merged into the warnings plugin. All other plugins are not required\nanymore and will not be supported in the future. If you currently use one of these plugins you should migrate\nto the new recorders and steps as soon as possible. I will still maintain the old code for a while,\nbut the main development effort will be spent into the new code base.\n\nThe following plugins have been integrated into the beta version of the warnings plugin:\n\nAndroid-Lint Plugin\n\nCheckStyle Plugin\n\nCCM Plugin\n\nDry Plugin\n\nPMD Plugin\n\nFindBugs Plugin\n\nAll other plugins still need to be integrated or need to be refactored to use the new API.\n\nNew pipeline support\n\nRequirements for using the Warnings plugin in Jenkins Pipeline can be complex and sometimes controversial.\nIn order to be as flexible as possible I decided to split the main step into two individual parts,\nwhich could then be used independently from each other.\n\nSimple pipeline configuration\n\nThe simple pipeline configuration is provided by the step recordIssues. This step is automatically derived from the\nFreeStyle job recorder: it scans for issues in a given set of files (or in the console log) and reports these issues\nin your build. You can use the snippet generator to create a working snippet that calls this step. A typical example\nof this step is shown in the following example:\n\nrecordIssues\n    enabledForFailure: true,\n    tools: [[pattern: '*.log', tool: [$class: 'Java']]],\n    filters: [includeFile('MyFile.*.java'), excludeCategory('WHITESPACE')]\n\nIn this example, the files '*.log' are scanned for Java issues. Only issues with a file name matching the\npattern 'MyFile.*.java' are included. Issues with category 'WHITESPACE' will be excluded. The\nstep will be executed even if the build failed. The recorded report of warnings will be published under the fixed\nURL 'https://[ your-jenkins ]/job/[ your-job ]/java'. URL or name of the report can be changed if required.\n\nAdvanced Pipeline Configuration\n\nSometimes publishing and reporting issues using a single step is not sufficient. For instance, if you build your\nproduct using several parallel steps and you want to combine the issues from all of these steps into\na single result. Then you need to split scanning and aggregation. Therefore, the plugin  provides the following\ntwo steps that are combined by using an intermediate result object:\n\nscanForIssues : this step scans a report file or the console log with a particular parser and creates an\nintermediate report object that contains the report.\n\npublishIssues : this step publishes a new report in your build that contains the aggregated results\nof one or several scanForIssues steps.\n\nYou can see the usage of these two steps in the following example:\n\ndef java = scanForIssues tool: [$class: 'Java']\ndef javadoc = scanForIssues tool: [$class: 'JavaDoc']\n\npublishIssues issues:[java, javadoc], filters:[includePackage('io.jenkins.plugins.analysis.*')]\n\ndef checkstyle = scanForIssues tool: [$class: 'CheckStyle'], pattern: '**/target/checkstyle-result.xml'\npublishIssues issues:[checkstyle]\n\ndef pmd = scanForIssues tool: [$class: 'Pmd'], pattern: '**/target/pmd.xml'\npublishIssues issues:[pmd]\n\npublishIssues id:'analysis', name:'White Mountains Issues', issues:[checkstyle, pmd],\n    filters:[includePackage('io.jenkins.plugins.analysis.*')]\n\nFiltering issues\n\nThe created report of issues can be filtered afterwards. You can specify an arbitrary number of include or exclude\nfilters. Currently, there is support for filtering issues by module name, package or namespace name, file name,\ncategory or type.\n\nAn example pipeline that uses such a filter is shown in the following snippet:\n\nrecordIssues\n    tools: [[pattern: '*.log', tool: [$class: 'Java']]],\n    filters: [includeFile('MyFile.*.java'), excludeCategory('WHITESPACE')]\n\nQuality gate configuration\n\nYou can define several quality gates that will be checked after the issues have been reported. These quality gates\nlet you to modify Jenkins' build status so that you immediately see if the desired quality of your product is met.\nA build can be set to unstable or failed for each of these quality gates. All quality gates use a simple metric:\nthe maximum number of issues that can be found and still pass a given quality gate.\n\nAn example pipeline that enables a quality gate for 10 warnings in total or 1 new warning is shown in the\nfollowing snippet:\n\nrecordIssues\n    tools: [[pattern: '*.log', tool: [$class: 'Java']]], unstableTotalHigh: 10, unstableNewAll: 1\n\nIssues history: new, fixed, and outstanding issues\n\nOne highlight of the plugin is the ability to categorize issues of subsequent builds as new, fixed and outstanding.\n\nUsing this feature makes it a lot easier to keep the quality of your project under control: you can focus\nonly on those warnings that have been introduced recently.\n\nNote: the detection of new warnings is based on a complex algorithm that tries to track the same warning in\ntwo two different versions of the source code. Depending on the extend of the modification of the source code\nit might produce some false positives, i.e., you might still get some new and fixed warnings even if there should\nbe none. The accuracy of this algorithm is still ongoing research and will be refined in the next couple of months.\n\nSeverities\n\nThe plugin shows the distribution of the severities of the issues in a chart. It defines the\nfollowing default severities, but additional ones might be added by plugins that extend the warnings plugin.\n\nError : Indicates an error that typically fails the build\n\nWarning (High, Normal, Low): Indicates a warning of the given priority. Mapping to the priorities\nis up to the individual parsers.\n\nNote that not every parser is capable of producing warnings with a different severity. Some of the parses simply\nuse the same severity for all issues.\n\nBuild Trend\n\nIn order to see the trend of the analysis results, a chart showing the number of issues per build is also\nshown. This chart is used in the details page as well as in the job overview. Currently, type and configuration\nof the chart is fixed. This will be enhanced in future versions of the plugin.\n\nIssues Overview\n\nYou can get a fast and efficient overview of the reported set of issues in several aggregation views.\nDepending on the number or type of issues you will see the distribution of issues by\n\nStatic Analysis Tool\n\nModule\n\nPackage or Namespace\n\nSeverity\n\nCategory\n\nType\n\nEach of these detail views are interactive, i.e. you can navigate into a subset of the categorized issues.\n\nIssues Details\n\nThe set of reported issues is shown in a modern and responsive table. The table is loaded on demand using an Ajax\ncall. It provides the following features:\n\nPagination : the number of issues is subdivided into several pages which can be selected by using the provided page\nlinks. Note that currently the pagination is done on the client side, i.e. it may take some time to obtain the whole table of\nissues from the server.\n\nSorting : the table content can be sorted by clicking on ony of the table columns.\n\nFiltering, Searching : you can filter the shown issues by entering some text in the search box.\n\nContent Aware : columns are only shown if there is something useful to display. I.e., if a tool does not report an\nissues category, then the category will be automatically hidden.\n\nResponsive : the layout should adapt to the actual screen size.\n\nDetails : the details message for an issue (if provided by the corresponding static analysis tool) is shown as\nchild row within the table.\n\nRemote API\n\nThe plugin provides two REST API endpoints.\n\nSummary of the analysis result\n\nYou can obtain a summary of a particular analysis report by using the URL [tool-id]/api/xml\n(or [tool-id]/api/json). The summary contains the number of issues, the quality gate status, and all\ninfo and error messages.\n\nDetails of the analysis result\n\nThe reported issues are also available as REST API. You can either query all issues or only the\nnew, fixed, or outstanding issues. The corresponding URLs are:\n\n[tool-id]/all/api/xml : lists all issues\n\n[tool-id]/fixed/api/xml : lists all fixed issues\n\n[tool-id]/new/api/xml : lists all new issues\n\n[tool-id]/outstanding/api/xml : lists all outstanding issues\n\nHow You Can Help\n\nI hope these new features are useful for everyone! Please download or install this new release and test it in your jobs:\n\nConvert some of your jobs to the new API and test the new (and old) features (based on your requirements).\n\nRead all labels carefully, I’m not a native speaker so some descriptions might be misleading or incorrect.\n\nCheck the new URLs and names of the parsers, see list of\nsupported report formats. These\ncan’t be changed after the beta testing.\n\nIf you find a problem, incorrect phrase, typo, etc. please report a bug in Jira (or even better: file a PR in GitHub).\n\nThis has been a brief overview of the new features of the Warnings plugin in Jenkins. For more, be sure to check out my\ntalk at \"DevOps World | Jenkins World\" where I show more details of the Warnings plugin!\n\nCome see Ullrich Hafner and many other Jenkins experts and contributors at\nDevOps World | Jenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Warnings Plugin 5.0 (White Mountain) Public Beta","tags":["warnings","jenkinsworld","jenkinsworld2018"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/uhafner.jpg"},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/authors/uhafner","twitter":null}]}}]}},"pageContext":{"author":"uhafner","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}