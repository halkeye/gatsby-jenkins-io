{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/authors/ignacio_fernandez",
    "result": {"data":{"author":{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#483838","images":{"fallback":{"src":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/19e71/ignacio_fernandez.jpg","srcSet":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/77b35/ignacio_fernandez.jpg 32w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/d4a57/ignacio_fernandez.jpg 64w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/19e71/ignacio_fernandez.jpg 128w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/68974/ignacio_fernandez.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/ef6ff/ignacio_fernandez.webp 32w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/8257c/ignacio_fernandez.webp 64w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/6766a/ignacio_fernandez.webp 128w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/22bfc/ignacio_fernandez.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/ignacio_fernandez.jpg"},"blog":null,"github":"Napo2k","html":"<div class=\"paragraph\">\n<p>Nacho is a Build Engineer with several years of experience in the videogame industry, and has worked in both AAA projects as well as free-to-play and mobile.\nCurrently, Nacho works at King Stockholm, taking care of Jenkins operations for Candy Crush Saga and Candy Crush Soda Saga.</p>\n</div>","id":"ignacio_fernandez","irc":null,"linkedin":"ignaciofernandezpuerta","name":"Ignacio 'Nacho' Fernández","slug":"/blog/authors/ignacio_fernandez","twitter":"@napo2k"},"allBlog":{"edges":[{"node":{"date":"2019-11-04T00:00:00.000Z","id":"d7cd86a9-cbed-5942-90a0-dd192dcd3459","slug":"/blog/2019/11/04/speaker-blog-how-to-build-the-top-mobile-game/","strippedHtml":"Context\n\nYou have been tasked with managing the Jenkins instance for the highest grossing mobile\ngame in the world. You learn that this involves helping the game studio iterate their work\nagainst eight different target platforms, each with their SDK, on four different main pipelines,\nplus a lot of extra auxiliary jobs. And, of course, the studio wants all of this to go smoothly, in\norder to maintain a good pace of features and bugfixes for every release - a release happening\nevery two weeks. Hitting hundreds of millions of players worldwide.\n\nHow are you going to make sure that the environment stays correctly configured, with the\nright versions of the required software; helping the studio maintain stability and scalability of\ntheir pipelines; ensuring operability of the Jenkins instance; improving the speed of the builds\nmonth after month?\n\nIt’s OK to sweat. You are going to need some help!\n\nThis is just a regular day in the office for a build engineer working at King. Facing a very\nbroad problem, with high quality standards and even higher stakes. Thankfully, we are not\nalone. We have access to a lot of tools - either open source tools, tools developed by the\nstudios or tools developed by our stellar build infrastructure team in Barcelona - to help carry\nus all the way to the publish line. We put all of these tools together, and by their powers\ncombined, we provide fast, easily operable workflows for the studios, cutting minutes here\nand there, ensuring the features a smooth sail from dev, to master, to release.\n\nI will explain all of the tricks we use at King to speed builds up, and to make Jenkins operation\neasier for our studios on December 4, 2019, at DevOps World | Jenkins\nWorld Lisbon.\nUse JWFOSS for 30% discount on registration!\nFor now, let’s take a look at some of them.\n\nWhere do we start?\n\nWe use on-premises elastic infrastructure, spawning machines from certain templates\nwhenever they are needed. This means that for every build, we are getting a fresh\nenvironment - no intermediate artifacts leftover or anything of the sort, which is good. That\nalso means that we need to clone our repositories and compile everything every time, which is\nbad. However, we have solutions for these two problems.\n\nWe make full use of linkclones/snapshots when spawning a VM. Every night we run a\nbootstrapper that will power on the base image and perform whatever operations we decide on\nit, before turning it back into a template and re-creating the snapshot. In the case of Candy\nCrush, we update our caches, and this helps us cut some time off of git clone and compilation.\nWe call this bootstrapper “cacheo”. It looks more or less like this:\n\nCacheo\n\n1. Start elastic agent template image\n2. Connect it to Jenkins\n3. Perform cleanup\n4. Trigger git reference cache jobs\n5. Trigger all the builds you want cached\n6. Turn off template image, delete the agent and recreate the linked clone snapshot\n\nEvery studio can specify on which templates will cacheo run, and what will it do in each of them.\nMaybe you want to make sure your Android license is on point. Or download some\npackages from artifactory. Perhaps pre-load your gradle dependencies. Whatever it is, cacheo\ndoes it for you and updates your base images every night.\n\nOne of the most common uses is to pre-fill a local git cache, and when doing so, the\nimprovement is very visible, especially on Windows:\n\nLinux\nMacOS\nWindows\n\nNFS\n2 min 11s\n2min 34s\n8min 32s\n\nLocal\n1 min 20s\n1min 35s\n3min 49s\n\nDifference\n39% faster\n39% faster\n55% faster\n\nThis means, speeding up source code fetching by 55% on Windows, on average. That is a LOT!!\n\nBut what about actual compilation?\n\nAll of our major games use the same engine; we bring this code in by means of submodules. This means\nthere is a big bunch of shared code that needs to be compiled and linked whenever we build the game.\nAnd it’s not rare that this shared code is bigger than the actual game code!\nThankfully, the engine team lent us a hand, and they developed a way to package the compiled shared code.\nNormally, the game code lives alongside a specific version of the shared code, which doesn’t get updated too frequently.\nSometimes once a month, sometimes to grab a hotfix. This translates to us potentially compiling the\nexact same shared code for quite some time, every time we build the game. Thanks to these\nprebuilt artifacts, we are able to skip a huge part of the compilation, at the cost of a simple artifactory download.\n\nCacheo\n\nif generate_prebuilt_libs:\n    compile_project()\n\n    generate_empty_cmakelists()\n\n    for dependency in dependencies:\n        merge_compiled_dependency_into_metalib(dependency)\n        write_dependency_to_generated_cmakelists_as_alias_for_metalib(dependency)\n\nelif use_prebuilt_libs:\n    add_generated_cmakelists_with_metalib_as_dependency()\n\n    compile_project()\n\nThanks to these prebuilt libraries, we are able to skip a big chunk of the compilation,\nand it builds up really quickly! Iterative work on several branches, as long as they have\nthe same engine version, gets sped up in noticeable ways.\nThere are, however, specific cases when we do choose to build the shared code regardless, such as\nwhen we build release candidates for instance.\n\nJust so you get an idea, times on this table are on average:\n\niOS\nWindows\n\nNo prebuilts\n20min 17s\n40min 30s\n\nPrebuilts\n10min 2s\n23min 20s\n\nDifference\n51% faster\n43% faster\n\nI just don’t want to have to deal with bureaucracy\n\nOperating Jenkins can be quite complicated. Talk about “Tell me\nsomething I don’t know”, right? And with so many moving pieces (elastic\ninfrastructure, plugins, dirty workspaces), it might not be easy for\neveryone to run specific maintenance tasks. We have a lot of small\npipelines, created by the build infrastructure group, that we can use to\ndiagnose and work around certain errors, as well as gather useful\ninformation that might be otherwise difficult to find. These pipelines\ndo things like printing all the installed plugins, deleting offline\non-demand agents, cleaning disconnected VMs from vSphere, or re-run\npuppet in a specific Jenkins instance. And any user can run these jobs,\nthere is no need to be an admin. This allows the team to unblock\nthemselves if they need to by using these jobs. Here’s one that I\nparticularly like. How many times have you modified a pipeline and, when\ntrying to run it, the first thing that happens is that Jenkins says that\nit needs approval?\n\nScript Approval\n\nimport org.jenkinsci.plugins.scriptsecurity.scripts.*\n\n@NonCPS\n\n// Disclaimer - this can have serious security consequences\n// Be mindful when you run this!\n\ndef call() {\n    sa = ScriptApproval.get()\n    toApproveScripts = sa.getPendingScripts().collect()\n    println (\"toApproveScripts: \" + toApproveScripts)\n    toApproveScripts.each {pending ->\n        sa.get().approveScript(pending.getHash())\n\tprintln (\"approvedScripts: \" + pending.getHash())\n\t}\n    sa.save()\n}\n\nThe best part? All our Jenkins instances include these jobs, by default, so\nno one misses out on the fun.","title":"How to build the top mobile game for every platform imaginable","tags":["jenkinsworld","jenkinsworld2019","mobile-game"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#483838","images":{"fallback":{"src":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/19e71/ignacio_fernandez.jpg","srcSet":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/77b35/ignacio_fernandez.jpg 32w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/d4a57/ignacio_fernandez.jpg 64w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/19e71/ignacio_fernandez.jpg 128w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/68974/ignacio_fernandez.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/ef6ff/ignacio_fernandez.webp 32w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/8257c/ignacio_fernandez.webp 64w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/6766a/ignacio_fernandez.webp 128w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/22bfc/ignacio_fernandez.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/ignacio_fernandez.jpg"},"blog":null,"github":"Napo2k","html":"<div class=\"paragraph\">\n<p>Nacho is a Build Engineer with several years of experience in the videogame industry, and has worked in both AAA projects as well as free-to-play and mobile.\nCurrently, Nacho works at King Stockholm, taking care of Jenkins operations for Candy Crush Saga and Candy Crush Soda Saga.</p>\n</div>","id":"ignacio_fernandez","irc":null,"linkedin":"ignaciofernandezpuerta","name":"Ignacio 'Nacho' Fernández","slug":"/blog/authors/ignacio_fernandez","twitter":"@napo2k"}]}}]}},"pageContext":{"author":"ignacio_fernandez","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}