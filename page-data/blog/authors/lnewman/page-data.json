{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/authors/lnewman",
    "result": {"data":{"author":{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"},"allBlog":{"edges":[{"node":{"date":"2019-11-22T00:00:00.000Z","id":"e5f5bc1a-7d2f-5807-8b41-7478e232a4f1","slug":"/blog/2019/11/22/welcome-to-the-matrix/","strippedHtml":"I often find myself needing to run the same actions on a bunch of different configurations.\nUp to now, that meant I had to make multiple copies of the same stages in my pipelines.\nWhen I needed to make changes, I had to make the same changes in multiple places throughout my pipeline.\nMaintaining even a small number of configuration was difficult for larger pipelines.\n\nDeclarative Pipeline 1.5.0-beta1 (now available from the\nJenkins Experimental Update site) adds a new matrix section that lets me specify a list stages once and then run that same list in parallel on multiple configurations.\nLet’s take a look!\n\nSingle configuration pipeline\n\nI’ll start with a simple pipeline with build and test stages.\nI’m using echo steps as placeholders for my build and test actions.\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            agent any\n            stages {\n                stage('Build') {\n                    steps {\n                        echo 'Do Build'\n                    }\n                }\n                stage('Test') {\n                    steps {\n                        echo 'Do Test'\n                    }\n                }\n            }\n        }\n    }\n}\n\nPipeline for multiple platforms and browsers\n\nI’d like to run my build and tests on a combination of platforms and browsers.\nThe new matrix directive lets me specify a set of axes.\nEach axis has a name and a list of one or more values.\nWhen the pipeline is run, Jenkins will take those and run my stages on all possible combinations of values from each axis.\nAll cells in a matrix run in parallel (limited only by the number of available agents).\nStages within each cell are run sequentially.\n\nMy matrix has two axes: PLATFORM and BROWSER.\nI have three values for PLATFORM and four values for BROWSER resulting in my stages being run with twelve different combinations.\nI’ve changed my echo steps to use the axis values for each cell.\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent any\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nLog output (truncated)\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'edge') (hide)\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'edge')\n...\nDo Build for linux - safari\nDo Build for linux - firefox\nDo Build for windows - firefox\nDo Test for linux - firefox\nDo Build for mac - firefox\nDo Build for linux - chrome\nDo Test for windows - firefox\n...\n\nExcluding invalid combinations\n\nNow that I have my basic matrix created, I’ve noticed that I have some invalid combinations.\nMicrosoft Edge only runs on Windows and there isn’t a Linux version of Safari.\n\nI can remove invalid cells from my matrix using exclude directives. Each exclude has one or more axis directives with name and values.\nThe axis directives inside an exclude generate a set of combinations (similar to generating the matrix cells).\nThe matrix cells that match all the values from an exclude combination are removed from the matrix.\nIf I have more than one exclude directive, each are evaluated separately to remove cells.\n\nWhen dealing with a long lists of values to exclude, I can use notValues instead of values to specify axis values we don’t want excluded.\nYes, that’s a double negative, so it can get a little confusing.\nI try to use it only when I really need it.\n\nIn my sample pipeline below, I specifically exclude the linux, safari combination and I also exclude any platform that is not windows with the edge browser.\n\nThis pipeline uses two axes but there is no limit on the number of axis directives.\n\nAlso, in this pipeline each exclude specifies values for both axes, but that is not required.\nIf we wanted to run only \"linux\" cells, we could use the following exclude :\n\nexclude {\n    axis {\n        name 'PLATFORM'\n        notValues 'linux'\n    }\n}\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent any\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                excludes {\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            values 'linux'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'safari'\n                        }\n                    }\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            notValues 'windows'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'edge'\n                        }\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nLog output (truncated)\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n...\nDo Build for linux - firefox\n...\n\nControlling cell behavior at runtime\n\nInside the matrix directive I can also add \"per-cell\" directives.\nThese are the same directives that I would add to a stage and they let me control the behavior of each cell in the matrix.\nThese directives can use the axis values from their cell as part of their inputs, allowing me to customize the behavior of each cell to match its axis values.\n\nOn my Jenkins server I have configured agents with labels that match the OS for each agent (\"linux-agent\", \"windows-agent\", and \"mac-agent\").\nTo run each cell in my matrix on the appropriate operating system, I configure the label for that cell using Groovy string templating.\n\nmatrix {\n    axes { ... }\n    excludes { ... }\n    agent {\n        label \"${PLATFORM}-agent\"\n    }\n    stages { ... }\n    // ...\n}\n\nOccasionally I run my pipeline manually from the Jenkins Web UI.\nWhen I do that, I’d like to be able to select just one platform to run.\nThe axis and exclude directives define the static set of cells that make up the matrix.\nThat set of combinations is generated before the start of the run, before any parameters are processed.\nWhat this means is that I can’t add or remove cells from a matrix after the job has started.\n\nThe \"per-cell\" directives, on the other hand, are evaluated at runtime.\nI can use the \"per-cell\" when directive inside matrix to control which cells in the matrix are executed.\nI’ll add a choice parameter with the list of platforms, and add conditions to the when directive, which will either let all platforms execute, or only execute cells that match my selected platform.\n\npipeline {\n    parameters {\n        choice(name: 'PLATFORM_FILTER', choices: ['all', 'linux', 'windows', 'mac'], description: 'Run on specific platform')\n    }\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent {\n                    label \"${PLATFORM}-agent\"\n                }\n                when { anyOf {\n                    expression { params.PLATFORM_FILTER == 'all' }\n                    expression { params.PLATFORM_FILTER == env.PLATFORM }\n                } }\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                excludes {\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            values 'linux'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'safari'\n                        }\n                    }\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            notValues 'windows'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'edge'\n                        }\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nIf I run this Pipeline from the Jenkins UI and set the PLATFORM_FILTER parameter to mac, I’ll get something like the output below:\n\nLog output (truncated - PLATFORM_FILTER = 'mac' )\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n...\nStage \"Matrix - OS = 'linux', BROWSER = 'chrome'\" skipped due to when conditional\nStage \"Matrix - OS = 'linux', BROWSER = 'firefox'\" skipped due to when conditional\n...\nDo Build for mac - firefox\nDo Build for mac - chrome\nDo Build for mac - safari\n...\nStage \"Matrix - OS = 'windows', BROWSER = 'chrome'\" skipped due to when conditional\nStage \"Matrix - OS = 'windows', BROWSER = 'edge'\" skipped due to when conditional\n...\nDo Test for mac - safari\nDo Test for mac - firefox\nDo Test for mac - chrome\n\nCome join me at DevOps World | Jenkins World 2019 for \" Declarative Pipeline 2019: Tips, Tricks and What’s Next \".\nI’ll go over what’s been added to Pipeline in the last year (including matrix) and discuss ideas about where pipeline should go next.\n\nConclusion\n\nIn this blog post, we’ve looked at how to use the matrix directive to make concise but powerful declarative pipelines.\nAn equivalent pipeline created without matrix would easily be several times larger, and much harder to understand and maintain.\n\nMatrix is now available from the experimental update center.\nIt will be released to the main update center as soon as we’re done putting the finishing touches on the documentation and online help.\n\nLinks\n\nJenkins Experimental Update Center\n\nUsing the Jenkins Experimental Update Center","title":"Welcome to the Matrix","tags":["pipeline","plugins","declarative","matrix"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2019-01-21T00:00:00.000Z","id":"a737d1ad-0575-5b79-8f34-0dd038cbbc0f","slug":"/blog/2019/01/21/fosdem-2019/","strippedHtml":"FOSDEM 2019 (February 2 & 3) is a free event for software developers to meet, share ideas and collaborate.\nIt is an annual event that brings open source contributors from around the world for two days of presentations, discussions, and learning.\nWhile the Jenkins project won’t have a table at FOSDEM 2019, we will be well represented before, during, and after the event.\n\nFriday Day - Workshops and Jenkins Office Hours\n\nOn Friday, February 1, we’ll start off with a couple workshops:\n\nJenkins Pipeline Fundamentals\n(9:00 AM – 5:00 PM)\nLearn to create and run Declarative Pipelines!\nYou’ll learn the structure of Declarative Pipeline, how to control the flow of execution, how to save artifacts of the build, and get practice using some of the features that give fit and finish to your Pipeline.\nRegistration required - see the\nevent page\nfor details\n\nJenkins X, Kubernetes, and Friends\nTwo sessions: (9:00 AM – 12:00 PM) and (1:00pm to 4:00pm)\nBy combining the power of Jenkins, its community and the power of Kubernetes, the Jenkins X project provides a path to the future of continuous delivery for microservices and cloud-native applications.\nCome explore some of the features of Jenkins X through this hands-on workshop.\nRegistration required - see the\nevent page\nfor details\n\nAside from the workshops, from 9am to 5pm a bunch of people will be working out of Hilton Brussels Grand Place, hanging out as travelers come in.\nIt’ll be a casual, unstructured day. Sign up on this meetup page to be notified what meeting room we’re in.\n\nFriday Evening - Happy Hour\n\nAfter the office hours and workshops, we’ll have a happy hour Friday evening before FOSDEM at Cafe Le Roy d’Espagne.\nSee the meetup page for details.\n\nPresentations at FOSDEM\n\nHackers gotta eat: Building a Company Around an Open Source Project\nby Kohsuke Kawaguchi\n\nSetting up an HPC lab from scratch with Mr-Provisioner, Jenkins and Ansible\nby Renato Golin\n\nMulticloud CI/CD with OpenStack and Kubernetes by Maxime Guyot\n\nJenkins Hackfest after FOSDEM\n\nFinally, a Jenkins Hackfest will be held the day after FOSDEM 2019 on Monday (February 4).\nThose who would like to join us for the hackfest should register for the meetup.\n\nMeals, snacks, and beverages will be provided for the hackfest.  Come join us, and let’s write some code!\n\nQuestions? feel free to contact\nAlyssa Tong or\nBaptiste Mathus or join us on the\nadvocacy-and-outreach gitter channel.","title":"FOSDEM 2019!","tags":["community","events"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2018-12-10T00:00:00.000Z","id":"a9e14a72-e8bc-5d64-8f07-6daa5be4a88f","slug":"/blog/2018/12/10/kubecon-is-here/","strippedHtml":"The time has come - KubeCon + CloudNativeCon North America 2018 has arrived.\nThe conference has completely sold out and the schedule is jam packed with interesting talks.\n\nIf you’re among those with tickets, here are a couple Jenkins related events that might interest you:\n\nOn Wednesday at 3:40pm, Carlos Sanchez will be presenting\nJenkins X: Continuous Delivery for Kubernetes in\nTahoma 3/4 @ TCC.\n\nOn Tuesday at 2:35pm, Jonathan Hess & Loren Trout from\nSAP will discuss how\nMigrating Jenkins to Kubernetes Broke Our Brains in Room 606-609.\n\nI look forward to seeing you there!","title":"KubeCon + CloudNativeCon North America 2018 is Here!","tags":["cloud-native","kubernetes","kubecon"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2018-08-16T00:00:00.000Z","id":"8a951bf4-62b1-5a68-b1e8-22376e509229","slug":"/blog/2018/08/16/dwjw-2018-is-almost-here/","strippedHtml":"DevOps World | Jenkins World 2018 in San Francisco is only a month away.\nIt is shaping up to be a great event including the Contributor Summit,\nthe \"Ask the Experts\" desk at the Jenkin booth, several days of training and certifications,\nand tons of informative presentation and demos.\n\nTo give you a taste of what you’ll see this year at DevOps World | Jenkins World 2018,\nwe’ve lined up a series of guest blog posts by a number of this years speakers,\nstarting in the next week with posts from Tracy Miranda, Brent Laster, and Nicholas De Loof.\nFor now, let’s take a look at last year’s keynote from Kohsuke Kawaguchi.\n\nStay tuned!\n\nJoin the Jenkins project at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"DevOps World | Jenkins World 2018 is Almost Here","tags":["event","jenkinsworld","jenkinsworld2018"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2018-01-26T00:00:00.000Z","id":"722f0200-64bd-58bf-8505-41094f0be2dd","slug":"/blog/2018/01/26/fosdem-hackaton/","strippedHtml":"On the first weekend in February, numerous free and open source developers from around the\nworld will travel to Brussels, Belgium, for arguably the largest event of its kind:\nFOSDEM.\nAmong the thousands of hackers in attendance will be a number of Jenkins contributors.\n\nOn the Monday after FOSDEM,\nyou are invited to join a group of those contributors for a full day of hacking on Jenkins.\nFolks of all experience levels are welcome;\nthere will be sessions for everyone from seasoned hackers to new contributors.\n\nAll-day Jenkins Hackfest\n\nThe Hackfest will start at 9:30am on Monday with general introductions and gathering of potential topics/projects.\nBring suggestions for topics that interest you, or just come and choose from the topics others suggest.\nThere will be plenty of topics from which to choose.\nAll the topic suggestions will all be added to a backlog and we will identify and cluster around popular topics.\nThen we’ll divide into smaller groups and work on individual topics in timeboxed sessions.\n\nMeals, snacks, and beverages will be provided throughout the day, wrapping up with dinner around 5pm.\n\nSomething for everyone\n\nHackfests like this one are a great opportunity for contributors of all levels to get invovled, learn from each other, and\nwork together on interesting and high impact areas of the project.\n\nSome long-time contributors already know what areas they’ll work on and are looking for people interested in joining them.\nMark Waite (maintainer of the Jenkins Git and Git Client plugins) and Christian Halstrick (SAP) will be spending the day improving the way Git client plugin uses JGit.\nR. Tyler Croy (Jenkins community concierge) and Olivier Vernin (Jenkins infrastructure engineer) will work on infrastructure improvements.\n\nOthers contributors, such as Jesse Glick and Andrew Bayer\n(recipients of the  \" A Small Matter of Programming\" award), will arrive without a set plan.\nThey will, of course, have some topics to propose, so you might get a chance to work with them.\nOr if you have an area you’d like to work on, they and many other experts will be on hand for discussion and code review.\n\nThis is also a great opportunity for new contributors to join the project.\nBaptiste Mathus, long time contributor and all-around nice guy, will host a \"New Contributor Hackergarten\" covering the basics of contributing to Jenkins and submitting fixes via GitHub Pull requests.\nEven those with minimal coding experience can contribute by improving documentation and making typo fixes via this same process.\n\nFun!\n\nMore than anything else, Hackfests like this are great fun.\nNo matter what your level of exerience, there will be plenty to do and great people with whom to do it.\nReserve a space by\njoining the meetup here.\nThen bring your own laptop and passion for improving Jenkins.\n\nDetails\n\nDate : Monday, February 5, 2018\n\nTime : 9:30 AM to 5:00 PM\n\nLocation : BeCentral sprl/bvba\nCantersteen 12\n1000 Brussel\nBelgium\nRoom: Studio C (1st floor)\n\nRSVP Required\n\nMeals, snacks, and beverages will be provided.\nBring your own computer.\n\nAsk for \"Jenkins\" at the front desk if you get lost.","title":"You are invited to the Post-FOSDEM 2018 Jenkins Hackfest","tags":["fosdem","event"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-08-08T00:00:00.000Z","id":"2e385886-1033-5881-ab06-b060d5568108","slug":"/blog/2017/08/08/introducing-jenkins-minute/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nThere are less than three weeks left until\nJenkins World 2017.\nLike last year, I’ll be at the\n\" Ask the Experts\"\nbooth to answer questions about all things Jenkins.\nIn preparation, I’ve started a continuing series of quick tutorial videos that answer\nsome of the most common questions I’ve seen asked in the community forums.\nThese  are by no means exhaustive - they’re basic answers, which we can build upon.\nEach video give a takes a simple example, shows how to create a working solution,\nand includes links in the description to related Jenkins documentation pages.\n\nI hope you find them useful.  Look for more of them coming soon!\n\nLiam will be at the\n\" Ask the Experts\"\nbooth at\nJenkins World in August.\nRegister with the code JWFOSS for a 30% discount off your pass.\n\nCreating Your First Pipeline in Blue Ocean\n\nUsing a Dockerfile with Jenkins Pipeline\n\nAdding Parameters to Jenkins Pipeline\n\nRecording Test Results and Archiving Artifacts","title":"Introducing the Jenkins Minute video series","tags":["blueocean","docker","jenkins-minute","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-05-18T00:00:00.000Z","id":"231f2272-acd6-5bb2-beae-e3871de86c48","slug":"/blog/2017/05/18/pipeline-dev-tools/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nI’ve only been working with Pipeline for about a year.\nPipeline in and of itself has been a huge improvement over old-style Jenkins projects.\nAs a developer, it has been so great be able work with Jenkins Pipelines\nusing the same tools I use for writing any other kind of code.\n\nI’ve also found a number of tools that are super helpful specifically\nfor developing pipelines. Some were easy to find like the\nbuilt-in documentation\nand the\nSnippet Generator.\nOthers were not as obvious or were only recently released.\nIn this post, I’ll show how a few of those tools make working with Pipelines\neven better.\n\nThe Blue Ocean Pipeline Editor\n\nThe best way to start this list is with the most recent and coolest\narrival in this space: the Blue Ocean Pipeline Editor.  The editor only works\nwith Declarative Pipelines, but it brings a sleek new user experience to writing\nPipelines.  My recent screencast, released as part of the Blue Ocean Launch,\ngives good sense of how useful the editor is:\n\nCommand-line Pipeline Linter\n\nOne of the neat features of the Blue Ocean Pipeline Editor is that it does basic\nvalidation on our Declarative Pipelines before they are even committed or Run.\nThis feature is based on the\nDeclarative Pipeline Linter\nwhich can be accessed from the command-line even if you don’t have Blue Ocean\ninstalled.\n\nWhen I was working on the\nDeclarative Pipeline: Publishing HTML Reports\nblog post, I was still learning the declarative syntax and I made a lot lot of mistakes.\nGetting quick feedback about the whether my Pipeline was in a sane state made writing that blog much easier.\nI wrote a simple shell script that would run my Jenkinsfile through the Declarative Pipeline Linter.\n\npipelint.sh - Linting via HTTP POST using curl\n\n# curl (REST API)\n# User\nJENKINS_USER=bitwisenote-jenkins1\n\n# Api key from \"/me/configure\" on my Jenkins instance\nJENKINS_USER_KEY=--my secret, get your own--\n\n# Url for my local Jenkins instance.\nJENKINS_URL=http://$JENKINS_USER:$JENKINS_USER_KEY@localhost:32769 (1)\n\n# JENKINS_CRUMB is needed if your Jenkins controller has CRSF protection enabled (which it should)\nJENKINS_CRUMB=`curl \"$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\\\":\\\",//crumb)\"`\ncurl -X POST -H $JENKINS_CRUMB -F \"jenkinsfile=\n\n1\nThis is not secure.  I’m running this locally only.\nSee Jenkins CLI for details on how to do this securely.\n\nWith this script, I was able to find the error in this this Pipeline without\nhaving to take the time to run it in Jenkins: (Can you spot the mistake?)\n\n#!groovy\n\npipeline {\n  agent any\n\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      step {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      echo \"Send notifications for result: ${currentBuild.result}\"\n    }\n  }\n}\n\nWhen I ran my pipelint.sh script on this pipeline it reported this error:\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   3831      0 --:--:-- --:--:-- --:--:--  4181\nErrors encountered validating Jenkinsfile:\nWorkflowScript: 30: Unknown stage section \"step\". Starting with version 0.5, steps in a stage must be in a steps block. @ line 30, column 5.\n       stage ('Test') {\n       ^\n\nWorkflowScript: 30: Nothing to execute within stage \"Test\" @ line 34, column 5.\n       stage ('Test') {\n       ^\n\nDoh. I forgot the \"s\" on steps on line 35. Once I added the \"s\" and ran\npipelint.sh again, I got an all clear.\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   5610      0 --:--:-- --:--:-- --:--:--  5750\nJenkinsfile successfully validated.\n\nThis didn’t mean there weren’t other errors, but for a two second smoke test I’ll take it.\n\nReplay\n\nI love being able to use source control to track changes to my Pipelines\nright alongside the rest of the code in a project.  There are also times,\nwhen prototyping or debugging, that I need to iterate quickly on a series\nof possible Pipeline changes.\nThe Replay feature let’s me do that and see the results,\nwithout committing those changes to source control.\n\nWhen I wanted to take the previous Pipeline from agent any to using Docker via\nthe docker { …​ } directive, I used the Replay feature to test it out:\n\nSelected the previously completed run in the build history\n\nClicked \"Replay\" in the left menu\n\nMade modifications and click \"Run\". In this example, I replaced any with the docker { …​ } directive.\n\nChecked the results of changes looked good.\n\nOnce I worked any bugs out of my Pipeline,\nI used Replay to view the Pipeline for the last run and copy it back to my\nJenkinsfile and create a commit for that change.\n\nConclusion\n\nThis is far from a complete list of the tools out there for working with Pipeline.\nThere are many more and the number is growing.\nFor example, one tool  I just recently heard about and haven’t had a chance to delve into\nis the\nPipeline Unit Testing Framework,\nwhich promises the ability to test Pipelines before running them.\nIt’s been a fun year and I can’t wait to see what the next year holds for Pipeline.\n\nHow do you work with Pipeline?\nDo you have a tool that you feel has greatly improved your development experience\nwith Pipeline?  I’m interested in hear about others Jenkins user’s favorite ways\nof working with Pipeline.  Drop me a line via\nemail or on the\n#jenkins IRC channel.","title":"Pipeline Development Tools","tags":["blueocean","pipeline","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-12T00:00:00.000Z","id":"de6a7833-33e4-5a1b-8942-62eba9d0e88e","slug":"/blog/2017/04/12/welcome-to-blue-ocean-dashboard/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI used the Blue Ocean Activity View to track the state of branches and\nPull Requests in one project.\nIn this video, I’ll use the Blue Ocean Dashboard get a personalized view of the\nareas that of my project that are most important to me,\nand also to monitor multiple projects.\nPlease Enjoy!","title":"Getting Started with the Blue Ocean Dashboard","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}}]}},"pageContext":{"author":"lnewman","limit":8,"skip":0,"numPages":4,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}