{
    "componentChunkName": "component---src-templates-author-blog-list-template-js",
    "path": "/blog/authors/clguiman/",
    "result": {"data":{"author":{"avatar":null,"blog":null,"github":"clguimanMSFT","html":"","id":"clguiman","irc":null,"linkedin":null,"name":"Claudiu Guiman","slug":"/blog/authors/clguiman/","twitter":null},"allBlog":{"edges":[{"node":{"date":"2017-04-20T00:00:00.000Z","id":"1824bec7-be57-5f54-a27b-537ad8ff5a34","slug":"/blog/2017/04/20/secure-jenkins-on-azure/","strippedHtml":"This is a guest post by Claudiu Guiman and Eric Jizba,\nSoftware Engineers in the Azure DevOps team at Microsoft. If you have any questions, please email us at azdevopspub@microsoft.com.\n\nOne of the most frequently asked questions for managing a Jenkins instance is\n\"How do I make it secure?\" Like any other web application, these issues must be\nsolved:\n\nHow do I securely pass secrets between the browser and the server?\n\nHow do I hide certain parts from unauthorized users and show other parts to anonymous users?\n\nThis blog post details how to securely connect to a Jenkins instance and how to\nsetup a read-only public dashboard.  We’ll cover topics like: setting up a\nreverse proxy, blocking inbound requests to certain URLs and ports, enabling\nproject-based authorization, and making the Jenkins agents accessible through\nthe JNLP protocol.\n\nDeploy Jenkins\n\nThe simplest way to deploy a secure Jenkins instance is by using the Azure Marketplace offer. If you have an existing Jenkins instance or want to setup your instance manually, follow the steps below.\n\nSecurely log in to Jenkins\n\nAfter you’ve deployed your new virtual machine with a hosted Jenkins instance, you will notice that by default the instance listens on port 8080 using 'HTTP'. If you want to set up 'HTTPS' communication, you will need to provide an SSL certificate. Unfortunately, most certificate authorities are not cheap and other free services like Let’s Encrypt have a very small quota (about 20 certificates per week for the entire 'azure.com' subdomain). The only other option is to use a self-signed certificate, but then users must explicitly verify and mark your certificate as trusted, which is not recommended.\n\nIf you do not setup 'HTTPS' communication, the best way to make sure the sign-in credentials are not leaked due to a Man-in-the-middle attack is to only log in using SSH tunneling.\nAn SSH tunnel is an encrypted tunnel created through an SSH protocol connection, which can be used to transfer unencrypted traffic over an unsecured network. Simply run this command:\n\nLinux or Mac\n\nssh -L 8080:localhost:8080 @\n\nWindows ( using PuTTY)\n\nputty.exe -ssh -L 8080:localhost:8080 @\n\nThis command will open an SSH connection to your remote host and bind remote port 8080 to listen to requests coming from your local machine. Navigate to http://localhost:8080 on your local machine to view your Jenkins dashboard and you’ll be able to log in securely.\n\nSetup a reverse proxy\n\nNow that you can securely log in to your Jenkins instance, you should prevent people from accidentally authenticating through the public (unsecured) interface. To achieve this, you can setup a reverse proxy on the Jenkins hosting machine that will listen on a different port (80 is the best candidate) and redirect only certain requests to port 8080.\n\nSpecifically, it is recommended to block the login and the CLI requests. Some CLI versions fall back to unsecure HTTP connections if they have problems establishing the secured connection. In most cases, users don’t need the CLI and it should be enabled on an as-needed basis.\n\nInstall Nginx:\n\nsudo apt-get update\nsudo apt-get install nginx\n\nOpen the Nginx config file:\n\nsudo nano /etc/nginx/sites-enabled/default\n\nModify the file to configure Nginx to work as a reverse proxy (you’ll need to update):\n\nserver {\n    listen 80;\n    server_name;\n    # Uncomment the line bellow to change the default 403 error page\n    # error_page 403 /secure-jenkins;\n    location / {\n        proxy_set_header        Host \\$host:\\$server_port;\n        proxy_set_header        X-Real-IP \\$remote_addr;\n        proxy_set_header        X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto \\$scheme;\n        proxy_pass              http://localhost:8080;\n        proxy_redirect          http://localhost:8080 http://;\n        proxy_read_timeout      90;\n    }\n    #block requests to /cli\n    location /cli {\n        deny all;\n    }\n    #block requests to /login\n    location ~ /login* {\n        deny all;\n    }\n    # Uncomment the lines bellow to redirect /secure-jenkins\n    #location /secure-jenkins {\n    #  alias /usr/share/nginx/secure-jenkins;\n    #}\n}\n\nThe first section tells the Nginx server to listen to any requests that come from port 80. It also contains a commented redirect of the 403 error to a custom location (we’ll get back to this later).\n\nlisten 80;\n    server_name;\n    # error_page 403 /secure-jenkins;\n\nThe next section describes the reverse proxy configuration. This tells the Nginx server to take all incoming requests and proxy them to the Jenkins instance that is listening to port 8080 on the local network interface.\n\nlocation / {\n        proxy_set_header        Host \\$host:\\$server_port;\n        proxy_set_header        X-Real-IP \\$remote_addr;\n        proxy_set_header        X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto \\$scheme;\n        proxy_pass              http://localhost:8080;\n        proxy_redirect          http://localhost:8080 http://;\n        proxy_read_timeout      90;\n    }\n\nThe last section filters out specific URLs (login, cli) and denies access to them.\n\nlocation /cli {\n        deny all;\n    }\n    location ~ /login* {\n        deny all;\n    }\n\nRestart Nginx:\n\nsudo service nginx restart\n\nGo to http:// and verify you can access your Jenkins instance.\n\nVerify clicking 'login' returns a '403 Forbidden' page. If you want to customize that page, update the Nginx configuration and remove the comments around /secure-jenkins. This will redirect all 403 errors to the file /usr/share/nginx/secure-jenkins. You can add any content to that file, for example:\n\nsudo mkdir /usr/share/nginx/secure-jenkins\necho \"Access denied! Use SSH tunneling to log in to your Jenkins instance!\" | sudo tee /usr/share/nginx/secure-jenkins/index.html\n\nIf restart fails or you cannot access your instance, check the error log: cat /var/log/nginx/error.log\n\nSecure your Jenkins dashboard\n\nIf you go to http:// :8080 you’ll notice you can still\nbypass the reverse proxy and access the Jenkins instance directly through an\nunsecure channel. You can easily block all inbound requests on port 8080 on\nAzure with a\nNetwork\nSecurity Group (NSG).\n\nCreate the NSG and add it to your existing network interface or to the subnet your Azure Virtual Machine is bound to.\n\nAdd 2 inbound security rules:\n\nAllow requests to port 22 so you can SSH into the machine.\n\nAllow requests to port 80 so the reverse proxy can be reached\n\nBy default, all other external traffic will be blocked\n\nNavigate to http:// :8080 and verify you cannot connect.\n\nIf you don’t want to deploy an Azure Network Security Group, you can block port 8080 using the Uncomplicated Firewall (ufw)\n\nConfigure read-only access to your dashboard\n\nAfter installing Jenkins, the default security strategy is 'Logged-in users can do anything'. If you want to allow read-only access to anonymous users, you need to set up Matrix-based security. In this example, we’ll set up a project-based authorization matrix, so that you can make certain projects private and others public.\n\nInstall the Matrix Authorization Strategy Plugin and restart Jenkins.\n\nGo to http://localhost:8080/configureSecurity/ ('Configure Global Security' page under 'Manage Jenkins') and select 'Project-base Matrix Authorization Strategy' from the 'Authorization' options.\n\nAs an example, you can grant read-only access to anonymous users (Overall/Read, Job/Discover and Job/Read should be enough) and grant all logged in users full access in a  group called 'authenticated':\n\nConnect JNLP-based agents\n\nSince your Jenkins instance is only accessible through the reverse proxy on port 80, any Jenkins agents that use the JNLP protocol will not be able to register to the controller anymore. To overcome this problem, all agents must be in the same virtual network as the Jenkins controller and must connect using their private IP (by default, the NSG allows all internal traffic).\n\nMake sure that the Jenkins virtual machine will always be assigned the same private IP by going to the Azure Portal, opening the Network Interface of your virtual machine, opening 'IP configuration', and clicking on the configuration.\n\nMake sure the Private IP has a static assignment and restart the virtual machine if necessary.\n\nCopy the static IP Address and go to http://localhost:8080/configure ('Configure System' page under 'Manage Jenkins') and update the 'Jenkins URL' to point to that private IP ( https://10.0.0.5:8080/ in this example)\n\nNow agents can communicate through JNLP. If you want to streamline the process,\nyou can use the\nAzure VM Agents plugin,\nwhich automatically deploys agents in the same virtual network\nand connects them to the controller.","title":"Securing a Jenkins instance on Azure","tags":["azure","cloud"],"authors":[{"avatar":null,"blog":null,"github":"clguimanMSFT","html":"","id":"clguiman","irc":null,"linkedin":null,"name":"Claudiu Guiman","slug":"/blog/authors/clguiman/","twitter":null}]}}]}},"pageContext":{"author":"clguiman","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}