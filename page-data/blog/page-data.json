{
    "componentChunkName": "component---src-pages-blog-js",
    "path": "/blog/",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2010-02-02T00:00:00.000Z","id":"d1b728cc-4c87-5603-8f6b-a6c50763e19b","slug":"/blog/2010/02/02/welcome-to-continuous-blog/","strippedHtml":"Hello and welcome to \"Continuous Blog\", the official Hudson weblog! If you\ndon’t mind me saying so, I think its arrival is long overdue. Since Hudson\nstarted in November of 2006, there hasn’t been a central \"voice\" for the\nproject. In just a few short years Hudson has grown into a substantial project\nwith hundreds of plugins and thousands of users around the world.\nKohsuke 's\nnice Java-based extensible continuous integration server has grown up into\nfantastic tool with a great community around it.\n\nGoals for this weblog\n\nI think it is important to set out a couple of goals for this weblog, some simple items that should help guide the content and discussion around Continuous Blog and its future.\n\nContinuous Blog should:\n\nHelp advocate the use of Hudson to the larger internet community\n\nBe a central source for tutorials and helpful information to Hudson users of all skill-levels\n\nRecognize the numerous contributors to the Hudson project for their efforts\n\nWhat to expect\n\nAs Continuous Blog grows and matures, you can expect to see a variety of Hudson-related content. Overviews of the latest releases of Hudson and its plugins, interviews and discussions with the developers who have contributed to Hudson over the years, guest posts by power-users on how Hudson fits into their workflow and much much more (really).\n\nIf you look around the page you’ll already see a good amount of content, in the\nsidebar to the right you’ll notice the \"Recently Released\" section which\naggregates recently released plugins via this RSS\nfeed, the \"Blogs\"\nsection which is an aggregation of Hudson community blogs (from this RSS\nfeed).\n\nWe’re just starting out so make sure you subscribe to the RSS feed, we’ve got a lot to talk about here on Continuous Blog.","title":"Welcome to Continuous Blog!","tags":["core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-08T00:00:00.000Z","id":"46c490c7-fdcb-59a9-9ef3-51ffcdd4cba8","slug":"/blog/2010/02/08/hudson-1-344-released/","strippedHtml":"The latest release of Hudson, 1.344, was released on February 5th, 2010. The release contains primarily bug-fixes but has a few enhancements baked into it as well. As mentioned in \" [Incoming! More Translations\", 1.344 incorporates a number of community-driven translations (see the other post for more information). Additionally, 1.344 removes the \"easter egg\" background image I wrote about in a post to my personal blog: Mourning Sun Enough of the small talk, here’s the breakdown.\n\nBugs fixed\n\nRemoved the forced upper casing in parameterized builds. ( issue 5391)\n\nPassword parameter on the disk should be encrypted. ( issue 5420)\n\nDuplicate entries on Upstream/Downstream project with \"Build modules in parallel\". ( issue 5293)\n\n\"Projects tied on\" should be \"Projects tied to\". ( issue 5451)\n\nFixed the bug that prevents update center metadata retrieval in Jetty. ( issue 5210)\n\n+\n\nEnhancements\n\nShow which plugins have already been upgraded in Plugin Manager. ( issue 2313)\n\nShow Hudson upgrade status on manage page instead of offering same upgrade again. ( issue 3055)\n\nMake badges in build history line up. ( report)\n\n+\n\nContributors\n\nThis release of Hudson contained 44 commits from 5 different contributors to \"core\":\n\nabayer\n\nkohsuke\n\nmindless\n\nsogabe\n\nhuybrechts\n\n+\nAs usual, you can go grab the http://mirrors.jenkins.io/war-stable/latest/jenkins.war[latest .war file] straight from `hudson-ci.org` or if you're using a native package, use your package manager to upgrade.\n\nUpdate: This post was written a day before issue 5536 was discovered. I recommend waiting until 1.345 to update any production Hudson instances.","title":"Hudson 1.344 Released","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-08T00:00:00.000Z","id":"169135b2-865a-557a-8f1e-c315eb236bb2","slug":"/blog/2010/02/08/breaking-hudson-1-345-released/","strippedHtml":"As I mentioned in the footer of the post on the Hudson 1.344 release, there were a couple big regressions in the 1.344 release that were causing a number of users issues (such as issue 5536 and issue 5546).\n\nAs a result, Kohsuke and the team have quickly pushed out a hot-fix release: 1.345. Here’s the break down:\n\nBugs fixed:\n\nUpdate center retrieval, \"build now\" link, and real-time console update was broken in 1.344 ( issue 5536)\n\nFixed the backward incompatibility introduced in HUDSON-5391 fix in 1.344. ( issue 5391)\n\nIf you have already updated to 1.344, your \"Update Center\" is most likely busted and you’ll need to download the hudson.war file manually.\n\nYou can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Breaking! Hudson 1.345 Released!","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-09T00:00:00.000Z","id":"985837f3-6dcc-5a5d-bb91-8dd351a4bd3c","slug":"/blog/2010/02/09/whats-going-on-with-the-hudsons-infrastructure/","strippedHtml":"A lot has changed in the Hudson development and distribution infrastructure since last summer - we’ve made a distinct effort to get the quality of our infrastructure to match the quality of Hudson itself. We owe a special thanks to the wonderful folks over at Atlassian - we’re taking advantage of their generous open source license for our bug tracking ( JIRA), wiki ( Confluence), and source repository browser ( FishEye). Obviously, there’s a lot more we can improve going forward - I’ll have another post up soon, looking at some of the ideas we’re kicking around. But for now, take a look at what we’ve already done, below the fold.\n\nThe Hudson war and plugin downloads have all moved off of the unreliable java.net to our own [hudson-ci.org]( https://hudson-ci.org) with the downloads being powered by the same system used for distributing Java, OpenSolaris, and NetBeans. Downloading Hudson and/or plugins is now easier and more reliable.\n\nWe’ve moved issue tracking from java.net’s system to our own JIRA instance, at [issues.hudson-ci.org]( https://issues.hudson-ci.org). As with moving downloads off java.net, we’ve made reporting and browsing Hudson’s issues much faster, easier and more reliable, while still using the same authentication on the back-end as our Subversion and Maven repositories. We’re still working out some kinks in the system but since we’re running our own issue tracker now, rather than using one we didn’t have control over, we’ve got the flexibility we need to adapt our tools to best serve the developer and user communities.\n\nSpeaking of tools we now run ourselves, we’ve put up our own FishEye instance at [fisheye.hudson-ci.org]( https://fisheye.hudson-ci.org) - until that was in place, we’d been relying on Atlassian’s public FishEye instance, which has many other open source projects' repositories available. Getting our own server up means we don’t have to bug the generous folks over at Atlassian every time the java.net SVN server confuses FishEye into failing to update. It also opens the door for us to use Crucible for code review in the future.\n\nHudson’s moved onto Twitter more and more over the last 6-9 months - we’ve got the always fabulous @hudsonci, tweeting new releases, Hudson-related tweets, and more, as well as the #hudsonci hashtag.\n\nThis may not strictly be infrastructure but it’s worth mentioning that we’ve now got native packages and distribution for Hudson for Ubuntu/Debian, Red Hat/Fedora/CentOS, openSUSE, OpenSolaris/Nevada, and FreeBSD.\n\nThis is all in addition to key parts of our infrastructure that haven’t changed: our official wiki, our user and developer mailing lists, our Subversion repository (and a Git mirror on GitHub) and our IRC channel over on Freenode.\n\nOh, and I hear there’s a blog now too.\n\nEditor’s Note: *Andrew Bayer ( abayer) has been a contributor to Hudson since early 2009, contributing to the ClearCase plugin, Hudson’s core and a small number of other plugins. Andrew also helps Kohsuke with a lot of Hudson’s project infrastructure, most notably the migration from Bugzilla on Java.net to JIRA running at issues.hudson-ci.org *","title":"What's going on with the Hudson's infrastructure","tags":["development","core","feedback","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-08T00:00:00.000Z","id":"aa2877fa-4ae7-5b43-84fc-d36f583121c5","slug":"/blog/2010/02/08/incoming-more-translations/","strippedHtml":"As Kohsuke mentioned on the dev@ mailing\nlist on January 29th,\nanother series of community translations of Hudson have been committed\n( r26764) and have been released with the\nHudson 1.344 release.\n\nThe locales included in this update are:\n\nCzech\n\nSpanish\n\nFinnish\n\nFrench\n\nHungarian\n\nJapanese\n\nKorean\n\nLithuanian\n\nNorwegian\n\nDutch\n\nPolish\n\nBrazilian Portuguese\n\nRussian\n\nSlovenian\n\nSwedish\n\nChinese (Simplified/Traditional)\n\nIf you’re fluent in any of the locales above, check out the latest release of Hudson to verify that the translations are correct, if there’s translations that you feel are incorrect, you can report them in JIRA.\n\nThe [internationalization] https://jenkins.io/doc/developer/internationalization/) project could always use some more help whether it be from patches or via the Translation Assistance Plugin.","title":"Incoming! More Translations","tags":["development","feedback","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-10T00:00:00.000Z","id":"bf65fc5d-5128-5381-a704-e7da235ac78d","slug":"/blog/2010/02/10/keeping-your-configuration-and-data-in-subversion/","strippedHtml":"We all know that keeping important files in version control is critical, as it ensures problematic changes can be reverted and can serve as a backup mechanism as well. Code and resources are often kept in version control, but it can be easy to forget your continuous integration (CI) server itself! If a disk were to die or fall victim to a misplaced rm -rf, you could lose all the history and configuration associated with the jobs your CI server manages.\n\nIt’s pretty simple to create a repository, but it isn’t obvious which parts of your $HUDSON_HOME you’ll want to backup. You’ll also want to have some automation so new projects get added to the repository, and deleted ones get removed. Luckily we have a great tool to handle this: Hudson!\n\nWe have a Hudson job which runs nightly, performs the appropriate SVN commands, and checks in. The high-level overview of this job is basically:\n\nAdd any new jobs, users, plugin configurations, et cetera: svn add -q --parents.xml jobs/ /config.xml users/ /config.xml userContent/\n\nRemove anything from SVN that no longer exists (such as a deleted job): svn status | grep '!' | awk '{print $2;}' | xargs -r svn rm\n\nCheck it in! svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\"\nYou’ll want to make sure to use the --non-interactive option for any automated svn operations, as this ensures Subversion won’t hang asking a question but instead fail immediately. You may also need to provide your password with the --password option.\n\nTo make such a Hudson job, create a new job, tie it to the controller (since this is where the configuration files are), set it to build periodically (we use “@midnight”), and add an “Execute shell” build step. Here’s the full script we use, to put into the build step:\n\n# Change into your HUDSON_HOME.\ncd /opt/hudson\n# Add any new conf files, jobs, users, and content.\nsvn add -q --parents *.xml jobs/*/config.xml users/*/config.xml userContent/*\n# Ignore things in the root we don't care about.\necho -e \"warnlogn*.logn*.tmpn*.oldn*.bakn*.jarn*.json\" > myignores\nsvn propset svn:ignore -F myignores . && rm myignores\n# Ignore things in jobs/* we don't care about.\necho -e \"buildsnlast*nnext*n*.txtn*.lognworkspace*ncoberturanjavadocnhtmlreportsnncoverndoclinks\" > myignores\nsvn propset svn:ignore -F myignores jobs/* && rm myignores\n# Remove anything from SVN that no longer exists in Hudson.\nsvn status | grep '!' | awk '{print $2;}' | xargs -r svn rm\n# And finally, check in of course, showing status before and after for logging.\nsvn st && svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\" && svn st\n\nYou’ll notice this does some extra things like set the svn:ignores property to provide a relatively clean svn st which it shows before and after the commit for logging purposes. One thing this job doesn’t do is put the build results of your jobs in version control. Because historical build logs and artifacts will never change and are also potentially large, a periodic (daily or weekly) cp or rsync of the jobs directory will still give you restorability while keeping your repository lean.\n\nNow you can sleep well at night knowing that your CI server is safe and sound. If you are doing a similar thing with Hudson or another CI system, let us know about your solution!\n\nEditor’s Note: Mike Rooney is a Software Engineer at Genius.com, provider of real-time marketing automation software connecting marketing and sales. You can read more posts from Mike and other Geniuses at eng.genius.com","title":"Keeping your configuration and data in Subversion","tags":["development","guest post","jobs","just for fun","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-11T00:00:00.000Z","id":"9dc5f12a-2cfe-53e1-a2b5-4db99283731e","slug":"/blog/2010/02/11/spotlight-on-ita-software/","strippedHtml":"For the first \"User Spotlight\" interview ever on Continuous Blog, I am talking with Matt Girard of\nITA Software, a Boston-based software company that produces travel industry software which is used by many of the major carriers in the U.S. and abroad. When I sent out a message asking for users of Hudson in the corporate space to ping me about doing a \"spotlight\" on them, ITA Software stuck out in particular; they’re hiring a Hudson expert!\n\nThe format for the \"spotlight\" series isn’t entirely nailed down yet so feel free to ask questions in the comments section and I’ll follow-up with Matt after the fact if need be. That said, without further delay, Matt Girard from ITA Software, on Hudson.\n--- Hudson Matt, appreciate you taking the time to answer some questions about Hudson at ITA Software, let’s start with a simple one: How long has ITA been using Hudson?\n\nMatt My pleasure, glad to be a part of the community. We have been using Hudson in some form since early 2008. Predictably our usage has increased over time and now encompasses the majority of our automated build and test infrastructure.\n\nHudson Was continuous integration a part of ITA’s workflow prior to adopting Hudson? If so: what did ITA switch to Hudson from, and why?\n\nMatt Yes, though not to the degree that we have now. Prior to Hudson we were reliant on BuildBot for our automated builds, but we were not doing continuous integration\n across our components until after the transition to Hudson. The easy to understand UI and flexibility were primary features that compelled our switch. I should mention\n that when we decided to switch we also evaluated CruiseControl but Hudson came out on top for our needs.\n\nHudson What kind of projects are you typically using Hudson for? What\nlanguages/build system(s)? What platforms is Hudson performing builds? What kinds of jobs primarily run on ITA’s Hudson cluster?\n\nMatt Our Hudson environments (yes, we have more than one) have been optimized for building C++, Java (all maven based), Lisp (a surprise to some to be sure more about that here), and Python on Linux build agents (Fedora and CentOS).\n\nOur jobs are (loosely) grouped into one of three categories: rpm (we are primarily RedHat based), tests, and tools. The rpm jobs are the actual code builds and individual component unit tests. The test jobs (thank you parameterized trigger plugin!) are part of a larger cross-component integration testing and promotion scheme. The (handful of) tools jobs support us in tasks such as cleaning up stale sandbox database connections.\n\nHudson Given the flexibility of Hudson, it’s safe to say that not everybody is using it in the exact same fashion, is there anything you would consider interesting or noteworthy about the use of Hudson at ITA?\n\nMatt I think that our most interesting usage of Hudson has to be how we have combined parameterized builds with the parameterized trigger plugin in order to do cross-component testing of trunk code. More specifically, we pass a properties file (to us a \"scoreboard\" that tells the jobs what exact revisions of which projects to\n test together) to several jobs and only build a final promotion job if ALL of downstream jobs (with the same scoreboard) passed. In this way we create a hurdle that all of our code must clear before we even consider deploying it anywhere else.\n\nThe next most interesting thing we are doing is using Hudson for continuous deployment of monitoring changes into our staging environment. It’s quite rewarding to watch a check-in makes it’s way through Hudson, into and rpm, and out to a server without a human being involved.\n\nHudson Are there any additional tools ITA has written to better integrate things \"behind the scenes\"?\n\nMatt We evolved what became a very large build script (mostly derived from what we had for BuildBot) that handles all of the nitty-gritty details involved in the building, packaging, and testing of our software. Recently we have been working to refactor this into several smaller build tools each with a more focused purpose. The first of these is designed (largely as a wrapper to rpmbuild) to standardize our package building while leaving the .spec files (with the real specifics) living alongside the code where they belong.\n\nHudson On a scale from 1-10, how important would you rate Hudson for ITA’s\nday-to-day workflow?\n\nMatt ITA is a decent size company and there is plenty of work that goes on that does not involve Hudson in any way. Still since we rely on the building and testing that Hudson does in order to promote new code to production, I would say that we are somewhere around an 8.\n\nI’d like to thank Matt again for being a good sport as the very first in what I hope will be a long line of \"spotlights\" on companies using Hudson to help them work smart, better and faster. If you would like to discuss your company’s use of Hudson for Continuous Blog, you can contact me at tyler at linux.com\n\nEditor’s Note: Matt Girard is the Manager of Build and Integration at ITA Software and a passionate advocate for continuous integration and continuous deployment. He believes that release engineering exists to make developers lives easier — not harder — and can be found posting about such topics on Twitter as @equalize.","title":"Spotlight on: ITA Software","tags":["general","feedback","interview"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-12T00:00:00.000Z","id":"951ade56-1f15-5d62-baf7-28408a9805fb","slug":"/blog/2010/02/12/this-week-in-plugins/","strippedHtml":"Since this is the first \"This Week in Plugins\" (TWiP), I’m trying a fairly basic format out. I’m debating how much information I want to include in these, while I would like to include details on \"what’s changed\" for each plugin over the course of the week, the means of fetching that information would be incredibly tedious (read: no fun) since there’s not particularly any standard meta-data to be scraped from the wiki. Duplicates have been pruned from the list, meaning the latest release of a plugin is what’s being shown; sorting is also by day of release then alphabetical.\n\nFeb 4th, 2010\n\nCodescanner Plug-in 0.9 released\n\nFeb 5th, 2010\n\nCentralized Job(Re)Action 1.1 released\n\nPerformance Publisher plugin 7.95 released\n\nSelenium Auto Exec Server(AES) plugin 0.3 released\n\nFeb 6th, 2010\n\nMSTest plugin 0.5 released\n\nTextFinder plugin 1.8 released\n\nFeb 7th, 2010\n\nConfiguration Slicing plugin 1.16 released\n\nFeb 8th, 2010\n\nClearCase UCM Baseline Plug-in 1.2 released\n\nJoin plugin 1.8 released\n\nFeb 9th, 2010\n\nDownstream-Ext 1.5 released\n\nGroovy Postbuild 1.1 released\n\nFeb 10th, 2010\n\nBatch task plugin 1.13 released\n\ndisk-usage plugin 0.10 released\n\nJBoss Management Plugin 1.0 released\n\nSidebar Link 1.3 released\n\nslave-status 1.4 released\n\nSLOCCount Plug-in 1.4 released\n\nStarTeam plugin 0.2 released\n\nTemplate Project plugin 1.1 released\n\nTuxDroid Plugin 1.6 released\n\nZentimestamp plugin 1.2 released\n\nFeb 11th, 2010\n\nBackup plugin 1.4 released\n\nPromoted Builds (Simple) 1.2 released\n\nPython Plugin 1.1 released\n\nSubversion Plug-in 1.11 released","title":"This Week in Plugins","tags":["infrastructure","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-14T00:00:00.000Z","id":"84b99421-35ba-54b4-ac47-36143a5e7a39","slug":"/blog/2010/02/14/thanks-for-the-help/","strippedHtml":"A great community of developers and users is one of the many things that make Hudson a great tool and a fun project to work with, after launching Continuous Blog as an extensions of that community earlier this week there are some thanks in order to those that helped spread the word about CB and in turn, Hudson. Thanks to:\n\nEverybody on Twitter who retweeted the Continuous Blog launch announcement\n\nJulian Simpson, also known as The Build Doctor for helping spread the word\n\nKevin Farnham for featuring the launch of Continuous Blog on the Java.net home page!\n\nOf course, none of this would be possible without Kohsuke and a large collection of contributors that have made Hudson what it is today.","title":"Thanks for the help!","tags":["core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-15T00:00:00.000Z","id":"14568d6a-fed2-5300-b85e-0b16bfc36af4","slug":"/blog/2010/02/15/hudson-1-346-released/","strippedHtml":"After some scrambling earlier in the week to get 1.345 out the door, correcting some regressions in 1.344, the Hudson team still rolled out a 1.346 release last Friday, February 12th, 2010. Similar to the past couple releases, 1.346 had a good number of bug fixes, including a a performance fix when dealing with larger build submissions and a substantial revision of the SCM polling code to fix a long-standing issue with the quiet period blocking the build from running ( issue 2180), there were also some additionally memory improvements made to Jelly, the library with which the majority of Hudson’s web interface is rendered, that Kohsuke will detail in a later post.\n\nHere’s the breakdown:\n\nBugs fixed\n\nMaven modules should not be buildable when the parent project is disabled. ( issue 1375)\n\nFixed the broken quiet period implementation when polling interval is shorter than the quiet period. (Changes in SCM impls are needed for this to take effect.) ( issue 2180)\n\nEscape username in URLs in case it contains special characters such as \"#\". ( issue 2610)\n\nFix sidepanel link for People to be visible and show view-specific info when appropriate. ( issue 5443)\n\nImproved HTML rendering, not using closing tags that do not exist in HTML. ( issue 5458)\n\nShow better error message for missing view type selection when creating a view. ( issue 5469)\n\nHudson wasn’t properly streaming a large external build submission, which can result in OOME and unresponsiveness.\n# Enhancements\n\nUse fixed-width font in text area for shell/batch build steps. ( issue 5471)\n\nUse user selected icon size on People page. ( issue 5447)\n\nSpeed/footprint improvement in the HTML rendering.\n\n# Contributors This release of Hudson contained 37 commits from 3 different contributors to \"core\": * kohsuke * mindless * sogabe\nAs usual, you can go grab the [latest .war file]( http://mirrors.jenkins.io/war-stable/latest/jenkins.war) straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade. ---- Updated: Added the \"official\" changelog notes","title":"Hudson 1.346 Released","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-16T00:00:00.000Z","id":"d8a54963-98f5-5089-94f4-d01ae20a6094","slug":"/blog/2010/02/16/performance-improvements-in-1-346/","strippedHtml":"From time to time, we get a report of out of memory problems in Hudson. It’s frequent enough that we have a dedicated Wiki page that talks about how to obtain information to help devs work on the problem.\n\nSo the latest thread from David Woon was assumed to be one of those ordinary trouble-shooting sessions, but thanks to Gustaf Lundh, it turned out to be a very interesting exercise.\n\nWhat we discovered was that the profiler I was using ( Your Kit Profiler), was basically eliminating all the weak/soft references from the picture entirely. If we are looking for leaks, this was the right thing, as those references will be cleared before VM chokes with OutOfMemoryError. But because of this elimination, I was completely blind to the wasteful memory usage in Jelly, which are only reachable via soft references.\n\nSo I used Eclipse Memory Analyzer and YJP side by side to look into Jelly’s memory usage, and based on that insight, I was able to substantially improve the memory usage and speed of Jelly.\n\nI monitor my production Hudson deployment with VisualGC, and the result was quite noticable. And I hope you’ll notice that the response from Hudson is also snappier.\n\nAll these changes are a part of the latest 1.346 release.\n\nEditor’s Note: Kohsuke Kawaguchi a senior engineer at Oracle (formerly Sun) and is the founder and author of the Hudson project. To learn more about Kohsuke, you can follow him on Twitter or subscribe to his blog.","title":"Performance improvements in 1.346","tags":["development"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-17T00:00:00.000Z","id":"8c069e9b-d471-5bea-86b9-a057759e2c8c","slug":"/blog/2010/02/17/getting-started-building-android-apps-with-hudson/","strippedHtml":"In this post I’ll show a very basic tips on how to compile an Android project using Hudson. Specifically how  I use Hudson to create release versions of my apps.\n\nDebug vs Release\n\nI’m assuming that you are using Eclipse with the ADT plugin. During development you can test your app on the emulator or a device and resources like R.java and aidl files are compiled for you automatically by the plugin. When it’s time to release your app, you’ll need to go through some steps:\n\nYou must sign your app using a certificate\n\nYou must update your AndroidManifest.xml to remove the android:debuggable attribute\n\nReplace your Google Maps API debug key with the one belonging to your release certificate (if you are using a MapView)\n\nGenerate an apk package for the release and test it on a device or emulator\n\nIt would be nice to automate a few of these steps, and this is where Hudson comes in.\n\nAutomated builds: Ant\n\nFor automated builds the Android SDK uses Apache Ant, which Hudson has great support for. To generate a template build.xml you can use the android tool from the SDK using the following command:\n\nandroid create project -n template -t android-7 -p template -k dummy.pkg -a Dummy\n\nThe target is specified as \"android-7\" meaning that we are building for Android 2.1. For apps that use MapView we would use \"Google Inc.:Google APIs:7\". It is a good idea to always target the latest SDK. From this template project we’ll grab the build.properties and the build.xml and copy those to the Android project that we want to build. Edit build.xml and set the project name to your Android project name.\n\nThe local.properties file contains the path to the SDK root and shouldn’t be checked in to version control. For our use we’ll set the properties that are in that file on the Hudson job configuration page.\n\nRunning the build in Hudson\n\nThis part is easy: create a new freestyle job and let it be build with ant. The targets that we want to execute are clean release. Release will compile, package and sign your apk. Now to get this working right, some custom properties should be set (use the Advanced button).\n\nsdk.dir=/Users/hugo/Code/android-sdk-mac\ntarget=Google Inc.:Google APIs:7\nkey.store=certs/rd-release.keystore\nkey.alias=rainydays\nkey.store.password=thisisnotmypassword\nkey.alias.password=thisisnotmypassword\n\nThe sdk.dir should point to the Android SDK root on your Hudson node. In my case I’m running Hudson locally on my machine.  The target property refers to the SDK we want to use as mentioned earlier.  The key. properties are related to signing of the apk. My strategy is to have a separate key store and private key for each application that I develop. I also check that keystore in to SVN. I also archive the -release.apk artifact so that I can download the latest release apk directly from Hudson.  After completing these steps, you should be able to build your Android app with Hudson.\n\nUpdating the AndroidManifest for release\n\n…​But we’re not done yet :) Remember what I said about updating the AndroidManifest.xml? For that we need to edit the build.xml, which by default contains nothing more then a tag to pull in the Android SDK ant target definitions. For my Rainy Days application, I adjusted build.xml like this:\n\n...\n\nRemoving debug attribute from AndroidManifest.xml\n\nSetting release maps key\n\nWhat the above snippet does is removing the android:debuggable attribute from the AndroidManifest.xml and replacing the maps API key in res/layout/maplayout.xml with the correct key for release. The -package-resources target is pulled in from the Android android_rules.xml file.\n\nNow when Hudson builds my app I get a ready to release apk that I can install on my device or emulator, which is pretty nice.\n\nThere is are some issues with this approach however. As you might have noticed:\n\nReplacements are done in the workspace, we are not really building exactly what’s in svn\n\nEach new build should start out fresh for that reason, for example by using the svn revert option.\n\nAdditionally I can not yet tag the release version with the updated files, because the subversion tagging plugin doesn’t support this by design. This could be worked around by adding svn statements in the build.xml however.  For now I don’t really mind as I make minor changes to the resource files, but I’ll be looking at improving this situation.\n\nThings to add: unit testing, coverage…​\n\nOne thing that I’d really like to add is unit testing. This is a little bit more complicated though, since unit tests require a running emulator and a running emulator requires a gui. The Hudson Xvnc plugin could be very helpful here.\n\nThe Android build scripts for test projects already include EMMA output, it shouldn’t be to hard to use the Hudson plugin for that.\n\nWhen Hudson is running on a local machine, the Batch task plugin can automate installing the apk on a device to automate things further.\n\nSummary\n\nBuilding Android applications with Hudson is not that hard, since the builds are based on Ant. By hooking in to the standard Android build targets it’s easy to update files like AndroidManifest.xml which in turn makes sure the release process is controlled and predictable.\nAndroid unit tests depend on the emulator which is a little bit more challenging to set up, but Hudson already has some plugins available to make this easier.\n\nEditor’s Note: Hugo Visser is the developer of Rainy Days and Engine Watch for Android. You can\nfollow him on Twitter and on his blog.","title":"Getting started: Building Android apps with Hudson","tags":["general","guest post","jobs","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-18T00:00:00.000Z","id":"31ee437f-9e98-5ac2-b284-4a71fe1a1813","slug":"/blog/2010/02/18/spotlight-on-visfleet/","strippedHtml":"For this week’s user spotlight, I’m talking to Rasheed Abdul-Aziz of\nVisFleet Ltd. out of New Zealand. This being our second \"spotlight\" on a particular company, the format can still be considered beta; if you have any additional questions for Rasheed, feel free to ask them in the comments and I’ll try to get Rasheed to answer.\n\nSimilar to the spotlight on ITA Software from last week, VisFleet builds business software helping their customers operate their businesses more effectively through web applications in tandem with mobile applications. While I could endlessly discuss the power and flexibility of Hudson, particularly for building web software, I’ll let Rasheed do the majority of the talking, so let’s get to it.\nintroducing VisFleet, would you mind explaining a bit more of what you guys do and some of the challenges it presents?\n\nRasheed It’s a pleasure. VisFleet has changed it’s direction somewhat, moving from\nservices into product development. As we move into product, we want to be\nresponsive to our customers. Agile development is becoming core to how we\noperate, and as such, continuous builds and integration became a major\nfactor. We now plan to offer two products for work planning and and vehicle\ntracking. We want to present these systems with a SaaS model. The world of\nonline, pay as you go software, has a culture of frequent improvements and\nresponsiveness to user feedback. If we want to do well in this space, it’s\nimportant that we can code, test, release and feed back in\ntight iterations.\n\nHudson How long has VisFleet been using Hudson?\n\nRasheed About 14 months now.\n\nHudson Did you guys work with continuous integration prior to starting to use\nHudson? If so, what system was VisFleet using and what compelled the switch\nto\nHudson?\n\nRasheed We didn’t actually, but certainly everyone I knew who was doing continuous\nintegration recommended Hudson.\n\nHudson That’s good to hear! How lucky you are to know so many smart people :)\nWhat kinds of projects is VisFleet building with Hudson?\n\nRasheed We build and test Ruby On Rails service layer applications. We also build Flex applications using the Flex SDK for our web-deployed RIA offering. Lastly, we build our iPhone applications using Hudson.\n\nHudson I’d say building and testing web applications alone with Hudson would be quite notable, but to add Flex and iPhone applications into the mix as well is certainly interesting! Anything specific that’s interesting about VisFleet’s use of Hudson?\n\nRasheed It runs multiple agent types, and automates deploys to different cloud\ninfrastructures. At the moment we have 2 Flex build agents running Ubuntu, A\nMac Mini building our iPhone app, and several Ubuntu Servers testing our web\ntier. We currently deploy to Citrix Xen servers, and soon to Rackspace Cloud as well.\n\nIn the near future, we will automate integration by first updating an\nintegration system on the cloud, deploying our system and then running our\ntests. All very quickly.\n\nWe have very little metric and reporting output from Hudson, and this is\nnoteworthy in it’s absence. It’s very important  to use to provide clear\ndevelopment metrics and integrate those into our Scrum / Kanban approach. What\nHudson has done for us is educate us about the possibilities in\nvisualisation and reporting, and is informing the way we structure our\ncodebase going forward. Soon, we expect to have a premium test driven\ndevelopment environment and workflow.\n\nHudson We all know Hudson isn’t perfect but there’s a lot of room for extending it to meet your demands if need be, what additional tools have you written to glue everything together behind\nthe scenes?\n\nRasheed We are using ' Vlad the Deployer ' and in legacy, ' Capistrano ' for a lot of\nour deployment and build tasks. These are merely infrastructure specific\nscripts to ensure we can bring up live environments in the shortest amount\nof time possible.\n\nHudson So it sounds like you guys are all on board with Hudson, on a 1-10 scale, how important would you rate Hudson’s importance to VisFleet’s workflow?\n\nRasheed 7, aiming at 10. The missing points are just a matter of time :)\n\nThanks again to Rasheed for chatting with me about how Hudson helps VisFleet keep cranking on what they do best. If you would like to discuss your company’s use of Hudson for Continuous Blog, you can contact me at tyler at linux.com\n\nEditor’s Note: Rasheed Abdul-Aziz is a Software Architect at VisFleet Ltd. Rasheed specializes in Flex RIA development, but also loves a good build script and manages Hudson for VisFleet. Find out more about VisFleet and Rasheed on the VisFleet devblog and Rasheed’s blog","title":"Spotlight on: VisFleet","tags":["general","feedback","interview"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-19T00:00:00.000Z","id":"b2019f50-9069-58bc-a953-a153928b72e7","slug":"/blog/2010/02/19/this-week-in-plugins/","strippedHtml":"Last week’s TWIP enumerated the release of 26 different plugin, this past week has seen 19 unique releases in comparison. You might be tempted to assume that less plugin development has occurred over the past week, which isn’t the case. Last week a number of the releases were \"code updates\", i.e. plugins being rebuilt against the latest Hudson plugin API as opposed to new features or bug-fixes. With the releases of plugins this past week, it seems a large number of the releases contained new features and bug fixes, including three new plugins!\n\nMaking their Hudson debut are the following\n\nAgent Monitor for system load average\n\nTool Environment plugin\n\nIvy plugin\n\nIf you’re interested in contributing to an existing plugin, or building your own, I highly recommend checking out the plugin tutorial and joining the dev@ mailing list. That said, here are this week’s releases, starting with last Friday.\n\nFeb 12th, 2010\n\nFile System SCM 1.6 released\n\nJIRA plugin 1.19 released\n\nJob Configuration History Plugin 1.2 released\n\nMSTest plugin 0.6 released\n\nAgent Monitor for system load average 1.1 released\n\nTemplate Project plugin 1.2 released\n\nFeb 13th, 2010\n\nxUnit plugin 0.5.2 released\n\nFeb 14th, 2010\n\nAmazon EC2 plugin 1.6 released\n\nDependency Analyzer Plugin 0.5 released\n\nDocLinks plugin 0.3 released\n\nTool Environment plugin 1.0 released\n\nFeb 15th, 2010\n\nArtifactory Plugin 1.0.6 released\n\nDimensions SCM plugin 0.6.8 released\n\nFeb 16th, 2010\n\nHTML Publisher plugin 0.2.2 released\n\nFeb 17th, 2010\n\nIvy plugin 1.0 released\n\nJBoss Management Plugin 1.0.2 released","title":"This Week in Plugins","tags":["infrastructure","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-22T00:00:00.000Z","id":"f3a9b5ed-57ae-5584-924b-67bf0b9b498a","slug":"/blog/2010/02/22/hudson-1-347-released/","strippedHtml":"The release of Hudson 1.347 last friday, February 19th, was a relatively \"minor\" one insofar that it contained an assortment of smaller fixes instead of fixes to major regressions (they weren’t any to be fixed) or major features added. There were however some notable commits in this release cycle that didn’t make the changelog just yet, for example https://twitter.com/ godin [godin] committed an ebuild which will allow for a native package of Hudson for Gentoo Linux, joining the ranks of the existing packages for Debian/Ubuntu, FreeBSD, OpenSolaris, openSUSE and RedHat/Fedora Linux. The bundled Subversion plugin was updated and thanks to sogabe and wyukawa the Japanese translations for Hudson got some updates as well.\n\nFor Hudson developers, both plugin and core, this release contains some notable changes from mindless (a.k.a Alan Harder), a number of calls which have been deprecated for over two years have finally been pruned from the code base:\n\nHudson.addListener(JobListener), Hudson.removeListener(JobListener)\n\nEntire listeners.JobListener class (replaced by ItemListener)\n\nOne form of DirectoryBrowser constructor\n\nOne form of Descriptor.configure() (with HttpServletRequest param)\n\nDescriptor.convert(Map) and 4 implementations of this method, and code calling it in Descriptor.readResolve() (this code called save() whenever updating data, so there should be no remaining cases out there)\n\nAlan’s quest for removing deprecated code will likely continue for a while, but this is a good step in the right direction, keeping Hudson’s internals in good working order. Worth mentioning, the influx of plugin releases in the This Week in Plugins from a couple weeks ago, was driven largely by Alan, rummaging through the code of older plugins, updating plugins left and right.\nNow the breakdown for this release:\n\nBugs fixed\n\nFix javascript problem showing test failure detail for test name with a quote character. ( issue 1544)\n\nHudson can incorrectly configure labels for the controller when bleeding edge EC2 plugin is used.\n\nFixed the regression wrt the whitespace trimming caused by 1.346. ( issue 5633)\n\nUnder some circumstances, Hudson can incorrectly delete the temporary directory itself. ( issue 5642)\n\nNewlines in MAVEN_OPTS environment variable can cause problems in other contexts. ( issue 5651)\n\nEnhancements\n\nImproved the form validation mechanism to support multiple controls. ( issue 5610)\n\nAdded message to agent log when it has successfully come online. ( issue 5630)\n\nContributors\n\nThis release of Hudson contained 36 commits from 7 different contributors to \"core\":\n\nabayer\n\nhttps://twitter.com/ godin [godin]\n\nhuybrechts\n\nkohsuke\n\nmindless\n\nsogabe\n\nwyukawa\n\nAs usual, you can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.347 Released","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-23T00:00:00.000Z","id":"943afd45-3e98-53a3-9907-bdd50716654f","slug":"/blog/2010/02/23/would-you-run-hudson-in-the-cloud/","strippedHtml":"One of my favorite bloggers on the subject of continuous integration, The Build Doctor, posed this question in a recent post :\n\nContinuous Integration in the cloud: good idea?\n\nThe topic of running a CI server in a virtualized environment, such as with Amazon’s EC2 service, is an interesting issue, particularly in the Hudson community. About 10 months ago Kohsuke announced the Hudson EC2 plugin which has seen slow, but steady development since then, including support for the Ubuntu Enterprise Cloud which was added to the plugin in a release last Monday.\n\nAs The Build Doctor and his readers point out, continuous integration is a difficult task to offload into the cloud because of the immense hardware demands constant building and testing presents. That said, Hudson does very effectively manage spinning agents up and down on demand if you’ve configured it as such. Implication being: running Hudson in the cloud may be more efficient to meet peak demands without needing to run a large farm of machines.\n\nIf you’re interested in trying out the EC2 plugin, check out Sonatype’s post on Nexus Open Source and Hudson on EC2 might be a good start.\n\nWould you run Hudson in the cloud?","title":"Would you run Hudson in the cloud?","tags":["jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-24T00:00:00.000Z","id":"2dac8f54-6f5e-50f9-9277-4b98073d0146","slug":"/blog/2010/02/24/hudson-at-pycon/","strippedHtml":"This past week PyCon has been going on in Atlanta, where Titus Brown gave a talk titled:\n\nWhy not run all your tests all the time? A study of continuous integration systems\n\nTitus has some notable quotes \"just use Hudson\" but overall a good introduction of CI and a breakdown of some of the challenges behind continuous integration. He also does a good job going over getting started with Hudson, setting up a basic Python project that incorporates JUnit XML reporting and agents.\n\n\"Yeah, we used Buildbot until recently, then I switched us to Hudson and my life got a lot better\"\n\nIf you’re using Python with Hudson, I highly recommend watching the talk (embedded below).","title":"Hudson at PyCon","tags":["core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-25T00:00:00.000Z","id":"970acccf-1bbf-51e4-a74c-ea57cd8716de","slug":"/blog/2010/02/25/links-for-2010-02-24/","strippedHtml":"Via the @hudsonci twitter account I typically share or \"retweet\" a number of links during the day, I realize a number of people either do not use Twitter or do not constantly pay attention to it. A lot of the links I find quite interesting, so I’d like to try sharing them after the fact here.\n\nJava.net Maven Repository Rescue Mission on March 5th\n\nFighting Problems with Hudson Matrix Jobs and Perforce Plugin\n\nWorking around issues with matrix jobs and the Perforce plugin ( issue 1022)\n\nOracle ADF Development Essentials - Part 7 — Continuous Integration with Hudson\n\nLearn how to use Hudson in tandem with the Oracle Application Development Framework (with screenshots).\n\nWhat is the best Version Control for Visual Studio 2008 SP1?\n\nAsked on Stack Overflow, guess what the chosen answer was?\n\nAutomatic testing Oracle Service Bus using Hudson, maven and SoapUI","title":"Links for 2010-02-24","tags":["mailing list"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-25T00:00:00.000Z","id":"42869be5-0f9b-58cc-8aec-46e21e007d40","slug":"/blog/2010/02/25/sonatype-freeing-projects-from-java-nets-maven-repo/","strippedHtml":"Are you working on a project which uses java.net’s Maven repository for deploying its artifacts?\n\nWell, if so, there’s a great opportunity opening up for you to get off that problematic repository: Sonatype is helping java.net projects move to Sonatype’s hosted OSS Nexus repository, starting March 5th. We’re looking into moving Hudson over but for most smaller projects, this should be a no-brainer. Problems with the java.net Maven repository are legendary and Sonatype’s OSS Nexus repository is a great alternative.\n\nTake a look and see if this can work for you.\n\nEditor’s Note: Andrew Bayer ( abayer) has been a contributor to Hudson since early 2009, contributing to the ClearCase plugin, Hudson’s core and a small number of other plugins. Andrew also helps Kohsuke with a lot of Hudson’s project infrastructure, most notably the migration from Bugzilla on Java.net to JIRA running at issues.hudson-ci.org.","title":"Sonatype freeing projects from java.net's Maven repo","tags":["core","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-25T00:00:00.000Z","id":"eb0ddec5-9099-58de-bd48-3059769cc380","slug":"/blog/2010/02/25/spotlight-on-springsource/","strippedHtml":"For this week’s user spotlight segment, I’m talking with Doug MacEachern of Hyperic, part of SpringSource, a division of VMware, hoping I got that dependency chain correct. Hyperic builds enterprise systems monitoring and management software and also contributes to a number of open source projects, many of which are built with Hudson.\n\nTo date I must say that Doug’s use of Hudson is one of the largest and more impressive installations I’ve seen. I don’t want to spoil the interview, but they’re testing on platforms that don’t even run Java. Madness! If you think you can out-do him, you can find my email information at the bottom of the interview, I’d love to hear about it!\n\nWithout further ado, Doug from SpringSource.\n\nDoug We started using Hudson in early 2008 to automate the build and testing of our SIGAR library.  The SIGAR API implements a portable interface in C for gathering system information related to memory, processors, file systems, network interfaces, network connection tables, the process table and more.  We support dozens of OS + version + architecture combinations, along with several language bindings.  SIGAR is a key component of the Hyperic HQ agent and is used in other projects including Hypertable, Terracotta, GridGain and MySQL enterprise.\n\nHudson Was SpringSource using continuous integration before Hudson? If so, what caused you guys to switch?\n\nDoug The SIGAR project actually started back in late 2002 and our initial CI system for the project was a good old-fashioned Perl script / ssh for-loop.  It was good enough to get by in the early years, but a proper replacement was long overdue.  We were (and still are) using Bamboo to build and test Hyperic HQ.  We looked at using Bamboo for SIGAR, but at the time the \"Remote Agent\" feature was new to Bamboo and was not in the version we were running. Rather than disrupt HQ’s CI along with taking on an additional licensing cost, we gave Hudson a shot and haven’t looked back.\n\nHudson Might be a bit of personal bias, but I think you guys made the right choice there! Checking out the public Hudson server, I see that SpringSource is building/testing products on AIX, the BSDs, various flavors of Linux, Solaris, Windows and Mac OS X, what kinds of languages/build systems are being built by Hudson? How varied are the environments that Hudson executes jobs in?\n\nDoug And HP-UX! The matrix of SIGAR’s supported OS + kernel version + architecture + distribution is north of 100 combinations.  So, Hudson is covering a very heterogeneous collection of systems with most jobs tied to a specific node.  Our primary focus has been the C API and Java JNI bindings, using an Ant based build system and a JUnit test suite.  SIGAR also has language bindings for Perl, Ruby, Python, Erlang, PHP, C# and Lua.  So, Hudson is also driving each language’s extension build system of choice, respectively: MakeMaker, Rake, distutils, emake, phpize, Nant and autotools.\n\nHudson What do you consider to be noteworthy about your Hudson implementation? Besides, clearly, that you’re running Hudson agents on just about every OS that will run Java :)\n\nDoug The majority of our x86/x64 nodes are virtualized on VMware ESX and VMware Server.  We also have a fine collection of PPC, PA-RISC and Sparc hardware in house, with IA-64 and s390x hosted elsewhere by third parties.  Some of these systems are too old to support Java 1.5 and/or Git.  As a simple work-around, the nodes share an NFS workspace where the agent node takes care of 'SCM' and 'Post-build Actions', but the 'Build' step in between is invoked via ssh. The SIGAR distribution includes about two dozen native binaries that are compatible with most of the supported platform matrix.  There’s a Hudson job for each Git branch that rolls these binaries into a release bundle. Another job flavor uses the Hudson URL SCM plugin to download and unit test the binary releases on the rest of the platform matrix.  This is key to testing binary compatibility.  Similar for the collectd project, each Git branch has a job that runs automake, autoconf, etc. and 'make dist' into the collectd release flavor tarball.  So a push to git.verplant.org by octo in Germany triggers an update of the collectd release artifact, which in turn triggers the URL SCM jobs to download the tarball, unpack and build over here at our west coast locations. We have four Hudson servers in different locations, three of which are managing most of the jobs behind firewalls.  Select jobs use the Build Publisher plugin to post the job and its artifacts to our public Hudson server. This makes it easy for us to provide platform specific bug fixes in binary form, share build logs with external projects and host a central repository of artifacts reachable by all of the URL SCM based jobs. Our public Hudson server also provides CI for the HQApi project and jobs to build HQ plugins, again making it easier to distribute patch fixes in binary form between releases.\n\nHudson I’ve very impressed! I’m glad the fact that Java won’t run on some of the platforms you want to support hasn’t stopped you from testing anyways. Clearly you folks have written some addition tools behind the scenes, mind discussing them a bit?\n\nDoug Other than some Hudson plugin tweaks and additions, the Perl script I mentioned earlier was converted to generate the majority of our Hudson jobs and includes a simple templating system.  The same script generates jobs to build collectd and a few other projects.  We’ve outgrown this flavor of the script and have started working on integrating Opscode Chef to automate our Hudson configration along with the systems we build and test on. And of course, we’re using Hyperic HQ to monitor our Hudson server instances, agent and node machines.\n\nHudson But of course, I’d say dog-fooding is an important part of any continuous testing set up. It appears that SpringSource has bought in pretty deeply to a Hudson-oriented workflow, given the amount of time and resources you all have invested in getting the massive farm set up that you have. That said, on a scale from 1-10, how important would you rate Hudson to your day-to-day workflow?\n\nDoug I’d say at least an 8, although my daily workflow doesn’t always directly involve Hudson.  Most of those points go to Hudson for automating what otherwise would be interrupting my workflow on a daily basis.\n\nI'd like to thank Doug again for giving us a peek behind the curtains at SpringSource and how they're using Hudson. If you would like to discuss your organization or company's use of Hudson for Continuous Blog, you can contact me at `tyler` at `linux.com`\n\nEditor’s note: Doug was the primary author of mod_perl for many years until he was tricked into \"helping out\" with a new project.  This project turned into Hyperic HQ which shifted his focus to systems and application management for the past ~7 years and counting.  He occasionally rambles on Twitter as @dougmaceachern.","title":"Spotlight on: SpringSource","tags":["general","feedback","interview"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-26T00:00:00.000Z","id":"dcdf6e0b-fe9f-5ad0-989f-09a62e60787a","slug":"/blog/2010/02/26/links-for-2010-02-25/","strippedHtml":"Justifying Continuous Integration Expenditure\n\nOur friend the Build Doctor, tries to quantify spending on continuous integration. In the comment thread on another related post of his, he strikes gold with:\n\nPeople are more expensive than Continuous Integration servers; let’s optimise the system for them.","title":"Links for 2010-02-25","tags":["mailing list"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-02-26T00:00:00.000Z","id":"fb7fbd3d-e506-5ad9-a631-1be7975ed7a0","slug":"/blog/2010/02/26/this-week-in-plugins/","strippedHtml":"This week we had 18 plugin releases, with the xUnit plugin managing to have a release almost every day. For this edition of TWiP I was actually able to generate the log of releases mostly automatically thanks to rpetti who contributed the script to the contiuous-blog-tools repository on GitHub.\n\nThis past week saw two new plugins, the SSH plugin and the Global Build Stats plugin, the latter of which is still in \"alpha\".\n\nFeb 19th, 2010\n\nPerforce Plugin 1.0.21\n\nFeb 20th, 2010\n\nMonitoring 1.12.0\n\nFeb 21st, 2010\n\nHudson global-build-stats plugin 0.1-alpha1\n\nHudson Gallio plugin 0.70\n\nHudson cppunit plugin 1.2\n\nHudson Emma plugin 1.12\n\nHudson Backup plugin 1.4.1\n\nFeb 23rd, 2010\n\nHudson Sonar Plugin 1.3\n\nHudson Gradle plugin 1.3\n\nHudson Sectioned View Plugin 1.10\n\nHudson xUnit plugin 0.6.1\n\nFeb 24th, 2010\n\nHudson Cpptest plugin 0.3\n\nHudson SSH plugin 1.0\n\nHudson ClearCase UCM Baseline Plug-in 1.3\n\nFeb 25th, 2010\n\nHudson NAnt Plugin 1.3.1\n\nHudson Ivy plugin 1.1\n\nHudson Bazaar plugin 1.4\n\nDimensions SCM plugin 0.7.0","title":"This Week in Plugins","tags":["infrastructure","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-01T00:00:00.000Z","id":"7adb69a7-a296-50f6-b048-51a522d7b06b","slug":"/blog/2010/03/01/hudson-1-348-released/","strippedHtml":"The latest release, 1.348 of Hudson was pushed out to the repositories on the 26th of Feb. This release is primarily a bugfix release containing a number of fixes (listed below) and a few localization corrections\n\nBugs fixed\n\nFixed a performance problem of the job/build top page when there are too many artifacts.\n\nImproved /etc/shadow permission checks.\n\nDisable auto-refresh in Groovy script console ( issue 5729)\n\nContributors\n\nThis release of Hudson contained 19 commits from 5 different contributors to \"core\":\n\nhttps://twitter.com/ godin [godin]\n\nkohsuke\n\nswiest\n\nmanuel_carrasco\n\nrseguy\n\nAs usual, you can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.348 Released ","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-01T00:00:00.000Z","id":"82b8bb39-7fe3-52fe-872c-2b156b820fec","slug":"/blog/2010/03/01/learn-about-ci-with-hudson-sf-java-user-group/","strippedHtml":"A few weeks ago our fearless leader Kohsuke Kawaguchi joined the San Francisco Java Users Group to talk about continuous integration with Hudson. Thanks to Marakana for organizing the meetup, and Aleksandar Gargenta for posting the video and slides, embedded below.\n\n+ ----\n\nLearn About Continuous Integration With Hudson Directly From the Source","title":"Learn about CI with Hudson (SF Java User Group)","tags":["feedback","jobs","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-02T00:00:00.000Z","id":"31d1bdea-cbcb-5089-9c3f-a31f5f071484","slug":"/blog/2010/03/02/call-for-testers-the-older-the-better/","strippedHtml":"A couple weeks ago in the post outlining the release of Hudson 1.347 I mentioned that Alan Harder (a.k.a. mindless) had undertaken a deprecation-crusade; that is to say Alan has taken it upon himself to rid Hudson’s code-base, particularly in the plugin area, of older code. One of Alan’s branches old-data-monitor was merged into trunk with r28147 bringing with it some changes to help migrate older plugin datasets to newer formats.\n\nWhen I reached out to Alan earlier today on IRC ( #hudson on the Freenode) about the subject he agreed that polling the community for beta testers would be a good idea; this is where you come in. Per Alan’s message to the dev@ mailing list:\n\nVisit your \"Manage Hudson\" screen to see if the notice about old/unreadable data appears. I’ll be curious to see which of the old deprecated data structures are actually out there in people’s XML files.\n\nInstead of waiting for the release candidate to be packaged Wednesday evening, I’ve gone ahead and published the artifact from build #4544 which can be downloaded here: hudson.war\n\nIf you have an old Hudson installation with, testing this build would be incredibly useful. Alan went on to say:\n\nIf people find issues with OldDataMonitor, they should file them at issues.hudson-ci.org in \"core\" component and assign them to \"mindless\".\n\nThis change does not mutate any data (or at least it shouldn’t) so it should be safe, be on the look out for exceptions in Hudson’s log on startup.","title":"Call for Testers: The older the better","tags":["development","core","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-02T00:00:00.000Z","id":"5a7bffdc-f11e-53ee-9d7f-afdabc2a847d","slug":"/blog/2010/03/02/what-new-features-do-you-want-to-see/","strippedHtml":"Michael Donohue, a Hudson developer who has taken on the role of master bug triage guy for Hudson, does something regularly which I’ve really come to appreciate as a Hudson developer myself: he sends out emails to the dev list with the top 10 voted issues at that time. This gives those of us in the Hudson development community a good sense of what’s really important to our users, which in turn helps us decide where to focus our efforts. If you’re interested, you can see the top voted issues over at our JIRA server.\n\nA good number of those issues have been high on the list for a while - I’m actually in the early stages of work on a plugin to answer HUDSON-682, the current #1 most voted-for issue, two and a half years after it was opened. But I’m sure there are some equally useful features Hudson users would like to see added which aren’t on that list. So I’m asking you, dear readers: what are you looking for in Hudson that isn’t already there? Take a look around the existing issues - you may find a request that fits what you want lurking just out of the top 10, needing only your vote to push it into the spotlight. If no one’s yet created an issue requesting your desired feature, well, create one.\n\nOr, better still, write a plugin or contribute a patch yourself!\n\nEditor’s Note: If you’re interested in writing a plugin, you can check out Hudson’s wiki and/or this guide on the subject.\n\nAndrew Bayer ( abayer) has been a contributor to Hudson since early 2009, contributing to the ClearCase plugin, Hudson’s core and a small number of other plugins. Andrew also helps Kohsuke with a lot of Hudson’s project infrastructure, most notably the migration from Bugzilla on Java.net to JIRA running at issues.hudson-ci.org.","title":"What new features do you want to see?","tags":["infrastructure","development","core","just for fun","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-05T00:00:00.000Z","id":"e9d50a41-05af-5228-9f64-267ce3ca2bd3","slug":"/blog/2010/03/05/links-for-2010-03-04/","strippedHtml":"Since I’ve been a bit pre-occupied with non-Hudson related activities lately, I have missed a few days of link rollups, I suppose it’s fitting to get a couple days worth of links in one post.\n\nWhile The Build Doctor has the time to follow the continuous integration world and post links on a daily basis, I haven’t found the same quantity of Hudson links on a day-to-day basis. Therefore, I will be posting a link-rollup every few days. Do let me know if this is too infrequent. That said, here’s some interesting links!\n\nThat feels better — Cocoa, Hudson and running green\n\nIndie iPhone app developer Jeff Schilling writes about working more efficient with Hudson and Cocoa for developing iPhone apps, he covers OCUnit integration and code coverage with gcovr, a good read for iPhone and Mac developers alike.\n\nAdd CI Build Stability to your Sonar Dashboard\n\nHudson contributor https://twitter.com/ godin [godin] (also known as Evgeny Mandrikov) has released a Sonar plugin to report build stability back into Sonar.\n\nHow to get logged-in username in Hudson?\n\nSwitching from CruiseControl to Hudson\n\nThe developers over at Amaxus wax poetic on reducing their \" bus factor\" by switching from CruiseControl to Hudson\n\nIntegrating Selenium tests with Hudson CI\n\nThe folks at InfoStretch have written up a nice, short-and-sweet, overview of getting higher level integration tests built with Selenium to play with Hudson","title":"Links for 2010-03-04","tags":["mailing list"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-05T00:00:00.000Z","id":"3756308c-7ad8-5fa7-9d54-f7041ba72e92","slug":"/blog/2010/03/05/tag-team-automating-massive-projects-with-hudson-and-artifactory/","strippedHtml":"For those of you living in or around Silicon Valley, next Wednesday (March 10th) you might want to reserve some space around 6pm on your calendar. Frederic Simon and Yoav Landman from JFrog will be presenting at the Silicon Valley JavaFX Users Group meeting at the Googleplex. Frederic and Yoav will be discussing and demonstrating how JFrog’s Artifactory works with Hudson to combine continuous integration with release management.\n\nJoin with the Artifactory team to realize the benefits of managing your software development life-cycle through continuous integration.\n\nFrederic Simon (JFrog Chief Architect) and Yoav Landman (JFrog CTO) will demonstrate how to automate large-scale multi-module projects, using a fully-integrated platform with Artifactory and Hudson.\n\nUsing Maven, Gradle or Ivy builds, it is now possible to dynamically automate and manage the pyramidal stacks of Unit, Functional, and Integration Tests.\n\nThis demo-based session will show you how Artifactory and Hudson together make it much easier to promote certified builds to milestone releases , and finally to general availability, while making sure all builds are fully reproducible.\n\nStaying dynamic all through the development process avoids code freeze and provides very accurate feedback loops. This is crucial for Developers, QA teams, System and Integration testers, Users, Customers, and all the remaining actors of the development process.\n\nIf you’re interested in attending, you can RSVP on the meetup page","title":"Tag team: Automating massive projects with Hudson and Artifactory","tags":["feedback","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-07T00:00:00.000Z","id":"17832604-15e1-5efa-9c92-0525711d75b2","slug":"/blog/2010/03/07/this-week-in-plugins/","strippedHtml":"A little late, but this past week we released 19 plugins including one new release, the Libvirt Slaves.\n\nFeb 28th\n\nAccurev plugin 0.6.10\n\nMar 1st\n\nSubversion Release Manager plugin 1.1\n\nClover plugin 2.6.3\n\nSCTMExecutor 1.5\n\nglobal-build-stats plugin 0.1-alpha3\n\nMar 2nd\n\nClearCase UCM Baseline Plug-in 1.4\n\nAccurev plugin 0.6.11\n\nJIRA plugin 1.20\n\nMar 3rd\n\nNAnt Plugin 1.4.1\n\nEdgewall Trac plugin 1.10\n\nNCover plugin 0.3\n\nnabaztag 1.7\n\nMozmill Plugin 1.3\n\nMantis plugin 0.9\n\nHarvest SCM 0.3\n\nSubversion Plug-in 1.12\n\nMar 4th\n\nPerformance Publisher plugin 7.96\n\nArtifactory Plugin 1.0.7\n\nMar 5th\n\nPerforce Plugin 1.0.23\n\nMar 6th\n\nSCTMExecutor 1.5.1\n\nMar 7th\n\nLibvirt Slaves plugin 1.0\n\nEmma plugin 1.13","title":"This Week in Plugins","tags":["infrastructure","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-08T00:00:00.000Z","id":"17756654-2ee9-5293-acb1-44550a286f22","slug":"/blog/2010/03/08/hudson-1-349-released/","strippedHtml":"Last Friday, March 5th, Hudson 1.349 was pushed out into the wild with an even split of bug fixes and enhancements. Included in this release is Alan Harder’s (a.k.a mindless) old data monitor code, discussed previously in the post \" Call for Testers: The older the better.\" Included in this release were further updates to the japanese and german localizations of Hudson; if you’re interested in helping localize Hudson into more languages you can join the effort via the Internationalization page on the wiki.\n\nNow for the breakdown of the 1.349 release:\n\nBug fixes\n\nFix deserialization problem with fields containing double underscore. ( issue 5768)\n\nFix deserialization problem for Exception objects where the XML has bad/old data. ( issue 5769)\n\nFix serialization problem with empty CopyOnWriteMap.Tree. ( issue 5776)\n\nFixed a bug that can cause 404 in the form validation check.\n\nEnhancements\n\nRemote build result submission shouldn’t hang forever even if Hudson goes down.\n\nAdded a monitor for old or unreadable data in XML files and a manage screen to assist in updating files to the current data format and/or removing unreadable data from plugins that are no longer active. \"Manage Hudson\" page will show a link if any old/unreadable data was detected.\n\nAdded a mechanism to bundle init.groovy inside the war for OEM. ( report)\n\nAdded an extension point to annotate console output. ( issue 2137)\n\nContributors\n\nHudson 1.349 contains 43 commits from 6 contributors, due to the merging in of Alan Harder’s old-data-monitor branch the commit count is a bit off from the amount of code change that actually went out in 1.349.\n\nabayer\n\nkohsuke\n\nmindless\n\nsogabe\n\nswiest\n\nwyukawa\n\nAs usual, you can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.349 Released","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-08T00:00:00.000Z","id":"147dcd2a-8bfd-59ac-891b-d86fdbed6a7a","slug":"/blog/2010/03/08/meet-up-and-hack-alongside-kohsuke-and-co/","strippedHtml":"Ever wanted to pick the brains of multiple Hudson developers and users, all at the same time? Feel like finally meeting Kohsuke in person? Now’s your chance!\n\nWe’re hosting our second-ever Bay Area Hudson Hackathon/Meetup on March 19th and 20th. That’s nearly two whole days of Hudson!\n\nDay One (Mar. 19)\n\nThe first day of the hackathon/meetup is aimed primarily at those working with Hudson’s core, or are building on top of Hudson (plugins, etc).\n\nStart: 10 a.m.\n\nEnd: 5 p.m.\n\nLocation: Oracle Santa Clara campus in the \"library\" conference room of SCA7 \"Mansion\" building.\n\nThere will a number of community and corporate Hudson hackers joining us on Friday, so bring everything you’ll need to get some grade A hacking done with Kohsuke, Andrew Bayer, Alan Harder and your fellow plugin hackers.\n\nDay Two (Mar. 20)\n\nI’m tentatively calling this the main event, which will be hosted at the delightful Hacker Dojo in Mountain View. The \"main event\" will carry over the hackathon from the day before at Oracle, into a full blown community hackathon and meet-up. This is for Hudson hackers and users alike!\n\nStart: 10 a.m.\n\nEnd: 6 p.m.\n\nLocation: Hacker Dojo (Savanna room)\n\nAs I’ve pointed out before, Hudson’s getting a lot of attention in other developer circles such as the Python, Ruby, Cocoa communities. As such, I’m hoping to get a lot of folks interested in using Hudson to come to Hacker Dojo where we (already being Hudson users) can help get them up to speed with all the great things Hudson can do.\n\nIf you’re interested please RSVP:\n\nVia the hackathon page on the wiki\n\nVia Facebook for day one and day two\n\nHow you can help\n\nWhile I casually refer to myself as a \"PR intern\" for Kohsuke, I’m technically a busy software engineer, meaning I’m grateful for all the help I can get.\n\nGet the word out\n\nThe best way to help get the word out is to talk about Hudson and the meetup, this includes:\n\nLink to this post on Twitter\n\nPing any user groups you are a member of in the area\n\nBlog about it\n\nLet your co-workers know about it\n\nAttend!\n\nVolunteer to help setup/teardown\n\nHosting the Saturday event at Hacker Dojo does carry some responsibilities with it. We will need some extra hands to make sure everybody has power, refreshments are chilled, lunch is ordered and delivered, and of course, cleaning up after we leave. If you’re in a generous mood, or in a real need for some karma, sign up to help on the bottom of the wiki page\n\nI am hoping Oracle and some other heavy users/contributors will kick in a few bucks for lunch and drinks on Saturday, if you think your company can help us out, feel free to ping me directly at tyler at linux.com.","title":"Meet-up and Hack alongside Kohsuke and Co.","tags":["feedback","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-09T00:00:00.000Z","id":"db26b9ba-06bc-5a43-ae5f-4735444b4996","slug":"/blog/2010/03/09/one-month-of-continuous-blog/","strippedHtml":"It’s been a little over a month since I pinged Kohsuke about an \"official Hudson blog\"; my role has been nothing more than writer and editor of a community resource, while I have invested a lot of time in Continuous Blog it is not \"mine\" so much as it is \"ours.\" I feel I have a responsibility as the current maintainer of this resource to be as open as possible about what’s going on with CB. When I sat down to write the inaugural post, Welcome to Continuous Blog, I set forth a few goals:\n\nHelp advocate the use of Hudson to the larger internet community\n\nBe a central source for tutorials and helpful information to Hudson users of all skill-levels\n\nRecognize the numerous contributors to the Hudson project for their efforts\n\nBeing a community resource, I wanted to review our progress on those goals along with some other interesting details about Continuous Blog and my community efforts. My metrics for achieving these goals are largely based on web traffic to this blog and retweets via the @hudsonci twitter account. First a minor overview of some of Continuous Blog’s traffic, then I’ll get to reviewing the goals.\n\nVisitor trend via Google Analytics\n\nOver the past month Continuous Blog has seen just under 10,000 visits from a number of different sources, the top sources being:\n\nFeedburner links posted to @hudsonci\n\nDirect visits\n\nFeedburner\n\nReferrals from the \"blog\" link on hudson-ci.org\n\nreddit\n\nLinks from the Java.net community portal and associated weblogs\n\nIn addition to general web traffic, Continuous Blog has around 350 RSS subscribers.\n\nTo put these numbers into perspective, Hudson has seen commits from 173 different developers and the @hudsonci twitter account has about 1,100 followers.\n\nHudson Advocacy\n\nLooking at the traffic sources and the volume of traffic coming from what I would consider \"the wider internet community\" I’d say I failed to meet my own expectations. The majority of traffic seems to be coming from \"within the community\", which is certainly not a bad thing by a stretch, but I was hoping to start to see more visitors who are less likely to be using Hudson already. There are signs of this (I think) in the low number of search referrals, roughly 370 visits. To me this indicates the early age of this site, small number of external links to Continuous Blog and the content isn’t \"interesting\" enough to come up in searches for terms like \"continuous integration with python\".\n\nThe vector for improvement in advocacy, in my opinion, is to focus more on tutorials and user guides in the next month. Mike Rooney’s post on Keeping your configuration and data in Subversion was both discussion provoking, but one of the more visited pages over the past month. I’ll be reaching out to more power-users from differing backgrounds to try to get some more tutorials on using Hudson for Python, Ruby, and Cocoa development while continuing to bug some of you Maven2 pros about guides.\n\nCentral information repository\n\nI feel I failed to meet my own expectations here as well, it has only been a month (feels like an eternity!) so the amount of information we’ve been able to aggregate is small, but growing.\n\nI have likely spent too much time covering Hudson community news, which I feel is important, to put a human voice in front of commits and releases, but it is not what I originally intended to spend the majority of my time doing.\n\nRecognition of contributors\n\nIn my opinion, this goal I’ve met. When writing up each Hudson release I’ve made certain to give credit where credit is due, to those that contributed, Through the \"spotlight\" series of posts I’ve also made an effort to highlight power-users of Hudson, trying to glean interesting details about their installations from them for our benefit. Unfortunately I’ve done a poor job highlighting the contributions from individual plugin developers, something I’m still not certain how to correct.\n\nContent\n\nIf you’ve been following the blog you have no doubt noticed the regular occurrence of certain types of posts, these regular series are:\n\n\"This Week in Plugins\"\n\nThis post is halfway script generated, pulling all the release details out of SVN history to help me generate a post. The intention of the post being to cite new or notable plugins, while giving an informative listing of \"what’s happening\" in plugin development for the past week.\n\n\"Spotlight On\"\n\nThe only interview-formatted series I’ve got going right now, I’ve been trying to find companies or organizations who are using Hudson in interesting ways and are willing to let \"us\" peek behind the curtains a bit. This started more from curiosity, but I think it’s fun to let Hudson users brag about their set ups.\n\nHudson 1.xxx Released\n\nPretty straight-forward reporting on a release of Hudson, depending on the contents of the release there may be some calls to action or editorializing on what’s gone into the release.\n\nLinks for\n\nRoll-up of links shared or retweeted via the @hudsonci account, uncertain whether this is worth the time spent.\n\nMy two questions to the community in general would be:\n\nDo you dislike any of these?\n\nWhat else would you like to see on a regular basis?\n\nI’m certainly open to suggestion, I’d like Continuous Blog to continue to be interesting to the Hudson community and if certain kinds of posts are boring or uninteresting, I can cut them from the line-up.\n\nChallenges\n\nThe largest challenge of Continuous Blog is time. As it stands the majority of content I write or edit in some capacity, which is a larger amount of time than I expected to spend. All said and done it takes me between 6-10 hours a week to write for CB, keep tabs on @hudsonci and peruse the mailing list for interesting things. This probably isn’t maintainable, and if for some reason a bus hits me ( not uncommon around here), this blog would go dark for a while.\n\nThis can be easily fixed by simply adding more contributors to the blog, I’ll post more on how to write for Continuous Blog in another post.\n\nAll said and done, I am looking forward to another month of writing and following the Hudson community. I’m grateful for all those who’ve asked questions, been interviewed, wrote content and participated in discussion in the comments. For those of you in the Bay Area, I do hope you come out for the meet-up in mid-March, for the rest of you, I’ll catch you on IRC :)","title":"One month of Continuous Blog","tags":["core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-12T00:00:00.000Z","id":"a5039cab-0bdd-52c1-adfc-f4239d942209","slug":"/blog/2010/03/12/links-for-2010-03-12/","strippedHtml":"Been a bit pre-occupied this week, so this links roll-up is short and sweet.\n\nThe JavaDude details a fairly simple test application embedding Glassfish + Netbeans + Hudson\n\nThanks to @chrisbingham, discovered a.NET wrapper for Hudson’s remote API\n\nLearned all about getting started with Hudson for .NET projects from Bob Cravens\n\nRobert Fletcher wrote a groovy post about testing Grails plugins on Hudson.","title":"Links for 2010-03-12","tags":["mailing list"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-12T00:00:00.000Z","id":"2e3fcf5d-0940-5303-9f5b-1bbcab9c1f50","slug":"/blog/2010/03/12/want-some-hudson-stickers/","strippedHtml":"Rarely do I ever get mail, let alone mail I like, so I was quite excited when a shipment of stickers from Hudson HQ arrived yesterday.  I’m certain you’re thinking to yourself \"what does this guy need hundreds of Hudson stickers for?\" Fact is, I don’t! They’re not for me, they’re for you!\n\nI am willing to mail stickers vast distances to you ( with some conditions)\n\nConferences\n\nIf you’re presenting at a conference or otherwise would like some Hudson stickers to go around, email me with a rough estimate of how many you need. The only condition being that you tell me all about the event and how Hudson was received after the fact (this may involve an interview).\n\nUser Groups\n\nIf you email me requesting some stickers for a user group, I’ll need an estimate of how many folks attend meetings. Depending on supplies, I may send you a little more than requested to be shared.\n\nCompanies\n\nIf your company wants some Hudson stickers, I’d be happy to oblige, and of course I always appreciate stickers, pens, branded bouncy balls, etc (see: swag) in return!\n\nPeople who like stickers\n\nIf you’re just a fan of Hudson, stickers, or both, I’ll still gladly mail you a few stickers with the condition that you take pictures of where the stickers end up (and maybe of your Hudson install) and either email me some cool pictures or post them to Flickr (tagged: \" hudsonstickers\")\n\nI will be stuffing envelopes in my free time, so there may be a slight delay. You can email me at tyler at linux dot com requesting stickers, I’ll need:\n\nHow many: (estimate)\nWhat for: (conference|usergroup|company|iwantsomeokay)\nMailing Address:","title":"Want some Hudson stickers?","tags":["core","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-13T00:00:00.000Z","id":"1bffa93a-6c5c-5f7a-b3cd-363d67f53eaf","slug":"/blog/2010/03/13/this-week-in-plugins/","strippedHtml":"Apologies for the slight delay in posting another TWiP, both within the Hudson community and outside of it, it was quite a busy week. This past week we’ve had roughly 15 plugins released, with a few going through a number of iterations over the course of the week such as the Emma plugin and one of Hudson’s newest plugins, the Libvirt Slaves plugin.\nOne of Hudson’s most active contributors, Alan Harder (a.k.a mindless) was responsible for this week’s only new plugin: Copy Artifact Plugin. The Copy Artifact plugin does exactly what you’d think it does, according to the short-and-sweet wiki page:\n\nAdds a build step to copy artifacts from another project.\n\nIf you’re a plugin developer in the Bay Area, this upcoming Friday and Saturday is the Bay Area Hudson Hackathon/Meetup; don’t miss out!\n\nMar 07, 2010\n\nCopy Artifact Plugin 1.0\n\nEmma plugin 1.15\n\nMar 08, 2010\n\nCAS protocol version 1 plugin 1.0.1\n\nCopy To Slave Plugin 1.2\n\nEmma plugin 1.16\n\nLibvirt Slaves plugin 1.1\n\nSidebar Link 1.4\n\nSubversion Plug-in 1.13\n\nMar 09, 2010\n\nEmma plugin 1.17\n\nMercurial plugin 1.26\n\nMar 10, 2010\n\nLibvirt Slaves plugin 1.2\n\nMar 11, 2010\n\nFile System SCM 1.7\n\nMar 12, 2010\n\nPerforce Plugin 1.0.24\n\nMar 13, 2010\n\nIRC Plugin 2.2\n\nJabber notifier plugin 1.6\n\nSonar Plugin 1.4\n\nglobal-build-stats plugin 0.1-alpha4\n\ninstant-messaging plugin 1.5","title":"This Week in Plugins","tags":["infrastructure","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-14T00:00:00.000Z","id":"0732adca-aeaf-50c8-9514-990629f94fac","slug":"/blog/2010/03/14/would-you-like-to-ok/","strippedHtml":"As Matt Brown pointed out on the dev@ list, Hudson made a cameo on The Daily WTF in their post Nobulation Fail.\n\nKohsuke went on to mention on the mailing list:\n\nLooks like this one is already fixed back in October last year.","title":"Would you like to, OK","tags":["meta"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-15T00:00:00.000Z","id":"7b05b361-acac-5ab9-8115-092db23422c6","slug":"/blog/2010/03/15/breaking-hudson-1-351-released/","strippedHtml":"Rush delivery from Hudson HQ! Hudson 1.351 just rolled out with a very important regression fix:\n\nRegression in 1.350 that can delete old build artifacts. ( mailing list thread, issue 5937)\n\nSorry for the hiccup everybody, we’re working pretty hard on getting a better, more stable, release process in place.\n\nYou can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Breaking! Hudson 1.351 Released","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-15T00:00:00.000Z","id":"d577cb93-f216-5163-ae74-1ef6a7a72f89","slug":"/blog/2010/03/15/hudson-1-350-released/","strippedHtml":"Finishing off the second week in March, the Hudson team rolled Hudson 1.350 off the assembly line last Friday, bringing a slew of fixes. Of particular interest to users of Hudson’s various native packages for Red Hat, openSuSE, Ubuntu/Debian and Solaris, was a change that suppress the \"self-upgrade\" functionality in the \"Manage Hudson\" page. On the enhancements side of the fence, the team added authentication support to the Hudson CLI ( issue 3796) allowing Hudson users with locked down installations to take advantage of everything the CLI has to offer.\n\nInternal to Hudson, some more changes from Alan Harder (a.k.a mindless, a.k.a The Garbage Man), deprecating or otherwise removing deprecated APIs. Alan’s been doing some great work on Hudson’s internals, if you’re coming out to this weekend’s hackathon, but sure to pat him on the back for his tireless efforts.\n\nBug fixes\n\nFix handling of relative paths in alternate settings.xml path for Maven projects. ( issue 4693)\n\nAlternate settings, private repository, profiles, etc were not used in embedded Maven for deploy publisher. ( issue 4939)\n\nMake editableComboBox work in repeatable content, such as a build step.\n\nIf content is captured using ..content.. , fixed this to use proper HTML rendering when appropriate.\n\n'<' and '&' in the console output was not escaped since 1.349 ( issue 5852)\n\nFixed an AbstractMethodError in SCM polling under some circumstances. ( issue 5756)\n\nFixed a ClassCastException in the Subversion plugin - now using Subversion plugin 1.13. ( issue 5827)\n\nThe Maven Integration plugin link in the Update Center was going to a dead location. ( issue 4811)\n\nOn RPM/DEB/etc installation, don’t offer the self upgrade. It should be done by the native package manager. ( report)\n\nFixed a possible lock up of agents.\n\nEnhancements\n\nAdded advanced option to LogRotator to allow for removing artifacts from old builds without removing the logs, history, etc. ( issue 834)\n\nAuthentication support in Hudson CLI. ( issue 3796)\n\nAdded console annotation support to SCM polling logs.\n\nContributors\n\nThe 1.350 release of Hudson contains 54 commits from 6 different contributors,\n\nabayer\n\njglick\n\nkohsuke\n\nmanuel_carrasco\n\nmfriedenhagen\n\nmindless\n\nYou can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.350 Released","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-16T00:00:00.000Z","id":"0e303921-2283-5df4-88c2-79a1d71f33e9","slug":"/blog/2010/03/16/slaves-building-robots/","strippedHtml":"A few weeks ago we covered building Android apps with Hudson thanks to a very informative post by Hugo Visser, ever thought about building Android itself with Hudson? Sony Ericsson apparently has, Continuous Blog reader and Hudson user Christopher Orr sent me this screen shot from his recently purchased Sony Ericsson Xperia X10 mini, notice the \"Kernel version\" field. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/x10-mini-hudson.png\n\nIf you’ve got screen shots or photos spotting Hudson out in the big blue room, drop me an email at tyler at linux dot com","title":"Agents building robots","tags":["meta"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-19T00:00:00.000Z","id":"e4d4ec45-99e5-5a32-914c-fe8d48418afa","slug":"/blog/2010/03/19/get-excited-and-make-things/","strippedHtml":"The day of hackery is upon us! Today is Day One of the Bay Area Hudson hackathon/meetup, the hacking will start at 10am today and continue until 5pm at the Oracle Santa Clara campus in the \"library\" conference room of SCA7 \"Mansion\" building. The focus today will be largely on hacking Hudson itself.\n\nCan’t attend?\n\nNot everybody lives in the Bay Area, fortunately all of you are on the internets! There’s two ways you can participate remotely in the hackathon:\n\nWebEx: Meeting Number: 201 389 367, Password: hudson (audio conference, app sharing, etc)\n\nIRC As always, there’s the #hudson IRC channel on the Freenode where you can participate via text chat\n\nIf you’re in the Bay Area, but busy at work today, come by for Day Two of the hackathon/meetup tomorrow (Saturday) from 10am to 6pm at Hacker Dojo in Mountain View!\n\nFriday Agenda\n\nCurrently there is only one item on the agenda for Friday:\n\nImproving Client-Side Code Quality with YUI 3: A Proposal (by: Benjamin Shine)\n\nImage courtesy of blackbeltjones\n\nUpdate : The WebEx link for today has been corrected.","title":"Get excited and make things","tags":["feedback","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-19T00:00:00.000Z","id":"55ad9e59-64ad-5e6e-927f-3ecc5ecd032d","slug":"/blog/2010/03/19/links-for-2010-03-19/","strippedHtml":"It’s been quite a busy week, preparing for the Bay Area Hudson hackathon/meetup which starts today, receiving requests for crazy-awesome Hudson stickers and my day job. Regardless, I’ve stumbled across a few links to share in this links roll-up.\n\nJohn Ferguson Smart discusses some of the gotchas with migrating Hudson build jobs from one server to another\n\nLearned a bit about how Kim Moir and the Eclipse Foundation are \"building better\" with Hudson\n\ndbaktiar gave a quick overview of installing Hudson on Ubuntu Karma Koala\n\nLooking forward even more interesting things to read next week after the hackathon and meetup here in California.","title":"Links for 2010-03-19","tags":["mailing list"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-19T00:00:00.000Z","id":"3653ad8b-c8ed-562d-b92b-b52599d766d4","slug":"/blog/2010/03/19/recap-of-hackathon-part-one/","strippedHtml":"Kohsuke just posted a brief write-up on his personal blog about the first day of the Bay Area Hudson hackathon/meetup. He writes:\n\nTotal of 9 people came and we had a great time talking about infrastructure issues, possible enhancements, design dicussions, exchanging tips and plugins that they’ve developed, and otherwise building personal relationships.\n\nA number of folks joined us on the #Hudson IRC channel on Freenode and the WebEx conference, participating remotely. Since day one was primarily intended for hacking on Hudson itself, we’re expecting more people tomorrow when we’ll have a good mix of folks hacking on Hudson, folks hacking with Hudson and plain old folks. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/HackathonDay1.jpeg","title":"Recap of Hackathon Part One","tags":["meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-22T00:00:00.000Z","id":"1c599598-68e7-582d-ad59-8868966c23e6","slug":"/blog/2010/03/22/hudson-1-352-released/","strippedHtml":"After an exciting week that saw the rushed release of Hudson 1.351 on Monday following a fairly serious regression, Hudson 1.352 was released mid-Friday with a good mix bug fixes and enhancements. Bundled with this release was another localizations drop including translations for ca, es, fi, fr, hi_IN, it, nl, ru, and sv_SE locales. In addition to the nice fancy new community contributed translations, which you can help with by installing the Translation Assistance plugin, the 1.352 release includes the subtle enhancement of hyperlinking URLs in the console output.\n\nIn general, 1.352 is looking like a very solid release, that said, here’s the breakdown for this release:\n\nBugs fixed\n\nFixed a file handle leak when a copy fails. ( issue 5899)\n\nReplace '>' with '_' in username, as already done for '<'. ( issue 5833)\n\nFix editableComboBox to select item when mouse click takes more than 100ms. ( issue 2722)\n\nFixed NPE when configuring a view without \"Regular expression\".\n\nPage shouldn’t scroll up when the user opens/closes a stack trace in the test failure report.\n\nFixed a bug where Hudson can put a wrong help file link. ( report)\n\nFixed Maven site goal archiving from agents. ( issue 5943)\n\nFixed a regression with NetBeans Hudson plugin progressive console output. ( issue 5941)\n\nFixed a situation where a failure in plugin start up can prevent massive number of job loss.\n\nEnhancements\n\nSupported JBoss EAP 5.0.0 GA. ( issue 5922)\n\nCLI commands on protected Hudson now asks a password interactively, if run on Java6.\n\nAdded CLI 'login' and 'logout' commands so that you don’t have to specify a credential for individual CLI invocation.\n\nURLs in the console output are now hyperlinks.\n\nImproved the URL annotation logic.\n\nAdd drag&drop support for f:repeatable lists and use this for the JDK/Ant/Maven installations in global config so these can be reordered.\n\nIntegrated a new round of community-contributed localizations (ca, es, fi, fr, hi_IN, it, nl, ru, and sv_SE locales.)\n\nContributors\n\nThis release contains 63 commits, from six different contributors including our very own Subversion-loving Mike Rooney (mcrooney).\n\nabayer\n\njglick\n\nkohsuke\n\nmcrooney\n\nmindless\n\nsogabe\n\nYou can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.352 Released","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-23T00:00:00.000Z","id":"5072e500-8c36-5247-ab33-6f0cb849aa58","slug":"/blog/2010/03/23/links-for-2010-03-23/","strippedHtml":"While I work on some screencasts and start to get more\"Spotlight\" interviews lined up, I figured it’s time for a link roll-up for your Tuesday morning reading.\n\nWe caught a glimpse of a little Java scoreboard app for Hudson from @davefollett\n\nMatt Patterson of Reprocessed.org wrote a great post on continuous integration with Rails with Hudson, running both Rspec and Selenium tests.\n\nAt the hackathon at Hacker Dojo on Saturday, Kohsuke pointed us all to the Hudson Cafe Press store, where he gets all his Hudson threads.\n\nC.J. Adams-Collier seems quite pleased to have builds for IronRuby back online , powered by Hudson.\n\nWe got a sneak-peak into the first chapter of John Ferguson Smart’s Continuous Integration with Hudson book.\n\nBen Shine showed off some of his UI mock-ups for Hudson.","title":"Links for 2010-03-23","tags":["mailing list"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-27T00:00:00.000Z","id":"5c1439bf-ce97-5edb-9080-49f556a98a86","slug":"/blog/2010/03/27/this-week-in-plugins/","strippedHtml":"I apologize for the lack of posts this week, I’ve been quite pre-occupied and a quirk in the twipFromSvn.py script prevented the generation of this post’s contents earlier; thanks to rpetti it works again!\n\nThis week was an interesting week in plugin development, a slight regression in the release of Jabber notifier plugin 1.7 resulted in the rapid release of a 1.8 release by kutzi. The Fitnesse plugin saw multiple releases again this week, along with the Libvirt Slaves plugin which has seen an amazing number of releases since it burst onto the plugin scene two weeks ago.\n\nThere were a few new and notable plugins released this week such as the iPhoneView plugin which adds a fancy view to make checking Hudson all that prettier on an iPhone or iPod Touch, the cross-platform shell plugin was released, aiming to solve the problem of running a job on both Windows and Unix agents. My favorite new plugin release this week has to be the Gerrit plugin which made its debut and shows a lot of potential to enable the \"pre-tested commit\" workflow with Git and Gerrit\n\nMar 20, 2010\n\nFitnesse plugin 1.2\n\nLabeled Test Groups Publisher 1.2.6\n\nLibvirt Slaves plugin 1.3\n\nMonitoring 1.13.0\n\nPerforce Plugin 1.0.25\n\niPhoneView plugin 0.1\n\ninstant-messaging plugin 1.6\n\nMar 21, 2010\n\nFitnesse plugin 1.3\n\nIvy plugin 1.4\n\nMar 22, 2010\n\nBuckminster 0.9.4\n\nCobertura plugin 0.8.11\n\nFitnesse plugin 1.3.1\n\nGerrit plugin 0.1\n\nJIRA plugin 1.21\n\nMaven Release Plug-in nexus helper 0.0.3\n\nNested View Plugin 1.1\n\nPerformance plugin 1.2\n\nSonar Plugin 1.5\n\nSubversion Plug-in 1.15\n\nTranslation Assitance plugin 1.4\n\nMar 23, 2010\n\nSubversion Plug-in 1.16\n\nnabaztag 1.9\n\nMar 24, 2010\n\nBuckminster 0.9.5\n\nJabber notifier plugin 1.8\n\nMar 25, 2010\n\nhttps://www.collab.net/[CollabNet] Plugins 1.1.4\n\nCVS Plug-in 1.1\n\nDashboard View 1.4\n\nLibvirt Slaves plugin 1.4\n\nPerforce Plugin 1.0.26\n\nMar 26, 2010\n\nCMake plugin 1.2\n\nGNAT plugin 0.2.2\n\nGroovy Postbuild 1.2\n\ncppunit plugin 1.3\n\ncross-platform shell plugin 0.2","title":"This Week in Plugins","tags":["infrastructure","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-30T00:00:00.000Z","id":"dfb2c4b6-2ae7-5b02-9f3d-09cbbdc998bf","slug":"/blog/2010/03/30/resurgence-of-releng/","strippedHtml":"A few weeks ago I passed a job listing that I had found through one of my many Google Alerts for Hudson-related queries to Andrew ( abayer), following up on one of those job listings Andrew recently signed an offer to join the nice folks over at Digg to be their resident \"build guy.\" On its own I thought \"great for Andrew!\" and nothing more, then I saw this thread on reddit which poses the question:\n\nAnyone here a build engineer, or part of the build team? Could you please share your experience?\n\nIt seems, to me at least, the notion of \"release engineering\" is making a come-back, particularly in the aging \"Web 2.0\" world where companies like Digg, Facebook, Reddit, Twitter, etc are anywhere from five to ten years old. As these companies have aged a couple of important things have happened, their code-base has aged increasing the possibility of bitrot, but they have also expanded in terms of headcount. Start-ups that might have once slighted larger corporations like Oracle, Cisco VMWare and IBM for their burdensome process and longer release schedules now find themselves ensnared with massive code bases, larger development teams and complicated deployments. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/hudson_vs_buildbot.png\n\nOver the past few months we’ve seen Hudson being used in a number of different contexts, it was pitched at PyCon as part of a larger appeal to the Python community to get on the continuous integration bandwagon, we’ve seen a few posts from developers using Hudson for testing and packaging Android and iPhone apps, .NET developers are jumping on board as well. Across the board it feels like Hudson is being more and more widely used, it is no longer the mainstay of the Java shop’s toolkit, it’s become a must have for all developers.\n\nWith the allure of continuous deployment and Hudson’s lowered barrier to entry for testing, packaging and automating releases, is release engineering making a comeback?","title":"Resurgence of Releng","tags":["guest post","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-31T00:00:00.000Z","id":"a306f48a-9658-5e86-b8b1-97d976de0567","slug":"/blog/2010/03/31/hudson-1-353-released/","strippedHtml":"This week’s release comes slightly later than usual and is mostly a clean-up of a few bugs. Due to a problem with the Kohsuke’s GitHub mirror of Hudson’s core, I can’t mine the commits for interesting information as per usual so you’ll just have to trust that Hudson 1.353 is chock full of good, wholesome bug fixes. If the problem persists next week, I’ll find a better way to dig up information on particularly releases that doesn’t depend on the GitHub mirror.\n\nBugs fixed\n\nTagging a repository can result in NPE.\n\nFix possible form submission error when using multiple combobox elements. ( issue 6025)\n\nBetter escaping of test case names in test results pages. ( issue 5982)\n\nMake radio buttons work in repeatable content, such as a build step. ( issue 5028)\n\nFixed the handling of verifying that the POM path entered for Maven projects exists. ( issue 4693)\n\nEnhancements\n\nAdded link to builds in buildTimeTrend ( issue 3993)\n\nYou can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.353 Released","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-03-31T00:00:00.000Z","id":"5821dff5-0138-58b1-adcc-2a38da03f591","slug":"/blog/2010/03/31/screencast-python-on-hudson-part-1/","strippedHtml":"After Hudson got some major publicity at PyCon Atlanta 2010 I haven’t been as quick as I would have liked with Python-related posts and tutorials. I use Hudson to build and test a number of pure Python modules and C extensions across numerous Python versions (covering 2.4 - 3.1). For most beginners, or those simply looking to get started with Python on Hudson, starting with my job configurations is too much at once, so instead I wanted to start at the \"beginning\" so to speak.\n\nThe trouble with getting people started with Hudson, given how simple and visual it is to use, is that articles with sample configurations are not particularly useful; a screencast however is a good medium for visually walking somebody through Hudson. The screencast below ( also on YouTube) is the first in a series of screencasts I’ll be doing, not only for Python on Hudson, but for Hudson overall. It is just over four minutes long, and covers setting up a simple continuous integration job for the Eventlet library (which is hosted on Bitbucket)","title":"Screencast: Python on Hudson (Part 1)","tags":["general","jobs","news","screencast","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-04-01T00:00:00.000Z","id":"afcf7466-bb4d-5533-812d-d3a41c056c17","slug":"/blog/2010/04/01/announcing-the-hudson-2-0-roadmap/","strippedHtml":"/https://agentdero.cachefly.net/continuousblog/java-evil-edition.png\" alt=\"java evil edition\"> There have been numerous discussions on the mailing lists over the past couple months regarding memory issues, speed regressions and a number of other issues regarding performance of Hudson, particularly under high load. In an effort to address these concerns, the Hudson core team has https://web.archive.org/web/ /https://agentdero.cachefly.net/continuousblog/just-kidding.jpg[announced] a roadmap for Hudson 2.0.\n\nIn a message to the dev@ mailing list, Kohsuke said of Hudson 2.0:\n\nAs it stands now Hudson 1.0 is a good proof of concept, it’s time to take the lessons learned and build a truly solid enterprise-ready continuous integration server\nSome notable points from Kohsuke’s announcement with regards to the Hudson 2.0 roadmap, which is expected to ship late Q4 2011, are:\n\nImplementation of core in portable C for greater speed and code readability\n\nSelection of a better license, namely the WTFPL\n\nRevamped storage architecture around the Oracle 11g Database to provide more optimal synergy over flat XML files.\n\nEmbedding the Mono, Python, V8 and Lua engines allowing plugins to be written in C#, Python, JavaScript or Lua.\n\nAdoption of the Hudson Eagle as a mascot instead of the butler\n\n\"Social\" support will be merged into core, integrating Hudson directly with Facebook so you can share test failures with your friends.\n\nHudson 2.0 is expected to follow in the intrepid footsteps of other major revamps such as Netscape 5 and Perl 6 in its ambitiousness and innovation.","title":"Announcing the Hudson 2.0 Roadmap","tags":["just for fun","meta"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-04-01T00:00:00.000Z","id":"2ff076c3-c4bd-58bd-b9aa-1af55391e227","slug":"/blog/2010/04/01/regarding-the-start-of-april/","strippedHtml":"I had briefly contemplating what sort of silly posts I could write to celebrate April Fool’s Day, when I sat down to write out some of them, I got a few sentences in and decided that they just weren’t funny enough. Either I have very high standards, or I’m terribly unfunny.\n\nThe web is awash with April Fool’s articles, comics, headlines and everything else, so instead I’m going to just give you a few useful links.\n\nA couple of Twitter links\n\nBesides the @hudsonci account, you can also follow a couple of Hudson’s more notable (or was it notorious?) hackers, such as our benevolent dictator, Kohsuke Kawaguchi. Ben Shine from Yahoo! who’s been working pretty hard on making Hudson prettier. Then there’s John Ferguson Smart who’s been working on a Hudson book. Of course I’ve tried to collect as many Hudson contributors as possible in the @contributors Twitter list.\n\nHacking Hudson\n\nWhen starting to hack Hudson, it’s useful to start by understanding how to build Hudson. If hacking Hudson’s core isn’t your cup of tea, you can always start with the plugin tutorial and try your hand at writing another awesome Hudson plugin. If you find yourself struggling to find out what methods do what while you’re hacking, you can always visit the regularly updated, online Javadocs for Hudson\n\nCommunicate\nThe two primary mediums for communicating with the Hudson community are through the mailing lists and the IRC channel. During \"regular business hours\" for the pacific standard time zone, you can usually get some decent real-time help or answers to most of your queries.\n\nI’d list more, but I’m too busy reading about Google’s nuclear weapons program. ;)","title":"Regarding the start of April","tags":["meta"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-04-07T00:00:00.000Z","id":"63a1281e-0de7-5b27-96be-2c1254946977","slug":"/blog/2010/04/07/kohsuke-leaves-sun/","strippedHtml":"Those of you on the users@ or dev@ mailing lists have likely already read that Kohsuke ( left in the photo), the founder of the Hudson project, is leaving Sun. I say that he is leaving Sun, instead of leaving Oracle as Kohsuke worked at Sun for nine years and Oracle only a few months. In those nine years at Sun, Kohsuke has worked on some great products, the most notable of them being Hudson.\n\nPer Kohsuke’s post:\n\nWhere am I heading next? I’m actually starting my own company to take Hudson to the next stage.\n\nWhat this means for Hudson still isn’t certain yet, fortunately it means that Hudson will continue to have at least one full-time developer. It remains to be seen where KohsukeCorp (the name has not yet been disclosed) will focus within the Hudson code-base. For the greater user-base of Hudson, this means that the schedule for releases may slow down during this transitional period, there are some logistics to work out with Oracle regarding some of the hardware Hudson has traditionally used to host JIRA, this blog, and a number of other machines helping support the Hudson project in one fashion or another.\n\nThe next couple of months will be interesting for the Hudson community; as per usual you’ll be able to get the latest updates from this blog or the @hudsonci twitter account. I’ll let Kohsuke finish this post off:\n\nAnd finally, big thank you to everyone in the Hudson community, and in a broader java.net community. I wouldn’t be here without you guys, and I feel very proud that I’m a part of it.","title":"Kohsuke leaves Sun","tags":["core","feedback","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-04-12T00:00:00.000Z","id":"2e9993c3-3c9d-5d86-9f68-2a23c7450ae0","slug":"/blog/2010/04/12/pre-tested-commits-with-git/","strippedHtml":"At the first Bay Area Hackathon in mid-2009, the topic du jour was \" pre-tested commits.\" As potential implementations of the concept were discussed over burgers from Brickhouse in downtown San Francisco, we realized as a group a few things: first, those burgers were delicious, but more importantly: pre-testing commits is very-SCM dependent and involves a lot of moving parts. One of the positive changes that came out shortly after the meet up was the support for \"Concurrent Builds\", allowing a job to be executed concurrently on different agents, a precursor to pre-tested commit support. Fervor for the pre-tested commit feature lowered as time went on, the feature being too dependent on the SCM itself was generally accepted as the reasoning behind the feature languishing.\n\nChances are the feature is in fact too large for Hudson to support alone. It requires Hudson, the SCM and likely a third tool to work in concert together to perform such a feat.\n\nWith Git, and the phenomenal code review tool Gerrit, and the Gerrit plugin by intrepid plugin developer, Jyrki Puttonen, pre-tested commits with Hudson, Git and Gerrit are possible.\nFor Git users more familiar with the distributed Git workflows, working with Gerrit should seem familiar. Gerrit has JGit, a Java implementation of Git embedded within it, along with an sshd stack, meaning Gerrit can masquerade as a \"regular\" Git remote repository. Developers can push and pull to the repository just as they can with any other Git repository (provided they have permissions of course). I won’t delve too much into using Gerrit specifically here, but the pre-tested workflow with Gerrit and Hudson would look something like this:\n\nDev creates a topic branch to work on a change\n\nCode is written (and hopefully tested) and committed locally\n\nDev pushes commit(s) to Gerrit\n\nHudson job (set to Poll SCM) picks up the patch, runs the job and marks it as \"+1 Verified\" or \"-1 Fails\"\n\nIf the job fails or is unstable, the change should be reworked or corrected (typically with git-rebase(1))\n\nIf Hudson says the change is good to go, it can be cherry-picked or pulled directly from Gerrit.\n\nFor example: image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/gerrit_patch.png\n\nTo learn more about Gerrit, check out the project page on Google Code; information on the Gerrit plugin can be found on the wiki.","title":"Pre-tested commits with Git","tags":["infrastructure","feedback","jobs","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-04-16T00:00:00.000Z","id":"8e3cffe8-b03c-5789-9235-2d865922ee36","slug":"/blog/2010/04/16/a-new-blog-for-kohsuke/","strippedHtml":"Historically, our fearless leader Kohsuke has blogged on Java.net. The setup made a whole lot of sense when Kohsuke was employed by Sun, then Oracle, which sponsors and runs Java.net. In a post earlier this week discussing console markups, Kohsuke casually pointed out that he will be cross-posting to Java.net, and his personal blog located at kohsuke.org. The first post over on Kohsuke.org welcomes us:\n\nFor the longest time I haven’t really done anything about kohsuke.org, but as I left Sun/Oracle, I decided to put a bit more effort into it. So this is the new home.\n\nFor the time being, I plan to post my blogs both on java.net and here.\n\nIf you’re a reader of feeds, I recommend adding the rss feed for the blog to your list of interesting continuous integration/hacker feeds.","title":"A new blog for Kohsuke","tags":["core","mailing list"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-04-16T00:00:00.000Z","id":"55e4349a-57f0-5fe5-a05a-38af4c262c2e","slug":"/blog/2010/04/16/hudson-1-354-released/","strippedHtml":"Hear ye, hear ye! Behold, the first release of Hudson ever made by a not-employed-by-Sun Kohsuke (as we covered last week). This iteration of Hudson contains only bug fixes, check the listing below for the specifics on which bugs have been fixed (1.355 is looking like it will contain a number of fixes as well). The release of 1.354 comes slightly later than usual given some of the logistics that needed to, or still need to be resolved.\n\nOne of the infrastructure issues that’s half-way resolved is the question of Debian/Ubuntu packages. Kohuske has packages uploaded in an experimental apt repository on hudson-labs.org which you can try out. That said, it’s not entirely clear whether this is going to be the preferred means of distributing native Debian/Ubuntu packages in the future (your mileage may vary).\n\nBugs fixed\n\nPOM parsing was still using the module root as the base for relative paths for alternate settings files. ( issue 6080)\n\nFix dynamic updates of build history table when CSRF protection is turned on. ( issue 6072)\n\nImproved the error reporting mechanism in LDAP setting.\n\nRaw console output contains garbage. ( issue 6034)\n\nFixed a file handle leak in the agents connection. ( issue 6137)\n\nQuiet period wasn’t taking effect properly when doing parameterized builds.\n\nContributors\n\nThe release of 1.354 contains a total of 51 commits to the \"core\" part of the tree, from 9 different contributors\n\nabayer\n\ndrulli\n\nkohsuke\n\nmanuel_carrasco\n\nmindless\n\nsogabe\n\nswiest\n\nvlatombe\n\nwyukawa\n+\n\nYou can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.354 Released","tags":["development","feedback","just for fun","links","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-04-24T00:00:00.000Z","id":"0d65c9ea-6b5c-56e5-b5a9-c08e9faa96fe","slug":"/blog/2010/04/24/hudson-1-355-released/","strippedHtml":"The release of 1.355 came out earlier this week but I hadn’t had the chance to write anything up about it. Of course, the work never stops on Hudson so we almost have 1.356 ready to roll out the door, but then Kohsuke tweeted this:\n\nBecause of the data center migration going on, I won’t be able to release #hudsonci today.\n\nI won’t go into details on some of the infrastructure changes we have lined up just yet, so here’s the breakdown of 1.355\n\nBugs fixed\n\nColored ball image at top of build pages was broken for Hudson in some web containers (fixed by removing workaround for a Firefox bug fixed since 3.0.5/Dec2008). (https://issues.jenkins.io/browse/JENKINS-2341[issue 2341])\nConsole page while build is running did not wrap lines when viewed in IE. (https://issues.jenkins.io/browse/JENKINS-5869[issue 5869])\nFixed build history to indicate test failure for MavenBuild and MavenModuleSetBuild.\nMake +++ +++dropdownList+++ +++ work in repeatable content, such as a build step.\n\nEnhancements\n\nAdded the agent retention strategy based on a schedule.\n\nAdded to configure charset option of Mailer.\n\nYou can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.355 Released","tags":["development","feedback","just for fun","links","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-06-09T00:00:00.000Z","id":"ba641f0e-00e7-583a-ae6c-7b96cc13d8f6","slug":"/blog/2010/06/09/welcome-to-hudson-labs/","strippedHtml":"Hello again! It’s been a long time since I’ve written for the Hudson community, but now I’m back and ready to tackle some of the latest developments in the Hudson community.\n\nWhat is Hudson Labs?\n\nAs you may have read in April, Kohsuke left Oracle to found InfraDNA, a company specializing around Hudson. The departure meant the Hudson community would no longer have access to some of the hardware and services that Kohsuke had accumulated over the years working on Hudson at Sun Microsystems. While we are still happily part of the Java.net community, we’ve recognized the need for some community-owned resources and Hudson Labs was born.\n\nOver the past couple months, a group within the Hudson community, \"infra\" (short for \"infrastructure\"), has been working to get machines set up and build the foundation for a more open Hudson project infrastructure.\n\nWhat does Hudson Labs provide?\nBuilds\n\nOne of the first tasks we set upon when building out Hudson Labs was to start improving the build and release process of Hudson by moving as much of it into a public Hudson instance. Building Hudson itself, plugins and dependencies of the Hudson project, the Hudson Labs instance will help improve the reliability of the Hudson ecosystem across the board, and should serve as a useful tool for core and plugin developers.\n\nMirroring\n\nThanks to the great team over at the Oregon State University Open Source Lab ( OSUOSL), we’ve been able to build out mirroring infrastructure for Hudson to provide fast access to native packages and wars alike. Currently the OSUOSL only has mirrors inside the continental United States, so we’re reaching out to friends in Asia and Europe to extend the mirroring system.\n\nInformation\n\nI’m currently working on re-working some of the blog posts you may have read over four months as more structured tutorials. I hope to provide an easily accessible knowledge-base for developing Hudson along with configuring Hudson for various platforms and development environments; this is a more difficult task so all the pieces aren’t entirely in place for this just yet.\n\nTo be honest, I’m very enthusiastic about Hudson’s future. Now that InfraDNA is up and running, Kohsuke’s renewed focus combined with the foundation of Hudson Labs and the uncommonly hospitable Hudson developer and user communities, the future is looking bright!","title":"Welcome to Hudson Labs!","tags":["general","meta","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-06-10T00:00:00.000Z","id":"47ba57bf-9dea-510b-9ec1-8e71951d4fd8","slug":"/blog/2010/06/10/subversion-repository-change-notification-push-vs-pull/","strippedHtml":"+\nPeople often configure https://en.wikipedia.org/wiki/Hudson%20%28software%29[Hudson] to start a new build whenever a change is made to the repository. In fact, this is often considered central to the practice of continuous integration. +\n +\n\n+\nThere are two ways to achieve this. One is the \"pull\" model, where Hudson periodically reaches out to a Subversion repository to see if there is any changes. The other is the \"push\" model, where you make the Subversion repository reach out to Hudson. +\n +\n\n+\nBoth approaches have trade-offs. The pull model is easier to configure, since you can do this entirely from Hudson. But this comes at the expense of increased load to the Subversion server. Even though the overhead of Subversion polling is relatively low, as you add more projects to Hudson and increase the polling frequency, the overhead may get non-trivial (imagine the number of Hudson pollings that the poor https://java.net[java.net] Subversion server gets, for example.) A more serious downside, in my opinion, is that this increases the delay from your commit to a build. For example, if your build just takes 5 mins, then even if you poll every minute, you pay on average 30 seconds delay before a build starts — a 10% overhead! +\n +\n\n+\nThe push approach eliminates those two downsides, but it requires a post-commit hook configuration in the Subversion repository, which has to be done manually by the administrator, because those scripts are not exposed to external systems like Hudson. +\n +\n\n+\nWith that said, if you do have an access to the Subversion repository post-commit hook, I highly recommend the push approach, and in Hudson we made it as easy as possible to configure the set up. Here's the script you'll need in your post-commit hook: +\n +\n`+ REPOS=\"$1\" REV=\"$2\" UUID=\\`svnlook uuid $REPOS\\` /usr/bin/wget \\   --header \"Content-Type:text/plain;charset=UTF-8\" \\   --post-data \"\\`svnlook changed --revision $REV $REPOS\\`\" \\   --output-document \"-\" \\   https://server/hudson/subversion/${UUID}/notifyCommit?rev=$REV+` +\n +\n\n+\nThis script basically just tells Hudson that there was a change in a repository. Hudson will then check this information against all the jobs that have a polling configured, and schedule the builds accordingly. The beauty of this approach is two-folds: +\n +\n\nThe script doesn’t change when you add/remove/rename jobs.\n\nThe overhead is constant regardless of the number of jobs.\n\n+\n+\n\n+\nIf you haven't configured a push setup yet, now is the time to do so! +","title":"Subversion repository change notification: push vs pull","tags":["general","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-06-11T00:00:00.000Z","id":"a52e7656-0bee-5a0f-85bd-cbca0ca4f83c","slug":"/blog/2010/06/11/casual-fridays-directing-traffic-with-hudson/","strippedHtml":"Intrepid Hudson user Christian Pelster posted a little project of his this week to the \"users\" mailing list called: hudsontrafficlights .\n\nChristian describes the project as:\n\nThis Java based daemon aggregates the status of one or more jobs from a Hudson continous integration server into a single status (red, yellow, green) and invokes a shell script on status change.\n\nYou can use hudsontrafficlights to control a USB traffic light (such as this USB Traffic Light from Cleware, GmbH) to give you and your colleagues nearly instant feedback on jobs in Hudson, without ever needing to leave your text editor! image:https://hudsontrafficlights.googlecode.com/files/CIMG1635.JPG","title":"Casual Fridays: Directing traffic with Hudson","tags":["general","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-06-14T00:00:00.000Z","id":"ef5f2989-305a-5f4b-a2d2-d08b6728341a","slug":"/blog/2010/06/14/hudson-1-362-released/","strippedHtml":"The 1.362 release of Hudson has a few bug-fixes and a few minor enhancements, all together a good stabilization release. Not too much interesting to discuss so straight on to the changelog!\n\nBugs\n\nRestored optional container-based authentication for CLI. ( issue 6587)\n\nFix javascript error when a plugin uses an empty dropdownList, resulting in LOADING overlay being left up. ( issue 6542)\n\nEnhancements\n\nAdd setting so job views may show only enabled or disabled jobs. ( issue 6673)\n\nFile parameters can now be downloaded from the build Parameters page. ( issue 6719)\n\nAdded an ability to point to different update sites.\n\nAdded a new extension point to plug in custom utility to kill processes.\n\nAdded a proactive error diagnostics to look for a broken reverse proxy setup. ( report)\n\nYou can go grab the latest .war file straight from our OSL mirror or if you’re using a native package, use your package manager to upgrade.\n\nImage courtesy of \" class=\"bare\">https://hudsonsgrill.com/","title":"Hudson 1.362 Released","tags":["general","core","releases","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-06-22T00:00:00.000Z","id":"eeba7b34-9702-5bc1-9a90-39f977507f69","slug":"/blog/2010/06/22/hudson-1-363-released/","strippedHtml":"Last Friday the Hudson team released release 1.363 which is yet another mixed bag of enhancements and bug fixes. Along with the usual bunch of fixes, this release includes a number of localization updates courtesy of a team of Hudson community volunteers participating in the Hudson Internationalization project.\n\nIt is also worth noting that this post is being published on Tuesday, contrary to the schedule that I operated on with Continuous Blog, I will no longer be posting release updates on Monday morning. Traditionally Hudson is released Friday afternoon (PST), meaning any potential regressions are reported early on Monday morning after our European users start to upgrade. Publishing this release announcement on Tuesday gives me more time to test out the release so I can report with greater confidence in the reliability of the update. ( Note : This may change in the future as we push for easier RC testing capabilities within Hudson)\n\nIf you’re a regular reader of the Hudson Labs blog, you may also notice that this change log looks eerily similar to the 1.362 announcement from last week. Turns out I had mistakenly taken the upcoming changes from 1.363 and reported them as fixes in 1.362; I’ve since updated the post regarding 1.362’s change log.\n\nBug Fixes\n\nFix queue handling to close locking gap between removing job from queue and starting build, to prevent unintended concurrent builds (refactor of change first made in 1.360). ( report)\n\nAllow multiple dependencies between same two projects, as they may trigger under different conditions and with different parameters. ( issue 5708)\n\nTimeline on build trend page should use server timezone instead of always GMT. ( issue 6692)\n\nDon’t mask the cause of the checkout related exception.\n\n\"who am I?\" page should be visible to everyone.\n\nReinstall a JDK when a different version is selected. ( issue 5551)\n\nEnhancements\n\nAvoid pointless and harmful redirection when downloading agent.jar. ( issue 5752)\n\nCache downloaded JDKs.\n\nIntegrated community-contributed translations (Germany, Greek, Spanish, Finnish, Hungarian, Italian, Japanese, French, Russian, Slovenian, Dutch, Traditional Chinese, Swedish, Ukrainian, and Portuguese.)\n\nUpgraded bundled Ant to version 1.8.1. ( issue 6562)\n\nYou can go grab the latest .war file straight from our OSL mirror or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.363 Released!","tags":["general","releases","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-06-23T00:00:00.000Z","id":"72813937-fa54-594b-8d0b-fbe3188cc1c8","slug":"/blog/2010/06/23/stickers-starting-to-arrive/","strippedHtml":"Way back in March, I asked you all: Want some Hudson stickers?\n\nTurns out, a lot of you do! Thanks to a huge amuont of help by my future wife, the first shipment of Hudson stickers went into the mail last week. This first shipment was only to United States addresses! If you live outside of the U.S., or if you requested more than 50-ish stickers, I’ve not yet been able to send you stickers. I expect to start sending out international shipments later this week and early next week.\nTo those of you that have received your stickers, I’d like to remind you of the terms of our agreement:\n\nConferences : The only condition being that you tell me all about the event and how Hudson was received after the fact (this may involve an interview).\n\nCompanies : I always appreciate stickers, pens, branded bouncy balls, etc (see: swag) in return!\n\nNice People : If you’re just a fan of Hudson, stickers, or both, I’ll still gladly mail you a few stickers with the condition that you take pictures of where the stickers end up (and maybe of your Hudson install) and either email me some cool pictures or post them to  Flickr (tagged: \"hudsonstickers\")\n\nTo be honest, I really just want to see some pictures of Hudson stickers slapped all over cool stuff: laptops, bosses, servers, desks, stop signs, coworkers, cats, you name it.\n\nIf you did not request stickers, but want some now: please refer to the original post for directions. I do still have stickers left, but there are some \"bulk requests\" I’ve not yet filled. I will do my best to send out as many stickers as I can.","title":"Stickers starting to arrive","tags":["general","just for fun","meta"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-06-28T00:00:00.000Z","id":"3b81d359-5d4a-56a1-bdf9-17d00e5f4180","slug":"/blog/2010/06/28/digg-technical-talk/","strippedHtml":"Recently our fearless leader, Kohsuke Kawaguchi, was invited by the nice folks over at Digg to give a tech talk about continuous integration and automated testing. The Digg engineering team is full of believers in continuous integration, including our very own Andrew Bayer ( abayer). Being big users of the Sauce Labs service to drive their vast Selenium test suite, the house was packed with Selenium hackers/users and Hudson users, the stage was set for Kohsuke to give a great presentation.\n\nDigg Technical Talks - Kohsuke Kawaguchi from Digg Development on Vimeo.\n\nYou can find slides of the presentation here\n---\n\nFor those not familiar with Digg’s peripheral involvement in the Hudson community, they’ve graciously donated a build machine to help run Hudson builds on ci.hudson-labs.org.","title":"Digg Technical Talk","tags":["general","links","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-06-29T00:00:00.000Z","id":"d7908862-f5c1-5397-8df6-dd5cbbd9cd72","slug":"/blog/2010/06/29/11th-international-free-software-forum-in-brazil/","strippedHtml":"Last week, friend-of-Hudson Leandro Nunes sent the following message to the users mailing list regarding his upcoming talk on continuous integration and Hudson:\n\nNext month I will present a talk about Hudson in the 11th\nInternational Free Software Forum ( FISL 11), held in Porto Alegre\nBrazil (detailed time and date of the talk are not yet scheduled so).\n\nFISL 11 is one of the biggest free software events in Latin America and will quite literally attract thousands of free software users, hackers, and enthusiasts. It will be held from the 21st to the 24th of July in Porto Alegre, if you’re in Central or South America, you should definitely try to attend.\n\nLeandro will have Hudson stickers on hand to give out and will surely do a fantastic job presenting Hudson to all those future Hudson users, I hope you can make it!","title":"11th International Free Software Forum in Brazil","tags":["general","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-05T00:00:00.000Z","id":"3f97348b-59bd-5bc1-b25a-04b623d772c5","slug":"/blog/2010/07/05/links-for-2010-07-05/","strippedHtml":"It’s been quite a while since I posted a Hudson links-roundup post, so without further ado, here goes nothing\n\nMax tells us about using Hudson with Symbian’s CodeScanner tool.\n\nRunning agents on Mac OS X? Mirko has some handy launchctl foo for keeping his JNLP agents online\n\nScott threw up a great configuration sample for running Hudson with an Nginx reverse proxy with SSL\n\nMark walks us through using Xvfb to run headless cucumber/selenium tests with Hudson\n\nOur friends behind Build Doctor wrote an interesting build radiator that works seamlessly with Hudson.","title":"Links for 2010-07-05","tags":["general","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-05T00:00:00.000Z","id":"b8e840e8-b5e3-5816-b7d9-fe96a88b7c19","slug":"/blog/2010/07/05/so-youve-found-a-vulnerability-now-what/","strippedHtml":"Hudson, like all web applications, is not immune from vulnerabilities that could open up attack vectors for malicious use. What puts Hudson in a league of its own compared to others is its ability to execute arbitrary commands on agent machines, or in the case of the EC2 plugin, execute arbitrary commands \"in the cloud.\" In light of all this, Hudson is quite secure and offers a variety of mechanisms to reduce the potential for exploits.\n\nDespite Hudson’s security track record, you’ve managed to find a vulnerability in Hudson, and decide to don your white hat and inform the Hudson team. First off, let me commend you on your brilliant decision to report the vulnerability, you are truly a leader among men.\n\nGenerally immediate public disclosure of vulnerabilities is frowned upon as it doesn’t give us much time to react, investigate and patch the hole. For this reason there is the \" SECURITY\" project in Hudson’s JIRA. The SECURITY project is a more locked down section of JIRA than the other projects and allows you to submit issues and have them reviewed by the Hudson core developers who can assess the vulnerability. When reporting the issue, it will be helpful to include information regarding the environment the Hudson instance is running in (such as the servlet container) as well as any pertinent reproduction steps so the team can reproduce, fix and verify with as little wheel-spinning as possible.\n\nWhat happens next wholly determines on the severity of the issue, if it’s a highly critical vulnerability, the team will likely make an out-of-schedule release and advise users to upgrade. If it’s a less critical hole, the fix will be included in an upcoming scheduled release. Either way, the Hudson team has a good track record of correct potential security holes in a timely fashion.\n\nAfter the hole you’ve discovered has been patched and released, you can revel in the fact that you helped make Hudson better, thanks!\n\nImage courtesy of ThinkGeek","title":"So you've found a vulnerability, now what?","tags":["general","core","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-06T00:00:00.000Z","id":"5b8b190e-bd00-5304-a82b-d45766c313b5","slug":"/blog/2010/07/06/security-fix-hudson-1-365-released/","strippedHtml":"The Hudson team has released Hudson 1.365 which contains a critical security fix! A security advisory released yesterday by InfraDNA goes on to explain the hole with more detail:\n\nThis vulnerability allows an attacker to read arbitrary files in the\nserver file system whose path names are known, by sending malicious\nHTTP GET requests. While such access is still subject to the normal\naccess control enforced by the operating system, Hudson can still leak\n\"secrets\" possessed by Hudson\n\nThe vulnerability inside of Hudson affects Hudson instances running inside the embedded Winstone container, instances behind Glasshfish or Jetty (for example) are not subject to this vulnerability. Instances running behind a reverse proxy such as mod_proxy or Nginx.\n\nHudson system administrators should subscribe to either the security advisories RSS feed or the advisories@ mailing list\n\nYou can go grab the latest .war file straight from our OSL mirror or if you’re using a native package, use your package manager to upgrade.","title":"Security Fix! Hudson 1.365 Released","tags":["general","core","news","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-07T00:00:00.000Z","id":"e63c30d5-0330-5bc0-b4b2-408fea3aeeb4","slug":"/blog/2010/07/07/gee-thanks/","strippedHtml":"Squee-D had some nice things to say in the #hudson IRC channel yesterday that I thought I would share:\n\nJust to sing some praise again, make sure you all know how appreciated it is, we absolutely love hudson, and appreciate everyone who develops and maintains it.\n\nPositive feedback (and negative really) is always appreciated; have you thanked your plugin maintainer today?","title":"Gee Thanks","tags":["general","feedback","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-08T00:00:00.000Z","id":"2261a8e4-1548-5ee0-99d2-1450dc19da3f","slug":"/blog/2010/07/08/a-python-love-story-virtualenv-and-hudson/","strippedHtml":"Over the past year Hudson has grown tremendously, both within the Java community and outside of it. Partially thanks to [Titus Brown]( https://twitter.com/ctitusbrown)'s PyCon 2010 Atlanta coverage of continuous integration for Python (which we’ve [covered before]( https://jenkins.io/content/hudson-pycon)), Hudson has made great strides within the Python community as well. In my experience, the majority of Python developers are not using Hudson to build anything, unless they have C extensions, but rather to test their packages, which presents its own set of specific requirements for jobs. Jobs for testing Python code need to be able to reliaby reproduce an environment with the same set of dependencies from one run to the next in order to provide consistent testing. Unlike their Java counterparts, Python developers cannot rely on a powerful system like Maven2 for enumerating build/test targets or defining their project’s dependencies in their jobs; fortunately, w e can have something close: [virtualenv]( https://pypi.python.org/pypi/virtualenv) and [pip]( https://pypi.python.org/pypi/pip). Virtualenv does exactly what you might expect it to, it creates a \"virtual environment\" with custom site-packages directory, and modified python executable. Using virtualenv you can create a staged environment to use for running unit and integration tests. Adding pip alongside that and you have a fantastic Python package manager/installer to use with the virtual environment. Below, I’ve outlined the steps required to use virtualenv and pip to automatically manage a custom environment for your Python jobs. # The Recipe For this recipe to work, you should make sure that your agent machines all have virtualenv and pip installed and accessible from your agent agent’s $PATH. For Mac OS X users, sudo easy_install virtualenv should do the trick, Linux users should be able to run sudo [aptitude/yum/zypper] install python-virtualenv with your respective package manager. You will also need the [SetEnv Plugin]( https://wiki.jenkins.io/display/JENKINS/Setenv+Plugin) installed in Hudson. Step 1 Inside of the job’s configuration page ([http;//hudson/job/configure]( https://hudson/job/configure)), we need to define an environment variable for the job. Using the SetEnv plugin, define a new $PATH : +     PATH=.env/bin:$PATH+ What this will do is modify the $PATH environment variable for all of the \"Execute shell\" build steps in your job. As you might have guessed, we’re going to install the virtualenv in.env in the workspace root directory. Step 2 To set up the virtualenv, you want to add a build step of type \"Execute shell\" and paste the following commands into the text area: +     if [ -d \".env\" ]; then         echo \" virtualenv exists\"     else         echo \" creating virtualenv\"         virtualenv .env     fi+ This will create a virtualenv the first time the job runs on a particular agent, a virtualenv that will persist until the workspace is cleared. Since we’re going to install dependencies in the virtualenv, we want to keep it around between jobs to reduce the amount of network hits to download packages. ## Step 3 With our virtualenv and our $PATH properly set up, the job can now properly install dependencies into its virtualenv, this is where pip shines. A little known feature of pip allows you to define a \"requirements file\" which enumerates the packages to install. In my example project, I defined the following requirements in a file called pip-requires.txt +     eventlet>=0.9.9     nose>=0.11.3     MySQL-python>=1.2.3c1+ In my hypothetical example, I’ll need nose to run my tests, while eventlet and MySQL-python are required for my project to properly run. With the pip-requires.txt file in the root of my source repository, I can add an additional \"Execute shell\" build step that does the following: +     pip install -r pip-requires.txt+ Assuming the $PATH environment variable was properly defined, this will use the virtualenv’s version of pip and it will install the packages defined in pip-requires.txt into the virtualenv! With the dependencies all properly installed in the virtualenv, I can now configure the remainder of my job to build my project and execute the tests. Pretty snazzy if you ask me!","title":"A Python Love Story: Virtualenv and Hudson","tags":["general","guest post","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-12T00:00:00.000Z","id":"0a5963d9-2674-5dc0-b82f-023e853d4a5f","slug":"/blog/2010/07/12/updated-chrome-extension/","strippedHtml":"The developer for the Hudson extension for Google Chrome, Sebastian Sanitz, emailed the users@ list today to inform the community of an update to his fantastic extension .\n\nSebastian’s extension monitors ci.hudson-labs.org by default, but the URL and polling interval are both trivial to change. When any of the builds in the configured URL fail, you’ll see a red \"Fail\" indicator, otherwise green \"Ok\".\n\nIf you’re interested in contributing to the plugin, good news! It’s open source! You can find it on GitHub.","title":"Updated Chrome Extension","tags":["general","just for fun","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-13T00:00:00.000Z","id":"598e564d-d43d-515d-905f-8cb32ae06cec","slug":"/blog/2010/07/13/monitor-hudson-from-your-android/","strippedHtml":"So you’ve got your fancy Android cell phone and you’re thinking to yourself \"besides feeling smugly superior to iPhone users, what can I do with this thing?\" Perhaps you should be considering using it as a phone but if that’s too boring, check out the new and improved Hudson Mood widget for Android ! The latest release brings support for multiple servers and fancier graphics.\n\nIf you’re interested in installing the widget, search for \"Hudson Mood\" in the Android Market, and be sure to thank Siarhei Dudzin for creating the widget!","title":"Monitor Hudson from your Android","tags":["general","just for fun","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-21T00:00:00.000Z","id":"1655158d-bb1f-5d8a-b06c-3ec207baaa4a","slug":"/blog/2010/07/21/hudson-with-selenium-and-sauce-on-demand-videos/","strippedHtml":"A few weeks ago, Kohsuke stopped by the San Francisco Selenium Meetup hosted by Sauce Labs to talk about all things Selenium and Hudson related (with a bit of Sauce in there too).\n\nThe good folks over at Sauce Labs have gotten around to posting some of the videos taken with Kohsuke.\n\nInstead of embed the videos, I wanted to directly link to the post and make sure that you all went over to check out Sauce Labs, they’re up to some interesting things over there.","title":"Hudson with Selenium and Sauce On-Demand Videos","tags":["general","interview","meetup","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-22T00:00:00.000Z","id":"08e48751-f7b4-532a-b55b-cdc118c5acc2","slug":"/blog/2010/07/22/continuous-deployment-on-the-new-digg/","strippedHtml":"In my capacity as Build Guy at Digg, I’ve written up a blog post on our new continuous deployment/code review/pre-tested commit workflow. We’re using a combination of Hudson, Git and Gerrit, Selenium and more to make sure that every change going to Digg’s new site has been thoroughly tested.\n\nRead the whole post, with all the juicy details over on Digg’s Technology Blog!","title":"Continuous Deployment on the new Digg","tags":["general","core","guest post","links","plugins","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2010-07-27T00:00:00.000Z","id":"bd805a6f-8767-5565-9c87-25112f499520","slug":"/blog/2010/07/27/hudson-1-368-released/","strippedHtml":"Regular readers will recognize that I’ve been slacking off quite a bit lately with my release announcements, my apologies. With the release of 1.368 on Sunday, which fixed a few fairly important bugs, I figured I’d dusty off my blogging fedora and give this a shot.\n\nThis release has three bug fixes in it which were causing some issues for some users, particularly those deploying Hudson inside the recently released Tomcat 7.0 (see issue 6738).\n\nHudson users utilizing the JDK auto-installation feature between different platforms may have been affected by issue 6880 which was also fixed in this release.\n\nBringing up the rear is the fix to issue 7004 which detailed a few discrepencies between the /buildWithParameters and the /build remote APIs.\n\nIf you’re not affected by these issues, you may want to wait for the soon-to-be-released 1.369 which has even more juicy bug fixes in it (with a dash of enhancements) to upgrade.\n---\n\nYou can go grab the latest .war file straight from our OSL mirror or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.368 Released!","tags":["general","core","news","releases","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-07-28T00:00:00.000Z","id":"a07fba72-78a8-535c-9379-13f2b06ac4db","slug":"/blog/2010/07/28/hosting-your-hudson-plugin-at-github/","strippedHtml":"For as long as Hudson’s had a plugin model and development community, we’ve provided source code and binary hosting through our Subversion repo at java.net. But what if you’re a plugin developer and you don’t want to use Subversion? Well, we have an alternative for your source code: host it with Hudson on GitHub.\n\nTo get this in place, send an email to dev@hudson.dev.java.net (or ask in the IRC channel) asking to get a repository created for your plugin at Github. Make sure to include the name of the plugin and your Github username (and the Github usernames of any other developers who’ll be pushing to your plugin’s repo). If your plugin is already in Github, include the URL for the existing repo so that we can fork it. One of the Hudson admins will create the repository (forking if appropriate) and add the user(s) to the list of users with push access to the Hudson-hosted repositories at Github. Once you hear back from them, you’ll be able to push code to the new repository.\n\nYou will need to make a few changes to your plugin’s POM, as compared to what works for a plugin POM in the java.net Subversion tree.\n\nFirst, add the following to the ` section: +\n +\n`+                org.apache.maven.plugins         maven-release-plugin         2.0                                 org.apache.maven.scm             maven-scm-provider-gitexe             1.3                           +` +\n +\nThis is needed to make sure we're overriding the parent POM's SCM provider settings. Next, add the following to the ` section:\n\n+                     org.jvnet.wagon-svn         wagon-svn         1.9            +\n\nThis is needed because we’re still going to be using wagon-svn to deploy the artifacts in the release process. Lastly, add an ` section, within the ` section of the POM, like the following:\n\n+        scm:git:git://github.com/hudson/your-plugin-repo.git     scm:git:git@github.com:hudson/your-plugin-repo.git https://github.com/hudson/your-plugin-repo +\n\nAs with the first section, this is needed to override the default SCM settings in the parent POM. Make sure to change \"your-plugin-repo\" to your actual plugin repository name, of course! It’d also be a good idea to put a link to your Github repo on your plugin’s wiki page at the Hudson wiki, since the default source link will go to Subversion.\n\nNow, with these changes in place, committed and pushed to the master branch in your plugin’s repository, you should be able to run \"mvn release:prepare release:perform\" just as you would if the plugin were hosted in Subversion, with your plugin showing up in the Update Center within a few hours. Be sure that you’ve configured the login information for the java.net Maven repository, as detailed here - this is still needed for plugins hosted at and released from Github, since Hudson’s Maven repository still lives at java.net. If you run into any issues releasing your plugin from Github, first be sure to review the wiki page on plugin hosting, which addresses many of the issues you may encounter when running the Maven release plugin.\n\nIf you’re still stumped, feel free to email the Hudson developer list or ask in the IRC channel for help.\n\n+\n(Andrew is a core committer to Hudson and the author of numerous plugins. He's the build guy at https://digg.com[Digg], who, by the way, https://jobs.digg.com/[are hiring]!)","title":"Hosting your Hudson plugin at Github","tags":["development","meta","plugins","tutorial","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2010-08-02T00:00:00.000Z","id":"39857c82-9e13-5cee-bbe3-208d7d4e51d5","slug":"/blog/2010/08/02/dogfooding-hudson-were-looking-for-slaves/","strippedHtml":"As you may have noticed, thanks to the link on this and the other pages here at hudson-labs.org, the Hudson development community has recently introduced ci.hudson-labs.org, the official Hudson-on-Hudson instance. We’re currently building Hudson proper, the Hudson core RC branch, individual builds for the various Hudson plugins and Gerrit, as well as various libraries and infrastructure jobs Hudson depends on.\n\nWe’re currently running all those builds on a dedicated Linux agent, generously provided to the Hudson project by Digg, my employer. This has been great - except for the day when I’d just added all the individual plugin jobs for the first time, we haven’t had real problems with capacity. But we are limited in the environments we can run our tests on as a result of only having a Linux agent. We’re currently playing with a temporary Windows agent, but we’d really like to have at least one more permanent Windows agent, and a Mac agent as well, so that we can run Hudson’s core integration tests on those platforms as well. Since this is Hudson we’re talking about, we don’t need the agent to be in any given physical location - we just need it to be running the agent process and talking to our server. If you’re interested in helping us out with this, please contact me at andrew dot bayer at gmail dot com. Thanks!\n\n+\n(Andrew is a core committer to Hudson and the author of numerous plugins. He's the build guy at https://digg.com[Digg], who, by the way, https://jobs.digg.com/[are hiring]!)","title":"Dogfooding Hudson - We're Looking for Agents!","tags":["infrastructure","core","meta","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2010-08-10T00:00:00.000Z","id":"7130159b-70ef-5a1b-8c40-aaefb4a1cd5d","slug":"/blog/2010/08/10/big-security-fix-hudson-1-371-released/","strippedHtml":"Hot on the heels of Hudson 1.370, which was released last Friday, the Hudson team released 1.371 which addresses a critical vulnerability in all Hudson versions prior to 1.371. The vulnerability was disclosed by InfraDNA in the following security advisory, which details the issue:\n\nThis critical vulnerability allows an attacker to use CLI commands that they are otherwise unauthorized for. CLI commands can perform various administrative operations.\n\nIt is advised that all Hudson instances be upgraded immediately to avoid data loss or other ill effects from this issue. If you’re upgrading from a version earlier than 1.370, you can consult the changelog for details on the other bug fixes and enhancements covered by the upgrade of your version to 1.371.\n\nIf you run a Hudson instance, it is recommended that Hudson system admins subscribe to either the security advisories RSS feed or the advisories@ mailing list\n---\n\nYou can go grab the latest .war file straight from our OSL mirror or if you’re using a native package, use your package manager to upgrade.","title":"Big Security Fix! Hudson 1.371 Released","tags":["general","core","news","releases","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-08-11T00:00:00.000Z","id":"f277d4c3-07e9-5f66-9263-d554ef23f136","slug":"/blog/2010/08/11/quiet-period-feature/","strippedHtml":"Commits often come in a burst. This seems to happen mainly for two reasons — people sometimes forget to commit some files, and in the tranquility of waiting for your SCM to finish a commit, people sometimes realize the problems in the commit and they quickly make follow-up changes. The conventional wisdom is that the CI server should wait for the burst to finish before attempting a build. This is said to reduce the chance of having broken build, and it is also sometimes useful in reducing the average turn-around time for builds that take longer.\n\nAs such, Hudson is capable of waiting for a commit burst to be over before it triggers a new build, and this feature is called \"quiet period.\" There are two parts in Hudson that interacts with the quiet period. One is the SCM polling behavior and the other is the queue.\n\nThe queue portion of the quiet period is straight-forward. When a build is scheduled into the queue with quiet period, the build will sit in the queue until the quiet period expires. If during this period, additional attempts are made to put the same build in the queue, the quiet period resets to its initial value. For example, if the quiet period is 5 minutes, and the build is put into the queue 9:00am and 9:03am, the actual build will only happen after 9:08am. Thus another way to think of the quiet period is that you are requiring a certain period of inactivity.\n\nThe above applies to all the mechanisms in Hudson that puts builds into the queue. This includes REST API call, CLI call, downstream triggers, and SCM pollings. So if you implement some kind of a \"push\" mechanism in your SCM to notify Hudson of a new commit, then you get the desired effect by just setting the quiet period in Hudson, and those push scripts don’t have to do anything tricky.\n\nIt is also possible for some of those to override the quiet period configured in the project. For example, when you click \"Build Now\" button in your browser, your browser is making a REST API call, but with the quiet period of zero. I used to run a \"push\" script that looks into a commit message and overrides the quiet period by taking advantages of this feature.\n\nThe other portion of the quiet period that often matters is the SCM polling behaviour. Up until Hudson 1.346, the way Hudson defined the SCM abstraction made it impossible for SCMs to correctly report newly detected commits since the last polling. Instead, it was only possible to report if the repository is newer than the workspace. As a result, if the polling interval is set shorter than the quiet period, the build stayed in the quiet period forever. This was tracked in HUDSON-2180.\n\nHudson 1.346 fixed this issue, and so if you are using a newer version of Hudson and SCM plugins that take advantage of this improvement, then everything works as expected. Otherwise, avoid setting quiet period longer than the polling interval.","title":"Quiet Period Feature","tags":["general","core","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-08-16T00:00:00.000Z","id":"71e48d7e-2b08-5efc-a470-7aad0b1e8664","slug":"/blog/2010/08/16/hudsonmobi-2-0-hits-the-android-market/","strippedHtml":"The folks over at LMT Software just released their HudsonMobi 2.0 to the Android market. This release of HudsonMobi brings a lot of the features to Android that iPhone/iPad users of HudsonMobi have enjoyed for some time.\n\nFeatures unleashed to Android users in this revision of the app are:\n\nFull Android user-experience with Menu and back controls\n\nEmbedded artifact viewer! For archived build artifacts that are text-based, you can view them directly on your handset.\n\nAccess to the build history and changes for a job.\n\nQuick and easy access to a job’s last build\\\n\nRestyled and updated user-experience, making HudsonMobi \"feel better\" on an Android device\n\nIf you want to get HudsonMobi for free from the Android Market, whip our your phone and take a picture of its QR code:","title":"HudsonMobi 2.0 hits the Android Market","tags":["general","news","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-08-17T00:00:00.000Z","id":"66f3d589-5774-5dbe-8214-7c63d23c6597","slug":"/blog/2010/08/17/hudson-1-372-sets-sail/","strippedHtml":"Last Friday the Hudson team rolled out a small 1.372 with two enhancements following the critical 1.371 release on Monday. Not a whole lot to say about this release other than go get it!\n\nEnhancements\n\nPersist matrix-based security settings in a consistent order ( issue 7138)\n\nJobs can now use boolean expression over labels to control where they run.\n\nYou can go grab the latest .war file straight from our OSL mirror or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.372 sets sail","tags":["general","news","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-08-17T00:00:00.000Z","id":"6b7df70f-bfc3-514d-be8c-58d039483ca5","slug":"/blog/2010/08/17/hudson-anonymous-usage-data/","strippedHtml":"In late 2008, the Hudson team released version 1.264 which added an anonymous reporting feature (you can opt-out in the \"Manage Hudson\" screen). The reporting feature has been sending information back to the Hudson team to help us understand how Hudson is used in aggregate; the info being reported includes the number of jobs configured, agent configurations, what plugins (and what versions of those plugins) are installed, and more. This data has not been available publicly until now! The raw data needed to be decrypted and scrubbed of any potentially identifying information, such as non-public plugin names or usernames in snapshot versions. We’ve finally scrubbed the data and are making it available!\n\nThe data is currently in monthly JSON bundles, organized by unique install key. We’ve filtered out reports of installations without any jobs configured, as well as any installations with only one report in a given month.\n\nIf you’d like access to the data, please send an email to dev@hudson.dev.java.net or jump onto the IRC channel and ask - we’ll send you the URL and a private username/password which you’ll need to access the info. We’re also planning to do more analysis of the data ourselves, for now feast your eyes on this spreadsheet, which shows the total number of unique installations seen per month and the number of unique installations of each publicly available plugin per month.\n\n+\n(Andrew is a core committer to Hudson and the author of numerous plugins. He's the build guy at https://digg.com[Digg], who, by the way, https://jobs.digg.com/[are hiring]!) +\n +\n\n+","title":"Hudson Anonymous Usage Data","tags":["general","core","just for fun","meta","news","plugins","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2010-08-20T00:00:00.000Z","id":"685bfc55-97fd-5448-894a-707a72830f64","slug":"/blog/2010/08/20/hudson-sauce-ondemand-webinar/","strippedHtml":"On September 1st, I’ll be presenting in a Sauce Labs webinar about Hudson and Sauce OnDemand. The talk will discuss how Hudson can be used with Sauce OnDemand, naturally, but it’ll also cover broader Hudson/Selenium integrations.\n\nPlease register to this free event, and looking forward to seeing to you virtually.","title":"Hudson / Sauce OnDemand webinar","tags":["general","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-08-26T00:00:00.000Z","id":"018d1a20-48d9-5c5c-a118-69b37fcf1358","slug":"/blog/2010/08/26/cloudbees-announce-hudson-as-a-service/","strippedHtml":"https://cloudbees.com/[CloudBees] announced the beta availability of their new Hudson-as-a-service \"HaaS\" today. I see this as yet another validation to Hudson, and as such, I welcome this new addition to the community and wish them well! — more companies betting on Hudson means we’ll get more investment to the project, which is all goodness for Hudson users. It’s been 5 months since I left Oracle to start InfraDNA, and I was initially worried about a possible negative impact on adoption, but instead Hudson has shown with no sign of slowing down (see picture on the right, from Andrew’s report, which shows # of estimated active installations that participates to our usage stats survey). And InfraDNA is going well too - we’ve helped companies big and small to improve their Hudson usage/adoption, and our commercial value-add Hudson distribution is getting plenty of interest.\n\nHosted Hudson offers an interesting trade-off, compared to on-premises Hudson. On the plus side, given the current hourly pricing of public clouds like EC2 and Rackspace, you get a better pricing model, as CloudBees charge by minutes. You also get rid of machines and upfront cost, which is great for small business. On top of that, you can also expect them to gradually develop more value-adds and better integration to various other pieces, which can get really interesting.\n\nOn the down side, you have less control over the environment that runs the builds, and you do not have access back to your intranet environment (think databases that you need to talk to, for example.) Also, in the current pricing (8.5 cents/hour of EC2 vs 1 cent/minute of CB), if your build takes longer than 9 minutes, you’ll save more by just using Hudson EC2 plugin.\n\nOn a related note, I think one of the sweet spots is Hudson that’s well integrated with on-premises cloud solution. As you can see in the discussion with Liferay Hudson setup, with sufficient load it gets cheaper to have your own hardware, and many companies need some degree of control to the build/test environment that matches with their production environment. Plus with those on-premises virtualized environments, you can do snapshots and forks, which can be made to do very interesting things.\n\nFinally, I think the part that everyone can agree on is that the elasticity of build environment is hugely useful to the CI environment, as I discussed in my JavaOne 2009 talk ( slides.) I’m very happy to see that the foundation work we’ve made in Hudson for this is getting validated more and more, and I think the added elasticity will drive a lot more changes in Hudson and more broadly into the way we develop software. It is an exciting time!","title":"CloudBees announce Hudson-as-a-Service","tags":["general","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-08-29T00:00:00.000Z","id":"06839a62-5b96-5e18-85d0-180621816c20","slug":"/blog/2010/08/29/hudson-user-meet-up-in-copenhagen-oslo/","strippedHtml":"I’ll be in Copenhagen from 9/5-9/7 and in Oslo 9/8-9/9 to present in JavaZone. I’d like to take advantage of the opportunities and have user meet-up events in those cities. Depending on the number of participants, it could be just a drink in a bar, or a talk in a meeting room.\n\nSo if you are:\n\nin those cities,\n\navailable in the evening of 9/6, 9/8, or 9/9, and\n\nwilling to attend such an event,\n\n... then please let me know.\n\nAlso, if you have an office in those cities and willing to provide a space for an event, that would be extra appreciated!","title":"Hudson User Meet-up in Copenhagen/Oslo","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-08-30T00:00:00.000Z","id":"daf4fa9f-3809-53bb-979c-b9a11be2e70a","slug":"/blog/2010/08/30/pre-javaone-hudson-meetup/","strippedHtml":"As we near autumn up here in the Northern Hemisphere, the wind is starting to blow a bit chillier and here in the Bay Area that can only mean one thing: Oracle is suing everybody! it’s time for JavaOne!\n\nA whole lot has changed since last year, Sun Microsystems was acquired by Oracle, Kohsuke left Snoracle to found InfraDNA and Hudson has continued to power on as the single best continuous integration server on the planet.\n\nWhile the tickets for Oracle OpenWorld/JavaOne are just as outrageously expensive as they were last year, we are hosting a meetup/hackathon/continuous-drinking-contest at Digg the Sunday prior. We have not yet set any kind of agenda, but some core Hudson hackers and plenty of plugin developers should be in town so it should be a great time hacking on and/or with Hudson.\n\nhttps://www.meetup.com/hudsonmeetup/calendar/14515128/\n\nWhen: September 19th, 1:00 p.m.\n\nLocation: Digg’s Office: 1040 Mariposa St - Suite 100, San Francisco, CA 94107\nhttps://maps.google.com/maps?f=q&source=embed&hl=en&geocode=&q=1040+Mariposa+St+-+Suite+100+San+Francisco,+CA+94107&sll=37.0625,-95.677068&sspn=39.780156,78.662109&ie=UTF8&hq=&hnear=1040+Mariposa+St,+San+Francisco,+California+94107&ll=37.764201,-122.394304&spn=0.020356,0.025749&z=14&iwloc=A\n\nUnlike last year, we’re trying to organize this with Meetup.com, if you experience any difficulties RSVPing let us know","title":"Pre-JavaOne Hudson Meetup","tags":["general","just for fun","meetup","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-08-31T00:00:00.000Z","id":"4e8f1e15-fa1f-5d4d-a8b5-f848a400e7f7","slug":"/blog/2010/08/31/hudson-at-javazone-meetup-in-oslo/","strippedHtml":"+\nhttps://jz10.java.no/[JavaZone] is a big Java conference in Scandinavia, and Hudson is well represented there. On September 8th, Håkon Snøtun will be presenting \"Top 5 plugins for Hudson and Chuck Norris.\" and on September 9th, I'll be presenting \"Getting more out of your Hudson.\" +\n +\n\n+\nBut more importantly, what is a conference without drinking!? So in that spirit, https://infradna.com/[InfraDNA] will be organizing a Hudson User Meetup at https://maps.google.com/maps?hl=en&q=Oslo&ie=UTF8&hq=&hnear=Oslo,+Norway&ll=59.912614,10.743604&spn=0.001589,0.004823&t=h&z=18[The Scotsman] from Sep 8th 19:30 (https://www.scotsman.no/[website].) We'll get together, have some drinks, and enjoy geeky conversations. +\n +\n +\n\n+\nSo if you are local or visiting Oslo for JavaZone, come join us. If you plan to join us at The Scotsman, please mailto:kohsuke@infradna.com[RSVP], and watch out for https://twitter.com/kohsukekawa[my twitter updates] for any last minute time/location changes. +","title":"Hudson at JavaZone, Meetup in Oslo ","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-09-01T00:00:00.000Z","id":"5b8f7dab-40ba-5e57-9d6a-7185e39ffb1a","slug":"/blog/2010/09/01/copenhagen-hudson-user-meetup/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Kopenhagen_Innenstadt.JPG/280px-Kopenhagen_Innenstadt.JPG[image]September is turning into a meetup month for the Hudson community. In parallel to https://hudson-labs.org/content/hudson-javazone-meetup-oslo[the meetup in Oslo] and https://hudson-labs.org/content/pre-javaone-hudson-meetup[the meetup in JavaOne], https://www.nokia.com/[Nokia] and https://infradna.com/[InfraDNA] are hosting a meetup in Copenhagen on September 6th, Monday. Read on for the details. +\n +\n\n+\nThe current tentative plan is to do a short \"state of the union / what's new\" kind of presentation, then use the rest of the time for open mic Q&A, but if you have other ideas, or better yet if you want to do some talks, please let me know. I think the event will be fun. +\n +\n\n+\nIf you plan on coming, please mailto:event@infradna.com[drop me a note], so that we can get some sense of the attendance. +\n +\n\nWhen: September 6th, 18:30\n\nWhere: Auditorium 1, Nokia Denmark A/S, København ( map)\n\nFood will be provided.","title":"Copenhagen Hudson User Meetup","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-09-02T00:00:00.000Z","id":"9cbddb28-b3f3-50db-851e-8dc3b544dec7","slug":"/blog/2010/09/02/recent-label-and-matrix-project-improvement/","strippedHtml":"Today, I’d highlight two recent improvements to the label and matrix projects.\n\nWhen you have multiple agents in your Hudson build farm, you can use labels to classify agents by their capability/environment/architecture/etc. For example, your one agent might have “32bit” and “windows” label, while another one might have “linux”, “ubuntu”, and “64bit.” (with plugins like platform-labeler plugin, you can attach labels automatically, too.) Or if you do Selenium testing, you might add browser names as labels to indicate which agent has which browser available.\n\nWith such set up, you then specify that such and such jobs can be only run on such and such labels. For example, you might say your “test-foo” job requires the “windows” label, while your “compile-bar” job might require the “macos” label.\nStarting 1.372, Hudson now lets you use boolean expressions here, instead of just specifying one label as the requirement. For example, your “seleniumTest-zot” job can now say it requires “windows&&firefox” since it’s meant to run on Windows with Firefox. Or if your job requires a shell script, you might say “!windows” to indicate that it has to be run somewhere that’s not Windows.\n\nLabels are also often used in the context of the multi-configuration project (a.k.a. matrix project.) In a multi-configuration project, you specify what to execute to build your project, then specify a number of “axes” that represents the variable and their possible values to execute a build. There are several different kinds of axes (and this is of course extensible), and one of them is the label axis.\n\nFor example, say you have a test suite that you want to run on Windows, Linux, and Solaris, to make sure it works correctly under all these environments. In such a case, you define one label axis, and tell Hudson that you have three possible values “windows”, “linux”, and “solaris.” When you build this project, Hudson will run your build three times by finding appropriate agent that carries the specified label.\n\nIn 1.373, you can now specify multiple label axes. For example, you might have a C++ project that needs to be compiled on various platforms. In such a case, you can define one label axis to be “windows”, “linux”, “solaris”, and you can define another label axis to be “32bit” and “64bit”. This will generate 3x2=6 combinations to be executed.\n\nSometimes the exhaustive combinations do not make sense. In such a case, you can use a filter boolean expression to eliminate some values. You can also use the same mechanism to create a sparse matrix — that is, you tell Hudson to reduce the coverage to 33%, and Hudson will eliminate every 2 out of 3 combinations.\n\nFinally, I’d like to thank Sandia National Laboratories for sponsoring this work, which made it possible for InfraDNA to provide this feature to the community. People often think that contributing code is the only way to give back to the project, but sponsoring features like this is another great way to do it.","title":"Recent label and matrix project improvement","tags":["development","core","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-09-04T00:00:00.000Z","id":"db2d22a5-3d44-5396-a2f6-4cfdbed3cd6b","slug":"/blog/2010/09/04/hudson-events-calendar/","strippedHtml":"Just wanted to let everybody know that I’ve gone ahead and added a Calendar for all the upcoming Hudson-related events.\n\nHopefully we’ll be able to add more and more events for the rest of the year including seminars, more meetups and potentially a few drink-ups!\n\nWorth mentioning that I’ve not yet tested the iCal feed so if you have troubles with it, let me know (via the comments).","title":"Hudson Events Calendar","tags":["general","meta"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-05T00:00:00.000Z","id":"a88c7ef1-9616-56e2-af1b-362d3846cc0e","slug":"/blog/2010/09/05/hudsonmobi-dons-a-black-turtleneck-and-jumps-to-ios4/","strippedHtml":"Last time I talked about HudsonMobi 2.0 there were some hiccups with the QR code which made me pretty irritated. Now the leading mobile app for Hudson users has regained my trust with their lastest release for iOS 4, the latest incarnation of Apple’s mobile operating systems for iPhones and iPod Touches.\n\nSince I fall into the category of subhumans who for one reason or another choose not to own an iPhone, I can’t verify the awesomeness of this new HudsonMobi release. If it is anything like the 2.0 release for Android you can expect enhancements such as:\n\nTighter integration with iOS 4\n\nEmbedded artifact viewer! For archived build artifacts that are text-based, you can view them directly on your handset.\n\nAccess to the build history and changes for a job.\n\nQuick and easy access to a job’s last build\n\nIf you own a device with iOS 3.0 or higher you should be able to download HudsonMobi 2.0 from the appstore, if you give it a whirl, please leave a comment to let me know how awesome it is :)\n\n---","title":"HudsonMobi dons a black turtleneck and jumps to iOS4","tags":["general","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-09T00:00:00.000Z","id":"6e79bb60-9024-5d9b-bf6a-18bea1a6bd36","slug":"/blog/2010/09/09/lets-talk-about-hudson-at-javaone/","strippedHtml":"A few months ago I enjoyed running a couple interviews with folks who were using Hudson but lately I’ve lacked the time and coffee to get more interviews done.\n\nI am planning on making up for it by bringing my fancy smancy tape recorder (i.e. a smartphone) and a few notepads to the upcoming JavaOne conference here in San Francisco.\n\nIf you’re interested in talking to me about how you or your company uses Hudson in your quest for world domination, you will be able to find me at the Hudson hackathon on Sunday the 19th, or at JavaOne on Monday, Tuesday and maybe Wednesday.\n\nFeel free to drop me a line at tyler[at]linux.com and we’ll set something up!","title":"Let's talk about Hudson at JavaOne","tags":["general","interview"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-17T00:00:00.000Z","id":"a42335c7-2fe5-5139-8ffb-89eaf75f357c","slug":"/blog/2010/09/17/javaone-taking-shape/","strippedHtml":"Last night on my way out of San Francisco I stopped by 4th and Howard St to get my first taste of JavaOne/Oracle OpenWorld which was already taking shape at the location. Besides snapping the photo below, I also managed to get yelled out by an old woman wearing a red \"security\" jacket; suffice to say my JavaOne experience is already everything I expected! image:https://farm5.static.flickr.com/4107/4997929716_1675745efe.jpg\n\nUnlike last year’s Oracle OpenWorld, which also shut down this segment of Howard St in San Francisco and took over the adjacent Yerba Buena Gardens, this event will be crammed together with JavaOne.\n\nAt this point I’m not sure what I can expect as far as the JavaOne portion of the event goes, we do have two Hudson related events scheduled:\n\nGetting More Out of Your Hudson - Monday at 10:00 a.m. - Hosted by our very own Kohsuke Kawaguchi, the session will be 60 minutes at Parc 55, Embarcadero.\n\nGetting More from Your CI Server: Taking Hudson to the Next Level - Tuesday at 9:30 a.m. - Hosted by the (in)famous John Smart the session will also be 60 minutes at Parc 55, Cyril Magnin 1.\n\nUnfortunately those were the only specifically-Hudson related tracks I could find, as Andrew Bayer has mentioned before, finding a proper schedule is near impossible. While at JavaOne, I intend on posting updates, pictures and maybe a little scathing commentary (they did give me a blogger pass for some silly reason).\n\nIf you’re going to be at JavaOne, think about coming and talking to me about how you/your company uses Hudson. I might just have stickers!","title":"JavaOne taking shape","tags":["general","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-20T00:00:00.000Z","id":"8d4556c0-e0f7-593d-abc1-df6cf712f0a1","slug":"/blog/2010/09/20/live-blog-kohsukes-presentation-at-javaone/","strippedHtml":"Editor’s note: This is a very rough set of notes from Kohsuke Kawaguchi’s presentation at JavaOne 2010.\n\nKohsuke takes the stage, asks \"who uses’s Hudson\" the majority of\naudience raises their hands\n\nDiscussing the great ecosystem using Hudson across the wide-variety of platforms/languages.\n330+ community written plugins. Last year at JavaOne we had 230+ plugins\n\nEclipse Community Survey, Hudson adoption from 9.1% in 2009 to 21.8%\n\nDiscussing Hudson adoption, going over Hudson job postings on indeed.com going up compared to a stagnant Cruise Control.\n\nKohsuke introduces himself and InfraDNA, started Hudson in 2004/2005.\n\nFirst steps to CI, 10,000 foot overview of SCM monitoring/build/testing. Delving into using Hudson\nfor automating everything to get \"more out of your Hudson deployment.\n\n\"Interconnecting Jobs aka Workflows\"\n\nHudson allows for hosting many projects on one Hudson deployment, meaning you need a smaller number of administrators for a larger number of jobs compared to Cruise Control.\n\nBuilding Block #1: Triggering. Using \"upstream\" and \"downstream\" jobs ot interconnect jobs to form a workflow in Hudosn. Triggering is asynchronoys in Hudson, useful for separating builds and multiple test jobs. Splitting the build and test jobs so you build quickly test many tests in parallel.\n\nAvoid recompiling compilation/builds in the \"downstream\" test runs. \"Copy Artifact\" plugin very useful for passing built executables to test jobs.\n\nUpstream/downstream separation also highly useful for separating build and deployment into a continuous workflow.\n\nBuilding Block #2: Join plugin. Fan downstream jobs out and then bring everything back together for final\nsteps.\n\nShows Join plugin configuration screen because \"perhaps the configuration is a little unintuitive\".\n\nBuilding block #3: Fingerprints. Using MD5 checksums from artifacts to learn more about those artifacts in your\nHudson, tying together artifacts from different jobs/builds. Letting Hudson recording these fingerprints of those artifacts in your lifecycle allows Hudson to help you find out where/when those executables came from.\n\nFingerprinting mechanism good for tracking dependencies from third parties, Hudson uses 3rd party fingerprints to compute additional information. Also useful for aggregating reports.\n\nGoing a bit further using the \"build promotion plugin\" to weed out which builds are \"better than others.\" Taking fingerprints from a build job all the way through the life cycle and passing that fingerprint around test/smoke test jobs, if that passes, build passes on to more rigorous testing, only if it’s passed base-level testing. Basic model of promotion maps to a \"confidence level\", 1st level passes compilation, 2nd level passes smoke test, 3rd level passes expensive/time-consuming tests.\n\nOne of the reasons to use promotion in your lifecycle to ensure that artifacts meet a minimum \"confidence level\" so you’re not expending resources running the longer tests )think about a promotion hierarchy)\n\nDemo time!\n\nKohsuke demoing build promotion live with fingerprinting of sample jar files. Creating a \"component-X\" build and a \"test-X\" build. test-X job using the \"Copy Artifact\" plugin to grab artifacts from the component-X build.\n\nDefining the promotion criteria in \"component-X\", \"test-X\" promoted, indicates that certain builds promoted a build.\n\nEnd demo time!\n\nMaven Integration\n\nMaven integration highlights. Going over POM comprehension and simplified configuration due to more information\ngetting inferred from the POMs. Building dependency chains with Maven integration.\n\n\"That’s the basics, let’s talk about advanced integration with Maven\"\n\nParallel-module builds! Letting Hudson builds modules with a single checkbox, meaning wherever possible Hudson will try to build your modules in parallel when possible.\n\nIncremental builds! Only building changed modules in a build run to be more efficient, preventing the need to rebuild the whole project from scratch every time. Hudson’s SCM integration to determine what the mapping between files changed and modules needing to be built.\n\nPrivate Maven repositories! Avoiding artifacts being overwritten by others, telling Hudson to create a Maven repository per-project (at the expense of more bandwidth/disk space needed), helps segregate builds to avoid them stomping on each other.\n\nAfter-the-fact deployment, avoiding deploying modules unless the whole build is successful (all modules properly built). Instead of using mvn deploy, you tell Hudson to deploy to your Maven repository with a single checkbox.\n\nMatrix Project\n\nNo longer alpha! Production-ready!\n\nOften used to build/test across slight variations of build environments such as different platforms for a C++ project. Conceptually it’s like running your build in a for loop.\n\nHudson supports a number of different axes, most popular of which being a \"agent axis\" which allows you to use different labels or specific agents for the build. Hudson also supports arbirtrary text fields as axes to be passed along to the build steps as environment variables.\n\nTouching on \"filtering\" in the matrix project support to remove parts of an axis that you do not need. I.e if you have a \"platform\" and a \"browser\" axes for web testing, you can exclude the \"iexplore\" value of the \"browser\" axis when the \"platform\" axis is \"mac\".\n\nDemo time!\n\nDefining two axes, \"agent\" axis and the \"JDK\" axis to build against different JDK versions on linux, solaris and windows. Excluding \"touchstone builds\" to avoid rebuilding a large number of matrix builds unless a limited subset of the combinations successfully build. Used to avoid spending a lot of time spinning cycles on very obvious errors that the first few builds \"recognize\" immediately.\n\nEnd demo time\n\nDoing Selenium testing on Hudson\n\nUse \"Selenium Grid plugin\" to install Selenium binaries on all agents and prepares them all to talk to each other. Useful for \"overloading\" an existing Hudson cluster as a Selenium cluster.\n\nUsing labels in Hudson to better determine which node has which browser.\n\nSelenium integration is very powerful when combined with the join plugin and the matrix configuration support in Hudson for web testing across a large number of platforms and browsers.\n\nThe Hudson project has invested heavily in getting great cluster support which helps tremendously with Selenium which has invested as heavily in clustering.\n\nHow to you deal with Selenium needing a GUI while Hudson agents are largely headless. Use the Xvnc plugin! On Windows things are bit trickier, easier to let Hudson agent/service \"interact with desktop\" such that it can access dialogs/etc. Failing everything else, configuring Windows for auto-login and then have JNLP agents autostart at login will work for allowing the agent to use the GUI and network resources.\n\nThe rest of the session was dedicated to some good Q&A. Great session by Hudson’s founder.","title":"Live Blog: Kohsuke's Presentation at JavaOne","tags":["general","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-20T00:00:00.000Z","id":"b3e39198-add0-57dc-9ebe-35319145e32a","slug":"/blog/2010/09/20/pre-javaone-hudson-meetup-redux/","strippedHtml":"Yesterday Digg was kind enough to host and \"sponsor\" (read: free drinks and\npizza!) a Hudson meetup at their offices in San Francisco. While Digg has been\nthe source of some controversy and press due to their recent redesign and corporate\nshake-ups, as far as the Hudson community goes they’ve been largely responsible for\na great case study on continuous deployment using Hudson and Gerrit. image:https://farm5.static.flickr.com/4130/5005123971_403f24733d.jpg\n\nAttendees included all of InfraDNA (Kohsuke and Kedar), some folks from CloudBees, a\nnumber of local users/developers like LewisHam and myself, and\nto top off the list a couple Oracle employees including Winston Prakash who is now hacking on Hudson inside of Oracle.\n\nAs folks started arriving there was a lot of discussion around \"Hudson at Scale\", specifically\nregarding Hudson \"in the cloud\". We also got to hear about one of the most interesting Hudson\nuse-cases I’ve ever seen by Edward M. Goldberg who I’ll post an\ninterview with shortly, imagine using Hudson with thousands of machines, it’s that interesting.\n\nThrough the afternoon there were a number of great discussions concerning Hudson stability,\nengaging more of the community and nitty-gritty details regarding Hudson’s internals such\nas the plugin API.\n\nI’ve posted photos from the event on\nFlickr for posterity in case you’re interested. Overall I’d judge the meetup to be a success, it was a\nlot of fun and a great way to spend a Sunday with Hudson.\n\nIf you’re going to be at JavaOne, come track me down and let’s talk about Hudson, if you’re not in San Francisco for the event, you can always follow my updates on Twitter or hit up Flickr","title":"Pre-JavaOne Hudson Meetup Redux","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-20T00:00:00.000Z","id":"fca18ab6-1a05-55e2-a78b-ef70fc0b342a","slug":"/blog/2010/09/20/tweet-of-the-day/","strippedHtml":"Some of you may have been following all the photos posted to the hudsonlabs Flickr account from this year’s JavaOne conference in San Francisco.\n\nAlan O’Leary responded to this photo with one of the funniest comments of the day:\n\"Java and Oracle - 'In Opposite Directions'\"","title":"Tweet of the Day","tags":["general","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-21T00:00:00.000Z","id":"3ab7a800-aa26-59a5-80dd-c1edbe97712e","slug":"/blog/2010/09/21/javaone-day-one-in-pictures/","strippedHtml":"In case you haven’t been following the frequently updated @hudsonci Twitter stream. Here’s a collection of photos I’ve taken thus far.","title":"JavaOne: Day One in Pictures","tags":["general","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-21T00:00:00.000Z","id":"bf495998-7e2f-5b4e-9c15-78cff3d20455","slug":"/blog/2010/09/21/live-blog-john-smart-demos-advanced-hudson-usage/","strippedHtml":"Editor’s Note: This is a very rough set of notes from John Ferguson Smart’s presentation at JavaOne 2010. Unlike Kohsuke’s presentation, John spent a lot of time in demos which made live-blogging a bit difficult. image:https://farm5.static.flickr.com/4129/5012383102_cf258075a6.jpg\n\nJohn takes the stage at 9:30, this presentation is totally different from yesterday’s presentation from Kohsuke\n\nTaking Hudson a little further, beyond just scheduling a build job.\n\nWho is not using Hudson, less than 10% raise hands.\n\nFocusing on the more technical/nitty-gritty things with Hudson. Looking at:\n\nCI Basics\n\nNotification strategies\n\nQuality metrics\n\nBuild promotions\n\nAutomated deployment\nWho knows what build promotions? Who uses build promotions? Very few in the audience use build promotions.\n\nWho uses Hudson for automated deployment, a handful raise their hands. Plenty of Tomcat and JBOSS users automating deployment. John going to use Tomcat for the automated deployment demo in this presentation.\n\nJohn mentions he’s authoring the \"Continuous Integration with Hudson\" book, which will be available for download as it comes out.\n\nLet’s talk about Continuous Integration! Summing up what CI is in three words: feedback, visibility and delivery. CI is about snappy feedback. You want feedback in minutes.\n\nVisibility should be associated with continuous integration, getting everybody in the product life cycle into the loop with continuous integration (product people, QA, developers, etc).\n\nWhat makes Hudson so great? (according to John)\n\nEasy to use\n\nPlenty of plugins/the ecosystem around Hudson for extending/integrating Hudson\n\nReporting/coverage features\n\nDistributed builds\n\nFirst demo, the Hudson dashboard (starring the Nested View plugin). Starting with a basic dashboard filled with some unstable and stable builds. Cloudy builds thanks to Cobertura coverage grading.\n\nUsing the Nested View plugin to group views to make the dashboard more useflu for a ton of jobs.\n\nCovering build radiators, not enough of the audience uses radiators. John advocates commandeering big monitors for radiators as part of your \"notification strategy\"\n\nCovering the basic version control integration, John highly recommneds using a \"Repository Browser\". \"The point is, you want one\" John starts improvising with making some changes, pops over to Eclipse and refactors some code, commits and kicks off a build. Navigates to the source changes for the newly broken build in \"Sventon\", his repository browser of choice which was connected to the job\n\nJohn shows the job using Maven integration and deploying artifacts to the Maven repository he’s set up on his local machine.\n\nHudson will automatically keep track of jar files/war files, so enable the \"Discard Old Builds\" checkbox to prevent Hudson from eating all kinds of disk space. Useful to only discard the artifacts for the last X builds instead of the test results/code coverage.\n\nDesktop build notifiers are quite useful, email can tend to get clutter/lost in the mess with everything else coming into your inbox.\n\nTest results integration\n\nGoing into the test results dashboard per-build and the test-result and build time trends for a specific job.\n\nWhy is the build time trend useful? If the build suddenly takes a huge amount of time to run, you’ve likely got performance issues that need fixing.\n\nPublishing HTML reports\n\nStarring the HTML Publisher plugin! Using the plugin to publish HTML reports generated from easyb for publishing acceptance test results for more wide-spread consumption.\n\nBouncing from HTML reports to integrating with Sonar for code quality metrics\n\nBuild Promotion\n\nStarring the Promoted Builds plugin! Covering some similar concepts to Kohsuke’s talk yesterday but literally going into the Hudson configuration and setting it up.\n\nTime is running out, John’s flipping back and forth between the M2 release plugin and his automatic deployment to his local Tomcat environment.\n\nQ&A\n\"Can Hudson be used for other environments\". Yes! Supports a number of build plugins, MSBuild, NAnt, CMake, in addition to the freestyle build. \"Maven 3 support\" Sonatype is apparently working on an integrated version of Hudson with Maven 3, Hudson core planning support \"eventually.\"","title":"Live Blog: John Smart demos advanced Hudson usage","tags":["general","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-21T00:00:00.000Z","id":"9281e053-66ad-5615-89b5-7ae4aaab3f2c","slug":"/blog/2010/09/21/video-kohsuke-talks-hudson-on-otn/","strippedHtml":"For the uninitiated, \"OTN\" is short for the \"Oracle Technology Network\" where speakers and other persons of interest sit in front of cameras and their words are streamed live to the internets.\n\nAfter his session yesterday, Kohsuke hustled over to OTN headquarters, which look suspiciously like a tent in the middle of Mason St., and gave the following interview/chat.","title":"Video: Kohsuke talks Hudson on OTN","tags":["general","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-09-22T00:00:00.000Z","id":"22fabf35-8e3f-52e8-a2c1-38d84013d85a","slug":"/blog/2010/09/22/javaone-day-two-in-pictures/","strippedHtml":"On the off chance you’ve not seen some of the photos posted to the @hudsonci Twitter stream, here’s some of the photos from day two of JavaOne.","title":"JavaOne: Day Two in Pictures","tags":["general","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-10-21T00:00:00.000Z","id":"d6bfdd2f-2091-5e76-b392-af86d9ff1a5e","slug":"/blog/2010/10/21/hudson-user-meet-up-in-jerusalem/","strippedHtml":"+\nIn tradition of taking advantages of my travel, https://www.tikalk.com/[Tikal], https://web.archive.org/web/20171202185204/https://exlibris.co.il/[ExLibris], and https://infradna.com/[InfraDNA] hosted a Hudson users meetup in Jerusalem yesterday. +\n +\n\n+\nimage:https://web.archive.org/web/20150327193330if_/http://www.gate1travel.com/israel-travel/Images/photos/JerusalemNight.jpg[image] +\n\n+\n+\n\n+\nThere were 10+ people from Jerusalem and Tel Aviv who came over, which was great given the lack of upfront advertisement (my fault.) I did a short presentation about the current state of the Hudson project and where we are focusing efforts on. Then we had a very energetic Q&A sessions that lasted like 3 hours. +\n +\n\n+\nimage:https://hudson-labs.org/sites/default/files/images/DSC00105.preview.JPG[image,width=400] +\n\n+\n+\n\n+\nPeople from Tikal told me that they deploy and manage a lot of Hudson instances, so their feedbacks in the workflow/choreography/orchestration related features were very useful. And as usual, people have some positively fascinating crazy use cases — One of the participants was from a semiconductor company that builds GPU, and he said he tests their graphics cards with Hudson, which involves multiple reboots of a computer, installing software, and making sure the card doesn't produce unwanted visual artifacts! +\n +\n\n+\nAfter the discussion, we went out for a nice dinner in a restraunt inside one of the old buildings (one of the many things Jerusalem is good at!), and by the time I got back to the hotel it was 11pm. You can see https://www.tikalk.com/alm/hudson-israeli-users-group-meetup[Ittay's take on this meetup here]. +\n +\n\n+\nimage:https://hudson-labs.org/sites/default/files/images/IMG_0199.JPG[image,height=400] +\n\n+\n+\n\n+\nOne of my concerns before starting this world-wide spontaneous Hudson users meetups was if enough people show up, but I'm starting to feel comfortable now that I've done several. Hudson appears to be entrenched everywhere, and people are interested in finding out their neighbors who are using them. So stay tuned for future Hudson meetups around the world — it might be in your city!","title":"Hudson User Meet-up in Jerusalem","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-11-23T00:00:00.000Z","id":"c5e8fd3b-289a-5f11-885d-d34c2ca04dc7","slug":"/blog/2010/11/23/java-net-migration-status-update/","strippedHtml":"+\nMonday morning I came into work and discovered that I cannot commit to the Hudson Subversion repository. Initially I wasn't worried — I thought it was just another java.net outage that will resolve itself in a few hours — but a little research a bit later revealed that Hudson was locked down and being https://weblogs.java.net/blog/communitymanager/archive/2010/11/03/javanet-begins-migration-collabnet-kenai-infrastructure[migrated to new java.net infrastructure]. +\n +\n\n+\nI and the whole community was quite surprised by this, as we are supposed to be \"notified as soon as we assign a date for [our] projects to move.\" But by the time the developer community noticed, the project was already locked down, repository is read-only, and mailing lists can stop functioning any time. My immediate action was to contact the folks who are doing migration to get Hudson out of this cycle of the migration, but I was told that the ship has sailed and it was too late. +\n +\n\n+\nEven worse, there's no ETA — it'll definitely take a week, but since this is a Thanksgiving weekend, it can take longer, Oracle said. +\n +\n\n+\nI find this situation plain unacceptable, and https://java.net/projects/jersey/lists/dev/archive/2010-11/message/3[e-mails from the earlier migration effort] made me doubt if the new infrastructure is any better. I also had a pleasure of working closely with CollabNet folks over the past years and I was also involved in some earlier conversation and experiments about the new java.net infrastructure, and when it comes to performance and monitoring, CollabNet folks really knew what they are doing. So I had multiple reasons to worry if the new infrastructure can handle the load of java.net, which the old CollabNet-hosted one couldn't handle. +\n +\n\n+\nBut fortunately, since the general java.net migration has been announced, we've https://hudson.361315.n4.nabble.com/Mailing-list-change-proposal-td3047548.html[discussed] the migration of some of the project infrastructure. So we've accelerated the plan and implemented it, so as not to lose the critical project infrastructure services. +\n +\n +\n\nMailing Lists\n\n+\n\n+\nHudson mailing lists are moved to Google Groups. See https://hudson-labs.org/content/mailing-lists[more details here] and https://wiki.jenkins.io/display/JENKINS/Mailing%20List[here]. The new mailing lists provide a real search capability, decent UI for archives, and it makes it easier for people with multiple e-mail addresses to post from multiple addresses and receive just one copy. The stability of the service is also much better. +\n +\n\nSource code\n\n+\n\n+\nHudson core source code has been long synced to GitHub. We've been getting several contributions through that already, and people have been asking https://hudson.361315.n4.nabble.com/On-the-future-of-Hudson-hosting-and-infrastructure-td393278i20.html[for] https://hudson.361315.n4.nabble.com/Git-repository-for-Hudson-td394409.html#a394412[Git] https://hudson.361315.n4.nabble.com/hudson-plugins-git-repository-td1477941.html[migration] https://hudson.361315.n4.nabble.com/Hudson-on-github-td2252960.html[for] https://hudson.361315.n4.nabble.com/Expose-the-Hudson-SVN-as-a-GIT-repository-td391333.html[long] https://hudson.361315.n4.nabble.com/version-control-for-hudson-source-bidirectional-git-lt-gt-svn-td978706.html[time] anyway. So going forward I'll be committing to and producing releases from https://github.com/hudson/hudson[the Hudson repository on GitHub] at `+https://kohsuke@github.com/hudson/hudson.git+`. +\n +\n\n+\nThe new Git-based repository would be far snappier to work with, and it'll make it easier for people to maintain private changes and contribute changes back. There's also a work in progress to set up Gerrit to streamline the patch review process to the core. So I think this further reduces the barrier of entry to the Hudson project and accelerate the progress. +\n +\n\n+\nThe migration of Hudson plugin repositories still needs to be discussed, so stay tuned for the updates in https://groups.google.com/group/hudson-dev[the dev list] today or tomorrow. I've developed a bulk import program whose output can be seen https://github.com/HudsonLabs[here], so I'm going to propose this as the migration strategy. +\n +\n +\n\nConclusions\n\n+\n\n+\nMy apologies that these changes had to happen quickly — I'm just as frustrated as you are, but given the circumstances, I think this is the best course of action. Hopefully everything will be in place within a few days. And in the mean time, thanks for your patience. +","title":"Java.net migration status update","tags":["infrastructure","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-11-23T00:00:00.000Z","id":"3f0eefca-2731-5b8f-bd42-5ab978ea40ec","slug":"/blog/2010/11/23/new-hudson-mailing-lists/","strippedHtml":"As Kohsuke mentioned in this post, the Java.net migration has caught just about everybody off-guard in the Hudson community.\n\nThe tools we use hosted by Java.net are essentially locked from us until further notice (no ETA on the migration) which is, as you might imagine frustrating both for the core developers but hundreds of plugin developers that make Hudson the best damned CI server on the planet.\n\nFor source code we’re working on getting something in place for contributions on GitHub thanks to some assistance from the GitHub team.\n\nFor mailing lists we’ve gone ahead and dumped Java.net mailing lists in favor of a collection of Google Groups:\n\nhudson-dev\n\nhudson-users\n\nhudson-commits\n\nhudson-issues\n\nContrary to popular belief, you do not need a Google account to subscribe to these lists, else we wouldn’t have chosen Google Groups. All you need to do is send an email to \" hudson-users+subscribe@googlegroups.com\" and you’ll receive a confirmation email from the mailing list server shortly.\n\nSince our issues.hudson-ci.org isn’t actually hosted on Java.net, but rather on a machine provided by Oracle, they should continue to function as per usual. The login for the systems is somewhat tied to Java.net so I am honestly not sure how stable they will be this week.\n\nI apologize sincerely for the confusion and frustration, you can trust that we’re likely ten-times more frustrated with this situation right now.\n---","title":"New Hudson Mailing Lists!","tags":["general","mailing list","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-11-30T00:00:00.000Z","id":"95f6f2f6-eaf9-519c-8747-f4e92882d469","slug":"/blog/2010/11/30/whos-driving-this-thing/","strippedHtml":"There’s been a lot of discussion on the new mailing lists as of late regarding some of the infrastructure and ownership of the Hudson project. In case you haven’t been following along at home, I’ll try to catch you up as impartially as possible.\n\nThe Facts\n\n2009.06.02 : After substantial problems with Java.net infrastructure, the\ndev community discusses new infrastructure\noptions,\nincluding SourceForge, Google Code, Kenai, Berlios, GitHub, etc. Instead of\nmoving the entire project, some key components such as the\nissues.hudson-ci.org are moved off of\nJava.net. Discussions about moving source code off of Java.net and onto other hosts like\nGitHub come up almost every four months on the mailing lists, typically\ncoinciding with serious Java.net downtime or reliability issues..\n\n2010.11.01 : A discussion occurs on the developers mailing list about\nadding Winston Prakash, the Oracle engineer re-assigned to replace Kohsuke Kawaguchi (Hudson\nfounder/lead developer), as a co-owner to the Java.net project. Winston\nmentions that his question was driven by Oracle management who felt he should\n\"co-own the project.\" After a round of discussion, it’s decided by the devs\nlist that it’s acceptable and grants Winston co-ownership of the project as a\nsign of good faith from the community towards Oracle.\n\n2010.11.17 : Andrew Bayer, core contributor\nand maintainer of numerous plugins emails the users and devs list with a\nproposal to move the mailing lists off of Java.net which has had notorious\nreliability issues within the Java ecosystem and was scheduled for a series of\ndowntimes and migrations over the coming weeks. Google Groups is selected as the\nmost reasonable by the community.\n\n2010.11.19 : Hudson project is lumped into the same Java.net migration bucket as Glassfish. Emails are sent to project owners, the users and the developers list. The mail to users and developers never arrives due to the sender not being subscribed. Both project owners (Kohsuke, Winston) miss the message, leaving the Hudson community in the dark regarding the pending migration.\n\n2010.11.22 : Shortly after midnight, Jacob Robertson reports that his\nSVN credentials no longer work, Kohsuke informs the developers list that the project is\nlocked due to the migration, SVN is inaccessible and mailing lists fail shortly after that. The Hudson Java.net project\nbegins its migration from the legacy infrastructure to the newer\nJava.net infrastructure (formerly known as \"Kenai\"). A group of core Hudson\ncommunity members accelerate the move to Google Groups, pushing out\nannouncements via this\nblog and\ntwitter hoping to keep as many members in the\nloop as possible.\n\n2010.11.23 : Frustrated by the locking down of Hudson’s source code,\nwhich sees between 3-8 commits to \"core\" a day, not counting the 300+\nplugins, Kohsuke proposes moving to\nGitHub\non the new developers mailing list. The general consensus amongst the plugin\nand core developers was to go forward with moving to GitHub, no major\nobjections were raised by the developer community.\n\n2010.11.27 : After Thanksgiving, Andrew Bayer submits the \" formal\nproposal\"\nfor migrating over to GitHub, Sets a deadline of the following tuesday\n(2010.11.30) for raising any major objections before \"flipping the switch.\"\n\nThe Monday morning prior to the planned switchover to GitHub, Oracle Senior VP\nof Tools and Middleware Ted\nFarrell sent a\nmessage to the users list expressing concerns he had regarding the migration of\nthe Hudson codebase from Java.net to GitHub:\n\nOracle’s goal is to grow the community and make hudson stronger. You all might not be aware of this, but the actual hudson user base is very large. Much bigger than what you see on the mailing lists or in the forums. The unfortunate part of that is how many of these users do not contribute to the core, and do not participate in these discussions. They want to do that, but don’t feel like they can be heard. We want them to be heard. We need to make the hudson community a place that will welcome all the hudson users and encourage its growth and longevity. We will be announcing some changes in the upcoming weeks that we believe will foster that.\n\nFor now, however, we are going to stay on the java.net\ninfrastructure.  We believe it is important for hudson to stay\nconnected with the rest of the the java community, as well as take\nadvantage of some of the cool changes we will have coming to\njava.net.  Moving to GIT can be done while staying on java.net.  It is\nnot a requirement to move to github.\n\n…​\n\nBecause it is open source, we can’t stop anybody from forking it.  We\ndo however own the trademark to the name so you cannot use the name\noutside of the core community.  We acquired that as part of Sun.  We\nhope that everyone working on hudson today will do as they claim to\nwant, and work with us to make hudson stronger.\n\n(Ted’s message was rather long, you can read the whole\npost here)\n\nAs one might expect, Ted’s response to the thread was received with\nmixed responses ranging from general confusion to obvious frustration.\n\nLong time contributor to Hudson’s Git plugin, Nigel Magnay tried to clarify the benefits of migrating to GitHub instead of using Git on the \"new\" Java.net as succinctly as possible:\n\nJust having git support != git support on github. They work full time on providing the best community development tools; I doubt kenai could even catch up, let alone surpass what they’re doing.\n\n…​\n\nI’m confused.\n\nWhat things are you saying you will not let the Hudson developer community\ndo?\n\nI.E: Are you saying that, as the holders of the Hudson 'name', you are\nprohibiting the developer community from choosing (for ourselves) to migrate\nthe infrastructure (bug tracking / wiki)? The repositories ?\n\nSo far the response from the developers has been pretty strongly in favour\nof the migration to google groups for mail, to github for code repositories\nand collaboration, and to a self-hosted site for bug tracking and\ninformation.\n\nTed’s response to Nigel contained one of the most important nugget of\ninformation for the whole discussion nestled in the middle of the message :\n\nNigel, what I am saying is that I believe the _final decision of what to do w.r.t. infrastructure belongs to Oracle and that decision should be made according to the will of the community as it makes sense_\n\nThe part where I editorialize\n\nI readily admit, there is a lot of information to take in here, for clarification there are two distinct \"communities\" involved in Hudson:\n\ndevelopers : the hundreds of developers actively communicating on the\ndevelopers list and\ncontributing to the 300+ plugins\n\nusers : tens of thousands of individuals and companies using Hudson\neither as a straight.war file, or using the native packages provided by\nthe community\n\nThe fundamental issue here is that the developers want to make a change in\nhow they contribute to Hudson, and have made their voices heard to that end.\nFrom the users' perspective, such a change would have literally zero impact\non them, which makes Oracle’s conflation of the two sides of Hudson\nparticularly frustrating.\n\nPart of the impasse between Oracle management and the developer community lies\nin an inherent meritocracy in any large open source project, whether it be the\nLinux kernel, the Python language and runtime, or the PostgreSQL database\nserver, those that contribute carry more weight within the community\nbecause they are actively pushing things forward. On top of that, Oracle\ncontinues to cite a \"larger community\" that’s apparently larger than those\nactive committing to Hudson on a daily or weekly basis, without naming names or\nciting specific contributions.\n\nTed, and in turn, Oracle’s approach to the Hudson community seems to stem from\na systematic misunderstanding of how most (if not all) major open source\nprojects operate. Mentiong closed-door meetings between Sonatype and Oracle\nregarding \"how to make Hudson better\" do nothing to aid many developers'\nconcerns about Oracle’s commitment to Hudson as an open source project or a\ncommunity.\n\nIn my humble opinion, we are being told one thing while Oracle’s actions speak\nto another. Insisting that Hudson development remain on Java.net, after the\ndevelopment community committed to GitHub, contradicts the words promising to\nwork with the Hudson community and to help facilitate its growth. Asserting\nthat Oracle isn’t trying to exert unwelcome control over the project, while\ndoing exactly that.\n\nPersonally, I do want Oracle to continue to be involved, along with CloudBees,\nSonatype and many other companies that contribute to the ever-growing Hudson\necosystem. The involvement of a plethora of different companies only helps\nemphasize the importance of Hudson to the developer community and underline the\nvalue of Hudson as a community owned and operated project.\n\nDecember will be an interesting month, stay tuned.","title":"Who's driving this thing?","tags":["general","core","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-12-01T00:00:00.000Z","id":"1bf50073-e7ad-5e25-97a0-1aba40f622c8","slug":"/blog/2010/12/01/a-brief-update/","strippedHtml":"Let me be the first to say thank you all for your overwhelming support for\nHudson and the work we’ve been doing. The Hudson community in general has\nalways been incredibly supportive and friendly, but the outpouring of support from\nfriends and users who’ve not previously spoken up has been awe inspiring.\n\nThat said, let’s get down to business. As I covered\nyesterday there is some\nbubbling frustration within the developer community regarding some project\ninfrastructure decisions and Oracle’s reactions to them. If you can’t spare the\ntime to read that novel of a blog post, the extremely shortened version is: devs want to\nmove codebase to GitHub, Oracle disagrees and claims to have final say (hijinks\nensue).\n\nWhile there is still a lot unresolved, several of the core contributors are\ndebating and weighing our options for moving forward in a way that best\nsuits Hudson both as a project and community. In the next couple days, Kohsuke\nor Andrew will be proposing a course of action for the community after some of\nthe options have been fully vetted. Please bear in mind that Hudson is a very big project with some fairly unique needs. We have hundreds of contributors committing either to core or the plugins, we release core once a week with plugin releases occurring to the tune of 20-40 updates a week. We’ve been pinging folks who work with various foundations and major open source projects to make sure we’re covering all our bases to make sure distractions like this don’t come up again for the foreseeable future.\n\nDue to issues with MySQL, Java, OpenOffice/LibreOffice, there is clearly a lot of anti-Oracle emotion out there right now, but I want\nto make sure that it’s clear that this is not about \"Us versus Oracle.\"\n\nOur goal isn’t to \"stick it to the man,\" that doesn’t help make Hudson any better.\n\nOur goal is to foster the kind of community that we all want to\nparticipate in, and to build and improve the best continuous integration\nserver available.\n\nStay tuned :)\n---","title":"A brief update","tags":["general","core","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2010-12-05T00:00:00.000Z","id":"7ffb61d7-07eb-594e-9fb0-5df0fdc4f7ce","slug":"/blog/2010/12/05/weekend-update-with-andrew-bayer/","strippedHtml":"[ Ed. note Andrew was not involved in selecting this post’s title - rtyler ]\n\nI wanted to give the Hudson community a quick update on the current status of the issues Tyler has discussed in the earlier posts here.\n\nFriday afternoon, Kohsuke, CloudBees CEO Sacha Labourey and myself jumped on a conference call with Hudson contributor/Oracle employee Winston Prakash, Oracle manager Denis Tyrell and of course Ted Farrell.\n\nWe discussed a wide range of issues relating to the Hudson project, such as governance, the rights to the name Hudson, and the infrastructure hosting the Hudson project. While we didn’t agree on resolutions to all issues, I feel real progress was made towards a framework that provides what the Hudson community needs while also preventing the sort of conflicts we’ve seen the last week or two.\n\nMore work has to be done - we’ll be talking again next week, and I’m hoping we can reach agreement on the contentious issues by the end of the week.\n\nThanks for your patience.","title":"Weekend Update with Andrew Bayer","tags":["general","core","meta","news","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2011-01-08T00:00:00.000Z","id":"d0d58bd3-e6a3-5580-8a1e-b6ac8bd2e732","slug":"/blog/2011/01/08/installing-plugins-has-always-been-easy-now-its-fast-too/","strippedHtml":"As one of the \"men behind the scenes\" of the Hudson project, a lot of my contributions tend to be in writing articles or handling infrastructure, anything to ensure folks like Kohsuke can continue to make Hudson great without being distracted by inane system administration tasks. This past week, one of my long-running infrastructure projects has finally \"gone live,\" making downloads of plugins and packages faster than ever!\n\nSome number of months ago I became frustrated with the download speeds reported by our international users, while the majority of Hudson’s infrastructure is all colocated inside of the United States, there is a huge number of Hudson users and developers who are both in Europe and Asia.\n\nAfter discussing things with some of the folks that run download.opensuse.org, a MirrorBrain powered redirector, I set out to build something similar. A mirroring network which could be easily managed and help direct users' downloads to the geographically closest and fastest mirror available.\n\nWhere are we mirrored?\n\nCurrently we have mirrors in a few locations within the United States, and one overseas:\n\nSouthwest U.S. (Utah) - Thanks to XMission\n\nMidwest U.S. (Chicago) - Thanks to the OSUOSL\n\nNortheast U.S. (New York City) - Thanks to the OSUOSL\n\nGermany - Thanks to aragost Trifork ag\n\nUsing the mirrors\n\nIf you’ve updated or installed plugins from within Hudson lately, guess what! You’re already using mirrors! In fact, since we flipped the switch on January 7th, over 800 plugins and 600 hudson.war updates have been downloaded from the mirroring network!\nIf you’d like to download directly from the mirrors, you can browse on over to mirrors.hudson-labs.org, which will redirect your request for specific files to the appropriate mirror based on your IP address. It’s just that easy!\n\nWe are currently working with more providers to add additional mirrors, hopefully we’ll have an Asian mirror online within the next two weeks and if we’re lucky, we’ll find some more European mirrors too.\n\nI would like to thank the immensely helpful and supportive engineers over at the OSUOSL for offering gratis tech support, suggestions, and bandwidth to serve as our primary mirror.","title":"Installing plugins has always been easy, now it's fast too!","tags":["general","core","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-01-11T00:00:00.000Z","id":"2adc0051-1bf2-52bc-ad26-cb71b1ca1182","slug":"/blog/2011/01/11/hudsons-future/","strippedHtml":"First, my apologies for the lack of updates on the Hudson/Oracle situation for\nthe last few weeks. While talks have been ongoing, the holidays have slowed\nthings down, and we didn’t want to send out information that would later turn\nout not to be true. We’ve been waiting for the talks to reach a resolution -\nand I believe they now have.\n\nSince the java.net migration problems, Oracle and representatives from the\nHudson community have been involved in talks on the future of the project in a\nnumber of areas. The Hudson representatives have been myself, Kohsuke\nKawaguchi, and Sacha Labourey (CEO of CloudBees and Kohsuke’s boss), who was\nbrought in to help provide experience with discussions on a corporate/executive\nlevel which neither Kohsuke nor I have, with Alan Harder and R. Tyler Croy\nadvising on the side.\n\nThese talks have in many ways been fruitful - we came to working agreements\nwith Oracle on the project infrastructure (such as mailing lists and SCM\nrepository location), code review policy for Hudson core, and perhaps most\nsignificantly, a governance structure for the project going forward. Some\nissues are not yet entirely resolved, such as questions on restrictions on\nthird party dependency licenses. But one issue, which we feel is the most\nsignificant issue of all, one for which we now believe no resolution is\npossible: the rights to the name Hudson.\n\nOracle has told us that they have trademark applications filed in both the EU\nand US for Hudson, based on Hudson’s creation by Kohsuke while working at Sun.\nThe problem is that this trademark ownership gives Oracle the ability to revoke\nthe Hudson project’s right to call itself Hudson at any time, and while Oracle\nhas made an attempt to offer some guarantees (most notably, that binary\nreleases of Hudson, once they’ve been released with the name Hudson attached,\nwill always retain the right to the name), they are not offering any binding\nguarantee that the Hudson project will be able to retain its use of the name in\nperpetuity.\n\nTherefore, to continue using the name Hudson means ceding some of the project’s\nindependence to Oracle - if the project and its governance board opted to go in\na direction Oracle disapproved of, Oracle would be able to take away the naming\nrights. Or, in a less dramatic scenario, Oracle could insist on certain changes\nto the code, infrastructure decisions, process, etc, regardless of opposition\nfrom the Hudson development community, in order to retain the rights to the\nname.\n\nIn short, we’d be living under a sword of Damocles, regardless of the goodwill\nof the individuals we’ve been negotiating with at Oracle - Hudson as a project\nwould be beholden to Oracle’s whims for its continued use of its own name, and\nwe believe that’s not viable.\nAs I see it, the only viable option facing the project now is to rename it, in\norder to free it from the burden of Oracle’s ownership of its name. This is not\na first choice, not by a long shot, but I don’t see any other choice available\nto us that would preserve the integrity of the project going forward. Oracle\nwill be presenting their proposal for the project continuing under their\numbrella - I encourage you to read it when it becomes available and weigh it\naccordingly. I’ll just focus on what Kohsuke, other prominent Hudson community\nmembers and I have endorsed.\n\nThe Proposal\n\nFirst, we rename the project - the choice for a new name is Jenkins, which we\nthink evokes the same sort of English butler feel as Hudson. We’ve already\nregistered domains, Twitter users, etc for the new name, and have done our best\nto verify that there are no existing trademarks which would conflict with it.\nKohsuke will be registering the trademark for Jenkins in his name, with the\nintent of transferring ownership of the trademark to the umbrella of the\nSoftware Freedom Conservancy once the Jenkins project has been admitted to it\n(which, I should add, is very much our plan, hopefully in their next round of\nnew projects in a few months - we’ve already had preliminary contacts with\nSFC). We still invite Oracle to remain involved with the project, on equal\nterms with all other contributors, and hope they’ll take us up on this\ninvitation.\n\nSecond, out of respect for Oracle’s trademark claim on Hudson, we will move our\ninfrastructure off of Oracle-owned and hosted servers, and we will rename\nexisting independent components of the infrastructure to no longer use \"Hudson\"\n\ni.e., mailing lists, Github repos, etc. This would be a gradual process,\nobviously.\n\nThird, we will put in place an interim governance board for the project,\nconsisting of three members - myself, Kohsuke and, if Oracle elects to remain\ninvolved, Winston Prakash, the Oracle engineer working on Hudson. The interim\nboard members will serve for the next 3-6 months, until the governance\nstructure can be nailed down securely enough to hold elections for the board\nmembers.\n\nObviously, such a move could not be undertaken without the agreement and\nsupport of the Hudson community. We believe this proposal is the best choice\nfor the project in the situation it’s currently in, but we aren’t closing off\ndiscussion, questions, etc, and we encourage your feedback and comments. If\nthere’s anything you need clarified, please ask and we’ll do our best to\nanswer.\n\nOnce Oracle’s proposal is available later this week (hopefully Wednesday,\npossibly Thursday, from what I’ve been told), which I strongly advise you all to\nread and consider, we’ll be putting up a poll to determine the position of the\ncommunity. Once that vote is done, assuming the consensus is to rename, we’ll\nput the mechanisms in motion and switch over as fast we can.\n\nThere may be some confusion as to whether we’re proposing to fork Hudson, or\nrename the existing project. I firmly believe we are proposing the latter - for\nme, the project’s key component is Kohsuke himself. If the community decides to\nsupport renaming the project to Jenkins, and Oracle chooses to continue\ndevelopment themselves under the name Hudson, they are, obviously, entirely\nwelcome to do so. But with Kohsuke working on Jenkins, that’s the true home and\nthe future of the project for me, regardless of the name.","title":"Hudson's future","tags":["general","core","meta","news","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2011-01-29T00:00:00.000Z","id":"8da20f6b-1b13-5639-8177-af6e15f0e061","slug":"/blog/2011/01/29/jenkins/","strippedHtml":"(This was sent as an email to the Hudson dev and users mailing lists after voting concluded, but I thought it’d be good to post it here as well.)\n\nThe vote is closed, and the results are in. More than half of the total votes were from ineligible voters, but the result would have been the same either way. The final result of all eligible votes is as follows: 214 votes to rename, and 14 for the status quo. You can see the individual votes hudson-jenkins-vote.\nSo what does this mean now? Well, it means Jenkins lives. We’ve registered jenkins-ci.org, though it’s empty at the moment. In the coming days, we will be renaming the existing Google Groups to jenkins-*@googlegroups.com, renaming the Twitter account from @hudsonci to @jenkinsci, and renaming our organization at Github from hudson to jenkinsci. I wanted to make sure everyone had notice ahead of time that this was happening, so that no one gets surprised by changes to their incoming mail, etc. As said before, the initial, interim governance board will consist of me, Kohsuke and, if he and Oracle are willing, Winston. If Winston is unwilling or unable to continue in that role with Jenkins, we will select a replacement interim member. The interim board will work on the details of a more permanent governance process going forward. Discussions on the infrastructure changes (including things like the Maven groupId/artifactIds, etc) will be in public, on these lists. We’re working to get the JIRA and wiki contents migrated over to the Jenkins site, and hope to work with Oracle to get that done in the next couple days.\n\nPutting aside logistics, I want to personally thank everyone for voting, and especially thank everyone who voted for renaming for supporting the Jenkins project and its future. Jenkins is not Oracle’s project, nor CloudBee’s project, nor my project, nor Kohsuke’s project - it’s the community’s project, and it’s going to thrive.","title":"Jenkins!","tags":["general","core","mailing list","meta","news","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2011-02-04T00:00:00.000Z","id":"b3d73024-446b-5f75-a852-981d6ef968d5","slug":"/blog/2011/02/04/governance-meeting-today/","strippedHtml":"Amongst all the work this week with setting up project infrastructure, the first release of Jenkins and a flood of developer activity on GitHub, the interim governance board has decided to hold periodic virtual meetings.\n\nThe first meeting will be held today at 3pm PST (23:00 UTC) in the #jenkins channel on IRC ( more details here).\n\nIn Kohsuke’s post to the mailing list, he further explained the goals of such meetings:\n\nWe can use it to report/discuss various issues of the project (not bugs in code, but more project level stuff.) I also plan to report the infrastructure work that’s done thus far.\n\nWe’d like to hear from you, and the point is to engage the broader community, so please join us.\n\nThis is a new thing, so it’s not like we’ve figured this all out, but let’s see how it goes.\n\nIf you don’t have an IRC client, you can use the Freenode webchat client to join in, hope to see you there!","title":"Governance Meeting Today","tags":["general","core","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-02-04T00:00:00.000Z","id":"8dc709a8-2fd4-557e-b0fb-05621d884c64","slug":"/blog/2011/02/04/the-first-24-hours-in-downloads/","strippedHtml":"As I had mentioned in a previous post back when Jenkins was called something else, who can remember what anymore, I spent a lot of time working on a mirroring network. With our departure from any and all Oracle infrastructure, this mirroring network has now become our sole distribution mechanism for pushing out all releases and all plugins, in short, lots and lots of bits.\n\nJust how much data are we now distributing through the Jenkins mirror network?\n\nOver 52GB in 24 hours\n\nHere’s the following in terms of a loose breakdown of the number of files served over the past day:\n\n788.war\n\n447.deb\n\n290.rpm\n\n1759.hpi (plugins)\n\nWe’re off to a great start! I’d like to extend my thanks again to the OSUOSL and XMission for their help getting the Jenkins mirrors functional as soon as possible","title":"The first 24 hours in downloads","tags":["infrastructure","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-02-05T00:00:00.000Z","id":"4a1b7157-f906-548c-9cb0-048f311ab680","slug":"/blog/2011/02/05/first-governance-meeting-recap/","strippedHtml":"As mentioned on Friday the Jenkins project held it’s first meeting on the IRC channel at the request of the interim board. In the interest of transparency, we recorded meeting minutes and tried to involve as many folks as possible.\n\nTopics Covered\n\nProposal/Discussion of Jenkins project governance structure\n\nWhat to do about the logo\n\nRegistering the Jenkins trademark\n\nMoving Jenkins under an umbrella organization\n\nWhat shall we do with a new CLA?\n\nLogistics for the next project meeting\n\nIf you’re interested, you can read through the full logs or just look over the high-level meeting minutes.\n\nThis first meeting went a bit long due to the massive amount of items needing to be discussed, so the project has scheduled another meeting for Wednesday Feb 9, 11am PST (19:00 UTC); mark your calendars!\n\nThanks to everybody who participated, we’ll see you again next time.","title":"First Governance Meeting Recap","tags":["general","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-02-14T00:00:00.000Z","id":"bd2321b8-711b-5652-b672-44ad91bc6424","slug":"/blog/2011/02/14/upcoming-jenkins-events-in-tokyo/","strippedHtml":"+\nimage:https://farm4.static.flickr.com/3280/2964930888_6a91b9ddda_m.jpg[image] +\n\n+\n+\n\n+\nI'll be visiting Tokyo again for the week of 2/21 for a number of events. +\n +\n\nTokyo Jenkins User Meetup\n\n+\n\n+\nThe Japanese Jenkins user community may not be as visible from outside but very strong. This is the 2nd meet up in Tokyo, and once again we maxed out the 80 people room capacity in just a few days (but you can https://kokucheese.com/event/index/6710/[still RSVP for the social event] after the meetup.) This meetup is focused on Java & Jenkins, so we have a number of speakers lined up to discuss hwo they use Jenkins in their Java projects. This will be the first user meetup event after the name has changed to Jenkins. +\n +\n +\n\nCloudBees Jenkins training in Tokyo\n\n+\n\n+\nI'll deliver this one-day training course, all about Jenkins from the setup to continuous deployment to code analysis. If you are interested, you can find https://www.cloudbees.com/training_ja.cb[more details about this]. +\n +\n +\n\nJapan Grails/Groovy User Group (JGGUG)\n\n+\n\n+\nJenkins internally use Groovy a lot in many places (as well as some of its peripheral tools depend on Groovy.) So I'll be speaking in the JGGUG meetup event, on behalf of the Jenkins project, and highlight those usages and how much we all love Groovy. Yes, I do. +\n +\n\n+\nAside from these public events, I have a few visits planned to various companies. If you are interested in having me over and look at your Jenkins, or want to discuss something, please let me know at kk at kohsuke dot org.","title":"Upcoming Jenkins events in Tokyo","tags":["general","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-03-03T00:00:00.000Z","id":"926494df-54e9-540e-8d37-ffcb912c1d4c","slug":"/blog/2011/03/03/updated-usage-stats-available/","strippedHtml":"Updated usage statistics are now available at https://jenkins-ci.org/census This data has been scrubbed of distinguishing information as much as possible, filtered for installations we’ve seen at least twice a month with at least one job set up, and split up into monthly JSON files. Starting with August, we only have data on installations of version 1.368 or later - before that, reports go to the old Oracle-owned server, and we aren’t able to retrieve them. So that’s why you’ll see a fairly hefty drop in install count, etc from July to August.\n\nI haven’t had a chance to do any analysis to speak of on the data. I intend to get the plugin usage spreadsheet updated n the next few days, but I wanted to make this data available to you all ASAP. If you come up with any interesting analysis or use of the data, please let us know!","title":"Updated Usage Stats Available!","tags":["general","core","meta","news","plugins","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2011-03-13T00:00:00.000Z","id":"8e9624ea-c26b-5ad5-a5d4-3668368eba52","slug":"/blog/2011/03/13/jenkins-hits-1-400/","strippedHtml":"+\nhttps://jenkins-ci.org/[Jenkins] is now at 1.400 (as of last Monday, yes, I know. But better late than never...). As with https://weblogs.java.net/blog/2009/04/22/hudson-hits-1300?force=752[1.300] and https://weblogs.java.net/blog/kohsuke/archive/2008/03/hudson_hits_120.html?force=824[1.200], this release doesn't particularly signify any substantial major release, but nonetheless it is a milestone for those of us who are involved in the project — I think repeating something 400 times is something one can be proud of. It's a bit like climbing a mountain. Left foot, right foot, left foot, right foot, ... and when you look up, voila! +\n +\n\n+\nIn 2 years since 1.300, which was April 2009, we've added a lot of features. We now have a CLI to manipulate the server, auto-installation of JDK/Ant/Maven to simplify cluster management, concurrent builds of the same job, community-contributed localizations to 20+ languages, boolean expression over the job/label assignment control, parallel initialization based on a dynamically built acyclic directed graph, console annotations to enrich the build output, far more extensible queue (that enabled a lot of plugins), Windows 7 / Vista support, improved controller/agent communication stability, Maven 3 support, and then all around performance improvements, in memory footprint, in startup time, and in page rendering speed. +\n +\n\n+\nAnd of course, we had to change the name of the project. That was a real distraction, but now that the divorce is over, things have been https://bobbickel.blogspot.com/2011/03/jenkins-vs-hudson-time-to-upgrade.html[moving well] for Jenkins. I guess any organization (including any sizable OSS project) is really more than sum of all individuals. If you take a store of Target and replace all its workers by those of nearby Staples, it'll probably not work out well. I think https://jenkins-ci.org/why[people understand that]. +\n +\n\n+\nAnd on the positive side, I do think we came out stronger. We are now running https://jenkins-ci.org/node/280[governance meetings on IRC], we now have https://jenkins-ci.org/content/jenkins[somewhat more formal governance structure]. The core development is actually accelarating with the help of https://github.com/jenkinsci/jenkins/graphs/impact[many new developers], such as Olivier Lamy, (scroll to the right), and https://twitter.com/#!/jenkins_release[plugin releases kept coming at amazing rate] — we are now at 350+ plugins, more than doubled since 1.300. +\n +\n\n+\nLooking at future, we are working on a number of new initiatives in the community, too. For example, Arnaud Héritier is working on revisiting https://issues.jenkins.io/[our JIRA project structure], Andrew Bayer is running a contest for new logo, Tyler is in process of getting additional hardwares at OSUOSL for the project. I'm also doing a lot of things, but for example, I'm going to write a proposal to start a stable patch releases of Jenkins that only consists of backported important bug fixes, in addition to the current weekly release model. Several large users maintain private branches of Jenkins, and so I think it makes a lot of sense for those folks to align their efforts around this release line. I'm also thinking that we could launch a community acceptance testing (CAT) effort around this, much like https://qa.netbeans.org/processes/cat/67/faqs.html[NetBeans] and https://glassfish.java.net/quality/portal/[GlassFish] have done it. I think the first stable release line would branch off from 1.400, so if anything that's another reason you should upgrade to 1.400. +\n +\n\n+\nWhen I reflect on the project, I'm surprised at just how much work there is to be done, after so much that has been achived. But I'm still excited at what we can do with this platform. I thank everyone for their continued patoronage of Jenkins, and I hope to see more of you in the mailing lists, in the chat rooms, and in the meet-up events. And here is https://en.wikipedia.org/wiki/Buzz_Lightyear[to infinity and beyond!] +\n +\n\n+\n(Cross-posted to https://kohsuke.org/2011/03/13/jenkins-hits-1-400/[Kohsuke's blog])","title":"Jenkins hits 1.400","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-03-21T00:00:00.000Z","id":"598cdaff-a8e7-5d08-a3d6-2a93f385d234","slug":"/blog/2011/03/21/the-polls-are-open-for-the-jenkins-logo-contest/","strippedHtml":"After a number of absolutely fantastic logo submissions from a number of designers, I’m extremely pleased to open the polls on the vote for the brand new Jenkins logo!\n\nThe thumbnails do not do any of these logos justice in my opinion, so I recommend opening each logo up in its own tab to get the full effect :)\n\nI plan to end voting March 28th at 12:01 UTC.\n\nThe Logos\n\nLogo #1\nLogo #2\nLogo #3\n\nLogo #4\nLogo #5\nLogo #6\n\nLogo #7\nLogo #8\nLogo #9\n\nLogo #10\nLogo #11\n\nThe Vote\n\nIf the iframe doesn’t properly load for you, you can open Loading...\" class=\"bare\">https://spreadsheets.google.com/viewform?formkey=dE9GNlpNbVEwa0VPZHl1TkJCaUI1Z2c6MQ Loading...","title":"The polls are open for the Jenkins Logo Contest!","tags":["general","feedback","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-03-23T00:00:00.000Z","id":"7fc989cd-4b10-584d-9e5c-be29ada3f03e","slug":"/blog/2011/03/23/windows-installers-are-now-available/","strippedHtml":"+\nGood portion of Java developers use Windows, so we tend to think the opposite is true, that a good portion of Windows folks use Java. But this is not true. +\n +\n\n+\nAs Jenkins gains traction among .NET developers, it's becoming increasingly clear that Java is very alien to them. They naturally have no idea of what a war file means, and often don't even have Java installed, and so it was _just not easy enough_ for them to start using Jenkins. +\n +\n\n+\nI'm happy to report that I've finally fixed this problem with the new Windows installer. It is primarily packaged as https://en.wikipedia.org/wiki/Windows_Installer[an MSI file] — a common format that seasoned Windows devs/admins are familiar with. It can, for example, be deployed remotely on a large number of servers via Active Directory remotely. Or you can just double-click it to install it interactively. It bundles JRE, so no separate Java installation is needed. +\n +\n\n+\nThe package also contains the bootstrap `+setup.exe+`, to install .NET 2.0 runtime if it's not installed yet. Between that and JRE, it got all the dependencies covered. I tested that by installing it on a fresh Windows XP install. +\n +\n\n+\nSo I hope this makes Jenkins more attractive to .NET and other developers who live and die by Windows.","title":"Windows installers are now available","tags":["general","releases","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-04-01T00:00:00.000Z","id":"4b5dfc43-f2e0-5a6d-8acf-a0fe9eaf1145","slug":"/blog/2011/04/01/san-francisco-jenkins-meetup-wednesday-april-13th/","strippedHtml":"We’re happy to announce that there’ll be a Jenkins meetup in San Francisco on Wed., Apr 13th, generously hosted by Engine Yard. The meetup will start at 6:30 - you can find more information here. Dr Nic Williams of Engine Yard will talk about their use of Jenkins with Ruby, and Kohsuke will give an update on the JRuby plugin development work he and cowboyd have been working on. If you’re interesting in giving a short talk on your usage of Jenkins, plugin work, or whatever, there should be time for an open mic. Hope to see you there!","title":"San Francisco Jenkins Meetup - Wednesday, April 13th","tags":["general","meetup","news","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2011-04-04T00:00:00.000Z","id":"7dcac8cf-0a71-5c64-ba7f-f66bbcf2b667","slug":"/blog/2011/04/04/the-final-two-run-off-vote-for-the-new-jenkins-logo/","strippedHtml":"A little over a week ago we opened the polls to the larger user-base to vote for the new and improved Jenkins logo. After receiving hundreds of votes, we are now ready to enter the final round of voting (click images to see larger versions in a new window).\n\nVoting will end April 9th at 23:59 UTC, so make sure to tell your friends, coworkers and bus drivers to get their votes in as soon as possible!\n\n+ Logo #1\">\n+ Logo #2\">\n\nThe Vote\n\nIf the iframe doesn’t properly load for you, you can open Loading...\" class=\"bare\">https://spreadsheets.google.com/viewform?formkey=dEl2T1gwdko1YXBxcktiTEJzUXZleUE6MQ Loading...\n\nIf you’re interested in the results for the first round, you can find them in this gist","title":"The final two: run-off vote for the new Jenkins logo","tags":["general","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-04-14T00:00:00.000Z","id":"83452a29-9888-5633-8c2f-855fba38f873","slug":"/blog/2011/04/14/jenkins-new-look/","strippedHtml":"As you might have noticed Jenkins finally has\na brand spankin' new logo! Over the past couple weeks we’ve run two series\nof votes, one for the initial 11 logo\nsubmissions\nand then a final, run-off election, for the two most popular\nchoices.\nI’d like to take this opportunity to thank everybody that submitted logos! It\nis incredibly flattering to have so many people passionate about the project\nand willing to spend the time creating new art for us. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/images/runoff_election_piechart.png\n\nAt the end of the votes, there was a clear winner though, everybody seems to\nreally love the submission by the folks over at The\nFrontSide which you can see adorning this very page.\n\nIf you’d like to download the SVG version of the logo, or the variants in different sizes, I’ve gone ahead and uploaded a tarball and all the variants to this directory, there is also a good color palette here ( obligatory PDF warning).\n\nOnce again, thank you to everybody that participated!","title":"Jenkins' New Look","tags":["general","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-05-04T00:00:00.000Z","id":"b21dd15f-4260-56c9-b4eb-4908a153c45a","slug":"/blog/2011/05/04/hamburg-hackathon-a-great-success/","strippedHtml":"+\nThanks to the kindness of https://www.bigpoint.net/[BigPoint GmbH] and Kutzi, we had the first Jenkins Hackathon in Europe, in a very large and airly conference room in their Hamburg campus, on a nice sunny Sunday of May 1st. About 10 people came, including the https://wiki.jenkins.io/display/JENKINS/Static+Code+Analysis+Plug-ins[static code analysis plugin] fame Ullrich Hafner, https://wiki.jenkins.io/display/JENKINS/Android+Emulator+Plugin[Androd emulator plugin] fame https://twitter.com/orrc[Christopher Orr], the https://wiki.jenkins.io/display/JENKINS/Instant+Messaging+Plugin[instant messenger plugin] (and others) fame https://twitter.com/#!/kutzi[Christoph Kutzinski]. Some of us came from pretty far away places like Munich, Bonn, and Netherland. There was a good mix of existing developers and new developers, too. +\n +\n\n+\nDuring the hackathon, new folks developed whopping three plugins — a security realm that connects to https://github.com/jenkinsci/kerberos-authenticator-plugin[Kerberos (password entering kind, not SSO)], https://github.com/jenkinsci/builton-column-plugin[a plugin that adds a list view column to show where the last build was done], and https://github.com/jenkinsci/extra-columns-plugin/[another plugin that attempts to collect small list view column implmentations]. German translations were improved, automated installation of Android SDKs are discussed and its implementation strategies explained. I've done my share of contribution by working on https://github.com/jenkinsci/jruby-xstream[XStream support for JRuby], which is one of the ground work necessary for JRuby-based Jenkins plugin development, and I also showed the prototype Groovy-based templating that can potentially supercede Jelly. There were additional exchange of tips and tricks, how you do this and that. +\n +\n\n+\nStrong coffee and engaged conversations kept me awake all day, although German keyboard layout (on top of usual IDE difference + Mac/PC difference) made it hard to code on other people's computers, but all in all it was a very productive hackathon. In fact, the best ever. We wrapped up around 7pm and headed to a seafood restaurant near Elbe river, stayed there until 11pm-ish. +\n +\n\n+\nThe next hackathon is planned in Paris toward the end of the month. I'm looking forward to another productive Hackathon, so if you are nearby, please https://www.meetup.com/jenkinsmeetup/events/17178842/[RSVP and join us]. +","title":"Hamburg hackathon a great success!","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-05-12T00:00:00.000Z","id":"a0c76b9b-3d19-504c-99d6-871e82deabe5","slug":"/blog/2011/05/12/ruby-plugins-hack-session-5-12-2011/","strippedHtml":"[ Editor’s Note: For the past few weeks Jenkins community member Charles Lowell has been working with Kohsuke on adding support for building plugins in Ruby. As part of this effort, Charles has been hosting weekly hack sessions via WebEx ]\n\nAs always, last night’s Ruby Plugins hack session was a pleasure. Below is a quick notation of what items were discussed and/or accomplished followed by next steps to be taken my those in attendance.\n\nDiscussion/Accomplished\n\nRuby Plugin project structure and how to bundle into an .hpi file.\n\nReview of the new XSTREAM serialization method\n\nAPI for marking fields as transient\n\nWhat mods, if any, are required to get .hpl to work with Ruby plugin\n\nNext Steps\n\nCharles\n\nto research what can be shared between JRuby ScriptingContainer s\n\nAPI for unmarshaling hooks on serialized ruby objects\n\nChange the name of the repo :)\n\nDocument…​ something!\n\nKohsuke\n\ntest more view functions\n\nadd debug mode outside of hpi:run","title":"Ruby Plugins Hack Session 5/12/2011","tags":["development","core","plugins","ruby"],"authors":[{"avatar":null,"blog":null,"github":"cowboyd","html":"","id":"cowboyd","irc":null,"linkedin":null,"name":"Charles Lowell","slug":"/blog/authors/cowboyd/","twitter":null}]}},{"node":{"date":"2011-05-12T00:00:00.000Z","id":"2cb983aa-a7b3-58a2-92bf-021dfc39db8d","slug":"/blog/2011/05/12/the-state-of-the-jenkins-project/","strippedHtml":"A few weeks ago our very own Kohsuke Kawaguchi gave a presentation at the Silicon Valley CI Summit held in Mountain View.\n\nWithin the presentation, Kohsuke included a collection of numbers about the vibrancy of the Jenkins project that certainly hasn’t gotten enough attention. While the slideshow is embedded below, here’s some good high-level points:\n\nOver 170 GitHub pull requests in the past four months, with more being sent every day.\n\nFormalization of a \"Jenkins Stable\" branch of development with longer release cycles and back-ported bugfixes.\n\nOver 280 tickets in JIRA have been resolved.\n\nAfter posting a \"special\" release of Hudson which presents users with a choice, 87.25% are choosing to upgrade to Jenkins.\n\nOver 500 tickets have been created\n\nRoughly 13,000 downloads of jenkins.war and native packages a week\n\nNew and vibrant community-driven initiatives like Frederic Camblor’s plugin compatibility tester and Charles Lowell’s JRuby plugin support project.\n\nWe’ve crossed 1500 participants on the jenkinsci-user mailing list, and are over 900 participants on the jenkinsci-dev list.\n\nThe @jenkinsci twitter account recently crossed the 4,000 follower threshold.\n\nOn a personal note, I think this speaks all to the level of unbridled enthusiasm about the future of Jenkins by contributors both new and old.\n\nWithout further delay, the slides: Current state of Jenkins","title":"The State of the Jenkins Project","tags":["general","core","meta","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-05-27T00:00:00.000Z","id":"02fff5f5-8fad-51e9-8cac-746108f3440f","slug":"/blog/2011/05/27/ruby-plugins-hack-session-5-27-2011/","strippedHtml":"After a one week hiatus, we returned to the weekly hack session on a mission light up the sky with fire!\n\nAttendees\n\nCharles Lowell, Rasheed Abdul-Aziz, Hiroshi Nakamura\n\nDiscussion/Accomplished\n\nHow to manage the different ScriptingContainers inside the Jenkins\n\nrenamed the experimental repo where we’ve been doing all of our development from fog.hpi to the more aptly name [ https://github.com/cowboyd/jenkins-ruby-plugins-playground ]\n\nstarted a separate gem for housing the support libraries for jenkins here [ https://github.com/cowboyd/jenkins-plugins.rb ]\n\nstarted with more formal definition of the plugin API there.","title":"Ruby Plugins Hack Session 5/27/2011","tags":["development","core","ruby","jruby"],"authors":[{"avatar":null,"blog":null,"github":"cowboyd","html":"","id":"cowboyd","irc":null,"linkedin":null,"name":"Charles Lowell","slug":"/blog/authors/cowboyd/","twitter":null}]}},{"node":{"date":"2011-06-08T00:00:00.000Z","id":"1ca41d43-8c95-5909-9944-7573d0f27283","slug":"/blog/2011/06/08/building-a-software-diamond-with-jenkins/","strippedHtml":"[ Editor’s Note: This is a guest post from Jenkins community member Tom Rini ]\n\nAlternatively: How to make your parallel jobs kick one last job at the end\n\nMany of us have had occasion to think: \" I could make this project build quicker if I could just run parts in parallel and then one final job to wrap it up.\"\n\nWell, good news! Jenkins is here to help!  With the Join Plugin you can do just that.  Over on the confluence page it’s got a number of examples and fancy flow charts.  But the take-away is that if you can describe the flow, you can make it happen.  But you’re saying \"wait, I need to pass information around between the jobs.\"\n\nWe’ve got that one covered for you too with the Parameterized Trigger Plugin.  And here’s the best part, these two can work together!  With both plugins installed you can follow the steps listed in the Build Parameters section of the Join Plugin. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/join_trigger.png\n\nAnd as they say, now you’re cooking with gas!","title":"Building a software diamond with Jenkins","tags":["general","guest post","plugins","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-06-09T00:00:00.000Z","id":"0c33dc09-9f84-5a65-b80d-4f055dd6f65b","slug":"/blog/2011/06/09/a-big-thanks-to-rackspace/","strippedHtml":"This post is long over-due and I really apologize for that.\n\nSome months ago we put out the call for \"more agent machines!\" through the\nmailing lists, sky-writers and twitter. We had a serious problem, for a\ncontinuous integration project, a large number of our plugins and\ndependencies weren’t being built in a continuous and automated fashion!\n\nWe had some builds on a couple of flakey machines on home connections\ncontributed by various individuals, until Rackspace stepped up in a big\nway and donated an infrastructure server for the project to use. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/rackspace.jpg\n\nFor months now, just about all plugins and core have been built and tested on spinach,\nthe always-on machine in the Rackspace Cloud. Dutifully chugging away building\ncore, plugin after plugin and occasionally getting flooded with work from Frederic\nCamblor’s plugin compatibility tester!\n\nIn hindsight, having a powerful infrastructure machine for nothing other than\nbuilds has helped us build great software faster; I can’t imagine how difficult\nthings might be otherwise.\n\nI’ve personally had a lot of interaction with Rackspace engineers through the OpenStack\nproject and have a number of friends who operate businesses on\nRackspace/Rackspace Cloud hybrid infrastructures.\n\nThe folks at Rackspace are\ntop notch and I can’t thank them enough for contributing to the Jenkins\nproject.","title":"A big thanks to Rackspace","tags":["infrastructure","meta"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-06-14T00:00:00.000Z","id":"b8816000-c17a-523b-b88f-638b6fb6ab53","slug":"/blog/2011/06/14/upcoming-events-in-june-and-early-july/","strippedHtml":"I’ve just added three events coming up in the next few weeks to the Jenkins calendar. Conveniently, they are all events I’ll be attending while traveling around Western Europe!\n\nThe Cologne JUG is having a meetup on Saturday, June 25th, starting at 2pm. We’ll be talking about Jenkins, maybe doing some coding, and then heading out for drinks and more talk! You can find more information and sign up at Xing.\n\nA few days later, TNG Technology Consulting is generously hosting a meetup in Munich, on Wednesday, June 30th, starting at 3pm. I’ll be giving a quick talk on the state of the Jenkins project, followed by Ullrich Haffner (the author of the static analysis plugins for Jenkins) giving a quick talk on how those plugins are used. After that, we’ll be having a hackathon, and then more beer! Again, you can find more information and sign up at Xing.\n\nA week later, the London CI meetup group is hosting a meetup as well, on Wednesday, July 6th, starting at 6:30pm. We’ll be meeting up at the Royal Festival Hall for discussion and drinking. You can find more information and sign up at Meetup.\n\nDo you have a Jenkins event you’d like to have added to our calendar? Let us know!","title":"Upcoming Events in June and early July","tags":["general","core","just for fun","meetup","meta","news","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2011-06-16T00:00:00.000Z","id":"8539ff06-0574-55b9-9484-a9980b131b14","slug":"/blog/2011/06/16/jenkins-long-term-support-release/","strippedHtml":"We have released 1.409.1, our first long-term support (LTS) release, from the Jenkins project.\n\nThe idea of the LTS release is to provide a second release line the favors more stability and bug fix only maintenance. This release line branches off from a bit old Jenkins release (in this case 1.409), and we will only put important backported bug fixes. We’ll keep releasing 1.409.2, 1.409.3, and so on, as such bugs appear, and in several months (our current thinking is 3 months) we’ll designate another release and repeat this process all over again. I think it provides more comfortable upgrade path for larger deployments. For more about this, see Wiki.\n\nIn large companies that use Jenkins in a large scale, there often is a team of people who looks at incoming Jenkins release, tests it with their environments and their plugins, and then let their internal group consume them. With this release line, I’m calling for them to join the effort on this branch. Vojtech Juranek from Red Hat is already helping us tremendously, so is Yahoo in choosing the base release line and backporting. But it’d be great to get more people on board, as I think it’ll benefit everyone to have a larger number of eyeballs on the same code. You’ll also have a say on what bugs need to be backcported, etc. If you are interested in this effort, please let us know.","title":"Jenkins Long-Term Support Release","tags":["general","core","releases","lts"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-06-24T00:00:00.000Z","id":"cb3ffe27-cb69-54a2-a9a7-d1b0c74e1071","slug":"/blog/2011/06/24/ruby-plugins-hack-session-notes-6-23-2011/","strippedHtml":"You know that the night is going to be productive whenever @kohsukekawa shows up, and last night was no exception. We talked about problems on the horizon, potential solutions, and then I spent the last half hour ripping a bit of code.\n\nThe truth of the matter is that most of the changes that have to be done to Jenkins core have already been made, so now the bulk of the heavy lifting falls to the Ruby side of things (right now, me).\n\nAnyhow, on to the notes!\n\nAttendees\n\n@kohsukekawa, @cowboyd\n\nextract more stuff into the jenkins-plugins.rb support library (@cowboyd)\n\nWe’re in the process of extracting, normalizing, documenting all the goop that’s currently residing in the ruby plugins playground into a formal plugin support gem called jenkins-plugins https://github.com/cowboyd/jenkins-plugins.rb\n\nrecruit Rubyists to implement non-Jenkins specific code (@kohsukekawa)\n\nIf you know Ruby and would like to be able to write Jenkins plugins with it, but don’t know the first thing about Jenkins and/or JRuby, that’s OK. You can help by implementing some of the cucumber features found in that repo\n\n@kohsukekawa is going to be knocking on your door to ask if you’re ready to step up, so I hope you’ve been nice this year!\n\ntesting strategy (@cowboyd, @kohsukekawa)\n\nRuby folk love their tests, and a plugin develompent solution won’t be complete unless testing is a breeze. That means that as we extract the plugin support library, we take make sure you can test plugin classes in isolation.\n\nOn the Jenkins side, KK will think about how to run tests that require a full Jenkins environment. A system like this exists currently for testing java plugins, but some thought might be required on how to do this for Ruby.\n\npackaging reloaded (@kohsukekawa)\n\nKK is going to jump in and write some rake tasks to take a ruby plugin structure and package it into a valid .hpi file, and with no maven involved.  According to him, Ruby plugins aren’t the only system that wants to run maven-free. There is desire to be able to do plugin development with Gradle (another Java build system), so this could be a double win.\n\ndifferent schedule (@kohsukekawa)\n\n8:30pm Central in North America, doesn’t seem to be a very good time. Especially for hackers in Asia Pacific. KK will investigate a new time that works for everybody and encourages more participation.","title":"Ruby Plugins Hack Session Notes 6/23/2011","tags":["development","core","ruby","jruby"],"authors":[{"avatar":null,"blog":null,"github":"cowboyd","html":"","id":"cowboyd","irc":null,"linkedin":null,"name":"Charles Lowell","slug":"/blog/authors/cowboyd/","twitter":null}]}},{"node":{"date":"2011-07-18T00:00:00.000Z","id":"68b30e7a-bc62-5d0d-b11b-63127be962fc","slug":"/blog/2011/07/18/mirror-mirror-on-the-wall/","strippedHtml":"Let me preface this entire post with this: I love\nContegix .\n\nWhile working on some infrastructure tasks I had long-since put-off for the\nJenkins project, I noticed something this weekend that scared the hell out of\nme.\n\nAt some undetermined time, our MirrorBrain\ninstallation stopped redirecting to our mirror network. Absolutely zero\ndownloads were being redirected, meaning that cucumber, the 1U machine\ngraciously colocated by Contegix had served up\nfar more bits than I ever wanted it to.\n\nAs such, I would like to publicly apologize to Contegix on behalf of the\nJenkins project. Their support for the project has been tremendous but\nthis glitch caused such an incredible amount of traffic to be pushed through\ntheir network that I feel exceptionally bad about it (turns out, Jenkins is pretty popular!)\n\nNow, for the good news. In diagnosing and debugging this issue (in a\ncaffeine-fueled frenzy I might add) I managed to do a couple things:\n\nI corrected the redirection relatively easily\n\nI fixed our long-standing geo-location issue, finally enabling redirection to our european\nand asian mirrors!\n\nWithin 30 minutes of correcting the error, I was able to add two mirrors in\nGermany, re-enable one from Taiwan and add a new mirror in Japan!\n\nI’m hoping to add even more mirrors in even more regions as volunteers with\nbandwidth step-forward, if you’re interested in hosting a mirror you can drop\nme a line at tyler@linux.com.","title":"Mirror, mirror on the wall","tags":["infrastructure","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-08-08T00:00:00.000Z","id":"ef5616f3-aaa8-57d6-a7d6-9909177629c6","slug":"/blog/2011/08/08/jenkins-user-conference/","strippedHtml":"We’ve done meetups, we’ve done sessions, we’ve done workshops, now it’s about time we went ahead and did user conference don’t you think?\n\nOur pals over at CloudBees (Harpeet specifically) have taken the initiative in starting to organize just that: a Jenkins User Conference on October 2nd.\n\nIf you have your calendar at the ready, you’ll notice that October 2nd is the Sunday before JavaOne kicks off this year in San Francisco.\n\nThe details are still coming together, but a proposed agenda has already been posted by Harpeet.\n\nAs this is a community event, I’ll be sure to keep the updates coming on this site but you may want to add the CloudBees' Blog to your feed reader just in case (or just follow them on Twitter: @CloudBees).","title":"Jenkins User Conference","tags":["general","meetup","javaone","jenkinsci","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-08-08T00:00:00.000Z","id":"34e23e7c-2907-539a-934f-3d4a07f89787","slug":"/blog/2011/08/08/jruby-branch-merged/","strippedHtml":"Yesterday, Kohsuke announced that the 'jruby' branch of jenkins-core had been merged to master.\n\nThis doesn’t mean that we’re done and that you can go forth and write pure ruby plugins…​ not by any stretch of the imagination. Instead, what it does mean, is that the Jenkins mainline is much more friendly to runtime analysis of classes with which it is not familiar.\n\nThe problem\n\nWhen analyzing plugin classes, Jenkins uses just about every kind of metadata you can think of to get information about them: Class name, Field names, method names, member modifiers, annotations, you name it. It even uses the containing class relationship for inner classes to match Descriptors with what they describe.\n\nIt’s all a great example of convention over configuration (CoC). In fact, I’ve never really seen CoC implemented in a Java project before as successfully as it has been in Jenkins. Plugin authors don’t have to duplicate any metadata that Jenkins can figure out for you — and it’s alot! The drawback though, is that extensions depend very heavily on conforming to the structure of a conventional Java class.\n\nThe changes in this merge, and in several of the modules on which Jenkins depends, allow more than ever to get this information by asking an object directly rather than querying its private class structure.\n\nThe Kicker\n\nMany of theses changes aren’t even JRuby specific! While they do enable JRuby integration, They’re really just making things more friendly for dynamic languages in general. So, in theory, it should pave the way for others like JavaScript and Python.\n\nWhere now?\n\nWe’re still working on the ruby runtime and tools which will provide as crisp a Ruby development experience as we can. I don’t want to proffer an estimate of when those will begin to be useable, but it is important to mark this very important milestone and explain what it does and does not mean.\n\nWe need you!\n\nThere is still much work to be done to enable a writing Jenkins plugins in Ruby, we are looking for people who know Ruby and feel like pitching in: writing Rake tasks, improving the glue layer, documentation, etc.\n\nIf you’re interested, most of the action is happening on the jenkinsrb@googlegroups.com mailing list, so join us!","title":"JRuby Branch merged!","tags":["development","core","jenkinsci","ruby","jruby"],"authors":[{"avatar":null,"blog":null,"github":"cowboyd","html":"","id":"cowboyd","irc":null,"linkedin":null,"name":"Charles Lowell","slug":"/blog/authors/cowboyd/","twitter":null}]}},{"node":{"date":"2011-08-09T00:00:00.000Z","id":"8822c8eb-082e-58d6-a686-bbb12238308e","slug":"/blog/2011/08/09/jenkins-user-conference-call-for-papers/","strippedHtml":"As we announced yesterday, we are organizing a Jenkins User Conference, and we are delighted to announce its Call for Papers is now open. We are looking forward to receiving amazing proposals from infrastructure experts to novice developers in the Jenkins community. Use your creativity. Share and showcase your unique approach to utilizing Jenkins technology.\n\nWe do not encourage overt marketing pitches. We encourage breakout sessions, work shops, good case studies with transferable, tangible lessons and other topics like:\n\nplug-in development\n\nSpecific Jenkins applications that solve testing/building problems in particular areas: mobility, enterprise/web/cloud applications, and UI testing\n\nBeyond Java (i.e Jenkins w/ PHP, Ruby, etc)\n\nJenkins best practices, lessons learned, case studies, tips and tricks\n\nLightning Talks (10 min)\n\n+\n+\n\n+\n*IMPORTANT:* Submit your proposal as soon as possible to mailto:juc-cfp@cloudbees.com[CFP alias]. Call for Papers closes Sept 1, 2011. +\n +\n\n+\nSessions are 50 min long. In your proposal pls include the following info: +\n +\n\nName\n\nJob Title\n\nEmail\n\ntwiter id\n\nCompany/website\n\nPaper Title\n\nAudience Level (General, Beginner, Intermediate, Advance)\n\nPaper Abstract\n\nYour bio\n\n+","title":"Jenkins User Conference: Call for Papers","tags":["general","meetup","javaone","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-09-01T00:00:00.000Z","id":"d78bc78c-4906-5d41-bcb7-70b0606d888c","slug":"/blog/2011/09/01/call-for-testers-upcoming-lts-update/","strippedHtml":"A couple of months\nago Jenkins embarked on an new project, the\nJenkins \"LTS\" (Long Term Support) release line. A LTS branch of development is\ncommon in most major open source projects, especially those with substantial\ncorporate adoption, so this was a great step for the project as a whole.\n\nWe’re now coming up on the second LTS release, which will be an incremental\nupdate to the previous one (1.409.1) with only the most important fixes\nback-ported to the branch.\n\nNow is when we need your help.\n\nWe need testers and interested parties from the community to help verify the\nstability of the planned LTS update, 1.409.2, which is now in the release\ncandidate stages.\n\nThe testing of 1.409.2 has been spearheaded by community member vjuranek who\nhas created this fantastic test\nmatrix to\nhelp coordinate testing of release candidates.\n\nThe LTS project is entirely community driven, so your input is invaluable in making\nthese releases successful.\n\nIf you’re interested in helping, speak up on the -dev mailing\nlist and start pitching in on the test matrix!","title":"Call for Testers: Upcoming LTS update","tags":["general","core","lts"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-09-14T00:00:00.000Z","id":"9c4b1130-7178-5ef6-a717-3f22f65a5ac4","slug":"/blog/2011/09/14/jenkins-long-term-release-1-409-2-is-out/","strippedHtml":"We just posted the updated Long-term Release (LTS) of 1.409.2.\n\n+\nJust as a recap, with LTS releases, we plan on providing a release train that only has backported changes. 1.409.2 contains https://jenkins-ci.org/changelog-stable[a handful of important bug fixes] since 1.409.1. For more about LTS, https://wiki.jenkins.io/display/JENKINS/LTS+Release+Line[see this wiki page]. +\n +\n\n+\nThanks to the heroic effort of those who are involved, namely Vojtech Juranek and a bunch of heroes, this release went through a rather rigorous testing, including all the automated tests we have plus https://wiki.jenkins.io/display/JENKINS/LTS+1.409.x+RC+Testing[a considerable number of manual eye-ball tests]. +\n +\n\n+\nTo download, click the \"Long-Term Support Release\" tab from https://jenkins-ci.org/[the top page]. If you've already been using LTS, you should start receiving update notifications soon.","title":"Jenkins Long-Term Release 1.409.2 is out","tags":["general","core","releases","lts"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-09-19T00:00:00.000Z","id":"14c83418-ebe4-5b51-956a-f78b3e3e3e12","slug":"/blog/2011/09/19/2011-donation-drive/","strippedHtml":"Since the end of April, Jenkins has been officially part of the\nSPI (Software\nin the Public Interest), an umbrella organization which offers a useful level\nof legal status for the project.\n\nUp until recently we had not taken proper advantage of this new legal\numbrella, thankfully that’s changed as we’re now capable of accepting\ndonations!\n\nFor the project this is a big step forward as it will allow us to offset the\ncost of servers for the project, bandwidth, SSL certificates and other costs\nincurred as part of running such a large open source project.\n\nTrivia: The machine that this page is being served from originally started\nout as \"hudson labs\", purchased and colocated by\nabayer,\nkohsuke and\nmyself.\n\nSince we’re now able to accept donations, we’re kicking off a donation drive to\nhelp recover some of the costs incurred this summer ( which I’ve discussed\npreviously). Our immediate goal is to raise $5130\nto recoup bandwidth costs, if you can spare some change, head on over to the\nSPI online donation\npage and help\nus out :)","title":"2011 Donation Drive","tags":["general","news","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-09-20T00:00:00.000Z","id":"8a0aa573-e15f-5284-827f-bda15ded512b","slug":"/blog/2011/09/20/ips-packages-of-jenkins-for-solaris-openindiana/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/en/thumb/3/3b/Solaris_OS_logo.svg/220px-Solaris_OS_logo.svg.png[image] +\n\n+\n\n+\nImage Packaging System (IPS) is a new package manager Sun has developed for OpenSolaris. While I have my doubts about whether a brand-new package manager was a good way of spending engineering resources, OpenSolaris had a number of very nice features that made it a convincing platform to run Jenkins, thanks to SMF, ZFS, and zones. So I used to produce IPS packages for Jenkins. I lost the ability to do this as I left Oracle and lost access to a Solaris system, but https://www.dev-eth0.de/jenkins-continuous-integration-on-opensolaris/[a recent blog post] renewed my interest. +\n +\n\n+\nSo I'm happy to announce that the Jenkins project has started producing https://ips.jenkins-ci.org/[IPS packages for the releases]. With this addition, the Jenkins project now produces 9 packages on different platforms (10, if you count https://rubygems.org/gems/jenkins-war[Ruby as a separate platform] :-) +","title":"IPS Packages of Jenkins for Solaris/OpenIndiana","tags":["general","core","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-10-05T00:00:00.000Z","id":"0322997d-f592-516b-a936-503036d0c397","slug":"/blog/2011/10/05/ci-dinner-wednesday-at-630/","strippedHtml":"Apologies for the late notice, I think most of us have been pre-occupied with that fantastic Jenkins User Conference. While there are plenty of folks in town for JavaOne, I wanted to host a meetup/dinner at Cafe Chaat here in San Francisco.\n\nIf you’re coming from JavaOne directly, use these directions\n\nIf you’re coming from Oracle OpenWorld, use these directions\n\nKohsuke will be in attendance as will some other Jenkins User Conference speakers, so if you still have left-over questions, I’m sure you can get them answered before the last of the Mango Lassi is finished!\n\nLook forward to seeing you there!","title":"CI Dinner Wednesday at 6:30","tags":["general","just for fun","meetup","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-10-17T00:00:00.000Z","id":"0c317256-c4cf-51b3-88ef-d835e47b98b5","slug":"/blog/2011/10/17/andrew-bayer-discusses-jenkins-with-tim-obrien/","strippedHtml":"Recently, Jenkins Interim Governance Board member and core contributor, Andrew Bayer sat down with Tim O’Brien to discuss the Jenkins project.\n\nYou can watch the video on YouTube or via the embed below.","title":"Andrew Bayer discusses Jenkins with Tim O'Brien","tags":["general","interview","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-10-21T00:00:00.000Z","id":"a1178078-993b-57eb-a8d1-9b22cc33e287","slug":"/blog/2011/10/21/report-bugs-and-win-kindle/","strippedHtml":"CloudBees is running a 60-days\"bring me bugs\" contest for the Jenkins project where you may win a Kindle and Amazon gift cards for a bug report you made during the contest period. See the linked site for details about how to enter into the drawing. Greg Moy from Electronic Arts has already won for the first week, but there are more rounds to come.\n\nSeveral years ago Sun did the same thing around GlassFish, and it was useful to drive more participations into the project. Whether or not you were around the last time, don’t forget to participate this time.","title":"Report bugs and win Kindle","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-11-03T00:00:00.000Z","id":"0d5a2e04-8662-5782-90bb-4f7fd7d1f6f9","slug":"/blog/2011/11/03/jenkins-community-survey/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Census[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Volkstelling_1925_Census.jpg/300px-Volkstelling_1925_Census.jpg[image,height=140] +\n] +\n\n+\n+\n\n+\nThere's currently https://bit.ly/rYnFy2[a survey running] to get a better sense of our use base. Those inputs help us steer the effort wisely, so we appreciate your taking time to fill it in. The result would be more useful if larger number of people participate, so feel free to encourage others to fill it in as well. +\n +\n\n+\nIn the same spirit of the fundraising drive in NPR, CloudBees is throwing in a \"thank you gift\" of AppleTV as an added incentive. See https://blog.cloudbees.com/2011/11/take-jenkins-survey.html[their blog post] for more details.","title":"Jenkins Community Survey","tags":["general","feedback","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-11-04T00:00:00.000Z","id":"c02a61ae-5d52-5378-81ab-7582054d9bbd","slug":"/blog/2011/11/04/a-dead-bug-is-a-good-bug/","strippedHtml":"+\nimage:https://www.cloudbees.com/sites/default/files/imagefield_thumbs/Buggy_Code.png[image,width=129,height=96] +\n\n+\n\n+\nAs if https://jenkins-ci.org/content/report-bugs-and-win-kindle[getting a Kindle for reporting bugs] and https://jenkins-ci.org/content/jenkins-community-survey[getting an AppleTV for filing a survey] aren't enough, you can also https://www.cloudbees.com/jenkins-community-contests.cb#bugbounty[win an iPad for fixing an issue]. +\n +\n\n+\nSo if you've been thinking about tinkering with https://wiki.jenkins.io/display/JENKINS/GitHub+Repositories[Jenkins code base] but haven't done so yet, this is a great opportunity to get going. There's https://wiki.jenkins.io/display/JENKINS/Extend+Jenkins[documentation about how to get started], and there's https://wiki.jenkins.io/display/JENKINS/Office+Hours[Jenkins Office Hours] and https://jenkins-ci.org/content/chat[IRC channel] if you need some interactive help from existing devs. I think new features, not just bug fixes, would qualify, so long as it's recorded in the issue tracker. And similarly, I think the plugins would qualify, not just core. +\n +\n +\n\n+\nAside from iPad, there's one $50 Amazon gift certificate going out every week, which is almost a steal! So be sure to submit your entry! +","title":"A dead bug is a good bug","tags":["general","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-11-07T00:00:00.000Z","id":"92d843e0-a196-599e-9d2e-bde8c956615f","slug":"/blog/2011/11/07/jenkins-meetup-munich-videos/","strippedHtml":"Better late than never right? Back in June, during his world tour, Andrew Bayer stopped by Munich to participate in a Jenkins Meetup along with Dr. Ullrich Hafner.\n\nAndrew gave a talk titled \"The State of Jenkins\" ( slides) and Ullrich talked about \"Static Code Analysis with Jenkins\" ( slides)\n\nYou can view the videos on this page hosted by TNG.\n\nThanks to Stefan Wolf for the heads up!","title":"Jenkins Meetup Munich Videos","tags":["general","meetup","video"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-11-10T00:00:00.000Z","id":"1c5fc5c2-f1b2-564b-8652-c8bda965f124","slug":"/blog/2011/11/10/jenkins-conference-slides-and-videos-online/","strippedHtml":"It is just turning into a video heavy week isn’t it? First the videos from the Munich Meetup were made available, and now the videos from the first ever Jenkins User Conference.\n\nThe full list of slides and videos can be found on this page , hosted by CloudBees who  did a phenomenal job helping to organize and host the conference.\n\nI want to thank everybody else involved once again, the fantastic speakers, the enthusiastic attendees and of course the sponsors for making it possible (CloudBees, Red Hat, LifeRay, New Relic, Sauce Labs, Chariot Solutions and eXo).","title":"Jenkins Conference Slides and Videos Online","tags":["general","juc","video"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-11-15T00:00:00.000Z","id":"8cdd0c7d-1028-517e-9890-ce92bab052db","slug":"/blog/2011/11/15/the-beginning-of-a-new-era-ruby-plugins-now-a-reality/","strippedHtml":"It’s not often that I get to use that much hyperbole in a Jenkins blog post, but I think in this case it’s allowable. A journey that started over a year ago by Charles Lowell has reached a new level, thanks to lots of help from Kohsuke along with Hiroshi Nakamura and Jørgen Tjernø.\n\nAs of today, with Jenkins 1.438, you can now download and install Ruby plugins from the update center (the Path Ignore plugin being the first).\n\nWords simply can’t express what a monumental achievement this is for the Jenkins project, both from the technical perspective but also in terms of what this means for the future of the project.\n\nAccording to the languages dashboard on GitHub, Ruby is over two times as popular as Java on the site. I do not intend to start a language popularity contest here, but if we pretend just for a minute that the GitHub ecosystem is all that exists. Can you then imagine how powerful it would be to engage and include a community of open source developers that would be two times the size of the current pool of contributors? That’s tremendous potential!\n\nGreat! Where do I start?\n\nFor those that are curious, the first officially released Ruby plugin for Jenkins is Jørgen’s pathignore-plugin which can be found in the update center. If you’re looking for a reference project, this is currently the most up-to-date plugin.\n\nThere is also a wiki page covering Ruby plugin development , which might be a little out-of-date but covers most of the essentials.\n\nAdditionally you might find the jenkins-prototype-plugin an interesting resource as it is practically a kitchen sink of demo/test Ruby plugin code.\n\nCurrently only a few extension points (BuildStep, Publisher, BuildWrapper) are mapped in a Ruby-friendly manner. Don’t let that scare you though! If you dig around in the jenkins-plugin-runtime you can see how the existing extension points are mapped from Java into Ruby, because Ruby plugins are running under JRuby, if you need to access some Java APIs, you can do so without too much trouble.\n\nThe Thank Yous\n\nGreat efforts like this one don’t just happen without support, which is why I’d like to call out and thank The FrontSide for their wonderful support, helping to cover costs of WebEx for Office Hours and covering Charles' time while he worked with Kohsuke on the internal plumbing needed to make Ruby plugins possible within Jenkins core. If the name \"The FrontSide\" looks familiar to you, that might be because they also created and donated the Jenkins logo!\n\nWe should also thank Lookout, Inc ( full disclosure: Lookout is my employer) and CloudBees for affording some employee time for Jørgen and Kohsuke respectively to work on the project.","title":"The beginning of a new era: Ruby plugins now a reality","tags":["general","core","plugins","jruby"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-12-02T00:00:00.000Z","id":"cdd797c9-d7b4-5cf4-9210-6135b4953812","slug":"/blog/2011/12/02/community-contributed-localizations-to-be-bundled-in-jenkins-1-443/","strippedHtml":"+\nIn 1.430, we added https://wiki.jenkins.io/display/JENKINS/Translation+Assistance+Plugin[the translation assistance plugin] in the hope of increasing the contribution from the community. It's been 3 months, and I've finally took the opportunity to integrate them into Jenkins. +\n +\n\n+\nThe result is pretty amazing. Before this, we had 26 languages, with wildly varying degree of completeness, such as French, Japanese, German, etc. This is still pretty good, but this integration added updates to 40 languages, including 17 brand-new languages, pushing the total up to whopping 43 languages. Among the newly added languages are Arabic (sorry, no right-to-left support yet), Esperanto, Hebrew, as well as large amount of Chinese (both simplified and traditional) and Korean. +\n +\n\n+\nWhile working with this, I've also discovered an issue that prevented Jenkins from correctly showing Hebrew, Indonesian, and Yedish localizations. All these changes will be in 1.443. And going forward, I'll be integrating changes more frequently to reduce the delay. +\n +\n\n+\nSo big thank you for everyone who contributed localizations, and please keep them coming! https://wiki.jenkins.io/display/JENKINS/Translation+Assistance+Plugin[Contributing localization is very easy]. If you are interested in more seriously working on localizations, please see https://wiki.jenkins.io/display/JENKINS/Internationalization#Internationalization-Whattranslatorsneedtoknow%2Fdo[this Wiki page] and request the committership in the project. This is yet another way people can contribute to OSS without writing code.","title":"Community-contributed localizations to be bundled in Jenkins 1.443","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-12-05T00:00:00.000Z","id":"a47c24ef-60bf-5c20-aca6-c709970805f7","slug":"/blog/2011/12/05/holiday-appeal-please-help-jenkins-pay-the-project-expense/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/Mcol_money_bag.svg/100px-Mcol_money_bag.svg.png[image] +\n\n+\n\n+\nAs we approach the holiday season, which is when people start to feel more charitable, at least in the U.S. So I'd like to make one more plea, that the Jenkins project needs your help in link:/donate/[paying its expense], and that we are still about $1000 shy of the goal we need to get to. So if you can, please help us by https://co.clickandpledge.com/advanced/default.aspx?wid=46160[donating to Jenkins via SPI]. +\n +\n\n+\nThink about all the benefits you are getting from your Jenkins, and think about all the volunteer efforts that went into it. Some help by writing code, some help by answering other users questions, and some help by spreading words about Jenkins. If you've been wanting to contribute to the project but you haven't figured out how, this is one way to do it. +\n +\n\n+\nAs a thank you, I'm writing a special \"friend of Jenkins\" plugin that I'd like to send out to those who have donated, so that you can show off your support on your Jenkins instance. +\n +\n\n+\nOnce again, please help us reach link:/donate/[our fundraising goal]. +\n +","title":"Holiday appeal: please help Jenkins pay the project expense","tags":["general","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-12-19T00:00:00.000Z","id":"f6fdb5a5-fc56-5dae-b35d-ae0ae780dca1","slug":"/blog/2011/12/19/fundraising-drive-update-thank-you-everyone/","strippedHtml":"\">\n\nOur earlier appeal for donation was a drastic boost to our fund-raising drive, (and looking at the twitter reactions, it feels like the Wikipedia parody we put on Jenkins on Jenkins helped spread the words — I guess jokes do work!\n\nAnd I’m happy to report that we’ve successfully raised over $12000 as of today. That’s more than enough to pay off all the current balance and it should keep the project going for quite a while. I’ve assembled the donor list in appreciation.\n\nSo once again, thanks everyone for their generous support!","title":"Fundraising drive update: thank you everyone!","tags":["general","meta","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-12-20T00:00:00.000Z","id":"ddf872d6-16ad-50ce-a070-97365575b03b","slug":"/blog/2011/12/20/thanks-for-the-support-pagerduty/","strippedHtml":"Over drinks this evening Kohsuke pointed out that he never saw a blog post about PagerDuty. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/images/pagerduty_logo.png\n\nIf you’ve never worked in a sysadmin role or in any other position that would require an on-call rotation, then you may have never seen PagerDuty.\n\nIn essence the service provides a great series of integration points with Pingdom or Nagios for handling monitoring. As an infrastructure guy (part time), I can honestly say it’s a great tool and I’m grateful to PagerDuty for supporting Jenkins with our own account to help manage project infrastructure.\n\nA couple weekends ago I finished setting up Nagios (read-only username/password: jenkins / jenkins) for critical project services which by itself is a good step forward. Combine that with PagerDuty’s Nagios integration and a solid on-call rotation, and I’m more confident than I’ve ever been that Kohsuke or myself could actually take a vacation!\n\nCheck them out, and be sure to thank them on Twitter at @PagerDuty for supporting Jenkins!","title":"Thanks for the support PagerDuty!","tags":["infrastructure","meta"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2011-12-23T00:00:00.000Z","id":"362f14e6-ec24-5334-b44b-d7942b155dcb","slug":"/blog/2011/12/23/jenkins-survey-result-and-what-ui-improvement-would-you-like/","strippedHtml":"\">\n\nJenkins community survey result is in, which shows a number of interesting stats for us developers, such as 82% of people saying their Jenkins is mission critical, or the spread of distributed builds, especially compared to my earlier similar usage analytics.\n\nBut just as interesting is the free-form answers to questions like \"If there was anything you could you change about Jenkins CI, what would it be?\", and while the answer is colorful, there are a few common themes that one can easily spot.\n\nOne of them is \"nothing!\", which made me feel good, but another is \"UI improvement.\" And incidentally, Domi has started a thread in the Jenkins-users list about this exact topic a week ago.\n\nThe idea is to brainstorm what kind of concrete improvements people would like to see, then run them through some real user experience designers and decide which ones are good ideas and which ones are not.\n\nI find this thread useful — so much so that one of those ideas (always show the \"Save\" button at the bottom in the config page) is already implemented toward the next release of Jenkins. So if you have some thoughts to share, please chime in on that thread.","title":"Jenkins survey result and what UI improvement would you like?","tags":["development","core","feedback","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-12-28T00:00:00.000Z","id":"1c024cc8-c856-5493-a407-dae59c0cc292","slug":"/blog/2011/12/28/adding-diagrams-to-wiki/","strippedHtml":"Thanks to the kindness from Gliffy, we can now add diagrams to Wiki pages, in a way that enables collaborative edits.\n\nSee more info, including a sample diagram in a Wiki page.","title":"Adding diagrams to Wiki","tags":["infrastructure","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-01-09T00:00:00.000Z","id":"1173321c-3ce3-53dc-b412-a8ab044439ff","slug":"/blog/2013/01/09/2012-jenkins-survey-results-are-in/","strippedHtml":"+\nimage:https://rhetoricalcommons.org/OSAAC/sites/default/files/images/survey.jpg[image] +\n\n+\n\n+\nThe https://jenkins-ci.org/node/403[Jenkins survey] we’ve been running since https://jenkins-ci.org/content/come-join-jenkins-user-conference-san-francisco-september-30th[the Jenkins User Conference in San Francisco] has concluded. All in all we counted 721 responses --- thanks everyone for voicing their thoughts! +\n +\n\n+\nNaturally, it took a while to tally that many responses, but thanks to https://twitter.com/ProductPrincipl[Lisa], we https://www.cloudbees.com/jenkins/jenkins-ci/2012-survey.cb[now have the result] in time for the holiday. +\n +\n\n+\nAs you can see in https://stats.jenkins-ci.org/jenkins-stats/svg/total-jenkins.svg[our installation tracking], Jenkins installation base has grown 66% since the last year, so I was naturally very curious if this has affected the area of focus for us the developers. +\n +\n\n+\nHowever, when https://pages.cloudbees.com/Jenkins_Survey_2011_JenkinsSurveyDownloadPage.html[compared to the result from the last year], the first thing I notice is the consistency in many metrics. For example, about 83% of people considers Jenkins mission critical this year, and the last year it was 82%. The distribution between beginner/intermediate/expert users are also quite similar. +\n +\n\n+\nBut this year, we asked a number of questions that we didn’t ask the last year. One of them is the version control systems that people use. Here, we get 61% Subversion, 50% Git, and everything else is within 10%. So clearly we need to start shipping Git plugin pre-bundled! +\n +\n\n+\nAnother interesting question that we asked is the languages people use. There’s a surprising number of C/C++ projects on Jenkins (and good number of Ruby, PHP, Python, and C#!), which made me feel that we need to hear more from those users about the kind of tool integrations we need to be providing. +\n +\n\n+\nOne more gem is that whopping 11% of the respondents said they have written and contributed plugins to the community (that’s 82 people!), and another 9% of the respondents said they wrote one but just not sharing it because it doesn’t make sense (7%), or they couldn’t (2%). That’s about 1 in every 5 respondents writing some plugins, which is amazing, if you ask me. +\n +\n\n+\nAnother big part of the survey was asking respondents what are important in Jenkins --- is it documentation, quality, UI, etc? But I guess I shouldn’t spoil your fun of actually https://www.cloudbees.com/jenkins/jenkins-ci/2012-survey.cb[looking at the result], so please go take a look yourself! Also, if you want to tally the numbers yourself, here’s the anonymized raw data. +\n +\n\n+\nI’ll hopefully do a separate post on the efforts we are taking to answer those points raised in the survey in coming days. +","title":"2012 Jenkins Survey results are in","tags":["general","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-01-26T00:00:00.000Z","id":"8592b6e3-44dc-5eda-953d-3b2672f9563d","slug":"/blog/2013/01/26/report-jenkins-meet-up-seoul/","strippedHtml":"+\nPeople in far eastern countries use languages that are quite different from English, and live in a time zone that's largely incompatible from the U.S./Europe time. So naturally these folks tend to keep things to themselves. +\n +\n\n+\nThat's why I've been wanting to do a meet-up in Seoul for some time, yet I didn't know anyone there to get one going. That changed in Jenkins User Conferene in San Francisco last year. I pitched this to someone who worked for Samsung, and he introduced me to folks in Seoul, and the ball started rolling from there. +\n +\n\n+\nThe meet-up was held Friday, at Samsung headquarter in https://www.youtube.com/watch?v=9bZkp7q19f0&list=PLEC422D53B7588DC7&index=10[Gangnam], Seoul. +\n +\n\n+\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Samsung_headquarters.jpg/320px-Samsung_headquarters.jpg[image] +\n\n+\n+\n\n+\nI kicked off the meet-up with a short presentation on why I think local communities are important, especially in Korea. Jang Seung-heui from Samsung then talked about Groovy scripting in Jenkins, and how it helps him manage a large installation of Jenkins (the slides and the talk were in Korean, so this is my guess based on the occasional English words that appeared in slides.) Junho Yoon from NHN talked about his simple update site plugin to show how he helps teams run their own Jenkins instances. I've done another presentation showing various Jenkins plugins for workflow-ish things. +\n +\n\n+\n+\n\n+\nI wasn't sure how many people would actually come, since I really didn't have any reach in the Korean software developer community. But somehow the words must have spread, as I counted more than 50 people in the room. +\n +\n\n+\n+\n\n+\nUnfortunately, due to the rules in the building, I wasn't allowed to record the talks. So no videos from this meet-up — if you missed this one, you'd have to come to the next one! +\n +\n\n+\nAfter the meet-up, a dozen of us headed to the busy night scene in Gangnam. There were so many people that we had to form a line to get to the street! +\n +\n\n+\nEventually we found ourselves in a German-style pub. I say German \"style\" because everything from beer to foods were Korean, except the name of the pub and the wall paper. +\n +\n\n+\n+\n\n+\nI've pitched my hope that we keep it going, and that there'll be the next meet-up. Judging from https://www.meetup.com/jenkinsmeetup/events/90236092/[the feedbacks on the meetup.com] and Twitter, I'm optimistic: +\n +\n\n@https://twitter.com/kyunamjo[kyunamjo] @https://twitter.com/kohsukekawa[kohsukekawa] Kohsuke, please push him constantly to put his effort to settle a local community for Jenkins. He wishes to do that.\n\n— 김상희 SangHee Kim (@sangheestyle) January 25, 2013\n\n+\n\n+\n+\n\n+\nThe book Junho is holding contains some chapters about Jenkins that he wrote: +\n +\n\n+\n+\n\n+\nAfter drink-up, Junho kidnapped me into a coffee shop and showed me a lot more that he has done for NHN that I presumably cannot talk about in public. I've encouraged him to try to split the generic parts from company specific parts and open-source the former, so we'll see. By the time I headed back to hotel, it was past midnight. +\n +\n\n+\nI wanted to thank folks from Samsung for making this possible. If you are interested in stay connected, please join https://groups.google.com/forum/?fromgroups#!forum/jenkinsci-kr[the mailing list]. +\n +","title":"Report: Jenkins meet-up Seoul","tags":["general","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-01-30T00:00:00.000Z","id":"87626c38-fdf0-5a1c-b655-43290031b6b4","slug":"/blog/2013/01/30/jenkins-hits-1-500/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Toasting_Champagne.jpg/171px-Toasting_Champagne.jpg[image] +\n\n+\n+\n\n+\nThe last week the Jenkins project has reached a miletone release — https://jenkins-ci.org/changelog[Version 1.500]. That's no 1.5 nor 1.5.0. That's the 501st release since its inception, counting all the way up from 1.0, 1.1 to 1.500. +\n +\n\n+\nWe'll be celebrating this release in https://wiki.jenkins.io/display/JENKINS/FOSDEM[the upcoming FOSDEM conference] in Brussels, but I wanted to thank everyone for making this great community possible by participating and using it. +\n +\n\n+\nDespite https://jenkins-ci.org/changelog-old.html[all] https://jenkins-ci.org/why[the] https://wiki.jenkins.io/display/JENKINS/Governance+Meeting+Agenda[distances] we've thus far come, there are https://www.slideshare.net/kohsuke/jenkins-user-conference-2012-san-francisco[still a lot of work] to be done, both in the core and plugins, so we look forward to keep on keeping on in the coming years. +\n +\n\n+\nSo here is to the next 500 release!","title":"Jenkins hits 1.500","tags":["general","just for fun","news","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-02-15T00:00:00.000Z","id":"07477cb5-2d9d-5ef0-b66d-8eb9cfa91bb2","slug":"/blog/2013/02/15/jenkins-ci-the-origins-of-butlers-build-masters-and-bowties/","strippedHtml":"+\nhttps://zeroturnaround.com/rebellabs/devs/jenkins-ci-the-origins-of-butlers-build-masters-and-bowties/[image:https://zeroturnaround.com/wp-content/uploads/2013/02/JENKINS-CI-Cover.jpg[image]] +\n\n+\n+\n\n+\nThe folks at https://zeroturnaround.com/rebellabs/[Rebel Labs] picked Jenkins as the last installation of their technical report series. It is a beautifully crafted 50 page PDF that covers the overview of the technology. You get to see a bit of details about how ZeroTurnaround uses Jenkins, and it contains a section where I get interviewed by them. +\n +\n\n+\nAlso, while they failed to mention this in the document, you can https://wiki.jenkins.io/display/JENKINS/Developing+with+JRebel[use JRebel when developing Jenkins plugins] and it'll reduce the # of times you need to restart the VM. To the extent that you use it to develop open-source Jenkins plugins, you can https://zeroturnaround.com/software/jrebel/buy/[apply for a free OSS license], too. +\n +\n\n+\nIf that sounds interesting enough, you can https://zeroturnaround.com/rebellabs/devs/jenkins-ci-the-origins-of-butlers-build-masters-and-bowties/[get your copy now]. Be forewarned that a registration is required.","title":"Jenkins CI: The Origins of Butlers, Build Masters and Bowties","tags":["general","interview","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-03-12T00:00:00.000Z","id":"d3f50617-8e9b-5a69-9de7-800672ba931d","slug":"/blog/2013/03/12/coming-to-gdc-join-us-for-a-jenkins-drink-up-at-21st-amendment/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Twenty-first_Amendment_to_the_United_States_Constitution[image:http://www.nationalreview.com/sites/default/files/nfs/uploaded/u23105/2012/12/amendment%2021%202.jpeg[image]] +\n\n+\n +\nIf you are coming to https://www.gdconf.com/[Game Developers Conference] in the week of 25th, or if you are local to San Francisco bay area, come join us to the small drink up in the evening of 26th at http://21st-amendment.com/[21st amendment]. +\n +\n\n+\nIf you are coming, https://www.meetup.com/jenkinsmeetup/events/108919962/[please RSVP] so that we know how many to expect, and we can stay connected.","title":"Coming to GDC? Join us for a Jenkins Drink-Up at 21st Amendment","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-04-19T00:00:00.000Z","id":"7b1c5bd1-1276-5569-bdc7-b8df0b275e56","slug":"/blog/2013/04/19/neuroscientists-embrace-continuous-integration-served-by-jenkins/","strippedHtml":"+\n_ +\nGuest post by Yury V. Zaytsev and Abigail Morrison. To download the PDF file of the journal article mentioned below, https://www.frontiersin.org/Neuroinformatics/10.3389/fninf.2012.00031/abstract[click here]!_ +\n +\n\n+\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Gray739.png/250px-Gray739.png[image] +\n\n+\n+\n\n+\nAs recently exemplified by several reports on this blog, automation tools such as continuous integration servers, that help to defuse the exploding complexity of software under the ever-increasing pressure to deliver, are steadily gaining well-deserved mindshare in the industry. +\n +\n\n+\nHowever, it is not just developers of enterprise software who need solutions to the complexity problem. Scientists are arguably even worse off: most of them are not trained as software engineers, yet, in the last decades, creating custom software has become an integral part of virtually any research activity, be it data analysis, simulation or experiments. Frequently, there is a great emphasis on numerical accuracy and reproducibility of results, which requires extensive testing. As a coup de grâce, most publicly funded research projects are running on tight budgets, excluding the possibility of hiring professional contractors to outsource required software development work. +\n +\n\n+\nEnter Jenkins the Butler! +\n +\n\n+\nBack in 2011, Yury V. Zaytsev, a doctoral candidate now working at Jülich Research Center, Germany was supported by a Google Summer of Code stipend to design a continuous integration infrastructure for http://www.nest-initiative.org[NEST], a spiking neuronal network simulator for neuroscientific research released under the GPL license. An overwhelmingly positive experience with this new setup motivated him to write up https://www.frontiersin.org/Neuroinformatics/10.3389/fninf.2012.00031/abstract[a case study], which was recently published in \"Frontiers in Neuroinformatics\", an open access scientific journal. +\n +\n\n+\n\"The new CI system boosts our productivity, because it helps us find and fix breakages very quickly, even when they only occur for obscure combinations of configuration options. Automated integration testing is a major breakthrough for NEST, as it ensures that developing new features does not come at the cost of reliability or accuracy\" - said Markus Diesmann, director of the Institute of Neuroscience and Medicine (INM-6) at the Jülich Research Center, Germany and NEST Initiative board member. +\n +\n\n+\nWe hope that through a peer-reviewed publication in a prominent scientific journal we will be able to reach the scientific community more efficiently, as compared to the materials targeting professional software developers. However, we likewise believe that our case study might be of interest to the readers of this blog, especially those who are still only considering implementing continuous integration. +\n +\n\n+\nLastly, we would like to thank all developers and users of Jenkins whose contributions throughout the years made it the versatile and robust continuous integration server it is today!","title":"Neuroscientists embrace continuous integration served by Jenkins","tags":["general","guest post","cia"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-04-25T00:00:00.000Z","id":"618211ae-cf71-5e01-a733-217de05d0498","slug":"/blog/2013/04/25/munich-hackathon/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/Munchen_collage.jpg/300px-Munchen_collage.jpg[image] +\n\n+\n+\n\n+\nIt's been a while we had a hackathon in Germany. Let's get together, get some coding done, and get to know fellow Jenkins developers! The date is June 15th Saturday. +\n +\n\n+\nTNG Technology Consulting, where https://github.com/wolfs[Stefan Wolf] (dependency graph viewer plugin, etc) works, will be hosting us (thanks!) +\n +\n\n+\nWe'll try to arrange some themes or agenda, based on who's coming and how many of us will be there. For example, +\n +\n\nIf there are many people who have never done a plugin development, we can do a plugin development tutorial.\n\nIf we see a concentration of devs in a specific area of Jenkins (say mobile), we can try some focused development in a specific area.\n\nIf you have things you need from the core to do what you want, this is the chance to get that implemented on the spot!\n\nIf you want to see a certain development happen in Jenkins but don’t know how, please make a pitch to us in the form of presentations (short or long) would be welcome\n\n+\n+\n\n+\nFinally, assuming there's interest, we'll head out somewhere for a dinner afterward. +\n +\n\n+\nIf you are interested in coming, https://www.meetup.com/jenkinsmeetup/events/116074032/[please RSVP at meetup.com] so that we can prepare accordingly.","title":"Munich Hackathon","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-04-30T00:00:00.000Z","id":"b63c9676-c7c0-58bd-b661-26cc6f952ad1","slug":"/blog/2013/04/30/registration-and-call-for-papers-open-for-juc-palo-alto/","strippedHtml":"This year, the West Coast Jenkins User Conference will be in Palo Alto rather than San Francisco. If you’re nearby — or even if you’re not — join Kohsuke and other fellow developers for a solid day of Jenkins.\n\nThe Date: Wednesday, October 23, 2013\n\nThe Venue: Palo Alto Jewish Community Center\n\nDetails\n\nRegister\n\nThe Call for Papers is open until June 9 (scroll to bottom of page for form). JUC will be much better with your involvement, so please submit your abstracts and share your Jenkins knowledge with the community.\n\nimage::https://www.cloudbees.com/sites/default/files/Kohsuke-Kawaguchi-Opening-San-Fran-Thumbnail.png [Kohsuke Kawaguchi – Keynote Address, JUC San Francisco,link=https://www.youtube.com/watch?v=HXEbFfAeymw?rel=0?autoplay=1&rel=1&modestbranding=1&showsearch=0]\n\nA very special thanks to our JUC Palo Alto sponsors, who will make sure you are fed, caffeinated, clothed (in this year’s collectible Jenkins tshirt), and generally well cared for at the conference: CloudBees, JFrog, XebiaLabs, appvance, ZeroTurnaround, LMIT Software, Black Diamond Software, New Relic, Liferay, AppDynamics, and SOASTA.\n\nTwo other differences this year — the conference is not timed to coincide with JavaOne, and it falls on a Wednesday rather than a Sunday. We thought we’d try these changes and are interested to know if they work better for everyone.\n\nThe agenda won’t be populated until after the Call for Papers closes and talks are selected. But you can check out previous JUC agendas, slides, and video:\n\n2012 JUC San Francisco\n\nInaugural JUC San Francisco - 2011\n\nIf JUC Palo Alto is not convenient for you, there’s also a JUC coming up in Herzelia, Israel on June 6 and a Jenkins event planned for Copenhagen, Denmark on September 6.\n\nHope you can join us at JUC!","title":"Registration & Call for Papers Open for JUC Palo Alto","tags":["general","just for fun","news","jenkinsci","juc"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2013-05-06T00:00:00.000Z","id":"d09b3edf-14fb-5979-adf4-e44e21565cba","slug":"/blog/2013/05/06/giving-back-to-the-community-3-ways-to-keep-jenkins-growing/","strippedHtml":"With more than 600 plugins, Jenkins has a vibrant community and we’re dependent on YOU to keep it that way. Here are 3 ways you can give back to the community to ensure that everyone benefits and Jenkins keeps growing…​\n\nGiving it back to the community #1: vendor+community=win\n\n+\nJenkins is becoming ubiquitous enough that tool vendors and service providers often find their users asking them to provide Jenkins plugins. The challenge for these companies is that they don’t necessarily possess the necessary Jenkins expertise to do one. +\n +\n\n+\nHere at the Jenkins project, what we are trying to do is to work with these people to deliver a plugin. It gets the job done a whole lot more quickly if the vendor brings in their expertise on their tool/services and we bring in our expertise on Jenkins plugin development. +\n +\n\n+\nFor example, we recently worked with https://www.soasta.com/press-releases/soasta-and-cloudbees-partner-to-deliver-first-jenkins-plugin-for-continuous-integration-on-mobile-platforms/[SOASTA] to help them open-source the plugin they developed in house, then help them add a whole bunch of new functionalities. By open-sourcing a plugin in the Jenkins project, vendors win as the community helps fix bugs and improve plugins. The Jenkins project wins by building relationship with vendors. And finally the users win by having more integrations. +\n +\n\n+\nSo the next time you ask your vendor to provide a Jenkins integration, please tell them to drop us a note, and we are happy to talk. +\n +\n\nGiving it back to the community #2: scratch your itch and take credit\n\n+\n\n+\nIf you are working for a company and hacking some Jenkins plugins for your team, then you should definitely consider contributing those changes back. Let’s take https://developer.sonymobile.com/2012/11/22/sony-contributes-to-jenkins-software-tool/[Robert and Tomas] for example, who contributed a number of significant plugins from Sony Mobile. +\n +\n\n+\nThe company wins, because it shows off their technical excellence. Plus the flexibility to let engineers work on these OSS projects helps them retain and attract high-caliber developers. It also lets the community shoulder some of the burdens of maintaining plugins.\n\n+\nYou win, because now you have more things to show to future employers. After all, GitHub is your new resume! And when you aren’t sure how to go about implementing a feature or fixing a bug, open-sourcing your plugin lets us jump in and get you unstuck.\n\n+\nThe community wins, thanks to your new awesome plugin.\n\n+\nBesides all of those pragmatic reasons, when you share something with others and they tell you how much it helped them, even if it’s just one or two people, it’s a deeply moving experience.\n\n+\n+\n\n+\nIt just has so many advantages, it’s a no brainer! +\n +\n\nGiving it back to the community #3: contribute by proxy\n\n+\n\n+\nIf you are working for a company, wanting to see particular features/integrations in Jenkins but don’t have time to do it yourself, there’s yet another way, and that’s to contribute by proxy. +\n +\n\n+\nThe idea is that you contract with those who already know how to develop Jenkins plugins, and you have them produce/improve Jenkins plugins in open-source. https://wiki.jenkins.io/display/JENKINS/Praqma[Praqma] is a great example of one such company. They are well connected in the community, with lots of experience under their belts, and your company takes the credit for the work. There are also a number of individuals who can do this for you. +\n +\n\n+\nWhy give it away something for free when you paid for it, you might ask. That’s because the code sitting in house rots when it’s not maintained by anybody. In contrast, when the rest of the world can hack on your code, you get occasional random bug fixes by strangers (the worst case), and sometimes it gets its own life (the best case.) +\n +\n\n+\nIf this way of giving back suits you better, feel free to send an e-mail to https://jenkins.361315.n4.nabble.com/Jenkins-dev-f387835.html[the dev list].","title":"Giving Back to the Community:  3 Ways to Keep Jenkins Growing","tags":["development","core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-05-17T00:00:00.000Z","id":"d4cc6e82-0d26-573b-9f82-b07748c5f1dc","slug":"/blog/2013/05/17/continuous-information-jenkins-newsletter-vol-4/","strippedHtml":"Volume 4 of Continuous Information came out last night. It contains insights and highlights from founder Kohsuke, the latest growth stats, upcoming event info, Jenkins resources, and more.\n\nHighlights:\n\nJenkins has nearly 20,000 more active installations than it had last June, up from 43,500 to more than 61,000\n\nNearly 100 plugins have been added since late last Fall when we did the last Jenkins survey. Now there are more than 730 plugins\n\nBay Area JUC (Oct 23), JUC Israel (Jun 6) and several other Jenkins events around the world have open registration\n\nLatest, greatest Jenkins improvements include a new LTS based on 1.509, more context menu improvements, and controller/agent data transfer performance improvement\n\nThere’s also a Security advisory out recommending upgrade to at least 1.502\n\nA plethora of Jenkins and Continuous Delivery resources\n\n+\n +\nhttps://pages.cloudbees.com/index.php/email/emailWebview?mkt_tok=3RkMMJWWfF9wsRow5%2FmYJoDpwmWGd5mht7VzDtPj1OY6hBomJr6JK1TtuMFUGpsqOOqSDhcUEZVk0w%3D%3D[View the full newsletter], and then https://www.cloudbees.com/jenkins/jenkins-ci/jenkins-newsletter.cb[sign up to receive it yourself].\n\n+\n +\nAnd if you have content to feature in a future newsletter, please mailto:continuous-information@cloudbees.com[email us]. +\n +\n +\n +\n +\n +","title":"Continuous Information - Jenkins Newsletter vol. 4 ","tags":["general","just for fun","links","meetup","news","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2013-05-22T00:00:00.000Z","id":"705feeb0-19df-50df-9707-c5368ab86dcb","slug":"/blog/2013/05/22/jenkins-user-conference-israel-coming-june-6/","strippedHtml":"Your favorite Butler will visit Israel on June 6 for the Jenkins User Conference Israel. More than 200 people have already registered to hobnob with other Jenkins users and eat like kings.\n\nThe agenda is up here. You’ll find a great list of speakers from Israel, Europe and the US to compliment a plethora of treats. There will be an ice cream break, fruits break, beer break and special chef lunch. And everyone gets a limited-edition JUC Israel t-shirt, designed by the t-shirt-design gurus at JFrog.\n\nFeatured speakers:\n\nKohsuke Kawaguchi, the creator of Jenkins (formerly, Hudson) and elite architect at CloudBees, will deliver a keynote about the current state and the future roadmap of Jenkins.\n\nHans Dockter, the creator of Gradle and the founder of Gradleware will speak about next generation build tool to CI server integration.\n\nFred Simon, JFrog’s co-founder and Chef architect will share JFrog’s vision of the future of continous integration in the cloud.\n\n**\n\nMany thanks to lead sponsors JFrog and CloudBees, who have put a lot of time and energy into organizing the conference. Thanks also to sponsors Cloudify and White Source for showing their support for Jenkins!\n\nRegister here.\n\nCan’t make it to Israel? Here are more Jenkins events:\n\nMoving to Continuous Delivery in the Enterprise — June 10, London\n\nJenkins Meetup — June 15, Munich\n\nJenkins User Event — September 6, Copenhagen\n\nJenkins User Conference — October 23, Palo Alto, CA","title":"Jenkins User Conference Israel - Coming June 6","tags":["general","just for fun","meetup","news","jenkinsci","juc"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2013-06-21T00:00:00.000Z","id":"24926dd2-b6f9-5057-9f68-59a583212c04","slug":"/blog/2013/06/21/reducing-the-of-threads-in-jenkins-ssh-slaves/","strippedHtml":"+\nAs the usage of Jenkins expands, we started seeing users who run multiple 100s of agents on one controller, and thus it became a lot more important for us to scale well to even larger number of agents. +\n +\n\n+\nWhile I was looking at the thread dump of a large system, I started noticing that there are a large number of threads lying around pumping `+InputStream+` and writing to another `+OutputStream+`. On Linux, each thread occupies 2MB just for its stack size, so if we can eliminate some of them, it'd be a good saving. +\n +\n\n+\nSo this morning, I tackled one source of such waste. +\n +\n\n+\nJenkins has https://wiki.jenkins.io/display/JENKINS/SSH+Slaves+plugin[the ability to launch agent on a remote server via SSH] for the longest time, and to simplify this, we've been using a https://github.com/jenkinsci/trilead-ssh2[pure-Java implementation of SSH client]. +\n +\n\n+\nTo cut the long story short, I was able to eliminate two pump threads per every SSH connection. Furthermore, when it runs on the upcoming Jenkins 1.521, it'll save one more thread per every SSH connection. So if you have 100 agents connected through SSH, this alone saves up 600MB of memory. That's pretty good for a few hours work! +\n +\n\n+\nIf you run a lot of agents, be sure to pick up version 0.27 of https://wiki.jenkins.io/display/JENKINS/SSH+Slaves+plugin[the SSH agents plugin] to take advantages of this! +","title":"Reducing the # of threads in Jenkins: SSH agents","tags":["development","news","plugins","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-07-01T00:00:00.000Z","id":"f1db07c0-565b-5067-b0a9-2002cb14ebb5","slug":"/blog/2013/07/01/office-hours-this-week-git-plugin-refactoring/","strippedHtml":"This Wednesday’s Jenkins office hours is all about the Git plugin refactoring that’s going on.\n\nGit plugin is one of the most popular plugins out there, and it’s been around for quite some time. Combine that with the fact that there are so many different ways to use Git, it was inevitable that Git plugin became quite a capable but complex plugin over time. It has more than a dozen options and switches, and it was becoming harder to use and harder to maintain.\n\nAs early as 2010, some of us have already been saying that we should refactor this plugin, but none of us have managed. The good news is, I finally started tackling this problem last month while I was in London, and I’ve made a steadily progress since then and I’m ready for a wider review.\n\nSo we’ll spend this Wednesday going over the changes. I’ll show you how the new version looks, what changes are made internally, and what it’ll enable us in the future.\n\nIf the Git plugin is important to you, and you want to see what’s cooking, please join us in the office hours on Google Hangout.\n\nLooking forward to seeing you!","title":"Office hours this week: Git plugin refactoring","tags":["development","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-07-11T00:00:00.000Z","id":"91b81685-43b0-521b-8dbf-88dae7c9c953","slug":"/blog/2013/07/11/jenkins-user-conference-israel-summary/","strippedHtml":"+\nhttps://www.cloudbees.com/jenkins/juc2013/juc2013-israel.cb[Jenkins User Conference in Israel] was held this year on a different venue than the last year, because we have grown! I believe Shlomi Ben-Haim of JFrog said in his opening speech that the attendance has grown more than 50%, despite the ticket price increase. +\n +\n\n+\nThis year, the event was held at a former Kibbutz turned into an event facility. This was rather fit for Jenkins for both emphasizes the community. The auditorium was big, the sky was bright & clear, and it was a wonderful day. JFrog folks even made a few Jenkins drapes (that I eventually brought back with me, so expect to see them) +\n +\n\n+ +\n\n+\n+\n\n+\nFor me, talks like one from Haggai are more interesting, as it shows me how Jenkins works in a domain that I’m not familiar with (in this case, .NET). And if you are Jenkins users, there are all sorts of talks, ranging from talks on CLI/XML interface of Jenkins (stuff for those who are writing tools and scripts that interface with Jenkins) to how someone managed user interface automation testing with Jenkins. Another talk that I got hooked was a talk from https://www.cloudbees.com/jenkins/juc2013/juc2013-israel-abstracts.cb#YardenaMeymann[Yardena Meymann] about the review board Jenkins plugin that she wrote that lets you test out code change under the review, much the same way https://buildhive.cloudbees.com/[BuildHive] or https://wiki.jenkins.io/display/JENKINS/Github+pull+request+builder+plugin[GitHub pull request builder plugin] does it for GitHub pull requests, but for Subversion. I also liked the 45 minutes format better, which helps cut the fat and take people straight to the point. +\n +\n\n+\nOutside talks, Israeli people kept me busy! They cornered me on multiple occasions and we had a lot of interesting conversations, so much so that I missed about half the talks! I just wish we had coordinated this upfront so that I could have visited them while I was there. This also made me wonder what if we designate one corner of the site and did a series of birds-of-feather around specific topics. This led me to try https://www.meetup.com/jenkinsmeetup/events/126595572/[Jenkins Scalability Summit] in the upcoming JUC Palo Alto. +\n +\n\n+\nhttps://www.cloudbees.com/jenkins/juc2013/juc2013-israel.cb[All the slides and videos are available], if you want to take a look --- be forewarned that some of them are in Hebrew. +\n +\n\n+\nIf you aren’t in Israel but like the concept of JUC, looking forward to seeing you in the upcoming https://www.eventbrite.com/event/6367028955[Jenkins User Conference in Palo Alto] this October.","title":"Jenkins User Conference Israel Summary","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-07-24T00:00:00.000Z","id":"09e534e0-e44f-586f-90d1-da7658ecc78a","slug":"/blog/2013/07/24/faster-slave-classloading/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Chloride[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Calcium_chloride_CaCl2.jpg/320px-Calcium_chloride_CaCl2.jpg[image]] +\n\n+\n+\n\n+\nJenkins comes with https://github.com/jenkinsci/remoting[the remoting library] that it uses to communicate between a controller and agents. This is a pretty awesome library, I think, which served us well. +\n +\n\n+\nOne of the things this remoting layer does it to transfer the Java byte code on demand from the controller to agents on demand. This approach helps us keep agent deployment simple, as you don't have to keep the controller and all the agents in sync, but it also made the agent start-up slower, because none of the byte code loaded to agents are kept around. It was all forgotten once the agent gets disconnected. +\n +\n\n+\nWhen agents are static and stays online for hours, this wasn't a problem at all. But as more and more agents become elastic (think EC2 or CloudBees DEV@cloud), This delay is becoming more and more noticeable. A similar issue happens when the Maven project type, which uses the same remoting library to talk to the running Maven build. +\n +\n\n+\nAnother related performance bottleneck is the round-trip latency. When your agent is far away from a controller, every classloading would incur a network round-trip, and it can add up quickly. This is because Java classloading abstraction is funamentally chatty. +\n +\n\n+\nJesse and I https://issues.jenkins.io/browse/JENKINS-15120[started seriously thinking about this problem] last year, and we've https://github.com/jenkinsci/remoting/pull/10[kept a branch going] to address this problem. +\n +\n\n+\nAfter several trans-atlantic hacking during flights, we were finally able to release this in 1.519. +\n +\n\n+\nStarting this version, the remoting layer uses a local jar file cache to store jar files that were downloaded from the controller. This pretty much eliminated the need to send class files over the wire. +\n +\n\n+\nIn addition, the controller will analyze class files as a agent request them and \"push down\" information about how related other classes should be loaded by the agent. This speculative \"prefetching\" saves the agent from making an expensive network round trip to the controller. +\n +\n\n+\nIn https://jenkins-ci.361315.n4.nabble.com/Efficient-class-jar-prefetching-in-remoting-td4665943.html[my benchmark using Maven builds, the prefetching cut the # of roundtrips to about half]. +\n +\n\n+\nIf you do a lot of Maven builds, or if you have elastic agents, we highly encourage you to upgrade. +\n +\n +\n +\n +","title":"Faster agent classloading","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-07-24T00:00:00.000Z","id":"4e7a1585-88fc-5af9-bed4-a44535c9067f","slug":"/blog/2013/07/24/jenkins-user-event-in-copenhagen-on-september-6/","strippedHtml":"Seize the opportunity to join the Jenkins community!\n\nJust like last year, the Scandinavian Jenkins Conference will be in Copenhagen, Denmark, hosted by Praqma and sponsored by CloudBees, Sony, Switch::Gears, and PRQA. The open source community will gather on September 6th for a full day of networking and knowledge sharing at The Department of Computer Science at The University of Copenhagen.\n\nBased on last year’s success, Jenkins developers, architects, business managers, etc. from all over the world will gather to exchange experiences and promote the open source platform. As a special feature the conference will include an opening keynote from Jenkins founder Kohsuke Kawaguchi as well as other industry pioneers, who will take the podium to present findings within the latest technology, best practice, hand-on experiences, etc.\n\nTo get updates on the conference follow the JCI13Blog where you can view the latest news on venue and speakers.","title":"Jenkins User Event in Copenhagen on September 6","tags":["general","core","meetup","news","juc"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2013-07-31T00:00:00.000Z","id":"eee5787d-09ee-5b52-9bbc-c63d93d6bea0","slug":"/blog/2013/07/31/jenkins-user-conference-palo-alto-2013/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Palo_Alto%2C_CA_welcome_sign.JPG/180px-Palo_Alto%2C_CA_welcome_sign.JPG[image] +\n\n+\n+\n\n+\nJenkins User Conference is back to California again! +\n +\n\n+\nJust like the last two years, this full day event packs talks from Jenkins developers and users, and it would be a great opportunity for Jenkins users to get to know each other and share their experiences. +\n +\n\n+\nhttps://www.cloudbees.com/jenkins/juc2013/juc2013-palo-alto.cb[The agenda is already posted], covering everything from robotics to mobile developments, effective management of Jenkins instances to branching techniques. I'm personally looking forward to a number of talks from serious large-scale users, and https://www.cloudbees.com/jenkins/juc2013/juc2013-israel.cb[JUC Israel] was of any indication, it'd be a great opportunity to get feedback from people. +\n +\n\n+\nThis year, we are moving the event to a weekday (Oct 23rd) to see if it helps or hurts the attendance. Similarly, the event is now in Palo Alto, as opposed to San Francisco. The site also happens to be a former Sun Microsystems headquarter, a place of some nostalgic value to me. +\n +\n\n+\nI am also very happy to see a number of active community members https://www.cloudbees.com/jenkins/juc2013/juc2013-palo-alto.cb[signing up their employers to sponsor the event]. These will help us manage the cost of the event. +\n +\n\n+\nSo really, all that's needed is YOU! https://www.eventbrite.com/event/6367028955[Please register for the event] (I believe the early bird price stays until this Friday), and looking forward to seeing you.","title":"Jenkins User Conference Palo Alto 2013","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-08-01T00:00:00.000Z","id":"ed0ec999-88b5-523c-8e18-21dc59122d1c","slug":"/blog/2013/08/01/2-version-control-plugins-in-beta-testing-before-a-major-release/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/4/49/Testing22222.jpg[image,width=150,height=160] +\n\n+\n+\n\n+\nhttps://wiki.jenkins.io/display/JENKINS/Git+plugin+2.0+beta+testing[Git plugin] and https://wiki.jenkins.io/display/JENKINS/TFS+plugin+2.0+beta+testing[TFS plugin] are calling for interested parties to try out their 2.0 beta binaries before they get released. +\n +\n\n+\nGit plugin 2.0 contains a major refactoring and UI simplifications, and TFS plugin contains a rewritten polling logic that does not require a workspace. +\n +\n\n+\nIf you think you'd benefit from these changes, please head to their respective beta testing page and try out the new bits, while we can still change them.","title":"2 version control plugins in beta testing before a major release","tags":["development","feedback","releases","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-09-05T00:00:00.000Z","id":"3e06cc8d-87c3-5968-b579-1eed57d37062","slug":"/blog/2013/09/05/extreme-feedback-lamp-switch-gear-style/","strippedHtml":"+\nThis is a guest post by https://twitter.com/dvaske[Aske Olsson] +\n +\n\n+\nExtreme feedback is an incredibly powerful way to drive quality and accelerate your developer fast feedback loop. +\n +\n\n+\nHaving eXtreme Feedback Devices (XFDs) hooked up to your Jenkins jobs gives everyone on your team instant insight into the current software state. At customer after customer we've seen extreme feedback devices drive significant incremental productivity gains, so about a year ago we started talking about taking the concept mainstream and making it easily available to any development team. So, as a small side-project, we've decided to scratch our own itch and developed an easy-to-deploy, Linux-based, laser-cut, extreme feedback device, specifically designed for Jenkins. It infers a feeling of urgency when the build is broken, and a better sense of a achievement once the problem is fixed. Just connect the XFD to your network, install the \"extreme feedback plugin\" on your Jenkins server and configure which jobs to feedback extremely. +\n +\n +\n\n+\nAt the Jenkins Code Camp in Copenhagen today (with Kohsuke) we've made the lamp speak the name of the developer who broke the build :), improved the plugin's UI in Jenkins, and gotten the the lamp's display to list all the developers who contributed to the last change. Of course you can contribute too, just fork the repositories at https://github.com/switchgears/extremefeedbacklamp[here] and https://github.com/switchgears/extreme-feedback-plugin[here] and create a pull request. +\n +\n\n+\nIf you're interested in trying out extreme feedback in your own team you can order https://web.archive.org/web/20180826231109/https://gitgear.com/xfd/[your own XFD lamp] +\n +\n\n+","title":"Extreme Feedback Lamp, Switch Gear style","tags":["development","feedback","guest post","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-09-09T00:00:00.000Z","id":"95af2bb9-3830-5c68-9b16-482e5c1e65e7","slug":"/blog/2013/09/09/loader-io-plugin-developer-interview/","strippedHtml":"This is a guest post by Mike Rowan, VP R&D at SendGrid.\n\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/loaderio.png[image,width=150,height=150] +\n\n+\n+\n\n+\n*Q: Tell us a bit about what your service and plugin do. Who is it for? What are the highlights of your plugin?* +\n +\n\n+\nA: https://loader.io[Loader.io] is a simple-to-use cloud-based load testing service. The service is designed for developers and people who need to ensure applications are performing as they should. It allows developers to perform large-scale load tests on demand, which lets them understand the scalability and performance of their applications. We realize Jenkins is the preferred build service for a lot of our users, and we know providing a way for them to implement, measure and improve application performance during the continuous build cycle is important. So we wrote a Jenkins plugin that allows load testing to be brought into the continuous build and deployment process with ease. +\n +\n\n+\nQ: Did you have to convince your boss/lawyers to open-source your plugin? What was the pitch?*\n\n+\nA: No, at SendGrid our focus is always to help make developers’ lives easier, and when we can, we like to provide tools that they can hack on. Since the Jenkins platform is itself an open source project, following the same model to provide our plugin made perfect sense. In addition, we encourage others to build on our work, help improve it and ultimately make it better for everyone using it. +\n +\n\n+\nQ: How did you learn how to write a plugin?\n\n+\n+\n\n+\nA: We use the Jenkins platform ourselves, and we leverage a number of the plugins available. Having access to these and the Jenkins documentation gave us a great head start. It was an easy decision to write the Jenkins plugin for loader.io, and the Jenkins community provided both detailed instructions as well as support when we needed it. +\n +\n\n+\nQ: Any gotchas in the experience of developing a plugin that you want to share?\n\n*\n\n+\nA: The overall process of developing the plugin was straightforward and simple, but we did run into some scope creep in the middle of the dev process. We found that since the platform was so easy to write for, it made us keep adding more and more features. Usually this is good, but in the case of our project, we wanted to provide the most value as quickly as possible. So we scaled back, focused on solid execution for the most important features, and are already preparing to launch a new version with the things we reserved for post v1 availability. +\n +\n +\n\n+\nQ: What is the reaction from users so far?\n\n+\n+\n\n+\nA: The users we’ve spoken with love the plugin. In addition we’ve already gotten great feedback from some community members on “nice to have’s” in the plugin, some of which we’re already working on. +\n +\n\n+\nQ: What tips do you share to those who are interested in writing plugins?\n\n+\n+\n\n+\nA: If you have a service that provides value in the build, deployment and post deployment process, then you should be writing a Jenkins plugin. Two things are important for anyone writing a plugin: 1) be sure the plugin you’re writing is going to provide true value (if you need it yourself this is a good sign), and 2) make sure you understand the scope of the project and deliver core features and value first, then focus on some extra things. Providing a valuable plugin sooner than later will help you identify all the right additional features to include, especially when collecting live community feedback. +\n +\n\n+\nSome of the things we focused on early in the process were to identify the core features, and more importantly to make it very easy for users of Jenkins to install, use and interpret the loader.io plugin and results. We wanted to allow users to leverage our plugin for multiple environments and builds with system and global credentials. To do this, we decided to make use of the Credentials plugin (https://wiki.jenkins.io/display/JENKINS/Credentials+Plugin), which is a heavily-adopted plugin that provides a standardized API for plugins to store and retrieve credentials. This plugin allows our users to add and use different credentials in one single Jenkins environment. In addition, we created a new re-run feature which, when used with continuous build and testing, provides a deep view into the performance of an application over time. Finally, we wanted to bring the same UI experience users have in our environment into Jenkins, which we did by preserving the load test report model and making it function the same in the Jenkins UI. Doing this makes it easy for users to have consistency between the UIs and more easily understand the results regardless of where they’re viewing them. +\n +\n\n+\nIt’s very easy to write a Jenkins plugin - I hope these insights will encourage you to write your own. +\n +\n\n+\nps - We’d love your feedback too. Check out our newly-released https://wiki.jenkins.io/display/JENKINS/loaderio[Jenkins plugin] for loader.io and let us know what you think.","title":"Loader.io plugin developer interview","tags":["development","guest post","interview","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-09-11T00:00:00.000Z","id":"af50ce68-d1b8-5cfd-b46a-60bd21072341","slug":"/blog/2013/09/11/behind-the-scenes-of-the-jenkins-user-conference-palo-alto/","strippedHtml":"+\nThe Jenkins User Conference (JUC) Palo Alto is less than two months away! +\nThe organizing committee, 13 sponsors and 16 speakers have been hard at work coordinating a fun and educational day for the Jenkins community on October 23. Check out the https://www.cloudbees.com/jenkins/juc2013/juc2013-palo-alto.cb[agenda] and see for yourself! Speakers are traveling from around the globe to take part in this conference, including a number of usual suspects. Dedicated Jenkins experts are coming in from London, Israel, Estonia, Sweden, Taiwan, Boston, Seattle, Texas and, of course, the local Bay Area. +\n +\n\n+\nNew this year, we’ll live stream an entire track, courtesy of our Silver sponsor, https://confreaks.com/[Confreaks]. +\n +\n\n+\nIn keeping with tradition, every year we create a one-of-a-kind Jenkins t-shirt for JUC attendees. This year we are sticking with the ever-popular landmark of Palo Alto, Stanford University. And we are going bright…hope you like (Jenkins) red! +\n +\n\n+ +\n\n+\n+\n\n+\nWe are always on the look out for unique and creative ideas for Jenkins t-shirt designs. If you have a cool design in mind please send it to `+events@lists.jenkins-ci.org+`. You may just see the Jenkins community wearing your design at next year’s conference. +\n +\n\n+\nAlso check out the great Jenkins collectible that https://www.cloudbees.com[CloudBees], the Platinum sponsor, is giving out at the CloudBees table (I heard he looks even better in person). Quantity is limited so be sure to pick one up at the CloudBees table. You might have to sing, dance, bark or just complete a survey in exchange for the Jenkins bobble head. Most importantly, don’t forget to have Kohsuke sign it to make it official. +\n +\n\n+ +\n\n+\n+\n\n+\nJUC isn’t complete without some good BEvERages. Gold sponsor https://www.bds.com[Black Diamond Software] is ponying up a keg of beer after the conference. Leave us a comment (below) about what kind of beer strikes your fancy and it might just be there. +\n +\n\n+\nIf you’ve read this entire blog and have not yet registered to https://www.eventbrite.com/event/6367028955[attend], here’s additional incentive for you. Use discount code *BEE-JUC* to get early bird pricing, that’s a $26 saving off the current price of $80. Discount expires October 4, 2013. +\n +\n\n+\nAs JUC Conference Chair, I am always looking for ways to improve JUC. Leave your comments below on ways we can make this ‘Your’ conference. +\n +\n\n+\nLooking forward to seeing you at JUC on October 23. +\n +\n\n+\nAlyssa Tong +\nJUC Conference Chair","title":"Behind the Scenes of the Jenkins User Conference Palo Alto!","tags":["general","meetup","news","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-09-16T00:00:00.000Z","id":"51160967-83d6-5930-8771-417c2ae8f20e","slug":"/blog/2013/09/16/continuous-information-jenkins-newsletter-vol-5/","strippedHtml":"+\n +\nThe latest edition of Continuous Information is out for your reading pleasure. +\nHighlights: +\n\nHealth Check-up for Jenkins: Kohsuke’s Tips on Keeping Jenkins Happy\n\nJenkins continues to take over the world, with more than 65,000 active installations and more than 800 plugins\n\nEvents: Jenkins User Conference – 10/23 in Palo Alto, CA (use discount code BEE-JUC); Jenkins Scalability Summit 10/24; and more\n\nJenkins made the SD Times 2013 Top 100!\n\nWhat’s new in Jenkins? The hottest new Jenkins improvements…\n\nHow to build your own Jenkins Traffic Light\n\n+\n +\nhttps://pages.cloudbees.com/index.php/email/emailWebview?mkt_tok=3RkMMJWWfF9wsRonvanBZKXonjHpfsX%2B4%2B0uT%2Frn28M3109ad%2BrmPBy82IoIWp8na%2BqWCgseOrQ8kFQLV9C%2BRs0Vq6c%3D[Read the whole newsletter], and then https://www.cloudbees.com/jenkins/jenkins-ci/jenkins-newsletter.cb[sign up to receive it directly when it comes out]. +\n +\n +\nPS - We love contributions to Continuous Information, so if you have a Jenkins tip, trick, or plugin you’d like to feature, please mailto:continuous-information@cloudbees.com[email us].","title":"Continuous Information - Jenkins Newsletter vol. 5","tags":["general","just for fun","meetup","news","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2013-09-23T00:00:00.000Z","id":"897493a6-04e7-556a-b3c1-fe8522ac41a9","slug":"/blog/2013/09/23/literate-builds-wtf/","strippedHtml":"(This is a guest post by Stephen Connolly)\n\nEvery developer, at some stage, will be handed a project to maintain that somebody else was responsible for. If you are lucky, the developer will not have left the organization yet and you get a brief Knowledge Transfer as the developer packs up their desk before heading on to their new job. If you are unlucky, you don’t even get given the details of where the source code is hiding.\n\nNow begins the detective work, as you try to figure out how to build and release the project, set up Jenkins jobs to build the project and run the tests…​\n\nIt doesn’t have to be this way, you know!\n\nWhat if I told you there was a file sitting at the top level that told you exactly how to build the project and do the important things? You’d be interested, wouldn’t you?\n\nWhen I tell you it’s the README file? “But that’s all lies. Nobody keeps that up to date. Argh!!!”\n\nBut what if Jenkins reads the README file and uses it for the build definition? Now you not only have a CI system ensuring that the build definition is correct, but you have less work to do setting up the job.\n\nWhat if, because the build definition is now in Source Control, you can have Jenkins create jobs for each branch with ease? The joy of cheap branches that modern source control systems such as GIT and Mercurial give us, no longer comes with the pain of having to create Jenkins jobs for each branch (and more pain having to remember to tidy up when the branch is gone.)\n\nThat is the promise delivered by the Literate plugin.\n\nHow does it work?\n\nFirst of all, because Jenkins will be looking at all your branches, you need a way to tell Jenkins which branches it makes sense to try and build. For example, if your project lives on GitHub, you are unlikely to want the gh-pages branch to be treated like a branch of your actual code, and there are going to be branches that have a README file, but not one that Jenkins understands, so we will want to ignore them too.\n\nYou tell Jenkins that a branch is one to build by putting a marker file in the root of the branch. By default the marker file is called.cloudbees.md. If the marker file is present and empty, then the literate job type will assume the build instructions are in README.md. If the marker file is present and has build instructions, then the literate job type will just use those instructions.\n\nIn order to make it easy to provide the instructions, there is rather minimal formatting requirements for a literate description of a project’s build commands.\n\nThe minimal description is just a section with the word build and a verbatim code block in that section. Here is the obligatory minimal “hello world” project description:\n\n# Build\n\n    echo hello world\n\nor if you don’t like indenting you could use the GitHub style triple-back-tick\n\n# Build\n\n```\necho hello world\n```\n\nPart of what makes this a literate style of build description is that you can freely intersperse the description of what and why the commands do with the actual commands, e.g.\n\n# Build\n\nWe will greet the world with our great literate project description\n\n    echo -n \"Hello\"\n\nNow that we have announced our intention to greet some people, we need to qualify exactly who we are greeting\n\n    echo \" world\"\n\nThat was just perfect. Time for a cup of tea\n\nThe first section heading containing the word build identifies the section that is assumed to be the build instructions. (The keyword that is searched for is configurable, but not yet exposed in the literate plugin’s UI). The following is also a valid README.md for printing hello world:\n\nOur super hello world project\n=============================\n\nThis is a project to say hello to the world\n\nHow to build\n------------\n\nYou can build this project by running the following command:\n\n    echo hello world\n\nCredits\n-------\n\nThis project would not have been possible without the existence of Assam loose leaf tea.\n\nNow this is all very well, but what about if you need different instructions for building on Windows versus on Linux, and for that matter how does Jenkins know where we should build this project. Plus Mr Joe Random needs to know what he needs to install on his machine to build it for himself.\n\nThe first section containing the word environment identifies the section that contains the details of the environments to run the build on.\n\nHello world project\n===================\n\nThis is a simple hello world literate project\n\nEnvironment requirements\n------------------------\n\nThe project is built and tested by Jenkins on the following build environments, so it is known that the build instructions work on the following environments:\n\n* `windows`\n* `linux`\n\nHow to build\n------------\n\nThe build instructions are platform dependent:\n\n* On `windows`:\n\n        echo \"hello world\"\n\n* On `linux`:\n\n        echo hello\\ world\n\nWhen Jenkins sees bullet points in the environment section it assumes each bullet point corresponds to an environment to run the build on. Each environment is specified by at least one code snippet which helps define the requirements of the environment. By default Jenkins will look for tool installers with the same name as the labels. If it cannot find any matching tool installers it assumes that the labels are Jenkins agent node labels. (The strategy is plugable, but not yet exposed in the UI of literate builds)\n\nWhen you have multiple environments on which to build and test, you have two choices on your build instructions. You can either:\n\nHave one and only one set of commands that work on all environments; or\n\nHave bullet points that cover all the specified environments.\n\nSo for example, if you are building on the following environments:\n\nwindows, java-1.6, ant-1.7\n\nwindows, java-1.6, ant-1.8\n\nwindows, java-1.7, ant-1.8\n\nlinux, java-1.7, ant-1.7\n\nlinux, java-1.7, ant-1.8\n\nYou need to have bullet points in your build section that can match each of those options, but as long as there is a match for every option you are ok. So for example:\n\nANT version finder\n==================\n\nFinding out the version of ANT on various platforms\n\nEnvironments\n------------\n\nNesting bullet points multiplies out the options\n\n* `windows`\n    * `java-1.6`\n        * `ant-1.6`\n        * `ant-1.7`\n    * `java-1.7`, `ant-1.8`\n* `linux`, `java-1.7`\n    * `ant-1.7`\n    * `ant-1.8`\n\nBuild\n-----\n\nThe first match with the highest number of matches wins, so we want windows to get special treatment:\n\n* `windows`\n\n        call ant.bat -version\n\n* `java-1.7`\n\n        ant -version\n\nWe could have picked `linux` for the above if we wanted, but this matching will have the same effect and better illustrates how matching works.\n\nThat is a mostly complete detail of how the build and environment sections work. In general everything except verbatim code blocks and bullet points with code snippets get ignored.\n\nThere are other sections that the literate project type allows for, these are called “task” sections. We haven’t written the code to support them yet, but the idea is that these will work a bit like basic build promotions with the promoted builds plugin. There will be a UI in Jenkins that lets you kick off any of the task sections that you define as being valid for the job type, in pretty much exactly the same was as the promoted builds plugin works.\n\nAfter that, everything else in the README.md is ignored.\n\nHow do I get the test results into Jenkins?\n\nJenkins is not just about build and test. A lot of the utility in Jenkins comes from the additional reporting plugins that are available for Jenkins. (The build step ones are less relevant with literate style projects because you want to give people consuming the content instructions they can also follow)\n\nSo there is additional metadata about your project that you want to give to Jenkins. We put that metadata into a folder called.jenkins in the root of your source control.\n\nThere are two levels of integration that a Publisher/Notifier can have with the literate project type. The first level is a basic XML description of the plugin configuration. If you have ever looked at the config.xml of a Jenkins job, you will be familiar with this format.\n\nIf we have a Maven project and we want to collect the Unit test results in Jenkins we might have a README.md like this:\n\nMaven project with tests\n========================\n\nEnvironments\n------------\n\n* `java-1.7`, `maven-3.0.5`\n\nBuild\n-----\n\n```\nmvn clean verify\n```\n\nAnd then we create a.jenkins/hudson.tasks.junit.JUnitResultArchiver.xml file with the following:\n\n**/target/surefire-reports/*.xml, **/target/failsafe-reports/*.xml\ntrue\n\nThe literate plugin adds an Action to all Free-style projects that allows exporting these XML configuration snippets in a.zip file for unpacking into your project’s source control. Each publisher/notifier has its own file, so it should be easy to mix and match configuration across different projects and enable/disable specific publishers just by adding/removing each publisher’s file.\n\nThe XML itself can be a bit ugly, so there is a second level integration, where a Publisher/Notifier plugin can implement its own DSL. The literate plugin ships with two such DSLs. One for archiving artifacts and the other for JUnit test results. So the above XML file could be replaced by a.jenkins/junit.lst file with the following contents\n\n**/target/surefire-reports/*.xml\n**/target/failsafe-reports/*.xml\n\nNot everything makes sense in source control though…​\n\nThere are always going to be things that you need to configure in Jenkins. So for example there may be some sources of branches that you don’t trust. A good example would be pull requests on GitHub. We have a concept of branch properties in the literate project type that will allow defining what exactly a trusted branch source should be allowed do and what an untrusted branch source should be allowed do. It does not make sense for that information to be embedded within the untrusted branch itself.\n\nSimilarly coordination between different Jenkins projects is something that does not make sense in source control. The names of those Jenkins projects (and even their existence) is not knowable from source control. It does not make sense to keep that information in source control.\n\nInformation about how to map the description of the build environment in the README.md file to the build environments available to Jenkins does not make sense in source control because your Jenkins node configuration details may change over time.\n\nIn other words, literate projects do not remove the need to configure things in Jenkins. They do however remove a lot of the need, and especially the need to tweak the exact build commands and the location of where build results should be picked up from.\n\nWhat’s not done yet?\n\nHere is a list of some things I want to see for literate builds:\n\nA literate build step so that people can use some of the literate magic in their free-style projects while they migrate them to literate-style\n\nSupport for literate task promotion flows (I think Kohsuke has signed up to help deliver this)\n\nExposing the configuration points such as the marker file name (a global config option as well as per-project override) and the keywords to search for in the README.md (this is mostly UI work)\n\nAdding in some support for other markup languages (I’d really like to see AsciiDoc formatted README parsing, e.g. README.asc)\n\nBranch properties for untrusted builds (to do things like restrict the build execution to one explicit environment, put an elastic build timeout in place, wrap the shell commands in a chroot jail, etc)\n\nBranch properties for build secrets (So that the production and staging branches can get the keys to deploy into their respective environments.\n\nCollapsing the intermediate level in the UI when there is only one build environment.\n\nEliminating the double SCM checkout when the backing SCM supports the SCMFileSystem API so that builds work even faster\n\nReusing the GIT repository cache when using GIT branch sources.\n\nSome nicer integration with GitHub (I have most of this done, but I think it would be irresponsible to release this without having the Untrusted branch properties implemented as otherwise Pull Requests could become a vector for abuse)\n\nFinishing the support for Subversion credentials migration from the legacy credentials storage mechanism to the new Credentials plugin storage mechanism (not strictly literate project related, but Subversion is still a popular SCM and until this gets done we cannot release a version of the Subversion plugin with literate project support)\n\nAdding nice DSLs for all the Publishers and Notifiers\n\nAdding SCM support to all the SCM plugins\n\nAdding branch property support for the Build Wrapper / Build Environment / Job Property plugins where that makes sense.\n\nHaving said all that, the core functionality works right now for GIT/Subversion/Mercurial on Jenkins 1.509+, and it is only by playing with this functionality that you can see how this could change the way you use Jenkins.\n\nHow do I try this out myself\n\nLast week Kohsuke set up a new “Experimental” update center in Jenkins OSS. The reason for this new update center is that we have a lot of (potentially disruptive) changes to many plugins and if we started cutting releases, users may get annoyed if they end up upgrading to these plugins until they have all been better tested.\n\nThe “Experimental” update center includes plugins that have alpha or beta in their version number, while the other update centers now exclude those plugin versions.\n\nSo if you want to play with these plugins you need to change your Jenkins instance’s update center URI to:\n\nhttps://updates.jenkins-ci.org/experimental/update-center.json\n\nI would recommend that you use a test Jenkins instance for playing with.\n\n(WARNING: shameless plug) You could also just fire up a Jenkins in the cloud using CloudBee’s DEV@cloud service and follow these handy instructions to enable access to the experimental plugins:\n\nThe 10 best bug reports on literate builds before the Jenkins User Conference next month will receive a prise from CloudBees, Inc. I was able to get a commitment that the prise would be at least a T-shirt. I am hoping to get some more swag added to the prize pool. CloudBees employees or relatives of CloudBees employees are not eligible for the bug report prise!","title":"Literate builds, WTF?","tags":["development","plugins","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-10-09T00:00:00.000Z","id":"89cb0a71-0c36-5ebe-953a-46c2fe05996e","slug":"/blog/2013/10/09/jenkins-at-netflix-juc-speaker-interview/","strippedHtml":"(This is a guest post from Gareth Bowles, a Senior Software Engineer at Netflix.)\n\n+\nimage:https://www.cloudbees.com/sites/default/files/juc/juc2013/Palo-Alto-Gareth-Bowles.jpg[image] +\n\n+\n\n+\nJenkins has been a central part of the Netflix build and deploy infrastructure for several years now, and we've been attending and speaking at JUC since it started in 2011. It's a great opportunity to meet people who are as passionate about build, test and deployment automation as we are - although as Kohsuke said last year, having all those folks in one place could be dangerous if there's an earthquake ! +\n +\n\n+\nCloudBees and the JUC Organizing Committee have put another great program together this year. We'll be doing two talks. Justin Ryan and Curt Patrick will present \"Configuration as Code: Adoption of the Job DSL Plugin at Netflix\", describing how we're shifting our users from manual job configuration via the UI, to defining their jobs as Groovy code using the https://wiki.jenkins.io/display/JENKINS/Job+DSL+Plugin[Job DSL plugin]. Justin and Curt will describe how Netflix development teams can now create and maintain complex sets of jobs for their projects with the bare minimum of coding. +\n +\n\n+\nIn my lightning talk \"Managing Jenkins with Jenkins\", I'll go over how we use Jenkins' system Groovy scripts to maintain and monitor our Jenkins controllers at a scale that couldn't be achieved with manual processes, and without the overhead of writing custom plugins. +\n +\n\n+\nAs usual, there will be a whole crew of Netflix engineers at JUC this year. If you're interested in working on build and deployment at Netflix scale, find one of us (we'll all be wearing Netflix gear) to learn more - we're hiring ! +\n +\n\n+\n+\n\n+\nhttps://www.eventbrite.com/event/6367028955[Register for JUC - October 23 in Palo Alto]. If you can't make it in person, https://www.eventbrite.com/event/8328596055[register to watch the live stream!]","title":"Jenkins at Netflix / JUC speaker interview","tags":["general","guest post","interview","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-10-09T00:00:00.000Z","id":"a739730f-a998-5e4c-9330-1c25a8390388","slug":"/blog/2013/10/09/meet-the-community-in-juc/","strippedHtml":"(This is a guest post from Owen B. Mehegan aka autojack)\n\n+\n+\n\n+\nThe Jenkins User Conference - Palo Alto is coming up on October 23rd! The schedule for talks is full, but we've been looking for a way to give other members of the Jenkins community some visibility. There are many people who have contributed to the project in various ways, whether it's contributing to core, developing plugins, writing documentation or just helping new users. +\n +\n\n+\nIf this sounds like you, we're interested in giving you 10-15 minutes to talk to the rest of the conference attendees! The format is currently undefined and may be left up to you. You could do a Q&A, talk about features you've worked on and why they were important to you, or just offer some \"pro tips\" that you've developed based on your experience. The main point is to help put faces to some of the names in the community, and also help encourage others to contribute themselves! We're thinking of having these sessions during lunch and the exhibit hour (https://www.cloudbees.com/jenkins/juc2013/juc2013-palo-alto.cb[see here for the schedule]). +\n +\n\n+\nIf you're interested in this, or know someone else who might be that I could contact, please let me (owen at nerdnetworks dot org) know! If we can get some critical mass around it then we'll go ahead. +\n +\n\n+\nThanks!","title":"\"Meet the community\" in JUC","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-10-18T00:00:00.000Z","id":"8eeba28b-eaab-5cb7-bd40-2a51a7efb759","slug":"/blog/2013/10/18/jenkins-user-conference-is-completely-full/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/alyssa.jpg[image,width=150,height=150] +\n\n+\n+\n\n+\n(This is a guest post by Alyssa Tong, the lead coordinator of Jenkins User Conference) +\n +\n\n+\nOur https://www.cloudbees.com/jenkins/juc2013/juc2013-palo-alto.cb[3rd annual Jenkins User Conference in the Bay Area] being held next Wednesday in Palo Alto is booked fully to the capacity and we couldn’t be more excited for this event! It’s going to be an amazing day of learning, talking to technology experts, networking with other Jenkins users, seeing cool demos and finding out how you can contribute to the Jenkins open source projects. +\n +\n\n+\nThis event is being held at the https://www.paloaltojcc.org/[Oshman Jewish Community Center] and registration begins at 8am. There will be breakfast and plenty of coffee to get you caffeinated. Welcoming announcement will begin sharply at 9am and the keynote address follows shortly after. We’re so excited to have https://www.cloudbees.com/jenkins/juc2013/juc2013-palo-alto.cb[thirteen sponsors] investing in and supporting the Jenkins community in this continuous integration space. +\n +\n\n+\nNew this year, there will be BoF sessions so be sure to sign up for your preferred discussion at check-in. Or suggest a topic by leaving your suggestion in the comments section below. Let us know what Jenkins topic(s) is near and dear to your heart. +\n +\n\n+\nFor those who missed out on purchasing your ticket or are unable to attend, we are happy to offer the https://www.eventbrite.com/event/8328596055[live stream] of Track 1. You can choose to watch the entire track or just specific session(s). Either way don’t forget to chat and tweet. We will also tweet live from the conference so you can follow along that way as well. Follow @jenkinsconf for the latest updates. +\n +\n\n+\nThank you to everyone for making this sold-out event possible. +\n +\n\n+\nCan’t wait to see everyone on Wednesday! +\n +\n\n+\n— Alyssa","title":"Jenkins User Conference is completely full!","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-11-08T00:00:00.000Z","id":"8e791684-d83f-5531-a36e-0e05535a827d","slug":"/blog/2013/11/08/jenkins-scalability-summit-recap/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Scale_(anatomy)[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Lepidoptera_wing.jpg/220px-Lepidoptera_wing.jpg[image] +\n]\n\n+\n+\n\n+\nThe day after https://jenkins-ci.org/content/jenkins-user-conference-completely-full[Jenkins User Conference], we held a smaller meet-up of serious large-scale Jenkins users dubbed as https://www.meetup.com/jenkinsmeetup/events/126595572/[\"Jenkins Scalability Summit\"]. +\n +\n\n+\nIn this https://en.wikipedia.org/wiki/Open_Space_Technology[Open Space Technology] style event, we went over war stories from users. Just to show the degree of seriousness, some of those people run 1500+ agents, and others run Jenkins in HA configuration with a data center fail over! We then picked various topics in the afternoon and discussed what people would like to see to make Jenkins scale further. Slides and raw notes from this meeting is https://bit.ly/jss13[available here]. +\n +\n\n+\nThe event allowed me to rethink and revisit what I thought we should do in coming days in the area of scalability. +\n +\n\n+\nThe event was far more popular than we anticipated originally, and we had to turn down many folks. So I'm going to do a webinar to go over what we did, and what we talked about. If you are interested in this area, and want to see what's being considered and provide your thoughts, please join us on https://www.cloudbees.com/webinars/jenkins-scalability-summit-recap.cb[Nov 19th 10am PT].","title":"Jenkins Scalability Summit Recap","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-11-17T00:00:00.000Z","id":"f69ef369-c510-5a93-a4ae-1684a3bc20bb","slug":"/blog/2013/11/17/dkim-and-spf-deployed/","strippedHtml":"+\nIn the hope of streamlining account creation e-mail delivery and mailing list moderations, I have deployed https://en.wikipedia.org/wiki/Sender_Policy_Framework[SPF] and https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail[DKIM] over the weekend for e-mails coming out of `+@jenkins-ci.org+`, which includes account appliations, Confluence, and JIRA. +\n +\n\n+\nI've also used this opportunity to switch back the sender of JIRA notifications to `+noreply@jenkins-ci.org+`. It was originally this way, then changed to `+jenkinsci-no-reply@googlegroups.com+` when someone complained (on what ground I do not remember any more.) +\n +\n\n+\nTo the degree that I have tested the setup, it is working correctly, but if you notice anything strange, please let me know.","title":"DKIM and SPF deployed","tags":["infrastructure","mailing list"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-11-20T00:00:00.000Z","id":"6b1ae5e1-461c-50ee-ab41-10de36763dc7","slug":"/blog/2013/11/20/juc-call-for-volunteers-to-join-the-organizing-committee-and-venues/","strippedHtml":"This is a guest post from Alyssa Tong, who drives JUC organizations around the world.\n\nIf you missed JUC Palo Alto on Oct 23, 2013 the videos are now available.\n\nWe are off to planning JUC 2014. It is hard to believe this will be the 4th annual JUC in the Bay Area. The growth in the Jenkins community since the first JUC is astounding.\n\nEvery year we are in search of a larger venue to accommodate the larger crowd. For 2014, the challenge of finding a venue for a capacity of 500+ attendees at a low cost will prove even more daunting. We would love to hear your suggestions for low cost venues (in the Bay Area) so that we may continue to keep entry cost low while providing convenience and the highest level of Jenkins education to attendees. Please send suggestion(s) to events@lists.jenkins-ci.org\n\nWe are proud to launch the call for volunteers to join the JUC organizing committee (OC). If you are interested in shaping the 4th edition of this great event, please send email to events@lists.jenkins-ci.org\n\nWe encourage you to share this blog within your network in case other people\nwould be interested in joining the JUC OC or have ideas for a great JUC 2014 location.","title":"JUC: Call for Volunteers to Join the Organizing Committee (and Venues!)","tags":["general","feedback","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-11-25T00:00:00.000Z","id":"5fbc3c4c-fd57-5a6a-af1f-dd488b2bd3b3","slug":"/blog/2013/11/25/summary-report-git-repository-disruption-incident-of-nov-10th/","strippedHtml":"As reported in various places, there was an incident in early November where commits in our Git repositories have become misplaced temporarily by accident. By the mid next week we were able to resurrect all the commits and things are back to normal now.\n\nAs there are many confusions and misunderstandings in people’s commentary, we wrote this post to clarify what exactly happened and what we are doing to prevent this.\n\nTimeline\n\nIn the early morning of Nov 10th 2013, one of the 680 Jenkins developers had mistakenly launched Gerrit with a partially misconfigured Gerrit replication plugin, while pointing Gerrit to his local directory that contains 186 Git repositories cloned from the Github Jenkins organization. These repositories were checked out about 2 months ago and weren’t kept up to date. Gerrit replication plugin had then tried to “replicate” his local repositories back to GitHub, which it considers mirrors, by doing the equivalent of “ git push --force ” instead of regular push. Unfortunately, Gerrit replication plugin defaults to a forced push, which is the opposite of what Git normally does. The replication also happens automatically, which is why this mistake has impacted so many repositories in such a short time.\n\nAs a result, these repositories have their branch heads rewinded to point to older commits, and in effect the newer commits were misplaced after the bad git-push.\n\nWhen we say commits were \"misplaced\", this is an interesting limbo state that’s worth an explanation for people who don’t use Git. A Git commit is identified by its SHA1 hash, and these objects will never get overwritten. So the misplaced commits are actually very much on the server intact. What was gone was the pointer that associates a human-readable branch name (such as \"rc\") to the latest commit on the branch.\n\nBy Nov 10th 12:54pm GMT, multiple developers had noticed this, and within several hours, we figured out what happened. From Gerrit log files and with the help of GitHub technical support, he was able to figure out all the affected repositories, and later an independent script was written to verify the accuracy of this list.\n\nSome of the Jenkins developers were closely following this development, and were able to restore branches to point to correct commits by simply pushing their up-to-date local workspaces back into the official repositories. Git makes it very easy to do this, and most of the popular plugins affected were restored in this manner within 24 hours.\n\nAt the same time, we needed to systematically restore all the affected repositories, to make sure that we have not lost anything. For this, we contacted GitHub and asked for their help, and they were able to mostly restore branch heads to their correct positions. We have also independently developed a script to find out exactly what commits branch heads should be pointing to, based on the GitHub events API that exposes the activities to Git repositories. This script found a dozen or so branches that fell through the cracks of GitHub support, and we have manually restored those.\n\nMitigation in the future\n\nThe level of support we got from GitHub and our ability to independently verify lost commits and subsequently restore them made us feel good about GitHub, and we have gained confidence in our ability to recover from future incidents.\n\nThat said, what happened was a serious disruption, and it’s clear we’d better prepare ourselves both to reduce the chance of accidents like this and increase the ability to recover. To that end, we hope GitHub would expose a configuration option to disable forced ref updates. They already do this on GitHub Enterprise after all. Dariusz pointed out that CollabNet takes this one step further and offers ability to track deleted branches, tags, and forced updates. Something like that would have made the recovery a lot easier.\n\nWe are going to make two improvements to our process so that we can recover from this kind of problems more easily in the future.\n\nFirstly, we’ll develop a script that continuously records the ref update events across the GitHub Jenkins organization. This will accurately track which branch/tag is created/updated/deleted by who. In case of an incident like this one, we can use this log to roll back the problematic push more systematically.\n\nSecondly, we’ll allow people to control access to individual Git repositories, as opposed to give them all or nothing access to the entire array of plugin repositories.\n\nThe Jenkins developers decided to continue the current open commit policy despite the incident to preserve our culture, which helped us navigate through this incident without a single argument nor flame war.\n\nFAQ\n\nDoes everyone in the organization have full commit privileges to all the repositories?\n\nYes, with some exceptions. To encourage co-maintenance of plugins by different people, and to reduce the overhead of adding and removing people from our 1100+ repositories, we use one team that gives access to most repositories, and put committers in this team.\n\nI prevent forced push in my Git repositories. I’m safe from this trouble, right?\n\nNo, unfortunately something like this can still happen to you, as you can also accidentally delete branches. If you want to learn from our mistakes, you should definitely enable server-side reflog, to track ref updating activities. “git config core.logAllRefUpdates true” on the server will enable this.\n\nCan’t you just have people with up-to-date copy push their repos and fix it?\n\nThis is indeed how some of the repositories got fixed right away, where some individuals are clearly in charge and are known to have the up-to-date local repositories. But this by itself was not sufficient for an incident of this magnitude. Some repositories are co-maintained by multiple people, and none of them are certain if he/she was the last one to push a change. Many plugin developers just scratch their own itch and do not closely monitor the Jenkins dev list. We needed to systematically ensure that all the commits are intact across all the branches in all the affected repositories.\n\nCan’t you just roll back the problematic change?\n\nMost mistakes in Git can be rolled back, but unfortunately ref update is the one operation in Git that’s not version controlled. As such Git has no general-purpose command to roll back arbitrary push operation. The closest equivalent is reflog, which offers the audit trail that Git offers for resolving those cases. But that requires direct access on the server, which is not available on GitHub. But yes, this problem would not have happened if we were hosting our own Git repositories, or using Subversion for example.","title":"Summary Report: Git Repository Disruption Incident of Nov 10th","tags":["infrastructure","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-12-04T00:00:00.000Z","id":"8fbcc2b7-3221-539b-a142-04fc39bd3f54","slug":"/blog/2013/12/04/jenkins-user-conference-2013-palo-alto-wrap-up/","strippedHtml":"+\nIt's been a month now, but I realized that I've never posted a wrap-up post of JUC 2013. So in the spirit of \"better later than, never\", here it goes. +\n +\n\n+\nFirst of all, I wanted to thank everyone who came. More than 400 of you came, and another 600 signed up for live streaming of events (and I know some people watched those live streams past midnight in their local time zone!). I did my part in https://bobbickel.blogspot.com/2013/10/kk-jenkins-and-triumph-of-technology.html[signing bobble heads] and answering questions, and I was able to finally put faces to some of the people who I actively interact in the community but never met before. +\n +\n\n+\nI tried to https://www.flickr.com/photos/12508267@N00/sets/72157637144035034/[take as many pictures as I can], and https://www.facebook.com/media/set/?set=a.700790069940324.1073741828.150316981654305&type=3[Lisa and Alyssa had posted their pictures as well]. If you have your pictures, please share it with us! My favorite is Jenkins cupcake: +\n +\n\n+ +\n\n+\n+\n\n+\nAll https://www.cloudbees.com/jenkins/juc2013/juc2013-palo-alto-abstracts.cb[the slides are video recordings are available online] if you couldn't join us. +\n +\n\n+\nAlyssa said she's got a lot of feedbacks from folks, and https://wiki.jenkins.io/display/JENKINS/Governance+Meeting+Agenda[she's already planning for the next year] — if you are interested in sharing your thoughts on how to better do this next year, we've put it up for the next week's Jenkins project meeting agenda to talk about how to do it. +\n +\n\n+\nFinally, everything in the San Francisco Bay Area is incredibly costly, and events like this was really only made possible by generous sponsors, and we really want to make them happy so that they can help us make this event happen next year as well. So I thought the least I can do is to give them a spotlight and talk about who they are and what they do: +\n +\n\n+\n\n+\n\n+\n\n+\n\n+\n\n+\n\n+\n\n+\n\nPlatinum Sponsor\n\n+\n\n+\n\n+\n\n+\n\n+\n\n+\n\n+\n**https://www.blogger.com/null[]**https://www.cloudbees.com/[*image:https://www.cloudbees.com/sites/default/files/CloudBees-web.png[image]*] +\n +\n\n+\n\n+\n\nCloudBees is the lead organizer for JUC and offers Jenkins in whatever\nform you wish to use it - on-premises or in the cloud. Check out the many\nresources available on the CloudBees website for Jenkins fans - whether\nyou use open source Jenkins, Jenkins Enterprise by CloudBees or Jenkins in the cloud.\n\n+\n\n+\n\n+\n\n+\n\n* *\n\n+\n\n+\n\nGold Sponsors\n\n+\n\n+\n\n+\n\n+\n\n+\n\n+\n**https://www.blogger.com/null[]**https://www.appvance.com/[*image:https://www.cloudbees.com/sites/default/files/appvance%202.png[image]*]\n\n+\n\n+\nAppvance delivers technology and services to prove and improve +\nperformance, security and scalability of websites, apps and mobile apps. +\nThe largest brands in the world choose Appvance, from Pepsi to Best Buy +\nto Bell Alliant. https://www.appvance.com/[Learn more].https://www.appvance.com/[]\n\n+\n\n+\n+\n\n+\n\n+\n\n+\n*https://www.blogger.com/null[]https://www.bds.com/[image:https://www.cloudbees.com/sites/default/files/BDS%20Logo.jpg[image]]*\n\n+\nHave questions on SDLC tools or agile process (especially Jenkins +\nEnterprise, CI or CD)? Leverage our 25 years of expertise for assistance +\nwith CloudBees, Xebia Labs, Sonatype, JFrog, Atlassian, SVN, Git, +\nRational, Microsoft TFS and many more. Visit https://www.bds.com/[www.BDS.com] to learn more..\n\n+\n\n+\n\n+\n\n+\n*https://www.blogger.com/null[]https://www.brightroll.com/[image:https://www.cloudbees.com/sites/default/files/BrightRoll_Logo_noslogan_High_Res.png[image]]*\n\n+\n\n+\nAs the largest independent video advertising platform, BrightRoll powers +\ndigital video advertising for the world’s largest brands. Jenkins has +\nbecome a core piece of our productivity tech stack here at BrightRoll, +\nand its importance is increasing. During the time that we've used it +\nwe've seen a huge benefit to participating in the Jenkins community, +\ngetting support from core contributors and plugin authors, and we try to +\ncontribute back whenever we can. https://www.brightroll.com/[www.brightroll.com]\n\n+\n\n+\n\n+\n*https://www.blogger.com/null[]https://www.jfrog.com/[image:https://www.cloudbees.com/sites/default/files/JFrogIcon.png[image]]*\n\n+\nThe Jenkins User Conference is the only place you can actually feel the +\nJenkins community and understand that being part of it is not just a +\ncommitment, it is a privilege we are honored to share. Learn more about +\nhttps://www.jfrog.com/[JFrog], our https://www.jfrog.com/home/v_artifactory_opensource_overview[Artifactory] Binary Repository solution, and our new https://bintray.com/[Bintray] social platform for sharing, publishing and managing binaries. +\n +\n\n+\n\n+\n\n+\n\n+\n\n+\n\n+\n*https://www.blogger.com/null[]https://web.archive.org/web/20140106081207/http://lmitsoftware.com/[image:https://www.cloudbees.com/sites/default/files/gerritforge-logo.png[image]]*\n\n+\nLMIT Software is now GerritForge, the leader in Agile coaching and +\nDevelopment Management. We are active contributors of Jenkins (see https://jenkins-ci.mobi/[https://jenkins-ci.mobi]) and https://gerrithub.io/[Gerrit Code Review] and we can enable their adoption and integration into the Enterprise Continuous Delivery chain.\n\n+\n\n+\n*https://www.blogger.com/null[]https://newrelic.com/[image:https://www.cloudbees.com/sites/default/files/NewRelic-logo_small.jpg[image]]*\n\n+\n\n+\nNew Relic is a SaaS application performance management solution that +\nprovides end-to-end, real time visibility into the operations of network +\nconnected applications wherever they run – across browsers, mobile +\ndevices and servers. Sign up for a FREE account at +\nhttps://newrelic.com/cloudbees[newrelic.com/cloudbees].\n\n+\n\n+\n\n+\n\n+\n\n+\n**https://www.blogger.com/null[]**https://xebialabs.com/[*image:https://www.cloudbees.com/sites/default/files/Xebia-Logo.png[image]*]\n\n+\n\n+\nWith  CloudBees https://www.cloudbees.com/dev.cb[DEV@cloud] (Jenkins in the cloud) or https://www.cloudbees.com/jenkins/enterprise[Jenkins Enterprise by CloudBees,] you can instantly connect to https://www.xebialabs.com/deployit[XebiaLabs Deployit] (a fully automated deployment solution) and immediately begin reaping  +\nthe benefits of delivering continuously. Missed Andrew Phillips' JUC presentation, Preparing for Enterprise Continuous Delivery: 5 Critical Steps? https://www.slideshare.net/xebialabs/jenkins-user-conference-27508869[View the slides here].\n\n+\n\n+\n\n+\n*https://www.blogger.com/null[]https://zeroturnaround.com/[image:https://www.cloudbees.com/sites/default/files/Zeroturnaround1.jpg[image]]*\n\n+\nZeroTurnaround help software eat the world faster. Rapidly develop +\napplications with https://zeroturnaround.com/software/jrebel/?src=jucpaloalto2013[JRebel] and continuously deliver them with https://zeroturnaround.com/software/liverebel/?src=jucpaloalto2013[LiveRebel]. +\n +\n\n+\n+\n\n+\n\n+\n+\n\n+\n\n+\n+\n\n+\n\n+\n\n+\n\n+\n\n+\n\n* *\n\n+\n\n+\n\nSilver Sponsors\n\n+\n\n+\n\n+\n\n+\n\n+\n\n+\n*https://www.blogger.com/null[]https://www.appdynamics.com/[image:https://www.cloudbees.com/sites/default/files/AD_cl_H_RGB.png[image]]*\n\n+\n\n+\n\n+\n*https://www.blogger.com/null[]https://confreaks.com/[image:https://www.cloudbees.com/sites/default/files/Confreaks.png[image]]*\n\n+\n\n+\n\n+\n\n+\n\nhttps://www.blogger.com/null https://www.liferay.com/[ ]\n\n+\n\n+\n*https://www.blogger.com/null[]https://www.soasta.com/[image:https://www.cloudbees.com/sites/default/files/SOASTA_ProfilePic_LinkedIn.jpg[image]]*\n\n+\n\n+\n\n+","title":"Jenkins User Conference 2013 Palo Alto Wrap-up","tags":["general","meetup","news","jenkinsci","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-12-05T00:00:00.000Z","id":"9d3790a0-8dd4-50b2-9d51-83949d30bbe1","slug":"/blog/2013/12/05/jenkins-sao-paulo-meetup-this-weekend/","strippedHtml":"I’m going to visit Sao Paulo once again this weekend to attend the second annual Jenkins users meet-up. It’s a whole day free event Saturday full of Jenkins goodness.\n\nYou’ll hear from a number of active Jenkins folks, and I’ll be presenting about what CloudBees (where I currently work) has contributed to the Jenkins project, including recent new OSS plugins and some services. I’m also stuffing my suitcase with lots of give-aways, including Jenkins stickers and popular Jenkins bobble heads. I don’t intend to bring anything back to the U.S.\n\nThe morning half of the event is a cross-atlantic hackathon between Brazil and Copenhagen. you can check what’s being planned on the western side of the ocean and the eastern side of the ocean. The afternoon half is a series of presentations. Please come join us. I’m really looking forward to seeing you!\n\nI’ll be in Sao Paulo for the whole Sunday and Monday as well. If you are interested in talking to me, please feel free to drop me a note.","title":"Jenkins Sao Paulo Meetup this weekend","tags":["general","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-01-04T00:00:00.000Z","id":"4e4e2b32-5616-5428-a8f3-ee1c68507a51","slug":"/blog/2012/01/04/building-jenkins-plugins-with-gradle/","strippedHtml":"Until now, Jenkins plugins written in Java or Groovy could only be built with Maven, using the maven-hpi-plugin to generate a proper manifest and archive which Jenkins can consume. But starting now, you can also use Gradle!\n\nSee the wiki for information on how you can use Gradle and the new gradle-jpi-plugin to build, test and release your Java or Groovy Jenkins plugin.","title":"Building Jenkins plugins with Gradle","tags":["development","core","meta","plugins","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2012-01-05T00:00:00.000Z","id":"d6ae5448-00cb-5bd4-9892-3236303c0b6d","slug":"/blog/2012/01/05/thank-you-page-for-windows-os-x-installers/","strippedHtml":"I’ve tweaked the website so that downloading the Windows and Mac installers will navigate the browser to \"thank you/what’s next\" page. These pages have links to Wiki that educate the users on where/how the installer will run Jenkins.\n\nHopefully this makes it little easier for new users to get started on Jenkins. I’ve tested the new mechanism with IE, Safari, and Firefox, but if you notice a problem, please let us know.","title":"\"Thank you\" page for Windows/OS X installers","tags":["infrastructure","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-01-20T00:00:00.000Z","id":"ac111b9f-4bc2-5ca8-9dfe-9577ef810c7f","slug":"/blog/2012/01/20/highlight-video-from-juc-2011/","strippedHtml":"A slick highlight video from the Jenkins User Conference, 2011 was posted recently which captures some great quotes from a number of the fantastic speakers who participated in the inaugural JUC.\n\nI’ve embedded the video below, enjoy!","title":"Highlight video from JUC 2011","tags":["general","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-02-02T00:00:00.000Z","id":"521035b8-1fda-5f7d-a038-d0561f69a3f4","slug":"/blog/2012/02/02/happy-birthday-jenkins/","strippedHtml":"On February 2nd, 2011 the first release of Jenkins, version 1.396, was made available for public consumption. Thus marking a new beginning for many of us who had come to rely on this very versatile piece of software and wanted to see it continue to thrive.\n\nAlong with some other bug fixes, the 1.396 release of Jenkins included a very important changelog item:\n\nFixed a trademark bug that caused a considerable fiasco by renaming to Jenkins\n\nOn behalf of the core Jenkins team and the governance board I would like to extend a extremely large Thank You! to all of the plugin developers, bug filers, wiki page editors, book authors and the users who have helped grow Jenkins into the project it is today.\n\nSome of the tidbits from our highlight reel:\n\nAs of this writing there have been 54 releases of Jenkins\n\nJenkins now supports writing plugins in Ruby as well as Java (more languages in the process)\n\nWe have 7 high-speed mirrors streaming Jenkins packages to users around the world.\n\nThere are now over 450 different plugins available for Jenkins\n\nOver 80 donors participated in our end of year fundraising drive\n\n5 \"Long Term Support\" releases have been published by the Jenkins community, offering users a slower moving upgrade target (supported even further by CloudBees' Enterprise Jenkins product)\n\nPublic project governance meetings are held and recorded (almost) every couple of weeks.\n\nMore than 340 individuals contribute on GitHub to the project in some form or another.\n\nAbout 750 members of the developers mailing list and around 1700 on the users mailing list\n\nThere are many other impressive sounding numbers I could rattle off, but the list is far too long to be interesting.\n\nThe project isn’t perfect and nor is the software, but we’re off to a fine start and I hope you’ll join us in making this next year of Jenkins even better than the first.","title":"Happy birthday Jenkins!","tags":["general","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-02-13T00:00:00.000Z","id":"9dd8e64b-25a5-5c9d-ac5c-986d5bbd86be","slug":"/blog/2012/02/13/jenkins-user-conference-2012-paris/","strippedHtml":"+ +\n\n+\n(English text follows the French text) +\n +\n\n+\nAprès le succès de la https://www.cloudbees.com/jenkins-user-conference-2011-session-abstracts.cb[Jenkins User Conference l’an dernier à San Francisco] et à l’intérêt qu’elle a soulevé, nous organisons cette année la JUC dans quatre grande villes à travers le monde. La premiére étape de cette tournée est la https://www.cloudbees.com/juc2012.cb[JUC 2012 à Paris], le 17 avril. La conférence aura lieu la veille de https://www.devoxx.com/display/FR12/Accueil[Devoxx France] dans les mêmes locaux. La date a été spécialement choisie pour que vous puissiez faire d’une pierre deux coups, ou plutôt deux confs ! +\n +\n\n+\nLes https://cloudbees-jenkins-user-confs.eventbrite.com/[inscriptions sont ouvertes]. Inscrivez-vous dès maintenant pour bénéficier de la réduction réservée au plus enthousiastes. Vous pouvez également https://www.cloudbees.com/forms/jenkins-user-conference-call-papers.cb[proposer un sujet] ou bien https://www.cloudbees.com/jenkins-user-conference-2012-sponsorship.cb[soutenir la conférence en tant que sponsor]. Comme il est bien connu que les Français aiment voir leurs compatriotes sur scène, j’espère que nos nombreux développeurs jenkins francophones (les meilleurs, soit dit en passant) proposeront un sujet ! +\n +\n\n+\nCette année, nous demandons une contribution pour les inscriptions (avec un tarif réduit avant le 18 février), afin de couvrir les frais d’organisation, mais nous vous offrirons en contrepartie le T-shirt officiel ainsi que des autocollants Jenkins. Si on se base sur la JUC 2011, https://jenkins-ci.org/event/jenkins-scale-10x-los-angeles[SCALE 10x], ou le link:/blog/2012/02/21/fosdem-2012-recap/[FOSDEM], ce sera une opporunité exceptionnelle pour rencontrer et discuter avec les dévelopeurs majeurs du coeur ou des plugins, ainsi que les nombreux utilisateurs prêts à partager leur expérience et à répondre à toutes vos questions. +\n +\n\n+\n\n+\nThanks to the success of https://www.cloudbees.com/jenkins-user-conference-2011-session-abstracts.cb[the Jenkins User Conference last year at San Francisco] and high interest, this year we are bringing JUC to 4 cities around the world. And the first stop is https://www.cloudbees.com/juc2012.cb[JUC 2012 in Paris], on April 17. This is one day before https://www.devoxx.com/display/FR12/Accueil[Devoxx France], and in the same venue. The date is specifically chosen so that you can kill two conferences in one stone! +\n +\nRegister for JUC Paris now (https://www.cloudbees.com/juc2012.cb) and get the Early Bird discount - which is a significant reduction in the registration fee! The conference is https://cloudbees-jenkins-user-confs.eventbrite.com/[accepting registrations] as well as looking for https://www.cloudbees.com/forms/jenkins-user-conference-call-papers.cb[talk submissions] and https://www.cloudbees.com/jenkins-user-conference-2012-sponsorship.cb[sponsors]. I get the impression that French people like other fellow French speaking, so I hope our French-speaking plugin developers will submit talks. +\n +\n\n+\nThis year, we are charging a small amount of money in the hope of covering the expense, but we'll give out T-shirts (which were really hot last year!) as well as stickers. And if the experience at JUC 2011, https://jenkins-ci.org/event/jenkins-scale-10x-los-angeles[SCALE 10x], and link:/blog/2012/02/21/fosdem-2012-recap/[FOSDEM] was any indication, this is a great opportunity to meet and talk with plugin/core developers, and other fellow users with whom you can discuss your experience/questions. +\n +","title":"Jenkins User Conference 2012 Paris","tags":["general","juc"],"authors":[{"avatar":null,"blog":null,"github":"ndeloof","html":"","id":"ndeloof","irc":null,"linkedin":null,"name":"Nicolas De Loof","slug":"/blog/authors/ndeloof/","twitter":null}]}},{"node":{"date":"2012-02-21T00:00:00.000Z","id":"06d77863-5335-5559-ab0d-4ff96f41ecf4","slug":"/blog/2012/02/21/fosdem-2012-recap/","strippedHtml":"( Editor’s note: Apologies for the delay in getting this wrap-up out, it’s been quite a busy month!)\n\nThis year has already been full of milestones, the first of which being our first birthday as an open source project. The second major milestone for the project was that we went to FOSDEM 2012, arguably the largest volunteer-organized and operated open source conference on the planet.\n\nWe had a couple of things going on at FOSDEM that merit a mention:\n\nThe Jenkins project had a stand in the K building, the same building where the Free Java, Config and Systems Management, and a few other pertinent dev rooms were located\n\nThe Jenkins project gave away 2 free copies of John Smart’s book: \" Jenkins: The Definitive Guide\" (thanks to O’Reilly!)\n\nCommunity member R. Tyler Croy gave a talk on running the Jenkins project infrastructure with Puppet\n\nThe O’Reilly folks brought 10+ Jenkins books to sell at their stand.\n\nProject founder Kohsuke Kawaguchi and a number of project members held a constructive UI Enhancements discussion.\n\nWe were very fortunate to have so many Jenkins contributors in attendance, who all helped with the Jenkins stand, introducing people to Jenkins and much more.\n\nFOSDEM in their own words\n\n( after the break)\n\nNicholas de Loof :\n\nFOSDEM was for me an opportunity to meet other Jenkins contributors I only knew by IRC nickname. Those two days were awesome to discuss with users on our stand, joke and socialize, as well as having some more technical debates and encourage folks to get involved in the community. Even I couldn’t attend the talks I selected on the conference agenda due to room being full, I really enjoyed this 100% geek weekend.\n\nChristopher Orr :\n\nThe people, the talks, the social events, the sheer size of FOSDEM all make for a pretty inspiring weekend.  And incredibly, it’s all for free.\n\nYou can not help but feel motivated after attending.  You always learn something new, discover myriad projects — in niches you never knew existed — and talk to smart folk from all over.\n\nTalking to people at the Jenkins stand was no different.  Though in a striking number of cases, people had already heard of Jenkins, were big fans and took a clutch of stickers back home for their colleagues.\n\nSpeaking with those who weren’t yet using Jenkins was equally\ninteresting. My favourite was talking to one guy who described a\nparticularly complex workflow; at each step he asked if Jenkins could do it, and I was able to cheerily reply \"yes\" to every single one.\n\nGetting to put faces to names of Jenkins developers was also a huge plus, and resulted in numerous great conversations.\n\nDomi :\n\nIt was great to get some faces to the short names on IRC. Talking to other commiters was awesome, I thought they are cool before I went to FOSDEM, but now I know!\n\nIts was great to talk to people who are using the tools you are working on, there where so many just coming up to say thank you! (?and there where/are by far more then I thought!)\nI know I’m standing on the shoulders of a giant - but I also do feel that my commitment is of value for others too.\n\nFeels great to be part of this community!\n\nR Tyler Croy :\n\nI spent so much time at the stand telling people about Jenkins or showing them, that I only ended up seeing a couple actual sessions the whole weekend.\nThe kinds of people who came to talk to us almost entirely developers of one kind or another, which was really great to talk about how Jenkins can be used effectively for Perl shops, for Python, C++, C#, Java (of course) or even for deployment automation. The spread was a pretty big endorsement, I think, of the extensible nature of the Jenkins plugin ecosystem.\nIn planning for FOSDEM I had urged Kohsuke to order thousands of stickers for the event, and when all was said and done I think we had given away around 1000 stickers to new Jenkins fans, old Jenkins fans and a few folks in the community who were looking forward to going back to their local JUG to share.\n\nI’m looking forward to making the trip to the bitter cold of Brussels in February again next year.\n\nFred G :\n\nFOSDEM had lots of interesting talks and was very well organized (from my point of view) and best of all…​ it’s free! Apart from the talks and nice lineup of speakers, it has been a great opportunity to meet people. People I already knew, some in person, some only from IRC, the mailing list, or as a maintainer of a plugin; but also people thatcame up to the Jenkins stand.\n\nFrom the people that I talked to:\n\n60% knew Jenkins and use it every day (\"Yeah, I know Jenkins. The whole company uses it and nothing works without it!\")\n\n35% had heard of it or were very interested (\"I know Jenkins, but we bought the Atlassian package and now we have to use Bamboo, Jira and Confluence.\" [me mentioning the Jira integration of Jenkins] \"Wow, I really have to try that out and convince our team to switch to Jenkins!\".\n\n5% Weirdos and WTF!? ( disgusted\"Is this another one of these\nprojects funded by Red Hat? They fund everything!\")\n\nMeeting Tom Huybrechts without knowing it (at first) was a big\nsuprise. He has created or contributed to some of the best plugins\n(eg. the parameterized-trigger plugin) and I see his name at least\nonce whenever I browse through core source code. During the impromptu UI enhancement meetings he showed us another three plugins that he wrote but never made public just because he doesn’t have time to support them all.\n\nThen at the stand he casually mentioned that he is administering\naround 3000 jobs on 100+ build machines. At the same time he seems\nlike a very humble and low key character.\n\nTo sum it up, the best thing about an open source project like Jenkins is the community. Working together with nice people from all over the world to create the best CI server has been a great experience. The FOSDEM weekend was another event that proved that.\nI’ll definitely come back.\n\nKohsuke Kawaguchi :\n\nFOSDEM is one of the few conferences that has a distinctive hand-made geek-for-geek feeling to it. No marketing people, no bullshit flyers, but lots of technical folks and good beer. I really enjoyed talking to users, as always, but above all I was very happy to see developers and project members in the Jenkins community come out in full force, and I felt they enjoyed it just as much. I’m really hoping that we’ll now keep this going for years to come.\n\nI think it’s safe to assume we’ll be back next year for FOSDEM 2013, hope to see you there!","title":"FOSDEM 2012 Recap","tags":["general","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-02-21T00:00:00.000Z","id":"679081d5-5406-5c4e-b36a-b45ce691b646","slug":"/blog/2012/02/21/sponsor-a-jenkins-user-conference/","strippedHtml":"With the JUC Paris 2012 call for papers open, it’s important to mention that we are also looking for sponsors for the various Jenkins User Conferences that are being planned around the world right now!\n\nCurrently there are four conferences being put together right now:\n\nJUC Paris\n\nJUC New York\n\nJUC San Francisco\n\nJUC Antwerp\n\nIf your company is heavily invested in Jenkins or interested in reaching the kind of audience that will be at a JUC (highly technical, motivated) then you should consider becoming a sponsor one of these conferences (link below)!\n\nSponsor the Jenkins User Conference","title":"Sponsor a Jenkins User Conference!","tags":["general","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-03-06T00:00:00.000Z","id":"84e982b8-32fd-5c71-9923-2f8e688aebff","slug":"/blog/2012/03/06/critical-security-advisory-in-jenkins-core/","strippedHtml":"+\nWe've identified and fixed a critical security vulnerabilities in +\nJenkins core. This affects all the releases of Jenkins to date (main line releases up to 1.452 and LTS up to 1.424.3.) Please upgrade to the new releases at your earliest convenience, especially if your Jenkins is internet facing. +\n +\n\nFor more details about the vulnerabilities, affected versions, and so on, please consult the security advisory.\n\n(See our page about security advisories about how we do these.)","title":"Critical security advisory in Jenkins core","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-03-13T00:00:00.000Z","id":"ec9e39b5-c01c-5ce7-9aa1-cf5c17ad291f","slug":"/blog/2012/03/13/why-does-jenkins-have-blue-balls/","strippedHtml":"It is interesting having an open source project that is sufficiently old to start generating \"lore\" of some form or another. Jenkins is starting to get to be that age, having been started over 6 years ago.\n\nOne of the most commonly asked questions, is about Jenkins' use of \"blue balls\" to indicate success by default. This is enough of an \"issue\" for some users that the Green Balls plugin is in the list of top 10 installed plugins.\n\nThe reason behind our use of blue to indicate success has its basis in Kohsuke’s Japanese upbringing. The cultural differences were enumerated in a bug report comically titled \"s/blue/green/g\" ( JENKINS-369):\n\nThis response Kohsuke cited was taken from this Q&A thread\n\nQ.\" Why do Japanese people say that they have blue traffic lights when they are really green?\" --Question submitted by John Sypal\n\nA: According to the book, Japan From A to Z: Mysteries of Everyday\nLife Explained by James and Michiko Vardaman, the first traffic\nsignals in Japan were blue instead of green, but the blue lights were difficult to see from a long distance away so they were replaced with green ones. Vardaman says that the custom of referring to traffic lights is a holdover from those days.\n\nThis sounds like a good explanation, but the problem with it is that you will hear Japanese people refer to other green things (like\ncucumbers, spinach, and sometimes grass) as being blue as well. This\nis because historically, Japanese people considered green to be a\nshade of blue. For example, the Chinese character for blue,\npronounced ao is made up of two characters, iki (life) and i (well)\nand refers to the colour of plants which grow around a well, a colour between green and blue. When Chinese people see the character, they say it means green, but Japanese people say it means blue.\n\nJapanese books on colours tell us that there are four tertiary colours: red, blue, white and black, and that all others are shades of those four main ones. Ao, therefore, is a sort of ideal blue, halfway between green and blue. The sky is said to be blue, but it is a different shade of ao than a traffic light is. Tree leaves are said to be green, but green is a shade of ao, like crimson is a shade of red.\n\nIn another interesting cultural difference relating\nto colour, Japanese children always colour the sun red instead of\nyellow.\n\n( here’s a direct link to Kohsuke’s comment )\n\nUnfortunately it’s not for color blind users, although that’s a pretty convincing explanation. Jenkins has blue balls because in Japan, red means stop and blue means go!\n\nImage courtesy of this site","title":"Why does Jenkins have blue balls?","tags":["general","just for fun","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-03-26T00:00:00.000Z","id":"4c90dc2c-3ba4-5227-ae38-b5bf0bf26126","slug":"/blog/2012/03/26/announcing-the-jenkins-cia/","strippedHtml":"For years, we’ve been hearing about covert installations of Jenkins by groups\nof developers within larger companies. Rogue engineers, frustrated by the lack\nof continuous integration would download jenkins.war and run it off their\nworkstation. As time went on, word-of-mouth within the organization spread\nJenkins far and wide.\n\nToday we announce an initiative to help support these rogue agents: the\nJenkins CIA. CIA being short for Continuous\nIntegration Ambassador of course.\n\nIf you’re going to be speaking at a JUG or another event where you will have\nthe opportunity to promote and teach people about Jenkins, you too can join the\nCIA:\n\nSend us an email telling us about the event and how many people you expect\n\nWrite us a guest blog post ahead of time, talking about the event\n\nWe dispatch Jenkins stickers and a CIA Agent shirt for you to wear.\n\nWrite up a summary blog post about the event afterwards\n\nRepeat!\n\nIn the coming months, we’ll start collaborating and creating standard\npresentations that can be easily re-used to introduce people not only to\nJenkins, but continuous integration in general, so stay tuned.\n\nIf you’re not the speaking type but instead prefer to work behind the scenes,\nyou can join the OSS by checking out the Beginner’s Guide to contributing\nto Jenkins.\n\nAgent Dero, over and out.\n\nThis message will self-destruct in 5.\n\n4.\n\n3.\n\n2.\n\n1.\n\npoof .","title":"Announcing the Jenkins CIA","tags":["general","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-04-13T00:00:00.000Z","id":"35ce40fd-ca06-542c-b6ae-a622366710ae","slug":"/blog/2012/04/13/continuous-information-vol-2/","strippedHtml":"+\nBecause I work on Jenkins day in day out, it's easy for me to forget that most people don't pay /that/ much attention to Jenkins. If you fit that category, and if you want to stay on top of the latest happenings in Jenkins, don’t miss Volume 2 of https://pages.cloudbees.com/index.php/email/emailWebview?mkt_tok=3RkMMJWWfF9wsRow5%2FmYJoDpwmWGd5mht7VzDtPj1OY6hBksIr%2BJK1TtuMFUGpsqOOqSDhcUEZVk0w%3D%3D[Continuous Information, the CloudBees Newsletter for Jenkins]. +\n +\n\n+\nThis issue... +\n +\n\nFeatures details about the 6 upcoming Jenkins User Conferences (don’t miss these)\n\nAnnounces the new Jenkins CIA Program (join us to promote Jenkins around the globe)\n\nShows you where to find in-depth information about the latest Jenkins UI improvements and featured plugins (cool stuff)\n\nHighlights the importance of Jenkins Security Advisories (install these regularly)\n\nTells you why Jenkins has blue balls instead of green ones (seriously)\n\nShows you the latest Jenkins Usage Stats (still growing super-fast)\n\n… and more great stuff, including a bit of Jenkins humor (courtesy of our friends at Geek and Poke)\n\n+\n+\n\n+\nhttps://pages.cloudbees.com/index.php/email/emailWebview?mkt_tok=3RkMMJWWfF9wsRow5%2FmYJoDpwmWGd5mht7VzDtPj1OY6hBksIr%2BJK1TtuMFUGpsqOOqSDhcUEZVk0w%3D%3D[View this issue in full] or https://www.cloudbees.com/jenkins-newsletter.cb[sign up to receive future newsletters] directly or to stay on top of the latest Jenkins goodness. +\n +\n\n+\nOn somewhat unrelated note, https://www.cloudbees.com/forms/jenkins-user-conference-call-papers.cb[call for Papers] for upcoming JUC 2012 is open! Please help us spread the word...","title":"Continuous Information vol.2","tags":["general","links","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-05-10T00:00:00.000Z","id":"b64843a6-f5ba-5efc-9c85-517f35fa511f","slug":"/blog/2012/05/10/jenkins-user-conference-paris-summary/","strippedHtml":"+\nhttps://www.cloudbees.com/jenkins-user-conference-2012-paris.cb[The first stop of Jenkins User Conference world tour] this year was Paris, where there's a considerable concentraion of Jenkins developers and users (sometiems those of us on the other side of the Atlantic call them \"the French gang\") The event was held a day before Devoxx France, in the hope that we attract more attendance. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/62/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423115916-5ed0a69e.jpg[image]] +\n\n+\n+\n\n+\nI believe there are 100+ people that actually showed up, and we had a full day divided in two tracks, talking all things about Jenkins. While many are French, some of the attendees come from all over the Europe. I was able to see some familiar faces, as well as those who I've only known by their names. +\n +\n\n+\nI tried to get in and out of both tracks to get the sense of what's going on, so that I can report them later, and here's my notes. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/75/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423121146-816f0806.jpg[image]] +\n\n+\n+\n\n+\nI kicked off the whole day with a keynote, looking back what we've done since we became Jenkins. I've looked into various activities in the community, such as LTS, https://wiki.jenkins.io/display/JENKINS/Jenkins+CIA+Program[Jenkins CIA], https://wiki.jenkins.io/display/JENKINS/Jenkins+plugin+development+in+Ruby[Ruby plugin development], and https://wiki.jenkins.io/display/JENKINS/UI+Enhancements[UI enhancements]. I updated my adoption statistics slides (we are happy to report that we crossed https://imod.github.com/jenkins-stats/svg/svgs.html[40K installations] in our tracking), and reported that JFrog is now https://java.dzone.com/announcements/jenkins-ci-and-jfrog-announce[hosting our repositories] that we rely on for the development. I showed some of what we've been lately working on at CloudBees — such as the upcoming version of https://www.cloudbees.com/jenkins-enterprise-by-cloudbees-overview.cb[Jenkins Enterprise by CloudBees] that support high-availability, https://www.cloudbees.com/press-room/cloudbees-donates-five-plugins-jenkins-community.cb[our giving away the folder plugin for free] (as in beer), and previews of some not quite public yet features, which is a treat only for those who came! +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/89/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423123054-9f4acaef.jpg[image]] +\n\n+\n+\n\n+\nIn the first slot, https://twitter.com/gboissinot/[Gregory Boissinot] went through a plugin development workshop. This was actually something I really wanted to understand, so that I get the objective view on where the pitfalls are. Even though the talk was in French, I did understand the code he was showing, and I took some notes about having some kind of skeleton code generator — for example, there's a common pattern for building an UI bound model object (for asking the user to enter data that has structures, persisting them, and so on), and having a code generator command line tool (like https://github.com/jenkinsci/jenkins.rb[jenkins.rb] has) could be really handy. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/93/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423123825-9ef5019f.jpg[image]] +\n\n+\n+\n\n+\nIn another room, https://twitter.com/ndeloof[Nicolas] and Mathieu were showing their https://wiki.jenkins.io/display/JENKINS/Build+Flow+Plugin[\"build flow\"] plugin, which lets you write a workflow in Groovy DSL. Choreographing a complex workflow that involves multiple jobs is a commoon challenge among any Jenkins users, and so this talk was well attended, and I'm really looking forward to seeing this plugin mature (there's https://cisco.webex.com/ciscosales/lsr.php?AT=pb&SP=MC&rID=60616172&rKey=7caa63dde29ef758[a separate effort] to integrate BPMN workflow into Jenkins, see more about that here.) One thing I learned about Groovy DSL since then is the AST transformation. I'm thinking it might allow us to convert the DSL workflow script into a continuation passing style so that you can suspend/resume workflow at arbitrary point. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/106/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423125816-eb3613bb.jpg[image]] +\n\n+\n+\n\n+\nThe day was so packed that we didn't even waste the lunch time! While attendees are eating, we had lightening talks in the room. Olivier showed off how Apache runs Jenkins, which is quite sizable, then I pitched in for https://twitter.com/4imod[Domonik], who couldn't make it to the conference, and covered the scriptler plugin. Vincent followed and covered the similar Groovy system console. Harpreet then closed off the lunch lightening talks by showing the templates plugin in Jenkins Enterprise by CloudBees. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/111/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423130341-35bbfbae.jpg[image]] +\n\n+\n+\n\n+\nIn the afternoon, https://twitter.com/aheritier[Arnaud], one of our French gangs, showed how you can set up the iOS development on Jenkins (from code change to test to the delivery of the binaries to actual phones.) Bruno then did a demo of how he uses DEV@cloud and RUN@cloud to quickly set up continuous deployment for Java webapps. For system integraters that deal with lots of projects, I think it is a great combination (for example allowing you to hand over the entire development environment to the customer when the project is over.) +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/140/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423133439-5a7b4fbe.jpg[image]] +\n\n+\n+\n\n+\nWhile all that is going on in one room, in another room Lars Kruse showed off how the old meets the new — where you https://wiki.jenkins.io/display/JENKINS/ClearCase+UCM+Plugin[take ClearCase UCM and use it to do validated merge], in which only the changes tested by Jenkins become visible to the rest of the team. I personally don't know much about ClearCase, but it was very interesting that emerging techniques like validated merge can be applied on more traditional SCM tools. He also said his company works with clients to develop custom Jenkins plugins. I always felt that any big company adopting Jenkins need some custom glue plugins, and I regularly come across those companies, but CloudBees can only help so many. It's great to see that there are more help available now! +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/188/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423164957-bae4f4ad.jpg[image]] +\n\n+\n\n+\nThe talk that followed was from https://twitter.com/#!/jcarsique[Julien Carsique] from Nuxeo, discussing how he manages and improves the CI environment for his organization. Now, I regret I didn't take all the notes about details, but I think this was one of the best presentations of the day for me. I remember thinking that if we had the best Jenkins administrator award for those who push things to the limit and beyond, he would be my top pick. IIRC, he had a major Maven projects that span across different repos and all. He set up Jenkins such that any change triggers a cascade of new builds of downstream jobs, which later then fan out to cross-platform test jobs, then he made the whole thing visualized so you can track exactly where the time is spent and how those changes propagate. I think this was very inspirational to many other fellow Jenkins users, and I hope he will put his slides somewhere so that other people can mimic what he's done. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/144/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423134050-8dd4dca8.jpg[image]] +\n\n+\n\n+\nBack to the big room, my fellow colleagues https://twitter.com/#!/connolly_s[Stephen] and https://twitter.com/#!/singh_harpreet[Harpreet] did the only introductory talk in the whole day, going through check lists of production Jenkins deployments, recapping why you want CI, etc. (And I always forget that there are still many who don't know much about Jenkins!) +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/156/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423135955-e072a9a0.jpg[image]] +\n\n+\n+\n\n+\nIt was also great to see and hear https://sebastian-bergmann.de/[Sebastian Bergmann], the guy behind https://jenkins-php.org/[Jenkins PHP], talk about Jenkins and PHP integrations. I wish we had more of those people who bridge our community to different communities and help us spread the ideas. He even kindly gave me his Jenkins/PHP book and signed it for me! +\n +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/159/category/2[image:https://photo.kohsuke.org/upload/2012/04/23/thumbnail/TN-20120423140457-1e3a42c8.jpg[image]] +\n\n+\n\n+\nAside from talks, food was great, especially for those of us who came from the U.S. I've got some good inspirations about where we need to work. And I also managed to implement the search filter in the update center during the day, in response to the valid complaint from Sebastian. For virtual communities like ours, it's really good to meet people in the meat space and put faces on names. Build automation engineers are often somewhat lonely in their respective organizations — there just aren't that many people who get excited about automating things away, and so having so many of like-minded folks in one room was by itself a great experience. +\n +\n\n+\nOn the things to improve side, I felt that workshops was tricky to do in a limited time and in a big room. Maybe it would work out better if there's a smaller room where smaller number of people can gather and hack away (probably some time slots designated for some specific topics), then we can collectively merge pending important pull requests, teaching how to develop plugins, or ask others to look at their plugins, etc. There also can be a valid discussion about JUC, run nicely in exchange of admission fee, vs JUC run cheaply but free. +\n +\n\n+\nIn any case, I think the quality of presentations were very good, and knowing local Jenkins developers/users would help expand your horizon. As I said in the beginning, we are takin JUC around the world this year. https://www.cloudbees.com/jenkins-user-conference-2012-newyork.cb[The one in New York] is just in the next week, followed by Herzelia (Israel), Tokyo, San Francisco, and Antwerp. Please https://www.cloudbees.com/juc2012.cb[register while seats are still available]! +","title":"Jenkins User Conference Paris Summary","tags":["general","juc","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-05-21T00:00:00.000Z","id":"e0cc9ba8-3326-5aed-8316-79df370e3fb5","slug":"/blog/2012/05/21/nyc-jenkins-user-conference-recap/","strippedHtml":"Editor’s Note: The following is a write-up courtesy of Jesse Farinacci\n\nThis past week I had the pleasure of attending the Jenkins User Conference in NYC. A hundred other like-minded continuous integration enthusiasts and I packed a very posh Marriott Marquis for a full day of Jenkins excitement.\n\nFamed Hudson and Jenkins founder Kohsuke Kawaguchi delivered the opening address to a crowded room.\n\n+\nhttps://3.bp.blogspot.com/-zONIv2yCm1s/T7pLy0yCalI/AAAAAAAAANg/hXadCIg5XC0/s1600/kohsuke.jpg[image:https://3.bp.blogspot.com/-zONIv2yCm1s/T7pLy0yCalI/AAAAAAAAANg/hXadCIg5XC0/s320/kohsuke.jpg[image,width=239,height=320]]\n\n+\nI'm sure everyone knows the statistics by now, that Jenkins adoption and development continues at an unbridled pace. Pushing past all the mailing list users and posts, the JIRAs opening and closing, the Twitter followers, the *five* Jenkins User Conferences scheduled for this year, the unprecedented number of installations reporting anonymous usage, the native availability for *nine* different OSes, in pushing past all of that.. +\n +\nFor me, the most impressive number was that on average there was about 1 plugin created every day over the past year. Let me reiterate that: *1 plugin created every day for a year*. If that isn't the best testament to the versatility, extensibility, and just plain usefulness of a piece of software, then I don't know what would be! +\n +\nAnnounced at the conference was the general availability of https://buildhive.cloudbees.com/[CloudBees BuildHive], this is a mechanism for quickly and easily obtaining access to cloud-based Jenkins. If you have projects on https://github.com/[GitHub], you can effortlessly log in to BuildHive via GitHub OAuth, import your projects with literally a single click, and start benefiting from the powerful promise of the cloud. You'll no longer have to worry about managing infrastructure, you'll just get all that great Jenkins CI capability for your projects immediately. +\n +\n +\n +\nWith BuildHive enabled projects, if a user of your project creates a pull request, then it will automatically pre-test that request before it hits the master tree -- https://github.com/jenkinsci/naginator-plugin/pull/2#issuecomment-5732481[commenting inside the pull request] whether or not the change broke the build. If a developer wants to test some changes before pushing them to the master tree, there's the https://www.cloudbees.com/jenkins-enterprise-by-cloudbees-features-validated-merge-plugin.cb[Validated Merge feature], which can be used to screen commits before they land in master. Both of these features are wickedly awesome, to not use them would be a mistake for any F/OSS community. +\n +\nI would encourage you to try out BuildHive, it's already active for most/all of the Jenkins plugins. There's also an existing https://groups.google.com/d/topic/jenkinsci-dev/kqPAOziY1as/discussion[RFC thread] which is in discussion for making this the de facto location for Jenkins plugin on Jenkins testing. Please give it a shot and then post your comments. +\n +\nAside from this major announcement, I think the most interesting perspective I took away from the conference was the sheer diversity of Jenkins exploitation. People are using it on all sorts of hardware platforms, from mobile to cloud, on all sorts of languages from Java and C/C++ to Python and Ruby. I was also impressed with how many teams are using Jenkins as part of their mission critical business process. +\n +\nFinally, I'd like to thank all the Jenkins developers and users for making it the best continuous integration software available today. Keep up the good work!","title":"NYC Jenkins User Conference Recap","tags":["general","guest post","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-05-28T00:00:00.000Z","id":"3b137401-523e-529a-993b-5811f4a262ab","slug":"/blog/2012/05/28/jenkins-a-besoin-de-vous/","strippedHtml":"[ Editor’s Note : The following is a guest post by Jenkins contributor Baptiste Mathus. For the non-French speakers, we’re looking for French speakers to help translate \"Jenkins: The Definitive Guide\" ]\n\nSi vous vous intéressez à Jenkins et que vous aimeriez pouvoir y contribuer, lisez la suite.\n\nL’année dernière, en août, nous avons attaqué la traduction en français du Jenkins Definitive Guide, écrit en bonne partie par John Ferguson Smart. Le travail a avancé doucement, mais a avancé tout de même. A ce jour, sur la quinzaine de\nchapitres, trois sont traduits et relus, et presque tout le reste est en cours.\n\nMais je ne parle pas bien anglais…​\n\nCe n’est pas grave. Il y a plusieurs chapitres où il faut simplement relire, et donc parler et écrire correctement le français est suffisant. Si éventuellement, vous ne comprenez pas certaines parties traduites, et qu’il faut relire l’original, vous pouvez toujours soulever la question sur la liste de diffusion du projet où on parle français.\n\nJe ne suis pas développeur, ou je ne connais pas Git, ou les deux\n\nSi vous voulez vous former à Git, c’est l’occasion. On se fera un plaisir de répondre à vos questions sur la liste de diffusion, même si elles sont exclusivement liées à Git, et pas (encore) à la traduction :-).\n\nMais si vous ne le sentez pas ou n’avez pas le temps, ce n’est pas grave. Vous devez simplement savoir éditer un fichier XML. Il y en a un pour chaque chapitre.\n\nSuper ! Par où je commence alors ?\n\nComment se signaler :\n\nIl y a une page wiki qui récapitule l’état de la traduction, chapitre par chapitre. Indiquez votre nom en tant que relecteur, et c’est parti.\n\nSi vous le souhaitez, mais ce n’est pas une obligation, vous pouvez vous présenter sur la liste de diffusion du projet.\n\nComment relire les chapitres ?\n\nLe plus simple est de lire la version HTML publiée en continu grâce à CloudBees.\n\nComment faire part de mes corrections ? Deux solutions :\n\nGit : vous forkez le projet GitHub : Jenkins - Le Guide Complet, vous créez une branche pour la relecture, vous committez vos vos corrections, et vous faites une pull-request.\n\nCopiez le fichier XML du chapitre qui vous intéresse à partir de la page du projet puis vous l’envoyez sur la liste de diffusion lorsque vous avez fini.\n\nSi vous êtes intéressé, mais que vous avez des questions, surtout n’hésitez pas à les poser.\n\nOn vous attend ! :-)","title":"Jenkins a besoin de vous","tags":["general","feedback","guest post"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-06-19T00:00:00.000Z","id":"094af253-783f-503f-9daf-8adf702a6bb3","slug":"/blog/2012/06/19/jenkins-and-bioinformatics-catch-us-at-bosc-2012/","strippedHtml":"[ Editor’s Note: The following is a post from Jenkins CIA member Bruno P. Kinoshita ]\n\nJenkins will be represented at this years Bioinformatics Open Source Conference ( BOSC 2012) on July 13-14th in Long Beach, California. I will be talking about Jenkins during my talk about BioUno.\n\nBOSC 2012 will be held just before ISMB 2012, while registration is through ISMB you don’t have to register for ISMB in order to register for BOSC.\n\nI will be at the event with some Jenkins stickers and available to answer questions you might have about BioUno and Jenkins!\n\nAbout BioUno\n\nBioUno is a project that uses Jenkins as basis for building\nbiology workflows.\nBioUno provides an alternative update center with custom plug-ins for\nbioinformatics tools like\nMrBayes,\nStructure,\nFigtree,\nBeast,\namong others.\n\nWhile the actual task of analysing or displaying data is handled by specific\ntools, that are wrapped by plug-ins, Jenkins is responsible for user control,\nweb interface, notifications, distributed execution, job schedule and\nmanagement, as well as other important low level tasks.\n\nBioUno is similar to BioHPC,\nGalaxy and\nTaverna, in that all these tools enable creating and managing pipelines using different bioinformatics tools.\n\nHowever, as it is using Jenkins, BioUno has the advantage of having an Open Source community of hackers that can answer questions and provide assistance for creating new plug-ins. There is plenty documentation for extending Jenkins\nand troubleshooting issues, as well as plenty existing plug-ins (that can be used as reference while writing new plug-ins).\n\nThere are projects and plug-ins that enable Jenkins to use resources in clouds or turn Jenkins into a Hadoop node, for big data processing. The next steps of the project include the deployment of BioUno to a computer facility, basic infrastructure for BioUno, definition of the process for releasing plug-ins, the creation of more plug-ins and a study on how to handle large data structures, used by many bioinformatics tools.\n\nThe project is being developed by TupiLabs under MIT License, and contributions and new plug-ins are welcome.","title":"Jenkins and Bioinformatics, catch us at BOSC 2012","tags":["general","cia","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-06-22T00:00:00.000Z","id":"94e9269c-b317-5729-917e-714f70e6a1bb","slug":"/blog/2012/06/22/intro-to-jenkins-meetup-in-copenhagen/","strippedHtml":"[ Editor’s Note : This was originally posted to the jenkinsci-users mailing list by community member Bue Petersen ]\n\nPraqma inviterer til Gå-Hjem-Møde i Allerød, onsdag d 27. juni kl 17:00. Få en introduktion og demo af Jenkins CI server (Open Source). Vi byder på pizza og en kold øl eller vand. Arrangement er gratis, tilmelding er nødvendig.\n\nContinuous Integration — er et princip der dikterer, at alle ændringer skal integreres, i det øjeblik de er skabt — kontinuerligt og automatisk. Continous Software Validation går skridtet videre - alle ændringer skal valideres, i det øjeblik de er skabt.\n\nJenkins Continuous Integration Server hurtigt blevet de facto standard for Continuous Integration. Og den er hjørnestenen i build- og softwarevaliderings-systemet og bindeledet mellem samtlige tools i hele den tool-chain, man ønsker at indføre eller udbygge.\n\nPå Jenkins konfigureres jobs, som udover at bygge og eksekvere unittests også kan tage ansvar for valideringer som statisk kodeanalyse, rapportering af warnings, coverage-målinger af unittests, automatisk generering af dokumentation, eksekvering af funktionelle tests etc.\n\nVi holder et uformelt gå-hjem-møde med pizza, øl og sodavand, hvor vi præsenterer Jenkins Continuous Integration og viser dig, hvordan du nemt kommer i gang, så du allerede dagen efter kan høste synlige fordele på dine projekter.\n\nDu kan få helt ny viden og indsigt i din kodebase, og du kan skabe grundlag for ændring af arbejdsgange i udviklingen.\n\nOnsdag 27. juni 2012  kl. 17.00 - 18.30\n\nPraqma A/S\n\nAllerød Stationsvej 4\n\n3450 Allerød\n\nDenmark\n\nTilmelding","title":"Intro to Jenkins meetup in Copenhagen","tags":["general","cia","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-07-23T00:00:00.000Z","id":"cce32b70-fb90-5e85-97e3-b4084c287619","slug":"/blog/2012/07/23/jenkins-user-conference-israel/","strippedHtml":"+\nI'm back from the latest Jenkins User Conference in Israel, and I had such a fun (except the part where I strained my lower back on the day I head back to home so 10+5 hour flights were a torture.) I have this impression that Israeli people form a close-knit community on their own (somewhat like Japanese people do), perhaps because of the difference in the language or the culture. One of the great things about those communities are that people are well connected, and so reaching the right ears and spreading the ideas are easier. JUC Israel turns out to be the biggets JUC we had this year. Shlomi told me that some 230 people registered and 240 people showed up, and this negative last-minute cancellation ratio is unheard of! We had booths from sponsors, 2 concurrent tracks of technical talks, and wonderful Israeli food, in a nice hotel by the beach. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/296/category/5/created-monthly-list-2012-7[ +\nimage:https://photo.kohsuke.org/upload/2012/07/12/20120712090747-e447b7c7.jpg[image] +\n] +\n\n+\n+\n\n+\nFor me, the conference started the night before, when JFrog folks took us to the Hudson restaurant, which was a wonderful steak house. Needless to say I took a lot of pictures. Hudson was great, and I got a wet-wipe in the end to wipe my hands off with Hudson. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/324/category/5[ +\nimage:https://photo.kohsuke.org/upload/2012/07/12/20120712091422-d48662cb.jpg[image] +\n] +\n\n+\n+\n+\n\n+\nAs for the hightlights from the sessions. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/363/category/5[ +\nimage:https://photo.kohsuke.org/upload/2012/07/12/20120712092442-6b807f97.jpg[image] +\n]\n\n+\n+\n\n+\nAfter I and Shlomi have done the keynote, Amir from HP did a wonderful job showing off how he uses the multi-configuration project type (AKA \"matrix project\".) This is one of the areas where we made a lot of improvements lately, and one that I highlighted in my talk. I've always been feeling that this feature needs to be advertised more, so it was just perfect in that regard. It was also very useful for me personally, as I got some inspirations about improvements while he talks. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/384/category/5[ +\nimage:https://photo.kohsuke.org/upload/2012/07/12/20120712093014-62a9271b.jpg[image] +\n]\n\n+\n+\n\n+\nSacha then talked about why the future of server-side applications are in PaaS. He had this one point where he said increasing the failure rate of software projects isn't necessarily a bad thing — if in a time frame of a year, you can do 10 projects and 2 succeed, then while that's only 20% success rate, it's better than doing 4 projects in the same time and having only 1 succeed. IOW, a machine-gun does a far more damage than a pistol, even though their accuracy can be much lower. And PaaS/Continuous-delivery plays a central role here becauses those are what lets you deliver 10 features in a year, instead of 4. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/397/category/5[ +\nimage:https://photo.kohsuke.org/upload/2012/07/12/20120712093400-c7816855.jpg[image] +\n]\n\n+\n+\n\n+\nEyal from RedHat and Ronen from Ginger did two sessions showing off their use of Jenkins. One of the common theme in them is to use a text format (Puppet for Eyal and Groovy DSL for Ronen) to manage definitions of a large number of jobs. I think there's a lot of value in managing job definitions outside the current GUI, and I'm going to encourage Ronen to move his Groovy DSL project into the Jenkins CI project. I also felt that the template feature in Jenkins Enterprise by CloudBees was validated, as it provides a similar capability (and in my opinion more easily deployable.) +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/391/category/5[ +\nimage:https://photo.kohsuke.org/upload/2012/07/12/20120712093221-0c896346.jpg[image] +\n]\n\n+\n+\n\n+\nAnother talk that made a strong impression on me was the introductory plugin development talk from Noam, who works for JFrog and develops the Jenkins Artifactory plugin. I expected there to be only like 20-30 people, but it turns out about half the audience is there, indicating the high degree of interest to customizing Jenkins! In the past, all my favorite JUC talks came from those who I call \"super Jenkins admins\" who not only figure out how to combine some plugins, but also developed a few glue plugins. And those those extra finish makes all the difference! +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/411/category/5[ +\nimage:https://photo.kohsuke.org/upload/2012/07/12/20120712093759-5aec89e0.jpg[image] +\n]\n\n+\n+\n\n+\nThe conference concluded with a social in the garden looking a sunset into the Mediterranean sea. Thank you very much for JFrog and CloudBees for making this event happen, and Marina in particular for lining up all the ducks in a row. +\n +\n\n+\nhttps://photo.kohsuke.org/picture.php?/428/category/5[ +\nimage:https://photo.kohsuke.org/upload/2012/07/12/20120712094258-6527b7cd.jpg[image] +\n] +\n +\nhttps://photo.kohsuke.org/picture.php?/434/category/5[ +\nimage:https://photo.kohsuke.org/upload/2012/07/12/20120712094422-b45159bc.jpg[image] +\n] +\n\n+\n+\n\n+\nThe next JUC will be in Tokyo, at the end of this month. Believe it or not, as of this writing we got 930 people registered, so it'll be another awesome show! For future schedules of Jenkins User Conferences and registrations, check out https://www.cloudbees.com/juc2012.cb[the JUC website]! +\n +","title":"Jenkins User Conference Israel","tags":["general","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-07-26T00:00:00.000Z","id":"31159e40-acb9-519d-b304-b05b9bac834a","slug":"/blog/2012/07/26/jenkins-user-conference-san-francisco-call-for-papers/","strippedHtml":"+\nlink:/node/tags/juc[Jenkins User Conference] is touring around the world and coming back to San Francisco for this September, colocated with JavaOne. +\n +\n\n+\nAnd here is https://www.cloudbees.com/forms/jenkins-user-conference-call-papers.cb[the call for papers] — we'd love users and plugin developers to share their experience with others. Please tell us how you combine plugins in an interesting way, how some of the features in Jenkins did or did not work for you, tricks you use to effectively manage Jenkins instances, and so on. +\n +\n\n+\nI personally know many bay area tech companies that depend heavily on Jenkins. Really looking forward to hearing from you!","title":"Jenkins User Conference San Francisco: call for papers","tags":["general","javaone","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-08-20T00:00:00.000Z","id":"db72ea0b-8626-50eb-8dc7-f03b756a5b56","slug":"/blog/2012/08/20/report-intro-to-jenkins-meet-up-in-copenhagen/","strippedHtml":"We have hosted two informal meetups introducing Jenkins Continuous Integration Server.\n\nThe first in end of June (announced here on this blog) and the second on the 7th of August. The first meet-up in June was only announced 8 days before, but had very good attendance  - the second was completely booked (15 seats).\n\nThe agenda is a short presentation of continuous integration and software validation to inspire the use of Jenkins, then a few words and terms about Jenkins and finally a live demo.\nThe live demo starts from scratch by downloaded the latest Jenkins java web archive, starts it, define a job on one of our Maven based java projects on Github. We add two easy plugins (Warnings and Task Scanner). Second part of the demo is about unit testing and coverage and we show how easy it is to enable a JUnit report and add a Cobertura coverage report if there is already unit tests for the project.\n\nThe meetups have about 90 minutes scheduled, including questions and the discussion session after the demo, where we serve pizza, beer and cola. The theoretical presentation and live demo is typically finished within one hour, even though we encourage our guests to ask questions and discuss whatever comes into their mind on the way. The relatively short time used for the introduction demonstrates how easy it is to get started with continuous integration and software validation using Jenkins.\n\nAs the live demo is based on a Java/Maven project we ask the guests about their technologies and try to relate that to their setup, so they know there also is an easy approach for them to use Jenkins.\n\nThe meeting is quite informal, and limited to 15 participants, leaving plenty of time to dicsuss and answer questions both before and after the meeting. We are always a few developers from Praqma to facilitate the discussions about the participants individual setup and questions.\n\nThese informal discussions are one of the main gains for us in Praqma, as it  is very interesting to share our experience with our guests and hear about all of their interesting challenges, that might have brough them north of Copenhagento attend our meeting.\n\nBecause these first meet-ups have been so popular and interesting we have decided to arrange them regularly in the future. Not just the Jenkins introduction, which will be repeated as long as there is an interest, but we are also making plans for meetups about Git, Mercurial and other topics.\n\nIf you’re interested in more Jenkins and CI related meet-ups in the Copenhagen area, visit our homepage or follow the #pragma hashtag on Twitter.\n\nWe also have a Jenkins User Event in Copenhagen coming in September.","title":"Report: Intro to Jenkins meet-up in Copenhagen","tags":["general","meetup","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-08-27T00:00:00.000Z","id":"99987b74-9422-5386-abf8-63ce6caba00b","slug":"/blog/2012/08/27/volunteers-needed-for-juc-sf/","strippedHtml":"Recently, Jenkins User Conference organizer Alyssa Tong sent out the following request:\n\nJenkins User Conf SF is looking for volunteers to help us record the\nsessions. Pls drop me an email if you’re able to help.\n\nWe’re trying to make sure we can capture video of as much of this year’s conference as possible, but the only way we can do that is with your help!\n\nIf you’ll be in town for JavaOne, or just live in the bay area, drop Alyssa an email at atong@cloudbees.com.","title":"Volunteers needed for JUC SF","tags":["general","cia","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-09-11T00:00:00.000Z","id":"999ede4a-b66d-527b-8c17-1d142d635eee","slug":"/blog/2012/09/11/come-join-the-jenkins-user-conference-san-francisco-on-september-30th/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Golden_Gate_Bridge[image:https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/GoldenGateBridge-001.jpg/250px-GoldenGateBridge-001.jpg[image]] +\n\n+\n+\n\n+\nhttps://www.cloudbees.com/jenkins-user-conference-2012-san-francisco.cb[Jenkins User Conference] is back to San Francisco after a world tour. The conference is on the 30th of this month (Sunday), which makes it back to back with JavaOne, just like the last year. This schedule allows the community people from all over the world to attend and talk, so you see speakers from https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#JevgeniKabanov[different part] of https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#BaruchSadogursky[the world]! +\n +\n\n+\nYou can see https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco.cb[the agenda and the speaker list here], there's a number of speakers from the big/serious users of Jenkins in the bay area, such as https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#JustinRyan[NetFlix], and https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#MaxSpring[Cisco], and https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#JamesBlair[HP]. All of these guys not only just use Jenkins but wrote additional plugins/programs to really tailor Jenkins into fitting their needs, and I think those would be really informative for those who are already using Jenkins, as well as those who are thinking about using Jenkins. +\n +\n\n+\nThis time we also have a couple of talks that discuss how to develop plugins. In JUC Israel, I was pleasantly surprised that a talk on this topic attracted a lot of people! If you are interested in writing a plugin, this would be a great chance to get started. +\n +\n\n+\nWe are also trying to bring https://wiki.jenkins.io/display/JENKINS/Governance+Meeting+Agenda[the Jenkins project meeting], which normally happens in IRC, into the real world in this conference. We are hoping that this would allow those who don't normally come to the meeting to voice their thoughts. If you are interested, feel free to add stuff to the agenda list! +\n +\n\n+\nAnd oh, did you check out who's on the sponsors list this year? +\n +\n\n+\nI hope I convinced you that you must come to this conference — if so, https://juc-san-francisco-september-2012-eorg.eventbrite.com/[please register]. I've been told that right now you can use the promotion code `+JUC-2012SF+` to cut the price in half, so please use it while it still works! +","title":"Come join the Jenkins User Conference San Francisco on September 30th!","tags":["general","meetup","javaone","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-09-12T00:00:00.000Z","id":"63d0593a-8c6c-5de0-8378-c28c4b7c4062","slug":"/blog/2012/09/12/jenkins-user-event-cph/","strippedHtml":"This article was originally posted on my personal blog\n\n+\nhttps://4.bp.blogspot.com/-U254sLok_CA/UEyaAzMGpYI/AAAAAAAAHuI/--wuCdF0j2Y/s1600/IMAG0397.jpg[image:https://4.bp.blogspot.com/-U254sLok_CA/UEyaAzMGpYI/AAAAAAAAHuI/--wuCdF0j2Y/s640/IMAG0397.jpg[image,width=640,height=102]]\n\n+\n +\n +\nLast week, https://www.praqma.com/[praqma] was organizing in Copenhague a \"Jenkins User Event\". A User Event, compared to JenkinsConf, is a lighter meeting with (suposed to be) reduced costs organized by volunteers. Praqma got sponsorship from both https://www.cloudbees.com/[CloudBees] and https://www.programmingresearch.com/[Programing Research] so that they can book a high quality conference room and prepare a nice meeting with all commodities. +\n +\n +\n +\n\n+\nhttps://3.bp.blogspot.com/-v4CkSM9Sdog/UEyXZlXwSFI/AAAAAAAAHt4/D8g72T1meas/s1600/IMAG0388.jpg[image:https://3.bp.blogspot.com/-v4CkSM9Sdog/UEyXZlXwSFI/AAAAAAAAHt4/D8g72T1meas/s320/IMAG0388.jpg[image,width=240,height=320]]\n\n+\nThat was my first travel to Danemark. I enjoyed the winds-farm on northern sea as well as the duty-free lego shop at airport, but didn't have much time to discover the city - so will have to come back next year ;) +\n +\n\n+\nhttps://3.bp.blogspot.com/-GrC_1TF4XMY/UEyXRU5U7rI/AAAAAAAAHtw/nB_jKjSbiFE/s1600/IMAG0412.jpg[image:https://3.bp.blogspot.com/-GrC_1TF4XMY/UEyXRU5U7rI/AAAAAAAAHtw/nB_jKjSbiFE/s320/IMAG0412.jpg[image,width=320,height=130]]\n\n+\n+\n+\n+\n+\n\n+\nhttps://www.praqma.com/sites/default/files/img/codecamp.jpg[image:https://www.praqma.com/sites/default/files/img/codecamp.jpg[image,width=320,height=139]]\n\n+\nThursday was about a https://www.praqma.com/jcicodecamp12[Jenkins Code Camp] (aka \"hackathon\"), that I joined late at 2pm due to flight being delayed. 20 geeks were talking about some technical issues, new features, implementation strategies for a large set of topics. I contribute a group to solve an integration issue by https://github.com/jenkinsci/jenkins/pull/558[creating a new extension] point in jenkins-core. Those already confident with jenkins development helped to write this code, some discovered the extension point design as well as way to contribute to jenkins (github pull request, etc), some were looking at jenkins source code for first time so learned a lot. +\n +\n +\n +\n\n+\nhttps://3.bp.blogspot.com/-8aFBYs3PV2I/UEyZp3x53sI/AAAAAAAAHuA/T0_1zOKFVn8/s1600/IMAG0391.jpg[image:https://3.bp.blogspot.com/-8aFBYs3PV2I/UEyZp3x53sI/AAAAAAAAHuA/T0_1zOKFVn8/s640/IMAG0391.jpg[image,width=640,height=292]]\n\n+\n +\n +\n +\n +\nDay ended with beer then a chinese restaurant (typical Danish food :P), with lots of fun and nice discussions. +\n +\n +\n +\n\n+\nhttps://www.praqma.com/sites/default/files/img/event_logo.png[image:https://www.praqma.com/sites/default/files/img/event_logo.png[image,width=320,height=138]]\n\n+\n\n+\n+\n\n+\n\n+\n\n+\n\n+\nFriday was the Jenkins User Event. To reduce costs for such an event, compared to other Jenkins Conferences organized by CloudBees this year, lunch was not provided and conference program was \"packed\" into afternoon. This let praqma get a \"reasonable\" cost for this nice event, but still have a high quality conference, with printed programs, goodies, and coffee break. All praqma team was involved to make this event as pleasant as possible for all attendees, thanks a lot to them for contributing ! +\n +\n +\n +\nConference was sold-out on friday morning, with 80 attendees. +\n +\n +\n +\nAfter Lars Kruse welcome speak, and CloudBees to announce partnership with Praqma for DK, the conference started with two options : either an introduction to Jenkins, or an open-space discussion (~barcamp-like) for those that already know it well. I joined a small group first discussing about pre-tested commit, and then we divert speaking about best-practices, job and test performances issues, etc. Was a great exchange with interesting feedback. +\n +\n +\n +\nThe rest of the conference was single-track. +\n +\n +\n +\n\n+\nhttps://3.bp.blogspot.com/-oCA1lQnDBeE/UEybtag0JmI/AAAAAAAAHuY/QSofsZ_ae1M/s1600/IMAG0408.jpg[image:https://3.bp.blogspot.com/-oCA1lQnDBeE/UEybtag0JmI/AAAAAAAAHuY/QSofsZ_ae1M/s400/IMAG0408.jpg[image,width=400,height=300]]\n\n+\n +\n +\n1rst session was about \"_facilitate strategic reuse of software_\" using jenkins CI. This session exposed how a industrial company changed it's internal software development practices and team organization to share components and be more efficient. This for sure introduced some coordinations and integration costs but resulted in a significant productivity improvement. This talk was interesting as it demonstrate that highly industrial companies (here, a low energy consuming water pumps producer) today follow development practice to share component and use continuous integration practice to help. I just wondered speaker said \"Clearcase facilitated\" sharing components  -I wouldn't expected those two words in same sentence :P +\n +\n +\n +\n\"_Tales from the trenches_\" was a funny session explaining how Nokia came from stone age (manual integration with code freezes) to modern development practices. After reinventing the wheel with ~15 home made, perl-script based CI tools, they switched to Jenkins and Git as common tooling. Explanation on Git selection, evaluating multiple DVCS popularity, then migration from ClearCase, [.underline]#helping a lot# early adopters, and later evaluating benefits (1 day / week / developer) was very interesting. Conclusion was that, \"some tools a radically better\" and \"deep process renewal depends heavily on tools renewal\". +\n +\n +\n +\n\"_Continuous Code Inspection_\" talk explained use of industrial C++ coding standard and normative coding convention, with dedicated analysis tools. After explanation on those rules and tooling, a dedicated jenkins plugin was demonstrated. Such jenkins integration makes QA mostly a single checkbox to enable, and provide history graphs, reports, and external tools integration. Introduction was a little slow imho but content was demonstrating the power of jenkins plugin model to adapt software factory to specific industrial needs. +\n +\n +\n +\n\n+\nhttps://4.bp.blogspot.com/-Vgq2K5JLj30/UEyfE86usmI/AAAAAAAAHuw/q4vbgqguyuY/s1600/IMAG0409.jpg[image:https://4.bp.blogspot.com/-Vgq2K5JLj30/UEyfE86usmI/AAAAAAAAHuw/q4vbgqguyuY/s320/IMAG0409.jpg[image,width=320,height=240]]\n\n+\n +\n +\nCoffee break with delicious Danish chocolates ... +\n +\n +\n +\nSony was presenting its \"_Huge Jenkins Cluster_\", with 4 controllers, some of them handling up to 6000 jobs, 300 agents, 7000 builds a day an executing 175,000 tests a day for android platforms. Development teams use a dedicated agent machine with android devices connected through USB. +\n +\n +\n +\nSuch a build farm requires a dedicated support team and monitoring/maintenance tooling. IT only provides the computer and maintain the OS, but all Jenkins stuff is under the hands of a dedicated team. They evaluate plugins and core upgrades, educate teams, and analyse errors. +\n +\n +\n +\nWith 45Gb for a single full android build, they have to monitor available disk space, and developed maintenance scripts to delete old build artifacts and cleanup /tmp. They also use a local git mirror to speed-up cloning, and integrated with CFEngine-managed infrastructure to ensure no update occurs as a agent is running a build. They also significantly optimized build speed by switching from NFS to SAN, and are now evaluating XFS. +\n +\n +\n +\nRemaining issue is about jenkins build queue (subject discussed on Jenkins Code Camp) because a 9 in the morning, thousand users connect to jenkins controller and the UI widget to expose the queue status hits the queue synchronisation bottleneck. +\n +\n +\n +\n +\n +\nNext talk was mine, exposing https://www.cloudbees.com/jenkins-enterprise-by-cloudbees-overview.cb[Jenkins Enterprise] and demonstrating one ouf our Enterprise plugins. I'm not pleased by my talk, both because my english is crappy (maybe you already noticed?) and also because I was not confident with the standard JE slides. Assuming I had more time to prepare this talk, and as a tribute to this Danish event, I'd have used a bunch of lego bricks pictures to present Cloudbee plugins. So I quickly left the slides to run a demo, setting-up Jenkins Enterprise to run https://www.cloudbees.com/jenkins-enterprise-by-cloudbees-features-validated-merge-plugin.cb[pre-tested commits]. Hope you enjoyed the talk. +\n +\n +\n +\nhttps://4.bp.blogspot.com/-mnHy9gx9uGw/UEyixY_2Q0I/AAAAAAAAHvI/_KDQbGOTjw8/s1600/IMAG0407.jpg[image:https://4.bp.blogspot.com/-mnHy9gx9uGw/UEyixY_2Q0I/AAAAAAAAHvI/_KDQbGOTjw8/s320/IMAG0407.jpg[image,width=240,height=320]]Last talk was Lars one, exposing praqma \"_Corporate approach to opensource_\". This light, generalist talk was welcome as last one after a heavy-technical afternoon. Lars exposed reason to switch to open-source : +\n +\n +\n +\n\ncosts - for sure,\n\nbut also open standards and interoperability,\n\nand contribution to public good.\n\n+\nThis last point distinguish \"_innovators_\" that create new content and contribute to the oss project, and \"_free riders_\" that only want to save money and consume other efforts. Lars didn't went deeper into what \"contributing\" can be about, but spending some time joining the mailing lists, exposing detailled bug report, or writing blogs or documentation about the issues you encounter is already a huge contribution to opensource. Organizing such a great user event also is ;) +\n +\n +\n +\n +\n +\n +\n +\nMeeting ended with a \"socialize\" time, sponsored by Pragmatic Research, with beer and sandwiches. A nice time to discuss with speakers, know a face to match an #irc nickname, discuss about everything geeks like to discuss about, and round off this pleasant day. +","title":"Jenkins User Event CPH","tags":["general","meetup"],"authors":[{"avatar":null,"blog":null,"github":"ndeloof","html":"","id":"ndeloof","irc":null,"linkedin":null,"name":"Nicolas De Loof","slug":"/blog/authors/ndeloof/","twitter":null}]}},{"node":{"date":"2012-09-21T00:00:00.000Z","id":"d4867bb0-ff33-5539-975b-5a3b1b0d36e3","slug":"/blog/2012/09/21/start-your-own-jenkins-meetup-in-10-easy-steps/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/IMAG0786.jpg[image,width=200] +\n\n+\n+\n\n+\n... and be a https://wiki.jenkins.io/display/JENKINS/Jenkins+CIA+Program[Jenkins CIA agent] too! If you're interested in building an active local Jenkins community, read on to learn how. Really, we can sum it up in one simple step: +\n +\n\nJust Do It!\n\n+\n+\n\n+\nAdmittedly more detailed guidelines can be useful, so hopefully these steps will give you a roadmap and some ideas: +\n +\n\n+\nFind an organizer or two. This is probably you. If you can draft a friend, colleague, or random acquaintance or three to help, even better. To enlist additional help in your area, put the word out on the Jenkins Dev email list and on your Twitter account using the hashtag #JenkinsCI.\n\n+\nLet the Jenkins project know. Let us know so that we can help you. We can promote it on the JenkinsCI blog, promote that on Twitter, and post a summary blog. We can send stickers for you to hand out in the meetup, and we can send you a T-shirt for you to wear. We might be even able to find you additional agents I mean helpers in your city. And if you’re recording the event or streaming it live (we can tell you how), the whole Jenkins world may want to know!\n\n+\nDecide how often you want to meet. Once a month is a good frequency, but if you feel like all you can manage is every two months or even every quarter, go for it! You can always change it.\n\n+\nGo to Meetup.com. We have an account that we can let you use, or you can create your own meetup. They make it very easy to manage attendance and also to spread the word to people with similar interests in your community.\n\n+\nDetermine the topic for your first meetup. You could feature a speaker or two, or host a panel discussion, or just get folks together to talk about how you use Jenkins. YOU would probably be a great speaker for your first meetup – or perhaps some of your colleagues or friends. If you prefer to stay behind the scenes, Twitter and the Jenkins Dev list can help you find a speaker too. And as your meetup grows, you’ll have an automatic pool of interested parties.\n\n+\nCome up with a format for the meetup. Here’s an idea for a schedule:\n6-6:30pm: Check in, Networking & Munchies\n6:30-6:35: Announcements\n6:35-7:15: Speaker/panel (can also have 2 speakers, which might go longer)\n7:15-7:30: Q&A\n7:30: Wrap up, chat\n8:00: Say goodnight, or go out together and keep drinking\n\n+\nFind a venue, preferably a free one. Ideally, your company or one you know can host… then the venue is free. Alternate solutions: hotels (which unfortunately cost $$$) or reserve a room at a local bar or restaurant. Sometimes a university or even a library can help out with a free room.\n\n+\nAsk a company or two to sponsor the meetup, which consists of paying for food and drinks for all (and some companies will bring along SWAG). Often the company hosting the venue will also sponsor. Sponsoring is a great way for companies to generate positive publicity in their locale, to get the word out that they’re hiring, and to support the Jenkins community in general.\n\n+\nPlan the room logistics. Consider how you want the room to be set up – theater style or as individual tables to encourage group discussions. Also make arrangements to secure a projector and screen. It’s a good idea to bring along connectors for both Mac and PC.\n\n+\nGet the word out in any way you can. Some ideas:\n\nTell us so that we can promote it through our existing channels.\n\nIf you use Meetup.com, they’ll help get the word out. And as more people join to attend one meetup, they’ll receive word about future meetups too. EventBrite is also good about suggesting events in your area that might interest you.\n\nEmail folks at your company who might be interested\n\nEmail friends and former colleagues and ask them to spread the word\n\nPost the event to your Twitter, Facebook, and/or LinkedIn profiles\n\nIf you know of any calendars that highlight local Tech events in your area, post your meetup there. Likewise for any Tech email digests you may receive.\n\n+\n\n+\n +\nAdditional tips: +\n\nGet someone to record the event. Doesn’t have to be professional quality – a Flip cam or SmartPhone can take perfectly usable video (just make sure they can record long enough!). Better yet, stream it live if you can! Broadcasting makes the event accessible to the world, not just your community, and word will travel even farther! As well, future speakers can get an idea for how your group does things.\n\nPlan that ~50% of the people who RSVP won’t make it. It’s a free event, and plans tend to change. Order food and drink accordingly.\n\nRemember that free food and BEvERages are strong motivators! Pizza, giant subs, or other local favorite are great choices. For BEvERages, you’re probably fine with beer, Coke and water.\n\nBring a sign-in sheet and name tags (and pens).\n\nConsider asking the sponsor to bring SWAG or raffle off something cool (maybe even their product or service).\n\nAt the beginning or end of the meetup, ask attendees to suggest topics they want to cover in future meetups. Or have them write down suggestions and put them in a box (then maybe raffle off a prize from the pool of contributors).\n\nVary the format of your meetup – presentation, Birds of a Feather discussion, hackathon, lightning talks, white board night, Jenkins problem-solving session… all of these may interest your audience. If you can, switch the venue as well – that way people get to see other interesting companies, and can also choose to attend meetups that may be more convenient to them.\n\nStart and end on time. If things start to run over, you can always break and let people know they can go if they need to, but are welcome to stay if they like.\n\nJoin forces with other groups when you can – this builds up both of your groups! For example, host a joint Jenkins-Selenium group on the topic of Testing with Jenkins.\n\n+\n +\nStill have questions? https://twitter.com/jenkinsci[Give us a holler]! +\n +\n +\n**Special thanks to our friends at https://www.saucelabs.com[Sauce Labs] for some of this content — they wrote https://sauceio.com/index.php/2011/10/so-you-want-to-start-a-selenium-meetup-group-now-what/[a similar guide] for starting Selenium meetups.","title":"Start Your Own Jenkins Meetup in 10 Easy Steps","tags":["general","cia","meetup"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2012-09-24T00:00:00.000Z","id":"a9d59619-964b-56f6-8905-740dfe1e1ee6","slug":"/blog/2012/09/24/jenkins-project-meeting-in-the-meat-space-call-for-agenda/","strippedHtml":"As you may or may not know, the Jenkins project has a bi-weekly IRC meeting where we discuss and decide on things necessary to keep the project running.\n\nNext Sunday, we’ll bring this project meeting live to Jenkins User Conference San Francisco.\n\nSince this is an unique opportunity to engage people who don’t normally come to these meetings, I’d like to encourage everyone to propose agenda items and add it to the agenda page.\n\nThe Wiki page lists all the past meetings, so you can get a sense of what it is like. But this time, we hope to have a good number of users to the meeting, not just project insiders. So if you have things you’d like to get users feedback on, or if you like project insiders to update you on things, please don’t hesitate to add them.\n\nI still need to work on the logistics, but the plan is to do a cross-over with IRC — I’d like to show the IRC client projected in the room, so that people in the room can see the conversation in IRC, and I’d like either real-time transcribing of voice conversations to IRC and/or live broadcasting of the room.","title":"Jenkins project meeting in the meat space / Call for agenda","tags":["general","feedback","meetup","javaone","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-09-26T00:00:00.000Z","id":"50331944-1a8d-5047-8c9d-3ba3b49d1963","slug":"/blog/2012/09/26/dinner-after-juc/","strippedHtml":"+ +\n\n+\n\n+\nhttps://www.cloudbees.com/jenkins-user-conference-2012-san-francisco.cb[Jenkins User Conference 2012 San Francisco] is this weekend! +\n +\n\n+\nBased on the experience from the last year, we are going to make a reservation for a dinner after JUC. If you are interested in joining us, https://www.meetup.com/jenkinsmeetup/events/84235932/[please RSVP]. We haven't decided where to go, but we'll place a reservation somewhere (and if you know a good place to go, please tell us, too!), so that we won't have to spend 30 minutes on the street looking for a place for a crowd. +\n +\n\n+\nEating is more fun when there are more people. Please join us!","title":"Dinner after JUC","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-09-26T00:00:00.000Z","id":"d53919a7-b69d-556e-baca-2ad3e8d7aedb","slug":"/blog/2012/09/26/jenkins-sessions-at-javaone/","strippedHtml":"It’s the JavaOne season again in San Francisco. This year, there are whopping 6 sessions that discuss Jenkins (including myself, which is the very first session in Monday!) Unfortunately some of them happen in the same time, but I for one am looking forward to seeing the mobile app test talk from Intuit.\n\nCON6256 - Large-Scale Automation with Jenkins (Monday 8:30am, Hilton)\n\nJenkins is the most adopted open source continuous integration server today, and beyond the automated build and test, it is a platform for launching all kinds of automation tasks. As the use of Jenkins grows inside an organization, people are automating complex activities that need to be choreographed—such as deploying an application, running a load test, cleaning up the environment, and then handing over the build to the operation team. Such orchestration of activities is a very useful building block for continuous delivery, a practice promoted in recent years. This session looks at various patterns and plug-ins that deal with this kind of choreography. It also briefly discusses what’s new in recent versions of Jenkins.\n\nCON3648 - Take Your Mobile Applications Tests to the Next Level: Continuous Integration (Monday 1pm, Hilton)\n\nMobile tests today can be automated by popular mobile testing frameworks in Java such as monkeyrunner, Sikuli, and Robotium. However, getting mobile tests running in continuous integration is not widely understood and rarely implemented. Whether you are an experienced mobile developer or tester or new to the mobile field, this session informs you about the complexities of emulators and devices and how you can navigate through each challenge to integrate mobile tests into Jenkins. You will be guided step-by-step through two case studies on how to integrate native Android and iPhone application tests by using monkeyrunner and Sikuli, respectively, into Jenkins. Leave with Java code samples of these automated tests as well as practical knowledge of mobile devices and emulators.\n\nCON2822 - Real-World Strategies for Continuous Delivery with Maven and Jenkins (Tuesday 10am, Hilton)\n\nMaven is close to ubiquitous in the world of enterprise Java, and the Maven dependency ecosystem is the de facto industry standard. However, the traditional Maven build and release strategy, based on snapshot versions and carefully planned releases, is difficult to reconcile with modern continuous delivery practices, where any commit that passes a series of quality-control gateways can qualify as a release. How can teams using the standard Maven release process still leverage the benefits of continuous delivery? This presentation discusses strategies that can be used to implement continuous delivery solutions with Maven and demonstrates one such strategy using Maven, Jenkins, and Git.\n\nCON12570 - Pragmatic Continuous Delivery (Tuesday 10am, Hilton)\n\nWhen you send a package via FedEx, it goes through a tracked, automated process that makes sure the package arrives promptly at the destination. Continuous delivery describes how this process can similarly be made fully automated and transparent, with your commits “fedexed” to production. The focus of continuous delivery is the delivery pipeline. Every commit that enters the pipeline should go through automated integration and testing, and if successful, produce a release candidate. This presentation is based on a demo that uses Jenkins to orchestrate the delivery pipeline; Nexus for long-running and manual workflows; and LiveRebel to make production updates quick, automated, nondisruptive, and reversible.\n\nCON3363 - HTML5 Testing in All Browsers with Java (Tuesday 11:30am, Parc 55)\n\nWould you love to test your HTML5 app in all browsers? The biggest challenge in writing HTML5 applications is that your application must run on many platforms, ranging from old desktop browsers to cutting-edge mobile browsers. Each browser behaves nearly the same, but inconsistencies can lead to major bugs. In this session, JavaOne Rockstar and Java Champion Kevin Nilson shows how you can leverage open source Java tools to test your HTML5 application in all browsers. The presentation shows examples of using tools such as TestSwarm, QUnit, jQuery, Jenkins/Hudson, Oracle VM VirtualBox, GlassFish Server technology, and Sun SPOTs to test your HTML5 application in all browsers.\n\nCON12983 - Java PaaS: The Engine for Delivering Enterprise and Mobile Applications (Wednesday 8:30am, Parc 55)\n\nAttend this demo-filled session that shows you how to use Java platform as a service (PaaS) to deploy complete enterprise applications in the cloud with Eclipse, Jenkins, and MySQL in addition to iOS/Android clients and full end-to-end continuous integration. In a few minutes, you’ll have cloud-based Git/SVN repositories set up with CI builds triggered automatically and your apps, databases, and supporting services up and running live. The presentation also shows how you can add more PaaS services—ALM, Web monitoring and analytics, hosted log management, e-mail integration, enterprise search, cloud DB services, and much more—to your apps right off the bat. Experience the future of Java development!\n\n+\n +\nAnd it looks like the jclouds session will also touch jgroups plugin: +\n +\n\nCON8009 - What’s New in jclouds 1.5 (Monday 10am, Parc 55)\n\njclouds 1.5 is the result of 3.5 years of development by nearly 100 developers interested in portable cloud computing. During this session, you’ll get up-to-date with cloud computing technology developments such as OpenStack. You’ll learn how to use jclouds 1.5 to control private and public infrastructures and storage clouds programmatically. You’ll also see examples of new tools powered by jclouds, including Jenkins and Brooklyn.","title":"Jenkins sessions at JavaOne","tags":["general","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-09-28T00:00:00.000Z","id":"324acdda-6221-5180-94c4-b937a9779d92","slug":"/blog/2012/09/28/saturday-night-drink-up/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/NCI_Visuals_Food_Beer.jpg/320px-NCI_Visuals_Food_Beer.jpg[image] +\n\n+\n+\n\n+\nBecause https://www.meetup.com/jenkinsmeetup/events/84235932/[the dinner looks popular], here's another last minute gathering for https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco.cb[JUC San Francisco]. +\n +\n\n+\nWe'll have a small drink-up Saturday night at http://21st-amendment.com/[21st Amendment] (563 2nd Street), like from 6pm to whenever. If you are coming from out of town, you probably are around, so why not join us! +\n +\n\n+\nAt least abayer, majost, and kohsuke should be there, and hopefully more. If you are coming, please leave a comment in this post so that we get the sense of who to expect!","title":"Saturday night drink-up","tags":["general","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-09-28T00:00:00.000Z","id":"1759b910-aa31-5ef1-89c7-7ffbe58d9d18","slug":"/blog/2012/09/28/take-the-jenkins-survey/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/0/01/Paid-surveys.jpg[image,width=200] +\n\n+\n+\n\n+\nJust like https://blog.cloudbees.com/2011/12/jenkins-community-survey-results-82.html[the last year], link:/survey[we are running a survey this year], to get some objective insights into what our users would like to see in the project. Obviously, the developers in the project deal with https://issues.jenkins.io[individual bug reports and feature requests] all the time, but sometimes those day-to-day issues distract you from a bigger picture. +\n +\n\n+\nThis year, we kept some of the questions the same, so that we can see the trend. But we also http://meetings.jenkins-ci.org/jenkins/2012/jenkins.2012-09-19-18.00.log.html#l-142[discussed what we wanted to ask] among ourselves and revised some more. +\n +\n\n+\nThe tricky thing about being an open-source project is that it's not like some of us can actually decide what we'll be working on — in the end it's up to individual contributors to decide what they want to work on. So I can't make promises, but in a way, that's precisely why we'd like to get these objective, measurable, quantitative feedbacks. It lets us discuss how to solve the problem, instead of spending time discussing what the problem is. +\n +\n\n+\nLast year, we've heard loud and clear that people wanted to see some UI improvements. So a bunch of us sit down at link:/blog/2012/02/21/fosdem-2012-recap/[FOSDEM], picked up several key UI improvements, and https://wiki.jenkins.io/display/JENKINS/UI+Enhancements[we've actually delivered on those]. This year I hope to do the same. +\n +\n\n+\nThe survey will close at the end of October, and if you participate, you'll get to see the results first. As an added incentive, CloudBees had pitched in a $100 Amazon gift card. So https://jenkins-ci.org/survey[please let your voice be heard].","title":"Take the Jenkins Survey!","tags":["general","feedback","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-11-14T00:00:00.000Z","id":"e995ce1b-eeca-50c4-9e25-f2ae3c7fdc6d","slug":"/blog/2012/11/14/sponsor-jenkins-bugs-with-freedom-sponsors/","strippedHtml":"(This is a guest post by Tony França)\n\nHi all, my name is Tony, I’m the creator of ( FreedomSponsors) and today I want to talk how Jenkins has inspired me to build it.\n\nBefore starting, I’d like to thank the Jenkins crew for letting me publish this guest post in their blog.\nOn top of that, thank you for maintaining Jenkins as well - I’m a big fan and a heavy user. Jenkins potential to make peoples lives easier is really amazing.\nYou guys are amazing.\nAnd Kohsuke, you’re my personal hero :-)\n\nAll right, that being said, let’s move on with the story.\n\nMost people who like FreedomSponsors probably don’t know that Jenkins is sort of the reason it exists in the first place. That’s right, if it wasn’t for Jenkins I’d probably never had the idea for FS.\n\nThis is how it happened.\n\nI was playing with the ( Jenkins OpenID plugin), and I was having some trouble with it.\nAfter a little research, I found that there was a JIRA bug for it - ( JENKINS-9216: Make OpenID work with Google Apps accounts).\n\n\"Bummer\" - I thought - \"Maybe I can try to debug it. Oh boy, but I don’t know anything about Jenkins code. That would be too…​ expensive! I bet there are a few people out there that would be willing to even pay a few bucks to the Jenkins crew to prioritize this.\"\n\nThe moment I thought that, a storm of ideas came rushing into my head.\nIt was like a conversation with myself in my mind.\n\n\"Wait a minute…​ why can’t people actually do just that?! They should be able to.\"\n\n\"Maybe a JIRA plugin could let them…​\"\n\n\"But what about other projects, ones that don’t use JIRA?\"\n\n\"Maybe there could be a central place for all those offers. If many people 'sponsor' the same issue, the developer who solve it might get a decent piece of gold - rightfully deserved. That could even free up more of their time to work on the projects they love :-)\"\n\n\"The sponsors would pay the developers out of gratitude, and for the sake of keeping their word.\"\n\n\"This has the Agile spirit in it: Customer collaboration over contract negotiation\"\n\nAnd I kept thinking, and it didn’t took very long until I had the whole \"sponsoring model\" in my head.\nI realised that that was one of the best ideas I had in my life. I was very excited and I had to act on it.\n\nI started studying Django on that same day. I had already learned some Python before and Django had been on my queue for some time. And I’m glad I did it. I’ve been building JavaEE (Java web) applications for about 8 years now, and, oh boy, Django makes things soooo much easier, and simpler, and faster to code - I’m in love with it…​ Okay, but I’m missing the point here.\n\nSo, I started building \"it\" alone on my free time. It took me a few days to pick a name for \"it\".\nThe \"FreedomSponsors\" name came very naturally - it rightfully conveys what the platform would do, and the spirit of software freedom that I’d like to encourage.\n\nSeven weeks later it was done. I had already bought the domain and created an account at Amazon AWS.\nSo I put it up and started bugging everyone about it.\nAnd guess who was the first person I wanted to tell? Kohsuke Kawaguchi :-)\nIt was just fair. So I sent him this email.\n\nOn Sun, Jul 8, 2012 at 3:36 AM, Tony França tonylampada@gmail.com wrote:\n\nHi Kohsuke.\nMy name is Tony, I’m a Software Architect.\nI’m a big fan and a (very) heavy user of Hudson - Jenkins.\nIt has really been enabling our company to move towards a \"continuous delivery\"-like development process in the past couple of years.\n\nSo, thank you for that.\n\nAlso, if it wasn’t for Jenkins, maybe I would never had the idea to build the FreedomSponsors web site.\nThat’s my personal project - an idea that I had about six weeks ago.\n\nYou see, most of the time I was developing it, I had you in mind.\nI have always felt that \"Jenkins is so great, that Kohsuke really deserves to get rich for it\".\n\nI just launched FreedomSponsors - a few minutes ago.\nIt just felt right to come here and tell you about it :-)\n\nLet’s see if I can get you rich now :-).\n\nCheers!\nTony Lâmpada\n\nAnd his reply just made my day\n\nOn Thu, Jul 12, 2012 at 5:19 PM, Kohsuke Kawaguchi wrote:\n\nCongratulations for launching your service.\n\nI thought about a similar idea long time ago over a lunch with my colleagues, but my hats off to you for actually making it real. I can imagine a lot of obstacles (most of those you already note in FAQ), but if this works out I think it’d be great.\n\nBy the way, I wonder if you have considered open-sourcing this, say under Aflo GPL. With the network effect and being the dominant contributor, it’s very difficult for anyone else to run the same code on public internet to compete with you, and it does let other people contribute small changes, and given your audience is open-source developers, I think it sends the right message as well as help you boost your development. It also seeds the ecosystem (of Bugzilla plugin, JIRA plugin, dashboard, etc.), too.\n\nJust my 2 cents.\n\nYou see, FS’s code was still closed when I launched it. I was worried about competition indeed.\nBut his arguments were very convincing. Specially when he talked about sending the right message to the Free Software community. I thought about it for while and came to the conclusion that he has absolutely right. It still took me a few weeks until I moved the code to Github. I’m glad I did it. The feedback loop has been great.\n\nAnd that was not his only contribution. He also gave us this very useful piece of feeback:\n( JIRA plugin to link from tickets to FreedomSponsors)\n\nIndeed, that was a great idea. My friend and associate Arthur is the one who built it.\nKohsuke suggested that I joined the Jenkins crew at the ( Jenkins Governance meeting) to see if everyone would agree about installing it on Jenkins JIRA. Everyone liked the idea and had no ojections.\n\nI can’t say enough how trilled and honored I felt knowing that Jenkins would be the first project to install our plugin. Thank you folks. Thanks Kohsuke. You guys are awesome :-)\n\nNow FreedomSponsors is growing, slowly but steadily. And what makes us really happy is that almost every developer we tell about it just loves the idea. We’ve received valuable, constructive feedback from a lot of people who want to see us moving forward. That’s the best incentive that I could wish for.\n\nWe still have a lot of challenges ahead of us. The biggest and closest one in the horizon is to start a \"movement\" that will help spread within companies a culture of contributing more to the free software projects they depend on, by making they realise that that’s what’s best for everyone. If we can achieve that then we’ll have made the free software world even better.\n\nSo, everything I wrote so far is, hopefully, only the begginning of this story. And I’m really excited and looking forward to see it unfold. Being a part of it is even more exciting.\n\nWhat about you? If you want to be updated about, or even help write the next chapters, then\njoin, follow, like, read, spread the word, give feedback and contribute with code or new issues.\n\nThank you Jenkins crew, thank you Kohsuke.\nWe wouldn’t have made it here without you.","title":"Sponsor Jenkins bugs with Freedom Sponsors","tags":["development"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-11-15T00:00:00.000Z","id":"63d83fab-b5df-590f-8a50-0bda3847bf2d","slug":"/blog/2012/11/15/fundraising-for-travel-grant/","strippedHtml":"+ +\n\n+\n+\n\n+\nWe are trying to https://co.clickandpledge.com/advanced/default.aspx?wid=46160[raise $2000 travel grants] for assisting Jenkins contributors to travel, meet, and strengthen their relationships with the other Jenkins contributors. Specifically, we have https://fosdem.org/2013/[FOSDEM] and https://www.socallinuxexpo.org/scale11x/[SCALE11x] in mind, in which there already are a fair amount of Jenkins contributors concentration. +\n +\n\n+\nBeing an open-source project, Jenkins developers are highly dispersed, yet a lot gets done in the community through human relationships, just like any other organizations. This poses a challenge, because most of the contributors work on Jenkins on their spare times, and so people are on their own to travel to the shows, creating greater divides between those of us in the U.S., Europe, and in Asia. +\n +\n\n+\nThis fundraising is a bit of experiment to see if it's worth the money. The goal is to sponsor two people who don't work on Jenkins full time to travel to those events (and hopefully present talks, although that's subject to the acceptance by conferences.) We'll also report back what came out of them. +\n +\n\n+\nIf you think this is a worthy goal, https://co.clickandpledge.com/advanced/default.aspx?wid=46160[please consider donating]. If you'd like to donate but not for this cause, please drop us a note so that we can attribute it accordingly.","title":"Fundraising for travel grant","tags":["general"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-11-16T00:00:00.000Z","id":"f5e0e4b2-7acf-5fab-b6a9-970802f8eadc","slug":"/blog/2012/11/16/new-mailing-list-for-better-event-meet-up-local-community-coordination/","strippedHtml":"+\nAs per http://meetings.jenkins-ci.org/jenkins/2012/jenkins.2012-11-14-19.01.log.html#l-68[the discussion in the project meeting today], we created http://lists.jenkins-ci.org/mailman/listinfo/jenkins-events[a new mailing list `+events@lists.jenkins-ci.org+`] for: +\n +\n\ndiscussing and coordinating Jenkins related events\n\nshare knowledge between different local communities\n\nhelping new organizers by having existing community people offering advices\n\nimproving visibility and transparency of event organization work\n\n+\n+\n\n+\nIf you are interested in facilitating local communities (being from Japan, I know for a fact that a local community that speaks the native language makes a big difference in many parts of the world!) +\n +\n\n+\nThe list is http://lists.jenkins-ci.org/mailman/listinfo/jenkins-events[open for anyone to join] and the archive is public. Looking forward to seeing you in the list.","title":"New mailing list for better event/meet-up/local community coordination","tags":["general","mailing list","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-11-18T00:00:00.000Z","id":"8b87be41-1fcb-53eb-9ced-f72c5ac77bb6","slug":"/blog/2012/11/18/comunidade-verde-amarela-do-jenkins-uni-vos/","strippedHtml":"O Jenkins, servidor de integração favorito de todos, é muito utilizado no Brasil, e agora tem uma lista de e-mails em Português além do primeiro encontro de usuários Jenkins no Brasil. Se você utiliza o Jenkins, desenvolve plug-ins, tem interesse em aprender mais sobre esta incrível ferramenta Open Source e sobre Integração Contínua, essa é a sua chance!\n\nAlém de matar dúvidas sobre o Jenkins e aprender com os outros participantes, há várias outras atividades na comunidade como a tradução de documentação, tutoriais e livros, bem como a divulgação de eventos e treinamentos.\n\nGostei! Como participo?\n\nVocê pode começar se inscrevendo na lista de e-mails de usuários do Jenkins em Português (jenkinsci-br). Lá você poderá enviar suas perguntas, bem como ajudar outros usuários com dúvidas sobre o Jenkins ou plug-ins. Se você utiliza o Twitter, os anúncios e links serão disponibilizados no @jenkins_br.\n\nEncontro de usuários Jenkins do Brasil 2012\n\nO primeiro encontro de usuários Jenkins do Brasil acontecerá no próximo dia 1 de Dezembro de 2012. O evento é gratuito e acontecerá na USP, em São Paulo. Lá você poderá acompanhar palestras, lighting talks, conversar com outros profissionais e também terá a oportunidade de conhecer pessoalmente Kohsuke Kawaguchi, outros usuários e desenvolvedores de plug-ins do Jenkins.\n\nConfirme já sua presença no encontro de usuários Jenkins do Brasil 2012! Apesar de gratuito temos lugares limitados e precisamos estimar o número de participantes para brindes, bebidas e para acomodar bem todos os  participantes.\n\nEsperamos você lá! :-)","title":"Comunidade verde-amarela do Jenkins, uni-vos!","tags":["general","feedback","guest post"],"authors":[{"avatar":null,"blog":null,"github":"kinow","html":"","id":"kinow","irc":null,"linkedin":null,"name":"Bruno P. Kinoshita","slug":"/blog/authors/kinow/","twitter":null}]}},{"node":{"date":"2012-12-13T00:00:00.000Z","id":"18a1c49c-f61d-53b6-b0ae-88d9b4ed9f31","slug":"/blog/2012/12/13/office-hours-next-week-metadata-plugin/","strippedHtml":"+\nhttps://wiki.jenkins.io/display/JENKINS/Office+Hours[The last Jenkins office hour of the year] hosts Robert Sandell and Tomas Westling, who will go over https://wiki.jenkins.io/display/JENKINS/Metadata+plugin[newly open-sourced metadata plugin] from Sony Mobile Communications (https://developer.sonymobile.com/2012/11/22/sony-contributes-to-jenkins-software-tool/[more about this story on their website]). This team from Sony Mobile has been known for several other popular plugins, including https://wiki.jenkins.io/display/JENKINS/Gerrit+Trigger[the Gerrit trigger plugin]. And I think this latest batch of plugins will not disappoint! +\n +\n\n+\nAs I understand, this plugin is a https://wiki.jenkins.io/label/JENKINS/plugin-library[library plugin], which is primarily meant to be consumed by other plugins. With help of other plugins using this plugin, it can classify jobs and agents by adding metadata tags to them. This in turn enables more intelligent scheduling, views, access control, and so on. +\n +\n\n+\nPersonally, I'm very interested in integrating https://wiki.jenkins.io/display/JENKINS/iOS+Device+Connector+Plugin[the iOS device connector plugin], so that one could say \"run this job on a Mac where iPad2 is connected\", etc. The other piece is to integrate this with https://wiki.jenkins.io/display/JENKINS/External+Resource+Dispatcher[the external resource dispatcher] so that Jenkins can grant exclusive device access to jobs while they are running so that tests don't end up trying to use the same device. +\n +\n\n+\nIf you are a plugin developer, hopefully this gets you excited. See you https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Office+Hours&iso=20121219T11&p1=283&ah=1[Dec 19th 11am PST]. +","title":"Office hours next week: metadata plugin","tags":["development","core","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-12-19T00:00:00.000Z","id":"b995ccf2-ce62-5555-b39e-69d000170d61","slug":"/blog/2012/12/19/los-altos-hackathon-this-friday/","strippedHtml":"+\nWhat better way to end the year than to come join a little Jenkins hackathon this Friday afternoon with Kohsuke (the core developer), Max Spring (https://wiki.jenkins.io/display/JENKINS/Jenkow+Plugin[Jenkow plugin]), and hopefully other Jenkins hackers? +\n +\n\n+\nWe'll do this at https://maps.google.com/maps/ms?msid=204997319446652334724.0004d13cfa1eb16f65a99&msa=0&ll=37.377281,-122.113874&spn=0.007656,0.00478[CloudBees Los Altos office], starting around Friday 1pm. +\n +\n +\n[.small]#View https://maps.google.com/maps/ms?msid=204997319446652334724.0004d13cfa1eb16f65a99&msa=0&ie=UTF8&ll=37.377281,-122.113874&spn=0.007656,0.00478&t=h&source=embed[CloudBees Los Altos office] in a larger map# +\n +\n\n+\nOur plan is to primarily hack on the Jenkow plugin, but if you have other projects you'd like to hack on, that'd be welcome. Or if you've been interested in getting started on writing a plugin but haven't had a chance to, this is a great time to do this, and when you get stuck the help is right next to you. Or heck, if you just want to drop by and say hello, that's fine, too. +\n +\n\n+\nBeer, cofee, and other drinks are provided, as well as Jenkins stickers.","title":"Los Altos Hackathon This Friday","tags":["development","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-12-20T00:00:00.000Z","id":"8ac5933a-96b7-5a2b-9d41-2181c54255a5","slug":"/blog/2012/12/20/jenkins-keynote-at-fosdem-2013/","strippedHtml":"Earlier this year we participated in FOSDEM 2012 in Brussels, Belgium. Overall the event was a major success and we’re very happy we were able to take part in it!\n\nFor FOSDEM 2013, we’ll be back in Brussels and participating in a major way. The first day of FOSDEM (February 2, 2013) will be the 2nd birthday for the Jenkins project, and seems appropriate that project founder Kohsuke Kawaguchi will be giving a keynote session titled: \" How we made the Jenkins community \"\n\nHere’s an excerpt from Kohsuke’s talk proposal:\n\nJenkins project has an interesting history. It started from scratch on my spare time, and grow over time to boast 600+ open-source plugins developed by 300+ contributors from all around the world.\n\nThere are several key ingredients, both technical and social, that enabled this model, and I think those ingredients are useful to other projects. In this talk, I’ll discuss how Jenkins project and the community works, what these ingredients are, why they help you attract more developers into your projects, and why it matters.\n\nYou can read more about Kohsuke’s keynote here\n\nIn addition to the keynote, I ( R. Tyler Croy), and a number of members of the Jenkins, Cucumber and Selenium communities are hosting the first ever Testing and Automation devroom at FOSDEM.\n\nIf you’re interested in submitting a talk proposal for the dev room the deadline is 23:59 UTC on December 21st 2012! The Call for Proposals can be found here, and the proposal submission form can can be found here.\n\nWe are very likely going to have a table in the hall again this year, but the FOSDEM committee hasn’t yet confirmed whether or not we will have a table.\n\nRegardless, a lot of Jenkins community members will be at FOSDEM in February in addition to hundreds of other open source contributors and users from around the world.\n\nIf you’re interested in participating and/or meeting up with the Jenkins crowd, there’s details coming together on the FOSDEM wiki page .\n\nWe hope to see you there!","title":"Jenkins keynote at FOSDEM 2013","tags":["general","cia","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2012-12-25T00:00:00.000Z","id":"2eaec6cf-6301-5d69-8962-b52a70cf9ccf","slug":"/blog/2012/12/25/jenkins-meet-up/","strippedHtml":"\">\n\n우리는 2013년 1월25일 저녁에 Jenkins meet-up을 삼성전자와 함께 준비하고 있습니다.\nMeet-up은 서초사옥에서 진행될 예정이며 추후 변경될 수 있습니다.\n발표자는 일본 커뮤니티에서 활동중인 Cactuman과 삼성이고 Groovy script를 이용한 job 일괄설정\n에 대해서 발표할 예정입니다.\n\nJenkins를 설치한 통계를 통해 저희도 한국에 많은 사용자가 있다는것을 알고 있었습니다.\n지금까지는 메인 Jenkins community에서 컨택하는데 실패했었지만 이번에 그런 상황이 해결된것에 너무 흥분됩니다.\n\n이번 meet-up에 참가할 의사가 있으면 meetup.com 에 회답해 주시면 됩니다.\n참가비는 없으며 우리는 Jenkins,plugin 들과 함께한 경험들(간단한 주제를 포함)을 한국의 Jenkins user와\n공유 할 더 많은 발표자를 찾고 있습니다.\n\n여러분의 많은 참가를 기대합니다.\n\nWe are organizing a Jenkins meet-up in Seoul in the evening of Jan 25th 2013, thanks to the help of folks at Samsung. The meeting will be in the evening, at the location to be determined. I am presenting in person, as well as Cactusman, one of the key community people in Japan. Seung-Heui Jang from Samsung would be presenting about job batch processing by Groovy scripts.\n\nAccording to the installation statistics, we know there are significant user base in Korea, but so far the main Jenkins community has failed to establish contacts with them. I’m really excited that I can finally fix this situation!\n\nIf you are interested in coming, please RSVP at meetup.com. The event will be free. We are still looking for a few more speakers (including lightning talks), so please share your experiences with Jenkins, plugins you’ve been working on, and so forth with the rest of the Korean Jenkins people.\n\nLooking forward to seeing many of you!","title":"한국에서의 첫번째 Jenkins meet-up!","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-01-25T00:00:00.000Z","id":"b00b51fc-85da-5a25-ac53-c4501409f01d","slug":"/blog/2014/01/25/jenkins-at-fosdem-2014/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/fosdem.png[image] +\n\n+\n\n+\nhttps://en.wikipedia.org/wiki/FOSDEM[FOSDEM] is probably the biggest open-source developers' conference in Europe. +\n +\n\n+\nThis year will be the 3rd year for us to be present in FOSDEM. There will be https://wiki.jenkins.io/display/JENKINS/FOSDEM[a bunch of community people], handing out flyers and stickers, showing Jenkins, and generally be available to talk to people! This year, we'll bring some Jenkins T-shirts to sell, and hopefully some bobble heads as well. So please be sure to drop by. +\n +\n\n+\nAnd if you are already involved in the Jenkins project and willing to help us man the booth, that'd be awesome! Looking forward to seeing you! +","title":"Jenkins at FOSDEM 2014","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-03-19T00:00:00.000Z","id":"dee29bf3-dbc5-5abe-a7e0-e3cd5f4e9de2","slug":"/blog/2014/03/19/jenkins-user-conferences-this-year/","strippedHtml":"+\nOver the past three years, the Jenkins User Conference is held annually in the https://www.cloudbees.com/jenkins/juc2013/juc2013-palo-alto-abstracts.cb#FlorianLier[Bay Area] with a few events in different locations around the world. The Jenkins User Conference has established a reputation as a focal point for the Jenkins community to come together to share new ideas and best practices. Each year we have experienced the growth and expansion within the Jenkins community. This year we are taking this platform to other regions of the world, offering regional gatherings of Jenkins users and developers. +\n +\n\n+\nAt the moment, we are working on the following JUCs and events for 2014: +\n +\n\nJUC Boston - June 18\n\nJUC Berlin - June 25\n\nJUC Israel - July 16\n\nJUC San Francisco Bay Area - October (TBD)\n\nJUC Australia/New Zealand - November/Dec (TBD)\n\n+\n+\n\n+\nJenkins Events +\n +\n\nCopenhagen - September\n\nBrazil - November/December (TBD)\n\n+\n+\n\n+\nThere are a few different ways to get involved: +\n +\n\nRegister Now to Attend: JUC Boston. Registration pages for other JUCs/events are coming soon. Please check back here often.\n\nBe a Sponsor : There are a few ways to become a sponsor.\n\nSubmit a Talk Proposal : deadline is March 30\n\nSubmit a great idea for t-shirt design in the comment box below or email atong@cloudbees.com\n\nSubmit ideas for swag in the comment box below or email atong@cloudbees.com\n\nBe part of the JUC committee: contact atong@cloudbees.com\n\n+\n+\n\n+\nLearn more: +\n +\n\nLearn more about Jenkins User Conferences\n\nSign up and stay up to date with the latest Jenkins newsletter\n\n+\n+\n\n+\nLooking forward to seeing you at a local JUC near you! :o) +","title":"Jenkins User Conferences This Year","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-03-21T00:00:00.000Z","id":"9dfcdd00-24d6-5a91-b965-88e536161260","slug":"/blog/2014/03/21/call-for-sponsors-2014-jenkins-user-conferences/","strippedHtml":"Jenkins User Conference (JUC) season is upon us! It’s a busy year for the Butler — he’s hosting conferences all over and looking for sponsors to help:\n\nBoston — June 18\n\nBerlin — June 25\n\nHerzelia, Israel — July 16\n\nBay Area (California) — October (date TBD)\n\nMr. Jenkins and the JUC Organizing Committee want to invite you and your company to sponsor a JUC this year. Show your support for the Jenkins community and help keep costs low for attendees*. The funds go to are put to good use: conferences are two full tracks. Lunch, light breakfast, coffee and a coveted Jenkins t-shirt are also included.\n\nSponsors get all sorts of thanks from the Jenkins community:\n\nYour logo on the conference t-shirt and all other conference communication (emails, website, signage, etc.)\n\nA blog featuring sponsors\n\nFree passes\n\nSilver and Gold sponsors get a table to talk to folks and hand out swag\n\nGold sponsors get either a speaking slot, happy hour sponsorship or a dedicated room for demos\n\nAnd more, but most especially, you get to support JenkinsCI. Just let us know if you’re interested to get the details. We’d love to have you join us. Friendly reminder: We are looking for speakers for all four cities. Call for Papers ends March 30 for Boston, Berlin and Israel. Submit your abstract now and come share your expertise with the Jenkins community. We hope to see you at a JUC this year! Lisa, Alyssa and the JUC Organizing Committee *PS - Registration just opened for Boston and early-bird tickets are only $59.","title":"Call for Sponsors: 2014 Jenkins User Conferences","tags":["general","core","news","jenkinsci","juc"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2014-04-01T00:00:00.000Z","id":"5310f9d3-4ee4-5c01-b1d2-55f71e342385","slug":"/blog/2014/04/01/your-java-web-start-slaves-will-be-always-clean/","strippedHtml":"+ +\n\n+\n+\n\n+\nIf you have agents that connect through https://wiki.jenkins.io/display/JENKINS/Distributed+builds#Distributedbuilds-LaunchslaveagentviaJavaWebStart[Java Web Start] (such as https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallSlaveasaWindowsservice%28require.NET2.0framework%29[agents installed as Windows services]), we have a good news for you. +\n +\n\n+\nIn case of a connection loss, this type of agents has been designed to automatically attempt to reconnect to the controller. This makes sense because you want these agents to remain online all the time, even if your janitor trips over the ethernet cable. Unfortunately, it also means that over the time, these agents accumulate gunk, such as mutated static states, any left-over threads or memory leaks, or https://issues.jenkins.io/browse/JENKINS-20913[native libraries that are loaded into JVM]. +\n +\n\n+\nTo prevent that, a better approach is to https://issues.jenkins.io/browse/JENKINS-19055[restart the agent JVM (JENKINS-19055)] and have the new JVM reconnect, instead of having the same JVM reconnect. That would ensure that the agent always stays clean. I've planned to make this change for a while now, and I'm happy to report that this change is finally landing to the upcoming 1.559. +\n +\n\n+\nRestarting JVM is easy on Unix, where I could just https://man7.org/linux/man-pages/man3/exec.3.html[exec(3)] to itself. We've been doing this for ages on controllers, for example when you update a plugin and tell Jenkins to restart. +\n +\n\n+\nThe hard part is to do this for Windows, where the most of the time was spent. I had to improve https://github.com/kohsuke/winsw[windows service wrapper] to support self-restarting services, which turned out to be trickier because Windows service control manager doesn't provide \"restart\" as an atomic operation. It also kills not just the service process itself but all the processes in the group. So I had to double-fork the service wrapper into a separate process group just to restart a service from within itself. +\n +\n\n+\nIn any case, the end result is that if https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallSlaveasaWindowsservice%28require.NET2.0framework%29[you have installed a service through GUI], be it on Windows, Unix, or OS X, agents will restart themselves every time it gets disconnected from the controller. +\n +\n\n+\nI've also taken the opportunity to make `+jenkins-slave.exe+` on the agent self-updating. Every time it connects to the controller, it gets the latest version from the controller. +\n +\n\n+\nIf you have installed Web Start agents as services, make sure to update the local copy of `+agent.jar+` on these agents to 2.37 or later. This \"restart on reconnect\" feature only kicks in when you are running this very recent version of `+agent.jar+`. And yes, we realize it'd be nice for `+agent.jar+` to update itself, which is tracked as https://issues.jenkins.io/browse/JENKINS-22454[JENKINS-22454]. But that's a work for another day. +\n +","title":"Your Java Web Start slaves will be always clean","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-04T00:00:00.000Z","id":"1b4b4540-c205-5a24-bbcd-53c64d62a457","slug":"/blog/2014/04/04/maven-job-type-performance-improvements-in-maven-plugin-2-2/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Grumman_F-14_Tomcat[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/US_Navy_040925-N-0295M-030_An_F-14D_Tomcat_conducts_a_high_speed_flyby_during_the_tactical_air_power_demonstration_at_the_2004_Naval_Air_Station_Oceana_Air_Show.jpg/300px-thumbnail.jpg[image]] +\n\n+\n+\n\n+\nI recently had an opportunity to visit a big Jenkins user on site, and one of the things they've told me is that building projects in the Maven job type is substantially slower than doing the same with the freestyle project type. +\n +\n\n+\nThis is partly expected, because this job type does more for you. For example, it automatically archives your build artifacts, fingerprints all the relevant information, and so on. These are good things, and naturally, it cost time. +\n +\n\n+\nBut the slow down they are seeing was substantial, and this is a complaint I've heard from others as well. So I started looking into it. +\n +\n\n+\nWith a help of https://linux.die.net/man/8/tc[artificial delay] induced to my network interface and several custom scripts to probe into the running processes, I was able to understand what was going on and make some good improvements. +\n +\n\n+\nFirst, in Maven plugin 2.0, we've made a change in the way we archive artifacts from Maven. Previously, the artifacts were copied between the controller and the Maven JVM, and for a reason I'll mention later, this was very slow, especially in a network that has a large latency. With Maven plugin 2.0 and onward, artifacts are archived between the controller and the agent JVM. +\n +\n\n+\nThe second problem that I discovered was that the spy program we put inside Maven is causing excessive amount of unnecessary classloading. Some classes have static initializers that too eagerly refer to other classes, which in turn brings in other classes, and so on. Despite https://jenkins-ci.org/content/faster-slave-classloading[the jar file caching that we do], these classloading still sometimes requires precious roundtrips to the controller, which costs in the order of 10s of ms. I was able to make various changes in Jenkins core to cut this down, and these fixes will land in Jenkins 1.559 (ETA is April 14th.) The classloading overhead is independent of the size of your Maven build, so this improvement is more for people who have lots of small Maven builds, like https://ci.jenkins.io/[Jenkins building Jenkins plugins]. +\n +\n\n+\nNow, on to the biggest fruit of this investigation I was able to discover and fix. Imagine the Maven JVM has a lot of data to send to the controller, say you are archiving test reports or code coverage report. A good implementation would send these data as fast as possible to the controller, paying respect to the limit of flow control to avoid overwhelming the controller. +\n +\n\n+\nIt turns out that the way we set up this communication channel was far from optimal. Instead of having the Maven JVM push data with flow control, we were relying on the controller to pull data. That is, controller has to send out a request to the agent to fetch the next batch of data (8KB), then once it receives that data, it sends out another request to fetch the next batch of data, and so on. If your network latency is 10ms, this scheme only lets us send 500KB/sec, even if you have a gigabit ethernet. No wonder it was so slow! +\n +\n\n+\nThis fix is in in Maven plugin 2.2. See https://issues.jenkins.io/browse/JENKINS-22354[JENKINS-22354] if you want to know more about the actual diffs and such. +\n +\nUnfortunately, none of these are available for those who are on 1.532.x LTS, but http://meetings.jenkins-ci.org/jenkins/2014/jenkins.2014-04-02-18.02.html[the next 1.554.1 LTS] will be able to run the newer Maven 2.2 plugin. So the help is on the way! +\n +","title":"Maven job type performance improvements in Maven plugin 2.2","tags":["development","plugins","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-09T00:00:00.000Z","id":"541f26ae-79be-5b99-9931-1a1e249be540","slug":"/blog/2014/04/09/more-scalable-slaves/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Nio[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Nikko_Toshogu_Nio_M3043.jpg/160px-Nikko_Toshogu_Nio_M3043.jpg[image] +\n] +\n\nNio\n\n+\n\n+\n+\n\n+\nhttps://en.wikipedia.org/wiki/New_I/O[NIO]-based https://wiki.jenkins.io/display/JENKINS/Distributed+builds#Distributedbuilds-LaunchslaveagentviaJavaWebStart[Java Web Start (JNLP) agent handling] is coming to 1.560. This will help you run a large number of JNLP agents more efficiently. A connected JNLP agent used to occupy one thread on the controller, but now it occupies none. Combined with the earlier change that eliminated threads from idle executors, now you can connect thousands of agents. +\n +\n\n+\nAll you have to do is to use the latest `+agent.jar+` from Jenkins 1.560. No other changes are necessary on users' part. +\n +\n\n+\nA bulk of this is implemented in https://github.com/jenkinsci/remoting[remoting 2.38], and a good part of it was implemented about a year ago on the airplane on the way to Europe. +\n +\n\n+\nWe plan to make CLI connections take advantages of this too, which helps those who use that a lot. That's not in 1.560, but hopefully it'll be in the near future. This change also paves a way for multi-participant bus-topology communication, which I think would be an useful building block for https://github.com/jenkinsci/master-to-master-api-plugin/[the work-in-progress controller-to-controller API].","title":"More scalable agents","tags":["development","core","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-11T00:00:00.000Z","id":"51a8aab6-f27e-5e2b-a18b-4861c3f85998","slug":"/blog/2014/04/11/infoq-ci-survey-2014/","strippedHtml":"+\nInfoQ has been https://www.infoq.com/research/ci-server[running a CI server survey] for more than a month now, and here is the current result: +\n +\n\n+\nhttps://www.infoq.com/research/ci-server[ +\nimage:https://jenkins-ci.org/sites/default/files/images/infoq.preview.png[image] +\n] +\n\n+\n+\n\n+\nJenkins has gotten more than 70% of the votes, once again proving the wide adoption among developers. If you are one of those who picked Cruise Control into the \"considering\" section, I'd encourage you to look around a bit more. +\n +\n\n+\nYou can still https://www.infoq.com/research/ci-server[vote from their website or leave comments if you want]. +\n +\n\n+\nBy the way, the design of two axes make no sense to me; for example, I'd order the adoption axis to \"considering -> migrating to -> using now -> moving away from\", and the circle seems to imply two axes are somehow interchangeable, when it should probably be just in a checkerboard to indicate those are independent axes.","title":"InfoQ CI survey 2014","tags":["general","feedback","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-11T00:00:00.000Z","id":"a05eb16d-08fa-5675-ae96-e0b6498905ff","slug":"/blog/2014/04/11/jenkins-1-532-3-lts-is-released/","strippedHtml":"+\nThe final LTS release of the 1.532.x line is out today. You can download it from http://mirrors.jenkins-ci.org/[the usual location]. Changelog is https://jenkins-ci.org/changelog-stable[here]. +\n +\n\n+\nStarting with the next 1.554.x LTS, the release model will https://wiki.jenkins.io/display/JENKINS/LTS+Release+Line[switch to the train model], where we commit to dates and get whatever we can ship by that date. +\n +\n\n+\nYou can see https://jenkins-ci.org/content/event-calendar[the scheduled dates in our event calendar]. Backporting window for 1.554.1 is almost closing, so if you want to have your favorite issues nominated for it, please see https://wiki.jenkins.io/display/JENKINS/LTS+Release+Line[the process] in the Wiki and hurry!","title":"Jenkins 1.532.3 LTS is released","tags":["development","core","releases","lts"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-15T00:00:00.000Z","id":"8fb1b33c-49ca-5f6f-aac3-ef146ba885e2","slug":"/blog/2014/04/15/upcoming-jenkins-office-hours-acceptance-test-harness/","strippedHtml":"+\nimage:https://clsdf.com/wp-content/uploads/2011/06/tumblr_lkzltkxTmF1qersu1.gif[image] +\n\n+\n\n+\nOne of the new efforts in Jenkins this year is https://github.com/jenkinsci/acceptance-test-harness[the acceptance test harness] for Jenkins. +\n +\n\n+\nWe will be doing the Jenkins office hours next week to go over this and sync up and coordinate between people in the community that are trying to work on this. +\n +\n\n+\nIt'll be *April 23rd 11am PT* (https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Governance+Meeting&iso=20140423T11&p1=224&ah=1&sort=1[see what this time is in your time zone]) on Google Hangout at https://jenkins-ci.org/hangout. If you are intereste in hacking Jenkins or if you are a large user of Jenkins who have acceptance tests, we are looking forward to seeing you there. +\n +\n\n+\nFor those of you who haven't looked, this test harness allows you to write blackbox tests of Jenkins and its plugins. It was originally used to test LTS releases, but over the time, it acquired a number of features, such as ...: +\n +\n\nDocker support for launching complex fixtures to test Jenkins with.\n\nPluggability to launch Jenkins under test (JUT) in many different environments\n\nPluggability to provision Jenkins and agents from EC2 to test large deployments\n\nChoice of cucumber or JUnit to write test scripts\n\n+\n+\n\n+\nWe are working on porting over existing test cases, but we'd like to work with users to move their acceptance tests on top of this same harness. The idea is to pool those test cases in the community so that we can test Jenkins and its plugins as we develop them. For this to work, we want tests to have lots of metadata (such as what plugins it touches), and for the harness to have sufficient modularity that different people can run the same scenario against different deployments, including existing instance. +","title":"Upcoming Jenkins Office Hours: Acceptance Test Harness","tags":["general","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-16T00:00:00.000Z","id":"0ec96a9f-b23f-50d8-805d-75b5682f95aa","slug":"/blog/2014/04/16/active-directory-plugin-improvements/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Active_Directory[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Active-directory.svg/170px-Active-directory.svg.png[image] +\n] +\n\n+\n+\n\n+\nOne of the few plugins that I still personally maintain is https://wiki.jenkins.io/display/JENKINS/Active+Directory+plugin[Active Directory plugin]. In the past few months, I've been making steady improvements in this plugin, thanks to various inputs and bug reports given to me from the ClodBees customers. +\n +\n\n+\nOne of the recent fixes was to get https://issues.jenkins.io/browse/JENKINS-9258[the \"remember me\" feature] finally working for Active Directory. This requires a relatively new Jenkins 1.556, but it eliminates the need to having to constantly type the password in. +\n +\n\n+\nThen I've rebumped the version of https://github.com/kohsuke/com4j[COM4J], which was https://issues.jenkins.io/browse/JENKINS-16429[causing a thread leak] when Jenkins runs on Windows. If you are running a Windows deployment with lots of active users, this probably would have contributed to the instability of Jenkins. +\n +\n\n+\nAnd then lastly, a small but crucial improvement was made to the way we search group membership, so that we can avoid recursively searching AD. This should result in a significant speed improvement when you are logging into Jenkins through AD. +\n +\n\n+\nThe latest version of the plugin as of writing is 1.37. I hope you'll have a chance to update the plugin soon. +","title":"Active Directory plugin improvements","tags":["development","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-05-19T00:00:00.000Z","id":"eed180da-45db-59c1-a6f0-28b8e0843f8d","slug":"/blog/2014/05/19/jenkins-office-hour-tutorial-on-writing-an-acceptance-test/","strippedHtml":"+\nimage:https://wiki.jenkins.io/download/attachments/57181939/hangout.png?version=1&modificationDate=1361998218000[image,width=200] +\n\n+\n+\n\n+\nThis week I'm going to do an office hour on how to write an acceptance test in https://github.com/jenkinsci/acceptance-test-harness[Jenkins acceptance test harness]. The event is on https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Office+Hours&iso=20140519T11&p1=283&ah=1[Wednesday 11am PT]. +\n +\n\n+\nThis new Selenium-based test harness is full of page objects and other abstractions that let you write blackbox integration tests on Jenkins and its plugins, as well as how they behave under various environments. +\n +\n\n+\nUnlike our regular office hours, https://plus.google.com/u/0/events/cpr7lhq3d544rj5uqid4rin3deg[the event is done through Hangout on air]. But I do want at least several people to join Hangout interactively, not just watch the event in a read-only mode. +\n +\n\n+\nTo join the event interactively (as opposed to read-only), I think you need to https://plus.google.com/hangouts/_/hoaevent/AP36tYeeXozAE_RiZWtTfX-O-sEtxJ3qhu4Asnfy7tZOZf3hs3jX1Q[come here] (but since Hangout URL can change, please check back on this post right before the office hour begins, so that I can post an up-to-date URL.) +","title":"Jenkins Office Hour: Tutorial on writing an acceptance test","tags":["development","screencast","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-18T00:00:00.000Z","id":"5bbecced-75bb-5402-bb56-862bcae6a516","slug":"/blog/2014/04/18/come-join-the-infra-team/","strippedHtml":"+\nhttps://puppetlabs.com/[image:https://i.stack.imgur.com/RZN4l.jpg[image,width=100]]\n\n+\n\n+\nWe are looking for volunteers to join the small infra team here at the Jenkins project. We are the butlers of the butler that get Mr.Jenkins going. +\n +\n\n+\nWe've been https://github.com/jenkins-infra/jenkins-infra[managing our servers through puppet], and have been slowly folding pieces one at a time to puppet, but there's still a lot of snowflake services that need proper operationalization. +\n +\n\n+\nSo to fix them up, https://puppetlabs.com/[PuppetLabs] folks generously agreed to help us get going with a deployment of Puppet Enterprise. Tyler has managed to arrange a \"rapid deployment\" engagement. To kick start the effort, an instructor would come for one week (April 28th-May 2nd) to bring us up to speed on modern Puppet. we'll then spend some time on our own to puppt-ize more, and deploy Puppet Enterprise. +\n +\n\n+\nThe end goal is to ensure sustainability of our infrastructure, in case of unexpected server loss. +\n +\n\n+\nAs we are about to get this effort going, we think this is a good time to solicit a few more volunteers. We are looking for someone who could join this two week engagement in San Francisco, and keep their involvement beyond that. This is a part time volunteer work, and you'd get some visibility and exposure to the inner guts of open-source projects, not to mention the satisfaction of getting thanked for your work. +\n +\n\n+\nIf you are interested, please https://jenkins-ci.org/content/mailing-lists[drop us a note at the infra list]. +","title":"Come join the infra team!","tags":["infrastructure","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-05-27T00:00:00.000Z","id":"63a8754b-9610-5783-a10e-e6ab1d4d4438","slug":"/blog/2014/05/27/acceptance-test-project-progress-report/","strippedHtml":"+\nOver the past 30 days or so, https://github.com/jenkinsci/acceptance-test-harness/[the acceptance test project] has made a great progress. +\n +\n\n+\nThis project consists of a reusable harness that can be used by plugin developers and users to write functional test cases. These tests can be run against Jenkins instances that are deployed in https://github.com/jenkinsci/acceptance-test-harness/blob/master/docs/CONTROLLER.md[all sorts of different ways], and can interact with https://github.com/jenkinsci/acceptance-test-harness/blob/master/docs/FIXTURES.md[complex real fixtures]. These tests can be also run with specific version of Jenkins core and a combination of plugins. +\n +\n\n+\nThe number of tests have https://jenkins.ci.cloudbees.com/job/core/job/acceptance-test-harness/[steadily increased to above 300]. Several of those are by https://github.com/eidottermihi[Michael Prankl], where he tests https://github.com/jenkinsci/acceptance-test-harness/blob/master/src/test/java/plugins/LdapPluginTest.java[the LDAP plugin with the real OpenLDAP server instance] that runs inside Docker — a kind of test that just wasn't possible before can be now easily written. +\n +\n\n+\nhttps://github.com/jenkinsci/acceptance-test-harness/graphs/contributors[More than a dozen people] have contributed. https://github.com/jenkinsci/acceptance-test-harness/commits/master[A dozen changes are going in every single day], and more are coming — for example, Stephen is working on modularizing this harness and adding new pieces that allow people to do scalability and load testing. That'll be a part of this effort soon. +\n +\n\n+\nIf you are one of the large scale users who are interested in automating some of your Jenkins acceptance testing, please https://groups.google.com/forum/#!forum/jenkinsci-dev[drop us a note at the DEV list] so that we can work together. You can also watch the recording of our last https://wiki.jenkins.io/display/JENKINS/Office+Hours[office hours] where I demoed how you'd develop a test on top of this: +\n +\n +\n +\n\n+\nI think we all agree that this is an important effort/ Looking forward to joining the efforts with more people in the community! +\n +","title":"Acceptance test project progress report","tags":["development","feedback","news","tutorial","lts","video"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-05-30T00:00:00.000Z","id":"f711b90c-f038-5026-9c5a-4d859d116214","slug":"/blog/2014/05/30/adopt-a-plugin/","strippedHtml":"+\n\n+\n\n+\nToday on IRC, I was asked how someone new to the project can get started working on Jenkins, when s/he has no particular preference or pet-peeve. +\n +\n\n+\nThis is a good question for which the project should have a canned answer ready, so here is one approach — adopt a plugin! +\n +\n\n+\nOften, a Jenkins plugin gets developed by someone to scratch his own itch. That person shares the plugin with the community, and since it does everything he needs, he moves on to work on something else. Then another person starts using that plugin, comes up with an idea for improvement, implements that, and then moves on. Given that we have more than 900 plugins today, there are a plenty of plugins that are currently co-maintained by the community, which could really use a focused loving caregiver. +\n +\n\n+\nSo why don't you adopt a plugin? You can pick up one of those plugins and act as a maintainer. You'll hear appreciation from people who are using that plugin, and most plugins are small and simple enough even for people new to Jenkins. Above all, working on plugins don't require much communication with existing developers and implicit processes, which is often difficult for new people to find out. +\n +\n\n+\nHere's how you can find a plugin to adopt. You can look at https://wiki.jenkins.io/display/JENKINS/Pending+Pull+Requests[repositories that have most pending pull requests]. Plugins with lots of pull requests likely could use some help, so check if anyone is actively working on it and talk to him, or if you don't see much activities from a single person, just go ahead and adopt the plugin. +\n +\n\n+\nhttps://stats.jenkins-ci.org/jenkins-stats/svg/svgs.html[Usage statistics] has `+top-plugins500.svg+` (this is for https://stats.jenkins-ci.org/jenkins-stats/svg/201404-top-plugins500.svg[the last month]). Open that in Firefox, which lets you zoom in. Scroll all the way to the right, and you see popular plugins. Compare that with https://github.com/jenkinsci/[our GitHub repositories], and you can find popular plugins that aren't getting enough love. +\n +\n\n+\nhttps://issues.jenkins.io/browse/JENKINS#selectedTab=com.atlassian.jira.plugin.system.project%3Acomponents-panel[Issue tracker] is also a good place to look for a plugin in need of help. Every plugin has a separate component, so look at bugs and RFEs filed against those, especially with lots of votes. Fix a bug is great, but even just helping with the triage process would be highly appreciated. +\n +\n\n+\nTry adopting a plugin for a while, and when you get the hang of it, let https://groups.google.com/forum/#!forum/jenkinsci-dev[the dev list know]. Update `+pom.xml+` to have your name listed as a maintainer. Come https://jenkins-ci.org/content/chat[join IRC]. That way, we know who you are and how to reach you. +\n +\n\n+\nSee, it's really not that hard. And there's something really satisfying in making things a little better and seeing happy users. Anyway, looking forward to working with you!","title":"Adopt a plugin","tags":["general","jobs","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-06-03T00:00:00.000Z","id":"cbaa2f07-3bcf-5483-9090-ac76040f2fbf","slug":"/blog/2014/06/03/jenkins-user-conference-boston-is-around-the-corner/","strippedHtml":"+\nOnly a few weeks until https://www.cloudbees.com/jenkins/juc-2014/boston[our Jenkins User Conference US East] kicks off in Boston on June 18. Right now more than 300 people have registered and we’ve had to https://www.eventbrite.com/e/jenkins-user-conference-us-east-boston-june-18-2014-tickets-10558652213[release more tickets]! If you will be anywhere near New England on June 18, https://www.eventbrite.com/e/jenkins-user-conference-us-east-boston-june-18-2014-tickets-10558652213[sign up fast so you don’t miss the fun]. +\n +\n\n+ +\n\n+\n+\n\n+\nThis year marks the butler’s first conference tour to https://en.wikipedia.org/wiki/New_England[New England]. He has chosen https://www.seaportboston.com/[the fabulous Seaport hotel] on the waterfront for a venue — a hotel that's far better than what I usually stay in :-). You can even take a water taxi to https://en.wikivoyage.org/wiki/Boston[see the sites] or get to and from the airport. For airport transfers, you can also just hop on https://www.mbta.com/schedules_and_maps/subway/lines/?route=SILVER[the silver line bus] and arrive across the street from the hotel (the stop is called \"https://www.mbta.com/schedules_and_maps/subway/lines/stations/?stopId=25092&lat=42.349098&lng=-71.04206[World Trade Center Station]\".) +\n +\n\n+\nThis year we have https://www.cloudbees.com/jenkins/juc-2014/boston[an incredible line-up of speakers]. Attendees will be well fed, caffeinated, and even pickled if they choose... the afternoon break will feature BEvERages. And everyone gets this year’s Jenkins World Tour t-shirt. +\n +\n\n+\nNothing about conference-throwing is cheap, so we’d like to take a moment to thank our generous JUC US East sponsors. It speaks so well for the JUC community that so many companies have stepped up to support Jenkins and produce a first-class conference. So here is the shout-out for them: +\n +\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/JUC-boston-sponsors.preview.png[image] +\n\n+\n+","title":"Jenkins User Conference Boston is around the corner!","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-06-03T00:00:00.000Z","id":"705f477b-e75b-56cb-8278-23231afdaae5","slug":"/blog/2014/06/03/jenkins-won-sdtimes-100-2014/","strippedHtml":"Jenkins won SDTimes 100, 2014\n\n+\nimage:https://www.sdtimes.com/images/sdt100/2014SDT100_logo_120x123.gif[image] +\n\n+\n+\n\n+\nFor the 5th year in a row, Jenkins project won https://sdtimes.com/content/article.aspx?ArticleID=71295&page=4[SDTimes 100, 2014] this year under DevOps and SCM categories, along with other open-source projects like Chef, Docker, Git, LLVM, and Puppet. +\n +\n\n+\nI'd like to take this opportunity to once again thank the community for keeing us going strong. There's https://groups.google.com/forum/#!topic/jenkinsci-dev/qrG7bAnZSHQ[a lot] of https://groups.google.com/forum/#!topic/jenkinsci-dev/zDaX4yiWLLw[interesting] efforts https://groups.google.com/forum/#!topic/jenkinsci-dev/l5vrC8BqVJQ[going on] in https://github.com/jenkinsci/acceptance-test-harness[the project], as always, so expect more stuff to come out from us in the coming days! +","title":"Jenkins won SDTimes 100, 2014","tags":["general","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-06-05T00:00:00.000Z","id":"2f54b3ab-a59b-564b-bc8e-ab28b9493091","slug":"/blog/2014/06/05/get-drunk-on-the-code-in-juc-boston/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/christou.jpg[image] +\n\n+\n+\n\n+\nLet me start by introducing myself, my name is Steven Christou. Many of you might know me on IRC as schristou, my github id as https://github.com/christ66[christ66], or my twitter handle https://twitter.com/schristou88[@schristou88]. In Jenkins, I am currently working on some significant improvements to the subversion-plugin, along with various random bug fixes. I am also the current maintainer of https://cobertura.github.io/cobertura[Cobertura], an open source code coverage tool for java. Prior to working on Jenkins, I was working on Hudson at the Eclipse Foundation. +\n +\n\n+\nWhile working on Jenkins, I usually get requests (usually in IRC) about where to start when writing a plugin. Some examples are \"Where do I start?\" or \"Do you have any examples?\". Well at https://www.cloudbees.com/jenkins/juc-2014/boston[JUC Boston], I will be hosting a small lecture called Get Drunk on the Code! I will be giving the lecture in the rooms \"Back Bay\" (1 & 2) where people will be able to sit down, drink a beer, and learn how to write a Jenkins plugin! I will be teaching people everything from how to get started, to some advanced techniques like writing a new https://wiki.jenkins.io/display/JENKINS/Jenkins+CLI[CLI Command], and writing your own builder. I forgot to mention that I will be handing out beer while this is happening! +\n +\n\n+\nThis session will be happening after the exhibit break from 3:30pm to 6:00pm. It will be two hours where I will be walking around, and helping users if they encounter any issues while the session is happening. So grab your laptop, a beer and get drunk on the code! Don't get too drunk, but if you do at least you can improve the https://wiki.jenkins.io/display/JENKINS/Beer+Plugin[beer plugin]!\"","title":"Get drunk on the code in JUC-Boston","tags":["general","meetup","jenkinsci","juc"],"authors":[{"avatar":null,"blog":null,"github":"christ66","html":"","id":"christ66","irc":"schristou","linkedin":null,"name":"Steven Christou","slug":"/blog/authors/christ66/","twitter":null}]}},{"node":{"date":"2014-06-06T00:00:00.000Z","id":"b66f126d-826e-5d04-b55d-285c4d0f9e47","slug":"/blog/2014/06/06/other-events-for-juc-visitors-cd-seminar/","strippedHtml":"+ +\n\n+\n+\n\n+\nIf you will be on the US East Coast or in Berlin for JUC, some of the JUC sponsors are organizing separate events called https://www.cloudbees.com/cdsummit[Continuous Delivery Seminar], which might be of interest to you. These events focus more on higher-level business value questions as well as vendor solutions that are difficult in community-focused JUC. +\n +\n\nNew York City on June 19, the day after JUC US East — headlined by Forrester Research analyst Kurt Bittner\n+\n\nBerlin on June 24, the day before JUC Europe — headlined by Jan Hagen, author of Confronting Mistakes: Lessons from the Aviation Industry when Dealing with Errors\n+\n\n+\n+\n\n+\nRead more about the events https://blog.cloudbees.com/2014/06/cd-summit-learn-from-continuous.html[here]. The events are free and I've heard that there'll be some souveniors. I'm one of the speakers, and I'll be talking about Jenkins, as always! +","title":"Other events for JUC visitors: CD seminar","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-06-09T00:00:00.000Z","id":"f1f036eb-db08-5222-9222-c3a1f80d792e","slug":"/blog/2014/06/09/thinking-about-moving-on-to-servlet-3-0/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Subaru_Legacy[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Subaru_Legacy_V_Kombi_rear_20100402.jpg/320px-Subaru_Legacy_V_Kombi_rear_20100402.jpg[image,width=240,height=156] +\n] +\n\n+\n+\n\n+\nOne of the current efforts under way in the dev list is driven by https://github.com/tfennelly[Tom Fennelly] et al, who is working on introducing a series of small ball improvements to the user interface in Jenkins. If this is something you are interested in (and who aren't?), you should see https://gist.github.com/kevinburke/9d4f127a7005eaa9d970[Kevin Burke's manifest] that sets out the plan of attack, and https://groups.google.com/forum/#!topic/jenkinsci-dev/zDaX4yiWLLw[This mega thread on the dev list] for the discussion. +\n +\n\n+\nThere are numerous sub-conversations born out of this, and one of them is the minimum required servlet spec version for Jenkins. +\n +\n\n+\nJenkins devs are thinking about ways to update page contents post load, for example so that the list view will keep updating as stuff happens. https://en.wikipedia.org/wiki/Websocket[WebSocket] was discussed as an option, and then https://en.wikipedia.org/wiki/Server-sent_events[server-side events], which seems to be the current favorite. +\n +\n\n+\nTo use any of those async HTTP features, we need servlet 3.0. Unfortunately, if we are to do it, Jenkins will not run on earlier versions of the container. There's no graceful fallback that works with servlet 2.5 containers due to the way servlet 3.0 is written. +\n +\n\n+\nSo I looked into https://docs.google.com/spreadsheets/d/14YzFgKBB6BvbRU_1OjChC3efECWPs77TEGTU09t3KGw/edit#gid=873989456[the impact of this change to the users]. +\n +\nIt turns out that the most users run Jenkins through `+java -jar jenkins.war+`, which are already running servlet 3.0 compatible Winstone 2.x (based on Jetty 8.) And people running newer version of Jenkins tends to run newer version of containers. When I look at people who are running >=1.509 and later, 70% of them run on servlet 3 compatible container. The number for >=1.532 is 84%, then for >=1.554 it's 94%. +\n +\n\n+\nWhen I look at which container is dragging us down as of >= 1.554, you see that there's a sizable Tomcat6 deployments (2.5%). If we start requiring Servlet 3.0 these people will be in a nasty surprise. Then there's about 1.8% who claims to be running on Winstone 0.9.10, which is really puzzling, but I'm assuming these people are getting OEM-ed Jenkins of a sort (multiple large companies are known to do this), so these people will likely be able to update to Winstone 2.x automatically by virtue of getting a new jenkins.war from their upstream. So all in all I'd say if we start requiring servlet 3.0 today, there'll be about 3% user base who will be impacted. +\n +\n\n+\nThis post is a trial balloon to see the community reaction to this idea. If you have reasons to argue against us moving to servlet 3.0, we'd like to hear from you — https://issues.jenkins.io/browse/JENKINS-23378[please share your thoughts on our issue tracker]! +","title":"Thinking about moving on to Servlet 3.0","tags":["development","core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-06-10T00:00:00.000Z","id":"8e7b1635-9928-561f-a5d9-2115f605a25f","slug":"/blog/2014/06/10/two-weeks-till-jenkins-user-conference-berlin/","strippedHtml":"Following right on the heels of our US-East Jenkins User Conference in Boston, we have JUC Europe in Berlin on June 25. Like the East Coast conference, the Berlin one is almost full, so sign up while you can.\n\nOur venue in Berlin is KOSMOS, a building with a fascinating history. The building was inaugurated as a cinema in 1961. With 1001 seats, it was the largest, most modern and most popular film theatre in the former GDR and has since been extensively modernized in line with the requirements of historically listed buildings.\n\nWe have an excellent line-up of speakers filling up two conference tracks.\n\nOnce again, we have some fabulous sponsors to thank. Without them, there would be no JUC.\n\nThis year we’ve introduced a new Community sponsorship level, which allows non-corporate groups like JUGSs to help support the conference as well. (Drop a note to juc-oc-ext AT cloudbees DOT com if your group is interested).\n\nWe are very grateful to all of our sponsors – thank you! Hopefully see everyone at JUC.\n\nPS – if you are coming to Berlin for JUC, check out the CD Summit on June 24 at the same venue. There’s also one on June 19 in NYC. The summit will focus on how continuous integration with Jenkins streamlines processes and automates testing and deployment, providing the foundation you need for continuous delivery.","title":"Two Weeks Till Jenkins User Conference Berlin","tags":["general","meetup","news","jenkinsci","juc"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2014-06-11T00:00:00.000Z","id":"196c82e5-5f26-5236-8114-8bb2c9f08efc","slug":"/blog/2014/06/11/juc-speaker-sneakpeak-a-build-ecosystem-for-loosely-compiled-code/","strippedHtml":"+\n\n+\nhttps://www.cloudbees.com/jenkins/juc-2014/boston/speakers#ForestHandford[ +\n +\nimage:https://jenkins-ci.org/sites/default/files/images/Forest_Handford_0.preview.jpg[image,width=240,height=320] +\n +\n] +\n\n+\n +\n_We're getting excited about the Boston and Berlin JUC's in the next two weeks! Here's a preview of Forest Handford's upcoming JUC-US East Lightning Talk on June 18..._ +\n +\nWhen https://home.meditech.com/en/d/home/[MEDITECH] migrated to Subversion from a home-grown first generation version control system we needed a way to get the code compiled and sent to the running server. We selected Jenkins as our build server, with the hope of eventually using it for CI. +\n +\nA MEDITECH application consists of hundreds of source files. Each source file translates to an object code file that the interpreter executes. This is one of the last major projects I worked on prior to leaving MEDITECH to work at Carbonite. In my Lightning Talk, \"A Build Eco-System for Loosely Compiled Code,\" I'll discuss the toughest challenges my team had in getting Jenkins to work as our build server and how we eventually overcame them. +\n +\nStaff from both https://www.carbonite.com[Carbonite] and MEDITECH will be in attendance. Both companies are hiring! +\n +\n_You'll find more great talks in the full https://www.cloudbees.com/jenkins/juc-2014/boston[JUC-US East] agenda and the https://www.cloudbees.com/jenkins/juc-2014/berlin[JUC-Europe] agenda._","title":"JUC speaker sneakpeak: A build ecosystem for loosely compiled code","tags":["general","juc"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2014-06-16T00:00:00.000Z","id":"163d4b19-9364-5564-a400-94022d5b0620","slug":"/blog/2014/06/16/get-together-at-beer-garden-for-juc-berlin/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/2/2b/-_Beer_garden_sign_-_Germany_-.jpg/160px--_Beer_garden_sign_-_Germany_-.jpg[image] +\n\n+\n+\n\n+\nThere'll be a number of active community people in the event, so let's take advantages of that and meet up. And there's no better place to do it than a beer garden in summer! +\n +\n\n+\nIf you are coming to https://www.cloudbees.com/jenkins/juc-2014/berlin[JUC Berlin], I've just set up https://www.meetup.com/jenkinsmeetup/events/189413622/[an RSVP page for a beer garden get together the day before], and https://www.meetup.com/jenkinsmeetup/events/189405872/[another dinner afterward]. +\n +\n\n+\nLooking forward to seeing you!","title":"Get together at beer garden for JUC Berlin","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-06-19T00:00:00.000Z","id":"5e53c482-fa8b-54ea-9fb4-d2dfc6f096d5","slug":"/blog/2014/06/19/juc-europe-sneak-peak-integrated-pipelines/","strippedHtml":"This is a guest post from Markos Rendell, a Senior Manager at Accenture.\n\n+\nhttps://www.cloudbees.com/jenkins/juc-2014/berlin/sessions#MarkRendell[ +\n +\nimage:https://www.cloudbees.com/sites/default/files/juc/juc2014/berlin/Mark-Rendell.jpg[image,width=200,height=200] +\n +\n] +\n\n+\n +\nI am very much looking forward to the Jenkins User Conference in Berlin next week which I will be attending with a three other members of my team. We are all very passionate about automation, infrastructure-as-code, configuration management and of course… Jenkins. +\n +\nMy team and I specialize in implementing continuous delivery for large scale transformation deliveries. We work with a wide range of technologies from open source, packaged products, through to software-as-a-service. We work with physical infrastructure, private cloud, public cloud and platforms-as-a-service, but there is one almost uniquely common factor… using Jenkins. +\n +\nAt the conference I will be expecting to exchange views with others using Jenkins at similar scale and am particularly interested in https://www.cloudbees.com/jenkins/juc-2014/berlin/sessions#JosefFuchshuber[sessions] covering using Jenkins with Docker and making Jenkins https://www.cloudbees.com/jenkins/juc-2014/berlin/sessions#HarpreetSingh[more resilient]. +\n +\nI am also looking forward to presenting https://www.cloudbees.com/jenkins/juc-2014/berlin/sessions#MarkRendell[this lightening talk] where I will be demoing ways in which we’ve extended Jenkins to implement complex integrated pipelines for large-scale software implementations. https://markosrendell.wordpress.com/2014/05/28/reducing-continuous-delivery-impedance-part-2-solution-complexity/[See here] for a sneak preview.","title":"JUC Europe Sneak Peak: Integrated Pipelines","tags":["general","juc"],"authors":[{"avatar":null,"blog":null,"github":"lisawells","html":"","id":"lisawells","irc":null,"linkedin":null,"name":"Lisa Wells","slug":"/blog/authors/lisawells/","twitter":null}]}},{"node":{"date":"2014-06-20T00:00:00.000Z","id":"acb75ea7-5042-5ce0-b4de-abb801b749b1","slug":"/blog/2014/06/20/juc-boston-what-a-day/","strippedHtml":"+\nhttps://twitter.com/BostonVC/status/479338642331426816[ +\nimage:https://pbs.twimg.com/media/Bqbz9JQIIAA9gKG.jpg[image,width=300,height=225] +\n] +\n\n+\n+\n\n+\nWe kicked off this year's Jenkins User Conference world tour in Boston this Wednesday. The event was well-attended with more than 450 people registered and 400+ people showed up. So big thank you for everyone who came! +\n +\n\n+\nhttps://github.com/jenkinsci/workflow-plugin[Workflow plugin] that Jesse presented was a big hit and https://twitter.com/search?q=%23jenkinsconf&src=typd[lit up twittersphere], and while I was only able to listen to parts of sessions as people had questions and comments for me, ones that I've seen were great. https://jenkins-ci.org/content/jenkins-user-conference-completely-full[Alyssa] told me that the sponsors were happy too, which is also important to keep events like this going. +\n +\n\n+\nPerhaps the biggest hit of all was https://jenkins-ci.org/content/get-drunk-code-juc-boston[the \"get drunk on the code show] by Steven Christou. When I got in, he packed 30 or so people in the room learning how to write a simple Jenkins plugin, and all the beer bottles were long gone! +\n +\n\n+\nOne of the \"fun\" activities we did during the event was a trivia quiz. I'm happy to announce the winners here — Tamara from IBM and Prabhu from Staples. Congrats for your Amazon gift cards! +\n +\n\n+\nDuring the show, I've heard from several people that they'd love to see more regular local meet-ups. https://twitter.com/duncanmak[Duncan] had shown interest in organizing, and https://twitter.com/tyvole[Jesse] is a Bostonian, so please encourage them to get one going +\n +","title":"JUC Boston, what a day!","tags":["general","meetup","juc","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-01T00:00:00.000Z","id":"4220d3c0-af99-596f-b749-43d03d9ca91e","slug":"/blog/2014/07/01/jenkins-user-meet-up-in-london/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/London[image:https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/London_Big_Ben_Phone_box.jpg/179px-London_Big_Ben_Phone_box.jpg[image]] +\n\n+\n+\n\n+\nI'll be visiting London in early September, and if possible I'd love to organize some get together of Jenkins users/devs. I wonder if anyone is interested in hosting the event? +\n +\n\n+\nI think it just needs to fit 20 or so people, so all we need is a single conference room somewhere in London. If you think you might be able to help, please drop us a note at http://lists.jenkins-ci.org/pipermail/jenkins-events/[the events list].","title":"Jenkins User Meet-up in London?","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-01T00:00:00.000Z","id":"e53918cc-d157-5758-9dd4-f3ea6a301cf8","slug":"/blog/2014/07/01/jenkins-office-hours-dotci/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/f/fe/Hangouts_Icon.png[image] +\n\n+\n+\n\n+\nTomorrow in Jenkins office hours, Surya Gaddipati will be going over https://github.com/jenkinsci/dotci[DotCi], a package of features that integrates Jenkins closely with GitHub, configuration via .ci.yml file in source tree, built-in Docker support and MongoDB backend. +\n +\n\n+\nI think there's a number of interesting pieces here that could be split into individual plugins for reuse, and possible alignment with existing efforts like https://wiki.jenkins.io/display/JENKINS/Script+Security+Plugin[Script Security plugin] or https://wiki.jenkins.io/display/JENKINS/Literate+Plugin[Literate plugin]. +\n +\n\n+\nTo record the show, https://plus.google.com/events/cmatf87mb6cfo090e063l10709g[this event will be in a different hangout from the usual one], but https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Office+Hours&iso=20140702T11&p1=224&ah=1&sort=1[the time is the same]. Looking forward to seeing you!","title":"Jenkins Office Hours: dotCi","tags":["general","news","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-03T00:00:00.000Z","id":"1ddea8bf-ea84-5464-b0f5-8d852c356b4a","slug":"/blog/2014/07/03/jenkins-office-hours-dotci/","strippedHtml":"+\nSurya walked us through https://github.com/jenkinsci/dotCI[the dotCI source code] yesterday, and a bunch of ideas about how to reuse pieces are discussed. The recording is on YouTube, and https://docs.google.com/document/d/1zXYOz9Zy-CLu2t8PgqIU0jMO8890PRNjPEAvlrx-HW8/edit#[my notes are here]. +\n +","title":"Jenkins Office Hours: dotCi","tags":["general","plugins","screencast","video"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-03T00:00:00.000Z","id":"92b15951-9b65-5ab7-ba96-b57a784cc0d0","slug":"/blog/2014/07/03/jenkins-user-event-and-code-camp-2014-copenhagen/","strippedHtml":"+\nThis is a guest post from Adam Henriques. +\n +\n\n+\n+\n\n+\nOn August 22nd Jenkins CI enthusiasts will gather in Copenhagen, Denmark for the 3rd consecutive year for a day of networking and knowledge sharing. Over the past two years the event has grown and this year we are expecting a record number of participants representing Jenkins CI experts, enthusiasts, and users from all over the world. +\n +\n\n+\n+\n\n+\nhttps://www.praqma.com/events/jcicph14[The Jenkins CI User Event Copenhagen] has become cynosure for the Scandinavian Jenkins community to come together and share new ideas, network, and harness inspiration from peers. The program offers invited as well as contributed speaks, tech talks, case stories, and facilitated Open Space discussions on best practice and application of continuous integration and agile development with Jenkins. +\n +\n\nThe Jenkins CI Code Camp 2014\n\n+\n+\n\n+\nThe Jenkins CI User Event will be kicked off by https://www.praqma.com/events/jcicodecamp14[The Jenkins CI Code Camp] on August 21st, the day before the User Event. Featuring Jenkins frontrunners, this full day community driven event has become very popular, where Jenkins peers band together to contribute content back to the community. The intended audience is both experienced Jenkins developers and developers who are looking to get started with Jenkins plugin development. +\n +\n\n+\nFor more information please visit the https://www.praqma.com/events/jcicph14[Jenkins CI User Event 2014, Copenhagen website]. +\n\n+\nimage:https://www.praqma.com/sites/default/files/img/DSC_0045_scaled.jpg[image,scaledwidth=40.0%] +","title":"Jenkins User Event & Code Camp 2014, Copenhagen","tags":["general","guest post","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-03T00:00:00.000Z","id":"01329a12-c845-507c-9292-463b7854be07","slug":"/blog/2014/07/03/juc-berlin-summary/","strippedHtml":"+\nhttps://www.flickr.com/photos/12508267@N00/14555329583[image:https://farm4.staticflickr.com/3875/14555329583_c464879a8d_m.jpg[IMG_9194,width=240,height=160]] +\n\n+\n+\n\n+\nAfter a very successful https://jenkins-ci.org/content/juc-boston-what-day[JUC Boston] we headed over to Berlin for JUC Berlin. I've heard the attendance number was comparable to that of JUC Boston, with close to 400 people registered and 350+ people who came. +\n +\n\n+\nThe event kicked off at https://www.meetup.com/jenkinsmeetup/events/189413622/[a pre-conference beer garden meetup], except it turned out that the venue was closed on that day and we had to make an emergency switch to another nearby place, and missed some people during that fiasco. My apologies for that. +\n +\n\n+\nBut the level of the talks during the day more than made up for my failing. They covered everything from large user use cases from BMW to Android builds, continuous delivery to Docker, then of course workflow! +\n +\n\n+\nOne of the key attractions of events like this is actually meeting people you interact with. There are https://twitter.com/fr3dg[all] the https://github.com/kutzi[usual] https://github.com/orrc[suspects] of the https://github.com/vlatombe[community], including https://github.com/daniel-beck[some who I've met for the first time]. +\n +\n\n+\nhttps://www.cloudbees.com/jenkins/juc-2014/berlin/sessions[Most of the slides are up], and I believe the video recordings will be uploaded shortly, if you missed the event.","title":"JUC Berlin summary","tags":["general","meetup","juc","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-03T00:00:00.000Z","id":"b201b1e6-0ee6-5b04-8436-24caf03e0312","slug":"/blog/2014/07/03/pictures-from-juc-and-cdsummit/","strippedHtml":"+\nI've uploaded pictures I've taken during JUC Boston and JUC Berlin. +\n +\n\n+\nhttps://www.flickr.com/photos/12508267@N00/sets/72157645016261249/[JUC Berlin pictures] starts with pre-conference beer garden meet-up. See https://github.com/vlatombe[Vincent Latombe] gives a talk about https://wiki.jenkins.io/display/JENKINS/Literate+Plugin[Literate plugin]. I really appreciated his coming to this despite the fact that the event was only a few days before his wedding: +\n +\n\n+\nhttps://www.flickr.com/photos/12508267@N00/14512095456[image:https://farm6.staticflickr.com/5577/14512095456_7d592d5f9b_n.jpg[image,width=320,height=213]] +\n\n+\n+\n\n+\nIn https://www.flickr.com/photos/12508267@N00/sets/72157645015219907/[JUC Boston pictures], you can see some nice Jenkins lighting effect, as well as my fellow colleague Corey Phelan using World Cup to lure attendees into a booth: +\n +\n\n+\nhttps://www.flickr.com/photos/12508267@N00/14555175333[image:https://farm3.staticflickr.com/2908/14555175333_48aa816387_n.jpg[IMG_8721,width=213,height=320]] +\n\n+\n+\n\n+\nhttps://www.flickr.com/photos/12508267@N00/14535019775[image:https://farm3.staticflickr.com/2939/14535019775_60e691c1dc_n.jpg[IMG_8745,width=320,height=213]] +\n\n+\n+\n\n+\nPictures from https://www.cloudbees.com/cdsummit/[the cdSummits] are also available https://www.flickr.com/photos/12508267@N00/sets/72157645015519967/[here] and https://www.flickr.com/photos/12508267@N00/sets/72157645015398517/[here]. +\n +\n\n+\nIf you have taken pictures, please share with us as your comment here so that others can see them.","title":"Pictures from JUC and cdSummit","tags":["general","meetup","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-08T00:00:00.000Z","id":"ec480fa0-5d1f-5a81-b4c7-c06613ec897a","slug":"/blog/2014/07/08/workflow-plugin-tutorial-writing-a-step-impl/","strippedHtml":"+\nThe other day I was explaining how to implement a new workflow primitive to https://github.com/vivek[Vivek Pandey], and I captured it as a recording. +\n +\n +\n +\n\n+\nThe recording goes over how to implement the `+Step+` extension point, which is the workflow equivalent of `+BuildStep+` extension point. If you are interested in jumping on the workflow plugin hacking, this might be useful (and don't forget to get in touch with us so that we can help you!) +\n +\n\n+\nimage:https://www.thatvideogameblog.com/wp-content/uploads/2012/11/Link-Dangerous-to-Go-Alone.jpg[image,width=310,height=206] +","title":"Workflow plugin tutorial: writing a Step impl","tags":["development","plugins","screencast","video","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-09T00:00:00.000Z","id":"dc9a2b3e-5579-5c55-8dcb-92ee334a1371","slug":"/blog/2014/07/09/planned-changes-in-jenkins-user-conference-contact-information-collection/","strippedHtml":"+ +\n\n+\n+\n\n+\nOne of the challenges of running Jenkins User Conferences is to ballance the interest of attendees and the interest of sponsors. Sponsors would like to know more about attendees, but attendees are often weary of getting contacted. Our past few JUCs have been run by making it opt-in to have the contact information passed to sponsors, but the ratio of people who opt-in is too low. So we started thinking about adjusting this. +\n +\n\n+\nSo our current plan is to reduce the amount of data we collect and pass on, but to make this automatic for every attendee. Specifically, we'd limit the data only to name, company, e-mail, and city/state/country you are from. But no phone number, no street address, etc. We discussed this in http://meetings.jenkins-ci.org/jenkins/2014/jenkins.2014-07-09-18.02.html[the last project meeting], and people generally seem to think this is reasonable. That said, this is a sensitive issue, so we wanted more people to be aware. +\n +\n\n+\nBy the way, https://www.cloudbees.com/forms/jenkins-user-conference-call-papers.cb[the call for papers to JUC Bay Area] is about to close in a few days. If you are interested in giving a talk (and that's often the best way to get feedback and take credit on your work), please make sure to submit it this week. +\n +","title":"Planned changes in Jenkins User Conference contact information collection","tags":["general","feedback","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-18T00:00:00.000Z","id":"a719689c-677f-5692-b88d-1756defede7a","slug":"/blog/2014/07/18/juc-israel-report/","strippedHtml":"+\nThis year marks the 3rd annual Jenkins User Conference in Israel. While the timing of the event turned out to be less than ideal for reasons beyond our control, that didn't stop 400 Jenkins users from showing up at the \"explosive\" event at a seaside hotel near Tel Aviv. +\n +\n\n+\nhttps://twitter.com/shlomibenhaim[Shlomi Ben-Haim] kicked off the conference by reporting that JUC Israel just keeps getting bigger, and that we sold out 2 weeks earlier and the team had to turn down people who really wanted to come in. The degree of adoption of Jenkins is amazing in this part of the world, and we might have to find a bigger venue next year to accomodate everyone who wants to come. +\n +\n\n+\nhttps://www.flickr.com/photos/12508267@N00/14497395798[image:https://farm6.staticflickr.com/5562/14497395798_52a7c92866_n.jpg[IMG_9716,width=320,height=213]] +\n\n+\n+\n\n+\nIt turns out most of the talks were in Hebrew, so it was difficult for me to really understand what's going on, but the talks ranged from highly technical ones like how to provision Jenkins from configuration management (the server as welll as jobs), all the way to more culture focused one like how to deploy CD practice in an organization. Companies large and small were well represented, and I met with a number of folks who actively contribute to the community. +\n +\n\n+\nThere were a lot of hall way conversations, and those of us at the booth had busy time. +\n +\n\n+\nThanks everyone who came, thanks JFrog for being on the ground for the event (and congratulations for the new round of funding) and CloudBees for hosting the event. Please let us know if there are things we can do better, and see you again next year! +\n +\n\n+\nhttps://www.flickr.com/photos/12508267@N00/14680851721[image:https://farm4.staticflickr.com/3903/14680851721_fd36aac023_n.jpg[IMG_9777,width=320,height=213]]\n\n+","title":"JUC Israel report","tags":["general","meetup","news","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-28T00:00:00.000Z","id":"0289dced-8e09-5401-bba9-747905be0daa","slug":"/blog/2014/07/28/jenkins-figure-is-available-in-shapeways/","strippedHtml":"+\nSome time ago, we've built https://jenkins-ci.org/content/behind-scenes-jenkins-user-conference-palo-alto[Jenkins bobble head figures]. This was such a huge hit that everywhere I go, I get asked about them. The only problem was that it cannot be individually ordered, and we didn't have enough cycles to individually sell and ship them for those who wanted them. +\n +\n\n+\nSo I decided to have the 3D model of Mr.Jenkins built, which would allow anyone to print them via 3D printer. I comissioned https://www.fast-d.com/search/engineers/2798[akiki], a 3D model designer, to turn our beloved butler into a fully-digital color-printable figure. He was even kind enough to discount the price with the understanding that this is for an open-source project. +\n +\n\n+\nThe result was IMHO excellent, and when I finally came back to my house yesterday from a two-weeks trip, I found it delivered to my house: +\n +\n\n+\nimage:https://images1.sw-cdn.net/model/picture/625x465_2183445_3844009_1406574114.jpg[image,width=312,height=232] +\n\n+\n +\nWith the red bow tie, a napkin, a blue suit, and his signature beard, it is instantly recognizable as Mr.Jenkins. He's mounted on top of a red base, and is quite stable. I think the Japanese sensibility of the designer is really showing! Note that https://www.shapeways.com/materials/full-color-sandstone[the material] has a rough surface and it is not very strong, but that's what you trade to get full color. +\n +\n\n+\nhttps://www.shapeways.com/model/2183445/mr-jenkins.html?modelId=2183445&materialId=26[I've put it up on Shapeways so that you can order it yourself]. The figure is about 2.5in/6cm tall. The price includes a bit of markup toward recovering the cost of the design. My goal is to sell 25 of them, which will roughly break it even. Any excess, if it ever happens, will be donated back to the project. +\n +\n\n+\nLikewise, once I hit that goal, I will make the original data publicly available under CC-BY-SA, so that other people can modify the data or even print it on their own 3D printers. +","title":"Jenkins figure is available in shapeways ","tags":["general","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-30T00:00:00.000Z","id":"7c3ce68e-ef94-57f3-950b-d3f660ff7e66","slug":"/blog/2014/07/30/geek-choice-awards-2014/","strippedHtml":"+\nimage:https://wiki.jenkins.io/download/attachments/58000204/Geek-Choice-Awards-CI-Server-300x300-black.png?version=1&modificationDate=1406550449057[image,width=100,height=100] +\n\n+\n+\n\n+\nRebelLabs started annual https://zeroturnaround.com/rebellabs/10-kick-ass-technologies-modern-developers-love/12/[Geek Choice Awards], and Jenkins was one of the 10 winners. See https://zeroturnaround.com/rebellabs/10-kick-ass-technologies-modern-developers-love/6/[the page they talk about Jenkins]. +\n +\n\n+\nMy favorite part is, to quote, \"Jenkins has an almost laughably dominant position in the CI server segment\", and \"With 70% of the CI market on lockdown and showing an increasing rate of plugin development, Jenkins is undoubtably the most popular way to go with CI servers.\" +\n +\n\n+\nimage:https://zeroturnaround.com/wp-content/uploads/2014/07/continuous-integration-server.jpg[image] +\n\n+\n+\n\n+\nIf you want to read more about it and other 9 technologies that won, https://pages.zeroturnaround.com/Kickass-Technologies.html[they have produced a beautifully formatted PDF] for you to read.","title":"Geek Choice Awards 2014","tags":["general","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-08-11T00:00:00.000Z","id":"2235bd0e-d668-56ae-9fb4-d4d03b916fac","slug":"/blog/2014/08/11/user-interface-refresh/","strippedHtml":"+\nThis is a guest post from https://github.com/tfennelly[Tom Fennelly] +\n\n+\n+\n\n+\nOver the last number of weeks we've been trying to \"refresh\" the Jenkins UI, modernizing the look and feel a bit. This has been a real community effort, with collaboration from lots of people, both in terms of implementation and in terms of providing honest/critical feedback. Lots of people deserve credit but, in particular, a big thanks to https://github.com/kevinburke[Kevin Burke] and https://github.com/daniel-beck[Daniel Beck]. +\n +\n\n+\nYou're probably familiar with how the Jenkins UI currently looks, but for the sake of comparison I think it's worth showing a screenshot of the current/old UI alongside a screnshot of the new UI. +\n +\n\n+\nhttps://jenkins-ci.org/sites/default/files/images/current.png[ +\nimage:https://jenkins-ci.org/sites/default/files/images/current.preview.png[image,width=500] +\n] +\n\n+\n*_Current / Old Look & Feel_* +\n\n+\nhttps://jenkins-ci.org/sites/default/files/images/new.png[ +\nimage:https://jenkins-ci.org/sites/default/files/images/new.preview.png[image,width=500] +\n] +\n\n+\n*_New Look & Feel_* +\n\n+\n+\n\n+\nAmong other things, you'll see: +\n\nA new responsive layout based on elements (as opposed to elements). Try resizing the screen or viewing on a smaller device. More to come on this though, we hope.\n\nUpdated default font from Verdana to Helvetica.\n\nNicer form elements and nicer buttons.\n\nSmoother side panels e.g. Build Executors, Build Queues and Build History panes.\n\nSmoother project views with more modern tabs.\n\n+\n+\n\n+\nYou might already be seeing these changes if you're using the latest and greatest code from Jenkins. If not, you should see them in the next LTS release. +\n +\n\n+\nWe've been trying to make these changes without breaking existing features and plugins and, so far, we think we've been successful but if you spot anything you think we might have had a negative effect on, then https://issues.jenkins.io[please log a JIRA] and we'll try to address it. +\n +\n\n+\nOne thing we've \"sort of\" played with too is cleaning up of the Job Config page - breaking into sections and making it easier to navigate etc. This is a big change and something we've been shying away from because of the effect it will have on plugins and form submission. That said, I think we'll need to bite the bullet and tackle this sooner or later because it's a big usability issue. +","title":"User Interface Refresh","tags":["development","core","guest post","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-08-12T00:00:00.000Z","id":"e69c8477-9edf-539c-a6f6-c6817fcc5c56","slug":"/blog/2014/08/12/jenkins-user-meet-up-in-london/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/London[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/Black_London_Cab.jpg/320px-Black_London_Cab.jpg[image] +\n] +\n\n+\n+\n\n+\nhttps://jenkins-ci.org/content/jenkins-user-meet-london[As I was alluding to earlier], I was hoping to have a meetup of Jenkins users in London for a while. I'm happy to report that https://www.meetup.com/jenkinsmeetup/events/198004202/[the agenda is final and RSVP is open]! The date is September 8th. +\n +\n\n+\nI'll talk about my recent chef/puppet integration work in Jenkins. Sven from Perforce will talk about how to leverage Perforce features from Jenkins, and then James Nord will talk about workflow. It will be a worthy 2 hours. +\n +\n\n+\nIf the line up of talks will not be enough to sway you, you should also know that I will bring some Jenkins give-aways! +\n +\n\n+\nI'm not sure how many people to expect, but there's a cap at 80 people, so if you are thinking about coming, https://www.meetup.com/jenkinsmeetup/events/198004202/[be sure to RSVP]. Looking forward to seeing many of you there! +\n +\n\n+\nFinally, if you are in London, the usual suspects (CloudBees, PuppetLabs, XebiaLabs, MidVision, SOASTA, et al) are doing https://www.eventbrite.com/e/how-to-accelerate-innovation-with-continuous-delivery-london-tickets-12229265061[a free event titled \"How To Accelerate Innovation with Continuous Delivery\"] that you might also be interested in.","title":"Jenkins User Meet-up in London","tags":["general","meetup","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-08-12T00:00:00.000Z","id":"4d06a8ac-058a-5589-bb0d-1d1c493fbfd1","slug":"/blog/2014/08/12/official-jenkins-lts-docker-image/","strippedHtml":"+\n(This is a guest post from https://twitter.com/michaelneale[Michael Neale]) +\n\n+\n+\n\n+\nRecently at the Docker Conference (DockerCon) the https://hub.docker.com[Docker Hub] was announced.\n\n+\n+\n\nThe hub (which includes their image building and storage service) also provides some \"official\" images (sometimes they call them repositories - they are really just sets of images).\n\n+\nSo after talking with all sorts of people we decided to create an official https://registry.hub.docker.com/_/jenkins/[Jenkins image] - which is hosted by the docker hub simply as \"jenkins\".\n\n+\n+\n\nSo when you run \"docker pull jenkins\" - it will be grabbing this image. This is based on the current LTS (and will be kept up to date with the LTS) - but does not include the weekly releases (yet). Having a jenkins image that is fairly basic (it includes enough to run some basic builds, as well as jenkins itself) built on the LTS, on the latest LTS of Ubuntu seemed quite convenient - and easy to maintain using the official Ubuntu/Debian packaging of Jenkins.\n\n+\n\n+\nDocker is a great way to try and use server based systems - it brings all the dependencies needed and the images actually are portable (ie anywhere docker runs you can run docker images). There are official images for many popular server platforms (redis, mysql, all the linux distros and so on) so it seemed crazy to not include Jenkins along with this list. +\n\"docker run -p 8080:8080 jenkins\" is all you need to get going with LTS Jenkins now. +\nYou can also use \"docker run jenkins:1.554\" to get the latest of that lineage of LTS releases, or pick a specific one: \"docker run jenkins:1.554.3\" if you like. Leaving off a version assumes the latest. Check the https://registry.hub.docker.com/_/jenkins/tags/manage/[tags] page to see what is available. +\n\n+\n+\n\n+\nYou can read more and see how you https://registry.hub.docker.com/_/jenkins/[can use it here.] +\n\n+\n+\n\n+\nThere has been some questions and discussions on how to make use of Jenkins with the docker hub for creating new and interesting docker image based workflows for deployment. +\nIn fact, Jenkins featured in one of the first slides of the first keynote of docker con: +\n +\nimage:https://3.bp.blogspot.com/-qAC-f6ceVho/U5rfqpzj3VI/AAAAAAAAC8w/Ta4pzEhm-8A/s1600/Screen+Shot+2014-06-13+at+8.34.10+pm.png[image] +\n +\nTo make this dream a reality some additional https://wiki.jenkins.io/display/JENKINS/DockerHub+Plugin[plugins] had to be created - but this leaves the possibility of working with the docker hub (builds, stores images) and Jenkins (workflow, testing, deployment) to build out some kind of a continuous pipeline for handling docker based apps. I attempted to describe this more https://developer-blog.cloudbees.com/2014/07/announcing-dockerhub-jenkins-plugin.html[here]. +\n\n+\n+\n\n+\nThis image is maintained in this github https://github.com/cloudbees/jenkins-ci.org-docker[repo] and the official images are build by the https://github.com/docker/stackbrew[\"stackbrew\" system]. (We may move this repo to the jenkinsci github group shortly so keep an eye out). +\n\n+\n+\n\nIt will be interesting to watch this grow and change.\n\n+","title":"Official Jenkins LTS docker image","tags":["development","core","lts","docker"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-08-28T00:00:00.000Z","id":"972334aa-57d3-5da1-9193-f5871cbcf275","slug":"/blog/2014/08/28/juc-sf-2014-is-here/","strippedHtml":"+\nhttps://www.cloudbees.com/event/juc/2014/san-francisco[JUC SF] on October 23, 2014 is shaping up to be bigger and better this year. +\n\n+\n\n+\nHere’s what we have in store for you! +\n\n+\n\nThree Tracks\n\n+\n\n+\nWe’ve received a record high of 40 stellar proposals this year. To accommodate the many community proposals, we’ve decide to add a third track to the +\nagenda. https://www.cloudbees.com/event/juc/2014/san-francisco[JUC SF sessions] are now available for you to view. We have speakers from Google, +\nTarget, Gap, Cloudera, Ebay, Chicago Drilling Company, and much more. https://www.eventbrite.com/e/jenkins-user-conference-us-west-san-francisco-oct-23-2014-tickets-10558684309[Register now] for early bird price. +\nThe early bird price is only good until September 21, 2014. +\n\n+\n\nLive Stream\n\n+\n\n+\nIf you can’t attend the conference in person, https://www.cloudbees.com/event/juc/2014/san-francisco[Track 1] sessions will be available via live +\nstream, it’s all free. Brought to you by CloudBees. Registration for JUC SF live stream is https://www.eventbrite.com/e/jenkins-user-conference-us-west-san-francisco-live-stream-tickets-12240011203[here]. +\n\n+\n\nGet Drunk on Code\n\n+\n\n+\nHave a beer while learning how to write Jenkins plugin. Steve Christou, Jenkins support engineer will lead this lecture from 3:30pm to 6:00pm. He will +\nteach everything from how to get started, to techniques like writing a new https://wiki.jenkins.io/display/JENKINS/Jenkins+CLI[CLI Command], to writing your own builder. +\n\n+\n\nAsk the Experts\n\n+\n\n+\nMeet the Jenkins creator, committers, support engineers, and developers. We have dedicated time slot(s) for our attendees to get 1 on 1 access to our +\nexperts. Exact time is TBD. Ask them anything from plugins, configuration, technical support, to bug fixes. +\n\n+\n\n+\nOur current list of experts are: +\n\n+\n\n+\nAndrew Bayer\n\n+\nGareth Bowles\n\n+\nSteve Christou\n\n+\nJesse Glick\n\n+\nKohsuke Kawaguchi\n\n+\nDean Yu\n\n+\n\n+\nWant to join our panel of experts? Contact Alyssa Tong aly13@gmail.com +\n\n+\n\nExhibit Mixer\n\n+\n\n+\nSixteen technology https://www.cloudbees.com/event/juc/2014/san-francisco[sponsors] will be showcasing their newest technologies during +\nthe exhibition hour from 2:25 – 3:30pm. Grab a beer, visit with sponsors and see how they are using Jenkins. +\n\n+\n\n+\nThis is just a taste of what you’ll see at JUC SF. We look forward to seeing you there!! +","title":"JUC SF 2014 is Here!","tags":["general","meetup","news","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-08-28T00:00:00.000Z","id":"9b8568a6-9659-597e-80e4-a3f253035618","slug":"/blog/2014/08/28/workflow-plugin-code-walk-through/","strippedHtml":"Jesse and I will walk through the source code of the workflow plugin, highlights key abstractions and extension points, and discuss how they are put together.\n\nIf you are interested in developing or retrofitting plugins to work with workflows, I think you’ll find this session interesting.\n\nThe event will be on Google Hangout tomorrow. The time of the day is the same as usual office hours.","title":"Workflow plugin code walk-through","tags":["development","meetup","plugins","screencast","tutorial","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-09-17T00:00:00.000Z","id":"82c1a380-6078-5f29-8221-cf155abbbdb4","slug":"/blog/2014/09/17/jenkins-workflow-summit-rsvp/","strippedHtml":"+\nhttps://groups.google.com/forum/#!msg/jenkinsci-dev/qY387kOQlW8/vaBxacXYhGwJ[As was discussed some time ago], the workflow summit is being organized, and it's open for RSVP. +\n +\n\n+\nDue to the overwhelming demand, I've increased the capacity this time to 50, but this is an unconference where everyone needs to participate, which means we really cannot have too many people without changing the dynamics of the event. +\n +\n\n+\nSo please make sure you are willing to participate, as in not just listening and watching, but actually willing to speak. We expect you to bring something to the table — opinions, experiences, rants, presentations, feedbacks, etc. If you don't please let others take the seat, and rest assured we will give a presentation about workflow in https://wiki.jenkins.io/display/JENKINS/Jenkins+User+Conference+US+West+%28San+Francisco%29+Oct+23%2C+2014+-+Agenda[JUC Bay Area]. +\n +\n\n+\nIf you understand the criteria, https://www.meetup.com/jenkinsmeetup/events/203777932/[please RSVP is from here]. +","title":"Jenkins Workflow Summit RSVP","tags":["general","meetup","juc","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-09-02T00:00:00.000Z","id":"e07a1fec-e6dc-551a-bfb5-2d66e00f17e0","slug":"/blog/2014/09/02/jenkins-user-meet-up-in-paris/","strippedHtml":"+ +\n\n+\n+\n\n+\nMy apologies for the last minute announcement, but there will be a https://www.meetup.com/jenkinsmeetup/events/203261692/[Jenkins user meet-up in Paris on Sep 10th 7:00pm], which is just next week. The event is hosted by Zenika. You'll hear from https://twitter.com/gboissinot[Gregory Boissinot] and https://twitter.com/alecharp[Adrien Lecharpentier] about plugin development, and I'll be talking about workflow. +\n +\n\n+\nIt's been a while we do a meet-up in Paris. Looking forward to seeing as many of you as possible. The event is free, but https://www.meetup.com/jenkinsmeetup/events/203261692/[please RSVP] so that we know what to expect.","title":"Jenkins User Meet-up in Paris","tags":["general","meetup","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-09-24T00:00:00.000Z","id":"9e4c3d68-4229-57d1-a134-abe463150496","slug":"/blog/2014/09/24/jenkins-in-javaone-2014/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/JavaOne.png[image] +\n\n+\n+\n\n+\nThere'll be several talks that touch Jenkins. The first is from me and Jesse called https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=3387[Next Step in Automation: Elastic Build Environment [CON3387]] Monday 12:30pm. +\n +\n\n+\nThen later Tuesday, there's https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=11237[Building a Continuous Delivery Pipeline with Gradle and Jenkins [CON11237]] from Benjamin Muschko of Gradleware. +\n +\n\n+\nThursday has several Jenkins talks. One is https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=1880[The Deploy Factory: Open Source Tools for Java Deployment [CON1880]] from Bruno Souza (aka the Java Man from Brazil) and Edson Yanaga. In this same time slot, guys from eBay are doing https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=5685[Platform Upgrades as a Service [CON5685]], which discusses how they rely on automation to make platform upgrades painless. Then https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=1844[Mastering Continuous Delivery and DevOps [CON1844]] from Michael Huttermann. +\n +\n\n+\nIn https://www.oracle.com/javaone/exhibit.html[the exhibit area], the Jenkins project doesn't have its own booth (JavaOne is too expensive for that), but I'll be at https://www.oracle.com/us/assets/javaone-14-hilton-exhibits-2023244.pdf[the CloudBees booth], so is Jesse Glick. Find us at the booth for any Jenkins questions or impromptu hacking session, which would really help us as we get distracted from the booth duties that way. Or just drop by to get stickers, pin badges, and other handouts to take for your colleagues. +\n +\n\n+\nAnd finally, https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=2939[Script Bowl 2014: The Battle Rages On [CON2939]] gets an honorable mention because https://twitter.com/agentdero[our own Tyler Croy] is representing JRuby against other scripting languages, including my favorite Groovy. Hmm, who should I root for...","title":"Jenkins in JavaOne 2014","tags":["general","meetup","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-09-24T00:00:00.000Z","id":"328f055c-7ec7-56fc-a626-7b047790e7e1","slug":"/blog/2014/09/24/more-jenkins-related-continuous-delivery-events-in-chicago-washington-dc-and-san-francisco/","strippedHtml":"+\n\n+\n+\n\n+\nThe usual suspects, such as CloudBees, XebiaLabs, SOASTA, PuppetLabs, et al are https://www.cloudbees.com/cdsummit/[doing a Jenkins-themed continuous delivery event series] called \"cdSummit.\" The event is free, has a nice mix of user/vendor talks, and has an appeal to managers and team leads who are working on and struggling with continuous delivery and automation. +\n +\n\n+\nI've spoken in the past events, and I enjoyed the high-level pitches from various speakers. +\nThe last two events at Paris and London filled up completely, so I suspect others have liked them, too. +\n +\n\n+\nIf you live near Chicago, Washington DC, or San Francisco, check out the date and see if you can make it. https://www.cloudbees.com/cdsummit/[RSVP is from here]. If you do, be sure to pick up Jenkins stickers and pin badges!","title":"More Jenkins-related continuous delivery events in Chicago, Washington DC, and San Francisco","tags":["general","meetup","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-09-25T00:00:00.000Z","id":"76ef49f5-8629-511f-841c-e0ac514f6300","slug":"/blog/2014/09/25/cve-2014-6271-impact-on-jenkins/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Road_signs_in_Singapore[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Singapore_Road_Signs_-_Restrictive_Sign_-_Stop_-_Security_Check.svg/240px-Singapore_Road_Signs_-_Restrictive_Sign_-_Stop_-_Security_Check.svg.png[image] +\n]\n\n+\n+\n\n+\nI suspect many of you have been impacted by https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271[CVE-2014-6271] (aka \"shellshock\" bash vulnerability.) We had our share of updates to do for various *.jenkins-ci.org servers. +\n +\n\n+\nJava application servers in general (including one that ships in Jenkins) do not fork off processes like Apache does to serve requests, so the kind of CGI attacks you see on Apache does not apply. We are currently unaware of any vulnerabilities in Jenkins related to CVE-2014-6271, and no plan to issue a patch for that. +\n +\n\n+\nThat said, we did come up with one possible way attackers can exploit vulnerable bash through Jenkins, that you might want to be aware of. +\n +\n\n+\nWhen a build is parameterized, parameters are passed to the processes Jenkins launch as environment variables. So if you have a shell step (which uses `+bash+` by default), and if Eve only has a BUILD permission but not CONFIGURE permission, then Eve can exploit this vulnerability by carefully crafting parameter values, and have the bash runs arbitrary processes on the agent that run the build. +\n +\n\n+\nIn most such scenarios, Eve would have to be an authenticated user on Jenkins. Jenkins also leaves the record of who triggered what build with what parameters, so there's an audit trail. But if your Jenkins fits this description, hopefully this serves as one more reason to update your bash. +\n +\n\n+\nFinally, to get notified of future security advisories from Jenkins, see https://wiki.jenkins.io/display/JENKINS/Security+Advisories[this Wiki page].","title":"CVE-2014-6271 impact on Jenkins","tags":["general","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-10-06T00:00:00.000Z","id":"6d0461f6-898e-51fd-93b3-8b25ee763309","slug":"/blog/2014/10/06/gradle-fy-your-jenkins-plugin-project/","strippedHtml":"(This is a guest post from Daniel Spilker)\n\nJenkins supports building plugins using Gradle for a while now. Last week a new version of the Gradle JPI plugin has been released to iron out some issues.\n\nThe Gradle JPI plugin enables a 100% groovy plugin development environment with Groovy as primary programming language, Spock for writing tests and Gradle as build system. Have a look at the Job DSL plugin for an example.\n\nAn existing Maven build can be converted to Gradle by using the build.gradle template from the Gradle JPI plugin’s README. For instance, the POM from the Gradle plugin translates to this build.gradle file:\n\nbuildscript {\n    repositories {\n        mavenCentral()\n        maven {\n            url 'https://repo.jenkins-ci.org/releases/'\n        }\n    }\n    dependencies {\n        classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.6.0'\n    }\n}\n\napply plugin: 'jpi'\n\ngroup = 'org.jenkins-ci.plugins'\nversion = '1.25-SNAPSHOT'\n\njenkinsPlugin {\n    coreVersion = '1.480'\n    displayName = 'Jenkins Gradle plugin'\n    url = 'https://wiki.jenkins.io/display/JENKINS/Gradle+Plugin'\n    gitHubUrl = 'https://github.com/jenkinsci/gradle-plugin'\n\n    developers {\n        developer {\n            id 'gbois'\n            name 'Gregory Boissinot'\n            timezone '+1'\n        }\n    }\n}\n\ndependencies {\n    compile 'org.jenkins-ci.lib:dry-run-lib:0.1'\n}\n\nUsage of the Gradle JPI plugin is similar to working with the Maven HPI plugin. Use gradle jpi to build the plugin file. gradle check runs the tests, gradle install copies the plugin into the local Maven repository, gradle uploadArchives deploys the plugin to the Jenkins Maven repository and gradle server starts a Jenkins development server with the plugin installed.\n\nIt is recommended to use Gradle 1.8 because that is the version used to build and test the Gradle JPI plugin.\n\nFor the next release it is planned to do some maintenance like fixing code style issues and adding tests. After that more issues need to be addressed to bring the plugin on par with the Maven HPI plugin, most notably fixing the test dependencies ( JENKINS-17129) and publishing the plugin’s JAR ( JENKINS-25007). Updating Gradle to 2.x and getting the plugin on the Gradle plugin portal is also on the wishlist.","title":"Gradle-fy your Jenkins Plugin Project","tags":["general","guest post","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-10-15T00:00:00.000Z","id":"1b75ffd7-28e7-5543-bc68-88a656852993","slug":"/blog/2014/10/15/cve-2014-3566-poodle-impact-on-jenkins/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Poodle[image:https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Freddie_%288467901543%29.jpg/160px-Freddie_%288467901543%29.jpg[image]] +\n\n+\n+\n\n+\nAnother day, another SSL vulnerability! Google has https://poodle.io/[announced a vulnerability in SSL v3], and if you are using the \"Winstone\" servlet container built into Jenkins, and if you are using the HTTPS connector with the `+--httpsPort+` option (it is off by default), then you are vulnerable to this problem. +\n +\n\n+\nI've just issued link:/security/advisory/2014-10-15/[a security advisory] on this. If you haven't already subscribed to https://wiki.jenkins.io/display/JENKINS/Security+Advisories[the Jenkins security advisory mailing list], this is a great opportunity to do so. +\n +\n +\n\n+\nThe advisory includes the target delivery vehicles for the fix and how you can address the problem in the mean time. Inside corporate intranet, where Jenkins is typically used, I suppose there's a degree of trust among participants to make this less of a problem. But if you run an internet facing Jenkins, be sure to deploy the fix. +\n +\n +\n\n+\n(And as I write this, I've fixed all the `+https://*.jenkins-ci.org+` servers to disable SSLv3, so we are covered there)","title":"CVE-2014-3566 \"poodle\" impact on Jenkins","tags":["general","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-10-20T00:00:00.000Z","id":"94f28977-b270-5a37-b70b-89623666a600","slug":"/blog/2014/10/20/freebsd-project-use-of-jenkins-for-os-testing/","strippedHtml":"This is a guest post by Craig Rodrigues\n\nThe FreeBSD project produces a modern operating system derived from BSD Unix.\n\nIn the past 6 months, we have set up Jenkins at https://jenkins.freebsd.org/, to continuously build FreeBSD as developers add new code to the project. This has helped us identify and fix build breaks very quickly.\n\nWe have gone even farther by integrating Jenkins, Kyua,\nand Bhyve.\nKyua is a testing framework for infrastructure software.\nBhyve is the native hypervisor that comes with FreeBSD (similar to KVM on Linux).\n\nWe use the Build Flow plugin in this example Build flow to do the following:\n\nBuild the FreeBSD kernel and userland on amd64 whenever someone checks in new code to https://svn.freebsd.org\n\nCreate a bootable FreeBSD disk image with makefs\n\nBoot the image under bhyve\n\nRun these commands inside the bhyve VM:\n\ncd /usr/tests; kyua test; kyua report-junit --output=test-output.xml\n\nShut down the bhyve VM\n\nImports test-output.xml into Jenkins.\n\nProduces a full native test report in Jenkins\n\nThe results of this work were presented at the Bay Area FreeBSD Users Group\nin this presentation in October 2014.\n\nJenkins has been very easy to set up and use under FreeBSD.   We hope that by using\nJenkins to run OS-level unit tests, we will be able to improve the quality of FreeBSD.\nFor further information, please feel free to contact us at freebsd-testing@FreeBSD.org.","title":"FreeBSD project use of Jenkins for OS testing","tags":["general","feedback","guest post"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-10-20T00:00:00.000Z","id":"3c6859a9-1166-5f94-931c-b104a18061b1","slug":"/blog/2014/10/20/mobile-app-for-jenkins-user-conference-bay-area/","strippedHtml":"+\nJenkins User Conference in Bay Area is this Thursday, and one of the new things this year is the mobile app. +\n +\n\n+\nhttps://doubledutch.me/download/jenkins-user-conference[ +\nimage:https://dl.doubledutch.me/images/downloadiphone.png[image,width=253,height=532] +\n] +\n\n+\n+\n\n+\nThere's an Android version as well as an iPhone version. I've installed it locally, and it's very handy for checking the agenda, get more info about speakers and sponsors.","title":"Mobile App for Jenkins User Conference Bay Area","tags":["general","news","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-12-03T00:00:00.000Z","id":"fadbff98-025d-5ffb-9418-de5aacfe3546","slug":"/blog/2014/12/03/workflow-plugin-is-1-0/","strippedHtml":"Jenkins started with a notion of jobs and builds at heart. One script is one job, and as you repeatedly execute jobs, it creates builds as records. As the use case of Jenkins gets more sophisticated, people started combining jobs to orchestrate ever more complex activities.\n\nA number of plugins have been developed to enable all sorts of different ways to compose jobs, and many are used quite successfully in production. But this resulted in a certain degree of complexity for users to figure out how to assemble these plugins.\n\nSo we felt the need to develop a single unified solution that subsumes all these different ways to orchestrate activities that may span across multiple build agents, code repositories, etc. Various inputs from users as well as other plugin developers played a key role.\n\nThe result of this is the workflow plugin, which is what a number of us, including Jesse Glick an myself, are focused on in the past few months.\n\nThe plugin approaches the problem by defining a DSL for you to describe an execution of a job. Various convenient primitives are available, such as executing shell scripts, checking out the source code, obtaining an executor or a build workspace, etc. All sorts of classic existing plugins contribute their functionalities into this DSL, such as recording test results, fingerprints, or calling into other existing jobs. This allows you to leverage higher-level functionalities and report comprehension capability into a workflow. Similarly, you can leverage the ability of Groovy, the host language of workflow DSL, to define control flows, abstractions, and reuse.\n\nA key feature of a workflow execution is that it’s suspendable. That is, while the workflow is running your script, you can shut down Jenkins or lose a connectivity to a agent. When it comes back, Jenkins will still remember what it was doing, and your workflow script resumes execution as if it was never interrupted. A technique known as the \" continuation-passing style\" execution plays a key role in achieving this.\n\nI’m very happy to report that the workflow plugin is finally 1.0. This version runs on the latest 1.580-based LTS. and we created a docker image for you to play with too. There’s also a JUC presentation that explains this. We are working toward 1.0 release within this year, and in the meantime, the syntax is stable enough to allow you to start designing workflows today.\n\nWe’ve been hearing a lot of good feedbacks and enthusiasm for this new effort. Please let us know what you think.","title":"Workflow plugin is 1.0","tags":["development","plugins","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-12-17T00:00:00.000Z","id":"bc7d9b27-2ae4-5616-aa13-c20a02f7ee91","slug":"/blog/2014/12/17/breakingbuilds/","strippedHtml":"+\nA lot of us has grown fond of our loyal butler Mr.Jenkins over time, which was created by https://frontside.io/[Frontside] and chosen as https://jenkins-ci.org/content/the-polls-are-open-for-the-jenkins-logo-contest[a result of a logo contest]. In the true open-source style, the logo has since evolved into many different derivative works, such as https://wiki.jenkins.io/display/JENKINS/Emotional+Jenkins+Plugin[a plugin], https://jenkins-ci.org/content/jenkins-figure-available-shapeways[a 3D model], and https://jenkins-ci.org/content/behind-scenes-jenkins-user-conference-palo-alto[a bobble head]. +\n +\n\n+\nOur friends at CloudBees are running a https://twitter.com/search?q=%23BreakingBuilds[#BreakingBuilds] social media contest through Jan 5th to have some fun with Mr.Jenkins. https://ow.ly/FbZDb[Read Sacha Labourey's blog post], where he draws parallels between what a butler does and what continuous delivery can do. +\n +\n\n+\nI especially agree with him on this point: +\n +\n\n+\nI always loved the idea of using a butler to represent what Jenkins is about, as it projects all of the qualities that define continuous delivery: it is built to be proactive, it will help you fix problems before they happen, it orchestrates your entire pipeline to production without you having to worry about the sophisticated underlying sequence of steps and, if things go wrong Jenkins uses his fingerprint database to trace back the source of the issue. Full service. As your right arm, Jenkins is the reliable and trustworthy guy you want on your team! +\n\n+\n+\n\n+\nhttps://ow.ly/FdEBD[Check out the contest rules] and participate. Let's raise the visibility of Jenkins and have some fun in the process! +\n +\n\nRead Sacha’s blog\n\nLearn more about the contest and how to win Jenkins prizes\n\nGo directly to the #BreakingBuilds images\n\n+","title":"#BreakingBuilds","tags":["general","just for fun","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-01-27T00:00:00.000Z","id":"9f70266b-b93d-5438-ae49-cc913ec81c57","slug":"/blog/2015/01/27/2015-jenkins-user-conferences-call-for-papers/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Ballot_box[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/9/99/Cardboard_ballot_box_-_Smithsonian.jpg[image,width=200]] +\n\n+\n+\n\n+\nThe Jenkins User Conference 2015 is https://www.cloudbees.com/jenkins-user-conference-call-papers[seeking submissions] that reflect the latest innovations in Jenkins usage. This is your chance to educate, share and inspire the community with stories of how you've used Jenkins to continuously build that amazing project or how you developed that popular plugin that everyone is using. +\n +\n\n+\nIf you're gamed, here are some suggestions to get your creative juice going: +\n +\n\nScaling Jenkins within the enterprise\n\nJenkins as the orchestrator for continuous delivery\n\nPlug-in development\n\nJenkins techniques that solve testing/building problems in specific application areas: mobile, enterprise/web/cloud and UI testing\n\nWar stories that speak to a problem you faced, the Jenkins solution you implemented to solve it and the results you realized\n\nJenkins best practices, tips and tricks\n\nJenkins in the cloud - if you or your company is currently using Jenkins in the cloud we’d love to hear your story\n\nBeyond Java (Jenkins with PHP, Ruby, etc.)\n\n+\n+\n\n+\nWe are upping the ante at this year's JUCs. We are moving from a 1 day conference to a 2 days conference for SF and London - that's 18 additional cutting edge sessions to be learned. +\n +\n\n+\nhttps://www.cloudbees.com/jenkins-user-conference-call-papers[*SUBMISSION DEADLINE IS MARCH 8, 2015!*] +\n +\n\n+\nThere's also a wide variety of event sponsorship opportunities available. There are offerings from Gold to Silver packages, exhibitor packages in our world-class expo hall, speaking sessions, free passes, and many branding opportunities. For inquiries, pls contact juc-sponsorship@cloudbees.com +\n +\n\n+\nLooking forward to receiving your amazing proposals!","title":"2015 Jenkins User Conferences - Call for Papers","tags":["general","meetup","news","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2015-01-27T00:00:00.000Z","id":"7f758f44-fcee-5b27-9f8f-3bdc71029a9f","slug":"/blog/2015/01/27/office-hours-tomorrow-workflow-security-model-and-plugin-compatibility/","strippedHtml":"+\nhttps://plus.google.com/events/c4eagqodepqojlrv7glhc1ctg48[In tomorrow's Jenkins office hours], Jesse Glick will talk about two topics in the workflow plugin that he has been asked about: +\n +\n\nSecurity model: script security, permissions\n\nPlugin compatibility: SimpleBuildStep and friends, custom steps, etc.\n\n+\n+\n\n+\nThe session should be interesting to anyone using workflow or thinking about using workflow. Jesse is one of the top contributors in the community, so it'd be definitely worth your time! +","title":"Office Hours tomorrow: workflow security model & plugin compatibility","tags":["general","news","plugins","screencast","video","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-02-09T00:00:00.000Z","id":"26c24ba5-29d4-5f1b-890b-4f7ac46f257d","slug":"/blog/2015/02/09/jenkins-celebration-day-is-february-26/","strippedHtml":"+\nCongratulations! The Jenkins project officially went over the 100K active users mark sometime in January. As of January 31, https://stats.jenkins-ci.org/jenkins-stats/svg/total-jenkins.svg[we were at 102,992]. YOU are one of the 100K active users! +\n +\n\n+\nAs discussed on http://meetings.jenkins-ci.org/jenkins/2015/[a couple recent project meetings], we have designated *February 26* as Jenkins Celebration Day. +\n +\n\n+\nTo make some noise, here is what we are doing starting NOW: +\n +\n\n+\nWrite a blog about anything related to Jenkins. Post your blog and Tweet out a link to it. Include the hashtag #Jenkins100K in your post.\n\n+\nOn February 26, we will hold a raffle and pick four names at random. The grand prize winner will get a 3D Jenkins Butler model. Five others will get their pick of Jenkins swag (up to $20) from the Jenkins online store.\n\n+\n+\n\nOTHER WAYS TO CELEBRATE\n\n+\n+\n\n+\nThere are a number of other things planned and we want YOU to be involved. This blog post is the central place to come for all things related to the celebration. +\n +\n\n+\nRecording – Jenkins Governance Board\nDean, Tyler, Andrew and I will get together this month and record some thoughts about the Jenkins project. We will share that recording with you from this page on February 26.\n\n+\nTwitter Badge\nFor those of us on social media that want to proudly celebrate our community, we will have a special badge that you can use for your profile image on Twitter or any of the other social media forums. Feel free to use the badge as long as you want – but let’s get as many of us using it as possible between now and February 27.\n\n+\nSocial Media Images\n\nCloudBees is donating a series of images that we can all push out on social media (whatever platform(s) you use).\n\nPick your favorite(s) and push them out on Twitter, Facebook, G+\n\n+\n +\n*  +\n*Certificate* (available on this blog post soon) +\nDownload your very own “I am part of the Jenkins 100K” certificate. Print it out and proudly display it on the wall of your cube or office. +\n +\n*  +\n*Visibility* +\nThe Community will also issue a press release on February 26 announcing our milestone news. +\n +\n*  +\n*Sign the “card”* +\nConsider this blog a Congratulations card to the entire community. Share your thoughts in a comment on this blog about anything Jenkins-related that you wish! +\n\n+\n+\n\n+\nThis is a big milestone for the Community and one you should be proud to be part of! Let’s make some noise… +","title":"Jenkins Celebration Day is February 26","tags":["general","feedback","just for fun","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-02-19T00:00:00.000Z","id":"c98daac7-eb1d-5f1f-9ee3-7061cf5aa2f2","slug":"/blog/2015/02/19/jenkins-100k-celebration-pictures/","strippedHtml":"+\nIn preparation of the celebration of 100K installations, 1000 plugins, and 10 years of Jenkins, we've got these images created. +\n +\n\n+\nI hope folks can use these images to mark the occasion! https://www.flickr.com/photos/131462214@N04/sets/72157650510081118/[The full size pictures are here]. +\n +\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/jenkins100k_1.jpeg[image,width=379,height=479] +","title":"Jenkins 100K celebration pictures","tags":["general","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-02-24T00:00:00.000Z","id":"6b52335f-acb3-5e6f-9167-4b7dde3aa96a","slug":"/blog/2015/02/24/100k-celebration-podcast-recording/","strippedHtml":"+\nIn preparation for https://jenkins-ci.org/content/jenkins-celebration-day-february-26[Jenkins 100K celebration], I'm going to record a one-time podcast with Dean Yu, Andrew Bayer, and R. Tyler Croy. +\n +\n\n+\nMy current plan is to go over the history of the project, how big the community was back then, how we grow, where we are now, and maybe a bit about future. +\n +\n\n+\nBut if you have any other suggestions/questions that you'd like us to discuss, you have 3 or 4 more hours to send in that suggestion! Your feedback would help us make a better recording, so please don't hesitate to tell us.","title":"100K Celebration Podcast Recording","tags":["general","feedback","interview","just for fun","meetup","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-02-25T00:00:00.000Z","id":"1c1ae65c-aeae-5855-bc4e-cc4d328eb58f","slug":"/blog/2015/02/25/100k-celebration-podcast/","strippedHtml":"+\nAs a part of https://jenkins-ci.org/content/jenkins-celebration-day-february-26[the Jenkins 100K celebration], Dean Yu, Andrew Bayer, R. Tyler Croy, Chris Orr, and myself got together late Tuesday evening to go over the history of the project, how big the community was back then, how we grow, where we are now, and maybe a bit about future. +\n +\n\n+\nWe got carried away and the recording became longer than we all planned. But it has some nice sound bites, back stage stories, and stuff even some of us didn't know about! I hope you'll enjoy it. +\n +\nhttps://get.jenkins.io/podcast/100k.mp3[The MP3 file is here], or you can use your favorite podcast app and subscribe to https://jenkins-ci.org/podcast. +\n +\n\n+\n\n+\n\n+\n\n+","title":"100K Celebration Podcast","tags":["general","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-03-03T00:00:00.000Z","id":"150baa5e-956c-54d6-a662-064fff32e425","slug":"/blog/2015/03/03/jenkins-user-conference-save-the-date/","strippedHtml":"We have some exciting news to share with you! We have finalized most of the dates and locations for the 2015 Jenkins User Conference (JUC) World Tour.\n\n+\n+\n\nSave the date(s):\n\n+\n+\n\nUS East (Washington DC): June 18-19\n\nEurope (London): June 23-24\n\nIsrael: July 16 (ETA)\n\nUS West (Santa Clara): September 2-3\n\n+\n+\n\nThe big news? The JUC agenda has been expanded this year to cover two days! That means you get twice as many opportunities to learn how others are using Jenkins and to network with other Jenkins users.\n\n+\n+\n\nCALL FOR PAPERS IS OPEN FOR ALL JUC CONFERENCES\n\n+\n+\n\nWe need JUC speakers! The Call for Papers is open now and you can apply here. This is an opportunity for YOU to give back to the community by sharing your Jenkins knowledge and success. Jenkins speakers contribute significantly to the overall JUC experience.\n\n+\n+\n\nIn return for speaking, you will receive free admission to the conference and fame/fortune within the Jenkins community. OK, we can’t guarantee the latter, but we can guarantee the former! Hurry and apply now, because the Call for Papers deadline for US East and Europe expires on March 22, 2015.\n\n+\n+\n\nNot interested in speaking? Another way to contribute to the community is by letting us know who you want to hear from. Nominate or refer that amazing speaker and we’ll do the rest. Contact alytong13@gmail.com\n\n+\n+\n\nJUC SPONSORSHIPS\n\n+\n+\n\nLastly, be a JUC sponsor. Any organization can do this – whether a vendor that sells into the Jenkins ecosystem or a company that has received value from Jenkins and wants to give back to the community. You can find out more here. (NOTE: JUC is not a moneymaking venture for the community – so sponsorships do make a difference.)","title":"Jenkins User Conference – Save the Date","tags":["general","meetup","news","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2015-03-06T00:00:00.000Z","id":"903172dd-2b46-5e97-beaa-f5ef62e66756","slug":"/blog/2015/03/06/google-apps-sso-no-longer-supported-in-jenkins-openid-plugin/","strippedHtml":"+\n_This is a guest post from Owen Mehegan (aka autojack)_ +\n +\n\n+\n\n+\nhttps://commons.wikimedia.org/wiki/Sunset[image:https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Sunset_Marina.JPG/320px-Sunset_Marina.JPG[image,width=200]] +\n\n+\n\n+\nIn 2014 Google announced that they will be shutting down their OpenID 2.0 authentication endpoint and replacing it with Google+ Sign-in, a library built on top of OpenID Connect. *The old Google endpoint will shut down on April 20th, 2015!* Accordingly, if you are using the Jenkins OpenID plugin to authenticate users with the ‘Google Apps SSO’ feature (typically when Google hosts your personal or corporate email), you need to upgrade. Ryan Campbell took the initiative to develop the new Google Login plugin which implements the Google+ Sign-in functionality. This is the recommended solution going forward. Follow the steps https://wiki.jenkins.io/display/JENKINS/Google+Login+Plugin[here] to configure it for your site. *Note that you DON’T need to have a Google+ social network account/profile. Any Google account can be used.* +\n +\n\n+\nIf you find yourself locked out of your Jenkins system after the old endpoint is shut down you will need to follow the steps https://wiki.jenkins.io/display/JENKINS/Disable+security[here] to disable Jenkins security temporarily. Then you can connect without authentication and switch to the Google Login plugin. You will probably want to uninstall the old OpenID plugin at that point as well. +\n +\n\nReferences:\n\n+\n\nShutdown announcement from Google\n\nJENKINS-23431, bug tracking this fix\n\nOld OpenID plugin\n\nNew Google Login plugin\n\n+","title":"Google Apps SSO no longer supported in Jenkins OpenID plugin","tags":["development","guest post","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-03-17T00:00:00.000Z","id":"7f363b25-38c7-5e26-bb13-e4156d286f87","slug":"/blog/2015/03/17/juc-2015-call-for-paper-deadlines-approaching/","strippedHtml":"+ +\n\n+\n\nThe deadlines to speak at a 2015 Jenkins User Conference are fast approaching. Don’t miss out on this great opportunity to share your Jenkins tips, tricks, stories, and know-how with the community! Submit your proposal by the below deadlines to have your talk considered by a panel of Jenkins experts:\n\n+\n+\n\nPlease note: The deadline to submit a speaking proposal for East Coast US (DC) and Europe (London) is SUNDAY, MARCH 22, 2015. That is only FIVE days away!\n\n+\n+\n\n2015 JUC Cities & Call for Papers Deadlines\n\n+\n+\n\nEast Coast US: Deadline to Submit - March 22, 2015\n\nLondon: Deadline to Submit - March 22, 2015\n\nWest Coast US (Bay Area): Deadline to Submit - May 3, 2015\n\nIsrael: Deadline to Submit - May 15, 2015\n\n+\n+\n\nNot interested in speaking? Contribute to the community in another way: nominate or refer a speaker you would like to hear from at JUC! Contact alytong13@gmail.com or simply become a sponsor.","title":"JUC 2015 Call for Paper Deadlines Approaching!","tags":["general","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-03-25T00:00:00.000Z","id":"0032620d-d2e2-5b0c-abbb-713b204b7bd9","slug":"/blog/2015/03/25/registration-for-juc-2015-is-open/","strippedHtml":"+\nimage:https://pbs.twimg.com/media/Bqbz9JQIIAA9gKG.jpg[image,width=300,height=225] +\n\n+\n+\n\nIt’s that time of the year again: 2015 Jenkins User Conference Registration is OPEN for all cities. This year, we are making some changes to JUC — JUC will be a two-day event in three out of the four cities across the globe. You will get opportunities to network with other users and developers in the community, learn more about how other people are using Jenkins and attacking broader continuous delivery problem. As always, we love to meet & talk to you to learn what you are doing with Jenkins. To get the sense of how JUC is like, take a look at our past JUC reports like this and this.\n\n+\n+\n\nEarly Bird pricing for JUC tickets is available until May 1.\n\n+\n+\n\nEast Coast US: June 18-19\n\nEurope: June 23-24\n\nIsrael: July 16\n\nWest Coast US: September 2-3\n\n+\n+\n\nYou can learn a lot more information here about the 2015 Jenkins User Conference World Tour. As always, we are tweaking JUC to make it better, based on feedback. I’ll post about those in coming months. Make sure to follow or tweet at @jenkinsconf to stay up to date on JUC news or to share which JUC you will be attending!\n\n+\n+\n\n+\nSee you there!","title":"Registration for JUC 2015 is Open!","tags":["general","news","jenkinsci","juc"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-04-06T00:00:00.000Z","id":"1fb9d6c0-c2d6-5ae0-bcff-e39d3a243062","slug":"/blog/2015/04/06/confluence-migration-this-weekend/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Structure_relocation[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/1/1f/GMC_U-Haul_truck_front_1.JPG/320px-GMC_U-Haul_truck_front_1.JPG[image] +\n]\n\n+\n\n+\nFor the past few weeks, I've burnt a lot of midnight oil to https://github.com/jenkins-infra/confluence[get Confluence containerized]. The goal is to make Confluence upgrade more manageable and testable. In the proces, I've not only containerized Confluence, but also containerized https://github.com/jenkins-infra/confluence-cache[some other services], including https://github.com/jenkins-infra/mock-ldap[mock LDAP server], to be able to test the copy of the production Confluence dataset against newer versions of Confluence before upgrading production. +\n +\n\n+\nThe infra team is currently http://lists.jenkins-ci.org/pipermail/jenkins-infra/2015-April/000292.html[targeting this weekend] to migrate our current Confluence instance to this new container, and use the opportunity to move the service to a bigger system. Currently JIRA and Confluence has to live within 2.5GB RAM from the same host, and it's really stretching both services. The new box has 4GB of RAM, and we are splitting JIRA and Confluence to two different servers. So there's a lot of head room. +\n +\n\n+\nSo please expect some Wiki outage over the next weekend. +\n +\n\n+\nAs always, our sincere thank you to https://osuosl.org/[Oregon State University Open Source Lab] for generously hosting our servers. Please donate to them to show your support. Similarly, thank you https://atlassian.com/[Atlassian] for generously providing the license for running Confluence. +\n +\n\n+\nIf this goes well, JIRA will follow suit.","title":"Confluence migration this weekend","tags":["infrastructure","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-04-06T00:00:00.000Z","id":"84d17108-8937-564b-9bc9-c4e94077a9fe","slug":"/blog/2015/04/06/good-bye-java6/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/6_(number)[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/6/62/U%2B2678_DejaVu_Sans.svg/200px-U%2B2678_DejaVu_Sans.svg.png[image] +\n] +\n\n+\n+\n\n+\nAbout two years ago, we bumped our runtime JRE requirement https://github.com/jenkinsci/jenkins/commit/3431a7cba[from Java5 to Java6]. And so the time has come once again for us to finally move on to Java7. Because of all the new language features, https://groups.google.com/forum/#!topic/jenkinsci-dev/sw_WepGw0Pk[many of us the developers really wanted to move right on to Java8], but after much discussion we settled to move to Java7 first and then to Java8. +\n +\n\n+\nSo here is the plan: +\n +\n\nStarting Jenkins 1.608, we start advertising that we will be moving on to Java7, which is why you are reading this.\n\nStarting Jenkins 1.610 (2 weeks from now), we will ship so-called 51.0 class files that will only load on Java7+. This gives some more warnings to those who don’t read our blog.\n\nUnless we hear uproar from users, starting around 1.614 (6 weeks from now), core developers will start linking directly to new Java7 APIs. We will move on to servlet 3.0 at this time as well.\n\nThe current 1.596 line of LTS will remain compatible with Java6, and most likely the next LTS line will also remain compatible with Java6. So LTS users have additional 3 months before upgrading to Java7.\n\n+\n+\n\n+\nJava7 has more NIO improvements that allow us to do some file I/O in more portable manner. Similarly, servlet 3.0 will help us build more interactive UI. +\n +\n\n+\nYour Jenkins controller and all the build agents need to be running on Java7+. Similarly, those who are using the Maven2 job type must also run Maven with Java7+. However, this does not prevent you from using Jenkins to build your applications that are targeted to earlier versions of Java. According to our research, most platforms people run Jenkins on has been already shipping Java7 for quite some time now. But if you have a good reason why we shouldn't force everyone to Java7, please let us know ASAP. +\n +\n\n+\nTo put this into context, https://www.java.com/en/download/faq/java_7.xml[Oracle will not release updates to Java7 past April 2015]. We have always recommended users to run the latest general release according to Oracle, which is currently Java8. As I said, I suspect we will be requiring Java8 pretty soon. So if you are still running Java6, you should definitely upgrade to Java8. +","title":"Good bye Java6","tags":["development","core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-04-13T00:00:00.000Z","id":"752bdfc4-4814-55c6-a0f5-62faf0805e72","slug":"/blog/2015/04/13/juc-world-tour-2015-keynote-speaker-news-and-early-bird-tickets/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/The-Phoenix-Project-border_2.png[image,width=99] +\n\n+\n+\n\nThe 2015 JUC World Tour dates are rapidly approaching. Since the community has grown so tremendously since last year, the JUC in each city will be the largest gathering of Jenkins users in that region.\n\n+\n+\n\nKohsuke will, as always, be the opening keynote speaker at each JUC. But, with the conference going from one to two days, I am happy to announce that Gene Kim will be another keynote on the second day! He is the author of The Phoenix Project and a thought leader in DevOps.\n\n+\n+\n\nTo have these two experts in one place will provide a great opportunity to talk about Jenkins as the foundation of continuous delivery and DevOps practices.\n\n+\n+\n\nAnother exciting announcement: the 2015 Jenkins World Tour will run alongside the CD Summit conferences for both days (at the U.S. East, Europe and U.S. West locations only). Attendees of either conference can attend any of the talks and presentations at both events. Learn more about what CD Summit 2014 was like to get an idea for this year’s event.\n\n+\n+\n\nRegistration for all 2015 JUC locations is open. Early bird pricing ends May 1!\n\n+\n+\n\nEast Coast US: June 18-19\n\nEurope: June 23-24\n\nIsrael: July 16\n\nWest Coast US: September 2-3\n\n+\n+\n\nThe Call for Papers for JUC is still open for Israel and U.S. West. Submit your own proposal or convince your favorite speaker/Jenkins user to submit one if speaking is not your thing!\n\n+\n\nEast Coast US: June 18-19\n\nIsrael: July 16","title":"JUC World Tour 2015 - Keynote Speaker News and Early Bird Tickets","tags":["general","juc"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-04-22T00:00:00.000Z","id":"f3592b3f-92e6-5e5d-9d3a-334ca316a9e3","slug":"/blog/2015/04/22/jenkins-user-conference-agenda-news/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/newjuc2_1.png[image,width=153,height=166] +\n\n+\n+\n\nI have some exciting news — The agendas have been posted for the Jenkins User Conferences (JUC) to be held at U.S. East (Alexandria, VA) and Europe (London). Take a look here to learn more about the talks, speakers and schedules.\n\n+\n+\n\nAs always, there is a great lineup of presenters ready to share their Jenkins stories: Peter Vilim will be presenting “Proving a First Class User Experience with Jenkins” at the U.S. East JUC, and Sander Kieft’s talk is called “Automating a Big Data Platform with Jenkins” at JUC Europe. Learn more about all 2015 JUC speakers and talks here. Explore the pages and see the who/what/where of all JUC 2015 locations!\n\n+\n+\n\nYou will see some familiar names and talks as well: Andrew Bayer will be presenting his very popular talk called “Seven Habits of Highly Effective Jenkins Users” at JUC Europe. Will Soula is returning this year to JUC U.S. East to “chat” about “Chat Ops and Jenkins.” Lorelei McCollum is also back with two talks at JUC U.S. East called “Jenkins 101” and “Getting Groovy with Jenkins.”\n\n+\n+\n\nThis year, you will notice a few differences in the JUC agendas. JUC is now a two-day conference in the U.S. East, Europe and U.S. West locations! Also, each session is assigned a category according to its content: Continuous Delivery, Best Practices, Operations, Plugins, Case Studies/War Stories and more. This will help you decide which talks to attend. You will also notice that several talks, especially in JUC Europe, reflect the industry’s growing interest in big data and Docker.\n\n+\n+\n\nThe agendas are still being finalized for JUC Israel and JUC U.S. West. If you are interested in speaking at either of these locations, you can still send in your talk proposals. The U.S. West deadline is May 3 and the Israel deadline is May 15.\n\n+\n+\n\nJUC is such a great opportunity for the community to come together and network face-to-face. You can meet Kohsuke Kawaguchi, creator of the Jenkins project, Gene Kim, author of The Phoenix Project and DevOps expert, but you will also have the opportunity to meet Jenkins users, just like you, from all over the world. And this year, with the Jenkins project at well over 100K active installations, JUC as a whole will be the largest gathering of Jenkins users ever.\n\n+\n+\n\nEarly bird pricing for JUC U.S. East and Europe ends May 1, so REGISTER NOW to take advantage of the lower pricing.","title":"Jenkins User Conference - Agenda News","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-04-24T00:00:00.000Z","id":"29df3206-c291-5de6-88af-86d0d18aad0c","slug":"/blog/2015/04/24/jira-migration-this-weekend/","strippedHtml":"In continuing my infra upgrade work, this weekend I’ll be migrating JIRA to another server.\n\nThis will make upgrade more manageable and testable. The service will be disrupted for a few hours. Check out our @jenkinsci on Twitter for up-to-the-minute status.\n\nOnce the migration is done, the next step is to upgrade them.","title":"JIRA migration this weekend","tags":["infrastructure","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-05-07T00:00:00.000Z","id":"ec727f17-2ed6-5a65-9d86-2f7fee7a0a69","slug":"/blog/2015/05/07/juc-speaker-blog-series-denis-chernilevskiy-juc-europe/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114] +\n\n+\n+\n\nJenkins is a great tool for automation of all kinds of processes in the software development cycle. Falling back to the year 2008 I remember myself creating my first job and the feeling of enlightenment flowing through my veins :) Then it was just one script running on just one agent (node) and it was enough for that particular task. But years have passed, software systems have become more complicated and terms like «cloud», «distributed environment», «CI/CD» are not a discovery for anyone nowadays. But how can these things be connected and used by Jenkins? The detailed answer for this question will be revealed in my presentation of \"compound-cloud\" plugin at JUC Europe 2015.\n\n+\n+\n\nBefore I got to Yandex, the QA’s automation concept was the following:\n\n+\n+\n\nThe job takes 1 free agent\n\nThe job installs the system under test and tests themselves to this node\n\nThe job runs tests\n\nThe job cleans-up and returns the agent back to the pool\n\n+\n+\n\nWhen I started working for Yandex I understood that the concept of one single agent for a job is not a solution for our tasks because of one particular reason - the system under test was not able to work on a single node… This system is a Yandex MediaAd platform and it requires at least 4 separate nodes to be run on. Better - 8 nodes. Optimal - 40 nodes :)\n\n+\n+\n\nThinking about the problem, we thought we would get closer to the solution by simply using a single Jenkins agent as a launchpad for tests and for some tools which will then get some more nodes from the cloud (we already had OpenStack ready) and deploy the system inside them. Thank God we haven’t implemented this solution :)\n\n+\n+\n\nWe’ve been stopped by the following reasons:\n\n+\n+\n\nWe are lazy and want to write as little code as possible :)\n\nThere’s a JClouds plugin that can work with OpenStack. Why don’t we use it? 'Cause it provisions only 1 agent per job. But it has provisioning algorithms implemented already, and we don’t want to reimplement them…\n\nIf we create cloud instances with a separate tool, then we have to manage them separately and can’t get profit of using Jenkins’ agent management, which is also implemented already…\n\nif we do so, we also lose Jenkins’ agent features like running a script on the agent, get some reports or statistics and so on\n\nWe would also lose visibility: how many agents we have, how many are busy, how many left til we get to the cloud quota limit? We could go to OpenStack panel then, but it’s totally inconvenient…\n\n+\n+\n\nAs a result of this reasoning, the idea emerged! «We should provide an ability to either attach several agents to a job, or to allow a agent to consist of several nodes». The second way seemed to give more order in agents management and it was stated to be a final solution for our problem. We called this concept a «compound-agent». And then we coded…​\n\n+\n+\n\nThat’s how the compound-cloud plugin was born. It allows us to get such compound-agents from any cloud plugin installed to Jenkins. Of course there’s also a possibility to form a compound agent from single agents already attached to Jenkins, but it’s not the true way for hardcore IT guys ;)\n\n+\n+\n\nOf course there are lots of details on how we use this concept in a real life for our purposes (and I will surely describe the main parts of them in my speech), but here’s a short list of common use-cases:\n\n+\n+\n\nWe configure a set of labels via the JClouds plugin. Each label represents 1 agent template, like «small_ubuntu_server» or «large_win_server».\n\nWe then configure a compound-agent label via compound-сloud plugin. Each label is a set of single cloud labels. As a result we have a label like «Small test env» consisting of \"1x large WinServer + 3x small Ubuntu».\n\nWe assign roles to each single node in a compound label, to be able to distinguish them, so the job can run a script on a particular node inside a compound-agent for example.\n\nWe assign a label to a job, like it’s done for a JClouds label, for example.\n\nWhen the job starts, a compound-agent provisions from the cloud using the corresponding compound label.\n\nWe run a deployment tool on a ROOT role node of a compound-agent. It then deploys the system under test to other nodes inside this compound-agent.\n\nWe run tests.\n\nWe don’t bother with creating/cleaning/stopping/deleting agents. It’s done by Jenkins.\n\nWe get profit :)\n\n+\n+\n\nThe core feature is that we’ve reused all the provisioning and management mechanisms already implemented in Jenkins and cloud plugins. We just run our jobs and don’t care about the distributed infrastructure!\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/Denis-Chernilevskiy_0.jpg[image,width=150] +\n\n+\n+\n\nThis post is by Denis Chernilevskiy, the head of QA/DevOps Services at Yandex. If you have your ticket to JUC Europe, you can attend his talk\"Multi-Node Environment as a Jenkins Agent (Compound-Agent)\" on Day 2.\n\n+\n+\n\nStill need your ticket to JUC? Early bird pricing ends May 15. Also, if you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598] +","title":"JUC Speaker Blog Series: Denis Chernilevskiy, JUC Europe","tags":["general"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-05-14T00:00:00.000Z","id":"995f729d-a8bd-584b-ba3e-6ba20e3df919","slug":"/blog/2015/05/14/juc-speaker-blog-series-lorelei-mccollum-juc-u-s-east/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nHave you heard Jenkins mentioned, but haven’t really done much with it? Are you at JUC because you want to learn more? Has your company been pushing you to use Jenkins or to adapt a more agile build/test process using a Continuous Delivery/Continuous Integration method?\n\n+\n+\n\nJenkins 101 is going to give you an introduction to Jenkins and get you started in the right direction. Many sessions may be too in-depth, too specialized, or do a deep dive too fast, and while that is good for the more intermediate Jenkins user, the beginner can get lost fast and lose interest. My session will go through the basics of Jenkins, so anyone without prior knowledge can get up and running in just a short amount of time. We will cover building/configuring jobs, design of pipelines, security of your Jenkins controller, fun groovy scripts and useful plugins to get you started. Whether you are a beginner or an advanced Jenkins user, you can always learn from how others are using Jenkins. Attend this session early on in your JUC lineup, so that you get the most out of the conference!\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/01-02-1600-McCollum_0.png[image,width=149,height=180] +\n\n+\n+\n\nThis post is by Lorelei McCollum, Software Engineer at IBM. If you have your ticket to JUC U.S. East, you can attend her talk\"Jenkins 101\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? Early bird pricing ends May 15. Also, if you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Lorelei McCollum, JUC U.S. East","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-05-18T00:00:00.000Z","id":"e89bc427-8c0e-5d0d-9121-a47ffecb011b","slug":"/blog/2015/05/18/juc-speaker-blog-series-andrew-bayer-juc-europe/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n\nIn the fall of 2011, the very first Jenkins User Conference was held in San Francisco. Over 250 people showed up. It was, to be completely honest, a bit shocking to me - that little project I’d gotten involved with less than three years earlier was big enough, interesting enough, important enough for 250 people to travel from around the world to spend a day talking about it? That’s an amazing feeling, and it was an amazing day. Since then, there’ve been three more JUCs in the Bay Area, three in Israel and two in Europe, with more talks on more Jenkins subjects and an ever-increasing number of attendees. This year, there are another four scheduled - three of them for two days each this time! Find out more about the first two, JUC US East and JUC Europe, below!\n\n+\n+\n\nNot only are there enough worthy talks to merit a full day a few times a year - now there are enough to merit two days! At JUC US East 2015 outside Washington, DC on June 18 and 19, you can see talks on the Workflow plugin for Jenkins, test automation, mobile testing, plugin development, and a few talks on new and fascinating ways people are using Jenkins - even driving big data workflows! And then, just a few days later, on June 23 and 24 in London, there’s JUC Europe 2015, with talks covering things like the fantastic Job DSL plugin, reproducible build environments, Jenkins and Docker together, and my personal favorite, the 2015 edition of my Seven Habits of Highly Effective Jenkins Users talk.\n\n+\n+\n\nWhether you’re interested in the latest innovations in continuous integration and delivery, or you’re a Jenkins plugin developer wanting to learn how to make your plugins more mature and useful, or you’re a Jenkins administrator trying to understand how to provide your users with a great platform for their builds and testing, or even if you’ve just heard about CI/CD and you want to find out more, the Jenkins User Conferences are a great opportunity to see all those things and meet with other Jenkins users and developers. I’m excited to attend my fifth JUC in London, and I hope to see you there!\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/smallerme.jpeg[image,width=150,height=188] +\n\n+\n\nThis post is by Andrew Bayer, build and tools architect at Cloudera and longtime Jenkins contributor. If you have your ticket to JUC Europe, you can attend his talk\"Seven Habits of Highly Effective Jenkins Users\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? Early bird pricing ends May 15. Also, if you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Andrew Bayer, JUC Europe","tags":["general","meta","jenkinsci","pipeline","workflow"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2015-05-20T00:00:00.000Z","id":"7c7673d8-a534-59c4-a1b8-8aaee9a7cfec","slug":"/blog/2015/05/20/juc-speaker-blog-series-david-dang-juc-u-s-east/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nI’ve implemented numerous test automation projects for clients, but recently I had a unique request. Jenkins plays a critical role.\n\n+\n+\n\nThe “digital channel” is an industry buzzword for many companies these days. The digital channel represents a company’s content that is delivered by websites and mobile devices. Companies want the same website to work across any channel in multiple browsers and different operating systems. They also want that same website to work across an explosion of mobile devices. Add the new generation of smart watches showing up and testing is becoming a huge challenge for IT departments. One big issue is there is too much duplication of testing efforts.\n\n+\n+\n\nIn a perfect world, you would create a core set of test automation scripts that work across all digital channels. A client recently requested that my team and I create this perfect-world scenario, and we are doing just that. Jenkins pulls it all together by managing the execution and reporting.\n\n+\n+\n\nJoin me for my talk to learn how I’m using Jenkins, Selenium, TestNG, and Perfecto Mobile to solve the digital channel testing challenges for one client.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/01-02-1030-dang_0.jpg[image,width=149,height=180] +\n\n+\n+\n\nThis post is by David Dang, VP of Automation Solutions at Zenergy Technologies. If you have your ticket to JUC U.S. East, you can attend his talk\"Integrating Mobile Automation with Jenkins: A Case Study Using Perfecto Mobile with Jenkins\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? Early bird pricing has been extended! Also, if you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series:  David Dang, JUC U.S. East","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-06-01T00:00:00.000Z","id":"d5f01e80-2e65-54a5-910e-28c21aa265af","slug":"/blog/2015/06/01/juc-speaker-blog-series-nobuaki-ogawa-juc-europe/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nOn the 23rd and 24th June, I’ll attend Jenkins User Conference 2015 Europe in London. And I’ll present a lightning talk about Continuous Delivery with Jenkins.\n\n+\n+\n\nHere is short overview of what I’d like to talk about there.\n\n+\n+\n\n1. Continuous Build\n\n+\n+\n\nMy starting point was to get to know JenkinsCI. Our developers used JenkinsCI to make the Continuous Build of our software.\nSo, our developing environment was quite Jenkins friendly from the beginning.\n\n+\n+\n\n2. Continuous Deploy\n\n+\n+\n\n--- Virtual Machine ---\n\n+\n+\n\nWe had to have an environment where we could deploy our new build. As we are big fans of Microsoft, we decided to use Azure as our environment to make Continuous Testing.\n\n+\n+\n\nHow do we control it? We use Powershell, which can be executed with JenkinsCI.\n\n+\n+\n\n--- Product Deployment ---\n\n+\n+\n\nHow did we achieve the Continuous Deploy? Actually, my boss, who is DirectSmile’s Yoda developed a very powerful tool called “DirectSmile Installation Service” to enable this.\n\n+\n+\n\nSo we integrated this tool within JenkinsCI, and now Jenkins can deploy DirectSmile products on any target server with just one-button-click!\n\n+\n+\n\n3. Continuous Testing\n\n+\n+\n\nOf course, we use JenkinsCI to make the Continuous Testing.\nHow do we do that?\nWe use Selenium to make and run tests. So we can cover most features and we can execute it at anytime.\n\n+\n+\n\nWe are doing it after every new version build, to obtain Continuous Delivery.\n\n+\n+\n\n4. Continuous Sharing\n\n+\n+\n\nI think it’s important to share all knowledge and experiences I have had with others, especially those whom have just started with Continuous Delivery.\n\n+\n+\n\nDon’t worry, it is probably much easier than you think.\n\n+\n+\n\nAs a part of this practice, I’d like to share all my knowledge and experiences with how easy it is to achieve Continuous Delivery with Jenkins at JUC 2015.\n\n+\n+\n\nI’m really exciting to meet and talk about this there! See you at JUC 2015 in London!\n\n+\n+\n\nAbout Me\n\n+\n+\n\nMy name is Nobuaki Ogawa, from Japan, and I currently work in Berlin, Germany for the software company DirectSmile as a DevOps QA Manager.\n\n+\n+\n\nFrom the very first time I used JenkinsCI, it helped me a lot. Almost all the work I did last year was mainly with Continuous Delivery with Jenkins.\n\n+\n+\n\nFrom Build to Deploy, Test, and even Maintenance and Monitoring, my Jenkins takes care of everything.\n\n+\n+\n\nIt was super easy to achieve Continuous Delivery in the DirectSmile world with the help of JenkinsCI.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/02-03-1530-ogawa_0.jpg[image,width=152,height=182] +\n\n+\n+\n\nThis post is by Nobuaki Ogawa, DevOps QA Manager at DirectSmile. If you have your ticket to JUC Europe, you can attend his talk\"Jenkins Made Easy\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Nobuaki Ogawa, JUC Europe","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-06-02T00:00:00.000Z","id":"a29c742d-58a8-5210-bc20-116ad89dda5b","slug":"/blog/2015/06/02/juc-speaker-blog-series-peter-vilim-juc-u-s-east/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114] +\n\n+\n+\n\nIn this talk I will be focusing on plugin development for Jenkins. I aim to capture some of the lessons that we have learned at Delphix and that I learned while I was in graduate school. At Delphix we have been large users of Jenkins for over four years which is most of the history of our startup. We currently run thousands of jobs per day. We have been quite happy with the experience and expect these numbers to grow significantly as our business scales beyond our current 300 head count.\n\n+\n+\n\nThe core concept of Delphix is Data as a Service. Our software allows businesses to virtualize databases and data associated with their applications then provision these on demand to developers and others who need virtual copies of them. Our development for this software spans the entire stack. We have quite a few kernel developers, including the original team for the ZFS filesystem who work on developing the open source application, OpenZFS, which underpins our product. Further up the stack we have a large java application that interacts with ZFS to perform virtualization operations, provides user\nfacing webservices, and interfaces with our internal Postgres metadata store which stores the state of our system. Finally above this we have a modern Javascript front end for user interaction. Our full software product ships as a virtual machine on a variety of hypervisors. As a result of these numerous components, end to end integration testing is very important to us. This integration testing is the primary use of Jenkins for us. Before any developer checks in code to either our operating system or application repository, it must undergo several hours of automated integration testing. We also have nightly runs which go for far longer and tests a much more extensive set of functionality. In addition, we use Jenkins for the build process of our software as well as final packaging for release. Because Jenkins serves as a hub for our development processes, having a well designed system is very important to us and saves us significant time.\n\n+\n+\n\nBelow are some of the key points I will be discussing at my talk. I hope you attend to learn more about the areas that I find very interesting.\n\n+\n+\n\nI’m planning to discuss the structure of a Jenkins plugin. I’ll also cover a few of the more advanced areas of plugins such as distributed builds that I see less frequently in plugins. In addition, I’ll briefly cover unit testing, which is something missing in many open source plugins.\n\nI’ll talk about some good patterns to use in plugins as well as some areas where a plugin is not a good idea. I’m planning to pull from my own personal experience developing plugins, the experience of other people at Delphix working with Jenkins, and our experience using other open source plugins to talk about what works and what doesn’t.\n\nI’ll give an overview of the current plugin development at Delphix. I’ll cover some of the lessons that we have learned along the way. We have also started to take a \"dogfooding\" approach to some of our development where we use plugins internally to help our test process and open source them since our customers find features used for testing our product to often be useful in their production environments. This has an added bonus of making it easier to justify our development time spent on making these plugins, since they are also features requested by our customers.\n\nI’ll discuss the trade-offs between using an already developed plugin or group of plugins, writing some scripts, and building your own plugin. Being able to figure out when to do which can lead to major time savings as well as a better user experience.\n\n+\n+\n\nI hope you attend. Even if you have no immediate plans to write your own plugins, hopefully you’ll be able to learn about what makes plugins tick and how to better evaluate plugins when picking them for your own projects. Plugins were what originally got me excited about Jenkins and they allowed me to see its true potential as a build and test system. I hope to share some of that inspiration.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/01-01-1400-vilim_0.jpg[image,width=152] +\n\n+\n+\n\nThis post is by Peter Vilim, Member of Technical Staff at Delphix. If you have your ticket to JUC U.S. East, you can attend his talk\"Providing a First Class User Experience with Jenkins Plugins\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598] +","title":"JUC Speaker Blog Series: Peter Vilim, JUC U.S. East","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-06-03T00:00:00.000Z","id":"99b61a49-52d0-55d5-a2aa-5c9156082824","slug":"/blog/2015/06/03/juc-speaker-blog-series-andrew-phillips-juc-u-s-east/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nAutomated Testing with Jenkins: At JUC East with Andrew Phillips\n\n+\n+\n\nNext stop: Washington, DC! I’m looking forward to heading to JUC East in a couple weeks, which runs June 18-19. The Jenkins User Conference is the annual get-together for Jenkins customers, users, partners, developers and community members. It promises to be an exciting two days, and as an added bonus I get to catch up with Kohsuke Kawaguchi and Gene Kim!\n\n+\n+\n\nI will be giving a talk about a topic that I think is a bit of an elephant in the room in the Continuous Delivery space: the critical importance of optimized Automated Testing. As you start to ship code faster, you’ll need numerous automated tests across many different tools, in many different jobs in your pipeline. But getting a grip on the results of all of your automated tests — and then figuring out whether your software is good enough to go live — becomes harder and harder as you speed up the delivery of your software.\n\n+\n+\n\nI’ll share tips on how naming conventions, partitioning of testware and mirroring the application’s structure in the test code help you best handle automated testing with Jenkins. I’ll also try to provide some insight into how to keep the setup manageable, as well as share practical experiences of managing large portfolios of automated tests. Finally, we’ll showcase some practices that help you manage all your test results and add aggregation, trend analysis and qualification capabilities to your Jenkins setup.\n\n+\n+\n\nJoin us at the event, or check the slides or recording (which we’ll post after the talk) to learn more. Looking forward to seeing you there!\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/01-01-1130-phillips_0.jpg[image,width=152,height=182] +\n\n+\n+\n\nThis post is by Andrew Phillips, at XebiaLabs. If you have your ticket to JUC U.S. East, you can attend his talk\"How to Optimize Automated Testing with Everyone’s Favorite Butler\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Andrew Phillips, JUC U.S. East","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-06-09T00:00:00.000Z","id":"55aeec52-2399-5dbe-aefc-9b8cc918d92b","slug":"/blog/2015/06/09/juc-speaker-blog-series-damien-coraboeuf-juc-europe/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114] +\n\n+\n+\n\nScaling and maintenance of thousands of Jenkins jobs\n\n+\n+\n\nHow to avoid creating of a jungle of jobs when dealing with thousands of them?\n\n+\n+\n\nIn our organisation, we have one framework, which is used to develop products. Those products are themselves used to develop end user projects. Maintenance and support are needed at each level of delivery and we use branches for this. This creates hundreds of combinations.\n\n+\n+\n\nNow, for each product or project version (or branch), we have a delivery pipeline. We start by compiling, testing, packaging, publishing. Then we deploy the application on the different supported platforms and go through different levels of validation, until we’re ready for delivery. Aside from a few details and configuration elements, most of the pipelines are identical from one branch to the other, from one project to the other.\n\n+\n+\n\nSo, one framework, some products, several projects, maintenance branches, complex pipelines… We end up having many many jobs to create, duplicate and maintain. Before even going into this direction, we saw this as a blocking issue - there was no way we could maintain manually thousands of jobs on a day to day basis.\n\n+\n+\n\nThe solution we were looking for should have the following characteristics:\n\n+\n+\n\nSelf service - our goal being to delegate the job and branch administration in Jenkins to the projects, in order to reduce the support time\n\nSecurity - we didn’t want to open Jenkins to the projects at configuration level - not acceptable in our context\n\nSimplicity - the solution should be simple enough to be manageable by people not knowledgeable about the core technologies of Jenkins\n\nExtensibility - the solution must be flexible enough to allow extensions when needed\n\n+\n+\n\nWhen we thought about using the Job DSL plug-in, delegating the creation of the pipeline to the project teams was OK from a self service point of view, but was not secure and definitely not simple for people not knowing Jenkins.\n\n+\n+\n\nIn the end, we opted for a solution where:\n\n+\n+\n\nA project team would edit a simple property file listing the characteristics of the current branch, like which type of platform is supported, which version of the pipeline library to use, etc.\n\nUpon commit of this shopping list, the complete branch pipeline is regenerated using the given version of the pipeline library\n\nThe pipeline library code reads the “shopping list” property file and runs a Job DSL script to generate the branch pipeline according to those parameters\n\n+\n+\n\nBy default, the pipeline library generates a classic pipeline, suitable for most needs. It is also possible to define and use extensions, like having additional jobs in the pipelines.\n\n+\n+\n\nIn case of new features or defects, we develop or branch a new version of the pipeline library and projects or branches can use it by changing the version of their shopping list file.\n\n+\n+\n\nA project gets injected into the system by having only a project seed being generated. From it, the authorised members can generate the branch seed and any branch pipeline at any time. Those seed jobs and the pipelines themselves can also be driven directly from the SCM using our plugin.\n\n+\n+\n\nThe project teams are now autonomous and can pilot their pipelines without requesting any support. They act in a secure and isolated way, and cannot compromise the shared environment. The “shopping list” file is simple and well documented. The system is not rigid and allows for extensions.\n\n+\n+\n\nThis platform has been developed initially for a very specific framework and a set of projects which depend on it, but has been extended since to be able to support other stacks. It is structured in two different parts:\n\n+\n+\n\nThe seed platform itself - generation of branch structures in Jenkins and trigger end points for being piloted from the SCM\n\nThe pipeline libraries, referenced from the shopping list files\n\n+\n+\n\nWe still allow some small tools and applications to define directly their pipeline by providing a Job DSL script.\n\n+\n+\n\nUsing the same principle, we can also pilot other tools in the ecosystem - like Artifactory or Ontrack.\n\n+\n+\n\nI’ll talk about this seed platform on June 24th, in the Jenkins User Conference in London.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/dcoraboeuf_0.preview.jpg[image,width=150] +\n\n+\n+\n\nThis post is by Damien Coraboeuf, Continuous Delivery Expert at Clear2Pay. If you have your ticket to JUC Europe, you can attend his talk\"Scaling of Jenkins Pipeline Creation and Maintenance\" on Day 2.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598] +","title":"JUC Speaker Blog Series: Damien Coraboeuf, JUC Europe","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-06-15T00:00:00.000Z","id":"d57bf05d-abc5-5b2d-b6ed-9d66d0ca2c9f","slug":"/blog/2015/06/15/juc-speaker-blog-series-stephan-hochdrfer-juc-europe/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nI am very much looking forward to the Jenkins User Conference in London where I will present our insights on how to use Jenkins in a PHP related environment. Moving to Jenkins about 5 years ago bitExpert gained a lot of experience in running and managing a distributed Jenkins infrastructure. bitExpert builds custom applications for our clients which means that we have to deal with different project infrastructures, e.g. different PHP versions. We heavily rely on the build nodes concept of Jenkins which I will briefly outline in the session. Besides that I will give some in-depth insights on how we use Jenkins on a daily basis for the \"traditional\" CI related tasks (e.g. linting code, checking code style, running tests) as well as how Jenkins is used to power our integration tests. Last but not least I will cover how Jenkins acts as a kind of backbone for our Satis server which allows us to host the metadata of our company’s private Composer packages. Throughout the talk I will point out which Jenkins plugins we use in the different contexts to give you a good starting point if you are new in the Jenkins ecosystem.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/bitExpert-logo_0.png[image,width=220,height=76] +\n\n+\n+\n\nThis post is by Stephan Hochdoerfer, Head of Technology at bitExpert AG. If you have your ticket to JUC Europe, you can attend his talk\"Jenkins for PHP Projects\" on Day 2.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Stephan Hochdörfer, JUC Europe","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-06-08T00:00:00.000Z","id":"f005c36f-6571-5a47-8ed8-b099e9315e78","slug":"/blog/2015/06/08/juc-speaker-blog-series-will-soula-juc-u-s-east/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nChat Ops and Jenkins\n\n+\n+\n\nI am very excited to be attending the Jenkins User Conference on the East Coast this year. This will be my third presentation at a JUC and fourth time to attend, but my first on the East Coast. I have learned about a lot of cool stuff in the past, which is why I started presenting, to tell people about the cool stuff we are doing at Drilling Info. One of the cooler things we have implemented in the last year is Chat Ops and our bot Sparky. It started as something neat to play with (\"Oooo lots of kittens\") but quickly turned into something more serious.\n\n+\n+\n\nEver get asked the same questions over and over? What jobs to run to deploy your code? What is the status of the build? These question and more can all be automated so you do not have to keep answering them. Furthermore, when you do get asked you can show them, and everyone else, how to get the information by issuing the proper commands in a chat room for everyone to see. With chat rooms functioning as the 21st century water coolers, putting the information in the middle of the conversation is a powerful teaching technique. You are not sending people to some out dated documentation on how to get their code deployed, nor are you showing them the steps today only to be forgotten tomorrow. Instead you can deploy your code and they see the exact steps needed to get their code deployed.\n\n+\n+\n\nEven more impressive is the way ChatOps can bring your company together. Recently our CTO got a hipchat account so he could interact with Sparky. This gave me the idea that if we extend Sparky to deliver information useful to the other teams (Sales, Marketing, Finance, etc) then we would be able to get these wildly disparate teams in the same chat room together and hopefully they will talk and learn from each other. Where DevOps is the bringing together of Dev and Ops, ChatOps can be the bridge across the entire organization. Come see my presentation Day 1: Track 1 at 4:00 PM to learn how ChatOps can enrich your team, how Drilling Info is using it, and what our future plans entail for ChatOps.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/01-01-1600-soula_0.jpg[image,width=152,height=182] +\n\n+\n+\n\nThis post is by Will Soula, Senior Configuration Management/Build Engineer at Drilling Info. If you have your ticket to JUC U.S. East, you can attend his talk\"Chat Ops and Jenkins\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC near you.\n\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Will Soula, JUC U.S. East","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-06-16T00:00:00.000Z","id":"bb00962d-9ecc-5482-aaa6-1cfbbc15c783","slug":"/blog/2015/06/16/juc-speaker-blog-series-martin-hobson-juc-u-s-east/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nI’ve been using Jenkins for some time now as the build server for the various projects that are assigned to our four-person software development team, but recently I had exposure to how things were done in a much larger team, and I came away with a better understanding of the kinds of demands that are placed on a build pipeline in these environments. It was quite an education – while the CI pipelines that I administer in our small team might require a handful of virtual machines in our corporate cloud, the pipeline in this team supported over one hundred developers and required several hundred VM instances at any given time.\n\n+\n+\n\nWhen operating at this scale, efficiency does become important, as the Amazon cloud charges add up and become significant at this level. Using some relatively simple techniques, I was able to gain insight into what actually happened in the more complex build jobs and learned just how these VM instances were utilized. These build jobs configured over a dozen virtual machines each, and understanding the startup and execution flows was critical to making changes and improving efficiencies. I will be discussing how to instrument and analyze these complex builds in my Lightning Talk:\"Visualizing VM Provisioning with Jenkins and Google Charts” and hope to see you all there!\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/01-02-1615-hobson_0.jpg[image,width=152,height=182] +\n\n+\n+\n\nThis post is by Martin Hobson, Senior Software Developer at Agilex Technologies. If you have your ticket to JUC U.S. East, you can attend his lightning talk\"Visualizing VM Provisioning with Jenkins and Google Charts\" on Day 1.\n\n+\n+\n\nJUC IS HERE! JUC U.S. East will begin with registration at 7AM, Thursday June 18. The two day conference is sure to be a blast! If you have not registered, you can still get a ticket! Check out the agenda for JUC U.S. East here and find the link to register.\n\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Martin Hobson, JUC U.S. East","tags":["general"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-06-22T00:00:00.000Z","id":"0d6ef858-0d8a-57e0-9351-e15f94b7e563","slug":"/blog/2015/06/22/new-wiki-url-requirement-for-plugins/","strippedHtml":"Let’s say you’re browsing the 'Available' tab in the Jenkins plugin manager for interesting-looking plugins. How do you learn more about them, preferably without installing them on your production instance? You click the plugin’s name, which usually links to the plugin’s wiki page, of course!\n\nUnfortunately, it’s possible for plugins to be published without a wiki page, or any other documentation aside from what’s provided in the plugin itself. This is really unfortunate, as users rely on wiki pages and similar documentation to learn more about a plugin before installing or upgrading it, like its features, limitations, or recent changes. Additionally, plugin wiki pages have a special section at the top that provides an automatically generated technical overview of the plugin, such as dependencies to other plugins, the minimum compatible Jenkins version, a list of developers, and links to the source code repository and issue tracker component. Everyone learning about or using a plugin benefits from a plugin wiki page and luckily, almost all plugins have one!\n\nTo ensure that every plugin has at least a basic wiki page with some documentation, we decided to only publish plugins in the Jenkins update center that have and link to a wiki page. To keep the impact to a minimum, we’re implementing this plan in several stages.\n\nThe first stage went live on June 1: All existing plugins that don’t have a (valid) wiki link got a wiki link assigned by the update center (a so-called 'override'), either to an existing wiki page if there was one, or a generic\"This plugin has no documentation\" wiki page otherwise. This ensures that no currently existing plugins get dropped from the update center at this point. Of course, new plugins that don’t provide a wiki URL and don’t have an override URL will not show up at all.\n\nThe second stage will be enabled later this year: We’re planning to remove all the overrides mentioned above. At this point, plugins may get removed from the update center if they still don’t specify a wiki URL. Of course this isn’t our goal, and we’ll try to work with plugin authors to prevent this from happening.\n\nSo what can you do? Check the current overrides list to see whether the plugins you care about are affected, and if so, see the landing page in the wiki to learn what you can do. If you have any questions about this process not covered by the wiki, ask us on the Jenkins developers mailing list.","title":"New Wiki URL Requirement for Plugins","tags":["general","meta","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-07-09T00:00:00.000Z","id":"10658ee5-476b-5fc3-aa1e-ac4d61fb01b5","slug":"/blog/2015/07/09/jenkins-user-event-scandinavia-2015/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/jues_0.png[image,width=270,height=181] +\n\n+\n+\n\nFor the 4th consecutive year the Jenkins CI community is gathering in Scandinavia. JUES inspires both current as well as soon-to-be Jenkins users to network and harness inspiration from peers and experts on best practice and implementation of Continuous Integration, Continuous Delivery, and agile development with Jenkins.\n\n+\n+\n\nAs always we’ll precede the JUES conference with a Code Camp on the day before. The Code Camp is a full day community event where developers learn from fellow developers on coding and plugin enhancement, all delivered back to the community.\n\n+\n+\n\nWe welcome you and other leading Jenkins developers, QA, DevOps, and operations personnel to this years Scandinavian Jenkins CI festival hoping to continuously support the growth of the Jenkins Open Source community.\n\n+\n+\n\nREGISTER FOR JUES HERE","title":"Jenkins User Event Scandinavia 2015","tags":["general"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-07-14T00:00:00.000Z","id":"05213c44-844d-51ea-b951-aeb37606e84b","slug":"/blog/2015/07/14/juseppe-a-custom-update-site-for-jenkins/","strippedHtml":"This is a guest post by Kirill Merkushev at Yandex. I met him at JUC Europe where he showed me the project he was working on: Juseppe. It looked really interesting, so I asked him to write this guest post.\n\nWhen you write your first custom Jenkins plugin for internal use, it’s easy enough to deploy it on one or maybe two Jenkins instances. You can save it on your local drive and upload the HPI file via the Jenkins Plugin Manager as needed. It’s easy to do this for a few releases. But as your experience grows, the number of plugins and their releases grows as well. The plugins directory on your local drive soon looks like a garbage dump, and it’s difficult to find that most recent version of any plugin. And if you have a lot of Jenkins instances coordinating updates of your plugins may cause a lot of pain.\n\nA similar situation is when you contribute a much-needed patch to an existing plugin, but you don’t have the time to wait until your pull request is be merged and a new release is cut. Or you may need to patch a plugin in ways not suitable for distribution, and decide to effectively fork the plugin for use on your Jenkins instances. How are you going to do this?\n\nA solution avoiding the problems from these situations is to set up your own update site to serve your private plugin builds. Juseppe allows you to do this quickly and easily.\n\nWhat is Juseppe?\n\nJuseppe is an acronym for Jenkins Update Site Embedded for Plugin Publishing Easily. Juseppe can help you set up a Jenkins update site in just a few minutes.\n\nFeatures\n\nGenerates signed update-center.json and release-history.json\n\nWorks with HPI files directly (stored in one folder), no need to set up a Maven repository\n\nWatches for changes in the plugin folder and regenerates JSON files when changes are detected\n\nServes generated files and plugin files with built-in Jetty web server\n\nCan be run in a \"generate-only\" mode when you want to use a different web server for these files.\n\nHow can I get Juseppe?\n\nIt ships as a Docker container, or can be built from source. Visit the GitHub project page to learn more. The complete user guide is available in the GitHub project wiki.","title":"Juseppe, a custom update site for Jenkins","tags":["general","guest post"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-07-15T00:00:00.000Z","id":"a188685e-dcce-5f7f-85b9-9acf0cbfe59b","slug":"/blog/2015/07/15/advancing-the-jenkins-gui-configuring-items-in-jenkins/","strippedHtml":"https://youtu.be/1Qn4jEwAeGc\n\nAbove is the screencast associated with this blog post\n\nIf you have ever used Jenkins you are familiar with what I am about to described, wading your way through job configuration page, looking for the settings that are important, and, depending on your plugin use, wondering where all these other setting came from and what they do.\n\n+\nDepending on how long you have used Jenkins, your negative opinion of this experience may vary. If you are a long-time user, you might even view the configuration page with that same reassuring nostalgia seeing a Facebook post from your ugly room mate induces. ‘Yup,he is still ugly and backwards, but we had some good times, back then.’ If you are a newer Jenkins user, it may well send you off to search the web for a viable alternative tool. +\n\n+\nThe good news is that CloudBees, in cooperation with the greater Jenkins community, is looking to make some long overdue progress sorting through this user interaction in a way that is both approachable to new users and amenable to existing users who have grown comfortable with a great tool and a ‘stalwart friend’ in a world of otherwise clunky world of IT tools. ( that really is the swiss army knife of build automation.) +\n\n+\n\nIf you happen to have had the opportunity to have attended any of the recent Jenkins User Conferences in Washington, DC, or London, you may have seen Tom and my presentation, which served as our initial introduction of this effort to the Jenkins Community. In this article and the associated video, I will be focusing specifically on the Create and Configuration screens in Jenkins, discussing some of the larger proposed changes, providing some context for the changes and examining their possible repercussions on existing plugins and future plugin development.\n\n+\n+\n\nHistory of Jenkins\n\n+\n\n+\nFor newer Jenkins users, I have found the following visual a helpful guide to understanding the history of Jenkins and how its graphical user interfaces has evolved:\n\n+\n +\nimage:/sites/default/files/images/history-jenkins_590.jpg[Jenkins timeline: a long history] +\n\n+\nThe first thing to notice here, is that Jenkins has been around for a long time and in a lot of ways is really fundamental to the art of creating software. Back in 2005, the then Hudson project was using pretty much the same cave chalk as everyone else. 6 years later, the code and community underwent its most substantial transformation to date, as Jenkins emerged as the dominant fork of the Hudson project. If you look closely, you will see the GUI reflected that transformation by….. changing the picture of the butler. In recent times, the interface has taken a few additional steps forward, most notably by moving to a responsive CSS driven layout from its table based origin, but the pace of these changes has been very much akin to the pace of evolution. Slow. +\n\n+\nIn our next phase of graphic interface development, however, Tom and I are looking to be a little more directed in our efforts and push the GUI toward a blend of strategic and tactical advancements that will help Jenkins take advantage of some of the advances in web design and browser technologies that have happened over the last 10 years. Our first major push will be in the job creation and configuration tasks. +\n\n+\n\nCreating and Configuring\n\n+\n\n[image]\n\n+\n\n+\n\n+\n\nIn addition to a bit of a refresh of the look of these forms, this new effort focuses on the importance of dividing information and presentation into clear categories that ideally are meaningful to both new and veteran users of Jenkins alike.\n\n+\n+\n\nIn some cases, Jenkins has these categories already in the GUI, but misses the mark in clarification and emphasis. In other cases, additional categorizing concepts will need to be added. Compare the above screens to the existing screens.\n\n+\n\n[image]\n\n+\n\n[image]\n\n+\n\nThe first thing you are likely to notice when comparing these two sets of screens is that in the existing screens, there is very little in the way of visual markers segmenting the form input choices on either the item type selection screens (fig 4 vs 2) or the configuration pages (fig 5 vs 3). Adding each new plugin progressively aggravates the situation, and consequently, as your Jenkins installation grows in sophistication and robustness, the average users ability to find the fundamental configuration settings in the sea of ad-hoc options diminishes. While adding functionality typically adds some amount of additional complexity to a UI, by giving each configuration option a visually distinguishable space in the form, the challenge can be greatly diminished and the pattern of creating an ever growing scrolling of toilet paper list of form elements can be avoided.\n\n+\n\nFor figures 2 and 4, you might also notice that I have chosen Jenkins instances that already have several plugins installed as the basis for my example screens. You might rightly argue that for a basic install, there are not a lot of item types to create, so categorizing them adds a needless layer of complexity. Fair enough. It is my belief, though, that our software can be smart enough to count the item types available for creation and count the number within each category and handle the categorization as necessary. Counting and sorting is something that computers do incredibly well and is not the sort of thing busy people need to be overly burdened with.\n\n+\n\nIn addition to the code being intelligent about when to present grouping categories to the user, The screen interaction can be similarly intelligent in how it enables the user to selectively show and hide the categories of interest. The following screenshot shows the configuration page focused in on CVS a particular option configuration in the source code management section of the configuration page. It, in turn, has its own sub settings for additional modules and locations (see fig 6).\n\n+\n\n[image]\n\n+\n\n…​and wait for it…​ …​for comparison, here is today’s CVS settings page…​\n\n+\n\n[image]\n\n+\n\nDespite some serious indentation, the existing page offers significantly less clarity about which settings pertain specifically to CVS instead of other aspects of a Jenkins job.\n\n+\n\n[image]\n\n+\n\nIdentifying which settings go with which segment becomes all the more confusing when sub-sections can be re-ordered. To show you what I mean and fit the screen on a single printed page, I am needing to muck with the aspect ratio of today’s screen.\n\n+\n\nThe image on the left (fig 7) shows a 2 step build process, each with sub parameters.\n\n+\n\nThere are some fascinating looking red delete buttons in here, I hope I know exactly what part of the build step I am about to blow away…​. Did I mention these segments can be re-ordered? Care to guess which form inputs will move with which steps?\n\n+\n\n[image]\n\n+\n\nBy contrast, the above screen shows the same 2 build steps with the same parameters. We still have our friend, Mr. Red Delete button, but now it is a good bit clearer who will get blown away.\nAlso, it is considerably clearer which block will be reordered, should I choose to do so.\n\n+\n\nWhat about plugins?\n\n+\n\nIf you are a long-time Jenkins user, you may have a guess as to why some of these changes have been slow in coming, and if you are a plugin developer, you definitely know. These input controls have a lot of extension points in them that allow plugins to influence the content of this configuration screen. As a result, how plugins will respond to even the most minor layout changes is somewhat of a mystery. Further, the GUI control elements that make up the form are available to plugin authors to embed as they see fit in their own GUI elements. As a consequence, we have some serious compatibility issues ahead. These challenges are not at all trivial.\n\n+\n\nFortunately, however, I believe with some careful manipulation and diligent testing we can overcome these challenges. The first set of changes are likely to revolve around a file called “hudson-behavior.js”. This file does most of the Jenkins client-side UI magic. If there is data to be bound to a control, this is the file that is likely to handle it. The difficulty with this file stems from two factors, its age (it is written following Yahoo UI framework patterns which have since been abandoned by Yahoo and the rest of the industry), and a presumption that the page layout will be governed by a single giant HTML table (likely due to the table renaissance happening around the same time, thanks to the emergence of GWT). Regardless of this bit of history trivia, these two issues combine to make changes to the HTML DOM structure of any Jenkins page problematic. Methods such as “findFollowingTR” assume a very rigid parent-child element positioning based on page layout rather than on the logical relationship between the data elements. The good news here is that despite some of their unfortunate names, can be refactored to both find the relevant element based on today’s table structure as well as a future logical nesting of related elements. With that change in place, Jenkins will continue to function as it always has and a future configuration DOM structure can share the same infrastructure.\n\n+\n\n+\nThe second step here will be finding efficient ways to integrate more modern Javascript libraries, such as JQuery and Bootstrap into the Jenkins GUI. We will want these libraries to be easier and cleaner for plugin authors to access than PrototypeJS and Yahoo UI are today. Likely this will involve using a Browserify/Requirejs like pattern to control script inclusion in page to avoid naming conflicts, excessively file attachment and global space pollution.\n\n+\n\nThe final step would then be to begin amending, replacing and augmenting the Jelly based form control set, and thus, transforming the look and behavior of the Jenkins UI. As always, Jenkins is an open community, and we at CloudBees view that as a cherished cornerstone of our own corporate culture. Thus, at every phase of this undertaking we are eager to solicit feedback from and encourage participation by you the members of the community. Feel free to comment directly on this article. Additionally, I am maintaining and active thread on the Jenkins Developer group ( https://groups.google.com/forum/#!topic/jenkinsci-dev/6BdWZt35dTQ). I am looking forward to hearing from you.","title":"Advancing the Jenkins GUI: Configuring Items in Jenkins","tags":["video","screencast","juc","core","releases","feedback","development","just for fun","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"gusreiber","html":"","id":"gusreiber","irc":null,"linkedin":null,"name":"Gus Reiber","slug":"/blog/authors/gusreiber/","twitter":null}]}},{"node":{"date":"2015-07-23T00:00:00.000Z","id":"25450ef4-5dcb-526d-be18-46e6ffec9304","slug":"/blog/2015/07/23/office-hours-are-back/","strippedHtml":"After several months of inactivity, office hours, the bi-weekly meeting of Jenkins users and developers to learn more about Jenkins, are back.\n\nI’ll host the first session next Wednesday at 11 am PDT. This session will be about Stapler, focusing on what Jenkins plugin authors need to know about it, e.g. request routing, form submission handling, or how Jelly/Groovy views work.\n\nWhile this is going to be a developer-focused session, future session topics will also have Jenkins users as target audience.\n\nFor general information on office hours, and how to join, see the wiki.","title":"Office hours are back","tags":["general","meta","news"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-07-24T00:00:00.000Z","id":"ac93e6b7-9b76-5920-aaf0-2f9502b20694","slug":"/blog/2015/07/24/integrating-kubernetes-and-jenkins/","strippedHtml":"Kubernetes is an open-source project by Google that provides a platform for managing Docker containers as a cluster. In their own words:\n\nKubernetes is an open source orchestration system for Docker containers. It handles scheduling onto nodes in a compute cluster and actively manages workloads to ensure that their state matches the users declared intentions. Using the concepts of \"labels\" and \"pods\", it groups the containers which make up an application into logical units for easy management and discovery.\n\nKubernetes-related services by Google are the Google Container Engine, a Kubernetes-powered platform for hosting and managing Docker containers, and the Google Container Registry, a private Docker image registry.\n\nSeveral new Jenkins plugins allow you to make use of Kubernetes and these services:\n\nThe Google Cloud Registry Auth Plugin allows users to authenticate with the Google Cloud Registry so they can push/pull images. This allows you to use the Google Cloud Registry with existing Docker-related plugins, like Docker build step plugin or CloudBees Docker Custom Build Environment Plugin.\n\nThe Kubernetes Plugin implements a cloud provider for Jenkins, and can create agents based on Docker images on-demand on your Kubernetes cluster or the Google Cloud Platform.\n\nWatch Kohsuke demoing Jenkins/Kubernetes integration at OSCON earlier this week.\n\nFor a more in-depth look at how you can use Kubernetes with Jenkins, check out these posts on the CloudBees blog by Tracy Kennedy:\n\nOrchestrating deployments with Jenkins Workflow and Kubernetes\n\nOn-demand Jenkins agents with Kubernetes and the Google Container Engine\n\nClustering Jenkins with Kubernetes in the Google Container Engine","title":"Integrating Kubernetes and Jenkins","tags":["general","plugins","video"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-07-24T00:00:00.000Z","id":"d17bd5cd-f3ec-583a-89df-90a6e0487eca","slug":"/blog/2015/07/24/juc-u-s-east-slides-and-video-are-now-available-online/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/dc_0.jpg[image,width=200,height=149] +\n\n+\n+\n\nSlides and video from JUC U.S. East are now available online!\n\n+\n+\n\nIf you attended the conference, THANK YOU, and I’m sure you had fun, learned a lot and met many people from the Jenkins community. Now you can revisit your favorite talks or \"attend\" the ones that you missed.\n\n+\n+\n\nIf you were unable to attend JUC U.S. East, you now have the slides and video so you can \"attend\" anyways! If you like what you see and would like to attend a JUC this year, there is ONE date left in the 2015 Jenkins User Conference World Tour: JUC U.S. West is September 2-3 in Santa Clara, CA. Register here.","title":"JUC U.S. East slides and video are now available online","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-07-25T00:00:00.000Z","id":"e8b53705-1b33-52b7-bae2-a13931772807","slug":"/blog/2015/07/25/bay-area-jenkins-area-meet-up-is-looking-for-you/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Fruit_preserves[image:https://upload.wikimedia.org/wikipedia/commons/7/7a/Welovejam_blenheim_apricot_jam.jpg[image]] +\n\n+\n+\n\n+\nUday made a blog post yesterday that he is looking at organizing a regular Jenkins meet-up in the Silicon Valley Bay Area dubbed \"Bay Area Jenkins Area Meetup (JAM).\"\n\n+\n+\n\n+\nAs a first step, he wants to have a kick-off meeting, to get more insights and opinions about what the topics could be and what people want to hear. I'm really looking forward to it as a means to build a local network, so I signed myself up as a speaker of the first meet-up.\n\n+\n+\n\n+\nIf you are in the Peninsula, South Bay, East Bay, etc., please send some encouragements to him by posting a comment, or better yet, come to the kick-off meeting.","title":"Bay Area Jenkins Area Meet-up is looking for you ","tags":["general","cia","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-07-28T00:00:00.000Z","id":"9ec1d79b-4f06-5a53-916d-bcc4f9f5e267","slug":"/blog/2015/07/28/reinforcements-for-the-subversion-plugin/","strippedHtml":"This is a guest post by Manuel Recena Soto (aka recena).\n\nUsers of the plug-in know that it has undergone very important changes in the last two years.\n\nUnfortunately, some of these changes resulted in regressions for some users that weren’t properly addressed in subsequent releases. Many users were therefore forced to keep using an older release of the plugin to keep their instances running.\n\nTo fix this difficult situation I’ve decided to dedicate my spare time to improving the plug-in and attempting to restore the stability that an essential plug-in like this requires.\n\nIn order to do so, me, my colleague Steven Christou and other members of the community have drawn up a plan.\n\nIn the coming weeks we will be focusing our efforts on:\n\nGoing through the Jira tickets\n\nChecking whether they are duplicated\n\nChecking whether they are still relevant\n\nAsking for more information from the people who reported them\n\nEstablishing their priority\n\nReviewing pull requests\n\nInvestigating bug reports and try to reproduce them\n\nFixing serious bugs\n\nRefactoring the plugin to improve its maintainability.\n\nWe’re planning to publish a new 2.5.x bugfix release once a fortnight. We are not considering the inclusion of new features or improvements. The priority now must be to obtain a stable and reliable plug-in, one that will allow us to take things up again in the future with greater security and peace of mind.\n\nInterested in helping? Just send us a message!","title":"Reinforcements for the Subversion Plugin","tags":["development","guest post","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-07-29T00:00:00.000Z","id":"d56b39ab-0f02-5e72-8288-8a232c18f15a","slug":"/blog/2015/07/29/juc-europe-slides-and-video-are-now-available-online/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/london_0.jpg[image,width=250,height=165] +\n\n+\n+\n\nSlides and video from JUC Europe are now available online!\n\n+\n+\n\nIf you made it to London to attend this year’s JUC Europe, I hope you enjoyed the conference , met plenty of community members and learned more about Jenkins. Now that the slides and video are up, you can revisit your favorite talks or \"attend\" the ones that you missed…​all at your leisure.\n\n+\n+\n\nIf you were unable to attend JUC Europe, well, now you can! The slides and video are here so you can \"attend\" any time you want. If JUC LIVE seems more appealing to you, there is one date left in the 2015 Jenkins User Conference World Tour: JUC U.S. West is September 2-3 in Santa Clara, CA. Register here.","title":"JUC Europe slides and video are now available online","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-07-30T00:00:00.000Z","id":"2c69d0de-4e7b-5ab8-b45a-d03e0d72fbf0","slug":"/blog/2015/07/30/juc-u-s-west-news-agenda-is-up/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/butler-kk-gk_0.jpg[image,width=250,height=194] +\n\n+\n+\n\nIt seems a bit unreal, but the last JUC agenda for 2015 is now online. Jenkins User Conference U.S. West is the last JUC of the year running from September 2-3 in Santa Clara, CA. So, if you haven’t attended JUC yet this year, this is your chance!\n\n+\n+\n\nRegister with a friend to take advantage of the community’s 2-for-1 deal and get two tickets for the price of one.\n\n+\n+\n\nWhich talk are you looking forward to most? Check out the agenda and tweet your choice to @jenkinsconf!","title":"JUC U.S. West News: Agenda is up","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-08-03T00:00:00.000Z","id":"bb2d2ef6-e92c-5a0d-8cdb-5c975c9a4812","slug":"/blog/2015/08/03/just-a-month-left-until-juc-u-s-west/","strippedHtml":"There’s only a month left until JUC U.S. West on September 2-3! If you’re still on the fence, check out the recaps of JUC Europe talks recently posted to the CloudBees blog. These should give you an idea about the kinds of talks you can expect at a Jenkins User Conference:\n\nHow to Optimize Automated Testing with Everyone’s Favorite Butler\n\nConfiguration as Code - The Job DSL Plugin\n\nFrom DevOps to NoOps\n\nIf you’re interested in the upcoming Jenkins UI overhaul, make sure to attend Gus and Tom’s talk about it. Don’t want to wait until JUC to learn more about this? Follow the discussion on the developers mailing list and contribute through early testing.\n\nThis JUC will again have an Ask The Experts booth with several Jenkins experts and developers available there throughout the event. If you want to discuss Workflow with Jesse, or pitch your UI ideas to Gus, this is where you’ll be able to do that.","title":"Just a month left until JUC U.S. West","tags":["general","juc"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-08-04T00:00:00.000Z","id":"22d4139d-ee6d-5c7b-973f-521b127b04f7","slug":"/blog/2015/08/04/bay-area-jenkins-area-meet-up-kick-off-gathering-today/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Fruit_preserves[image:https://upload.wikimedia.org/wikipedia/commons/7/7a/Welovejam_blenheim_apricot_jam.jpg[image]] +\n\n+\n+\n\n+\nA week ago https://jenkins-ci.org/content/bay-area-jenkins-area-meet-looking-you[we reported that Uday is looking at organizing a regular Jenkins meet-up in Silicon Valley]. This has made a progress since then, and this evening we'll get together to figure out logistics for the first meet-up:\n\n+\n+\n\nTime\n\nAugust 5th, Wednesday 6:30 PM - 7:30 PM\n\nLocation\n\nStarbucks, 750 Castro St, Mountain View, CA 94041\n\n+\n+\n\n+\nThe agenda is:\n\n+\n+\n\nDetermine the date for the first meet up\n\nSpeakers for the second slot. Kohsuke will be presenting first.\n\nFuture topics of interest for JAM\n\nSponsors / Volunteers\n\nIdeas to make the JAM relevant and interesting for the extended community to participate and share their implementations\n\nQ & A\n\n+\n+\n\n+\nUday and I will be there, and Uday told me that he heard from another guy who will join us. If you are around and is willing to come over, we'd love to see you. If you are interested, I'd also encourage you to join http://lists.jenkins-ci.org/mailman/listinfo/jenkins-events[the Jenkins events list], where a discussion is happening.","title":"Bay Area Jenkins Area Meet-up kick-off gathering today","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-08-04T00:00:00.000Z","id":"c20831a3-4e4a-5f12-a4ff-fe9a23bb8ec5","slug":"/blog/2015/08/04/wiki-and-issue-tracker-outage-over-the-weekend/","strippedHtml":"As you may have noticed, our wiki and issue tracker were unavailable from Thursday to Sunday last week. What happened?\n\nWe host parts of our infrastructure at the Open Source Lab at Oregon State (OSUOSL), including the databases for these two services. So far, there’s no post mortem by OSUOSL (they expect to post one later this week), so we need to piece together what we know.\n\nThe databases for the wiki and issue tracker became inaccessible around midnight/12 AM Thu/Fri night (all times UTC). Due to the large number and size of databases on that server, pulling from backups, restoring from backup and replaying the binlogs took them quite a while. During that time, we put up a maintenance screen on the wiki (and messed up the one for Jira, so there were connection timeouts instead).\n\nThe databases were back around 3 AM on Sunday. We disabled the maintenance screens around 6 PM later that day.\n\nWhile this was a rather lengthy outage, it could have been much worse. We lost none of the data, after all. We thank the OSUOSL team for their efforts getting everything back up over the weekend!","title":"Wiki and issue tracker outage over the weekend","tags":["infrastructure","meta"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-08-10T00:00:00.000Z","id":"69de0fa0-b2c1-5475-b88a-d08748f38442","slug":"/blog/2015/08/10/upcoming-office-hour-on-workflow/","strippedHtml":"Jesse Glick will host the next office hour this Wednesday, 11 AM PDT on Workflow.\n\nWorkflow has been Jesse’s project for the last year or so. If you don’t know what Workflow is, check out these talks about it from past JUCes:\n\nJune 2014\n\nOctober 2014\n\nJune 2015\n\nThis will be a developer-focused session on integrating with Workflow. He’ll discuss things like how to make sure your plugin can be used as part of workflows, and best practices for extending the workflow DSL. There’s already been a session on Workflow in January, but Jesse hasn’t been idle, and there’s new stuff to share.\n\nParticipate in the Hangout on Air or watch live on YouTube.","title":"Upcoming office hour on Workflow","tags":["development","tutorial","pipeline","workflow"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-08-05T00:00:00.000Z","id":"f6869c7a-4481-5dc7-a4ac-00ebf578e177","slug":"/blog/2015/08/05/juc-speaker-blog-series-carlo-cadet-juc-u-s-west/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nMobile is Joining the Party At This Year’s Jenkins User Conference\n\n+\n+\n\nConsider this as a shout out to mobile app developers: You are invited! For the first time, there’s a mobile track at this year’s Jenkins User Conference to discuss the best ways to extend CI/CD to mobile application testing.\n\n+\n+\n\nAs agile practices take hold, enterprises are expecting more collaboration between dev and test teams. Dev teams are doing more testing while QA teams are becoming more skilled at coding. This is happening now, and as a result open-source test automation frameworks like Selenium and Appium are flourishing. At the same time, CI/CD adoption is growing. This is happening more so for web development rather than mobile. It’s no secret that incorporating mobile test automation and CI comes with challenges. Mobile UI testing on real devices is still a manual process for many organizations. Manual testing is perhaps a path of least resistance, but it also commits teams to the longest delivery path. Some argue they lack the environment, resources or skilled people to create test automation. While the argument rages, its clear other teams are solving the challenge. Teams are prioritizing the requirement to build a test framework and aligning disparate tools into an effective CI workflow. Recent webinars with Paychex and RaboBank demonstrate CI/CD best practices can effectively extend to mobile app programs using real devices. Particularly when the lab is moved to the cloud and teams can focus on building robust test automation suites.\n\n+\n+\n\nBut overall, the transition to an agile SDLC for mobile apps is happening too slowly. Yet the mobile market demands constant updates. An essential part of an agile SDLC is utilizing automated testing and continuous integration. To test builds using a CI server requires automation which is key to agile development in a fast-paced mobile world because it allows testing to be done by developers early in the lifecycle.\n\n+\n+\n\nExtending CI to mobile programs is easy with Perfecto Mobile’s support for open source frameworks such as Selenium Remote Web Driver, Appium and Calabash where existing CI plugins are available. Support for commercial tools like HP UFT is also available. With the Perfecto Mobile Jenkins Plugin, you can perform automated functional testing every build. The result is obvious, discover defects earlier, deliver faster feedback and increase release frequency and, ultimately, have better performing apps.\n\n+\n+\n\nLearn more about extending your CI practice to mobile projects in our upcoming JUC mobile session: “Fast Feedback: Jenkins and Functional Mobile App Testing Without Pulling Your Hair Out.” The session will share suggested coding practices along with planning guidance on maximizing the quality coverage during daily, nightly and weekly builds.\n\n+\n+\n\nThe Jenkins User Conference US West takes place in Santa Clara, CA on Sep 2-3, 2015.\n\n+\n+\n\nStop by the Perfecto Mobile booth and share your story.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/cadet_0.jpg[image,width=152,height=182] +\n\n+\n+\n\nThis post is by Carlo Cadet, Director of Product Marketing at Perfecto Mobile. If you have your ticket to JUC U.S. West, you can attend his talk\"Fast Feedback: Jenkins + Functional & Non Functional Mobile App Testing, Without pulling your Hair out!\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC U.S. West, the last JUC of the year!\n\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Carlo Cadet, JUC U.S. West","tags":["general"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-08-13T00:00:00.000Z","id":"c7b1b0e4-16c6-597e-845e-0b1d30006db2","slug":"/blog/2015/08/13/update-wiki-and-issue-tracker-outage/","strippedHtml":"I recently wrote about the two day outage of our wiki and issue tracker :\n\nWhile this was a rather lengthy outage, it could have been much worse. We lost none of the data, after all.\n\nOSUOSL have since published their post mortem. I was really wrong about not losing any data:\n\nA further complication was that our backups were pointed at mysql2, which was out-of-date with mysql1, due to the initial synchronization failures. Fortunately, we had the binary logs from the 17th through the 30th. This means that though most data could be restored, some data from between the 15th and the 17th was lost.\n\nFor our issue tracker, that means that issues JENKINS-29432 to JENKINS-29468 were lost, as well as comments posted from about July 15 12:20 PM to July 17 2 AM (UTC). We know this thanks to the jenkinsci-issues mailing list where the lost issues and comments can be looked up for reposting.\n\nWe unfortunately don’t have such a record from our wiki.","title":"Update: Wiki and issue tracker outage","tags":["infrastructure"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-08-18T00:00:00.000Z","id":"eccd6f6b-09b3-5633-8c8a-12f9b9071f52","slug":"/blog/2015/08/18/juc-speaker-blog-series-andrew-phillips-juc-u-s-west/","strippedHtml":"Join Me at JUC West to Discuss Building an Enterprise Continuous Delivery Machine with Jenkins\n\n+\n+\n\n+\nimage:https://blog.xebialabs.com/wp-content/uploads/2015/05/JUc.png[image,width=333,height=90] +\n\n+\n+\n\nAfter a great event on the East Coast in June, now over to the West Coast for another exciting Jenkins User Conference! I’ll be there for JUC West on September 2-3 with the XebiaLabs team, and am looking forward to talking to the Jenkins users, partners, developers and community members that will be coming together.\n\n+\n+\n\nAt JUC East, I talked about the importance of Automated Testing in your Continuous Delivery pipeline, and I was really pleased by the number of interesting discussions and comments that came about as a result.\n\n+\n+\n\nFor JUC West, I’ll be taking a broader view, and will talk about building an \"Enterprise Continuous Delivery Machine\" around Jenkins. I’m going to focus on the challenge of identifying and choosing solutions for the many \"adjacent problem spaces\" to Continuous Integration that you run into when trying to move to Continuous Delivery: artifact management, feature tracking, environment provisioning, deployment automation, test management, pipeline orchestration, production feedback and more.\n\n+\n+\n\nWe’ll discuss some of the options available for each category, with a special focus on app deployment, test result management and pipeline orchestration. We’ll also present a couple of real-world Continuous Delivery Machine architectures, and analyze some of the motivations for each organization’s choices.\n\n+\n+\n\nMost of our users use XebiaLabs tools/products in combination with Jenkins to build out their Continuous Delivery stack. If you’re scaling out your Jenkins usage too, stop by the XebiaLabs booth to see if you can pick up some tips and to say hello.\n\n+\n+\n\nLook forward to seeing you at the event, or check the slides or recording we will post after the event. Hope to see you there!\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/phillips_0.jpg[image,width=152,height=182] +\n\n+\n+\n\nThis post is by Andrew Phillips, VP, Product Management at XebiaLabs. If you have your ticket to JUC U.S. West, you can attend his talk\"Sometimes Even the Best Butler Needs a Footman: Building an Enterprise Continuous Delivery Machine Around Jenkins\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC U.S. West, the last JUC of the year!\n\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Andrew Phillips, JUC U.S. West","tags":["general","juc"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-08-20T00:00:00.000Z","id":"d1860023-e5b8-5452-a7f4-ba23d5ca66a3","slug":"/blog/2015/08/20/upcoming-office-hour-on-kubernetes/","strippedHtml":"Nicolas De Loof will host an office hour next Wednesday 11 AM PDT on integrating Kubernetes with Jenkins. Kubernetes is an open-source project by Google that provides a platform for managing Docker containers as a cluster.\n\nDuring this session, Nicolas will introduce Kubernetes, explain how it can benefit Jenkins and demonstrate the Kubernetes Plugin.\nThen he will discuss the design of the Kubernetes plugin and plans he has for future improvements.\n\nParticipate in the Hangout on Air or watch live on YouTube.","title":"Upcoming office hour on Kubernetes","tags":["general","plugins","screencast","tutorial","docker"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-08-20T00:00:00.000Z","id":"942628f2-9a3c-5948-87df-a1ceb9efe926","slug":"/blog/2015/08/20/volume-9-of-the-jenkins-newsletter-continuous-information-is-out/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/volume9_0.preview.png[image,width=108,height=146] +\n\n+\n+\n\nThe Jenkins Newsletter is out a bit early this quarter. If you are not signed up to receive it via email, check out Volume 9 here.\n\n+\n+\n\nYou will be connected to all sorts of Jenkins resources from Jenkins training sessions, to some Jenkins User Conference news, to how Jenkins works with Kubernetes and Docker.\n\n+\n+\n\nI hope that you enjoy this issue! Please let me know what content you find to be the most useful, reach out to me with content that you would like to see in the next issue, and feel free to tell me how I can improve the Jenkins Newsletter: Continuous Information. You can reach out to me at continuous-information@cloudbees.com. Thanks!","title":"Volume 9 of the Jenkins Newsletter: Continuous Information is out","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-08-24T00:00:00.000Z","id":"8a1cfe56-296c-5851-b85b-78e48cf4b5ac","slug":"/blog/2015/08/24/juc-speaker-blog-series-kaj-kandler-juc-u-s-west/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nDeveloping Enterprise-Ready Plugins\n\n+\n+\n\nMy greatest surprise at JUC 2014 in Boston was how many enterprise Jenkins CI users had developed plugins for their own use. I had not pictured enterprise release managers as plugin developers. Here at Black Duck Software, we developed Jenkins plugins for four years running. Fabrice Solami, a sales engineer, wanted to do more than automate our code scanning tool via a shell script step in the Jenkins job. He wrote a first plugin that added a build step to run the tool and configure the job more comfortably. The plugin became quickly popular, and when customers asked for it to also support maven builds and run on agents, it was time for help from the engineering team, particularly the integration team I lead.\n\n+\n+\n\nOver the years we developed four more plugins and overhauled the original one with the user community (aka paying customers) growing to >75 organizations, mostly large or really large development organizations. In the process, we received lots of feedback and discovered some Jenkins features we feel are essential for good plugin design for the enterprise. Let me share these insights so that you can consider them in your plugin development.\n\n+\n+\n\nCredentials Plugin\n\n+\n+\n\nOur plugins connect to our web applications and need authentication to utilize our SDK. The first plugins used username and password fields in every job configuration. That made tedious configuration work and stores the passwords in clear text in the configuration files on disk. Ouch!\n\n+\n+\n\nWe did wise up and started using the credentials plugin to manage username/passwords centrally and securely. It even allows setting authorization roles in such a way that the maintainer of a job can use the credentials without seeing the password. With that in place, our plugins are fit for banks and insurance companies and any other security-conscious organization.\n\n+\n+\n\nSupport the REST API\n\n+\n+\n\nDid you know that Jenkins talks REST? We found it to be an easy way to create and update jobs. It is a really handy tool. The REST API is easy to script for all sorts of external interactions.\n\n+\n+\n\nHowever, plugins need to do a little effort to support it on their part; yet it is almost trivial to do. So from our experience it should not be left out.\n\n+\n+\n\nWe wrote a small Java program that reads, creates, updates job configurations, and can trigger job runs. It reads the jobs and commits them to a file for easy mass editing and updates the jobs afterwards.\n\n+\n+\n\nOur internal use case is to manage regression tests. We have medium-sized lists of jobs that run regression tests. With this tooling we can create a new set of jobs for a given plugin that runs against a new target server, that is, a server version under QA. It all happens in less than 15 minutes.\n\n+\n+\n\nWe also made this part of our migration from our first plugin to its successor with all the enterprise capabilities, but incompatible configuration. Using the REST API and some more Java programs we can create a csv file / Excel spreadsheet with jobs that are configured with the previous plugin. The user can filter the list with the spreadsheet application as needed, and then use the resulting list as input to the batch upgrade tool. This makes the upgrade a gradual affair and not a tedious exercise in UI configuration changes.\n\n+\n+\n\nUpdateSites Manager Plugin\n\n+\n+\n\nIf you are developing plugins for in-house use, you have the option to install/update those through file upload. However, in an enterprise you likely have multiple Jenkins servers for different divisions, development groups, or regions. The notification of updates becomes tedious at best. Wouldn’t it be nice to run your own update site, so that your plugin(s) become discoverable in the “Available” tab of the “Manage plugins” screen? Wouldn’t it be a dream if available new versions show up automatically in the “Updates” tab, including Jenkins version compatibility check?\n\n+\n+\n\nUpdateSites Manager plugin by IKEDA Yasuyuki is the answer to your prayers. It is easy to install, and the process to create and publish an update site is not too complicated and can become part of your Jenkins job building/releasing the plugin.\n\n+\n+\n\nIn my presentation at JUC 2015 West, I’ll share more details on how this makes a difference and how you can use these techniques to make your plugins enterprise-grade. As a bonus, I’ll show you how to get a free vulnerability report for your Maven or Gradle builds.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/Kandler_0.jpg[image,width=152,height=182] +\n\n+\n+\n\nThis post is by Kaj Kandler, Integration Manager atBlack Duck Software, Inc. If you have your ticket to JUC U.S. West, you can attend his talk\"Making Plugins that are Enterprise Ready\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC U.S. West, the last JUC of the year!\n\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Kaj Kandler, JUC U.S. West","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-08-25T00:00:00.000Z","id":"f5780b57-95a9-5ef9-ae2b-4adec694d1bd","slug":"/blog/2015/08/25/announcing-the-travel-grant-program/","strippedHtml":"We’re currently setting up a program to support community members' travel to Jenkins community events. Our goal is to enable more members of the community to meet each other and exchange ideas in person.\n\nWe’re still hashing out the details, but it’ll be available to every Jenkins community member. Apply, telling us what Jenkins-related event you’d like to attend and how awesome you are, and we may support your travel with up to 500 USD. For details on how this will work, see the current draft of the travel grant program.\n\nThe first person to be supported in this way is Pradeepto Bhattacharya from Pune, India. He was a speaker at this year’s JUC Europe in London, and will give two talks at JUC US West next week—​and we help him get there! He asked us a few weeks back whether the Jenkins project could support his trip to the US. We came to the conclusion that this would be a good idea—​so good in fact, that we decided to build a regular program from it.\n\nAre you planning to attend a JUC or similar event, but worry about the cost of travel? We may be able to help you out!","title":"Announcing the travel grant program","tags":["general","meetup","news"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-08-28T00:00:00.000Z","id":"ce04a771-8974-5a33-994a-d86b1aebdcbd","slug":"/blog/2015/08/28/juc-speaker-blog-series-jamie-omeara-juc-u-s-west/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nCloud Native and the benefits to Continuous Delivery (CD) Pipelines\n\n+\n+\n\nThere’s a lot of discussion lately around Cloud Native. If this term is new to you, I suggest a quick read of Cloud Native: What it Means and Why it Matters? From my perspective, Cloud Native offers tremendous benefit to enterprise companies, startups and developers looking to add value quickly or capture market share. Cloud Native platforms, such as Cloud Foundry, provide a number of features to reduce the effort of developing software and operating it on or off premise. A few notable features include load balancing, application routing, cluster scheduling, and containerisation. Cloud Native also offers a significant advancement for building integrated pipelines to deliver software. Before we discuss these advancements, let’s consider the role of the container.\n\n+\n+\n\nContainers\n\n+\n\nOne of the most influential components of Cloud Native is the container. At this point, containers are fairly ubiquitous and most developers have experimented or used containers. For instance, if you’ve pushed an application to Cloud Foundry or Pivotal Web Services, you’ve used an container without knowing it.\n\n+\n+\n\nInitially containers were a place to automate the deployment and execution of your code, but over time customization became necessary to handle specific use cases. As a result, container creation now occurs earlier in the development and build phase. As applications are packaged within binaries and containers, validation of the application and container configuration needs to be validated before leaving the developer’s laptop. So what does this mean for the continuous delivery (CD) pipeline?\n\n+\n+\n\nCD Pipelines\n\n+\n\nDevelopers will tell you their role has expanded over the years as agile methodologies have changed the way software is engineered. Techniques like Test Driven Development (TDD) and CD pipelines encourage software teams to deliver higher quality code in every build. Of course, a good CD pipeline starts at the developer’s laptop. Building and testing the start of a pipeline requires the correct tools while preserving the developer’s choice of container.\n\n+\n+\n\nThe diagram below demonstrates a simple CD pipeline. As you can see, the pipeline starts from the developer’s IDE and uses Cloud Foundry’s Lattice to provide a sandbox to validate the delivery artifacts. Lattice, based on Cloud Foundry’s container scheduler, delivers a small Cloud Native Platform that can be scaled up in the cloud or scaled down to a laptop. It includes a cluster scheduler, HTTP load balancing, log aggregation and health management for containers. Best part, it offers developer choice. Lattice provides support for both Docker containers and Cloud Foundry buildpacks.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/omeara-pic_0.png[image,width=600,height=366] +\n\n+\n+\n\nLattice’s flexibility makes it extremely easy to test how the application, which runs in a Docker container, will function in a Cloud Native environment. It’s also extremely helpful for developers engaged in a spike (prototype phase) where they want to push, validate and demonstrate code and let the platform handle the container creation, runtime environment and deployment artifacts via Cloud Foundry buildpacks.\n\n+\n+\n\nExtending the CD pipeline beyond the developer’s laptop to deliver value to the organization will require additional tools like the CloudBees Jenkins Platform, Artifactory and Pivotal Cloud Foundry. These enterprise build-and-deploy solutions help developers deliver to a Cloud Native platform and reduce the time to establish the feedback loop. If the enterprise maintains a Hybrid cloud strategy, these tools make it seamless to deploy across different cloud providers.\n\n+\n+\n\nAs developers build more Cloud Native applications for Cloud Native platforms, it’s important to establish good tool chains and best practices early in the development phase. Interested to see these tools in action? Join us at Jenkins User Conference West on September 2nd to learn how I use these tools to build Integrated Deployment Pipelines with Jenkins and Cloud Foundry.\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/OMeara_0.jpg[image,width=145,height=180] +\n\n+\n+\n\nThis post is by Jamie O’Meara, Field Engineer at Pivotal. If you have your ticket to JUC U.S. West, you can attend his talk\"An Integrated Deployment Pipeline with Jenkins and Cloud Foundry\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC U.S. West, the last JUC of the year!\n\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Jamie O'Meara, JUC U.S. West","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-08-31T00:00:00.000Z","id":"11007e50-9999-5e16-acb6-26b8b01f1bad","slug":"/blog/2015/08/31/jenkins-cia-program-and-meetup-updates/","strippedHtml":"A few years ago, the Jenkins community announced the Jenkins CIA program - the Continuous Integration Ambassador initiative to spread the word of Jenkins. As of recently, there hasn’t been as much activity, so this program needs to be revived!\n\n+\n+\n\nThere are over 120,000 active Jenkins installations now and that number just keeps climbing and climbing. It’s important to bring all of us together through big events like the Jenkins User Conference, but not everyone can get there. That is why Meetups and smaller Jenkins events are crucial.\n\n+\n+\n\nTo support this effort, CloudBees has announced that they will be sponsoring the kickoff of the CIA revival/https://jenkins-ci.org/content/bay-area-jenkins-area-meet-looking-you[JAM] to help the Jenkins community host these Meetups!\n\n+\n+\n\nTo kick this off, the first Jenkins Area Meetup (JAM) is in the San Jose CloudBees office on Sept 23. We are shooting to have a JAM everything 3rd Wednesday of every month to consistently bring the community together.","title":"Jenkins CIA Program and Meetup Updates","tags":["general","cia","meetup","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-08-31T00:00:00.000Z","id":"41e42ddb-f0a7-502f-99e6-9d0968d76a04","slug":"/blog/2015/08/31/juc-speaker-blog-series-laurette-cisneros-juc-u-s-west/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nLast year’s JUC West 2014 was packed with good gems of information – such as \"how we did it\" talks where the speakers shared their points of view on the tools they use for automating their pipeline. At JUC and other conferences I especially seek out talks about how others implement their Continuous Delivery processes. At the upcoming JUC West 2015, it is my turn to share “how we did it” at Perforce. I will present my talk \"Continuous Delivery: Driving Lessons” and describe our journey, the rewards we reaped, and the challenges we faced along the way.\n\n+\n+\n\nAt Perforce, we see Continuous Delivery as taking the proven technique of automation and expanding it to a solid set of practices that make the pipeline even more efficient. This includes empowering the product teams to own production and quality all the way from requirements to delivery, and moving from a central build and release team to a self-serve infrastructure to remove the \"friction\" in the workflow. These changes have allowed us to quickly, efficiently and reliably adapt our software in line with user feedback, shifts in the market, and changes to the business strategy.\n\n+\n+\n\nI look forward to seeing you there!\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/cisneros_0.preview.jpg[image,width=150,height=224] +\n\n+\n+\n\nThis post is by Laurette Cisneros, Engineering Tools Manager at Perforce Software. If you have your ticket to JUC U.S. West, you can attend her talk\"The Road to Continuous Delivery: Driving Lessons\" on Day 1.\n\n+\n+\n\nStill need your ticket to JUC? If you register with a friend you can get 2 tickets for the price of 1! Register here for a JUC U.S. West, the last JUC of the year!\n\n+\n+\n+\n+\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Laurette Cisneros, JUC U.S. West","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-08-31T00:00:00.000Z","id":"6428552e-8c9c-54a0-ac04-d0926fae9b71","slug":"/blog/2015/08/31/plugin-spotlight-version-column-plugin/","strippedHtml":"Most Jenkins controllers with a distributed build configuration will leverage nodes that run a agent.jar to start an agent. Regardless of whether the agent.jar is launched through a Java Web Start or SSH launcher, the jar will be copied from https://yourserver:port/jnlpJars/agent.jar to the build node. Keeping this jar up to date ensures that it picks up the newest features in a more recent release, such as the self-restart feature to keep agent JVMs “clean” and to automatically reconnect to their controller. Additionally, newer versions of this component may fix bugs or implement newer protocol versions with various improvements.\n\nWhat is the Version Column Plugin?\n\nLaunch methods designed to pull the latest agent.jar are not always reliable and some launch methods don’t even try to update the agent.jar. Therefore it can be useful to see what agent.jar version is running on a given build node and take offline any nodes which fails to update to the latest version of the jar.\n\nThe Version Column Plugin allows Jenkins controllers to do just this, adding a new column to the “Manage Nodes” view and a new option for version enforcement on the node configuration screen.\n\nGetting started\n\nAfter installing the Version Column Plugin, navigate to the list of nodes in your Jenkins instance by clicking Build Executor Status in the executors widget below the side panel on the Jenkins home page.\n\nIf the plugin installed successfully, you will see a new column simply called “Version”. This column displays the version of the agent.jar that each build node is using.\n\nThis column is simply displaying the versions, so enforcement of agent.jar versions will need to be configured elsewhere. To activate this, click on the “Configure” link in the node manager’s left-hand menu.\n\nYou will then see a set of options for agents. To activate version enforcement, check the “Version” box and apply your changes.\n\nWhen you update Jenkins, there’s a chance it’ll come with a new version of agent.jar. Now if the agent.jar on a particular agent doesn’t get updated automatically, the controller will take it offline and show a warning next to the out-of-date agent version number:\n\nThe Version Column Plugin is available for download in the Jenkins plugin manager or from its wiki page.","title":"Plugin Spotlight: Version Column Plugin","tags":["general","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-09-01T00:00:00.000Z","id":"f4f82a03-90a1-51e1-90ce-480982463d6d","slug":"/blog/2015/09/01/take-the-2015-jenkins-survey/","strippedHtml":"Just as in past years, we are running a survey this year, to get some objective insights into what our users would like to see in the Jenkins project. Obviously, the developers in the project deal with individual bug reports and feature requests all the time, but sometimes those day-to-day issues distract you from a bigger picture.\n\nThis year, we kept some of the questions the same, so that we can see the trend over time. But we also wanted to bring in some questions around how you are using Jenkins and what other technologies you leverage such as Linux containers and cloud services.\n\nThe survey will close at the end of September and, if you participate, you’ll get to see the results first. CloudBees is sponsoring the survey and as an added incentive for us to fill it out, CloudBees has pitched in a $100 Amazon gift card (thanks CloudBees!). Information you submit is only going to be used by the community and not by CloudBees. So please take the survey and let your voice be heard.\n\nFinally, there are laws that govern prize giveaways like this and CloudBees has put up terms and conditions for this.\n\nTake the survey here","title":"Take the 2015 Jenkins Survey!","tags":["general","news","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-09-03T00:00:00.000Z","id":"54daf997-6adf-5784-ac6a-b0973df0dead","slug":"/blog/2015/09/03/jenkins-user-conference-west-day-1/","strippedHtml":"+\nimage:https://pbs.twimg.com/media/CN6MLZnUsAAj0RD.jpg[image,width=300] +\n\n+\n+\n\n+\nBoy, what a day! This is the 5th annual JUC in San Francisco bay area, and the crowd is getting bigger. +\n\n+\n+\n\n+\nI brought the LEGO Jenkins + CloudBees logo mosaic that we built at the CloudBees San Jose office:\n\n+\n+\n\n+\nimage:https://pbs.twimg.com/media/CN6Cid3UEAEx5xK.jpg[image,width=500] +\n\n+\n+\n\n+\nThe community booth was very busy. We have people like Dean Yu (board), Andrew Bayer (board), Mark Waite (git), Jesse Glick (workflow and core), Daniel Beck (core), Vincent Latombe (literate), Steven Christou (subversion) and Owen Mehegan (community outreach) talking to people all day long.\n\n+\n+\n\n+\nIf you are here, make sure to stop by, and if you are not, follow news with https://twitter.com/search?q=%23jenkinsconf[#jenkinsconf].","title":"Jenkins User Conference West Day 1","tags":["general","juc","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-09-07T00:00:00.000Z","id":"2520f21a-bf41-5f6e-8001-bea5cf3ea0d8","slug":"/blog/2015/09/07/office-hour-on-proposed-ui-ux-changes/","strippedHtml":"Gus Reiber will host this week’s office hour on Wednesday, 11 AM PDT. He’ll talk about some of the UI/UX improvements in Jenkins that he’s working on, and will answer your questions about it.\n\nHe’s already given several talks about this, so you can check these out to learn more before the office hour:\n\nJUC US East\n\nJUC Europe\n\nJUC US West\n\nThere are also some mailing list threads where he’s discussing his designs with the community:\n\nFebruary to April discussion\n\nJuly discussion\n\nThe links to the Google Hangout (participate) and Youtube (watch live) will be posted to the wiki before the event. If you don’t get into the Hangout (limited number of participants), don’t worry: You’ll be able to send questions and suggestions to his Twitter account @gusreiber.","title":"Office hour on proposed UI/UX changes","tags":["development","screencast"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-09-19T00:00:00.000Z","id":"5bac3070-b841-5b0f-aea3-39ca481c5b88","slug":"/blog/2015/09/19/office-hour-on-form-handling-in-jenkins/","strippedHtml":"Update: This week’s office hour has been canceled.\n\nThis Wednesday, Sep 23, at 11 am PDT I will host another office hour on Stapler, the web framework used in Jenkins. This time, I’ll show you how structured form submission in Jenkins works, and how Stapler can help you with it.\n\nAs usual, the office hour will use Hangout on Air, and a limited number of people will be able to join and participate. The others will be able to watch the office hour live on YouTube. Links to participate and watch will be posted before the event on the Office Hours wiki page.\n\nUpdate: This week’s office hour has been canceled.","title":"Office hour on form handling in Jenkins","tags":["general","office hours"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-09-29T00:00:00.000Z","id":"6734ef0b-9219-5517-9b5b-8529be8d41cd","slug":"/blog/2015/09/29/gui-improvements-on-the-horizon/","strippedHtml":"This past Thursday, September 24th, 2015, I presented a couple of prototypes of what I hope will be the future of the Jenkins GUI. Or perhaps more correctly, close enough to the future to start generating positive feedback from you the community that improving the Jenkins GUI is important and some pieces that I am showing are going in the right direction. If you have ~45 minutes to spare, I recommend the video (the narrator’s voice is very soothing). If not, I offer the following as a reasonable summary.\n\nJenkins has a lot of strengths as tool. Its robust user community along with its thoughtful and extensible design are two of the most immediate. They are the two pillars that have made Jenkins the leader in the CD/CI space and the de facto choice for most of us looking to automate our build and test processes. But let’s face it, by today’s standards, the GUI doesn’t really sing. I will even go so far as to say, I believe it is a platform liability at the moment, and even among we the Jenkins faithful, few of us look forward to using it.\n\nIn an effort to turn that tide, I traveled to this year’s 3 main JUC events, in DC, London, and Santa Clara, pushing the idea that enhancement is possible and providing an evolving sketch of what that might look like. The three main areas of enhancement I have targeted for a first round of improvement are these:\n\nItem creation and configuration\n\nPlugin selection\n\nWorkflow construction\n\nSoon to follow, but not yet prototyped by me would be pieces dedicated to monitoring jobs in Jenkins as well as node and resource utilization and efficiency. Rightly or wrongly, I have started with the create and configure side of the GUI, as I see it as somewhat primary in a typical job creation scenario (you have to create a job before you can monitor it), but this second piece is no less important. Sadly, lips service is all I can offer you today, but more prototypes and video demonstrations are on the way.\n\nItem Creation and Configuration in Jenkins\n\nIn most use cases, item creation means creating a freestyle job, so that is what I use as my base use case example. It is important to note, however, that most configuration in Jenkins happens through a shared set of GUI components. These components are a blend of Jelly files and Javascript and can be found in the …​/main/resources/lib/form directory in the Jenkins source code. In operating on these pieces, I have the opportunity to effectively enhance broad areas of the Jenkins experience, including aspects of plugin use that share these components. This greatly increases the upside of the effort as well as the possible drama and side effects, which I will go into more detail on later.\n\nAs for the upside piece, the first bit of improvement I am looking to attain is breaking up the many 'toilet paper' style unbroken configuration lists sprinkled throughout Jenkins. The first example of this appears in item creation. On first installation, this issue is not immediately obvious, but if you have installed a variety of plugins or chosen to purchase CloudBee’s Jenkins Enterprise product, you will find that Jenkins can have quite a few types of items to create. While they do have descriptive text, I still find them difficult to differentiate and almost impossible to casually scan. Thus, my first suggestion is to add some form of categorization to the item types. For this to function correctly, the GUI will need to be smart enough to apply the categories only when item counts are sufficient to justify them (if you only have 4 item creation types, it doesn’t make sense to have 8 categories with which to sort them). But if you are a long time Jenkins user with many plugins you may also know it is possible to have more than a dozen item types. So if nothing else, an extension point that allowed for the categorization of item types seems helpful.\n\nThe configuration form itself, it also can become incredibly long with few landmarks or visual differentiation points. As a remedy, I propose calling out and clearly boxing each of the existing configuration sections and making sure that their names are as meaningful as possible. As an added step, I make the sections collapsible. This allows the user to jump to specific points in the form and tuck other areas out of the way. In some cases, we can make specific sections open by link context or even by user context.\n\nPlugin Selection\n\nAnother essential piece of the Jenkins experience is plugin configuration. Today, if you are looking to add plugins to your Jenkins environment, you are almost certainly using Google to find a 3rd party review site, collecting the name of the plugin you want and then either linking to it on this website, or filtering for it in the Plugin Manager GUI.\n\nNeither in the product nor on this website is there a particularly good resource for comparing plugins and evaluating which you might add.\n\nInstead, I am looking to add something akin to an application store experience to both this website and the product UI. You should be able to group sort and compare plugins by a variety of criteria, including author, installation base, and user review. You should also have a set of general use categories that fits user needs and expectations, rather than the free ranging labels that plugin authors have arbitrarily applied today.\n\nWorkflow Script Builder\n\nFinally, I have a GUI that allows for a sort of Drag-n-drop assembly of Workflows. A major tenant of the utility of Workflows as opposed to Freestyle jobs is that they can be completely separated from the Jenkins GUI and stored in a source repository. None-the-less, with absolutely no GUI, there is little to guide the user who is looking to get started without a upfront learning investment. As it turns out, a Workflow/Groovy script is pretty straight forward, but you don’t really know that until you have made one. Also, Workflow allows for the orchestration of jobs across multiple nodes of hardware resources, making it a potentially involved little bit of configuration. Thus, my goal here is two fold. Allow the user to model a workflow quickly and easily and showcase a few of the more advanced features workflow enables. The result is this script builder. My hope is to host the prototype somewhere you all might be able to use it directly, but in the meantime, my hope is that my video pretty well explains how it works. Please take a look and post whatever comments you see fit.\n\n…​and really send along feedback…​\n\nSo with all things community related, please, please, send back whatever feedback makes sense. I can be reached via Twitter @gusreiber.\n\nOther places you can find me include, IRC (freenode/#jenkins) and https://plus.google.com/GusReiberUI[Google ( https://plus.google.com/+GusReiberUI)]. I would love to hear from you.\n\nQuestions and Answers from the talk:\n\nHow likely is it that any of these UI changes will make it into the core open source Jenkins? When would we start seeing them there?\nMost will be OSS. An exact schedule has not been determined, but most of it is still about a year away. Likely we will have an experimental wars for download along the way.\n\nIs there anyway to determine which GUI attributes are contributed by which plugin?\nI take it that is a bit of a feature request? It came up at JUC West as well. Should be something that can be surfaced in the GUI. I agree, it would be helpful.\n\nWhat is the difference between ANT and Jenkins?\nAnt is a good bit more bare-bones than Jenkins. In fact, you can add an Ant plugin to your Jenkins environment. You would typically use Ant to compile java source files. Jenkins orchestrates the fetching of the source files from some particular repository, the building of those files (often Jenkins uses Ant via its plugin to do this), running and reporting some suite of tests against that build, and then archiving or deploying the artifacts to wherever. Often times this requires navigating several computers with their own security constraints, so Jenkins helps you manage that as well.\n\nWhat version of the Jenkins it is?\nThis isn’t available today, but I am building against 1.621-SNAPSHOT currently, but will upgrade with Jenkins to the coming December LTS. I’m interested in seeing the list of 100 plugins that you mentioned (by Daniel?) Me too. :^) He and the community (which can be you if want to join IRC freenode.net/#jenkins and attend the hangouts and governance meetings: https://jenkins.ci.org)\n\nFor IRC, I assume the server is freenode.net?\nYes.\n\nWill there be any dashboard kind of feature for the build history in the new GUI?\nSo far, I have been focusing on the create and configuration portion of the Jenkins UX as I see it as a barrier to entry for new users. The read/report/analyze half of the Jenkins UX I actually see as the portion with more long term value, as you tend to read more often than you write, so I am eager to jump in here as well. …​.however, in its core today, Jenkins the tool seems to me to really want to see the world in the same context of flat XML files in folders as it actually persists its configuration data. To really make meaningful dashboards, it needs to be possible to query job configurations and build artifacts by a wide set of criteria that is not at all related to the folder in which the xml file happens to be stored. Also, some of the things you care about in the Jenkins universe are compute resources (controller/agents/exactures). These are also not the same as config files in folders and need to be queryable as their own first class type of entity. …​so what I am saying with a lot of words is that I see the config piece as a somewhat more immediate and urgent fix. The broccoli of the meal, if you will. I will want to get that out as fast as possible to get it out of the way. The reporting piece is actually the wine. At the moment, we are giving you Bartles and Jaymes in paper cups. …​so a lot of work is still needed there.\n\nHave you investigated Google Polymer as UI components for jenkins UI?\nI have not, but will now. I am actually quite a google fan-boy in much the way a lot of kids love Apple. (I also love Apple… being from Seattle, I even love MS). But, for the super near term, we are most focused on getting JQuery cleanly into core and Prototype.JS deprecated. Walk first, is my feeling.\n\nAre there any tutorials on Jenkins workflow?\nJesse Glick or KK are better people to ask about that, really. They are also on IRC: freenode.net/#jenkins. Daniel Beck as well, might be a good person to ask. My little workflow demo is still really just fiction. Will there be a 'Expand All' and 'Collapse All' buttons for the accordions in new configure GUI? (I would probably inject one if not by default) Yes. Also, they should be URL controllable so that they can be set by link or user context easily. Maybe they should also remember what you had open last? …​stuff to tinker with that really needs to be right.\n\nWhat impact does the UI changes have on job configuration behind the scenes? Is configuration still stored in XML format?\nNone. The post string stays the same and from then on, Jenkins is Jenkins.\n\nCan the create item screen be configurable? At the moment, no, but ideally yes. It is still a big hand wave at the moment about how those categories are created, managed, and updated. The same categories ought to bubble back up when searching for the plugins to help relate what plugins generate what UI. I am hoping for guidance from the community. How will workflow fit in with new UI?\nIn some respects, the new configuration page is about enhancing the more traditional freestyle job and not workflow. However, the last bit of my presentation with the script builder is exclusively about workflow. The plugin manager is about plugins, so it would apply to both.\n\nHow is a human notified for the wait for approval step in this workflow?\nSo workflow approval can be done via the web GUI. But to get real notification, you would program that into your workflow Jenkins has a fairly large set of notification plugins. So you can use Jenkins to trigger email, or SMS, or HipChat, or Slack, or pretty much whatever. As these plugins are increasingly customized for workflow, you will get nice and nice workflow syntax for instantiating those actions. When my script builder is adopted, you would have a friendly button you could drag into the stage and it would notify you prior to the manual checkpoint.\n\nCustom plugins still supported?\nYes. Though there is supported and supported. The highest level of support for a plugin would be a custom DSL for workflow that would make for streamlined syntax in workflow for interacting with that plugin via Groovy. But existing plugins do not need that level of support to be used within a Jenkins file / Groovy script. Instead, the syntax for accessing the plugin is likely to be more complicated. ….some plugins are freestyle specific, in which case, they no longer make sense in workflow. ….Daniel Beck or Jesse Glick are probably better suited to answering this question, however…​\n\nWill there be an improvement in performance with docker builds, sonar scanning? From my experience sonar takes 20+ mins with jenkins plugin where as it takes 3 mins with maven plugin\nIs this times it is taking the GUI to render, or the actual build to run? I am not sure I am following the question exactly, but regardless, I am not well equipped to answer many questions about performance issues in Jenkins. I know of a fairly major performance issue specifically in the configuration form that I believe will be fixed in the new GUI, but that isn’t build performance, it is just form rendering performance.\n\nI like the graphical configuration. Thanks. The scripting of a complex workflow looked a bit daunting.\nCool. Yeah, my main and first goal is to get something out there that would allow folks to quickly sketch and deploy an actual working workflow that reasonably reflects an 80%ish use case. No GUI can ever be as fully flexible as a script, but I don’t think most people need the 95% case to get started and see the benefit of a versionable and robust config file format.\n\nWill there be any effort to make the UI mobile friendly for the admin on the go?\nAbsolutely. Especially on the TBD read/reporting end of the UI, but everything new needs to meet a reasonably high bar of device responsiveness. Today, the Jenkins GUI is just not responsive. Which is terrible.\n\nAs a plugin developer do I need to change implementing the ui source from jelly or groovy to some other language/technique or will it be compatible?\nSo you will not NEED to change from whatever you are doing, except if you have built a plugin GUI that has custom script that either relies directly on behavior.js, hudson-behavior.js, or the particulars of the existing DOM structure (you do something in the client that requires your or some other input to be in a particular TABLE TR TD DOM traversal path). …​I believe 2 things are going to continue to happen at a faster and faster rate. New plugin authors are not going to want to write GUIs in Jelly and Prototype.js, but instead use some more modern client side MVC approaches like Angular, where the GUI interacts with a REST api instead of being a dom directly rendered from the server. It is a bit of a different mode of working than Jelly, and maybe slightly less direct, but it is a lot easier to find doc on how to do things with JQuery, Agile, Handlebars and the like, than it is to find doc on Jelly. And the responsiveness and breadth of gestures and controls in Jelly are already terribly behind what is now the main stream of web UI development. So I think plugin builders are, if they aren’t already, going to want better tools available to them. I also think that people are going to gravitate towards workflow or something similar. Since the UI for workflow is foremost a script, making a GUI for a plugin that works with it might be a fundamentally different beast. …​depending on what the plugin is trying to do… So again, new plugins or even upgrading existing plugins to work with workflow are likely want a new technology set, not just because the existing Jenkins GUI is changing, but because new plugins will want to do different and better stuff.\n\nAre there connectors for other source control tools like CVS and Dimensions?\nI am not sure exactly which connector plugins are already supporting Workflow or how deeply that support goes. Because Jenkins has plugins that provide access to these SCMs, you can use workflow to go and fetch those source trees. A greater level of support for workflow from these plugins would mean a more elegant workflow syntax for that interaction. At the moment, my GUI script builder is still fiction. My plan would be to add GUI buttons for whatever are the most popular SCMs and I will attempt to mask the syntax regardless of its clumsiness. ….the way I am constructing my initial prototype, there is already a reasonably clear extension point for adding buttons that generate some chunk of Groovy syntax when it is dragged into a stage. So I will add the initial set based on community feedback and then the community can continue to add their own.\n\nWhat are the compatibility issues existing plugin developers needs to be aware of?\nFor plugins that interact with freestyle jobs, or really most job types that aren’t workflow, plugin developers should expect the page DOM structure to change. If for whatever reason, they find they are busting into some custom script to traverse the DOM to compare 1 setting to another, that will break. Also, hudson-behaviors.js itself has a number of functions in it that do DOM traversing, like “findFollowingTR”. In some cases the signatures of those functions might need to change and the DOM structure that they return might also change. If a plugin uses what were meant to have been internal functions, they are likely to break. Finally, the page geometry is going to change. This may seem so superficial and obvious that, who cares, but sometimes changing a column width translates into an important part of a GUI being hidden or otherwise inaccessible. That ends up being as critical a break as any other. …​so to combat these points of possible breakage, we are going to be looking for a handful somewhere between 20 and 100 plugins that we will want to test against. We haven’t made that list yet, let alone run any tests, so that is really a critical next step. For the plugin manager changes, I don’t see much if any of a braking issue, although I would like to add additional sorting and display power to the GUI, which means the GUI will need more metadata than currently exists, if the plugins want to take advantage of that new power in the GUI. This won’t break things, but plugin authors might want to go back to their plugins and fill in whatever the new bits of metadata end up being…. most likely they would be things like, richer descriptions, better category selections, and possibly icons.\n\nI’ve not seen a lot of Jenkins but what I had I didn’t really get, was awkward for all the reasons Gus mentioned. This looks brilliant. When can we have it?\nTom and I, and now our junior pledge, Keith (not actually junior at all, just more fit than me), are busily typing as fast as we can as well as lobbying the community that our vision is more or less a correct one. We have a very interesting initial plugin selection GUI that might make this years final LTS (which I did not demo), which is none-the-less a nice step forward for Jenkins. In it will be a lot of the JS library bundling that will enable most of what I have shown in this demo. Our hope is that with each LTS we will be able to push out an additional piece of the GUI puzzle. Likely starting with the job create and configure GUI, which would be the mid year LTS. I am hoping that a year from now this will be how Jenkins looks and acts. ….in the meantime, we are grappling with how best to push preview releases so people can play with it and send me hate mail.\n\nIs there any way to test front end of Jenkins plugins? And will that improve too?\nA major and almost blocking portion of this work used to be the custom and somewhat broken version of HTMLUnit that was in core, which greatly hampered including libraries other than Prototype in Jenkins and writing code using those libraries in some sort of testable way. Our new approach to rebuilding the Jelly controls which are the foundation of the Jenkins config page and in general are shared by all plugins that need to post data back to Jenkins, already have a testing strategy backed into our design. Those Jelly form controls are extensible in Jenkins today and would remain so. Our hope would be that any plugin adding custom controls would follow our same design and test pattern we are building in core. ….so that was a long answer, but the short answer YES! Today, building GUI parts into your Jenkins plugin is a bit of a mystery, where most people copy something they saw someone else did, hack it, and the only test is, well…. it worked for me. That is no good and a fundamental piece we are looking to change. ….still a long answer… Node.js and Jasmine are the specific tools we using.\n\nWhat’s the estimated rollout date for this workflow feature?\nThe workflow feature is the newest concept I demonstrated, but in a lot of ways may also be the easiest to ship. As a script generator, exclusively, it could be hosted anywhere, and then you just paste your generated workflow script into the whatever existing Jenkins GUI better, submit into your source code. ….but at the moment, it isn’t actually on an official roadmap yet. Assuming the response to it remain positive, I would expect that to change fairly quickly.","title":"GUI improvements on the horizon","tags":["general","core","feedback","video","workflow"],"authors":[{"avatar":null,"blog":null,"github":"gusreiber","html":"","id":"gusreiber","irc":null,"linkedin":null,"name":"Gus Reiber","slug":"/blog/authors/gusreiber/","twitter":null}]}},{"node":{"date":"2015-09-30T00:00:00.000Z","id":"431cf8b3-f367-5fd0-b8fe-a612aca17838","slug":"/blog/2015/09/30/bay-area-jam/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Screen%20Shot%202015-09-30%20at%202.15.54%20PM_0.png[image,width=320] +\n\n+\n+\n\nLast week, the first Jenkins Area Meetup (JAM) took place in San Jose, CA on Wednesday, Sept 23. What a way to kick off the first JAM other than to have Docker, John Willis as our guest speaker. John talked about immutable infrastructure and its benefits and role of containers.\n\n+\n+\n\nKohsuke discussed Jenkins Workflow, the motivation behind the same and latest features of Jenkins Workflow like multi branch support followed by docker use cases. The highlight of the meetup was definitely Kohsuke breaking the news about Jenkins 2.0 and his vision and motivation behind it.\n\n+\n+\n\nThe next Bay Area JAM is slated for Oct 21. Be sure to check HERE for the agenda. We’d love to have you join us if you’re in the area. If you’re interested in speaking, or become a food & bev, venue, or recording sponsor please send email to the organizer or events@lists.jenkins-ci.org.","title":"Bay Area JAM","tags":["general","cia","meetup","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2015-10-02T00:00:00.000Z","id":"e12d694f-12f6-5a91-8fb8-5f594f21f900","slug":"/blog/2015/10/02/winners-of-docker-global-hack-day-3-are/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/docker-hack-day_0.preview.jpg[image,width=320] +\n\n+\n+\n\nOver 2,000 members of the Docker community attended Docker Hack Day events around the world. One of the forty-two Docker Hacks has some familiar names attached…​\n\n+\n+\n\nNicolas De Loof and Yoann Dubreuil from Docker Rennes, who are also active in our community, waved the Jenkins flag in this event and produced Jenkins docker agents plugin.\n\n+\n+\n\n+\nThis plugin lets you run builds inside containers, and in that sense it's similar to https://wiki.jenkins.io/display/JENKINS/Docker+Plugin[the Docker plugin] and https://wiki.jenkins.io/display/JENKINS/CloudBees+Docker+Custom+Build+Environment+Plugin[the Docker custom build environment plugin]. But internally it uses a quite interesting approach. +\n\n+\n+\n\n+\nThis fresh new implementation relies on a set of docker containers (aka ‘pod’) to setup a build executor, letting development team customize the build environment for their need without any constraint or prerequisite, and relying on docker containers to host test resources.\n\n+\n+\n\n+\nThis project https://blog.docker.com/2015/09/docker-global-hack-day-3-winners/[won the 3rd place in the Freestyle category of Docker Hack Day]. Congratulations to Nicolas and Yoann on their win! Jenkins + Docker is a winning pair and this plugin will make a huge difference in your projects.","title":"Winners of Docker Global Hack Day #3 are...","tags":["general","plugins","jenkinsci","docker"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-10-09T00:00:00.000Z","id":"83a70273-3deb-5e41-8f36-74bb70ad3a33","slug":"/blog/2015/10/09/cooking-up-jams/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Seville-JAM_logo_1024px_0.png[image] +\n\n+\n+\n\nThere’s been some active discussions and planning around Jenkins Area Meetups (JAMs) specifically in the following cities:\n\nRennes, France\n\nSeville, Spain\n\nSeattle, Washington\n\nBarcelona,Spain\n\nRaleigh, North Carolina\n\nAtlanta, Georgia\n\n+\n+\n\nI wanted to gauge Jenkins interests in these cities, so let us know at jenkinsci-jam@googlegroups.com if you live in one of these areas, and if you would be interested in becoming a member or be involved in JAM one way or another!\n\n+\n+\n\nOf course, if the city you live in currently does not have a JAM and you’re interested in paying it forward, here’s HOW YOU can become a JAM organizer.","title":"Cooking Up JAMs","tags":["general","cia","meetup","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2015-10-01T00:00:00.000Z","id":"373b2161-734e-5842-834d-acb2ff01bd55","slug":"/blog/2015/10/01/upcoming-in-office-hours-jenkins-2-0/","strippedHtml":"+\nI hope many of you have had a chance to see https://groups.google.com/forum/#!topic/jenkinsci-dev/vbXK7JJekFw[the Jenkins 2.0 thread]. +\nI'm going to use https://wiki.jenkins.io/display/JENKINS/Office+Hours[the office hours next Wednesday] to go through this proposal. +\n\n+\n+\n\n+\nThis is still primarily for developers in the project, as it's \"just\" a proposal with lots of details unspecified. It's more meant to help people understand where I'm coming from and what goals I have in mind for this effort. +\n\n+\n+\n\n+\nAs always, this will be on Hangout on air. The event page is https://plus.google.com/events/co46heshe6i4io1dsaaj1h3th2c[here], and if you want to participate in the discussion, join https://plus.google.com/hangouts/_/hoaevent/AP36tYfvk_ZBO4dCmxysNPfi-R5_xlkgscU-r9WDq_8zXDv6VnN3kg[here]. Read-only viewers should use https://www.youtube.com/watch?v=fl5xfqtiNko[YouTube] to watch, and you can still send questions in real time to IRC and I'll make sure to https://jenkins-ci.org/content/chat[go through them]. +","title":"Upcoming in office hours: Jenkins 2.0","tags":["general","news","video","office hours"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-10-19T00:00:00.000Z","id":"894f996c-0ca5-590a-b0ac-4202ec9b7db2","slug":"/blog/2015/10/19/upcoming-in-office-hours-fosdem-planning-session/","strippedHtml":"For the past several years we’ve been attending FOSDEM, a massive free and open source event in Brussels, Belgium. In preparation for this upcoming FOSDEM (2016) event, we will be hosting an open planning meeting via Google Hangouts during this week’s \" Office Hours.\"\n\nAgenda:\n\nGauge who can participate and at what capacity.\n\nPre-FOSDEM Contributor Summit\n\nAfter-hours meetup/happy hour\n\nPlans for a Jenkins stand (assuming we’re accepted):\n\nWhat demo materials\n\nSchwag\n\nRevised Jenkins Flyer\n\nThe FOSDEM 2016 wiki page is where we will be recording plans and tasks will be added to JIRA. If you cannot join us via the FOSDEM Office Hours Hangout , we will also be watching the #jenkins-community channel on the Freenode network if you cannot participate directly.\n\nPlease join us on this Google Hangout at 11:00 a.m. PDT this Wednesday (Oct 21)","title":"Upcoming in office hours: FOSDEM Planning Session","tags":["general","news","video","office hours"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-10-25T00:00:00.000Z","id":"78143bf1-03da-5815-8439-43425e0258cc","slug":"/blog/2015/10/25/jenkins-2-0-proposal-introduce-a-policy-for-api-deprecation/","strippedHtml":"Over the past few weeks there has been a vibrant discussion happening on the\njenkinsci-dev@ mailing\nlist as to what \" Jenkins 2.0\" means.  While\nJenkins does not currently adhere to semantic versioning,\nthe change of a major version number does indicate a major milestone for the community.\n\nProject founder, Kohsuke Kawaguchi presented his\nvision for Jenkins 2.0 in a office\nhours session, the slides for\nwhich can be found in this Google\nPresentation.\nRoughly paraphrasing Kohsuke’s vision, 2.0 is primarily about making things\nbetter for the thousands of users out there.\n\nThis week, we’ll be reviewing some key areas of the \"Jenkins 2.0\" proposal.\nAsking you, the user community, to provide feedback on these proposals, going\nfrom Jenkins internals to user interface.\n\nToday’s post involves a proposal to introduce a policy for API\ndeprecation from community members Oliver\nGondža and Daniel\nBeck. Extensibility is the heart of Jenkins, but over the past ten\nyears we’ve not had a proper API deprecation policy other than \"try not to\nbreak plugins, ever.\"\n\nDaniel, expanding more on the problem wrote:\n\nWe have no backward compatibility policy besides \"compatibility matters\".\nWith 1000+ plugins and basically the entire core being available to\nplugins, a lot of difficult or impossible to remove cruft has accumulated over\nthe last ten years. This limits both what can be changed in core, and makes\ndocumentation difficult to use for plugin developers.\n\nThe two have put together a detailed proposal under\nJENKINS-31035 which\nsuggests we:\n\nlimit the availability in APIs (classes, methods, fields, …​) provided by core\nto a number of releases. Depending on the feature, this can range from a few\nmonths, to a few years (e.g. two years being about 100 releases of Jenkins and\neight LTS baselines).\n\n[…​]\n\nI highly encourage you to read the entire proposal on the issue\ntracker, where we are\ntrying to collect feedback/history.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-31035 and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned, and help make Jenkins 2.0 great!","title":"Jenkins 2.0 Proposal: Introduce a policy for API deprecation","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-10-27T00:00:00.000Z","id":"1fbfba77-6c14-503d-b574-e7815dd7c2b5","slug":"/blog/2015/10/27/jenkins-2-0-proposal-split-groovy-out-of-core/","strippedHtml":"As I mentioned in yesterday’s post, there’s been a lot of discussion recently about what \" Jenkins\n2.0\" means. In a recent \"Office Hours\" session, Kohsuke Kawaguchi presented his\nvision for Jenkins 2.0 in a office\nhours session, the slides for\nwhich can be found in this Google\nPresentation.\nRoughly paraphrasing Kohsuke’s vision, 2.0 is primarily about making things\nbetter for the thousands of users out there.\n\nThis week, we’ll be reviewing some key areas of the \"Jenkins 2.0\" proposal.\nAsking you, the user community, to provide feedback on these proposals, going\nfrom Jenkins internals to user interface.\n\nThus far we’ve covered:\n\nIntroducing a policy for API deprecation\n\nToday’s post involves a proposal originally from community member Jesse Glick who has proposed in JENKINS-29068 that Groovy be split out from the \"core\" Jenkins distribution. The linked issue expands on what the problem is here:\n\nCurrently Jenkins embeds a distribution of Groovy into \"core\" for a variety of scripting and management tasks. This version of Groovy is locked into core in such a way that users cannot upgrade Groovy independently from Jenkins itself. If the Jenkins-bundled version were upgraded to a different major version, it may break users' custom scripts as well as plugins that use Groovy due to API changes.\n\nThe proposal is relatively straight-forward and affects the many different users and use-cases for the embedded Groovy scripting support in Jenkins:\n\nFor ease of maintenance and modularity it would be useful to split Jenkins' use of Groovy into a library plugin; different clients could request 1.x and 2.x simultaneously by using different versions of the library, etc.\n\nStuff in core using Groovy that would need to either be put in this library (if infrastructure for other features) or put in another plugin depending on it (if first-class features themselves):\n\nI selected this proposal to feature on this blog, despite its rather technical underpinnings, it will affect core developers, plugin developers, power and casual users alike. I encourage everybody to read through the proposal and its potential impact on the issue tracker.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-29068 and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for the rest of the week as we keep with our theme of going \"from the inside out\" and help us make Jenkins 2.0 great!","title":"Jenkins 2.0 Proposal: Split Groovy out of \"core\"","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-10-28T00:00:00.000Z","id":"f9383f6c-7ac4-510a-ba69-7c342cd84479","slug":"/blog/2015/10/28/jenkins-2-0-proposal-pipeline-as-code-front-and-center/","strippedHtml":"We have been featuring a few proposals this week for what \" Jenkins\n2.0\" is going to include, today we’re discussing my personal favorite, which I believe will have a tremendously positive impact for years to come (not to be too biased!): moving the \"Pipeline as Code\" support in Jenkins to the front and center.\n\nThus far in this blog series we have reviewed proposals covering:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nToday’s proposal comes from project founder Kohsuke Kawaguchi titled \" Pipeline as code front and center \" and represents perhaps the most important and dramatic shift we hope to make in Jenkins 2.0.\n\nThis functionality has existed through the workflow plugin, which we have discussed at various Jenkins events before but if you’re not aware of some of the power behind it, check out this presentation from Jesse Glick :\n\nThe proposal in JENKINS-31152 expands on the problem we aim to address:\n\nThe default interaction model with Jenkins has been very web UI driven, requiring users to manually create jobs, then manually fill in the details through a web browser. This requires large amounts of effort to create and manage jobs to test and build multiple projects and keeps the actual configuration of a job to build/test/deploy a project separate from the actual code being built/tested/deployed. This prevents users from applying their existing CI/CD best practices to the job configurations themselves.\n\nTo address this, Kohsuke is proposing that we :\n\nIntroduce a new subsystem in Jenkins that:\n\nlets you design a whole pipeline, not just a single linear set of tasks\n\nstores the said pipeline configuration as human-editable Jenkinsfile in your SCM\n\nmakes it automatic to set up new pipelines when Jenkinsfile is added\n\ndifferentiates multiple branches in the same repository\n\nThis is the key new feature that positions Jenkins for continuous delivery use cases and other more complex automations of today.\n\nKohsuke’s proposal is largely about bringing together a lot of already existing pieces together to provide a very compelling experience for new and existing users alike. I hope it is clear now why this proposal is so exciting to me.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-31152, which itself have some additional tickets linked under it, and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for a couple more posts covering proposals to improve the Jenkins interface and user experience!","title":"Jenkins 2.0 Proposal: Pipeline as Code front and center","tags":["general","core","pipeline","workflow","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-10-29T00:00:00.000Z","id":"adc91b34-7269-5628-87ae-4bc68cb38e9f","slug":"/blog/2015/10/29/jenkins-2-0-proposal-ux-improvements-part-one/","strippedHtml":"We have been featuring a few proposals this week for what \" Jenkins\n2.0\" is going to include. Today we’ll be diving into the most noticeable changes being proposed for Jenkins 2.0: the User Experience (UX) improvements\n\nThus far in this blog series we have reviewed proposals covering:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nPipeline as code front and center\n\nThe UX improvements being proposed aren’t necessarily as uniform as the proposals from earlier in the week but represent a large amount of prototype and exploratory work done by folks like Tom Fennelly, Gus Reiber and a few others. Those following the dev list may have already seen some of these proposals in some of the \"mega threads\" that we have had discussing potential UI/UX improvements previously.\n\nThe improvements proposed for 2.0 can be found under JENKINS-31156 . The most promising proposal under this issue is to update the plugin manager experience.\n\nAnother very important proposal for 2.0 worth mentioning is the proposal to update UI work well on mobile devices.\n\nProviding Feedback\n\nWe’re asking you to read the issues linked from JENKINS-31156 and comment and vote on those issues accordingly.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for tomorrow’s post covering the remainder of the proposed user experience changes!","title":"Jenkins 2.0 Proposal: UX Improvements (Part One)","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-10-30T00:00:00.000Z","id":"4ad0c927-4f88-5a6a-a4fc-a4477db179f3","slug":"/blog/2015/10/30/jenkins-2-0-proposal-improved-out-of-the-box-user-experience/","strippedHtml":"This week we have featured a number of proposals for what we would like to see in \" Jenkins\n2.0\", the vision of which is to make Jenkins users more efficient, productive and happy. We started with some more internally facing changes and have slowly progressed from the \"inside-out\" to today’s topic: improving the out of the box user experience. That is to say, the experience that a brand-new Jenkins user has when getting started with the server.\n\nJust to recap, so far we’ve reviewed:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nPipeline as code front and center\n\nUser experience improvements (part one)\n\nThe subject of today’s proposal is captured in JENKINS-31157 , which, like yesterday’s proposal, contains a few issues linked from it with more details.\n\nAt a high level, the problem aiming to be solved is:\n\nWhen a new user installs Jenkins, they are greeted with the main, empty, dashboard which suggests that they \"create jobs.\" This makes no mention of plugins or the configuration options that are relevant to helping the user make Jenkins match their needs.\n\nIn past and current versions of Jenkins, if you know what you’re looking for it’s relatively easy to move around the interface. If you’ve never used Jenkins before, it can be very challenging to find your way around or even know what it is possible to do with Jenkins.\n\nThe proposed changes aim to address this initial confusion:\n\nInstead of changing the post-install defaults, which may not properly represent the user’s needs, the first-time user experience should help guide the user through configuration and plugin installation quickly so they can use Jenkins for their needs. Effectively it should be as easy as possible for a user to arrive at a good configuration for their usage.\n\nJenkins contributor Tom Fennelly, who has led this discussion on the mailing lists in the past, has posted a good prototype screencast of what some of this might entail:\n\nProviding Feedback\n\nWe’re asking you to read the issues linked from JENKINS-31157 and comment and vote on those issues accordingly.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nThis concludes this week’s blog series highlighting some of the Jenkins 2.0 proposals we felt were important to discuss with the broader Jenkins user audience. Many of these, and other minor proposals, can be found on the Jenkins 2.0 wiki page.","title":"Jenkins 2.0 Proposal: Improved \"Out of the box\" user experience","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-11-01T00:00:00.000Z","id":"5c931f6f-0e08-5295-b4bb-ee8fc4aaf3b6","slug":"/blog/2015/11/01/adopt-a-plugin/","strippedHtml":"With more than a thousand public plugins in the Jenkins community now, it should come as no surprise that some of them are no longer actively maintained. Plugin authors move on when they change jobs, or lose interest in the plugin, and that’s fine. Plugins are hosted on the Jenkins project infrastructure after all, and when a maintainer moves on, others can continue their work.\n\nThe major problem of course is that it’s often difficult to tell whether a plugin is still maintained (and there’s just not a lot going on), or whether its maintainer has lost interest. Most plugins don’t get released every few weeks, or even every few months, and still do their job just fine.\n\nTo connect plugins that aren’t actively maintained with potential maintainers, we recently implemented the \"Adopt-a-plugin\" initiative: We built a list of plugins that are up for \"adoption\", and display a prominent message on the plugins' wiki pages. Anyone interested in taking over as a plugin maintainer can then contact us, and we’ll set you up.\n\nAre you interested in becoming a plugin maintainer? Maybe one of your favorite plugins isn’t actively maintained right now. Check out the Adopt a Plugin page for more details on this program, and a list of plugins that would benefit from your help.","title":"Adopt a plugin!","tags":["development","meta","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-11-03T00:00:00.000Z","id":"4cc5a34e-5325-5e67-98c6-d2ebe230541b","slug":"/blog/2015/11/03/what-jvm-versions-are-running-jenkins/","strippedHtml":"Preceding some of last week’s Jenkins 2.0 discussions, there had been some threads on whether we should move Jenkins to require Java 8. The introduction of Java 8 last year brought performance improvements and highly desirable API changes, which make developing Java-based applications (arguably) much easier than before. The release was followed earlier this year by the end-of-life announcement for Java 7; the writing is on the wall: upgrade to Java 8.\n\nI wanted to answer the question \"does it even make sense to force an upgrade to Java 8?\" There are plenty of technical discussions that we can have in the community on whether or not this is the right approach, but my goal was to try and measure the current Jenkins install base for Java 8 preparedness.\n\nWhile we do not currently (to my knowledge) collect Java runtime versions in our anonymous usage statistics, we do have access logs from our mirror redirector which might provide some insight.\n\nWith some access logs data, I went through the millions of requests made to Jenkins infrastructure in 2015 and started filtering out the user agent which made those requests.\n\nNOTE: This data is totally not scientific and is only meant to provide a coarse insight into what versions of Java access Jenkins web infrastructure.\n\nWhen Jenkins hits the mirror network, it’s not overriding the default user agent from the Java runtime, so many of the user agents for the HTTP request are something like Java/1.7.0_75. This indicates that the request came from a Java Runtime version 1.7.0 (update 75).\n\nLooking at the major JVM versions making (non-unique) requests to Jenkins infrastructure we have:\n\n1.8.0 : 21,278,960\n\n1.7.0 : 27,340,214\n\n1.6.0 : 4,148,833\n\nThis breaks down across various updates as well, which is also particularly interesting to me because many of these Java versions have long since had security advisories posted against them. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/jvm-versions-with-updates.png\n\nAs I mentioned before, this is not a rigorous analysis of the access log data and is also not filtered by unique IP addresses. What I found most interesting though is that the Java 8 upgrade numbers are actually fairly strong, which I didn’t expect. I expect that piece of the pie will continue to grow. Hopefully so much so that we’re able to move over to Java 8 before the end of 2016!","title":"What JVM versions are running Jenkins?","tags":["general","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-11-06T00:00:00.000Z","id":"fb8e9590-268f-5f5b-aec2-bd427c6b0b5c","slug":"/blog/2015/11/06/mitigating-unauthenticated-remote-code-execution-0-day-in-jenkins-cli/","strippedHtml":"Updated 2015-11-11 15:00 UTC: We have released Jenkins 1.638 and 1.625.2 which contain a fix for this vulnerability. See the security advisory for more information about these releases.\n\nUpdated 2015-11-06 03:55 UTC: Included a updated mitigation script which doesn’t have a Jenkins boot race condition\n\nEarlier today we received numerous reports about a previously undisclosed \" zero day\" critical remote code execution vulnerability and exploit in Jenkins core. Unfortunately the vulnerability was not disclosed to us ahead of its publication so we’re still working on more thorough fix. In the meantime however, we wanted to inform you of the issue and provide a workaround which will help prevent this exploit from being used against public Jenkins installations, for future reference this issue is being tracked privately as SECURITY-218 in our issue tracker.\n\nThe attack is mounted through the Jenkins CLI subsystem, so the work-around is to remove/disable the CLI support inside of the running Jenkins server.\n\nUsing the following Groovy script you can disable the attack vector in your Jenkins installations by navigating to “Manage Jenkins” and then to “Script Console”, or just go to https://your-jenkins-installation/script. This only addresses the current running Jenkins process, in order to make the workaround persist between restarts of the Jenkins server, add the script below to $JENKINS_HOME/init.groovy.d/cli-shutdown.groovy (create the directory if necessary, and the file).\n\nimport jenkins.*;\nimport jenkins.model.*;\nimport hudson.model.*;\n\n// disabled CLI access over TCP listener (separate port)\ndef p = AgentProtocol.all()\np.each { x ->\n  if (x.name.contains(\"CLI\")) p.remove(x)\n}\n\n// disable CLI access over /cli URL\ndef removal = { lst ->\n  lst.each { x -> if (x.getClass().name.contains(\"CLIAction\")) lst.remove(x) }\n}\ndef j = Jenkins.instance;\nremoval(j.getExtensionList(RootAction.class))\nremoval(j.actions)\n\nin order to make the workaround persist between restarts of the Jenkins server, add the script below to $JENKINS_HOME/init.groovy.d/cli-shutdown.groovy (create the directory if necessary, and the file).\n\nThe latest version of this script can be found in this GitHub repository.\n\nAs previously announced on the jenkinsci-advisories mailing list we’re preparing a security release for this upcoming Wednesday which will include patches for both the latest and LTS lines of Jenkins core. The Jenkins Security team is working to include a fix for this previously undisclosed exploit in or before this planned security release.\n\nIf you have questions about this exploit, join us in the #jenkins channel on Freenode or ask on the jenkinsci-users@ mailing list.\n\nFor security researchers and hobbyists, if you believe you have found a security vulnerability in Jenkins, we have some disclosure guidelines on this wiki page which will help us mitigate any discovered issues as quickly and safely as possible.\n\nBe sure to subscribe to the jenkinsci-advisories mailing list ( jenkinsci-advisories), it’s the fastest way to get updates by the Jenkins Security team.","title":"Mitigating unauthenticated remote code execution 0-day in Jenkins CLI","tags":["general","core","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-11-06T00:00:00.000Z","id":"e0610191-1961-5c28-92d5-a79db68f7476","slug":"/blog/2015/11/06/october-jams/","strippedHtml":"It is great to see the pick up of local activities through hosted JAMs. In October, the Jenkins community hosted Atlanta JAM and Bay Area JAM. Many thanks to our sponsors: Ericsson, CloudBees, Blazemeter, NetRoadShow.\n\nHere’s a summary of what was discussed:\n\nAtlanta JAM - Jenkins workflow and Docker to reduce friction in DevOps efforts.\n\nBay Area JAM- Performance testing strategies, incorporating performance tests into Jenkins workflows and the metrics that matter most for troubleshooting and diagnosing issues.\n\nA look forward to November and December:\n\nHacksgiving\n\nBarcelona, Spain JAM\n\nToulouse,France JAM\n\nAs usual, if you’re interested in becoming an organizer or sponsor, here’s how to get started. If you’ve heard of a great Jenkins talk out there, shoot us an email with speaker info to jenkinsci-jam@googlegroups.com so we can invite him/her to our next meetups.","title":"October JAMs","tags":["general","cia","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2015-11-11T00:00:00.000Z","id":"dcbd477f-2b63-58f9-a3e8-31b6f69a3c77","slug":"/blog/2015/11/11/new-jenkins-releases-with-important-security-fixes/","strippedHtml":"We just released Jenkins 1.638 and 1.625.2 which contain important security fixes, including a fix for the zero-day vulnerability published on Friday. Please see the security advisory for more information.\n\nWant to be kept up to date on Jenkins security releases, including advance notice on scheduled security updates? Subscribe to the jenkinsci-advisories mailing list!","title":"New Jenkins releases with important security fixes","tags":["general","core","news","releases","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-11-16T00:00:00.000Z","id":"db5c80d7-2a54-5a76-971c-c77bb53ad0d6","slug":"/blog/2015/11/16/celebrating-hacksgiving/","strippedHtml":"Next week in the US we have a national holiday where, generally speaking, lots of turkey gets converted into left-over turkey sandwiches. For many software developers the Thanksgiving holiday also represents a lull in project schedules, freeing up some time to hack on pet projects or even contribute to open source projects.\n\nTaking a cue from the Adopt a Plugin program that Daniel wrote about earlier this month, we thought it would be fun to organize a \"virtual hackathon\" to coincide with that gap in project schedules. Thus Hacksgiving 2015 was created!\n\nWe’ll be hosting Hacksgiving Nov 23rd and Nov 24 from 7:00PST - 15:00PST (10:00EST - 18:00EST) and would love for you to join! ( RSVP here)\n\nYou don’t need to know Java to help! We will have documentation and design hacking going on as well.\n\nWe have a few goals for Hacksgiving:\n\nIntroduce new contributors to the process of writing code and/or documentation ( documentation hacking details here).\n\nFind some plugins which are up for adoption new maintainers.\n\nClean up or merge some existing plugins which need some care ( listed here).\n\n=== Sessions to note\n\nHere are some of the sessions scheduled that will be hosted by members of community that may interest you:\n\nDay One\n\n7:00PST/10:00EST ( 15-30min) - rtyler will host a welcome and introduction to contribution to the Jenkins project (walking through our contributors guide)\n\n10:00PST/13:00EST ( 60min) - schristou will host a workshop titled \"Introduction to plugin development for Jenkins\"\n\nDay Two\n\n10:00PST/13:00EST ( 60min) - abayer will be hosting a \"Plugin Developer Open Q&A\" session, so bring your questions!\n\nHacksgiving is very unconference structured right now, so if you’re interested in hosting a session please let us know in the #jenkins-community channel or by signing up for a session on the schedule\n\nHow to participate\n\nSince this is a virtual hackathon, we’ll be congregating and chatting in a couple of ways:\n\nOn the #jenkins IRC channel as per usual\n\nWe’ll be hosting sessions and tutorials via Google Hangouts, see the \" hacker hangout * section on the wiki page up to date details\n\nVia the #hacksgiving hashtag on Twitter\n\nYou can also RSVP on our meetup page!\n\nWe hope you can join in the festivities!","title":"Celebrating Hacksgiving!","tags":["general","cia","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-12-02T00:00:00.000Z","id":"225e35ac-aaf9-5523-a569-3d9679163b6e","slug":"/blog/2015/12/02/hacksgiving-left-overs/","strippedHtml":"Last week we hosted our first Hacksgiving event, a two-day virtual hackathon with a number of recorded sessions and plenty of pull requests submitted, I would say it was a success! I would like to thank everybody who took the time to watch, chat and present in the Hacker Hangout.\n\nNow that everybody has had time to recover from the turkey and travel, we have some videos of the sessions sliced out and ready for publication.\n\nIn addition to the recorded sessions, there were a number of notes captured with useful links associated with practically each session. You can find those notes at the bottom of the Hacksgiving page.\n\nThe following videos are all available in this YouTube playlist\n\nIntro to the Jenkins project\n\nThis session was hosted by rtyler and meant to provide a cursory overview of where to get started with contributing to the Jenkins project\n\nIntro to Plugin Development Workshop\n\nThis session was given both days of Hacksgiving by schristou and does a really great job of introducing the viewer to getting started with developing a Jenkins plugin with Java.\n\nWorkflow Q&A and Demo Session\n\nThis session was not originally scheduled, but some folks on the Jenkins IRC channel had some Workflow questions and Jesse Glick jumped into the Hacker Hangout to help us out!\n\nInternationalization Live Coding / Q&A\n\nAnother impromptu session, this time with danielbeck hosting. In this session Daniel walks through a plugin he was working on for Hacksgiving and adds internationalization support while answering a few questions here and there.\n\nIntro to the new static site\n\nKicking off day two of Hacksgiving, rtyler hosted a session on the new statically-generated Jenkins site. The new site will dramatically lower the barrier to entry for contribution to Jenkins documentation and blogs, by pushing everything through GitHub.\n\nPlugin Developer Open Q&A\n\nThis was the last session of Hacksgiving, hosted by abayer and ended up being more like a casual discussion of the current status and future work in the plugin development ecosystem.","title":"Hacksgiving Left-overs","tags":["general","meetup","video","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-12-03T00:00:00.000Z","id":"51e550d9-2ab9-5be8-be79-96bef6d8ca1a","slug":"/blog/2015/12/03/pipeline-as-code-with-multibranch-workflows-in-jenkins/","strippedHtml":"Note: This is a guest post by Kishore Bhatia. Kishore works for CloudBees, building custom frameworks with Open Source software and helping customers solve engineering problems around continuous delivery and DevOps at scale.\n\nThis year some great new Jenkins features came out of the butler’s goodie bag - amongst them, the most important one being the ability to realize continuous delivery pipeline as code!\nThe features like Workflow Multibranch, pipeline-as-code (with a marker file that Jenkins looks for in your application’s SCM repository/branch, aptly named Jenkinsfile) are the foundations to making Jenkins super intelligent to automagically create workflows (rather, a CI/CD pipeline) to build your code and orchestrate the work required to drive your application from concept to delivery!\n\nOverview\n\nThe Workflow Multibranch feature (provided by the workflow plugin) provides the following key abilities:\n\nAutomatic Workflow (job) creation in Jenkins per new branch in the repo (assuming webhooks are registered from GH to Jenkins).\n\nBuild specific to that child-branch and its unique scm change and build history.\n\nAutomatic job pruning/deletion for branches deleted from the repository, according to the settings.\n\nFlexibility to individually configure branch properties, by overriding the parent properties, if required.\n\nJenkins pipeline-as-code (concept) enables you to maintain your CI/CD workflow logic in the project/application source code repo with no additional configuration to be maintained per branch in Jenkins.\n\nThe Workflow script to build/test/deploy your code is always synchronized with the rest of the source code you are working on.\n\nTo demonstrate the concept here - Let’s use a basic Java Web application project with a Maven pom.xml as shown in the structure below (this is using GitHub as the SCM but you can do this on SVN or Mercurial too).\n\nThis project has a marker file for Jenkins in the repo - Jenkinsfile. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic1.png\n\nSo, what’s a Jenkinsfile? The Jenkinsfile is essentially your Jenkins Workflow, a script, that defines the CI/CD pipeline logic for a project with steps to build/test/deploy etc. captured in various stages.\n\nSo for our sample Java web application, a basic Jenkinsfile could be something like -\n\nnode {\n   // Mark the code checkout 'stage'....\n   stage 'Checkout'\n\n   // Checkout code from repository\n   checkout scm\n\n   // Get the maven tool.\n   // ** NOTE: This 'M3' maven tool must be configured\n   // **       in the global configuration.\n   def mvnHome = tool 'M3'\n\n   // Mark the code build 'stage'....\n   stage 'Build'\n   // Run the maven build\n   sh \"${mvnHome}/bin/mvn clean install\"\n}\n\nJust having this file in the source code repo root would mean that -\n\nJenkins will automatically recognize this branch and create appropriate jobs by itself.\n\nQuick, 1-step code checkout using: “checkout scm” in your workflow\n\nEvery time a new change is pushed to this branch, the branch is built and the commit status gets updated.\n\nWhen the branch is destroyed in the repository, or if Jenkinsfile is removed, the corresponding job gets destroyed from Jenkins automatically ( You can retain these jobs and/or archive the builds for audit/compliance requirements using the retention property - Orphan Item strategy)\n\nthere are various mechanisms to promote reuse of Workflow scripts, such as the Workflow Global Library.\n\nRequired Jenkins configuration\n\nMake sure you’ve the latest Workflow and (v1.11 as of writing this blog) Workflow Multibranch plugins installed on your Jenkins instance image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic2.png\n\nAlso, ensure that other dependencies, like SCM plugins and build tools, are met:\n\nEither SVN/Git/Mercurial (depending on your SCM)\n\nGitHub Branch Source Plugin (optimized to use the GitHub API and improve performance)\n\nMaven build tool\n\nFinally, make sure you’ve created the required Webhook from your SCM (Github in this case) to Jenkins.\nHere’s how to do that:\n\nSetting up GitHub Webhooks in Jenkins\n\nStep-by-step guide to setting up Jenkins for GitHub projects\n\nThen create a new Multibranch Workflow Job with configuration as shown below - mainly selecting the Branch Sources (Git, in this example) and providing the branch/repo URL with credentials.\n\nBranch sources (Git) - https://github.com/kishorebhatia/pipeline-as-code-demo (or a repo where you’ve cloned this source code with Jenkinsfile)\n\nLeave all other properties default and Save. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic3.png\n\nYou’ll observe that Jenkins would perform Branch Indexing on that “cd” job folder and start the workflow for the master branch, with an automatically created new job, named master, under the “cd” folder.\n\nThe workflow does a dummy step for application deploys to the environments in this sequence Staging -> Waits for manual approval -> PROD\n\nNow, let’s create a new branch off of this master branch in your cloned git repo:\n\n$ git branch newBranch (create a newBranch)\n\n$ git checkout newBranch (switches to newBranch)\n\n$ git push --set-upstream origin newBranch (pushes newBranch)\n\nYou’ll observe that your Jenkins instance automatically picks up this newBranch and starts running the workflow (with the Jenkinsfile in this newBranch) to build/test/deploy the code. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic4.png\n\nNext, if you now delete this newBranch ( git branch -D newBranch), Jenkins will automatically remove the orphan Workflow job for newBranch. You can retain these jobs even after the branches are deleted using the Orphaned Item Strategy property in the main \"cd\" job’s configuration.\n\nSo we observed the following benefits of this pipeline-as-code approach:\n\nOverall job definition is a script (Jenkinsfile)\n\nCalls your build tools and scripts for details\n\nThe build script can be versioned alongside project sources\n\nJenkins handles feature/experimental branches automatically\n\nKeep less configuration in $JENKINS_HOME\n\nDockerized Demo environment\n\nYou can also use the following docker image to run this demo with a preconfigured Jenkins environment and the sample job: jenkinsci/workflow-demo (i.e. docker pull jenkinsci/workflow-demo)\n\nThis docker container includes Jenkins with Workflow and Workflow Multibranch plugins, a local git repo with the aforementioned Java web application and Jetty to demonstrate a continuous delivery pipeline of this application deployed and tested across multiple environments in the pipeline with an approval gate before promoting to PROD (like QA, Staging and PROD).\n\nThere’s a \"cd\" job pre-configured as a multibranch Workflow job.\n\nLaunch the docker demo as: docker run -p 8080:8080 -p 8081:8081 -p 9418:9418 -ti jenkinsci/workflow-demo\n\nNow, you can access Jenkins on port 8080 and Jetty on port 8081 from localhost or the IP of your boot2docker/docker-machine environment.\n\nThe demo container has a local git repo so you can clone: git://localhost/repo. When creating new branches, each branch automatically creates a matching subproject in Jenkins and triggers the build for that branch. The workflow:\n\nChecks out source code from the same repository and commit as Jenkinsfile.\n\nBuilds sources via Maven with unit testing.\n\nRuns two parallel integration tests that involve deploying the app to ephemeral server instances, which get thrown away when tests are done (this is done by using auto-deployment of Jetty)\n\nOnce integration tests are successful, the webapp gets to the staging server at localhost:8081/staging (or your docker-machine/boot2docker instance IP)\n\nrequires a human to Manually inspect the staging instance, and when ready, approves the deployment to the production server at http://localhost:8081/production/\n\nReferences\n\nDeveloper blog by jglick introducing multibranch support\n\nworkflow plugin tutorial\n\nworkflow plugin presentations\n\nworkflow plugin demo readme","title":"Pipeline-as-code with Multibranch Workflows in Jenkins","tags":["general","guest post","tutorial","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-12-09T00:00:00.000Z","id":"148dd449-fc89-5659-8d17-987049a9f589","slug":"/blog/2015/12/09/security-updates-released-today/","strippedHtml":"We released Jenkins updates today that include important security fixes: 1.641 and 1.625.3. For detailed information about the security content of these updates, see the security advisory.\n\nOne of these fixes, SECURITY-95, results in possible problems in plugins such as Maven Plugin, Javadoc Plugin, and HTML Publisher Plugin, so make sure to read all about that in the documentation.\n\nPlease note that the update site may lag a bit behind. If you want to update as soon as possible, download the releases from our site.","title":"Security updates released today","tags":["general","core","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2015-12-16T00:00:00.000Z","id":"c4dd7873-a1dc-5a87-918b-4c7455812df3","slug":"/blog/2015/12/16/workflow-best-practices-and-examples-repo-on-github/","strippedHtml":"A lot of people are using the Workflow plugin, but as with any scripting environment, users often have to start from scratch and learn the same lessons and shortcuts that other users have already learned. While there are blog posts from developers and users in various places, and some samples in the Workflow plugin documentation, more examples and tips and tricks are always, always useful. To help with that, we’ve created the workflow-examples repository on GitHub, as a place to store community-developed Workflow scripts that can help new users get started, show how to accomplish some non-trivial goals, and find tips and trick for taking your Workflow pipeline to the next level.\n\nThe repository has four directories:\n\ndocs/ - documentation, guides, and more. Including a Best Practices document. We’d love to see more contributions to that doc, as well as any new ones that would be helpful to Workflow users!\n\nworkflow-examples/ - general Workflow examples, showing how to use a given plugin with Workflow, quirks of the Workflow DSL syntax, and more.\n\nglobal-library-examples/ - examples of how to write code for the Workflow global library.\n\njenkinsfile-examples/ - Sample Jenkinsfiles or other Workflow scripts from SCM .\n\nDuring Hacksgiving some initial content was added, but not everything is covered yet, which is why I’m posting this - more is needed. We’d love to see your tips, examples, gotchas and more. If you’ve got Workflow scripts you’d like to contribute, please read the README and send a pull request. Thanks!","title":"Workflow Best Practices and Examples repo on GitHub","tags":["general","jenkinsci","pipeline","workflow"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2015-12-17T00:00:00.000Z","id":"25d15c7f-eb14-5532-a562-3f50bc16c8cf","slug":"/blog/2015/12/17/fosdem-2016-travel-grant-program/","strippedHtml":"While we are gearing up for FOSDEM 2016 early next year in Brussels, I wanted to remind the Jenkins community about our Travel Grant Program. We’re a little late on mentioning it, but the board has allocated the money to help Jenkins contributors travel to Brussels to participate in FOSDEM and the Jenkins Contributor Summit which we will be hosting the day after, Feb 1st, which we’ll discuss more in a later blog post.\n\nFor the FOSDEM Travel Grant Program, we are able to cover up to $500 (USD) in expenses to help community members participate in FOSDEM.\n\nIf you’re interested, please read the description of the program below. Please note that some of the details of the program are different from the linked grant program page\n\nRegardless we hope to see you all at FOSDEM on January 30th and 31st, 2016, in Brussels!\n\nEligibility\n\nAll community members are eligible for support unless they’ve received a travel grant within the last year (based on the event’s date). However, as we have very limited funds to support this program, we’ll prefer applications by active contributors to the Jenkins project.\n\nIf you have other possible funding sources, please look to them first. This will allow more people to attend a Jenkins community event.\n\nApplication\n\nThe application process for FOSDEM, due to our poor timing, deviates from the traditional Travel Grant Program.\n\nTo apply for a travel grant, send an email with the following information to the Governance Board at jenkinsci-board@googlegroups.com before January 6th.\n\nYour name\n\nThe event you’d like to attend\n\nThe expected cost of travel (airfare, hotel, conference fees, etc.)\n\nA description of your contributions to the Jenkins project, such as:\n\nPlugins you developed\n\nPull requests you authored\n\nDocumentation you wrote\n\nPublic presentations on Jenkins-related topics\n\nWhy should we sponsor your trip?\n\nApplicants Responsibilities\n\nIf you’ve been selected for a travel grant, we’ll expect you to:\n\nBe available for a blog post about this program before the event.\n\nHelp out at the Jenkins stand at FOSDEM\n\nIf your schedule permits, we’d love to see you at the Jenkins 2.0 Contributor Summit the day after FOSDEM.\n\nIt should go without saying that we expect all Jenkins contributors representing the project at an event such as FOSDEM to act in a respectful and constructive manner. As we have not yet formally adopted our own Code of Conduct, we recommend reviewing the FOSDEM Code of Conduct.\n\nAfter the trip, please submit a travel report to jenkinsci-dev@googlegroups.com mailing list. This report should include the following:\n\nWhat you accomplished at the event\n\nWhat you learned at the event\n\nContacts you made\n\nOther useful information\n\nWe also expect you to submit your receipts via email to the person mentioned in the travel grant confirmation for review. We will reimburse actually incurred costs up to the 500 USD limit.","title":"FOSDEM 2016 Travel Grant Program","tags":["general","cia"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2015-12-18T00:00:00.000Z","id":"a00a23d6-4c0c-526f-ba6b-1a6ada810f54","slug":"/blog/2015/12/18/december-jam-world-tour-jenkins-developers-and-users-meetup-group-sf/","strippedHtml":"Thank you to Netflix for sponsoring the yummy\nburrito bar and offered up their brand new auditorium to host Jenkins\nDevelopers and Users Meetup group on Dec 16. We had 96 RSVPs which was\nimpressive. Our speaker for the evening was Akshay Dayal, Software Engineer at\nGoogle. Akshay’s session was about Scaling Jenkins - how and why Google decided\nto scale their existing Jenkins cluster (OSS) to meet their\nsecurity/availability and failover requirements and how heavy automation played\nan important role in this effort.\n\nThe second talk was about how Google worked with Jenkins to read config data\nexternally. Slides are listed below. The video will be posted on the meetup\npage) once it becomes\navailable.\n\nSlides for the talks are linked below:\n\nScaling Jenkins\n\nExternal Project\n\nCheck out where Jenkins Area Meetups\n(JAMs) are located in the world. Don’t see a JAM in your area? why not start\nyour own, here’s\nhow.","title":"December JAM World Tour: Jenkins Developers and Users Meetup Group, SF","tags":["general","meetup","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2015-12-18T00:00:00.000Z","id":"b41e85fa-4b38-5644-8201-f2b6ab656c3e","slug":"/blog/2015/12/18/december-jam-world-tour-lima-peru/","strippedHtml":"Although December is a short month due to the holidays, there has been a good\namount of local Jenkins activities that took place regardless of holiday\nobligations. Today and tomorrow I will be doing a series of posts to summarize\nDecember JAM World Tour. Special thanks to the JAM organizers and co-organizers\nwho made it all happen in these cities:\n\nLima, Peru\n\nSt.Petersburg, Russia\n\nToulouse, France\n\nBay Area, CA\n\nOn December 9 Lima JAM\nhosted their first Jenkins meetup in Lima, Peru. There were attendance from\nvarious roles of DevOps: Dev, QA, and Ops. There was also a good mixture of\ndifferent levels of Jenkins users, some were new and just starting to use\nJenkins while others had extensive Jenkins experience.\n\nThe group has been invited by Docker and Ansible meetup organizers for a joint\nevent in January to showcase technologies from Jenkins, Docker, and Ansible.\nCongrats to Lima JAM group.\n\nSlides from the meetup can be found\nhere. Additional shared resources used in\nthe Lima JAM can be found here.\n\nCheck out where Jenkins Area Meetups\n(JAMs) are located in the world. Don’t see a JAM in your area? why not start\nyour own, here’s\nhow.","title":"December JAM World Tour:  Lima, Peru","tags":["general","meetup","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2015-12-18T00:00:00.000Z","id":"a95ea00d-e666-5d06-bc95-2b4ab45098d1","slug":"/blog/2015/12/18/december-jam-world-tour-st-petersburg-russia/","strippedHtml":"The first Jenkins meetup in Saint Petersburg, Russia took place on December\n9th. The event has been organized with the help from Yandex and CloudBees.\n\nIn total there were about 80 attendees at the meetup. In addition to\nmeetup.com\nthe event has been promoted by Yandex so we quickly reached capacity limit.\n\nThere were 3 talks conducted, speakers from Yandex, ZeroTurnaround and\nCloudBees. We discussed the current open-source project state, ongoing\nactivities in the community, Jenkins-powered CD case studies from\nZeroTurnaround and Jenkins plugin development approaches.\n\nIntro slides [ru]\n\nWho is Mr. Jenkins? Current State, common usage issues and trends in the community [ru], by Oleg Nenashev -   [ video ]\n\nEnglish version\n\nJenkins beyond CI. ZeroTurnaround’s experience [en], by Sergei Egorov - [ video ]\n\nWhen to write your own plugin and when not to [ru], by Kirill Merkushev - [ video ]\n\nQ&A Session [ru], all speakers - [ video ]\n\nCheck out where Jenkins Area Meetups (JAMs) are located in the world. Don’t see a JAM in your area? Why not start your own, here’s how.","title":"December JAM World Tour: St. Petersburg, Russia ","tags":["general","meetup","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2015-12-21T00:00:00.000Z","id":"7ab2189c-9e15-5a58-9230-a1a13f92071b","slug":"/blog/2015/12/21/december-jam-world-tour-toulouse-france/","strippedHtml":"On December 15, the Toulouse\nJAM\nwas co-hosted with the Toulouse\nJUG and Toulouse\nDevOps. Indeed it made sense since Jenkins is\nwritten in Java, makes use of Groovy code in many places (system groovy script,\njob dsl, workflow…​), and it also made sense to co-organize with the local\nDevOps community since Jenkins is also a great tool to enable Continuous\nIntegration, Continuous Delivery and automation in general. There were 103\nRSVPs, with 80 to 90 people in attendance.\n\nThere were 3 talks planned for the evening:\n\nJob DSL\nIntro [fr], by Ghislain Mahieux\n\nVideo recording\n\nWorkflow plugin [fr], by Michaël Pailloncy (co-maintainer of the Build Trigger Badge plugin)\n\nVideo recording\n\nFeedback on almost 10 years of CI and what’s upcoming [fr], demo with Jenkins build scaling with Docker Swarm, by Baptiste Mathus\n\nVideo recording\n\nPhotos can be found here","title":"December JAM World Tour: Toulouse, France","tags":["general","meetup","jenkinsci","pipeline","workflow"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2015-12-18T00:00:00.000Z","id":"b746cb4e-561f-5752-85b6-5dfccb75f4cd","slug":"/blog/2015/12/18/join-us-at-the-jenkins-2-0-contributor-summit/","strippedHtml":"As I mentioned in yesterday’s post, we’re planning a \"Contributor Summit\" on February 1st, after FOSDEM 2016 (January 30th/31st), to focus on Jenkins 2.0. Since many of us are already planning, the Monday following the event turned out to be the ideal time to discuss 2.0.\n\nIf you’re not already familiar with some of the key proposals that were put forth, you can review them in the Jenkins 2.0 proposals summery page.\n\nWe’ve hosted one or two Contributor Summits in the past, and they’re usually a day-long event where we try to gather a number of Jenkins core/plugin developers and active/power users to have detailed discussions around the theme of the summit. For this \"Jenkins 2.0 Contributor Summit\" we do not have a complete agenda yet, but we will post that to the Meetup event once it is fully prepared in the next couple weeks.\n\nSuffice it to say, we’ll be discussing a lot!\n\nVenue and RSVP\n\nThe Contributor Summit will be hosted in a CloudBees office at: Rue des Colonies, 11, Brussels, Belgium. If you’re already planning on attending FOSDEM, the office is near Grand Place and Cafe Delerium (where the Friday beer event is hosted).\n\nThe venue is of limited size, so if you’re planning to join us, please RSVP to the Meetup event as soon as you’re certain you will be able to attend. If you find yourself unable to attend, please remove yourself from the list to ensure that we can fit as many active contributors into the office as possible!","title":"Join us at the Jenkins 2.0 Contributor Summit!","tags":["general","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-01-05T00:00:00.000Z","id":"fb18b31a-ae20-5fc0-b8ee-ee41aae1e2b0","slug":"/blog/2016/01/05/new-website/","strippedHtml":"When I first started working on the Jenkins\nwebsite, then called by a different name, I selected\nDrupal, an extensible content management system, to\nget the job done. Like Jenkins itself, Drupal is easy to set up, install\nplugins and authoring content is done in a web UI. For the past seven years Drupal\nhas served us well, but it is time to move on to something better suited for our needs.\n\nThe general requirements for something newer were:\n\nEasy to edit and create content\n\nChanges to content should be tracked and reviewable\n\nAny Jenkins contributor should be able to participate\n\nSupport mixed content types\n\nThe consensus was that a statically-generated site, with raw content hosted on\nGitHub, would meet the majority of the \"ease-of-use\" type requirements. The\nremainder could be addressed depending on the implementation. A couple of years\nago I tried to rebuild the site with static content using\nJekyll, commonly used by\nGitHub Pages, but the effort stalled as I ran\ninto challenges with the mixture of content types we need to manage (stories,\nevents, pages, people, etc).\n\nHaving recently discovered Awestruct, a more\nversatile and sophisticated static-site generator that powers sites like\nasciidoctor.org, I ventured down that path.\n\nTo make a long story short, over the holiday break I finally pulled the trigger\nand switched jenkins-ci.org over to the new site. In fact, the page you’re\nreading right now was authored and published via our new\njenkins static site.\n\nIf you look at the bottom left-hand corner of this page\nthere is a link titled \"Improve this page\" which will take you directly to\nGitHub to edit this post!\n\nWe have many more improvements to come for the Jenkins website, which are\ntracked\nin JIRA, but for now I invite members of the Jenkins community to help curate,\ncorrect and create new blog posts and pages for jenkins-ci.org!\n\nCheck it all out on GitHub","title":"A new Jenkins website","tags":["www"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-01-07T00:00:00.000Z","id":"89aaaaa5-cde6-5023-9381-353a81e305b6","slug":"/blog/2016/01/07/official-code-of-conduct/","strippedHtml":"Over the past couple months, we have been working on a long overdue\nCode of Conduct for the Jenkins project (meeting minutes\nhere\nand\nhere).\nFollowing in the footsteps of other projects like the\nApache Software\nFoundation, Go lang and\ncountless others, we have adopted this\ncode of conduct to help set guidelines for what behaviors are acceptable, and\nwhat behaviors are not, when acting within the Jenkins community or on behalf\nof the Jenkins project.\n\nI would like to extend our gratitude to the authors of\nthe Contributor Covenant who provided us\nwith a very good and mostly finished Code of Conduct template. We have\nadapted the covenant to meet the unique needs of a multifaceted\nproject like Jenkins.\n\nThe document itself is broken down into three sections, all of which I\nencourage you to read:\n\nThe code of conduct itself\n\nInstructions on how to report problems\n\nAn outline of how violations will be handled\n\nSimilar to many other process and philisophical documents in the Jenkins\nproject, the document is not etched in stone and is therefore intended to be\nupdated. If you’re interested in participating in the discussion about this,\nand other topics around how the Jenkins project operates, I invite you to the\n#jenkins-community IRC channel on the Freenode\nnetwork or to our regularly scheduled\ngovernance\nmeetings.","title":"Jenkins Code of Conduct","tags":null,"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-01-04T00:00:00.000Z","id":"384f4bba-69ff-5581-81d1-4fe0ea905976","slug":"/blog/2016/01/04/jenkins-at-scale14x/","strippedHtml":"For the past few years, a couple members of the Jenkins project have made the\ntrip to Los Angeles for the\nSouthern California Linux Expo.\nDespite the name it’s a fairly broad open source technology conference and\nsince it is hosted prior to FOSDEM, it’s also a good\nconference to get us in the open source mood after the holiday break.\n\nUnlike previous years, when SCaLE was hosted at the LAX Hilton, this year it has\ngrown and moved to the\nPasadena Convention\nCenter. There, as with previous years, we’ll have a table in the expo hall with plenty of\nstickers and perhaps some other forms of swag available for devotees to\ncollect.\n\nThe expo hall will be open January 23rd and January 24th, and a few Jenkins\ncontributors will be there to ask questions to, talk about CI/CD and hand out\nstickers.\n\nAdditionally, I have a presentation on\nSaturday, January 23rd titled\n\" Continuous\nDelivery of Infrastructure with Jenkins\"\n\nTalk abstract \"\"\nIn this talk we will review continuous delivery concepts and put them into\npractice by building a continuous delivery pipeline with Jenkins to test, stage\nand deploy to infrastructure code to production. Reducing the effort, error\nrate and time it takes to deploy a configuration to change to production means\nless time fighting fires and more time doing what you want.\n\"\"\n\nDuring the talk I’ll be highlighting some of the positive, and negative,\npatterns used by the Jenkins\ninfrastructure team to manage, test and deliver the Jenkins project’s own\ninfrastructure. Sort of a followup from my\n2014 PuppetConf talk about\nmigrating Jenkins infrastructure from controllerless\nPuppet to a\nPuppet Enterprise oriented\ninstallation.\n\nIf you’re in the LA area, we hope to see you for SCaLE 14X in Pasadena!","title":"Jenkins at SCaLE 14x","tags":["meetup","jam"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-01-26T00:00:00.000Z","id":"062baec5-d7d9-57fc-b96c-7feeaee58ad1","slug":"/blog/2016/01/26/office-hour-javascript-development/","strippedHtml":"Tom Fennelly will host tomorrow’s office hour on JavaScript in Jenkins.\nThe intended audience for this presentation is core and plugin developers.\nIn his own words:\n\nI believe strongly that we can make meaningful user experience improvements to Jenkins, but it will require having more weapons in our arsenal in terms of how we build plugins etc. This is what we’ll be talking about in this week’s office hour. It will be a developer-focused session where we’ll start off by talking a little about how UI development has traditionally been done in Jenkins, before moving on to some newer patterns and tools that we have been developing over the last few months that let us make use of a wider range of more modern client-side development tools. We’ll also dissect and run some sample plugins that show these newer client-side dev tools in action.\n\nAs usual, the session will start 11am PST. Links to watch and participate will be posted to the Office Hours wiki page before it starts.","title":"Office Hour: The State of JavaScript in Jenkins","tags":["office hours"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2016-01-27T00:00:00.000Z","id":"71059d3b-342c-5d7f-bb17-4f49e709e88c","slug":"/blog/2016/01/27/jenkins-world-call-for-papers/","strippedHtml":"This is a guest post by Alyssa Tong.\nAlyssa works for CloudBees, helping to organize\nJenkins community events around the\nworld.\n\nPlanning is underway for Jenkins World, a major Jenkins event for developers,\nrelease engineers and others interested in automation. The conference will be\nheld from September 13th to 15th in Santa Clara, California and is being\norganized and sponsored in part by CloudBees.\nJust like the \"Jenkins User Conferences\" before it, this year’s event will\nfeature many experts from the Jenkins community that help make Jenkins\nthe most popular open source automation server on the planet. We’ve found that\nwe outgrew the popular multi-city one-day Jenkins User Conferences, so unlike\nprevious years Jenkins World will be a three-day event in one place with an\nincredible amount of great content.\n\nThe goal of the event is to bring Jenkins contributors and users of all levels\ntogether, from around the world, to discuss, share and learn from one another.\nStarting today we’re opening the\ncall for\nproposals . As a global event, users from all over the world are encouraged to\nsubmit a talk between now and May 1st, 2016 (11:59pm PST).\n\nWe look forward to receiving your amazing submission, and seeing you in Santa\nClara this fall.\n\nSubmit a\nproposal today!","title":"Jenkins World 2016: Call For Papers Is Open!","tags":["jenkins world","event","jenkins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-02-06T00:00:00.000Z","id":"9cf2e2c2-42c4-541c-a75c-dd611f27f560","slug":"/blog/2016/02/06/scale14x-conference-report/","strippedHtml":"Historically January has always been a very big month for the Jenkins\ncommunity. Between FOSDEM\nSouthern California Linux Expo (also known as\nSCaLE) we seem to hand out more stickers during the last week in January than\nany other week of the year.\n\nThis year’s SCaLE 14X conference finally outgrew the LAX Hilton in Los Angeles,\nwhere it had been hosted in years past, and moved over to the Pasadena\nConvention Center in Pasadena California. While the organizers of the\nconference expanded their scope, so did the Jenkins project!\n\nIn addition to our normal Jenkins stickers, we also had some special edition\nstickers with special\nlogos to give away this year, namely:\n\nAngry Jenkins\n\nGeneral Jenkins\n\nSuperhero Jenkins\n\n\"Cute\" Jenkins\n\nNinja Jenkins\n\nTo accompany the stickers we also had both blue Jenkins and red \"Angry Jenkins\"\npins. Savvy Jenkins users might recognize \"Angry Jenkins\" from the Jenkins\nserver’s internal 500 page; fortunately however very few people that came by\nthe booth to say 'hello' were familiar with Angry Jenkins.\n\nTalking Points\n\nAside from talking about the cool stickers and pins, we spent the vast\nmajority of time talking about Jenkins to two groups of people:\n\nthose who never had actually used Jenkins, even if they had heard of it\n\nusers who knew plenty about Jenkins but hadn’t actually heard about some of\nthe Jenkins 2.0 Proposals.\n\nAnecdotally, it seemed like most of the people that I talked to about \"Jenkins\n2.0\" were pretty excited about the Jenkinsfile idea and starting to define\ntheir build processes and delivery pipelines as code\nin their source repositories.\n\nPerhaps more importantly though, we spoke with many users about where Jenkins\nis causing them pain or frustration. Speaking directly with users at events\nlike SCaLE or Jenkins Area Meetups is always fun, having a high-bandwidth\nconversation about what we can do better and/or offering solutions/workarounds\nto hopefully relieve some pain-points.\n\nIn one such case, a contributor approached me and complained that he had\nemailed the developers' mailing list and frustratingly never actually received\na response. Comically enough, neither of us were able to find the email he had\nsent the mailing list (whoops!) but because of the dynamic nature of booth-duty\nat SCaLE, we got him squared away with a repository to contribute a\nJenkins Charm for the Juju\nconfiguration management tool.\n\nJammin'\n\nAmong the booth-duty highlights was meeting a few folks who were interested on\nstarting a southern California Jenkins meetup. Over the days following the\nconference, and a brief discussion on the\njenkinsci-jam@\nmailing list, and the\nLos Angeles\nJenkins Area Meetup was born!\n\nI’m looking forward to the meetup growing over the next couple months and\nhelping build a stronger local Jenkins community in Southern Califonia for the\nother 51 weeks a year that SCaLE isn’t happening.\n\nSCaLE is one of my more favorite\nopen source conferences, the positive community in attendance, a kid-friendly\natmosphere (\"Game Night\" was a blast) and the broad spectrum of sessions\navailable make it a great way to spent the weekend in southern California.\n\nWe hope to see you there again next year!","title":"SCaLE 14x Conference Report","tags":["scale","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-02-19T00:00:00.000Z","id":"d66435ff-2d80-5ab9-ae88-1ad87bcbf426","slug":"/blog/2016/02/19/january-2016-sf-jam/","strippedHtml":"On January 20, the first San Francisco JAM\n(Jenkins Area Meetup)\nof the new year was held at Mesosphere ’s offices.\nWe had two speakers - myself, and Roger Ignazio, an infrastructure automation\nengineer at Mesosphere. Around forty people attended and enjoyed the food and\ndrinks Mesosphere provided for us.\n\nLinks to the talks are below:\n\nElastic\nJenkins with Mesos and DCOS, by Roger\nIgnazio\n\nWho is Jenkins?,\nby Andrew Bayer\n\nMore JAMs will be happening in the coming months - for example, the first\nLos Angeles JAM is\ntentatively planned for early March, 2016! You can always find out the latest\non JAMs around the world at the\nJenkins Area Meetup page.","title":"January 2016 San Francisco JAM Report","tags":["general","meetup"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2016-02-24T00:00:00.000Z","id":"835b1c88-08b7-5106-b8a6-6c102958eea3","slug":"/blog/2016/02/24/jenkins-security-update/","strippedHtml":"We released Jenkins updates today that include important security fixes: 1.650 and 1.642.2. For detailed information about the security content of these updates, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Jenkins security updates","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2016-02-29T00:00:00.000Z","id":"ae0d63e1-b43b-5b6d-8c92-24abb7eb3f56","slug":"/blog/2016/02/29/jenkins2-alphas/","strippedHtml":"After first\nannouncing the\nJenkins 2.0 effort last fall, we are pleased to announce the availability of\nthe first Jenkins 2.0 alpha builds. For months we have had builds\navailable from the jenkins_2.0\nbranch of development, but the \"alpha\" builds mark Jenkins 2.0 being\nofficially made available for testing and feedback.\n\nDownload 2.0-alpha now\n\nJenkins 2.0 Highlights\n\nPipeline as Code\n\nThe new Pipeline functionality in Jenkins allows you\nto define configuration as code, which can be checked in and version controlled\nalong with the rest of your project’s source code.\n\nDefining your pipeline’s configuration as code makes it easier to create a\nsimple \"build and test\" pipeline, while enabling more advanced and complex\npipelines through the expressive Groovy-based domain specific language.\n\nOut of the box experience\n\nFor new users, Jenkins 2.0 starts off with set of recommended plugins, seen in\nthe image above,  to help get you started with the right set of tools to get up\nand running with Jenkins quickly.\n\nFor the more adventurous users, the Jenkins 2.0 initial setup process\nalso allows you to pick and choose exactly the plugins you want to meet\nyour specific needs.\n\nTotally backwards compatible\n\nJenkins 2.0 is a drop-in replacement of the Jenkins 1.x series of releases\nand fully backward compatible. There will be practically no reason not to\nupgrade once 2.0 is released in the next couple of months.\n\nTell us what you think!\n\nWe’re very interested in your feedback on what you think of the Jenkins 2.0\npreview releases.\n\nIf you use Twitter, you can leave us some feedback\non\nTwitter\n\nOur jenkinsci-users\nmailing list is also available for feedback in\nthis thread\n\nAnd of course, since this is a preview release, if you find any issues please\nreport them to our\nissue tracker\nto the JENKINS project.","title":"Jenkins 2.0 alphas released","tags":["core","jenkins2"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-03-02T00:00:00.000Z","id":"a3eac79d-1e79-52f6-a5b7-64e85e16043b","slug":"/blog/2016/03/02/toulousejam-hackergarten/","strippedHtml":"Vous êtes développeuse ou développeur, vous avez envie de découvrir le projet\nJenkins de l’intérieur, en bricolant sur un sujet qui vous intéresse, lisez\nla suite !\n\nMercredi 9 mars, le Toulouse Jenkins Area Meetup\norganise à Toulouse un Hackergarten Jenkins, occasion idéale pour faire ses\npremiers pas dans la communauté assisté(e) d’un contributeur au projet.\n\nHackergart quoi ?\n\nHackergarten est un mot qui provient de la contraction des mots Hacker et\nKindergarten, ce dernier étant le mot allemand qui désigne en gros l’école\nmaternelle.\n\nComment ça va se passer ?\n\nEn partenariat avec le Toulouse Java User Group\n(c’est sur ce lien qu’il faut s’inscrire), nous nous donnons rendez-vous à\npartir de 18h30 dans les locaux de l’Epitech Toulouse, chacun avec son\nordinateur (non fourni), et on commence à jouer.\n\nEt c’est bien sûr gratuit et ouvert à tous.\n\nUn tableau trello a été initialisé\npour tenter de s’organiser un peu. La liste des choses à faire n’est pas du\ntout figée, et les idées sont les bienvenues.\n\nLes commentaires sont ouverts à tous, et l’accès sera donné à quiconque en fait\nla demande (façon communauté Jenkins :-)).\n\nGoodies !\n\nGrâce à l’aide de CloudBees, on a pas mal de goodies à offrir : stickers,\nbadges, t-shirts et bobble-heads !\n\nLes Bobble Heads Jenkins\n\nNous en avons 2 ! Et ceux-ci\nseront offerts au deux premiers participants à voir leur pull-request\nenvoyée pendant la soirée mergée .\n\nQue faire pour (se) préparer ?\n\nSi vous n’en avez pas, créez-vous un compte pour les services suivants :\n\nJenkins\n\nGitHub\n\nTrello\n\nAu niveau machine, idéalement, vous avez :\n\nGit et Maven bien installés\n\nDocker installé (natif sous Linux), ou via\nDocker Toolbox pour\nles autres OS\n\nDes informations plus précises seront normalement données très bientôt aux\ninscrits via meetup quant à la préparation des machines.\n\nQuel(s) langage(s) faut-il connaître ?\n\nIdéalement, puisque Jenkins est écrit en Java, il serait souhaitable que vous\n connaissiez au moins les bases.\n\nToutefois, même si par exemple vos compétences sont plutôt côté Web, il y aura\naussi des choses à faire, que ce soit jouer avec le\nnouveau site en préparation,\nou ajouter une page web câblée\nsur certains fichiers json des statistiques.\n\nConnaître au moins les bases de Git sera un gain de temps, mais ce n’est pas\nindispensable.\n\nRécapitulatif\n\nlocale=fr-FR\">Pour s’inscrire (indiquez Jenkins à la question posée au _RSVP)\n\nle tableau Trello dédié aux activités de la soirée (demandez l’accès !)\n\nCf. ci-dessus pour les choses à installer sur votre machine\n\nN’hésitez pas : l’ambiance est accueillante, et on offre les pizzas !","title":"Jenkins Hackergarten : mercredi 9 mars 2016 à Toulouse","tags":["hackergarten","jam","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}},"publicURL":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/batmat.jpg"},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat/","twitter":"bmathus"}]}},{"node":{"date":"2016-01-10T00:00:00.000Z","id":"647db960-6a1f-5ece-9887-41eb617456d8","slug":"/blog/2016/01/10/beautiful-jenkins-dashboard/","strippedHtml":"This is a guest post by Julian Kleinhans,\nSoftware Architect at AOE, who is outlining some of the\nJenkins dashboard work he’s done with\ndashing-js\n\nJenkins offers a handful of third party dashboards, but none of them are really\nbeautiful and flexible enough from my point of view. For example, I could not\nfind a solution which gives me the possibility to easily decide which data\nshould be display in the widget and which not. It also doesn`t have the\npossibility to add additional widgets to the dashboard which have nothing to do\nwith Jenkins. So I came up with something interesting that includes Jenkins\ndata. But I cannot do that with the existing built-in dashboards from Jenkins\nplugins which are Jenkins-content specific.\n\nSo I decided to write a new, flexible and extensible dashboard. To avoid\nre-inventing the wheel I also decided to use\ndashing-js as a basis and not\nJenkins itself. dashing-js is a Node.js port of\nDashing, a Sinatra -based\nframework that lets you build beautiful dashboards.\n\nThe key features of Dashing are:\n\nUse pre-made widgets, or fully create your own with Sass, HTML and CoffeeScript\n\nWidgets harness the power of data bindings (via batman.js) to keep things DRY and simple\n\nUse the API to push data to your dashboards or make use of a simple Node.js script for fetching data\n\nDrag & drop interface for re-arranging your widgets\n\nThe advantage over a native Java-based Jenkins plugin is that you don’t need to\nknow Java and the whole Java stack. You can also easily add other pre-made\nthird-party widgets, for example a GitHub Pull Request count widget or an AWS\nstatistic widget or whatever else. In other words, it is completely independent\nof Jenkins. All you need is Node.js and the permission to access the\nJenkins API.\n\nBeside dashing-js you will need my\nJenkins Job widget. It is a\ngeneric widget for Jenkins jobs which provides a highly visible view of the\nbuild status and build progress of selected Jenkins jobs. Via configuration it\nis possible to add multiple widgets for different Jenkins jobs (as you can see\nin the screenshot below).\n\nSo, all you need is dashing-js, my Jenkins Job widget and some\nnpm packages.  The installation and the setup is really\neasy and can be found here.\n\nExample","title":"A beautiful Jenkins dashboard","tags":["dashboard"],"authors":[{"avatar":null,"blog":"http://blog.kj187.de","github":"kj187","html":"<div class=\"paragraph\">\n<p>Julian Kleinhans is working as a Software Architect at <a href=\"https://www.aoe.com\">AOE GmbH</a> in Krefeld.\nBeside his passion as a developer, he is also passionate about whiskey.\nHis blog deals with various topics such as web development and whisky tasting.</p>\n</div>","id":"kj187","irc":null,"linkedin":null,"name":"Julian Kleinhans","slug":"/blog/authors/kj187/","twitter":"kj187"}]}},{"node":{"date":"2016-03-03T00:00:00.000Z","id":"ae34a976-673f-5cdd-8e5b-e2fd373cd7c6","slug":"/blog/2016/03/03/gsoc2016-announcement/","strippedHtml":"We are happy to announce that Jenkins project application has been accepted to\nGoogle Summer of Code 2016 (GSoC). Thanks\nto everybody who helped prepare the application and submitted project ideas!\n\nWe would like to invite students to join the Jenkins community and work together\non the ongoing Jenkins 2.0 activities and other medium-term projects.\n\nThe student projects we are primarily interested in would improve the overall\nJenkins user experience in a number of different aspects. This includes user\ninterface changes and stability improvements but also major new features such\nas Pipeline as code.\n\nThe projects we’ve suggested revolve around all parts of the Jenkins project:\ncore, plugins, website and our internal automation infrastructure. More details\non what has been suggested can be found on the\nwiki\nwhich include:\n\nJenkins web interface improvements\n\n\"Update Center 2.0\"\n\nNew generation of the fingerprinting engine\n\nExternal workspace manager\n\nIntegration of Docker plugins with Jenkins 2.0 features\n\nPlugins for Electronic Design Automation and Embedded tools integration\n\nImprovements of the Support plugin\n\nImprovements to Jenkins project infrastructure: core infra, website, plugin documentation and more\n\nIf you are a student:\n\nCheck out the project ideas here.\n\nSelect an interesting project idea or draft your own proposal.\n\nIf you are not familiar with Jenkins, we highly recommend trying it out with one of your previous projects. You can also try available Jenkins features from the project ideas.\n\nIntroduce yourself the community and start your project proposal discussion (see the guidelines here).\n\nJoin us at GSoC office hours. We plan to have two meetings starting on March 7th.\n\nIf you want to be a mentor:\n\nFeel free to team up with other mentors\n\nWe accept extra project proposals from mentors until March 9th.\n\nLinks\n\nJenkins project page on the GSoC2016 website\n\nGSoC2016 page on our wiki\n\nAnnouncement in Twitter","title":"Jenkins joins the Google Summer of Code 2016","tags":["general","jenkins2","gsoc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-03-11T00:00:00.000Z","id":"d6d93563-02b9-5e71-a6da-874bfa5517c1","slug":"/blog/2016/03/11/new-jenkins-20-preview/","strippedHtml":"We just published the new Jenkins 2.0-alpha-3 preview build.\n\nWhat’s new?\n\nJenkins is now secure out of the box :\nAdministrators previously had to set up authentication and authorization\nwhile Jenkins was accessible to anyone on the same network.  Now, Jenkins is\nprotected out of the box, so that it is always safe from unauthorized\naccess.\n\nPlugin selection for setup :\nWe refined the plugin selection on the setup dialog.\nYou’ve always wondered why Jenkins does not install the Git Plugin by default?\nNow it does, along with a number of other plugins popular in the Jenkins community.\nWe’re also including more plugins complementing the\nPipeline plugin :\nThe\nPipeline\nStage View plugin lets you quickly see what’s going on in your CD pipeline,\nand the GitHub\nOrganization Folder will automatically scan your GitHub organization for\nrepositories with Pipeline definitions (e.g. Jenkinsfile), and set up jobs for those.\n\nRedesigned job configuration forms :\nThe job configuration form has been redesigned so its structure is visually\nclear when showing complex configuration forms.  Additionally, the tabs on\nthe top of the page show where you are, and can be used to quickly navigate\nbetween the different sections of the configuration form.\n\nDownload now!\n\nGet Jenkins 2.0 alpha 3 now, and tell us what you think:\n\nIf you use Twitter, you can leave us some feedback\non\nTwitter.\n\nOur\njenkinsci-users@\nmailing list is also available for feedback in\nthis\nthread..\n\nAnd of course, since this is a preview release, if you find any issues please\nreport them on our\nIssue Tracker\nto the JENKINS project.\n\nWe have a list of\nknown issues on\nour wiki but if you’re not sure whether you’re experiencing a known issue or\nnot, don’t hesitate to ask!","title":"Jenkins 2.0-alpha-3 Preview Build has been released!","tags":["jenkins2"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2016-03-15T00:00:00.000Z","id":"e4799557-0475-5632-9141-cbf1a6b0bd10","slug":"/blog/2016/03/15/jenkins-certification/","strippedHtml":"This is a guest post by Francois\nDechery, he works at CloudBees managing Customer Engagement/Support, Consulting\nand Training. He is also leading the Jenkins Certification program at CloudBees\nwhich has been discussed in some of our previous ( 1,\n2,\n3)\ngovernance\nmeetings.\n\nIn the IT world, namely in software, \"certification\" is used in many different\nways and for many different purposes. From very simple and light certifications\nto very heavy and complex ones. In the \"light\" category you can usually be\ncertified on the basis of a short quiz at the end of an online training. At the\nother end of the spectrum, certifications are based on a proctored\nmultiple-choice questionnaire-based exam and/or hands-on labs. In some\nindustries, certifications are even more demanding. For instance, to become a\nCertified Public Accountant in the US, you have to pass a standard examination\nand, on top of this, each state/jurisdiction has its own set of education and\nexperience requirements that individuals must meet.\n\nCreating the Jenkins certification\n\nWhen we started our internal discussions at CloudBees regarding a certification\nprogram for Jenkins, we were aware of this broad set of certification\ndefinitions. Therefore, our first goal was to define what type of certification\nwe wanted to develop and for what purpose. We quickly agreed on the fact that it\nshould be a professional-grade certification, whose purpose would be to provide\na professional standard for the Jenkins ecosystem, benefiting both individuals\nand organizations, thanks to a common, respected and well-known body of\nknowledge and practice. \"Professional\" means that you have the expected level of\nskills and experience in order to leverage them in a professional environment,\nfor example in enterprise projects or as a consultant.\n\nMany members of the CloudBees team have firsthand experience with certification\nprograms developed in other IT ecosystems such as telecoms (Cisco),\ninfrastructure (Microsoft, Red Hat) or business applications (SAP), to name a\nfew. This was definitely the type of professional certification we wanted to\nbring to Jenkins. We knew it would represent a substantial investment but we\nalso knew that the whole Jenkins ecosystem would benefit. Whether at the overall\ncommunity or individual level, as well as IT organizations, system integrators\nor recruiting firms looking for qualified Jenkins personnel.\n\nI have had the privilege to supervise the creation and implementation of the\nJenkins Certification Program\nat CloudBees. The program is comprised of two certifications: \"Certified Jenkins\nEngineer\" (CJE) for Jenkins certification, and Certified CloudBees Jenkins\nPlatform Engineer (CCJPE) for certification on the CloudBees Jenkins Platform.\n\nWe started by creating a Certification Advisory Board whose members are:\nKohsuke Kawaguchi, Jenkins creator and CTO at\nCloudBees; Harpreet Singh, VP Products at\nCloudBees; Oliver Gondža, initially\nrepresenting the Jenkins community; Jason Shawn,\nsenior director DevOps at Ellucian, representing the CloudBees customer\nconstituency; and Jose Alvarez,\nmanaging director at Zivra, representing the CloudBees partner ecosystem.\n\nThis dedicated group helped us first to create the certification blueprint which\ndefines the main sections of the exam and their relative importance in the\noverall scoring. This blueprint also provides the high-level table of contents\nof the certification\nstudy guides.\nThey also helped to define the Jenkins Engineer profile that the certification\nassesses.\n\nWith this blueprint in hand, we put together a team of 40 Jenkins subject-matter\nexperts (SMEs), mostly from CloudBees with a few from partners. Together they\nworked for several months on the creation of hundreds of exam questions, doing\niterative peer reviews, filtering out any irrelevant or ambiguous questions and\nnarrowing down the pool of questions to the best questions for each section.\nAll this, plus a thorough analysis and balancing exercise to make sure the level\nof difficulty was evenly distributed across each section of the exam.\n\nThe big lesson from the exam creation experience is that creating a\nprofessional-grade exam is hard! And it requires very specific experience. In\nshort, being a subject-matter expert is definitely not enough and we’re glad to\nhave collaborated with Prometric 's\ncertification specialists who guided us through this process. The result is\ndefinitely worth the effort. Either of the two certifications offered within the\nJenkins Certification Program are truly what we would consider\n\"professional-grade certifications.\"\n\nWhat does certification get you?\n\nGetting certified means being recognized for your skills and experience as a\nJenkins professional. However, like any exam-based recognition, its actual value\ndepends on three criteria: the level of difficulty of the exam, its quality and\nits integrity.\n\nAs far as difficulty is concerned, it is clear that not everyone will pass and\nthat is expected from a professional-grade certification, as mentioned earlier.\nWe have definitely created an exam that is demanding. It does not only measure\nyour theoretical knowledge of Jenkins but also your hands-on practical\nexperience. To ensure its quality, we have applied best-industry practices\nregarding the exam’s creation and review process, working with certification\nspecialists. It includes the weighing of questions, the distribution of easy,\nmedium and difficult ones, the removal of any ambiguous wording, as well as\nalpha and beta final test procedures, in order to only keep the most appropriate\nquestions. We are also putting in place a formal maintenance process to capture\nany \"bug\" in the exam and adapt the questions to Jenkins evolutions over time.\nLast but not least, we ensure the exam’s integrity by working with Prometric\nfor the administration of exams. Tests are taken in fully secured and proctored\ntest rooms, without any access to any human or electronic resource and\nwithout any doubt about who takes the test. Thanks to Prometric’s hundreds\nof test centers around the world, this integrity is ensured in any location.\n\nBeyond this external recognition, getting certified is also a process that lets\nyou take a step back from your day-to-day practice of Jenkins and assess your\nskills and knowledge. You start this reassessment process by reading the Study\nGuides for the certifications. Then, by taking the test itself, you can identify\nyour strengths and weaknesses in a very practical way. In short, a certification\ngives you a measurable goal to achieve.\n\nClick here for more\ninformation on the Jenkins Certification Program by CloudBees.","title":"Introducing Jenkins Certification","tags":["certification"],"authors":[{"avatar":null,"blog":null,"github":"fdechery","html":"","id":"fdechery","irc":null,"linkedin":null,"name":"Francois Dechery","slug":"/blog/authors/fdechery/","twitter":"francoisdechery"}]}},{"node":{"date":"2016-03-18T00:00:00.000Z","id":"3e2a9396-1e25-5178-bbab-b2a05550c81a","slug":"/blog/2016/03/18/jenkins-20-test-fest/","strippedHtml":"The beta release of Jenkins 2.0 is rapidly approaching! The development team is working hard to find and squash as many bugs as possible, but do you know what would make that effort even more successful? You! A big part of Jenkins’s power lies in its extensive flexibility, but that flexibility poses challenges to testing. In short, it’s difficult for the core team to test in all the myriad environments and with all the different workflows that Jenkins users have. To give just one example, users of Jenkins on Windows often uncover Windows-specific issues that are missed during development.\n\nThat’s where you come in! The Jenkins team has organized a Test Fest to take place all day on Monday, March 21st, wherever you are. We encourage you to download the lastest alpha release of Jenkins 2.0, start it up, and configure it in the way you would your production Jenkins installation. Try out your usual workflows, install those plugins you just can’t live without, and let us know about any issues you encounter. You can file them in the Jenkins JIRA, with the label '2.0,' or you can discuss them with us in the #jenkins-testfest IRC channel on the Freenode IRC network (connect to irc.freenode.org). We encourage you to hang out with us on IRC regardless; it’ll be an all-day party!\n\nYou can also find the list of the discovered Jenkins 2.0 issues using this link.\n\nThanks in advance for joining us, and for supporting Jenkins!","title":"Jenkins 2.0 community test fest!","tags":["jenkins2"],"authors":[{"avatar":null,"blog":null,"github":"omehegan","html":"<div class=\"paragraph\">\n<p>Owen has been using and administering Jenkins for software companies since 2009 (when it was known as Hudson). He can play the guitar, he knows Morse code, and he has sometimes been known to rebuild two-stroke engines successfully on the first try.</p>\n</div>","id":"omehegan","irc":null,"linkedin":null,"name":"Owen Mehegan","slug":"/blog/authors/omehegan/","twitter":"literatesavant"}]}},{"node":{"date":"2016-03-21T00:00:00.000Z","id":"6ddd387e-8f0e-561b-ac0d-a975fc5eb865","slug":"/blog/2016/03/21/vjam/","strippedHtml":"Over the past few months, I’m happy to say, the number of\nJenkins Area Meetups (JAMs) has grown\ntremendously! The excitement around JAMs has gotten us thinking about something\nlarger, something more globally focused. That led us to create\nvJAM, an online Jenkins Area\nMeetup, where we can share what we’re learning together. The effort will be\nspear-headed by long time Jenkins contributor, R. Tyler Croy.\n\nThe key goals for the Virtual Jenkins Area Meetup are:\n\nConnect the global Jenkins user and developer community.\n\nHelp spread the latest and greatest best practices.\n\nSupport other JAMs by offering\nanother, broader, audience for speakers and organizers\n\nvJAM, originally inspired by Virtual JUG, will\nsupplement local JAMs but nothing virtual can replace the value of talking with\nother Jenkins users over pizza and drinks.\n\nWe’re currently working on the agenda for the first vJAM, which will be posted\nto this Meetup group, so be\nsure to sign up if you’re interested in participating!\n\nIf you’re interested in creating your own local Jenkins Area Meetup, read\nthis page\nfor more details.","title":"vJAM: Virtual Jenkins Area Meetup","tags":["jam"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-03-24T00:00:00.000Z","id":"9efc9db9-9325-5046-a1fb-6db8d9a413f3","slug":"/blog/2016/03/24/jenkins-2-beta-released/","strippedHtml":"We released the Jenkins 2.0 beta earlier today. Download it here and try it!\n\nBesides a number of bug fixes and minor improvements, the following changes are new since the last alpha preview release:\n\nRedesigned \"New Item\" page\n\nWe redesigned the \"New Item\" page. Item types now have icons to be more visually distinctive.\n\nAdditionally, item types can now define a category they belong to (such as \"Project\" or \"Folder\"). Once the complexity of the \"New Item\" page reaches a certain threshold, the item types will be grouped into categories to be easier to find. However, for now, it’s unlikely that you will see these categories, as support for this mechanism will need to be added in plugins. This is a new API in core, and we invite plugin developers to support it to make Jenkins easier to use for users with a large number of item types. It doesn’t even require raising the minimum supported Jenkins version.\n\nSeparate configuration page for tools\n\nThe length and complexity of the Configure Jenkins page once a few dozen plugins are installed made it unnecessarily difficult to use. To improve that we’re moving the tools configuration (Git, Maven, Gradle, Ant, etc.) out of that page, into the new Global Tools Configuration.\n\nUpgrade notice and plugin installer\n\nThe Pipeline plugin suite is a big part of Jenkins 2. Over the past few weeks, open-source plugins adding support for visualization (Pipeline Stage View), automatic GitHub project creation (GitHub Branch Source Plugin) and Bitbucket project creation (Bitbucket Branch Source Plugin) have been released. However, when upgrading from Jenkins 1.x, users weren’t even given any information on these features.\n\nTo address this, users upgrading from Jenkins 1.x will now be shown a banner when they first log into Jenkins as administrator, offering them to install the suite of Pipeline plugins.","title":"Jenkins 2.0 beta released","tags":["jenkins2"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2016-03-30T00:00:00.000Z","id":"60d21d4e-c1c0-54bb-9f04-5c3d3f2cce7a","slug":"/blog/2016/03/30/usage-statistics-privacy-advisory/","strippedHtml":"A bug was introduced in Jenkins versions 1.645 and 1.642.2 which caused Jenkins\nto send\nanonymous\nusage statistics, even if the administrator opted-out of reporting usage data\nin the Jenkins web UI.\n\nIf you are running one of the affected versions, the best/easiest solution is\nto upgrade. The bug does not affect Jenkins 1.653 or newer, or Jenkins LTS\n1.642.4 or newer.\n\nIf you cannot upgrade, it is possible to immediately disable submission of\nusage statistics by running the following script in \"Manage Jenkins » Script Console\":\n\nhudson.model.UsageStatistics.DISABLED = true\n\nThis will immediately disable usage data submission until you restart Jenkins.\nTo make this permanent, change your Jenkins startup script so it passes a\nsystem property to the java process:\n\njava -Dhudson.model.UsageStatistics.disabled=true -jar …/jenkins.war\n\nFor information how to do this when using one of the installers/packages, see the\ninstaller/package documentation here.\n\nTo verify that usage stats submission is disabled, run the following script in\n\"Manage Jenkins » Script Console\" and confirm the result is true:\n\nprintln hudson.model.UsageStatistics.DISABLED\n\nWe have much more information about the issue and our usage statistics process\nin\nour wiki.\n\nWhile we do not consider this a security advisory, if you are a Jenkins\nadministrator we highly recommend subscribing to our\njenkinsci-advisories@\nmailing list.","title":"Important notice regarding usage statistics","tags":["general"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2016-04-01T00:00:00.000Z","id":"b8091c97-4904-5c1c-adbb-76e6349003ab","slug":"/blog/2016/04/01/march-2016-jam-st-petersburg/","strippedHtml":"On March 10th we have conducted the second Jenkins meetup in Saint Petersburg,\nRussia.  The meetup topic was\"Jenkins and Continuous Delivery\".  We had 3\ntalks addressing various aspects of Jenkins usage in this area.\n\nTalks\n\nIntroduction slides [ru]\n\nJenkins 2.0 and Pipeline-as-Code\n\nSpeaker: Oleg Nenashev, CloudBees\n\nPresentation (en)\n\nPresentation (ru)\n\nContinuous Delivery for Documentation\n\nSpeaker: Stanislav Ovchar, Motorola Solutions\n\nPresentation (ru)\n\nContinuous Delivery with Jenkins at ZeroTurnaround\n\nSpeaker: Sergei Egorov, ZeroTurnaround\n\nPresentation (en)\n\nWe also had a long Jenkins afterparty. Starting from the next meetup we hope to\nmake this part more official.\n\nLinks\n\nSt. Petersburg Meetup page (follow the events here)\n\nEvent page on the Yandex.Events portal\n\nSt. Petersburg Meetup Twitter\n\nJenkins RU Twitter\n\nJenkins RU Gitter Chat\n\nAcknowledgments\n\nThe event has been organized with the help from\nYandex and\nCloudBees.\n\nMore Jenkins meetups\n\nIf you want to organize a Jenkins meetup in St. Petersburg or to be a speaker\nthere, please contact us via the\nMeetup\ndiscussions page\n\nRegarding other areas, check out where\nJenkins Area Meetups (JAMs) are\nlocated in the world.\n\nDon’t see a JAM in your area?  Why not start your own,\nfind out\nhow.","title":"March 2016 St. Petersburg Jenkins Meetup Report","tags":["jam","jenkins_ru","jenkins2"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-04-07T00:00:00.000Z","id":"e79f0919-bcdb-509d-81fc-767eb7210b3a","slug":"/blog/2016/04/07/2.0-release-candidate/","strippedHtml":"Those who fervently watch the\njenkinsci-dev@\nlist, like I do, may have caught Daniel\nBeck 's email today which quietly referenced a significant milestone on the\nroad to 2.0 which has been reached: the first 2.0 release\ncandidate is here!\n\nThe release candidate process, in short, is the final stabilization and testing\nperiod before the final release of Jenkins 2.0. If you have the\ncycles to help test, please download the release candidate and give\nus your feedback as soon as possible!\n\nThe release candidate process also means that changes targeting release after\n2.0 can start landing in the master branch, laying the groundwork 2.1 and\nbeyond.\n\nI pushed the merge to 'master'. So anything targeting 2.1+ can be now proposed\nin pull requests to that branch.\n\nAnything happening on '2.0' branch will be limited to critical fixes for the 2.0\nrelease specifically.\n\n— Daniel Beck\n\nCompared to the\n2.0 beta release, the first\nrelease candidate has a number of fixes for issues discovered in the alpha and beta\nprocess. Most notable perhaps is the stabilization of a system property which\nconfiguration management tools, like Puppet/Chef/Ansible/etc, can use to suppress\nthe user-friendly Getting Started wizard. Since users of those tools\nhave alternative means of ensuring security and correctness of their Jenkins\ninstallations, the out-of-the-box experience can be skipped.\n\nBased on our\nrough\ntimeline this gives us a couple weeks to test the release candidates and get\nready for a big exciting release of 2.0 at the end of April!","title":"Jenkins 2.0 Release Candidate available!","tags":["jenkins2"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-04-07T00:00:00.000Z","id":"dc2d5625-7a35-5883-9c50-152fda1c584a","slug":"/blog/2016/04/07/jenkins-community-survey-results-blog/","strippedHtml":"This is a guest post by Brian\nDawson at CloudBees, where he works as a DevOps Evangelist responsible for\ndeveloping and sharing continuous delivery and DevOps best practices. He also\nserves as the CloudBees Product Marketing Manager for Jenkins.\n\nLast fall CloudBees asked attendees at the Jenkins User Conference – US West\n(JUC), and other in the Jenkins community to take a survey.  Almost 250 people\ndid – and thanks to their input, we have results which provided interesting\ninsights into how Jenkins is being used.\n\nBack in 2012, at the time of the last community survey, 83% of respondents felt\nthat Jenkins was mission-critical. By 2015, the percentage saying that\nJenkins was mission-critical was 92%. Additionally, echoing the\nimportance of Jenkins, 89% of respondents said their use of Jenkins had\nincreased over the last year, while 11% said it had stayed the same. 0%\nsaid that it had decreased.\n\nThe trend in the industry over the last couple of years has been to adopt\ncontinuous delivery (CD), thus pushing automation further down the pipeline –\nfrom development all the way into production.  Jenkins being an automation\nengine applicable to any phase of the software delivery lifecycle, is readily\nsupporting this trend. Jenkins' extensible architecture and unparalleled plugin\necosystem enables integration with and orchestration of practically any tool in\nany phase of software delivery.\n\nThe trend towards adoption of CD is clearly reflected amongst the community: 59%\nof respondents are using Jenkins for continuous integration (CI), but an\nadditional 30% have extended CI into CD and are manually deploying code to\nproduction.  Finally, 11% are practicing continuous deployment – they have\nextended CI to CD and are deploying code automatically into production.\n\nAnother trend tied to the adoption of CD and DevOps is the frequent deployment\nof incremental releases to production. 26% of those respondents using continuous\ndelivery practices are deploying code at least once per day.  Another 37% are\ndeploying code at least once per week.\n\nIn keeping with the move to CD, 30% of survey takers are already using the\nrelatively new Pipeline plugin to automate their\nsoftware delivery pipelines.  Of those not using the Pipeline plugin, 79% plan\nto adopt it in the next 12 months.\n\nSurvey respondents are also using Jenkins for many different activities.  97% of\nsurvey takers use it for \"build\" – no surprise, since that is where Jenkins got\nits start - but 58% now also use it for their deployment.\n\nWhen the 2012 community survey was conducted, container technology was not as\nwell understood as it is today,  and many didn’t know what a “Docker” was. A\nshort four years later, 96% of survey respondents who use Linux containers are\nusing Docker.  Container technology has seen impressive adoption and arguably is\nrevolutionizing the way application infrastructure is delivered.  When coupled\nwith Jenkins as an automation engine, containers help accelerate software\ndelivery by providing rapid access to lightweight environments.  The Jenkins\ncommunity has recognized and embraced the power of containers by\nproviding plugins for Docker and Kubernetes.\n\nThe Jenkins improvements which survey respondents desired the most were\nquality/timely bug fixes, a better UI and more documentation/examples.\nInterestingly, Jenkins 2.0 - which is just about to officially launch,\nprovides UI improvements and the new Jenkins.io website\nprovides improved, centralized documentation.\n\nFinally, the respondents favorite Star Wars character was R2-D2, followed by\nObi-Wan and Darth Vader. Yoda and Han Solo also got a fair amount of votes. The\nvotes for Jar-Jar Binks and Jabba the Hutt left us puzzled. Notably, BB-8 had a\nwrite-in vote despite the fact the new Star Wars movie hadn’t been released yet.\n\nAs to where the community is headed, our prediction is that by the next Jenkins Community Survey:\n\nMore Jenkins users will have transitioned from just continuous\nintegration to continuous delivery with some evening practicing continuous\ndeployment\n\nPipeline plugin adoption and improvements will continue, leading to\npipeline-as-code becoming an essential solution for automating the software\n(and infrastructure) delivery process\n\nThere will be a significant increase in use of the Docker plugin to support\nelastic Jenkins infrastructure and continuous delivery of containers using\nsoftware development best practices\n\nBB-8 will be the next favorite Star Wars character! <3</p>\n\nSee you at Jenkins World, September 13-15, in Santa Clara, California!\nRegister now for the largest Jenkins event on the planet in 2016 – and get the Early Bird discount. The Call for Papers is still open – so submit a talk and share your knowledge with the community about Jenkins.\n\n2015 Community Survey Results (PDF)\n\nState of Jenkins Infographic (PDF)","title":"Jenkins Community Survey Results","tags":["continuousdelivery","pipeline","docker"],"authors":[{"avatar":null,"blog":null,"github":"bvdawson","html":"<div class=\"paragraph\">\n<p>DevOps dude at CloudBees.\nJenkins Marketing Manager.\nTools geek.</p>\n</div>","id":"bvdawson","irc":null,"linkedin":null,"name":"Brian Dawson","slug":"/blog/authors/bvdawson/","twitter":"brianvdawson"}]}},{"node":{"date":"2016-04-07T00:00:00.000Z","id":"bb46e899-10f9-583c-862c-a664e9eb81b4","slug":"/blog/2016/04/07/pipeline-for-runs-on-hardware/","strippedHtml":"In addition to Jenkins development, during last 8 years I’ve been involved into continuous integration for hardware and embedded projects.\nAt JUC2015/London\nI have conducted a talk about common automation challenges in the area.\n\nIn this blog post I would like to concentrate on Pipeline (formerly known as Workflow), which is a new ecosystem in Jenkins that allows implementing jobs in a domain specific language.\nIt is in the suggested plugins list in the upcoming Jenkins 2.0 release.\n\nThe first time I tried Pipeline two and half years ago, it unfortunately did not work for my use-cases at all.\nI was very disappointed but tried it again a year later.\nThis time, the plugin had become much more stable and useful.\nIt had also attracted more contributors and started evolving more rapidly with the development of plugins extending the Pipeline ecosystem.\n\nCurrently, Pipeline a powerful tool available for Jenkins users to implement a variety of software delivery pipelines in code.\nI would like to highlight several Pipeline features which may be interesting to Jenkins users working specifically with embedded and hardware projects.\n\nIntroduction\n\nIn Embedded projects it’s frequently required to run tests on specific hardware peripherals: development boards, prototypes, etc.\nIt may be required for both software and hardware areas, and especially for products involving both worlds.\nCI and CD methodologies require continuous integration and system testing, and Jenkins comes to help here.\nJenkins is an automation framework, which can be adjusted to reliably work with hardware attached to its nodes.\n\nArea challenges\n\nGenerally, any peripheral hardware device can be attached to a Jenkins node.\nSince Jenkins nodes require Java only, almost every development machine can be attached.\nBelow you can find a common connection scheme:\n\nAfter the connection, Jenkins jobs could invoke common EDA tools via command-line interfaces.\nIt can be easily done by a Execute shell build steps in free-style projects.\nSuch testing scheme is commonly affected by the following issues:\n\nNodes with peripherals are being shared across several projects.\nJenkins must ensure the correctness of access (e.g. by throttling the access).\n\nIn a single Freestyle project builds utilize the node for a long period. If you synthesize the item before the run, much of the peripheral utilization file may be wasted.\n\nThe issue can be solved by one of concurrency management plugins:\nThrottle Concurrent Builds, Lockable Resources\nor\nExclusions.\n\nTest parallelization on multiple nodes requires using of multiple projects or\nMatrix configurations, so it causes job chaining again.\n\nThese build chains can be created via\nParameterized Trigger and\nCopy Artifacts, but it complicates job management and build history investigation.\n\nHardware infrastructure is usually flaky.\nIf it fails during the build due to any reason, it’s hard to diagnose the issue and re-run the project if the issue comes from hardware.\n\nBuild Failure Analyzer allows to identify the root cause of a build failure (e.g. by build log parsing).\n\nConditional Build Step and\nFlexible Publish plugins allow altering the build flow according to the analysis results.\n\nCombination of the plugins above is possible, but it makes job configurations extremely large.\n\nTests on hardware peripherals may take much time.\nIf an infrastructure fails, we may have to restart the run from scratch.\nSo the builds should be robust against infrastructure issues including network failures and Jenkins controller restarts.\n\nTests on hardware should be reproducible, so the environment and input parameters should be controlled well.\n\nJenkins supports\ncleaning workspaces, so it can get rid of temporary files generated by previous runs.\n\nJenkins provides support of agents connected via containers (e.g.\nDocker) or VMs, which allow creating clean environments for every new run.\nIt’s important for 3rd-party tools, which may modify files outside the workspace: user home directory, temporary files, etc.\n\nThese environments still need to be connected to hardware peripherals, which may be a serious obstacle for Jenkins admins\n\nThe classic automation approaches in Jenkins are based on Free-style and Multi-configuration project types.\nLinks to various articles on this topic are collected on the\nHW/Embedded Solution page Embedded on the Jenkins website.\nTests automation on hardware peripherals has been covered in several publications by Robert Martin, Steve Harris, JL Gray, Gordon McGregor, Martin d’Anjou, and Sarah Woodall.\nThere is also a top-level overview of classic approaches made by me at JUC2015/London (a bit outdated now).\n\nOn the other hand, there is no previous publications, which would address Pipeline usage for the Embedded area.\nIn this post I want to address this use-case.\n\nPipeline as Code for test runs on hardware\n\nPipeline as Code is an approach for describing complex automation flows in software lifecycles: build, delivery, deployment, etc.\nIt is being advertised in Continuous Delivery and DevOps methodologies.\n\nIn Jenkins there are two most popular plugins:\nPipeline and Job DSL.\nJobDSL Plugin internally generates common freestyle jobs according to the script, so it’s functionality is similar to the classic approaches.\nPipeline is fundamentally different, because it provides a new engine controlling flows independently from particular nodes and workspaces.\nSo it provides a higher job description level, which was not available in Jenkins before.\n\nBelow you can find an example of Pipeline scripts, which runs tests on FPGA board. The id of this board comes from build parameters ( fpgaId). In this script we also presume that all nodes have pre-installed tools (Xilinx ISE in this case).\n\n// Run on node having my_fpga label\nnode(\"linux && ml509\") {\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  sh \"make all\"\n}\n\nBut such scenario could be also implemented in a Free-style project.\nWhat would we get from Pipeline plugin?\n\nGetting added-value from Pipeline as code\n\nPipeline provides much added-value features for hardware-based tests.\nI would like to highlight the following advantages:\n\nRobustness against restarts of Jenkins controller.\n\nRobustness against network disconnects. sh() steps are based on the\nDurable Task plugin, so Jenkins can safely continue the execution flow once the node reconnects to the controller.\n\nIt’s possible to run tasks on multiple nodes without creating complex flows based on job triggers and copy artifact steps, etc. It can be achieved via combination of parallel() and node() steps.\n\nAbility to store the shared logic in standalone Pipeline libraries\n\netc.\n\nFirst two advantages allow to improve the robustness of Jenkins nodes against infrastructure failures.\nIt is critical for long-running tests on hardware.\n\nLast two advantages address the flexibility of Pipeline flows.\nThere are also plugins for freestyle projects, but they are not flexible enough.\n\nUtilizing Pipeline features\n\nThe sample Pipeline script above is very simple.\nWe would like to get some added value from Jenkins.\n\nGeneral improvements\n\nLet’s enhance the script by using several features being provided by pipeline in order to get visualization of stages, report publishing and build notifications.\n\nWe also want to minimize the time being spent on the node with the attached FPGA board.\nSo we will split the bitfile generation and further runs to two different nodes in this case: a general purpose linux node, and the node with the hardware attached.\n\nYou can find the resulting Pipeline script below:\n\n// Synthesize on any node\ndef imageId=\"\"\nnode(\"linux\") {\n  stage \"Prepare environment\"\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  // Construct the bitfile image ID from commit ID\n  sh 'git rev-parse HEAD > GIT_COMMIT'\n  imageId= \"myprj-${fpgaId}-\" + readFile('GIT_COMMIT').take(6)\n\n  stage \"Synthesize project\"\n  sh \"make FPGA_TYPE=$fpgaId synthesize_for_fpga\"\n  /* We archive the bitfile before running the test, so it won't be lost it if something happens with the FPGA run stage. */\n  archive \"target/image_${fpgaId}.bit\"\n  stash includes: \"target/image_${fpgaId}.bit\", name: 'bitfile'\n}\n\n/* Run on a node with 'my_fpga' label.\nIn this example it means that the Jenkins node contains the attacked FPGA of such type.*/\nnode (\"linux && $fpgaId\") {\n  stage \"Blast bitfile\"\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  def artifact='target/image_'+fpgaId+'.bit'\n  echo \"Using ${artifact}\"\n  unstash 'bitfile'\n  sh \"make FPGA_TYPE=$fpgaId impact\"\n\n  /* We run automatic tests.\n  Then we report test results from the generated JUnit report. */\n  stage \"Auto Tests\"\n  sh \"make FPGA_TYPE=$fpgaId tests\"\n  sh \"perl scripts/convertToJunit.pl --from=target/test-results/* --to=target/report_${fpgaId}.xml --classPrefix=\\\"myprj-${fpgaId}.\\\"\"\n  junit \"target/report_${fpgaId}.xml\"\n\n  stage \"Finalization\"\n  sh \"make FPGA_TYPE=$fpgaId flush_fpga\"\n  hipchatSend(\"${imageId} testing has been completed\")\n}\n\nAs you may see, the pipeline script mostly consists of various calls of command-line tools via the sh() command.\nAll EDA tools provide great CLIs, so we do not need special plugins in order to invoke common operations from Jenkins.\n\nMakefile above is a sample stuff for demo purposes.\nIt implements a set of unrelated routines merged into a single file without dependency declarations.\nNever write such makefiles.\n\nIt is possible to continue expanding the pipeline in such way.\nPipeline Examples\ncontain examples for common cases: build parallelization, code sharing between pipelines, error handling, etc.\n\nLessons learned\n\nDuring last 2 years I’ve been using Pipeline for Hardware test automation several times.\nThe first attempts were not very successful, but the ecosystem has been evolving rapidly.\nI feel Pipeline has become a really powerful tool, but there are several missing features.\nI would like to mention the following ones:\n\nShared resource management across different pipelines.\n\nRuns of a single Pipeline job can be synchronized using the concurrency parameter of the stage() step\n\nIt can be done by the incoming Pipeline integration in the\nLockable Resources plugin\n( JENKINS-30269).\n\nAnother case is integration with\nThrottle Concurrent Builds plugin, which is an effective engine for limiting the license utilization in automation infrastructures\n( JENKINS-31801).\n\nBetter support of CLI tools.\n\nEDA tools frequently need a complex environment, which should be deployed on nodes somehow.\n\nIntegration with\nCustom Tools Plugin seems to be the best option, especially in the case of multiple tool versions\n( JENKINS-30680).\n\nPipeline package manager ( JENKINS-34186)\n\nSince there is almost no plugins for EDA tools in Jenkins, developers need to implement similar tasks at multiple jobs.\n\nA common approach is to keep the shared \"functions\" in libraries.\n\nPipeline Global Library and\nPipeline Remote Loader can be used, but they do not provide features like dependency management.\n\nPipeline debugger ( JENKINS-34185)\n\nHardware test runs are very slow, so it is difficult to troubleshoot and fix issues in the Pipeline code if you have to run every build from scratch.\n\nThere are several features in Pipeline, which simplify the development, but we still need an IDE-alike implementation for complex scripts.\n\nConclusions\n\nJenkins is a powerful automation framework, which can be used in many areas.\nEven though Jenkins has no dedicated plugins for test runs on hardware, it provides many general-purpose \"building blocks\", which allow implementing almost any flow.\nThat’s why Jenkins is so popular in the hardware and embedded areas.\n\nPipeline as code can greatly simplify the implementation of complex flows in Jenkins.\nIt continues to evolve and extend support of use-cases.\nif you’re developing embedded projects, consider Pipeline as a durable, extensible and versatile means of implementing your automation.\n\nWhat’s next?\n\nJenkins automation server dominates in the HW/Embedded area, but unfortunately there is not so much experience sharing for these use-cases.\nSo Jenkins community encourages everybody to share the experience in this area by writing docs and articles for Jenkins website and other resources.\n\nThis is just a a first blog post on this topic.\nI am planning to provide more examples of Pipeline usage for Embedded and Hardware tests in the future posts.\nThe next post will be about concurrency and shared resource management in Pipelines.\n\nI am also going to talk about running tests on hardware at the\nupcoming Automotive event in Stuttgart on April 26th.\nThis event is being held by\nCloudBees, but there will be several talks addressing Jenkins open-source as well.\n\nIf you want to share your experience about Jenkins usage in Hardware/Embedded areas, consider submitting a talk for the\nJenkins World conference or join/organize a\nJenkins Area Meetup in your city.\nThere is also a\nJenkins Online Meetup.\n\nLinks\n\nRelated articles and events:\n\nHW/Embedded Solution page\n\nJenkins-Based CI for Heterogeneous Hardware/Software Projects\n\nAccelerating Automotive Innovation with Continuous Integration & Delivery - meetup in Stuttgart\n\nPipeline:\n\nPipeline page\n\nJenkins 2.0 and Pipeline as code overview\n\nPipeline Tutorial\n\nPipeline Examples","title":"Automating test runs on hardware with Pipeline as Code","tags":["jenkins2","pipeline","embedded"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-04-11T00:00:00.000Z","id":"25d1b7f0-6783-53a9-aec5-f7242e8493d2","slug":"/blog/2016/04/11/gsoc2016-mentors-call/","strippedHtml":"As you probably know, Jenkins project has been accepted to\nGoogle Summer of Code 2016.\n\nDuring last month we were working with students in order to discuss their project ideas and to review their application drafts.\nThanks again to all students and mentors for your hard work during about ten office hours and dozens of other calls/chats!\n\nCurrent status\n\nWe have successfully handled the student application period\n\nWe have received a bunch of good project proposals (mentors cannot disclose the number)\n\nWe have done the preliminary filtering of applications\n\nGSoC mentors and organization admins have prepared the project slot application draft\n\nCurrently we are looking for mentors.\nWe have a minimal required number for the current project slot application plan, but additional expertise would allow us to share the load and to provide more expertise to students.\n\nIf you want to be a mentor:\n\nCheck out mentor requirements here.\n\nCheck out the project ideas\nhere.\n\nStudent application period is finished, so it is too late to propose project ideas for this year\n\nYou can join the mentor team for one of the mentioned projects\n\nHot areas: UI improvements, Fingerprints, External Workspace Manager\n\nContact Google GSoC admins via jenkinsci-gsoc-org@googlegroups.com\n\nLinks\n\nGSoC2016 page on our Wiki\n\nJenkins page on the GSoC2016 website","title":"Google Summer of Code. Call for Mentors","tags":["general","jenkins2","gsoc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-04-11T00:00:00.000Z","id":"e9d4f87e-38f5-5fa5-8f99-7062f5a29099","slug":"/blog/2016/04/11/jenkins-plugins-security-update/","strippedHtml":"The Script Security Plugin and the Extra Columns Plugin were updated today to fix medium-severity security vulnerabilities. For detailed information about the security content of these updates, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security fixes in Script Security Plugin and Extra Columns Plugin","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2016-04-11T00:00:00.000Z","id":"71b50dae-de34-5505-957d-a9c0f8d10044","slug":"/blog/2016/04/11/run-your-api-tests-continuously-with-jenkins-and-dhc/","strippedHtml":"This is a guest post by Guillaume Laforge.\nWell known for his contribution to the Apache Groovy project,\nGuillaume is also the \"Product Ninja and Advocate\" of Restlet,\na company focusing on Web APIs:\nwith DHC (an API testing client),\nRestlet Studio (an API designer),\nAPISpark (an API platform in the cloud),\nand the Restlet Framework\nopen source project for developing APIs.\n\nModern mobile apps, single-page web sites and applications, are more and more relying on Web APIs,\nas the nexus of the interaction between the frontend and the backend services.\nWeb APIs are also central to third-party integration, when you want to share your services with others,\nor when you need to consume existing APIs to build your own solution on top of their shoulders.\n\nWith APIs being a key element of your architecture and big picture,\nit’s obviously important to assess that this API is functioning the way it should, thanks to proper testing.\nYour framework of choice, regardless of the technology stack or programming language used,\nwill hopefully offer some facilities for testing your code,\nwhether in the form of unit tests, or ideally with integration tests.\n\nCoding Web API tests\n\nFrom a code perspective, as I said, most languages and frameworks provide approaches to testing APIs built with them.\nThere’s one I wanted to highlight in particular, which is one developed with a DSL approach (Domain-Specific Language),\nusing the Apache Groovy programming language, it’s\nAccuREST.\n\nTo get started, you can have a look at the introduction,\nand the usage guide.\nIf you use the contract DSL,\nyou’ll be able to write highly readable examples of requests you want to issue against your API,\nand the assertions that you expect to be true when getting the response from that call.\nHere’s a concrete example from the documentation:\n\nGroovyDsl.make {\n    request {\n        method 'POST'\n        urlPath('/users') {\n            queryParameters {\n                parameter 'limit': 100\n                parameter 'offset': containing(\"1\")\n                parameter 'filter': \"email\"\n            }\n        }\n        headers {\n            header 'Content-Type': 'application/json'\n        }\n        body '''{ \"login\" : \"john\", \"name\": \"John The Contract\" }'''\n    }\n    response {\n        status 200\n        headers {\n            header 'Location': '/users/john'\n        }\n    }\n}\n\nNotice that the response is expected to return a status code 200 OK, and a Location header pointing at /users/john.\nIndeed, a very readable way to express the requests and responses!\n\nTooling to test your APIs\n\nFrom a tooling perspective, there are some interesting tools that can be used to test Web APIs,\nlike Paw (on Macs),\nAdvanced REST client,\nPostman or\nInsomnia.\n\nBut in this article, I’ll offer a quick look at DHC,\na handy visual tool, that you can use both manually to craft your tests and assertions,\nand whose test scenarios you can export and integrate in your build and continuous integration pipeline,\nthanks to Maven and Jenkins.\n\nAt the end of this post, you should be able to see the following reporting in your Jenkins dashboard,\nwhen visualising the resulting API test execution:\n\nIntroducing DHC\n\nDHC is a Chrome extension, that you can\ninstall from the Chrome Web Store,\nin your Chrome browser. There’s also an online service available, with some limitations.\nFor the purpose of this article, we’ll use the Chrome extension.\n\nIn the main area, you can create your request, define the URL to call, specify the various request headers or params,\nchose the method you want to use, and then, you can click the send button to issue the request.\n\nIn the left pane, that’s where you’ll be able to see your request history, create and save your project in the cloud,\nor also set context variables.\n\nThe latter is important when testing your Web API, as you’ll be able to insert variables like for example\n{localhost} for testing locally on your machine or {staging} and {prod} to run your tests in different environments.\n\nIn the bottom pane, you have access to actual raw HTTP exchange, as well as the assertions pane.\n\nAgain, a very important pane to look at! With assertions, you’ll be able to ensure that your Web API works as expected.\nFor instance, you can check the status code of the call, check the payload contains a certain element,\nby using JSON Path or XPath to go through the JSON or XML payload respectively.\n\nBeyond assertions, what’s also interesting is that you can chain requests together.\nA call request can depend on the outcome of a previous request!\nFor example, in a new request, you could pass a query parameter whose value would be the value of some element\nof the JSON payload of a previously executed request.\nAnd by combining assertions, linked requests and context variables together, you can create full-blown test scenarios,\nthat you can then save in the cloud, but also export as a JSON file.\n\nTo export that test scenario, you can click on the little export icon in the bottom left hand corner,\nand you’ll be able to select exactly what you want to export:\n\nRunning your Web API tests with Maven\n\nNow things become even more interesting, as we’ll proceed to using Maven and Jenkins!\nAs the saying goes, there’s a Maven plugin for that! For running those Web API tests in your build!\nEven if your Web API is developed in another technology than Java, you can still create a small Maven build\njust for your Web API tests.\nAnd the icing on the cake, when you configure Jenkins to run this build, as the plugin outputs JUnit-friendly test reports,\nyou’ll be able to see the details of your successful and failed tests, just like you would see JUnit’s!\n\nLet’s sketch your Maven POM:\n\n4.0.0\n\ncom.example\nmy-first-api-test\n1.2.3\n\ncom.restlet.dhc\ndhc-maven-plugin\n1.1\n\ntest\n\ntest\n\ncompanies-scenario.json\n\nrestlet-maven\nRestlet public Maven repository Release Repository\nhttps://maven.restlet.com\n\nVisualizing Web API test executions in Jenkins\n\nOnce you’ve configured your Jenkins server to launch the test goal of this Maven project,\nyou’ll be able to see nice test reports for your Web API scenarios, like in the screenshot in introduction of this article!\n\nNext, you can easily run your Web API tests when developers commit changes to the API,\nor schedule regular builds with Jenkins to monitor an online Web API.\n\nFor more information, be sure to read the tutorial on\ntesting Web APIs with DHC.\nThere are also some more resources like a\nscreencast,\nas well as the\nuser guide, if you want to learn more.\nAnd above all, happy testing!","title":"Run Your API Tests Continuously with Jenkins and DHC","tags":["development","webapis","testing"],"authors":[{"avatar":null,"blog":"https://glaforge.appspot.com/","github":"glaforge","html":"","id":"glaforge","irc":null,"linkedin":null,"name":"Guillaume Laforge","slug":"/blog/authors/glaforge/","twitter":"glaforge"}]}},{"node":{"date":"2016-04-14T00:00:00.000Z","id":"c98c0308-267c-58ea-bd87-6999a646f331","slug":"/blog/2016/04/14/jenkins-world-registration-is-open/","strippedHtml":"This is a guest post by Alyssa Tong.\nAlyssa works for CloudBees, helping to organize\nJenkins community events around the\nworld.\n\nJenkins World 2016 will be the largest gathering of Jenkins users in the world. This event will bring together Jenkins experts, continuous delivery thought leaders and the ecosystem offering complementary technologies for Jenkins. Join us September 13-15, 2016 in Santa Clara, California to learn and explore, network face-to-face and help shape the next evolution of Jenkins development and solutions for DevOps.\n\nRegistration for Jenkins World 2016 is now live. Take advantage of the Super Early Bird rate of $399 (available until July 1st).\n\nAnd don’t forget, the Call for Papers will be ending on May 1st. That’s 2.5 short weeks left to get your proposal(s) in.  We anxiously await your amazing stories.","title":"Registration is Open for Jenkins World 2016!","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-04-14T00:00:00.000Z","id":"44aa3a43-715d-549b-b0d2-cc5c5bd94725","slug":"/blog/2016/04/14/replay-with-pipeline/","strippedHtml":"This is a cross-post of\nan article authored by\nPipeline plugin maintainer Jesse Glick on the\nCloudBees blog.\n\nFor those of you not checking their Updates tab obsessively, Pipeline 1.14 [up\nto 2.1 now] was\nreleased\na couple of weeks ago and I wanted to highlight the major feature in this\nrelease: JENKINS-32727,\nor replay. Some folks writing \"Jenkinsfiles\" in the field had grumbled that it\nwas awkward to develop the script incrementally, especially compared to jobs\nusing inline scripts stored in the Jenkins job configuration: to try a change to\nthe script, you had to edit Jenkinsfile in SCM, commit it (perhaps to a\nbranch), and then go back to Jenkins to follow the output. Now this is a little\neasier. If you have a Pipeline build which did not proceed exactly as you\nexpected, for reasons having to do with Jenkins itself (say, inability to find &\npublish test results, as opposed to test failures you could reproduce locally),\ntry clicking the Replay link in the build’s sidebar. The quickest way to try\nthis for yourself is to run the\nstock CD demo in its\nlatest release:\n\n$ docker run --rm -p 2222:2222 -p 8080:8080 -p 8081:8081 -p 9418:9418 -ti jenkinsci/workflow-demo:1.14-3\n\nWhen you see the page Replay\n#1 , you are shown two\n(Groovy) editor boxes: one for the main\nJenkinsfile , one for a library script\nit loaded\n( servers.groovy , introduced to help demonstrate this feature). You\ncan make edits to either or both. For example, the original demo allocates a\ntemporary web application with a random name like\n9c89e9aa-6ca2-431c-a04a-6599e81827ac for the duration of the functional tests.\nPerhaps you wished to prefix the application name with tmp- to make it obvious\nto anyone encountering the Jetty index page that these\nURLs are transient. So in the second text area, find the line\n\ndef id = UUID.randomUUID().toString()\n\nand change it to read\n\ndef id = \"tmp-${UUID.randomUUID()}\"\n\nthen click Run. In\nthe new build’s log\nyou will now see\n\nReplayed #1\n\nand later something like\n\n… test -Durl=http://localhost:8081/tmp-812725bb-74c6-41dc-859e-7d9896b938c3/ …\n\nwith the improved URL format. Like the result? You will want to make it\npermanent. So jump to the [second build’s index\npage]( http://localhost:8080/job/cd/branch/master/2/) where you will see a note\nthat this build > Replayed #1 (diff) If you\nclick on diff you\nwill see:\n\n--- old/Script1\n+++ new/Script1\n@@ -8,7 +8,7 @@\n }\n\n def runWithServer(body) {\n-    def id = UUID.randomUUID().toString()\n+    def id = \"tmp-${UUID.randomUUID()}\"\n     deploy id\n     try {\n         body.call id\n\nso you can know exactly what you changed from the last-saved version. In fact if you replay #2 and change tmp to temp in the loaded script, in the diff view for #3 you will see the diff from the first build, the aggregate diff:\n\n--- old/Script1\n+++ new/Script1\n@@ -8,7 +8,7 @@\n }\n\n def runWithServer(body) {\n-    def id = UUID.randomUUID().toString()\n+    def id = \"temp-${UUID.randomUUID()}\"\n     deploy id\n     try {\n         body.call id\n\nAt this point you could touch up the patch to refer to servers.groovy\n( JENKINS-31838), git\napply it to a clone of your repository, and commit. But why go to the trouble\nof editing Groovy in the Jenkins web UI and then manually copying changes back\nto your IDE, when you could stay in your preferred development environment from\nthe start?\n\n$ git clone git://localhost/repo\nCloning into 'repo'...\nremote: Counting objects: 23, done.\nremote: Compressing objects: 100% (12/12), done.\nremote: Total 23 (delta 1), reused 0 (delta 0)\nReceiving objects: 100% (23/23), done.\nResolving deltas: 100% (1/1), done.\nChecking connectivity... done.\n$ cd repo\n$ $EDITOR servers.groovy\n# make the same edit as previously described\n$ git diff\ndiff --git a/servers.groovy b/servers.groovy\nindex 562d92e..63ea8d6 100644\n--- a/servers.groovy\n+++ b/servers.groovy\n@@ -8,7 +8,7 @@ def undeploy(id) {\n }\n\n def runWithServer(body) {\n-    def id = UUID.randomUUID().toString()\n+    def id = \"tmp-${UUID.randomUUID()}\"\n     deploy id\n     try {\n         body.call id\n$ ssh -p 2222 -o StrictHostKeyChecking=no localhost replay-pipeline cd/master -s Script1 webapp-naming\n\nUsing the replay-pipeline CLI command (in this example via\nSSH)\nyou can prepare, test, and commit changes to your Pipeline script code without\ncopying anything to or from a browser. That is all for now. Enjoy!","title":"Replay a Pipeline with script edits","tags":["jenkins2","pipeline"],"authors":[]}},{"node":{"date":"2016-04-15T00:00:00.000Z","id":"fa2f2d1b-91d5-5e2e-9783-72c7059face6","slug":"/blog/2016/04/15/the-need-for-pipeline/","strippedHtml":"This is a cross-post of\nan article authored\nby Viktor Farcic on the\nCloudBees blog. Viktor is also the author\nof The DevOps 2.0 Toolkit, which\nexplores Jenkins, the Pipeline plugin, and the ecosystem\naround it in much more detail.\n\nOver the years, Jenkins has become the undisputed ruler among continuous\nintegration (CI), delivery and deployment (CD) tools. It, in a way, defined the\nCI/CD processes we use today. As a result of its leadership, many other products\nhave tried to overthrow it from its position. Among others, we got Bamboo and\nTeam City attempting to get a piece of the market. At the same time, new\nproducts emerged with a service approach (as opposed to on-premises). Some of\nthem are Travis, CircleCI and Shippable. Be that as it may, none managed to get\neven close to Jenkins' adoption. Today, depending on the source we use, Jenkins\nholds between 50-70% of the whole CI/CD tools market. The reason behind such a\nhigh percentage is its dedication to open source principles set from the very\nbeginning by Kohsuke Kawaguchi. Those same principles were the reason he forked\nJenkins from Hudson. The community behind the project, as well as commercial\nentities behind enterprise versions, are continuously improving the way it works\nand adding new features and capabilities. They are redefining not only the way\nJenkins behaves but also the CI/CD practices in a much broader sense. One of\nthose new features is the Jenkins Pipeline plugin. Before we\ndive into it, let us take a step back and discuss the reasons that led us to\ninitiate the move away from Freestyle jobs and towards the Pipeline.\n\nThe Need for Change\n\nOver time, Jenkins, like most other self-hosted CI/CD tools, tends to accumulate\na vast number of jobs. Having a lot of them causes quite an increase in\nmaintenance cost. Maintaining ten jobs is easy. It becomes a bit harder (but\nstill bearable) to manage a hundred. When the number of jobs increases to\nhundreds or even thousands, managing them becomes very tedious and time\ndemanding.\n\nIf you are not proficient with Jenkins (or other CI/CD tools) or you do not work\nfor a big project, you might think that hundreds of jobs is excessive. The truth\nis that such a number is reached over a relatively short period when teams\nare practicing continuous delivery or deployment. Let’s say that an average\nCD flow has the following set of tasks that should be run on each commit:\nbuilding, pre-deployment testing, deployment to a staging environment,\npost-deployment testing and deployment to production. That’s five groups of\ntasks that are often divided into, at least, five separate Jenkins jobs. In\nreality, there are often more than five jobs for a single CD flow, but let\nus keep it an optimistic estimate. How many different CD flows does a medium\nsized company have? With twenty, we are already reaching a three digits\nnumber. That’s quite a lot of  jobs to cope with even though the estimates\nwe used are too optimistic for all but the smallest entities.\n\nNow, imagine that we need to change all those jobs from, let’s say, Maven to\nGradle. We can choose to start modifying them through the Jenkins UI, but that\ntakes too much time. We can apply changes directly to Jenkins XML files that\nrepresent those jobs but that is too complicated and error prone. Besides,\nunless we write a script that will do the modifications for us, we would\nprobably not save much time with this approach. There are quite a few plugins\nthat can help us to apply changes to multiple jobs at once, but none of them is\ntruly successful (at least among free plugins). They all suffer from one\ndeficiency or another. The problem is not whether we have the tools to perform\nmassive changes to our jobs, but whether jobs are defined in a way that they can\nbe easily maintained.\n\nBesides the sheer number of Jenkins jobs, another critical Jenkins' pain point\nis centralization. While having everything in one location provides a lot of\nbenefits (visibility, reporting and so on), it also poses quite a few\ndifficulties. Since the emergence of agile methodologies, there’s been a huge\nmovement towards self-sufficient teams. Instead of horizontal organization with\nseparate development, testing, infrastructure, operations and other groups, more\nand more companies are moving (or already moved) towards self-sufficient teams\norganized vertically. As a result, having one centralized place that defines all\nthe CD flows becomes a liability and often impedes us from splitting teams\nvertically based on projects. Members of a team should be able to collaborate\neffectively without too much reliance on other teams or departments. Translated\nto CD needs, that means that each team should be able to define the deployment\nflow of the application they are developing.\n\nFinally, Jenkins, like many other tools, relies heavily on its UI. While that is\nwelcome and needed as a way to get a visual overview through dashboards and\nreports, it is suboptimal as a way to define the delivery and deployment flows.\nJenkins originated in an era when it was fashionable to use UIs for everything.\nIf you worked in this industry long enough you probably saw the swarm of tools\nthat rely completely on UIs, drag & drop operations and a lot of forms that\nshould be filled. As a result, we got tools that produce artifacts that cannot\nbe easily stored in a code repository and are hard to reason with when anything\nbut simple operations are to be performed. Things changed since then, and now we\nknow that many things (deployment flow being one of them) are much easier to\nexpress through code. That can be observed when, for example, we try to define a\ncomplex flow through many Jenkins jobs. When deployment complexity requires\nconditional executions and some kind of a simple intelligence that depends on\nresults of different steps, chained jobs are truly complicated and often\nimpossible to create.\n\nAll things considered, the major pain points Jenkins had until recently are as\nfollows.\n\nTendency to create a vast number of jobs\n\nRelatively hard and costly maintenance\n\nCentralization of everything\n\nLack of powerful and easy ways to specify deployment flow through code\n\nThis list is, by no means, unique to Jenkins. Other CI/CD tools have at least\none of the same problems or suffer from deficiencies that Jenkins solved a long\ntime ago. Since the focus of this article is Jenkins, I won’t dive into a\ncomparison between the CI/CD tools.\n\nLuckily, all those, and many other deficiencies are now a thing of the past.\nWith the emergence of the\nPipeline\nplugin and many others that were created on\ntop of it, Jenkins entered a new era and proved itself as a dominant player in\nthe CI/CD market. A whole new ecosystem was born, and the door was opened for\nvery exciting possibilities in the future.\n\nBefore we dive into the Jenkins Pipeline and the toolset that surrounds it, let\nus quickly go through the needs of a modern CD flow.\n\nContinuous Delivery or Deployment Flow with Jenkins\n\nWhen embarking on the CD journey for the first time, newcomers tend to think\nthat the tasks that constitute the flow are straightforward and linear. While\nthat might be true with small projects, in most cases things are much more\ncomplicated than that. You might think that the flow consists of building,\ntesting and deployment, and that the approach is linear and follows the\nall-or-nothing rule. Build invokes testing and testing invokes deployment. If\none of them fails, the developer gets a notification, fixes the problem and\ncommits the code that will initiate the repetition of the process.\n\nIn most instances, the process is far more complex. There are many tasks to run,\nand each of them might produce a failure. In some cases, a failure should only\nstop the process. However, more often than not, some additional logic should be\nexecuted as part of the after-failure cleanup. For example, what happens if\npost-deployment tests fail after a new release was deployed to production? We\ncannot just stop the flow and declare the build a failure. We might need to\nrevert to the previous release, rollback the proxy, de-register the service and\nso on. I won’t go into many examples of situations that require complex flow\nwith many tasks, conditionals that depend on results, parallel execution and so\non. Instead, I’ll share a diagram of one of the flows I worked on.\n\nSome tasks are run in one of the testing servers (yellow) while others are run\non the production cluster (blue). While any task might produce an error, in some\ncases such an outcome triggers a separate set of tasks. Some parts of the flow\nare not linear and depend on task results. Some tasks should be executed in\nparallel to improve the overall time required to run them. The list goes on and\non. Please note that this discussion is not about the best way to execute the\ndeployment flow but only a demonstration that the complexity can be, often, very\nhigh and cannot be solved by a simple chaining of Freestyle jobs. Even in cases\nwhen such chaining is possible, the maintenance cost tends to be very high.\n\nOne of the CD objectives we are unable to solve through chained jobs, or is\nproved to be difficult to implement, is conditional logic. In many cases, it is\nnot enough to simply chain jobs in a linear fashion. Often, we do not want only\nto create a job A that, once it’s finished running, executes job B, which, in\nturn, invokes job C. In real-world situations, things are more complicated than\nthat. We want to run some tasks (let’s call them job A), and, depending on the\nresult, invoke jobs B1 or B2, then run in parallel C1, C2 and C3, and, finally,\nexecute job D only when all C jobs are finished successfully. If this were a\nprogram or a script, we would have no problem accomplishing something like that,\nsince all modern programming languages allow us to employ conditional logic in a\nsimple and efficient way. Chained Jenkins jobs, created through its UI, pose\ndifficulties to create even a simple conditional logic. Truth be told, some\nplugins can help us with conditional logic. We have Conditional Build Steps,\nParameterised Trigger, Promotions and others. However, one of the major issues\nwith these plugins is configuration. It tends to be scattered across multiple\nlocations, hard to maintain and with little visibility.\n\nResource allocation needs a careful thought and is, often, more complicated than\na simple decision to run a job on a predefined agent. There are cases when agent\nshould be decided dynamically, workspace should be defined during runtime and\ncleanup depends on a result of some action.\n\nWhile a continuous deployment process means that the whole pipeline ends with\ndeployment to production, many businesses are not ready for such a goal or have\nuse-cases when it is not appropriate. Any other process with a smaller scope, be\nit continuous delivery or continuous integration, often requires some human\ninteraction. A step in the pipeline might need someone’s confirmation, a failed\nprocess might require a manual input about reasons for the failure, and so on.\nThe requirement for human interaction should be an integral part of the pipeline\nand should allow us to pause, inspect and resume the flow. At least, until we\nreach the true continuous deployment stage.\n\nThe industry is, slowly, moving towards microservices architectures. However,\nthe transformation process might take a long time to be adopted, and even more\nto be implemented. Until then, we are stuck with monolithic applications that\noften require a long time for deployment pipelines to be fully executed. It is\nnot uncommon for them to run for a couple of hours, or even days. In such cases,\nfailure of the process, or the whole node the process is running on, should not\nmean that everything needs to be repeated. We should have a mechanism to\ncontinue the flow from defined checkpoints, thus avoiding costly repetition,\npotential delays and additional costs. That is not to say that long-running\ndeployment flows are appropriate or recommended. A well-designed CD process\nshould run within minutes, if not seconds. However, such a process requires not\nonly the flow to be designed well, but also the architecture of our applications\nto be changed. Since, in many cases, that does not seem to be a viable option,\nresumable points of the flow are a time saver.\n\nAll those needs, and many others, needed to be addressed in Jenkins if it was to\ncontinue being a dominant CI/CD tool. Fortunately, developers behind the project\nunderstood those needs and, as a result, we got the Jenkins Pipeline plugin. The\nfuture of Jenkins lies in a transition from Freestyle chained jobs to a single\npipeline expressed as code. Modern delivery flows cannot be expressed and easily\nmaintained through UI drag 'n drop features, nor through chained jobs. They can\nneither be defined through YAML (Yet Another Markup Language) definitions\nproposed by some of the newer tools (which I’m not going to name). We need to go\nback to code as a primary way to define not only the applications and services\nwe are developing but almost everything else. Many other types of tools adopted\nthat approach, and it was time for us to get that option for CI/CD processes as\nwell.","title":"The Need For Jenkins Pipeline","tags":["jenkins2","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-04-21T00:00:00.000Z","id":"d9ce8340-eedf-5dba-874d-c9eba3f8e717","slug":"/blog/2016/04/21/dsl-plugins/","strippedHtml":"In this post I will show how you can make your own DSL extensions and distribute\nthem as a plugin, using Pipeline Script.\n\nA quick refresher\n\nPipeline has a well kept secret: the ability to add your own DSL\nelements. Pipeline is itself a DSL, but you can extend it.\n\nThere are 2 main reasons I can think you may want to do this:\n\nYou want to reduce boilerplate by encapsulating common snippets/things you do\nin one DSL statement.\n\nYou want to provide a DSL that provides a prescriptive way that your builds\nwork - uniform across your organisations Jenkinsfiles.\n\nA DSL could look as simple as\n\nacmeBuild {\n    script = \"./bin/ci\"\n    environment = \"nginx\"\n    team = \"evil-devs\"\n    deployBranch = \"production\"\n}\n\nThis could be the entirety of your Jenkinsfile!\n\nIn this \"simple\" example, it could actually be doing a multi stage build with\nretries, in a specified docker container, that deploys only from the production\nbranch.  Detailed notifications are sent to the right team on important events\n(as defined by your org).\n\nTraditionally this is done via the\nglobal\nlibrary.  You take a snippet of DSL you want to want to make into a DSL, and\ndrop it in the git repo that is baked into Jenkins.\n\nA great trivial\nexample\nis this:\n\njenkinsPlugin {\n    name = 'git'\n}\n\nWhich is enabled by git pushing the following into vars/jenkinsPlugin.groovy\n\nThe name of the file is the name of the DSL expression you use in the Jenkinsfile\n\ndef call(body) {\n    def config = [:]\n    body.resolveStrategy = Closure.DELEGATE_FIRST\n    body.delegate = config\n    body()\n\n    // This is where the magic happens - put your pipeline snippets in here, get variables from config.\n    node {\n        git url: \"https://github.com/jenkinsci/${config.name}-plugin.git\"\n        sh \"mvn install\"\n        mail to: \"...\", subject: \"${config.name} plugin build\", body: \"...\"\n    }\n}\n\nYou can imagine many more pipelines, or even archetypes/templates of pipelines\nyou could do in this way, providing a really easy Jenkinsfile syntax for your\nusers.\n\nMaking it a plugin\n\nUsing the global DSL library is a handy thing if you have a single Jenkins, or\nwant to keep the DSLs local to a Jenkins instance.  But what if you want to\ndistribute it around your org, or, perhaps it is general purpose enough you want\nto share it with the world?\n\nWell this is possible, by wrapping it in a plugin. You use the same pipeline\nsnippet tricks you use in the global lib, but put it in the dsl directory of a\nplugin.\n\nMy simple\nbuild plugin shows how it is done.  To make your own plugin:\n\nCreate a new plugin project, either fork the simple build one, or add a\ndependency to it in your pom.xml / build.gradle file\n\nPut your dsl in the resources directory in a similar fashion to\nthis\n(note the \"package dsl\" declaration at the top)\n\nCreate the equivalent extension that just points to the DSL by name like\nthis\nThis is mostly \"boiler plate\" but it tells Jenkins there is a GlobalVariable extension available when Pipelines run.\n\nDeploy it to an Jenkins Update Center to share with your org, or everyone!\n\nThe advantage of delivering this DSL as a plugin is that it has a version (you\ncan also put tests in there), and distributable just like any other plugin.\n\nFor the more advanced, Andrew Bayer has a Simple\nTravis Runner plugin that\ninterprets and runs\ntravis.yml files which is also implemented in pipeline.\n\nSo, approximately, you can build plugins for pipeline that extend pipeline, in\npipeline script (with a teeny bit of boiler plate).\n\nEnjoy!","title":"Making your own DSL with plugins, written in Pipeline script","tags":["jenkins","dsl","pipeline","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2016-04-22T00:00:00.000Z","id":"4e17de3e-4be0-59e9-b38e-1f1bbf9188e4","slug":"/blog/2016/04/22/pipeline-2.x/","strippedHtml":"Those of you who routinely apply all plugin updates may already have noticed that the version numbers of the plugins in the Pipeline suite have switched to a 2.x scheme. Besides aligning better with the upcoming Jenkins 2.0 core release, the plugins are now being released with independent lifecycles.\n\n“Pipeline 1.15” (the last in the 1.x line) included simultaneous releases of a dozen or so plugins with the 1.15 version number (and 1.15+ dependencies on each other). All these plugins were built out of a single workflow-plugin repository. While that was convenient in the early days for prototyping wide-ranging changes, it has become an encumbrance now that the Pipeline code is fairly mature, and more people are experimenting with additions and patches.\n\nAs of 2.0, all the plugins in the system live in their own repositories on GitHub—named to match the plugin code name, which in most cases uses the historical workflow term, so for example workflow-job-plugin. Some complex steps were moved into their own plugins, such as pipeline-build-step-plugin. The 1.x changelog is closed; now each plugin keeps a changelog in its own wiki, for example here for the Pipeline Job plugin.\n\nAmong other benefits, this change makes it easier to cut new plugin releases for even minor bug fixes or enhancements, or for developers to experiment with patches to certain plugins. It also opens the door for the “aggregator” plugin (called simply Pipeline) to pull in dependencies on other plugins that seem broadly valuable, like the stage view.\n\nThe original repository has been renamed pipeline-plugin and for now still holds some documentation, which might later be moved to jenkins.io.\n\nYou need not do anything special to “move” to the 2.x line; 1.642.x and later users can just accept all Pipeline-related plugin updates. Note that if you update Pipeline Supporting APIs you must update Pipeline, or at least install/update some related plugins as noted in the wiki.","title":"Pipeline 2.x plugins","tags":["pipeline","jenkins2"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick/","twitter":"tyvole"}]}},{"node":{"date":"2016-04-22T00:00:00.000Z","id":"be010022-b98d-5767-afad-a1578cc4e23f","slug":"/blog/2016/04/22/possible-infra-compromise/","strippedHtml":"Last week, the infrastructure team identified the potential compromise of a key\ninfrastructure machine. This compromise could have taken advantage of, what\ncould be categorized as, an attempt to target contributors with elevated\naccess. Unfortunately, when facing the uncertainty of a potential compromise,\nthe safest option is to treat it as if it were an actual incident, and react\naccordingly. The machine in question had access to binaries published to our\nprimary and secondary mirrors, and to contributor account information.\n\nSince this machine is not the source of truth for Jenkins binaries, we verified\nthat the files distributed to Jenkins users: plugins, packages, etc, were not\ntampered with. We cannot, however, verify that contributor account information\nwas not accessed or tampered with and, as a proactive measure, we are issuing a\npassword reset for all contributor accounts. We have also spent significant effort\nmigrating all key services off of the potentially compromised machine to\n(virtual) hardware so the machine can be re-imaged or decommissioned entirely.\n\nWhat you should do now\n\nIf you have ever filed an issue in JIRA,\nedited a wiki page, released a plugin or\notherwise created an account via the Jenkins\nwebsite, you have a Jenkins community account. You should be receiving a\npassword reset email shortly, but if you have re-used your Jenkins account\npassword with other services we strongly encourage you to update your passwords\nwith those other services.  If you’re not already using one, we also encourage\nthe use of a password manager for generating and managing service-specific\npasswords.\n\nThe generated password sent out is temporary and will expire if you do not\nuse it to update your account. Once it expires you will need recover your\naccount with the password reset\nin the accounts app.\n\nThis does not apply to your own Jenkins installation, or any account that you\nmay use to log into it. If you do not have a Jenkins community account, there is\nno action you need to take.\n\nWhat we’re doing to prevent events like this in the future\n\nAs stated above, the potentially compromised machine is being removed from our\ninfrastructure. That helps address the immediate problem but doesn’t put\nguarantees in place for the future. To help prevent potential issues in the\nfuture we’re taking the following actions:\n\nIncorporating more security policy enforcement into our\nPuppet-driven infrastructure. Without a\nconfiguration management tool enforcing a given state for some legacy services,\nuser error and manual mis-configurations can adversely affect project security.\nAs of right now, all key services are managed by Puppet.\n\nBalkanizing our machine and permissions model more. The machine affected was\nliterally the first independent (outside of Sun) piece of project\ninfrastructure and like many legacy systems, it grew to host a multitude of\nservices. We are rapidly evolving away from that model with increasing levels\nof user and host separation for project services.\n\nIn a similar vein, we have also introduced a trusted zone in our\ninfrastructure which is not routable on the public internet, where sensitive\noperations, such as generating update center information, can be managed and\nsecured more effectively.\n\nWe are performing an infrastructure permissions audit. Some portions of our\ninfrastructure are 6+ years old and have had contributors come and go. Any\ninactive users with unnecessarily elevated permissions in the project\ninfrastructure will have those permissions revoked.\n\nI would like to extend thanks, on behalf of the Jenkins project, to\nCloudBees for their help in funding and\nmigrating this infrastructure.\n\nIf you have further questions about the Jenkins project infrastructure, you can\njoin us in the #jenkins-infra channel on Freenode\nor in an Infrastructure Q&A session I’ve scheduled for next Wednesday (April\n27) at 20:00 UTC (12:00 PST).","title":"Possible Jenkins Project Infrastructure Compromise","tags":["infra","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-04-26T00:00:00.000Z","id":"8d1a1951-ad97-5021-a398-24ee5d471516","slug":"/blog/2016/04/26/jenkins-20-is-here/","strippedHtml":"Over the past 10 years, Jenkins has really\ngrown to a\nde-facto standard tool that millions of people use to handle automation in\nsoftware development and beyond.  It is quite remarkable for a project that\noriginally started as a hobby project under a different name. I’m very proud.\n\nAround this time last year,\nwe’ve\ncelebrated 10 years, 1000 plugins, and 100K installations. That was a good time\nto retrospect, and we started thinking about the next 10 years of Jenkins and\nwhat’s necessary to meet that challenge.  This project has long been on a\nweekly \"train\" release model, so it was useful to step back and think about a\nbig picture.\n\nThat is where three pillars of Jenkins 2.0 have emerged from.\n\nFirst, one of the challenges our users are facing today is that the automation\nthat happens between a commit and a production has significantly grown in its\nscope. Because of this, the clothing that used to fit (aka \"freestyle project\",\nwhich was the workhorse of Jenkins) no longer fits. We now need something that\nbetter fits today’s use cases like \"continuous delivery pipeline.\" This is why\nin 2.0 we’ve added the pipeline capability. This 2 year old effort allows you\nto describe your chain of automation in a textual form. This allows you to\nversion control it, put it alongside your source tree, etc. It is also actually\na domain specific language (DSL) of Groovy, so when your pipeline grows in\ncomplexity/sophistication, you can manage its complexity and keep it\nunderstandable far more easily.\n\nSecond, over time, Jenkins has developed the \"assembly required before initial\nuse\" feeling. As the project has grown, the frontier of interesting development\nhas shifted to plugins, which is how it should be, but we have left it up to\nusers to discover & use them. As a result, the default installation became very\nthin and minimal, and every user has to find several plugins before Jenkins\nbecomes really functional. This created a paradox of choice and unnecessarily\nhurt the user experience. In 2.0, we reset this thinking and tried to create\nmore sensible out of the box experience that solves 80% use cases for 80% of\npeople. You get something useful out of the box, and you can get some\nconsiderable mileage out of it before you start feeling the need of plugins.\nThis allows us to focus our development & QA effort around this base\nfunctionality, too. By the way, the focus on the out of the box experience\ndoesn’t stop at functionality, either. The initial security setup of Jenkins is\nimproved, too, to prevent unprotected Jenkins instances from getting abused by\nbotnets and attacks.\n\nThird, we were fortunate to have a number of developers with UX background\nspend some quality time on Jenkins, and they have made a big dent in improving\nvarious parts of Jenkins web UI. The setup wizard that implements the out of\nthe box experience improvement is one of them, and it also includes other parts\nof Jenkins that you use all the time, such as job configuration pages and new\nitem pages. This brings much needed attention to the web UI.\n\nAs you can see, 2.0 brings a lot of exciting features on the table, but this is\nan evolutionary release, built on top of the same foundation, so that your\nexisting installations can upgrade smoothly. After this initial release, we’ll\nget back to our usual weekly release march.  Improvements will be made\nto those pillars and others in coming months and years continuously. If you’d\nlike to get a more in-depth look at Jenkins 2.0, please join us in our virtual\nJenkins meetup 2.0 launch event.\n\nThank you very much for everyone who made Jenkins 2.0 possible. There are\ntoo many of you\nto thank individually, but you know who you are. I wanted to thank CloudBees in\nparticular for sponsoring the time of many of those people. Ten years ago, all I\ncould utilize was my own night & weekend time. Now I’ve got a team of smart\npeople working with me to carry this torch forward, and a big effort like 2.0\nwouldn’t have been possible without such organized effort.","title":"Jenkins 2.0 is here!","tags":["jenkins2"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2016-05-10T00:00:00.000Z","id":"e79a5ee4-9a52-50ad-875a-d0e23f888bab","slug":"/blog/2016/05/10/jenkins-20-vjam/","strippedHtml":"Last week we hosted our first ever\nOnline JAM with the debut\ntopic of: Jenkins 2.0. Alyssa, our\nEvents officer, and I pulled together a\nseries of\nsessions focusing on some of the most notable aspects of Jenkins 2 with:\n\nA Jenkins 2.0 keynote from project founder\nKohsuke Kawaguchi\n\nAn overview of \"Pipeline as Code\" from Patrick\nWolf\n\nA deep-dive into Pipeline and related plugins like Multibranch, etc from\nJesse Glick and\nKishore Bhatia\n\nAn overview of new user experience changes in 2.0 from\nKeith Zantow\n\nA quick lightning talk about documentation by yours truly\n\nWrapping up the sessions, was Kohsuke again, talking about the road beyond\nJenkins 2.0 and what big projects he sees on the horizon.\n\nThe event was really interesting for me, and I hope informative for those who\nparticipated in the live stream and Q&A session. I look forward to hosting more\nVirtual JAM events in the future, and I hope you will\njoin us!\n\nQuestions and Answers\n\nBelow are a collection of questions and answers, that were posed during the\nVirtual JAM. Many of these were answered during the course of the sessions, but\nfor posterity all are included below.\n\nPipeline\n\nWhat kind of DSL is used behind pipeline as code? Groovy or allow freely use\ndifferent languages as a user prefer?\n\nPipeline uses a Groovy-based domain specific language.\n\nHow do you test your very own pipeline DSL?\n\nReplay helps in testing/debugging while creating pipelines and at the branch\nlevel. There are some ideas which Jesse Glick\nhas proposed for testing Jenkinsfile and Pipeline libraries captured in\nJENKINS-33925.\n\nIsn’t \"Survive Jenkins restart\" exclusive to [CloudBees] Jenkins Enterprise?\n\nNo, this feature does not need\nCloudBees\nJenkins Enterprise. All features shown\nduring the virtual JAM are free and open source. CloudBees' Jenkins Enterprise\nproduct does support restarting from a specified stage however, and that is not\nopen source.\n\nHow well is jenkins 2.0 integrate with github for tracking job definitions?\n\nUsing the\nGitHub\nOrganization Folder plugin, Jenkins can automatically detect a Jenkinsfile in\nsource repositories to create Pipeline projects.\n\nPlease make the ability for re-run failed stages Open Source too :)\n\nThis has been passed on to our friends at CloudBees for consideration :)\n\nIf Jenkinsfile is in the repo, co-located with code, does this mean Jenkins can\nauto-detect new jobs for different branches?\n\nThis is possible using the\nPipeline Multibranch plugin.\n\nWhat documentation sources are there for Pipeline?\n\nOur documentation section contains a number of pagesaround Pipeline.\nThere is also additional documentation and examples in the plugin’s\ngit repository and the\njenkinsci/pipeline-examples\nrepository. (contributions welcome!)\n\nWhere we can find the DSL method documentation?\n\nThere is generated documentation on jenkins.io which\nincldues steps from all public plugins. Inside of a running Jenkins instance,\nyou can also navigate to\nJENKINS_URL/workflow-cps-snippetizer/dslReference\nto see the documentation for the plugins which are installed in that instance.\n\nIf Pipeline is not support some plugins (there is a lot actually), I needed\nSonarQube Runner but unfortunately it’s not supported yet, in Job DSL plugin i\ncan use \"Configure Block\" and cover any plugin via XML, how i can achieve the\nsame with a Pipeline?\n\nNot at this time\n\nIs there a possibility to create custom tooltips i.e. with a quick reference or\na link to internal project documentation? Might be useful i.e. for junior team\nmembers who need to refer to external docs.\n\nNot generally. Though in the case of Pipeline global libraries, you can create\ndescriptions of vars/functions like standardBuild in the demo, and these will\nappear in Snippet Generator under Global Variables.\n\nOh pipeline supports joining jobs? It’s really good, but I cannot find document\nat https://jenkins.io/doc/ could you tell me where is it?\n\nThere is a build step, but the Pipeline system is optimized for single-job\npipelines\n\nWe have multiple projects that we would like to follow the same pipeline.  How\nwould I write a common pipeline that can be shared across multiple projects.\n\nYou may want to look at implementing some additional steps using the\nPipeline Global\nLibrary feature. This would allow you to define\norganization-specific extensions to the Pipeline DSL to abstract away common\npatterns between projects.\n\nHow much flexibility is there with creating context / setting environment\nvariables or changing / modifying build tool options when calling a web hook /\napi to parameterize pipelines for example to target deployments to different env\nusing same pipeline\n\nVarious environment variables are exposed under the env variable in the Groovy\nDSL which would allow you to construct logic as simple or as complex as\nnecessary to achieve your goal.\n\nWhen you set up the job for the first time, does it build every branch in git,\nor is there a way to stop it from building old branches?\n\nNot at this time, the best way to prevent older branches from being built is to\nremove the Jenkinsfile in those branches. Alternatively, you could use the\n\"include\" or \"exclude\" patterns when setting up the SCM configuration of your\nmultibranch Pipeline. See also\nJENKINS-32396.\n\nSimilar to GitHub organizations, will BitBucket \"projects\" (ways of organizing\ncollections of repos) be supported?\n\nYes, these are supported via the\nBitbucket\nBranch Source plugin.\n\nHow do you handle build secrets with the pipeline plugin? Using unique\ncredentials stored in the credentials plugin per project and/or branch?\n\nThis can be accomplished by using the\nCredentials\nBinding plugin.\n\nSimilar to GitHub Orgs, are Gitlab projects supported in the same way?\n\nGitLab projects are not explicitly supported at this time, but the extension\npoints which the GitHub Organization Folder plugin uses could be extended in a\nsimilar manner for GitLab. See also JENKINS-34396\n\nIs Perforce scm supported by the Pipeline plugin?\n\nAs a SCM source for discovering a Jenkinsfile, not at this time. The\nP4\nplugin does provide some p4 steps which can be used in a Pipeline script\nhowever, see here for documentation.\n\nIs Mercurial supported with multibranch?\n\nYes, it is.\n\nCan Jenkinsfile detect when it’s running against a pull request vs an approved commit, so that it can perform a different type of build?\n\nYes, via the env variables provided in the DSL scope. Using an if statement,\none could guard specific behaviors with:\n\nif (env.CHANGE_ID != null) {\n    /* do things! */\n}\n\nLet’s say I’m building RPMs with Jenkins and use build number as an RPM\nversion/release number. Is there a way to maintain build numbers and leverage\nversioning of Jenkinsfile?\n\nThrough the env variable, it’s possible to utilize env.BUILD_NUMBER or the\nSCM commit ID, etc.\n\nLove the snippet generator! Any chance of separating it out from the pipeline\ninto a separate page on its own, available in the left nav?\n\nYes, this is tracked in\nJENKINS-31831\n\nAny tips on pre-creating the admin user credential and selecting plugins to\nautomate the Jenkins install?\n\nThere are various configuration\nmanagement modules which provide parts of this functionality.\n\nI’m looking at the pipeline syntax (in Jenkins 2.0) how do I detect a\nstep([…​]) has failed and create a notification inside the Jenkinsfile?\n\nThis can be done by wrapping a step invocation with a Groovy try/catch block.\nSee also JENKINS-28119\n\nUser Interface/Experience\n\nIs the user experience same as before when we replace the Jenkins.war(1.x to\n2.x) in an existing (with security in place) installation?\n\nYou will get the new UI features like redesigned configuration forms, but the\ninitial setup wizard will be skipped. In its stead, Jenkins will offer to\ninstall Pipeline-related functionality.\n\nIs it possible to use custom defined syntax highlighting ?\n\nWithin the Pipeline script editor itself, no. It is using the\nACE editor system,\nso it may be possible for a plugin to change the color scheme used.\n\nCan you elaborate on what the Blue Ocean UI is? Is there a link or more\ninformation on it?\n\nBlue Ocean is the name of user experience an design project, unfortunately at\nthis point in time there is not more information available on it.\n\nGeneral\n\nHow well this integrate with cloud environment?\n\nThe Jenkins controller and agents can run easily in any public cloud environment\nthat supports running Java applications. Through the\nEC2,\nJClouds,\nAzure, or\nany other plugins which extend the cloud\nextension\npoint, it is possible to dynamically provision new build agents on a configured\ncloud provider.\n\nAre help texts and other labels and messages updated for other localizations /\nlanguages as well?\n\nPractically every string in Jenkins core is localizable. The extent to which those\nstrings have been translated depends on contributors by speakers of those\nlanguages to the project. If you want to contribute translations, this\nwiki\npage should get you started.\n\nAny additional WinRM/Windows remoting functionality in 2.0?\n\nNo\n\nIs there a CLI to find all the jobs created by a specific user?\n\nNo, out-of-the-box Jenkins does not keep track of which user created which jobs.\nThe functionality provided by the\nOwnership\nplugin may be of interest though.\n\nPlease consider replacing terms like \"master\" and \"slave\" with \"primary\" and\n\"secondary\".\n\n\"slave\" has been replaced with \"agent\" in Jenkins 2.0.\n\nUpdated 2020-09-18 : The term \"master\" is being replaced with \"controller\".\n\nWe’ve been making tutorial videos on Jenkins for awhile (mostly geared toward\npassing the upcoming CCJPE). Because of that we’re using 1.625.2 (since that is\nwhat is listed on the exam), but should we instead base the videos on 2.0?\n\nAs of right now all of the\nJenkins Certification work done by CloudBees is\nfocused around the Jenkins LTS 1.625.x.","title":"Jenkins 2.0 Online JAM Wrap-up","tags":["jenkins2","jam","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-05-12T00:00:00.000Z","id":"16aeac16-1357-5d74-85da-84ef71ddbaa2","slug":"/blog/2016/05/12/sf-jam-jenkins-and-azure/","strippedHtml":"A few weeks ago, my colleague Brian Dawson\nand I were invited to present on\nScaling Jenkins for\nContinuous Delivery with Microsoft Azure in Microsoft’s\nReactor space. Azure is Microsoft’s\npublic cloud offering and one of the many tools available to Jenkins users for\nadding elastic compute capacity, among other things, to their build/test/deploy\ninfrastructure. While our presentations are applicable to practically\nany cloud-based Jenkins environment, Thiago Almeida and Oguz Pastirmaci from\nMicrosoft were also on-hand and presented some interesting Azure-specific\nofferings like\nAzure\nContainer Service with Jenkins.\n\nWhile we do not have video from the meetup, Brian and I did record\na\nsession with Thiago and Oguz for Channel9\nwhich covers much of the same content:\n\nTo kick-off the meetup we asked attendees a few polling questions and\nreceived very telling responses:\n\nHow big is your Development/IT organization?\n\nWhat is your role?\n\nBy show of hands do you practice CI/CD/DevOps/etc?\n\nAt what scale (tooling and practice)?\n\nThe responses indicated that the majority of attendees were from small to medium\norganizations where they practiced Continuous Delivery across multiple teams. A\nnotable 25% or greater attendees considered themselves \"fullstack\" or\nparticipating in all of the roles of Developer, QA, and Operations. Interesting\nwhen paired with the high number (~80%) of those who practice CD.  This is\nlikely because modern teams, with mature CD practices, tend to blur the\ntraditional lines of Developer, QA and Operations. However, In my experience,\nwhile this is often the case for small to medium companies in large\norganizations team members tend to fall into the traditional roles, with CD\nproviding the practice and platform to unify teams across roles.\n\n— Brian Dawson\n\nAfter gauging the audience, Thiago and Brian reviewed Continuous Delivery (CD)\nand implementing it at scale. They highlighted the fact that CD is being rapidly\nadopted across teams and organizations, providing the ability: to deliver a demonstrably\nhigher quality product, shipping more rapidly than before, and to keep team members happier.\n\nHowever, when organizations fail to properly support CD as they scale, they run\ninto issues such as: developers acting as administrators at the cost of\nproductivity, potential lack of security and/or exposure of IP and difficulty in\nsharing best practices across teams.\n\nThiago then highlighted that properly scaling CD practices in the organization\nalong with the infrastructure itself can alleviate these issues, and discussed\nthe benefits of scaling CD to on cloud platforms to provide \"CD-as-a-Service.\"\n\nOverall I found the \"theory\" discussion to be on point, continuous delivery is\nnot just a technology nor a people problem. Successful organizations scale their\nprocesses and tooling together.\n\nThe slides from our respective presentations are linked below:\n\n(Brian) Scaling Jenkins for Continuous Delivery (.pdf)\n\n(Tyler) Scaling Jenkins with Azure (.pdf)\n\nI hope you join us at future\nSan Francisco\nJAM s!","title":"SF JAM Report: Scaling Jenkins for Continuous Delivery with Azure","tags":["jam","azure","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-05-11T00:00:00.000Z","id":"31e502bf-b2a2-58e7-aec8-26b504df7584","slug":"/blog/2016/05/11/security-update/","strippedHtml":"We just released security updates to Jenkins that fix a number of low and medium severity issues. For an overview of what was fixed, see the security advisory.\n\nOne of the fixes may well break some of your use cases in Jenkins, at least until plugins have been adapted: SECURITY-170. This change removes parameters that are not defined on a job from the build environment. So, right now, a job could even be unparameterized, and plugins were able to pass parameters anyway. Since build parameters are added to the environment variables of scripts run during a build, parameters such as PATH or DYLD_LIBRARY_PATH can be defined — on jobs which don’t even expect those as build parameters — to change the behavior of builds.\n\nA number of plugins define additional parameters for builds. For example, GitHub Pull Request Builder passes a number of additional parameters describing the pull request. Release Plugin also allows adding several additional parameters to a build that are not considered to be defined in the job as part of this security fix.\n\nPlease see this wiki page for a list of plugins known to be affected by this change.\n\nUntil these plugins have been adapted to work with the new restriction (and advice on that is available further down), you can define the following system properties to work around this limitation, at least for a time:\n\nSet hudson.model.ParametersAction.keepUndefinedParameters to true, e.g. java -Dhudson.model.ParametersAction.keepUndefinedParameters=true -jar jenkins.war to revert to the old behavior of allowing any build parameters. Depending on your environment, this may be unsafe, as it opens you up to attacks as described above.\n\nSet hudson.model.ParametersAction.safeParameters to a comma-separated list of safe parameter names, e.g. java -Dhudson.model.ParametersAction.safeParameters=FOO,BAR_baz,quX -jar jenkins.war.\n\nI realize this change, among a few others that improve the security of Jenkins, may be difficult to adapt for some, but given the valuable secrets typically stored in Jenkins, I’m certain that this is the correct approach. We made sure to release this fix with the options described above, so that this change doesn’t block updating those that rely on this behavior.\n\nDevelopers have several options to adapt to this change:\n\nParametersAction actually stores all parameters, but getParameters() only returns those that are defined on the job. The new method getAllParameters() returns all of them. This can be used, for example by EnvironmentContributor extensions, to add known safe parameters to build environments.\n\nDon’t pass extra arguments, but define a QueueAction for your metadata instead. Those can still be made available to the build environment as needed.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2016-05-17T00:00:00.000Z","id":"f5d8714c-54dc-5d02-9311-d7a814cce01e","slug":"/blog/2016/05/17/state-of-jam/","strippedHtml":"Recently, the Jenkins project announced the release of\nJenkins 2.0, a first major release\nafter 10 years and 655 weekly releases. This has been a major milestone for\nJenkins and its growing community of developers, testers, designers and other\nusers in the software delivery process.\n\nWith its rising popularity and wide adoption, the Jenkins community continues to\ngrow and evolve into the millions. Jenkins community meetup activity has risen\nto an all time high since the first Jenkins meetup which was established on\nAugust 23 2010, in San Francisco.\n\nOver the last six months the number of\nJenkins Area Meetup (JAM) Groups has\ngrown from 5 to 30, with coverage in Asia, North America, South America and\nEurope.  That’s an average growth of 4 new JAMs per month.\n\nAs of today, there are over 4,100 Jenkins fans within the Jenkins meetup\ncommunity.  This is the result of contributions from community JAM leaders who\nhave volunteered their time to provide a platform for learning, sharing and\nnetworking all things Jenkins within their local communities.\n\nFor anyone who has not organized a meetup before, there are many moving parts\nthat have to come together at a specific location, date and time. This process\ntakes significant effort to methodically plan out. From planning the food and\nbeverages to securing speaker(s), a venue, audio/visual setup, technical\nlogistics and of course promoting the meetup. It does takes a level of passion\nand effort to make it all happen.\n\nMany THANKS to the 55 JAM leaders, who share this passion - they have\nsuccessfully organized over 41 meetups within the past six months in North\nAmerica, South America and Europe. That’s about 6 meetups a month!\n\nThere are still plenty of opportunities to be a JAM organizer. If there is not a\nJAM near you, we’d love to hear from\nyou! Here’s\nhow you can get\nstarted.","title":"The State of Jenkins Area Meetups (JAM)","tags":["meetup","JAM","event"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-05-18T00:00:00.000Z","id":"3098cab4-cd65-52ec-a4a9-2b36e2ac20d7","slug":"/blog/2016/05/18/announcing-azure-partnership/","strippedHtml":"I am pleased to announce that we have partnered with Microsoft to migrate and\npower the Jenkins project’s infrastructure with\nMicrosoft Azure. The partnership comes\nat an important time, after the recent launch of Jenkins 2.0,\nJenkins users are more readily adopting Pipeline as\nCode and many other plugins at an increasing rate, elevating the importance of\nJenkins infrastructure to the overall success of the project. That strong and\ncontinued growth has brought new demands to our infrastructure’s design and\nimplementation, requiring the next step in its evolution. This partnership helps\nus grow with the rest of the project by unifying our existing infrastructure\nunder one comprehensive, modern and scalable platform.\n\nIn March we\ndiscussed\nthe potential partnership in our regularly scheduled\nproject\nmeeting,\nhighlighting some of the infrastructure challenges that we face:\n\nCurrently we have infrastructure in four different locations, with four\ndifferent infrastructure providers, each with their own APIs and tools for\nmanaging resources, each with varying capabilities and capacities.\n\nProject infrastructure is managed by a team of volunteers, operating\nmore than 15 different services and managing a number of additional external\nservices.\n\nOur current download/mirror network, while geographically distributed, is\nrelatively primitive and its implementation prevents us from using more modern\ndistribution best practices.\n\nIn essence, five years of tremendous growth for Jenkins has outpaced our\norganically grown, unnecessarily complex, project infrastructure. Migrating to\nAzure simplifies and improves our infrastructure in a dramatic way that would\nnot be possible without a comprehensive platform consisting of: compute, CDN,\nstorage and data-store services. Our partnership covers, at minimum, the next\nthree years of the project’s infrastructure needs, giving us a great home for\nthe future.\n\nAzure also enables a couple of projects that I\nhave long been dreaming of providing to Jenkins users and contributors:\n\nEnd-to-end TLS encrypted distribution of Jenkins packages, plugins and\nmetadata via the Azure CDN.\n\nMore complete build/test/release support and capacity on\nci.jenkins.io for plugin developers using\nAzure\nContainer Service and generic VMs.\n\nThe Jenkins infrastructure is all open\nsource which means  all of our Docker containers, Puppet code and many of our\ntools are all available on GitHub. Not\nonly can you watch the migration process to Azure as it happens, but I also\ninvite you to participate in making our project’s infrastructure better (join\nus in the #jenkins-infra channel on Freenode or our\nmailing list).\n\nSuffice it to say, I’m very excited about the bright [blue] future for the\nJenkins project and the infrastructure that powers it!","title":"Partnering with Microsoft to run Jenkins infrastructure on Azure","tags":["azure","infra","infrastructure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-05-23T00:00:00.000Z","id":"85257451-d116-575c-b893-3c51d7386caa","slug":"/blog/2016/05/23/external-workspace-manager-plugin/","strippedHtml":"About myself\n\nMy name is Alexandru Somai.\nI’m following a major in Software Engineering at the Babes-Bolyai University of Cluj-Napoca, Romania.\nI have more than two years hands-on experience working in Software Development.\n\nI enjoy writing code in Java, Groovy and JavaScript.\nThe technologies and frameworks that I’m most familiar with are: Spring Framework, Spring Security, Hibernate,\nJMS, Web Services, JUnit, TestNG, Mockito.\nAs build tools and continuous integration, I’m using Maven and Jenkins.\nI’m a passionate software developer who is always learning, always looking for new challenges.\nI want to start contributing to the open source community and Google Summer of Code is a starting point for me.\n\nProject summary\n\nCurrently, Jenkins’ build workspace may become very large in size due to the fact that some compilers generate\nvery large volumes of data.\nThe existing plugins that share the workspace across builds are able to do this by copying the files from\none workspace to another, process which is inefficient.\nA solution is to have a Jenkins plugin that is able to manage and reuse the same workspace between multiple builds.\n\nAs part of the Google Summer of Code 2016 I will be working on\nthe External Workspace Manager plugin.\nMy mentors for this project are Oleg Nenashev\nand Martin d’Anjou.\nThis plugin aims to provide an external workspace management system.\nIt should facilitate workspace share and reuse across multiple Jenkins jobs.\nIt should eliminate the need to copy, archive or move files.\nThe plugin will be written for Pipeline jobs.\n\nUsage\n\nPrerequisites\n\nMultiple physical disks accessible from controller.\n\nThe same physical disks must be accessible from Jenkins Nodes (renamed to Agents in Jenkins 2.0).\n\nIn the Jenkins global configuration, define a disk pool (or many) that will contain the physical disks.\n\nIn each Node configuration, define the mounting point from the current node to each physical disk.\n\nThe following diagram gives you an overview of how an External Workspace Manager configuration may look like:\n\nExample one\n\nLet’s assume that we have one Jenkins job. In this job, we want to use the same workspace on multiple Jenkins nodes.\nOur pipeline code may look like this:\n\nstage ('Stage 1. Allocate workspace')\ndef extWorkspace = exwsAllocate id: 'diskpool1'\n\nnode ('linux') {\n    exws (extWorkspace) {\n        stage('Stage 2. Build on the build server')\n        git url: '...'\n        sh 'mvn clean install'\n    }\n}\n\nnode ('test') {\n    exws (extWorkspace) {\n        stage('Stage 3. Run tests on a test machine')\n        sh 'mvn test'\n    }\n}\n\nNote: The stage() steps are optional from the External Workspace Manager plugin perspective.\n\nStage 1. Allocate workspace\n\nThe exwsAllocate step selects a disk from diskpool1\n(default behavior: the disk with the most available size).\nOn that disk, let’s say disk1, it allocates a directory.\nThe computed directory path is: /physicalPathOnDisk/$JOB_NAME/$BUILD_NUMBER.\n\nFor example, Let’s assume that the $JOB_NAME is integration and the $BUILD_NUMBER is 14.\nThen, the resulting path is: /jenkins-project/disk1/integration/14.\n\nStage 2. Build on the build server\n\nAll the nodes labeled linux must have access to the disks defined in the disk pool.\nIn the Jenkins Node configurations we have defined the local paths that are the mounting points to each disk.\n\nThe exws step concatenates the node’s local path with the path returned by the exwsAllocate step.\nIn our case, the node labeled linux has its local path to disk1 defined as: /linux-node/disk1/.\nSo, the complete workspace path is: /linux-node/disk1/jenkins-project/disk1/integration/14.\n\nStage 3. Run tests on a test machine\n\nFurther, we want to run our tests on a different node, but we want to reuse the previously created workspace.\n\nIn the node labeled test we have defined the local path to disk1 as: /test-node/disk1/.\nBy applying the exws step, our tests will be able to run in the same workspace as the build.\nTherefore, the path is: /test-node/disk1/jenkins-project/disk1/integration/14.\n\nExample two\n\nLet’s assume that we have two Jenkins jobs, one called upstream and the other one called downstream.\nIn the upstream job, we clone the repository and build the project, and in the downstream job we run the tests.\nIn the downstream job we don’t want to clone and re-build the project, we need to use the same\nworkspace created in the upstream job.\nWe have to be able to do so without copying the workspace content from one location to another.\n\nThe pipeline code in the upstream job is the following:\n\nstage ('Stage 1. Allocate workspace in the upstream job')\ndef extWorkspace = exwsAllocate id: 'diskpool1'\n\nnode ('linux') {\n    exws (extWorkspace) {\n        stage('Stage 2. Build in the upstream job')\n           git url: '...'\n           sh 'mvn clean install'\n    }\n}\n\nAnd the downstream 's pipeline code is:\n\nstage ('Stage 3. Allocate workspace in the downstream job')\ndef extWorkspace = exwsAllocate id: 'diskpool1', upstream: 'upstream'\n\nnode ('test') {\n    exws (extWorkspace) {\n        stage('Stage 4. Run tests in the downstream job')\n        sh 'mvn test'\n    }\n}\n\nStage 1. Allocate workspace in the upstream job\n\nThe functionality is the same as in example one - stage 1.\nIn our case, the allocated directory on the physical disk is: /jenkins-project/disk1/upstream/14.\n\nStage 2. Build in the upstream job\n\nSame functionality as example one - stage 2.\nThe final workspace path is: /linux-node/disk1/jenkins-project/disk1/upstream/14.\n\nStage 3. Allocate workspace in the downstream job\n\nBy passing the upstream parameter to the exwsAllocate step,\nit selects the most recent stable upstream workspace (default behavior).\nThe workspace path pattern is like this: /physicalPathOnDisk/$UPSTREAM_NAME/$MOST_RECENT_STABLE_BUILD.\nLet’s assume that the last stable build number is 12, then the resulting path is:\n/jenkins-project/disk1/upstream/12.\n\nStage 4. Run tests in the downstream job\n\nThe exws step concatenates the node’s local path with the path returned by the exwsAllocate step in stage 3.\nIn this scenario, the complete path for running tests is: /test-node/disk1/jenkins-project/disk1/upstream/12.\nIt will reuse the workspace defined in the upstream job.\n\nAdditional details\n\nYou may find the complete project proposal, along with the design details, features, more examples and use cases,\nimplementation ideas and milestones in the design document.\nThe plugin repository will be available on GitHub.\n\nA prototype version of the plugin should be available in late June and the releasable version in late August.\nI will be holding plugin functionality demos within the community.\n\nI do appreciate any feedback.\nYou may add comments in the design document.\nIf you are interested to have a verbal conversation, feel free to join our regular meetings on Mondays at\n12:00 PM UTC\non the Jenkins hangout.\nI will be posting updates from time to time about the plugin status on the\nJenkins developers mailing list.\n\nLinks\n\nDesign document\n\nGSoC program\n\nJenkins GSoC Page\n\nProject repository","title":"GSoC Project Intro: External Workspace Manager Plugin","tags":["pipeline","plugins","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"alexsomai","html":"","id":"alexsomai","irc":null,"linkedin":null,"name":"Alexandru Somai","slug":"/blog/authors/alexsomai/","twitter":"alex_somai"}]}},{"node":{"date":"2016-05-25T00:00:00.000Z","id":"3bdee89e-566b-52d9-a3cc-f41507becadc","slug":"/blog/2016/05/25/update-plugin-for-pipeline/","strippedHtml":"This is a guest post by Chris Price.\nChris is a software engineer at Puppet, and has been\nspending some time lately on automating performance testing using the latest\nJenkins features.\n\nIn this blog post, I’m going to attempt to provide some step-by-step notes on\nhow to refactor an existing Jenkins plugin to make it compatible with the new\nJenkins Pipeline jobs.  Before we get to the fun stuff, though, a little\nbackground.\n\nHow’d I end up here?\n\nRecently, I started working on a project to automate some performance tests for\nmy company’s products.  We use the awesome Gatling load\ntesting tool for these tests, but we’ve largely been handling the testing very\nmanually to date, due to a lack of bandwidth to get them automated in a clean,\nmaintainable, extensible way.  We have a years-old Jenkins server where we use\nthe gatling jenkins\nplugin to track the\nhistory of certain tests over time, but the setup of the Jenkins instance was\nvery delicate and not easy to reproduce, so it had fallen into a state of\ndisrepair.\n\nOver the last few days I’ve been putting some effort into getting things more\nautomated and repeatable so that we can really maximize the value that we’re\ngetting out of the performance tests.  With some encouragement from the fine\nfolks in the #jenkins IRC channel, I ended up exploring\nthe JobDSL\nplugin and the new Pipeline jobs.  Combining those two\nthings with some Puppet code to provision a Jenkins server via the\njenkins puppet module gave me\na really nice way to completely automate my Jenkins setup and get a seed job in\nplace that would create my perf testing jobs.  And the Pipeline job format is\njust an awesome fit for what I wanted to do in terms of being able to easily\nmonitor the stages of my performance tests, and to make the job definitions\nmodular so that it would be really easy to create new performance testing jobs\nwith slight variations.\n\nSo everything’s going GREAT up to this point.  I’m really happy with how it’s\nall shaping up.  But then…​ (you knew there was a \"but\" coming, right?) I\nstarted trying to figure out how to add the\nGatling Jenkins\nplugin to the Pipeline jobs, and kind of ran into a wall.\n\nAs best as I could tell from my Googling, the plugin was probably going to\nrequire some modifications in order to be able to be used with Pipeline jobs.\nHowever, I wasn’t able to find any really cohesive documentation that\ndefinitively confirmed that or explained how everything fits together.\n\nEventually, I got it all sorted out.  So, in hopes of saving the next person a\nlittle time, and encouraging plugin authors to invest the time to get their\nplugins working with Pipeline, here are some notes about what I learned.\n\nSpoiler: if you’re just interested in looking at the individual git commits that\nI made on may way to getting the plugin working with Pipeline, have a look at\nthis github\nbranch.\n\nCreating a pipeline step\n\nThe main task that the Gatling plugin performs is to archive Gatling reports\nafter a run.  I figured that the end game for this exercise was that I was going\nto end up with a Pipeline \"step\" that I could include in my Pipeline scripts, to\ntrigger the archiving of the reports.  So my first thought was to look for an\nexisting plugin / Pipeline \"step\" that was doing something roughly similar, so\nthat I could use it as a model.  The Pipeline \"Snippet Generator\" feature\n(create a pipeline job, scroll down to the \"Definition\" section of its\nconfiguration, and check the \"Snippet Generator\" checkbox) is really helpful for\nfiguring out stuff like this; it is automatically populated with all of the\nsteps that are valid on your server (based on which plugins you have installed),\nso you can use it to verify whether or not your custom \"step\" is recognized, and\nalso to look at examples of existing steps.\n\nLooking through the list of existing steps, I figured that the archive step\nwas pretty likely to be similar to what I needed for the gatling plugin:\n\nSo, I started poking around to see what magic it was that made that archive\nstep show up there.  There are some mentions of this in the\npipeline-plugin\nDEVGUIDE.md and the\nworkflow-step-api-plugin\nREADME.md, but the real breakthrough for me was finding the definition of the\narchive step in the workflow-basic-steps-plugin source\ncode.\n\nWith that as an example, I was able to start poking at getting a\ngatlingArchive step to show up in the Snippet Generator.  The first thing that\nI needed to do was to update the gatling-plugin project’s pom.xml to depend\non a recent enough version of Jenkins, as well as specify dependencies on the\nappropriate pipeline\nplugins\n\nOnce that was out of the way, I noticed that the archive step had some tests\nwritten for it, using what looks to be a pretty awesome test API for pipeline\njobs and plugins.  Based on those archive\ntests,\nI added\na\nskeleton for a test for the gatlingArchive step that I was about to write.\n\nThen, I moved on to\nactually\ncreating the step.  The meat of the code was this:\n\npublic class GatlingArchiverStep extends AbstractStepImpl {\n    @DataBoundConstructor\n    public GatlingArchiverStep() {}\n\n    @Extension\n    public static class DescriptorImpl extends AbstractStepDescriptorImpl {\n        public DescriptorImpl() { super(GatlingArchiverStepExecution.class); }\n\n        @Override\n        public String getFunctionName() {\n            return \"gatlingArchive\";\n        }\n\n        @NonNull\n        @Override\n        public String getDisplayName() {\n            return \"Archive Gatling reports\";\n        }\n    }\n}\n\nNote that in that commit I also added a config.jelly file.  This is how you\ndefine the UI for your step, which will show up in the Snippet Generator.  In\nthe case of this Gatling step there’s really not much to configure, so my\nconfig.jelly is basically empty.\n\nWith that (and the rest of the code from that commit) in place, I was able to\nfire up the development Jenkins server (via mvn hpi:run, and note that you\nneed to go into the \"Manage Plugins\" screen on your development server and\ninstall the Pipeline plugin once before any of this will work) and visit the\nSnippet Generator to see if my step showed up in the dropdown:\n\nGREAT SUCCESS!\n\nThis step doesn’t actually do anything yet, but it’s recognized by Jenkins and\ncan be included in your pipeline scripts at that point, so, we’re on our way!\n\nThe step metastep\n\nThe step that we created above is a first-class DSL addition that can be used in\nPipeline scripts.  There’s another way to make your plugin work usable from a\nPipeline job, without making it a first-class build step.  This is by use of the\nstep\"metastep\", mentioned in the pipeline-plugin\nDEVGUIDE.\nWhen using this approach, you simply refactor your Builder or Publisher to\nextend SimpleBuildStep, and then you can reference the build step from the\nPipeline DSL using the step method.\n\nIn the Jenkins GUI, go to the config screen for a Pipeline job and click on the\nSnippet Generator checkbox.  Select 'step: General Build Step' from the\ndropdown, and then have a look at the options that appear in the 'Build Step'\ndropdown.  To compare with our previous work, let’s see what \"Archive the\nartifacts\" looks like:\n\nFrom the snippet generator we can see that it’s possible to trigger an Archive\naction with syntax like:\n\nstep([$class: 'ArtifactArchiver', artifacts: 'foo*', excludes: null])\n\nThis is the \"metastep\".  It’s a way to trigger any build action that implements\nSimpleBuildStep, without having to actually implement a real \"step\" that\nextends the Pipeline DSL like we did above.  In many cases, it might only make\nsense to do one or the other in your plugin; you probably don’t really need\nboth.\n\nFor the purposes of this tutorial, we’re going to do both.  For a couple of reasons:\n\nWhy the heck not?  :)  It’s a good demonstration of how the metastep stuff\nworks.\n\nBecause implementing the \"for realz\" step will be a lot easier if the Gatling\naction that we’re trying to call from our gatlingArchive() syntax is using the\nnewer Jenkins APIs that are required for subclasses of SimpleBuildStep.\n\nGatlingPublisher is the main build action that we’re interested in using in\nPipeline jobs.  So, with all of that in mind, here’s our next goal: get\nstep([$class: 'GatlingPublisher', …​) showing up in the Snippet Generator.\n\nThe javadocs for the SimpleBuildStep\nclass\nhave some notes on what you need to do when porting an existing Builder or\nPublisher over to implement the SimpleBuildStep interface.  In all\nlikelihood, most of what you’re going to end up doing is to replace occurrences\nof AbstractBuild with references to the Run class, and replace occurrences\nof AbstractProject with references to the Job class.  The APIs are pretty\nsimilar, so it’s not too hard to do once you understand that that’s the game.\nThere is some discussion of this in the pipeline-plugin\nDEVGUIDE.\n\nFor the Gatling plugin, my\ninitial\nefforts to port the GatlingPublisher over to implement SimpleBuildStep only\nrequired the AbstractBuild → Run refactor.\n\nAfter making these changes, I fired up the development Jenkins server, and, voila!\n\nSo, now, we can add a line like this to a Pipeline build script:\n\nstep([$class: 'GatlingPublisher', enabled: true])\n\nAnd it’ll effectively be the same as if we’d added the Gatling \"Post-Build\nAction\" to an old-school Freestyle project.\n\nWell…​ mostly.\n\nBuild Actions vs. Project Actions\n\nAt this point our modified Gatling plugin should work the same way as it always\ndid in a Freestyle build, but in a Pipeline build, it only partially works.\nSpecifically, the Gatling plugin implements two different \"Actions\" to surface\nthings in the Jenkins GUI: a \"Build\" action, which adds the Gatling icon to the\nleft sidebar in the GUI when you’re viewing an individual build in the build\nhistory of a job, and a \"Project\" action, which adds that same icon to the left\nsidebar of the GUI of the main page for a job.  The \"Project\" action also adds a\n\"floating panel\" on the main job page, which shows a graph of the historical\ndata for the Gatling runs.\n\nIn a Pipeline job, though, assuming we’ve added a call to the metastep, we’re\nonly seeing the \"Build\" actions.  Part of this is because, in the last round of\nchanges that I linked, we only modified the \"Build\" action, and not the\n\"Project\" action.  Running the metastep in a Pipeline job has no visible effect\nat all on the project/job page at this point.  So that’s what we’ll tackle next.\n\nThe key thing to know about getting \"Project\" actions working in a Pipeline job\nis that, with a Pipeline job, there is no way for Jenkins to know up front what\nsteps or actions are going to be involved in a job.  It’s only after the job\nruns once that Jenkins has a chance to introspect what all the steps were.  As\nsuch, there’s no list of Builders or Publishers that it knows about up front to\ncall getProjectAction on, like it would with a Freestyle job.\n\nThis is where\nSimpleBuildStep.LastBuildAction\ncomes into play.  This is an interface that you can add to your Build actions,\nwhich give them their own getProjectActions method that Jenkins recognizes and\nwill call when rendering the project page after the job has been run at least\nonce.\n\nSo, effectively, what we need to do is to\nget\nrid of the getProjectAction method on our Publisher class, modify the Build\naction to implement SimpleBuildStep.LastBuildAction, and encapsulate our\nProject action instances in the Build action.\n\nThe build action class now constructs an instance of the Project action and\nmakes it accessible via getProjectActions (which comes from the\nLastBuildAction interface):\n\npublic class GatlingBuildAction implements Action, SimpleBuildStep.LastBuildAction {\n    public GatlingBuildAction(Run build, List sims) {\n        this.build = build;\n        this.simulations = sims;\n\n        List projectActions = new ArrayList<>();\n        projectActions.add(new GatlingProjectAction(build.getParent()));\n        this.projectActions = projectActions;\n    }\n\n    @Override\n    public Collection getProjectActions() {\n        return this.projectActions;\n    }\n}\n\nAfter making these changes, if we run the development Jenkins server, we can see\nthat after the first successful run of the Pipeline job that calls the\nGatlingPublisher metastep, the Gatling icon indeed shows up in the sidebar on\nthe main project page, and the floating box with the graph shows up as well:\n\nMaking our DSL step do something\n\nSo at this point we’ve got the metastep syntax working from end-to-end, and\nwe’ve got a valid Pipeline DSL step ( gatlingArchive()) that we can use in our\nPipeline scripts without breaking anything…​ but our custom step doesn’t\nactually do anything.  Here’s the part where we tie it all together…​ and it’s\npretty easy!  All we need to do is to make our step \"Execution\" class\ninstantiate a Publisher and call perform on\nit.\n\nAs per the\nnotes\nin the pipeline-plugin DEVGUIDE, we can use the @StepContextParameter\nannotation to inject in the objects that we need to pass to the Publisher’s\nperform method:\n\npublic class GatlingArchiverStepExecution extends AbstractSynchronousNonBlockingStepExecution {\n\n    @StepContextParameter\n    private transient TaskListener listener;\n\n    @StepContextParameter\n    private transient FilePath ws;\n\n    @StepContextParameter\n    private transient Run build;\n\n    @StepContextParameter\n    private transient Launcher launcher;\n\n    @Override\n    protected Void run() throws Exception {\n        listener.getLogger().println(\"Running Gatling archiver step.\");\n\n        GatlingPublisher publisher = new GatlingPublisher(true);\n        publisher.perform(build, ws, launcher, listener);\n\n        return null;\n    }\n}\n\nAfter these changes, we can fire up the development Jenkins server, and hack up\nour Pipeline script to call gatlingArchive() instead of the metastep\nstep([$class: 'GatlingPublisher', enabled: true]) syntax.  One of these is\nnicer to type and read than the other, but I’ll leave that as an exercise for\nthe reader.\n\nFin\n\nWith that, our plugin now works just as well in the brave new Pipeline world as\nit did in the olden days of Freestyle builds.  I hope these notes save someone\nelse a little bit of time and googling on your way to writing (or porting) an\nawesome plugin for Jenkins Pipeline jobs!\n\nLinks\n\nJenkins Pipeline Overview\n\nPipeline Plugin Developer Guide\n\nJenkins Source Code\n\nWorkflow Step API Plugin\n\nWorkflow Basic Steps Plugin","title":"Refactoring a Jenkins plugin for compatibility with Pipeline jobs","tags":["core","pipeline","plugins"],"authors":[{"avatar":null,"blog":null,"github":"cprice404","html":"<div class=\"paragraph\">\n<p>Chris is a software engineer at Puppet, who mostly works on backend services\nfor Puppet itself, but occasionally gets to spend some time improving CI\nand automation using Jenkins.</p>\n</div>","id":"cprice404","irc":null,"linkedin":null,"name":"Chris Price","slug":"/blog/authors/cprice404/","twitter":"cprice404"}]}},{"node":{"date":"2016-05-26T00:00:00.000Z","id":"4a650522-ee39-5465-887f-963c348a9754","slug":"/blog/2016/05/26/gsoc-jenkins-web-ui-project/","strippedHtml":"About me\n\nMy name is Samat Davletshin and I am from HSE University from Moscow, Russia. I\ninterned at Intel and Yandex, and cofounded a startup\nproject where I personally developed front-end and back-end of the website.\n\nI am excited to participate in GSoC with Jenkins this summer as a chanсe to make\na positive change for thousands of users as well as to learn from great mentors.\n\nAbstract\n\nAlthough powerful, Jenkins new job creation and configuration process may be non\nobvious and time consuming. This can be improved by making UI more intuitive,\nconcise, and functional. I plan to achieve this by creating a simpler new job\ncreation, configuration process focused on essential elements, and embedding new\nfunctionality.\n\nMy mentors are Kirill Merkushev and\nMichael Neale\n\nDeliverables\n\nNew job creation\n\nNew job name validation\n\nInitially, job validation was unresponsive, job creation was still allowed with\nan invalid name, and some allowed characters even crashed Jenkins. Happily, two\nof this problems were fixed in recent improvements and I plan add only a real\ntime name check for invalid characters.\n\nPopup window\n\nJenkins has a lot of windows reloads that may time consuming. The creation of\nnew job is a simple process requiring only job name and job type. This way UI\nmay be improved by reducing page reloads and putting new job creation interface\nin a dialog window. Such popup would likely consist of three steps of\nimplementation: rendering a dialog window, receiving JSON with job types,\nsending a POST request to create the job.\n\nConfiguration page\n\nChanging help information\n\nAs reported by some users, it would be useful to have the functionality to\nchange help information. Installation administrators would be able to change the\nhelp info and choose editing rights for other users. That would likely require a\ncreation of extension points and a plugin using them. I also would like to\ninclude the ability to style the help information using markdown as shown above.\n\n[Optional] The functionality is extended to creation of crowd sourced \"wiki like\" documentation\n\nAs in\nlocalization\nplugin the changes are gathered and applied beyond installation of a particular\nuser.\n\nMore intuitive configuration page.\n\nPursuing to solve this  issue\n\nAlthough there are a lot improvements in new configuration page, there is always\na room for improvements. An advanced job still has a very complicated and hard\nto read configuration page. It is still open to discussion, but I may approach\nit by better division of configuration parts such as an accordion based\nnavigation.\n\nHome page\n\n[Optional] Removing \"My Views\" page\n\n\"My Views\" page may unnecessary complicate essential sidepanel navigation. Since\nit contains very small functionality, the functions may be moved to the home\npage and the whole page may be removed. That may be implemented by adding icons\nto \"My Views\" tabs. Additionally, the standard view creation page can create\neither of the types\n\n[Optional] Reducing number of UI elements\n\nThe home page may contain some UI elements that are not essential and rarely\nused. This way elements \"enable auto refresh\", “edit description”, “icon sizes”,\n”legend”, “RSS” may be removed from home page and placed under \"Manage Jenkins\"\nor an upper menu. It is also possible to create new extension points to support\nnew UI elements through plugins.\n\nCredentials store page\n\n[Optional] Grouping credentials and their domains\n\nCredentials page has too many reloads and requires many clicks to get to a\nrequired credentials page. That may be improved by removing the last page and\nshowing credentials under domains.\n\nCurrent progress\n\nBy May 25th I learned about the structure and tools of Jenkins and started\nworking on the first project:\n\nI started with New Job Name validation first. Luckily, in last updates the\nchanges of recena there\nwere implemented all of the changes I proposed except real time check on name\nvalidity. Here I proposed the change which fixes it by\nsending GET request on keyup event in addition to blur.\n\nI also made a New Job Popup with using existing interface.\n\nView the current\npop-up progress\n\nI used Remodal library for popup and put\nthere\nexisting\nNew Job container. Surprisingly, it was fully functional right away. On the GIF\nyou can see that popup receives all job types and then successfully submits the\npost form creating a new job. I think that could be a good first step. Further I\ncan start changing the window itself.\n\nLinks\n\nInitial proposal of the project\n\nThe project discussion on mailing list\n\nJenkins GSoC Page\n\nProject repository","title":"GSoC Project Intro: Improving Job Creation/Configuration","tags":["core","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"samatdav","html":"","id":"samatdav","irc":null,"linkedin":null,"name":"Samat Davletshin","slug":"/blog/authors/samatdav/","twitter":null}]}},{"node":{"date":"2016-05-26T00:00:00.000Z","id":"bbd7c8d9-ad20-56ae-b97b-834547d227f7","slug":"/blog/2016/05/26/introducing-blue-ocean/","strippedHtml":"In recent years developers have become rapidly attracted to tools that are not\nonly functional but are designed to fit into their workflow seamlessly and are\na joy to use. This shift represents a higher standard of design and user\nexperience that Jenkins needs to rise to meet.\n\nWe are excited to share and invite the community to join us on a project we’ve\nbeen thinking about over the last few months called Blue Ocean.\n\nBlue Ocean is a project that rethinks the user experience of Jenkins, modelling\nand presenting the process of software delivery by surfacing information that’s\nimportant to development teams with as few clicks as possible, while still\nstaying true to the extensibility that is core to Jenkins.\n\nWhile this project is in the alpha stage of development, the intent is that\nJenkins users can install Blue Ocean side-by-side with the Jenkins Classic UI\nvia a plugin.\n\nNot all the features listed on this blog are complete but we will be hard at\nwork over the next few months preparing Blue Ocean for general use. We intend\nto provide regular updates on this blog as progress is made.\n\nBlue Ocean is open source today\nand we invite you to give us feedback and to contribute to the project.\n\nBlue Ocean will provide development teams:\n\nNew modern user experience\n\nThe UI aims to improve clarity, reduce clutter and navigational depth to make\nthe user experience very concise. A modern visual design gives developers much\nneeded relief throughout their daily usage and screens respond instantly to\nchanges on the server making manual page refreshes a thing of the past.\n\nAdvanced Pipeline visualisations with built-in failure diagnosis\n\nPipelines are visualised on screen along with the\nsteps and logs to allow simplified comprehension of the continuous delivery\npipeline – from the simple to the most sophisticated scenarios.\n\nScrolling through 10,000 line log files is a thing of the past. Blue Ocean\nbreaks down your log per step and calls out where your build failed.\n\nBranch and Pull Request awareness\n\nModern pipelines make use of multiple Git branches, and Blue Ocean is designed\nwith this in mind. Drop a Jenkinsfile into your Git\nrepository that defines your pipeline and Jenkins will automatically discover\nand start automating any  Branches and validating Pull Requests.\n\nJenkins will report the status of your pipeline right inside Github or\nBitbucket on all your commits, branches or pull requests.\n\nPersonalised View\n\nFavourite any pipelines, branches or pull requests and see them appear on your\npersonalised dashboard. Intelligence is being built into the dashboard. Jobs\nthat need your attention, say a Pipeline waiting for approval or a failing job\nthat you have recently changed, appear on the top of the dashboard.\n\nYou can read more about Blue Ocean and its goals on the\nproject page and developers should watch the\nDevelopers list for more information.\n\nFor Jenkins developers and plugin authors:\n\nJenkins Design “Language”\n\nThe Jenkins Design Language (JDL) is a set of standardised React components and\na style guide that help developers create plugins that retain the look and feel\nof Blue Ocean in an effortless way. We will be publishing more on the JDL,\nincluding the style guide and developer documentation, over the next few weeks.\n\nModern JavaScript toolchain\n\nThe Jenkins plugin tool chain has been extended so that developers can use\nES6,\nReact, NPM\nin their plugins without endless yak-shaving. Jenkins\njs-modules are already in use in\nJenkins today, and this builds on this, using the same tooling.\n\nClient side Extension points\n\nClient Side plugins use Jenkins plugin infrastructure. The Blue Ocean libraries\nbuilt on ES6 and React.js provide an extensible client side component model\nthat looks familiar to developers who have built Jenkins plugins before. Client\nside extension points can help isolate failure, so one bad plugin doesn’t take\na whole page down.\n\nServer Sent Events\n\nServer Sent Events\n(SSE) allow plugin developers to tap into changes of state on the server and make\ntheir UI update in real time ( watch this for a\ndemo).\n\nTo make Blue Ocean a success, we’re asking for help and support from Jenkins\ndevelopers and plugin authors. Please join in our Blue Ocean discussions on the\nJenkins Developer\nmailing list and the #jenkins-ux IRC channel on Freenode!\n\nLinks\n\nBlue Ocean project page\n\nBlue Ocean GitHub repository","title":"Introducing Blue Ocean: a new user experience for Jenkins","tags":["blueocean","ux","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/authors/i386/","twitter":"i386"}]}},{"node":{"date":"2016-05-31T00:00:00.000Z","id":"ad068db4-bb27-52c3-9916-bb8b132c6e53","slug":"/blog/2016/05/31/pipeline-snippetizer/","strippedHtml":"Those of you updating the Pipeline Groovy plugin\nto 2.3 or later will notice a change to the appearance of the configuration form.\nThe Snippet Generator tool is no longer a checkbox enabled inside the configuration page.\nRather, there is a link Pipeline Syntax which opens a separate page with several options.\n(The link appears in the project’s sidebar; Jenkins 2 users will not see the sidebar from the configuration screen,\nso as of 2.4 there is also a link beneath the Pipeline definition.)\n\nSnippet Generator continues to be available for learning the available\nPipeline steps and creating sample calls given various configuration options.\nThe new page also offers clearer links to static reference documentation, online\nPipeline documentation resources, and an IntelliJ IDEA code completion file\n(Eclipse support is unfinished).\n\nOne motivation for this change\n( JENKINS-31831) was to\ngive these resources more visual space and more prominence.  But another\nconsideration was that people using multibranch projects or organization folders\nshould be able to use Snippet Generator when setting up the project, before\nany code is committed.\n\nThose using\nPipeline\nMultibranch plugin or organization folder plugins should upgrade to 2.4 or\nlater to see these improvements as well.","title":"New display of Pipeline’s \"snippet generator\"","tags":["pipeline"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick/","twitter":"tyvole"}]}},{"node":{"date":"2016-06-01T00:00:00.000Z","id":"2ec37d75-53e9-562c-9bbb-de2a06ecbafd","slug":"/blog/2016/06/01/gsoc-automatic-plugin-documentation/","strippedHtml":"About me\n\nI am Cynthia Anyango from Nairobi, Kenya. I am a second year student at Maseno\nUniversity. I am currently specializing on Ruby on Rails and trying to learn\nPython. I recently started contributing to Open source projects.My major\ncontribution was at Mozilla, where I worked with the QA for Cloud services. I did\nmanual and automated tests for various cloud services. I wrote documentation\ntoo. Above that, I am competent and I am always passionate about what I get my\nhands on.\n\nProject summary\n\nCurrently Jenkins plugin documentation is being stored in Confluence. Sometimes\nthe documentation is scattered and outdated. In order to improve the situation we\nwould like to follow the documentation-as-code approach and to put docs to\nplugin repositories and then publish them on the project website using the\nawestruct engine. The project aims an implementation of a documentation\ncontinuous deployment flow powered by Jenkins and Pipeline Plugin.\n\nThe idea is to automatically pull in the README and other docs from GitHub, show\nchangelogs with versions and releases dates. I will be designing file templates\nthat will contain most of the  docs information that will be required from\nplugin developers. Initially the files will be written in\nAsciiDoc. Plugin developers will get a chance to\nreview the templates. The templates will be prototyped by various plugin\ndevelopers.\n\nThe docs that will be automatically pulled from github and will be published on\nJenkins.io under the Documentation section.\n\nMy mentors are R.Tyler and\nBaptiste Mathus\n\nI hope to achieve this by 25th June when we will be having our mid-term\nevaluations.\n\nI will update more on the progress.\n\nLinks\n\nGsoc Page\n\nJenkins Gsoc Page\n\nMailing List discussion on Jenkins-Developers\n\nMy blog on Medium","title":"GSOC Project Intro: Automatic Plugin Documentation","tags":["gsoc","plugins"],"authors":[{"avatar":null,"blog":null,"github":"anyangocynthia","html":"","id":"cynthia","irc":null,"linkedin":null,"name":"Cynthia Anyango","slug":"/blog/authors/cynthia/","twitter":"annyanngo"}]}},{"node":{"date":"2014-05-08T00:00:00.000Z","id":"787b76c1-3d61-5996-9b2c-bb9e246475fa","slug":"/blog/2014/05/08/another-big-thank-you-to-rackspace/","strippedHtml":"+\nAs the Jenkins project grows, https://jenkins-ci.org/content/come-join-infra-team[the need for our infrastructure has been growing]. https://ci.jenkins.io/[Our Jenkins-on-Jenkins] needs more build agents, we need more servers to run our infrastructure services. +\n +\n\n+\nAnd it was https://jenkins-ci.org/content/big-thanks-rackspace[once again] Rackspace who stepped up to the plate; they have kindly donated us more https://www.rackspace.com/cloud/servers/[cloud servers]. I also use Rackspace for one of my personal servers, and when I went back to their admin console this time, I noticed that they've added https://www.rackspace.com/cloud/[a lot more services] to their offering. +\n +\n\n+\nimage:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/rackspace.jpg[image,width=200,height=200] +\n\n+\n+\n\n+\nI am setting up these boxes as I write this. A huge thank you for Rackspace for their support of this project. And if you are interested in using Rackspace cloud servers as elastic build agents, https://wiki.jenkins.io/display/JENKINS/JClouds+Plugin[jclouds plugin] is your friend.","title":"Another big thank you to Rackspace","tags":["infrastructure","links","meta","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-24T00:00:00.000Z","id":"9ede1c5f-3214-5d51-bb71-6a90d5ba08db","slug":"/blog/2014/04/24/juc-agenda-posted/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Kevin_Allen_(author)[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/The_Hidden_Agenda_3D.png/181px-The_Hidden_Agenda_3D.png[image] +\n] +\n\n+\n\n+\nAgenda is posted for Jenkins User Conference https://www.cloudbees.com/jenkins/juc-2014/boston[Boston] and https://www.cloudbees.com/jenkins/juc-2014/berlin[Berlin]. +\n +\n\n+\nFor Boston, my favorite would be the https://www.cloudbees.com/jenkins/juc-2014/boston/sessions#JesseGlick[workflow in Jenkins] talk that will cover the new workflow job type Jesse and I are working on. As of this writing it is still very much a work in progress, but that talk is our way of putting a stake on the ground that we WILL have something we can talk about by then. There's also some talks that describes how they've put together pieces (including Jenkins) to create a broad automation, such as https://www.cloudbees.com/jenkins/juc-2014/boston/sessions#HoiTsang[Distributed Scrum Development with Jenkins, Vagrant, Fabric and Selenium] and https://www.cloudbees.com/jenkins/juc-2014/boston/sessions#JimCrossley[Moving Existing Enterprise Systems to Continuous Integration and Deployment with Jenkins]. +\n +\n\n+\nFor Berlin, it turns out that we have steller line up of the speakers far beyond my expectation. You have a number of key community contributors/developers like https://www.cloudbees.com/jenkins/juc-2014/berlin/speakers#ChristopherOrr[Christopher Orr] talking about https://www.cloudbees.com/jenkins/juc-2014/berlin/sessions#ChristopherOrr[how he does mobile build/test/deploy], or https://www.cloudbees.com/jenkins/juc-2014/berlin/speakers#VincentLatombe[Vincent] talking about https://wiki.jenkins.io/display/JENKINS/Literate+Plugin[literate plugin]. I'm also looking forward to the https://www.cloudbees.com/jenkins/juc-2014/berlin/sessions#JulienPivotto[Puppetizing Jenkins Pipelines] from Julien Pivotto, which (if I understand correctly) is about deploying Jenkins and its jobs through Puppet — That is something I notice many people are very interested in nowadays. +\n +\n\n+\nAll of them are looking forward to meeting you and hearing your thoughts and feedbacks, and I'm sure this is going to be a great learning/networking oppotunities. +\n +\n\n+\nhttps://www.eventbrite.com/e/jenkins-user-conference-boston-ma-june-18-2014-tickets-10558652213[Registration for Boston is here], and https://www.eventbrite.com/e/jenkins-user-conference-berlin-germany-june-25-2014-tickets-10557974185[registration for Berlin is here]. Seats are starting to fill up now, so don't procrastinate too much!","title":"JUC agenda posted","tags":["general","meetup","news","juc","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2016-06-10T00:00:00.000Z","id":"14ea0208-9b66-5e17-a4c1-d9b43525e9f4","slug":"/blog/2016/06/10/save-costs-with-ec2-spot-fleet/","strippedHtml":"This is a guest post by Aleksei Besogonov, Senior Software Developer at\nAmazon Web Services.\n\nEarlier this year, we published a case study on how\nLyft has used Amazon EC2 Spot instances to save 75% on their continuous delivery\ninfrastructure costs by simply changing four lines of code. Several other EC2 customers like Mozilla have\nalso reduced costs of their\ncontinuous integration, deployment and testing pipelines by up to 90% on Spot instances. You can view\nthe current savings on Spot instances over EC2 On-demand instances using the\nSpot Bid Advisor :\n\nAWS Spot instances are spare EC2 instances that you can bid on. While your Spot instances may be\nterminated when EC2’s spare capacity declines, you can automatically replenish these instances and\nmaintain your target capacity using\nEC2 Spot fleets. As each\ninstance type and Availability Zone provides an alternative capacity pool, you can select multiple\nsuch pools to launch the lowest priced instances currently available by launching a Spot\nfleet on the Amazon EC2 Spot Requests console\nor using the AWS CLI/SDK tools.\n\nIn this walkthrough, we’ll show you how to configure Jenkins to automatically scale a fleet of Spot\ninstances up or down depending on the number jobs to be completed.\n\nRequest an Amazon EC2 Spot fleet\n\nTo get started, login to Amazon EC2 console, and click on Spot Requests\nin the left hand navigation pane. Alternatively, you can directly login to\nAmazon EC2 Spot Requests console. Then click on the\nRequest Spot Instances button at the top of the dashboard.\n\nIn the Spot instance launch wizard, select the Request & Maintain option to request a Spot fleet that automatically\nprovisions the most cost-effective EC2 Spot instances, and replenishes them if interrupted. Enter an initial\ntarget capacity, choose an AMI, and select multiple instance types to automatically provision the lowest priced\ninstances available.\n\nOn the next page, ensure that you have selected a key pair, complete the launch wizard, and note the Spot\nfleet request ID.\n\nAmazon EC2 Spot fleet automates finding the lowest priced instances for you, and enables your Jenkins cluster\nto maintain the required capacity; so, you don’t need any bidding algorithms to provision the optimal Spot\ninstances over time.\n\nConfigure Jenkins\n\nInstall the Plugin\n\nFrom the Jenkins dashboard, select Manage Jenkins, and then click Manage Plugins. On the Available tab,\nsearch for and select the EC2 Fleet Jenkins Plugin. Then click the Install button.\n\nAfter the plugin installation is completed, select Manage Jenkins from the Jenkins dashboard, and\nclick Configure System. In the Cloud section, select Amazon Spot Fleet to add a new Cloud.\n\nConfigure AWS Credentials\n\nNext, we will configure the AWS and agent node credentials. Click the Add button next to AWS Credentials,\nselect Jenkins, and enter your AWS Access Key, secret, and ID.\n\nNext, click the Add button in the Spot fleet launcher to configure your agents with an SSH key.\nSelect Jenkins, and enter the username and private key (from the key pair you configured in your Spot fleet request)\nas shown below.\n\nConfirm that the AWS and SSH credentials you just added are selected. Then choose the region, and the Spot fleet\nrequest ID from the drop-down. You can also enter the maximum idle time before your cluster automatically scales\ndown, and the maximum cluster size that it can scale up to.\n\nSubmit Jobs and View Status\n\nAfter you have finished the previous step, you can view the EC2 Fleet Status in the left hand navigation pane on\nthe Jenkins dashboard. Now, as you submit more jobs, Jenkins will automatically scale your Spot fleet to add more\nnodes. You can view these new nodes executing jobs under the Build Executor Status.\nAfter the jobs are done, if the nodes remain free for the specified idle time (configured in the previous step),\nthen Jenkins releases the nodes, automatically scaling down your Spot fleet nodes.\n\nBuild faster and cheaper\n\nIf you have a story to share about your team or product, or have a question to ask, do leave a comment\nfor us; we’d love to connect with you!","title":"Save up to 90% of CI cost on AWS with Jenkins and EC2 Spot Fleet","tags":["aws","plugins","ec2"],"authors":[{"avatar":null,"blog":null,"github":"Cyberax","html":"","id":"cyberax","irc":null,"linkedin":null,"name":"Aleksei Besogonov","slug":"/blog/authors/cyberax/","twitter":null}]}},{"node":{"date":"2016-06-13T00:00:00.000Z","id":"169b8859-fdce-5c99-a2ba-d10df55f6894","slug":"/blog/2016/06/13/gsoc-usage-stats-analysis/","strippedHtml":"About myself\n\nHello, my name is Payal Priyadarshini.  I am pursing my major in Computer\nScience & Engineering at the Indian Institute of Technology Kharagpur, India.  I\nam very proficient in writing code in Python, C++, Java and currently getting\nfamiliar and hopefully good in Groovy too.\n\nI have internship experiences in renowned institutions like Google and VMware\nwhere I worked with some exciting technologies for example Knowledge Graphs,\nBigTable, SPARQL, RDF in Google. I am a passionate computer science student who\nis always interested in learning and looking for new challenges and\ntechnologies.That’s how I came across to Google Summer of Code where I am\nworking on some exciting data mining problems which you are going to encounter\nbelow in this blog.\n\nProject Overview\n\nJenkins has collected anonymous usage information of more than 100,000\ninstallations which includes set of plugins and their versions etc and also\nrelease history information of the upgrades. This data collection can be used\nfor various data mining experiments. The main goal of this project is to perform\nvarious analysis and studies over the available dataset to discover trends\nin data usage. This project will help us to learn more about the Jenkins\nusage by solving various problems, such as:\n\nPlugin versions installation trends, will let us know about the versions installation behaviour of a given plugin.\n\nSpotting downgrades, which will warn us that something is wrong with the version from which downgrading was performed.\n\nCorrelating what users are saying (community rating) with what users are doing (upgrades/downgrades).\n\nDistribution of cluster size, where clusters represents jobs, nodes count which approximates the size of installation.\n\nFinding set of plugins which are likely to be used together, will setup pillar for plugin recommendation system.\n\nAs a part of the Google Summer of Code 2016, I will be working on the above\nmentioned problems. My mentors for the project are Kohsuke Kawaguchi and Daniel Beck. Some analyses has already been done over this\ndata but those are outdated as charts can be more clearer and interactive. This project aims to improvise existing\nstatistics and generating new ones discussed above.\n\nUse Cases\n\nThis project covers wide-range of the use-cases that has been derived from the\nproblems mentioned above.\n\nUse Case 1: Upgrade/Downgrade Analysis\n\nUnderstanding the trend in upgrades and downgrades have lots of utilities, some\nof them have already been explained earlier which includes measuring the\npopularity, spotting downgrades, giving warning about the wrong versions quickly\netc.\n\nUse Case 1.1: Plugin versions installation trends\n\nHere we are analysing the trend in the different version installations for a\ngiven plugin. This use-case will help us to know about:\n\nTrend in the upgrade to the latest version released for a given plugin.\n\nTrend in the popularity decrement of the previous versions after new version release.\n\nFind the most popular plugin version at any given point of time.\n\nUse Case 1.2: Spotting dowgrades\n\nHere we are interested to know, how many installations are downgraded from any\ngiven version to previously used version. Far fetched goal of this analysis is\nto give warning when something goes wrong with the new version release, which\ncan be sensed using downgrades performed by users. This analysis can be\naccomplished by studying the monotonic property of the version number vs.\ntimestamp graph for a given plugin.\n\nUse Case 1.3: Correlation with the perceived quality of Jenkins release\n\nTo correlate what users are saying to what users are doing, we have community\nratings which tells us about the ratings and reviews of the releases and has\nfollowing parameters:\n\nUsed the release on production site w/o major issues.\n\nDon’t recommend to other.\n\nTried but rolled it back to the previous version.\n\nFirst parameters can be calculated from the Jenkins usage data and third\nparameter is basically spotting downgrades(use case 1.2). But the second\nparameter is basically an expression which is not possible to calculate. This\nanalysis is just to get a subjective idea about the correlation.\n\nUse Case 2: Plugin Recommendation System\n\nThis section involves setting up ground work for the plugin recommendation\nsystem. The idea is to find out the set of plugins which are most likely to be\nused together. Here we will be following both content based filtering as well as\ncollaborative filtering approach.\n\nCollaborative Filtering\n\nThis approach is based upon analysing large amount of information on\ninstallation’s behaviours and activities. We have implicit form of the data\nabout the plugins, that is for every install ids, we know the set of plugins\ninstalled. We can use this information to construct plugin usage graph where\nnodes are the plugins and the edges between them is the number of installations\nin which both plugins are installed together.\n\nContent-based Filtering\n\nThis method is based on a properties or the content of the item for example\nrecommending items that are similar to the those that a user liked in the past\nor examining in the present based upon some properties. Here, we are utilizing\nJenkins\nplugin dependency graph to learn about the properties of a plugin. This graph\ntells us about dependent plugins on a given plugin as well as its dependencies\non others. Here is an example to show, how this graph is use for content based\nfiletring, suppose if a user is using “CloudBees Cloud Connector”, then we can\nrecommend them for “CloudBees Registration Plugin” as both plugins are dependent\non “CloudBees Credentials Plugin”.\n\nAdditional Details\n\nYou may find the complete project proposal along with the detailed design of the\nuse-cases with their implementation details here in the\ndesign\ndocument.\n\nA complete version of the use-case 1: Upgrade & Downgrade Analysis should be\navailable in late June and basic version of plugin recommendation system will be\navailable in late July.\n\nI do appreciate any kind of feedback and suggestions.  You may add comments in\nthe\ndesign\ndoc.  I will be posting updates about the statistics generation status on the\njenkins-dev mailing\nlist and jenkins-infra mailing list.\n\nLinks:\n\nDesign Doc\n\nGoogle Summer of Code\n\nGithub infra-stats\n\nJenkins statistics\n\nJenkins Plugin Dependency Graph\n\nGithub GSoC Jenkins Usage Statistics Analysis","title":"GSoC Project Intro: Usage Statistics Analysis","tags":["usage-statistics","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"payal94","html":"","id":"payal94","irc":null,"linkedin":null,"name":"Payal Priyadarshini","slug":"/blog/authors/payal94/","twitter":null}]}},{"node":{"date":"2016-06-13T00:00:00.000Z","id":"29d1cef2-5ba3-567a-b9dc-18a27c3802aa","slug":"/blog/2016/06/13/june-jenkins-events/","strippedHtml":"It is hard to believe that the first half of 2016 is almost over and summer is\njust around the corner.  As usual, there are plenty of educational Jenkins\nevents planned for this month. Below lists what’s happening in your neck of the\nwoods:\n\nOnline JAM\n\nJune 14: Plugin Development - Basics\n\nNorth America JAMs\n\nJune 14: Pipeline in a Windows Environment - Boston, Massachusetts\n\nJune 15: Open Source Jenkins 2.0, What’s New? - Washington, DC\n\nJune 22: Continuously Deploying Containers with Jenkins Pipeline to a Docker Swarm Cluster - Seattle, Washington\n\nEurope JAM\n\nJune 14: Jenkins 2.0 - London, United Kingdom\n\nJune 22: Pipeline As Code - Toulouse, France\n\nLinks\n\nStart a JAM in your city if there isn’t one already.\n\nBecome a JAM member\n\nBecome an online JAM member\n\nSpeak or sponsor at a JAM. Contact us at jenkinsci-jam@googlegroups.com\n\nTake advantage of the super-early-bird price to Jenkins World 2016\n\nBecome a Jenkins project contributor","title":"Upcoming June Jenkins Events","tags":["events","jam"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-06-14T00:00:00.000Z","id":"0e5d650b-c2ea-591f-9965-564c0e2df2c3","slug":"/blog/2016/06/14/gsoc-jenkins-support-core-plugin-improvements/","strippedHtml":"About me\n\nI am Minudika Malshan, an undergraduate student in Computer Science and Engineering from University of Moratuwa, Sri Lanka.\n\nAs a person who is passionate in open source software development and seeking for new knowledge and experience, I am willing to give my contribution for this project.\n\nLinkedIn | Twitter\n\nAbstract\n\nThe Support-Core Plugin provides the basic infrastructure for generating \"bundles\" of support information with Jenkins.\nThere are two kinds of bundles.\n\nAutomatic bundles: Bundles which are generated and get saved in $JENKINS_HOME/support once per hour starting 15 seconds after Jenkins starts the plugin.\nThe automatic bundles are retained using an exponential aging strategy. Therefore it’s possible to have a bunch of them over the entire lifetime after the plugin installing the plugin.\n\nOn demand bundles: These bundles are generated from the root \"Support\" action.\n\nHowever current support-core plugin is not much user friendly. The object of this project is to make it more user friendly by adding some features which make a sophisticated environment for the user who use support plugin.\n\nIn this project scope, there are three features and improvements we are going to consider.\n\nEase the bundles management by the administrator ( JENKINS-33090)\n\nAdding an option to anonymize customer labels (strings created by the user such as name of a job, folder, view, agent, and template etc). ( JENKINS-33091)\n\nAllowing user to create an issue and submit a bundle into the OSS tracker using the support-core plugin. ( JENKINS-21670)\n\nArnaud Héritier and Steven Christou are guiding me through the project as my mentors.\n\nTasks and Deliverables\n\nEase the bundles management by the administrator.\n\nUnder this task, the following functions are going to be implemented.\n\nListing bundles stored on the jenkins instance with their details.\n\nAllowing user to download each bundle.\n\nAllowing user to delete each bundle or all bundles.\n\nAllowing user to browse the content of each bundle.\n\nAutomatically purging old bundles.\n\nEnabling user to create an issue and submit a bundle into the OSS tracker\n\nWhen a Jenkins user sees an issue, he/she commonly contacts his support contacts (Jenkins instance admins) and then Jenkins admins troubleshoot the issue.\nThe objective of this task is to implement a feature which enables the user to report an issue to a admin through support core plugin.\n\nWhen creating bundles to attach with the ticket, it is important to protect the privacy of the user who creates the ticket. When considering doing that, anonymizing user created labels (texts) comes to the front.\n\nAdding  an option to anonymize customer labels\n\nThe following functions will be implemented under this taks.\n\nCreating randomized tokens for labels created by users.\n\nProducing a mapping for those labels.\n\nSubstituting encoded labels into all the files included in the support bundle.\n\nWhen creating randomized tokens, it would be much useful and effective if we can create those tokens in a way they make sense to humans. (i.e. readable to humans). For that, I am hoping to use a suitable java library to create human friendly random tokens. One of such libraries is wordnet-random-name.\n\nHowever in order to substitute randomized tokens, all files included in the bundle should be read. This can become inefficient when bundle consists of large number of files.  Therefore it’s important to follow an optimized method for this task.\n\nReferences\n\nInitial proposal of the project\n\nProject repository","title":"GSoC Project Intro: Support Core Plugin Improvements","tags":["core","gsoc","plugin","support-core"],"authors":[{"avatar":null,"blog":null,"github":"minudika","html":"","id":"minudika","irc":null,"linkedin":null,"name":"Minudika Malshan","slug":"/blog/authors/minudika/","twitter":"minudika"}]}},{"node":{"date":"2016-06-14T00:00:00.000Z","id":"06cd0ff0-b842-5785-b6b9-ec7c24f8ea95","slug":"/blog/2016/06/14/jenkins-world-agenda/","strippedHtml":"Join us in Santa Clara, California on September 13-15, 2016!\n\nWe are excited to announce the Jenkins\nWorld agenda is now live. There will be 50+ sessions, keynotes, training,\ncertifications and workshops. Here are a few highlights of what you can expect:\n\nHigh level topics\n\nContinuous delivery\n\nDevOps\n\nMicroservices architectures\n\nTesting\n\nAutomation tools\n\nPlugin development\n\nPipeline\n\nBest practices\n\nAnd much more\n\nAdditionally, Jenkins World offers great opportunities for hands-on learning,\nexploring and networking:\n\nPlugin Development Workshop\n\nDue to its popularity in previous years, we are bringing back the plugin\ndevelopment workshop. This workshop will introduce developers to the Jenkins\nplugin ecosystem and terminology. The goal is to provide a cursory overview of\nthe resources available to Jenkins plugin developers. Armed with this\ninformation, Jenkins developers can learn how to navigate the project and\ncodebase to find answers to their questions.\n\nBirds of a Feather Sessions\n\nBoFs, as they are usually known, will be a new addition to Jenkins World this\nyear. Sessions will be curated on various technical topics from DevOps to how\nenterprises are integrating Jenkins in their environment. Discussions will be\nlead by the industry’s brightest minds who have an influence in shaping the\nfuture of Jenkins.\n\nAsk the Experts\n\nGot a Jenkins question that’s been keeping you up at night? Need to bounce ideas\noff somebody? Or you just need someone to fix your Jenkins issue? This is your chance\nto get connected with the Jenkins Experts. Experts will be on hand to help with\nall your Jenkins needs on Sept 14th & 15th.\n\nPrepare for Jenkins Certification\n\nThe objective of this session is to help you assess your level of readiness for\nthe certification exam - either the Certified Jenkins Engineer (CJE/open source)\ncertification or the Certified CloudBees Jenkins Platform Engineer\n(CCJPE/CloudBees-specific) certification. After an overview about the\ncertification program, a Jenkins expert from CloudBees will walk you through the\nvarious sections of the exam, highlighting the important things to controller ahead\nof time, not only from a pure knowledge perspective but also in terms of\npractical experience. This will be an interactive session.\n\nHope to see you at Jenkins World 2016!\n\nDon’t miss out on\nSuper\nEarly Bird Rate $399. Price goes up after July 1.\n\nLinks\n\nStart a JAM in your city if there isn’t one already.\n\nBecome a JAM member.\n\nBecome an online JAM member\n\nBe a JAM speaker or sponsor. Let us know jenkinsci-jam@googlegroups.com\n\nBecome a Jenkins project contributor","title":"Jenkins World Agenda is Live!","tags":["event"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-06-15T00:00:00.000Z","id":"92e6efae-588c-5a80-886a-8fe7822dcea3","slug":"/blog/2016/06/15/jenkins-pipeline-scalability/","strippedHtml":"This is a guest post by Damien\nCoraboeuf, Jenkins project contributor and Continuous Delivery consultant.\n\nImplementing a CI/CD solution based on Jenkins has become very easy. Dealing\nwith hundreds of jobs? Not so much. Having to scale to thousands of jobs?\nNow this is a real challenge.\n\nThis is the story of a journey to get out of the jungle of jobs…​\n\nStart of the journey\n\nAt the beginning of the journey there were several projects using roughly the same\ntechnologies. Those projects had several\nbranches, for maintenance of releases, for new features.\n\nIn turn, each of those branches had to be carefully built, deployed on different\nplatforms and versions, promoted so they could be tested for functionalities,\nperformances and security, and then promoted again for actual delivery.\n\nAdditionally, we had to offer the test teams the means to deploy any version of\ntheir choice on any supported platform in order to carry out some manual tests.\n\nThis represented, for each branch, around 20 jobs. Multiply this by the number of\nbranches and projects, and there you are: more than two years after the start\nof the story, we had more than 3500 jobs.\n\n3500 jobs. Half a dozen people to manage them all…​\n\nPreparing the journey\n\nHow did we deal with this load?\n\nWe were lucky enough to have several assets:\n\ntime - we had time to design a solution before the scaling went really out of\ncontrol\n\nforecast - we knew that the scaling would occur and we were not taken by\nsurprise\n\ntooling - the Jenkins Job DSL\nwas available, efficient and well documented\n\nWe also knew that, in order to scale, we’d have to provide a solution with the\nfollowing characteristics:\n\nself-service - we could not have a team of 6 people become a bottleneck for\nenabling CI/CD in projects\n\nsecurity - the solution had to be secure enough in order for it to be used by\nremote developers we never met and didn’t know\n\nsimplicity - enabling CI/CD had to be simple so that people having\nnever heard of it could still use it\n\nextensibility - no solution is a one-size-fits-all and must be flexible\nenough to allow for corner cases\n\nAll the mechanisms described in this article are available through the\nJenkins Seed plugin.\n\nCreating pipelines using the Job DSL and embedding the scripts in the code was\nsimple enough. But what about branching? We needed a mechanism to allow the\ncreation of pipelines per branch, by downloading the associated DSL and to\nrun it in a dedicated folder.\n\nBut then, all those projects, all those branches, they were mostly using the\nsame pipelines, give or take a few configurable items. Going this way would\nhave lead to a terrible duplication of code, transforming a job maintenance\nnightmare into a code maintenance nightmare.\n\nPipeline as configuration\n\nOur trick was to transform this vision of \"pipeline as code\" into a \"pipeline\nas configuration\":\n\nby maintaining well documented and tested \"pipeline libraries\"\n\nby asking projects to describe their pipeline not as code, but as property\nfiles which would:\n\ndefine the name and version of the DSL pipeline library to use\n\nuse the rest of the property file to configure the pipeline library, using\nas many sensible default values as possible\n\nPiloting the pipeline from the SCM\n\nOnce this was done, the only remaining trick was to automate the creation,\nupdate, start and deletion of the pipelines using SCM events. By enabling SCM\nhooks (in GitHub, BitBucket or even in Subversion), we could:\n\nautomatically create a pipeline for a new branch\n\nregenerate a pipeline when the branch’s pipeline description was modified\n\nstart the pipeline on any other commit on the branch\n\nremove the pipeline when the branch was deleted\n\nOnce a project wants to go in our ecosystem, the Jenkins team \"seeds\" the\nproject into Jenkins, by running a job and giving a few parameters.\n\nIt will create a folder for the project and grant proper authorisations, using\nActive Directory group names based on the project name.\n\nThe hook for the project must be registered into the SCM and you’re up and\nrunning.\n\nConfiguration and code\n\nMixing the use of strong pipeline libraries configured by properties and the\ndirect use of the Jenkins Job DSL is still possible. The Seed plugin\nsupports all kinds of combinations:\n\nuse of pipeline libraries only - this can even be enforced\n\nuse a DSL script which can in turn use some classes and methods defined in\na pipeline library\n\nuse of a Job DSL script only\n\nUsually, we tried to have a maximum reuse, through only pipeline libraries, for\nmost of our projects, but in other circumstances, we were less strict and\nallowed some teams to develop their own pipeline script.\n\nEnd of the journey\n\nIn the end, what did we achieve?\n\nSelf service ✔︎\n\nPipeline automation from SCM - no intervention from the Jenkins team but for\nthe initial bootstrapping\n\nGetting a project on board of this system can be done in a few minutes only\n\nSecurity ✔︎\n\nProject level authorisations\n\nNo code execution on the controller\n\nSimplicity ✔︎\n\nProperty files\n\nExtensibility ✔︎\n\nPipeline libraries\n\nDirect job DSL still possible\n\nSeed and Pipeline plugin\n\nNow, what about the Pipeline plugin? Both\nthis plugin and the Seed plugin have common functionalities:\n\nWhat we have found in our journey is that having a \"pipeline as configuration\"\nwas the easiest and most secure way to get a lot of projects on board, with\ndevelopers not knowing Jenkins and even less the DSL.\n\nThe outcome of the two plugins is different:\n\none pipeline job for the Pipeline plugin\n\na list of orchestrated jobs for the Seed plugin\n\nIf time allows, it would be probably a good idea to find a way to integrate the\nfunctionalities of the Seed plugin into the pipeline framework, and to keep\nwhat makes the strength of the Seed plugin:\n\npipeline as configuration\n\nreuseable pipeline libraries, versioned and tested\n\nLinks\n\nYou can find additional information about the Seed plugin and its usage at the\nfollowing links:\n\nthe Seed plugin itself\n\nJUC London, June 2015\n\nBruJUG Brussels, March 2016","title":"Jenkins Pipeline Scalability in the Enterprise","tags":["jenkins","scalability","dsl"],"authors":[{"avatar":null,"blog":null,"github":"dcoraboeuf","html":"<div class=\"paragraph\">\n<p>I&#8217;ve started many years ago in the Java development before switching\nprogressively toward continuous delivery aspects.  I&#8217;m now a consultant\nimplementing CD solutions based on Jenkins. Implementation of the Pipeline\nas Code principles have allowed one of my clients to be able to manage more\nthan 3000 jobs, using a self service approach based on the Seed plugin.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;m also a contributor for some Jenkins plugins and the author of the\nOntrack application, which allows the monitoring of continuous delivery\npipelines.</p>\n</div>","id":"dcoraboeuf","irc":null,"linkedin":null,"name":"Damien Coraboeuf","slug":"/blog/authors/dcoraboeuf/","twitter":"DamienCoraboeuf"}]}},{"node":{"date":"2016-06-16T00:00:00.000Z","id":"9d5b4fb7-1151-5470-985c-045b0dd79455","slug":"/blog/2016/06/16/parallel-test-executor-plugin/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nIn this blog post, I’ll show you how to speed up your pipeline by using the\nParallel Test Executor Plugin.\n\nSo much to do, so little time…​\n\nIn my career, I’ve helped many teams move to continuous integration and delivery. One problem\nwe always encounter is how to run all the tests needed to ensure high-quality\nchanges while still keeping pipeline times reasonable and changes flowing\nsmoothly. More tests mean greater confidence, but also longer wait times.\nBuild systems may or may not support running tests in parallel, but they still only use one\nmachine even while other lab machines sit idle. In these cases, parallelizing\ntest execution across multiple machines is a great way to speed up pipelines.\nThe Parallel Test Executor plugin lets us leverage Jenkins do just that with no\ndisruption to the rest of the build system.\n\nSerial Test Execution\n\nFor this post, I’ll be running a pipeline based on the\nJenkins Git Plugin. I’ve modified\nthe Jenkinsfile from that project to allow us to compare execution times to our\nlater changes, and I’ve truncated the \"mvn\" utility method since it remains\nunchanged.  You can find the original file\nhere.\n\nnode {\n  stage 'Checkout'\n  checkout scm\n\n  stage 'Build'\n\n  /* Call the Maven build without tests. */\n  mvn \"clean install -DskipTests\"\n\n  stage 'Test'\n  runTests()\n\n  /* Save Results. */\n  stage 'Results'\n\n  /* Archive the build artifacts */\n  archive includes: 'target/*.hpi,target/*.jpi'\n}\n\nvoid runTests(def args) {\n  /* Call the Maven build with tests. */\n  mvn \"install -Dmaven.test.failure.ignore=true\"\n\n  /* Archive the test results */\n  junit '**/target/surefire-reports/TEST-*.xml'\n}\n\n/* Run Maven */\nvoid mvn(def args) { /* ... */ }\n\nThis pipeline expects to be run from a Jenkinsfile in SCM.\nTo copy and paste it directly into a Jenkins Pipeline job, replace the checkout scm step with\ngit 'https://github.com/jenkinsci/git-plugin.git'.\n\nThis is a Maven project, so the Jenkinsfile is pretty simple.\nI’ve split the Maven build into separate “Build” and “Test”\nstages. Maven doesn’t support this split very well, it wants to run all\nthe steps of the lifecycle in order every time. So, I have to call Maven twice:\nfirst using the “skipTests” property to do only build steps in the first call,\nand then a second time with out that property to run tests.\n\nOn my quad-core machine, executing this pipeline takes about 13 minutes and 30\nseconds.  Of that time, it takes 13 minutes to run about 2.7 thousand tests in\nserial.\n\nParallel Test Execution\n\nThis looks like an ideal project for parallel test execution: a short build\nfollowed by a large number of serially executed tests that consume the most of\nthe pipeline time. There are a number of things I could try to speed this up.\nFor example, I could modify test harness to look for ways to parallelize\nthe test execution on this single machine. Or I could try speed up the tests\nthemselves. Both of those can be time-consuming and both risk destabilizing the\ntests. I’d need to know more about the project to do it well.\n\nI’ll avoid that risk by using Jenkins and the\nParallel Test Executor Plugin to\nparallelize the tests across multiple nodes instead. This will isolate the tests\nfrom each other, while still giving us speed gains from parallel execution.\n\nThe plugin reads the list of tests from the results archived in the previous execution of this\njob and splits that list into a specified number of sublists. I can then use\nthose sublists to execute the tests in parallel, passing a different sublist to\neach node.\n\nLet’s look at how this changes the pipeline:\n\nnode { /* ...unchanged... */ }\n\nvoid runTests(def args) {\n  /* Request the test groupings.  Based on previous test results. */\n  /* see https://wiki.jenkins.io/display/JENKINS/Parallel+Test+Executor+Plugin and demo on github\n  /* Using arbitrary parallelism of 4 and \"generateInclusions\" feature added in v1.8. */\n  def splits = splitTests parallelism: [$class: 'CountDrivenParallelism', size: 4], generateInclusions: true\n\n  /* Create dictionary to hold set of parallel test executions. */\n  def testGroups = [:]\n\n  for (int i = 0; i }. */\n    /*     includes = whether list specifies tests to include (true) or tests to exclude (false). */\n    /*     list = list of tests for inclusion or exclusion. */\n    /* The list of inclusions is constructed based on results gathered from */\n    /* the previous successfully completed job. One additional record will exclude */\n    /* all known tests to run any tests not seen during the previous run.  */\n    testGroups[\"split-${i}\"] = {  // example, \"split3\"\n      node {\n        checkout scm\n\n        /* Clean each test node to start. */\n        mvn 'clean'\n\n        def mavenInstall = 'install -DMaven.test.failure.ignore=true'\n\n        /* Write includesFile or excludesFile for tests.  Split record provided by splitTests. */\n        /* Tell Maven to read the appropriate file. */\n        if (split.includes) {\n          writeFile file: \"target/parallel-test-includes-${i}.txt\", text: split.list.join(\"\\n\")\n          mavenInstall += \" -Dsurefire.includesFile=target/parallel-test-includes-${i}.txt\"\n        } else {\n          writeFile file: \"target/parallel-test-excludes-${i}.txt\", text: split.list.join(\"\\n\")\n          mavenInstall += \" -Dsurefire.excludesFile=target/parallel-test-excludes-${i}.txt\"\n        }\n\n        /* Call the Maven build with tests. */\n        mvn mavenInstall\n\n        /* Archive the test results */\n        junit '**/target/surefire-reports/TEST-*.xml'\n      }\n    }\n  }\n  parallel testGroups\n}\n\n/* Run Maven */\nvoid mvn(def args) { /* ... */ }\n\nThat’s it!  The change is significant but it is all encapsulated in this one\nmethod in the Jenkinsfile.\n\nGreat (ish) Success!\n\nHere’s the results for the new pipeline with parallel test execution:\n\nThe tests ran almost twice as fast, without changes outside pipeline.  Great!\n\nHowever, I used 4 test executors, so why am I not seeing a 4x? improvement.\nA quick review of the logs shows the problem: A small number of tests are taking up\nto 5 minutes each to complete! This is actually good news. It means that I\nshould be able to see further improvement in pipeline throughput just by refactoring\nthose few long running tests into smaller parts.\n\nConclusion\n\nWhile I would like to have seen closer to a 4x improvement to match to number\nof executors, 2x is still perfectly respectable. If I were working on a group of projects\nwith similar pipelines, I’d be completely comfortable reusing these same changes\non my other project and I’d expect to similar improvement without any disruption to\nother tools or processes.\n\nLinks\n\nhttps://wiki.jenkins.io/display/JENKINS/Parallel+Test+Executor+Plugin","title":"Faster Pipelines with the Parallel Test Executor Plugin","tags":["tutorial","pipeline","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-06-21T00:00:00.000Z","id":"719def0e-69a3-5e1c-b789-b2d19d5834dd","slug":"/blog/2016/06/21/gsoc-midterm-presentations-ann/","strippedHtml":"As you probably know, on this year Jenkins projects participates in\nGoogle Summer of Code 2016.\nYou can find more information about the accepted projects on the GSoC subproject page and in the\nJenkins Developer mailing list.\n\nOn this week GSoC students are going to present their projects as a part of mid-term evaluation,\nwhich covers one month of community bonding and one month of coding.\n\nWe would like to invite Jenkins developers to attend these meetings.\nThere are two additional months of coding ahead for successful students, so any feedback from Jenkins contributors and users will be appreciated.\n\nMeeting #1 - June 23, 7:00 PM UTC - 9:00 PM UTC\n\nSupport Core plugin improvements by Minudika Malshan\n\nIntro blogpost\n\nExternal Workspace Manager by Alex Somai\n\nIntro blogpost\n\nPlugin documentation publishing to jenkins.io by Cynthia Anyango\n\nIntro blogpost\n\nQ&A session\n\nMeeting link\n\nMeeting #2 - June 24, 8AM UTC - 9 AM UTC\n\nJenkins WebUI: Improving Job Creation/Configuration by Samat Davletshin\n\nIntro blogpost\n\nQ&A session\n\nMeeting link\n\nBoth meetings will be conducted and recorded via Hangouts on Air.\nThe recorded sessions will be made public after the meetup.\nThe agenda may change a bit.\n\nLinks\n\nMid-term presentations announcement on Jenkins Developer mailing list\n\nJenkins GSoC 2016 Wiki Page\n\nJenkins project page on the GSoC2016 website","title":"GSoC: Mid-term presentations by students on June 23 and 24","tags":["core","gsoc","plugin","general"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-06-29T00:00:00.000Z","id":"72dc398a-0c3a-5b36-949e-7687e6ecbefc","slug":"/blog/2016/06/29/from-freestyle-to-pipeline/","strippedHtml":"This is a guest post by R. Tyler Croy, who is a\nlong-time contributor to Jenkins and the primary contact for Jenkins project\ninfrastructure. He is also a Jenkins Evangelist at\nCloudBees, Inc.\n\nFor ages I have used the \"Build After\" feature in Jenkins to cobble together\nwhat one might refer to as a \"pipeline\" of sorts. The Jenkins project itself, a\nmajor consumer of Jenkins, has used these daisy-chained Freestyle jobs to drive\na myriad of delivery pipelines in our infrastructure.\n\nOne such \"pipeline\" helped drive the complex process of generating the pretty\nblue charts on\nstats.jenkins.io.\nThis statistics generation process primarily performs two major tasks, on rather\nlarge sets of data:\n\nGenerate aggregate monthly \"census data.\"\n\nProcess the census data and create trend charts\n\nThe chained jobs allowed us to resume the independent stages of the pipeline,\nand allowed us to run different stages on different hardware (different\ncapabilities) as needed. Below is a diagram of what this looked like:\n\nThe infra_generate_monthly_json would run periodically creating the\naggregated census data, which would then be picked up by infra_census_push\nwhose sole responsibility was to take census data and publish it to the\nnecessary hosts inside the project’s infrastructure.\n\nThe second, semi-independent, \"pipeline\" would also run periodically. The\ninfra_statistics job’s responsibility was to use the census data, pushed\nearlier by infra_census_push, to generate the myriad of pretty blue charts\nbefore triggering the\ninfra_checkout_stats job which would make sure stats.jenkins.io was\nproperly updated.\n\nSuffice it to say, this \"pipeline\" had grown organically over a period time when\nmore advanced tools weren’t quite available.\n\nWhen we migrated to newer infrastructure for\nci.jenkins.io earlier this year I took the\nopportunity to do some cleaning up. Instead of migrating jobs verbatim, I pruned\nstale jobs and refactored a number of others into proper\nPipelines, statistics generation being an obvious\ntarget!\n\nOur requirements for statistics generation, in their most basic form, are:\n\nEnable a sequence of dependent tasks to be executed as a logical group (a\npipeline)\n\nEnable executing those dependent tasks on various pieces of infrastructure\nwhich support different requirements\n\nActually generate those pretty blue charts\n\nIf you wish to skip ahead, you can jump straight to the\nJenkinsfile\nwhich implements our new Pipeline.\n\nThe first iteration of the Jenkinsfile simply defined the conceptual stages we\nwould need:\n\nnode {\n    stage 'Sync raw data and census files'\n\n    stage 'Process raw logs'\n\n    stage 'Generate census data'\n\n    stage 'Generate stats'\n\n    stage 'Publish census'\n\n    stage 'Publish stats'\n}\n\nHow exciting! Although not terrifically useful. When I began actually\nimplementing the first couple stages, I noticed that the Pipeline might sync\ndozens of gigabytes of data every time it ran on a new agent in the cluster.\nWhile this problem will soon be solved by the\nExternal\nWorkspace Manager plugin, which is currently being developed. Until it’s ready,\nI chose to mitigate the issue by pinning the execution to a consistent agent.\n\n/* `census` is a node label for a single machine, ideally, which will be\n * consistently used for processing usage statistics and generating census data\n */\nnode('census && docker') {\n    /* .. */\n}\n\nRestricting a workload which previously used multiple agents to a single one\nintroduced the next challenge. As an infrastructure administrator, technically\nspeaking, I could just install all the system dependencies that I want on this\none special Jenkins agent. But what kind of example would that be setting!\n\nThe statistics generation process requires:\n\nJDK8\n\nGroovy\n\nA running MongoDB instance\n\nFortunately, with Pipeline we have a couple of useful features at our disposal:\ntool auto-installers and the\nCloudBees\nDocker Pipeline plugin.\n\nTool Auto-Installers\n\nTool Auto-Installers are exposed in Pipeline through the tool step and on\nci.jenkins.io we already had JDK8 and Groovy\navailable. This meant that the Jenkinsfile would invoke tool and Pipeline\nwould automatically install the desired tool on the agent executing the current\nPipeline steps.\n\nThe tool step does not modify the PATH environment variable, so it’s usually\nused in conjunction with the withEnv step, for example:\n\nnode('census && docker') {\n    /* .. */\n\n    def javaHome = tool(name: 'jdk8')\n    def groovyHome = tool(name: 'groovy')\n\n    /* Set up environment variables for re-using our auto-installed tools */\n    def customEnv = [\n        \"PATH+JDK=${javaHome}/bin\",\n        \"PATH+GROOVY=${groovyHome}/bin\",\n        \"JAVA_HOME=${javaHome}\",\n    ]\n\n    /* use our auto-installed tools */\n    withEnv(customEnv) {\n        sh 'java --version'\n    }\n\n    /* .. */\n}\n\nCloudBees Docker Pipeline plugin\n\nSatisfying the MongoDB dependency would still be tricky. If I caved in and installed\nMongoDB on a single unicorn agent in the cluster, what could I say the next time\nsomebody asked for a special, one-off, piece of software installed on our\nJenkins build agents?\n\nAfter doing my usual complaining and whining, I discovered that the CloudBees\nDocker Pipeline plugin provides the ability to run containers inside of a\nJenkinsfile. To make things even better, there are\nofficial MongoDB docker images readily\navailable on DockerHub!\n\nThis feature requires that the machine has a running Docker daemon which is\naccessible to the user running the Jenkins agent. After that, running a\ncontainer in the background is easy, for example:\n\nnode('census && docker') {\n    /* .. */\n\n    /* Run MongoDB in the background, mapping its port 27017 to our host's port\n     * 27017 so our script can talk to it, then execute our Groovy script with\n     * tools from our `customEnv`\n     */\n    docker.image('mongo:2').withRun('-p 27017:27017') { container ->\n        withEnv(customEnv) {\n            sh \"groovy parseUsage.groovy --logs ${usagestats_dir} --output ${census_dir} --incremental\"\n        }\n    }\n\n    /* .. */\n}\n\nThe beauty, to me, of this example is that you can pass a\nclosure to withRun which will\nexecute while the container is running. When the closure is finished executin,\njust the sh step in this case, the container is destroyed.\n\nWith that system requirement satisfied, the rest of the stages of the Pipeline\nfell into place. We now have a single source of truth, the\nJenkinsfile,\nfor the sequence of dependent tasks which need to be executed, accounting for\nvariations in systems requirements, and it actually generates\nthose pretty\nblue charts!\n\nOf course, a nice added bonus is the beautiful visualization of our\nnew Pipeline!\n\nLinks\n\nPipeline documentation\n\nCloudBees Docker Pipeline plugin documentation\n\nLive statistics Pipeline","title":"Migrating from chained Freestyle jobs to Pipelines","tags":["pipeline","infra"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-06-30T00:00:00.000Z","id":"6dc0bcbf-e180-50ae-86bf-0a881c810b38","slug":"/blog/2016/06/30/ewm-alpha-version/","strippedHtml":"Currently it’s quite difficult to share and reuse the same workspace between multiple jobs and across nodes.\nThere are some possible workarounds for achieving this, but each of them has its own drawback,\ne.g. stash/unstash pre-made artifacts, Copy Artifacts plugin or advanced job settings.\nA viable solution for this problem is the External Workspace Manager plugin, which facilitates workspace share and\nreuse across multiple Jenkins jobs and nodes.\nIt also eliminates the need to copy, archive or move files.\nYou can learn more about the design and goals of the External Workspace Manager project in\nthis introductory blog post.\n\nI’d like to announce that an alpha version of the External Manager Plugin has been released!\nIt’s now public available for testing.\nTo be able to install this plugin, you must follow the steps from the Experimental Plugins Update Center\nblog post.\n\nPlease be aware that it’s not recommended to use the Experimental Update Center in production installations of\nJenkins, since it may break it.\n\nThe plugin’s wiki page may be accessed\nhere.\nThe documentation that helps you get started with this plugin may be found on the\nREADME page.\nTo get an idea of what this plugin does, which are the features implemented so far and to see a working demo of it,\nyou can watch my mid-term presentation that is available here.\nThe slides for the presentation are shared on\nGoogle Slides.\n\nMy mentors, Martin and Oleg,\nand I have set up public meetings related to this plugin.\nYou are invited to join our discussions if you’d like to get more insight about the project.\nThe meetings are taking place twice a week on the Jenkins hangout,\nevery Monday at\n12 PM UTC\nand every Thursday at\n5 PM UTC.\n\nIf you have any issues in setting up or using the plugin, please feel free to ask me on the plugin’s Gitter\nchat.\nThe plugin is open-source, having the repository on\nGitHub, and you may contribute to it.\nAny feedback is welcome, and you may provide it either on the Gitter chat, or on\nJira by using the external-workspace-manager-plugin component.\n\nLinks\n\nProject repository\n\nPlugin wiki page\n\nMid-term presentation\n\nProject intro blog post\n\nGSoC page\n\nJenkins GSoC Page","title":"GSoC: External Workspace Manager Plugin alpha version","tags":["pipeline","plugins","external-workspace-manager","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"alexsomai","html":"","id":"alexsomai","irc":null,"linkedin":null,"name":"Alexandru Somai","slug":"/blog/authors/alexsomai/","twitter":"alex_somai"}]}},{"node":{"date":"2016-07-01T00:00:00.000Z","id":"4848db1b-feac-54a0-8b3e-2a0f5e3fbfc6","slug":"/blog/2016/07/01/html-publisher-plugin/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nMost projects need more that just JUnit result reporting.  Rather than writing a\ncustom plugin for each type of report, we can use the\nHTML Publisher Plugin.\n\nLet’s Make This Quick\n\nI’ve found a Ruby project,\nhermann, I’d like to build using Jenkins Pipeline. I’d\nalso like to have the code coverage results published with each build job.  I could\nwrite a plugin to publish this data, but I’m in a bit of hurry and\nthe build already creates an HTML report file using SimpleCov\nwhen the unit tests run.\n\nSimple Build\n\nI’m going to use the\nHTML Publisher Plugin\nto add the HTML-formatted code coverage report to my builds.  Here’s a simple\npipeline for building the hermann\nproject.\n\nstage 'Build'\n\nnode {\n  // Checkout\n  checkout scm\n\n  // install required bundles\n  sh 'bundle install'\n\n  // build and run tests with coverage\n  sh 'bundle exec rake build spec'\n\n  // Archive the built artifacts\n  archive (includes: 'pkg/*.gem')\n}\n\nThis pipeline expects to be run from a Jenkinsfile in SCM.\nTo copy and paste it directly into a Jenkins Pipeline job, replace the checkout scm step with\ngit 'https://github.com/reiseburo/hermann.git'.\n\nSimple enough, it builds, runs tests, and archives the package.\n\nNow I just need to add the step to publish the code coverage report.\nI know that rake spec creates an index.html file in the coverage directory.\nI’ve already installed the\nHTML Publisher Plugin.\nHow do I add the HTML publishing step to the pipeline?  The plugin page doesn’t\nsay anything about it.\n\nSnippet Generator to the Rescue\n\nDocumentation is hard to maintain and easy to miss, even more so in a system\nlike Jenkins with hundreds of plugins the each potential have one or more\ngroovy fixtures to add to the Pipeline.  The Pipeline Syntax\"Snippet Generator\" helps users\nnavigate this jungle by providing a way to generate a code snippet for any step using\nprovided inputs.\n\nIt offers a dynamically generated list of steps, based on the installed plugins.\nFrom that list I select the publishHTML step:\n\nThen it shows me a UI similar to the one used in job configuration.  I fill in\nthe fields, click \"generate\", and it shows me snippet of groovy generated from\nthat input.\n\nHTML Published\n\nI can use that snippet directly or as a template for further customization.\nIn this case, I’ll just reformat and copy it in at the end of my\npipeline.  (I ran into a minor bug\nin the snippet generated for this plugin step. Typing\nerror string in my search bar immediately found the bug and a workaround.)\n\n/* ...unchanged... */\n\n  // Archive the built artifacts\n  archive (includes: 'pkg/*.gem')\n\n  // publish html\n  // snippet generator doesn't include \"target:\"\n  // https://issues.jenkins.io/browse/JENKINS-29711.\n  publishHTML (target: [\n      allowMissing: false,\n      alwaysLinkToLastBuild: false,\n      keepAll: true,\n      reportDir: 'coverage',\n      reportFiles: 'index.html',\n      reportName: \"RCov Report\"\n    ])\n\n}\n\nWhen I run this new pipeline I am rewarded with an RCov Report link on left side,\nwhich I can follow to show the HTML report.\n\nI even added the keepAll setting to let I can also go back an look at reports on old jobs as\nmore come in.  As I said to to begin with, this is not as slick as what I\ncould do with a custom plugin, but it is much easier and works with any static\nHTML.\n\nLinks\n\nHTML Publisher Plugin\n\nJenkins Pipeline Snippet Generator","title":"Publishing HTML Reports in Pipeline","tags":["tutorial","pipeline","plugins","ruby"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-07-07T00:00:00.000Z","id":"d6aef4a7-7579-5619-b25e-5569e48f5464","slug":"/blog/2016/07/07/jenkins-2.7.1/","strippedHtml":"It’s been almost three months since we’ve released Jenkins 2.0, the first ever major version upgrade for this 10 year old project. The 2.x versions since then has been adopted by more than 20% of the users, but one segment of users who haven’t seen the benefits of Jenkins 2 is those who has been running LTS releases.\n\nBut that is no more! The new version of Jenkins LTS release we just released is 2.7.1, and now LTS users get to finally enjoy Jenkins 2.\n\nThis release also officially marks the end-of-life for Jenkins 1.x. There won’t be any future release of Jenkins 1.x beyond this point. If you are worried about the upgrade, don’t be! The core of Jenkins is still the same, and all the plugins & existing configuration will just work.","title":"Jenkins 2 hits LTS","tags":["lts","jenkins2"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2016-07-14T00:00:00.000Z","id":"a5b6f4b0-0b11-53a8-a751-ef9f1b23e787","slug":"/blog/2016/07/14/2-7-1-re-release/","strippedHtml":"We created new native packages for Jenkins 2.7.1 today. These replace the existing packages. Due to a release process issue, the packaging (RPM, etc.) was created the same way as Jenkins 1.x LTS, resulting in problems starting Jenkins on some platforms: While we dropped support for AJP in Jenkins 2.0, some 1.x packages had it enabled by default, resulting in an exception during startup.\n\nThese new packages for Jenkins 2.7.1, dated July 14, have the same scripts and parameters as Jenkins 2.x and should allow starting up Jenkins without problems. If you notice any further problems with the packaging, please report them in the packaging component.","title":"New packages for Jenkins 2.7.1","tags":["jenkins2","lts"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2016-07-18T00:00:00.000Z","id":"523da562-6777-53bd-978f-45ab4cb9092c","slug":"/blog/2016/07/18/pipeline-notifications/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nRather than sitting and watching Jenkins for job status, I want Jenkins to send\nnotifications when events occur.  There are Jenkins plugins for\nSlack,\nHipChat,\nor even email\namong others.\n\nNote: Something is happening!\n\nI think we can all agree getting notified when events occur is preferable to\nhaving to constantly monitor them just in case.  I’m going to continue from\nwhere I left off in my\nprevious post with the\nhermann project.  I added a Jenkins\nPipeline with an HTML publisher for code coverage. This week, I’d like to make\nJenkins to notify me when builds start and when they succeed or fail.\n\nSetup and Configuration\n\nFirst, I select targets for my notifications. For this blog post, I’ll use sample\ntargets that I control.  I’ve created Slack and HipChat organizations called\n\"bitwiseman\", each with one member - me.  And for email I’m running a Ruby SMTP server called\nmailcatcher, that is perfect for local testing\nsuch as this.  Aside for these concessions, configuration would be much the\nsame in a non-demo situation.\n\nNext, I install and add server-wide configuration for the\nSlack,\nHipChat,\nand Email-ext\nplugins.  Slack and HipChat use API tokens - both products have integration\npoints on their side that generate tokens which I copy into my Jenkins\nconfiguration. Mailcatcher SMTP runs locally. I just point Jenkins\nat it.\n\nHere’s what the Jenkins configuration section for each of these looks like:\n\nOriginal Pipeline\n\nNow I can start adding notification steps. The same as\nlast week, I’ll use the\nJenkins Pipeline Snippet Generator\nto explore the step syntax for the notification plugins.\n\nHere’s the base pipeline before I start making changes:\n\nstage 'Build'\n\nnode {\n  // Checkout\n  checkout scm\n\n  // install required bundles\n  sh 'bundle install'\n\n  // build and run tests with coverage\n  sh 'bundle exec rake build spec'\n\n  // Archive the built artifacts\n  archive (includes: 'pkg/*.gem')\n\n  // publish html\n  // snippet generator doesn't include \"target:\"\n  // https://issues.jenkins.io/browse/JENKINS-29711.\n  publishHTML (target: [\n      allowMissing: false,\n      alwaysLinkToLastBuild: false,\n      keepAll: true,\n      reportDir: 'coverage',\n      reportFiles: 'index.html',\n      reportName: \"RCov Report\"\n    ])\n}\n\nThis pipeline expects to be run from a Jenkinsfile in SCM.\nTo copy and paste it directly into a Jenkins Pipeline job, replace the checkout scm step with\ngit 'https://github.com/reiseburo/hermann.git'.\n\nJob Started Notification\n\nFor the first change, I decide to add a \"Job Started\" notification.  The\nsnippet generator and then reformatting makes this straightforward:\n\nnode {\n\n  notifyStarted()\n\n  /* ... existing build steps ... */\n}\n\ndef notifyStarted() {\n  // send to Slack\n  slackSend (color: '#FFFF00', message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n  // send to HipChat\n  hipchatSend (color: 'YELLOW', notify: true,\n      message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n    )\n\n  // send to email\n  emailext (\n      subject: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n      body: \"\"\" STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}\n\nSince Pipeline is a Groovy-based DSL, I can use\nstring interpolation\nand variables to add exactly the details I want in my notification messages. When\nI run this I get the following notifications:\n\nJob Successful Notification\n\nThe next logical choice is to get notifications when a job succeeds.  I’ll\ncopy and paste based on the notifyStarted method for now and do some refactoring\nlater.\n\nnode {\n\n  notifyStarted()\n\n  /* ... existing build steps ... */\n\n  notifySuccessful()\n}\n\ndef notifyStarted() { /* .. */ }\n\ndef notifySuccessful() {\n  slackSend (color: '#00FF00', message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n  hipchatSend (color: 'GREEN', notify: true,\n      message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n    )\n\n  emailext (\n      subject: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n      body: \"\"\" SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}\n\nAgain, I get notifications, as expected.  This build is fast enough,\nsome of them are even on the screen at the same time:\n\nJob Failed Notification\n\nNext I want to add failure notification.  Here’s where we really start to see the power\nand expressiveness of Jenkins pipeline.  A Pipeline is a Groovy script, so as we’d\nexpect in any Groovy script, we can handle errors using try-catch blocks.\n\nnode {\n  try {\n    notifyStarted()\n\n    /* ... existing build steps ... */\n\n    notifySuccessful()\n  } catch (e) {\n    currentBuild.result = \"FAILED\"\n    notifyFailed()\n    throw e\n  }\n}\n\ndef notifyStarted() { /* .. */ }\n\ndef notifySuccessful() { /* .. */ }\n\ndef notifyFailed() {\n  slackSend (color: '#FF0000', message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n  hipchatSend (color: 'RED', notify: true,\n      message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n    )\n\n  emailext (\n      subject: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n      body: \"\"\" FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}\n\nCode Cleanup\n\nLastly, now that I have it all working, I’ll do some refactoring. I’ll unify\nall the notifications in one method and move the final success/failure notification\ninto a finally block.\n\nstage 'Build'\n\nnode {\n  try {\n    notifyBuild('STARTED')\n\n    /* ... existing build steps ... */\n\n  } catch (e) {\n    // If there was an exception thrown, the build failed\n    currentBuild.result = \"FAILED\"\n    throw e\n  } finally {\n    // Success or failure, always send notifications\n    notifyBuild(currentBuild.result)\n  }\n}\n\ndef notifyBuild(String buildStatus = 'STARTED') {\n  // build status of null means successful\n  buildStatus = buildStatus ?: 'SUCCESS'\n\n  // Default values\n  def colorName = 'RED'\n  def colorCode = '#FF0000'\n  def subject = \"${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\"\n  def summary = \"${subject} (${env.BUILD_URL})\"\n  def details = \"\"\" STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\"\n\n  // Override default values based on build status\n  if (buildStatus == 'STARTED') {\n    color = 'YELLOW'\n    colorCode = '#FFFF00'\n  } else if (buildStatus == 'SUCCESS') {\n    color = 'GREEN'\n    colorCode = '#00FF00'\n  } else {\n    color = 'RED'\n    colorCode = '#FF0000'\n  }\n\n  // Send notifications\n  slackSend (color: colorCode, message: summary)\n\n  hipchatSend (color: color, notify: true, message: summary)\n\n  emailext (\n      subject: subject,\n      body: details,\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}\n\nYou have been notified!\n\nI now get notified twice per build on three different channels.  I’m not sure I\nneed to get notified this much for such a short build.  However, for a longer\nor complex CD pipeline, I might want exactly that.  If needed, I could even\nimprove this to handle other status strings and call it as needed throughout\nmy pipeline.\n\nLinks\n\nSlack Plugin\n\nHipChat Plugin\n\nEmail-ext Plugin\n\nJenkins Pipeline Snippet Generator","title":"Sending Notifications in Pipeline","tags":["tutorial","pipeline","plugins","notifications","slack","hipchat","emailext"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-07-19T00:00:00.000Z","id":"ce2c6f83-1ed8-521b-a608-5f3680ad5166","slug":"/blog/2016/07/19/blue-ocean-update/","strippedHtml":"The team have been hard at work moving the needle forward on the Blue\nOcean 1.0 features. Many of the features we have been working on have\ncome a long way in the past few months but here’s a few highlights:\n\nGoodbye page refreshes, Hello Real Time updates!\n\nBuilding upon\nTom 's great work on\nServer Sent Events (SSE) both\nCliff and\nTom worked\non making the all the screens in Blue Ocean update without manual\nrefreshes.\n\nSSE is a great technology\nchoice for new web apps as it only pushes out\nevents to the client when things have changed on the server. That means\nthere’s a lot less traffic going between your browser and the Jenkins\nserver when compared to the continuous AJAX polling method that has been\ntypical of Jenkins in the past.\n\nNew Test Reporting UI\n\nKeith has\nbeen working with Vivek to\ndrive out a new set of extension points that allow us to build a new\nrest reporting UI in Blue Ocean. Today this works for JUnit test reports\nbut can be easily extended to work with other kinds of reports.\n\nPipeline logs are split into steps and update live\n\nThorsten and\nJosh have\nbeen hard at work breaking down the log into steps and making the live\nlog tailing follow the pipeline execution - which we’ve lovingly\nnicknamed the “karaoke mode”\n\nPipelines can be triggered from the UI\n\nTom has\nbeen on allowing users to trigger jobs from Blue Ocean, which is one\nless reason to go back to the Classic UI :)\n\nBlue Ocean has been released to the experimental update center\n\nMany of you have asked us questions about how you can try Blue Ocean\ntoday and have resorted to building the plugin yourself or running our\nDocker image.\n\nWe wanted to make the process of trying Blue Ocean in its unfinished\nstate by publishing the plugin to the experimental update center - it’s\navailable today!\n\nSo what is the Experimental Update Center? It is a mechanism for the\nJenkins developer community to share early previews of new plugins with\nthe broader user community. Plugins in this update center are\nexperimental and we strongly advise not running them on production or\nJenkins systems that you rely on for your work.\n\nThat means any plugin in this update center could eat your Jenkins data,\ncause slowdowns, degrade security or have their behavior change at no\nnotice.\n\nYou can learn how to\nactivate\nthe experimental update center on this post.\n\nStay tuned for more updates!","title":"Blue Ocean July development update ","tags":["blueocean","ux","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/authors/i386/","twitter":"i386"}]}},{"node":{"date":"2016-07-26T00:00:00.000Z","id":"61a711c9-9de6-5990-b29e-67f3bac971b1","slug":"/blog/2016/07/26/join-me-at-jenkinsworld/","strippedHtml":"Jenkins World, September\n13-15 at the Santa Clara Convention Center (SCCC), takes our 6th annual\ncommunity user conference to a whole new level. It will be one big party for\neverything Jenkins, from users to developers, from the community to vendors.\nThere will be more of what people always loved in past user conferences, such\nas technical sessions from users and developers, the Ask the Experts booth and\nplugin development workshop, and even more has been added, such as Jenkins\ntraining pre-conference, workshops and the opportunity to get certified for\nfree. Jenkins World is a not-to-be-missed.\n\nFor me, the best part of Jenkins World is the opportunity to meet other Jenkins\nusers and developers face-to-face. We all interact on IRC, Google Groups or\nGitHub, but when you have a chance to meet in person, the person behind the\nGitHub ID or IRC name, whose plugin you use every day, becomes a real person.\nYour motivation might be a little different from mine, but we have the breath\nin the agenda to cover everyone from new users to senior plugin developers.\n\nThis year, you’ll have more opportunities than ever before to learn about\nJenkins and continuous delivery/DevOps practices, and explore what Jenkins has\nto offer.\n\nIf you are travelling from somewhere, you might as well get a two-day Jenkins training course to be held onsite, starting Monday.\n\nOn Tuesday, you can attend your choice of workshops, which gives you more hands-on time to go deeper, including:\n\nThe DevOps Toolkit 2.0 Workshop\n\nLet’s Build a Jenkins Pipeline\n\nPreparing for Jenkins Certification\n\nIntro to Plugin Development\n\nCD and DevOps Maturity for Managers\n\nOn Wednesday, the formal conference kicks off. Throughout Wednesday and\nThursday, you can choose from sessions spread across five tracks and covering\na diverse range of topics like infrastructure as code, security, containers,\npipeline automation, best practices, scaling Jenkins and new community\ndevelopment initiatives.\n\nAt Jenkins World, you’ll be exposed to projects going on in the community such\nas Blue Ocean, a new Jenkins UX project. You can\nlearn more about Jenkins 2 - a major release for the project, and based on the\nhuge number of downloads we saw in the weeks following its introduction at the\nend of April, it was a big +1. At Jenkins World, you will be immersed in\nJenkins and community, and leave knowing that you are part of a meaningful open\nsource project that, with your involvement, can do anything!\n\nThis year there will only be one Jenkins World conference, so that everyone\ninvolved in Jenkins can get together in one place at one time and actually see\neach other. I understand that it might be a bit more difficult for Jenkins\nusers outside of the US to make it to Jenkins World, but hopefully we made the\nevent worth your visit. As the final push on the back, CloudBees has created a\nspecial international program\nfor those who are coming from outside the United States.  You’ll have\ntime to talk with all of the other Jenkins users who have made the journey from\nacross the globe, you’ll be able to attend exclusive networking events and\nmore.\n\nI hope to see you September 13th through 15th in Santa Clara at\nJenkins World in Santa Clara!\n\nRegister for Jenkins World in\nSeptember with the code JWFOSS for a 20% discount off your pass.","title":"Join me for Jenkins World 2016","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2016-08-03T00:00:00.000Z","id":"f3311ae4-4467-5080-87f7-70b0aee702c4","slug":"/blog/2016/08/03/st-petersburg-jam-3-4-report/","strippedHtml":"I would like to write about two last Jenkins Meetups in Saint Petersburg, Russia.\n\nMeetup #3. Jenkins Administration (May 20, 2016)\n\nIn May we had a meetup about Jenkins administration techniques.\nAt this meetup we were talking about common Jenkins ecosystem components\nlike custom update centers, tool repositories and generic jobs.\n\nTalks:\n\nKirill Merkushev, Yandex, \"Juseppe. A custom Update Center for Jenkins\"\n\nPresentation (rus)\n\nKeywords: Juseppe\n\nAnna Muravieva, EMC, \"Generic jobs in Jenkins. How to build anything?\"\n\nPresentation (rus)\n\nKeywords: Generic Builds, Scripted Build Wrappers\n\nOleg Nenashev, CloudBees, \"Building Jenkins Tool infrastructures with help of Custom Tools Plugin and Docker\"\n\nPresentation (rus)\n\nKeywords: Custom Tools Plugin, Extra Tool Installers Plugin, Docker\n\nMeetup #4. IT Global Meetup (July 23, 2016)\n\nIn Saint Petersburg there is a regular gathering of local IT communities.\nThis IT Global Meetup is a full-day event, which provides an opportunity to dozens of communities and hundreds of visitors to meet at a single place.\n\nOn July 23rd our local Jenkins community participated in the eight’s global meetup.\nWe conduced 2 talks in main tracks and also had a round table in the evening.\n\nTalks:\n\nOleg Nenashev, CloudBees, \"About Jenkins 2 and future plans\"\n\nOleg provided a top-level overview about changes in Jenkins,\nshared insights about upgrading to the new Jenkins 2.7.1 LTS and talked about Jenkins plans\n\nPresentation (rus)\n\nAleksandr Tarasov, Alfa-Laboratory, \"Continuous Delivery with Jenkins: Lessons learned\"\n\nAleksandr summarized AlfaLab’s experience of Jenkins usage for Continuous Delivery in their environment.\nHe talked about the flow based on Jenkins Pipeline, JobDSL and BlueOcean prototype.\n\nPresentation (rus)\n\nAfter the talks we had a roundtable about Jenkins (~10 Jenkins experts).\nOleg provided an overview of Docker and Configuration-as-Code features available in Jenkins,\nand then we talked about common use-cases in Jenkins installations.\nWe hope to finally organize a \"Jenkins & Docker\" meetup at some point.\n\nQ&A\n\nIf you have any questions, all speakers can be contacted via\nJenkins RU Gitter Chat.\n\nLinks\n\nSt. Petersburg Meetup page (follow the events here)\n\nSt. Petersburg Meetup Twitter\n\nJenkins RU Twitter\n\nJenkins RU Gitter Chat\n\nIT Global Meetup\n\nAcknowledgments\n\nThe events have been organized with help from\nCloudBees, EMC and\norganizers of the St. Petersburg IT Global Meetup.","title":"St. Petersburg Jenkins Meetup #3 and #4 Reports","tags":["jam","jenkins_ru"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-08-08T00:00:00.000Z","id":"649a2e8e-4f2f-56eb-99f1-8897de882a49","slug":"/blog/2016/08/08/docker-pipeline-environments/","strippedHtml":"This is a guest post by Michael Neale, long time open\nsource developer and contributor to the Blue Ocean\nproject.\n\nIf you are running parts of your pipeline on Linux, possibly the easiest way to\nget a clean reusable environment is to use:\nCloudBees\nDocker Pipeline plugin.\n\nIn this short post I wanted to show how you can avoid installing stuff on the agents, and have per project, or even per branch, customized build environments.\nYour environment, as well as your pipeline is defined and versioned alongside your code.\n\nI wanted to use the Blue Ocean project as an\nexample of a\nproject that uses the CloudBees Docker Pipeline plugin.\n\nEnvironment and Pipeline for JavaScript components\n\nThe Blue Ocean project has a few moving parts, one of\nwhich is called the \"Jenkins Design Language\".  This is a grab bag of re-usable\nCSS, HTML, style rules, icons and JavaScript components (using React.js) that\nprovide the look and feel for Blue Ocean.\n\nJavaScript and Web Development being what it is in 2016, many utilities are\nneed to assemble a web app.  This includes npm and all that it needs, less.js\nto convert Less to CSS, Babel to \"transpile\" versions of JavaScript to other\ntypes of JavaScript (don’t ask) and more.\n\nWe could spend time installling nodejs/npm on the agents, but why not just use\nthe official off the shelf docker image\nfrom Docker Hub?\n\nThe only thing that has to be installed and run on the build agents is the Jenkins agent, and a docker daemon.\n\nA simple pipeline using this approach would be:\n\nnode {\n        stage \"Prepare environment\"\n          checkout scm\n          docker.image('node').inside {\n            stage \"Checkout and build deps\"\n                sh \"npm install\"\n\n            stage \"Test and validate\"\n                sh \"npm install gulp-cli && ./node_modules/.bin/gulp\"\n          }\n}\n\nThis uses the stock \"official\" Node.js image from the Docker Hub, but doesn’t let us customize much about the environment.\n\nCustomising the environment, without installing bits on the agent\n\nBeing the forward looking and lazy person that I am, I didn’t want to have to\ngo and fish around for a Docker image every time a developer wanted something\nspecial installed.\n\nInstead, I put a Dockerfile in the root of the repo, alongside the Jenkinsfile :\n\nThe contents of the Dockerfile can then define the exact environment needed\nto build the project.  Sure enough, shortly after this, someone came along\nsaying they wanted to use Flow from Facebook (A\ntypechecker for JavaScript).  This required an additional native component to\nwork (via apt-get install).\n\nThis was achieved via a\npull\nrequest to both the Jenkinsfile and the Dockerfile at the same time.\n\nSo now our environment is defined by a Dockerfile with the following contents:\n\n# Lets not just use any old version but pick one\nFROM node:5.11.1\n\n# This is needed for flow, and the weirdos that built it in ocaml:\nRUN apt-get update && apt-get install -y libelf1\n\nRUN useradd jenkins --shell /bin/bash --create-home\nUSER jenkins\n\nThe Jenkinsfile pipeline now has the following contents:\n\nnode {\n    stage \"Prepare environment\"\n        checkout scm\n        def environment  = docker.build 'cloudbees-node'\n\n        environment.inside {\n            stage \"Checkout and build deps\"\n                sh \"npm install\"\n\n            stage \"Validate types\"\n                sh \"./node_modules/.bin/flow\"\n\n            stage \"Test and validate\"\n                sh \"npm install gulp-cli && ./node_modules/.bin/gulp\"\n                junit 'reports/**/*.xml'\n        }\n\n    stage \"Cleanup\"\n        deleteDir()\n}\n\nEven hip JavaScript tools can emit that weird XML format that test\nreporters can use, e.g. the junit result archiver.\n\nThe main change is that we have docker.build being called to produce the\nenvironment which is then used.  Running docker build is essentially a\n\"no-op\" if the image has already been built on the agent before.\n\nWhat’s it like to drive?\n\nWell, using Blue Ocean, to build Blue Ocean, yields a pipeline that visually\nlooks like this (a recent run I screen capped):\n\nThis creates a pipeline that developers can tweak on a pull-request basis,\nalong with any changes to the environment needed to support it, without having\nto install any packages on the agent.\n\nWhy not use docker commands directly?\n\nYou could of course just use shell commands to do things with Docker directly,\nhowever, Jenkins Pipeline keeps track of Docker images used in a Dockerfile\nvia the \"Docker Fingerprints\" link (which is good, should that image need to\nchange due to a security patch).\n\nLinks\n\nThe project used as as an example is here\n\nThe pipeline is defined by the Jenkinsfile\n\nThe environment is defined by the Dockerfile\n\nRead more on Docker Pipeline","title":"Don't install software, define your environment with Docker and Pipeline","tags":["pipeline","plugins","blueocean","ux","javascript","nodejs"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2016-08-09T00:00:00.000Z","id":"e7eb5984-a870-5548-985b-25b9210fb2a0","slug":"/blog/2016/08/09/ewm-beta-version/","strippedHtml":"This blog post is a continuation of the External Workspace Manager Plugin related posts, starting with\nthe introductory blog post, and followed by\nthe alpha version release announcement.\n\nAs the title suggests, the beta version of the External Workspace Manager Plugin was launched!\nThis means that it’s available only in the\nExperimental Plugins Update Center.\n\nTake care when installing plugins from the Experimental Update Center, since they may change in\nbackward-incompatible ways.\nIt’s advisable not to use it for Jenkins production environments.\n\nThe plugin’s repository is on GitHub.\nThe complete plugin’s documentation can be accessed\nhere.\n\nWhat’s new\n\nBellow is a summary of the features added so far, since the alpha version.\n\nMultiple upstream run selection strategies\n\nIt has support for the\nRun Selector Plugin (which is still in beta),\nso you can provide different run selection strategies when allocating a disk from the upstream job.\n\nLet’s suppose that we have an upstream job that clones the repository and builds the project:\n\ndef extWorkspace = exwsAllocate 'diskpool1'\n\nnode ('linux') {\n    exws (extWorkspace) {\n        checkout scm\n        sh 'mvn clean install -DskipTests'\n    }\n}\n\nIn the downstream job, we run the tests on a different node, but we reuse the same workspace as the previous job:\n\ndef run = selectRun 'upstream'\ndef extWorkspace = exwsAllocate selectedRun: run\n\nnode ('test') {\n    exws (extWorkspace) {\n        sh 'mvn test'\n    }\n}\n\nThe selectRun in this example selects the last stable build from the upstream job.\nBut, we can be more explicit, and select a specific build number from the upstream job.\n\ndef run = selectRun 'upstream',\n selector: [$class: 'SpecificRunSelector', buildNumber: UPSTREAM_BUILD_NUMBER]\ndef extWorkspace = exwsAllocate selectedRun: run\n// ...\n\nWhen the selectedRun parameter is given to the exwsAllocate step, it will allocate the same workspace that was\nused by that run.\n\nThe Run Selector Plugin has several run selection strategies that are briefly explained\nhere.\n\nAutomatic workspace cleanup\n\nProvides an automatic workspace cleanup by integrating the\nWorkspace Cleanup Plugin.\nFor example, if we need to delete the workspace only if the build has failed, we can do the following:\n\ndef extWorkspace = exwsAllocate diskPoolId: 'diskpool1'\n\nnode ('linux') {\n    exws (extWorkspace) {\n        try {\n            checkout scm\n            sh 'mvn clean install'\n        } catch (e) {\n            currentBuild.result = 'FAILURE'\n            throw e\n        } finally {\n            step ([$class: 'WsCleanup', cleanWhenFailure: false])\n        }\n    }\n}\n\nMore workspace cleanup examples can be found at this\nlink.\n\nCustom workspace path\n\nAllows the user to specify a custom workspace path to be used when allocating workspace on the disk.\nThe plugin offers two alternatives for doing this:\n\nby defining a global workspace template for each Disk Pool\n\nThis can be defined in the Jenkins global config, External Workspace Definitions section.\n\nby defining a custom workspace path in the Pipeline script\n\nWe can use the Pipeline DSL to compute the workspace path.\nThen we pass this path as input parameter to the exwsAllocate step.\n\ndef customPath = \"${env.JOB_NAME}/${PULL_REQUEST_NUMBER}/${env.BUILD_NUMBER}\"\ndef extWorkspace = exwsAllocate diskPoolId: 'diskpool1', path: customPath\n// ...\n\nFor more details see the afferent\ndocumentation page.\n\nDisk Pool restrictions\n\nThe plugin comes with Disk Pool restriction strategies.\nIt does this by using the restriction capabilities provided by the\nJob Restrictions Plugin.\n\nFor example, we can restrict a Disk Pool to be allocated only if the Jenkins job in which it’s allocated was triggered\nby a specific user:\n\nOr, we can restrict the Disk Pool to be allocated only for those jobs whose name matches a well defined pattern:\n\nWhat’s next\n\nCurrently there is ongoing work for providing flexible disk allocation strategies.\nThe user will be able to define a default disk allocation strategy in the Jenkins global config.\nSo for example, we want to select the disk with the most usable space as default allocation strategy:\n\nIf needed, this allocation strategy may be overridden in the Pipeline code.\nLet’s suppose that for a specific job, we want to allocate the disk with the highest read speed.\n\ndef extWorkspace = exwsAllocate diskPoolId: 'diskpool1', strategy: fastestRead()\n// ...\n\nWhen this feature is completed, the plugin will enter a final testing phase.\nIf all goes to plan, a stable version should be released in about two weeks.\n\nIf you have any issues in setting up or using the plugin, please feel free to ask me on the plugin’s Gitter\nchat.\nAny feedback is welcome, and you may provide it either on the Gitter chat, or on\nJira by using the external-workspace-manager-plugin component.\n\nLinks\n\nProject repository\n\nProject intro blog post\n\nAlpha version announcement\n\nGSoC page\n\nJenkins GSoC Page","title":"GSoC: External Workspace Manager for Pipeline. Beta release is available","tags":["pipeline","plugins","external-workspace-manager","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"alexsomai","html":"","id":"alexsomai","irc":null,"linkedin":null,"name":"Alexandru Somai","slug":"/blog/authors/alexsomai/","twitter":"alex_somai"}]}},{"node":{"date":"2016-08-10T00:00:00.000Z","id":"4f2eb2b7-1bb1-501e-8b2c-1b8c4ac3e6e3","slug":"/blog/2016/08/10/rails-cd-with-pipeline/","strippedHtml":"This is a guest post by R. Tyler Croy, who is a\nlong-time contributor to Jenkins and the primary contact for Jenkins project\ninfrastructure. He is also a Jenkins Evangelist at\nCloudBees, Inc.\n\nWhen the Ruby on Rails framework debuted it\nchanged the industry in two noteworthy ways: it created a trend of opinionated web\napplication frameworks ( Django,\nPlay, Grails) and it\nalso strongly encouraged thousands of developers to embrace test-driven\ndevelopment along with many other modern best practices (source control, dependency\nmanagement, etc). Because Ruby, the language underneath Rails, is interpreted\ninstead of compiled there isn’t a \"build\" per se but rather tens, if not\nhundreds, of tests, linters and scans which are run to ensure the application’s\nquality. With the rise in popularity of Rails, the popularity of application\nhosting services with easy-to-use deployment tools like Heroku or\nEngine Yard rose too.\n\nThis combination of good test coverage and easily automated deployments\nmakes Rails easy to continuously deliver with Jenkins. In this post we’ll cover\ntesting non-trivial Rails applications with Jenkins\nPipeline and, as an added bonus, we will add security scanning via\nBrakeman and the\nBrakeman\nplugin.\n\nTopics\n\nPreparing the app\n\nPreparing Jenkins\n\nWriting the Pipeline\n\nSecurity scanning\n\nDeploying the good stuff\n\nWrap up\n\nFor this demonstration, I used Ruby Central 's\ncfp-app :\n\nA Ruby on Rails application that lets you manage your conference’s call for\nproposal (CFP), program and schedule. It was written by Ruby Central to run the\nCFPs for RailsConf and RubyConf.\n\nI chose this Rails app, not only because it’s a sizable application with lots\nof tests, but it’s actually the application we used to collect talk proposals\nfor the \" Community Tracks\" at this\nyear’s Jenkins World. For the most part,\ncfp-app is a standard Rails application. It uses\nPostgreSQL for its database,\nRSpec for its tests and\nRuby 2.3.x as its runtime.\n\nIf you prefer to just to look at the code, skip straight to the\nJenkinsfile.\n\nPreparing the app\n\nFor most Rails applications there are few, if any, changes needed to enable\ncontinuous delivery with Jenkins. In the case of\ncfp-app, I added two gems to get\nthe most optimal integration into Jenkins:\n\nci_reporter, for test report\nintegration\n\nbrakeman, for security scanning.\n\nAdding these was simple, I just needed to update the Gemfile and the\nRakefile in the root of the repository to contain:\n\nGemfile\n\n# .. snip ..\ngroup :test do\n  # RSpec, etc\n  gem 'ci_reporter'\n  gem 'ci_reporter_rspec'\n  gem \"brakeman\", :require => false\nend\n\nRakefile\n\n# .. snip ..\nrequire 'ci/reporter/rake/rspec'\n# Make sure we setup ci_reporter before executing our RSpec examples\ntask :spec => 'ci:setup:rspec'\n\nPreparing Jenkins\n\nWith the cfp-app project set up, next on the list is to ensure that Jenkins itself\nis ready. Generally I suggest running the latest LTS of\nJenkins; for this demonstration I used Jenkins 2.7.1 with the following\nplugins:\n\nPipeline plugin\n\nBrakeman plugin\n\nCloudBees\nDocker Pipeline plugin\n\nI also used the\nGitHub\nOrganization Folder plugin to automatically create pipeline items in my\nJenkins instance; that isn’t required for the demo, but it’s pretty cool to see\nrepositories and branches with a Jenkinsfile automatically show up in\nJenkins, so I recommend it!\n\nIn addition to the plugins listed above, I also needed at least one\nJenkins agent with the Docker daemon installed and\nrunning on it. I label these agents with \"docker\" to make it easier to assign\nDocker-based workloads to them in the future.\n\nAny Linux-based machine with Docker installed will work, in my case I was\nprovisioning on-demand agents with the\nAzure\nplugin which, like the\nEC2 plugin,\nhelps keep my test costs down.\n\nIf you’re using Amazon Web Services, you might also be interested in\nthis blog post from\nearlier this year unveiling the\nEC2\nFleet plugin for working with EC2 Spot Fleets.\n\nWriting the Pipeline\n\nTo make sense of the various things that the Jenkinsfile needs to do, I find\nit easier to start by simply defining the stages of my pipeline. This helps me\nthink of, in broad terms, what order of operations my pipeline should have.\nFor example:\n\n/* Assign our work to an agent labelled 'docker' */\nnode('docker') {\n    stage 'Prepare Container'\n    stage 'Install Gems'\n    stage 'Prepare Database'\n    stage 'Invoke Rake'\n    stage 'Security scan'\n    stage 'Deploy'\n}\n\nAs mentioned previously, this Jenkinsfile is going to rely heavily on the\nCloudBees\nDocker Pipeline plugin. The plugin provides two very important features:\n\nAbility to execute steps inside of a running Docker container\n\nAbility to run a container in the \"background.\"\n\nLike most Rails applications, one can effectively test the application with two\ncommands: bundle install followed by bundle exec rake. I already had some\nDocker images prepared with RVM and Ruby 2.3.0 installed,\nwhich ensures a common and consistent starting point:\n\nnode('docker') {\n    // .. 'stage' steps removed\n    docker.image('rtyler/rvm:2.3.0').inside { (1)\nrvm 'bundle install' (2)\nrvm 'bundle exec rake'\n    } (3)\n}\n\n1\nRun the named container. The inside method can take optional additional flags for the docker run command.\n\n2\nExecute our shell commands using our tiny sh step wrapper\nrvm . This ensures that the shell code is executed in the correct RVM environment.\n\n3\nWhen the closure completes, the container will be destroyed.\n\nUnfortunately, with this application, the bundle exec rake command will fail\nif PostgreSQL isn’t available when the process starts. This is where the\nsecond important feature of the CloudBees Docker Pipeline plugin comes\ninto effect: the ability to run a container in the \"background.\"\n\nnode('docker') {\n    // .. 'stage' steps removed\n    /* Pull the latest `postgres` container and run it in the background */\n    docker.image('postgres').withRun { container -> (1)\necho \"PostgreSQL running in container ${container.id}\" (2)\n} (3)\n}\n\n1\nRun the container, effectively docker run postgres\n\n2\nAny number of steps can go inside the closure\n\n3\nWhen the closure completes, the container will be destroyed.\n\nRunning the tests\n\nCombining these two snippets of Jenkins Pipeline is, in my opinion, where the\npower of the DSL\nshines:\n\nnode('docker') {\n    docker.image('postgres').withRun { container ->\n        docker.image('rtyler/rvm:2.3.0').inside(\"--link=${container.id}:postgres\") { (1)\nstage 'Install Gems'\n            rvm \"bundle install\"\n\n            stage 'Invoke Rake'\n            withEnv(['DATABASE_URL=postgres://postgres@postgres:5432/']) { (2)\nrvm \"bundle exec rake\"\n            }\n            junit 'spec/reports/*.xml' (3)\n}\n    }\n}\n\n1\nBy passing the --link argument, the Docker daemon will allow the RVM container to talk to the PostgreSQL container under the host name 'postgres'.\n\n2\nUse the withEnv step to set environment variables for everything that is in the closure. In this case, the cfp-app DB scaffolding will look for the DATABASE_URL variable to override the DB host/user/dbname defaults.\n\n3\nArchive the test reports generated by ci_reporter so that Jenkins can display test reports and trend analysis.\n\nWith this done, the basics are in place to consistently run the tests for\ncfp-app in fresh Docker containers for each execution of the pipeline.\n\nSecurity scanning\n\nUsing Brakeman, the security scanner for Ruby\non Rails, is almost trivially easy inside of Jenkins Pipeline, thanks to the\nBrakeman\nplugin which implements the publishBrakeman step.\n\nBuilding off our example above, we can implement the \"Security scan\" stage:\n\nnode('docker') {\n    /* --8 (1)\npublishBrakeman 'brakeman-output.tabs' (2)\n/* --8\n\n1\nRun the Brakeman security scanner for Rails and store the output for later in brakeman-output.tabs\n\n2\nArchive the reports generated by Brakeman so that Jenkins can display detailed reports with trend analysis.\n\nAs of this writing, there is work in progress\n( JENKINS-31202) to\nrender trend graphs from plugins like Brakeman on a pipeline project’s main\npage.\n\nDeploying the good stuff\n\nOnce the tests and security scanning are all working properly, we can start to\nset up the deployment stage. Jenkins Pipeline provides the variable\ncurrentBuild which we can use to determine whether our pipeline has been\nsuccessful thus far or not. This allows us to add the logic to only deploy when\neverything is passing, as we would expect:\n\nnode('docker') {\n    /* --8 (1)\nsh './deploy.sh' (2)\n}\n    else {\n        mail subject: \"Something is wrong with ${env.JOB_NAME} ${env.BUILD_ID}\",\n                  to: 'nobody@example.com',\n                body: 'You should fix it'\n    }\n    /* --8\n\n1\ncurrentBuild has the result property which would be 'SUCCESS', 'FAILED', 'UNSTABLE', 'ABORTED'\n\n2\nOnly if currentBuild.result is successful should we bother invoking our deployment script (e.g. git push heroku master)\n\nWrap up\n\nI have gratuitously commented the full\nJenkinsfile\nwhich I hope is a useful summation of the work outlined above. Having worked\non a number of Rails applications in the past, the consistency provided by\nDocker and Jenkins Pipeline above would have definitely improved those\nprojects' delivery times. There is still room for improvement however, which\nis left as an exercise for the reader. Such as: preparing new containers with\nall their\ndependencies\nbuilt-in instead of installing them at run-time. Or utilizing the parallel\nstep for executing RSpec across multiple Jenkins agents simultaneously.\n\nThe beautiful thing about defining your continuous delivery, and continuous\nsecurity, pipeline in code is that you can continue to iterate on it!","title":"Continuous Security for Rails apps with Pipeline and Brakeman","tags":["tutorial","ruby","pipeline","rails","brakeman","continuousdelivery"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-08-11T00:00:00.000Z","id":"9a0e4574-a766-5c76-b7d9-8fc1d1fbcde3","slug":"/blog/2016/08/11/speaker-blog-edx-jenkins-world/","strippedHtml":"This is a guest post by Ben Patterson, Engineering Manager at\nedX.\n\nPicking a pear from a basket is straightforward when you can hold it in your hand, feel its weight, perhaps give a gentle squeeze, observe its color and look more closely at any bruises. If the only information we had was a photograph from one angle, we’d have to do some educated guessing.\n\nAs developers, we don’t get a photograph; we get a green checkmark or a red x. We use that to decide whether or not we need to switch gears and go back to a pull request we submitted recently. At edX, we take advantage of some Jenkins features that could give us more granularity on GitHub pull requests, and make that decision less of a guessing game.\n\nMultiple contexts reporting back when they’re available\n\nPull requests on our platform are evaluated from several angles: static code analysis including linting and security audits, javascript unit tests, python unit tests, acceptance tests and accessibility tests. Using an elixir of plugins, including the GitHub Pull Request Builder Plugin, we put more direct feedback into the hands of the contributor so s/he can quickly decide how much digging is going to be needed.\n\nFor example, if I made adjustments to my branch and know more requirements are coming, then I may not be as worried about passing the linter; however, if my unit tests have failed, I likely have a problem I need to address regardless of when the new requirements arrive. Timing is important as well. Splitting out the contexts means we can run tests in parallel and report results faster.\n\nDevelopers can re-run specific contexts\n\nOccasionally the feedback mechanism fails. It is oftentimes a flaky condition in a test or in test setup. (Solving flakiness is a different discussion I’m sidestepping. Accept the fact that the system fails for purposes of this blog entry.) Engineers are armed with the power of re-running specific contexts, also available through the PR plugin. A developer can say “jenkins run bokchoy” to re-run the acceptance tests, for example. A developer can also re-run everything with “jenkins run all”. These phrases are set through the GitHub Pull Request Builder configuration.\n\nMore granular data is easier to find for our Tools team\n\nSplitting the contexts has also given us important data points for our Tools team to help in highlighting things like flaky tests, time to feedback and other metrics that help the org prioritize what’s important. We use this with a log aggregator (in our case, Splunk) to produce valuable reports such as this one.\n\nI could go on! The short answer here is we have an intuitive way of divvying up our tests, not only for optimizing the overall amount of time it takes to get build results, but also to make the experience more user-friendly to developers.\n\nBen will be presenting more on this topic at\nJenkins World in September,\nregister with the code JWFOSS for a 20% discount off your pass.","title":"Using Jenkins for Disparate Feedback on GitHub","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2016-08-17T00:00:00.000Z","id":"a1ee11d9-c611-5f2a-a517-91048345fcf6","slug":"/blog/2016/08/17/jenkins-world-speaker-blog-aquilent/","strippedHtml":"This is a guest post by Jenkins World speaker Neil Hunt, Senior DevOps Architect at Aquilent.\n\nIn smaller companies with a handful of apps and fewer silos, implementing CD\npipelines to support these apps is fairly straightforward using one of the many\ndelivery orchestration tools available today. There is likely a constrained\ntool set to support - not an abundance of flavors of applications and security\npractices - and generally fewer cooks in the kitchen. But in a larger\norganization, I have found that in the past, there were seemingly endless\nunique requirements and mountains to climb to reach this level of automation on\neach new project.\n\nNeil will be presenting more\nof this concept at Jenkins World in\nSeptember, register with the code JWFOSS for a 20% discount off your pass.\n\nEnter the Jenkins Pipeline plugin. My recently departed former company, a large\nfinancial services organization with a 600+ person IT organization and 150+\napplication portfolio, set out to implement continuous delivery\nenterprise-wide. After considering several pipeline orchestration tools, we\ndetermined the Pipeline plugin (at the time called Workflow) to be the superior\nsolution for our company. Pipeline has continued Jenkins' legacy of presenting\nan extensible platform with just the right set of features to allow\norganizations to scale its capabilities as they see fit, and do so rapidly. As\nearly adopters of Pipeline with a protracted set of requirements, we used it\nboth to accelerate the pace of onboarding new projects and to reduce the\nongoing feature delivery time of our applications.\n\nIn my presentation at Jenkins World, I will demonstrate the methods we used to\nenable this. A few examples:\n\nWe leveraged the Pipeline Remote File Loader plugin to write shared common\ncode and sought and received community enhancements to these functions.\n\nJenkinsfile, loading a shared AWS utilities function library\n\nawsUtils.groovy, snippets of some AWS functions\n\nWe migrated from EC2 agents to Docker-based agents running on Amazon’s\nElastic Container Service, allowing us to spin up new executors in seconds\nand for teams to own their own executor definitions.\n\nPipeline run #1 using standard EC2 executors, spinning up EC2 instance for each\nnode; Pipeline run #2 using shared ECS cluster with near-instant instantiation\nof a Docker agent in the cluster for each node.\n\nWe also created a Pipeline Library of common pipelines, enabling projects\nthat fit certain models to use ready-made end-to-end pipelines. Some\nexamples:\n\nMaven JAR Pipeline: Pipeline that clones git repository, builds JAR file\nfrom pom.xml, deploys to Artifactory, and runs maven release plugin to\nincrement next version\n\nAnuglar.JS Pipeline: Pipeline that executes a grunt and bower build, then\nruns S3 sync to Amazon S3 bucket in Dev, then Stage, then Prod buckets.\n\nPentaho Reports Pipeline: Pipeline that clones git repository, constructs\nzip file, and executes Pentaho Business Intelligence Platform CLI to import new\nset of reports in Dev, Stage, then Prod servers.\n\nPerhaps most critically, a shout-out to the saving grace of this quest for our\nsecurity and ops teams: the manual 'input' step! While the ambition of\ncontinuous delivery is to have as few of these as possible, this was the\nsingle-most pivotal feature in convincing others of Pipeline’s viability, since\nnow any step of the delivery process could be gate-checked by an LDAP-enabled\npermission group. Were it not for the availability of this step, we may still\nbe living in the world of: \"This seems like a great tool for development, but\nwe will have a segregated process for production deployments.\" Instead, we had\na pipeline full of many 'input' steps at first, and then used the data we\ncollected around the longest delays to bring management focus to them and unite\neveryone around the goal of strategically removing them, one by one.\n\nGoing forward, having recently joined Aquilent’s Cloud Solutions Architecture\nteam, I’ll be working with our project teams here to further mature the use of\nthese Pipeline plugin features as we move towards continuous delivery. Already,\nwe have migrated several components of our healthcare.gov project to Pipeline.\nThe team has been able to consolidate several Jenkins jobs into a single,\nvisible delivery pipeline, to maintain the lifecycle of the pipeline with our\napplication code base in our SCM, and to more easily integrate with our\nexternal tools.\n\nDue to functional shortcomings in the early adoption stages of the Pipeline\nplugin and the ever-present political challenges of shifting organizational\npolicy, this has been and continues to be far from a bruise-free journey. But\nwe plodded through many of these issues to bring this to fruition and\nultimately reduced the number of manual steps in some pipelines from 12 down to\n1 and brought our 20+ Jenkins-minute pipelines to only six minutes after months\nof iteration. I hope you’ll join this session at Jenkins World and learn about\nour challenges and successes in achieving the promise of continuous delivery at\nenterprise scale.","title":"Continuously Delivering Continuous Delivery Pipelines","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2016-08-22T00:00:00.000Z","id":"5a42a05c-41f1-5105-866c-97942f6d788d","slug":"/blog/2016/08/22/ewm-stable-release/","strippedHtml":"This blog post is the last one from the series of\nGoogle Summer of Code 2016, External Workspace Manager Plugin project.\nThe previous posts are:\n\nIntroductory blog post\n\nAlpha release announcement\n\nBeta release announcement\n\nIn this post I would like to announce the 1.0.0 release of the External Workspace Manager Plugin version to the main\nupdate center.\n\nHere’s a highlight of the available features:\n\nWorkspace share and reuse across multiple jobs, running on different nodes\n\nAutomatic workspace cleanup\n\nProvide custom workspace path on the disk\n\nDisk Pool restrictions\n\nFlexible Disk allocation strategies\n\nAll the above are detailed, with usage examples, on the plugin’s\ndocumentation page.\n\nFuture work\n\nCurrently, there is work in progress for the workspace browsing feature (see pull request\n#37).\nAfterwards, I’m planning to integrate fingerprints, so that the user can view a specific workspace in which\nother jobs was used.\nA particular feature that would be nice to have is to integrate the plugin with at least one disk provider\n(e.g. Amazon EBS, Google Cloud Storage).\n\nMany other features and improvements are still to come, they are grouped in the phase 3 EPIC:\nJENKINS-37543.\nThe plugin’s repository is on GitHub.\nIf you’d like to come up with new features or ideas, contributions are very welcome.\n\nClosing\n\nThis was a Google Summer of Code 2016 project.\nA summary of the contributions that I’ve made to the Jenkins project during this time may be found\nhere.\nIt was a great experience, from which I learned a lot, and I’d wish I could repeat it every year.\n\nI’d like to thank to my mentors, Oleg Nenashev and\nMartin d’Anjou for all their support, good advices and help they gave me.\nAlso, thanks to the Jenkins contributors with which I have interacted and helped me during this period.\n\nIf you have any issues in setting up or using the plugin, please feel free to ask me on the plugin’s Gitter\nchat.\nAny feedback is welcome, and you may provide it either on the Gitter chat, or on\nJira by using the external-workspace-manager-plugin component.\n\nLinks\n\nProject repository\n\nWork product page\n\nGSoC page\n\nJenkins GSoC Page","title":"GSoC: External Workspace Manager for Pipeline is released","tags":["pipeline","plugins","external-workspace-manager","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"alexsomai","html":"","id":"alexsomai","irc":null,"linkedin":null,"name":"Alexandru Somai","slug":"/blog/authors/alexsomai/","twitter":"alex_somai"}]}},{"node":{"date":"2016-08-24T00:00:00.000Z","id":"9b375bbf-3fa2-5403-8c8a-8d26e0d78938","slug":"/blog/2016/08/24/jenkins-world-2016-festivities/","strippedHtml":"At Jenkins World 2016 on\nSeptember 14-15, stop by the \"Open Source Hub\", located in the Partner Expo\nhall at the Santa Clara Convention Center in Santa Clara, CA. The Open Source\nHub will have many Jenkins contributors, committers, JAM leaders, and\nofficers from\nthe governance board under one roof, so there will be plenty of knowledge and\ntalents on hand to share. We hope you’ll join in on the festivities.\n\nAsk the Experts\n\nThe setup that is waiting for you: white boards, monitors and lots of brain\npower to help answer those Jenkins questions that have been keeping you up at\nnight.  Jenkins experts can help with beginner questions to the more advanced\nones. All you need to do is bring your laptop and your questions; the experts\nwill help answer them!\n\nRegister for Jenkins World in\nSeptember with the code JWFOSS for a 20% discount off your pass.\n\nLive Demos\n\nSometimes seeing is believing, there will be plenty of demos in the \"Open\nSource Hub\" during the lunch hours on Wednesday September 14th, and Thursday\nSeptember 15th in the expo hall. Jenkins experts will be show-casing their\nfavorite Jenkins features, plugins and projects. Grab your lunch, take a seat\nin the open source theater to learn about:\n\nPipelines for Building and Deploying Android Apps by Android Emulator\nplugin maintainer Chris Orr\n\nGit Plugin - Large Repos, Submodule Authentication, and more by Git plugin\nmaintainer Mark Waite\n\nDocker and Pipeline by Jenkins infrastructure contributor\nR Tyler Croy\n\nExtending Pipeline with Libraries by Pipeline plugin maintainer\nJesse Glick\n\nBlue Ocean in Action by Blue Ocean contributor\nKeith Zantow\n\nExternal Workspace Manager plugin for Pipeline by\nGoogle Summer of Code student\nAlexandru Somai\n\nAnd many more\n\nJenkins Mural\n\nJenkins World participants will take part in the realization of a giant\ncollaborative mural painting with the\nCommitStrip team.  Thomas, the writer and\nEtienne, the cartoonist, teamed up with a few Jenkins contributors to design a\n5m x 2m mmural which will be drawn live! Brushes and colors will be\navailable for all attendees who wish to help paint this one of a kind piece of\nJenkins art.\n\nSticker Swap\n\nJenkins World attendees will have a chance to swap stickers. There will be a\ntable where attendees are welcome to place/take stickers. Bring your cool\nstickers to share with others and take stickers that interest you.\n\nAfter Dark Reception Sponsored by CloudBees\n\nAfter Dark reception will be from 6-8pm on Wed Sept 14 in the Partner Expo.\nEnjoy cocktails, appetizers, mingle, and dance to a live band. A big THANK\nYOU\ngoes out to CloudBees for their generous contributions! See you at After Dark!\n\nContributor Summit - Tuesday, September 13\n\nIf Blue Ocean, Pipeline and Storage Pluggability sounds interesting to you,\njoin the interactive discussions surrounding these topics. The Jenkins project\nis also looking to hear use-cases, war stories, and pain points. The objective\nof the summit is to work towards improving the Jeknins project.\nSeats are limited.\n\nDon’t forget to register; I look forward to\nseeing you at the conference!\n\nLinks\n\nJenkins World 2016\n\nAcknowledgements\n\nSpecial thanks to CloudBees as the premier\nsponsor and BlazeMeter, Microsoft, Red\nHat and all the other sponsors who have made this event possible.","title":"Jenkins World 2016 Festivities","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-08-26T00:00:00.000Z","id":"ddf1a677-43d3-5209-a6e7-d331d574df38","slug":"/blog/2016/08/26/ask-the-experts-jenkins-world/","strippedHtml":"Our events officer Alyssa has been working for\nthe past several weeks to organize the \"Open Source Hub\" at\nJenkins World 2016. The Hub\nis a location on the expo floor where contributors to the Jenkins project can hang\nout, share demos and help Jenkins users via the \"Ask the Experts\" program. Thus\nfar we have a great list of experts who have volunteered to help staff the\nbooth, which includes many frequent contributors, JAM\norganizers and board members.\n\nA few of the friendly folks you will see at Jenkins World are:\n\nPaul Allen -\nP4 Plugin\nmaintainer and Pipeline contributor.\n\nR Tyler Croy -\nJenkins infrastructure maintainer and\nboard member.\n\nJesse Glick - Pipeline\nmaintainer and long-time contributor to Jenkins\ncore.\n\nEddú Meléndez Gonzales - Organizer for\nthe Lima (Perú)\nJenkins Area Meetup and contributor to Spring.\n\nJon Hermansen - Organizer for the\nLos Angeles\nJenkins Area Meetup, developer and Pipeline user.\n\nOwen Mehegan -\nGitLab plugin\ncontributor, release engineer and copy editor for jenkins.io.\n\nOleg Nenashev -\nGoogle Summer of Code organizer, maintainer of multiple\nplugins and St.\nPetersburg Jenkins Area Meetup organizer.\n\nChristopher Orr - Maintainer of multiple\nAndroid-related plugins, including the\nAndroid\nEmulator plugin and contributor to numerous projects behind the scenes of\nJenkins.\n\nCasey Vega - Organizer for the\nLos Angeles\nJenkins Area Meetup and release engineer at Verizon Digital Media.\n\nMark Waite - Maintainer of the\nGit plugin and\ncontributor to a number of other Git-related plugins.\n\nDean Yu - Long-time contributor, board member\nand release engineer at Shutterfly.\n\nI hope that this list isn’t exhaustive! If you are an active member of the\nJenkins community and/or a contributor, consider taking part in the \"Ask the\nExperts\" program. It’s a great opportunity to bond with other contributors and\ntalk with fellow users at Jenkins World.\n\nYou will be able to find us in the expo hall under the \"Open Source Hub\" sign;\nplease stop by at Jenkins World to say hello, pick up stickers and to ask\nquestions!\n\nRegister for Jenkins World in\nSeptember with the code JWFOSS for a 20% discount off your pass.","title":"Ask the Experts at Jenkins World 2016","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-08-29T00:00:00.000Z","id":"95ef7134-7327-5121-a920-cbff69688c23","slug":"/blog/2016/08/29/jenkins-world-speaker-blog-goodgame/","strippedHtml":"This is a guest post by Jenkins World speaker David Hinske, Release\nEngineer at Goodgame Studios.\n\nHey there, my name is David Hinske and I work at Goodgame Studios (GGS), a game\ndevelopment company in Hamburg, Germany. As Release Engineer in a company with\nseveral development teams, it comes in handy using several Jenkins instances.\nWhile this approach works fine in our company and gives the developers a lot of\nfreedom, we came across some long-term problems concerning maintenance and\nstandards. These problems were mostly caused by misconfiguration or non-use of\nplugins. With “configuration as code” in mind, I took the approach to apply\nstatic code analysis with the help of SonarQube, a platform to manage code\nquality, for all of our Jenkins job configurations.\n\nAs a small centralized team, we were looking for an easy way to control the\nhealth of our growing Jenkins infrastructure. With considering “configuration\nas code“, I developed a simple extension of SonarQube, to manage the quality\nand usage of all spawned Jenkins instances. The given SonarQube features (like\ncustomized rules/metrics, quality profiles and dashboards) allow us and the\ndevelopment teams to analyze and measure the quality of all created jobs in our\ncompany. Even though Jenkins configuration analysis cannot cover all\nSonarQube’s axes of code quality, I think there is still potential for\nconventions/standards, duplications, complexity, potential bugs\n(misconfiguration) and design and architecture.\n\nThe results of this analysis can be used by all people working with Jenkins. To\nachieve this, I developed a simple extension of SonarQube, containing\neverything which is needed to hook up our SonarQube with our Jenkins\nenvironment. The implementation contains a new basic-language “Jenkins“ and an\ninitial set of rules.\n\nOf course the needs depend strongly on the way Jenkins is being used, so not\nevery rule implemented might be useful for every team, but this applies to all\ntypes of code analysis. The main inspirations for the rules were developer\nfeedback and some articles found in the web. The different ways Jenkins can be\nconfigured provides the potential for many more rules. With this new approach\nof quality analysis, we can enforce best practices like:\n\nPolling must die (Better to triggerb uilds from pushes than poll the\nrepository every x minutes).\n\nUse Log Rotator (Not using log-rotator can result in disk space problems on\nthe controller).\n\nUse agents/labels (Jobs should be defined where to run).\n\nDon’t build on the controller (In larger systems, don’t build on the controller).\n\nEnforce plugin usage (For example: Timestamp, Mask-Passwords).\n\nNaming sanity (Limit project names to a sane (e.g. alphanumeric) character\nset).\n\nAnalyze Groovy Scripts (For example: Prevent System.exit(0) in System Groovy\nScripts).\n\nBesides taking control of all configuration of any Jenkins instance we want,\nthere is also room for additional metrics, like measuring the amount and\ndifferent types of jobs (Freestyle/Maven etc…​) to get an overview about the\ngeneral load of the Jenkins instance. A more sophisticated idea is to measure\ncomplexity of jobs and even pipelines. As code, jobs configuration gets harder\nto understand the more steps are involved. On the one hand scripts, conditions\nand many parameters can negatively influence the readability, especially if you\nhave external dependencies (like scripts) in different locations. On the other\nhand, pipelines can also grow very complex when many jobs are involved and\nchained for execution. It will be very interesting for us to see where and why\ntoo complex pipelines are being created.\n\nOn visualization we rely on the data and its interpretation of SonarQube, which\noffers a big bandwidth of widgets. Everybody can use and customize the\ndashboards. Our centralized team for example has a separate dashboard where we\ncan get a quick overview over all instances.\n\nThe problem of \"growing\" Jenkins with maintenance problems is not new.\nEspecially when you have many developers involved, including with the access to\ncreate jobs and pipelines themselves, an analysis like this SonarQube plugin\nprovides can be useful for anyone who wants to keep their Jenkins in shape.\nCustomization and standards are playing a big role in this scenario. This blog\npost surely is not an advertisement for my developed plugin, it is more about\nthe crazy idea of using static code analysis for Jenkins job configuration. I\nhaven’t seen anything like it so far and I feel that there might be some\npotential behind this idea.\n\nJoin me at my Enforcing Jenkins Best Practices session at the 2016 Jenkins\nWorld to hear more!\n\nDavid will be\npresenting\nmore of this concept at\nJenkins World in September.\nRegister with the code JWFOSS for 20% off your full conference pass.","title":"Enforcing Jenkins Best Practices","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2016-08-29T00:00:00.000Z","id":"48307a4d-711a-56d1-885f-e9d1945fa4d5","slug":"/blog/2016/08/29/sauce-pipeline/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nTesting web applications across multiple browsers on different platforms can be challenging even for smaller applications.\nWith Jenkins and the\nSauce OnDemand Plugin,\nyou can wrangle that complexity by defining your Pipeline as Code.\n\nPipeline ♥ UI Testing, Too\n\nI recently started looking for a way to do browser UI testing for an open-source JavaScript project to which I contribute.\nThe project is targeted primarily at\nNode.js\nbut we’re committed to maintaining browser-client compatibility as well.\nThat means we should run tests on a matrix of browsers.\nSauce Labs\nhas an \"open-sauce\" program that provides free test instances to open-source projects.\nI decided to try using the\nSauce OnDemand Plugin\nand\nNightwatch.js\nto run Selenium tests on a sample project first, before trying a full-blown suite of tests.\n\nStarting from Framework\n\nI started off by following Sauce Labs' instructions on\n\" Setting up Sauce Labs with Jenkins\"\nas far as I could.\nI installed the\nJUnit and\nSauce OnDemand\nplugins, created an account with Sauce Labs, and\nadded my Sauce Labs credentials to Jenkins.\nFrom there I started to get a little lost.\nI’m new to Selenium and I had trouble understanding how to translate the instructions to my situation.\nI needed a working example that I could play with.\n\nHappily, there’s a whole range of sample projects in\n\" saucelabs-sample-test-frameworks\"\non GitHub, which show how to integrate Sauce Labs with various test frameworks, including Nightwatch.js.\nI forked the Nightwatch.js sample to\nbitwiseman/JS-Nightwatch.js\nand set to writing my Jenkinsfile.\nBetween the sample and the Sauce Labs instructions,\nI was able to write a pipeline that ran five tests on one browser via\nSauce Connect :\n\nnode {\n    stage \"Build\"\n    checkout scm\n\n    sh 'npm install' (1)\n\nstage \"Test\"\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') { (2)\nsauceconnect(options: '', useGeneratedTunnelIdentifier: false, verboseLogging: false) { (3)\nsh './node_modules/.bin/nightwatch -e chrome --test tests/guineaPig.js || true' (4)\njunit 'reports/**' (5)\nstep([$class: 'SauceOnDemandTestPublisher']) (6)\n}\n    }\n}\n\n1\nInstall dependencies\n\n2\nUse my\npreviously added sauce credentials\n\n3\nStart up the\nSauce Connect\ntunnel to Sauce Labs\n\n4\nRun Nightwatch.js\n\n5\nUse JUnit to track results and show a trend graph\n\n6\nLink result details from Sauce Labs\n\nThis pipeline expects to be run from a Jenkinsfile in SCM.\nTo copy and paste it directly into a Jenkins Pipeline job, replace the checkout scm step with\ngit url:'https://github.com/bitwiseman/JS-Nightwatch.js', branch: 'sauce-pipeline'.\n\nI ran this job a few times to get the JUnit report to show a trend graph.\n\nThis sample app generates the SauceOnDemandSessionID for each test, enabling the Jenkins Sauce OnDemand Plugin’s result publisher to link results to details Sauce Labs captured during the run.\n\nAdding Platforms\n\nNext I wanted to add a few more platforms to my matrix.\nThis would require changing both the test framework configuration and the pipeline.\nI’d need to add new named combinations of platform, browser, and browser version (called \"environments\") to the Nightwatch.js configuration file,\nand modify the pipeline to run tests in those new environments.\n\nThis is a perfect example of the power of pipeline as code.\nIf I were working with a separately configured pipeline,\nI’d have to make the change to the test framework, then change the pipeline manually.\nWith my pipeline checked in as code,\nI could change both in one commit,\npreventing errors resulting from pipeline configurations going out of sync from the rest of the project.\n\nI added three new environments to nightwatch.json :\n\n\"test_settings\" : {\n  \"default\": { /*----8 <----*/ },\n  \"chrome\": { /*----8 <----*/ },\n\n  \"firefox\": {\n    \"desiredCapabilities\": {\n      \"platform\": \"linux\",\n      \"browserName\": \"firefox\",\n      \"version\": \"latest\"\n    }\n  },\n  \"ie\": {\n    \"desiredCapabilities\": {\n      \"platform\": \"Windows 10\",\n      \"browserName\": \"internet explorer\",\n      \"version\": \"latest\"\n    }\n  },\n  \"edge\": {\n    \"desiredCapabilities\": {\n      \"platform\": \"Windows 10\",\n      \"browserName\": \"MicrosoftEdge\",\n      \"version\": \"latest\"\n    }\n  }\n}\n\nAnd I modified my Jenkinsfile to call them:\n\n//----8 (1)\n'chrome',\n        'firefox',\n        'ie',\n        'edge'\n    ].join(',')\n    // Run selenium tests using Nightwatch.js\n    sh \"./node_modules/.bin/nightwatch -e ${configs} --test tests/guineaPig.js\" (2)\n} //----8\n\n1\nUsing an array to improve readability and make it easy to add more platforms later.\n\n2\nChanged from single-quoted string to double-quoted to support variable substitution.\n\nTest frameworks have bugs too. Nightwatch.js (v0.9.8) generates incomplete JUnit files,\nreporting results without enough information in them to distinguish between platforms.\nI implemented a fix for it and\nsubmitted a PR to Nightwatch.js.\nThis blog shows output with that fix applied locally.\n\nAs expected, Jenkins picked up the new pipeline and ran Nightwatch.js on four platforms.\nSauce Labs of course recorded the results and correctly linked them into this build.\nNightwatch.js was already configured to use multiple worker threads to run tests against those platforms in parallel, and\nmy Sauce Labs account supported running them all at the same time,\nletting me cover four configurations in less that twice the time,\nand that added time was most due to individual new environments taking longer to complete.\nWhen I move to the actual project, this will let me run broad acceptance passes quickly.\n\nConclusion: To Awesome and Beyond\n\nConsidering the complexity of the system, I was impressed with how easy it was to integrate Jenkins with Sauce OnDemand to start testing on multiple browsers.\nThe plugin worked flawlessly with Jenkins Pipeline.\nI went ahead and ran some additional tests to show that failure reporting also behaved as expected.\n\n//----8 (1)\n//----8\n\n1\nRemoved --test filter to run all tests\n\nEpilogue: Pipeline vs. Freestyle\n\nJust for comparison here’s the final state of this job in Freestyle UI versus fully-commented pipeline code:\n\nThis includes the\nAnsiColor Plugin\nto support Nightwatch.js' default ANSI color output.\n\nFreestyle\n\nPipeline\n\nnode {\n    stage \"Build\"\n    checkout scm\n\n    // Install dependencies\n    sh 'npm install'\n\n    stage \"Test\"\n\n    // Add sauce credentials\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n        // Start sauce connect\n        sauceconnect(options: '', useGeneratedTunnelIdentifier: false, verboseLogging: false) {\n\n            // List of browser configs we'll be testing against.\n            def platform_configs = [\n                'chrome',\n                'firefox',\n                'ie',\n                'edge'\n            ].join(',')\n\n            // Nightwatch.js supports color ouput, so wrap this step for ansi color\n            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {\n\n                // Run selenium tests using Nightwatch.js\n                // Ignore error codes. The junit publisher will cover setting build status.\n                sh \"./node_modules/.bin/nightwatch -e ${platform_configs} || true\"\n            }\n\n            junit 'reports/**'\n\n            step([$class: 'SauceOnDemandTestPublisher'])\n        }\n    }\n}\n\nThis pipeline expects to be run from a Jenkinsfile in SCM.\nTo copy and paste it directly into a Jenkins Pipeline job, replace the checkout scm step with\ngit url:'https://github.com/bitwiseman/JS-Nightwatch.js', branch: 'sauce-pipeline'.\n\nNot only is the pipeline as code more compact,\nit also allows for comments to further clarify what is being done.\nAnd as I noted earlier,\nchanges to this pipeline code are committed the same as changes to the rest of the project,\nkeeping everything synchronized, reviewable, and testable at any commit.\nIn fact, you can view the full set of commits for this blog post in the\nblog/sauce-pipeline\nbranch of the\nbitwiseman/JS-Nightwatch.js\nrepository.\n\nLinks\n\nSauce OnDemand Plugin\n\nbitwiseman/JS-Nightwatch.js\n\nsaucelabs-sample-test-frameworks","title":"Browser-testing with Sauce OnDemand and Pipeline","tags":["tutorial","pipeline","plugins","saucelabs","selenium","nightwatch"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-08-30T00:00:00.000Z","id":"b2605074-9e8e-5012-bc3d-7f504b0e0b2f","slug":"/blog/2016/08/30/ask-experts-demos/","strippedHtml":"At this year’s Jenkins World,\nour events officer Alyssa has been working to\norganize various activities in the \"Open Source Hub\" on the expo floor.  Both\ndays of the conference (Sept. 14th and 15th), during the break for lunch, there\nwill be 15 minute demos by many of the\nexperts helping to staff\nthe Open Source Hub.\n\nDemo Schedule\n\nWednesday, September 14th\n\nTime\nSession\nDetails\nPresenter\n\n12:15 - 12:30\nBlue Ocean in Action\nShowcase of Blue Ocean and how it will make Jenkins a pleasure to use.\nKeith Zantow\n\n12:30 - 12:45\nNotifications with Jenkins Pipeline\nSending information to Slack, HipChat, email and more from your Pipeline\nLiam Newman\n\n12:45 - 13:00\nDocker and Pipeline\nLearn how to use Docker inside of Pipeline for clean, repeatable testing environments\nR Tyler Croy\n\n13:00 - 13:15\nGit plugin - large repos, submodule authentication and more\nTechniques for managing large Git repositories, Submodule authentication, Pipelines and Git\nMark Waite\n\n13:15 - 13:30\nFreestyle to Pipeline\nOverview of how easy it is to migrate from a confusing series of Freestyle Jobs to Jenkins Pipeline\nR Tyler Croy\n\n13:30 - 13:45\npackage.json and Jenkins\nUsing package.json to control your build; running tests, coverage and generating documentation in Jenkins\nCasey Vega\n\n13:45 - 14:00\nExtending Pipeline with Libraries\nWhen you have many jobs using similar configuration, it is natural to factor out the common parts into libraries. See some ways Pipeline lets you do this.\nJesse Glick\n\nThursday, September 15th\n\nTime\nSession\nDetails\nPresenter\n\n12:15 - 12:30\nA simpler way to define Jenkins Pipelines\nGet to know a new way to define your Pipelines in a more configuration-like way!\nAndrew Bayer\n\n12:30 - 12:45\nMultibranch Pipelines + Git symbolic-ref\nPipeline Multibranch Plugin is amazing, but is even better when used with\nGit symbolic references. The combination of the two gives users a way to create\nindividual Jenkins jobs for each of their build/test configurations, instead of\nusing a single parameterized job. I’ll show how to use these tools together to\nhome in on problematic tests, systems under test, or both.\nJon Hermansen\n\n12:45 - 13:00\nExternal Workspace Manager plugin for Jenkins Pipeline\nMeet the External Workspace Manager plugin, which supports managing workspaces across multiple Jenkins jobs running on different nodes and more!\nAlex Somai\n\n13:00 - 13:15\nOwnership plugin for Jenkins\nThe presentation will introduce the Ownership engine for Jenkins jobs, folders and nodes. The presentation will cover plugin WebUI features, Ownership-based security and integration with Jenkins Pipeline\nOleg Nenashev\n\n13:15 - 13:30\nPipelines for building and deploying Android apps\nUsing the various Android-related plugins for Jenkins, we will demonstrate pipelines to automatically build, test, and securely deploy Android apps.\nChristopher Orr\n\nAs you can see there is a lot to see in the Open Source Hub at Jenkins World.\nTo my knowledge these demos are not going to be recorded, so your only\nopportunities to see them might be at Jenkins World or your local\nJenkins Area Meetup!\n\nRegister for Jenkins World in\nSeptember with the code JWFOSS for a 20% discount off your pass.","title":"Demos at Jenkins World 2016","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-08-31T00:00:00.000Z","id":"b54df086-f29e-5e1b-ba30-0dde098bb3d0","slug":"/blog/2016/08/31/scaling-jenkins-at-jenkins-world/","strippedHtml":"This is a guest post by R. Tyler Croy, who is a\nlong-time contributor to Jenkins and the primary contact for Jenkins project\ninfrastructure. He is also a Jenkins Evangelist at\nCloudBees, Inc.\n\nI find the topic of \"scaling Jenkins\" to be incredibly interesting because,\nmore often than not, scaling Jenkins isn’t just about scaling a single instance\nbut rather scaling an organization and its continuous delivery processes. In\nmany cases when people talk about \"scaling Jenkins\" they’re talking about\n\"Jenkins as a Service\" or \"Continuous Delivery as a Service\" which introduces a\nmuch broader scope, and also more organization-specific requirements, to the\nproblem.\n\nOne of my favorite parts of a big conference like\nJenkins World is getting to\nsee how other people are solving similar problems at different organizations,\nin essence:\n\" how\nthe sausage is made.\" This year’s Jenkins World will be no different, with a number\nof sessions by developers and engineers from the companies leading the way,\nscaling continuous delivery and Jenkins.\n\nRegister for Jenkins World in\nSeptember with the code JWFOSS for a 20% discount off your pass.\n\nIn the realm of \"scaling Jenkins\" the following sessions stand-out to me as\n\"must-attend\" for those interested in the space:\n\nJenkinsOps:\nAn Initiative to Streamline and Automate Jenkins\n\nSeptember 14th 4:15 PM - 5:00 PM, Exhibit Hall A-1\n\nNPR’s Digital Media team uses Jenkins to build, test and deploy code to various\nstaging and production environments. As the complexity of the software\ncomponents, environments and tests have grown - both generally and due to our\nquest to achieve continuous deployment - management of Jenkins has become a\nchallenge. In this talk, we share information about our “JenkinsOps” effort\nwhich has allowed us to automate many of the administrative tasks necessary to\nmanage feature code branches, handle deployments, run tests and configure our\nenvironments properly.\n\n— Paul Miles and Grant Dickie of NPR\n\nThinking\nInside the Container: A Continuous Delivery Story\n\nSeptember 15th 1:30 PM - 2:15 PM, Exhibit Hall C\n\nAt Riot Games, we build a lot of software. Come learn how we built an\nintegrated Docker solution using Jenkins that accepts Docker images submitted\nas build environments by engineers around the company. Our containerized farm\nnow creates over 10,000 containers per week and handles nearly 1,000 jobs at a\nrate of about 100 jobs per hour. All this is done with readily available, open\nsource Jenkins plugins. We’ll explore lessons learned, best practices and how\nto scale and build your own system, as well as why we chose to solve the\nproblem this way…and whether or not we succeeded!\n\n— Maxfield F Stewart of Riot Games\n\nHow\nto Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes\n\nSeptember 15th 2:30 PM - 3:15 PM, Great America J\n\nIn this talk, we’ll show how to use Jenkins Pipeline together with Docker and\nKubernetes to implement a complete end-to-end continuous delivery and\ncontinuous improvement system for microservices and monolithic applications\nusing open source software. We’ll demonstrate how to easily create new\nmicroservices projects or import existing projects, have them automatically\nbuilt, system and integration tested, staged and then deployed. Once deployed,\nwe will also see how to manage and update applications using continuous\ndelivery practices along with integrated ChatOps - all completely automated!\n\n— James Strachan of Red Hat\n\nScaling\nJenkins with Docker: Swarm, Kubernetes or Mesos?\n\nSeptember 15th 2:30 PM - 3:15 PM, Exhibit Hall C\n\nThe Jenkins platform can be dynamically scaled by using several Docker cluster\nand orchestration platforms, using containers to run agents and jobs and also\nisolating job execution. But which cluster technology should be used? Docker\nSwarm? Apache Mesos? Kubernetes? How do they compare? All of them can be used\nto dynamically run jobs inside containers. This talk will cover these main\ncontainer clusters, outlining the pros and cons of each, the current state of\nthe art of the technologies and Jenkins support. I believe people will be very\ninterested in learning about the multiple options available.\n\n— Carlos Sanchez of CloudBees\n\nSo,\nYou Want to Build the World’s Biggest Jenkins Cluster?\n\nSeptember 15th 3:45 PM - 4:30 PM, Exhibit Hall C\n\nHow can we do it? We start with some real world results realized by Jenkins\nusers who have built large clusters and review how they got there. Next, we\nwill do experiments scaling some individual sub-components of Jenkins in\nisolation and see what challenges we will face when integrated. The famous\nlarge, distributed systems undoubtedly faced problems scaling - and we can\nlearn from them, too. The result will be recipes for building Jenkins\nclusters with different scaling capabilities. After all of this, you can\nbuild the biggest Jenkins cluster in the world…or maybe just make your own\nJenkins cluster more efficient.\n\n— Stephen Connolly of CloudBees\n\nJenkins at\nSplunk and Splunking Jenkins\n\nSeptember 15th 3:45 PM - 4:30 PM, Exhibit Hall A-1\n\nThis session will highlight how Splunk uses Jenkins to provide an end-to-end\nsolution in the development CI system. Attendees will see how test results are\ndelivered to a Splunk indexer, where they can be analyzed and presented in a\nvariety of ways. This session will also include a live demonstration.\n\n— Bill Houston of Splunk\n\nJenkins inside Google\n\nSeptember 15th 4:45 PM - 5:30 PM, Exhibit Hall C\n\nLast year, we presented our initial investigations and stress testing as we\nprepared to deploy a large-scale Jenkins installation at Google. Now, with a\nyear of real-world use under our belts, we’ll discuss how our expectations held\nup, what new issues we encountered and how we have addressed them.\n\n— David Hoover of Google\n\nIn addition to these, we will also be hosting a\nJenkins World\nContributor Summit where \"scaling\" relevant topics such as \"Storage\nPluggability\" will be discussed.\n\nThe Jenkins World agenda is packed\nwith even more sessions, so it should be a very informational event for\neverybody; hope to see you there!","title":"Scaling Jenkins at Jenkins World 2016","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-09-01T00:00:00.000Z","id":"029c2b9c-b402-58ba-b094-5060a9fa4c30","slug":"/blog/2016/09/01/jenkins-world-contributor-summit/","strippedHtml":"At previous Jenkins User Conferences we have hosted \"Contributor Summits\" to\ngather developers and power-users in one room to discuss specific areas of\nJenkins, such as Scalability, Pipeline, etc. As part of this year’s\nJenkins World we’re hosting\nanother Contributor\nSummit, to discuss: Blue Ocean ,\nPipeline and Storage Pluggability.\n\nContributors to these three areas of the Jenkins ecosystem will be in\nattendance to present details of their design, requirements, and tentative\nroadmaps. After the presentations, the afternoon will be \"unconference style\" which\nis much more fluid to allow discussions, feedback, and brain-storming around\nthe three focus areas.\n\nThe program for the\nJenkins World\nContributor Summit includes:\n\nUpdates from the various project\nofficers.\n\nA discussion of the Blue Ocean technology stack,\noverall architecture, and how to develop plugins that integrate with Blue\nOcean. Led by Keith Zantow.\n\nPresentation on the current status of Pipeline, lessons\nlearned, new changes and the future. Led by\nJesse Glick.\n\nOverview of \"Storage Pluggability\", a new scalability-oriented project to\nrevamp the underlying storage mechanisms in Jenkins. Led by\nKohsuke Kawaguchi.\n\nI cannot recommend participating in the Contributor Summit enough. I have found\nprevious Summits to be immensely useful for sharing my own thoughts, as well as\nfor hearing new perspectives from the others in attendance.\n\nOur space is limited however! I encourage you to join us, so please\nRSVP soon!\n\nRegister for Jenkins World in\nSeptember with the code JWFOSS for a 20% discount off your pass.","title":"Jenkins World Contributor Summit","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-09-06T00:00:00.000Z","id":"8ad9f6bc-3bc6-5882-82e5-d2a281d96faa","slug":"/blog/2016/09/06/jenkins-world-speaker-blog-pipeline-model-definition/","strippedHtml":"This is a guest post by Jenkins World speaker Andrew Bayer, Jenkins\ndeveloper at CloudBees.\n\nOver the last couple years, Pipeline as code has very much become the future of\nJenkins - in fact, at this point, I’d say it’s pretty well established as the\npresent of Jenkins. But that doesn’t mean it’s done, let alone that it’s\nperfect. While many developers enjoy the power and control that they get from\nwriting Pipelines using scripting, not everyone feels the same way. A lot of\ndevelopers want to specify their build as configuration and get on with building\nsoftware.\n\nPipeline scripts haven’t been a good way to do that…​until now.\n\nWith new changes to Jenkins Pipeline, you are now able to define your Pipeline\nfrom configuration in your Jenkinsfile by installing the new\nPipeline Model Definition\nplugin. It’s available today for you to try via the update center.\nBe sure to check the documentation for examples on how to get started for a\nvariety of languages and platforms.\n\nHere’s a quick example based on the plugin’s own Jenkinsfile :\n\npipeline {\n    // Make sure that the tools we need are installed and on the path.\n    tools {\n        maven \"Maven 3.3.9\"\n        jdk \"Oracle JDK 8u40\"\n    }\n\n    // Run on any executor.\n    agent label:\"\"\n\n    // The order that sections are specified doesn't matter - this will still be run\n    // after the stages, even though it's specified before the stages.\n    postBuild {\n        // No matter what the build status is, run these steps. There are other conditions\n        // available as well, such as \"success\", \"failed\", \"unstable\", and \"changed\".\n        always {\n            archive \"target/**/*\"\n            junit 'target/surefire-reports/*.xml'\n        }\n    }\n\n    stages {\n        // While there's only one stage here, you can specify as many stages as you like!\n        stage(\"build\") {\n            sh 'mvn clean install -Dmaven.test.failure.ignore=true'\n        }\n    }\n\n}\n\nIt’s still early days for this feature, with a lot of further functionality\nplanned to make it easier and more intuitive to define your Pipelines. All of\nthat functionality lives on top of Pipeline scripting, so we’ll also keep\nimproving Pipeline steps and syntax outside of the model! And perhaps most\nexciting, the Pipeline model will be used by an in-the-works visual editor\nthat will be part of the Blue Ocean project - while the editor isn’t ready yet,\nthe Pipeline Model Definition plugin will be bundled with the Blue Ocean beta\nfor you to try out.\n\nI’ll be going into all of this and more at my talk on Thursday, September 15th, at\n3:45pm at Jenkins World, and showing off the same day at the lunchtime demo\ntheater. I can’t wait to see you all there and hear what you think of all this!\n\nAndrew will be\npresenting\nmore of this concept at\nJenkins World in September.\nRegister with the code JWFOSS for 20% off your full conference pass.","title":"Introducing a New Way to Define Jenkins Pipelines","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2016-09-07T00:00:00.000Z","id":"a11e3798-132b-51c1-b4f2-5be067a487f4","slug":"/blog/2016/09/07/pipeline-at-jenkins-world/","strippedHtml":"This is a guest post by R. Tyler Croy, who is a\nlong-time contributor to Jenkins and the primary contact for Jenkins project\ninfrastructure. He is also a Jenkins Evangelist at\nCloudBees, Inc.\n\nI have been heavily using Jenkins Pipeline for just about\nevery Jenkins-related project I have contributed to over the past year. Whether I am\nbuilding and publishing Docker\ncontainers, testing\ninfrastructure code or\npublishing this very web\nsite, I have been adding a Jenkinsfile to nearly every Git repository I\ntouch.\n\nImplementing Pipeline has been rewarding, but has not been without its own\nchallenges. That’s why I’m excited to see lots of different Jenkins Pipeline\nrelated content in the agenda at\nJenkins World.\n\nI don’t think it’s possible for a single person to attend all of the Pipeline\ntalks, or the Pipeline-related demos\nin the \"Open Source Hub\", but fortunately CloudBees\nwill be recording the sessions. If you have Pipeline-related questions unanswered by\nall these presentations, feel free to join us at the \"Open Source Hub\" in the\nexpo hall and Ask the\nExperts.\n\nOn the first day of Jenkins World (September 13th), Isaac Cohen is hosting a\nworkshop titled\nLet’s\nBuild a Jenkins Pipeline which may be interesting to you if you haven’t yet\nworked with Pipeline.\n\nPipelining\nDevOps with Jenkins and AWS\n\nSeptember 14th 2:00 PM - 2:45 PM, Exhibit Hall A-1\n\nAutomated workflow is a proven method for removing process variability. DevOps\npipelines are the next step in the evolution of CI/CD/DevOps. This talk covers\nJenkins pipelines, both with and without AWS integration, and explains how\nJenkins can be used to create, execute and manage pipelines.\n\n— Jimmy Ray of nextSource\n\nPerfecting\nYour Development Tools: Updates to the Helix Plugin for Jenkins\n\nSeptember 14th 5:00 PM - 6:00 PM, Exhibit Hall C\n\nConsidering a mono repo that can manage all your source code, binary and other\nassets? Join us at the Perforce Birds of a Feather Session for updates and\ndiscussions around the Helix Plugin for Jenkins (or ‘P4 plugin’).\n\nThis session will look at the latest DSL PipeLine support in the ‘P4 plugin’\nfor Jenkins and will include a live demo. We will show you how to map your\nBranches and Streams into a Jenkins Workspace, publish assets back into\nHelix, and more. You may even get a sneak preview at the latest ‘P4 plugin’\nfor Jenkins that allows you the freedom to query and run commands from\nwithin Jenkins directly against your Helix connection.\n\n— Paul Allen of Perforce\n\nContinuously\nDeploying Containers with Jenkins Pipeline to Docker Swarm Cluster\n\nSeptember 14th 3:00 PM - 3:45 PM, Exhibit Hall A-3\n\nMany of us have already experimented with Docker - for example, by running one\nof the pre-built images from Docker Hub. It is possible that your team might\nhave recognized the benefits that Docker provides in building microservices and\nthe advantages the technology could bring to development, testing, integration\nand, ultimately, production. However, you must create a comprehensive build\npipeline before deploying any containers into a live environment. Integrating\ncontainers into a CD pipeline is far from easy. Along with the benefits Docker\nbrings, there are challenges both technically and process-related. This\npresentation attempts to outline the steps you need to take for a\nfully-automated Jenkins pipeline that continuously builds, tests and deploys\nmicroservices into a Docker Swarm cluster.\n\n— Viktor Farcic\n\nNo,\nYou Shouldn’t Do That! Lessons from Using Pipeline\n\nSeptember 15th 10:30 AM - 11:15 AM, Exhibit Hall A-1\n\nPipeline is as powerful as a loaded gun, but with skill can be as delicate as a\nsurgeon’s knife. This talk will give an overview of health and safety so that\nyou can avoid shooting yourself in the head and walk the path to medical\nschool. It will cover not only what not to do, but also why, and share some\nsolutions so you are not left high and dry. Both James and Bobby have bullet\nwounds from “Champagning” pipeline to automate the test and release of several\nof the CloudBees products and can occasionally still be seen walking with a\nlimp from shooting for the moon and hitting their feet.\n\n— Bobby Sandell and James T. Nord of CloudBees\n\nDocker\nImage Lifecycle Implemented with Jenkins Pipeline\n\nSeptember 15th 11:30 AM - 12:15 PM, Exhibit Hall A-2\n\nWhile Docker has enabled an unprecedented velocity of software production, it\nis all too easy to spin out of control. A promotion-based model is required to\ncontrol and track the flow of Docker images as much as it is required for a\ntraditional software development lifecycle. We will demonstrate how to go from\ndevelopment to containerization to distribution utilizing binary management\npromotion in a framework implemented on Jenkins, using the Pipeline\nfunctionality.\n\n— Mark Galpin\n\nDirections for Pipeline\n\nSeptember 15th 11:30 AM - 12:15 PM, Exhibit Hall A-1\n\nThe Pipeline feature has matured and is now included in Jenkins 2.0. During the\ntime since its release, copious user feedback has been received about missing\nfeatures and pain points. Come hear about some things we know should be worked\non - or are already in progress - and bring your suggestions.\n\n— Jesse Glick of CloudBees\n\nHow\nto Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes\n\nSeptember 15th 2:30 PM - 3:15 PM, Great America J\n\nIn this talk, we’ll show how to use Jenkins Pipeline together with Docker and\nKubernetes to implement a complete end-to-end continuous delivery and\ncontinuous improvement system for microservices and monolithic applications\nusing open source software. We’ll demonstrate how to easily create new\nmicroservices projects or import existing projects, have them automatically\nbuilt, system and integration tested, staged and then deployed. Once deployed,\nwe will also see how to manage and update applications using continuous\ndelivery practices along with integrated ChatOps - all completely automated!\n\n— James Strachan of Red Hat\n\nIntroducing\na New Way to Define Jenkins Pipelines\n\nSeptember 15th 3:45 PM - 4:30 PM, Great America J\n\nPipeline is quickly establishing itself as the direction that Jenkins jobs are\ngoing, enabling the definition of a complete CD pipeline in a single job;\nPipeline as Code via the “Jenkinsfile”; job durability across controller restarts;\nand more. I’ll be talking here about the next evolution for Pipeline: a simple,\ndeclarative model to define your Pipelines with no need to write scripts. This\nconfiguration syntax for Pipeline allows you to automatically configure all\nstages of your pipeline, the complete build environment, post-build actions,\nnotifications and more. All while providing syntactic and semantic validation\nbefore the build actually gets going.\n\n— Andrew Bayer of CloudBees\n\nThe\nNeed For Speed: Building Pipelines To Be Faster\n\nSeptember 15th 4:45 PM - 5:30 PM, Exhibit Hall A-1\n\nResponse time is paramount for a CI/CD system. In this session, you will see\nhow a few best practices in constructing pipelines can yield faster turnaround\ntimes and reduced resource use. We’ll also run through plugins and tools to\nanalyze and visualize performance, including the Pipeline Stage View plugin. If\ntime permits, we may briefly discuss some of the computer science theory behind\ndifferent aspects of performance.\n\n— Sam Van Oort of CloudBees\n\nContinuously Delivering\nContinuous Delivery Pipelines\n\nSeptember 15th 4:45 PM - 5:30 PM, Exhibit Hall J\n\nOur 600-person IT organization has committed to implementing continuous\ndelivery practices enterprise-wide. This isn’t a single momentous event put in\nplace overnight. Rather, it’s a strategic journey towards a common goal, and\nthrough which each application will take its own unique path. A seminal\ncomponent of our CD journey is the Pipeline plugin and it has become our\nstandard for CD pipeline orchestration. We will discuss a few of the diverse\npaths taken by the application teams at our company and show how the use of the\nPipeline plugin has uniquely enabled continuous delivery for us in a way that\nno competing tool can.\n\n— Neil Hunt of Aquilent\n\nCD Pipelines as Code with\nGithub and Bitbucket\n\nSeptember 15th 4:45 PM - 5:30 PM, Exhibit Hall J\n\nPipeline Multibranch projects come as a natural evolution of pipeline as code:\ndefine your CD pipeline in your source code repository and Jenkins will create\nisolated branch and pull requests jobs for it. This talk is about the\nintegration of the Pipeline Multibranch plugin with Github and Bitbucket as\nbranch sources.\n\n— Antonio Muñiz of CloudBees\n\nRegister for Jenkins World in\nSeptember with the code JWFOSS for a 20% discount off your pass.","title":"Pipeline at Jenkins World 2016","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-09-08T00:00:00.000Z","id":"51fd82b2-e6d8-562f-a3a7-329013385e5a","slug":"/blog/2016/09/08/continuous-delivery-of-infra/","strippedHtml":"This is a guest post by Jenkins World speaker\nR Tyler Croy, infrastructure maintainer for the\nJenkins project.\n\nI don’t think I have ever met a tools, infrastructure, or operations team that\ndid not have a ton of work to do. The Jenkins project’s\ninfrastructure\"team\" is no different; too much work, not enough time. In lieu of hiring more\npeople, which isn’t always an option, I have found heavy automation and\ncontinuous delivery pipelines to be two solutions within reach of the\nover-worked infrastructure team.\n\nAs a big believer in the concept of \"Infrastructure as Code\", I have been,\nslowly but surely, moving the project’s infrastructure from manual tasks to\ncode, whether implemented in our\nPuppet code-base,\nDocker containers,\nor even as\nmachine specifications\nwith\nPacker.\nThe more of our infrastructure that is code, the more we can apply continuous\ndelivery practices to consistently and reliably build, test and deliver our\ninfrastructure.\n\nThis approach integrates nicely with\nJenkins Pipeline,\nallowing us to also define our continuous delivery pipelines themselves as\ncode. For example, by sanity-checking our BIND zone files:\n\nJenkinsfile\n\nnode('docker') {\n    def dockerImage = 'rtyler/jenkins-infra-builder'\n\n    checkout scm\n    docker.image(dockerImage).inside {\n        sh \"/usr/sbin/named-checkzone jenkins-ci.org dist/profile/files/bind/jenkins-ci.org.zone\"\n        sh \"/usr/sbin/named-checkzone jenkins.io dist/profile/files/bind/jenkins.io.zone\"\n    }\n}\n\nOr delivering our Docker containers automatically to\nDocker Hub, with a Jenkinsfile such as:\n\nJenkinsfile\n\nnode('docker') {\n    checkout scm\n\n    /* Get our abbreviated SHA-1 to uniquely identify this build */\n    def shortCommit = sh(script: 'git rev-parse HEAD', returnStdout: true).take(6)\n\n    stage 'Build ircbot' {\n        withEnv([\"JAVA_HOME=${tool 'jdk8'}\", \"PATH+MVN=${tool 'mvn'}/bin\"]) }\n            sh 'make bot'\n        }\n    }\n\n    def whale\n    stage 'Build container' {\n        whale = docker.build(\"jenkinsciinfra/ircbot:build${shortCommit}\")\n    }\n\n    stage 'Deploy container' {\n        /* Push to Docker Hub */\n        whale.push()\n    }\n}\n\nIn\nmy talk at Jenkins World\n(September 14th, 3:00 - 3:45pm in Exhibit Hall A-1) I will discuss these\nJenkinsfiles along with some of the strategies, patterns and code used with the\nJenkins project’s\nopen source\ninfrastructure to get the most out of the team’s limited time.\n\nR Tyler will be\npresenting\nmore about continous delivery of infrastructure at\nJenkins World\nin September.  Register with the code JWFOSS for 20% off your full conference\npass.","title":"Continuous Delivery of Infrastructure with Jenkins","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-09-09T00:00:00.000Z","id":"ebc932b1-1d9b-5ee9-80be-9c7081c78a03","slug":"/blog/2016/09/09/take-the-2016-jenkins-survey-blog/","strippedHtml":"This is a guest post by Brian\nDawson on behalf of CloudBees, where he works as a DevOps Evangelist\nresponsible for developing and sharing continuous delivery and DevOps best\npractices. He also serves as the CloudBees Product Marketing Manager for\nJenkins.\n\nOnce again it’s that time of year when CloudBees sponsors the\nJenkins Community Survey to\nassist the community with gathering objective insights into how jenkins is\nbeing used and what users would like to see in the Jenkins project.\n\nYour personal information (name, email address and company) will NOT be used by CloudBees for\nsales or marketing.\n\nAs an added incentive to take the survey, CloudBees will enter participants\ninto a drawing for a free pass to Jenkins World 2017 (1st prize) and a $100\nAmazon Gift Card (2nd prize). The survey will close at the end of September, so\nclick the link at the end of the blog post to get started!\n\nAll participants will be able to access reports summarizing survey results. If\nyou’re curious about what insights your input will provide, see the results of\nlast year’s 2015 survey:\n\n2015 Community Survey Results (PDF)\n\nState of Jenkins Infographic (PDF)\n\nYour feedback helps capture a bigger picture of\ncommunity trends and needs. There are laws that govern prize giveaways and\neligibility; CloudBees has compiled all those fancy\nterms and conditions here.\n\nPlease take the survey and let your voice be heard - it will take less than 10\nminutes.\n\nTake me to the survey","title":"Take the 2016 Jenkins Survey!","tags":["jenkins"],"authors":[{"avatar":null,"blog":null,"github":"bvdawson","html":"<div class=\"paragraph\">\n<p>DevOps dude at CloudBees.\nJenkins Marketing Manager.\nTools geek.</p>\n</div>","id":"bvdawson","irc":null,"linkedin":null,"name":"Brian Dawson","slug":"/blog/authors/bvdawson/","twitter":"brianvdawson"}]}},{"node":{"date":"2016-09-19T00:00:00.000Z","id":"9f1352d7-4bb9-5af7-a7b7-3dab3d29a690","slug":"/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/","strippedHtml":"At Jenkins World on Wednesday 14th of September, the Jenkins project was happy to\nintroduce the beta release of Blue Ocean. Blue Ocean is the new user experience\nfor Jenkins, built from the ground up to take advantage of Jenkins Pipeline.\nIt is an entire rethink of the the way that modern developers will use Jenkins.\n\nBlue Ocean is available today via the Jenkins Update Center for Jenkins users\nrunning 2.7.1 and above.\n\nGet the beta\n\nJust search for BlueOcean beta in the Update Center, install it,\nbrowse to the dashboard, and then click the Try BlueOcean UI button on the dashboard.\n\nWhats included?\n\nBack in April we open sourced Blue Ocean\nand shared our vision with the community. We’re very happy that all the things we showed you then have\nshipped in the beta (software projects run on time?!).\n\nFor a refresher on Blue Ocean, watch this short video:\n\nDeclarative Pipeline\n\nWe have heard from the community about the usability of Jenkins\nPipeline. Much of the feedback we received was to a desire to\nconfigure Pipelines rather than script them, and to make it easy for beginners\nto get started with their first Pipeline.\n\nThis is how Declarative Pipeline was born. We’ve introduced a new method whereby\nyou declare how you want your Pipeline to look rather than using Pipeline Script\n - it’s configuration rather than code.\n\nHere’s a small example of a Declarative Pipeline for nodejs that runs the whole\nPipeline inside a Docker container:\n\n// Declarative //\npipeline {\n  agent docker:'node:6.3'\n  stages {\n    stage('build') {\n      sh 'npm --version'\n      sh 'npm install'\n    }\n    stage ('test') {\n      sh 'npm test'\n    }\n  }\n}\n\n// Script //\nnode('docker') {\n  docker.image('node:6.3').inside {\n    stage('build') {\n      sh 'npm --version'\n      sh 'npm install'\n    }\n\n    stage('test') {\n      sh 'npm test'\n    }\n  }\n}\n\nDocker support in Declarative Pipeline allows you to version your application code,\nJenkins Pipeline configuration, and the environment where your pipeline will run,\nall in a single repository. It’s a crazy powerful combination.\n\nDeclarative Pipeline introduces the postBuild section that makes it\neasy to run things conditionally at the end of your Pipeline without the\ncomplexity of the try…​ catch of Pipeline script.\n\n// Declarative //\npostBuild {\n  always {\n    sh 'echo \"This will always run\"'\n  }\n  success {\n    sh 'echo \"This will run only if successful\"'\n  }\n  failure {\n    sh 'echo \"This will run only if failed\"'\n  }\n  unstable {\n    sh 'echo \"This will run only if the run was marked as unstable\"'\n  }\n  changed {\n    sh 'echo \"This will run only if the state of the Pipeline has changed\"'\n    sh 'echo \"For example, the Pipeline was previously failing but is now successful\"'\n    sh 'echo \"... or the other way around :)\"'\n  }\n}\n\n\n// Script //\nnode('docker') {\n  try {\n    stage('build') {\n      /* .. snip .. */\n    }\n    stage('test') {\n      /* .. snip .. */\n    }\n\n    sh 'echo \"This will run only if successful\"'\n  }\n  catch (exc) {\n    if (currentBuild.result == 'UNSTABLE') {\n      sh 'echo \"This will run only if the run was marked as unstable\"'\n    }\n    if (currentBuild.result == 'FAILURE') {\n      sh 'echo \"This will run only if failed\"'\n    }\n  }\n  finally {\n    sh 'echo \"This will always run\"'\n  }\n}\n\nAnd there is so much more!\n\nIf you have the Blue Ocean beta installed you already have Declarative Pipeline.\nWhile Declarative Pipeline is still alpha at the moment, we do encourage you to\nfollow our getting started guide,\n give us feedback on the Jenkins Users mailing list\nor file bugs against the 'pipeline-model-definition' component in JIRA.\n\nIntroducing the Pipeline Editor\n\nThe Pipeline Editor is a graphical user interface that gives Jenkins users the\nsimplest way yet to get started with creating Pipelines in Jenkins. It will also\nsave a lot of time for intermediate and advanced Jenkins users as a way to author\nPipelines.\n\nWhen you build your Pipeline in the Editor and click the save button, the editor\nwill commit a new Jenkinsfile back to your repository in the form of the new\nDeclarative Pipeline. When you want to edit again, Jenkins will read it from\nyour repository exactly how you saw it previously.\n\nThe Pipeline Editor is a work in progress and should arrive in a beta release soon.\n\nThank you\n\nThanks for reading our news from Jenkins World and be sure to check the blog\nfor regular updates!\n\nI’d also like to thank our amazing community for their feedback and support\nas we change the way software teams around the world use Jenkins. We couldn’t\ndo this without you.","title":"Announcing the Blue Ocean beta, Declarative Pipeline and Pipeline Editor","tags":["blueocean","ux","pipeline","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/authors/i386/","twitter":"i386"}]}},{"node":{"date":"2016-09-20T00:00:00.000Z","id":"2af55d7f-59c7-5a3f-b9bb-07c4e85c5df6","slug":"/blog/2016/09/20/jom-plugin-development/","strippedHtml":"On September 6th we had a Jenkins Online Meetup.\nThis meetup was the second event in the series of Plugin Development meet ups.\nAt this meetup we were talking about Jenkins Web UI development.\n\nTalks\n\n1) Classic Jenkins UI framework -\nDaniel Beck\n\nIn the first part of his talk, Daniel presented how Stapler, the web framework used in Jenkins, works, and how you can add to the set of URLs handled by Jenkins.\nIn the second part he was talking about creating new views using Jelly and Groovy, and how to add new content to existing views.\n\nKeywords:\nStapler,\nJelly,\nGroovy-defined UIs\n\n2) Developing modern Jenkins UIs with Javascript -\nTom Fennelly\n\nFeel that Jenkins UI is a bit old? You are not alone.\nIn addition to the old stack Jenkins offers a framework for writing UI components in Javascript with help of Node.js.\nTom presented this new engine, which is being used in new Jenkins Web UI components like Jenkins installation wizard.\nHe also provided several examples from the BlueOcean project he is working on.\n\nKeywords:\nNode.js,\nReactJS,\nJenkins JS Builder,\nJenkins Design Language,\nBlue Ocean\n\nLinks\n\nMeetup page\n\nEvent page: Plugin Development. Web UI\n\nWebinar recording\n\nWant to conduct a meetup?\n\nWe are looking for speakers, who would be interested to share their experience about Jenkins best-practices, war stories and plugin development.\n\nIf you are interested to conduct a presentation,\nplease contact meetup organizers using meetup.com “contact organizers” feature\nor via the events@lists.jenkins-ci.org mailing list.","title":"Jenkins Online Meetup report. Plugin Development - WebUI","tags":["meetup","event"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-09-21T00:00:00.000Z","id":"00f2fadc-e637-58e5-9db3-eb9874add2cf","slug":"/blog/2016/09/21/jenkins-world-2016-wrap-up/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nThat’s a Wrap!\n\nAny way you look at it, last week’s Jenkins World Conference 2016 was a huge success.\n\nIn 2011, a few hundred users gathered in San Francisco for the first \"Jenkins User Conference\".\nOver successive years, this grew into several yearly regional Jenkins user conferences.\nThis year, over 1,300 people came from around the world to \"Jenkins World 2016\",\nthe first global event for the Jenkins community.\n\nThis year’s Jenkins World conference included:\n\nKeynote presentation by Jenkins creator, Kohsuke Kawaguchi, announcing a number of great new Jenkins project features, such as \"Blue Ocean\".\n\nMore than 50 sessions on everything from the new \"Blue Ocean\" UI, to \"Continuous Security\" to \"Dockerizing Jenkins\".\n\nJenkins Open-source Hub, with \"Ask the Experts\" and demos by 20+ Jenkins contributors.\n\nBooths from 30+ sponsors.\n\nStickers!\n\nOver the next week, I’ll be posting highlights from the event,\nincluding slides, videos, and links to other useful resources.  Stay tuned!","title":"Jenkins World 2016 Wrap-up - Introduction","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-09-24T00:00:00.000Z","id":"1f3da69f-0fed-5d62-bb32-d769047f8abb","slug":"/blog/2016/09/24/jenkins-world-2016-wrap-up-pipeline/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nAs someone who has managed Jenkins for years and manually managed jobs, I think\npipeline is fantastic. I spent much of the conference manning the\nAsk the Experts desk of the\n\"Open Source Hub\" and was glad to find I was not alone in that sentiment.\nThe questions were not \"Why should I use Pipeline?\", but \"How do I do this in Pipeline?\"\n\nEveryone was interested in showing what they have been able to accomplish,\nlearning about best practices, and seeing what new features were on the horizon.\nThe sessions and demos on Pipeline that\nI saw were all well attended, but no one could have seen all of them.\n\nHere’s a recap of the some of the sessions on Jenkins Pipeline,\nwith links to slides and videos shared by CloudBees :\n\nJesse Glick discussed the past, present, and future of Jenkins Pipeline in\nDirections for Pipeline .\nHe reviewed a broad range of improvements made to Pipeline over the last year, including\nsyntax, documentation, plugin support, and stability.  He reviewed the changes\ncurrently underway.  He also pointed out that many of the improvements have been\ndriven by user feedback and invited everyone to continue to participate in making\npipeline even better.\n\nDownload Presentation\n\nStream Presentation\n\nIn\nPipelining DevOps with Jenkins and AWS ,\nJimmy Ray\nof\nnextSource showed how Pipeline can be used to automate CI/CD build processes,\nand how to integrate Jenkins and Pipeline with AWS.\nHe also discussed some admin-level considerations,\nsuch as how to install Jenkins on EC2\nand the merits of \"LTS\" and \"latest build\".\n\nDownload Presentation\n\nStream Presentation\n\nChristopher Orr examined how to create\n\" Continuous Build and Delivery Pipelines for Android \"\napplications.\nHe showed how to set up Android-capable build agents, ensure traceable application releases,\nreporting warnings, run various types of tests, and deploy and app to Google Play.\nThis included live demonstrations and discussion of best practices.\n\nDownload Presentation\n\nStream Presentation\n\nAndrew Bayer presented\nA New Way to Define Jenkins Pipelines .\nHe showed the next evolution for Pipeline, based on a simpler declarative model.\nThis declarative syntax for Pipeline still supports the creation of complex pipelines,\nincluding complete build environments, post-build actions, and notifications, while\nalso being easier to understand. This declarative syntax also makes in it easier to\nimplement other interesting scenarios such as early validation of pipelines and\na visual pipeline editor.\n\nDownload Presentation\n\nStream Presentation\n\nIn\nPerfecting Your Development Tools: Updates to the Helix Plugin for Jenkins ,\nPaul Allen of\nPerforce walked through using Perforce’s \"Monorepo\" model with Jenkins Pipeline.\nHe explained in detail how to work with the Perforce\"P4\" plugin in Jenkins,\nincluding credential passing and workspace management.\nOf particular interest was his side-by-side comparison the various actions done with the Jenkins UI vs Pipeline.\n\nDownload Presentation\n\nSam Van Oort\ndemonstrated strategies for faster pipelines in\nThe Need For Speed: Building Pipelines To Be Faster .\nHe discussed various elements that contribute to making pipelines faster or slower,\nsuch a number of resources and latency.  He then showed several best practices\nfor constructing pipelines that have lower turnaround times and reduced resource use.\nHe also reviewed plugins and tools that can help analyze and visualize pipeline\nperformance, including the Pipeline Stage View plugin and Blue Ocean.\n\nDownload Presentation\n\nStream Presentation\n\nBobby Sandell and\nJames T. Nord talked about what not to do with Pipeline in\nNo, You Shouldn’t Do That! Lessons from Using Pipeline .\nThey told the story of their own experiences as early adopters of\nJenkins Pipeline at CloudBees. They described a number of key scenarios they attempted\nto address, detailed various mistakes and false starts, and finally share what\nthey learned in each case.\n\nDownload Presentation\n\nStream Presentation\n\nAlexandru Somai gave a\nlightning talk on his\nGoogle Summer of Code (GSoC) 2016 project,\n\" External Workspace Manager Plugin for Jenkins Pipeline\".\nThe build workspace for Jenkins projects may become very large.\nAlex showed how the External Workspace Manager plugin addresses this issue,\nadding support for managing and reusing the same workspace between multiple pipeline builds.\n\nA recording of his presentation for GSOC is available\nhere.\n\nHow to Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes ,\npresented by\nJames Strachan of\nRed Hat, showed how to use Jenkins Pipeline with\nDocker and Kubernetes to implement a complete end-to-end continuous delivery and\ncontinuous improvement system using open source software for both microservices\nand monolithic applications. He demonstrated how to\ncreate or import projects, and have them automatically build, run\nsystem and integration tests, stage, and finally deploy. He also showed to\nmanage and update those deployed applications using continuous\ndelivery practices.\n\nDownload Presentation\n\nStream Demo Video","title":"Jenkins World 2016 Wrap-up - Pipeline","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-09-27T00:00:00.000Z","id":"e7da6d48-fbaf-5549-9581-1b1cb3ddf4f6","slug":"/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nOne of the great features of Jenkins is how far it\ncan scale, not only from a software perspective, but also from an\norganizational one.  From a single Jenkins controller with one or two agents to a\nmultiple controller with thousands of agents, from a team of only a few people\nto a whole company with multiple disparate departments and organizations,\nyou’ll find space where Jenkins is used.\n\nLike any software or organization,\nthere are common challenges for increasing scale with Jenkins and some common best practices, but\nthere are also some unique solutions.  A big conference like\nJenkins World brings users\nfrom all scales together to see how people in other organizations at similar or\ngreater scale are solving similar problems.\n\nHere’s a recap of the some of the sessions on scaling Jenkins,\nwith links to slides and videos shared by CloudBees :\n\nPaul Miles and\nGrant Dickie of\nNPR talked about\nJenkinsOps: An Initiative to Streamline and Automate Jenkins .\nThey shared ways their team has used Jenkins to automate many of the\nadministrative tasks related to managing feature code branches,\nhandling deployments, running tests, and properly configuring their environments.\nThey also showed code samples and talked about future challenges in their quest\nto achieve\ncontinuous deployment.\n\nDownload Presentation\n\nStream Presentation\n\nMaxfield F Stewart of\nRiot Games showed how they built an\nintegrated Docker solution using Jenkins in\nThinking Inside the Container: A Continuous Delivery Story\nHe showed how their system allows engineers around the company to\nsubmit Docker images as build environments.\nThis has let their containerized farm now create over 10,000 containers per week\nand handles nearly 1,000 jobs at a rate of about 100 jobs per hour.\nAnd they have done this using readily available, open\nsource Jenkins plugins. He also talked about how they settled on this design,\nlessons learned, best practices, and how to build and scale other similar system.\n\nDownload Presentation\n\nStream Presentation\n\nHow to Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes ,\npresented by\nJames Strachan of\nRed Hat, showed how to use Jenkins Pipeline with\nDocker and Kubernetes to implement a complete end-to-end continuous delivery and\ncontinuous improvement system using open source software for both microservices\nand monolithic applications. He demonstrated how to\ncreate or import projects, and have them automatically build, run\nsystem and integration tests, stage, and finally deploy. He also showed to\nmanage and update those deployed applications using continuous\ndelivery practices.\n\nDownload Presentation\n\nWatch the Video Demo from the Presentation\n\nCarlos Sanchez of\nCloudBees discussed\nScaling Jenkins with Docker: Swarm, Kubernetes or Mesos?\nHe compared various Docker Swarm, Apache Mesos, and Kubernetes in terms of their\nability to dynamically scale in Jenkins by running jobs inside containers.\nHe also discussed the pros and cons, best practices, level of Jenkins support for each\nof these technologies.\n\nDownload Presentation\n\nStream Presentation\n\nStephen Connolly of\nCloudBees asked\n\" So, You Want to Build the World’s Biggest Jenkins Cluster? \"\nand explained how to do so.  He started with\nreal world results realized by Jenkins users who have built large clusters.\nNext, he showed experiments around scaling some individual sub-components of Jenkins in\nisolation to see what challenges have been faced when integrated. Finally,\nhe arrived at recipes for building Jenkins clusters with different scaling capabilities and\nmaking existing Jenkins clusters more efficient.\n\nDownload Presentation\n\nStream Presentation\n\nBill Houston and\nAli Raza of\nSplunk\ngave a talk in two parts,\nJenkins at Splunk and Splunking Jenkins\nIn the first part, Bill showed how Splunk uses Jenkins to implement their end-to-end CI system.\nThey discussed features and design goals, challenges they encountered, and how they addressed\nthese challenges.\nIn the second part, Ali showed how to use the Jenkins Splunk plugin.  Using plugin, he gathered\ntest results and Jenkins environment data, and delivered it to a Splunk indexer for analysis and presentation.\n\nDownload Presentation\n\nStream Presentation\n\nDavid Hoover of\nGoogle talked about\nJenkins inside Google .\nLast year, they\npresented\ntheir initial investigations and stress testing as they\nprepared to deploy a large-scale Jenkins installation at Google. Now, with a\nyear of real-world use under their belts, they returned to present on how their\nexpectations held up, what new issues they encountered, how they have addressed those issues, and\nthe challenges and opportunities they see ahead.\n\nDownload Presentation\n\nStream Presentation","title":"Jenkins World 2016 Wrap-up - Scaling","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-09-29T00:00:00.000Z","id":"e21157bd-374b-5814-a345-a0163473ab62","slug":"/blog/2016/09/29/jenkins-world-2016-wrap-up-experts-demos/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nAs I mentioned in my\nprevious post,\nJenkins World brought together\nJenkins users from organizations of all sizes.  It also brought together Jenkins\nusers of all skill levels; from beginners to experts (including to JAM\norganizers, board members, and long time contributors).  A number\nof those experts also volunteered to staff the Open Source Hub’s\n\"Ask the Experts\" desk throughout the conference to answer Jenkins questions.\nThis included, but was not limited to:\nPaul Allen,\nR Tyler Croy,\nJames Dumay,\nJesse Glick,\nEddú Meléndez Gonzales,\nJon Hermansen,\nOwen Mehegan,\nOleg Nenashev,\nLiam Newman,\nChristopher Orr,\nCasey Vega,\nMark Waite,\nDean Yu,\nand\nKeith Zantow.\n\nI actually chose to spend the majority of my time at the booth. It was\nfantastic to hear all the different ways people are using\nJenkins and wanting use Jenkins to do even more. I answered dozens of questions\non both days of the conference, often learning new things in the process of answering them.\nAnd for questions that were beyond any one person’s knowledge, there was such a\nbreadth of expertise, very few questions were beyond our combined abilities.\n\nWhile \"Ask the Experts\" saw a lot traffic, the Open Source Hub’s lunch-time demos drew\nreally big crowds. They covered wide range of subjects in a quick succession and offered people\na chance to be introduced to new areas of in Jenkins without spending a whole session on them.\nSome demos were only presented at lunch while others were abbreviated versions of\nlonger talks presented at other times during the conference.  Here’s the full list with related links:\n\nKeith Zantow gave a live demo of\nBlue Ocean in Action on their\nlive Jenkins instance.\n\nChristopher Orr presented a lightning version of his talk\nPipelines for building and deploying Android apps\n( Slides)\n( video).\n\nOleg Nenashev showed a different way to\nmanage security with the\nOwnership plugin for Jenkins\n( Slides).\n\nAlex Somai presented his\nGoogle Summer of Code (GSoC) 2016 project, the\nExternal Workspace Manager plugin for Jenkins Pipeline ( GSOC Video).\n\nMark Waite discussed\nGit plugin - large repos, submodule authentication and more\n( Slides).\n\nLiam Newman gave a live demo of\nNotifications with Jenkins Pipeline\n(based on this blog post).\n\nJesse Glick talked about\nExtending Pipeline with Libraries using the\nPipeline Shared Groovy Libraries Plugin\n\nJon Hermansen demonstrated some cool ways to use\nMultibranch Pipelines + Git symbolic-ref to optimize build times.\n\nR Tyler Croy showed the power of\nDocker and Pipeline\n( Slides)\n\nR Tyler Croy also showed how easy it can be to migrate from\nFreestyle to Pipeline\n( Slides)\n\nCasey Vega gave a live demo,\npackage.json and Jenkins, on using package.json to control all aspects of Jenkins builds.\n\nAndrew Bayer presented at lightning version of his talk,\nA simpler way to define Jenkins Pipelines\n( Slides)\n( Video).\n\nThank you to everyone who staffed the booth and gave demos.\n\nAlso, thanks to everyone who attended the demos and came by to ask questions.\nIf you have more questions, you don’t have to wait until next year’s Jenkins World.\nJoin the\njenkinsci-users mailing list or the\n#jenkins IRC channel to\nget help from experts around the world.\n\nAnd finally, a special thanks to the Jenkins Events officer, Alyssa Tong,\nfor getting the entire booth designed, prepared, and keeping everything\non track before, during, and after the conference.","title":"Jenkins World 2016 Wrap-up - Ask the Experts & Demos","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-09-30T00:00:00.000Z","id":"868e7958-3c45-5b27-8d18-435c005e0771","slug":"/blog/2016/09/30/jenkins-world-2016-wrap-up-complete/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nThis year’s Jenkins World conference\nwas a huge milestone for the Jenkins project - the first global event for the Jenkins community.\nIt brought users and contributors together to exchange ideas on the current state\nof the project, celebrate accomplishments of the past year, and look ahead at all the exiting enhancements\ncoming down the pipe(line).\n\nContributor Summit\n\nTo kick off Jenkins World, we had a full day \"Contributor Summit\".\nJenkins is a distributed project with contributors from all over the globe.\nConferences like this are perfect time to get contributors together face-to-face,\nto talk through current issues and upcoming plans for the the project.\nSome key topics discussed during this summit were:\n\nInfrastructure - In the past year, the Jenkins project has moved new domain name,\na statically generated website, and has entered a\npartnership with Microsoft\nto host to host infrastructure on Azure.\n\nEvents - A year ago, there were five\nJenkins Area Meetups, today there are 37 around the\nworld, with ~7000 members.\n\nSecurity - Daniel Beck has done a great job a \"Security Officer\" for the project over the last year.\nJenkins 2 includes tighter security out of the box, 9 security alerts have been addressed, and the\nSecurity Team is continuing to evaluate threats as they are reported.\n\nPipeline - Pipeline has been a success and there many improvements on the way, including better\nPipeline Library support, a UI-based Pipeline Editor, and Declarative Pipeline syntax.\n\nBlue Ocean - Blue Ocean announced their \"1.0 Beta\" release and discussed their roadmap.\n\nStorage Pluggability - One of the big upcoming goals is reducing Jenkins'\ndependence on local file system storage on the server system\n(job configuration, build logs, etc.).  There was extensive\ndiscussion of how to accomplish this goal.\n\nKeynote: The State of Jenkins 2016\n\nThe next day,\nKohsuke gave a great\nkeynote,\nshowing how far the project as come this year and where it is headed.\nYou can get the slides\nhere\nor see the full video below.\n\nWhat’s Next?\n\nOverall, Jenkins World was a very enjoyable event. I’m sure everyone came away having\nlearned a lot and made many new connections.  I know I’m excited to see\nwhat the coming year brings for Jenkins and the Jenkins community.\n\nDon’t forget that there are many ways to continue\nto build connections to the rest of the Jenkins community throughout the year, such as the\nJenkins Online Meetup which\nhosts online events year-round.  Or, see if there is a\nJenkins Area Meetup (JAM) near you.  If\nthere isn’t, take a look at the\nJenkins Area Meetup page to see about starting one.\n\nThanks, and I hope to see you all and Jenkins World 2017!","title":"Jenkins World 2016, That's a Wrap!","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-10-16T00:00:00.000Z","id":"1b6c5cc3-a7d6-56f2-91fc-f717ed4f85fc","slug":"/blog/2016/10/16/stage-lock-milestone/","strippedHtml":"This is a guest post by Patrick Wolf,\nDirector of Product Management at CloudBees.\n\nRecently the Pipeline team began making several changes to improve the stage step and increase control of concurrent builds in Pipeline. Until now the stage step has been the catch-all for functionality related to the flow of builds through the Pipeline: grouping build steps into visualized stages, limiting concurrent builds, and discarding stale builds.\n\nIn order to improve upon each of these areas independently we decided to break this functionality into discrete steps rather than push more and more features into an already packed stage step.\n\nstage - the stage step remains but is now focused on grouping steps and providing boundaries for Pipeline segments.\n\nlock - the lock step throttles the number of concurrent builds in a defined section of the Pipeline.\n\nmilestone - the milestone step automatically discards builds that will finish out of order and become stale.\n\nSeparating these concerns into explicit, independent steps allows for much greater control of Pipelines and broadens the set of possible use cases.\n\nStage\n\nThe stage step is a primary building block in Pipeline, dividing the steps of a Pipeline into explicit units and helping to visualize the progress using the \"Stage View\" plugin or\"Blue Ocean\". Beginning with version 2.2 of \"Pipeline Stage Step\" plugin, the stage step now requires a block argument, wrapping all steps within the defined stage. This makes the boundaries of where each stage begins and ends obvious and predictable. In addition, the concurrency argument of stage has now been removed to make this step more concise; responsibility for concurrency control has been delegated to the lock step.\n\nstage('Build') {\n  doSomething()\n  sh \"echo $PATH\"\n}\n\nOmitting the block from stage and using the concurrency argument are now deprecated in Pipeline. Pipelines using this syntax will continue to function but will produce a warning in the console log:\n\nUsing the 'stage' step without a block argument is deprecated\n\nThis message is only a reminder to update your Pipeline scripts; none of your Pipelines will stop working. If we reach a point where the old syntax is to be removed we will make an announcement prior to the change. We do, however, recommend that you update your existing Pipelines to utilize the new syntax.\n\nnote: Stage View and Blue Ocean will both work with either the old stage syntax or the new.\n\nLock\n\nRather than attempt to limit the number of concurrent builds of a job using the stage, we now rely on the \"Lockable Resources\" plugin and the lock step to control this. The lock step limits concurrency to a single build and it provides much greater flexibility in designating where the concurrency is limited.\n\nlock can be used to constrain an entire stage or just a segment:\n\nstage('Build') {\n  doSomething()\n  lock('myResource') {\n    echo \"locked build\"\n  }\n}\n\nlock can be also used to wrap multiple stages into a single concurrency unit:\n\nlock('myResource') {\n  stage('Build') {\n    echo \"Building\"\n  }\n  stage('Test') {\n    echo \"Testing\"\n  }\n}\n\nMilestone\n\nThe milestone step is the last piece of the puzzle to replace functionality originally intended for stage and adds even more control for handling concurrent builds of a job. The lock step limits the number of builds running concurrently in a section of your Pipeline while the milestone step ensures that older builds of a job will not overwrite a newer build.\n\nConcurrent builds of the same job do not always run at the same rate. Depending on the network, the node used, compilation times, test times, etc. it is always possible for a newer build to complete faster than an older build. For example:\n\nBuild 1 is triggered\n\nBuild 2 is triggered\n\nBuild 2 builds faster than Build 1 and enters the Test stage sooner.\n\nRather than allowing Build 1 to continue and possibly overwrite the newer artifact produced in Build 2, you can use the milestone step to abort Build 1:\n\nstage('Build') {\n  milestone()\n  echo \"Building\"\n}\nstage('Test') {\n  milestone()\n  echo \"Testing\"\n}\n\nWhen using the input step or the lock step a backlog of concurrent builds can easily stack up, either waiting for user input or waiting for a resource to become free. The milestone step will automatically prune all older jobs that are waiting at these junctions.\n\nmilestone()\ninput message: \"Proceed?\"\nmilestone()\n\nBookending an input step like this allows you to select a specific build to proceed and automatically abort all antecedent builds.\n\nmilestone()\nlock(resource: 'myResource', inversePrecedence: true) {\n  echo \"locked step\"\n  milestone()\n}\n\nSimilarly a pair of milestone steps used with a lock will discard all old builds waiting for a shared resource. In this example, inversePrecedence: true instructs the lock to begin most recent waiting build first, ensuring that the most recent code takes precedence.\n\nPutting it all together\n\nEach of these steps can be used independently of the others to control one aspect of a Pipeline or they can be combined to provide powerful, fine-grained control of every aspect of multiple concurrent builds flowing through a Pipeline. Here is a very simple example utilizing all three:\n\nstage('Build') {\n  // The first milestone step starts tracking concurrent build order\n  milestone()\n  node {\n    echo \"Building\"\n  }\n}\n\n// This locked resource contains both Test stages as a single concurrency Unit.\n// Only 1 concurrent build is allowed to utilize the test resources at a time.\n// Newer builds are pulled off the queue first. When a build reaches the\n// milestone at the end of the lock, all jobs started prior to the current\n// build that are still waiting for the lock will be aborted\nlock(resource: 'myResource', inversePrecedence: true){\n  node('test') {\n    stage('Unit Tests') {\n      echo \"Unit Tests\"\n    }\n    stage('System Tests') {\n      echo \"System Tests\"\n    }\n  }\n  milestone()\n}\n\n// The Deploy stage does not limit concurrency but requires manual input\n// from a user. Several builds might reach this step waiting for input.\n// When a user promotes a specific build all preceding builds are aborted,\n// ensuring that the latest code is always deployed.\nstage('Deploy') {\n  input \"Deploy?\"\n  milestone()\n  node {\n    echo \"Deploying\"\n  }\n}\n\nFor a more complete and complex example utilizing all these steps in a Pipeline check out the Jenkinsfile provided with the Docker image for demonstrating Pipeline. This is a working demo that can be quickly set up and run.","title":"Controlling the Flow with Stage, Lock, and Milestone","tags":["pipeline","newfeatures"],"authors":[{"avatar":null,"blog":null,"github":"HRMPW","html":"","id":"hrmpw","irc":null,"linkedin":null,"name":"Patrick Wolf","slug":"/blog/authors/hrmpw/","twitter":"hrmpw"}]}},{"node":{"date":"2016-10-18T00:00:00.000Z","id":"225fd884-7b63-5638-9d0e-c7a57c82002b","slug":"/blog/2016/10/18/jenkins-world-2016-videos/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nThe videos of the sessions from\nJenkins World 2016 are up!\n\nI’ve updated the wrap-up posts with links to each of the sessions mentioned:\n\nJenkins Pipeline\n\nScaling Jenkins\n\nAsk the Experts & Demos\n\nYou can also find video from all the sessions\nhere.  Enjoy!","title":"Jenkins World 2016 Session Videos","tags":["event","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-10-31T00:00:00.000Z","id":"dcf580a2-8de4-526e-8237-399ee53b3b39","slug":"/blog/2016/10/31/xunit-reporting/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nThe\nJUnit plugin\nis the go-to test result reporter for many Jenkins projects,\nbut the it is not the only one available.  The\nxUnit plugin\nis a viable alternative that supports JUnit and many other test result file formats.\n\nIntroduction\n\nNo matter the project, you need to gather and report test results.\nJUnit is one of the most widely supported formats for recording test results.\nFor a scenarios where your tests are stable and your framework can produce JUnit output,\nthis makes the JUnit plugin ideal for reporting results in Jenkins.\nIt will consume results from a specified file or path, create a report,\nand if it finds test failures it will set the the job state to \"unstable\" or \"failed\".\n\nThere are also plenty of scenarios where the JUnit plugin is not enough.\nIf your project has some failing tests that will take some time to fix,\nor if there are some flaky tests,\nthe JUnit plugin’s simplistic view of test failures may be difficult to work with.\n\nNo problem, the Jenkins plugin model lets us replace the JUnit\nplugin functionality with similar\nfunctionality from another plugin and Jenkins Pipeline lets us do this in safe\nstepwise fashion where we can test and debug each of our changes.\n\nIn this article, I will show you how to replace the JUnit plugin with the\nxUnit plugin in Pipeline code to address a few common test reporting scenarios.\n\nInitial Setup\n\nI’m going to use the \"JS-Nightwatch.js\" sample project from my\nprevious post to demonstrate a couple\ncommon scenarios that the xUnit handles better.\nI already have the latest\nJUnit plugin\nand\nxUnit plugin\ninstalled on my Jenkins server.\n\nI’ll be keeping my changes in\nlink: my fork\nof the \"JS-Nightwatch.js\" sample project on GitHub, under the\n\" blog/xunit\" branch.\n\nHere’s what the Jenkinsfile looked like at the end of that previous post and what\nthe report page looks like after a few runs:\n\nJenkinsfile\n\nnode {\n    stage \"Build\"\n    checkout scm\n\n    // Install dependencies\n    sh 'npm install'\n\n    stage \"Test\"\n    // Add sauce credentials\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n        // Start sauce connect\n        sauceconnect(options: '', useGeneratedTunnelIdentifier: false, verboseLogging: false) {\n\n            // List of browser configs we'll be testing against.\n            def platform_configs = [\n                'chrome',\n                'firefox',\n                'ie',\n                'edge'\n            ].join(',')\n\n            // Nightwatch.js supports color ouput, so wrap this step for ansi color\n            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {\n                // Run selenium tests using Nightwatch.js\n                // Ignore error codes. The junit publisher will cover setting build status.\n                sh \"./node_modules/.bin/nightwatch -e ${platform_configs} || true\"\n            }\n\n            junit 'reports/**'\n\n            step([$class: 'SauceOnDemandTestPublisher'])\n        }\n    }\n}\n\nSwitching from JUnit to xUnit\n\nI’ll start by replacing JUnit with xUnit in my pipeline.\nI use the Snippet Generator to create the step with the right parameters.\nThe main downside of using the xUnit plugin is that while it is Pipeline compatible,\nit still uses the more verbose step() syntax and has some very rough edges around that, too.\nI’ve filed\nJENKINS-37611\nbut in the meanwhile, we’ll work with what we have.\n\n// Original JUnit step\njunit 'reports/**'\n\n// Equivalent xUnit step - generated (reformatted)\nstep([$class: 'XUnitBuilder', testTimeMargin: '3000', thresholdMode: 1,\n    thresholds: [\n        [$class: 'FailedThreshold', failureNewThreshold: '', failureThreshold: '', unstableNewThreshold: '', unstableThreshold: '1'],\n        [$class: 'SkippedThreshold', failureNewThreshold: '', failureThreshold: '', unstableNewThreshold: '', unstableThreshold: '']],\n    tools: [\n        [$class: 'JUnitType', deleteOutputFiles: false, failIfNotNew: false, pattern: 'reports/**', skipNoTestFiles: false, stopProcessingIfError: true]]\n    ])\n\n// Equivalent xUnit step - cleaned\nstep([$class: 'XUnitBuilder',\n    thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],\n    tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\nIf I replace the junit step in my Jenkinsfile with that last step above,\nit produces a report and job result identical to the JUnit plugin but using the xUnit plugin.  Easy!\n\nnode {\n    stage \"Build\"\n    // ... snip ...\n\n    stage \"Test\"\n    // Add sauce credentials\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n        // Start sauce connect\n        sauceconnect(options: '', useGeneratedTunnelIdentifier: false, verboseLogging: false) {\n\n            // ... snip ...\n\n            // junit 'reports/**'\n            step([$class: 'XUnitBuilder',\n                thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],\n                tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\n            // ... snip ...\n        }\n    }\n}\n\nAccept a Baseline\n\nMost projects don’t start off with automated tests passing or even running.\nThey start with a people hacking and prototyping, and eventually they start to write tests.\nAs new tests are written, having tests checked-in, running, and failing can be valuable information.\nWith the xUnit plugin we can accept a baseline of failed cases and drive that number down over time.\n\nI’ll start by changing the Jenkinsfile to fail jobs only if the number of failures is greater than an expected baseline,\nin this case four failures. When I run the job with this change, the reported numbers remain the same, but the job passes.\n\nJenkinsfile\n\n// The rest of the Jenkinsfile is unchanged.\n// Only the xUnit step() call is modified.\nstep([$class: 'XUnitBuilder',\n    thresholds: [[$class: 'FailedThreshold', failureThreshold: '4']],\n    tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\nNext, I can also check that the plugin reports the job as failed if more failures occur.\nSince this is sample code, I’ll do this by adding another failing test and checking the job\nreports as failed.\n\ntests/guineaPig.js\n\n// ... snip ...\n\n    'Guinea Pig Assert Title 0 - D': function(client) { /* ... */ },\n\n    'Guinea Pig Assert Title 0 - E': function(client) {\n        client\n            .url('https://saucelabs.com/test/guinea-pig')\n            .waitForElementVisible('body', 1000)\n            //.assert.title('I am a page title - Sauce Labs');\n            .assert.title('I am a page title - Sauce Labs - Cause a Failure');\n    },\n\n    afterEach: function(client, done) { /* ... */ }\n\n// ... snip ...\n\nIn a real project, we’d make fixes over a number of commits bringing the number of failures down and adjusting our baseline.\nSince this is a sample, I’ll just make all tests pass and set the job failure threshold for failed and skipped cases to zero.\n\nJenkinsfile\n\n// The rest of the Jenkinsfile is unchanged.\n// Only the xUnit step() call is modified.\nstep([$class: 'XUnitBuilder',\n    thresholds: [\n        [$class: 'SkippedThreshold', failureThreshold: '0'],\n        [$class: 'FailedThreshold', failureThreshold: '0']],\n    tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\ntests/guineaPig.js\n\n// ... snip ...\n\n    'Guinea Pig Assert Title 0 - D': function(client) { /* ... */ },\n\n    'Guinea Pig Assert Title 0 - E': function(client) {\n        client\n            .url('https://saucelabs.com/test/guinea-pig')\n            .waitForElementVisible('body', 1000)\n            .assert.title('I am a page title - Sauce Labs');\n    },\n\n    afterEach: function(client, done) { /* ... */ }\n\n// ... snip ...\n\ntests/guineaPig_1.js\n\n// ... snip ...\n\n    'Guinea Pig Assert Title 1 - A': function(client) {\n        client\n            .url('https://saucelabs.com/test/guinea-pig')\n            .waitForElementVisible('body', 1000)\n            .assert.title('I am a page title - Sauce Labs');\n    },\n\n// ... snip ...\n\nAllow for Flakiness\n\nWe’ve all known the frustration of having one flaky test that fails once every ten jobs.\nYou want to keep it active so you can working isolating the source of the problem,\nbut you also don’t want to destablize your CI pipeline or reject commits that are actually okay.\nYou could move the test to a separate job that runs the \"flaky\" tests,\nbut in my experience that just leads to a job that is always in a failed state\nand a pile of flaky tests no one looks at.\n\nWith the xUnit plugin, we can keep the this flaky test in main test suite but allow\nthe our job to still pass.\n\nI’ll start by adding a sample flaky test.  After a few runs, we can see the test\nfails intermittently and causes the job to fail too.\n\ntests/guineaPigFlaky.js\n\n// New test file: tests/guineaPigFlaky.js\nvar https = require('https');\nvar SauceLabs = require(\"saucelabs\");\n\nmodule.exports = {\n\n    '@tags': ['guineaPig'],\n\n    'Guinea Pig Flaky Assert Title 0': function(client) {\n        var expectedTitle = 'I am a page title - Sauce Labs';\n        // Fail every fifth minute\n        if (Math.floor(Date.now() / (1000 * 60)) % 5 === 0) {\n            expectedTitle += \" - Cause failure\";\n        }\n\n        client\n            .url('https://saucelabs.com/test/guinea-pig')\n            .waitForElementVisible('body', 1000)\n            .assert.title(expectedTitle);\n    }\n\n    afterEach: function(client, done) {\n        client.customSauceEnd();\n\n        setTimeout(function() {\n            done();\n        }, 1000);\n\n    }\n\n};\n\nI can almost hear my teammates screaming in frustration just looking at this report.\nTo allow specific tests to be unstable but not others,\nI’m going to add a guard \"suite completed\" test to the suites that should be stable,\nand keep flaky test on it’s own.\nThen I’ll tell xUnit to allow for a number of failed tests, but no skipped ones.\nIf any test fails other than the ones I allow to be flaky,\nit will also result in one or more skipped tests and will fail the build.\n\n// The rest of the Jenkinsfile is unchanged.\n// Only the xUnit step() call is modified.\nstep([$class: 'XUnitBuilder',\n    thresholds: [\n        [$class: 'SkippedThreshold', failureThreshold: '0'],\n        // Allow for a significant number of failures\n        // Keeping this threshold so that overwhelming failures are guaranteed\n        //     to still fail the build\n        [$class: 'FailedThreshold', failureThreshold: '10']],\n    tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\ntests/guineaPig.js\n\n// ... snip ...\n\n    'Guinea Pig Assert Title 0 - E': function(client) { /* ... */ },\n\n    'Guinea Pig Assert Title 0 - Suite Completed': function(client) {\n      // No assertion needed\n    },\n\n    afterEach: function(client, done) { /* ... */ }\n\n// ... snip ...\n\ntests/guineaPig_1.js\n\n// ... snip ...\n\n    'Guinea Pig Assert Title 1 - E': function(client) { /* ... */ },\n\n    'Guinea Pig Assert Title 1 - Suite Completed': function(client) {\n      // No assertion needed\n    },\n\n    afterEach: function(client, done) { /* ... */ }\n\n// ... snip ...\n\nAfter a few more runs, you can see the flaky test is still being flaky,\nbut it is no longer failing the build.  Meanwhile, if another test fails,\nit will cause the \"suite completed\" test to be skipped, failing the job.\nIf this were a real project, the test owner could instrument and eventually fix\nthe test.  When they were confident they had stabilized the test the could add\na \"suite completed\" test after it to enforce it passing without changes to other\ntests or framework.\n\nConclusion\n\nThis post has shown how to migrate from the JUnit plugin to the\nxUnit plugin on an existing project in Jenkins pipeline.  It also covered how to\nuse the features of xUnit plugin to get more meaningful and effective Jenkins\nreporting behavior.\n\nWhat I didn’t show was how many other formats xUnit supports - from CCPUnit to MSTest.  You can\nalso write your own XSL for result formats not on the known/supported list.\n\nLinks\n\nxUnit plugin\n\nbitwiseman/JS-Nightwatch.js\n\nsaucelabs-sample-test-frameworks","title":"xUnit and Pipeline","tags":["pipeline","plugins","xunit","nightwatch"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2016-11-11T00:00:00.000Z","id":"d2259d49-39ab-5a56-8c40-0a3cf8acbdc4","slug":"/blog/2016/11/11/monthly-jam-recap-october/","strippedHtml":"October has proven to be a busy month within the Jenkins Area Meetup groups.\nBelow is a recap of topics discussed at various JAMS in the month of October.\n\nDallas Forth Worth, Texas (DFW) JAM\n\nJames Dumay\ntook time out of his vacation to present Blue Ocean, a project that rethinks\nthe user experience of Jenkins, modeling and presenting the process of software\ndelivery by surfacing information that is important to development teams with\nas few clicks as possible, while still staying true to the extensibility that\nJenkins always has had as a core value.\n\nSee recording HERE.\n\nSan Francisco, CA JAM\n\nAndrey Falko from Salesforce shared how he and his Diagnostics team used\nJenkins to deliver software securely and reliably to production within\nSalesforce.\n\nSee videos HERE and\nHERE.\n\nBoulder, CO JAM\n\nThis was a meetup with CA Technologies and included\nMark Waite, maintainer of the Jenkins git plugin\nand a director at CA Technologies in Fort Collins.\nTyler did a great presentation about Jenkins\nPipeline and Blue Ocean and showed off how the community is using Blue Ocean to\nbuild Jenkins.\n\nBarcelona, Spain JAM\n\nAt this meetup, there were plenty of engaging discussions surrounding the\nJenkins Certification and DevOps 2.1 Toolkit: Continuous Deployment with\nJenkins and Docker Swarm.  Guillem Sola shared his Jenkins certification\nexperience HERE while Viktor\nFarcic presented his thoughts on the aspects of building, testing, deploying,\nand monitoring services inside Docker Swarm clusters and Jenkins\nhttps://www.youtube.com/watch?v=fs1ED_y5mUc.\n\nLima, Peru JAM\n\nOctober’s meetup was a joint effort with collaboration from Perú JUG, and\nDocker Lima. The first talk was an Introduction to\nDocker Ecosystem, second was\nBuilding and Testing Apps with Docker and\nArquillian Cube\nand the last one was\nCI/CD using Docker and Jenkins Pipelines.\n\nWe had a full house at the meetup. Now, everyone in the room has a Mr. Jenkins\nbranded on their laptop :)\n\nSpecial thanks to Mario Inga and\nHéctor Paz for their collaborations during the\nlast meetups.\n\nLinks\n\nStart a JAM in your city if there isn’t one already.\n\nBecome a JAM member.\n\nBecome an online JAM member\n\nBe a JAM speaker or sponsor. Let us know jenkinsci-jam@googlegroups.com\n\nBecome a Jenkins project contributor","title":"Monthly JAM Recap - October 2016","tags":["event","JAM","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-11-12T00:00:00.000Z","id":"8957e4ed-d485-505d-a0dd-5f3eaa1932fe","slug":"/blog/2016/11/12/addressing-remote-vulnerabilities-in-cli/","strippedHtml":"The Jenkins\nsecurity team\nhas been made aware of a new attack vector for a remote code execution\nvulnerability in the\nJenkins CLI,\naccording to\nthis\nadvisory\nby Daniel Beck:\n\nWe have received a report of a possible unauthenticated remote code execution\nvulnerability in Jenkins (all versions).\n\nWe strongly advise anyone running a Jenkins instance on a public network\ndisable the CLI for now.\n\nAs this uses the same attack vector as SECURITY-218, you can reuse the script\nand instructions published in this repository: https://github.com/jenkinsci-cert/SECURITY-218\n\nWe have since been able to confirm the vulnerability and strongly recommend\nthat everyone follow the instructions in the linked repository.\n\nAs Daniel mentions in the security advisory, the advised mitigation strategy is\nto disable the CLI subsystem via\nthis\nGroovy script.\nIf you are a Jenkins administrator, navigate to the 'Manage Jenkins' page and\nclick on the 'Script Console', which will allow you to run the Groovy script to\nimmediately disable the CLI.\n\nIn order to persist this change across restarts of your Jenkins controller, place\nthe\nGroovy script\nin $JENKINS_HOME/init.groovy.d/cli-shutdown.groovy so that Jenkins executes\nthe script on each boot.\n\nWe are expecting to have a fix implemented, tested and included in an updated\nweekly and LTS release this upcoming Wednesday, November 16th.\n\nFor users who are operating Jenkins on public, or otherwise hostile, networks,\nwe suggest hosting Jenkins behind reverse proxies such as Apache or Nginx.\nThese can help provide an additional layer of security, when used appropriately,\nto cordon off certain URLs such as /cli.\n\nAdditionally, we strongly recommend that all Jenkins administrators subscribe\nto the\njenkinsci-advisories@googlegroups.com\nmailing list to receive future advisories.\n\nThe Jenkins project has a responsible disclosure policy, which we strongly\nencourage anybody who believes they have discovered a potential vulnerability\nto follow. You can learn more about this policy and our processes on our\nsecurity page.","title":"Addressing recently disclosed vulnerabilities in the Jenkins CLI","tags":["security","lts"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2016-11-13T00:00:00.000Z","id":"b71d7a97-ee04-57a0-8fc9-5e55b98bc3bf","slug":"/blog/2016/11/13/november-jenkins-events/","strippedHtml":"November is packed full of meetups and events. If you are in any of the areas\nbelow please stop by to say \"Hi\" and talk Jenkins over beer.\n\nNorth America\n\nNovember 15 | SF JAM: Let’s Talk CI/CD and DevOps with ClusterHQ and Jenkins\n\nNovember 15 | DC JAM: Jenkins and Fannie Mae\n\nNovember 30 | Albuquerque JAM: Learn About Blue Ocean\n\nNovember 30 | Guadalajara JAM: Jenkins Install and Setup\n\nEurope\n\nNovember 10 | Amsterdam JAM: Jenkins and Docker - Multiple Uses for Containers and Jenkins\n\nNovember 10 | Milano JAM: Meet and Greet\n\nAustralia\n\nNovember 15 | Melbourne JAM: Blue Ocean - A New User Experience\n\nAsia\n\nNovember 17 | Singapore JAM: CI Using Source Code on GitHub\n\nLinks\n\nStart a JAM in your city if there isn’t one already.\n\nBecome a JAM member\n\nBecome an online JAM member\n\nSpeak or sponsor at a JAM. Contact us at jenkinsci-jam@googlegroups.com\n\nBecome a Jenkins project contributor","title":"Upcoming November Jenkins Events","tags":["events","jam"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-11-16T00:00:00.000Z","id":"98cc175a-5e42-541a-a6b0-25f3c783cc80","slug":"/blog/2016/11/16/security-updates-addressing-zero-day/","strippedHtml":"A zero-day vulnerability in Jenkins was published on Friday, November 11.  Last\nweek\nwe provided an immediate mitigation\nand today we are releasing updates to Jenkins which fix the vulnerability. We\nstrongly recommend you update Jenkins to 2.32 (main line) or 2.19.3 (LTS) as\nsoon as possible.\n\nToday’s\nsecurity advisory\ncontains more information on the exploit, affected versions, and fixed\nversions, but in short:\n\nAn unauthenticated remote code execution vulnerability allowed attackers to\ntransfer a serialized Java object to the Jenkins CLI, making Jenkins connect to\nan attacker-controlled LDAP server, which in turn can send a serialized payload\nleading to code execution, bypassing existing protection mechanisms.\n\nMoving forward, the Jenkins security team is revisiting the design of the\nJenkins CLI over the coming weeks to prevent this class of vulnerability in the\nfuture. If you are interested in participating in that discussion, please join\nin on the\njenkinsci-dev@\nmailing list.\n\nThe Jenkins project encourages administrators to subscribe to the\njenkinsci-advisories@\nmailing list to receive future Jenkins security notifications.","title":"Security updates addressing zero day vulnerability","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2016-11-21T00:00:00.000Z","id":"bf6fcc51-7017-5159-91de-3d955a72998d","slug":"/blog/2016/11/21/gc-tuning/","strippedHtml":"This is a\ncross\npost by Sam Van Oort, Software Engineer at\nCloudBees and contributor to the Jenkins project.\n\nToday I’m going to show you how easy it is to tune Jenkins Java settings to\nmake your controllers more responsive and stable, especially with large heap sizes.\n\nThe Magic Settings:\n\nBasics: -server -XX:+AlwaysPreTouch\n\nGC Logging: -Xloggc:$JENKINS_HOME/gc-%t.log -XX:NumberOfGCLogFiles=5 -XX:+UseGCLogFileRotation -XX:GCLogFileSize=20m -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCCause -XX:+PrintTenuringDistribution -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy\n\nG1 GC settings: -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1\n\nHeap settings: set your minimum heap size ( -Xms) to at least 1/2 of your maximum size ( -Xmx).\n\nNow, let’s look at where those came from!  We’re going to focus on garbage\ncollection (GC) here and dig fast and deep to strike for gold; if you’re not\nfamiliar with GC fundamentals\ntake a look at this source.\n\nBecause performance tuning is data driven, I’m going to use real-world data\nselected three very large Jenkins instances that I help support.\n\nWhat we’re not going to do: Jenkins basics, or play with max heap.  See the\nsection \"what should I do before tuning.\"  This is for cases where we really\ndo need a big heap and can’t easily split our Jenkins controllers into smaller\nones.\n\nThe Problem: Hangups\n\nSymptom: Users report that the Jenkins instance periodically hangs, taking\nseveral seconds to handle normally fast requests.  We may even see lockups or\ntimeouts from systems communicating with the Jenkins controller (build agents,\netc).  In long periods of heavy load, users may report Jenkins running slowly.\nApplication monitoring shows that during lockups all or most of the CPU cores\nare fully loaded, but there’s not enough activity to justify it.  Process and\nJStack dumps will reveal that the most active Java threads are doing garbage\ncollection.\n\nWith Instance A, they had this problem.  Their Jenkins Java arguments are very\nclose to the default, aside from sizing the heap:\n\n24 GB max heap, 4 GB initial, default GC settings (ParallelGC)\n\nA few flags set (some coming in as defaults): -XX:-BytecodeVerificationLocal -XX:-BytecodeVerificationRemote -XX:+ReduceSignalUsage -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation\n\nAfter enabling garbage collection (GC) logging we see the following rough stats:\n\n.\n\nDiving deeper, we get this chart of GC pause durations:\n\nKey stats:\n\nThroughput: 99.64%  (percent of time spent executing application code, not doing garbage collection)\n\nAverage GC time: 348 ms (ugh!)\n\nGC cycles over 2 seconds: 36 (2.7%)\n\nMinor/Full GC average time: 263 ms / 2.803 sec\n\nObject creation & promotion rate: 42.4 MB/s & 1.99 MB/s\n\nExplanations:\n\nAs you can see, young GC cycles very quickly clear away freshly-created\ngarbage, but the deeper old-gen GC cycles run very slowly: 2-4 seconds. This is\nwhere our problems happen.  The default Java garbage collection algorithm\n(ParallelGC) pauses everything when it has to collect garbage (often called a\n\"stop the world pause\"). During that period, Jenkins is fully halted: normally\n(with small heaps) these pauses are too brief to be an issue.  With heaps of 4\nGB or larger, the time required becomes long enough to be a problem: several\nseconds over short windows, and over a longer interval you occasionally see\nmuch longer pauses (tens of seconds, or minutes.)\n\nThis is where the user-visible hangs and lock-ups happen.  It also adds\nsignificant latency to those build/deploy tasks.  In periods of heavy load, the\nsystem was even experiencing hangs of 30+ seconds for a single full GC cycle.\nThis was long enough to trigger network timeouts (or internal Jenkins thread\ntimeouts) and cause even larger problems.\n\nFortunately there’s a solution: the concurrent low-pause garbage collection\nalgorithms, Concurrent Mark Sweep (CMS) and Garbage First (G1). These attempt\nto do much of the garbage collection concurrently with application threads,\nresulting in much shorter pauses (at a slight cost in extra CPU use).  We’re\ngoing to focus on G1, because it is slated to become the default in Java 9 and\nis the official recommendation for large heap sizes.\n\nLet’s see what happens when someone uses G1 on a similarly-sized Jenkins\ncontroller with Instance B (17 GB heap):\n\nTheir settings:\n\n16 GB max heap, 0.5 GB initial size\n\nJava flags (mostly defaults, except for G1): -XX:+UseG1GC -XX:+UseCompressedClassPointers -XX:+UseCompressedOops\n\nAnd the GC log analysis:\n\nKey stats:\n\nThroughput: 98.76%  (not great, but still only slowing things down a bit)\n\nAverage GC time: 128 ms\n\nGC cycles over 2 seconds: 11, 0.27%\n\nMinor/Full GC average time: 122 ms / 1 sec 232 ms\n\nObject creation & promotion rate: 132.53 MB/s & 522 KB/s\n\nOkay, much better : some improvement may be expected from a 30% smaller\nheap, but not as much as we’ve seen.  Most of the GC pauses are well\nunder 2 seconds, but we have 11 outliers - long Full GC pauses of 2-12 seconds.\nThose are troubling; we’ll take a deeper dive into their causes in a second.\nFirst, let’s look at the big picture and at how Jenkins behaves with G1 GC for\na second instance.\n\nG1 Garbage Collection with Instance C (24 GB heap):\n\nTheir settings:\n\n24 GB max heap, 24 GB initial heap, 2 GB max metaspace\n\nSome custom flags: `-XX:+UseG1GC -XX:+AlwaysPreTouch -XX:+UseStringDeduplication  -XX:+UseCompressedClassPointers -XX:+UseCompressedOops `\n\nClearly they’ve done some garbage collection tuning and optimization.  The\nAlwaysPreTouch pre-zeros allocated heap pages, rather than waiting until\nthey’re first used. This is suggested especially for large heap sizes, because\nit trades slightly slower startup times for improved runtime performance.  Note\nalso that they pre-allocated the whole heap.  This is a common optimization.\n\nThey also enabled StringDeduplication, a G1 option introduced in Java 8 Update\n20 that transparently replaces identical character arrays with pointers to the\noriginal, reducing memory use (and improving cache performance).  Think of it\nlike String.intern() but it silently happens during garbage collection.  This\nis a concurrent operation added on to normal GC cycles, so it doesn’t pause the\napplication.  We’ll look at its impacts later.\n\nLooking at the basics:\n\nSimilar picture to Instance B, but it’s hidden by the sheer number of points\n(this is a longer period here, 1 month).  Those same occasional Full GC\noutliers are present!\n\nKey stats:\n\nThroughput: 99.93%\n\nAverage GC time: 127 ms\n\nGC cycles over 2 seconds: 235 (1.56%)\n\nMinor/Full GC average time: 56 ms / 3.97 sec\n\nObject creation & promotion rate: 34.06 MB/s & 286 kb/s\n\nOverall fairly similar to Instance B: ~100 ms GC cycles, all the minor GC\ncycles are very fast.  Object promotion rates sound similar.\n\nRemember those random long pauses?\n\nLet’s find out what caused them and how to get rid of them.  Instance B had 11\nsuper-long pause outliers.  Let’s get some more detail, by opening GC Logs in\nGCViewer.\nThis tool gives a tremendous amount of information.  Too much, in fact —  I\nprefer to use\nGCEasy.io\nexcept where needed.  Since GC logs do not contain compromising information\n(unlike heap dumps or some stack traces), web apps are a great tool for\nanalysis.\n\nWhat we care about are at the Full GC times in the middle (highlighted).  See\nhow much longer they are vs. the young and concurrent GC cycles up top (2\nseconds or less)?\n\nNow, I lied a bit earlier - sorry!  For concurrent garbage collectors, there\nare actually 3 modes: young GC, concurrent GC, and full GC.  Concurrent GC\nreplaces the Full GC mode in Parallel GC with a faster concurrent operation\nthat runs in parallel with the application.  But in a few cases, we are\nforced to fall back to a non-concurrent Full GC operation, which will use the\nserial  (single-threaded) garbage collector.  That means that even if we have\n30+ CPU cores, only one is working. This is what is happening here, and on a\nlarge-heap, multicore system it is S  L  O  W.  How slow?  280 MB/s vs. 12487\nMB/s for Instance B (for instance C, the difference is also about 50:1).\n\nWhat triggers a full GC instead of concurrent:\n\nExplicit calls to System.gc() (most common culprit, often tricky to trace down)\n\nMetadata GC Threshold: Metaspace (used for Class data mostly) has hit the\ndefined size to force garbage collection or increase it.  Documentation is\nterrible for this,\nStack Overflow\nwill be your friend.\n\nConcurrent mode failure: concurrent GC can’t complete fast enough to keep up\nwith objects the application is creating (there are JVM arguments to trigger\nconcurrent GC earlier)\n\nHow do we fix this?\n\nFor explicit GC:\n\n-XX:+DisableExplicitGC will turn off Full GC triggered by System.gc().  Often set in production, but the below option is safer.\n\nWe can trigger a concurrent GC in place of a full one with -XX:+ExplicitGCInvokesConcurrent - this will take the explicit call as a hint to do deeper cleanup, but with less performance cost.\n\nGotcha for people who’ve used CMS: if you have used CMS in the past, you\nmay have used the option -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses — which does what it says.  This option will silently fail in G1, meaning you\nstill see the very long pauses from Full GC cycles as if it wasn’t set (no\nwarning is generated).  I have logged a JVM bug for this issue.\n\nFor the Metadata GC threshold:\n\nIncrease your initial metaspace to the final amount to avoid resizing. For example: -XX:MetaspaceSize=500M\n\nInstance C also suffered the same problem with explicit GC calls, with almost\nall our outliers accounted for (230 out of 235) by slow, nonconcurrent Full GC\ncycles (all from explicit System.gc() calls, since they tuned metaspace):\n\nHere’s what GC pause durations look like if we remove the log entries for the\nexplicit System.gc() calls, assuming that they’ll blend in with the other\nconcurrent GC pauses (not 100% accurate, but a good approximation):\n\nInstance B:\n\nThe few long Full GC cycles at the start are from metaspace expansion — they\ncan be removed by increasing initial Metaspace size, as noted above. The\nspikes?  That’s when we’re about to resize the Java heap, and memory pressure\nis high. You can avoid this by setting the minimum/initial heap to at least\nhalf of the maximum, to limit resizing.\n\nStats:\n\nThroughput: 98.93%\n\nAverage GC time: 111 ms\n\nGC cycles over 2 seconds: 3\n\nMinor & Full or concurrent GC average time: 122 ms / 25 ms (yes, faster than minor!)\n\nObject creation & promotion rate: 132.07 MB/s & 522 kB/s\n\nInstance C:\n\nStats:\n\nThroughput: 99.97%\n\nAverage GC time: 56 ms\n\nGC cycles over 2 seconds: 0 (!!!)\n\nMinor & Full or concurrent GC average time: 56 ms & 10 ms (yes, faster than minor!)\n\nObject creation & promotion rate: 33.31 MB/s & 286 kB/s\n\nSide point: GCViewer is claiming GC performance of 128 GB/s (not unreasonable, we clear ~10 GB of young generation in under 100 ms usually)\n\nOkay, so we’ve tamed the long worst-case pauses!\n\nBut What About Those Long Minor GC Pauses We Saw?\n\nOkay, now we’re in the home stretch!  We’ve tamed the old-generation GC pauses\nwith concurrent collection, but what about those longer young-generation\npauses?  Lets look at stats for the different phases and causes again in\nGCViewer.\n\nHighlighted in yellow we see the culprit: the remark phase of G1 garbage\ncollection. This stop-the-world phase ensures we’ve identified all live\nobjects, and process references (\nmore info).\n\nLet’s look at a sample execution to get more info:\n\n2016-09-07T15:28:33.104+0000: 26230.652: [GC remark 26230.652: [GC ref-proc, 1.7204585 secs], 1.7440552 secs]\n\n [Times: user=1.78 sys=0.03, real=1.75 secs]\n\nThis turns out to be typical for the GC log: the longest pauses are spent in\nreference processing. This is not surprising because Jenkins internally uses\nreferences heavily for caching, especially weak references, and the default\nreference processing algorithm is single-threaded.  Note that user (CPU) time\nmatches real time, and it would be higher if we were using multiple cores.\n\nSo, we add the GC flag -XX:+ParallelRefProcEnabled which enables us to use the multiple cores more effectively.\n\nTuning young-generation GC further based on Instance C:\n\nBack to GCViewer we go, to see what’s time consuming with the GC for Instance C.\n\nThat’s good, because most of the time is just sweeping out the trash\n(evacuation pause).  But the 1.8 second pause looks odd.  Let’s look at the raw\nGC log for the longest pause:\n\n2016-09-24T16:31:27.738-0700: 106414.347: [GC pause (G1 Evacuation Pause) (young), 1.8203527 secs]\n[Parallel Time: 1796.4 ms, GC Workers: 8]\n [GC Worker Start (ms): Min: 106414348.2, Avg: 106414348.3, Max: 106414348.6, Diff: 0.4]\n[Ext Root Scanning (ms): Min: 0.3, Avg: 1.7, Max: 5.7, Diff: 5.4, Sum: 14.0]\n  [Update RS (ms): Min: 0.0, Avg: 7.0, Max: 19.6, Diff: 19.6, Sum: 55.9]\n    [Processed Buffers: Min: 0, Avg: 45.1, Max: 146, Diff: 146, Sum: 361]\n [Scan RS (ms): Min: 0.2, Avg: 0.4, Max: 0.7, Diff: 0.6, Sum: 3.5]\n [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.2]\n [Object Copy (ms): Min: 1767.1, Avg: 1784.4, Max: 1792.6, Diff: 25.5, Sum: 14275.2]\n [Termination (ms): Min: 0.3, Avg: 2.4, Max: 3.5, Diff: 3.2, Sum: 19.3]\n    [Termination Attempts: Min: 11, Avg: 142.5, Max: 294, Diff: 283, Sum: 1140]\n [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.4, Diff: 0.3, Sum: 0.8]\n [GC Worker Total (ms): Min: 1795.9, Avg: 1796.1, Max: 1796.2, Diff: 0.3, Sum: 14368.9]\n [GC Worker End (ms): Min: 106416144.4, Avg: 106416144.5, Max: 106416144.5, Diff: 0.1]\n\n…​oh, well dang. Almost the entire time (1.792 s out of 1.820) is walking\nthrough the live objects and copying them.  And wait, what about this line,\nshowing the summary statistics:\n\nEden: 13.0G(13.0G)->0.0B(288.0M) Survivors: 1000.0M->936.0M Heap: 20.6G(24.0G)->7965.2M(24.0G)]\n\nGood grief, we flushed out 13 GB (!!!) of freshly-allocated garbage in one\nswoop and compacted the leftovers!  No wonder it was so slow.  I wonder how we\naccumulated so much…​\n\nOh, right…​ we set up for 24 GB of heap initially, and each minor GC clears\nmost of the young generation.  Okay, so we’ve set aside tons of space for trash\nto collect, which means longer but less frequent GC periods.  This also gets\nthe best performance from Jenkins memory caches which are using WeakReferences\n(survives until collected by GC) and SoftReferences (more long-lived). Those\ncaches boost performance a lot.\n\nWe could take actions to prevent those rare longer pauses. The best ways are to\nlimit total heap size or reduce the value of -XX:MaxGCPauseMillis=200 from\nits default (200).  A more advanced way (if those don’t help enough) is to\nexplicitly set the maximum size of the young generation smaller (say\n-XX:G1MaxNewSizePercent=45 instead of the default of 60).  We could also\nthrow more CPUs at the problem.\n\nBut if we look up, most pauses are around 100 ms (200 ms is the default value\nfor MaxGCPauseMillis).  For Jenkins on this hardware, this appears to work\njust fine and a rare longer pause is OK as long as they don’t get too\nbig.  Also remember, if this happens often, G1 GC will try to autotune for\nlower pauses and more predictable performance.\n\nA Few Final Settings\n\nWe mentioned StringDeduplication was on with Instance C, what is the impact?\nThis only triggers on Strings that have survived a few generations (most of our\ngarbage does not), has limits on the CPU time it can use, and replaces\nduplicate references to their immutable backing character arrays.\nFor more info, look here.\nSo, we should be trading a little CPU time for improved memory efficiently\n(similarly to string interning).\n\nAt the beginning, this has a huge impact:\n\n[GC concurrent-string-deduplication, 375.3K->222.5K(152.8K), avg 63.0%, 0.0     024966 secs]\n[GC concurrent-string-deduplication, 4178.8K->965.5K(3213.2K), avg 65.3%, 0     .0272168 secs]\n[GC concurrent-string-deduplication, 36.1M->9702.6K(26.6M), avg 70.3%, 0.09     65196 secs]\n[GC concurrent-string-deduplication, 4895.2K->394.9K(4500.3K), avg 71.9%, 0     .0114704 secs]\n\nThis peaks at an average of about ~90%:\n\nAfter running for a month, less of an impact - many of the strings that can be\ndeduplicated already are:\n\n[GC concurrent-string-deduplication, 138.7K->39.3K(99.4K), avg 68.2%, 0.0007080 secs]\n[GC concurrent-string-deduplication, 27.3M->21.5M(5945.1K), avg 68.1%, 0.0554714 secs]\n[GC concurrent-string-deduplication, 304.0K->48.5K(255.5K), avg 68.1%, 0.0021169 secs]\n[GC concurrent-string-deduplication, 748.9K->407.3K(341.7K), avg 68.1%, 0.0026401 secs]\n[GC concurrent-string-deduplication, 3756.7K->663.1K(3093.6K), avg 68.1%, 0.0270676 secs]\n[GC concurrent-string-deduplication, 974.3K->17.0K(957.3K), avg 68.1%, 0.0121952 secs]\n\nHowever it’s cheap to use: in average, each dedup cycle takes 8.8 ms and\nremoves 2.4 kB of duplicates.  The median takes 1.33 ms and removes 17.66 kB\nfrom the old generation.  A small change per cycle, but in aggregate it adds up\nquickly — in periods of heavy load, this can save hundreds of megabytes of\ndata. But that’s still small, relative to multi-GB heaps.\n\nConclusion: turn string deduplication on string deduplication is fairly\ncheap to use, and reduces the steady-state memory needed for Jenkins.  That\nfrees up more room for the young generation, and should overall reduce GC time\nby removing duplicate objects.  I think it’s worth turning on.\n\nSoft reference flushing: Jenkins uses soft references for caching build\nrecords and in pipeline FlowNodes.  The only guarantee for these is that they\nwill be removed instead of causing an OutOfMemoryError…​ however Java\napplications can slow to a crawl from memory pressure long before that happens.\nThere’s an option that provides a hint to the JVM based on time & free memory,\ncontrolled by -XX:SoftRefLRUPolicyMSPerMB (default 1000).  The SoftReferences\nbecome eligible for garbage collection after this many milliseconds have\nelapsed since last touch…​ per MB of unused heap (vs the maximum).  The\nreferenced objects don’t count towards that target.  So, with 10 GB of heap\nfree and the default 1000 ms setting, soft references stick around for ~2.8\nhours (!).\n\nIf the system is continuously allocating more soft references, it may trigger\nheavy GC activity, rather than clearing out soft references. See the open bug\nJDK-6912889\nfor more details.\n\nIf Jenkins consumes excessive old generation memory, it may help to make soft\nreferences easier to flush  by reducing -XX:SoftRefLRUPolicyMSPerMB from its\ndefault (1000) to something smaller (say 10-200).  The catch is that\nSoftReferences are often used for objects that are relatively expensive to\nload, such lazy-loaded build records and pipeline FlowNode data.\n\nCaveats\n\nG1 vs. CMS:\n\nG1 was available on later releases of JRE 7, but unstable and slow. If you\nuse it you absolutely must be using JRE 8, and the later the release the better\n(it’s gotten a lot of patches).  Googling around will show horrible G1 vs CMS\nbenchmarks from around 2014: these are probably best ignored, since the G1\nimplementation was still immature then. There’s probably a niche for CMS use\nstill, especially on midsized heaps (1-3 GB) or where settings are already\ntuned.  With appropriate tuning it can still perform generally well for\nJenkins (which mostly generates short-lived garbage), but CMS eventually suffer\nfrom heap fragmentation and need a slow, non-concurrent Full GC to clear this.\nIt also needs considerably more tuning than G1.\n\nGeneral GC tuning caveats :\n\nNo single setting is perfect for everybody.  We avoid tweaking settings that we\ndon’t have strong evidence for here, but there are of course many additional\nsettings to tweak.  One shouldn’t change them without evidence though, because\nit can cause unexpected side effects.  The GC logs we enabled earlier will\ncollect this evidence.  The only setting that jumps out as a likely candidate\nfor further tuning is G1 region size (too small and there are many humungous\nobject allocations, which hurt performance).  Running on smaller systems,\nI’ve seen evidence that regions shouldn’t be smaller than 4 MB because\nthere are 1-2 MB objects allocated somewhat regularly — but it’s not\nenough to make solid guidance without more data.\n\nWhat Should I Do Before Tuning Jenkins GC:\n\nIf you’ve seen\nStephen Connolly’s excellent Jenkins World talk,\nyou know that most Jenkins instances can and should get by with 4 GB or less of\nallocated heap, even up to very large sizes.  You will want to turn on GC\nlogging (suggested above) and look at stats over a few weeks (remember\nGCeasy.io).\nIf you’re not seeing periodic longer pause times, you’re probably okay.\n\nFor this post we assume we’ve already done the basic performance work for Jenkins:\n\nJenkins is running on fast, SSD-backed storage.\n\nWe’ve set up build rotation for your Jobs, to delete old builds so they don’t pile up.\n\nThe weather column is already disabled for folders.\n\nAll builds/deploys are running on build agents not on the controller. If the controller has executors allocated, they are exclusively used for backup tasks.\n\nWe’ve verified that Jenkins really does need the large heap size and can’t easily be split into separate controllers.\n\nIf not, we need to do that FIRST before looking at GC tuning, because those will have larger impacts.\n\nConclusions\n\nWe’ve gone from:\n\nAverage 350 ms pauses (bad user experience) including less frequent 2+ second generation pauses\n\nTo an average pause of ~50 ms, with almost all under 250 ms\n\nReduced total memory footprint from String deduplication\n\nHow:\n\nUse Garbage First (G1) garbage collection, which performs generally very well for Jenkins.  Usually there’s enough spare CPU time to enable concurrent running.\n\nEnsure explicit System.gc() and metaspace resizing do not trigger a Full GC because this can trigger a very long pause\n\nTurn on parallel reference processing for Jenkins to use all CPU cores fully.\n\nUse String deduplication, which generates a tidy win for Jenkins\n\nEnable GC logging, which can then be used for the next level of tuning and diagnostics, if needed.\n\nThere’s still a little unpredictability, but using appropriate settings gives a\nmuch more stable, responsive CI/CD server…​ even up to 20 GB heap sizes!\n\nFurther Reading:\n\nG1GC fundamentals\n\nMechanicalSympathy: Garbage Collection Distilled\n\nOracle Garbage First Garbage Collector Tuning\n\nOne additional thing\n\nI’ve added -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 to our\noptions above.  This is covering a complex and usually infrequent case where G1\nself-tuning can trigger bad performance for Jenkins — but that’s material for\nanother post…​","title":"Tuning Jenkins GC For Responsiveness and Stability with Large Instances","tags":["performance","scalability","administration"],"authors":[{"avatar":null,"blog":null,"github":"svanoort","html":"","id":"svanoort","irc":null,"linkedin":null,"name":"Sam Van Oort","slug":"/blog/authors/svanoort/","twitter":null}]}},{"node":{"date":"2016-11-22T00:00:00.000Z","id":"bf7f59a9-58e8-5509-a6f1-6515f7050a5b","slug":"/blog/2016/11/22/what-jvm-versions-are-running-jenkins-the-return/","strippedHtml":"Like for last year’s article about the same subject, yet another recent discussion about finally requiring Java 8 to run future versions Jenkins pushed me to gather some more factual data around it.\n\nWhat follows contains some opinions or statements which may not be seen as purely factual or neutral. Note that this represents by no mean the general position of the Jenkins governance board. This is solely my opinion as a contributor based on the data I gathered, and what I feel from the feedback of the community at large.\n\nJava 8 now the most used version, and growing\n\nIf we look at the global numbers, Java 8 runtimes now represent 52.8% of the Jenkins instances running, which have not opted out of anonymous usage statistics.\n\nAnd if you look at the trend, Java 8 is clearly growing fast.\n\nZooming into the Jenkins 2.x instances subset\n\nNow, if you look at that picture, though already interesting and showing a clear trend towards Java 8 runtime adoption, some might argue it’s being too nice to older JREs.\nThe reasoning could be: instances running (very) old Jenkins versions may not be the ones you want to look at when trying to plan the future of an opensource project:\nthose are indeed probably not going to upgrade in general anyway, or when they do, upgrading the JRE would be a small thing compared to the rest to be tested with such a gap.\n\nSo, if we only keep the instances running Jenkins 2.x, then the proportion of Java 8 goes to almost 70% compared to Java 7 (Jenkins 2.x requires Java 7)\n[ 1 ] :\n\nConclusion\n\nJava 8 adoption numbers are getting bigger, while every other JREs are going down.\n\nIf you are still using a JRE 7 to run Jenkins, it is seriously time to think\nabout upgrading to 8.  Knowing that it’s definitely not a bleeding-edge path\nmight help you go that way, especially if you generally do not like upgrades.\nAlso, as a reminder, the most used JDK,\nOracle JDK 7 now got end-of-lifed more than 18 months ago.\n\nContrary to the past attempts the previous years, the discussion on the Jenkins\ndevelopment mailing list did not trigger strong rebutals by many people.\n\nPerhaps it’s finally time for Mr. Jenkins to upgrade to Java 8!\n\nAll numbers shown below are derived from the new jvms.json file now generated automatically every month, after the two related pull-requests 1 and 2 got merged.\n[ 2 ]\n\n1. 69% for October, 67% in September\n\n2. You are more than welcome to review those Pull-Requests and shout if you see something wrong in the calculations.","title":"What JVM versions are running Jenkins? 2016 Update!","tags":["statistics"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}},"publicURL":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/batmat.jpg"},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat/","twitter":"bmathus"}]}},{"node":{"date":"2016-12-09T00:00:00.000Z","id":"08ea2c86-7b22-5481-88a2-4bdcb1cfe5be","slug":"/blog/2016/12/09/december-jenkins-events/","strippedHtml":"Happy Holidays! A special shout out to all JAM leaders who continue to keep\nlocal activities going in December.\n\nOnline JAM\n\nDecember 14 | Live Demos: Pipeline, Git, and Blue Ocean\n\nNorth America\n\nDecember 7 | Seattle JAM: Jenkins at Microsoft\n\nDecember 14 | Los Angeles JAM: Jenkins Days\n\nDecember 14 | Guadalajara JAM: Jenkins & Docker\n\nAustralia\n\nDecember 14 | Melbourne JAM: Meeting at AWS Office\n\nLinks\n\nStart a JAM in your city if there isn’t one already.\n\nBecome a JAM member\n\nBecome an online JAM member\n\nSpeak or sponsor at a JAM. Contact us at jenkinsci-jam@googlegroups.com\n\nBecome a Jenkins project contributor","title":"Upcoming December Jenkins Events","tags":["events","jam"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-12-10T00:00:00.000Z","id":"f232c003-357c-5a76-9845-ebc3bcb77896","slug":"/blog/2016/12/10/monthly-jam-recap-november/","strippedHtml":"As we near the end of the year, the number of November JAMs show that the\nJenkins community isn’t slowing down for holiday season. We had a number of\nexcellent events hosted around the world this November with plenty of great\nstories and presentations shared by the various members of the world-wide\nJenkins community.\n\nMelbourne, Australia JAM\n\nMelbourne JAM leaders,\nRaisa\nand\nBhuva\nhosted Blue Ocean for the inaugural meeting. Attendees learned the values of\nBlue Ocean, a project that rethinks the user experience of Jenkins, modeling\nand presenting the process of software delivery by surfacing information that\nis important to development teams with as few clicks as possible, while still\nstaying true to the extensibility that Jenkins always has had as a core value.\nThank you James Dumay for stopping by to take part in\nthe inauguration.\n\nSingapore, Singapore JAM\n\nOne of the members  who had several years of experience using Jenkins (since\nHudson days in fact) to present some basics on Continuous Integration with\nGitHub. It was targeted at new members who are starting out with Jenkins. We\nunderstand that we cannot always serve advanced topics to cater to the\nexperienced users and neglect the newbies so this session was targeted to help\ngive new users an introduction to Jenkins. It went well with about 15-20\nattendees and we hope to run some hands-on workshops in 2017. Some members were\nlooking forward to freebies like stickers and T-shirts too!\n\nMoscow, Russia JAM\n\nMoscow JAM leaders,\nKirill Tolkachev\nand\nOleg Nenashev\nled the inaugural meeting with\na packed full agenda. Oleg began the meeting with an update on Jenkins 2 what improvements users can expect and what\nenhancements are in the works within the Jenkins project. Following Oleg, Kirill shared\nhow his team in Alfa Laboratory used Jenkins to improve CD/DevOps in their\nprojects (with Jenkins Pipeline, Job DSL and\nBlue Ocean), the problems they experienced and how they fixed them. Then Oleg talked\nabout Jenkins Pipeline internals, main features and recent changes in the\necosystem. It was followed up by a discussion of large-scale Jenkins instances\nat the after-party.\n\nThe recording of the event can be found\non YouTube.\n\nMilan, Italy JAM\n\nThe first meetup was a great opportunity to meet local Jenkins fans to learn\nand share Jenkins experiences at a local cafe.\n\nSan Francisco, California JAM\n\nR. Tyler Croy\nperformed a 30 minutes live Pipeline coding demo to a relatively novice\naudience (though all had used Jenkins). A good amount of questions from the\naudience  which conveyed an appetite for the content being presented.\nRyan Wallner,\npresenter from ClusterHQ, also gave a demo based around Pipeline talking about\nClusterHQ’s \"Fli\" integration with a delivery pipeline.\n\nWashington, DC JAM\n\nThere was a fantastic 90% showup rate at this month’s meetup - 58 RSVPs and 52\nin attendance was pretty impressive. All this may be due to Fannie Mae’s story\n- the success of how they used Jenkins for CI/CD as part of their DevOps\nadoption. Afterwards, there was a lot of interests and further discussions\ntaking place. Next month’s host will be Freddie Mac.\n\nSeattle, Washington JAM\n\nLong time Jenkins community member and Seattle JAM leader,\nKhai Do showed how OpenStack uses \"Jenkins Job\nBuilder\" to manage and run thousands of Jenkins jobs per day in their\nmulti-controller CI/CD system.  He also compared\nJenkins Job Builder\nwith other Jenkins \"Infrastructure-as-code\" technologies - Jenkins Pipeline and\nJenkins JobDSL. It was followed by an in-depth Q&A and discussion session.\n\nDallas/Forth Worth, Texas (DFW) JAM\n\nThe November DFW JAM was the most strongly attended of the year! DFW JAM leader,\nEric Smalling discussed the benefits of\ndynamic build agents and demonstrated various ways to implement them such as\nthe EC2 and Docker plugins. There was a lot of interest and discussion,\nespecially around Docker and the ability it provides to have ephemeral agents\nwith very little provisioning time.\n\nThe recording can be downloaded from\nGooel Drive.\n\nLinks\n\nStart a JAM in your city if there isn’t one already.\n\nBecome a JAM member.\n\nBecome an online JAM member\n\nBe a JAM speaker or sponsor. Let us know jenkinsci-jam@googlegroups.com\n\nBecome a Jenkins project contributor","title":"Monthly JAM Recap - November 2016","tags":["event","jam","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2016-12-19T00:00:00.000Z","id":"584ac2c5-5d3d-5e1c-bcbe-5ef1ef71e42e","slug":"/blog/2016/12/19/declarative-pipeline-beta/","strippedHtml":"Last week we released version 0.7.1 of the\nPipeline-Model-Defintion\nplugin and wanted to crown it as the official Beta version of the Declarative\nPipeline syntax. Although it has been available in the update center\nsince August,\nwe continue to solidify the syntax. We feel this release is getting\nvery close to the final version and should not change much before 1.0. However,\nit is still a Beta so further tweaks are possible.\n\nA release (0.8.0) is planned for early January 2017 which will finalize the\nsyntax with the following changes:\nJENKINS-40524,\nJENKINS-40370,\nJENKINS-40462,\nJENKINS-40337\n\nWhat is Declarative Pipeline?\n\nAll the way back at Jenkins World in September, Andrew Bayer presented a\nsneak peak\nof a new syntax for constructing Pipelines. We are calling this new syntax\nDeclarative Pipeline to differentiate it from the existing Scripted Pipeline\nsyntax that has always been a part of Pipeline.\n\nAfter listening to many Jenkins users over the last year we felt that, while\nPipeline Script provides tremendous power, flexibility, and extensibility, the\nlearning curve for Scripted Pipeline was steep for users new to either Jenkins\nor Pipeline. Beginning users wanting to take advantage of all the features\nprovided by Pipeline and Jenkinsfiles were required to learn Scripted Pipeline\nor remain limited to the functionality provided by Freestyle jobs.\n\nDeclarative Pipeline does not replace Scripted Pipeline but extends Pipeline it\nwith a pre-defined structure to let users focus entirely on the steps\nrequired at each stage without needing to worry about scripting every aspect\nof the pipeline. Granular flow-control is extremely powerful and Scripted\nPipeline syntax will always be part of Pipeline but it’s not for everyone.\n\nDeclarative Pipeline enables all users to connect simple, declarative blocks\nthat define agents (including Docker), post actions, environment\nsettings, credentials and all stages that make up the pipeline. Best of all,\nbecause this Declarative syntax is part of Pipeline, all build steps and build\nwrappers available in Plugins or loaded from Shared Libraries are also\navailable as steps in Declarative.\n\nExample\n\nBelow is an example of a pipeline in Declarative syntax. You can also switch the view to show the same pipeline in Scripted syntax.\n The Declarative syntax has a more straightforward structure that is easier to grok by users not versed in Groovy.\n\n// Declarative //\npipeline {\n  agent  label:'has-docker', dockerfile: true\n  environment {\n    GIT_COMMITTER_NAME = \"jenkins\"\n    GIT_COMMITTER_EMAIL = \"jenkins@jenkins.io\"\n  }\n  stages {\n    stage(\"Build\") {\n      steps {\n        sh 'mvn clean install -Dmaven.test.failure.ignore=true'\n      }\n    }\n    stage(\"Archive\"){\n      steps {\n        archive \"*/target/**/*\"\n        junit '*/target/surefire-reports/*.xml'\n      }\n    }\n  }\n  post {\n    always {\n      deleteDir()\n    }\n    success {\n      mail to:\"me@example.com\", subject:\"SUCCESS: ${currentBuild.fullDisplayName}\", body: \"Yay, we passed.\"\n    }\n    failure {\n      mail to:\"me@example.com\", subject:\"FAILURE: ${currentBuild.fullDisplayName}\", body: \"Boo, we failed.\"\n    }\n  }\n}\n\n// Script //\nwithEnv([\"GIT_COMMITTER_NAME = jenkins\",\"GIT_COMMITTER_EMAIL = jenkins@jenkins.io\"]) {\n  node('has-docker') {\n    try {\n      checkout scm // checks out Dockerfile and source code\n      def myImage = docker.build 'my-environment:snapshot'\n      myImage.inside {\n        stage('Build') {\n          sh 'mvn clean install -Dmaven.test.failure.ignore=true'\n        }\n        stage('Archive') {\n          archive \"*/target/**/*\"\n          junit '*/target/surefire-reports/*.xml'\n        }\n      }\n      if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n        mail to:\"me@example.com\", subject:\"SUCCESS: ${currentBuild.fullDisplayName}\", body: \"Yay, we passed.\"\n      }\n    }\n    catch (exc) {\n      mail to:\"me@example.com\", subject:\"FAILURE: ${currentBuild.fullDisplayName}\", body: \"Boo, we failed.\"\n    }\n    finally {\n      deleteDir()\n    }\n  }\n}\n\nHow can you help?\n\nInstall the lastest version of the\nPipeline-Model-Defintion plugin.\n\nRead the documentation:\nGetting Started and\nSyntax overview.\n(These documents will be incorporated into the Jenkins.io documentation.)\n\nConvert some of your existing Pipeline scripts into Declarative\n\nLog any issues or enhancements you have\nhere\nfor the syntax, the execution, or the documentation.\n\nAsk questions. You can send questions to the\nusers mailing list\nor visit the #jenkins channel on IRC.\n\nHow will this work with Blue Ocean?\n\nBlue Ocean is all about Pipelines in Jenkins. Running, displaying, and soon,\ncreating Pipelines.  Blue Ocean will be able to run and display Pipelines\nwritten in this new syntax just like any other Pipeline works today. However,\nbecause Declarative Pipeline includes a pre-defined structure, or model, it is\nnow possible to create and edit pipelines with a GUI editor.\n\nAlthough we plan to launch 1.0 of Declarative Pipeline before Blue Ocean 1.0 is\nofficially available, we expect to have a working Beta of the Editor available\nto play with. The combination of a simple syntax and an intuitive editor\nshould make creating Jenkins Pipelines a breeze.\n\nHappy Holidays\n\nI hope everyone has a great end of the year and a Happy New Year. With\nDeclarative Pipeline and\nBlue Ocean\nwe expect great things for Jenkins in 2017!","title":"Announcing the beta of Declarative Pipeline Syntax","tags":["pipeline","blueocean"],"authors":[{"avatar":null,"blog":null,"github":"HRMPW","html":"","id":"hrmpw","irc":null,"linkedin":null,"name":"Patrick Wolf","slug":"/blog/authors/hrmpw/","twitter":"hrmpw"}]}},{"node":{"date":"2016-12-20T00:00:00.000Z","id":"07094990-1362-5018-bed6-12c7ddfa53ee","slug":"/blog/2016/12/20/jenkins-puppet-enterprise-plugin/","strippedHtml":"This is a guest post by Carl Caum,\nwho works at Puppet and created the\nPuppet Enterprise Pipeline plugin.\n\nDuring PuppetConf 2016, myself and Brian Dawson from CloudBees announced the\nplugin:puppet-enterprise-pipeline[Puppet Enterprise\nplugin for Jenkins Pipeline].\nLet’s take a look at how the plugin makes it trivial to use Puppet to perform\nsome or all of the deployment tasks in continuous delivery pipelines.\n\nJenkins Pipeline introduced an amazing world where the definition for a\npipeline is managed from the same version control repository as the code\ndelivered by the pipeline. This is a powerful idea, and one I felt complemented\nPuppet’s automation strengths. I wanted to make it trivial to control Puppet\nEnterprise’s orchestration and infrastructure code management capabilities, as\nwell as set hierarchical configuration data and use Puppet’s inventory data\nsystem as a source of truth – all from a Pipeline script. The result was the\nPuppet Enterprise plugin, which fully buys into the Pipeline ideals by\nproviding methods to control the different capabilities in Puppet Enterprise.\nThe methods provide ways to query\nPuppetDB, set\nHiera key/value pairs, deploy\nPuppet code environments with\nCode Management, and kick off orchestrated Puppet runs with the\nOrchestrator.\n\nThe Puppet Enterprise for Jenkins Pipeline plugin\n\nThe Puppet Enterprise for Jenkins Pipeline plugin itself has zero system\ndependencies. You need only to install the plugin from the update center. The\nplugin uses APIs available in Puppet Enterprise to do its work. Since the\nPuppetDB query, Code Management, and Orchestrator APIs are all\nbacked by Puppet Enterprise’s role-based access control (RBAC) system, it’s\neasy to restrict what pipelines are allowed to control in Puppet Enterprise. To\nlearn more about RBAC in Puppet Enterprise,\nread the docs here.\n\nConfiguring\n\nConfiguring the plugin is fairly straight forward. It takes three simple steps:\n\nSet the address of the Puppet server\n\nCreate a Jenkins credential with a Pupppet Enterprise RBAC authentication token\n\nConfigure the Hiera backend\n\nSet the Puppet Enterprise Server Address\n\nGo to Jenkins > Manage Jenkins > Puppet Enterprise page. Put the DNS address of\nthe Puppet server in the Puppet Master Address text field. Click the Test\nConnection button to verify the server is reachable, the Puppet CA certificate\nis retrievable, and HTTPS connections are successful. Once the test succeeds,\nClick Save.\n\nCreate a Jenkins Credentials Entry\n\nThe plugin uses the Jenkins built-in credentials system (the plain-credentials\nplugin) to store and refer RBAC tokens to Puppet Enterprise for authentication\nand authorization. First, generate an RBAC token in Puppet Enterprise by\nfollowing\nthe\ninstructions on the docs site. Next, create a new Jenkins Credentials item\nwith Kind Secret text and the Secret value the Puppet Enterprise RBAC\ntoken. It’s highly recommended to give the credential an ID value that’s\ndescriptive and identifiable. You’ll use it in your Pipeline scripts.\n\nIn your Jenkinsfile, use the puppet.credentials method to set all future Puppet\nmethods to use the RBAC token. For example:\n\npuppet.credentials 'pe-team-token'\n\nConfigure the Hiera Backend\n\nThe plugin exposes an HTTP API for performing Hiera data lookups for key/value\npairs managed by Pipeline jobs. To configure Hiera on the Puppet compile\nmaster(s) to query the Jenkins Hiera data store backend, use the\nhiera-http backend. On the\nPuppet Enterprise compile master(s), run the following commands:\n\n/opt/puppetlabs/puppet/bin/gem install hiera-http\n/opt/puppetlabs/bin/puppetserver gem install hiera-http\n\nNow you can configure the /etc/puppetlabs/puppet/hiera.yaml file. The following\nconfiguration instructs Hiera to first look to the Hiera yaml files in the\nPuppet code’s environment, then fall back to the http backend. The http backend\nwill first query the Hiera data store API looking for the key in the scope with\nthe same name as the node. If nothing’s found, look for the key in the node’s\nenvironments. You can use any Facter fact to match scope names.\n\n:backends:\n  - yaml\n  - http\n\n:http:\n  :host: jenkins.example.com\n  :port: 8080\n  :output: json\n  :use_auth: true\n  :auth_user:\n:auth_pass:\n:cache_timeout: 10\n  :failure: graceful\n  :paths:\n    - /hiera/lookup?path=%{clientcert}&key=%{key}\n    - /hiera/lookup?path=%{environment}&key=%{key}\n\nFinally, restart the pe-puppetserver process to pick up the new configs:\n\n/opt/puppetlabs/bin/puppet resource service pe-puppetserver ensure=stopped\n/opt/puppetlabs/bin/puppet resource service pe-puppetserver ensure=running\n\nHiera HTTP Authentication\n\nIf Jenkins' Global Security is configured to allow unauthenticated read-only\naccess, the 'use_auth', 'auth_pass', and 'auth_user' parameters are\nunnecessary. Otherwise, create a local Jenkins user that has permissions to\nview the Hiera Data Lookup page and use that user’s credentials for the\nhiera.yaml configuration.\n\nQuerying the infrastructure\n\nPuppetDB is an extensive data store that holds every bit of information Puppet\ngenerates and collects across every system Puppet is installed on. PuppetDB\nprovides a sweet query language called\nPQL. With PQL,\nyou can ask complex questions of your infrastructure such as \"How many\nproduction Red Hat systems are there with the openssl package installed?\" or\n\"What us-west-2c nodes with the MyApp role that were created in the last 24\nhours?\"\n\nThis can be a powerful tool for parts of your pipeline where you need to\nperform specific operations on subsets of the infrastructure like draining a\nloadbalancer.\n\nHere’s an example using the puppet.query method:\n\nresults = puppet.query '''\n  inventory[certname] {\n    facts.os.name = \"RedHat\" and\n    facts.ec2_metadata.placement.availability-zone = \"us-west-2c\" and\n    facts.uptime_hours < 24\n  }'''\n\nThe query returns an array of matching items. The results can be\niterated on, and even passed to a series of puppet.job calls. For example, the\nfollowing code will query all nodes in production that experienced a failure on\nthe last Puppet run.\n\nresults = puppet.query 'nodes { latest_report_status = \"failed\" and catalog_environment = \"production\"}'\n\nNote that once you can use closures in Pipeline scripts, doing the above\nexample will be much simpler.\n\nCreating an orchestrator job\n\nThe orchestration service in Puppet Enterprise is a tool to perform\norchestrated Puppet runs across as broad or as targeted an infrastructure as\nyou need at different parts of a pipeline. You can use the orchestrator to\nupdate applications in an environment, or update a specific list of nodes, or\nupdate nodes across a set of nodes that match certain criteria. In each\nscenario, Puppet will always push distributed changes in the correct order by\nrespecting the cross-node dependencies.\n\nTo create a job in the Puppet orchestrator from a Jenkins pipeline, use the\npuppet.job method. The puppet.job method will create a new orchestrator job,\nmonitor the job for completion, and determine if any Puppet runs failed. If\nthere were failures, the pipeline will fail.\n\nThe following are just some examples of how to run Puppet orchestration jobs against the infrastructure you need to target.\n\nTarget an entire environment:\n\npuppet.job 'production'\n\nTarget instances of an application in production:\n\npuppet.job 'production', application: 'Myapp'\n\nTarget a specific list of nodes:\n\npuppet.job 'production', nodes: ['db.example.com','appserver01.example.com','appserver02.example.com']\n\nTarget nodes matching a complex set if criteria:\n\npuppet.job 'production', query: 'inventory[certname] { facts.os.name = \"RedHat\" and facts.ec2_metadata.placement.availability-zone = \"us-west-2c\" and uptime_hours < 24 }'\n\nAs you can see, the puppet.job command means you can be as broad or as targeted\nas you need to be for different parts of your pipeline. There are many other\noptions you can add to the puppet.job method call, such as setting the Puppet\nruns to noop, or giving the orchestrator a maximum concurrency limit.\nLearn\nmore about the orchestrator here.\n\nUpdating Puppet code\n\nIf you’re using Code Management in Puppet Enterprise (and you should), you can\nensure that all the modules, site manifests, Hiera data, and roles and profiles\nare staged, synced, and ready across all your Puppet masters, direct from your\nJenkins pipeline.\n\nTo update Puppet code across all Puppet masters, use the puppet.codeDeploy method:\n\npuppet.codeDeploy 'staging'\n\nLearn more Code Management in Puppet Enterprise here.\n\nSetting Hiera values\n\nThe plugin includes an experimental feature to set Hiera key/value pairs. There\nare many cases where you need to promote information through a pipeline, such\nas a build version or artifact location. Doing so is very difficult in Puppet,\nsince data promotion almost always involves changing Hiera files and committing\nto version control.\n\nThe plugin exposes an HTTP API endpoint that Hiera can query using the\nhiera-http backend. With the backend configured on the Puppet master(s),\nkey/value pairs can be set to scopes. A scope is arbitrary and can be anything\nyou like, such as a Puppet environment, a node’s certname, or the name of a\nFacter fact like operatingsystem or domain.\n\nTo set a Hiera value from a pipeline, use the puppet.hiera method.\n\npuppet.hiera scope: 'staging', key: 'build-version', value: env.BUILD_ID\n\nNow you can set the same key with the same value to the production scope later\nin the pipeline, followed by a call to puppet.job to push the change out.\n\nExamples\n\nThe\nplugin’s\nGithub repository contains a set of example Pipeline scripts. Feel free to\nissue pull requests to add your own scripts!\n\nWhat’s next\n\nI’m pretty excited to see how this is going to help simplify continuous\ndelivery pipelines. I encourage everyone to get started with continuous\ndelivery today, even if it’s just a simple pipeline. As your practices evolve,\nyou can begin to add automated tests, automate away manual checkpoints, start\nto incorporate InfoSec tests, and include phases for practices like patch\nmanagement that require lots of manual approvals, verifications and rollouts.\nYou’ll be glad you did.","title":"Continuous Delivery with Jenkins and Puppet Enterprise","tags":["continuousdelivery","puppet","pipeline","puppetenterprise"],"authors":[{"avatar":null,"blog":null,"github":"ccaum","html":"","id":"ccaum","irc":null,"linkedin":null,"name":"Carl Caum","slug":"/blog/authors/ccaum/","twitter":"ccaum"}]}},{"node":{"date":"2016-12-31T00:00:00.000Z","id":"3267c8fe-f10e-530a-9caa-bae9eeb34fb0","slug":"/blog/2016/12/31/what-a-year/","strippedHtml":"I do not think it is an exaggeration to say: 2016 was the best year yet for the\nJenkins project. Since the first commit in 2006, the project has reached a\nnumber of significant milestones in its ten years but we have never experienced\nthe breadth of major milestones in such a short amount of time. From\nJenkins 2\nand\nBlue Ocean\nto the\nGoogle Summer of Code\nand\nJenkins World,\n\nI wanted to take a moment and celebrate the myriad of accomplishments which\ncouldn’t have happened without the help from everybody who participates in the\nJenkins project. The 1,300+ contributors to the\njenkinsci GitHub organization,\nthe 4,000+ members of the\ndevelopers mailing list,\nthe 8,000+ members of the\nusers mailing list,\nand countless others who have reported issues, submitted pull requests, and\npresented at meetups and conferences.\n\nJenkins 2\n\nThrough the course of 2016, the Jenkins project published 16\nLTS releases\nand 54\nWeekly releases.\nOf those 70 releases, the most notable may have been the\nJenkins 2.0 release\nwhich was published in April.\n\nJenkins 2 made Pipeline as Code front-and-center in the user experience,\nintroduced a new \"Getting Started\" experience, and included a number of other\nsmall UI improvements, all while maintaining backwards compatibility with\nexisting Jenkins environments.\n\nSince April, we have released a number of LTS\nreleases using Jenkins 2 as a baseline, meaning the Jenkins project no longer\nmaintains any 1.x release lines.\n\nThe\nPipeline\nefforts have continuted to gain steam since April, covered on this blog with a\nnumber of\nposts tagged \"pipeline\". Closing out 2016 with the\nannouncement of the beta for\nDeclarative Pipeline syntax\nwhich is expected in early 2017.\n\nBlue Ocean\n\nHot on the heels of Jenkins 2 announcement\"Blue Ocean, a new user experience for Jenkins\",\nwas\nopen sourced in May.\nBlue Ocean is a new project that rethinks the user experience of Jenkins.\nDesigned from the ground up for Jenkins Pipeline and compatible with Freestyle\njobs. The goal for the project is to reduce clutter and increase clarity for\nevery member of a team using Jenkins.\n\nThe Blue Ocean beta can be installed from the Update Center and can be run in\nproduction Jenkins environments alongside the existing UI. It adds the new user experience under\n/blue in the environment but does not disturb the existing UI.\n\nBlue Ocean is expected to reach \"1.0\" in the first half of 2017.\n\nAzure\n\nAlso in May of 2016, the Jenkins project announced an exciting\nPartnership with Microsoft\nto run our project infrastructure on\nAzure. While the migration of Jenkins project\ninfrastructure into Azure is still on-going, there have been some notable\nmilestones reached already:\n\nEnd-to-end TLS encrypted delivery for Debian/openSUSE/Red Hat repositories which are\nconfigured to use https://pkg.jenkins.io by the end-user.\n\nMajor capacity improvements to\nci.jenkins.io\nproviding on-demand Ubuntu and Windows build/test infrastructure.\n\nA full continuous delivery Pipeline for all Azure-based infrastructure using\nTerraform from Jenkins.\n\nThe migration to Azure is expected to complete in 2017.\n\nGoogle Summer of Code\n\nFor the first time in the history of the project, Jenkins was accepted into\nGoogle Summer of Code\n2016. Google Summer of Code (GSoC) is an annual, international, program\nwhich encourages college-aged students to participate with open source projects\nduring the summer break between classes. Students accepted into the program\nreceive a stipend, paid by Google, to work well-defined projects to improve or\nenhance the Jenkins project.\n\nIn exchange, numerous Jenkins community members volunteered as \"mentors\" for\nstudents to help integrate them into the open source community and succeed in\ncompleting their summer projects.\n\nA lot was learned during the summer which we look forward to applying to Google\nSummer of Code 2017\n\nJenkins World\n\nIn September, over one thousand people attended\nJenkins World,\nin Santa Clara, California.\n\nFollowing the event,\nLiam\nposted a series of blog posts which highlight some of the fantastic content\nshared by Jenkins users and contributors from around the world, such as:\n\nThe demos from the \"Experts\"\n\nSessions on Scaling Jenkins\n\nUsing Jenkins Pipeline\n\nThe Contributor Summit\n\nJenkins World was the first global event of its kind for Jenkins, it brought users\nand contributors together to exchange ideas on the current state of the\nproject, celebrate accomplishments of the past year, and look ahead at all the\nexiting enhancements coming down the pipe(line).\n\nIt was such a smashing success that\nJenkins World 2017\nis already scheduled for August 30-31st in San Francisco, California.\n\nJAM\n\nFinally, 2016 saw tremendous growth in the number of\nJenkins Area Meetups\n(JAMs) hosted around the world. JAMs are local meetups intended to bring\nJenkins users and contributors together for socializing and learning. JAMs are\norganized by local Jenkins community members who have a passion for sharing new\nJenkins concepts, patterns and tools.\n\nDriven by current Jenkins Events Officer,\nAlyssa Tong,\nand the dozens of passionate organizers, JAMs have become a great way to meet\nother Jenkins users near you.\n\nWhile we don’t yet have JAMs on each of the seven continents, you can always join the\nJenkins Online Meetup.\nThough we’re hoping more groups will be founded near you in 2017!\n\nI am personally grateful for the variety and volume of contributions made by\nthousands of people to the Jenkins project this year. I believe I can speak for\nproject founder,\nKohsuke Kawaguchi,\nin stating that the Jenkins community has grown beyond our anything we could\nhave imagined five years ago, let alone ten!\n\nThere are number of ways to\nparticipate\nin the Jenkins project, so if you didn’t have an opportunity to join in during\n2016, we hope to see you next year!","title":"Thank you for an amazing 2016","tags":["jam","jenkins2","pipeline","blueocean","azure","gsoc","new-year-blogpost"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2017-01-10T00:00:00.000Z","id":"ce9069d6-e9c4-5b3e-b147-2b3d3ac2f09d","slug":"/blog/2017/01/10/jenkins-lifx-notifier-plugin/","strippedHtml":"This is a\ncross\npost by Veaceslav Gaidarji, open source\ndeveloper and contributor to the Jenkins and Bitrise projects.\n\nSome time ago I encountered a LIFX smart bulbs.\nThese are the bulbs with a chip inside - 50% bulb, 50% chip. There are mobile\napplications for easy configuration and remote control of the bulb. Nothing\nspecial here, it simply works and is very convenient to have such bulbs in\ndormitory.\n\nBrilliant idea time\n\n99% of ideas which come to our minds either were already implemented by someone\nelse or they are useless.\n\n— Veaceslav Gaidarji\n\nAnd as it always happens, the developer inside me generated an idea which, as\nit always happens, was implemented by someone else already.\n\nThe idea was: to connect a LIFX bulb to Jenkins server and update the color\naccording to a job’s state.\n\nBefore starting to work on such Jenkins plugin, I searched for similar projects\non Google and the first links pointed me to existing\nLIFX notifier plugin\nand a\nblog post\nfrom\nMichael Neale\nwho created the plugin. Michael’s post describes exactly what I had in mind.\n\nAt this point I had 2 options:\n\nforget about building something new and just use the plugin\n\nimprove existing plugin\n\nFirst option is always easy and effortless, but second one is more challenging.\n\nImproving an existing plugin\n\nThe existing LIFX notifier plugin\ndid its job really well and I was able to connect my bulb to Jenkins and test\nit. But it wasn’t complete and had no configurable at all, therefore no\npossibility to change the colors.\n\nFirst, I read Jenkins contribution guidelines, which\nencourage\ndevelopers to improve existing plugins (if any) and not create other versions\nof plugins with similar functionality. Then I contacted the plugin author, Michael Neale,\nvia email and kindly asked for the contributor access in GitHub\nfor the existing plugin version. After a short discussion about my plans on this\nplugin, Michael added me as a contributor to GitHub\nrepo and wished me\ngood luck. Thanks Michael!\n\nI wanted to improve the LIFX notifier plugin to add the ability\ncustomize the colors ( in progress, build success and build failure). This\nis not a hard task actually.\nA 1000+ plugins were\ndeveloped for Jenkins by the hackers like me, which means that I should have no\nproblem to do it as well.\nFortunately for me, I have used some plugins already which had a UI similar to\nthat I had planned to add to the LIFX notifier, such as:\n\nHockeyApp plugin\n\nFabric Beta publisher plugin\n\nDifferent Build notifiers plugins\n\nReviewing the code for these plugins, plus Jenkins\nplugin\ndevelopment documentation, and of course looking over\nJelly components helped\nme to:\n\nBetter understand the Jenkins architecture.\n\nLearn how Jenkins plugins work in general.\n\nLearn how to create the UI components for a plugin.\n\nLearn how to subscribe to Jenkins job state changes using appropriate\nextension points.\n\nIn a few weeks I’ve finished my plugin modifications and added unit tests for\nits major parts.  As a result, the plugin now has a UI configuration section in\nPost-build Actions which is self descriptive:\n\nThe last step was to prepare new plugin version and publish it to the world!\nThe Jenkins\"Hosting\nplugins\" document describes step by step process of how to publish a plugin.\n\nThis includes many steps which should be respected very carefully.\n\nDemo\n\nWhat I’ve learned\n\nIt was my first experience in Jenkins plugins development. I should say that\nsteep learning curve is high enough, and sometimes is really hard to find\nanswers on appearing questions. But in general it’s all about Java, XML,\nMaven and it’s a lot of fun developing Jenkins plugins.\n\nCheck out the LIFX notifier page\nfor more information about the latest releases!\n\nBonus : bitrise.io users, I’ve developed step LIFX notifier for bitrise as well.","title":"Learning plugin development by improving the LIFX notifier plugin","tags":["plugins","lifx"],"authors":[{"avatar":null,"blog":"http://vgaidarji.me","github":"vgaidarji","html":"<div class=\"paragraph\">\n<p>Veaceslav is a software developer with the main focus on Android platform.\nIn his free time, he enjoys working on different open-source projects.</p>\n</div>","id":"vgaidarji","irc":null,"linkedin":null,"name":"Veaceslav Gaidarji","slug":"/blog/authors/vgaidarji/","twitter":"v_gaidarji"}]}},{"node":{"date":"2017-01-10T00:00:00.000Z","id":"977904eb-252b-582f-a038-4682f4224260","slug":"/blog/2017/01/10/security-warnings/","strippedHtml":"Jenkins 2.40 was released earlier this week, and readers of the\nchangelog\nwill have noticed that it now includes the ability to show security warnings\npublished by the configured update site.  But what does that mean?\n\nIn the past, we’ve notified users about security issues in Jenkins and in\nplugins through various means: Emails to the\njenkinsci-advisories mailing list\n(which I recommend you subscribe to), blog posts, and, recently, emails to the\noss-security mailing list.  But I still wanted to increase the reach of our\nnotifications, to make sure Jenkins admins are informed quickly about possible\nsecurity problems on their instances.  The logical next step was to include\nthese notifications in Jenkins itself, and that feature has been added in\nJenkins 2.40.\n\nToday we enabled the publication of warnings on our update sites: Once Jenkins\n2.40 (or newer) refreshes its cache of update site metadata, it may now inform\nyou that you’re using a vulnerable plugin that should be updated or removed.\nRight now, these aren’t previously unknown warnings, but reference security\nadvisories for plugin vulnerabilies that have been published over the past few\nyears.\n\nWe will of course continue to publish security advisories using the mailing\nlist of the same name, as well other means.\n\nStay safe!","title":"Security warnings in Jenkins","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-01-11T00:00:00.000Z","id":"b6d5d789-c4f4-5f71-bda6-b5ab5196b7e9","slug":"/blog/2017/01/11/jenkins-world-2017-cfp/","strippedHtml":"The largest Jenkins event, Jenkins\nWorld is coming to San Francisco, California on August 28 - 31, 2017, at the\nMarriott Marquis.  This conference will feature two days of hands-on training,\nworkshops, and certification exams followed by two more days with five tracks\nof technical sessions from Jenkins and DevOps experts from around the world.\n\nInspire your peers and colleagues by sharing your expertise and experience as\none of the Jenkins World speakers.\nThe Call for Papers is open, last\nday for submitted a proposal is March 5th, 2017.\n\nCompared to Jenkins World 2016, what’s new for\n2017?  Two tracks are now dedicated to \"show and tell.\" These sessions are\ntechnically advanced with code sharing, heavy on demos, and only a few slides.\nIf you are like most of us - driven to learn, share, and collaborate…​we’d\nlike to hear from you!\n\nLooking forward to your amazing proposal(s)!\n\nSubmit your proposal here!","title":"Jenkins World 2017 Call for Papers is Open","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-01-12T00:00:00.000Z","id":"2ff4e12b-c7b0-5650-8366-ce14906b5f15","slug":"/blog/2017/01/12/declarative-pipeline-beta-2/","strippedHtml":"This week, we released the second beta of the new\nDeclarative Pipeline syntax,\navailable in the Update Center now as version 0.8.1 of Pipeline: Model Definition.\nYou can read more about Declarative Pipeline\nin the blog post introducing the first beta\nfrom December, but we wanted to update you all on the syntax changes in the\nsecond beta. These syntax changes are the last compatibility-breaking changes to\nthe syntax before the 1.0 release planned for February, so you can safely start\nusing the 0.8.1 syntax now without needing to change it when 1.0 is released.\n\nA full syntax reference is available on the wiki as well.\n\nSyntax Changes\n\nChanged \"agent\" configuration to block structure\n\nIn order to support more detailed and clear configuration of agents, as well as\nmaking agent syntax more consistent with the rest of the Declarative Pipeline\nsyntax, we’ve moved the agent configuration into blocks. The agent any and\nagent none configurations work the same as previously, but label, docker\nand dockerfile now look like the following:\n\nJust specifying a label is simple.\n\n// Declarative //\nagent {\n    label \"some-label\"\n}\n// Script //\n\nIf you’re just specifying a Docker image, you can use this simple syntax.\n\n// Declarative //\nagent {\n    docker \"ubuntu:16.04\"\n}\n// Script //\n\nWhen you are specifying a label or other arguments, docker looks like this:\n\n// Declarative //\nagent {\n    docker {\n        image \"ubuntu:16.04\"\n        label \"docker-label\"\n        args \"-v /tmp:/tmp -p 8000:8000\"\n    }\n}\n// Script //\n\nWhen you’re building an image from \"Dockerfile\" in your repository and\ndon’t care what node is used or have additional arguments, you can again\nuse a simple syntax.\n\n// Declarative //\nagent {\n    dockerfile true\n}\n// Script //\n\nWhen you’re building an image from a different file, or have a label or other\narguments, use the following syntax:\n\n// Declarative //\nagent {\n    dockerfile {\n        filename \"OtherDockerfile\"\n        label \"docker-label\"\n        args \"-v /tmp:/tmp -p 8000:8000\"\n    }\n}\n// Script //\n\nImproved \"when\" conditions\n\nWe introduced the when section a couple releases ago, but have made some\nchanges to its syntax here in 0.8.1. We wanted to add some simpler ways to\nspecify common conditions, and that required we re-work the syntax accordingly.\n\nBranch\n\nOne of the most common conditions is running a stage only if you’re on a\nspecific branch. You can also use wildcards like \"*/master\".\n\n// Declarative //\nwhen {\n    branch \"master\"\n}\n// Script //\n\nEnvironment\n\nAnother built-in condition is the environment condition, which checks to see\nif a given environment variable is set to a given value.\n\n// Declarative //\nwhen {\n    environment name: \"SOME_ENV_VAR\", value: \"SOME_VALUE\"\n}\n// Script //\n\nExpression\n\nLastly, there’s the expression condition, which resolves an arbitrary\nPipeline expression. If the return value of that expression isn’t false or\nnull, the stage will execute.\n\n// Declarative //\nwhen {\n    expression {\n        echo \"Should I run?\"\n        return \"foo\" == \"bar\"\n    }\n}\n// Script //\n\n\"options\" replaces \"properties\" and \"wrappers\"\n\nWe’ve renamed the properties section to options, due to needing to add new\nDeclarative-specific options and to cut down on confusion. The options section\nis now where you’ll put general Pipeline options like buildDiscarder,\nDeclarative-specific options like skipDefaultCheckout, and block-scoped steps\nthat should wrap the execution of the entire build, like timeout or\ntimestamps.\n\n// Declarative //\n\noptions {\n    buildDiscarder(logRotator(numToKeepStr:'1'))\n    skipDefaultCheckout()\n    timeout(time: 5, unit: 'MINUTES')\n}\n// Script //\n\nHeading towards 1.0!\n\nWhile we may still add more functionality to the Declarative Pipeline syntax,\nwe won’t be making any changes to existing syntax for the 1.0 release. This\nmeans that any pipelines you write against the 0.8.1 syntax will keep working\nfor the foreseeable future without any changes. So if you’re already using\nDeclarative Pipelines, make sure to update your `Jenkinsfile`s after upgrading\nto 0.8.1, and if you haven’t been using Declarative Pipelines yet, install the\nPipeline: Model Definition plugin and\ngive them a try!","title":"Declarative Pipeline Syntax Beta 2 release","tags":["plugins","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2017-01-13T00:00:00.000Z","id":"3f353648-fd26-5fa2-874d-cbbc20b0fed6","slug":"/blog/2017/01/13/blueocean-dev-log-jan/","strippedHtml":"As we get closer to\nBlue Ocean\n1.0, which is planned for the end of March, I figured it would be great to\nhighlight some of the good stuff that has been going on. It’s been a\nbusy-as-usual week as everyone comes back from vacation.  A couple of new betas\nwent out this week. Of note:\n\ninput to Pipelines is now supported, a much asked for feature (see below)\n\nA new French translation\n\nSome optimisations (especially around reducing number of HTTP calls). We\nhave started using\ngtmetrix.com\nto measure changes on\"dogfood\"\nto get some numbers around optimisations on the web tier.\n\nAnd a grab bag of other great bug fixes.\n\nAlso a bunch of work has been done to support parametrized pipelines, as\nwell as creation of new multibranch pipelines (both are much asked for).\n\nThere is also now an \"official\" Docker image being published to\nDocker Hub. The Pipeline\nbuilding the container is run weekly and will be picking up newly tagged\nreleases of Blue Ocean.\n\nRunning the latest can be as simple as:\n\ndocker run -p 8888:8080 jenkinsci/blueocean:latest\n\nThis is built on the incredibly popular\nofficial \"jenkins\" image\n(10M pulls can’t all be wrong!). The container also has tags available (e.g.\njenkinsci/blueocean:1.0.0-b16) for grabbing a specific released version.\n\nUp next for Blue Ocean development as we march towards 1.0:\n\nSupport for parametrized jobs. For which a bunch of api work has already been\ndone.\n\nCreation of the new Pipeline GUI\n\nPreview release of the Visual Editor for\nDeclarative Pipeline.\n\nThe new header design will be applied\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!","title":"Blue Ocean Dev Log: January Week #2","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2017-01-17T00:00:00.000Z","id":"51dc643a-7195-5ed6-b44d-6081914b07ff","slug":"/blog/2017/01/17/Jenkins-is-upgrading-to-Java-8/","strippedHtml":"In the next few months, Jenkins will require Java 8 as its runtime.\n\nBack in\nlast November,\nwe discussed interesting statistics showing that Jenkins was now running Java 8\non a majority of its running instances.\n\nTimeline\n\nHere is how we plan to roll that baseline upgrade in the next few months.\n\nNow: Announce the intention publicly.\n\nApril, 2017: Drop support for Java 7 in Jenkins weekly.\nWith the current rhythm, that means 2.52 will most likely be the first weekly to require Java 8.\n\nJune 2017: First LTS version requiring Java 8 is published.\nThis should be something around 2.60.1.\n\nIf you are still running Java 7, you will not be able to upgrade to the latest LTS version after some date probably around May 2017.\n\nWhy Upgrade to Java 8\n\nBalancing those numbers with many other criteria:\n\nJava 7 has been now end-of-lifed for 18+ months\n\nPeople are already moving away from Java 7, as show the numbers\n\n52.8% of instances were already running Java 8 back in last November, and now reaching 58% two months later.\n\nIf we only look at Jenkins 2.x, then we reach 72%.\n\nJava 8 runtime is known from the field to be more stable\n\nMany developers have been wanting to be allowed to leverage the improvements that Java 8 provides to the language and platform\n(lambdas, Date/Time API…​ just to name a few).\nBeing also a developer community, we want Jenkins to be appealing to contributors.\n\nIf you have questions or feedback about this announcement, please feel free to post it to the Jenkins developers mailing list.","title":"Jenkins Upgrades To Java 8","tags":["java8","upgrade"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}},"publicURL":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/batmat.jpg"},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat/","twitter":"bmathus"}]}},{"node":{"date":"2017-01-17T00:00:00.000Z","id":"23308d18-32ba-5461-b5aa-74f746e5049f","slug":"/blog/2017/01/17/scm-api-2.0-release/","strippedHtml":"The regressions\ndiscovered after release have now been resolved and this post has been updated with the correct plugin version numbers.\n\nSee this post for more details.\n\nWe are announcing the\nSCM API\n2.0.x and\nBranch API\n2.0.x release lines.\n\nDownstream of this there are also some great improvements to a number of popular plugins including:\n\nGitHub Branch Source\n\nBitBucket branch source\n\nGit\n\nMercurial\n\nPipeline Multibranch\n\nGitHub Organization Folders\n\nThere are some gotcha’s that Jenkins administrators will need to be aware of.\n\nAlways take a backup of your JENKINS_HOME before upgrading any plugins.\n\nWe want to give you the whole story, but the take home message is this:\n\nWhen updating the\nSCM API\nand/or\nBranch API\nplugins to the 2.0.x release lines, if you have any of the\nGitHub Organization Folders,\nGitHub Branch Source\nand/or\nBitBucket branch source\nplugins installed then you must upgrade them all to 2.0.x at the same time or Bad Things™ will happen.\n\n— A Jenkins Administrator\n\nDo NOT upgrade some of these plugins but not others!\nDoing so may cause your jobs to fail to load.\n\nIf you don’t care about the hows and whys, you can just skip down to this section but if you are curious…​ here we go!\n\nThe back-story\n\nWay back in September 2013 we announced the\nLiterate plugin,\nas an experimental new way of modeling branch development in Jenkins.\n\nWhen you are performing an experiment, the recommendation is to do just enough work to let you perform the test.\nHowever, the culture in Jenkins is to always try and produce reusable components that others can use in ways you have not anticipated.\n\nSo when releasing the initial version of the\nLiterate plugin\nwe also separated the Literate specific bits from the SCM specific concepts and multi-branch concepts.\nThese were lower level concepts were organized into the following plugins:\n\nSCM API -\nwhich was intended to be a plugin to hold a next generation API for interacting with source control systems.\n\nBranch API -\nwhich was intended to be a plugin to hold the multi-branch functionality that was abstracted from the usage by the Literate plugin.\n\nIn addition, we released updates to three of the more common SCM plugins which included implementations of the SCM API:\n\nGit plugin\n\nSubversion plugin\n\nMercurial plugin\n\nWhile there was some interest in the Literate plugin, it did not gain much traction - there are only 39 Jenkins instances running the Literate plugin as of December 2016.\n\nIn terms of the reusable components, we had only made a minimal implementation with some limitations:\n\nVery basic event support - events can only trigger a re-scan of the entire repository.\nThis was acceptable at the time because the only three implementations use a local cache of the remote state so re-scanning is quick.\n\nNo implementation of the SCMFileSystem API.\nAs a result it is not possible for plugins like\nPipeline Multibranch\nto get the Jenkinsfile from the remote repository without needing to checkout the repository into a workspace.\n\nNo documentation on how plugin developers are supposed to implement the SCM API\n\nNo documentation on how plugin developers are supposed to consume the SCM API (if they wanted to do something like Branch API but not the same way as Branch API)\n\nNo documentation on how plugin developers are supposed to implement the Branch API to create their own multi-branch project types\n\nNo documentation on for users on how the Branch API based project types are expected to work.\n\nRoll forward to November 2015 and Jenkins Pipeline got a release of the\nPipeline Multibranch.\nIt seems that pairing Pipeline with Branch API style multi-branch is much more successful than Literate - there are close to 60,000 instances running the pipeline multi-branch plugin as of December 2016.\n\nThere also were two new SCM plugins implementing the SCM API:\n\nGitHub Branch Source Plugin\n\nBitBucket Branch Source Plugin\n\nUnlike the previous implementations of the SCM API, however, these plugins do not maintain a local cache of the repository state.\nRather they make queries via the GitHub / BitBucket REST APIs on demand.\n\nThe above design decision exposed one of the initial MVP compromises of the SCM API plugin: very basic event support.\nUnder the SCM API 1.x model, the only event that an SCMSource can signal is something changed, go look at everything again.\nWhen you are accessing an API that only allows 5,000 API calls per hour, performing a full scan of the entire repository just to pick up a change in one branch does not make optimum usage of that 5,000 calls/hour rate limit.\n\nSo we decided that perhaps the SCM API and Branch API plugins have left their Minimum Viability Experiment state and the corresponding limitations should be addressed.\n\nEnter SCM API 2.0.x and Branch API 2.0.x\n\nSo what has changed in the\nSCM API\n2.0.x and\nBranch API\n2.0.x release lines?\nThese plugin releases include:\n\ndocumentation on how plugin developers are supposed to\nimplement the SCM API\n\ndocumentation on how plugin developers are supposed to\nconsume the SCM API\n(if they wanted to do something like Branch API but not the same way as Branch API)\n\ndocumentation on how plugin developers are supposed to\nimplement the Branch API\nto create their own multi-branch project types\n\ngeneric documentation for users on\nhow Branch API based project types are intended to work\n\na full featured\nevent system\nthat allows implementers to provide fine grained notifications to consumers\n\nlots\nand\nlots\nof new automated tests\n\na mock implementation\nof the SCM API to help consumers of the SCM API test their usage.\n\nIn addition, we have upgraded the following plugins to include the new fine-grained event support:\n\nGit Plugin\n\nMercurial Plugin\n\nOk, that was the good news.\nHere is the bad news.\n\nWe found out that the GitHub Branch Source and BitBucket Branch Source plugins had made invalid assumptions about how to implement the SCM API.\nTo be clear, this was not the plugin developers fault: at the time there was no documentation on how to implement the SCM API.\n\nBut fixing the issues that we found means that you have to be careful about which specific combinations of plugin versions you have installed.\n\nSCM API Plugin\n\nTechnically, the 2.0.x line of this plugin is both API and on-disk compatible with plugins compiled against older version lines.\n\nHowever, the 1.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins have hard-coded assumptions about internal implementation of the SCM API that are no longer valid in the 2.0.x line.\n\nIf you upgrade to SCM API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins and you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.\n\nThe solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.\n\nIf you upgrade the SCM API plugin to the 2.0.x line and do not upgrade the Branch API plugin to the 2.0.x line then you will not get any of the benefits of the new version of the SCM API plugin.\n\nBranch API Plugin\n\nThe 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.\nTechnically, the API is compatible with plugins compiled against older version lines.\n\nThe 1.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins have implemented hacks that make assumptions about internal implementation of the Branch API that are no longer valid in the 2.0.x line.\n\nThe Pipeline Multibranch plugin made a few minor invalid assumptions about how to implement a Multibranch project type.\nFor example, if you do not upgrade the Pipeline Multibranch plugin in tandem then you will be unable to manually delete an orphaned item before the orphaned item retention strategy runs, which should be significantly less frequently with the new event support.\n\nIf you upgrade to Branch API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins and you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.\n\nThe solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.\n\nGit Plugin\n\nThe new releases of this plugin are both API and on-disk compatible with plugins compiled against the previous releases.\n\nThe 2.0.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins require that you upgrade your Git Plugin to one of the versions that supports SCM API 2.0.x.\nIn general, the required upgrade will be performed automatically when you upgrade your GitHub Branch Source and BitBucket Branch Source plugins.\n\nMercurial Plugin\n\nThe new release of this plugin is both API and on-disk compatible with plugins compiled against the previous releases.\n\nThe 2.0.x line of the BitBucket Branch Source plugins require that you upgrade your Mercurial Plugin to the 2.0.x line.\nIn general, the required upgrade will be performed automatically when you upgrade your  BitBucket Branch Source plugins.\n\nBitBucket Branch Source Plugin\n\nThe 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.\n\nGitHub Branch Source Plugin\n\nThe 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.\n\nIf you upgrade to GitHub Branch Source 2.0.x and you have the GitHub Organization Folders plugin installed, you must upgrade that plugin to the tombstone release.\n\nGitHub Organization Folders Plugin\n\nThe functionality of this plugin has been migrated to the GitHub Branch Source plugin.\nYou will need to upgrade to the tombstone release in order to ensure all the data has been migrated to the classes in the GitHub Branch Source plugin.\n\nOnce you have upgraded to the tombstone version and all GitHub Organization Folders have had a full scan completed successfully, you can disable and uninstall the GitHub Organization Folders plugin.\nThere will be no more releases of this plugin after the tombstone.\nThe tombstone is only required for data migration.\n\nSummary for busy Jenkins Administrators\n\nUpgrading should make multi-branch projects much better.\nWhen you are ready to upgrade you must ensure that you upgrade all the required plugins.\nIf you miss some, just upgrade them and restart to fix the issue.\n\nFolders Plugin\n\n5.16 5.17 or newer\n\nSCM API Plugin\n\n2.0.1 2.0.2 or newer\n\nBranch API Plugin\n\n2.0.0 2.0.2 or newer\n\nGit Plugin\n\nEither 2.6.2 2.6.4 or newer in the 2.6.x line or 3.0.2 3.0.4 or newer\n\nMercurial Plugin\n\n2.0.0 or newer\n\nGitHub Branch Source Plugin\n\n2.0.0 2.0.1 or newer\n\nBitBucket Branch Source Plugin\n\n2.0.0 2.0.2 or newer\n\nGitHub Organization Folders Plugin\n\n1.6\n\nPipeline Multibranch Plugin\n\n2.10 2.12 or newer\n\nIf you are using the Blue Ocean plugin\n\nBlue Ocean Plugin\n\n1.0.0-b22 or newer\n\nOther plugins that may require updating:\n\nGitHub API Plugin\n\n1.84 or newer\n\nGitHub Plugin\n\n1.25.0 or newer\n\nAfter an upgrade you will see the data migration warning (see the screenshot in JENKINS-41608 for an example) this is normal and expected.\nThe unreadable data will be removed by the next scan / index or can be removed manually using the Discard Unreadable Data button.\nThe warning will disappear on the next restart after the unreadable data has been removed.\n\nSummary for busy Jenkins users\n\nSCM API 2.0.x adds fine-grained event support.\nThis should significantly improve the responsiveness of multi-branch projects.\nThis should significantly reduce your GitHub API rate limit usage.\n\nIf you are using the\nGitHub Branch Source\nor\nGitHub Organization Folders\nplugins then upgrading will significantly reduce the API calls made by Jenkins to GitHub.\n\nIf you are using any of the upgraded SCM plugins (e.g. Git, Mercurial, GitHub Branch Source, BitBucket Branch Source) then upgrading will significantly improve the responsiveness to push event notifications.\n\nSummary for busy SCM plugin developers\n\nYou should read the new\ndocumentation\non how plugin developers are supposed to implement the SCM API\n\nWhere to now dear Literate Plugin\n\nThe persistent reader may be wondering what happens now to the Literate plugin.\n\nFor me, the logical heir of the Literate Plugin is the\nPipeline Model Definition plugin.\nThis new plugin has the advantage of an easy to read pipeline syntax with the extra functionality that I suspect was preventing people from adopting Literate.\n\nThe good news is that the Pipeline Model Definition already has 5000 installations as of December 2016 and I expect up-take to keep on growing.","title":"SCM API turns 2.0 and what that means for you","tags":["development","plugins"],"authors":[{"avatar":null,"blog":null,"github":"stephenc","html":"","id":"stephenc","irc":null,"linkedin":null,"name":"Stephen Connolly","slug":"/blog/authors/stephenc/","twitter":"connolly_s"}]}},{"node":{"date":"2017-01-19T00:00:00.000Z","id":"437a3a39-d6ca-5875-b27d-0189cefc4150","slug":"/blog/2017/01/19/converting-conditional-to-pipeline/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nIntroduction\n\nWith all the new developments in\nJenkins Pipeline (and\nDeclarative Pipeline on the horizon),\nit’s easy to forget what we did to create \"pipelines\" before\nPipeline.\nThere are number of plugins, some that have been around since the very beginning,\nthat enable users to create \"pipelines\" in Jenkins.\nFor example, basic job chaining worked well in many cases, and the\nParameterized Trigger plugin\nmade chaining more flexible.\nHowever, creating chained jobs with conditional behavior was\nstill one of the harder things to do in Jenkins.\n\nThe\nConditional BuildStep plugin\nis a powerful tool that has allowed Jenkins users to write Jenkins jobs with complex conditional logic.\nIn this post, we’ll take a look at how we might converting Freestyle jobs that\ninclude conditional build steps to Jenkins Pipeline.\nUnlike Freestyle jobs, implementing conditional operations in Jenkins Pipeline is trivial,\nbut matching the behavior of complex conditional build steps will require a bit more care.\n\nGraphical Programming\n\nThe Conditional BuildStep plugin lets users add conditional logic to Freestyle\njobs from within the Jenkins web UI.  It does this by:\n\nAdding two types of Conditional BuildStep (\"Single\" and \"Multiple\") -\nthese build steps contain one or more other build steps to be run when the configured\ncondition is met\n\nAdding a set of Condition operations -\nthese control whether the Conditional BuildStep execute the contained step(s)\n\nLeveraging the Token Macro facility -\nthese provide values to the Conditions for evaluation\n\nIn the example below, this project will run the shell script step when the value of the\nREQUESTED_ACTION token equals \"greeting\".\n\nHere’s the output when I run this project with REQUESTED_ACTION set to \"greeting\":\n\nRun condition [Strings match] enabling prebuild for step [Execute shell]\nStrings match run condition: string 1=[greeting], string 2=[greeting]\nRun condition [Strings match] enabling perform for step [Execute shell]\n[freestyle-conditional] $ /bin/sh -xe /var/folders/hp/f7yc_mwj2tq1hmbv_5n10v2c0000gn/T/hudson5963233933358491209.sh\n+ echo 'Hello, bitwiseman!'\nHello, bitwiseman!\nFinished: SUCCESS\n\nAnd when I pass the value \"silence\":\n\nRun condition [Strings match] enabling prebuild for step [Execute shell]\nStrings match run condition: string 1=[silence], string 2=[greeting]\nRun condition [Strings match] preventing perform for step [Execute shell]\nFinished: SUCCESS\n\nThis is a simple example but the conditional step can contain any regular build step.\nWhen combined with other plugins, it can control whether to send notifications,\ngather data from other sources, wait for user feedback, or call other projects.\n\nThe Conditional BuildStep plugin does a great job of leveraging strengths of\nthe Jenkins web UI, Freestyle jobs, and UI-based programming,\nbut it is also hampered by their limitations.\nThe Jenkins web UI can be clunky and confusing at times.\nLike the steps in any Freestyle job, these conditional steps are only\nstored and viewable in Jenkins.\nThey are not versioned with other product or build code and can’t be code reviewed.\nLike any number of UI-based programming tools, it has to make trade-offs between clarity\nand flexibility: more options or clearer presentation.\nThere’s only so much space on the screen.\n\nConverting to Pipeline\n\nJenkins Pipeline, on the other hand, enables users to implement their pipeline as code.\nPipeline code can be written directly in the Jenkins Web UI or in any text editor.\nIt is a full-featured programming language,\nwhich gives users access to much broader set of conditional statements\nwithout the restrictions of UI-based programming.\n\nSo, taking the example above, the Pipeline equivalent is:\n\n// Declarative //\npipeline {\n    agent any\n    parameters {\n        choice(\n            choices: ['greeting' , 'silence'],\n            description: '',\n            name: 'REQUESTED_ACTION')\n    }\n\n    stages {\n        stage ('Speak') {\n            when {\n                // Only say hello if a \"greeting\" is requested\n                expression { params.REQUESTED_ACTION == 'greeting' }\n            }\n            steps {\n                echo \"Hello, bitwiseman!\"\n            }\n        }\n    }\n}\n// Script //\nproperties ([\n    parameters ([\n        choice (\n            choices: ['greeting', 'silence'],\n            description: '',\n            name : 'REQUESTED_ACTION')\n    ])\n])\n\nnode {\n    stage ('Speak') {\n        // Only say hello if a \"greeting\" is requested\n        if (params.REQUESTED_ACTION == 'greeting') {\n            echo \"Hello, bitwiseman!\"\n        }\n    }\n}\n\nWhen I run this project with REQUESTED_ACTION set to \"greeting\", here’s the output:\n\n[Pipeline] node\nRunning on osx_mbp in /Users/bitwiseman/jenkins/agents/osx_mbp/workspace/pipeline-conditional\n[Pipeline] {\n[Pipeline] stage\n[Pipeline] { (Speak)\n[Pipeline] echo\nHello, bitwiseman!\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n[Pipeline] // node\n[Pipeline] End of Pipeline\nFinished: SUCCESS\n\nWhen I pass the value \"silence\", the only change is \"Hello, bitwiseman!\" is not printed.\n\nSome might argue that the Pipeline code is a bit harder to understand on first reading.\nOthers would say the UI is just as confusing if not more so.\nEither way, the Pipeline representation is considerably more compact than the Jenkins UI presentation.\nPipeline also lets us add helpful comments, which we can’t do in the Freestyle UI.\nAnd we can easily put this Pipeline in a Jenkinsfile to be code-reviewed, checked-in, and versioned\nalong with the rest of our code.\n\nConditions\n\nThe previous example showed the \"Strings match\" condition and its Pipeline equivalent.\nLet’s look at couple more interesting conditions and their Jenkins Pipeline equivalents.\n\nBoolean condition\n\nYou might think that a boolean condition would be the simplest condition, but it isn’t.\nSince it works with string values from tokens, the Conditional BuildStep plugin offers\na number of ways to indicate true or false.\nTruth is a case insensitive match of one of the following:\n1 (the number one), Y, YES, T, TRUE, ON or RUN.\n\nPipeline can duplicate these, but depending on the scenario we might consider\nwhether a simpler expression would suffice.\n\nPipeline\n\n// Declarative //\nwhen {\n    // case insensitive regular expression for truthy values\n    expression { return token ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }\n}\nsteps {\n    /* step */\n}\n\n// Script //\n// case insensitive regular expression for truthy values\nif (token ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/) {\n    /* step */\n}\n\nLogical \"OR\" of conditions\n\nThis condition wraps other conditions.\nIt takes their results as inputs and performs a logical \"or\" of the results.\nThe AND and NOT conditions do the same, performing their respective operations.\n\nPipeline\n\n// Declarative //\nwhen {\n    // A or B\n    expression { return A || B }\n}\nsteps {\n    /* step */\n}\n\n// Script //\n// A or B\nif (A || B) {\n    /* step */\n}\n\nTokens\n\nTokens can be considerably more work than conditions.\nThere are more of them and they cover a much broader range of behaviors.\nThe previous example showed one of the simpler cases, accessing a build parameter,\nwhere the token has a direct equivalent in Pipeline.\nHowever, many tokens don’t have direct equivalents,\nsome take a parameters (adding to their complexity),\nand some provide information that is simply not exposed in Pipeline yet.\nSo, determining how to migrate tokens needs to be done on case-by-case basis.\n\nLet’s look at a few examples.\n\n\"FILE\" token\n\nExpands to the contents of a file. The file path is relative to the build workspace root.\n\n${FILE,path=\"PATH\"}\n\nThis token maps directly to the readFile step.\nThe only difference is the file path for readFile is relative to the\ncurrent working directory on the agent, but that is the workspace root by default.\nNo problem.\n\nPipeline\n\n// Declarative //\nwhen {\n    expression { return readFile('pom.xml').contains('mycomponent') }\n}\nsteps {\n    /* step */\n}\n\n// Script //\nif (readFile('pom.xml').contains('mycomponent')) {\n    /* step */\n}\n\nGIT_BRANCH\n\nExpands to the name of the branch that was built.\n\nParameters (descriptions omitted): all, fullName.\n\nThis information may or may not be exposed in Pipeline.  If you’re using the\nPipeline Multibranch plugin\nenv.BRANCH_NAME will give similar basic information, but doesn’t offer the parameters.\nThere are also\nseveral\nissues\nfiled around GIT_* tokens in Pipeline.\nUntil they are addressed fully, we can follow the pattern shown in\npipeline-examples,\nexecuting a shell to get the information we need.\n\nPipeline\n\nGIT_BRANCH = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n\nCHANGES_SINCE_LAST_SUCCESS\n\nDisplays the changes since the last successful build.\n\nParameters (descriptions omitted):\nreverse, format, changesFormat, showPaths, pathFormat,\nshowDependencies, dateFormat, regex, replace, default.\n\nNot only is the information provided by this token not exposed in Pipeline,\nthe token has ten optional parameters, including format strings and regular expression\nsearches. There are a number of ways we might get similar information in Pipeline.\nEach have their own particular limitations and ways they differ from the token output.\nThen we’ll need to consider how each of the parameters changes the output.\nIf nothing else, translating this token is clearly beyond the scope of this post.\n\nSlightly More Complex Example\n\nLet’s do one more example that shows some of these conditions and tokens.\nThis time we’ll perform different build steps depending on what branch we’re building.\nWe’ll take two build parameters: BRANCH_PATTERN and FORCE_FULL_BUILD.\nBased on BRANCH_PATTERN, we’ll checkout a repository.\nIf we’re building on the master branch or the user checked FORCE_FULL_BUILD,\nwe’ll call three other builds in parallel\n( full-build-linux, full-build-mac, and full-build-windows),\nwait for them to finish, and report the result.\nIf we’re not building on the master branch and the user did not check FORCE_FULL_BUILD,\nwe’ll print a message saying we skipped the full builds.\n\nFreestyle\n\nHere’s the configuration for Freestyle version.\n(It’s pretty long.  Feel free to skip down to the Pipeline version):\n\nThe Pipeline version of this job determines the GIT_BRANCH branch by\nrunning a shell script that returns the current local branch name.\nThis means that the Pipeline version must checkout to a local branch (not a detached head).\n\nFreestyle version of this job does not require a local branch, GIT_BRANCH is set automatically.\nHowever, to maintain functional parity, the Freestyle version of this job includes\n\"Checkout to Specific Local Branch\" as well.\n\nPipeline\n\nHere’s the equivalent Pipeline:\n\nFreestyle version of this job is not stored in source control.\n\nIn general, the Pipeline version of this job would be stored in source control,\nwould checkout scm, and would run that same repository.\nHowever, to maintain functional parity, the Pipeline version shown does a checkout\nfrom source control but is not stored in that repository.\n\nPipeline\n\n// Script //\nproperties ([\n    parameters ([\n        string (\n            defaultValue: '*',\n            description: '',\n            name : 'BRANCH_PATTERN'),\n        booleanParam (\n            defaultValue: false,\n            description: '',\n            name : 'FORCE_FULL_BUILD')\n    ])\n])\n\nnode {\n    stage ('Prepare') {\n        checkout([$class: 'GitSCM',\n            branches: [[name: \"origin/${BRANCH_PATTERN}\"]],\n            doGenerateSubmoduleConfigurations: false,\n            extensions: [[$class: 'LocalBranch']],\n            submoduleCfg: [],\n            userRemoteConfigs: [[\n                credentialsId: 'bitwiseman_github',\n                url: 'https://github.com/bitwiseman/hermann']]])\n    }\n\n    stage ('Build') {\n        GIT_BRANCH = 'origin/' + sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n        if (GIT_BRANCH == 'origin/master' || params.FORCE_FULL_BUILD) {\n\n            // Freestyle build trigger calls a list of jobs\n            // Pipeline build() step only calls one job\n            // To run all three jobs in parallel, we use \"parallel\" step\n            // https://jenkins.io/doc/pipeline/examples/#jobs-in-parallel\n            parallel (\n                linux: {\n                    build job: 'full-build-linux', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                },\n                mac: {\n                    build job: 'full-build-mac', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                },\n                windows: {\n                    build job: 'full-build-windows', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                },\n                failFast: false)\n\n        } else {\n            echo 'Skipped full build.'\n        }\n    }\n}\n// Declarative //\npipeline {\n    agent any\n    parameters {\n        string (\n            defaultValue: '*',\n            description: '',\n            name : 'BRANCH_PATTERN')\n        booleanParam (\n            defaultValue: false,\n            description: '',\n            name : 'FORCE_FULL_BUILD')\n    }\n\n    stages {\n        stage ('Prepare') {\n            steps {\n                checkout([$class: 'GitSCM',\n                    branches: [[name: \"origin/${BRANCH_PATTERN}\"]],\n                    doGenerateSubmoduleConfigurations: false,\n                    extensions: [[$class: 'LocalBranch']],\n                    submoduleCfg: [],\n                    userRemoteConfigs: [[\n                        credentialsId: 'bitwiseman_github',\n                        url: 'https://github.com/bitwiseman/hermann']]])\n            }\n        }\n\n        stage ('Build') {\n            when {\n                expression {\n                    GIT_BRANCH = 'origin/' + sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n                    return GIT_BRANCH == 'origin/master' || params.FORCE_FULL_BUILD\n                }\n            }\n            steps {\n                // Freestyle build trigger calls a list of jobs\n                // Pipeline build() step only calls one job\n                // To run all three jobs in parallel, we use \"parallel\" step\n                // https://jenkins.io/doc/pipeline/examples/#jobs-in-parallel\n                parallel (\n                    linux: {\n                        build job: 'full-build-linux', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                    },\n                    mac: {\n                        build job: 'full-build-mac', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                    },\n                    windows: {\n                        build job: 'full-build-windows', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                    },\n                    failFast: false)\n            }\n        }\n        stage ('Build Skipped') {\n            when {\n                expression {\n                    GIT_BRANCH = 'origin/' + sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n                    return !(GIT_BRANCH == 'origin/master' || params.FORCE_FULL_BUILD)\n                }\n            }\n            steps {\n                echo 'Skipped full build.'\n            }\n        }\n    }\n}\n\nConclusion\n\nAs I said before, the Conditional BuildStep plugin is great.\nIt provides a clear, easy to understand way to add conditional logic to any Freestyle job.\nBefore Pipeline, it was one of the few plugins to do this and it remains one of the most popular plugins.\nNow that we have Pipeline, we can implement conditional logic directly in code.\n\nThis is blog post discussed how to approach converting conditional build steps to Pipeline\nand showed a couple concrete examples.  Overall, I’m pleased with the results so far.\nI found scenarios which could not easily be migrated to Pipeline, but even those\nare only more difficult, rather than impossible.\n\nThe next thing to do is add a section to the\nJenkins Handbook documenting the Pipeline\nequivalent of all of the Conditions and the most commonly used Tokens.\nLook for it soon!\n\nLinks\n\nConditional BuildStep plugin","title":"Converting Conditional Build Steps to Jenkins Pipeline","tags":["pipeline","freestyle","plugins","conditional-build-step","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-01-20T00:00:00.000Z","id":"4d9875e3-c0ca-5b68-8c88-921f07767cc4","slug":"/blog/2017/01/20/blueocean-dev-log-jan2/","strippedHtml":"As we get closer to\nBlue Ocean\n1.0, which is planned for the end of March, I have started\nhighlighting\nsome of the good stuff that has been going on, and this week was a very busy week.\n\nA new Blue Ocean beta ( b18) was released with:\n\nParametrized pipelines are now supported!\n\ni18n improvements\n\nBetter support for matrix and the evil (yet somehow still used) Maven project type (don’t use it!)\n\nSSE fixes for IE and Edge browsers\n\nAn alpha release of the Visual Editor for Jenkinsfiles on top of\nDeclarative Pipeline\nhas snuck into the \"experimental\" update center. Andrew will be talking\nabout Declarative Pipelines at\nFOSDEM next week.\n\nParametrized Pipelines\n\nYou would know this if you followed\nThorsten’s twitter account.\n\nThat twitter account is mostly pics of Thorsten in running gear, but\noccasionally he announces new features as they land.\n\nWhen you run a pipeline that requires parameters, it will popup a dialog\nlike this no matter where you run it from. Most input types are supported\n(similar to input), with a planned extension point for custom input types.\n\nEditor\n\nA very-very early version of the\nBlue Ocean Pipeline Editor plugin\nthat will set your hair on fire of the editor is in the experimental update\ncenter.\n\nDeclarative pipelines are still not at version 1.0 status, but will be\nshortly. This editor allows you to roundtrip Jenkinsfiles written in this\nway, so they can be edited as text, or visually. The steps available are\ndiscovered form the installed plugins. One to watch.\n\nSo, what’s next?\n\nCreation of Git Pipelines, and likely GitHub too.\n\nShow parallel branches that aren’t in a stage visually\n\nShow stderr/out in test reports\n\nShow more information when Jenkins is \"busy\", such as when agents are coming online, in the Pipeline view\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!","title":"Blue Ocean Dev Log: January Week #3","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2017-01-27T00:00:00.000Z","id":"47fad7c8-e5e2-5ee5-bca8-79356edc804b","slug":"/blog/2017/01/27/blueocean-dev-log-jan4/","strippedHtml":"As we get closer to\nBlue Ocean\n1.0, which is planned for the end of March, I have\nstarted\nhighlighting\nsome of the good stuff that has been going on. This week was 10 steps forward, and about 1.5 backwards…​\n\nThere were two releases this week, b19 and b20. Unfortunately, b20 had to\nbe released shortly after b19 hit the Update Center as an incompatible API\nchange in a 3rd party plugin was discovered.\n\nRegardless, the latest b20 has a lot of important improvements, and some\nvery nice new features.\n\nA first cut of the \"Create Pipeline\" UX, seen above, allowing you to create Git\nbased Multibranch Pipelines like you have never seen before.\n\nHandling network disconnections from the browser to server (eg server\nrestart, network etc) gracefully with a nice UI.\n\nMore precise time information for steps and running Pipelines.\n\nMore information when a Pipeline is blocked on infrastructure, such as when\nthe Pipeline is waiting for an agent to become available.\n\nFixed a really embarrassing typo (a prize if you spot it).\n\nTest reports now include stdout and stderr\n\nBetter support for parallel visualisation, such as when a parallel step exists outside of a stage.\n\nThe Visual Editor also had another release, with the \"sheets\" visual component\nand better validation.\n\nCreation\n\nCurrently this is hidden behind a\nfeature toggle,\nto access append?blueCreate to the URL in you browser, and then press the\n\"New Pipeline\" button. Currently it lets you quickly create a Pipeline from\nGit, add credentials, etc, in a very nice UX. More SCM types are being added to\nsupport this.\n\nReconnect/disconnect\n\nAs Blue Ocean is a very \"live\" style of UX, if your network becomes\nunavailable, or the server is restarted, it is good to know in case you\nwere staring at the screen waiting for something to happen (don’t you have\nanything better to do??). When this happens, now you get a polite message,\nand then when the connection is restored, even if you are waiting for a\nPipeline run to finish, it will then notice this, and refresh things for\nyou:\n\nNote the opacity changes to make it clear even if you don’t see the little\nmessage. Very nice addition for those of us who work on a train far to often.\n\nUp next\n\nWhat is up next:\n\nSCM Api changes should land, making things much better for users of\nGitHub, Bitbucket, and many more.\n\nCreating Pipelines from GitHub (including automatic discovery).\n\nLots of fixes and enhancements in the Pipeline from all over the place\n\nMore ATH [ 1 ] coverage against regressions\n\nMore Visual Editor releases as Declarative Pipeline reaches version 1.0\n\nImprovements to i18n\n\nThere was also a couple of \"alternative beta\" releases in the \"Experimental\nUpdate Center\" to help test the new SCM API improvements for better use of\nGitHub APIs (based on\nthis branch)\nI do not recommend trying this branch unless you know what you are doing,\nas this will migrate some data, but help testing it would be appreciated!\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!\n\n1. Acceptance Test Harness","title":"Blue Ocean Dev Log: January Week #4","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2017-02-01T00:00:00.000Z","id":"aa509c7b-3f24-5cce-8519-dda84cd1233e","slug":"/blog/2017/02/01/pipeline-scalability-best-practice/","strippedHtml":"This is a guest post by Sam Van Oort,\nSoftware Engineer at CloudBees and contributor to\nthe Jenkins project.\n\nToday I’m going to show you best practices to write scalable and robust Jenkins Pipelines. This is drawn from a\ncombination of work with the internals of Pipeline and observations with large-scale users.\n\nPipeline code works beautifully for its intended role of automating\nbuild/test/deploy/administer tasks.  As it is pressed into more complex roles\nand unanticipated uses, some users hit issues.  In these cases, applying the\nbest practices can make the difference between:\n\nA single controller running\nhundreds\nof concurrent builds on low end hardware (4 CPU cores and 4 GB of\nheap)\n\nRunning a couple dozen builds and bringing a controller to its knees or\ncrashing it…​even with 16+ CPU cores and 20+ GB of heap!\n\nThis has been seen in the wild.\n\nFundamentals\n\nTo understand Pipeline behavior you must understand a few points about\nhow it executes.\n\nExcept for the steps themselves, all of the Pipeline logic, the Groovy conditionals, loops, etc execute on the controller. Whether simple or complex! Even inside a node block!\n\nSteps may use executors to do work where appropriate, but each\nstep has a small on-controller overhead too.\n\nPipeline code is written as Groovy but the execution model is\nradically transformed at compile-time to Continuation Passing Style\n(CPS).\n\nThis transformation provides valuable safety and durability\nguarantees for Pipelines, but it comes with trade-offs:\n\nSteps can invoke Java and execute fast and efficiently, but Groovy\nis much slower to run than normal.\n\nGroovy logic requires far more memory, because an object-based\nsyntax/block tree is kept in memory.\n\nPipelines persist the program and its state frequently to be able to\nsurvive failure of the controller.\n\nFrom these we arrive at a set of best practices to make pipelines more\neffective.\n\nBest Practices For Pipeline Code\n\nThink of Pipeline code as glue: just enough Groovy code to connect\ntogether the Pipeline steps and integrate tools, and no more.\n\nThis makes code easier to maintain, more robust against bugs, and\nreduces load on controllers.\n\nKeep it simple: limit the amount of complex logic embedded in the\nPipeline itself (similarly to a shell script) and avoid treating it as a\ngeneral-purpose programming language.\n\nPipeline restricts all variables to Serializable types, so keeping\nPipeline logic simple helps avoid a NotSerializableException - see\nappendix at the bottom.\n\nUse @NonCPS -annotated functions for slightly more complex work.\nThis means more involved processing, logic, and transformations. This\nlets you leverage additional Groovy & functional features for more\npowerful, concise, and performant code.\n\nThis still runs on controllers so be mindful of complexity, but is much\nfaster than native Pipeline code because it doesn’t provide durability\nand uses a faster execution model. Still, be mindful of the CPU cost and\noffload to executors for complex work (see below).\n\n@NonCPS functions can use a much broader subset of the Groovy\nlanguage, such as iterators and functional features, which makes them\nmore terse and fast to write.\n\n@NonCPS functions should not use Pipeline steps internally, however\nyou can store the result of a Pipeline step to a variable and use it\nthat as the input to a @NonCPS function.\n\nGotcha: It’s not guaranteed that use of a step will generate an\nerror (there is an open RFE to implement that), but you should not rely\non that behavior. You may see improper handling of exceptions, in\nparticular.\n\nWhile normal Pipeline is restricted to serializable local variables\n(see appendix at bottom), @NonCPS functions can use more complex,\nnonserializable types internally (for example regex matchers, etc). Parameters\nand return types should still be Serializable, however.\n\nGotcha: improper usages are not guaranteed to raise an error with\nnormal Pipeline (optimizations may mask the issue), but it is unsafe to\nrely on this behavior.\n\nPrefer external scripts/tools for complex or CPU-expensive\nprocessing rather than Groovy language features. This offloads work\nfrom the controller to external executors, allowing for easy scale-out of\nhardware resources. It is also generally easier to test because these\ncomponents can be tested in isolation without the full on-controller\nexecution environment.\n\nMany software vendors will provide easy command-line clients for\ntheir tools in various programming languages. These are often robust,\nperformant, and easy to use. Plugins offer another option (see below).\n\nShell or batch steps are often the easiest way to integrate these\ntools, which can be written in any language. For example: sh “java -jar\nclient.jar $endPointUrl $inputData” for a Java client, or sh “python\njiraClient.py $issueId $someParam” for a Python client.\n\nGotcha: especially avoid Pipeline XML or JSON parsing using Groovy’s XmlSlurper and JsonSlurper!  Strongly prefer command-line tools or scripts.\n\nThe Groovy implementations are complex and as a result more brittle in Pipeline use.\n\nXmlSlurper and JsonSlurper can carry a high memory and CPU cost in pipelines\n\nxmllint and xmlstartlet are command-line tools offering XML extraction via xpath\n\njq offers the same functionality for JSON\n\nThese extraction tools may be coupled to curl or wget for fetching information from an HTTP API\n\nExamples of other places to use command-line tools:\n\nTemplating large files\n\nNontrivial integration with external APIs (for bigger vendors,\nconsider a Jenkins plugin if a quality offering exists)\n\nSimulations/complex calculations\n\nBusiness logic\n\nConsider existing plugins for external integrations. Jenkins has a\nwealth of plugins, especially for source control, artifact management,\ndeployment systems, and systems automation. These can greatly reduce the\namount of Pipeline code to maintain. Well-written plugins may be\nfaster and more robust than Pipeline equivalents.\n\nConsider both plugins and command-line clients (above) — one may be\neasier than the other.\n\nPlugins may be of widely varying quality. Look at the number of installations and how frequently and recently updates appear in the changelog. Poorly-maintained plugins\nwith limited installations may actually be worse than writing a little\ncustom Pipeline code.\n\nAs a last resort, if there is a good-quality plugin that is not\nPipeline-enabled, it is fairly easy to write a Pipeline wrapper to\nintegrate it or write a custom step that will invoke it.\n\nAssume things will go wrong: don’t rely on workspaces being clean\nof the remnants from previous executions, clean explicitly where needed.\nMake use of timeouts and retry steps (that’s what they’re there for).\n\nWithin a git repository, git clean -fdx is a good way to\naccomplish this and reduces the amount of SCM cloning\n\nDO use parameterized Pipelines and variables to make your Pipeline\nscripts more reusable. Passing in parameters is especially helpful for\nhandling different environments and should be preferred to applying\nconditional lookup logic; however, try to limit parameterized pipelines invoking each other.\n\nTry to limit business logic embedded in Pipelines. To some extent\nthis is inevitable, but try to focus on tasks to complete instead,\nbecause this yields more maintainable, reusable, and often more\nperformant Pipeline code.\n\nOne code smell that points to a problem is many hard-coded\nconstants. Consider taking advantage of the options above to refactor\ncode for better composability.\n\nFor complex cases, consider using Jenkins integration options\n(plugins, Jenkins API calls, invoking input steps externally) to offload\nimplementation of more complex business rules to an external system if\nthey fit more naturally there.\n\nPlease, think of these as guidelines, not strict rules – Jenkins\nPipeline provides a great deal of power and flexibility, and it’s there\nto be used.\n\nBreaking enough of these rules at scale can cause controllers to fail by\nplacing an unsustainable load on them.\n\nFor additional guidance, I also recommend\nthis\nJenkins World talk\non how to engineer Pipelines for speed and performance:\n\nAppendix: Serializable vs. Non-Serializable Types:\n\nTo assist with Pipeline development, here are common serializable and\nnon-serializable types, to assist with deciding if your logic can be CPS\nor should be in a @NonCPS function to avoid issues.\n\nCommon Serializable Types (safe everywhere):\n\nAll primitive types and their object wrappers: byte, boolean, int,\ndouble, short, char\n\nStrings\n\nenums\n\nArrays of serializable types\n\nArrayLists and normal Groovy Lists\n\nSets: HashSet\n\nMaps: normal Groovy Map, HashMap, TreeMap\n\nExceptions\n\nURLs\n\nDates\n\nRegex Patterns (compiled patterns)\n\nCommon non-Serializable Types (only safe in @NonCPS functions):\n\nIterators: this is a common problem. You need to use C-style loop, i.e.\nfor(int i=0; i\n\nRegex Matchers (you can use the\nbuilt-in functions in String, etc, just not the Matcher itself)\n\nImportant: JsonObject, JsonSlurper, etc in Groovy 2+ (used in some 2.x+\nversions of Jenkins).\n\nThis is due to an internal implementation change — earlier versions may serialize.","title":"Best Practices for Scalable Pipeline Code","tags":["pipeline","performance","scalability"],"authors":[{"avatar":null,"blog":null,"github":"svanoort","html":"","id":"svanoort","irc":null,"linkedin":null,"name":"Sam Van Oort","slug":"/blog/authors/svanoort/","twitter":null}]}},{"node":{"date":"2017-02-01T00:00:00.000Z","id":"b68e4a15-e617-5570-bc2d-5ff59160e388","slug":"/blog/2017/02/01/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.44 and 2.32.2, that fix a high severity and several medium and low severity issues.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\nI strongly recommend you read these documents, as there are a few possible side effects of these fixes.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-02-03T00:00:00.000Z","id":"e40d65de-fedc-5955-acd7-b2f63eafaf7f","slug":"/blog/2017/02/03/blueocean-devlog-feb/","strippedHtml":"With only a couple of months left before\nBlue Ocean\n1.0, which is planned for the end of March, I have\nbeen\nhighlighting\nsome of the good work being finished up by the developers hacking on Blue\nOcean.\n\nThis week was a grab bag of important behind-the-scenes features and finalising\nthe preview of the editor. The merge of the SCM API changes also made it in.\nThe editor has the new sheets style of editing (there will be blogs and more on\nthis in the next few weeks):\n\nSome highlights:\n\nFix to async loading of resources like translations, so screens don’t\n\"flash\" when they are loaded (i18n improvement)\n\nLinks in notifications can be configured to point to classic or\nBlue Ocean screens\n\nTime reporting works better when browser clock is out of sync with\nserver\n\nSECURITY-380 was backported into a small fix for those that aren’t\nrunning the latest LTS (but you should ideally be running it)\n\nSCM API changes finally landed - this will be in beta 22 which should\nhit the update centers soon. This should make things work better with\nGitHub rate limits.\n\nBeta 21 was released\n\nThe editor reached \"preview\" release state ready for use with the newly\nannounced Declarative Pipeline stuff.\n\nAlso, a reference to Australian pop culture had to be removed, sadly.\n\nUp Next:\n\nSome cosmetic changes around headers to make it much nicer and clearer\n\nFavorite improvements\n\nGitHub Org-based Pipeline creation\n\nEditor available in the general update center\n\nBeta 22 with SCM improvements and no more GitHub rate limit hassles\n\nMany fixes\n\nImprovements to the Acceptance Test Harness to reduce the number of false-positives.\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!","title":"Blue Ocean Dev Log: February Week #1","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2017-02-03T00:00:00.000Z","id":"eba78b86-bbf2-5022-a3c9-27efc09a20e1","slug":"/blog/2017/02/03/declarative-pipeline-ga/","strippedHtml":"This is a guest post by\nPatrick Wolf,\nDirector of Product Management at\nCloudBees\nand contributor to\nthe Jenkins project.\n\nI am very excited to announce the addition of\nDeclarative Pipeline syntax\n1.0 to\nJenkins Pipeline.\nWe think this new syntax will enable everyone involved in DevOps, regardless of expertise,\nto participate in the continuous delivery process. Whether creating, editing or reviewing\na pipeline, having a straightforward structure helps to understand and predict the\nflow of the pipeline and provides a common foundation across all pipelines.\n\nPipeline as Code\n\nPipeline as Code was one of the pillars of the Jenkins 2.0 release and an\nessential part of implementing continuous delivery (CD). Defining all of the\nstages of an application’s CD pipeline within a Jenkinsfile and checking it\ninto the repository with the application code provides all of the benefits\ninherent in source control management (SCM):\n\nRetain history of all changes to Pipeline\n\nRollback to a previous Pipeline version\n\nView diffs and merge changes to the Pipeline\n\nTest new Pipeline steps in branches\n\nRun the same Pipeline on a different Jenkins server\n\nGetting Started with Declarative Pipeline\n\nWe recommend people begin using it for all their Pipeline definitions in Jenkins.\nThe plugin has been available for use and testing starting with the 0.1 release that was debuted at\nJenkins World\nin September. Since then, it has already been installed in over 5,000 Jenkins\nenvironments.\n\nIf you haven’t tried Pipeline or have considered Pipeline in the past, I\nbelieve this new syntax is much more approachable with an easier adoption curve\nto quickly realize all of the benefits of Pipeline as Code. In addition, the\npre-defined structure of Declarative makes it possible to create and edit\nPipelines with a graphical user interface (GUI). The Blue Ocean team is\nactively working on a\nVisual Pipeline Editor\nwhich will be included in an upcoming release.\n\nIf you have already begun using Pipelines in Jenkins, I believe that this new\nalternative syntax can help expand that usage.\n\nThe original syntax for defining Pipelines in Jenkins is a Groovy DSL that\nallows most of the features of full\nimperative programming.\n\nThis syntax is still fully supported and is now\nreferred to as \"Scripted Pipeline Syntax\" to distinguish it from \"Declarative\nPipeline Syntax.\" Both use the same underlying execution engine in Jenkins and\nboth will generate the same results in\nPipeline Stage View\nor Blue Ocean visualizations. All existing\nPipeline steps,\nGlobal Variables, and\nShared Libraries\ncan be used in either. You can now create more cookie-cutter Pipelines and\nextend the power of Pipeline to all users regardless of Groovy expertise.\n\nDeclarative Pipeline Features\n\nSyntax Checking\n\nImmediate runtime syntax checking with explicit error messages.\n\nAPI endpoint for linting a Jenkinsfile.\n\nCLI command to lint a Jenkinsfile.\n\nDocker Pipeline integration\n\nRun all stages in a single container.\n\nRun each stage in a different container.\n\nEasy configuration\n\nQuickly define parameters for your Pipeline.\n\nQuickly define environment variables and credentials for your Pipeline.\n\nQuickly define options (such as timeout, retry, build discarding) for your Pipeline.\n\nRound trip editing with the Visual Pipeline Editor (watch for preview release shortly).\n\nConditional actions\n\nSend notifications or take actions depending upon success or failure.\n\nSkip stages based on branches, environment, or other Boolean expression.\nrelease shortly)\n\nWhere Can I Learn More?\n\nBe on the lookout for future blog posts detailing specific examples of\nscenarios or features in Declarative Pipeline. Andrew Bayer, one of the primary\ndevelopers behind Declarative Pipeline, will be presenting at\nFOSDEM\nin Brussels, Belgium this weekend. We have also scheduled an online\nJenkins Meetup (JAM)\nlater this month to demo the features of Declarative Pipeline and give a sneak\npeek at the upcoming Blue Ocean Pipeline Editor.\n\nIn the meantime, all the\nPipeline documentation\nhas been updated to incorporate a\nGuided Tour,\nand a\nSyntax Reference\nwith numerous examples to help you get on your way to using Pipeline.  Simply\nupgrade to the latest version, 2.5 or later of the Pipeline in Jenkins to\nenable all of these great features.","title":"Declarative Pipeline Syntax 1.0 is now available","tags":["pipeline","blueocean"],"authors":[{"avatar":null,"blog":null,"github":"HRMPW","html":"","id":"hrmpw","irc":null,"linkedin":null,"name":"Patrick Wolf","slug":"/blog/authors/hrmpw/","twitter":"hrmpw"}]}},{"node":{"date":"2017-02-06T00:00:00.000Z","id":"46885786-902f-55cb-b263-cae8df8f0611","slug":"/blog/2017/02/06/scm-api-2-take2/","strippedHtml":"In January we\nannounced the release of SCM API 2.0.\nAfter the original release was published we identified four new high-impact\nissues.  We decided to remove the new versions of the plugins from the update\ncenter until those issues could be resolved. The issues have now been resolved\nand the plugins are now available from the update center.\n\nSummary for busy Jenkins Administrators\n\nUpgrading should make multi-branch projects much better.  When you are ready to\nupgrade you must ensure that you upgrade all the required plugins.  If you miss\nsome, just upgrade them and restart to fix the issue. And of course, it’s\nalways a good idea to take a backup of your JENKINS_HOME before upgrading any\nplugins.\n\nIn the list below, version numbers in bold indicate a change from the\noriginal version in the\noriginal announcement\n\nFolders Plugin\n\n5.17 or newer\n\nSCM API Plugin\n\n2.0.2 or newer\n\nBranch API Plugin\n\n2.0.2 or newer\n\nGit Plugin\n\nThis depends on the exact release line of the Git plugin that you are using.\n\nFollowing the 2.6.x release line: 2.6.4 or newer\n\nFollowing the 3.0.x release line ( recommended): 3.0.4 or newer\n\nMercurial Plugin\n\n1.58 or newer\n\nGitHub Branch Source Plugin\n\n2.0.1 or newer\n\nBitBucket Branch Source Plugin\n\n2.0.2 or newer\n\nGitHub Organization Folders Plugin\n\n1.6\n\nPipeline Multibranch Plugin\n\n2.12 or newer\n\nIf you are using the Blue Ocean plugin\n\nBlue Ocean Plugin\n\n1.0.0-b22 or newer\n\nOther plugins that may require updating:\n\nGitHub API Plugin\n\n1.84 or newer\n\nGitHub Plugin\n\n1.25.0 or newer\n\nIf you upgrade to Branch API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins and you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.\n\nThe solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.\n\nAfter an upgrade you will see the data migration warning (see the screenshot in\nJENKINS-41608 for an\nexample) this is normal and expected.  The unreadable data will be removed by\nthe next scan / index or can be removed manually using the Discard Unreadable\nData button.  The warning will disappear on the next restart after the\nunreadable data has been removed.\n\nPlease update to the versions listed above. If you want to know more about the\nissues and how they were resolved, see the next section.\n\nAnalysis of the issues\n\nThe issues described below are resolved with these plugin releases:\n\nFolders Plugin: 5.17\n\nSCM API Plugin: 2.0.2\n\nBranch API Plugin: 2.0.2\n\nGit Plugin: Either 2.6.4 or 3.0.4\n\nGitHub Branch Source Plugin: 2.0.1\n\nBitBucket Branch Source Plugin: 2.0.2\n\nPipeline Multibranch Plugin: 2.12\n\nJENKINS-41121: GitHub Branch Source upgrade can cause a lot of rebuilds :\n\nMigration of GitHub branches from 1.x to 2.x resulted in a change of the\nimplementation class used to identify branches.  Some other other bugs in\nBranch API had been fixed and the combined effect resulted in a rebuild of all\nGitHub Branches (not PRs) after an upgrade to GitHub Branch Source Plugin\n2.0.0.  This rebuild was referred to as a \"build storm\".\n\nResolution:\n\nThe SCM API plugin was enhanced to add an extension point that allows for a second round of data migration when upgrading.\n\nThe second round of data migration allows plugins implementing the SCM API contract to fix implementation class issues in context.\n\nThe Branch API plugin was enhanced to use this new extension point.\n\nThe GitHub Branch Source plugin was enhanced to provide an implementation of this extension point.\n\nJENKINS-41255: Upgrading from a navigator that did not assign consistent source ids to a version that does assign consistent source ids causes a build storm on first scan :\n\nThe GitHub Branch Source and BitBucket Branch Source plugins in 1.x were not\nassigning consistent IDs to multi-branch projects discovered in an Organization\nFolder.  Both plugins were fixed in 2.0.0 to assign consistent IDs as a change\nof ID would result in a rebuild of all projects.  What was missed is that the\nvery first scan of an Organization Folder after an upgrade will change the\nrandomly assigned ID assigned by the 1.x plugins into the consistent ID\nassigned by the 2.0.0 plugins and consequently trigger a rebuild of all\nbranches. This rebuild was referred to as a \"build storm\".\n\nResolution:\n\nThe Branch API plugin was enhanced to detect the case where a branch source has\nbeen changed but the change is only changing the ID.  When such changes are\nidentified, the downstream references of the ID are all updated which will\nprevent a build storm.\n\nJENKINS-41313: On first index after upgrade to 2.0.0 all open PRs are rebuilt :\n\nThe BitBucket Branch Source 1.x did not store all the information about PRs\nthat is required by the SCM API 2.0.x model.  This could well have resulted in\nsubtle effects when manually triggering a rebuild of a merge PR if the PR’s\ntarget branch has been modified after the PR branch was first detected by\nJenkins. Consequently, as the information is required, BitBucket Branch Source\nplugin 2.0.0 populated the information with dummy values which would force the\ncorrect information to be retrieved.  The side-effect is that all PR branches\nwould be rebuilt.\n\nResolution:\n\nThe changes in SCM API 2.0.2 introduced to resolve JENKINS-41121 provided a path to resolve this issue without causing a rebuild of all PR branches.\n\nThe BitBucket Branch Source plugin was enhanced to provide an implementation of the new SCM API extension point that connects to BitBucket and retrieves the missing information.\n\nJENKINS-41124: Can’t get a human readable job name anymore :\n\nDuring initial testing of the Branch API 2.0.0 release an issue was identified\nwith how Organization Folders handled unusual names.  None of the existing\nimplementations of the SCMNavigator API could generate such unusual names due\nto form validation on GitHub / BitBucket replacing unusual characters with -\nwhen creating a repository.\n\nIt would be irresponsible to rely on external services sanitizing their input\ndata for the correct operation of Organization Folders.  Consequently, in\nBranch API 2.0.0 the names were all transformed into URL safe names, with the\noriginal URLs still resolving to the original projects so that any existing\nsaved links would remain functional.\n\nQuite a number of people objected to this change of URL scheme.\n\nResolution:\n\nThere has been a convention in Jenkins that the on-disk storage structure for\njobs mirrors the URL structure. This is only a convention and there is nothing specific in the code that\nmandates following the convention.\n\nThe Folders Plugin was enhanced to allow for computed folders (where the item\nnames are provided by an external source) to provide a strategy to use when\ngenerating the on-disk storage names as well as the URL component names for\nthe folder’s child items.\n\nThe Branch API plugin was enhanced to use this new strategy for name transformation.\n\nThe net effect of this change is that the URLs remain the same as for 1.x but\nthe on-disk storage uses transformed names that are future proofed against\nany new SCMNavigator implementations where the backing service allows names\nthat are problematic to use as filesystem directory names.\n\nSide-effect:\n\nThe Branch API 2.0.0 approach handled the transformation of names by renaming the items using the Jenkins Item rename API.\n\nThe Branch API 2.0.2 approach does not rename the child items as it is only the on-disk storage location that is moved.\n\nThis means that the Jenkins Item rename API cannot be used.\n\nAt this time, the only known side-effect is in the Job Configuration History plugin.\nThe configuration history of each child item will still be tracked going\nforward after the upgrade.  The pre-upgrade configuration history is also\nretained.  Because the Jenkins Item rename API cannot be used to flag the\nconfiguration file location change, there is no association between the\npre-upgrade history chain and the post-upgrade history chain.","title":"SCM API 2.0 Release Take 2","tags":["development","plugins"],"authors":[{"avatar":null,"blog":null,"github":"stephenc","html":"","id":"stephenc","irc":null,"linkedin":null,"name":"Stephen Connolly","slug":"/blog/authors/stephenc/","twitter":"connolly_s"}]}},{"node":{"date":"2017-02-07T00:00:00.000Z","id":"df12ba62-13a1-5a1b-88f3-afc58f167e79","slug":"/blog/2017/02/07/declarative-maven-project/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nDeclare Your Pipelines!\nDeclarative Pipeline 1.0 is here!\nThis is first in a series of blog posts that will show some of the cool features of\nDeclarative Pipeline.\nFor several of these posts, I’ll be revisiting some of my\nprevious posts\non using various plugins with (Scripted) Pipeline,\nand seeing how those are implemented in Declarative Pipeline.\n\nTo start though, let’s get familiar with the basic structure of a Declarative Pipeline\nby creating a simple Pipeline for a Maven-based Java project - the\nJenkins JUnit plugin.\nWe’ll create a minimal Declarative Pipeline,\nadd the settings needed to install Maven and the JDK,\nand finally we’ll actually run Maven to build the plugin.\n\nSet up\n\nWith Declarative, it is still possible to run Pipelines edited directly in the\nJenkins web UI, but one of the key features of \"Pipeline as Code\" is\nchecking-in and being able to track changes.  For this post, I’m going to use\nthe\nblog/add-declarative-pipeline\nbranch of\nmy fork of the JUnit plugin.\nI’m going to set up a Multi-branch Pipeline and point it at my repository.\n\nI’ve also set this Pipeline’s Git configuration to automatically \"clean after\ncheckout\" and to only keep the ten most recent runs.\n\nWriting a Minimal Pipeline\n\nAs has been said before, Declarative Pipeline provides a more structured,\n\"opinionated\" way to create Pipelines. I’m going to start by creating a minimal\nDeclarative Pipeline and adding it to my branch.  Below is a minimal Pipeline\n(with annotations) that just prints a message:\n\n// Declarative //\npipeline { (1)\nagent any // <2> (3)\nstages { (4)\nstage('Build') { (5)\nsteps { (6)\necho 'This is a minimal pipeline.' (7)\n}\n        }\n    }\n}\n// Scripted //\nnode { (2)\ncheckout scm (3)\nstage ('Build') { (5)\necho 'This is a minimal pipeline.' (6)\n}\n}\n\n1\nAll Declarative Pipelines start with a pipeline section.\n\n2\nSelect where to run this Pipeline, in this case \"any\" agent, regardless of label.\n\n3\nDeclarative automatically performs a checkout of source code on the agent,\nwhereas Scripted Pipeline users must explicitly call checkout scm,\n\n4\nA Declarative Pipeline is defined as a series of stages.\n\n5\nRun the \"Build\" stage.\n\n6\nEach stage in a Declarative Pipeline runs a series of steps.\n\n7\nRun the echo step to print a message in the Console Output.\n\nIf you are familiar with Scripted Pipeline, you can toggle the above\nDeclarative code sample to show the Scripted equivalent.\n\nOnce I add the Pipeline above to my Jenkinsfile and run \"Branch Indexing\", my\nJenkins will pick it up and run run it.  We see that the Declarative Pipeline\nhas added stage called \"Declarative: Checkout SCM\":\n\nThis a \"dynamic stage\", one of several the kinds that Declarative Pipeline adds\nas needed for clearer reporting.  In this case, it is a stage in which the\nDeclarative Pipeline automatically checkouts out source code on the agent.\n\nAs you can see above, we didn’t have to tell it do any of this,\n\nConsole Output\n\n[Pipeline] node\nRunning on osx_mbp in /Users/bitwiseman/jenkins/agents/osx_mbp/workspace/blog_add-declarative-pipeline\n[Pipeline] {\n[Pipeline] stage\n[Pipeline] { (Declarative: Checkout SCM)\n[Pipeline] checkout\nCloning the remote Git repository\n{ ... truncated 20 lines ... }\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Build)\n[Pipeline] echo\nThis is a minimal pipeline\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n[Pipeline] // node\n[Pipeline] End of Pipeline\nFinished: SUCCESS\n\nDeclarative Pipeline syntax is a little more verbose than the equivalent Scripted Pipeline,\nbut the added detail gives a clearer, more consistent view of what the Pipeline is supposed to do.\nIt also gives us a structure into which we can add more configuration details about this Pipeline.\n\nAdding Tools to Pipeline\n\nThe next thing we’ll add in this Pipeline is a tools section to let us use\nMaven.  The tools section is one of several sections we can add under\npipeline, which affect the configuration of the rest of the Pipeline.  (We’ll\nlook at the others, including agent, in later posts.) Each tool entry will\nmake whatever settings changes, such as updating PATH or other environment\nvariables, to make the named tool available in the current pipeline.  It will\nalso automatically install the named tool if that tool is configured to do so\nunder \"Managing Jenkins\" → \"Global Tool Configuration\".\n\n// Declarative //\npipeline {\n    agent any\n    tools { (1)\nmaven 'Maven 3.3.9' (2)\njdk 'jdk8' (3)\n}\n    stages {\n        stage ('Initialize') {\n            steps {\n                sh '''\n                    echo \"PATH = ${PATH}\"\n                    echo \"M2_HOME = ${M2_HOME}\"\n                ''' (4)\n}\n        }\n\n        stage ('Build') {\n            steps {\n                echo 'This is a minimal pipeline.'\n            }\n        }\n    }\n}\n// Scripted Not Defined //\n\n1\ntools section for adding tool settings.\n\n2\nConfigure this Pipeline to use the Maven version matching \"Maven 3.3.9\"\n(configured in \"Managing Jenkins\" → \"Global Tool Configuration\").\n\n3\nConfigure this Pipeline to use the Maven version matching \"jdk8\"\n(configured in \"Managing Jenkins\" → \"Global Tool Configuration\").\n\n4\nThese will show the values of PATH and M2_HOME environment variables.\n\nWhen we run this updated Pipeline the same way we ran the first, we see that\nthe Declarative Pipeline has added another stage called \"Declarative: Tool\nInstall\": In the console output, we see that during this particular stage \"Maven 3.3.9\" gets installed,\nand the PATH and M2_HOME environment variables are set:\n\nConsole Output\n\n{ ... truncated lines ... }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Declarative: Tool Install)\n[Pipeline] tool\nUnpacking https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.3.9/apache-maven-3.3.9-bin.zip\nto /Users/bitwiseman/jenkins/agents/osx_mbp/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.3.9\non osx_mbp\n[Pipeline] envVarsForTool\n[Pipeline] tool\n[Pipeline] envVarsForTool\n[Pipeline] }\n[Pipeline] // stage\n{ ... }\nPATH = /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/bin:/Users/bitwiseman/jenkins/agents/osx_mbp/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.3.9/bin:...\nM2_HOME = /Users/bitwiseman/jenkins/agents/osx_mbp/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.3.9\n{ ... }\n\nRunning a Maven Build\n\nFinally, running a Maven build is trivial.  The tools section already added\nMaven and JDK8 to the PATH, all we need to do is call mvn install.  It\nwould be nice if I could split the build and the tests into separate stages,\nbut Maven is famous for not liking when people do that, so I’ll leave it alone\nfor now.\n\nInstead, let’s load up the results of the build using the JUnit plugin,\nhowever the version that was just built, sorry.\n\n// Declarative //\npipeline {\n    agent any\n    tools {\n        maven 'Maven 3.3.9'\n        jdk 'jdk8'\n    }\n    stages {\n        stage ('Initialize') {\n            steps {\n                sh '''\n                    echo \"PATH = ${PATH}\"\n                    echo \"M2_HOME = ${M2_HOME}\"\n                '''\n            }\n        }\n\n        stage ('Build') {\n            steps {\n                sh 'mvn -Dmaven.test.failure.ignore=true install' (1)\n}\n            post {\n                success {\n                    junit 'target/surefire-reports/**/*.xml' (2)\n}\n            }\n        }\n    }\n}\n// Scripted //\nnode {\n    checkout scm\n\n    String jdktool = tool name: \"jdk8\", type: 'hudson.model.JDK'\n    def mvnHome = tool name: 'mvn'\n\n    /* Set JAVA_HOME, and special PATH variables. */\n    List javaEnv = [\n        \"PATH+MVN=${jdktool}/bin:${mvnHome}/bin\",\n        \"M2_HOME=${mvnHome}\",\n        \"JAVA_HOME=${jdktool}\"\n    ]\n\n    withEnv(javaEnv) {\n    stage ('Initialize') {\n        sh '''\n            echo \"PATH = ${PATH}\"\n            echo \"M2_HOME = ${M2_HOME}\"\n        '''\n    }\n    stage ('Build') {\n        try {\n            sh 'mvn -Dmaven.test.failure.ignore=true install'\n        } catch (e) {\n            currentBuild.result = 'FAILURE'\n        }\n    }\n    stage ('Post') {\n        if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n            junit 'target/surefire-reports/**/*.xml' (2)\n}\n    }\n}\n\n1\nCall mvn, the version configured by the tools section will be first on the path.\n\n2\nIf the maven build succeeded, archive the JUnit test reports for display in the Jenkins web UI.\nWe’ll discuss the\npost section in detail in the next blog post.\n\nIf you are familiar with Scripted Pipeline, you can toggle the above\nDeclarative code sample to show the Scripted equivalent.\n\nBelow is the console output for this last revision:\n\nConsole Output\n\n{ ... truncated lines ... }\n+ mvn install\n[INFO] Scanning for projects...\n[WARNING] The POM for org.jenkins-ci.tools:maven-hpi-plugin:jar:1.119 is missing, no dependency information available\n[WARNING] Failed to build parent project for org.jenkins-ci.plugins:junit:hpi:1.20-SNAPSHOT\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building JUnit Plugin 1.20-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- maven-hpi-plugin:1.119:validate (default-validate) @ junit ---\n[INFO]\n[INFO] --- maven-enforcer-plugin:1.3.1:display-info (display-info) @ junit ---\n[INFO] Maven Version: 3.3.9\n[INFO] JDK Version: 1.8.0_92 normalized as: 1.8.0-92\n[INFO] OS Info: Arch: x86_64 Family: mac Name: mac os x Version: 10.12.3\n[INFO]\n{ ... }\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 03:25 min\n[INFO] Finished at: 2017-02-06T22:43:41-08:00\n[INFO] Final Memory: 84M/1265M\n[INFO] ------------------------------------------------------------------------\n\nConclusion\n\nThe new Declarative syntax is a significant step forward for Jenkins Pipeline.\nIt trades some verbosity and constraints for much greater clarity and\nmaintainability.  In the coming weeks, I’ll be adding new blog posts\ndemonstrating various features of the Declarative syntax along with some recent\nJenkins Pipeline improvements.\n\nLinks\n\nDeclarative Pipeline\n\nDeclarative Pipeline Syntax Reference\n\nJenkins JUnit plugin","title":"Declarative Pipeline for Maven Projects","tags":["tutorial","pipeline","declarative","maven","java"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-02-07T00:00:00.000Z","id":"3d993b8f-320e-5137-8e5b-be2cc83d0195","slug":"/blog/2017/02/07/gsoc2017-announcement/","strippedHtml":"On behalf of the GSoC Org Admin team I am happy to announce that we are going to apply to\nGoogle Summer of Code (GSoC) again this year.\nIn GSoC high-profile students work in open-source projects for several months under mentorship of organization members.\n\nWe are looking for mentors and project ideas.\nSo yes, we are looking for you :)\n\nConditions\n\nAs a mentor, you will be asked to:\n\nlead the project in the area of their interest\n\nactively participate in the project during student selection, community bonding and coding phases (March - August)\n\nwork in teams of 2+ mentors per 1 each student\n\ndedicate a consistent and significant amount of time, especially during the coding phase ( ~5 hours per week in the team of two mentors)\n\nMentorship does not require strong expertise in Jenkins plugin development.\nThe main objective is to guide students and to get them involved into the Jenkins community.\nIf your mentor team requires any specific expertise, GSoC org admins will do their best in order to find advisors.\n\nWhat do you get?\n\nA student, who works within the area of your interest on full-time for several months\n\nJoint projects with Jenkins experts, lots of fun and ability to study something together\n\nLimited edition of swags from Google and Jenkins project\n\nMaybe: Participation in GSoC Mentor Summit in California with expense coverage (depends on project results and per-project quotas)\n\nRequirements\n\nYou are:\n\npassionate about Jenkins\n\ninterested in being a mentor or advisor\n\nready to dedicate time && have no major unavailability periods planned to this summer\n\nWe expect mentors to be available by email during 75% of working days in the May-August timeframe\n\nYour project idea is:\n\nabout code (though it may and likely should include some documentation and testing work)\n\nabout Jenkins (plugins, core, infrastructure, etc.)\n\npotentially doable by a student in 3-4 months\n\nHow to apply\n\nIf you are interested, drop the Email to the Jenkins Developer mailing list with the GSoC2017 prefix.\n\nBriefly describe your project idea (a couple of sentences) and required qualifications from students. Examples: GSoC2016, GSoC2017 - current project ideas\n\nIf you already have a co-mentor(s), please mention them\n\nHaving several project ideas is fine. Having no specific ideas is also fine.\n\nDisclaimer: We cannot guarantee that all projects happen, it depends on student application results and the number of project slots.\n\nLinks\n\nGoogle Summer of Code page\n\nJenkins GSoC Page\n\nGSoC2016 project ideas\n\nGSoC2016 page (project results and more info)","title":"Google Summer Of Code 2017: Call for mentors","tags":["gsoc","events","general","gsoc2017"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2017-02-08T00:00:00.000Z","id":"fe83f4ec-fd69-5daf-b26d-80c88853da21","slug":"/blog/2017/02/08/jenkins-datadog-plugin/","strippedHtml":"This is a guest post by Emily Chang, Technical Author at Datadog. A modified version of this article was originally posted on the\nDatadog blog.\n\nIf you’re using Jenkins to continuously integrate changes into your projects, it’s helpful to be able to quickly identify build failures and assess their impact on other components of your stack.\n\nDatadog’s plugin helps users monitor and alert on the performance of their Jenkins builds, right alongside the rest of their infrastructure and applications.\n\nAs shown in the out-of-the-box dashboard below, the Datadog plugin provides a bird’s-eye view of job history and trends. You can use Datadog to:\n\nSet alerts for important build failures\n\nIdentify trends in build durations\n\nCorrelate Jenkins events with performance metrics from other parts of your infrastructure in order to identify and resolve issues\n\nTrack Jenkins build status in real-time\n\nOnce you install the Datadog plugin, Jenkins activities (when a build starts, fails, or succeeds) will start appearing in your Datadog event stream. You will also see what percentage of builds failed within the same job, so that you can quickly spot which jobs are experiencing a higher rate of failure than others.\n\nRemember to blacklist any jobs you don’t want to track by indicating them in your plugin configuration.\n\nDatadog’s out-of-the-box Jenkins dashboard includes a status widget that displays the count of all jobs that have run in the past day, grouped by success or failure. To explore further, you can also click on the widget to view the individual jobs that have failed or succeeded in the past day.\n\nThe dashboard also displays the proportion of successful vs. failed builds, along with the total number of job runs completed over the past four hours.\n\nDatadog enables you to correlate Jenkins events with application performance metrics to investigate the root cause of an issue. For example, the screenshot below shows that average CPU on the app servers increased sharply after a Jenkins build was completed and deployed (indicated by the pink bar). Your team can use this information as a starting point to investigate if code changes in the corresponding release may be causing issues.\n\nVisualize job duration metrics\n\nEvery time a build is completed, the plugin collects the build duration as a metric that you can aggregate by job name or any other tag, and graph over time. In the screenshot below, we can view the average job durations in the past four hours, sorted in decreasing order:\n\nYou can also graph and visualize trends in build durations for each job by using Datadog’s robust_trend() linear regression function, as shown in the screenshot below. This graph indicates which jobs' durations are trending longer over time, so that you can investigate if there appears to be a problem. If you’re experimenting with changes to your CI pipeline, consulting this graph can help you track the effects of those changes over time.\n\nUse tags to monitor your Jenkins jobs\n\nTags add custom dimensions to your monitoring, so you can focus on what’s important to you right now.\n\nEvery Jenkins event, metric, and service check is auto-tagged with job, result, and branch (if applicable). You can also enable the optional node tag in the plugin settings.\n\nAs of version 0.5.0, the plugin supports custom tags. This update was developed by one of our open source contributors, Mads Nielsen. Many thanks to Mads for helping us implement this feature!\n\nYou can create custom tags for the name of the application you’re building, your particular team name (e.g. team=licorice), or any other info that matters to you. For example, if you have multiple jobs that perform nightly builds, you might want to create a descriptive tag that distinguishes them from other types of jobs.\n\nAs shown in the configuration settings above, you can add custom tags, formatted as key=value, in two ways:\n\nin a text file (saved in the workspace for the job)\n\nin a list of properties in the text box\n\nSet up the Datadog plugin\n\nThe Datadog plugin requires Jenkins 1.580.1 or newer.\n\nIn Jenkins, navigate to Manage Jenkins > Manage Plugins.\n\nSearch for Datadog Plugin and check the box to install it.\n\nIn Jenkins, go to Manage Jenkins > Configure System.\n\nScroll down to the Datadog Plugin section, and paste your API key in the text box. You can copy this from the API Keys page of your Datadog account. Click Test Key to confirm that the plugin recognizes your API key.\n\nSave your changes, and you’re all set!\n\nGet started\n\nIf you’re already using Datadog, you can start monitoring Jenkins jobs by following the instructions here to download the Datadog plugin. If you’re not using Datadog yet, here’s a 14-day free trial.","title":"Monitor Jenkins jobs with the Datadog plugin","tags":["plugins","monitoring"],"authors":[{"avatar":null,"blog":null,"github":"echang26","html":"","id":"echang26","irc":null,"linkedin":null,"name":"Emily Chang","slug":"/blog/authors/echang26/","twitter":null}]}},{"node":{"date":"2017-02-10T00:00:00.000Z","id":"1055263e-a6f2-5108-b391-a1511ae33556","slug":"/blog/2017/02/10/blueocean-devlog-feb2/","strippedHtml":"We’re counting down the weeks until\nBlue Ocean\n1.0, which is planned for the end of March. If you hadn’t picked up on the hint\nin my\nprevious post,\nmost of the Blue Ocean development team is in Australia, where it is currently\nthe middle of summer. As I write this it is about 1000 degrees outside.\nEmergency measures such as air-conditioning and beer have been deployed in\norder to continue Blue Ocean development.\n\nThis week featured a new beta with the\nSCM API\nchanges; many bug fixes, and some version bumps went out in beta 22. We also\ngot some fresh new designs coming soon, though not in time for beta 22.\n\nSome development highlights:\n\nBeta 22 went out featuring the new\nSCM API\nwith better use of GitHub API rate limits.\n\nA fix for publishing of\nServer Side Events\nthat made one CPU spin up to 100% was fixed (not good unless you want to heat up\nyour room)\n\nSome new refinements to the design merged to the master branch (see images below).\n\nBeta 22 featured the 1.0 version of\nDeclarative Pipeline\n\nAn\nAustralian translation\nwas added; really critical stuff, I know..\n\nThe Acceptance Test Harness (ATH) was stabilised a bit and it now covers\ncreating Pipelines from Git, which we talked about in\nlate January.\n\nThe Visual Pipeline Editor was released to the main Update Center\nas a preview release, ready to play with!\n\nSome small performance improvements\n\nI’m looking forward to those fancy new designs making their way into an\nupcoming release too.\n\nLovely! Hopefully you see more green than I do…​\n\nAnyways, up next for Blue Ocean:\n\nCreation of Pipelines from GitHub, including auto-discovery of new Pipelines.\n\nCloser to a \"release candidate\"\n\nWorking on filtering the activity view for \"per branch\" views\n\nBetter reporting of durations of stages, steps, and runs\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!","title":"Blue Ocean Dev Log: February Week #2","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2017-02-10T00:00:00.000Z","id":"06a04f0b-7823-5a11-8c3a-d385a336b68c","slug":"/blog/2017/02/10/declarative-html-publisher/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nDeclare Your Pipelines!\nDeclarative Pipeline 1.0 is here!\nThis is the second post in a series showing some of the cool features of\nDeclarative Pipeline.\n\nIn the\nprevious blog post,\nwe created a simple Declarative Pipeline.\nIn this blog post, we’ll go back and look at the Scripted Pipeline for the\nPublishing HTML Reports in Pipeline blog post.\nWe’ll convert that Pipeline to Declarative syntax (including properties), go\ninto more detail on the post section, and then we’ll use the agent\ndirective to switch our Pipeline to run in Docker.\n\nSetup\n\nFor this post, I’m going to use the\nblog/add-declarative/html\nbranch of\nmy fork of the\nhermann project.\nI’ve set up a Multibranch Pipeline and pointed it at my repository\nthe same as did it previous post.\nAlso the same as before, I’ve set this Pipeline’s Git configuration to\nautomatically \"Clean after checkout\".\n\nThis time we already have a Pipeline checked in.\nI’ll run it a few times to get a baseline.\n\nConverting to Declarative\n\nLet’s start by converting the Scripted Pipeline straight to Declarative.\n\n// Declarative //\npipeline {\n  agent any // <1> (2)\noptions {\n    // Keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10')) (3)\n}\n  stages {\n    stage ('Build') { (4)\nsteps {\n        // install required gems\n        sh 'bundle install'\n\n        // build and run tests with coverage\n        sh 'bundle exec rake build spec'\n\n        // Archive the built artifacts\n        archive includes: 'pkg/*.gem'\n\n        // publish html\n        publishHTML target: [\n            allowMissing: false,\n            alwaysLinkToLastBuild: false,\n            keepAll: true,\n            reportDir: 'coverage',\n            reportFiles: 'index.html',\n            reportName: 'RCov Report'\n          ]\n      }\n    }\n  }\n}\n// Scripted //\nproperties([[$class: 'BuildDiscarderProperty',\n                strategy: [$class: 'LogRotator', numToKeepStr: '10']]]) (3)\n\nnode { (1)\nstage ('Build') { (4)\n\n// Checkout\n    checkout scm (2)\n\n// install required gems\n    sh 'bundle install'\n\n    // build and run tests with coverage\n    sh 'bundle exec rake build spec'\n\n    // Archive the built artifacts\n    archive includes: 'pkg/*.gem'\n\n    // publish html\n    publishHTML [\n        allowMissing: false,\n        alwaysLinkToLastBuild: false,\n        keepAll: true,\n        reportDir: 'coverage',\n        reportFiles: 'index.html',\n        reportName: 'RCov Report'\n      ]\n\n  }\n}\n\n1\nSelect where to run this Pipeline, in this case \"any\" agent, regardless of label.\n\n2\nDeclarative automatically performs a checkout of source code on the agent,\nwhereas Scripted Pipeline users must explicitly call checkout scm.\n\n3\nSet the Pipeline option to preserve the ten most recent runs.\nThis overrides the default behavior from the Multibranch parent of this Pipeline.\n\n4\nRun the \"Build\" stage.\n\nNow that we have this Pipeline in Declarative form, let’s take a minute to do a\nlittle clean up.  We’ll split out the bundle actions a little more and move\nsteps into logically grouped stages.  Rather than having one monolithic \"Build\"\nstage, we’ll have details for each stage.  As long as we’re prettying things\nup, let’s switch to using Blue Ocean to view our\nbuilds, as well.\n\n// Declarative //\npipeline {\n  agent any\n  options {\n    // Keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required gems\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n\n        // Archive the built artifacts\n        archive includes: 'pkg/*.gem'\n      }\n    }\n    stage ('Test') {\n      steps {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n\n        // publish html\n        publishHTML target: [\n            allowMissing: false,\n            alwaysLinkToLastBuild: false,\n            keepAll: true,\n            reportDir: 'coverage',\n            reportFiles: 'index.html',\n            reportName: 'RCov Report'\n          ]\n      }\n    }\n  }\n}\n// Scripted //\n\nUsing post sections\n\nThis looks pretty good, but if we think about it\nthe archive and publishHTML steps are really post-stage actions.\nThey should only occur when the rest of their stage succeeds.\nAs our Pipeline gets more complex we might need to add actions that always happen\neven if a stage or the Pipeline as a whole fail.\n\nIn Scripted Pipeline, we would use try-catch-finally,\nbut we cannot do that in Declarative.\nOne of the defining features of the Declarative Pipeline\nis that it does not allow script-based control structures\nsuch as for loops, if-then-else blocks, or try-catch-finally blocks.\nOf course, internally Step implementations can still contain whatever conditional logic they want,\nbut the Declarative Pipeline cannot.\n\nInstead of free-form conditional logic,\nDeclarative Pipeline provides a set of Pipeline-specific controls:\nwhen directives, which we’ll look at in\na later blog post in this series, control whether to execute the steps in a stage,\nand\npost sections\ncontrol which actions to take based on result of a single stage\nor a whole Pipeline. post supports a number of\nrun conditions,\nincluding always (execute no matter what) and changed\n(execute when the result differs from previous run).\nWe’ll use success to run archive and publishHTML when their respective stages complete.\nWe’ll also use an always block with a placeholder for sending notifications,\nwhich I’ll implement in the next blog post.\n\n// Declarative //\npipeline {\n  agent any\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required gems\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      steps {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      echo \"Send notifications for result: ${currentBuild.result}\"\n    }\n  }\n}\n// Scripted //\n\nSwitching agent to run in Docker\n\nagent can actually accept\nseveral other parameters instead of any.\nWe could filter on label \"some-label\", for example,\nwhich would be the equivalent of node ('some-label') in Scripted Pipeline.\nHowever, agent also lets us just as easily switch to using a Docker container,\nwhich replaces a more complicated set of changes in Scripted Pipeline:\n\npipeline {\n  agent {\n    // Use docker container\n    docker {\n      image 'ruby:2.3'\n    }\n  }\n  /* ... unchanged ... */\n}\n\nIf I needed to, I could add a label filter under docker\nto select a node to host the Docker container.\nI already have Docker available on all my agents, so I don’t need label -\nthis works as is.\nAs you can see below, the Docker container spins up at the start of the run\nand the pipeline runs inside it.  Simple!\n\nConclusion\n\nAt first glance, the Declarative Pipeline’s removal of control structures seems\nlike it would be too constrictive.  However, it replaces those structures with\nfacilities like the post section, that give us reasonable control over the\nflow our our Pipeline while still improving readability and maintainability.\nIn the next blog post, we’ll add notifications to this pipeline\nand look at how to use Shared Libraries with Declarative\nPipeline to share code and keep Pipelines easy to understand.\n\nLinks\n\nDeclarative Pipeline plugin\n\nDeclarative Pipeline Syntax Reference\n\nPipeline source for this post","title":"Declarative Pipeline: Publishing HTML Reports","tags":["tutorial","pipeline","declarative","plugins","ruby"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-02-15T00:00:00.000Z","id":"76a4ff94-6194-5d56-a94c-3287ec832681","slug":"/blog/2017/02/15/declarative-notifications/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nDeclare Your Pipelines!\nDeclarative Pipeline 1.0 is here!\nThis is the third post in a series showing some of the cool features of\nDeclarative Pipeline.\n\nIn the\nprevious post,\nwe converted a Scripted Pipeline to a Declarative Pipeline, adding descriptive stages\nand post sections.  In one of those post blocks, we included a placeholder for\nsending notifications.\n\nIn this blog post, we’ll repeat what I did in\n\" Sending Notifications in Pipeline\nbut this time in Declarative Pipeline.\nFirst we’ll integrate calls to notification services Slack, HipChat, and Email into our Pipeline.\nThen we’ll refactor those calls into a single Step in a Shared Library, which\nwe’ll reuse as needed, keeping our Jenkinsfile concise and understandable.\n\nSetup\n\nThe setup for this post is almost the same as\nmy previous Declarative Pipeline post.\nI’ve used a new branch in\nmy fork of the\nHermann project :\nblog/declarative/notifications .\nI’d already set up a Multibranch Pipeline and pointed it at my repository,\nso the new branch will be picked up and built automatically.\n\nI still have my notification targets (where we’ll send notifications) that I created for the\n\" Sending Notifications in Pipeline\" blog post.\nTake a look at that post to review how I setup the\nSlack,\nHipChat,\nand Email-ext\nplugins to use those channels.\n\nAdding Notifications\n\nWe’ll start from the same Pipeline we had at the end of the previous post.\n\nThis Pipeline works quite well, except it doesn’t print anything at the start of\nthe run, and that final always directive only prints a message to the console log.\nLet’s start by getting the notifications working like we did in the original post.\nWe’ll just copy-and-paste the three notification steps (with different parameters)\nto get the notifications working for started, success, and failure.\n\npipeline {\n  /* ... unchanged ... */\n  stages {\n    stage ('Start') {\n      steps {\n        // send build started notifications\n        slackSend (color: '#FFFF00', message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n        // send to HipChat\n        hipchatSend (color: 'YELLOW', notify: true,\n            message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n          )\n\n        // send to email\n        emailext (\n            subject: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n            body: \"\"\" STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n            recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n          )\n      }\n    }\n    /* ... unchanged ... */\n  }\n  post {\n    success {\n      slackSend (color: '#00FF00', message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n      hipchatSend (color: 'GREEN', notify: true,\n          message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n        )\n\n      emailext (\n          subject: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n          body: \"\"\" SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n          recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n        )\n    }\n\n    failure {\n      slackSend (color: '#FF0000', message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n      hipchatSend (color: 'RED', notify: true,\n          message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n        )\n\n      emailext (\n          subject: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n          body: \"\"\" FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n          recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n        )\n    }\n  }\n}\n\nMoving Notifications to Shared Library\n\nThis new Pipeline works and our Declarative Pipeline sends notifications; however,\nit is extremely ugly. In the original post using Scripted Pipeline,\nI defined a single method that I called at both the start and end of the pipeline.\nI’d like to do that here as well, but Declarative doesn’t support creating methods\nthat are accessible to multiple stages.\nFor this, we’ll need to turn to\nShared Libraries.\n\nShared Libraries, as the name suggests,\nlet Jenkins Pipelines share code instead of copying it to each new project.\nShared Libraries are not specific to Declarative; they were released in their\ncurrent form several months ago and were useful in Scripted Pipeline.\nDue to Declarative Pipeline’s lack of support for defining methods,\nShared Libraries take on a vital role.  They are the only supported way within\nDeclarative Pipeline to define methods or classes that we want to use in more than one stage.\n\nThe lack of support for defining methods that are accessible in multiple stages,\nis a known issue, with at least two JIRA tickets:\nJENKINS-41335 and\nJENKINS-41396.\nFor this series, I chose to stick to using features that are fully supported\nin Declarative Pipeline at this time.\nThe internet has plenty of hacked together solutions that happen to work today,\nbut I wanted to highlight current best practices and dependable solutions.\n\nSetting up a Shared Library\n\nI’ve created a simple shared library repository for this series of posts, called\njenkins-pipeline-shared.\nThe shared library functionality has too many configuration options to cover in one post.\nI’ve chosen to configure this library as a \"Global Pipeline Library,\"\naccessible from any project on my Jenkins controller.\nTo setup a \"Global Pipeline Library,\" I navigated to \"Manage Jenkins\" → \"Configure System\"\nin the Jenkins web UI.\nOnce there, under \"Global Pipeline Libraries\", I added a new library.\nI then set the name to bitwiseman-shared, pointed it at my repository,\nand set the default branch for the library to master,\nbut I’ll override that in my Jenkinsfile.\n\nMoving the Code to the Library\n\nAdding a Step to a library involves creating a file with the name of our Step,\nadding our code to a call() method inside that file,\nand replacing the appropriate code in our Jenkinsfile with the new Step calls.\nLibraries can be set to load \"implicitly,\"\nmaking their default branch automatically available to all Pipelines,\nor they can be loaded manually using a @Library annotation.\nThe branch for implicitly loaded libraries can also be overridden using the @Library annotation.\n\nThe minimal set of dependencies for sendNotifications means we can\nbasically copy-and-paste the code from the original blog post.\nWe’ll check this change into a branch in the library named\nblog/declarative/notifications, the same as my branch in the hermann repository.\nThis will let us make changes on the master branch later without breaking this example.\nWe’ll then use the @Library directive to tell Jenkins to use that branch’s version\nof the library with this Pipeline.\n\nJenkinsfile\n\n// Declarative //\n#!groovy\n@Library('bitwiseman-shared@blog/declarative/notifications') _ (1)\n\npipeline {\n  agent {\n    // Use docker container\n    docker {\n      image 'ruby:2.3'\n    }\n  }\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Start') {\n      steps {\n        // send build started notifications\n        sendNotifications 'STARTED'\n      }\n    }\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      steps {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      sendNotifications currentBuild.result\n    }\n  }\n}\n// Scripted //\n\n1\nThe _ here is intentional.\nJava/Groovy Annotations\nsuch as @Library must be applied to an element.\nThat is often a using statement, but that isn’t needed here so by convention we use an \\_.\n\nvars/sendNotifications.groovy\n\n#!/usr/bin/env groovy\n\n/**\n * Send notifications based on build status string\n */\ndef call(String buildStatus = 'STARTED') {\n  // build status of null means successful\n  buildStatus = buildStatus ?: 'SUCCESS'\n\n  // Default values\n  def colorName = 'RED'\n  def colorCode = '#FF0000'\n  def subject = \"${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\"\n  def summary = \"${subject} (${env.BUILD_URL})\"\n  def details = \"\"\" ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\"\n\n  // Override default values based on build status\n  if (buildStatus == 'STARTED') {\n    color = 'YELLOW'\n    colorCode = '#FFFF00'\n  } else if (buildStatus == 'SUCCESS') {\n    color = 'GREEN'\n    colorCode = '#00FF00'\n  } else {\n    color = 'RED'\n    colorCode = '#FF0000'\n  }\n\n  // Send notifications\n  slackSend (color: colorCode, message: summary)\n\n  hipchatSend (color: color, notify: true, message: summary)\n\n  emailext (\n      to: 'bitwiseman@bitwiseman.com',\n      subject: subject,\n      body: details,\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}\n\nConclusion\n\nIn this post we added notifications to our Declarative Pipeline.\nWe wanted to move our repetitive notification code into a method;\nhowever, Declarative Pipeline prevented us from defining a method in our Jenkinsfile.\nInstead, with the help of the Shared Library feature,\nwe were able to define a sendNotifications Step that we could call from our Jenkinsfile.\nThis maintained the clarity of our Pipeline and will let us easily reuse this Step in other projects.\nI was pleased to see how little the resulting Pipeline differed from where we started.\nThe changes were restricted to the start and end of the file with no reformatting elsewhere.\n\nIn the next post, we’ll cover more about shared libraries and how to\nrun Sauce OnDemand with xUnit Reporting in Declarative Pipeline.\n\nLinks\n\nDeclarative Pipeline plugin\n\nDeclarative Pipeline Syntax Reference\n\nShared Library reference\n\nPipeline source for this post\n\nPipeline Shared Library source for this post","title":"Declarative Pipeline: Notifications and Shared Libraries","tags":["tutorial","pipeline","declarative","plugins","notifications","slack","hipchat","emailext"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-02-15T00:00:00.000Z","id":"65c5d55a-edbc-5f25-8301-7393341de88e","slug":"/blog/2017/02/15/pipeline-editor-preview/","strippedHtml":"Back in September 2016 we announced the availability of the Blue Ocean beta\nand the forthcoming Visual Pipeline Editor. We are happy to announce that you can try\nthe Pipeline Editor preview release today.\n\nWhat is it?\n\nThe Visual Pipeline Editor is the simplest way for anyone wanting to get started with\ncreating Pipelines in Jenkins. It’s also a great way for advanced Jenkins users\nto start adopting pipeline. It allows developers to break up their pipeline into different\n stages and parallelize tasks that can occur at the same time - graphically.\n The rest is up to you.\n\nA pipeline you create visually will produce a Declarative Pipeline Jenkinsfile for you and\n the Jenkinsfile is stored within a Git repository where it is versioned with your application code.\n\nIf you are not sure what a Jenkins Pipeline or a Jenkinsfile is, why not check out the new guided tour to learn more about it?\n\nWhat are we doing next?\n\nWe are working hard to provide feature parity between the Declarative Pipeline syntax and the visual editor. The next phase is to integrate the editor into Blue Ocean so that you don’t have to leave the UI and commit the Jenkinsfile to your repository to complete authoring your pipeline.\n\nIn Blue Ocean, you will be able to edit a Jenkinsfile\nfor a branch directly from within the user interface using the Visual Pipeline Editor. When you are done authoring your pipeline, the pipeline definition will be saved back to your repository as a Jenkinsfile. You can edit the Pipeline again using the Visual Editor or from your favorite text editor.\n\nWe are hoping to deliver this level of integration into Blue Ocean and the\nVisual Pipeline Editor over the next few months, so be sure to check regularly for updates in\nthe Jenkins plugin manager.\n\nGet the Preview\n\nThe Visual Pipeline Editor is available in preview today.\n\nTo try it out today:\n\nInstall the Blue Ocean beta and Blue Ocean Pipeline Editor from the Jenkins plugin manager\n\nClick on the Open Blue Ocean button and then the Pipeline Editor in the main navigation\n\nWe are looking forward to your feedback to help make the Visual Pipeline Editor\nthe easiest way to get started with Jenkins Pipeline. To report bugs or to\nrequest features please follow the instructions on the project page.\n\nAnd don’t forget to join us on our Gitter community chat\n- drop by and say hello!","title":"Say Hello to the Blue Ocean Pipeline Editor","tags":["blueocean","editor","declarative","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/authors/i386/","twitter":"i386"}]}},{"node":{"date":"2017-02-23T00:00:00.000Z","id":"4617d4e9-51f3-58b1-8cf1-558aa14ce01d","slug":"/blog/2017/02/23/declarative-saucelabs-xunit/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nDeclare Your Pipelines!\nDeclarative Pipeline 1.0 is here!\nThis is the fourth post in a series showing some of the cool features of\nDeclarative Pipeline.\n\nIn the\nprevious post,\nwe integrated several notification services into a Declarative Pipeline.\nWe kept our Pipeline clean and easy to understand\nby using a shared library to make a custom step called sendNotifications\nthat we called at the start and end of our Pipeline.\n\nIn this blog post, we’ll start by translating the Scripted Pipeline in the sample project I worked with\nin\n\" Browser-testing with Sauce OnDemand and Pipeline\"\nand\n\" xUnit and Pipeline\"\nto Declarative.\nWe’ll make our Pipeline clearer by adding an environment directive\nto define some environment variables, and then moving some code to a shared library.\nFinally, we’ll look at using the when directive to add simple conditional behavior to our Pipeline.\n\nSetup\n\nThe setup for this post uses the same repository as the two posts above,\nmy fork\nof the\nJS-Nightwatch.js sample project.\nI’ve once again created a branch specifically for this blog post,\nthis time called\nblog/declarative/sauce .\n\nLike the two posts above, this Pipeline will use the\nxUnit and\nSauce OnDemand plugins.\nThe xUnit plugin only needs to be installed, the Sauce OnDemand needs additional configuration.\nFollow\nSauce Labs' configuration instructions\nto create an account with Sauce Labs and add your Sauce Labs credentials to Jenkins.\nThe Sauce OnDemand plugin will automatically install\nSauce Connect\nfor us when we call it from our Pipeline.\n\nBe sure to you have the latest version of the\nSauce OnDemand plugin (1.160 or newer).\nIt has several fixes required for this post.\n\nFor a shared library, I’ve still got the one from the\nprevious post.\nTo set up this \"Global Pipeline Library,\" navigate to \"Manage Jenkins\" → \"Configure System\"\nin the Jenkins web UI.\nOnce there, under \"Global Pipeline Libraries\", add a new library.\nThen set the name to bitwiseman-shared, point it at my repository,\nand set the default branch for the library to master.\n\nReducing Complexity with Declarative\n\nIf you’ve been following along through this series,\nthis first step will be quite familiar by now.\nWe’ll start from the Pipeline we had at the end of the xUnit post\nand translate it to Declarative.\n\n// Declarative //\npipeline {\n    agent any\n    options {\n        // Nightwatch.js supports color ouput, so wrap add his option\n        ansiColor colorMapName: 'XTerm'\n    }\n    stages {\n        stage (\"Build\") {\n            steps {\n                // Install dependencies\n                sh 'npm install'\n            }\n        }\n        stage (\"Test\") {\n            steps {\n                // Add sauce credentials\n                sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n                    // Start sauce connect\n                    sauceconnect() {\n                        // Run selenium tests using Nightwatch.js\n                        // Ignore error codes. The junit publisher will cover setting build status.\n                        sh \"./node_modules/.bin/nightwatch -e chrome,firefox,ie,edge --test tests/guineaPig.js || true\"\n                    }\n                }\n            }\n            post {\n                always {\n                    step([$class: 'XUnitBuilder',\n                        thresholds: [\n                            [$class: 'SkippedThreshold', failureThreshold: '0'],\n                            // Allow for a significant number of failures\n                            // Keeping this threshold so that overwhelming failures are guaranteed\n                            //     to still fail the build\n                            [$class: 'FailedThreshold', failureThreshold: '10']],\n                        tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\n                    saucePublisher()\n                }\n            }\n        }\n    }\n// Scripted //\nnode {\n    stage \"Build\"\n    checkout scm\n\n    // Install dependencies\n    sh 'npm install'\n\n    stage \"Test\"\n    // Add sauce credentials\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n        // Start sauce connect\n        sauceconnect() {\n\n            // List of browser configs we'll be testing against.\n            def platform_configs = [\n                'chrome',\n                'firefox',\n                'ie',\n                'edge'\n            ].join(',')\n\n            // Nightwatch.js supports color ouput, so wrap this step for ansi color\n            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {\n                // Run selenium tests using Nightwatch.js\n                // Ignore error codes. The junit publisher will cover setting build status.\n                sh \"./node_modules/.bin/nightwatch -e ${platform_configs} --test tests/guineaPig.js || true\"\n            }\n\n            step([$class: 'XUnitBuilder',\n                thresholds: [\n                    [$class: 'SkippedThreshold', failureThreshold: '0'],\n                    // Allow for a significant number of failures\n                    // Keeping this threshold so that overwhelming failures are guaranteed\n                    //     to still fail the build\n                    [$class: 'FailedThreshold', failureThreshold: '10']],\n                tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\n            saucePublisher()\n        }\n    }\n}\n\nBlue Ocean doesn’t support displaying SauceLabs test reports yet\n(see JENKINS-42242).\nTo view the report above, I had to switch back to the stage view of this run.\n\nElevating Settings using environment\n\nEach time we’ve moved a project from Scripted Pipeline to Declarative,\nwe’ve found the cleaner format of Declarative Pipeline highlights the less\nclear parts of the existing Pipeline.\nIn this case, the first thing that jumps out at me is that the parameters of the\nSaucelabs and Nightwatch execution are hardcoded and buried down in the middle of our Pipeline.\nThis is a relatively short Pipeline, so it isn’t terribly hard to find them,\nbut as this pipeline grows and changes it would be better if those values were kept separate.\nIn Scripted, we’d have defined some variables,\nbut Declarative doesn’t allow us to define variables in the usual Groovy sense.\n\nThe environment directive let’s us set some environment variables\nand use them later in our pipeline.\nAs you’d expect, the environment directive is just a set of name-value pairs.\nEnvironment variables are accessible in Pipeline via env.variableName (or just variableName)\nand in shell scripts as standard environment variables, typically $variableName.\n\nLet’s move the list of browsers, the test filter, and the sauce credential string to environment variables.\n\nJenkinsfile\n\nenvironment {\n        saucelabsCredentialId = 'f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a'\n        sauceTestFilter = 'tests/guineaPig.js'\n        platformConfigs = 'chrome,firefox,ie,edge'\n    }\n    stages {\n        /* ... unchanged ... */\n        stage (\"Test\") {\n            steps {\n                // Add sauce credentials\n                sauce(saucelabsCredentialId) {\n                    // Start sauce connect\n                    sauceconnect() {\n                        // Run selenium tests using Nightwatch.js\n                        // Ignore error codes. The junit publisher will cover setting build status.\n                        sh \"./node_modules/.bin/nightwatch -e ${env.platformConfigs} --test ${env.sauceTestFilter} || true\" (1)\n}\n                }\n            }\n            post { /* ... unchanged ... */ }\n        }\n    }\n}\n\n1\nThis double-quoted string causes Groovy to replace the variables with their\nliteral values before passing to sh.\nThis could also be written using singe-quotes:\nsh './node_modules/.bin/nightwatch -e $platformConfigs --test $sauceTestFilter || true'.\nWith a single quoted string, the string is passed as written to the shell,\nand then the shell does the variable substitution.\n\nMoving Complex Code to Shared Libraries\n\nNow that we have settings separated from the code, we can do some code clean up.\nUnlike the previous post, we don’t have any repeating code,\nbut we do have some distractions.\nThe nesting of sauce, sauceconnect, and sh nightwatch seems excessive,\nand that xUnit step is a bit ugly as well.\nLet’s move those into our shared library as custom steps with parameters.\nWe’ll change the Jenkinsfile in our main project,\nand add the custom steps to a branch named\nblog/declarative/sauce in our library repository.\n\nJenkinsfile\n\n@Library('bitwiseman-shared@blog/declarative/sauce') _\n\n/* ... unchanged ... */\n\nstage (\"Test\") {\n    steps {\n        sauceNightwatch saucelabsCredentialId,\n            platformConfigs,\n            sauceTestFilter\n    }\n    post {\n        always {\n            xUnitPublishResults 'reports/**',\n                /* failWhenSkippedExceeds */ 0,\n                /* failWhenFailedExceeds */ 10\n\n            saucePublisher()\n        }\n    }\n}\n\nvars/sauceNightwatch.groovy\n\ndef call(String sauceCredential, String platforms = null, String testFilter = null) {\n    platforms = platforms ? \"-e '\" + platforms + \"'\" : ''\n    testFilter = testFilter ? \"--test '\" + testFilter + \"'\" : ''\n\n    // Add sauce credentials\n    sauce(sauceCredential) {\n        // Start sauce connect\n        sauceconnect() {\n            // Run selenium tests using Nightwatch.js\n            // Ignore error codes. The junit publisher will cover setting build status.\n            sh \"./node_modules/.bin/nightwatch ${platforms} ${testFilter} || true\" (1)\n}\n    }\n}\n\n1\nIn this form, this could not be written using a literal single-quoted string.\nHere, platforms and testFilter are groovy variables, not environment variables.\n\nvars/xUnitPublishResults.groovy\n\ndef call(String pattern, Integer failWhenSkippedExceeds,\n        Integer failWhenFailedExceeds) {\n    step([$class: 'XUnitBuilder',\n        thresholds: [\n            [$class: 'SkippedThreshold', failureThreshold: failWhenSkippedExceeds.toString()],\n            // Allow for a significant number of failures\n            // Keeping this threshold so that overwhelming failures are guaranteed\n            //     to still fail the build\n            [$class: 'FailedThreshold', failureThreshold: failWhenFailedExceeds.toString()]],\n        tools: [[$class: 'JUnitType', pattern: pattern]]])\n}\n\nRunning Conditional Stages using when\n\nThis is a sample web testing project.\nWe probably wouldn’t deploy it like we would production code,\nbut we might still want to deploy somewhere,\nby publishing it to an artifact repository, for example.\nThis project is hosted on GitHub and uses feature branches and pull requests to make changes.\nI’d like to use the same Pipeline for feature branches, pull requests, and the master branch,\nbut I only want to deploy from master.\n\nIn Scripted, we’d wrap a stage in an if-then and check if the branch for\nthe current run is named \"master\".\nDeclarative doesn’t support that kind of general conditional behavior.\nInstead, it provides a\nwhen directive\nthat can be added to stage sections.\nThe when directive supports several types of conditions, including a branch condition,\nwhere the stage will run when the branch name matches the specified pattern.\nThat is exactly what we need here.\n\nJenkinsfile\n\nstages {\n    /* ... unchanged ... */\n    stage ('Deploy') {\n        when {\n            branch 'master'\n        }\n        steps {\n             echo 'Placeholder for deploy steps.'\n        }\n    }\n}\n\nWhen we run our Pipeline with this new stage, we get the following outputs:\n\nLog output for 'feature/test' branch\n\n...\nFinished Sauce Labs test publisher\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Deploy)\nStage 'Deploy' skipped due to when conditional\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n...\n\nLog output for 'master' branch\n\n...\nFinished Sauce Labs test publisher\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Deploy)\n[Pipeline] echo\nPlaceholder for deploy steps.\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n...\n\nConclusion\n\nI have to say, our latest Declarative Pipeline turned out extremely well.\nI think someone coming from Freestyle jobs, with little to no experience with Pipeline or Groovy,\nwould still be able to look at this Declarative Pipeline and make sense of what it is doing.\nWe’ve added new functionality to our Pipeline while making it easier to understand\nand maintain.\n\nI hope you’ve learned as much as I have during this blog series.\nI’m excited to see that even in the the short time since Declarative 1.0 was released,\nteams are already using it in make improvements similar to what those we’ve covered in this series.\nThanks for reading!\n\nLinks\n\nxUnit\n\nSauce OnDemand\n\nDeclarative Pipeline plugin\n\nDeclarative Pipeline Syntax Reference\n\nPipeline source for this post\n\nPipeline Shared Library source for this post","title":"Browser testing and conditional logic in Declarative Pipeline","tags":["pipeline","plugins","xunit","nightwatch","saucelabs","selenium","declarative"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-02-24T00:00:00.000Z","id":"d8607b43-cae5-5e9a-9907-dc6c1b7dd752","slug":"/blog/2017/02/24/blueocean-devlog-feb4/","strippedHtml":"We’re counting down the weeks until Blue Ocean 1.0.\nIn all the excitement I forgot to post\na dev log last week, so I will make up for it this week.\n\nIn the last 10 days, 2 betas went out: b22 and b23, and a preview release of\nthe editor. We expect the next release will be named a release candidate (we\nknow there is still more to go in, but want to signal that things are getting\ninto the final stages!). The\nGitter chat room is\ngetting busier, so join in!\n\nAlso last week, the Blue Ocean Pipeline Editor was presented at the\nJenkins Online Meetup,\nembedded below.\n\nFeature Highlights\n\nYou can now create Pipelines from GitHub in Blue Ocean. Either one\nPipeline at a time, or let it discover all your Pipelines for a GitHub Organization.\n\nWhen you press the \"Create\" button, it will open the new creation flow\nby default now; the feature was previously hidden behind a feature switch.\n\nYou can filter the activity screen by branch! That way you can see a\nhistory of Pipeline runs for just one branch.\n\nIf you like long names for stages - it now won’t pollute the screen\nwhen space is at a premium (truncated names on screen).\n\nBlue Ocean events ( SSE) should now work on Microsoft Edge again\n\nYou can see durations when you hover the mouse over indicators\n\nUp next:\n\nA release candidate is expected soon\n\nIntegration work with the Editor to save to branches\n\nSome updates to the design around tables\n\nBundling of the Editor with Blue Ocean\n\nDon’t forget, there is also a Blue Ocean Docker image published weekly with\nusually the latest released version. If you have Docker installed, this can\nbe as simple as:\n\ndocker run -p 8080:8080 jenkinsci/blueocean*\n\nThen browse to localhost:8080/blue - possibly\nthe quickest way to try things.\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!","title":"Blue Ocean Dev Log: February Week #4","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2017-03-03T00:00:00.000Z","id":"dd9c32a3-a7f9-5971-8384-dc663c2c005a","slug":"/blog/2017/03/03/blueocean-devlog-mar1/","strippedHtml":"We’re counting down the weeks until Blue Ocean 1.0.\nThis week was relatively quiet with a few people away for a few days, and\nmostly about consolidation. There was a beta late last week, so this week we\nthought we would let people have a rest from the upgrade treadmill for once.\n\nOne notable feature that has recently landed is \"escaping to Classic\" When you\nsee the exit symbol (door with arrow) it will take you to an equivalent page in\nclassic Jenkins (if one exists). You will notice this in a few places in the\napp now.\n\nSome other things that made it to master branch which have not yet been\nreleased in a beta:\n\nAn API to save/branch to GitHub was finished, and tested with \"round\ntripping\" with the Editor in some form\n\nNew compact form of duration reporting (old style was too verbose for\nmost screens)\n\nFixed a bug with input submissions with concurrent browser sessions which was\nquite a tricky bug to chase down!\n\nOnly show Admin link when appropriate.\n\nMany many bug fixes and polishing.\n\nThere has also been an uptick in activity on the\nGitter channel with an\nincreased number of questions about usage and Pipelines. But also questions\nfrom people starting to extend, or add features, to Blue Ocean, which is very\nnice to see.\n\nGavin Mogan has been looking at integrating\nthe Sauce OnDemand plugin into Blue Ocean for better\nbrowser-test reporting. Tangentially related, we also are planning to improve\nbrowser-testing in Blue Ocean as well. What is perhaps more exciting is that\nmore people, like Paul Dragoonis and\nother folks, are starting to contribute some\nfixes which have been lingering around for a while.\n\nUp Next:\n\nRound trip Blue Ocean Pipeline Editor changes with load/save\n\nBundling the Blue Ocean Pipeline Editor with the \"aggregator\" Blue Ocean\nplugin.\n\nSome release candidates!\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!","title":"Blue Ocean Dev Log: March Week #1","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2017-03-10T00:00:00.000Z","id":"eef15710-7bc8-5191-ace0-ac7e54c7b945","slug":"/blog/2017/03/10/blueocean-devlog-mar2/","strippedHtml":"We’re counting down the weeks until Blue Ocean 1.0.\nThis week was one of continuing consolidation and polish. We also released b25\n(beta #25), a collectors edition. The next version we will likely release will\nbe a release candidate (RC). The b25 release however contained a number of\nfixes and features, such as branch filtering.\n\nSome other updates of note from this past week:\n\nUpdated a bunch of dependencies around Pipeline and fixed a whole lot\nof long standing bugs.\n\nSome work went on to make acceptance tests run on varied browsers via\nSauce Labs thanks to\n@halkeye!\n\nThe Blue Ocean Pipeline Editor had its\nSave to SCM/GitHub functionality\nmerged to master branch.  It won’t be released to the Update Center until the\nnext Blue Ocean release, there are a few more things to iron out.\n\nAs the Blue Ocean Pipeline Editor is now considered to be part of Blue Ocean\nnow, more people are kicking the tires, and starting to\ncontribute\nfixes to improve it!\n\nThe swishy \"Blue Ocean\" logo is gone, Jenkins branding is back (mixed feelings!)\n\nFixes for concurrent users of input\n\nFixes for handling errors around favoriting of Pipelines and more.\n\nSpeeding up creation of Multibranch Pipelines via the new \"Creation\" flow.\n\nAnd of course, a nice pretty screenshot of editing and saving a Multibranch\nPipeline with the Blue Ocean Pipeline Editor:\n\nUp next for the Blue Ocean project:\n\nMore consolidation and polish.\n\nA first release candidate out the door (!)\n\nNew, sleeker, favorite card design, possibly a table design too.\n\nAlso note that there are changelogs maintained and visible on the\nBlue Ocean plugin page.\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!","title":"Blue Ocean Dev Log: March Week #2","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2017-03-16T00:00:00.000Z","id":"6d526060-b7a0-5b2a-be93-1daeaaa98ed6","slug":"/blog/2017/03/16/fosdem-event-report/","strippedHtml":"In early February numerous free and open source developers from around the\nworld traveled to Brussels, Belgium, for arguably the largest event of its\nkind:\nFOSDEM. Among the thousands of hackers in attendance\nwere a dozen or so Jenkins contributors. We have attended the event in the\npast, but this year we had a blizzard of activity spanning four days around the FOSDEM\nweekend.\n\nFigure 1. City Hall, photo by Kohsuke Kawaguchi\n\nOne of our \"accidental traditions\" has become a\nhappy hour\nthe Friday night before FOSDEM truly begins at Cafe Le Roy d’Espagne on Grand\nPlace right in the middle of Brussels. Conveniently located a few hundred meters away from the\nFOSDEM Beer Event\nat Delirium Cafe, each year we are inevitably joined by friends from other open\nsource projects who know they’re welcome to join us for a few drinks.\n\nFigure 2. Cafe Le Roy, photo by Kohsuke Kawaguchi\n\nAfter dinner and drinks, a few of us decided it would be a good idea (it\nwasn’t) to walk over to check out the FOSDEM Beer Event and maybe have just\none more beer. For the uninitiated, Belgian beers tend to be strong, as the FOSDEM organizers warn:\n\nUnlike some other beers, Belgian beer is not just coloured water. Some beers\ncontain significant quantities of alcohol and will give you a pounding\nhangover.\n\nUnfortunately, some of us seem to re-learn this lesson each year at FOSDEM!\n\nBright and early the following day, FOSDEM really kicked off with keynotes and\nthe project tables lining a number of corridors.\n\nFigure 3. A busy hall at FOSDEM, photo by Kohsuke Kawaguchi\n\nAt the Jenkins project’s table we typically spend two full days answering questions,\nshowing off the latest and greatest Jenkins features, and of course handing out\nJenkins stickers. The table is where many contributors, myself included, have\na rare opportunity to talk with dozens of enthusiastic Jenkins users from\nacross the broader open source community. This year we were very fortunate to have a\ntremendous number of contributors available at the table to answer hundreds of\nquestions throughout the two days of FOSDEM.\n\nI would like to thank everybody by name, but the entire weekend was such a blur\nthat I’m not sure I would be able to remember everybody who helped! We couldn’t have\nhad a successful event without their support, so many thanks to all the\ncontributors who helped!\n\nIn addition to the Jenkins project table, we had two contributors present in\nthe\nTesting and Automation\ndevroom, which I helped organize in between answering Jenkins questions.\n\nDeclarative Pipelines in Jenkins\n\nThe first presentation was a stellar introduction to\nDeclarative Pipelines\nin Jenkins, by long-time contributor and primary developer of Declarative\nPipeline support,\nAndrew Bayer.\n\nUsing Containers for Building and Testing\n\nLater in the day,\nCarlos Sanchez,\nanother long-time contributor, maintainer of the\nKubernetes plugin and a number of Jenkins- and Maven-related\nDocker containers, provided a great overview of the current state of using\ncontainers for building and testing in Jenkins.\n\nAfter a very busy two days at FOSDEM, a few contributors remained in Brussels\nfor a day-long\nPost-FOSDEM Contributor Hackathon\nsponsored by CloudBees, Inc. and\nBetacowork Brussels. Trying to cram lots of\nhacking into a single day is challenging, so the day was mostly filled with\ndiscussions, some light prototyping, and a bit of recovery from the hectic\nweekend at FOSDEM. :)\n\nFigure 4. Daniel Beck presenting on CLI prototyping, photo by Kohsuke Kawaguchi\n\nThanks\n\nOf course I would like to extend many thanks to all the contributors who\nparticipated in the various FOSDEM related events, but I would call special\nattention to the logistics and planning work done by contributors Alyssa Tong,\nDamien Duportal, and Olivier Vernin. Thanks to their work coordinating all the\nplans, reservations, and schedules, we had a flawless weekend\nof high-intensity Jenkins discussion, advocacy, and hacking.\n\nI hope to see everybody back in Brussels next year for FOSDEM 2018!","title":"FOSDEM 2017 Wrap-up","tags":["fosdem","event"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2017-03-17T00:00:00.000Z","id":"20effc32-f67a-56da-9fc9-3f46f4c7bf1a","slug":"/blog/2017/03/17/blueocean-devlog-mar3/","strippedHtml":"We’re counting down the weeks until Blue Ocean 1.0,\nand we’re getting close!  In this past week, the first release candidate\nhas gone out to the Update Center, along with a new\nPipeline Editor plugin. The Blue Ocean\nPipeline Editor is its own plugin which integrates into Blue Ocean, so this was\na coordinated release with Blue Ocean 1.0 rc1.\n\nNoteworthy this week:\n\nRC1 includes the Blue Ocean Pipeline Editor, which is integrates support for\nbranch editing and saving the Pipeline back to GitHub (also referred to as\n\"round-tripping\").\n\nMany dependencies have been upgraded\n\nPer-stage raw logs can be downloaded, this will be included in the next\nrelease.\n\nEditor design improvements\n\nFixes for overflowing text\n\nThe new sleeker favorite card design has been released, so you can fit\nmore favorites on your screen!\n\nThe Blue Ocean Pipeline Editor is better integrated into a few different\nscreens in Blue Ocean. For example, you can open the editor from the results\nscreen (top right):\n\nOr open the editor from branch listings:\n\nUp next:\n\nMore bug-bashing! Please join us in testing the release candidate.\nInstructions for trying Blue Ocean can be found on\nour project page.\n\nAnother release candidate\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!","title":"Blue Ocean Dev Log: March Week #3","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2017-03-20T00:00:00.000Z","id":"6fbbc66f-434f-5721-89f0-d9f144eac41e","slug":"/blog/2017/03/20/security-updates/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities:\n\nActive Directory\n\nDistributed Fork\n\nEmail Extension (Email-ext)\n\nMailer\n\nSSH Build Agents\n\nFor an overview of what was fixed, see the security advisory.\n\nAdditionally, we also published a security notice for the following plugin and recommend that users disable and uninstall it:\n\nPipeline: Classpath Step\n\nThis plugin is not part of the Pipeline suite of plugins, despite its name. It’s installed on just several hundred instances.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-03-21T00:00:00.000Z","id":"5bf5cbad-49a8-533f-b9db-60dff41a2193","slug":"/blog/2017/03/21/toulousejam-pipeline-workshop/","strippedHtml":"Earlier this month, a full-day event about Jenkins Pipeline was organized in Toulouse, France with the Toulouse JAM.\n\nAfter a warm-up on the previous Tuesday where Michaël Pailloncy had given a talk at the local Toulouse Devops user group about Jenkins Pipeline ecosystem, we were ready for more digging :-).\n\nThe agenda\n\nWe had planned the day in two parts:\n\nMorning would be a more driven workshop with slides & exercises to be completed\n\nPizzas & beverages to split the day :-)\n\nAfternoon would be somehow like an Unconference, where people basically decide by themselves what they want to work on.\n\nWe planned to have 30 attendees. We ended up having 25.\nWe considered having more people, but finally decided that for a first time it would be better to start not too big.\n\nInfrastructure\n\nInfrastructure was sponsored by DigitalOcean.\n\nFor each attendee, we provisioned :\n\nOne Controller, preconfigured to be able to dynamically provision agents.\n\nOne staging environment\n\nOne production environment\n[ 1 ]\n\nOne SonarQube instance\n\nWorkshop content & infrastructure\n\nAfter an initial quick presentation to settle context and remind some general things about Continuous Delivery and Jenkins, we started the workshop per se.\n\nIt is composed of 3 parts, which are readable here [ 2 ], but very few people were able to start the part 3.\n\nHackergarten / Unconference\n\nSo we let people decide what they wanted to work on during the afternoon.\n\nWe decided to use post-its: each attendee would write down what they wanted to work on, one idea per post-it (max 2 per person).\nThen, we dropped those onto a white-board and tried grouping those by theme.\n\nIn the end, overall, the following themes went out:\n\nHack on Jenkins development & Contribute to Jenkins\n\nComplete the workshops\n\nWork on use-case oriented things\n\nWork on Docker & Pipeline join usages\n\nHackergarten\n\nMany Jenkins accounts were created, and many JIRA and pull requests were filed.\nIt was nice to see people asking questions like: \"so, should I create a JIRA issue for this?\" or \"how do I interact with people\".\nPretty generic \"how do I work on open source software\" questions sometimes, but important because you felt like people were genuinely interested and needed not much to start contributing.\n\nHere are the pull requests filed during this afternoon:\n\nblueocean-pipeline-editor-plugin#30\n\njenkins#2785\n\njenkins#2786\n\njenkins#2787\n\njenkins#2788\n\nYou can see that though most of the PRs were typo-related, the one that got merged first was the one about code :-).\n\nSo, Jeremie Violas wins the Bobble Head as promised!\n\nWhy so many typo-related PRs?\n\nSimply because people were somehow encouraged to find some to get used to the\nround trip of: fixing an issue and filing the associated pull request, rinse &\nrepeat.\n\nI do think this is also a pretty nice and simple first step to understand how\nto build Jenkins and start interacting with the community.\n\nThe result\n\nPeople seemed pretty happy and we got some nice comments like \"now I have a clearer vision of what this Pipeline thing is about\".\nSome attendees also dropped nice comments on the meetup page.\nSo it’s cool because when you’re doing such things on your free time, it’s the main reward you can get.\n\nIf you’re an attendee to such events, don’t forget to thank people organizing\nthose, and more importantly to provide constructive feedback.  We are generally\neager to know what could be done better for next time.\n\nConclusion\n\nOverall we are very happy with the energy of that day, and we definitely plan to set up a new session in the next few months, probably with a bit more people.\n\nSome thoughts:\n\nInfrastructure: when you plan to have many VM per attendee, double-check the limits your Cloud Provider may have by default. I had bumped it to 250 the day before the workshop, and asked for another one to 500 during the workshop (though in the end, 250 was probably enough, but this’ll give room for the next time with more people :-)).\n\nLogistics: warning, secret ahead: this is very time consuming.\nNot necessarily the amount of work itself, more that it implies very big latency.\nFor instance, give it 2 to 3 weeks minimum to have answers about sponsoring in general. Pinging again in case of no answer after 2 days would probably be seen as rude, and possibly lead to make things worse for obvious reasons, so plan ahead.\n\nThank you\n\nDigitalOcean for sponsoring the Infrastructure\n\nWe got way more than 100 VMs running at the same time during the day thanks to their help!\n\nHarryCow Coworking for hosting the event\n\nTo CloudBees for sponsoring the food for all the participants\n\nAlso for providing a bunch of goodies: stickers and T-Shirts for everybody\n\nGitHub for providing stickers\n\n1. For the sake of the simplicity of the workshop, those environments were actually a single VM: the goal was here to illustrate what we could do using Jenkins Pipeline, discussing scalability or more involved deployment techniques was obviously out of scope.\n\n2. in French only for now, but translating it into English to make it possibly shared and reusable among JAMs is being discussed","title":"Pipeline Workshop & Hackergarten @ ToulouseJAM Feedback","tags":["hackergarten","jam","meetup","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}},"publicURL":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/batmat.jpg"},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat/","twitter":"bmathus"}]}},{"node":{"date":"2017-04-06T00:00:00.000Z","id":"f6b5f809-47da-5d3d-b7ca-7f843a8917d9","slug":"/blog/2017/04/06/welcome-to-blue-ocean-editor/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI explained how to install Blue Ocean on your local Jenkins instance and switch to using Blue Ocean.\nAs promised, here’s a screencast that picks up where that post left off.\nStarting from a clean Jenkins install, the video below will guide you through\ncreating and running your first Pipeline in Blue Ocean with the Visual Pipeline Editor.\n\nPlease Enjoy! In my next video, I’ll go over the\nBlue Ocean Pipeline Activity View.","title":"Getting Started with Blue Ocean's Visual Pipeline Editor","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-10T00:00:00.000Z","id":"0e7cf038-03bd-5373-8649-aa442a523d11","slug":"/blog/2017/04/10/jenkins-has-upgraded-to-java-8/","strippedHtml":"We announced in January\nthat Jenkins would be upgrading its Java runtime dependency to Java 8 this\nyear. After a sizable amount of preparation, this week’s release of\nJenkins 2.54 is the first weekly release to require\na Java 8 runtime.\n\nFor users of the weekly release, this means that Jenkins 2.54 must have\na Java 8 runtime installed on the system in order to\nrun. Those using the\njenkinsci/jenkins:latest\nDocker container won’t need to take any action, as the Java runtime environment\nis already bundled in the container.\n\nIn addition to upgrading the Java Runtime Environment for the controller, any\nconnected agents must upgrade to a Java 8 runtime environment.\n\nThe Long-Term Support (LTS) release line however, has\nnot yet been updated to require Java 8. We are expecting the first LTS release\nto require Java 8 in June.\n\nCompatibility Notes\n\nUsing the Maven project type with Java 7\n\nUsers with jobs configured with the \"Maven project\" type may not be able to use\nJava 7 for their Maven jobs. The correct behavior is not guaranteed so\nproceed at your own risk. The Maven Project uses Jenkins Remoting to establish\n\"interceptors\" within the Maven executable. Because of this, Maven uses\nRemoting and other Jenkins core classes, and this behavior may break an update.\n\nSee also:\nJENKINS-40990.\n\nJava 9 compatibility\n\nAt this point, Jenkins does not yet support Java 9 development releases.\n\nAs always, if you have questions please ask on the\njenkinsci-users@ mailing list or\nreport\nan issue in JIRA.\n\nReferences\n\nJVM statistics post back in November 2016.\n\nOfficial announcement blog post.\n\nOriginal JIRA ticket for this upgrade.\n\nThe 6 months, 82 messages, thread on the Jenkins developers mailing list\n\nThe announcement on the Jenkins users mailing list\n\nThe Pull request on Jenkins core","title":"Starting with 2.54, Jenkins now requires Java 8","tags":["java8"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}},"publicURL":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/batmat.jpg"},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat/","twitter":"bmathus"}]}},{"node":{"date":"2017-04-10T00:00:00.000Z","id":"2ff77860-9123-5dcf-b79a-b4d987a5169e","slug":"/blog/2017/04/10/security-advisory/","strippedHtml":"These are not security fixes you can apply blindly. We strongly recommend you read this post, as well as the security advisory to understand what the vulnerabilities are, whether and how they affect you, and what to expect when upgrading plugins.\n\nMultiple Jenkins plugins received updates today that fix several security vulnerabilities or other security-related issues:\n\nEmail Extension (Email-ext)\n\nEnvironment Injector (EnvInject)\n\nExtensible Choice Parameter\n\nGroovy\n\nJob DSL\n\nLockable Resources\n\nMatrix Authorization\n\nRole Strategy\n\nWarnings\n\nWe also included some plugins that received security fixes in the past that haven’t been mentioned in a security advisory before:\n\nActive Choices (uno-choice)\n\nExtended Choice Parameter\n\nGroovy Postbuild\n\nGroovy Label Assignment\n\nAdditionally, we included other plugins in the advisory that are not getting updated today, but whose vulnerabilities are similar to those of plugins getting fixed.\nIn total, over 30 plugins are part of the advisory.\n\nWhile there are fixes for other vulnerabilities as well, the majority of the advisory (and the rest of this blog post) is about arbitrary code execution vulnerabilities in Jenkins plugins.\n\nBackground\n\nJenkins administrators have long been able to use the Groovy script console and related functionality to execute arbitrary code in Jenkins for diagnostic or otherwise administrative purposes.\nRather than having to rely on plugins implementing the desired functionality, experienced Jenkins admins were able to run a number of scripts as needed to implement various administrative features.\n\nThis bled over into plugins:\nIt’s just easy for a plugin developer to build on top of Groovy and let the users figure out exactly what they want to do.\nUnfortunately, for a long time, there was no technology in Jenkins to limit what could be done in Groovy scripts, so anywhere Groovy would be executed, arbitrary code could be executed.\n\nWe were treating this as a security issue for the first time in the fix for SECURITY-125, about two years ago, something that first required splitting off the Matrix Project type from core into a plugin, and making use of Script Security Plugin.\n\nUnfortunately, other plugins weren’t integrating with Script Security plugin.\nAnd even diligent administrators who understand the problem of arbitrary code execution via Groovy scripts may not be able to tell whether a given plugin is affected:\nIn some cases, you’d need to dive into the source code to see whether, and how, it uses Groovy in a way that can be exploited by regular users to perform actions they otherwise wouldn’t be allowed to do.\n\nAbout the advisory\n\nBroadly speaking, there are three levels of severity for scripting related vulnerabilities in Jenkins:\n\nThe lowest severity ones are those that confuse Overall/Administer and Overall/Run Scripts permissions.\nThese are irrelevant for most Jenkins instances.\nMore on that later.\n\nThe next level up are vulnerabilities that effectively grant the ability to run arbitrary scripts to users who are able to configure jobs.\nWhile these users aren’t administrators, they have a nontrivial level of permissions, so are somewhat trusted.\nThis is often a difficult configuration to adequately secure, but it’s a supported configuration, and any plugin that undermines the security of this configuration will be treated as having a vulnerability.\n\nThe most severe ones are those that require little or no access to Jenkins to successfully exploit.\nThis typically does require the Overall/Read permission to access certain endpoints, but Pipeline as Code may allow people with SCM commit access to exploit scripting related weaknesses as well.\n\nArbitrary code execution is a serious enough issue that publishing a security advisory for just a few plugins would actually be detrimental to overall security:\nMalicious users would be able to review the fixes we do publish, and try to find other plugins affected by a similar vulnerability.\n\nThe advisory issued today lists all plugins we could find that implement any arbitrary code execution vulnerability (i.e. all three levels described above).\nAs this affects over 30 plugins, many of them not actively maintained, the problem exceeds the capacity of the Jenkins security team to address them all.\n\nFor that reason, the Jenkins security team decided that we would fix as many of the plugins as we can handle, and leaving the others to their maintainers.\n\nHow to proceed\n\nWe strongly advise administrators to review the list of affected plugins in the advisory, and look for any plugins that are installed on their instances.\nIt is very likely there’s at least one plugin installed that is affected by this.\nIf you’re on Jenkins 2.40 or newer, or Jenkins LTS 2.32.2 or newer, a warning will appear that informs you about vulnerable plugins you currently have installed.\n\nOnce you’ve determined which plugins you use are included in the advisory, you need to determine whether it is something that affects your particular setup.\n\nIf the vulnerability confuses Overall/Administer and Overall/Run Scripts, but all administrators of your Jenkins instance are able to run scripts anyway, this vulnerability is not a problem for you.\nThis is the case in the vast majority of Jenkins instances.\nOnly custom setups, typically to allow for hosted Jenkins services, don’t grant Overall/Run Scripts permission to administrators.\n\nIf the vulnerability allows users with the permission to e.g. configure jobs to execute arbitrary code, it is only a problem if there are users that have the lower permission (e.g. Item/Configure) but not the higher ( Overall/Run Scripts).\nSimple authorization strategies like Logged in users can do anything are therefore not affected by this issue.\n\nEven vulnerabilities that require no notable permissions in Jenkins may have prerequisites to be exploitable.\nFor example, Overall/Read access may be required, but only granted to users who are also administrators, or in Pipeline as Code setups, everyone with SCM commit access may also be a Jenkins administrator.\n\nThe above should guide your decision how urgently you should upgrade affected plugins with a fix, or disable affected plugins without a fix.\nRemember that you may decide in the future to reconfigure Jenkins in a way that makes previously irrelevant permission distinctions a huge problem, so it is not a good idea to continue using vulnerable plugin versions indefinitely.\n\nAfter deciding to upgrade a plugin, review the advisory and the plugin documentation for information about the migration.\nThe scripts provided in this GitHub repository may help you in determining whether you’re using affected features.\nIf you’re not using any of the affected features, it’s likely that there won’t be any problems and you can just upgrade.\nIf you are using affected features, you should carefully read the documentation on how the upgrade works: Affected plugin features may effectively be disabled until an administrator approves the scripts in use, potentially resulting in build failures.\n\nDistributing vulnerable plugins\n\nFinally, there’s the issue of distribution:\nThe Jenkins project historically has performed little to no oversight over the plugins that are being published.\nThis is a direct consequence of the governance document, which gives plugin maintainers a lot of control over their plugins.\n\nThat said, in exceptional circumstances, the Jenkins project can, and should, protect its users:\nIf a plugin maintainer were to upload a clearly malicious plugin, we wouldn’t stand by the side and continue distributing it.\nIn the case of plugins with known (unintended) vulnerabilities, this obviously becomes more difficult.\nThis has been discussed in the abstract a while back on the jenkinsci-dev mailing list, and the majority of participants in that discussion agreed that we should suspend distribution of vulnerable plugins if the security team doesn’t have the capacity to address the problem, and the vulnerability would remain unfixed otherwise.\n\nWe decided to temporarily suspend distribution of plugins via the Jenkins project update sites if they allow users with lower privileges (no Overall/Administer) to execute arbitrary code.\nUsers who really need to download these plugins can do so via our Artifactory Maven repository.\nOnce an affected plugin receives a fix, we’d of course resume distribution via the update sites.\n\nPlugins that mistake Overall/Administer and Overall/Run Scripts continue being distributed, albeit with a warning shown to Jenkins administrators, as the setup required for this to make a difference is pretty rare.\n\nUnfortunately, we were unable to adequately inform all plugin maintainers before publication of the advisory, so there are several plugins with fewer than 500 installations that are actively maintained but whose maintainers we didn’t contact prior to this advisory.\nFor that, I am really sorry, and can only ask for understanding from the maintainers of affected plugins.\nThe number of affected plugins and the coordination and review required simply exceeded our capabilities.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Important Scripting-related Security Advisory","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-04-11T00:00:00.000Z","id":"a9284a81-2902-5a91-9618-c11ceca70747","slug":"/blog/2017/04/11/new-cli/","strippedHtml":"In response to the zero-day vulnerability we fixed in November, I wrote the following:\n\nMoving forward, the Jenkins security team is revisiting the design of the Jenkins CLI over the coming weeks to prevent this class of vulnerability in the future.\nIf you are interested in participating in that discussion, please join in on the jenkinsci-dev@ mailing list.\n\nIn early February, several project contributors met after FOSDEM for a one day hackathon.\nI looked into the feasibility of a purely SSH-based CLI.\nWhile I considered the experiment to be a success, it was far from ready to be used in a production environment.\n\nA few weeks later, long-time contributor and Jenkins security team member Jesse Glick took over, and published a detailed proposal for a new, simple CLI protocol without remoting.\n\nIn just a month, he implemented his proposal, and I’m very happy to announce that this new implementation of the Jenkins CLI has now made it into 2.54!\n\nExisting jenkins-cli.jar clients should continue working as before, unless an administrator disables the remoting connection mode in Configure Global Security.\nThat said, we recommend you download the new jenkins-cli.jar in Jenkins, and use its new -http mode.\nWith few (now deprecated) exceptions, CLI commands work like before.\nThis will allow you to disable the remoting mode for the CLI on the Jenkins controller to prevent similar vulnerabilities in the future.\n\nSSH-based CLI use should be unaffected by this change.\nNote that new Jenkins instances now start with the SSH server port disabled, and the configuration option for that was moved into Configure Global Security.\n\nYou can learn all about the CLI and its new behavior in the Jenkins handbook.","title":"New, safer CLI in 2.54","tags":["plugins","security","remoting"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-04-11T00:00:00.000Z","id":"9d6e30d7-7295-5fb0-b863-4e1db0a6fa14","slug":"/blog/2017/04/11/welcome-to-blue-ocean-pipeline-activity/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI showed how easy it is to create and edit Declarative Pipelines using the Blue Ocean Visual Pipeline Editor.\nIn this video, I’ll use the Blue Ocean Activity View to track the\nstate of branches and Pull Requests in one project.\nBlue Ocean makes it so much easier to find the logs I need to triage failures.\n\nPlease Enjoy!  In my\nnext video,\nI’ll switch from looking at a single project to monitoring multiple projects with\nthe Blue Ocean Dashboard.","title":"Getting Started with Blue Ocean's Activity View","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-12T00:00:00.000Z","id":"00912854-e420-592f-b78c-f52234cabf9a","slug":"/blog/2017/04/12/jenkinsworld-agenda-announced/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nI am excited to announce the agenda for\nJenkins World 2017. This\nyear’s event promises to have something for everyone - whether you are a\nnovice, intermediate, or advanced user…​you are covered.  Jenkins World 2017\nconsists of 6 tracks, 60+ Jenkins and DevOps sessions, 40+ industry speakers,\n16+ training and workshops.\n\nHere is a sneak peek at Jenkins World 2017:\n\nShow 'n Tell\n\nIt’s all about that demo. These sessions are technically advanced with some code sharing, heavy on demos and just a tad bit of slides.\n\nPlugin Development for Pipeline\n\nExtending Blue Ocean\n\nHow to Use Jenkins Less: How and Why You Can Minimize Your Jenkins Footprint\n\nJenkins Pipeline on your Local Box to Reduce Cycle Time\n\nWar Stories\n\nThese are first-hand Jenkins experience and lessons learned. These stories will inspire your innovative solutions.\n\nPipelines At Scale: How Big, How Fast, How Many?\n\nJenkinsPipelineUnit: Test Your Continuous Delivery Pipeline\n\nCodifying the Build and Release Process with a Jenkins Pipeline Shared Library\n\nJumping on the Continuous Delivery Bandwagon: From 100+ FreeStyle Jobs to Pipeline(s) - Tactics, Pitfalls and Woes\n\nTrainings and Workshops\n\n(additional fees apply to certain trainings/workshops)\n\nIntroduction to Jenkins\n\nIntroduction to Plugin Development\n\nLet’s Build a Jenkins Pipeline!\n\nFundamentals of Jenkins and Docker\n\nThe Jenkins World agenda is packed\nwith even more sessions, it will be a very informational event.\n\nConvince your Boss\n\nWe know that attending Jenkins World needs little convincing but just in case\nyou need a little help to justify your attendance, we’ve created a\nJustify your Trip\ndocument to help speed up the process.\n\nRegister for Jenkins World\n2017 with the code JWATONG for a 20% discount off your pass.\n\nHope to see you there!","title":"Jenkins World 2017 Agenda is Live!","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-04-12T00:00:00.000Z","id":"de6a7833-33e4-5a1b-8942-62eba9d0e88e","slug":"/blog/2017/04/12/welcome-to-blue-ocean-dashboard/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI used the Blue Ocean Activity View to track the state of branches and\nPull Requests in one project.\nIn this video, I’ll use the Blue Ocean Dashboard get a personalized view of the\nareas that of my project that are most important to me,\nand also to monitor multiple projects.\nPlease Enjoy!","title":"Getting Started with the Blue Ocean Dashboard","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-18T00:00:00.000Z","id":"714ef576-2af6-5d69-a880-a3280836f4e4","slug":"/blog/2017/04/18/continuousdelivery-devops-sonarqube/","strippedHtml":"This is a guest post by Michael Hüttermann. Michael is an expert\nin Continuous Delivery, DevOps and SCM/ALM. More information about him at huettermann.net, or\nfollow him on Twitter: @huettermann.\n\nContinuous Delivery and DevOps are well known and widely spread practices nowadays. It is commonly accepted that it\nis crucial to form great teams and define shared goals first and then choose and integrate the tools fitting best to\ngiven tasks. Often it is a mashup of lightweight tools, which are integrated to build up Continuous Delivery pipelines\nand underpin DevOps initiatives. In this blog post, we zoom in to an important part of the overall pipeline, that is the discipline\noften called Continuous Inspection, which comprises inspecting code and injecting a quality gate on that, and show how artifacts can\nbe uploaded after the quality gate was met. DevOps enabler tools covered are Jenkins, SonarQube, and Artifactory.\n\nThe Use Case\n\nYou already know that quality cannot be injected after the fact, rather it should be part of the process and product from the very beginning.\nAs a commonly used good practice, it is strongly recommended to inspect the code and make findings visible, as soon as possible.\nFor that SonarQube is a great choice. But SonarQube is not just running on any isolated\nisland, it is integrated in a Delivery Pipeline. As part of the pipeline, the code is inspected, and only if the code is fine according to defined\nrequirements, in other words: it meets the quality gates, the built artifacts are uploaded to the binary repository manager.\n\nLet’s consider the following scenario. One of the busy developers has to fix code, and checks in changes to the central\nversion control system. The day was long and the night short, and against all team commitments the developer\ndid not check the quality of the code in the local sandbox. Luckily, there is the build engine Jenkins\nwhich serves as a single point of truth, implementing the Delivery Pipeline with its native pipeline features, and as a handy coincidence\nSonarQube has support for Jenkins pipeline.\n\nThe change triggers a new run of the pipeline. Oh no! The build pipeline broke, and the change is not further processed.\nIn the following image you see that a defined quality gate was missed. The visualizing is done with Jenkins Blue Ocean.\n\nSonarQube inspection\n\nWhat is the underlying issue? We can open the SonarQube web application and drill down to the finding. In the Java code, obviously a string literal is not placed on the right side.\n\nDuring a team meeting it was decided to define this to be a Blocker, and SonarQube was configured accordingly. Furthermore, a SonarQube quality gate was created to break any build, if a blocker was identified. Let’s now quickly look into the code.\nYes, SonarQube is right, there is the issue with the following code snippet.\n\nWe do not want to discuss in detail all used tools, and also covering the complete Jenkins build job would be out of scope.\nBut the interesting extract here in regard of the inspection is the following stage defined in Jenkins pipeline DSL:\n\nconfig.xml: SonarQube inspection\n\nstage('SonarQube analysis') { (1)\nwithSonarQubeEnv('Sonar') { (2)\nsh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar ' + (3)\n'-f all/pom.xml ' +\n          '-Dsonar.projectKey=com.huettermann:all:master ' +\n          '-Dsonar.login=$SONAR_UN ' +\n          '-Dsonar.password=$SONAR_PW ' +\n          '-Dsonar.language=java ' +\n          '-Dsonar.sources=. ' +\n          '-Dsonar.tests=. ' +\n          '-Dsonar.test.inclusions=**/*Test*/** ' +\n          '-Dsonar.exclusions=**/*Test*/**'\n        }\n    }\n\n1\nThe dedicated stage for running the SonarQube analysis.\n\n2\nAllow to select the SonarQube server you want to interact with.\n\n3\nRunning and configuring the scanner, many options available, check the docs.\n\nMany options are available to integrate and configure SonarQube. Please consult the documentation for alternatives. Same applies to the other covered tools.\n\nSonarQube Quality Gate\n\nAs part of a Jenkins pipeline stage, SonarQube is configured to run and inspect the code. But this is just the first part,\nbecause we now also want to add the quality gate in order to break the build. The next stage is covering exactly that, see\nnext snippet. The pipeline is paused until the quality gate is computed, specifically the waitForQualityGate step will pause the\npipeline until SonarQube analysis is completed and returns the quality gate status. In case a quality gate was missed, the build breaks.\n\nconfig.xml: SonarQube Quality Gate\n\nstage(\"SonarQube Quality Gate\") { (1)\ntimeout(time: 1, unit: 'HOURS') { (2)\ndef qg = waitForQualityGate() (3)\nif (qg.status != 'OK') {\n             error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n           }\n        }\n    }\n\n1\nThe defined quality gate stage.\n\n2\nA timeout to define when to proceed without waiting for any results for ever.\n\n3\nHere we wait for the OK. Underlying implementation is done with SonarQube’s webhooks feature.\n\nThis blog post is an appetizer, and scripts are excerpts. For more information, please consult the respective documentation, or a good book, or the great community, or ask your local expert.\n\nSince they all work in a wonderful Agile team, the next available colleague just promptly fixes the issue. After checking in\nthe fixed code, the build pipeline runs again.\n\nThe pipeline was processed successfully, including the SonarQube quality gate, and as the final step, the packaged and tested artifact was\ndeployed to Artifactory. There are a couple of different flexible ways how to upload the artifacts,\nthe one we use here is using an upload spec to actually collect and upload the artifact which was built at the very beginning of the pipeline.\nAlso meta information are published to Artifactory, since it is the context which matters and thus we can add valuable labels to the artifact for further processing.\n\nconfig.xml: Upload to Artifactory\n\nstage ('Distribute binaries') { (1)\ndef SERVER_ID = '4711' (2)\ndef server = Artifactory.server SERVER_ID\n    def uploadSpec = (3)\"\"\"\n    {\n    \"files\": [\n        {\n            \"pattern\": \"all/target/all-(*).war\",\n            \"target\": \"libs-snapshots-local/com/huettermann/web/{1}/\"\n        }\n      ]\n    }\n    \"\"\"\n    def buildInfo = Artifactory.newBuildInfo() (4)\nbuildInfo.env.capture = true (5)\nbuildInfo=server.upload(uploadSpec) (6)\nserver.publishBuildInfo(buildInfo) (7)\n}\n\n1\nThe stage responsible for uploading the binary.\n\n2\nThe server can be defined Jenkins wide, or as part of the build step, as done here.\n\n3\nIn the upload spec, in JSON format, we define what to deploy to which target, in a fine-grained way.\n\n4\nThe build info contains meta information attached to the artifact.\n\n5\nWe want to capture environmental data.\n\n6\nUpload of artifact, according to upload spec.\n\n7\nBuild info are published as well.\n\nNow let’s see check that the binary was deployed to Artifactory, successfully. As part of the context information, also a reference to the\nproducing Jenkins build job is available for better traceability.\n\nSummary\n\nIn this blog post, we’ve discovered tips and tricks to integrate Jenkins with SonarQube, how to define\nJenkins stages with the Jenkins pipeline DSL, how those stages are visualized with Jenkins Blue Ocean, and how the artifact\nwas deployed to our binary repository manager Artifactory.\nNow I wish you a lot of further fun with your great tools of choice to implement your Continuous Delivery pipelines.\n\nReferences\n\nJenkins 2\n\nSonarqube\n\nSonarqube Jenkins plugin\n\nArtifactory\n\nJenkins Artifactory plugin\n\n'DevOps for Developers', Apress, 2012\n\n'Agile ALM', Manning, 2011","title":"Delivery Pipelines, with Jenkins 2, SonarQube, and Artifactory","tags":["quality","sonarqube","jenkins","artifactory"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg","srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/534e5/michaelhuettermann.jpg 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/99887/michaelhuettermann.jpg 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/76fd4/michaelhuettermann.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/59a6b/michaelhuettermann.webp 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/cbb78/michaelhuettermann.webp 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/96250/michaelhuettermann.webp 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/50511/michaelhuettermann.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}},"publicURL":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/michaelhuettermann.jpg"},"blog":"http://huettermann.net","github":"michaelhuettermann","html":"<div class=\"paragraph\">\n<p>Michael is expert in Continuous Delivery, DevOps and SCM/ALM supporting enterprises in implementing DevOps.\nMichael is Jenkins Ambassador.</p>\n</div>","id":"michaelhuettermann","irc":null,"linkedin":null,"name":"Michael Hüttermann","slug":"/blog/authors/michaelhuettermann/","twitter":"huettermann"}]}},{"node":{"date":"2017-04-20T00:00:00.000Z","id":"1824bec7-be57-5f54-a27b-537ad8ff5a34","slug":"/blog/2017/04/20/secure-jenkins-on-azure/","strippedHtml":"This is a guest post by Claudiu Guiman and Eric Jizba,\nSoftware Engineers in the Azure DevOps team at Microsoft. If you have any questions, please email us at azdevopspub@microsoft.com.\n\nOne of the most frequently asked questions for managing a Jenkins instance is\n\"How do I make it secure?\" Like any other web application, these issues must be\nsolved:\n\nHow do I securely pass secrets between the browser and the server?\n\nHow do I hide certain parts from unauthorized users and show other parts to anonymous users?\n\nThis blog post details how to securely connect to a Jenkins instance and how to\nsetup a read-only public dashboard.  We’ll cover topics like: setting up a\nreverse proxy, blocking inbound requests to certain URLs and ports, enabling\nproject-based authorization, and making the Jenkins agents accessible through\nthe JNLP protocol.\n\nDeploy Jenkins\n\nThe simplest way to deploy a secure Jenkins instance is by using the Azure Marketplace offer. If you have an existing Jenkins instance or want to setup your instance manually, follow the steps below.\n\nSecurely log in to Jenkins\n\nAfter you’ve deployed your new virtual machine with a hosted Jenkins instance, you will notice that by default the instance listens on port 8080 using 'HTTP'. If you want to set up 'HTTPS' communication, you will need to provide an SSL certificate. Unfortunately, most certificate authorities are not cheap and other free services like Let’s Encrypt have a very small quota (about 20 certificates per week for the entire 'azure.com' subdomain). The only other option is to use a self-signed certificate, but then users must explicitly verify and mark your certificate as trusted, which is not recommended.\n\nIf you do not setup 'HTTPS' communication, the best way to make sure the sign-in credentials are not leaked due to a Man-in-the-middle attack is to only log in using SSH tunneling.\nAn SSH tunnel is an encrypted tunnel created through an SSH protocol connection, which can be used to transfer unencrypted traffic over an unsecured network. Simply run this command:\n\nLinux or Mac\n\nssh -L 8080:localhost:8080 @\n\nWindows ( using PuTTY)\n\nputty.exe -ssh -L 8080:localhost:8080 @\n\nThis command will open an SSH connection to your remote host and bind remote port 8080 to listen to requests coming from your local machine. Navigate to http://localhost:8080 on your local machine to view your Jenkins dashboard and you’ll be able to log in securely.\n\nSetup a reverse proxy\n\nNow that you can securely log in to your Jenkins instance, you should prevent people from accidentally authenticating through the public (unsecured) interface. To achieve this, you can setup a reverse proxy on the Jenkins hosting machine that will listen on a different port (80 is the best candidate) and redirect only certain requests to port 8080.\n\nSpecifically, it is recommended to block the login and the CLI requests. Some CLI versions fall back to unsecure HTTP connections if they have problems establishing the secured connection. In most cases, users don’t need the CLI and it should be enabled on an as-needed basis.\n\nInstall Nginx:\n\nsudo apt-get update\nsudo apt-get install nginx\n\nOpen the Nginx config file:\n\nsudo nano /etc/nginx/sites-enabled/default\n\nModify the file to configure Nginx to work as a reverse proxy (you’ll need to update):\n\nserver {\n    listen 80;\n    server_name;\n    # Uncomment the line bellow to change the default 403 error page\n    # error_page 403 /secure-jenkins;\n    location / {\n        proxy_set_header        Host \\$host:\\$server_port;\n        proxy_set_header        X-Real-IP \\$remote_addr;\n        proxy_set_header        X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto \\$scheme;\n        proxy_pass              http://localhost:8080;\n        proxy_redirect          http://localhost:8080 http://;\n        proxy_read_timeout      90;\n    }\n    #block requests to /cli\n    location /cli {\n        deny all;\n    }\n    #block requests to /login\n    location ~ /login* {\n        deny all;\n    }\n    # Uncomment the lines bellow to redirect /secure-jenkins\n    #location /secure-jenkins {\n    #  alias /usr/share/nginx/secure-jenkins;\n    #}\n}\n\nThe first section tells the Nginx server to listen to any requests that come from port 80. It also contains a commented redirect of the 403 error to a custom location (we’ll get back to this later).\n\nlisten 80;\n    server_name;\n    # error_page 403 /secure-jenkins;\n\nThe next section describes the reverse proxy configuration. This tells the Nginx server to take all incoming requests and proxy them to the Jenkins instance that is listening to port 8080 on the local network interface.\n\nlocation / {\n        proxy_set_header        Host \\$host:\\$server_port;\n        proxy_set_header        X-Real-IP \\$remote_addr;\n        proxy_set_header        X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto \\$scheme;\n        proxy_pass              http://localhost:8080;\n        proxy_redirect          http://localhost:8080 http://;\n        proxy_read_timeout      90;\n    }\n\nThe last section filters out specific URLs (login, cli) and denies access to them.\n\nlocation /cli {\n        deny all;\n    }\n    location ~ /login* {\n        deny all;\n    }\n\nRestart Nginx:\n\nsudo service nginx restart\n\nGo to http:// and verify you can access your Jenkins instance.\n\nVerify clicking 'login' returns a '403 Forbidden' page. If you want to customize that page, update the Nginx configuration and remove the comments around /secure-jenkins. This will redirect all 403 errors to the file /usr/share/nginx/secure-jenkins. You can add any content to that file, for example:\n\nsudo mkdir /usr/share/nginx/secure-jenkins\necho \"Access denied! Use SSH tunneling to log in to your Jenkins instance!\" | sudo tee /usr/share/nginx/secure-jenkins/index.html\n\nIf restart fails or you cannot access your instance, check the error log: cat /var/log/nginx/error.log\n\nSecure your Jenkins dashboard\n\nIf you go to http:// :8080 you’ll notice you can still\nbypass the reverse proxy and access the Jenkins instance directly through an\nunsecure channel. You can easily block all inbound requests on port 8080 on\nAzure with a\nNetwork\nSecurity Group (NSG).\n\nCreate the NSG and add it to your existing network interface or to the subnet your Azure Virtual Machine is bound to.\n\nAdd 2 inbound security rules:\n\nAllow requests to port 22 so you can SSH into the machine.\n\nAllow requests to port 80 so the reverse proxy can be reached\n\nBy default, all other external traffic will be blocked\n\nNavigate to http:// :8080 and verify you cannot connect.\n\nIf you don’t want to deploy an Azure Network Security Group, you can block port 8080 using the Uncomplicated Firewall (ufw)\n\nConfigure read-only access to your dashboard\n\nAfter installing Jenkins, the default security strategy is 'Logged-in users can do anything'. If you want to allow read-only access to anonymous users, you need to set up Matrix-based security. In this example, we’ll set up a project-based authorization matrix, so that you can make certain projects private and others public.\n\nInstall the Matrix Authorization Strategy Plugin and restart Jenkins.\n\nGo to http://localhost:8080/configureSecurity/ ('Configure Global Security' page under 'Manage Jenkins') and select 'Project-base Matrix Authorization Strategy' from the 'Authorization' options.\n\nAs an example, you can grant read-only access to anonymous users (Overall/Read, Job/Discover and Job/Read should be enough) and grant all logged in users full access in a  group called 'authenticated':\n\nConnect JNLP-based agents\n\nSince your Jenkins instance is only accessible through the reverse proxy on port 80, any Jenkins agents that use the JNLP protocol will not be able to register to the controller anymore. To overcome this problem, all agents must be in the same virtual network as the Jenkins controller and must connect using their private IP (by default, the NSG allows all internal traffic).\n\nMake sure that the Jenkins virtual machine will always be assigned the same private IP by going to the Azure Portal, opening the Network Interface of your virtual machine, opening 'IP configuration', and clicking on the configuration.\n\nMake sure the Private IP has a static assignment and restart the virtual machine if necessary.\n\nCopy the static IP Address and go to http://localhost:8080/configure ('Configure System' page under 'Manage Jenkins') and update the 'Jenkins URL' to point to that private IP ( https://10.0.0.5:8080/ in this example)\n\nNow agents can communicate through JNLP. If you want to streamline the process,\nyou can use the\nAzure VM Agents plugin,\nwhich automatically deploys agents in the same virtual network\nand connects them to the controller.","title":"Securing a Jenkins instance on Azure","tags":["azure","cloud"],"authors":[{"avatar":null,"blog":null,"github":"clguimanMSFT","html":"","id":"clguiman","irc":null,"linkedin":null,"name":"Claudiu Guiman","slug":"/blog/authors/clguiman/","twitter":null}]}},{"node":{"date":"2017-04-26T00:00:00.000Z","id":"d81f1582-c3e8-5662-bd12-92e53401c9f2","slug":"/blog/2017/04/26/security-advisory/","strippedHtml":"We just released security updates to Jenkins, versions 2.57 and 2.46.2, that fix several security vulnerabilities, including a critical one.\n\nThat critical vulnerability is an unauthenticated remote code execution via the remoting-based CLI.\nWhen I announced the fix for the previous vulnerability of this kind, I announced our plans to revisit the design of the CLI that enabled this class of vulnerabilities.\n\nSince Jenkins 2.54, we now have a new CLI implementation that isn’t based on remoting, and deprecated its remoting mode.\nDespite it being a major feature, we decided to backport it to 2.46.2, so LTS users can also disable the unsafe remoting mode while retaining almost all of the CLI’s existing functionality.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\nI recommend you read these documents, especially if you’re using the CLI with Jenkins LTS, as there are possible side effects of these fixes.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Important security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-04-27T00:00:00.000Z","id":"c3440bc5-c7e2-5c2b-b6e6-f923222e2902","slug":"/blog/2017/04/27/colombia/","strippedHtml":"The Jenkins project has learned that a company is trying to register \"Jenkins\" as a trademark in Colombia. This is alarming for us, and we are trying to oppose it. In order to do this effectively, we need to hear from Colombian users of Jenkins.\n\nFigure 1. South American visitors to jenkins.io for 2017\n\nThe Jenkins project owns a trademark \"Jenkins\" in the U.S., through a non-profit entity SPI Inc. According to experts on the subject citing the \"Washington Convention\", our trademark registration in the U.S. does give us some strength in the argument to oppose this. To successfully mount this argument however, we need to be able to show that Jenkins has significant usage and awareness in Colombia. Users, installations, meetups, conference talks, anything of that nature will help.\n\nThose of you with the project for a long time might recall that the name \"Jenkins\" was born because of a trademark issue with Oracle. So we are particularly sensitive to the issue is trademarks. We want to make sure the same tragedy won’t happen again.\n\nIf you know anything about the usage and the name recognition of Jenkins in Colombia, please let us know by submitting the information here . We know that Jenkins is popular in Colombia, because our website traffic shows that Colombian Jenkins users are the third most frequent visitors to jenkins.io in South America after Brazil and Argentina.\n\nThis information will be only shared with the Jenkins project board and those involved in the defense, and for the sole purpose of defending the trademark and nothing more.\n\nPlease help us spread the word. Thanks!\n\nEl proyecto Jenkins se ha enterado de que una compañía está intentando registrar \"Jenkins\" como marca registrada en Colombia. Esto es alarmante y estamos tratando de oponernos. Para hacerlo de manera efectiva, necesitamos escuchar a los usuarios colombianos de Jenkins.\n\nEl proyecto Jenkins posee una marca registrada \"Jenkins\" en los Estados Unidos, a través de una entidad sin ánimo de lucro SPI Inc. Según los expertos en la materia citando la \"Convención de Washington\", nuestro registro de marca en los EE.UU. nos da algo de fuerza para oponernos. Sin embargo, para argumentar con éxito, tenemos que ser capaces de demostrar que Jenkins tiene un uso significativo y es conocido en Colombia. Usuarios, instalaciones, encuentros, conferencias, cualquier cosa de ese tipo ayudará.\n\nAquellos que llevan mucho tiempo con el proyecto pueden recordar que el nombre \"Jenkins\" nació debido a un problema de marca con Oracle. Por lo tanto, estamos especialmente sensibles al tema de las marcas registradas. Queremos asegurarnos de que el mismo problema no vuelva a ocurrir.\n\nSi sabe algo sobre el uso y el reconocimiento del nombre Jenkins en Colombia, por favor háganoslo saber enviando la información aquí . Sabemos que Jenkins es popular en Colombia, porque nuestro sitio web de tráfico muestra que los usuarios colombianos de Jenkins son los terceros visitantes más frecuentes a jenkins.io en América del Sur después de Brasil y Argentina.\n\nEsta información sólo se compartirá con el comité de proyecto de Jenkins y los involucrados en la defensa, y con el único propósito de defender la marca y nada más.\n\nPor favor, ayúdenos a difundir la palabra. ¡Gracias!","title":"Calling for Colombian Jenkins users!","tags":["feedback","general"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2017-05-03T00:00:00.000Z","id":"b3e6239b-7f6a-59f1-aa10-c3a3c05df1da","slug":"/blog/2017/05/03/jenkinsworld-2017-awards/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nThis year at Jenkins World 2017,\nthe Jenkins community will celebrate the Most Valuable Contributor, a Jenkins\nSecurity MVP, and the Most Valuable Advocate.\n\nThis will be the first year we are commemorating community members who have\nshown excellence through commitment, creative thinking, and contributions to\ncontinue making Jenkins a great open source automation server. Special thanks\nto CloudBees for the generous donations to make\nthis program possible.\n\nWith that said, the Jenkins\nCommunity Award nomination is currently open. Nominate your story, or that\nof a fellow contributor, for recognition at Jenkins World. Ee sure to join us at\nJenkins World 2017 in San\nFrancisco on August 28-31 to hear the winners announced.\n\nNominations will be accepted until June 16, 2017.\nNominate someone\ntoday!","title":"Jenkins World 2017 Community Awards - Open for Nominations!","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-05-15T00:00:00.000Z","id":"355e4b5a-0c27-5f01-94a5-7a981139c2fb","slug":"/blog/2017/05/15/kubernetes-journey-on-azure/","strippedHtml":"With the\nongoing migration to Azure,\nI would like to share my thoughts regarding one of the biggest challenges we\nhave faced thus far: orchestrating container infrastructure. Many of the\nJenkins project’s applications are run as Docker containers, making Kubernetes\na logical choice as far as running our containers, but it presents its own set\nof challenges. For example, what would the workflow from development to\nproduction look like?\n\nBefore going deeper into the challenges, let’s review the requirements we\nstarted with:\n\nGit\n\nWe found it mandatory to keep track of all the infrastructure changes in Git\nrepositories, including secrets, in order to facilitate reviewing,\nvalidation, rollback, etc of all infra changes.\n\nTests\n\nInfrastructure contributors are geographically distributed and in different\ntimezones.  Getting feedback can take time, so we heavily rely on a lot of\ntests before any changes can be merged.\n\nAutomation\n\nThe change submitter is not necessarily the person who will deploy it.\nRepetitive tasks are error prone and a waste of time.\nFor these reasons, all steps must be automated and stay as simple as possible.\n\nA high level overview of our \"infrastructure as code\" workflow would look like:\n\nInfrastructure as Code Workflow\n\n__________       _________       ______________\n  |         |      |        |      |             |\n  | Changes | ---->|  Test  |----->| Deployment  |\n  |_________|      |________|  ^   |_____________|\n                               |\n                        ______________\n                       |             |\n                       | Validation  |\n                       |_____________|\n\nWe identified two possible approaches for implementing our container\norchestration with Kubernetes:\n\nThe Jenkins Way: Jenkins is triggered by a Git commit, runs the tests, and\nafter validation, Jenkins deploys changes into production.\n\nThe Puppet Way: Jenkins is triggered by a Git commit, runs the tests, and\nafter validation, it triggers Puppet to deploy into production.\n\nLet’s discuss these two approaches in detail.\n\nThe Jenkins Way\n\nWorkflow\n\n_________________       ____________________       ______________\n  |                |      |                   |      |             |\n  |    Github:     |      |     Jenkins:      |      |   Jenkins:  |\n  | Commit trigger | ---->| Test & Validation | ---->|  Deployment |\n  |________________|      |___________________|      |_____________|\n\nIn this approach, Jenkins is used to test, validate, and deploy our Kubernetes\nconfiguration files. kubectl can be run on a directory and is idempotent.\nThis means that we can run it as often as we want: the result will not change.\nTheoretically, this is the simplest way. The only thing needed is to run\nkubectl command each time Jenkins detects changes.\n\nThe following Jenkinsfile gives an example of this workflow.\n\nJenkinsfile\n\npipeline {\n    agent any\n    stages {\n      stage('Init'){\n        steps {\n          sh 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl'\n        }\n      }\n      stage('Test'){\n        steps {\n          sh 'Run tests'\n        }\n      }\n      stage('Deploy'){\n        steps {\n          sh './kubectl apply -R true -f my_project'\n        }\n      }\n    }\n  }\n\nThe devil is in the details of course, and it was not as easy as it looked at\nfirst sight.\n\nOrder matters\n\nSome resources needed to be deployed before others. A workaround was to use\nnumbers as file names. But this added extra logic at file name level, for\nexample:\n\nproject/00-nginx-ingress\nproject/09-www.jenkins.io\n\nPortability\n\nThe deployment environments needed to be the same across development machines\nand the Jenkins host. Although this a well-known problem, it was not easy to\nsolve.  The more the project grew, the more our scripts needed additional tools\n( make, bats, jq gpg, etc).  The more tools we used, the more issues\nappeared because of the different versions used.\n\nAnother challenge that emerged when dealing with different environments was:\nhow should we manage environment-specific configurations (dev, prod, etc)?\nWould it be better to define different configuration files per environment?\nPerhaps, but this means code duplication, or using file templates which would require\nmore tools ( sed, jinja2, erb), and more work.\n\nThere wasn’t a golden rule we discovered, and the answer is probably somewhere in between.\n\nIn any case, the good news is that a Jenkinsfile provides an easy way to\nexecute tasks from a Docker image, and an image can contain all the necessary\ntools in our environment. We can even use different Docker images for each\nstage along the way.\n\nIn the following example, I use the my_env Docker image. It contains all the\ntools needed to test, validate, and deploy changes.\n\nJenkinsfile\n\npipeline{\n  agent {\n    docker{\n      image 'my_env:1.0'\n    }\n  }\n  options{\n    buildDiscarder(logRotator(numToKeepStr: '10'))\n    disableConcurrentBuilds()\n    timeout(time: 1, unit: 'HOURS')\n  }\n  triggers{\n    pollSCM('* * * * *')\n  }\n  stages{\n    stage('Init'){\n      steps{\n        // Init everything required to deploy our infra\n        sh 'make init'\n      }\n    }\n    stage('Test'){\n      steps{\n       // Run tests to validate changes\n       sh 'make test'\n      }\n    }\n    stage('Deploy'){\n      steps{\n       // Deploy changes in production\n       sh 'make deploy'\n      }\n    }\n  }\n  post{\n    always {\n      sh 'make notify'\n    }\n  }\n}\n\nSecret credentials\n\nManaging secrets is a big subject and brings with it many different\nrequirements which are very hard to fulfill.  For obvious reasons, we couldn’t\npublish the credentials used within the infra project.  On the other hand, we\nneeded to keep track and share them, particularly for the Jenkins node that\ndeploys our cluster.  This means that we needed a way to encrypt or decrypt\nthose credentials depending on permissions, environments, etc.  We analyzed two\ndifferent approaches to handle this:\n\nStoring secrets in a key management tool like Key Vault or Vault and use them like a Kubernetes \"secret\" type of resource.\n→ Unfortunately, these tools are not yet integrated in Kubernetes. But we may come back to this option later.\nKubernetes issue: 10439\n\nPublishing and encrypting using a public GPG key.\nThis means that everybody can encrypt credentials for the infrastructure project but only the owner of the private key can decrypt credentials.\nThis solution implies:\n\nScripting: as secrets need to be decrypted at deployment time.\n\nTemplates: as secret values will change depending on the environment.\n→ Each Jenkins node should only have the private key to decrypt secrets associated to its environment.\n\nScripting\n\nFinally, the system we had built was hard to work with.  Our initial\nJenkinsfile which only ran one kubectl command slowly become a bunch of\nscripts to accommodate for:\n\nResources needing to be updated only in some situations.\n\nSecrets needing to be encrypted/decrypted.\n\nTests needing to be run.\n\nIn the end, the amount of scripts required to deploy the Kubernetes resources\nstarted to become unwieldy and we began asking ourselves: \"aren’t we\nre-inventing the wheel?\"\n\nThe Puppet Way\n\nThe Jenkins project already uses Puppet, so we decided to look at using Puppet\nto orchestrate our container deployment with Kubernetes.\n\nWorkflow\n\n_________________       ____________________       _____________\n  |                |      |                   |      |            |\n  |    Github:     |      |     Jenkins:      |      | Puppet:    |\n  | Commit trigger | ---->| Test & Validation | ---->| Deployment |\n  |________________|      |___________________|      |____________|\n\nIn this workflow, Puppet is used to template and deploy all Kubernetes\nconfigurations files needed to orchestrate our cluster.\nPuppet is also used to automate basic kubectl operations such as 'apply' or\n'remove' for various resources based on file changes.\n\nPuppet workflow\n\n______________________\n|                     |\n|  Puppet Code:       |\n|    .                |\n|    ├── apply.pp     |\n|    ├── kubectl.pp   |\n|    ├── params.pp    |\n|    └── resources    |\n|        ├── lego.pp  |\n|        └── nginx.pp |\n|_____________________|\n          |                                        _________________________________\n          |                                       |                                |\n          |                                       |  Host: Prod orchestrator       |\n          |                                       |    /home/k8s/                  |\n          |                                       |    .                           |\n          |                                       |    └── resources               |\n          | Puppet generate workspace             |        ├── lego                |\n          └-------------------------------------->|        │   ├── configmap.yaml  |\n            Puppet apply workspaces' resources on |        │   ├── deployment.yaml |\n          ----------------------------------------|        │   └── namespace.yaml  |\n          |                                       |        └── nginx               |\n          v                                       |            ├── deployment.yaml |\n ______________                                   |            ├── namespace.yaml  |\n |     Azure:  |                                  |            └── service.yaml    |\n | K8s Cluster |                                  |________________________________|\n |_____________|\n\nThe main benefit of this approach is letting Puppet manage the environment and run\ncommon tasks. In the following example, we define a Puppet class for Datadog.\n\nPuppet class for resource Datadog\n\n# Deploy datadog resources on kubernetes cluster\n#   Class: profile::kubernetes::resources::datadog\n#\n#   This class deploy a datadog agent on each kubernetes node\n#\n#   Parameters:\n#     $apiKey:\n#       Contain datadog api key.\n#       Used in secret template\nclass profile::kubernetes::resources::datadog (\n    $apiKey = base64('encode', $::datadog_agent::api_key, 'strict')\n  ){\n  include ::stdlib\n  include profile::kubernetes::params\n  require profile::kubernetes::kubectl\n\n  file { \"${profile::kubernetes::params::resources}/datadog\":\n    ensure => 'directory',\n    owner  => $profile::kubernetes::params::user,\n  }\n\n  profile::kubernetes::apply { 'datadog/secret.yaml':\n    parameters => {\n        'apiKey' => $apiKey\n    },\n  }\n  profile::kubernetes::apply { 'datadog/daemonset.yaml':}\n  profile::kubernetes::apply { 'datadog/deployment.yaml':}\n\n  # As secrets change do not trigger pods update,\n  # we must reload pods 'manually' in order to use updated secrets.\n  # If we delete a pod defined by a daemonset,\n  # this daemonset will recreate pods automatically.\n  exec { 'Reload datadog pods':\n    path        => [\"${profile::kubernetes::params::bin}/\"],\n    command     => 'kubectl delete pods -l app=datadog',\n    refreshonly => true,\n    environment => [\"KUBECONFIG=${profile::kubernetes::params::home}/.kube/config\"] ,\n    logoutput   => true,\n    subscribe   => [\n      Exec['apply datadog/secret.yaml'],\n      Exec['apply datadog/daemonset.yaml'],\n    ],\n  }\n}\n\n→\nMore \"resources\" examples\n\nLet’s compare the Puppet way with the challenges discovered with the Jenkins\nway.\n\nOrder Matters\n\nWith Puppet, it becomes easier to define priorities as\nPuppet provides relationship meta parameters and the function 'require' (see\nalso:\nPuppet\nrelationships).\n\nIn our Datadog example, we can be sure that deployment will respect the following order:\n\ndatadog/secret.yaml -> datadog/daemonset.yaml -> datadog/deployment.yaml\n\nCurrently, our Puppet code only applies configuration when it detects file\nchanges.  It would be better to compare local files with the cluster\nconfiguration in order to trigger the required updates, but we haven’t found a\ngood way to implement this yet.\n\nPortability\n\nAs Puppet is used to configure working environments, it becomes easier to be\nsure that all tools are present and correctly configured.  It’s also easier to\nreplicate environments and run tests on them with tools like\nRSpec-puppet, Serverspec or\nVagrant.\n\nIn our Datadog example, we can also easily change the Datadog API key depending\non the environment with Hiera.\n\nSecret credentials\n\nAs we were already using Hiera GPG\nwith Puppet, we decided to continue to use it, making managing secrets for\ncontainers very simple.\n\nScripting\n\nOf course the Puppet DSL is used, and even if it seems harder at the beginning,\nPuppet simplifies a lot the management of Kubernetes configuration files.\n\nConclusion\n\nIt was much easier to bootstrap the project with a full CI workflow within\nJenkins as long as the Kubernetes project itself stays basic. But as soon as\nthe project grew, and we started deploying different applications with\ndifferent configurations per environment, it became easier to delegate\nKubernetes management to Puppet.\n\nIf you have any comments feel free to send a message to\nJenkins Infra mailing list.\n\nThanks\n\nThanks to Lindsay Vanheyste, Jean Marc Meessen, and Damien Duportal for their feedback.","title":"A journey to Kubernetes on Azure","tags":["puppet","kubernetes","docker","azure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/olblak.png"},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak/","twitter":"0lblak"}]}},{"node":{"date":"2017-05-18T00:00:00.000Z","id":"231f2272-acd6-5bb2-beae-e3871de86c48","slug":"/blog/2017/05/18/pipeline-dev-tools/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nI’ve only been working with Pipeline for about a year.\nPipeline in and of itself has been a huge improvement over old-style Jenkins projects.\nAs a developer, it has been so great be able work with Jenkins Pipelines\nusing the same tools I use for writing any other kind of code.\n\nI’ve also found a number of tools that are super helpful specifically\nfor developing pipelines. Some were easy to find like the\nbuilt-in documentation\nand the\nSnippet Generator.\nOthers were not as obvious or were only recently released.\nIn this post, I’ll show how a few of those tools make working with Pipelines\neven better.\n\nThe Blue Ocean Pipeline Editor\n\nThe best way to start this list is with the most recent and coolest\narrival in this space: the Blue Ocean Pipeline Editor.  The editor only works\nwith Declarative Pipelines, but it brings a sleek new user experience to writing\nPipelines.  My recent screencast, released as part of the Blue Ocean Launch,\ngives good sense of how useful the editor is:\n\nCommand-line Pipeline Linter\n\nOne of the neat features of the Blue Ocean Pipeline Editor is that it does basic\nvalidation on our Declarative Pipelines before they are even committed or Run.\nThis feature is based on the\nDeclarative Pipeline Linter\nwhich can be accessed from the command-line even if you don’t have Blue Ocean\ninstalled.\n\nWhen I was working on the\nDeclarative Pipeline: Publishing HTML Reports\nblog post, I was still learning the declarative syntax and I made a lot lot of mistakes.\nGetting quick feedback about the whether my Pipeline was in a sane state made writing that blog much easier.\nI wrote a simple shell script that would run my Jenkinsfile through the Declarative Pipeline Linter.\n\npipelint.sh - Linting via HTTP POST using curl\n\n# curl (REST API)\n# User\nJENKINS_USER=bitwisenote-jenkins1\n\n# Api key from \"/me/configure\" on my Jenkins instance\nJENKINS_USER_KEY=--my secret, get your own--\n\n# Url for my local Jenkins instance.\nJENKINS_URL=http://$JENKINS_USER:$JENKINS_USER_KEY@localhost:32769 (1)\n\n# JENKINS_CRUMB is needed if your Jenkins controller has CRSF protection enabled (which it should)\nJENKINS_CRUMB=`curl \"$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\\\":\\\",//crumb)\"`\ncurl -X POST -H $JENKINS_CRUMB -F \"jenkinsfile=\n\n1\nThis is not secure.  I’m running this locally only.\nSee Jenkins CLI for details on how to do this securely.\n\nWith this script, I was able to find the error in this this Pipeline without\nhaving to take the time to run it in Jenkins: (Can you spot the mistake?)\n\n#!groovy\n\npipeline {\n  agent any\n\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      step {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      echo \"Send notifications for result: ${currentBuild.result}\"\n    }\n  }\n}\n\nWhen I ran my pipelint.sh script on this pipeline it reported this error:\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   3831      0 --:--:-- --:--:-- --:--:--  4181\nErrors encountered validating Jenkinsfile:\nWorkflowScript: 30: Unknown stage section \"step\". Starting with version 0.5, steps in a stage must be in a steps block. @ line 30, column 5.\n       stage ('Test') {\n       ^\n\nWorkflowScript: 30: Nothing to execute within stage \"Test\" @ line 34, column 5.\n       stage ('Test') {\n       ^\n\nDoh. I forgot the \"s\" on steps on line 35. Once I added the \"s\" and ran\npipelint.sh again, I got an all clear.\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   5610      0 --:--:-- --:--:-- --:--:--  5750\nJenkinsfile successfully validated.\n\nThis didn’t mean there weren’t other errors, but for a two second smoke test I’ll take it.\n\nReplay\n\nI love being able to use source control to track changes to my Pipelines\nright alongside the rest of the code in a project.  There are also times,\nwhen prototyping or debugging, that I need to iterate quickly on a series\nof possible Pipeline changes.\nThe Replay feature let’s me do that and see the results,\nwithout committing those changes to source control.\n\nWhen I wanted to take the previous Pipeline from agent any to using Docker via\nthe docker { …​ } directive, I used the Replay feature to test it out:\n\nSelected the previously completed run in the build history\n\nClicked \"Replay\" in the left menu\n\nMade modifications and click \"Run\". In this example, I replaced any with the docker { …​ } directive.\n\nChecked the results of changes looked good.\n\nOnce I worked any bugs out of my Pipeline,\nI used Replay to view the Pipeline for the last run and copy it back to my\nJenkinsfile and create a commit for that change.\n\nConclusion\n\nThis is far from a complete list of the tools out there for working with Pipeline.\nThere are many more and the number is growing.\nFor example, one tool  I just recently heard about and haven’t had a chance to delve into\nis the\nPipeline Unit Testing Framework,\nwhich promises the ability to test Pipelines before running them.\nIt’s been a fun year and I can’t wait to see what the next year holds for Pipeline.\n\nHow do you work with Pipeline?\nDo you have a tool that you feel has greatly improved your development experience\nwith Pipeline?  I’m interested in hear about others Jenkins user’s favorite ways\nof working with Pipeline.  Drop me a line via\nemail or on the\n#jenkins IRC channel.","title":"Pipeline Development Tools","tags":["blueocean","pipeline","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-06-13T00:00:00.000Z","id":"502035e4-b31c-5ecd-8870-ec66f6748d36","slug":"/blog/2017/06/13/blueocean-1-1/","strippedHtml":"The Blue Ocean team are proud to announce the release of Blue Ocean 1.1.\n We’ve shipped a tonne of small improvements, features and bug fixes here that\n will make your day-to-day experience with Blue Ocean even smoother.\n\nToday is also the first time we are promoting\nour Public Roadmap.\nWe recognise that using JIRA can be a bit of a pain to track what we are working\n on at a macro level and the Public Roadmap makes it very easy for anyone to\n find out what we are working on. We’ve got some really cool stuff coming,\n so check back here soon!\n\nIt’s been an insane two months since the launch of Blue Ocean 1.0 and there\n are now officially over 10,000 teams using Blue Ocean  – so here’s a big\n “thank you” to all of you for your support.\n\nNow, lets get to the goods!\n\nFast search\n\nFor those of you who have many pipelines we’ve introduced pipeline fast search\nto the pipeline dashboard. Click the search icon to activate and just start\ntyping what you’re looking for.\n\nTrigger reasons\n\nDifferentiate at a glance between pipeline runs that have been manually\ntriggered and by who, triggered automatically by a commit or triggered by any\nother means.\n\nBlockage reasons\n\nPipelines can be blocked from execution for a variety of reasons, including\nwaiting for executors or other resources to become free. You can see from the\nPipeline Activity, Branch and Result screen why the pipeline is blocked from\nexecution.\n\nHistory jump\n\nDevelopers can quickly jump from the branches tab to the run history for a\nspecific branch. This makes it more convenient to see historical runs for the\nbranch within the Pipeline which improves the your ability to trace down\nproblems.\n\nAnalyse 1,000s of tests\n\nNow you can see more than 100 test results for a Pipeline run. This makes\nBlue Ocean practical for teams who have invested heavily in testing.\nWe’ve also dramatically improved loading times for Pipelines with large\nnumbers of tests so theres no more waiting for the test tab to load.\n\nCustom run names and descriptions\n\nDevelopers authoring Pipeline using the scripted syntax can set a custom name\nand description for Pipeline run. This feature is commonly used to name or\ndescribe a pipeline run that is meaningful in their release management workflow.\n\nFor example, a developer can set the run name to the release version\n1.1 and the description to something meaningful, like Final Release.\n\ncurrentBuild.displayName = '1.1'\ncurrentBuild.description = ‘Final Release’\n\nPerformance\n\nWe’ve been making optimisations for general page speed.\nIn Blue Ocean 1.1, plugin data was automatically sent to browser and we’ve made\na change so that this data is only sent on the request of plugins. The long and\nshort of it is that you shouldn’t notice a thing except those Blue Ocean pages\nzipping faster into your browser.\n\n48+ bug fixes\n\nThere have been a total of 48 bug improvements, with emphasis on how executing\npipelines behave, and we’ve  invested a large amount of time to improve\nautomated test coverage of Blue Ocean to ensure reliability in\nproduction settings.\n\nFor a full list of bug fixes and improvements,\nsee the JIRA.\n\nWhat are you waiting for? Try Blue Ocean 1.1 today","title":"Blue Ocean 1.1 - fast search for pipelines and much more","tags":["blueocean"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/authors/i386/","twitter":"i386"}]}},{"node":{"date":"2017-06-14T00:00:00.000Z","id":"d17e39c6-5d60-518a-9ff6-8280ace32930","slug":"/blog/2017/06/14/jenkinsworld-awards-lastcall/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nWe have received a good number of nominations for the Jenkins World 2017 Community Awards. These nominations are indicative of the excellent work Jenkins members are doing for the betterment of Jenkins.\n\nThe deadline for nomination is this Friday, June 16.\n\nThis will be the first year we are commemorating community members who have\nshown excellence through commitment, creative thinking, and contributions to\ncontinue making Jenkins a great open source automation server. The award\ncategories includes:\n\nMost Valuable Contributor -\nThis award is presented to the Jenkins contributor who has helped move the Jenkins project forward the most through their invaluable feature contributions, bug fixes or plugin development efforts.\n\nJenkins Security MVP -\nThis award is presented to the individual most consistently providing excellent security reports or who helped secure Jenkins by fixing security issues.\n\nMost Valuable Advocate -\nThis award is presented to an individual who has helped advocate for Jenkins through organization of their local Jenkins Area Meetup.\n\nSubmit your story, or nominate someone today! Winners will be announced at Jenkins World 2017 in San Francisco on August 28-31.\n\nWe look forward to hearing about the great Jenkins work you are doing.","title":"Jenkins World 2017 Community Awards - Last Call for Nominations!","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-06-26T00:00:00.000Z","id":"7b02e5d8-2c15-5100-9be1-7256902c46eb","slug":"/blog/2017/06/26/share-jenkins-world-keynote-stage/","strippedHtml":"Jenkins World is approaching fast,\nand the event staff are all busy preparing.\nI’ve decided to do something different this year as part of my keynote:\nI want to invite a few Jenkins users like you come up on stage with me.\n\nThere have been amazing developments in Jenkins over the past year.\nFor my keynote, I want highlight how the new Jenkins\n(Pipeline as code with the Jenkinsfile, no more creating jobs,\nBlue Ocean)\nis different and better than the old Jenkins (freestyle jobs, chaining jobs together, etc.).\nAll these developments have helped Jenkins users,\nand it would be more meaningful to have fellow users, like you, share their stories\nabout how recent Jenkins improvements like Pipeline and Blue Ocean have positively impacted them.\n\nIf you’re interested sharing your story, please complete\nthis form\nso that I can contact you.\nThis is a great opportunity to let\nthe rest of the world (and your boss!) hear about your accomplishments.\nYou’ll also get into Jenkins World for free and get to join me backstage.\nIf you concerns about traveling to Jenkins World,\nI’m happy to discuss helping with that as well.\n\nI look forward to hearing from you.","title":"Come Share the Jenkins World Keynote Stage with Me!","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2017-06-27T00:00:00.000Z","id":"c68cdf2d-4588-5bfa-80b3-2a0c1581eedd","slug":"/blog/2017/06/27/speaker-blog-SAS-jenkins-world/","strippedHtml":"This is a guest post by Brent Laster, Senior Manager, Research and Development at\nSAS.\n\nJenkins Pipeline\nhas fundamentally changed how users can orchestrate their pipelines and workflows.\nEssentially, anything that you can do in a script or program can now be done in a Jenkinsfile or in a pipeline script created within the application.\nBut just because you can do nearly anything directly in those mechanisms doesn’t mean you necessarily should.\n\nIn some cases, it’s better to abstract the functionality out separately from your main Pipeline.\nPreviously, the main way to do this in Jenkins itself was through creating plugins.\nWith Jenkins 2 and the tight incorporation of Pipeline, we now have another approach – shared libraries.\n\nBrent will be\npresenting\nmore of this topic at Jenkins World in\nAugust, register with the code JWFOSS for a 30% discount off your pass.\n\nShared libraries\nprovide solutions for a number of situations that can be challenging or time-consuming to deal with in Pipeline.\nAmong them:\n\nProviding common routines that can be accessed across a number of pipelines or within a designated scope (more on scope later)\n\nAbstracting out complex or restricted code\n\nProviding a means to execute scripted code from calls in declarative pipelines (where scripted code is not normally allowed)\n\nSimplifying calls in a script to custom code that only differ by calling parameters\n\nTo understand how to use shared libraries in Pipeline, we first need to understand how they are constructed.\nA shared library for Jenkins consists of a source code repository with a structure like the one below:\n\nEach of the top-level directories has its own purpose.\n\nThe resources directory can have non-groovy resources that get loaded via the libraryResource step.\nThink of this as a place to store supporting data files such as json files.\n\nThe src directory uses a structure similar to the standard Java src layout.\nThis area is added to the classpath when a Pipeline that includes this shared library is executed.\n\nThe vars directory holds global variables that should be accessible from pipeline scripts.\nA corresponding.txt file can be included that defines documentation for objects here.\nIf found, this will be pulled in as part of the documentation in the Jenkins application.\n\nAlthough you might think that it would always be best to define library functions in the src structure, it actually works better in many cases to define them in the vars area.\nThe notion of a global variable may not correspond very well to a global function, but you can think of it as the function being a global value that can be pulled in and used in your pipeline.\nIn fact, to work in a declarative style pipeline, having your function in the vars area is the only option.\n\nLet’s look at a simple function that we can create for a shared library.\nIn this case, we’ll just wrap picking up the location of the Gradle installation from Jenkins and calling the corresponding executable with whatever tasks are passed in as arguments.\nThe code is below:\n\n/vars/gbuild.groovy\n\ndef call(args) {\n      sh \"${tool 'gradle3'}/bin/gradle ${args}\"\n}\n\nNotice that we are using a structured form here with the def call syntax.\nThis allows us to simply invoke the routine in our pipeline (assuming we have loaded the shared library) based on the name of the file in the vars area.\nFor example, since we named this file gbuild.groovy, then we can invoke it in our pipeline via a step like this:\n\ngbuild 'clean compileJava'\n\nSo, how do we get our shared library loaded to use in our pipeline?\nThe shared library itself is just code in the structure outlined above committed/pushed into a source code repository that Jenkins can access.\nIn our example, we’ll assume we’ve staged, committed, and pushed this code into a local Git repository on the system at /opt/git/shared-library.git.\n\nLike most other things in Jenkins, we need to first tell Jenkins where this shared library can be found and how to reference it \"globally\" so that pipelines can reference it specifically.\n\nFirst, though, we need to decide at what scope you want this shared library to be available.\nThe most common case is making it a \"global shared library\" so that all Pipelines can access it.\nHowever, we also have the option of only making shared libraries available for projects in a particular Jenkins Folder structure,\nor those in a Multibranch Pipeline, or those in a GitHub Organization pipeline project.\n\nTo keep it simple, we’ll just define ours to be globally available to all pipelines.\nDoing this is a two-step process.\nWe first tell Jenkins what we want to call the library and define some default behavior for Jenkins related to the library,\nsuch as whether we wanted it loaded implicitly for all pipelines.\nThis is done in the Global Pipeline Libraries section of the Configure System page.\n\nFor the second part, we need to tell Jenkins where the actual source repository for the shared library is located.\nSCM plugins that have been modified to understand how to work with shared libraries are called \" Modern SCM\".\nThe git plugin in one of these updated plugin, so we just supply the information in the same Configure System page.\n\nAfter configuring Jenkins so that it can find the shared library repository, we can load the shared library into our pipeline using the @Library(' ') annotation.\nSince Annotations\nare designed to annotate something that follows them,\nwe need to either include a specific import statement, or, if we want to include everything, we can use an underscore character as a placeholder.\nSo our basic step to load the library in a pipeline would be:\n\n@Library('Utilities2') _\n\nBased on this step, when Jenkins runs our Pipeline, it will first go out to the repository that holds the shared library and clone down a copy to use.\nThe log output during this part of the pipeline execution would look something like this:\n\nLoading library Utilities2@master\n > git rev-parse --is-inside-work-tree # timeout=10\nSetting origin to /opt/git/shared-libraries\n > git config remote.origin.url /opt/git/shared-libraries # timeout=10\nFetching origin...\nFetching upstream changes from origin\n > git --version # timeout=10\nusing GIT_SSH to set credentials Jenkins2 SSH\n > git fetch --tags --progress origin +refs/heads/*:refs/remotes/origin/*\n > git rev-parse master^{commit} # timeout=10\n > git rev-parse origin/master^{commit} # timeout=10\nCloning the remote Git repository\nCloning repository /opt/git/shared-libraries\n\nThen Pipeline can call our shared library gbuild function and translate it to the desired Gradle build commands.\n\nFirst time build.\nSkipping changelog.\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Compile)\n[Pipeline] tool\n[Pipeline] sh\n[gsummit17_lab2-4T357CUTJORMC2TIF7WW5LMRR37F7PM2QRUHXUNSRTWTTRHB3XGA]\nRunning shell script\n+ /usr/share/gradle/bin/gradle clean compileJava -x test\nStarting a Gradle Daemon (subsequent builds will be faster)\n\nThis is a very basic illustration of how using shared libraries work.\nThere is much more detail and functionality surrounding shared libraries, and extending your pipeline in general, than we can cover here.\n\nBe sure to catch my talk on\nExtending your Pipeline with Shared Libraries, Global Functions and External Code\nat Jenkins World 2017.\nAlso, watch for my new book on\nJenkins 2 Up and Running\nwhich will have a dedicated chapter on this – expected to be available later this year from O’Reilly.","title":"Extending your Pipeline with Shared Libraries, Global Functions and External Code","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2017-07-03T00:00:00.000Z","id":"3eff5455-8949-570e-ae59-6f180d034c6f","slug":"/blog/2017/07/03/contributor-summit/","strippedHtml":"As in previous years, there’ll be a contributor summit at Jenkins World 2017 :\n\nLet’s talk about the future of Jenkins and how you can help shape it! The contributor summit is the place where the current and future contributors of the Jenkins project get together. This year, the theme is “working together”. Traditionally, most contributors are plugin maintainers focusing on their own plugins, but it’s important to look at Jenkins as a whole, because that’s how users experience it. There is more to the project beyond writing plugins, and even for plugin developers, there are increasing number of common libraries and modules that plugins should rely on. In short, we should work better together.\n\nA few contributors will prepare some presentations to help clarify what that means, and what all of us can do. And in the afternoon, there will be \"unconference\" sessions to brainstorm and discuss what we can do and how.\n\nWhether you are already a contributor or just thinking about becoming one, please join us for this full day free event.\n\nDetails about this year’s agenda are available on the event’s meetup page.\nAttending is free, and no Jenkins World ticket is needed, but RSVP if you’re going to attend to help us plan.\n\nSee you there!","title":"Jenkins World Contributor Summit","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-07-05T00:00:00.000Z","id":"fd2d8b89-b05f-5caf-a6b1-923d33960065","slug":"/blog/2017/07/05/continuousdelivery-devops-artifactory/","strippedHtml":"This is a guest post by Michael Hüttermann. Michael is an expert\nin Continuous Delivery, DevOps and SCM/ALM. More information about him at huettermann.net, or\nfollow him on Twitter: @huettermann.\n\nIn a past blog post Delivery Pipelines,\nwith Jenkins 2, SonarQube, and Artifactory, we talked about pipelines which result in binaries for development versions. Now, in this blog post, I zoom in to different parts of the\nholistic pipeline and cover the handling of possible downstream steps once you have the binaries of development versions, in our example a Java EE WAR and a Docker image (which contains the WAR).\nWe discuss basic concept of staging software, including further information about quality gates, and show example toolchains. This contribution particularly examines the staging from binaries from\ndev versions to release candidate versions and from release candidate versions to final releases from the perspective of the automation server Jenkins, integrating with the binary\nrepository manager JFrog Artifactory and the distribution management platform JFrog Bintray, and ecosystem.\n\nStaging software\n\nStaging (also often called promoting) software is the process of completely and consistently transferring a release with all its configuration items\nfrom one environment to another. This is even more true with DevOps, where you want to accelerate the cycle time (see Michael Hüttermann, DevOps for Developers (Apress, 2012), 38ff).\nFor accelerating the cycle time, meaning to bring software to production, fast and in good quality, it is crucial to have fine processes and integrated tools to streamline the\ndelivery of software. The process of staging releases consists of deploying software to different staging levels, especially different test environments.\nStaging also involves configuring the software for various environments without needing to recompile or rebuild the software. Staging is necessary\nto transport the software to production systems in high quality. Many Agile projects make great experience with implementing a staging ladder in\norder to optimize the cycle time between development software and the point when the end user is able to use the software in production.\n\nCommonly, the staging ladder is illustrated on its side, with the higher rungs being the boxes further to the right. It’s good practice not to skip any rungs during staging.\nThe central development environment packages and integrates all respective configuration items and is the base for releasing. Software is staged over different environments by\nconfiguration, without rebuilding. All changes go through the entire staging process, although defined exception routines may be in place,\nfor details see Michael Hüttermann, Agile ALM (Manning, 2012).\n\nTo make concepts clearer, this blog post covers sample tools. Please note, that there are also alternative tools available. As one example: Sonatype Nexus is also able to host the covered binaries and also offers scripting functionality.\n\nWe nowadays often talk about delivery pipelines. A pipeline is just a set of stages and transition rules between those stages. From a DevOps perspective, a pipeline bridges multiple\nfunctions in organizations, above all development and operations. A pipeline is a staging ladder. A change enters the pipeline at the beginning and leaves it at the end. The processing\ncan be triggered automatically (typical for delivery pipelines) or by a human actor (typical for special steps at overall pipelines, e.g. pulling and thus cherry-picking specific\nversions to promote them to be release candidates are final releases).\n\nPipelines often look different, because they strongly depend on requirements and basic conditions, and can contain further sub pipelines. In our scenario, we have two sub pipelines to\nmanage the promotion of continuous dev versions to release candidates and the promotion of release candidates to final release. A change typically waits at a stage for further processing\naccording to the transition rules, aligned with defined requirements to meet, which are the Quality Gates, explored next.\n\nQuality Gates\n\nQuality gates allow the software to pass through stages only if it meets their defined requirements. The next illustration shows a staging ladder with quality gates injected. You and\nother engaged developers commit code to the version control system (please, use VCS as an abbreviation, not SCM, because the latter is much more) in order to update the central test\nenvironment only if the code satisfies the defined quality requirements; for instance, the local build may need to run successfully and have all tests pass locally. Build, test, and\nmetrics should pass out of the central development environment, and then automated and manual acceptance tests are needed to pass the system test. In our case, the last quality gate\nto pass is the one from the  production mirror to production. Here, for example, specific production tests are done or relevant documents must be filled in and signed.\n\nIt’s mandatory to define the quality requirements in advance and to resist customizing them after the fact, when the software has failed. Quality gates are different at lower and\nhigher stages; the latter normally consist of a more severe or broader set of quality requirements, and they often include the requirements of the lower gates. The binary repository\nmanager must underpin corresponding quality gates, while managing the binaries, what we cover next.\n\nThis blog post illustrates typical concepts and sample toolchains. For more information, please consult the respective documentation, good books or attend top notch conferences, e.g.\nJenkins World, powered by CloudBees.\n\nBinary repository manager\n\nA central backbone of the staging ladder is the binary repository manager, e.g. JFrog Artifactory. The binary repository manager manages all binaries including the self-produced\nones (producing view) and the 3rd party ones (consuming view), across all artifact types, in our case a Java EE WAR file and a Docker image. Basic idea here is that the repo manager serves\nas a proxy, thus all developers access the repo manager, and not remote binary pools directly, e.g. Maven Central. The binary repository manager offers cross-cutting services,\ne.g. role-based access control on specific logical repositories, which may correspond to specific stages of the staging ladder.\n\nLogical repositories can be generic ones (meaning they are agnostic regarding any tools and platforms, thus you can also just upload the menu of your local canteen) or repos\nspecific to tools and platforms. In our case, we need a repository for managing the Java EE WAR files and for the Docker images. This can be achieved by\n\na generic repository (preferred for higher stages) or a repo which is aligned with the layout of the Maven build tool, and\n\na repository for managing Docker images, which serves as a Docker registry.\n\nIn our scenario, preparing the staging of artifacts includes the following ramp-up activities\n\nCreating two sets of logical repositories, inside JFrog Artifactory, where each set has a repo for the WAR file and a repo for the Docker image, and one set is for managing dev\nversions and one set is for release candidate versions.\n\nDefining and implementing processes to promote the binaries from the one set of repositories (which is for dev versions) to the other set of repositories (which is for RC versions).\nPart of the process is defining roles, and JFrog Artifactory helps you to implement role-based access control.\n\nSetting up procedures or scripts to bring binaries from one set of repositories to the other set of repositories, reproducibly. Adding meta data to binaries is important if the degree of maturity\nof the binary cannot be easily derived from the context.\n\nThe following illustration shows a JFrog Artifactory instance with the involved logical repos in place. In our simplified example, the repo promotions are supposed to go from\ndocker-local to docker-prod-local, and from libs-release-local to libs-releases-staging-local. In our use case, we promote the software in version 1.0.0.\n\nAnother type of binary repository manager is JFrog Bintray, which serves as a universal distribution platform for many technologies. JFrog Bintray can be an interesting choice\nif you have strong requirements for scalability and worldwide coverage including IP restrictions and handy features around statistics. Most of the concepts and ramp up activities\n are similar compared to JFrog Artifactory, thus I do not want to repeat them here. Bintray is used by lot of projects e.g. by Groovy, to host their deliverables in the public.\n But keep in mind that you can of course also host your release binaries in JFrog Artifactory.\n In this blog post, I’d like to introduce different options, thus we promote our release candidates to JFrog Artifactory and our releases to JFrog Bintray.\n Bintray has the concept of products, packages and versions. A product can have multiple packages and has different versions. In our example, the product has two packages, namely the Java EE WAR and\n the Docker image, and the concrete version that will be processed is 1.0.0.\n\nSome tool features covered in this blog post are available as part of commercial offerings of tool vendors. Examples include the Docker support of JFrog Artifactory or the Firehose Event API of JFrog Bintray.\nPlease consult the respective documentation for more information.\n\nNow it is time to have a deeper look at the pipelines.\n\nImplementing Pipelines\n\nOur example pipelines are implemented with Jenkins, including its Blue Ocean and declarative pipelines facilities, JFrog Artifactory and JFrog Bintray. To derive your personal\npipelines, please check your individual requirements and basic conditions to come up with the best solution for your target architecture, and consult the respective documentation for\n more information, e.g. about scripting the tools.\n\nIn case your development versions are built with Maven, and have SNAPSHOT character, you need to either rebuild the software after setting the release version, as part of\nyour pipeline, or you solely use Maven releases from the very beginning. Many projects make great experience with morphing Maven snapshot versions into\nrelease versions, as part of the pipeline, by using a dedicated Maven plugin, and externalizing it into a Jenkins shared library. This can look like the following:\n\nsl.groovy (excerpt): A Jenkins shared library, to include in Jenkins pipelines.\n\n#!/usr/bin/groovy\n    def call(args) { (1)\necho \"Calling shared library, with ${args}.\"\n       sh \"mvn com.huettermann:versionfetcher:1.0.0:release versions:set -DgenerateBackupPoms=false -f ${args}\" (2)\n}\n\n1\nWe provide a global variable/function to include it in our pipelines.\n\n2\nThe library calls a Maven plugin, which dynamically morphs the snapshot version of a Maven project to a release version.\n\nAnd including it into the pipeline is then also very straight forward:\n\npipeline.groovy (excerpt): A stage calling a Jenkins shared library.\n\nstage('Produce RC') { (1)\nreleaseVersion 'all/pom.xml' (2)\n}\n\n1\nThis stage is part of a scripted pipeline and is dedicated to morphing a Maven snapshot version into a release version, dynamically.\n\n2\nWe call the Jenkins shared library, with a parameter pointing to the Maven POM file, which can be a parent POM.\n\nYou can find the code of the underlying Maven plugin here.\n\nLet’s now discuss how to proceed for the release candidates.\n\nRelease Candidate (RC)\n\nThe pipeline to promote a dev version to a RC version does contain a couple of different stages, including stages to certify the binaries (meaning labeling it or adding context information) and stages to process the concrete promotion.\nThe following illustration shows the successful run of the promotion, for software version 1.0.0.\n\nWe utilize Jenkins Blue Ocean that is a new user experience for Jenkins based on a personalizable, modern design that allows users to graphically create, visualize and diagnose\ndelivery pipelines. Besides the new approach in general, single Blue Ocean features help to boost productivity dramatically, e.g. to provide log information at your fingertips\nand the ability to search pipelines. The stages to perform the promote are as follows starting with the  Jenkins pipeline stage for promoting the WAR file. Keep in mind that all\nscripts are parameterized, including variables for versions and Artifactory domain names, which are either injected to the pipeline run by user input or set system wide in the Jenkins admin panel,\nand the underlying call is using the JFrog command line interface, CLI in short. JFrog Artifactory\nas well as JFrog Bintray can be used and managed by scripts, based on a REST API. The JFrog CLI\nis an abstraction on top of the JFrog REST API, and we show sample usages of both.\n\npipeline.groovy (excerpt): Staging WAR file to different logical repository\n\nstage('Promote WAR') { (1)\nsteps { (2)\nsh 'jfrog rt cp --url=https://$ARTI3 --apikey=$artifactory_key --flat=true libs-release-local/com/huettermann/web/$version/ ' + (3)\n'libs-releases-staging-local/com/huettermann/web/$version/'\n       }\n    }\n\n1\nThe dedicated stage for running the promotion of the WAR file.\n\n2\nHere we have the steps which make up the stage, based on Jenkins declarative pipeline syntax.\n\n3\nCopying the WAR file, with JFrog CLI, using variables, e.g. the domain name of the Artifactory installation. Many options available, check the docs.\n\nThe second stage to explore more is the promotion of the Docker image. Here, I want to show you a different way how to achieve the goal, thus in this use case we utilize the JFrog REST API.\n\npipeline.grovvy (excerpt): Promote Docker image\n\nstage('Promote Docker Image') {\n          sh '''curl -H \"X-JFrog-Art-Api:$artifactory_key\" -X POST https://$ARTI3/api/docker/docker-local/v2/promote ''' + (1)\n'''-H \"Content-Type:application/json\" ''' + (2)\n'''-d \\'{\"targetRepo\" : \"docker-prod-local\", \"dockerRepository\" : \"michaelhuettermann/tomcat7\", \"tag\": \"\\'$version\\'\", \"copy\": true }\\' (3)\n'''\n    }\n\n1\nThe shell script to perform the staging of Docker image is based on JFrog REST API.\n\n2\nPart of parameters are sent in JSON format.\n\n3\nThe payload tells the REST API endpoint what to to, i.e. gives information about target repo and tag.\n\nOnce the binaries are promoted (and hopefully deployed and tested on respective environments before), we can promote them to become final releases, which I like to call GA.\n\nGeneral Availability (GA)\n\nIn our scenario, JFrog Bintray serves as the distribution platform to manage and provide binaries for further usage. Bintray can also serve as a Docker registry, or can just\nprovide binaries for scripted or manual download. There are again different ways how to promote binaries, in this case from the RC repos inside JFrog Artifactory to the GA storage in JFrog Bintray, and I summarize one of those possible ways. First, let’s look at the Jenkins pipeline, showed in the next illustration. The processing is on its way, currently, and we again have a list of linked stages.\n\nZooming in now to the key stages, we see that promoting the WAR file is a set of steps that utilize JFrog REST API. We download the binary from JFrog Artifactory, parameterized,\nand upload it to JFrog Bintray.\n\npipeline.groovy (excerpt): Promote WAR to Bintray\n\nstage('Promote WAR to Bintray') {\n       steps {\n          sh '''\n             curl -u michaelhuettermann:${bintray_key} -X DELETE https://api.bintray.com/packages/huettermann/meow/cat/versions/$version (1)\ncurl -u michaelhuettermann:${bintray_key} -H \"Content-Type: application/json\" -X POST https://api.bintray.com/packages/huettermann/meow/cat/$version --data \"\"\"{ \"name\": \"$version\", \"desc\": \"desc\" }\"\"\" (2)\ncurl -T \"$WORKSPACE/all-$version-GA.war\" -u michaelhuettermann:${bintray_key} -H \"X-Bintray-Package:cat\" -H \"X-Bintray-Version:$version\" https://api.bintray.com/content/huettermann/meow/ (3)\ncurl -u michaelhuettermann:${bintray_key} -H \"Content-Type: application/json\" -X POST https://api.bintray.com/content/huettermann/meow/cat/$version/publish --data '{ \"discard\": \"false\" }' (4)\n'''\n       }\n    }\n\n1\nFor testing and demo purposes, we remove the existing release version.\n\n2\nNext we create the version in Bintray, in our case the created version is 1.0.0. The value was insert by user while triggering the pipeline.\n\n3\nThe upload of the WAR file.\n\n4\nBintray needs a dedicated publish step to make the binary publicly available.\n\nProcessing the Docker image is as easy as processing the WAR. In this case, we just push the Docker image to the Docker registry, which is served by JFrog Bintray.\n\npipeline.groovy (excerpt): Promote Docker image to Bintray\n\nstage('Promote Docker Image to Bintray') { (1)\nsteps {\n          sh 'docker push $BINTRAYREGISTRY/michaelhuettermann/tomcat7:$version' (2)\n}\n    }\n\n1\nThe stage for promoting the Docker image. Please note, depending on your setup, you may add further stages, e.g. to login to your Docker registry.\n\n2\nThe Docker push of the specific version. Note, that also here all variables are parameterized.\n\nWe now have promoted the binaries and uploaded them to JFrog Bintray. The overview page of our product lists two packages: the WAR file and the Docker image. Both can be downloaded\nnow and used, the Docker image can be pulled from the JFrog Bintray Docker registry with native Docker commands.\n\nAs part of its graphical visualization capabilitites, Bintray is able to show the single layers of the uploaded Docker images.\n\nBintray can also display usage statistics, e.g. download details. Now guess where I’m sitting right now while downloading the binary?\n\nBesides providing own statistics, Bintray provides the JFrog Firehose Event API. This API streams live usage data, which in turn can be integrated or aggregated with your ecosystem.\nIn our case, we visualize the data, particularly download, upload, and delete statistics, with the ELK stack, as part of a functional monitoring initiative.\n\nCrisp, isn’t it?\n\nSummary\n\nThis closes are quick ride through the world of staging binaries, based on Jenkins. We’ve discussed concepts and example DevOps enabler tools, which can help to implement\n the concepts. Along the way, we discussed some more options how to integrate with ecosystem, e.g. releasing Maven snapshots and functional monitoring with dedicated tools.\n After this appetizer you may want to now consider to double-check your staging processes and toolchains, and maybe you find some room for further adjustments.\n\nReferences\n\n'Agile ALM', Manning, 2011\n\nBinary Repository Manager Feature Matrix\n\n'DevOps for Developers', Apress, 2012\n\nDocker\n\nELK\n\nJFrog Artifactory\n\nJFrog Bintray\n\nJFrog CLI\n\nJFrog REST API\n\nSonatype Nexus","title":"Delivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production.","tags":["devops","jenkins","artifactory","bintray"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg","srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/534e5/michaelhuettermann.jpg 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/99887/michaelhuettermann.jpg 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/76fd4/michaelhuettermann.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/59a6b/michaelhuettermann.webp 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/cbb78/michaelhuettermann.webp 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/96250/michaelhuettermann.webp 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/50511/michaelhuettermann.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}},"publicURL":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/michaelhuettermann.jpg"},"blog":"http://huettermann.net","github":"michaelhuettermann","html":"<div class=\"paragraph\">\n<p>Michael is expert in Continuous Delivery, DevOps and SCM/ALM supporting enterprises in implementing DevOps.\nMichael is Jenkins Ambassador.</p>\n</div>","id":"michaelhuettermann","irc":null,"linkedin":null,"name":"Michael Hüttermann","slug":"/blog/authors/michaelhuettermann/","twitter":"huettermann"}]}},{"node":{"date":"2017-07-07T00:00:00.000Z","id":"7541af12-10e1-5d79-bcc7-41f0ae0d3010","slug":"/blog/2017/07/07/jenkins-conan/","strippedHtml":"This is a guest post by Luis Martínez de Bartolomé,\nConan Co-Founder\n\nC and C++ are present in very important industries today, including Operating Systems, embedded systems, finances, research, automotive, robotics, gaming, and many more. The main reason for this is performance, which is critical to many of these industries, and cannot be compared to any other technology.\nAs a counterpart, the C/C++ ecosystem has a few important challenges to face:\n\nHuge projects - With millions of lines of code, it’s very hard to manage your projects without using modern tools.\n\nApplication Binary Interface (ABI) incompatibility - To guarantee the compatibility of a library with other libraries and your application,  different configurations (such as the operating system, architecture, and compiler) need to be under control.\n\nSlow compilation times - Due to header inclusion and pre-processor bloat, together with the challenges mentioned above, it requires special attention to optimize the process and rebuild only the libraries that need to be rebuilt.\n\nCode linkage and inlining - A static C/C++ library can embed headers from a dependent library. Also, a shared library can embed a static library. In both cases, you need to manage the rebuild of your library when any of its dependencies change.\n\nVaried ecosystem - There are many different compilers and build systems, for different platforms, targets and purposes.\n\nThis post will show how to implement DevOps best practices for C/C++ development, using Jenkins CI, Conan C/C++ package manager, and JFrog Artifactory the universal artifact repository.\n\nConan, The C/C++ Package Manager\n\nConan was born to mitigate these pains.\n\nConan uses python recipes, describing how to build a library by explicitly calling any build system, and also describing the needed information for the consumers (include directories, library names etc.).\nTo manage the different configurations and the ABI compatibility, Conan uses \"settings\" (os, architecture, compiler…). When a setting is changed, Conan generates a different binary version for the same library:\n\nThe built binaries can be uploaded to JFrog Artifactory or Bintray, to be shared with your team or the whole community. The developers in your team won’t need to rebuild the libraries again, Conan will fetch only the needed Binary packages matching the user’s configuration from the configured remotes (distributed model).\nBut there are still some more challenges to solve:\n\nHow to manage the development and release process of your C/C++ projects?\n\nHow to distribute your C/C++ libraries?\n\nHow to test your C/C++ project?\n\nHow to generate multiple packages for different configurations?\n*How to manage the rebuild of the libraries when one of them changes?\n\nConan Ecosystem\n\nThe Conan ecosystem is growing fast, and DevOps with C/C++ is now a reality:\n\nJFrog Artifactory manages the full development and releasing cycles.\n\nJFrog Bintray is the universal distribution hub.\n\nJenkins automates the project testing, generates different binary configurations of your Conan packages, and automates the rebuilt libraries.\n\nJenkins Artifactory plugin\n\nProvides a Conan DSL, a very generic but powerful way to call Conan from a Jenkins Pipeline script.\n\nManages the remote configuration with your Artifactory instance, hiding the authentication details.\n\nCollects from any Conan operation (installing/uploading packages) all the involved artifacts to generate and publish the buildInfo to Artifactory. The buildInfo object is very useful, for example, to promote the created Conan packages to a different repository and to have full traceability of the Jenkins build:\n\nHere’s an example of the Conan DSL with the Artifactory plugin.  First we configure the Artifactory repository, then retrieve the dependencies and finally build it:\n\ndef artifactory_name = \"artifactory\"\ndef artifactory_repo = \"conan-local\"\ndef repo_url = 'https://github.com/memsharded/example-boost-poco.git'\ndef repo_branch = 'master'\n\nnode {\n   def server\n   def client\n   def serverName\n\nstage(\"Get project\"){\n    git branch: repo_branch, url: repo_url\n}\n\nstage(\"Configure Artifactory/Conan\"){\n    server = Artifactory.server artifactory_name\n    client = Artifactory.newConanClient()\n    serverName = client.remote.add server: server, repo: artifactory_repo\n}\n\nstage(\"Get dependencies and publish build info\"){\n    sh \"mkdir -p build\"\n    dir ('build') {\n      def b = client.run(command: \"install ..\")\n      server.publishBuildInfo b\n    }\n}\n\nstage(\"Build/Test project\"){\n        dir ('build') {\n          sh \"cmake ../ && cmake --build .\"\n        }\n    }\n}\n\nYou can see in the above example that the Conan DSL is very explicit. It helps a lot with common operations, but also allows powerful and custom integrations. This is very important for C/C++ projects, because every company has a very specific project structure, custom integrations etc.\n\nComplex Jenkins Pipeline operations: Managed and parallelized libraries building\n\nAs we saw at the beginning of this blog post, it’s crucial to save time when building a C/C++ project. Here are several ways to optimize the process:\n\nOnly re-build the libraries that need to be rebuilt. These are the libraries that  have been affected by a dependant library that has changed.\n\nBuild in parallel, if possible. When there is no relation between two or more libraries in the project graph, you can build them in parallel.\n\nBuild different configurations (os, compiler, etc) in parallel. Use different agents if needed.\n\nLet’s see an example using Jenkins Pipeline feature\n\nThe above graph represents our project P and its dependencies (A-G). We want to distribute the project for two different architectures, x86 and x86_64.\n\nWhat happens if we change library A?\n\nIf we bump the version to A(v1) there is no problem, we can update the B requirement and also bump its version to B(v1) and so on. The complete flow would be as follows:\n\nPush A(v1) version to Git, Jenkins will build the x86 and x86_64 binaries. Jenkins will upload all the packages to Artifactory.\n\nManually change B to v1, now depending on A1, push to Git, Jenkins will build the B(v1) for x86 and x86_64 using the retrieved new A1 from Artifactory.\n\nRepeat the same process for C, D, F, G and finally our project.\n\nBut if we are developing our libraries in a development repository, we probably depend on the latest A version or will override A (v0) packages on every git push, and we want to automatically rebuild the affected libraries in this case B, D, F, G and P.\n\nHow we can do this with Jenkins Pipelines?\n\nFirst we need to know which libraries need to be rebuilt. The \"conan info --build_order\" command identifies the libraries that were changed in our project, and also tells us which can be rebuilt in parallel.\n\nSo, we created two Jenkins pipelines tasks:\n\nThe\"SimpleBuild\" task which builds every single library. Similar to the first example using Conan DSL with the Jenkins Artifactory plugin. It’s a parameterized task that receives the libraries that need to built.\n\nThe\"MultiBuild\" task which coordinates and launches the \" SimpleBuild\" tasks, in parallel when possible.\n\nWe also have a repository with a configuration yml. The Jenkins tasks will use it to know where the recipe of each library is, and the different profiles to be used. In this case they are x86 and x86_64.\n\nleaves:\n  PROJECT:\n    profiles:\n       - ./profiles/osx_64\n       - ./profiles/osx_32\n\nartifactory:\n  name: artifactory\n  repo: conan-local\n\nrepos:\n LIB_A/1.0:\n   url: https://github.com/lasote/skynet_example.git\n   branch: master\n   dir: ./recipes/A\n\nLIB_B/1.0:\n url: https://github.com/lasote/skynet_example.git\n branch: master\n dir: ./recipes/b\n\n…\n\nPROJECT:\n url: https://github.com/lasote/skynet_example.git\n branch: master\n dir: ./recipes/PROJECT\n\nIf we change and push library A to the repository, the \" MultiBuild\" task will be triggered. It will start by checking which libraries need to be rebuilt, using the \"conan info\" command.\nConan will return something like this:\n[B, [D, F], G]\n\nThis means that we need to start building B, then we can build D and F in parallel, and finally build G. Note that library C does not need to be rebuilt, because it’s not affected by a change in library A.\n\nThe \" MultiBuild\" Jenkins pipeline script will create closures with the parallelized calls to the \" SimpleBuild\" task, and finally launch the groups in parallel.\n\n//for each group\n      tasks = [:]\n      // for each dep in group\n         tasks[label] = { -> build(job: \"SimpleBuild\",\n                            parameters: [\n                               string(name: \"build_label\", value: label),\n                               string(name: \"channel\", value: a_build[\"channel\"]),\n                               string(name: \"name_version\", value: a_build[\"name_version\"]),\n                               string(name: \"conf_repo_url\", value: conf_repo_url),\n                               string(name: \"conf_repo_branch\", value: conf_repo_branch),\n                               string(name: \"profile\", value: a_build[\"profile\"])\n                            ]\n                     )\n          }\n     parallel(tasks)\n\nEventually, this is what will happen:\n\nTwo SimpleBuild tasks will be  triggered, both for building library B, one for x86 and another for x86_64 architectures\n\nOnce \"A\" and \"B\" are built, \"F\" and \"D\" will be triggered, 4 workers will run the \"SimpleBuild\" task in parallel, (x86, x86_64)\n\nFinally \"G\" will be built. So 2 workers will run in parallel.\n\nThe Jenkins Stage View for the will looks similar to the figures below:\n\nMultiBuild\n\nSimpleBuild\n\nWe can configure the \" SimpleBuild\" task within different nodes (Windows, OSX, Linux…), and control the number of executors available in our Jenkins configuration.\n\nConclusions\n\nEmbracing DevOps for C/C++ is still marked as a to-do for many companies. It requires a big investment of time but can save huge amounts of time in the development and releasing life cycle for the long run. Moreover it increases the quality and the reliability of the C/C++ products. Very soon, adoption of DevOps for C/C++ companies will be a must!\n\nThe Jenkins example shown above that demonstrating how to control the library building in parallel is just Groovy code and a custom convenient yml file. The great thing about it is not the example or the code itself. The great thing is the possibility of defining your own pipeline scripts to adapt to your specific workflows, thanks to Jenkins Pipeline, Conan and JFrog Artifactory.\n\nMore on this topic will be presented at Jenkins Community Day Paris on\nJuly 11, and Jenkins User Conference Israel on July 13.","title":"Continuous Integration for C/C++ Projects with Jenkins and Conan","tags":["event","jenkins-user-conference","jenkins-community-day-paris"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-07-10T00:00:00.000Z","id":"8686ea9f-8c07-53fb-867e-e9ea74741ecf","slug":"/blog/2017/07/10/security-advisory/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities, including high severity ones:\n\nDocker Commons Plugin\n\nGit Plugin\n\nGitHub Branch Source Plugin\n\nParameterized Trigger Plugin\n\nPeriodic Backup Plugin\n\nPipeline: Build Step Plugin\n\nPipeline: Groovy Plugin\n\nPoll SCM Plugin\n\nRole-based Authorization Strategy Plugin\n\nScript Security Plugin\n\nSidebar Link Plugin\n\nSubversion Plugin\n\nAdditionally, the SSH Plugin received a security update a few days ago.\n\nFor an overview of what was fixed, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-07-13T00:00:00.000Z","id":"00ad337a-5c86-5032-be3e-f6f4934de80d","slug":"/blog/2017/07/13/speaker-blog-rosetta-stone/","strippedHtml":"This is a guest post by Kevin Burnett, DevOps Lead at\nRosetta Stone.\n\nHave you experienced that thing where you make a change in an app, and when you\ngo to check on the results of the build, you find an error that really doesn’t\nseem relevant to your change? And then you notice that your build is the first\nin over a year. And then you realize that you have accidentally become the\nsubject matter expert in this app.\n\nYou have no clue what change caused this failure or when that change occurred.\nDid one Jenkins agent become a\nsnowflake server,\naccruing cruft on the file system that is not cleaned up before each build?\nDid some unpinned external dependency upgrade in a backwards-incompatible fashion?\nDid the credentials the build plan was using to connect to source control get rotated?\nDid a dependent system go offline?\nOr - and I realize that this is unthinkable - did you legitimately break a test?\n\nNot only is this type of archaeological expedition often a bad time for the\nperson who happened to commit to this app (\"No good deed goes unpunished\"), but\nit’s also unnecessary. There’s a simple way to reduce the cognitive load it\ntakes to connect cause and effect: build more frequently.\n\nOne way we achieve this is by writing scripts to maintain our apps. When we\nbuild, the goal is that an equivalent artifact should be produced unless there\nwas a change to the app in source control. As such, we pin all of our\ndependencies to specific versions. But we also don’t want to languish on old\nversions of dependencies, whether internal or external. So we also have an\nauto-maintain script that bumps all of these versions and commits the result.\n\nI’ll give an example. We use docker to build and deploy our apps, and each app\ndepends on a base image that we host in a docker registry. So a Dockerfile in\none of our apps would have a line like this:\n\nFROM our.registry.example.com/rosettastone/sweet-repo:jenkins-awesome-project-sweet-repo-5\n\nWe build our base images in Jenkins and tag them with the Jenkins $BUILD_TAG,\nso this app is using build 5 of the rosettastone/sweet-repo base image.\nLet’s say we updated our sweet-repo base image to use ubuntu 16.04 instead of 14.04\nand this resulted in build 6 of the base image. Our auto-maintain script takes\ncare of upgrading an app that uses this base image to the most recent version.\nThe steps in the auto-maintain script look like this:\n\nFigure out what base image tag you’re using.\n\nFind the newest version of that base image tag by querying the docker registry.\n\nIf necessary, update the FROM line in the app’s Dockerfile to pull in the most recent version.\n\nWe do the same thing with library dependencies.\nIf our Gemfile.lock is referencing an old library, running auto-maintain will update things.\nThe same applies to the Jenkinsfile for each app. If we decide to implement a new policy where we\ndiscard old builds, we update auto-maintain so that it will bring each app into\ncompliance with the policy, by changing, for example, this Jenkinsfile :\n\nJenkinsfile (Before)\n\npipeline {\n  agent { label 'docker' }\n  stages {\n    stage('commit_stage') {\n      steps {\n        sh('./bin/ci')\n      }\n    }\n  }\n}\n\nto this:\n\nJenkinsfile (After)\n\npipeline {\n  agent { label 'docker' }\n  options {\n    buildDiscarder(logRotator(numToKeepStr: '100'))\n  }\n  stages {\n    stage('commit_stage') {\n      steps {\n        sh('./bin/ci')\n      }\n    }\n  }\n}\n\nWe try to account for these sorts of things (everything that we can) in our\nauto-maintain script rather than updating apps manually, since this reduces the\nfriction in keeping apps standardized.\n\nOnce you create an auto-maintain script (start small), you just have to run it.\nWe run ours based on both \"actions\" and \"non-actions.\" When an internal library\nchanges, we kick off app builds, so a library’s Jenkinsfile might look like\nthis:\n\nJenkinsfile\n\npipeline {\n  agent { label 'docker' }\n  stages {\n    stage('commit_stage') {\n      steps {\n        sh('./bin/ci')\n      }\n    }\n    stage('auto_maintain_things_that_might_be_using_me') {\n      steps {\n        build('hot-project/auto-maintain-all-apps/master')\n      }\n    }\n  }\n}\n\nWhen auto-maintain updates something in an app, we have it commit the change\nback to the app, which in turn triggers a build of that app, and—​if all is\nwell—​a production deployment.\n\nThe only missing link then for avoiding one-year build droughts is to get around\nthe problem where auto-maintain isn’t actually updating anything in a certain app.\nIf no dependencies are changing, or if the technology in question is not\nreceiving much attention, auto-maintain might not do anything for an\nextended period of time, even if the script is run on a schedule using\ncron . For those cases, putting\na cron trigger in the Pipeline for each app will ensure that builds still happen periodically:\n\nJenkinsfile\n\npipeline {\n  agent { label 'docker' }\n  triggers {\n    cron('@weekly')\n  }\n  stages {\n    stage('commit_stage') {\n      steps {\n        sh('./bin/ci')\n      }\n    }\n  }\n}\n\nIn most cases, these periodic builds won’t do anything different from the last\nbuild, but when something does break, this strategy will allow you to decide\nwhen you find out about it (by making your cron @weekly, @daily, etc)\ninstead of letting some poor developer find out about it when they do\nsomething silly like commit code to an infrequently-modified app.\n\nKevin will be\npresenting\nmore on this topic at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Automated Software Maintenance","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2017-07-17T00:00:00.000Z","id":"0116e3f0-03af-5f1b-b064-5d44aaf60398","slug":"/blog/2017/07/17/speaker-blog-care/","strippedHtml":"This is a guest post by Mandy Hubbard, Software Engineer/QA Architect at\nCare.com.\n\nImagine this: It’s 4:30pm on a Friday,\nyou have a major release on Monday, and your Jenkins server goes down.\nIt doesn’t matter if it experienced a hardware failure,\nfell victim to a catastrophic\nfat-finger error,\nor just got hit by a meteor - your Jenkins server is toast.\nHow long did it take to perfect your Pipeline,\nall your Continuous Delivery jobs, plugins, and credentials?\nHopefully you at least have a recent backup of your Jenkins home directory,\nbut you’re still going have to work over the weekend with IT to procure a new server,\ninstall it, and do full regression testing to be up and running by Monday morning.\nGo ahead and take a moment, go to your car and just scream.\nIt will help …​ a little.\n\nBut what if you could have a Jenkins environment that is completely disposable,\none that could be easily rebuilt at any time?\nUsing Docker and Joyent’s\nContainerPilot, the team at\nCare.com HomePay\nhas created a production Jenkins environment that is completely software-defined.\nEverything required to set up a new Jenkins environment is stored in source control,\nversioned, and released just like any other software.\nAt Jenkins World, I’ll do a developer deep-dive into this approach during my technical session,\nIndispensable, Disposable Jenkins,\nincluding a demo of bringing up a fully configured Jenkins server in a Docker container.\nFor now, let me give you a basic outline of what we’ve done.\n\nMandy will be\npresenting\nmore on this topic at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.\n\nFirst, we add ContainerPilot to our Jenkins image by including it in the Dockerfile.\n\nDockerfile\n\n## ContainerPilot\n\nENV CONTAINERPILOT_VERSION 2.7.0\nENV CONTAINERPILOT_SHA256 3cf91aabd3d3651613942d65359be9af0f6a25a1df9ec9bd9ea94d980724ee13\nENV CONTAINERPILOT file:///etc/containerpilot/containerpilot.json\n\nRUN curl -Lso /tmp/containerpilot.tar.gz https://github.com/joyent/containerpilot/releases/download/${CONTAINERPILOT_VERSION}/containerpilot-${CONTAINERPILOT_VERSION}.tar.gz && \\\n    echo \"${CONTAINERPILOT_SHA256}  /tmp/containerpilot.tar.gz\" | sha256sum -c && \\\n    tar zxf /tmp/containerpilot.tar.gz -C /bin && \\\nrm /tmp/containerpilot.tar.gz\n\nThen we specify containerpilot as the Docker command in the docker-compose.yml\nand pass the Jenkins startup script as an argument.\nThis allows ContainerPilot to perform our preStart business before starting the Jenkins server.\n\ndocker-compose.yml\n\njenkins:\n    image: devmandy/auto-jenkins:latest\n    restart: always\n    mem_limit: 8g\n    ports:\n      - 80\n      - 22\n    dns:\n      - 8.8.8.8\n      - 127.0.0.1\n    env_file: _env\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      - CONSUL=consul\n    links:\n      - consul:consul\n    ports:\n      - \"8080:80\"\n      - \"2222:22\"\n    command: >\n      containerpilot\n      /usr/local/bin/jenkins.sh\n\nConfiguration data is read from a Docker Compose _env file,\nas specified in the docker-compose.yml file,\nand stored in environment variables inside the container.\nThis is an example of our _env file:\n\n_env\n\nGITHUB_TOKEN=\nGITHUB_USERNAME=DevMandy\nGITHUB_ORGANIZATION=DevMandy\nDOCKERHUB_ORGANIZATION=DevMandy\nDOCKERHUB_USERNAME=DevMandy\nDOCKERHUB_PASSWORD=\nDOCKER_HOST=\nSLACK_TEAM_DOMAIN=DevMandy\nSLACK_CHANNEL=jenkinsbuilds\nSLACK_TOKEN=\nBASIC_AUTH=\nAD_NAME=\nAD_SERVER=\nPRIVATE_KEY=\n\nJenkins stores its credentials and plugin information in various xml files.\nThe preStart script modifies the relevant files,\nsubstituting the environment variables as appropriate,\nusing a set of command line utilities called xmlstarlet.\nHere is an example method from our preStart script that configures Github credentials:\n\ngithub_credentials_setup() {\n    ## Setting Up Github username in credentials.xml file\n    echo\n    echo -e \"Adding Github username to credentials.xml file for SSH key\"\n    xmlstarlet \\\n        ed \\\n        --inplace \\\n        -u '//com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey[id=\"github\"]/username' \\\n        -v ${GITHUB_USERNAME} \\\n        ${JENKINS_HOME}/credentials.xml\n\n    echo -e \"Adding Github username to credentials.xml file for Github token\"\n    xmlstarlet \\\n        ed \\\n         --inplace \\\n        -u '//com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl[id=\"github_token\"]/username' \\\n        -v ${GITHUB_USERNAME} \\\n        ${JENKINS_HOME}/credentials.xml\n\n    PASSWORD=${GITHUB_TOKEN}\n    echo -e \"Adding Github token to credentials.xml\"\n    xmlstarlet \\\n        ed \\\n        --inplace \\\n        -u '//com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl[id=\"github_token\"]/password' \\\n        -v ${PASSWORD} \\\n        ${JENKINS_HOME}/credentials.xml\n}\n\nThis approach can be used to automate all things Jenkins.\nThese are just a few of the things I’ll show you in my Jenkins World session,\nwhich you can build on to automate anything else your Jenkins environment needs.\n\nCreation of credentials sets for interacting with third party services\nlike Github, Docker Hub and Slack\n\nConfiguration of the Active Directory plugin\nand setup of matrix-based security\n\nConfiguration of the Github Organization plugin,\nwhich results in the automatic creation of all Jenkins pipeline jobs\nby scanning the organization for all repositories containing a Jenkinsfile\n\nConfiguration of the\nDocker Pipeline plugin, including creating templates for all custom build agents\n\nConfiguration of the Global Pipeline Libraries plugin\n\nConfiguration of the Slack Notifier plugin\n\nWith software-defined Jenkins, pipeline infrastructure\ngains the same flexibility and resiliency as the rest of the development pipeline.\nIf we decide to change our Jenkins configuration in any way –\nfor example installing a new plugin or upgrading an existing one,\nadding a new global library, or adding new Docker images for build agents –\nwe simply edit our preStart script to include these changes, build a new Docker image,\nand the Jenkins environment is automatically reconfigured when we start a new container.\nBecause the entire configuration specification lives in a Github repository,\nchanges are merged to the \"master\" branch using pull requests,\nand our Jenkins Docker image is tagged using\nsemantic versioning just like any other component.\nJenkins can be both indispensable and completely disposable at the same time.","title":"Indispensable, Disposable Jenkins","tags":["event","JenkinsWorld"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2017-07-21T00:00:00.000Z","id":"215b578b-be74-5ce1-b9f3-38b9bfc35f5c","slug":"/blog/2017/07/21/scaling-jenkins-with-kubernetes-on-google-container-engine/","strippedHtml":"This is a guest post by Guillaume Laforge,\nDeveloper Advocate for Google Cloud\n\nLast week, I had the pleasure to speak at the\nJenkins Community Day conference, in Paris,\norganized by my friends from JFrog,\nprovider of awesome tools for software management and distribution.\nI covered how to scale Jenkins with Kubernetes on\nGoogle Container Engine.\n\nFor the impatient, here are the slides of the presentation I’ve given:\n\nBut let’s step back a little. In this article, I’d like to share with you why you would want to run Jenkins in the cloud,\nas well as give you some pointers to interesting resources on the topic.\n\nWhy running Jenkins in the cloud?\n\nSo why running Jenkins in the cloud? First of all, imagine your small team, working on a single project.\nYou have your own little server, running under a desk somewhere, happily building your application on each commit,\na few times a day. So far so good, your build machine running Jenkins isn’t too busy, and stays idle most of the day.\n\nLet’s do some bottom of the napkin calculations. Let’s say you have a team of 3 developers,\ncommitting roughly 4 times a day, on one single project, and the build takes roughly 10 minutes to go.\n\n3 developers * 4 commits / day / developer * 10 minutes build time * 1 project = 1 hour 20 minutes\n\nSo far so good, your server indeed stays idle most of the day. Usually, at most,\nyour developers will wait just 10 minutes to see the result of their work.\n\nBut your team is growing to 10 persons, the team is still as productive, but the project becoming bigger,\nthe build time goes up to 15 minutes:\n\n10 developers * 4 commits / day / developer * 15 minutes build time * 1 project = 10 hours\n\nYou’re already at 10 hours build time, so your server is busy the whole day, and at times,\nyou might have several build going on at the same time, using several CPU cores in parallel.\nAnd instead of building in 15 minutes, sometimes, the build might take longer, or your build might be queued.\nSo in theory, it might be 15 minutes, but in practice, it could be half an hour because of the length of the queue\nor the longer time to build parallel projects.\n\nNow, the company is successful, and has two projects instead of one (think a backend and a mobile app).\nYour teams grow further up to 20 developers per project. The developers are a little less productive\nbecause of the size of the codebase and project, so they only commit 3 times a day.\nThe build takes more time too, at 20 minutes (in ideal time). Let’s do some math again:\n\n20 developers * 3 commits / day / developer * 20 minutes build time * 2 projects = 40 hours\n\nWoh, that’s already 40 hours of total build time, if all the builds are run serially.\nFortunately, our server is multi-core, but still, there are certainly already many builds that are enqueued,\nand many of them, perhaps up to 2-3 or perhaps even 4 could be run in parallel.\nBut as we said, the build queue increases further, the real effective time of build is certainly longer than 30 minutes.\nPerhaps at times, developers won’t see the result of their developments before at least an hour, if not more.\n\nOne last calculation? With team sizes of 30 developers, decreased productivity of 2 commits, 25 build time,\nand 3 projects? And you’ll get 75 hours total build time. You may start creating a little build farm,\nwith a controller and several build agents. But you also increase the burden of server management.\nAlso, if you move towards a full Continuous Delivery or Continuous Deployment approach,\nyou may further increase your build times to go up to deployment, make more but smaller commits, etc.\nYou could think of running builds less often, or even on a nightly basis, to cope with the demand, but then,\nyour company is less agile, and the time-to-market for fixes of new features might increase,\nand your developers may also become more frustrated because they are developing in the blind,\nnot knowing before the next day if their work was successful or not.\n\nWith my calculations, you might think that it makes more sense for big companies, with tons of projects and developers.\nThis is quite true, but when you’re a startup, you also want to avoid taking care of local server management,\nprovisioning, etc. You want to be agile, and use only compute resources you need for the time you need them.\nSo even if you’re a small startup, a small team, it might still make sense to take advantage of the cloud.\nYou pay only for the actual time taken by your builds as the build agent containers are automatically provisioned\nand decommissioned. The builds can scale up via Kubernetes, as you need more (or less) CPU time for building everything.\n\nAnd this is why I was happy to dive into scaling Jenkins in the cloud. For that purpose,\nI decided to go with building with containers, with Kubernetes, as my app was also containerized as well.\nGoogle Cloud offers Container Engine, which is basically just Kubernetes in the cloud.\n\nUseful pointers\n\nI based my presentation and demo on some great solutions that are published on the Google Cloud documentation portal.\nLet me give you some pointers.\n\nOverview of Jenkins on Container Engine\n\nSetting up Jenkins on Container Engine\n\nConfiguring Jenkins for Container Engine\n\nContinuous Deployment to Container Engine using Jenkins\n\nLab: Build a Continuous Deployment Pipeline with Jenkins and Kubernetes\n\nThe latter one is the tutorial I actually followed for the demo that I presented during the conference.\nIt’s a simple Go application, with a frontend and backend.\nIt’s continuously build, on each commit (well, every minute to check if there’s a new commit),\nand deployed automatically in different environments: dev, canary, production.\nThe sources of the project are stored in Cloud Source Repository (it can be mirrored from Github, for example).\nThe containers are stored in Cloud Container Registry.\nAnd both the Jenkins controller and agents, as well as the application are running inside Kubernetes clusters in Container Engine.\n\nSummary and perspective\n\nDon’t bother with managing servers! Quickly, you’ll run out of CPU cycles,\nand you’ll have happier developers with builds that are super snappy!\n\nAnd for the record, at Google, dev teams are also running Jenkins!\nThere was a presentation ( video and\nslides\navailable) given last year by David Hoover at Jenkins World\ntalking about how developers inside Google are running hundreds of build agents to build projects on various platforms.","title":"Scaling Jenkins with Kubernetes on Google Container Engine","tags":["jenkins","kubernetes","jenkins-community-day-paris"],"authors":[{"avatar":null,"blog":"https://glaforge.appspot.com/","github":"glaforge","html":"","id":"glaforge","irc":null,"linkedin":null,"name":"Guillaume Laforge","slug":"/blog/authors/glaforge/","twitter":"glaforge"}]}},{"node":{"date":"2017-07-26T00:00:00.000Z","id":"a5452093-8b55-5ee4-8314-15bc7e02cd41","slug":"/blog/2017/07/26/powershell-pipeline/","strippedHtml":"I am pleased to announce Microsoft PowerShell support for Jenkins Pipeline!\nAs of Durable Task 1.14 and\nPipeline Nodes and Processes Plugin 2.12, you will now be able to run Microsoft PowerShell scripts\ndirectly in your Jenkins Pipeline projects.  This blog post covers the basics\nof getting started with Microsoft PowerShell in Pipeline and provides some\nbasic examples.\n\nIntroduction to Microsoft PowerShell\n\nPowerShell is Microsoft’s open source and cross platform command line shell, as\nwell as an automation and configuration tool/framework which has a broad user\nbase. PowerShell can be used to perform common system administration tasks in\nWindows, macOS, and Linux environments. It can also be used as a general\npurpose scripting language. Now that Jenkins Pipeline supports PowerShell, you\ncan enjoy the rich set of features in PowerShell for your daily DevOps work.\n\nBefore diving into using PowerShell in your Pipeline, I recommend reading the\nWindows\nPowerShell Reference as well as the\nPowerShell Team Blog for an\nintroduction to PowerShell features, utilities, and as a quick look into the\nPowerShell language.  Microsoft also has an active\nPowerShell community on GitHub,\nwhich I highly recommend visiting to submit feature requests and bug\nreports as you see fit. Jenkins Pipeline currently supports Microsoft\nPowerShell 3.0 or higher, so also be sure to check which version of PowerShell\nis installed on your system in order to take advantage of PowerShell in your\nPipeline.  Please note that we recommend that you upgrade to the latest stable\nversion of PowerShell available, which as of this writing is version 5.1.14393.\n\nThe powershell step\n\nnode {\n    powershell 'Write-Output \"Hello, World!\"'\n}\n\nUsing Microsoft PowerShell in Pipeline\n\nWriting PowerShell code as part of your pipeline is incredibly simple. The step that you will use is\nsimply powershell, and it includes the same optional parameters as the\nWindows Batch ( bat) step, including:\n\nreturnStdout: Returns the standard output stream with a default encoding of UTF-8 (alternative encoding is optional)\n\nreturnStatus: Returns the exit status (integer) of the PowerShell script\n\nExamples\n\nCapture exit status of a PowerShell script\n\nnode {\n    def status = powershell(returnStatus: true, script: 'ipconfig')\n    if (status == 0) {\n        // Success!\n    }\n}\n\nCapture and print the output of a PowerShell script\n\nnode {\n    def msg = powershell(returnStdout: true, script: 'Write-Output \"PowerShell is mighty!\"')\n    println msg\n}\n\nWhich streams get returned when I use returnStdout?\n\nUntil the release of PowerShell 5, there were five distinct output streams. PowerShell 5 introduced a sixth stream for pushing \"informational\" content,\nwith the added benefit of being able to capture messages sent to Write-Host. Each row of the following table describes a PowerShell stream along with\nthe corresponding Cmdlet used for writing to the stream for that particular row. Please keep in mind that stream 6 and associated cmdlets either\ndo not exist or exhibit alternate behavior in versions of PowerShell earlier than version 5.\n\nStream\nDescription\nCmdlet\n\n1\nOutput stream (e.g. stdOut)\nWrite-Output\n\n2\nError stream (e.g. stdErr)\nWrite-Error\n\n3\nWarning stream\nWrite-Warning\n\n4\nVerbose stream\nWrite-Verbose\n\n5\nDebug stream\nWrite-Debug\n\n6\nInformation stream\nWrite-Information (or Write-Host with caveats)\n\nIf you are using the returnStdout option of the powershell Pipeline step\nthen only stream 1 will be returned, while streams 2-6 will be redirected to\nthe console output. For example:\n\nWrite to all available streams and return the standard output\n\nnode {\n    def stdout = powershell(returnStdout: true, script: '''\n        # Enable streams 3-6\n        $WarningPreference = 'Continue'\n        $VerbosePreference = 'Continue'\n        $DebugPreference = 'Continue'\n        $InformationPreference = 'Continue'\n\n        Write-Output 'Hello, World!'\n        Write-Error 'Something terrible has happened!'\n        Write-Warning 'Warning! There is nothing wrong with your television set'\n        Write-Verbose 'Do not attempt to adjust the picture'\n        Write-Debug 'We will control the horizontal.  We will control the vertical'\n        Write-Information 'We can change the focus to a soft blur or sharpen it to crystal clarity.'\n    ''')\n    println stdout\n}\n\nConsole output:\n\n[Pipeline] {\n[Pipeline] powershell\n[TestStreams] Running PowerShell script\n\\workspace\\TestStreams@tmp\\durable-4d924c2d\\powershellScript.ps1 : Something terrible has\nhappened!\nAt \\workspace\\TestStreams@tmp\\durable-4d924c2d\\powershellMain.ps1:2 char:1\n+ & ' \\workspace\\TestStreams@tmp\\durable-4d924c ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,powershellScript.ps1\n\nWarning! There is nothing wrong with your television set\nDo not attempt to adjust the picture\nWe will control the horizontal.  We will control the vertical\nWe can change the focus to a soft blur or sharpen it to crystal clarity.\nHello, World!\n[Pipeline] }\n[Pipeline] // node\n[Pipeline] End of Pipeline\nERROR: script returned exit code 1\nFinished: FAILURE\n\nNote that \"Hello, World!\" gets printed last even though it is the first output\nstatement in my script.  Another interesting aspect of this example is that the\npowershell step failed, which ultimately caused the job to fail. The failure\nin this example is due to the PowerShell error stream being non-empty, which\ntherefore caused the step to result in a non-zero exit status. However, as you\nwill soon discover, there are a variety of causes for a failing powershell\nstep.\n\nWhat causes a failing exit status?\n\nWhen you execute a powershell step, it may produce a non-zero exit code and\nfail your pipeline build.  This is very similar to other shell steps with some\ninteresting caveats. Your powershell step may produce a failing exit status\nin the following instances:\n\nSomething in your PowerShell script has thrown an exception\n\nYour PowerShell script explicitly calls exit with a non-zero exit code\n\nYour PowerShell script calls a native application that produces a non-zero $LastExitCode\n\n$LastExitCode is an automatic variable that is set after executing a native application\n\nYour PowerShell script results in a non-empty error stream (with or without throwing an exception)\n\nOverriding the exit status behavior of your powershell step can be achieved\nby explicitly exiting from your script as long as the failure was not caused by\nan unhandled exception. For example:\n\nUnavoidable failure caused by an unhandled exception\n\nnode {\n    powershell '''\n        throw 'Error! Problem Exists Between Keyboard And Chair'\n        exit 0  # Unreachable code\n    '''\n}\n\nFailed step caused by a non-empty error stream\n\nnode {\n    powershell '''\n        Write-Error 'Error! Problem Exists Between Keyboard And Chair'\n    '''\n}\n\nFailure prevented by an explicit exit\n\nnode {\n    powershell '''\n        Write-Error 'Error! Problem Exists Between Keyboard And Chair'\n        exit 0\n    '''\n}\n\nScripts vs. Cmdlets\n\nA Cmdlet is a small lightweight utility written in either C#, and compiled, or\nwritten in PowerShell directly. Depending on what your goal is in your pipeline\nyou can make use of Cmdlets directly in your pipeline code, call a self\ncontained PowerShell script, or some mixture of the two. If your strategy is to\nkeep each powershell step as short and succinct as possible then it may make\nsense for you to write a library of Cmdlets, but if you have monolithic scripts\nthen it may make sense for you to call those scripts directly from your\npipeline. The choice is entirely up to you, as both scenarios are supported.\n\nThanks for reading, and have fun!\n\nI sincerely hope that this post has encouraged you to try using PowerShell in\nyour Jenkins Pipeline. Please do not hesitate to file an issue against the\ndurable-task\nplugin on\nJIRA\nif you have discovered any problem that you suspect is related to the\npowershell step.  For general PowerShell related issues or inquiries\nplease route your questions to the\nPowerShell community.","title":"Microsoft PowerShell Support for Pipeline","tags":["durable-task","powershell"],"authors":[{"avatar":null,"blog":null,"github":"gabloe","html":"","id":"gabloe","irc":null,"linkedin":null,"name":"Gabriel Loewen","slug":"/blog/authors/gabloe/","twitter":null}]}},{"node":{"date":"2017-07-27T00:00:00.000Z","id":"92796c2d-9e8b-530e-82dd-441263269c06","slug":"/blog/2017/07/27/standardizing-builds-with-shared-libraries/","strippedHtml":"This is a guest post by Alvin Huang, DevOps Engineer at\nFireEye.\n\nAs a security company, FireEye relentlessly protects our customers from cyber attacks. To act\nquickly on intelligence and expertise learned, the feedback loop from the front lines to features\nand capabilities in software must be small. Jenkins helps us achieve this by allowing us to build,\ntest, and deploy to our hardware and software platforms faster, so we can stop the bad guys\nbefore they reach our customers.\n\nMore capabilities and functionalities in our product offerings means more applications and\nsystems, which means more software builds and jobs in Jenkins. Within the FaaS (FireEye as a\nService) organization, the tens of Jenkins jobs that were manageable manually in the web GUI\nquickly grew to hundreds of jobs that required more automation. Along the way, we outgrew\nour old legacy datacenter and were tasked with migrating 150+ Freestyle jobs on an old 1.x\nJenkins instance to a newer 2.x instance in the new datacenter in 60 days.\n\nCopying Freestyle job XML configuration files to the new server would leave\ntechnical debt.  Using Freestyle job templates would be better but for\ncomplicated jobs that require multiple templates, this would still create large\ndependency chains that would be hard to trace in the log output. Finally,\ndevelopers were not excited about having to replicate global changes, such as\nadd an email recipient when a new member joins the team, across tens of jobs\nmanually or using the\nConfiguration\nSlicer. We needed a way to migrate the jobs in a timely fashion while getting\nrid of as much technical debt as possible.\n\nJenkins Pipeline to the rescue! In 2.0, Jenkins added the capability to create pipelines as first-\nclass entities. At FireEye, we leveraged many of the features available in pipeline to aid in the\nmigration process including the ability to:\n\ncreate Pipeline as Code in a Jenkinsfile stored in SCM\n\ncreate Jenkins projects automatically when new branches or repos get added with a Jenkinsfile\n\ncontinue jobs after the Jenkins controller or build agent crashes\n\nand most importantly, build a Pipeline\nShared Library that keeps projects\nDRY and\nallows new applications to be on boarded into Jenkins within seconds\n\nHowever, Jenkins Pipeline came with a DSL that our users would have to learn to translate their\nFreestyle jobs to pipeline jobs. This would be a significant undertaking across multiple teams\njust to create Jenkins jobs. Instead, the DevOps team identified similarities across all the\nFreestyle jobs that we were migrating, learned the Jenkins DSL to become SMEs for the\norganization, and built a shared library of functions and wrappers that saved each Dev/QA\nengineer hours of time.\n\nBelow is an example function we created to promote builds in Artifactory:\n\nvars/promoteBuild.groovy\n\ndef call(source_repo, target_repo, build_name, build_number) {\n    stage('Promote to Production repo') {\n        milestone label: 'promote to production'\n        input 'Promote this build to Production?'\n\n        node {\n            Artifactory.server(getArtifactoryServerID()).promote([\n                'buildName'   : build_name,\n                'buildNumber' : build_number,\n                'targetRepo'  : target_repo,\n                'sourceRepo'  : source_repo,\n                'copy'        : true,\n            ])\n    }\n}\n\ndef call(source_repo, target_repo) {\n    buildInfo = getBuildInfo()\n\n    call(source_repo, target_repo, buildInfo.name, buildInfo.number)\n}\n\nRather than learning the Jenkins DSL and looking up how the Artifactory Plugin worked in\nPipeline, users could easily call this function and pass it parameters to do the promotion work\nfor them. In the Shared Library, we can also create build wrappers of opinionated workflows,\nthat encompasses multiple functions, based on a set of parameters defined in the Jenkinsfile.\nIn addition to migrating the jobs, we also had to migrate the build agents. No one knew the\nexact list of packages, versions, and build tools installed on each build server, so rebuilding\nthem would be extremely difficult. Rather than copying the VMs or trying to figure out what\npackages were on the build agents, we opted to use Docker to build containers with all\ndependencies needed for an application.\n\nI hope you will join me at my Jenkins World session:\nCodifying the Build and Release Process with a Jenkins\nPipeline Shared Library, as I deep dive into the inner workings of our Shared\nPipeline Library and explore how we integrated Docker into our CI/CD pipeline.\nCome see how we can turn a Jenkinsfile with just a set of parameters like this:\n\nJenkinsfile\n\nstandardBuild {\n    machine          = 'docker'\n    dev_branch       = 'develop'\n    release_branch   = 'master'\n    artifact_apttern = '*.rpm'\n    html_pattern     = [keepAll: true, reportDir: '.', reportFiles: 'output.html', reportName: 'OutputReport']\n    dev_repo         = 'pipeline-examples-dev'\n    prod_repo        = 'pipeline-examples-prod'\n    pr_script        = 'make prs'\n    dev_script       = 'make dev'\n    release_script   = 'make release'\n}\n\nand a Dockerfile like this:\n\nDockerfile\n\nFROM faas/el7-python:base\n\nRUN yum install -y python-virtualenv \\\n        rpm-build && \\\n        yum clean all\n\nInto a full Jenkins Pipeline like this:\n\nAs we look ahead at FireEye, I will explore how the Shared Library sets us up for easier future\nmigrations of other tools such as Puppet, JIRA, and Artifactory, and easier integration with new\ntools like Openshift. I will also cover our strategies for deployments and plans to move to\nDeclarative Pipeline.\n\nAlvin will be\npresenting\nmore on this topic at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Codifying the Build and Release Process with a Pipeline Shared Library","tags":["event","JenkinsWorld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2017-08-03T00:00:00.000Z","id":"1ddf93ad-21ef-5f16-9fd5-7a69d3fb97d3","slug":"/blog/2017/08/03/jenkinsworld-ask-the-experts/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nThere are less than four weeks left until Jenkins World 2017. As usual, Jenkins\nWorld would not be complete without the Jenkins projects' \"Ask the Experts\". If\nyou are new to Jenkins World, the Jenkins project booth will be located on the\nexpo floor where contributors to the project hang out, share demos, and\nhelp users via the \"Ask the Experts\" program. I hope you will be pleasantly\nsurprised at the amount of 1-on-1 learning to be had in the booth!\n\nWe have a great list of experts who have volunteered to help staff the booth,\nincluding many frequent contributors, JAM organizers, and board members:\n\nDaniel Beck - Core, security, Jenkins supporting infra and developer supporting infra, project processes and governance\n\nSteven Christou - Plugins\n\nR. Tyler Croy - Pipeline, Docker,  governance\n\nNicolas De Loof - Docker\n\nJames Dumay - Blue Ocean, Pipeline, Jenkins future\n\nDamien Duportal - Docker, Infra/Virtualization, Provisioning Systems (ansible,chef, etc.), Pipeline\n\nTom Fennelly - Blue Ocean, general frontend stuff, general Jenkins stuff\n\nJesse Glick - Core, Pipeline, security, Jenkins dev infra, Mercurial, …\n\nMichael Hutterman - DevOps\n\nBaptiste Mathus - Governance, infra, Pipeline, HOSTING\n\nMichael Neale - Docker, Blue Ocean\n\nOleg Nenashev - Jenkins core, Jenkins administration, remoting\n\nLiam Newman - Pipeline, Jenkins 2\n\nJames Nord - Maven, plugins\n\nSam Van Oort - Pipeline, performance/scalability, Linux, Docker\n\nChris Orr -  Android development, Jenkins dev infra\n\nCarlos Sanchez - Docker, Mesos, Kubernetes\n\nBobby Sandell - Gerrit, Declarative Pipeline, core\n\nThorsten Scherler - Blue Ocean, front-end\n\nEric Smalling - Docker, config management (Puppet, some Ansible), VMware solutions, running Jenkins at large scale and general enterprise SDLC\n\nOlivier Vernin - Infra, Docker\n\nMark Waite - Git, Git plugin, Git client plugin\n\nOwen Mehegan - GitLab plugin\n\nDon’t have questions? Stop by anyways to say ‘hello’ and pick up some stickers.\n\nIf you are an active member of the Jenkins community and/or a contributor,\nconsider taking part in the \"Ask the Experts\" program. It’s a great opportunity\nto bond with other contributors and talk with fellow Jenkins users.\n\nJoin the Jenkins project at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Ask the Experts at Jenkins World 2017","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-08-07T00:00:00.000Z","id":"30508a44-0d3c-579b-8b31-b92e43b9e1f2","slug":"/blog/2017/08/07/intro-to-plugin-development/","strippedHtml":"This is a guest post by Mark Waite, who maintains\nthe git plugin,\nthe git client plugin,\nand is a technical evangelist for CloudBees, Inc.\n\nWhile developing the \" Intro to Plugin Development\"\nworkshop for Jenkins World 2017, I was impressed by the many Jenkins plugin development videos, tutorials, and guides.\nHere are some of my favorite plugin development topics and links.\n\nPlugin tutorial videos\n\nJenkins Online Meetup Plugin Development Part 1 - Basics - Steven Christou and Jesse Glick\n\nJenkins Online Meetup Plugin Development Part 2 - Web UI - Daniel Beck and Tom Fennelly\n\nWriting your third plugin - Justin Ryan\n\nJenkins Hackathon session at TNG Technology Consulting - Kohsuke Kawaguchi\n\nPlugin tutorial pages\n\nTutorial on jenkins.io\n\nInstall a Java Development kit, for example AdoptOpenJDK 8 or 11\n\nInstall the latest maven release\n\nInstall your IDE (I like Netbeans, has the Jenkins/Stapler plugin to make plugin creation as easy as menu:File[New Project > Maven > Jenkins Plugin])\n\nMore details\n\nMany of the Jenkins plugin development topics have dedicated pages of their own, including user interface, plugin testing, and javadoc.\n\nUser interface\n\nUI samples plugin (bars, boxes, buttons, lists, notification, and syntax highlighting)\n\nUnderstanding Jelly Tags from the Jenkins wiki\n\nForm Validation from the Jenkins wiki\n\nJelly Form Controls from the Jenkins wiki\n\nJelly Tag Library Reference from jenkins.io\n\nDataBoundConstructor in Basic Guide to Jelly usage\n\nDataBoundSetter in google groups\n\nTesting a plugin\n\nUnit test from the Jenkins wiki\n\nJenkins test objects like JenkinsRule and the WithoutJenkins annotation\n\nDataBoundConstructor in Basic Guide to Jelly usage\n\nDataBoundSetter in google groups\n\nJava unit testing tools like Hamcrest and AssertJ (and JenkinsMatchers)\n\nJava unit testing rules like TemporaryFolder, Timeout, and DisableOnDebug\n\nJava unit testing classes like Assume and Parameterized\n\nJava unit testing mock frameworks like mockito and powermock\n\nJavadoc\n\nJenkins core javadoc\n\nJenkins plugins javadoc\n\nExtension Points\n\nList of Jenkins core extension points and all Jenkins extension points\n\nCustom build steps\n\nAdding a custom build step\n\nActions\n\nJenkins Action and its subtypes\n\nMark will be presenting\nIntro to Plugin Development\nat\nJenkins World in August.\nRegister with the code JWFOSS for a 30% discount off your pass.","title":"Plugin Development Tutorials, Videos, and More","tags":["plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2017-08-07T00:00:00.000Z","id":"7ba8b0b9-e907-55d4-a2a2-ca447df4c528","slug":"/blog/2017/08/07/security-advisory/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities, including multiple high severity ones.\n\nWe strongly recommend updating the following plugins as soon as possible:\n\nBlue Ocean\n\nPipeline: Groovy Plugin\n\nScript Security Plugin\n\nLess severe security updates have been released for these plugins:\n\nConfig File Provider Plugin\n\nDatadog Plugin\n\nDeploy to container Plugin\n\nDRY Plugin\n\nPipeline: Input Step Plugin\n\nStatic Analysis Utilities Plugin\n\nAdditionally, the OWASP Dependency-Check Plugin recently also received a security update.\n\nFor an overview of what was fixed, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Important security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-08-08T00:00:00.000Z","id":"2e385886-1033-5881-ab06-b060d5568108","slug":"/blog/2017/08/08/introducing-jenkins-minute/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nThere are less than three weeks left until\nJenkins World 2017.\nLike last year, I’ll be at the\n\" Ask the Experts\"\nbooth to answer questions about all things Jenkins.\nIn preparation, I’ve started a continuing series of quick tutorial videos that answer\nsome of the most common questions I’ve seen asked in the community forums.\nThese  are by no means exhaustive - they’re basic answers, which we can build upon.\nEach video give a takes a simple example, shows how to create a working solution,\nand includes links in the description to related Jenkins documentation pages.\n\nI hope you find them useful.  Look for more of them coming soon!\n\nLiam will be at the\n\" Ask the Experts\"\nbooth at\nJenkins World in August.\nRegister with the code JWFOSS for a 30% discount off your pass.\n\nCreating Your First Pipeline in Blue Ocean\n\nUsing a Dockerfile with Jenkins Pipeline\n\nAdding Parameters to Jenkins Pipeline\n\nRecording Test Results and Archiving Artifacts","title":"Introducing the Jenkins Minute video series","tags":["blueocean","docker","jenkins-minute","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2017-08-10T00:00:00.000Z","id":"7a11360a-42a4-5d64-8401-89a9e4f35904","slug":"/blog/2017/08/10/kubernetes-with-pipeline-acs/","strippedHtml":"This is a guest post by Pui Chee Chen,\nProduct Manager at Microsoft working on\nAzure\nDevOps open source integrations.\n\nRecently, we improved the Azure Credential plugin by\nadding a custom binding for Azure Credentials which allows you to use an\nAzure\nservice principal (the analog to a service or system account) via  the\nCredentials Binding plugin. This means it’s now trivial to run Azure CLI\ncommands from a Jenkins Pipeline. We also recently published the first version\nof the Azure App Service plugin which makes it very\neasy to deploy\nAzure Web\nApps directly from Jenkins Pipeline. While we’ll have\nmuch more to discuss in our Jenkins World presentation on\nAzure\nDevOps open source integrations, in this blog post I wanted to share some good\nsnippets of what is possible today with Jenkins Pipeline and Azure.\n\nFirst, a simple example using the Azure CLI to list resources in the\nsubscription:\n\n// Scripted //\nnode {\n    /* .. snip .. */\n    stage('Deploy') {\n        withCredentials([azureServicePrincipal('principal-credentials-id')]) {\n            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'\n            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'\n            sh 'az resource list'\n        }\n    }\n}\n// Declarative //\n\nazureServicePrincipal() cannot be used in Declarative Pipeline until\nJENKINS-46103 is\nresolved.\n\nOnce a Pipeline can interact with Azure, there are countless ways one could\nimplement continuous delivery with Jenkins and Azure. From a deploying a simple\nwebapp with the\nAzure\nApp Service plugin and the azureWebAppPublish step, or a more advanced\ncontainer-based delivery pipeline to deliver new containers to\nKubernetes\nvia Azure Container Service.\n\nWith the Docker Pipeline plugin and a little bit of\nextra scripting, a Jenkins Pipeline can also build and publish a Docker\ncontainer to an\nAzure\nContainer Registry :\n\n// Scripted //\nimport groovy.json.JsonSlurper\n\nnode {\n    def container\n    def acrSettings\n\n    withCredentials([azureServicePrincipal('principal-credentials-id')]) {\n        stage('Prepare Environment') {\n            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'\n            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'\n            acrSettings = new JsonSlurper().parseText(\n                                            sh(script: \"az acs show -o json -n my-acr\", returnStdout: true))\n        }\n\n        stage('Build') {\n            container = docker.build(\"${acrSettings.loginServer}/my-app:${env.BUILD_ID}\")\n        }\n\n        stage('Publish') {\n            /* https://issues.jenkins.io/browse/JENKINS-46108 */\n            sh \"docker login -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} ${acrSettings.loginServer}\"\n            container.push()\n        }\n\n        stage('Deploy') {\n            echo 'Orchestrating a new deployment with kubectl is a simple exercise left to the reader ;)'\n        }\n    }\n}\n// Declarative //\n\nIf you have been following our\nAzure Blog, you may\nhave noticed we have shipped a lot of updates to provide better support for\nAzure on Jenkins, and vice versa, such as:\n\nHosted Jenkins. New\nSolution\nTemplate in Azure Marketplace lets you spin up a\nJenkins Controller on Azure in minutes. Not only is it easy and fast, the solution\ntemplate gives you option to scale up by selecting the VM disk type and size.\nAnd guess what? You can even select the Jenkins release type you want to use -\nLTS, weekly build or Azure verified - all under your control.\n\nContinuous integration experience. In the latest version of our\nAzure VM Agents plugin, we improved the user\nexperience and added the option to let you to select Managed Disk for disk\ntype (which is currently used extensively on\nci.jenknis.io. You no longer need to worry about\nexceeding the number of VMs on your subscription.\n\nContinuous deployment experience. Now, if\nAzure CLI is not your cup of tea, we released our first plugin to provide\ncontinuous deployment support to Azure App Service. The plugin supports all\nlanguages Azure App Service supports. We even have a walkthrough\nhere in the\nbrand new Jenkins Hub where you can find all Jenkins on Azure resources.\n\nPipeline readiness. Also, all Azure plugins are and will be pipeline ready.\nHave you been leveraging our\nAzure Storage plugin in your Pipeline?\n\nSo, what’s next? We have a big surprise in store at Jenkins World! :)\n\nWe are serious about supporting open source and the open source community.\nBe sure to catch our talk on\nAzure\nDevOps open source integrations.\nSee you at\nJenkins World 2017!\n\nJoin the Azure DevOps team at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"CI/CD with Jenkins Pipeline and Azure","tags":["plugins","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2017-08-11T00:00:00.000Z","id":"4d1723b9-7ca9-59e6-a301-6c0e75388381","slug":"/blog/2017/08/11/remoting-update/","strippedHtml":"Updated on Jan 10, 2019: The deprecated protocols were removed in Remoting 3.40+ and Jenkins 2.214+.\nSee jira:JENKINS-60381[Remove old, deprecated Remoting protocols] for more information and links.\n\nThere are upcoming changes in Jenkins \"core\" which may require extra steps\nwhen upgrading Jenkins.  If you use configuration management for Jenkins\nagents, please read this announcement carefully.\n\nIf you have ever seen messages like \"Channel is already closed\" or \"Remote call failed\" in your build logs,\nyou have already met Jenkins Remoting.\n\nRemoting is an agent executable and a library implementing the communication layer between Jenkins controllers and their agents (including communication protocols, distributed calls and classloading).\nIt is also used in several other cases: Maven Integration Plugin, Remoting-based CLI, etc.\n\nIn order to make it clear what’s changing in Jenkins Remoting, I have documented the various components on\nthe Remoting’s sub-project page, and will try to publish regular updates about the status of\nRemoting to this site and the developer mailing list.\n\nIn this post I would like to provide an update on the Remoting roadmap and to announce two major incoming changes: deprecation of old protocols and upgrade to Java 8.\nBoth changes will take place in one of the next Weekly releases.\nETA is Jenkins 2.75 on Aug 20, 2017.\n\nBelow are details on the incoming changes and compatibility notes.\n\nOld Remoting Protocols Deprecation\n\nIt has been almost one year since the release of JNLP4-connect protocol in Remoting 3.0.\nThis protocol has been enabled by default since 2.46.x, and so far it demonstrates good stability being compared to JNLP2 and JNLP3 protocols.\n\nAt the governance meeting\nwe decided to disable old Remoting protocols (JNLP/JNLP2 + CLI1) in new installations by default.\nThere are 3 reasons for it:\n\nMaintenance of multiple protocols takes a lot of extra effort.\nThe JNL2 NIO engine is complex and barely diagnosable.\n\nThere are known issues in JNLP2 connection management (see the protocol’s Errata). In many cases update to JNLP4 was a resolution\n\nJNLP1/JNLP2/CLI1 are unencrypted, and it is not something Jenkins users may expect in 2017\n\nIt is tracked as JENKINS-45841 in Jenkins JIRA.\n\nHow?\n\nWhen Jenkins is started in the new installation mode with enabled Installation Wizard, old protocols will be disabled\n\nJenkins shows an administrative warning when obsolete protocols are enabled\n\nCompatibility notes\n\nOlder instances won’t be affected by the disabling of the older JNLP1/JNLP2 protocols, which will still be enabled for them.\nNewly created instances which skip, or disable, the Setup Wizard will not be affected either.\n\n\"New\" Jenkins instances installed via setup wizard may be affected in edge cases. For example:\n\nAgents with Remoting older than 3.0 will be unable to connect.\n\nMitigation: Before updating make sure Remoting is not bundled custom Docker images, AMIs, etc.\n\nSwarm Plugin: old versions of Swarm Client (before 3.3) will be unable to connect to Jenkins, because Remoting 2.x is bundled\n\nMitigation : Update Swarm Client\n\nVery old jenkins-cli.jar without CLI2 support will be unable to connect.\n\nMitigation : Do not use Remoting-based CLI on new instances (see this blogpost)\n\nUpgrade to Java 8\n\nStarting with version 2.54, Jenkins requires Java 8 to run\n( announcement blog post).\nThis version is also required for Jenkins LTS 2.60.1.\n\nRemoting continued to support Java 7 for a while for backporting purposes,\nbut it will be also upgraded to Java 8 in the Remoting 3.11 release.\nThis Rremoting version is expected to be available in Jenkins 2.75 (ETA: Aug 20, 2017).\nThis change is tracked as JENKINS-43985.\n\nCompatibility notes\n\nThe update does not cause compatibility issues in common use-cases.\nHowever, there may be issues in custom Jenkins core builds and packaging.\nThere are several examples below.\n\nJenkins instances with built-in Remoting versions will NOT be affected, Java 8 is already required there\n\nUsers of community-provided Docker packages ( docker-agent,\ndocker-inbound-agent) will NOT be affected,\nJava 8 is already required there\n\nCustom Jenkins WAR file builds targeting Java 7 may fail to build/run if they bundle Remoting 3.11 or later\n\nCustom Jenkins agent instances (manually installed hosts, VM snapshots, Docker packages, AMIs, etc.) may fail if they download the latest Remoting version and use Java 7\n\nJava 9 support\n\nAs with Jenkins core, Java 9 not supported and not tested in Remoting.\nIt may work in some configurations, but it is not guaranteed.\n\nAs a consequence, it is not recommended to run Remoting with Java 9 right now.\nIt is also not recommended to use Maven Integration Plugin to run builds on Java 9.\n\nWhat’s next?\n\nThere are some ongoing activities in the Remoting sub-project:\n\nStability and Diagnosability improvements\n( JENKINS-38833)\n\nWhy? When it comes to Remoting issues, it is really hard to diagnose them\n\nRecently I have published some slides about preventing and diagnosing issues, but I want the behavior to be more stable by default\n\nThis Epic lists my plans about Remoting issues and papercuts I would like to fix this year\n\nRemoting Work Directories\n( JENKINS-44108)\n\nFor a long time logging was disabled by default in Java Web Start (JNLP) and SSH agents, because Remoting had no option to determine where to store such data before connecting to the controller\n\nThe new Remoting Work Directory feature (since Remoting 3.8) offers such storage, which is also used for storing JAR caches and for checking workspace writeability before accepting builds.\n\nThis Epic is about enabling Remoting work directories by default in common Agent launcher types.\n\nRemoting Upgradeability\n( JENKINS-44099)\n\nRight now Remoting is not being upgraded automatically on JNLP agents, it is supported only for Windows service agents starting from Jenkins 2.50\n\nOn the Jenkins controller side it is required to upgrade the Jenkins core in order to pick Remoting fixes.\n\nThis Epic aims simplifying the upgrade procedure for most common cases.\n\nIf you are interested in contributing to these tasks, or others in the Remoting\nsub-project, please feel free to reach out via the issue tracker or\n#jenkins IRC channel.\n\nIf you are coming to Jenkins World, you can also find me at the \"Ask the Experts\" booth there.\nSee more info about Ask the Experts here.\n\nUseful links\n\nRemoting Sub-Project on Jenkins website\n\nRemoting Release Notes\n\nRemoting documentation on GitHub\n\nMy slides about Remoting issues troubleshooting","title":"Remoting Update. Protocols deprecation, Java 8 requirement and plans","tags":["remoting","agents","upgrade","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2017-08-17T00:00:00.000Z","id":"9f425a12-2f6e-51cd-8c44-5ddce8f1bcb3","slug":"/blog/2017/08/17/speaker-blog-blazemeter/","strippedHtml":"This is a guest post by Guy Salton, Sr. Professional Services Engineer for\nCA BlazeMeter.\n\nJenkins\nPipeline is an important Jenkins feature for creating and managing a project\nin Jenkins. This is opposed to the traditional way of creating a Jenkins\nproject by using the Jenkins GUI. When running your open-source load test,\nJenkins Pipeline enables resilience, execution control, advanced logic and\nVersion Control management.  This blog post will explain how to run any\nopen-source load test with Jenkins Pipeline, through Taurus.\n\nTaurus is an open source test automation framework\nthat enables running and analyzing tests from 9 open source load and functional\ntesting tools: JMeter,\nSelenium, Gatling, The Grinder, Locust, Tsung, Siege, Apache Bench, and PBench.\nTest results can be analyzed in Taurus. For advanced analyses or running tests\nin the cloud, Taurus integrates with\nBlazeMeter.\n\nGuy will be\npresenting\nmore on this topic at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.\n\nGetting started with Taurus\n\nInstall Taurus.\n\nCreate the following Taurus configuration in YAML. Learn more about YAML in Taurus from\nthis tutorial.\n\n## execution:\n- concurrency: 100\n  hold-for: 10m\n  ramp-up: 120s\n  scenario: Thread Group\nscenarios:\n  Thread Group:\n    requests:\n    - label: blazedemo\n      method: GET\n      url: http://blazedemo.com/\n\nThis script runs 100 concurrent users, holds the load for 10 minutes, the\nramp-up is 120 seconds and the thread group runs one GET request to\nblazedemo.com.\n\nYou can specify an executor by adding executor: to the\nscript. Otherwise, the default executor will be JMeter. In the background,\nTaurus will create an artifact directory with a jmx file (or a Scala file if\nyou run Gatling, a Python file if you are running Selenium, etc.).\n\nOpen a terminal and run: bzt.yml\n\nView the test results:\n\nIf you want to conduct an in-depth analysis of your test results, run your\ntests on BlazeMeter. You will be able to monitor KPIs through advanced and\ncolorful reports, evaluate system health over time, and run your tests from\nmultiple geo-locations.\n\nRun the following command from the terminal:\n\nbzt.yml -report\n\nIntegrate Taurus With Pipeline\n\nTo run Taurus through Pipeline, you can also go\nstraight to Jenkins after creating your Taurus script.\n\nOpen Jenkins → New Item → Fill in an item name → Click on ‘Pipeline’\n\nNow create a Pipeline script. You can include all parts of\nyour CI/CD process in this script: Commit, Build, Unit Test, Performance Test,\netc., by creating different stages.\n\nThis Pipeline has three stages: The first is called “build”. In this example it\nis empty, but you can add commands that will build your code. The second,\ncalled “Performance Tests”, creates a folder called “Taurus-Repo” and runs the\nTaurus script that we created. At the same time (note the “parallel” command),\nthere is a “sleep” command for 60 seconds. Obviously it makes no sense to put\nthose two commands together, this is just to show you the option of running 2\ncommands in parallel. The third stage called “Deploy” is also empty in this\nexample. This is where you could deploy your new version.\n\nnode {\n   stage('Build') {\n      // Run the Taurus build\n   }\n   stage('Performance Tests') {\n    parallel(\n        BlazeMeterTest: {\n            dir ('Taurus-Repo') {\n                sh 'bzt.yml -report'\n            }\n        },\n        Analysis: {\n            sleep 60\n        })\n   }\n\n   stage(‘Deploy’) {\n   }\n}\n\nNote that you can either add the Pipeline inline, or choose the “Pipeline\nscript from SCM” option and add the URL to the script on GitHub (in this case\nyou need to upload a Jenkinsfile to GitHub). With \"Pipeline from SCM\",\nwhenever you need to update the tests, you can just add new commits to the\nJenkinsfile.\n\nSave the Pipeline\n\nClick on ‘Build Now’ to run the Pipeline\n\nClick on the new Build that is running now (build #6 in this example).\n\nClick on ‘Console Output’ to see the test results:\n\nIn the Console Output you can see the test results and also the link to the report in BlazeMeter.\n\nThat’s it! Jenkins Pipeline is now running open-source load testing tools via Taurus.\n\nCome to\nmy\nfree hands-on workshop “Learn to Release Faster by Load Testing With Jenkins”\nat Jenkins World 2017 on Tuesday August 29th from 1-5pm.  You will learn how to\ntest continuously with Jenkins, JMeter, BlazeMeter and Taurus, including how to\nrun JMeter with Jenkins, run the BlazeMeter plugin for Jenkins and how to use\nopen-source Taurus.\n\nTo learn more about BlazeMeter,\nclick here.","title":"Running load tests in Jenkins Pipeline with Taurus","tags":["event","jenkinsworld"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},{"node":{"date":"2017-08-18T00:00:00.000Z","id":"e2e86b67-d732-51e3-9127-44de5e51de0e","slug":"/blog/2017/08/18/declarative-pipelines-at-jenkinsworld/","strippedHtml":"This is a guest post by Andrew Bayer, who is\none of the authors of the\nDeclarative Pipeline plugin,\nand is a software engineer on the Pipeline team at\nCloudBees, Inc.\n\nA year ago at Jenkins World 2016, we unveiled Declarative Pipeline, a\nstructured way to define your Pipeline. It’s been a great year for Declarative\nand Pipeline in general, with the release of Declarative Pipeline 1.0 in\nFebruary, multiple releases since then, the introduction of\ndocumentation on Pipeline at jenkins.io,\nwith a focus on Declarative, and more. Given everything that’s happened over\nthe last year, we thought it’d be good to let you all know what you can expect\nto see and hear about Declarative Pipeline at this year’s Jenkins World.\n\nFirst, on Thursday, August 31, I’ll be giving a talk on Declarative Pipeline\nwith Robert Sandell, one of my coworkers\nhere at CloudBees and another author of Declarative Pipeline. We’ll be\ncovering what’s happened with Declarative over the last year, new features\nadded since the 1.0 release, such as the libraries directive and more when\nconditions, what’s planned for the upcoming 1.2 release (which is planned for\nshortly after Jenkins World!), including parallel stage s, and what’s on the\nroadmap for the future. In addition, we’ll be demoing some of the features in\n1.2, and providing some pointers on best practices for writing your Declarative\nPipeline.\n\nAlso on Thursday, Stephen Donner from Mozilla\nwill be giving a demo showing Mozilla’s usage of Declarative Pipeline and\nshared libraries at the Community Booth - Mozilla has been doing great work\nwith Declarative, and I’m excited to see their usage in more detail and hear\nStephen talk about their experience!\n\nIn addition, Robert, Stephen, and myself will all be at Jenkins World both days\nof the main sessions, and Robert and myself will also be at the\nContributor Summit\non Tuesday. We’d love to hear your thoughts on Declarative and will be happy to\nanswer any questions that we can. Looking forward to seeing you all!\n\nAndrew Bayer and Robert Sandell will be talking about the latest on\nDeclarative Pipeline in Jenkins\nat Jenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Declarative Pipeline at Jenkins World","tags":["plugins","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2017-08-21T00:00:00.000Z","id":"9b298e59-a84f-5cc2-aaac-496458bd8435","slug":"/blog/2017/08/21/jenkins-world-demos/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nJenkins World 2017 is a week\naway. Like last year, we are bringing back the lunch-time demos in the Jenkins\nproject’s booth.\nThese are quick 15 minute How-to demos by Jenkins\nexperts.\nThese demos will not be live streamed, nor recorded, so come early to get the\nfront row seat, we are expecting a large crowd!\n\nWednesday, August 30th\n\nTime\nSession\nDetails\nPresenter\n\n12:15 - 12:30\nDelivery Pipelines with Jenkins\nHow to set up holistic Delivery Pipelines with the DevOps enabler tool Jenkins.\nMichael Hutterman\n\n12:30 - 12:45\nDeveloping Pipeline Libraries Locally\nIf you have ever tried developing Pipeline Libraries, you may have noticed how long it takes to deploy a new version to server to discover just another syntax error. I will show how to edit and test Pipeline libraries locally before committing to the repository (with Configuration-as-Code and Docker).\nOleg Nenashev\n\n12:45 - 13:00\nSecuring a Jenkins Instance\nA set of minimum steps every Jenkins Admin should follow so his public-facing Jenkins instance doesn’t turn into a Bitcoin mine.\nClaudiu Guiman\n\n13:00 - 13:15\nGit Tips and Tricks\nLatest capabilities in the git plugin, like large file support, reference repositories and some reminders of existing tips that can reduce server load, decrease job time, and decrease disc use.\nMark Waite\n\n13:15 - 13:30\nDelivery Pipelines with Jenkins 2\nHow to promote Java EE and Docker binaries toward production.\nMichael Hutterman\n\n13:30 - 13:45\nDelivery Pipelines, with Jenkins 2, SonarQube, and Artifactory\nThe nuts and bolts of setting up a scalable, high-end delivery pipeline.\nMichael Hutterman\n\n13:45 - 14:00\nVisual Pipeline Creation in Blue Ocean\nWe will show how to use Blue Ocean to build a real-world continuous delivery pipeline using the visual pipeline editor. We will coordinate multiple components of a web application across test and production environments, simulating a modern development and deployment workflow.\nKeith Zantow\n\nThursday, August 31st\n\nTime\nSession\nDetails\nPresenter\n\n12:30 - 12:45\nDocker Based Build Executor Agents\nHow using Docker based build agents can simplify your Jenkins management duties.\nEric Smalling\n\n12:45 - 13:00\nPimp my Blue Ocean\nHow to customize Blue Ocean, where I create a custom plugin and extending Blue Ocean with custom theme and custom components.\nThorsten Scherler\n\n13:00 - 13:15\nDeliver Blue Ocean Components at the Speed of Light\nUsing storybook.js.org for Blue Ocean frontend to speed up the delivery process - validate with PM and designer the UX. Showing how quickly you develop your components.\nThorsten Scherler\n\n13:15 - 13:30\nMozilla’s Declarative + Shared Libraries Setup\nHow Mozilla is using Declarative Pipelines and shared libraries together.\nStephen Donner\n\nJoin the Jenkins project at\nJenkins World on August 30-31,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Demos at Jenkins World 2017","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-08-23T00:00:00.000Z","id":"0c1904a1-e132-560b-8136-e14e375e783c","slug":"/blog/2017/08/23/pull-requests-and-more/","strippedHtml":"This is a guest post by Mark Waite, who maintains\nthe git plugin,\nthe git client plugin,\nand is a technical evangelist for CloudBees, Inc.\n\nThe Jenkins project booth at Jenkins World 2017\nwill include the \"Pull Requests Corner\", recruiting new Jenkins contributors.\nWe think there are many people who will attend the conference without realizing how easy it is\nto help the Jenkins project, and how much the help is appreciated.\n\nMeet us in the \"Pull Requests Corner\" and we’ll help you find a way to help Jenkins.\nHere are some areas where we can use your help.\nMost of them do not require coding, and do not require a large time commitment.\n\nOne Minute Feedback on Your Version\n\nThe Jenkins changelog pages ( LTS and weekly) gather user experiences with specific Jenkins versions.\nYou can help other Jenkins users by clicking one of the weather icons in the LTS changelog (or the weekly changelog) for the release you’re using.\nChangelog feedback from weekly releases helps the release team select the long term support version.\nChangelog feedback from LTS releases helps other users prepare to upgrade.\n\nIt takes less than a minute, and helps the community (which will ultimately help you).\n\nFive Minutes to Answer a Question\n\nIn five minutes or less, you can help other Jenkins users.\n\nFor example:\n\nAnswer a question on the #jenkins channel of internet relay chat (IRC)\n\nAnswer a question on the Jenkins users mailing list\n\nAnswer a question on stackoverflow jenkins, jenkins plugins, or jenkins pipeline\n\nAnswer a question on reddit\n\nTen Minutes to Learn and Share\n\nIf you have ten minutes, you can learn something new and share what you learned.\n\nRead a Jenkins community blog post and tweet it with the hashtag #jenkinsci\n\nRead a devops.com blog post and share it on LinkedIn\n\nRead a CloudBees blog post and test drive an idea from it\n\nFind another Jenkins blog and share it (I recently discovered Matt Bajor’s ci/cd life blog)\n\nFifteen Minutes for Pipeline\n\nLiam Newman has created the \" Jenkins Minute\" video series.\nThey are brief video segments focusing on specific Jenkins functionality.\nChoose a video, watch it, and share what you learned on social media.\n\nTwenty Minutes for a Bug\n\nThe Jenkins bug tracker contains thousands of bugs.\nReviewing, duplicating, and clarifying bug reports takes time.\nWhen maintainers are reviewing, duplicating, and clarifying bug reports, they are not fixing bugs, and they are not adding new capabilities.\n\nYou can help maintainers by reviewing and duplicating a bug report that matters to you.\nA comment on a bug report is especially helpful when it confirms you’ve been able to duplicate the bug.\nIt is even more helpful if your verification includes the steps you took and how they differ from the original report.\n\nA bug report which has been duplicated, and includes clear instructions, is much more likely to receive maintainer attention.\nHelp yourself and others by duplicating bugs that matter to you.\n\nThirty Minutes for Documentation\n\nThe Jenkins documentation includes\nuser documentation ( guided tour and handbook) and\ndeveloper documentation ( tutorial, how-to guides, and reference).\nYou can help the documentation by describing something important to you clearly and completely.\n\nRefer to the instructions for documentation contributors to see how easy it is to help.\n\nForty Five Minutes for Translation\n\nIf English is not your native language, you can help with Jenkins localization.\nJenkins is used worldwide, and many users will benefit from translations.\nConsidering the rapid and continuing evolution of Jenkins, it is no surprise that there is plenty to translate.\nRefer to the internationalization guide for instructions to help you contribute translations.\n\nSixty Minutes for a Meetup\n\nLocal groups around the world meet often for Jenkins presentations, discussions, and demonstrations.\nOrganizing a Jenkins Area Meetup will introduce you to other users, and will let you explore new ways to benefit from Jenkins.\nThe team at jenkinsci-jam@googlegroups.com is ready to support your JAM with stickers, t-shirts, and more.\n\nWeek or More - Adopt a Plugin\n\nThe Jenkins plugin ecosystem covers a wide range of areas.\nJenkins plugin maintainers come from many different backgrounds, with many different interests.\nOften, a plugin maintainer may find that they want to do something different on the project, or they may leave the project.\nWhen a plugin maintainer is no longer able to maintain a plugin, they can place it for adoption.\n\nPlugins placed for adoption range from very specific use cases (node stalker plugin) to very general use cases (Subversion plugin).\n\nMaintaining an orphan plugin is a great way to contribute to the project.\nFollow the instructions to \" Adopt a Plugin\".\n\nSee You There!\n\nAll those techniques (and more) are available on the Jenkins participate page.\n\nLook for the \"Jenkins Needs You\" poster at Jenkins World, and come talk\nto us about the ways you can learn new things, address your concerns,\nand help Jenkins.\n\nJoin the Jenkins project at\nJenkins World on August 30-31,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins Needs You - Pull Request Corner at Jenkins World 2017","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2017-08-29T00:00:00.000Z","id":"76ba3f00-38ff-54a3-ba40-edf86486b934","slug":"/blog/2017/08/29/2017-community-survey/","strippedHtml":"This is a guest post by Brian\nDawson on behalf of CloudBees, where he works as a DevOps Evangelist\nresponsible for developing and sharing continuous delivery and DevOps best\npractices. He also serves as the CloudBees Product Marketing Manager for\nJenkins.\n\nOnce again it’s that time of year when CloudBees sponsors the\nJenkins Community Survey to\nassist the community with gathering objective insights into how jenkins is\nbeing used and what users would like to see in the Jenkins project.\n\nYour personal information (name, email address and company) will NOT be used by CloudBees for\nsales or marketing.\n\nAs an added incentive to take the survey, CloudBees will enter participants\ninto a drawing for a free pass to Jenkins World 2018 (1st prize) and a $100\nAmazon Gift Card (2nd prize). The survey will close at the end of September, so\nclick the link at the end of the blog post to get started!\n\nAll participants will be able to access reports summarizing survey results. If\nyou’re curious about what insights your input will provide, see the results of\nlast year’s 2016 survey:\n\n2016 Community Survey Results\n\nYour feedback helps capture a bigger picture of\ncommunity trends and needs. There are laws that govern prize giveaways and\neligibility; CloudBees has compiled all those fancy\nterms and conditions here.\n\nPlease take the survey and let your voice be heard - it will take less than 10\nminutes.\n\nTake me to the survey","title":"Take the 2017 Jenkins Survey!","tags":["jenkins"],"authors":[{"avatar":null,"blog":null,"github":"bvdawson","html":"<div class=\"paragraph\">\n<p>DevOps dude at CloudBees.\nJenkins Marketing Manager.\nTools geek.</p>\n</div>","id":"bvdawson","irc":null,"linkedin":null,"name":"Brian Dawson","slug":"/blog/authors/bvdawson/","twitter":"brianvdawson"}]}},{"node":{"date":"2017-09-08T00:00:00.000Z","id":"529abe58-b0d2-5d12-931f-675712ff69a6","slug":"/blog/2017/09/08/enumerators-in-pipeline/","strippedHtml":"While at Jenkins World, Kohsuke Kawaguchi\npresented two long-time Jenkins contributors with a\n\" Small Matter of Programming\"\naward: Andrew Bayer and\nJesse Glick. \"Small Matter of Programming\"\nbeing:\n\na phrase used to ironically indicate that a suggested feature or design change\nwould in fact require a great deal of effort; it often implies that the person\nproposing the feature underestimates its cost.\n\n— Wikipedia\n\nIn this context the \"Small Matter\" relates to Jenkins\nPipeline and a very simple snippet of Scripted Pipeline:\n\n[1, 2, 3].each { println it }\n\nFor a long time in Scripted Pipeline, this simply did not work as users would\nexpect it. Originally filed as\nJENKINS-26481 in 2015,\nit became one of the most voted for, and watched, tickets in the entire issue\ntracker until it was ultimately fixed earlier this year.\n\nAt least some closures are executed only once inside of Groovy CPS DSL scripts\nmanaged by the workflow plugin.\n\n— Original bug description by Daniel Tschan\n\nAt a high level, what has been confusing for many users is that Scripted\nPipeline looks like a Groovy, it quacks like a Groovy, but it’s not exactly\nGroovy. Rather, there’s an custom Groovy interpreter\n( CPS) that executes the\nScripted Pipeline in a manner which provides the durability/resumability that\ndefines Jenkins Pipeline.\n\nWithout diving into too much detail, refer to the pull requests linked to\nJENKINS-26481 for that, the code snippet above was particularly challenging to\nrectify inside the Pipeline execution layer. As one of the chief architects for\nJenkins Pipeline, Jesse made a number of changes around the problem in 2016,\nbut it wasn’t until early 2017 when Andrew, working on Declarative Pipeline,\nstarted to identify a number of areas of improvement in CPS and provided\nmultiple patches and test cases.\n\nAs luck would have it, combining two of the sharpest minds in the Jenkins\nproject resulted in the \"Small Matter of Programming\" being finished, and\nreleased in May of this year with Pipeline: Groovy 2.33.\n\nPlease join me in congratulating, and thanking, Andrew and Jesse for their\ndiligent and hard work smashing one of the most despised bugs in Jenkins\nhistory :).","title":"Closure on enumerators in Pipeline","tags":["pipeline","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2017-09-25T00:00:00.000Z","id":"ec7b8ed5-f69c-5e84-9b65-735961d0c5cf","slug":"/blog/2017/09/25/declarative-1.2-released/","strippedHtml":"After a few months of work on its key features, I’m happy to announce the\n1.2 release of\nDeclarative Pipeline!\nOn behalf of the contributors developing Pipeline, I thought it would be\nhelpful to discuss three of the key changes.\n\nParallel Stages\n\nFirst, we’ve added syntax support for parallel stages. In earlier versions of\nDeclarative Pipeline, the only way to run chunks of Pipeline code in parallel\nwas to use the parallel step inside the steps block for a stage, like this:\n\n/* .. snip .. */\nstage('run-parallel-branches') {\n  steps {\n    parallel(\n      a: {\n        echo \"This is branch a\"\n      },\n      b: {\n        echo \"This is branch b\"\n      }\n    )\n  }\n}\n/* .. snip .. */\n\nWhile this works, it doesn’t integrate well with the rest of the Declarative\nPipeline syntax. For example, to run each parallel branch on a different agent,\nyou need to use a node step, and if you do that, the output of the parallel\nbranch won’t be available for post directives (at a stage or pipeline\nlevel). Basically the old parallel step required you to use Scripted Pipeline\nwithin a Declarative Pipeline.\n\nBut now with Declarative Pipeline 1.2, we’ve introduced a true Declarative\nsyntax for running stages in parallel:\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('Run Tests') {\n            parallel {\n                stage('Test On Windows') {\n                    agent {\n                        label \"windows\"\n                    }\n                    steps {\n                        bat \"run-tests.bat\"\n                    }\n                    post {\n                        always {\n                            junit \"**/TEST-*.xml\"\n                        }\n                    }\n                }\n                stage('Test On Linux') {\n                    agent {\n                        label \"linux\"\n                    }\n                    steps {\n                        sh \"run-tests.sh\"\n                    }\n                    post {\n                        always {\n                            junit \"**/TEST-*.xml\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nYou can now specify either steps or parallel for a stage, and within\nparallel, you can specify a list of stage directives to run in parallel,\nwith all the configuration you’re used to for a stage in Declarative\nPipeline. We think this will be really useful for cross-platform builds and\ntesting, as an example. Support for parallel stages will be in the\nsoon-to-be-released Blue Ocean Pipeline Editor 1.3 as well.\n\nYou can find more documentation on parallel stages in the\nUser Handbook.\n\nDefining Declarative Pipelines in Shared Libraries\n\nUntil the 1.2 release, Declarative Pipelines did not officially support\ndefining your pipeline blocks in a shared library. Some of you may have tried\nthat out and found that it could work in some cases, but since it was never an\nofficially supported feature, it was vulnerable to breaking due to necessary\nchanges for the supported use cases of Declarative. But with 1.2, we’ve added\nofficial support for defining pipeline blocks in src/.groovy files in your\nshared libraries. Within your src/.groovy file’s call method, you can\ncall pipeline { …​ }, or possibly different pipeline { …​ } blocks\ndepending on if conditions and the like. Note that only one pipeline { …​ }\nblock can actually be executed per run - you’ll get an error if a second one\ntries to execute!\n\nMajor Improvements to Parsing and Environment Variables\n\nHopefully, you’ll never actually care about this change, but we’re very happy\nabout it nonetheless. The original approach used for actually taking the\npipeline { …​ } block and executing its contents was designed almost two\nyears ago, and wasn’t very well suited to how you all are actually using\nDeclarative Pipelines. In our attempts to work around some of those limitations,\nwe made the parsing logic even more complicated and fragile, resulting in an\nimpressive\nnumber of bugs, mainly relating to inconsistencies and bad behavior with\nenvironment variables.\n\nIn Declarative 1.2, we’ve replaced the runtime parsing logic completely with a\nfar more robust system, which also happens to fix most of those bugs at the\nsame time! While not every issue has been resolved, you may find that you can\nuse environment variables in more places, escaping is more consistent,\nWindows paths are no longer handled incorrectly, and a lot more. Again, we’re\nhoping you’ve never had the misfortune to run into any of these bugs, but if\nyou have, well, they’re fixed now, and it’s going to be a lot easier for us to\nfix any future issues that may arise relating to environment variables, when\nexpressions, and more. Also, the parsing at the very beginning of your build\nmay be about 0.5 seconds faster. =)\n\nMore to Come!\n\nWhile we don’t have any concrete plans for what will be going into Declarative\nPipelines 1.3, rest assured that we’ve got some great new features in mind, as\nwell as our continuing dedication to fixing the bugs you encounter and report.\nSo please do keep opening tickets for\nissues and feature requests. Thanks!","title":"Parallel stages with Declarative Pipeline 1.2","tags":["pipeline","declarative"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2017-09-27T00:00:00.000Z","id":"5b2d3ef5-84a4-5c1d-9c5a-91281a16952a","slug":"/blog/2017/09/27/sept-jenkins-online-meetup/","strippedHtml":"At Jenkins World last month, we continued the tradition of \"lunch-time demos\"\nin the Jenkins project’s booth which we started in 2016.  We invited a number\nof Jenkins contributors to present brief 10-15 minute demos on something they\nwere working on, or considered themselves experts in. Continuing the\npost-Jenkins World tradition, we also just hosted a \"Jenkins Online Meetup\"\nfeaturing a selection of those lunch-time demos.\n\nI would like to thank Alyssa Tong for organizing this online meetup, Liam Newman for acting as the host, and our speakers:\n\nOleg Nenashev\n\nMichael Hüttermann\n\nThorsten Scherler\n\nStephen Donner\n\nMark Waite\n\nKeith Zantow\n\nBelow are some links from the sample projects demonstrated and the direct links\nto each session.\n\nDeveloping Pipeline Libraries Locally\n\nVideo link\n\nIf you have ever tried developing Pipeline Libraries, you may have noticed how\nlong it takes to deploy a new version to server to discover just another syntax\nerror. I will show how to edit and test Pipeline libraries locally before\ncommitting to the repository (with Configuration-as-Code and Docker).\n\nSlides\n\nSource Code\n\nDemo container\n\nDelivery Pipelines with Jenkins\n\nVideo link\n\nShowing off how to set up holistic Delivery Pipelines with the DevOps enabler tool Jenkins.\n\nDemo application\n\nPimp my Blue Ocean\n\nVideo link\n\nHow to customize Blue Ocean, where I create a custom plugin and extending Blue\nOcean with custom theme and custom components.\n\nPresentation and demo code\n\nDeliver Blue Ocean Components at the Speed of Light\n\nVideo link\n\nUsing storybook.js.org for Blue Ocean frontend to speed up the delivery process\n- validate with PM and designer the UX. Showing how quickly you develop your\ncomponents.\n\nPresentation and demo code\n\nMozilla’s Declarative + Shared Libraries Setup\n\nVideo link\n\nHow Mozilla is using Declarative Pipelines and shared libraries together.\n\nGoogle Doc with links\n\nShared Library source code\n\nDocumentation for the shared library\n\nSee also the #fx-test IRC channel on irc.mozilla.org\n\nGit Tips and Tricks\n\nVideo link\n\nLatest capabilities in the git plugin, like large file support, reference\nrepositories and some reminders of existing tips that can reduce server load,\ndecrease job time, and decrease disc use.\n\nVisual Pipeline Creation in Blue Ocean\n\nVideo link\n\nWe will show how to use Blue Ocean to build a real-world continuous delivery\npipeline using the visual pipeline editor. We will coordinate multiple\ncomponents of a web application across test and production environments,\nsimulating a modern development and deployment workflow.","title":"Pipeline and Blue Ocean Demos from Jenkins World","tags":["jam","jenkinsonlinemeetup","jenkinsworld","events"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2017-09-29T00:00:00.000Z","id":"6b1afba0-52ca-52f3-b36e-df18f709811e","slug":"/blog/2017/09/29/jenkins-contributor-awards-at-jenkins-world/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nFor the first time at Jenkins World, the Jenkins project honored the\nachievement of three Jenkins contributors in the areas of Most Valuable\nContributor, Jenkins Security MVP, and most Valuable Advocate. These three\nindividuals has consistently demonstrated excellence and proven value to the\nproject. With gratitude and congratulations, below are the well deserved\nwinners:\n\nAlex Earl - Most Valuable Contributor\n\nAlex is the current or previous maintainer of some of the most used Jenkins\nplugins and has been for years. He’s a regular contributor to project policy\ndiscussions, and helps to keep the project running by improving the Jenkins\nproject infrastructure, moderating the mailing lists and processing requests\nfor hosting new plugins.\n\nSteve Marlowe - Jenkins Security MVP\n\nSteve is one of the most prolific reporter of security vulnerabilities in\nJenkins. His reports are well-written, clearly identify the problematic\nbehavior, and provide references that help quickly resolve the reported issue.\nOn top of that, Steve is always responsive when asked for clarification.\n\nTomonari Nakamura - Most Valuable Advocate\n\nTomonari leads the Jenkins User Group in Tokyo, which is one of the largest and\nthe most active with a long history. The group has been organizing meet-ups for\nmore than 10 times now, and every meet-up fills up to 100% very quickly with\nregular turn-out of 100-200 people. At one point the group under his leadership\norganized a fully volunteer-run \"Jenkins User Conference\" in Tokyo that\ncommanded 1000+ attendees.\n\nCongratulations to our winners.\n\nWe can’t wait to recognize more contributors at Jenkins World 2018!","title":"Jenkins Contributors Awarded Top Honors at Jenkins World 2017","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-10-02T00:00:00.000Z","id":"3c59e404-8125-5869-a3c8-98dd83976f14","slug":"/blog/2017/10/02/pipeline-templates-with-shared-libraries/","strippedHtml":"This is a guest post by Philip Stroh, Software Architect at\nTimoCom.\n\nWhen building multiple microservices - e.g. with Spring Boot - the integration\nand delivery pipelines of your services will most likely be very similar.\nSurely, you don’t want to copy-and-paste Pipeline code from one Jenkinsfile\nto another if you develop a new service or if there are adaptions in your\ndelivery process. Instead you would like to define something like a pipeline\n\"template\" that can be applied easily to all of your services.\n\nThe requirement for a common pipeline that can be used in multiple projects does not only emerge in microservice architectures. It’s valid for all areas where applications are\nbuilt on a similar technology stack or deployed in a standardized way (e.g. pre-packages as containers).\n\nIn this blog post I’d like to outline the possibility to create such a pipeline \"template\" using Jenkins Shared Libraries. If\nyou’re not yet familiar with Shared Libraries I’d recommend having a look at\nthe documentation.\n\nThe following code shows a (simplified) integration and delivery Pipeline for a\nSpring Boot application in declarative syntax.\n\nJenkinsFile\n\npipeline {\n    agent any\n    environment {\n        branch = 'master'\n        scmUrl = 'ssh://git@myScmServer.com/repos/myRepo.git'\n        serverPort = '8080'\n        developmentServer = 'dev-myproject.mycompany.com'\n        stagingServer = 'staging-myproject.mycompany.com'\n        productionServer = 'production-myproject.mycompany.com'\n    }\n    stages {\n        stage('checkout git') {\n            steps {\n                git branch: branch, credentialsId: 'GitCredentials', url: scmUrl\n            }\n        }\n\n        stage('build') {\n            steps {\n                sh 'mvn clean package -DskipTests=true'\n            }\n        }\n\n        stage ('test') {\n            steps {\n                parallel (\n                    \"unit tests\": { sh 'mvn test' },\n                    \"integration tests\": { sh 'mvn integration-test' }\n                )\n            }\n        }\n\n        stage('deploy development'){\n            steps {\n                deploy(developmentServer, serverPort)\n            }\n        }\n\n        stage('deploy staging'){\n            steps {\n                deploy(stagingServer, serverPort)\n            }\n        }\n\n        stage('deploy production'){\n            steps {\n                deploy(productionServer, serverPort)\n            }\n        }\n    }\n    post {\n        failure {\n            mail to: 'team@example.com', subject: 'Pipeline failed', body: \"${env.BUILD_URL}\"\n        }\n    }\n}\n\nThis Pipeline builds the application, runs unit as well as integration tests and deploys the application to\nseveral environments. It uses a global variable \"deploy\" that is provided within a Shared Library. The deploy method\ncopies the JAR-File to a remote server and starts the application. Through the handy REST endpoints of Spring Boot\nActuator a previous version of the application is stopped beforehand. Afterwards the deployment is verified via the\nhealth status monitor of the application.\n\nvars/deploy.groovy\n\ndef call(def server, def port) {\n    httpRequest httpMode: 'POST', url: \"http://${server}:${port}/shutdown\", validResponseCodes: '200,408'\n    sshagent(['RemoteCredentials']) {\n        sh \"scp target/*.jar root@${server}:/opt/jenkins-demo.jar\"\n        sh \"ssh root@${server} nohup java -Dserver.port=${port} -jar /opt/jenkins-demo.jar &\"\n    }\n    retry (3) {\n        sleep 5\n        httpRequest url:\"http://${server}:${port}/health\", validResponseCodes: '200', validResponseContent: '\"status\":\"UP\"'\n    }\n}\n\nThe common approach to reuse pipeline code is to put methods like \"deploy\" into\na Shared Library. If we now start developing the next application of the same\nfashion we can use this method for deployments as well. But often there are\neven more similarities within projects of one company. E.g. applications are\nbuilt, tested and deployed in the same way into the same environments\n(development, staging and production). In this case it is possible to define\nthe whole Pipeline as a global variable within a Shared Library. The next code\nsnippet defines a Pipeline \"template\" for all of our Spring Boot applications.\n\nvars/myDeliveryPipeline.groovy\n\ndef call(Map pipelineParams) {\n\n    pipeline {\n        agent any\n        stages {\n            stage('checkout git') {\n                steps {\n                    git branch: pipelineParams.branch, credentialsId: 'GitCredentials', url: pipelineParams.scmUrl\n                }\n            }\n\n            stage('build') {\n                steps {\n                    sh 'mvn clean package -DskipTests=true'\n                }\n            }\n\n            stage ('test') {\n                steps {\n                    parallel (\n                        \"unit tests\": { sh 'mvn test' },\n                        \"integration tests\": { sh 'mvn integration-test' }\n                    )\n                }\n            }\n\n            stage('deploy developmentServer'){\n                steps {\n                    deploy(pipelineParams.developmentServer, pipelineParams.serverPort)\n                }\n            }\n\n            stage('deploy staging'){\n                steps {\n                    deploy(pipelineParams.stagingServer, pipelineParams.serverPort)\n                }\n            }\n\n            stage('deploy production'){\n                steps {\n                    deploy(pipelineParams.productionServer, pipelineParams.serverPort)\n                }\n            }\n        }\n        post {\n            failure {\n                mail to: pipelineParams.email, subject: 'Pipeline failed', body: \"${env.BUILD_URL}\"\n            }\n        }\n    }\n}\n\nNow we can setup the Pipeline of one of our applications with the following method call:\n\nJenkinsfile\n\nmyDeliveryPipeline(branch: 'master', scmUrl: 'ssh://git@myScmServer.com/repos/myRepo.git',\n                   email: 'team@example.com', serverPort: '8080',\n                   developmentServer: 'dev-myproject.mycompany.com',\n                   stagingServer: 'staging-myproject.mycompany.com',\n                   productionServer: 'production-myproject.mycompany.com')\n\nThe Shared library documentation mentions the ability to encapsulate\nsimilarities between several Pipelines with a global variable. It shows how we\ncan enhance our template approach and build a higher-level DSL step:\n\nvars/myDeliveryPipeline.groovy\n\ndef call(body) {\n    // evaluate the body block, and collect configuration into the object\n    def pipelineParams= [:]\n    body.resolveStrategy = Closure.DELEGATE_FIRST\n    body.delegate = pipelineParams\n    body()\n\n    pipeline {\n        // our complete declarative pipeline can go in here\n        ...\n    }\n}\n\nNow we can even use our own DSL-step to set up the integration and deployment Pipeline of our project:\n\nJenkinsfile\n\nmyDeliveryPipeline {\n    branch = 'master'\n    scmUrl = 'ssh://git@myScmServer.com/repos/myRepo.git'\n    email = 'team@example.com'\n    serverPort = '8080'\n    developmentServer = 'dev-myproject.mycompany.com'\n    stagingServer = 'staging-myproject.mycompany.com'\n    productionServer = 'production-myproject.mycompany.com'\n}\n\nThe blog post showed how a common Pipeline template can be developed using the\nShared Library functionality in Jenkins. The approach allows to create a\nstandard Pipeline that can be reused by applications that are built in a\nsimilar way.\n\nIt works for Declarative and Scripted Pipelines as well. For declarative\npipelines the ability to define a Pipeline block in a Shared Library is\nofficial supported since version 1.2 (see the recent blog post on\nDeclarative Pipeline 1.2).","title":"Share a standard Pipeline across multiple projects with Shared Libraries","tags":["pipeline","declarative","microservices"],"authors":[{"avatar":null,"blog":null,"github":"pstrh","html":"","id":"pstrh","irc":null,"linkedin":null,"name":"Philip Stroh","slug":"/blog/authors/pstrh/","twitter":null}]}},{"node":{"date":"2017-10-06T00:00:00.000Z","id":"7d593bd4-902a-54dd-abb6-7db358ec7152","slug":"/blog/2017/10/06/hacktoberfest/","strippedHtml":"Once again it’s October in our calendars.\nIt means that the regular Hacktoberfest event is back!\nDuring this one-month hackathon you can support open source and earn a limited edition T-shirt.\nJenkins project offers an opportunity to participate in the project\nand to get reviews and help from Jenkins contributors.\n\nHow do I sign up?\n\nSign-up to Hacktoberfest on the event website.\n\nEverything is set, just start coding!\n\nWhat can I do?\n\nThere are lots of ways to contribute to Jenkins during Hacktoberfest.\nYou can…​\n\nWrite code\n\nImprove documentation,\nwrite blogposts\n\nAutomate Tests\n\nTranslate and internationalize components\n\nDesign - artwork and UI improvements also count!\n\nSee the Contribute and Participate page for for information.\n\nWhere can I contribute?\n\nThe project is located in several organizations in GitHub.\nCore and plugins are located in the jenkinsci org,\ninfrastructure - in jenkins-infra.\nYou can contribute to any component within these organizations.\n\nFor example, you could contribute to the following components:\n\nJenkins Core\n( contributing)\n\nProject Website\n( contributing)\n\nPackaging (\nDocker,\nnative packages)\n\nPlugins ( existing plugins,\nplugin tutorial)\n\nYou can also create\nnew Jenkins plugins and get them\nhosted\nin the organization.\n\nWhat can I do?\n\nOur issue tracker contains lots of issues you could work on.\nIf you are new to Jenkins,\nyou could start by fixing some easier issues.\nIn the issue tracker we mark such issues with the newbie-friendly label\n( search query).\nYou can also submit your own issue and propose a fix.\n\nHow do I label issues and pull requests?\n\nHacktoberfest project requires issues and/or pull requests to be labeled with the hacktoberfest label.\nYou may have no permissions to set labels on your own, but do not worry!\nJust mention @jenkinsci/hacktoberfest or @jenkins-infra/hacktoberfest in the repository,\nand we will set the labels for you.\n\nHow do I get reviews?\n\nAll examples above are being monitored by the Jenkins contributors,\nand you will likely get a review within few days.\nReviews in other repositories and plugins may take longer.\nIn the case of delays, ping @jenkinsci/code-reviewers in your pull request\nor send a message to the mailing list.\n\nWhere can I find info?\n\nJenkins project contains lots of materials about contributing to the project.\nHere are some entry links:\n\nParticipate and Contribute\n\nPlugin Development Tutorials\n\nDeveloper Documentation\n\nNeed help?\n\nYou can reach out to us using IRC Channels\nand the Jenkins Developer Mailing List.\nIn the case of mailing lists it is recommended to mention Hacktoberfest\nin the email subject.","title":"Hacktoberfest. Contribute to Jenkins!","tags":["hacktoberfest","event","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2017-10-11T00:00:00.000Z","id":"3b2aeb32-59cd-5469-815d-78144c195889","slug":"/blog/2017/10/11/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.84 and 2.73.2, that fix several security vulnerabilities.\nAdditionally, we published a new release of Swarm Plugin whose client contains a security fix, and Maven Plugin 3.0 was recently released to resolve a security issue.\nUsers of Swarm Plugin and Maven Plugin should update these to their respective newest versions.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nWe also published information about a vulnerability in Speaks! Plugin.\nThere is no fix available and we recommend it be uninstalled.\nIts distribution has been suspended.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Important security updates for Jenkins core and plugins","tags":["core","security","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-10-16T00:00:00.000Z","id":"ed573977-fd4e-5ac4-bfe6-8917b3809243","slug":"/blog/2017/10/16/jenkins-world-session-videos-are-available/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nJenkins World 2017 keynotes and breakout session videos are now available HERE. Photos from the conference can be seen HERE.\n\nSave the date for Jenkins World 2018 :\n\nConference dates are September 16-19, 2018 in San Francisco.\n\nRegistration will open on October 16, 2017.\n\nCall for Papers will open on December 1, 2017.","title":"Jenkins World 2017 Session Videos are Available","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-10-23T00:00:00.000Z","id":"63d03f70-f7b3-5e9a-a99f-0bee483fb790","slug":"/blog/2017/10/23/security-updates/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities.\n\nActive Choices (uno-choice)\n\nBuild-Publisher\n\nDependency Graph Viewer\n\nglobal-build-stats\n\nAdditionally, the Multijob Plugin also received a security update several weeks ago.\n\nFor an overview of these security fixes, see the security advisory.\n\nActive Choices Plugin distribution had been suspended since April due to its mandatory dependency on the suspended Scriptler Plugin.\nThat dependency has been made optional, so Active Choices can be used without having Scriptler installed.\nThis means we are able to resume distribution of Active Choices Plugin again.\nIt should be available on update sites later today.\n\nWe also announced a medium severity security vulnerability in SCP publisher plugin that does not have a fix at this time.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-10-25T00:00:00.000Z","id":"f4347bb8-badf-50f9-9eac-6e1f13095802","slug":"/blog/2017/10/25/jenkins-user-conference-china/","strippedHtml":"This is a guest post by Forest Jing, who runs\nthe Shanghai Jenkins Area Meetup\n\nI am excited to announce the inaugural\nJenkins User Conference China\nwill be taking place on November 19, 2017 in Shanghai, China.\nThe theme of JUC China is “Jenkins Driven CD and DevOps”.\nMuch like in the US, CD and DevOps are big topics of interest in China.\nWe are honored to have Kohsuke Kawaguchi join us as one of the keynote speakers at this inaugural Jenkins event.\nWe will also have sessions from many of China’s big named companies like Baidu, Tencet, Pinterest, Ctrip, Huawei, Microsoft, and more.\nBelow are some highlights of the event.\n\nSunday Nov 19th Agenda\n\nMorning keynote sessions\n\nThere will be 4 keynote speeches:\n\nKohsuke Kawaguchi, creator of Jenkins will introduce Jenkins Past, Present & Future.\n\nLe Zhang, a very famous DevOps and CD expert will show pipeline driven CD and DevOps.\n\nEngineering Director from Huawei will show the CD and DevOps practice in Huawei.\n\nXu Zheng from Pinterest will present Run Jenkins infrastructure as service in Kubernetes.\n\nIn the Afternoon, we have set up 3 tracks\n\nCD & DevOps user stories from Microsoft, Tencent, Ctrip and JinDong - all are big companies in China.\n\nEnterprise Jenkins experience the use of Jenkins as an enterprise tool not only for teams.\n\nWorkshop to lead engineers to practice CloudBees Jenkins and open source Jenkins features.\n\nIf you’re in the neighborhood, we sincerely\ninvite you to join us\nat Jenkins User Conference China.\n\nFollow us on Twitter @china_juc","title":"Jenkins User Conference China","tags":["event","Jenkins User Conference"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-11-08T00:00:00.000Z","id":"c98aa373-9dff-5895-b312-e24c5459a752","slug":"/blog/2017/11/08/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.89 and 2.73.3, that fix two low-severity security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-11-27T00:00:00.000Z","id":"fd21dbc6-9b4b-5092-b232-0feabaf928ce","slug":"/blog/2017/11/27/tutorials-in-the-jenkins-user-documentation/","strippedHtml":"Regular perusers of the Jenkins User Documentation may have noticed\nthe presence of the Tutorials part (between the Guided Tour and User\nHandbook) that appeared in the last couple of months and gradually began to get\npopulated with much of my recent work, writing Jenkins tutorials.\n\nMy name’s Giles and I’ve been a technical writer in the software development\nfield for several years now. I’ve always been passionate about technical writing\nand more recently, the technologies that go into developing written content and\nautomating its generation - like Jenkins! I was a former Atlassian and recently\njoined CloudBees as a Senior Technical Writer, working remotely from the \"Sydney\nOffice\", with my current focus on the Jenkins User Documentation.\n\nWhy tutorials?\n\nMy exposure to Jenkins and its usage over the years has been patchy at best.\nDuring this time, however, I’ve had some degree of experience as a user of\nvarious continuous delivery (CD) tools like Jenkins and am reasonably familiar\nwith the advantages these tools can offer software development teams.\n\nI’ve also found that while many software developers are familiar with the\nbroader concept of \"developer operations\" (or simply \"devops\"), fewer seem\nfamiliar with the concepts of CD and related tools to facilitate devops within\norganizations.\n\nThe CD process is based on the fundamental flow of building the application\ntesting it delivering it, where typically:\n\nThe building part involves compiling the application and/or ensuring all\nnecessary libraries and dependencies are in place for the application to run\nas intended.\n\nThe testing part involves testing the built application with automated tests\nto ensure that changes implemented by developers function as expected.\n\nThe delivering part involves packaging or presenting the application in a\nway that can be delivered to customers or other users for any kind of purpose.\n\nNow, as one of the major contributors to the Jenkins User Documentation (and\nfaced with a reasonably steep learning curve), it quickly became apparent about\nthe lack of accessible documentation to hand-hold people relatively new to\nJenkins through this CD process. I couldn’t find anything in the Jenkins User\nDocumentation to demonstrate how Jenkins implements this process on a simple\napp that delivers an end result.\n\nWith the guidance and assistance of helpful colleagues, I therefore decided to\nembark on creating a series of Jenkins tutorials to help fill these\ndocumentation and knowledge gaps. These tutorials are based on Daniele Procida’s\ndescription of how tutorials should be presented in his blog post\n\" What nobody tells you about\ndocumentation\").\n\nIntroductory tutorials\n\nThe first set of tutorials on the Tutorials overview page\ndemonstrate how to implement this fundamental CD process in Jenkins on a simple\napplication for a given technology stack.\n\nSo far, there’s one for\nJava with Maven and another\nfor Node.js and\nReact with npm. Another for Python will be added to this list in the near\nfuture.\n\nThese tutorials define your application’s entire CD process (i.e. your Pipeline)\nin a Jenkinsfile, whose Groovy-like Declarative Pipeline syntax is checked in\nto your Git source repository. Managing your Pipeline with your application’s\nsource code like this forms the fundamentals of \"Pipeline as code\".\n\nThe Introductory tutorials also cover how to use some powerful features of\nJenkins, like Blue Ocean,\nwhich makes it easy to connect to an existing cloud, web or locally hosted Git\nrepository and create your Pipeline with limited knowledge of Pipeline syntax.\n\nAdvanced tutorials\n\nAlso soon to be released will be the first Advanced tutorial on building\nmultibranch Pipelines in Jenkins. This tutorial takes the \"Pipeline as code\"\nconcept to a new level, where a single Jenkinsfile (defining the entire CD\nprocess across all branches of your application’s Git repository) consists of\nmultiple stages which are selectively executed based on the branch that Jenkins\nis building.\n\nAdditional tutorials that demonstrate more advanced features of Jenkins and how\nto manage your Pipelines with greater sophistication and flexibility will be\nadded to this section in future.\n\nSumming up\n\nYou can access all currently available tutorials from the\nTutorials overview page in the Jenkins User Documentation.\nIt’s worthwhile checking that page from time to time as it’ll be updated\nwhenever a new tutorial is published.\n\nAlso, if you have any suggestions for tutorials or other content you’d like to\nsee in the documentation, please post your suggestions in the\nJenkins\nDocumentation Google Group, which you can also post (and reply) to by emailing\njenkinsci-docs@googlegroups.com.\n\nThe Sydney Office team meeting at Carriageworks - from left to right, Giles\nGaskell, Nicholae Pascu, Michael Neale and James Dumay","title":"Introducing Tutorials in the Jenkins User Documentation","tags":["tutorial","blueocean","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"gilesgas","html":"","id":"gilesgas","irc":null,"linkedin":null,"name":"Giles Gaskell","slug":"/blog/authors/gilesgas/","twitter":"giles_gas"}]}},{"node":{"date":"2017-12-04T00:00:00.000Z","id":"052134b8-bf47-5261-8b6e-17041407d5e3","slug":"/blog/2017/12/04/jenkins-user-conference-china-recap/","strippedHtml":"This is a guest post by Forest Jing, who runs\nthe Shanghai Jenkins Area Meetup\n\nThe first Jenkins User Conference China was held on November 19, 2017 in\nShanghai, China. It was an amazing conference for Jenkins users in China. There were\nalmost 450 attendees to enjoy a lovely day with Jenkins creator, Kohsuke Kawaguchi.\n\nThere were 12 wonderful presentations, 1 workshop and 1 open space to set the stage for JUC China.\nThe day began with Kohsuke, welcomed to the stage by all the attendees here with their warm\napplauses. All of them are fans of Jenkins and Kohsuke.  Thanks to Kohsuke, he made a wonderful presentation to show the past, present and future of Jenkins for Chinese Jenkins users.\n\nThe co-founder of DevOps Times community, Le Zhang released a report of adoption of Deployment Pipeline in Chinese IT organization.\nThe report shows that Jenkins is the most popular tool for DevOps and CD in China.\n\nIt also has proven that “If it hurts, do it more often!” is right because the IT organization who deploy more frequently, deployment  failure would be less.\n\nThe Three Musketeers of DevOps in China (Le Zhang, Xuefeng Shi,Forest Jing) have demonstrated a DevOps pipeline based on Jenkins and many open-source software such as Kubernetes, Gitlab, etc.\n\nAfter the presentation, lots of fans waited in line to take pictures with Kohsuke.\n\nHere are some photos of the JUC China. We really enjoyed it.\n\nLastly, as an organizer for JUC China, I would like to thank Kohsuke Kawaguchi, Alyssa Tong, Sam Van Oort and so many friends from CloudBees and Jenkins community to have given us so many help to make the first JUC China an amazing and successful conference for Jenkins users in China. We look forward to organizing many more JUC China.","title":"Jenkins User Conference China Recap","tags":["event","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2017-12-14T00:00:00.000Z","id":"46206425-c22d-532b-b23f-d107881ab35a","slug":"/blog/2017/12/14/security-update/","strippedHtml":"We just released security updates to Jenkins, versions 2.95 and 2.89.2, that fix two security vulnerabilities.\nFor an overview of what was fixed, see the security advisory.\n\nWe usually announce core security updates well in advance on the jenkinsci-advisories mailing list, to give Jenkins administrators time to schedule a maintenance.\nAdditionally, we try to align security updates with the regular LTS schedule.\nWe have chosen not to do so in this case for two reasons:\n\nThe random failure to set up Jenkins is very noticeable, and given that we’ve seen automated exploits for unprotected Jenkins instances in the past we consider it important to fix that issue as soon as possible, so that users setting up new instances of Jenkins can be confident they won’t start up insecurely.\n\nThe CSRF issue appears to only affect instances for a very short (seconds at most, if at all) time period immediately after startup, so administrators could apply the fix during the next scheduled Jenkins downtime, rather than immediately.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2017-12-15T00:00:00.000Z","id":"c2ac3d30-6b1c-5338-a437-133b5ebc730e","slug":"/blog/2017/12/15/auto-convert-freestyle-jenkins-jobs-to-coded-pipeline/","strippedHtml":"This is a guest post by Sanil Pillai, Director of Labs & Strategic Insights, Infostretch\n\nInfostretch has created a\nplugin for teams\nupgrading from Freestyle Jobs to Pipelines as code with Jenkins Pipeline.\nThis new plugin streamlines the process and accelerates\npipeline on-boarding for any new set of applications. Previously, when\nupgrading to Jenkins Pipeline, converting Freestyle Jobs required developers\nto drill down on each one of those hundreds (or thousands!)  of jobs to understand\ntools, configurations, URLs, parameters, and more before rewriting them in\nPipeline syntax. This process is very manual,\nerror-prone, lengthy, and not cost-effective. Beyond saving time, the new\nplugin also assures adherence to proper coding standards and separates complex\nbusiness logic and standards declaration from execution flow.\n\nKey features:\n\nConvert single freestyle job to pipeline\n\nConvert chain of freestyle jobs to single pipeline\n\nWorks with both Jenkins and CloudBees Jenkins Enterprise\n\nPlugin can be customized to support any Freestyle plugin and an\norganization’s Pipeline Shared Library,\nor Groovy coding standards.\n\nWorks with CloudBees' Role-based Access Control to help the new Pipelines\ncomply with existing security policies.\n\nDirect migration of properties such as \"Build with Parameters\" to newly\ncreated Pipelines.\n\nDirect migration of Agent on which job is to be run with support for multiple agent labels across different downstream jobs\n\nEnvironment properties: JDK, NodeJS\n\nSupports Git SCM.\n\nBuild steps: Maven, Ant, Shell, Batch, and Ansible Playbook.\n\nPost build actions: artifact archiver, simple mailer, TestNG reports, JUnit reports, checkstyle publisher\n\nNow, let’s take a look at how to get started:\n\nClick on a link at Root level or Folder level or Job level.\n\nSelect the job from the drop-down list that is the beginning point of the\n\"chain\". If job level link is clicked, this drop-down list will not be visible.\n\nProvide the new pipeline job name. If this is not specified, the plugin will\nattempt to create a new pipeline job with the naming convention of\n\"oldname-pipeline\".\n\nCheck \"Recursively convert downstream jobs if any?\" if you wish to have all the\ndownstream jobs converted into this new pipeline. The plugin will write all the\nlogic of current and downstream jobs into a single pipeline.\n\nCheck \"Commit Jenkinsfile?\" if you would like the plugin to create a\nJenkinsfile and commit it back to the SCM. The plugin will commit the\nJenkinsfile at the root of the SCM repository it finds in the first job\n(selected in step 1 above). It will attempt to commit to this repo using the\ncredentials it finds in the first job.\n\nDo note that the plugin will checkout the repo in to a temporary workspace on\nthe controller (JENKINS_HOME/plugins/convert-to-    pipeline/ws). Once the\nconversion is complete and Jenkinsfile is committed back to the repo, the\nworkspace will be deleted.\n\nClick \"Convert\" to convert the Freestyle job configurations to a single\nscripted pipeline job. Once the conversion is complete and the new job is\ncreated, you will be redirected to the newly created pipeline job.\n\nThat’s it!\n\nTo learn more about plugin usage, customization and to see a demo\nclick here\nto watch the webinar replay on-demand.","title":"Auto-Convert Freestyle Jobs to Jenkins Pipeline","tags":["pipeline","freestyle"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Director of Labs &amp; Strategic Insights, Infostretch</p>\n</div>","id":"spillai","irc":null,"linkedin":null,"name":"Sanil Pillai","slug":"/blog/authors/spillai/","twitter":null}]}},{"node":{"date":"2017-12-31T00:00:00.000Z","id":"983f4785-b11e-5d96-85e5-31c4a4070c62","slug":"/blog/2017/12/31/new-year/","strippedHtml":"Jenkins project congratulates all users and contributors with the New Year!\nLet’s take a look at some changes this year.\n\nHighlights\n\nWe released major features like BlueOcean\nand Declarative Pipeline\n\nThese features offer a new user experience in Jenkins Web UI, powered by Jenkins Pipeline.\n\nIn Jenkins 2.54 we updated the Java minimal requirement to Java 8 ( announcement).\n\nPlugin CI has been moved to our Jenkins-on-Jenkins instance.\nAll plugins are being built by Jenkins Pipeline with a special pipeline library\n\nWe adopted the Jenkins Enhancement Proposal (JEP) process for major changes in Jenkins.\nThere are already JEPs under review:\n\nJEP-2: Criteria for selecting \"Suggested Plugins\"\n\nJEP-200: Switch Remoting/XStream blacklist to a whitelist\n\nJEP-201: Jenkins Configuration as Code\n\nSome stats\n\nIn 2017 we had 60 weekly and 13 LTS releases with 305 fixes/enhancements only in the core.\nNext week Jenkins is going to hit the 2.100 version, and the core changed greatly since the 2.0 release in April 2016.\nJenkins Security was one of the hottest areas this year, there were 7 security advisories for the core and 15 - for plugins.\nFor comparison, in 2016 there were only 6 security releases in total.\n\nThere were 2605 plugin releases, and 215 NEW plugins have been hosted in the Update Center.\nIn particular Jenkins ecosystem has greatly expanded into the Cloud space\nby offering dozens of new plugins (e.g. for Azure and Kubernetes).\nWe also got many new plugins providing integrations with various Development and DevOps tools.\n\nOther subprojects and Jenkins components also got major updates.\nFor example,\nJenkins Remoting got 15 releases with stability improvements.\nStapler Framework also got 6 releases.\n\nKeep updating, Jenkins 2 is not only about Pipeline as Code!\n\nEvents\n\nThis year we got many new Jenkins Area Meetups.\nCurrently there are 77 meetups with more than 20,000 members in total ( full map).\nMore than 100 meetups have been organized around the globe.\n\nThere were also several Jenkins-focused conferences including the following ones:\n\nJenkins World in San-Francisco\n\nJenkins User Conferences in Israel and Shanghai\n\nDays Of Jenkins in Gothenburg and Oslo\n\nJenkins Community Day in Paris\n\nJenkins Days in Amsterdam\n\nCloudBees | Jenkins Automotive and Embedded Day in Stuttgart\n\nWhat’s next?\n\nNext year we will have traditional contributor meeting at FOSDEM\nand at Jenkins World 2018.\nIf you are interested in Jenkins, stop by at our community booths and join the contributor summits/hackathons.\nWe also want to participate in Google Summer of Code 2018,\nand currently we are looking for mentors.\n\nStay tuned, there is much more to come next year!","title":"Happy New Year!","tags":["community","new-year-blogpost"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-01-03T00:00:00.000Z","id":"51d9d519-6e28-5a4e-8b38-13a807cb063a","slug":"/blog/2018/01/03/fosdem-2018/","strippedHtml":"FOSDEM 2018 is a free event for software developers to meet, share ideas and collaborate.\nIt is an annual event that brings open source contributors from around the world for two days of presentations, discussions, and learning.\n\nJenkins will be well-represented at FOSDEM 2018.\n\nHappy Hour before FOSDEM\n\nWe’ll have a happy hour Friday evening before FOSDEM at Cafe Le Roy d’Espagne.\nSee the meetup page for details.\n\nJenkins table at FOSDEM\n\nA Jenkins table will be staffed by volunteers at FOSDEM to answer questions, discuss topics, and help users.\nSee the meetup page for details.\n\nPresentations at FOSDEM\n\nAutomated Linux Containers deployment for fun and profit by David Negreira\n\nAdvanced testing in action on a Java project by Vincent Massol\n\nDeployment vs Provisioning vs Orchestration vs Configuration Management by Peter Souter\n\nJenkins Hackfest after FOSDEM\n\nA Jenkins Hackfest will be held the day after FOSDEM 2018.\nThose who would like to join us for the hackfest 5 Feb 2018 should register for the meetup.\n\nMeals, snacks, and beverages will be provided for the hackfest.  Come join us, and let’s write some code!\n\nQuestions? feel free to contact Alyssa Tong or Mark Waite.","title":"FOSDEM 2018!","tags":["community","event"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2018-01-06T00:00:00.000Z","id":"13c78108-0ad3-594f-90c8-5073ecaa09cc","slug":"/blog/2018/01/06/gsoc2018-call-for-mentors/","strippedHtml":"This year the Jenkins project is interested in participating in\nGoogle Summer of Code (GSoC).\nAs in 2016/2017, we are looking for mentors.\nSo yes, we are looking for you :)\n\nWhat is GSoC?\n\nGSoC is an annual international program which encourages\ncollege-aged students to participate with open source projects during the summer\nbreak between classes.\n\nStudents accepted into the program receive a stipend,\npaid by Google, to work on well-defined projects to improve or enhance the Jenkins\nproject.\nIn exchange, numerous Jenkins community members volunteer as mentors\nfor students to help integrate them into the open source community and succeed\nin completing their summer projects.\n\nWhat do mentors get?\n\nA student who works full-time in the area of your interest for several months\n\nJoint projects with Jenkins experts, lots of fun and ability to study something together\n\nLimited-edition of swags from Google and Jenkins project\n\nMaybe: Participation in GSoC Mentor Summit and other GSoC events/meetups\n\nConditions\n\nMentors are expected to…​\n\nBe passionate about Jenkins\n\nLead the project in the area of their interest\n\nActively participate in the project during student selection, community bonding and coding phases (March - August)\n\nWork in teams of 2+ mentors per 1 each student\n\nDedicate a consistent and significant amount of time, especially during the coding phase ( ~5 hours per week in a team of two mentors)\n\nMentorship does NOT require strong expertise in Jenkins plugin development.\nThe main objective is to guide students and to get them involved into the Jenkins community.\nGSoC org admins will help to find advisors if a special expertise is needed.\n\nDisclaimer: We cannot guarantee that the Jenkins organization gets accepted to GSoC.\nEven if it gets accepted, we may need to select projects depending on student applications\nand the number of allocated project slots.\n\nTimeline\n\nDec 2017 - started collecting project ideas\n\nJan 17 - Status review at the Jenkins Governance Meeting.\nOutcome: decision whether we apply to GSoC in 2018.\n\nJan 21 - Application to GSoC (deadline - Jan 23)\n\nFeb 12 - List of accepted mentoring organizations published\n\nMar 05 - Deadline for project idea proposals\n\nNext - GSoC Timeline\n\nHow to apply?\n\nIf you are interested in proposing a project or joining an existing one, please respond to\nthis thread\nin the Jenkins Developer mailing list.\nWe aggregate/review proposals in\nthis document\nwhere you just need to describe the idea and introduce yourself.\n\nPlease propose new project ideas for discussion until March 05.\nYou can join an existing project at any time, including community bonding and coding periods.\n\nProject requirements\n\nGSoC is about code (though it may and likely should include some documentation and testing work)\n\nProjects should be about Jenkins (plugins, core, infrastructure, integrations, etc.)\n\nProjects should be potentially doable by a student in 3-4 months\n\nYou can find more information about requirements and practices in the\nGSoC Mentor Guide.\n\nLinks\n\nJenkins GSoC subproject page\n\nInformation for mentors\n\nGoogle Summer of Code page\n\nGSoC Mentor Guide\n\nGSoC Timeline","title":"Google Summer Of Code 2018: Call for mentors","tags":["gsoc","gsoc2018","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-01-08T00:00:00.000Z","id":"775a7cf1-5a4d-58b6-b98a-0d5ac2e2af67","slug":"/blog/2018/01/08/moving-from-buddybuild-for-android/","strippedHtml":"Last week, buddybuild — a hosted continuous integration service focused on mobile apps — announced that it had been acquired by Apple, and consequently its complete Android offering, along with its free tier for iOS users, will be discontinued at the beginning of March.\n\nThis was a fairly undesirable way to start 2018 for buddybuild’s Android users and, with less than two months to find an alternative, many took to Twitter to simultaneously congratulate buddybuild on their acquisition, and commiserate with others who have to find a new way to build and test their app.\n\nWhile Jenkins is usually deployed as a self-hosted solution (with over 150k installs), rather than a hosted service like buddybuild, we thought this would be a good time to highlight — thanks to the rich plugin ecosystem of Jenkins — some of the possibilities offered to Android developers by Jenkins.\n\nCommon workflows\n\nAndroid projects are fundamentally no different from how other types of software development projects might make use of a Continuous Integration & Continuous Delivery system (CI/CD) such as Jenkins: Android developers will collaborate using a source control management system (SCM) such as Git or Mercurial; they will create Pull Requests, which should be automatically verified; they expect to get feedback on test failures and code quality (e.g. via email or Slack); and they should be able to easily deploy new versions of their app to beta testers or end users.\n\nTo this end, Jenkins lets you define your build and deployment pipelines in a structured and auditable fashion (via Jenkinsfile), supports a multitude of SCMs, while the multibranch Pipeline feature automatically creates new Jenkins jobs for every new Pull Request in your repository, and cleans them up as branches get merged.  The Blue Ocean user interface ties these features together in a clean, modern UI.\n\nBuilding Android Apps\n\nTo build an Android app, you need the Java development tools (JDK), which Jenkins can automatically install for you, plus the Android SDK, which you can also install on individual build agents using a tool installer, or you can use a Docker container with the Android SDK Tools preinstalled, for example.\n\nThen, you can use your SCM plugin of choice to fetch your source code, and build the app using the Android Gradle Plugin via the Gradle Wrapper — in most cases this is as simple as running./gradlew assembleDebug.\n\nOnce your app has been built and packaged into a.apk file, you can use the archiveArtifacts build step, storing the APK, enabling colleagues to download APKs directly from Jenkins, so that they can try out the latest build.\n\nTesting Android Apps\n\nThe Android SDK supports two types of test: unit tests, which run on the JVM, and instrumentation tests, which have to run on an Android device or emulator.  Both types of test can be executed using Jenkins and, since the Android Gradle Plugin writes the test results to disk in JUnit XML format, the JUnit Plugin for Jenkins can be used to parse the results, enabling you see a test report, and to be notified of test failures.\n\nCompiling and executing the unit tests for your app is as simple as adding another build step which runs./gradlew testDebugUnitTest.\n\nSimilarly, instrumentation tests can be compiled and executed via the connectedDebugAndroidTest task in Gradle.  However, before you do this, you should ensure that an Android device is connected to your Jenkins build agent, or you can make use of the Android Emulator Plugin to automatically download, create, and start an emulator for you during a build.  There are also plugins for cloud testing services such as AWS Device Farm.\n\nOnce you have finished executing the tests, you can use the junit step to analyse the results: junit '**/TEST-*.xml'.\n\nStatic Analysis\n\nSimilar to other Java or Kotlin projects, you can scan your codebase using static analysis tools like FindBugs or Checkstyle.  Once again, Jenkins has analysis plugins which can parse the output of these tools, and present you with the results and trend graphs, or optionally flag the build as unstable or failed if too many problems have been detected.\n\nThe Android SDK provides a further useful static analysis tool called Lint.  The output of this tool can be parsed by the Warnings Next Generation Plugin, which will analyse the issues found, and provide you with a detailed report within Jenkins.  This functionality was demonstrated by the Android Tools Team at the Google I/O conference a few years back.\n\nSecurely signing and deploying Android apps\n\nIn order to distribute an Android app, it needs to be signed with a private key, which you should keep safe (losing it means you won’t be able to publish updates to your app!), and as secure as possible.\n\nInstead of developers having to keep the signing keystore on their development machines, you can securely store the keystore and/or its passphrase on Jenkins using the Credentials Plugin.  This avoids having to hardcode the passphrase into your build.gradle, or have it otherwise checked into your SCM.\n\nThe Credentials Plugin allows you to store secrets in Jenkins — which will be stored encrypted on disk when not in use — and those secrets can temporarily be made available during a build, either as a file in the build workspace, or exposed as an environment variable.\n\nYou can use such environment variables in a signingConfig block within your build.gradle, or you can make use of the Android Signing Plugin to sign your APK for you.\n\nOnce you have your production-ready APK built and signed, you can automatically upload it to Google Play using the Google Play Android Publisher plugin.  The benefit of using this plugin is that it supports multiple APK upload, expansion files, uploading of ProGuard mapping files, promotion of builds from alpha, to beta, to production — and once again, your Google Play credentials are securely stored on Jenkins thanks to integration with the Credentials Plugin.\n\nSample Pipeline\n\nHere’s a straightforward example of a Jenkinsfile defining a pipeline to build, test, and optionally deploy an Android app, from a multibranch Pipeline job.\nIt requires the Pipeline, JUnit, Android Lint, Google Play Android Publisher, and Mailer plugins to be installed.\n\nJenkinsfile\n\npipeline {\n  agent {\n    // Run on a build agent where we have the Android SDK installed\n    label 'android'\n  }\n  options {\n    // Stop the build early in case of compile or test failures\n    skipStagesAfterUnstable()\n  }\n  stages {\n    stage('Compile') {\n      steps {\n        // Compile the app and its dependencies\n        sh './gradlew compileDebugSources'\n      }\n    }\n    stage('Unit test') {\n      steps {\n        // Compile and run the unit tests for the app and its dependencies\n        sh './gradlew testDebugUnitTest'\n\n        // Analyse the test results and update the build result as appropriate\n        junit '**/TEST-*.xml'\n      }\n    }\n    stage('Build APK') {\n      steps {\n        // Finish building and packaging the APK\n        sh './gradlew assembleDebug'\n\n        // Archive the APKs so that they can be downloaded from Jenkins\n        archiveArtifacts '**/*.apk'\n      }\n    }\n    stage('Static analysis') {\n      steps {\n        // Run Lint and analyse the results\n        sh './gradlew lintDebug'\n        androidLint pattern: '**/lint-results-*.xml'\n      }\n    }\n    stage('Deploy') {\n      when {\n        // Only execute this stage when building from the `beta` branch\n        branch 'beta'\n      }\n      environment {\n        // Assuming a file credential has been added to Jenkins, with the ID 'my-app-signing-keystore',\n        // this will export an environment variable during the build, pointing to the absolute path of\n        // the stored Android keystore file.  When the build ends, the temporarily file will be removed.\n        SIGNING_KEYSTORE = credentials('my-app-signing-keystore')\n\n        // Similarly, the value of this variable will be a password stored by the Credentials Plugin\n        SIGNING_KEY_PASSWORD = credentials('my-app-signing-password')\n      }\n      steps {\n        // Build the app in release mode, and sign the APK using the environment variables\n        sh './gradlew assembleRelease'\n\n        // Archive the APKs so that they can be downloaded from Jenkins\n        archiveArtifacts '**/*.apk'\n\n        // Upload the APK to Google Play\n        androidApkUpload googleCredentialsId: 'Google Play', apkFilesPattern: '**/*-release.apk', trackName: 'beta'\n      }\n      post {\n        success {\n          // Notify if the upload succeeded\n          mail to: 'beta-testers@example.com', subject: 'New build available!', body: 'Check it out!'\n        }\n      }\n    }\n  }\n  post {\n    failure {\n      // Notify developer team of the failure\n      mail to: 'android-devs@example.com', subject: 'Oops!', body: \"Build ${env.BUILD_NUMBER} failed; ${env.BUILD_URL}\"\n    }\n  }\n}\n\nNot just for Android\n\nWhile buddybuild concentrated on Android and iOS apps, thanks to the distributed build agent architecture of Jenkins, you can automate any type of project.\n\nFor example, you can expand the capabilities of Jenkins by adding macOS (or Windows, Linux, BSD…) agents; you can dynamically spin up agents on AWS EC2 instances, Microsoft Azure VMs, or Azure Container Instances; you can create agents using VMware, and so on.\n\nConclusion\n\nThousands of Jenkins instances are already using the various Android-related plugins, and Pipeline along with the Blue Ocean User Interface make using Jenkins simpler than it’s ever been.\n\nGive Jenkins a try for building your Android projects, check out the tutorials, and get in touch via the users' mailing list, or IRC.\n\nFinally, as with Jenkins itself, all plugins distributed are open-source, so feel free to contribute!","title":"Moving from buddybuild to Jenkins for Android Developers","tags":["android","plugins"],"authors":[{"avatar":null,"blog":"https://chris.orr.me.uk/","github":"orrc","html":"<div class=\"paragraph\">\n<p>Chris has been hanging around the Jenkins project since 2008, working on\nplugins, helping out folk on IRC, and speaking to people at conferences about\nJenkins.  He maintains several Android-related plugins, and contributes to a few\nothers.</p>\n</div>","id":"orrc","irc":null,"linkedin":null,"name":"Christopher Orr","slug":"/blog/authors/orrc/","twitter":"orrc"}]}},{"node":{"date":"2018-01-13T00:00:00.000Z","id":"b30f609a-7e4a-56ef-93e3-f8629da662cd","slug":"/blog/2018/01/13/jep-200/","strippedHtml":"There is a newer version of the announcement for Jenkins administrators.\nPlease see this blogpost.\n\nOverview\n\nJEP-200 has been integrated into Jenkins weekly builds\nand (if all goes well) will be a part of the next LTS line.\nIn a nutshell, this change is a security hardening measure\nto be less permissive about deserializing Java classes defined in the Java Platform or libraries bundled with Jenkins.\nFor several years now, Jenkins has specifically blacklisted certain classes and packages according to known or suspected exploits;\nnow it will reject all classes not explicitly mentioned in a whitelist, or defined in Jenkins core or plugins.\n\nFor Jenkins administrators\n\nBefore upgrade\n\nBack up your Jenkins instance prior to upgrade so you have any easy way of rolling back.\nIf you are running any of the plugins listed in\nPlugins affected by fix for JEP-200,\nupdate them after taking the backup but before upgrading Jenkins core.\n\nIf you have a way of testing the upgrade in an isolated environment before applying it to production,\ndo so now.\n\nUsing backups and a staging server is good advice before any upgrade but especially this one,\nwith a relatively high risk of regression.\n\nAfter upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nIf you do encounter a java.lang.SecurityException: Rejected: some.pkg.and.ClassName in the Jenkins UI or logs,\nyou may have found a case where an unusual plugin, or an unusual usage mode of a common plugin,\nviolates the existing whitelist.\nThis will be visible in the Jenkins system log as a message from jenkins.security.ClassFilterImpl like the following:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nwhere the link would direct you here.\n\nIf you find such a case, please report it in the Jenkins issue tracker, under the appropriate plugin component.\nLink it to JENKINS-47736 and add the JEP-200 label.\nIf at all possible, include complete steps to reproduce the problem from scratch.\nJenkins developers will strive to evaluate the reason for the violation and offer a fix in the form of a core and/or plugin update.\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nSimply make note of any class name(s) mentioned in such log messages,\nand run Jenkins with this startup option (details will depend on your installation method):\n\n-Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName\n\nFor plugin developers\n\nTesting plugins against Jenkins 2.102 and above\n\nAs a plugin developer encountering this kind of error,\nyour first task is to ensure that it is reproducible in a functional ( JenkinsRule) test\nwhen running Jenkins 2.102 or newer to reproduce the error.\n\nmvn test -Djenkins.version=2.102 -Denforcer.skip=true\n\nThe above assumes you are using a recent 2.x or 3.x parent Plugin POM.\nFor certain cases you may need to use Plugin Compat Tester (PCT)\nto run tests against Jenkins core versions newer than your baseline.\n\nRunning PCT against the latest Jenkins core:\n\njava -jar pct-cli.jar -reportFile $(pwd)/out/pct-report.xml \\\n    -workDirectory $(pwd)/work -skipTestCache true -mvn $(which mvn) \\\n    -includePlugins ${ARTIFACT_ID} -localCheckoutDir ${YOUR_PLUGIN_REPO}\n\nYou may need to run tests using an agent or force saves of plugin settings.\n\nFor maven plugins you can also specify custom Jenkins versions in Jenkinsfile to run tests against JEP-200:\n\nbuildPlugin(jenkinsVersions: [null, '2.102'])\n\n(again picking whatever version you need to test against)\nso that the test is included during CI builds, even while your minimum core baseline predates JEP-200.\n\nIf your plugins are built with Gradle, your mileage may vary.\n\nMaking plugins compatible with Jenkins 2.102 or above\n\nIf you discover a compatibility issue in your plugin,\nyou then have several choices for fixing the problem:\n\nIdeally, simplify your code so that the mentioned class is not deserialized via Jenkins Remoting or XStream to begin with:\n\nIf the problem occurred when receiving a response from an agent, change your Callable (or FileCallable) to return a plainer type.\n\nIf the problem occurred when saving an XML file (such as a config.xml or build.xml), use a plainer type in non- transient fields in your persistable plugin classes.\n\nIf the class(es) are defined in the Java Platform or some library bundled in Jenkins core, propose a pull request adding it to core/src/main/resources/jenkins/security/whitelisted-classes.txt in jenkinsci/jenkins.\n\nIf the class(es) are defined in a third-party library bundled in your plugin, create a resource file META-INF/hudson.remoting.ClassFilter listing them. ( example)\n\nYou may also do this for Java or Jenkins core library classes, as a hotfix until your core baseline includes the whitelist entry proposed above.\n\nIf the class(es) are defined in a JAR you build and then bundle in your plugin’s *.jpi, add a Jenkins-ClassFilter-Whitelisted: true manifest entry. This whitelists every class in the JAR. ( example)","title":"JEP-200: Remoting / XStream whitelist integrated into Jenkins core","tags":["core","security","remoting","upgrade"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick/","twitter":"tyvole"}]}},{"node":{"date":"2018-01-17T00:00:00.000Z","id":"b1792073-44e9-5774-86e8-6786aeba1b03","slug":"/blog/2018/01/17/jenkins-world-cfp-open/","strippedHtml":"Happy 2018! The Jenkins World train is ready to take off once again. As usual, the sign of festivities looming begins with the Call for Papers.  Those who attended Jenkins World 2017 know that Jenkins World 2018 is coming back to San Francisco. But what they did not know is that Jenkins World will also be coming to Europe. You read that right, Jenkins World is taking place in two locations in 2018:\n\nJenkins World USA | San Francisco | September 16 - 19, 2018\n\nJenkins World Europe | October - date and location TBA\n\nTo encourage open collaboration and stimulate discussions that will help advance Jenkins adoption and drive it forward, we invite Jenkins users, developers and industry experts to submit a speaking proposal to Jenkins World San Francisco and or Europe.  Submissions for both locations are being accepted now and will close on March 18, 2018 @ 11:59PM Pacific.\n\nWhere do I go to submit my proposal?\n\nSubmissions for both Jenkins World USA and Europe are accepted at:\n\nJenkins World USA\n\nJenkins World Europe\n\nCan I make proposal(s) to both conferences?\n\nYes, you can! Once you’ve created an account on the CFP website you will be given the option to make submission(s) to one conference or both conferences.\n\nWhen is the deadline Jenkins World USA?\n\nSunday March 18, 2018 @ 11:59PM Pacific\n\nWhen is the deadline for Jenkins World Europe?\n\nSunday March 18, 2018 @ 11:59PM Pacific\n\nImportant Dates:\n\nCFP Opens: January 17, 2018\n\nCFP Closes: March 18, 2018 @ 11:59pm Pacific\n\nCFP Notifications: April\n\nAgenda Announcement: April\n\nEvent Dates:\n\nJenkins World USA | San Francisco | September 16 - 19, 2018\n\nJenkins World Europe | October - exact date TBA","title":"Jenkins World 2018: Call for Papers is Open","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2018-01-21T00:00:00.000Z","id":"4b83704c-93fe-50dd-86b2-f971dac01a43","slug":"/blog/2018/01/21/overhaul-of-manage-jenkins-page/","strippedHtml":"Overview\n\nRecently some UI improvements around the Manage Jenkins page have been introduced. The visual changes are very subtle but behind them, there are interesting benefits.\n\nSome of the goals that we have tried to achieve:\n\nApplying a semantic HTML\n\nRemoving the tag usage for implementing layouts and content structures. Read this article if you want to know reasons and/or arguments.\n\nSmall re-styling focused on spacing, margins, composition, etc..\n\nAccessibility\n\nIn order to provide a quick overview of the visual changes, let’s take a look at these screenshots.\n\nSystem tray with administrative messages (before)\n\nSystem tray with administrative messages (after)\n\nManage Jenkins page (before)\n\nManage Jenkins page (after)\n\nInformation about how this change can affect the current implementations of Administrative Monitors can be found in the following section\n\nFor core developers\n\nLet’s use a real example for showing how this proposal works.\n\nThis is the original UI implementation of HudsonHomeDiskUsageMonitor.java :\n\n${%blurb(app.rootDir)}\n\nAnd this is the proposed change:\n\n${%blurb(app.rootDir)}\n\nSome highlights:\n\nNo more ad hoc UI compositions\n\nNo more custom CSS classes when Jenkins project is already using Bootstrap for many different things\n\nBased on Bootstrap Alert\n\nAll administrative monitors defined in Jenkins core have been adapted as part of this proposal.\n\nFor plugin developers\n\nNo changes are really needed, but we do recommend you to adapt your plugins to this proposal so Jenkins users have a better user experience.\n\nTaking into account that you want to keep backward compatibility, you will need some changes.\n\nIn your implementation of Administrative Monitor, add this helper method:\n\n/**\n * This method can be removed when the baseline is updated to 2.103\n *\n * @return If this version of the plugin is running on a Jenkins version where JENKINS-43786 is included.\n */\n @Restricted(DoNotUse.class)\n public boolean isTheNewDesignAvailable() {\n    if (Jenkins.getVersion().isNewerThan(new VersionNumber(\"2.103\"))) {\n        return true;\n    }\n    return false;\n}\n\nIn your view (a.k.a. Jelly file or Groovy file):\n\nSSH Host Key Verifiers are not configured for all SSH agents on this Jenkins instance. This could leave these agents open to man-in-the-middle attacks. Update your agent configuration to resolve this.\n\nSSH Host Key Verifiers are not configured for all SSH agents on this Jenkins instance. This could leave these agents open to man-in-the-middle attacks. Update your agent configuration to resolve this.\n\nIf you don’t want to keep a strict backward compatibility, the impact is minimal. In fact, you can see an example on GitHub Plugin.\n\nSome helpful references:\n\nJIRA issue where the proposal was tracked\n\nPull Request with the change in Jenkins core. You can find several screenshots\n\nPull Request for adapting SSH Agent Plugin\n\nDo not hesitate to ping me if you decide to adapt your Administrative Monitors.","title":"Overhaul of Manage Jenkins page","tags":["jenkins","ui","restyling","upgrade"],"authors":[{"avatar":null,"blog":null,"github":"recena","html":"","id":"recena","irc":null,"linkedin":null,"name":"Manuel Recena","slug":"/blog/authors/recena/","twitter":null}]}},{"node":{"date":"2018-01-26T00:00:00.000Z","id":"722f0200-64bd-58bf-8505-41094f0be2dd","slug":"/blog/2018/01/26/fosdem-hackaton/","strippedHtml":"On the first weekend in February, numerous free and open source developers from around the\nworld will travel to Brussels, Belgium, for arguably the largest event of its kind:\nFOSDEM.\nAmong the thousands of hackers in attendance will be a number of Jenkins contributors.\n\nOn the Monday after FOSDEM,\nyou are invited to join a group of those contributors for a full day of hacking on Jenkins.\nFolks of all experience levels are welcome;\nthere will be sessions for everyone from seasoned hackers to new contributors.\n\nAll-day Jenkins Hackfest\n\nThe Hackfest will start at 9:30am on Monday with general introductions and gathering of potential topics/projects.\nBring suggestions for topics that interest you, or just come and choose from the topics others suggest.\nThere will be plenty of topics from which to choose.\nAll the topic suggestions will all be added to a backlog and we will identify and cluster around popular topics.\nThen we’ll divide into smaller groups and work on individual topics in timeboxed sessions.\n\nMeals, snacks, and beverages will be provided throughout the day, wrapping up with dinner around 5pm.\n\nSomething for everyone\n\nHackfests like this one are a great opportunity for contributors of all levels to get invovled, learn from each other, and\nwork together on interesting and high impact areas of the project.\n\nSome long-time contributors already know what areas they’ll work on and are looking for people interested in joining them.\nMark Waite (maintainer of the Jenkins Git and Git Client plugins) and Christian Halstrick (SAP) will be spending the day improving the way Git client plugin uses JGit.\nR. Tyler Croy (Jenkins community concierge) and Olivier Vernin (Jenkins infrastructure engineer) will work on infrastructure improvements.\n\nOthers contributors, such as Jesse Glick and Andrew Bayer\n(recipients of the  \" A Small Matter of Programming\" award), will arrive without a set plan.\nThey will, of course, have some topics to propose, so you might get a chance to work with them.\nOr if you have an area you’d like to work on, they and many other experts will be on hand for discussion and code review.\n\nThis is also a great opportunity for new contributors to join the project.\nBaptiste Mathus, long time contributor and all-around nice guy, will host a \"New Contributor Hackergarten\" covering the basics of contributing to Jenkins and submitting fixes via GitHub Pull requests.\nEven those with minimal coding experience can contribute by improving documentation and making typo fixes via this same process.\n\nFun!\n\nMore than anything else, Hackfests like this are great fun.\nNo matter what your level of exerience, there will be plenty to do and great people with whom to do it.\nReserve a space by\njoining the meetup here.\nThen bring your own laptop and passion for improving Jenkins.\n\nDetails\n\nDate : Monday, February 5, 2018\n\nTime : 9:30 AM to 5:00 PM\n\nLocation : BeCentral sprl/bvba\nCantersteen 12\n1000 Brussel\nBelgium\nRoom: Studio C (1st floor)\n\nRSVP Required\n\nMeals, snacks, and beverages will be provided.\nBring your own computer.\n\nAsk for \"Jenkins\" at the front desk if you get lost.","title":"You are invited to the Post-FOSDEM 2018 Jenkins Hackfest","tags":["fosdem","event"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2018-02-05T00:00:00.000Z","id":"47e0963b-eba2-5a4e-9d92-1ffe57e02833","slug":"/blog/2018/02/05/security-updates/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities.\n\nAndroid Lint\n\nCCM\n\nCredentials Binding\n\nJUnit\n\nPipeline: Supporting APIs\n\nFor an overview of these security fixes, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-02-14T00:00:00.000Z","id":"8d50238b-953c-57e4-a3dd-876a612b6d80","slug":"/blog/2018/02/14/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.107 and 2.89.4, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nWhile the severity score works out as medium for all the vulnerabilities, we strongly recommend that anyone operating publicly accessible Jenkins instances update as soon as possible, as their secrets on disk might be at risk by SECURITY-705.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-02-19T00:00:00.000Z","id":"d1b0a235-d051-5787-9aab-f43b8d0a68ca","slug":"/blog/2018/02/19/gsoc2018-announcement/","strippedHtml":"We are happy to announce that Jenkins project has been accepted to\nGoogle Summer of Code 2018.\nThis year we invite students and mentors to join the Jenkins community and work together\non various initiatives: core, plugins, development tools and infrastructure.\n\nOur mentors have already created some project ideas.\nFor example, you are welcome to work on the new Configuration-as-Code initiative or\nto help creating standard API for Code Coverage plugins.\nIf you like test automation, there is a proposal to\nJenkins Acceptance Test Harness.\nOver the next weeks we plan to extend this list by new even more project ideas.\n\nAll information about the Jenkins GSoC is available on its subproject page.\n\nI am a student. How do I apply?\n\nSee Information for students for application guidelines.\n\nFirst step is to join discussions in the mailing lists in order to introduce yourself, establish connections with the community and potential mentors.\nThe application period starts on March 12 and ends on March 27, but don’t let it misguide you!\nUse time before application to discuss project ideas/proposals with mentors and to process their feedback.\nTo create a better proposal, we also recommend to study Jenkins and to do some contributions in the area of your project proposal.\n\nNot satisfied by the current project ideas?\nYou can propose your own idea\nin the developer mailing list.\n\nI want to be a mentor. Is it too late?\n\nIt’s not!\nIf you are passionate about open-source and Jenkins, we invite you to join the mentors team.\nYou can either propose a new project idea or join an existing one.\nSee Call for Mentors and Information for mentors for details.\n\nThis year mentorship does NOT require strong expertise in Jenkins development.\nThe objective is to guide students and to get involved into the Jenkins community.\nGSoC org admins will help to find advisers if special expertise is required.\n\nImportant dates\n\nMar 05 - deadline for new GSoC project idea proposals\n\nMar 12 - student application period starts\n\nMar 27 - deadline for student applications\n\nApr 23 - accepted projects announced, community bonding starts\n\nMay 14 - coding period starts\n\nAug 06 - end of the coding period\n\nSee the GSoC Timeline for more info.\nIn the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).\n\nP.S: I am going to create a special GSoC 2018 edition of swags for mentors and students. Do not miss them ;)","title":"Jenkins is accepted to Google Summer Of Code 2018, join us!","tags":["gsoc","gsoc2018","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-02-22T00:00:00.000Z","id":"d0c104fc-7582-5b71-ae72-ad7781b4796d","slug":"/blog/2018/02/22/cheetah/","strippedHtml":"Table of Contents\n\nIntroducing \"Project Cheetah\"\nYes, but what does it DO?\nHow Do I Set Speed/Durability Settings?\n\n1. Globally, you can choose a global default durability setting:\n2. Each Pipeline can get a custom Durability Setting:\n3. Multibranch Projects can use a new BranchProperty to customize the Durability Setting.\n\nWill Performance-Optimized Mode Help Me?\nOther Goodies\nHow Did You Do It?\nWhat Next?\n\nSince it launched, Pipeline has had a bit of a Dr. Jekyll and Mr. Hyde performance problem.  In certain circumstances, Pipeline can turn from a mild-mannered CI/CD assistant into a monster.  It will happily eat storage read/write capacity like popcorn without caring about the other concerns of our friendly butler.  When combined with other additional factors, this can result in real-world stability problems.  For example, combining slow storage with a spike in running Pipelines has brought down production Jenkins at more than one organization.  Similarly, users see issues if a busy controller gets hit with an extra source of stress; past culprits have been heavy automated (ab)use of Jenkins APIs, now-solved user lookup bugs, backup jobs, and plugins run crazy that load excessive numbers of builds.  Symptoms ranged from visible slowdowns in the UI to unresponsive jobs and \"hung\" controllers.\n\nNow I’m not saying this to scare people or to criticize the technology we’ve built. Implementing Pipeline scalability best practices coupled with SSD storage keeps Jenkins in a happy place.  We just need context on the weaknesses to see why it’s important to address them.\n\nIntroducing \"Project Cheetah\"\n\nToday we’re announcing the first major results of \"Project Cheetah\", our long-running effort to address these challenges and improve Pipeline scalability.  More broadly, Cheetah aims to help in 3 places:\n\nSmall-scale containers: Pipeline needs to run leanly in resource-constrained containers, to enable easy scale-out without consuming excessive resources on shared container hosts.\n\nEnterprise systems: Pipeline needs to effectively serve high-scale Jenkins instances that are central to many large companies.\n\nGeneral case: run Pipelines a bit more quickly on average, and allow users to get much-stronger performance in worst-case scenarios.\n\nThese changes are implemented across many of the Pipeline plugins.\n\nYes, but what does it DO?\n\nProject Cheetah offers several things, but the most important is Durability Settings for all Pipelines, and especially the Performance-Optimized setting.  This setting avoids several potentially unexpected performance \"surprises\" that may strike users.  In the general case, it greatly reduces the disk IO needs for Pipeline.  How much?  Below is a graph of storage utilization with legacy Pipeline versions (think early 2017) and with the latest version using the Performance-Optimized mode.  These are tested on an AWS instance backed by an EBS volume provisioned with 300 IOPs.\n\nBefore and After:\n\nAs you can see, storage utilization goes down by a lot.  While the exact number will vary, across the benchmark testcases this results in Pipeline throughput of 2x to 6x the previous before becoming IO-bound. This also increases stability of Jenkins controllers because they will tolerate unexpected load.\n\nThis comes with a major drop in CPU IOWait as well:\n\nAnd of course the rate at which data is written to disk and number of writes/s is also reduced:\n\nFor enterprise users, timing stats often show 10-20% of normal builds is serializing the Program and writing the record of steps run (\"FlowNodes\") - the performance optimized durability setting will cut this to almost nothing (for standard pipelines, 1/100 or less) - so builds will complete faster, especially complex ones.\n\nPlease see the Pipeline Scalability documentation for deeper information on the new Durability Settings, how to use them, and which plugin versions are required to gain these features.\n\nAlso, users may see a reduction in hung Pipelines because new test utilities made it possible to identify and correct a variety of bugs.\n\nHow Do I Set Speed/Durability Settings?\n\nThere are 3 ways to configure the durability setting:\n\n1. Globally, you can choose a global default durability setting:\n\nUnder \"Manage Jenkins\" > \"Configure System\", labelled \"Pipeline Speed/Durability Settings\".  You can override these with the more specific settings below.\n\n2. Each Pipeline can get a custom Durability Setting:\n\nThis is one of the job properties located at the top of the job configuration, labelled \"Custom Pipeline Speed/Durability Level.\" This overrides the global setting. Or, use a \"properties\" step - the setting will apply to the NEXT run after the step is executed (same result).\n\n// Script //\nproperties([durabilityHint('PERFORMANCE_OPTIMIZED')])\n// Declarative //\npipeline {\n    agent any\n    stages {\n        stage('Example') {\n            steps {\n                echo 'Hello World'\n            }\n        }\n    }\n    options {\n        durabilityHint('PERFORMANCE_OPTIMIZED')\n    }\n}\n\n3. Multibranch Projects can use a new BranchProperty to customize the Durability Setting.\n\nUnder the SCM you can configure a custom Branch Property Strategy and add a property for Custom Pipeline Speed/Durability Level.  This overrides the global Durability Setting and will apply to each branch at the next run.  You can also use a \"properties\" step to override the setting, but remember that you may have to run the step again to undo this.\n\nDurability settings will take effect with the next applicable Pipeline run, not immediately.  The setting will be displayed in the log.\n\nThere is a slight durability trade-off for using the Performance-Optimized mode — the appropriate section of the Pipeline Scalability documentation has the specifics.\nFor most uses we do not expect this to be important, but there are a few specific cases where users may wish to use a slower/higher-durability setting. The Best Practices are documented.\n\nWe recommend using Performance-Optimized by default, but because it does represent a slight behavioral change the initial \"Cheetah\" plugin releases defaults to maintain previous behavior. We expect to switch this default in the future with appropriate notice once people have a chance to get used to the new settings.\n\nWill Performance-Optimized Mode Help Me?\n\nYes, if your Jenkins instance uses NFS, magnetic storage, runs many Pipelines at once, or shows high iowait (above 5%)\n\nYes, if you are running Pipelines with many steps (more than several hundred).\n\nYes, if your Pipeline stores large files or complex data to variables in the script, keeps that variable in scope for future use, and then runs steps.  This sounds oddly specific but happens more than you’d expect.\n\nFor example: readFile step with a large XML/JSON file, or using configuration information from parsing such a file with One of the Utility Steps.\n\nAnother common pattern is a \"summary\" object containing data from many branches (logs, results, or statistics). Often this is visible because you’ll be adding to it often via an add/append or Map.put() operations.\n\nLarge arrays of data or Maps of configuration information are another common example of this situation.\n\nNo, if your Pipelines spend almost all their time waiting for a few shell/batch steps to finish.  This ISN’T a magic \"go fast\" button for everything!\n\nNo, if Pipelines are writing massive amounts of data to logs (logging is unchanged).\n\nNo, if you are not using Pipelines, or your system is loaded down by other factors.\n\nNo, if you don’t enable higher-performance modes for pipelines.  See above for how!\n\nOther Goodies\n\nUsers can now set an optional job property so that individual Pipelines fail cleanly rather than resuming upon restarting the controller.  This is useful for niche cases where some Pipelines are considered disposable and users would value a clean restart over Pipeline durability.\n\nWe’ve reduced classloading and reflection quite significantly, which improves scaling and reduces CPU use:\n\nScript Security (as of version 1.41) has gotten optimizations to reduce the performance overhead of Sandbox mode and eliminate lock contention so Pipeline multithreads better.\n\nPipeline Step data uses up less space on disk (regardless of the durability setting) - this should be 30% smaller.  Assume it’s a few MB per 1000 steps - but for every build after the change.\n\nEven in the low-performance/high-durability modes, some redundant writes have been removed, which decreases the number of writes by 10-20%.\n\nHow Did You Do It?\n\nThat’s probably material for another blog post or Jenkins World talk.\n\nThe short answer is: first we built a tool to simulate a full production environment and provide detailed metrics collection at scale.  Then we profiled Jenkins to identify bottlenecks and attacked them.  Rinse and repeat.\n\nWhat Next?\n\nThe next big change, which I’m calling Cheetah Part 2 is to address Pipeline’s logging. For every Step run, Pipeline writes one or more small log files. These log files are then copied into the build log content, but are retained to make it possible to easily fetch logs for each step.\n\nThis copying process means every log line is written twice, greatly reducing performance, and writing to many small files is orders of magnitude slower than appending to one big log file.\n\nWe’re going to remove this duplication and data fragmentation and use a more efficient mechanism to find per-step logs. This should further improve the ability to run Pipelines on NFS mounts and hard-drive-backed storage, and should significantly improve performance at scale.\n\nBesides this, there’s a variety of different tactical improvements to improve scaling behavior and reduce resource needs.\n\nThe Project Cheetah work doesn’t free users to completely ignore Pipeline scaling best practices and previous suggestions.  Nor does it eliminate the need for efficient GC settings.  But this and other enhancements from the last year can significantly improve the storage situation for most users and reduce the penalties for worst-case behaviors.  When you add all the pieces together, the result is a faster, leaner, more reliable Pipeline experience.","title":"Project Cheetah - Faster, Leaner Pipeline That Can Keep Up With Demand","tags":["pipeline","performance","scalability"],"authors":[{"avatar":null,"blog":null,"github":"svanoort","html":"","id":"svanoort","irc":null,"linkedin":null,"name":"Sam Van Oort","slug":"/blog/authors/svanoort/","twitter":null}]}},{"node":{"date":"2018-03-05T00:00:00.000Z","id":"47f0fe41-917d-5d9c-a643-b28ab9b12877","slug":"/blog/2018/03/05/jenkins-world-talk-proposal-tips/","strippedHtml":"You’ve marked your calendar to alert you weeks in advance of the CFP deadline.\nYou’ve spent your nights and weekends to skillfully craft your abstract and you\nare convinced this is THE one.  You confidently clicked the 'submit' button\nonly to find out weeks later you’ve received an automated declined email. On\ntop of feeling disappointed, you probably wondered why your proposal was turned\ndown.\n\nAs Jenkins World CFP\nis still open, we hope to demystify the selection process by offering a few\ntips to help increase the chance of your proposal getting accepted.\n\nTip 1: Make your title concise and attention-grabbing\n\nThere’s only a few seconds to make an impression with your proposal. Your title\nand abstract should be succinct and attention grabbing. Think about what makes\nyour Jenkins proposal exceptional over others. What value will it bring to\nattendees?\n\nTip 2: Know your audience\n\nJenkins World audiences want to learn and adopt the newest development\npractices, process, languages and frameworks. They are highly technical and are\ninterested in deep technical talks that are original and offers valuable\ninformation.\n\nTip 3: Transformational user stories\n\nShare your unique Jenkins project experiences, challenges, strategies, lessons\nlearned, and outcome. What can you share with your audience that will\nfacilitate knowledge transfer and development of new and innovative techniques?\n\nTip 4: Topic should be relevant and applicable\n\nConsider how to make the topic more broadly applicable to the attendees, such\nas with a hands-on demo explaining the concept. By showcasing innovative\nmethods that draw out relevant and compelling knowledge to the audience,\neverybody is likely to more thoroughly absord the content of the talk. Also,\nwho doesn’t love a cool demo?\n\nTip 5: Got Tips & Tricks?\n\nJenkins is used tons of different ways.  Sharing novel approaches, tips, or\ntricks for increased efficiency and proficiency with Jenkins is almost always\nwell received!\n\nImportant Dates:\n\nCFP Closes: March 18, 2018 @ 11:59pm Pacific\n\nCFP Notifications: April\n\nAgenda Announcement: April\n\nEvent Dates:\n\nJenkins World USA | San Francisco | September 16 - 19, 2018\n\nJenkins World Europe | Nice, France | October 23 - 25, 2018\n\nRegister for Jenkins World\n2018 with the code JWATONG for a 20% discount off your pass.\n\nGood Luck!","title":"5 tips for improving your Jenkins World 2018 talk proposals","tags":["jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2018-03-12T00:00:00.000Z","id":"b9886e8d-a501-5b7a-8e2a-2ba26132ecae","slug":"/blog/2018/03/12/browser-usage/","strippedHtml":"Over the last year, several efforts were done on jenkins.io like\nsecurity advisories or documentation\nand I wanted to understand the impact it had on its traffic.\n\nI had a look to the Google Analytics account used for jenkins.io and it was\ninteresting to discover which browsers are used by Jenkins visitors and how\nthis compares with other websites. So I decided to analyze one year of data\nfrom January 2017 to January 2018. Then I selected\nstatcounter\nas an external data source in order to compare results from jenkins.io.\n\nFirst, let’s talk about numbers:\n\nDuring that period, 3,496,245 users across the world visited this website.\n\nThis is a growth of 52.69% visitors compared to the year before.\n\n92.28% of them used a desktop, 6.63% were on mobile and only 1.10% on a tablet.\n\nTable 1. Browser Usage\n\nBrowser\nPercentage\n\nChrome\n69.82%\n\nFirefox\n14.75%\n\nSafari\n6.44%\n\nIE\n5.84%\n\nEdge\n1.59%\n\nWe clearly see that 91% of Jenkins.io visitors only use three browsers. Chrome\nis by far the leader followed by Firefox and Safari.\n\nObviously those numbers taken alone don’t mean anything, so let’s try to put\nthem in perspective with another data source.\n\nNetscape 4.8 was still used by 15 visitors over the year.\n\n6 visitors used their Nintendo DS.\n\nStatCounter\n\nLet’s now compare our previous results with the same time period from\nstatcounter who argues to collect data from\n2million websites.  Statcounter allow us to display browsers stats based on 4\ndifferent categories, 'All platform', 'Desktop', 'Tablet' or 'Mobile'. + For\nthis comparison, I am interested by 'All platform' and of course 'Desktop' as\n92.28% of Jenkins.io visitors use a desktop.\n\nTable 2. Browser Market Share Across All Platforms\n\nBrowser\nPercentage\n\nChrome\n54.13%\n\nSafari\n14.50%\n\nUC Browser\n8.25%\n\nFirefox\n6.15%\n\nIE\n3.89%\n\nExcepted Chrome who still leads the ranking with \"only\" 54%, all the others\nactors are totally shuffled.  Safari moved to the 2nd place with 14.50% 'UC\nBrowser' appeared in the top 3 with 8.25% where only 0.10% of Jenkins.io\nvisitors were using UC browser.  Firefox moved to the 4th places with only\n6.15%.  It’s interesting how this \"All platform\" browser market share from\nstatcounter doesn’t reflect Jenkins.io visitors' habits.\n( Source )\n\nNow at a first glance, results look more similar to the Jenkins.io visitors;\nexcepted for Chrome and Firefox which shed some percentages in favor of\nInternet Explorer and Edge.  This promotes IE to the 3rd place with 8.86% of\nusage, and downgrade Safari to the 4th place with 6,44%.  Compared to\nJenkins.io results, Edge is still at the 5th position.  It’s very interesting\nto see how this ranking is so different from the \"All platform\" one but follows\nthe same pattern coming from Jenkins.io visitors.  This highlights how browser\nchoices are strongly influenced by the platform used and contrary to a general\ntrend,\nJenkins.io visitors remain desktop users.  This absence of mobile users\nprobably explains why some browsers are so under represented within Jenkins\nvisitors.\n( Source )\n\nTable 3. Browser Market Share on the Desktop\n\nBrowser\nUsage\n\nChrome\n63.59%\n\nFirefox\n13.75%\n\nIE\n8.86%\n\nSafari\n5.50%\n\nEdge\n4.35%\n\nConclusion\n\nThese observations should be carefully interpreted as it may be overestimated or underestimated (depending on various factors)  and doesn’t take into consideration local specificities.\n\nJenkins.io visitors are a majority of desktop users.\nThey are aligned with the world trends when we talk about desktop browsers however only a minority of them come from a mobile.\nThis is probably because jenkins.io is not (yet) mobile friendly and obsiously this would be a nice improvement to have.\n\nAll contributions are welcomed and especially for mobile user experience.","title":"Browser Market Share on jenkins.io","tags":["stats"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/olblak.png"},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak/","twitter":"0lblak"}]}},{"node":{"date":"2018-03-15T00:00:00.000Z","id":"f1ff4387-7033-572c-9fef-b871cfb88ad0","slug":"/blog/2018/03/15/jep-200-lts/","strippedHtml":"This is a post about a major change in Jenkins, which is available starting\nfrom Jenkins 2.102 and Jenkins LTS 2.107.1.\nThis is a change with a serious risk of regressions in plugins.\nIf you are a Jenkins administrator, please read this blogpost and\nupgrade guidelines\nBEFORE upgrading.\n\nI would like to provide some heads-up about the\nJEP-200 change,\nwhich is included into the new Jenkins LTS 2.107.x baseline.\n\nBackground\n\nFor many years Jenkins used to specifically blacklist certain classes and packages according to known or suspected exploits.\nThis approach has been proven unsustainable due to the risk of deserialization attacks via unknown classes\nfrom 3rd-party components, after the\nSECURITY-429/CVE-2017-1000353 fix in 2.46.2\nit was decided to replace blacklists by more restrictive whitelists.\nIn October 2017 Jesse Glick proposed a Jenkins Enhancement Proposal,\nwhich finally got accepted as JEP-200.\n\nThe change implies a risk of regressions in plugins serializing non-whitelisted Java-internal and 3rd-party classes,\nand that’s why it is so important to follow the upgrade guidelines for this release.\n\nCurrent state\n\nJEP-200 was first integrated in Jenkins 2.102 (released in January 2018), and it has got a lot of testing since that.\nSee this blogpost for the original announcement.\n\nOver the last two months we received more than 75 issues from users of Jenkins weekly releases.\nAll these issues have been triaged, and we have released most of the fixes.\nMore than 50 plugins were fixed in total, and many more plugins were updated in order to enable compatibility testing.\nA significant part of the discovered regressions were caused by real defects which were causing performance and stability\nissues in plugins.\nThanks a lot to all the Jenkins contributors and plugin maintainers who helped deliver timely changes for this effort!\n\nOver last 6 weeks Jenkins weekly releases had positive community ratings,\nthe overall JEP-200 adoption reached ~12% of all Jenkins installations on March 01.\nAll major plugins have been also tested directly or verified in the wild on weekly releases.\nSo we are confident that the change is ready to be released in LTS.\n\nOn the other hand, we continue to receive JEP-200 regression reports.\nThey are mostly caused by niche plugins which are not widely used in weekly releases,\nand unfortunately not all fixes have been released yet (see the Wiki page for up-to-date info).\nWe anticipate more regressions to be reported after the LTS release and broader adoption.\n\nIn order to simplify the upgrade to the new LTS baseline,\nI have prepared some helpful materials together with Liam Newman\nand Jesse Glick.\nBelow you can find the embedded slide deck and video, or scroll down to see the key information\nin the text form.\n\nVideo:\n\nFor Jenkins administrators\n\nUpgrading to a core with JEP-200 requires a special update procedure, which is described below.\n\nUpgrading Jenkins\n\nJEP-200 is not the only major change in 2.107.1, please read\nthe full upgrade guide carefully\n\nIf you have a way of testing the upgrade before applying it to production, do it\n\nBack up your instance so you have any easy way of rolling back\n\nUpdate all affected plugins.\nSee this Wiki page for the list of affected plugins,\nfix statuses and workarounds\n\nApply workarounds for non-released patches if needed (see below)\n\nUpdate to the new version of the Jenkins core\n\nUsing backups and staging servers is good advice before any upgrade but especially this one,\ngiven the relatively high risk of regression.\nDue to the nature of the changes, some plugins may refuse to load after the upgrade and cause your Jenkins service to fail to start.\n\nAfter the upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nStill, it is highly advised to monitor your system after the upgrade, especially the following:\n\nJenkins System log (especially during the startup)\n\nJob/Build logs\n\nIf you do encounter a log message referencing the https://jenkins.io/redirect/class-filter/ URL,\nmost likely it is a JEP-200 regression.\nExample:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nIf you see this kind of message, we highly recommend reporting it so that it can be investigated and probably fixed quickly.\n\nReporting JEP-200 issues\n\nStarting from May 01, JEP-200 issues are triaged by plugin and core maintainers.\nJEP-200 maintainers are available for code reviews if needed,\nbut they will not be reviewing cases in JIRA and searching for miscategorized issues on a daily basis.\nIf you experience new JEP-200 regressions, please follow the guidelines below.\n\nPlease report any issues you encounter matching the above pattern in the\nJenkins issue tracker, under the appropriate plugin component.\nBefore reporting please check whether this issue has already been reported.\n\nAdd the JEP-200 label\n\nInclude the stacktrace you see in the log\n\nIf possible, include complete steps to reproduce the problem from scratch\n\nYou can find examples of previously reported issues using this query.\n\nJenkins developers will evaluate issues and strive to offer a fix in the form of a core and/or plugin update.\nRight after the feature release there was be a special team triaging the reports.\nStarting from May 01 the issues will be triaged by plugin and core maintainers.\nSee JEP-200 Maintenance plan for more info.\n\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nApplying workarounds\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nNote the class name(s) mentioned in the JEP-200 log messages,\nand run Jenkins with the hudson.remoting.ClassFilter startup option, e.g.:\n\njava -Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName -jar jenkins.war ...\n\nThis workaround process may require several iterations, because classes whitelisted in the workaround may also\ninclude fields with types requiring whitelisting.\n\nFor plugin developers\n\nIf you are a plugin developer, please see the original JEP-200 announcement.\nThat blog post provides guidelines for testing and fixing plugin compatibility after the JEP-200 changes.\nThe presentation above also provides some information about what needs to be tested.","title":"Security hardening: Jenkins LTS 2.107.1 switches XStream / Remoting blacklists to whitelists (JEP-200)","tags":["core","security","remoting","upgrade"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-03-19T00:00:00.000Z","id":"13be0610-c1c9-59de-ab77-d3fdaf0d1add","slug":"/blog/2018/03/19/introducing-jenkins-x/","strippedHtml":"We are excited to share and invite the community to join us on a project we’ve been thinking about over the last few months called Jenkins X which extends the Jenkins ecosystem to solve the problem of automating CI/CD in the cloud.\n\nBackground\n\nThe last few years have seen massive changes in the software industry:\n\nuse of immutable container images for distributing software which are smaller, easier to work with and lead to cheaper infrastructure costs than VMs alone (approx 20% less on average)\n\nKubernetes has become the defacto way of installing, upgrading, operating and managing containers at scale on any public or hybrid cloud\n\n2018 is the year all the major public clouds, operating system vendors and PaaS offerings support Kubernetes natively\n\nwe now have an open source industry standard for distributing, installing and managing applications on any cloud!\n\nincreased adoption of microservices and cloud native applications leading to massive increase in the number of components which require CI/CD along with increased release frequency\n\nimprovements in DevOps practices coming from the community such as the State of DevOps Report which show the approach of high performing teams\n\nincreasingly many businesses now realise that to compete you have to deliver value quickly via software\n\nteams need to become high performing if the business is to succeed\n\nAll of this adds up to an increased demand for teams to have a solution for cloud native CI/CD with lots of automation!\n\nIntroducing Jenkins X\n\nJenkins X is a project which rethinks how developers should interact with CI/CD in the cloud with a focus on making development teams productive through automation, tooling and DevOps best practices.\n\nJenkins X is open source and we invite you to give us feedback and to contribute to the project.\n\nWhats the big deal?\n\nFor many years Jenkins has been capable of doing pretty much anything in the CI/CD space; the challenge has always been figuring out how to get the right plugins, configuration and code to work together in your Jenkinsfile.\n\nFor me the big deal about Jenkins X is as a developer you can type one command jx create or jx import and get your source code, git repository and application created, automatically built and deployed to Kubernetes on each Pull Request or git push with full CI/CD complete with Environments and Promotion via GitOps!\n\nDevelopers and teams don’t have to spend time figuring out how to package software as docker images, create the Kubernetes YAML to run their application on kubernetes, create Preview environments or even learn how to implement CI/CD pipelines with declarative pipeline-as-code Jenkinsfiles. It’s all automated for you out of the box! So you can focus instead on delivering value!\n\nAt the same time, Jenkins X doesn’t hide anything. If you do want to hack the Dockerfile, Jenkinsfile or Helm charts for your apps or their environments then go right ahead - those are all available versioned in git with the rest of your source code with full CI/CD on it all. GitOps FTW!\n\nJenkins X automates CI/CD and DevOps best practices for you - so you can become a faster performing team! Let your butler do more work for you!\n\nDemo\n\nHere’s a demonstration of Jenkins X running on GKE:\n\nYou can check out more demos here.\n\nJenkins X Features\n\nNow lets walk through the features of Jenkins X that we showed in the demo:\n\nAutomated CI/CD Pipelines\n\nCreate new Spring Boot projects, new quickstarts or import existing source code quickly into Jenkins X via the jx command line tool and:\n\nget a Pipeline automatically setup for you that implements best practice CI/CD features:\n\ncreates a Jenkinsfile for defining the CI/CD pipelines through declarative pipeline-as-code\n\ncreates a Dockerfile for packaging the application up as an immutable container image (for applications which generate images)\n\ncreates a Helm chart for deploying and running your application on Kubernetes\n\nensures your code is in a git repository (e.g. GitHub) with the necessary webhooks to trigger the Jenkins CI/CD pipelines on push events\n\ntriggers the first release pipeline to promote your application to your teams Staging Environment\n\nThen on each Pull Request:\n\na CI pipeline is triggered to build your application and run all the tests ensuring you keep the master branch in a ready to release state\n\nyour Pull Request is deployed to a Preview Environment (more on this later)\n\nWhen a Pull Request is merged to the master branch the Release pipeline is triggered to create a new release:\n\na new semantic version number is generated\n\nthe source code is modified for the new version (e.g. pom.xml files get their elements modified) and then tagged in git\n\nnew versioned artifacts are published including:\n\ndocker image, helm chart and any language specific artifacts (e.g. pom.xml and jar files for Java, npm packages for node or binaries for go etc)\n\nthe new version is promoted to Environments (more on this later)\n\nEnvironment Promotion via GitOps\n\nIn Jenkins X each team gets their own environments. The default environments are Staging and Production but teams can create as many environments as they wish and call them whatever they prefer.\n\nAn Environment is a place to deploy code and each Environment maps to a separate namespace in Kubernetes so they are isolated from each other and can be managed independently.\n\nWe use something called GitOps to manage environments and perform promotion. This means that:\n\nEach environment gets its own git repository to store all the environment specific configuration together with a list of all the applications and their version and configuration.\n\nPromotion of new versions of applications to an environment results in:\n\na Pull Request is created for the configuration change that triggers the CI pipeline tests on the Environment along with code review and approval\n\nonce the Pull Request is merged the release pipeline for the environment which updates the applications running in that environment by applying the helm chart metadata from the git repository.\n\nEnvironments can be configured to either promote automatically as part of a release pipeline or they can use manual promotion.\n\nThe defaults today are for the Staging environment to use automatic promotion; so all merges to master are automatically promoted to Staging. Then the Production environment is configured to use manual promotion; so you choose when do promote.\n\nHowever it is easy to change the  configuration of how many environments you need and how they are configured via the jx create environment and jx edit environment commands\n\nPreview Environments\n\nJenkins X lets you create Preview Environments for Pull Requests. Typically this happens automatically in the Pull Request Pipelines when a Pull Request is submitted but you can also perform this manually yourself via the jx preview command.\n\nThe following happens when a Preview Environment is created:\n\na new Environment of kind Preview is created along with a kubernetes namespace which show up the jx get environments command along with the jx environment and jx namespace commands so you can see which preview environments are active and switch into them to look around\n\nthe Pull Request is built as a preview docker image and chart and deployed into the preview environment\n\na comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application. So in one click your team members can try out the preview!\n\nThis is particularly useful if you are working on a web application or REST endpoint; it lets your team interact with the running Pull Request to help folks approve changes.\n\nFeedback\n\nIf the commit comments reference issues (e.g. via the text fixes #123) then Jenkins X pipelines will generate release notes like those of the jx releases.\n\nAlso, as the version associated with those new commits is promoted to Staging or Production, you will get automated comments on each fixed issue that the issue is now available for review in the corresponding environment along with a link to the release notes and a link to the app running in that environment. e.g.\n\nGetting started\n\nHopefully you now want to give Jenkins X a try. One of the great features of Jenkins is that it’s super easy to get started: install Java, download a war and run via java -jar jenkins.war.\n\nWith Jenkins X we’ve tried to follow a similarly simple experience. One complication is that Jenkins X has more moving pieces than a single JVM; it also needs a Kubernetes cluster :)\n\nFirst you need to download and install the jx command line tool so its on your PATH.\n\nThen you need to run a single command to create a new Kubernetes cluster and install Jenkins X (in this example, on GKE).\n\njx create cluster gke\n\nToday we support creating Kubernetes clusters and installing Jenkins X on Amazon (AWS), Google (GKE), Microsoft Azure, and even locally using minikube.\nWe plan to support AWS EKS soon.\n\nAt the time of this writing the easiest cloud to get started with is Google’s GKE so we recommend you start there unless you already use AWS or Azure. Amazon and Microsoft are working hard to make Kubernetes clusters as easy to create and manage as they are on GKE.\n\nAll the public clouds have a free tier so you should be able to spin up a Kubernetes cluster and install Jenkins X for a few hours then tear it down and it should be cheaper than a cup of coffee (probably free!). Just remember to tear down the cluster when you are done!\n\nHere’s a demo of creating a kuberentes cluster and installing Jenkins X :\n\nIf you really don’t want to use the public cloud, you can install Jenkins X on an existing kubernetes cluster (if it has RBAC enabled!). Or, if you can install and run minikube, then you should be able to install Jenkins X on it as well.\n\nRelationship between Jenkins and Jenkins X\n\nJenkins is the core CI/CD engine within Jenkins X. So Jenkins X is built on the massive shoulders of Jenkins and its awesome community.\n\nWe are proposing Jenkins X as a sub project within the Jenkins foundation as Jenkins X has a different focus: automating CI/CD for the cloud using Jenkins plus other open source tools like Kubernetes, Helm, Git, Nexus/Artifactory etc.\n\nOver time we are hoping Jenkins X can help drive some changes in Jenkins itself to become more cloud native, which will benefit the wider Jenkins community in addition to Jenkins X.\n\nPlease join us!\n\nSo I hope the above has given you a feel for the vision of where we are heading with Jenkins X and to show where we are today. The project is still very young, we have lots to do and we are looking for more input on where to go next and what to focus on. We’re also working on high level roadmap.\n\nTo make Jenkins X a success we’d love you to get involved, try it out and give us feedback in the community! We love contributions whether its email, chat, issues or even better Pull Requests ;).\n\nIf you’re thinking of contributing here’s some ideas:\n\nGive us feedback. What could we improve? Anything you don’t like or you think is missing?\n\nHelp improve the documentation so its more clear how to get started and use Jenkins X\n\nAdd your own quickstarts so the Jenkins X community can easily bootstrap new projects using your quickstart. If you work on an open source project is there a good quickstart we could add to Jenkins X?\n\nIf you’d like to contribute to the code then try browse the current issues.\n\nwe have marked issues help wanted or good first issue to save you hunting around too much\n\nin particular we would love help on getting Jenkins X working well on windows or the integrations with cloud services, git providers and issues trackers\n\nfor more long term goals we’ve the roadmap\n\nwe could always use more test cases and to improve test coverage!\n\nTo help get faster feedback we are using Jenkins X as the CI/CD platform to develop Jenkins X itself. For example Jenkins X creates all the releases and release notes. We’ll talk more about UpdateBot in a future blog post but you can see all the automated pull requests generated in the various Jenkins X pipelines via UpdateBot pushing version changes from upstream dependencies into downstream repositories.\n\nNote that the Jenkins community tends to use IRC for chat and the Kubernetes community uses Slack, so Jenkins X has rooms for both IRC and slack depending on which chat technology you prefer - as the Jenkins X community will be working closely with both the Jenkins community and the various Kubernetes communities (Kubernetes, Helm, Skaffold, Istio et al).\n\nOne of the most rewarding things about open source is being able to learn from others in the community. So I’m hoping that even if you are not yet ready to use Kubernetes in your day job or are not yet interested in automating your Continuous Delivery - that you’ll at least consider taking a look at Jenkins X, if for no other reason than to help you learn more about all these new ideas, technologies and approaches!\n\nThanks for listening and I’m looking forward to seeing you in the community.\n\nLinks\n\nJenkins X JEP proposal\n\nJenkins X website\n\nGetting Started Guide\n\nDemos","title":"Introducing Jenkins X: a CI/CD solution for modern cloud applications on Kubernetes","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg","srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/77b35/jstrachan.jpg 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/d4a57/jstrachan.jpg 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/68974/jstrachan.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/ef6ff/jstrachan.webp 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/8257c/jstrachan.webp 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/6766a/jstrachan.webp 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/22bfc/jstrachan.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/jstrachan.jpeg"},"blog":null,"github":"jstrachan","html":"<div class=\"paragraph\">\n<p>James is a long time open source contributor, created the Groovy programming language and Apache Camel integration framework.\nFor the past few years he&#8217;s been working on CI/CD with Kubernetes.</p>\n</div>","id":"jstrachan","irc":null,"linkedin":null,"name":"James Strachan","slug":"/blog/authors/jstrachan/","twitter":"jstrachan"}]}},{"node":{"date":"2018-03-19T00:00:00.000Z","id":"38e42feb-38b4-5fe4-a4e2-04f6086cd0bc","slug":"/blog/2018/03/19/password-audit/","strippedHtml":"Last year, news of compromised passwords being used for accounts able to distribute NPM packages made the rounds.\n\nTheir system looks similar to how publishing of plugins works in the Jenkins project:\n\nAccounts are protected by passwords chosen by users.\n\nIndividual contributors have permission to release the components they maintain.\n\nThe components they release are used by millions of developers around the world to deliver their software.\n\nIn other words, weak passwords are a problem for us just as much as for NPM, and what happened to them could happen to us.\n\nTo address this problem, the Jenkins security and infra teams have recently collaborated on a password audit.\nThe audit covered all accounts with permissions to upload plugins and components, and on accounts with other levels of privileged infrastructure access.\nWe ran brute force tools on salted password hashes of those accounts looking for \"weak\" passwords — passwords present in a set of publicly available password lists we chose for this audit.\n\nWe checked the password of every qualifying account for every unsafe password rather than trying to match them to any previous password leaks' email/password pairs.\nUsers with weak account passwords were notified via email a few weeks ago and were asked to change their password to something stronger.\n\nWe performed the same checks over the previous weekend, but this time we only checked the passwords of accounts whose passwords were deemed weak during our first check.\nWe then invalidated the password of any account whose password was still not considered \"strong\" (i.e. their password was unchanged or had been changed to another weak password).\nUsers of those accounts will need to request a password reset before signing in again.\n\nWe plan to implement further safeguards, including improving the account management app at https://accounts.jenkins.io to reject weak passwords.\nIf you’re interested in helping the security team make Jenkins more secure, let us know on the jenkinsci-dev mailing list, or request to join the security team.","title":"Jenkins community account password audit","tags":["security","community"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-03-20T00:00:00.000Z","id":"62b57ba0-b3a6-537c-a4d3-5430fc151996","slug":"/blog/2018/03/20/evolving-mission-of-jenkins/","strippedHtml":"Lately, perhaps subtle but exciting changes are starting to happen in the Jenkins project.\n\nThe past few weeks have seen the birth of two new initiatives in Jenkins:\nJenkins Essentials and\nJenkins X.  Each is\nexciting in its own right, and I encourage interested parties to take a look at\ntheir goals and missions and participate in them.  But in this post, I want to\ndiscuss why together these two dots form an important arc, which actually\nstarted in the introduction of Jenkins 2 and continued with Blue Ocean.\n\nIn Jenkins 2, we changed Jenkins so that it starts with richer functionality\nand more sensible security setup, among other things.  This was the first step\nin a new direction for Jenkins.  We changed our focus from “we’ll write plugins\nand you figure out the rest” to “we’ll write plugins, we’ll assemble them, and\nwe’ll help you be more productive.”\n\nBlue Ocean was another step on this journey.  We focused on important\ncontinuous delivery use cases in Jenkins, and aimed to provide a great\nuser-experience for those use cases.  Aside from obvious productivity boost for\nusers, it also decidedly blended together feature areas that are internally\nprovided by a whole bunch of different plugins, but users see much less seam\nbetween them.\n\nJenkins Essentials, which R Tyler Croy proposed in\nrecent weeks, is another step forward.  That project aims to take an even\nbigger responsibility in keeping people’s Jenkins instances up and running.\nLike Blue Ocean, Jenkins Essentials focuses on delivering a comprehensive\nJenkins user experience rather than a collection of unrelated plugins which\nusers have to figure out how to wire together.  It also creates an exciting\nvehicle for contributors, in which we can develop and deliver features quite\ndifferently, and more rapidly, than how we deliver them today.\n\nJenkins X, which was proposed by James Strachan a\nfew weeks after Jenkins Essentials, is the latest point on this same arc.\nJenkins X brings a different aspect to building a solution — it focuses on a\nspecific vertical area, namely Kubernetes application development, and\ndrastically simplifies the software development in that domain by bringing\ntogether Jenkins, a whole bunch of plugins, and an opinionated best practice of\nhow one should use Kubernetes.\n\nCollectively, the arc that these efforts form aims to solve the most important\nand consistent concerns for Jenkins users — ease of use, plugin complexity,\nfear of upgrade, etc.\n\nIn the early days of Jenkins, it was up to each and every Jenkins admin to find\nthe right way to assemble pieces into a solution for their organizations, but\nthis hard work remained largely private.  Now, these newer projects are\nbringing this back into the community.  They are making Jenkins more valuable\nto existing users, and more approachable and useful to a whole new set of users\nwho are not currently using Jenkins.\n\nFrom that perspective, I hope more projects like them will follow, pushing us\nbeyond “just writing plugins”, taking even bigger steps to make users\nproductive.  This is a little bit like how I watched Eclipse evolve from just a\nJava IDE to an umbrella of projects.\n\nExciting times!","title":"Evolving Mission of Jenkins","tags":["jenkins-x","evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2018-04-06T00:00:00.000Z","id":"f074f9a0-3eb3-5f51-9a32-4b65a80079ce","slug":"/blog/2018/04/06/jenkins-essentials/","strippedHtml":"Jenkins Essentials has been renamed to Jenkins Evergreen since this was written.\n\nIn his presentation at the 2017 Jenkins World Contributor Summit,\nKohsuke\nchallenged us to continue the work started with Jenkins 2 of making Jenkins\neasier to install and easier to use. \"A user should be successful with Jenkins\nin under five minutes and five clicks.\" At that same Contributor Summit, a few\nof us discussed the idea of a distribution which had \"batteries\nincluded\", which\nAndrew\nproudly named \"Jenkins Essentials.\" At the time I was certainly not as excited\nabout the project as I am now, I thought to myself \"we built a Setup Wizard in\nJenkins 2, nobody needs a Setup Wizard++.\"\n\nAs Kohsuke and I continued to discuss the idea, more and more ideas came up.\nTowards the end of 2017 the picture became much clearer: Jenkins Essentials\nwould be a comprehensive, low-maintenance distribution to help new and\nexisting users be successful with Jenkins, without needing to be Jenkins\nexperts. This will of course not replace the existing distribution of Jenkins core and\nits plugins, which allow many of us large amounts of flexibility, but rather it\nwill make Jenkins easier for users who don’t want to \"build it themselves.\"\n\nThe more I thought about it, the more excited about the idea I became: Jenkins\nEssentials could open the door to new improvements and features in Jenkins\nwhich had been left in the \"idea and design\" phase going back almost two\nyears! Really, I checked, some of the concepts adopted into the design of\nJenkins Essentials were first conceived of in early 2016!\n\nKohsuke briefly discussed the project in\nhis previous blog post\nbut in post I wanted to expand on what Jenkins Essentials is, and our\nprogress has been in its development.\n\nWhat’s in Jenkins Essentials\n\nA few months ago I prepared\nthis presentation\nfor the\nFOSDEM 2018\nJenkins Contributor Summit, which outlines the following \"pillars\" or Jenkins\nEssentials, which are also described in\nJEP-300 :\n\nAutomatically Updated Distribution\n\nAutomatic Sane Defaults\n\nConnected\n\nObvious Path to User Success\n\nAutomatically Updated Distribution\n\nIn order to provide an easier-to-use and easier-to-manage Jenkins environment,\nJenkins Essentials will be distributed as an automatically self-updating\ndistribution, containing Jenkins core and a version-locked set of plugins\nconsidered \"essential.\" Rather than attempting to mirror the existing Weekly\nand LTS release lines for core, plus some plugin version matrix, Jenkins\nEssentials will update in a manner similar to Google Chrome.\n\nThis automatically updating distribution will mean that Jenkins Essentials will\nrequire significantly less overhead to manage, receiving improvements and bug\nfixes without any user involvement. From the user perspective, their Jenkins\nwill appear to automatically improve over time.\n\nThere is really interesting work being pioneered by\nBaptiste Mathus\nwith\nJEP-302\nto ensure that these automatic upgrades can be performed safely.\n\nAutomatic Sane Defaults\n\nProviding a core along with \"essential\" plugins is a good first step to helping\nJenkins users successfully automate their CI/CD workloads, but requires\nadditional \"smoothing\" over some of the numerous options and configurations\nplugins. Jenkins Essentials will perform some amount of \"automatic\nenvironment-based self-configuration.\"\n\nFor example, clicking a \"Launch Stack\" button from the Download\npage would launch an AWS-flavored Jenkins Essentials which, out of the box\nattempts to set up AWS-specific configuration with S3 and EC2 services.\n\nConnected\n\nIn order to provide a more seamless experience for end-users, and ensure that\nJenkins project developers receive useful error and usage telemetry to drive\nfurther improvements in Jenkins, Jenkins Essentials must necessarily be viewed\nas a \" Connected\" application. This means some yet-to-be-specified number of\nserver-side applications to coordinate updates, receive and process telemetry,\nbroker 3rd-party service authentications, relay webhooks, etc.\n\nObvious Path to User Success\n\nThe final pillar in Jenkins Essentials, is to ensure that Jenkins provides an\nobvious path for a user to configure and use it successfully. This largely\nentails in-application documentation, examples, and disabling legacy\nfunctionality within the application. All with the end goal of preventing users\nfrom inadvertently choosing legacy, or poorly supported, options when\nconfiguring their CI/CD workloads.\n\nProgress thus far\n\nSuffice it to say, Jenkins Essentials is a hugely ambitious project! We have\nbeen making steady progress however, as you can see in the\njenkins-infra/evergreen\nrepository on GitHub. We have been adamantly following the\nJenkins Enhancement Proposal\nprocess, and have been making sure our designs and implementations are clear as\nwe build them. Thus far we’ve written designs and implemented:\n\nJEP-300: Jenkins Essentials\n\nJEP-301: Evergreen packaging for Jenkins Essentials\n\nJEP-302: Evergreen snapshotting data safety system\n\nJEP-303: Evergreen Client Registration and Authentication\n\nJEP-304: Essentials Client Error Telemetry Logging\n\nUnfortunately we don’t yet have the first parts of the Automatically Updated Distribution working,\nwhich means you cannot download Jenkins Essentials today and get started with\nit. We’re still building the Jenkins-side and server-side components necessary\nto make the full feedback loop operate, without which we would not be able to\nsafely deliver new upgrades to Jenkins Essentials installations.\n\nIf you’re interested in getting involved, you can check out our\nGitter channel\nor our\nJira issues board.\n\nJenkins Essentials is just one major initiative going on in the Jenkins project\nthis year, so I hope you’re as excited as I am for the future of Jenkins!","title":"Jenkins Essentials: five minutes, five clicks","tags":["evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2018-04-09T00:00:00.000Z","id":"3494cf73-5468-5673-9163-ca20378f0110","slug":"/blog/2018/04/09/whats-in-declarative/","strippedHtml":"Last week we released the latest version of Declarative Pipelines, version\n1.2.8. With that out, we thought now would be a good time to introduce you to\nthe new features and options that have been added to Declarative since the\nbeginning of 2018. These are all available now in the Update Center, with\nversion 1.2.8.\n\nDeclarative Directive Generator\n\nThis is something we’re really happy about - if you go to the \"Pipeline Syntax\"\nlink from your Pipeline’s page in Jenkins, you’ll see a couple new links on the\nleft, including \"Declarative Directive Generator\". The Directive Generator is\nmuch like the Snippet Generator that’s been in Pipeline for a couple years now,\nbut where the Snippet Generator is just for filling out a form for a step and\ngenerating the Pipeline code that configuration maps to, the Directive\nGenerator is built to help you write your Declarative Pipeline directives, like\nagent, options, stage, and more!\n\nThis is the first release to include the Directive Generator, and it’s\ndefinitely going to see more polish going forward, but we think it should be\nquite helpful for you already. We’ll be putting up another blog post looking at\nthe Directive Generator in more detail in the near future.\n\nNew when conditions\n\nWe’ve added a number of new when conditions, providing you more control over\nwhether your stages get executed.\n\nequals - Compares two values - strings, variables, numbers, booleans - and\nreturns true if they’re equal. I’m honestly not sure how we missed adding\nthis earlier! You can do \"not equals\" comparisons using the not { equals …​\n} combination too.\n\nchangeRequest - In its simplest form, this will return true if this\nPipeline is building a change request, such as a GitHub pull request. You can\nalso do more detailed checks against the change request, allowing you to ask\n\"is this a change request against the master branch?\" and much more.\n\nbuildingTag - A simple condition that just checks if the Pipeline is\nrunning against a tag in SCM, rather than a branch or a specific commit\nreference.\n\ntag - A more detailed equivalent of buildingTag, allowing you to check\nagainst the tag name itself.\n\nIn addition, we’ve added a new option to when : beforeAgent. This allows you\nto specify that the when conditions should be evaluated before entering the\nagent for the stage, rather than the normal behavior of evaluating when\nconditions after entering the agent. When beforeAgent true is specified,\nyou will not have access to the agent’s workspace, but you can avoid\nunnecessary SCM checkouts and waiting for a valid `agent to be available. This\ncan speed up your Pipeline’s execution in some cases.\n\nNew post conditions\n\nThe changed condition has always been a bit confusing, and to be\nhonest, it wasn’t our best work. changed will fire any time the current run’s\nstatus is different than the previous run’s status - whether the current run is\nhealthier than the previous one, or the other way around. That’s…​not actually\nvery useful. So now we’ve added two new post conditions that should provide\nyou with a lot more value than changed has.\n\nfixed - This will check to see if the current run is successful, and if the\nprevious run was either failed or unstable.\n\nregression - This will check to see if the current run’s status is worse\nthan the previous run’s status. So if the previous run was successful, and\nthe current run is unstable, this will fire and its block of steps will\nexecute. It will also run if the previous run was unstable, and the current\nrun is a failure, etc.\n\nNew options\n\nThe options directive in Declarative can contain a number of different kinds\nof configuration: traditional Jenkins job properties, like buildDiscarder,\nwrapper steps to execute the entire Pipeline within, like timeout, and\nDeclarative-specific options that can switch from some default behaviors of\nDeclarative execution. We’ve added two new Declarative-specific options in the\nlast few releases.\n\ncheckoutToSubdirectory - Allows you to override the location that the\nautomatic SCM checkout will use. Using checkoutToSubdirectory(\"foo\"), your\nPipeline will checkout your repository to\"$WORKSPACE/foo\", rather than the\ndefault of\"$WORKSPACE\".\n\nnewContainerPerStage - If you’re using a top-level docker or dockerfile\nagent, and want to ensure that each of your stages run in a fresh container\nof the same image, you can use this option. Any stage without its own\nagent specified will run in a new container using the image you’ve\nspecified or built, on the same computer and with access to the same\nworkspace.\n\nStage options\n\nSometimes, you may only want to disable automatic checkout of your repository,\nusing the skipDefaultCheckout(true) option, for one specific stage in your\nPipeline. Or perhaps you want to have a timeout that covers an entire\nstage, including time spent waiting for a valid agent, post condition\nexecution, or the new input directive for stages (see further down for more\ndetails on that!). To make those things possible, we’ve added a new options\ndirection to stage. You can use a subset of the top-level options content\nin a stage’s `options - wrapper steps, and Declarative-specific options that\nare marked as legal in a stage.\n\nInput\n\nYou’ve always been able to run the input step inside a stage’s `steps\nblock, but we’ve found that approach can lose out on some of the value that the\ninput step provides.\n\nTo help with that, we’ve added a new input directive\nto stage, with the same parameters as the input step. When you use the\nstage input directive rather than using the step directly, any parameters\nyou’ve specified for the input will be made available in the stage’s\nenvironment, meaning you can reference parameters from the `input in when\nconditions, or in environment variables.\n\n// Declarative //\npipeline {\n    agent none\n    stages {\n        stage('Example') {\n            input {\n                message \"Should we continue?\"\n                ok \"Yes, we should.\"\n                submitter \"alice,bob\"\n                parameters {\n                    string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')\n                }\n            }\n            agent any\n            steps {\n                echo \"Hello, ${PERSON}, nice to meet you.\"\n            }\n        }\n    }\n}\n// Script //\n\nAlso, the input directive is evaluated before you enter any agent specified\non this stage, so if you are using a top-level agent none and each stage\nhas its own agent specified, you can avoid consuming an executor while\nwaiting for the input to be submitted.\n\nLastly, you can use timeout in the stage options, as\nmentioned above, to time-out the input if too much time has passed without a\nresponse.\n\nI hope you find these new features and options for Declarative Pipelines\nhelpful, and I look forward to the rest of 2018 as we continue to invest and\nimprove in Jenkins Pipeline!","title":"The new things arriving in Declarative Pipeline!","tags":["pipeline","declarative"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2018-04-10T00:00:00.000Z","id":"de012828-154d-5d83-8b81-e1199eaa8685","slug":"/blog/2018/04/10/opinionated-cd-jenkins-x/","strippedHtml":"I\nrecently wrote\nabout how all the cloud platforms are all in Kubernetes and so are developers.\nIt is an exciting time, but the problem for many is that this is\na huge blank sheet of paper for how to build and deploy applications.\nA white space, a void, a limitless canvas of possibilities.\nInsert metaphors here.\n\nThe problem, as you may guess, is that few people really like or are able to start with a blank canvas.\nI know I prefer to start with something working and iterate towards a solution,\nor be given some rails to stay on (again with the metaphors).\n\nThat’s where the Jenkins X project comes in.\nJenkins X is a Kubernetes-native continuous integration and continuous delivery platform\nfor developing cloud native applications that was recently introduced as a\nJenkins Enhancement Proposal,\nsponsored by James Strachan.\n\nThere is a lot to take in but at it’s heart,\nthis is an open source opinionated way to do continuous delivery with Kubernetes,\nnatively, without necessarily having to learn all the things I talked about in my last blog post.\nI shall attempt to explain what this is all about and why it matters to developers.\nAs someone said on the jenkins-dev mailing list\n“We have the two glued together with baling wire and twine” -\nJenkins X aims to simplify how to work with continuous delivery and Kubernetes.\n\nFirst and most importantly, let’s see the logo:\n\nYou can see the nautical theme leaking through (and Kubernetes).\nWhilst it is called Jenkins X, it is about quite a lot more than Jenkins.\n\nJenkins X makes decisions for you\n\nJenkins X presents itself to you initially as a handy sleek command line\n(a native binary you can install called jx - the debate is on as to how pronounce it).\nLet’s take a tour (sail?):\n\njx import my-app\n\nIf you have an existing project, this will detect what type of project it is, build a pipeline for you (and a bunch of Kubernetes things, like Helm Charts), add it to your project and set it up in GitHub, WebHooks and all, build the project (run the pipeline) and deploy a version to a “staging” environment.\n\nIf it looks ok, you can promote it to production:\n\njx promote --env production --version 1.0.1 my-app\n\nIf something went wrong in production, you can roll back an app to any version (the version numbers are made for you):\n\njx promote --env production --version 1.0.0 my-app\n> jx get apps # list versions\n\nAn environment is a well-established concept for web developers using\ncontinuous delivery: out of the box Jenkins X makes three of them for you\n(dev, staging and production), but you can make as many as you like.\nEnvironments have rules around how things are promoted into them\n(and they also have their own extensible pipelines,\nbut you can just use them as-is to start).\n\nYou can also create a Spring Boot microservice app:\n\njx create spring\n\nAnswer a few questions and it will set everything up for you.\n\nAny changes you make to your app automatically are built,\nand if the build looks good, they go through to the staging environment.\nWebHooks are setup for you (if you are using GitHub) to smooth this over.\n\nFor those looking at starting from pre-made apps, there are \"quickstarts\":\n\njx create quickstart\n\nThey are based on a growing set of starter apps, in a variety of languages and tech stacks.\n\nReview apps for your changes: Each pull request is built/tested,\nand a “review app” is made available in a temporary environment.\nThat means each proposed change, before it goes to the default branch (master),\nhas an environment made (temporary) that it can be tried out in.\nIn GitHub, this shows up as a comment in the pull request:\n\nProject type detection\n\nAs you can see, so far there is no editing or manual creation of pipelines,\nor scripting or setup, just importing or creating your app and go.\nThis is powered by\nDraft “packs”\n(a handy project that came out of Azure).\n What you end up with is a Jenkinsfile in your project repository.\n You may want to edit it one day, or you may be happy with it as is!\n Jenkins is famous for being un-opinionated in what you do,\n but Jenkins X has strong opinions (but you can extend and customise).\n\nimage::/images/jenkins-x/draft-logo.png[Draft Logo, width=300]\n\nDeploying or promoting to environments\n\nDeploying happens via pipelines behind the scenes -\nwhen a change is pushed, or a version promoted.\nYou don’t need to directly interact with Kubernetes if you don’t need to.\nA tool called Helm does the heavy lifting:\nHelm is used to package and perform installations and upgrade for your apps.\n\nThere is a little more magic going on here with environments, which you don’t see at first.\nEach environment, for a team, is represented by a Git repository behind the scenes.\nConfiguration as code is a well-established best practice these days,\nso why not use it to track deployments and initiate deployments.\nI also mentioned in my previous post how declarative Kubernetes is:\nit is perfect for keeping all config in a repository, of the desired system state.\n\nEach promotion is actually a pull request to a per-environment repository.\nThis repository is made and managed for you (and kept outside of the\nmain application code repository), you don’t have to look at it,\nbut you can extend things there should you need to.\nSpecific environment repositories may have different access rules,\nor be controlled by a different team (perhaps even deploy to a different cluster).\nSome have coined the term for this as “GitOps.”\nI first came across this concept on a\nWeaveWorks blog.\n\nI’ll try and explain this one with a diagram:\n\nThe pipeline is actually split in the middle.\nOn the left is the more familiar continuous integration pipeline.\nThis works on pull requests, pre-release version of things\nand is all about testing(automated and manual review).\nThe source of truth for this is the configuration in the\napplications repository: branches, pull requests and so on.\n\nThe right-hand side is the continuous delivery pipeline.\nThis kicks in when the application is ready to be updated with a new release.\nThis is the “GitOps” repo behind the scenes that controls the state of things in Kubernetes.\nA promotion on this side is a pull request, and then a merge,\nfrom the staging repository to the production repository.\n\nInstalling Jenkins X\n\nThe jx command line has a jx install command that installs it into a Kubernetes cluster.\n\nThe best experience initially is using Google’s excellent GKE service:\n\njx create cluster gke\n\nThis will ask a few questions, and go and set it all up for you in a\ncluster set aside for Jenkins X (recommended).\nJenkins X runs entirely as services on top of a Kubernetes cluster.\n\njx install\n\nIs designed to work with a Kubernetes cluster (if it already exists,\nrecommendation is to have a cluster put aside for Jenkins X if possible).\nAmazon EKS support is coming (mostly it is around testing),\nthat service is in beta/early access so it is still a work in progress,\nas is Microsoft Azures excellent AKS service.\n\nSo where is Jenkins?\n\nGood question, thanks for asking. Well, it is behind the scenes.\nAs you have seen, there was no direct interaction with Jenkins,\nbut it is there, running the pipelines for continuous integration and\ncontinuous delivery of the respective repositories, and orchestrating things with Kubernetes.\n\nIf you run jx get pipelines you can see URLs to the various pipelines\nthat have been setup for you are part of interacting with Jenkins X.\n\nBy the way,\nJames Strachan has written an extensive blog on jenkins.io\nthat really explores the Jenkins X project in-depth.\nOnce you finish reading this blog, take a stroll on over there and read James'.\nHe also provides several ways you can get involved in the project.\n\nWhat else can I do with the command line?\n\nLots, the jx command line has built in help:\n\njx open\n\nopen apps, services or pipelines in your browser\n\njx activity\n\nexplains how things got to where they are, a history\n\njx get environments\n\nlist environments\n\njx get apps\n\nshow the state of applications, what versions are in what environments.\n\nWhat’s next\n\nThere is a whole lot more to this, and lots more moving parts and services\nthat are set up for you that are very useful, but it is best to head over\nto jenkins-x.io and have a look.\n\nThis project is obviously in early stages (it is stll a Draft JEP after all) and there is lots happening.\nCheck out the Jenkins X community\nif you want to chat on slack, IRC, issues or email.\nAlso, read the\nJenkins Enhancement Proposal doc.","title":"Opinionated Kubernetes and Jenkins X","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2018-04-11T00:00:00.000Z","id":"ed222945-0b4b-5227-9e90-64450f40170f","slug":"/blog/2018/04/11/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.116 and 2.107.2, that fix two security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-04-13T00:00:00.000Z","id":"31f8965a-bc62-54ab-a155-4d858e063b0e","slug":"/blog/2018/04/13/jenkins-x-23-days-later/","strippedHtml":"Its been 24 days since we\nannounced Jenkins X,\na CI/CD solution for modern cloud applications on Kubernetes.\nI’m truly blown away by the response and feedback from the community - thank you!\n\nWe’ve also had lots of folks report they’ve successfully used Jenkins X\non a number of clouds including GKE, AWS and AKS along with on-premises clusters which is great to hear!\n\nHere’s a brief overview of the changes in the last 24 days from the\nRoadmap :\n\nwe now fully support GitHub and GitHub enterprise. BitBucket cloud and gitea is almost there too.\nHopefully BitBucketServer and Gitlab are not too far away either. For more detail see\nsupporting different git servers\n\nFor issue tracking we support GitHub, GitHub Enterprise and JIRA. For more detail see\nsupporting issue trackers\n\nGradle support is now available from jx create spring\nor by importing gradle apps\n\nGo, Node and Rust build packs are now available with more planned\n\nNew addons for anchore and kubeless\n\nAlso we’ve made it a little bit easier to keep your jx binary up to date continuously. Just type one of the following:\n\njx version will prompt you if there is a new version available\nand if prompted, it will upgrade itself\n\njx upgrade cli will upgrade the jx binary if its available or\njx upgrade platform for the platform\n\nFor more detail on the changes over the last 24 days with metrics please see the\nchangelog generated by Jenkins X\n\nWe’d love to hear your feedback what you think of\nJenkins X and the\nRoadmap - please\njoin the community.\n\nLinks\n\nJenkins X website\n\nDemos\n\nJenkins X JEP proposal","title":"Jenkins X making awesome progress after 24 days","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg","srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/77b35/jstrachan.jpg 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/d4a57/jstrachan.jpg 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/68974/jstrachan.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/ef6ff/jstrachan.webp 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/8257c/jstrachan.webp 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/6766a/jstrachan.webp 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/22bfc/jstrachan.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/jstrachan.jpeg"},"blog":null,"github":"jstrachan","html":"<div class=\"paragraph\">\n<p>James is a long time open source contributor, created the Groovy programming language and Apache Camel integration framework.\nFor the past few years he&#8217;s been working on CI/CD with Kubernetes.</p>\n</div>","id":"jstrachan","irc":null,"linkedin":null,"name":"James Strachan","slug":"/blog/authors/jstrachan/","twitter":"jstrachan"}]}},{"node":{"date":"2018-04-16T00:00:00.000Z","id":"5bccde5f-c4ec-5989-8dc2-3f6097a019eb","slug":"/blog/2018/04/16/jenkins-x-explained-part1/","strippedHtml":"Jenkins X is an opinionated platform for providing CI / CD on top of\nKubernetes.\nWe’ve chosen a set of core applications that we install and wire together so things work out-of-the-box, providing a\nturn key experience. This blog aims to build on previous introductions to Jenkins X and provide a deeper\ninsight to what you get when you install Jenkins X.\n\nSo what happens? After downloading the jx CLI you will now be able to create clusters with public cloud providers\nor install onto an existing Kubernetes cluster.\n\nThis command will create a cluster on your cloud provider of choice.\n\njx create cluster\n\nAlternatively you can bring your own Kubernetes cluster and install Jenkins X on it:\n\njx install\n\nThat said, we’ve found that creating a new cluster on a public cloud such as GKE\nis a lot way easier to start as we can be sure of the state of the cluster.\nFor example we know that storage, networking and loadbalancers will be working as expected.\nCreating a cluster on GKE takes only a few minutes so it’s a great way to try things out as well as run your\nenterprise workloads.\n\nFor now lets assume we are using GKE. When jx create cluster has finished you will see some output in the\nterminal that also includes the default admin password to use when logging into the core applications below.\nThere is a flag --default-admin-password you can use to set this password yourself.\n\nAccessing applications\n\nWe automatically install an Nginx ingress controller running with an external loadbalancer pointing at it’s\nKubernetes service. We also generate all the Kubernetes Ingress rules using a golang library called\n\" exposecontroller\".\nThis runs as a Kubernetes Job triggered by a\nHelm hook once any application is installed to the cluster.\n\nUsing \"exposecontroller\" means we can control all the ingress rules for an environment using a single set of\nconfigurations, rather than each application needing to know how to expose the kubernetes service to the outside world.\nThis also means we can easily switch between HTTP and HTTPS plus support intregration with projects like\ncert-manager for auto generation of signed TLS certificates.\n\nEnvironments\n\nOne important point to make is Jenkins X aims to use terminology that developers are familiar with. That’s not\nto say we are changing Kubernetes fundamentals, it’s more that if you don’t know Kubernetes concepts then we aim\nto help you still adopt the cloud technology and pull back the curtain as you gain confidence and experience.\nTo that point, a core part of Jenkins X are \"environments\". An environment can have one or more applications running\nin it. In Kubernetes term an \"environment\" maps to the concept of a \"namespace\" in code.\n\nThe installation by default created three environments, this is customisable but by default we have a \"dev\", a \"staging\"\nand a \"production environment\". To list, select, or switch between these environments run:\n\njx env\n\nJenkins X core applications\n\nIn the \"dev\" environment we have installed a number of core applications we believe are required at a minimum\nto start folks off with CI/CD on Kubernetes. We can easily add to these core apps using Jenkins X addons but\nfor now lets focus on the core apps. Jenkins X comes with configuration that wires these services together,\nmeaning everything works together straight away. This dramatically reduces the time to get started with Kubernetes\nas all the passwords, environment variables and config files are all setup up to work with each other.\n\nJenkins — provides both CI and CD automation. There is an effort to decompose Jenkins over time to\nbecome more cloud native and make use of Kubernetes concepts around CRDs, storage and scaling for example.\n\nNexus — acts as a dependency cache for Nodejs and Java applications to dramatically improve build\ntimes. After an initial build of a SpringBoot application the build time is reduced from 12 mins to 4. We\nhave not yet but intend to demonstrate swapping this with Artifactory soon.\n\nDocker Registry — an in cluster docker registry where our pipelines push application images, we will\nsoon switch to using native cloud provider registries such as Google Container Registry, Azure Container\nRegistry or Amazon Elastic Container Registry (ECR) for example.\n\nChartmuseum — a registry for publishing Helm charts\n\nMonocular — a UI used for discovering and running Helm charts\n\nHelm\n\nWe learned a lot in our early days with fabric8 on Kubernetes and there were some projects from the ecosystem\nthat either weren’t around or (at the time) didn’t work with OpenShift, therefore we were restricted when\nmaking some design decisions. A couple of years on and now with Jenkins X we were able to look at other OSS\nprojects that have been flourishing, so I was very happy to start looking at Helm.\nHelm is a package manager for Kubernetes and allows easy installation and upgrades of applications.\n\nIt was pretty clear that for Jenkins to evolve and include deployments to the cloud we should embrace Helm\nand provide an opinionated experience that helps teams and developers. The core applications mentioned above\nmeans Jenkins X provides an out of the box integrated CI/CD solution for Helm.\n\nWe know that helm has limitations but with the work on\nHelm 3, the focus of the Kubernetes\nsig-apps group, the Kubernetes community and investment we see from key organisations such as Microsoft, we feel Helm\nis currently the best way to install and upgrade applications on Kubernetes.\n\nGitOps\n\nWe mentioned earlier that we setup three environments by default. What this means is for the staging and production\nenvironments we created:\n\nKubernetes namespace\n\nAn environment resource ( CustomResourceDefinition)\nin the dev environment which includes details of how applications are promoted to it and includes various team\nsettings.\n\nA git repository that we store what applications and their versions should be present in that environment.\nThese are stored in a Helm requirements.yaml file\n\nA Jenkins Pipeline job: explained in more detail below\n\nCI/CD for Environments\n\nHaving a Jenkins Pipeline Job for each environment means that Pull Requests to the git repo trigger a CI\njob.  For now that job performs basic validation but in the future will include ‘gates’ to ensure a change to that\nenvironment has passed expected checks such as QA tasks, gain enough approvals from the correct people, etc -\nYES CI for environments!\n\nOnce CI checks have passed the new application or version change can be merged. Only users that have karma\ncan merge the Pull Request and therefore we get RBAC plus traceability for our environment deployments.\n\nThis means every application manifest, their version and configuration including storage requirements, resource\nneeds and secrets for your environments are stored in Git repositories. Given a disaster recovery scenario this\nis exactly what you want.\n\nDid I just say secrets in Git? Yes! We will be providing a nicer experience to helps folks get set up but we\nourselves encrypt our secrets and  store them in Git, then decrypt them when we come to install and upgrade.\n\nHere’s our Git repo https://github.com/jenkins-x/cloud-environments/blob/a1edcc6/env-jx-infra/secrets.yaml.\n\nWe do all this with the help of a Helm wrapper called helm secrets.\nI’m working on a followup blog post with examples, better explanations and how to guides + add better integration\nwith JX in the coming weeks.\n\nFancy getting involved?\n\nWe mainly hangout in the jenkins-x Kubernetes slack channels and for tips on\nbeing more involved with Jenkins X take a look at our contributing docs\n\nIf you’ve not already seen it here’s a video showing the create cluster explained in this blog.","title":"Jenkins X Explained Part 1 - an integrated CI/CD solution for Kubernetes","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8e8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg","srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/77b35/jrawlings.jpg 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/d4a57/jrawlings.jpg 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/68974/jrawlings.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/ef6ff/jrawlings.webp 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/8257c/jrawlings.webp 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/6766a/jrawlings.webp 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/22bfc/jrawlings.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/jrawlings.jpeg"},"blog":null,"github":"rawlingsj","html":"<div class=\"paragraph\">\n<p>James has a passion for continuous delivery and software automation in general.  Continually looking at\nways to help improve developers experience for the cloud.  James works on the OSS project <a href=\"https://jenkins-x.io/\">Jenkins X</a></p>\n</div>","id":"jrawlings","irc":null,"linkedin":null,"name":"James Rawlings","slug":"/blog/authors/jrawlings/","twitter":"jdrawlings"}]}},{"node":{"date":"2018-04-18T00:00:00.000Z","id":"36cc7fb2-3a58-5fd5-82ce-aa9662b5820b","slug":"/blog/2018/04/18/blueocean-1-5-0/","strippedHtml":"Hello, I am Jenn, the new Product Manager for Blue Ocean and Jenkins\nPipeline at CloudBees. I am based out of the Seattle area and am excited to be\nworking on Jenkins. :D We released version 1.5.0 of the Blue Ocean plugin late last week. If you’re\nusing Blue Ocean, you’ll want to grab this update since it includes many\nimprovements and bug fixes!\n\nNew Features\n\nBlue Ocean now includes a user interface update to show the downstream jobs\nlaunched with the 'build' step\n(link: JENKINS-38339)\n\nWith Blue Ocean 1.5.0, users can now Reorder Steps in the Blue Ocean Pipeline\nEditor simply by dragging and dropping steps to reorder them in the list of\nsteps.\n( JENKINS-38323)\n\nThe \"Artifacts\" tab also now supports pagination, which allows developers to\npaginate through the Artifacts tab. Previously, this list\nwas cut off at 100 entries.\n( JENKINS-43588)\n\nImprovements\n\nWe were able to include two performance improvements in 1.5.0 which reduce the\nDashboard loading time in Blue Ocean:\n\nJENKINS-44995\n\nJENKINS-48868\n\nSupport for viewing output for failed runs with no stages is also included in\nthis release. For developers who have no stages/steps defined in their\npipelines, they can now see the full log output for failed runs. This update\nhelps with Pipeline debugging in Jenkins.\n( JENKINS-48074)\n\nFurther improving the log output for Pipeline Runs, 1.5.0 also improves viewing\nof long log output lines with wrapping.  Previously, a single, long line of\noutput in the log wouldn’t be fully visible in the log window.\n( JENKINS-49036)\n\nFixes\n\nOne notable bug fix we addressed in this release was that input steps in\npost directives would not properly prompt for input. By fixing\nJENKINS-49297\nusers of Declarative Pipeline with Blue Ocean can include input steps in\ntheir post directives.\n\nThe full detailed change log can be viewed on the\nBlue Ocean plugin page\n\nUpdate Your Plugin\n\nPlugin updates in Jenkins are available in the Plugin Manager Update Center. This page includes instructions for using the UI and CLI to update your plugins: https://jenkins.io/doc/book/managing/plugins/.\n\nIf you are using the Blue Ocean UI, click Administration in the page’s header to open Plugin Manager.\n\nInstalling the primary Blue Ocean plugin will update its dependencies as well.\n\nProviding Feedback\n\nChat with us at Gitter: https://gitter.im/jenkinsci/blueocean-plugin\n\nReport issues at https://issues.jenkins.io/","title":"Faster sailing on Blue Ocean 1.5.0","tags":["blueocean"],"authors":[{"avatar":null,"blog":null,"github":"jennbriden","html":"<div class=\"paragraph\">\n<p>Jenn Briden is located in the Seattle area and is the Product Manager for the Blue Ocean plugin and the Jenkins pipeline. She has previously worked at Microsoft and ExtraHop Networks. Jenn likes drinking coffee but hasn&#8217;t ever seen a bigfoot.</p>\n</div>","id":"jennbriden","irc":null,"linkedin":null,"name":"Jenn Briden","slug":"/blog/authors/jennbriden/","twitter":"jennbriden"}]}},{"node":{"date":"2018-04-25T00:00:00.000Z","id":"e34fdb6b-09c7-5772-a251-10cec0ccef26","slug":"/blog/2018/04/25/configuring-jenkins-pipeline-with-yaml-file/","strippedHtml":"A few years ago our CTO wrote about building a\nContinuous Integration server for Ruby On Rails using Jenkins and docker.\nThe solution has been our CI pipeline for the past years until we recently decided to\nmake an upgrade. Why?\n\nJenkins version was way out of date and it was getting difficult to\nupgrade\n\nWolox has grown significantly over the past years\nand we’ve been experiencing scaling issues\n\nVery few people knew how to fix any issues with the server\n\nConfiguring jobs was not an easy task and that made our project\nkickoff process slower\n\nMaking changes to the commands that each job runs was not easy and not\nmany people had permissions to do so. Wolox has a wide range of\nprojects, with a wide variety of languages which made this problem even\nbigger.\n\nTaking into account these problems, we started digging into the newest\nversion of Jenkins to see how we could improve our CI. We needed to\nbuild a new CI that could, at least, address the following:\n\nProjects must be built using Docker. Our projects depend on one or\nmultiple docker images to run (app, database, redis, etc)\n\nEasy to configure and replicate if necessary\n\nEasy to add a new project\n\nEasy to change the building steps. Everyone working on the project\nshould be able to change if they want to run npm install or yarn\ninstall.\n\nInstalling Jenkins and Docker\n\nInstalling Jenkins is straightforward. You can visit\nJenkins Installation page and choose the\noption that best suits your needs.\n\nHere are the steps we followed to install Jenkins in AWS:\n\nsudo rpm — import https://pkg.jenkins.io/debian/jenkins.io.key\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\nsudo yum install java-1.8.0 -y\nsudo yum remove java-1.7.0-openjdk -y\nsudo yum install jenkins -y\nsudo yum update -y\nsudo yum install -y docker\n\nAutomatically adding projects from Github\n\nAdding projects automatically from Github can be achieved using the\nGitHub Branch Source Plugin.\nIt allows Jenkins to scan a GitHub organization\nfor projects that match certain rules and add them to Jenkins\nautomatically. The only constraint that all branches must meet in order\nto be added is that they contain a Jenkinsfile that explains how to\nbuild the project.\n\nEasy to change configuration\n\nNot so easy to change configuration\n\nOne of the biggest pains we had with our previous Jenkins was the\ndifficulty of changing the steps necessary to build the project. If you\nlooked at a project’s build steps, you would find something like this:\n\n#!/bin/bash +x\nset -e\n\n# Remove unnecessary files\necho -e \"\\033[34mRemoving unnecessary files...\\033[0m\"\nrm -f log/*.log &> /dev/null || true &> /dev/null\nrm -rf public/uploads/* &> /dev/null || true &> /dev/null\n\n# Build Project\necho -e \"\\033[34mBuilding Project...\\033[0m\"\ndocker-compose --project-name=${JOB_NAME} build\n\n# Prepare test database\nCOMMAND=\"bundle exec rake db:drop db:create db:migrate\"\necho -e \"\\033[34mRunning: $COMMAND\\033[0m\"\ndocker-compose --project-name=${JOB_NAME} run  \\\n\t-e RAILS_ENV=test web $COMMAND\n\n# Run tests\nCOMMAND=\"bundle exec rspec spec\"\necho -e \"\\033[34mRunning: $COMMAND\\033[0m\"\nunbuffer docker-compose --project-name=${JOB_NAME} run web $COMMAND\n\n# Run rubocop lint\nCOMMAND=\"bundle exec rubocop app spec -R --format simple\"\necho -e \"\\033[34mRunning: $COMMAND\\033[0m\"\nunbuffer docker-compose --project-name=${JOB_NAME} run -e RUBYOPT=\"-Ku\" web $COMMAND\n\nAnd some post build steps that cleaned up the docker:\n\n#!/bin/bash +x\ndocker-compose --project-name=${JOB_NAME} stop &> /dev/null || true &> /dev/null\ndocker-compose --project-name=${JOB_NAME} rm --force &> /dev/null || true &> /dev/null\ndocker stop `docker ps -a -q -f status=exited` &> /dev/null || true &> /dev/null\ndocker rm -v `docker ps -a -q -f status=exited` &> /dev/null || true &> /dev/null\ndocker rmi `docker images --filter 'dangling=true' -q --no-trunc` &> /dev/null || true &> /dev/null\n\nAlthough these commands are not complex, changing any of them required\nsomeone with permissions to modify the job and an understanding ofwhat\nneeded to be done.\n\nJenkinsfile to the rescue…​ or not\n\nWith the current Jenkins version, we can take advantage of\nJenkins Pipeline and model our build\nflow in a file. This file is checked into the repository and, therefore,\nanyone with access to it can change the build steps. Yay!\n\nJenkins Pipeline even has support for:\n\nDocker and\nmultiple\nimages can be used for a build!\n\nSetting environment variables with withEnv and many other built -in\nfunctions that can be found\nhere.\n\nThis makes a perfect case for Wolox. We can have\nour build configuration in a file that’s checked into the repository and\ncan be changed by anyone with write access to it. However, a Jenkinsfile\nfor a simple rails project would look something like this:\n\n# sample Jenkinsfile. Might not compile\nnode {\n    checkout scm\n    withEnv(['MYTOOL_HOME=/usr/local/mytool']) {\n        docker.image(\"postgres:9.2\").withRun() { db ->\n            withEnv(['DB_USERNAME=postgres', 'DB_PASSWORD=', \"DB_HOST=db\", \"DB_PORT=5432\"]) {\n                docker.image(\"redis:X\").withRun() { redis ->\n                    withEnv([\"REDIS_URL=redis://redis\"]) {\n                        docker.build(imageName, \"--file .woloxci/Dockerfile .\").inside(\"--link ${db.id}:postgres --link ${redis.id}:redis\") {\n                            sh \"rake db:create\"\n                            sh \"rake db:migrate\"\n                            sh \"bundle exec rspec spec\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nThis file is not only difficult to read, but also difficult to change.\nIt’s quite easy to break things if you’re not familiar with Groovy and\neven easier if you know nothing about how Jenkins’ pipeline works.\nChanging or adding a new Docker image isn’t straightforward and might\nlead to confusion.\n\nConfiguring Jenkins Pipeline via YAML\n\nPersonally, I’ve always envied simple configuration files for CIs and\nthis time it was our chance to build CI that could be configured using a\nYAML file. After some analysis we concluded that a YAML like this one\nwould suffice:\n\nconfig:\n  dockerfile: .woloxci/Dockerfile\n  project_name: some-project-name\n\nservices:\n  - postgresql\n  - redis\n\nsteps:\n  analysis:\n    - bundle exec rubocop -R app spec --format simple\n    - bundle exec rubycritic --path ./analysis --minimum-score 80 --no-browser\n  setup_db:\n    - bundle exec rails db:create\n    - bundle exec rails db:schema:load\n  test:\n    - bundle exec rspec\n  security:\n    - bundle exec brakeman --exit-on-error\n  audit:\n    - bundle audit check --update\n\n\nenvironment:\n  RAILS_ENV: test\n  GIT_COMMITTER_NAME: a\n  GIT_COMMITTER_EMAIL: b\n  LANG: C.UTF-8\n\nIt outlines some basic configuration for the project, environment\nvariables that need to be present during the run, dependentservices, and\nour build steps.\n\nJenkinsfile + Shared Libraries = WoloxCI\n\nAfter investigating for a while about Jenkins and the pipeline, we found\nthat we could extend it with\nshared libraries.\nShared libraries are written in groovy and can be imported\ninto the pipeline and executed when necessary.\n\nIf you look carefully at this Jenkinsfile,\nwe see that the code is a chain of methods calls that receive a\nclosure, where we execute another method passing a new closure to it.\n\n# sample Jenkinsfile. Might not compile\nnode {\n    checkout scm\n    withEnv(['MYTOOL_HOME=/usr/local/mytool']) {\n        docker.image(\"postgres:9.2\").withRun() { db ->\n            withEnv(['DB_USERNAME=postgres', 'DB_PASSWORD=', \"DB_HOST=db\", \"DB_PORT=5432\"]) {\n                docker.image(\"redis:X\").withRun() { redis ->\n                    withEnv([\"REDIS_URL=redis://redis\"]) {\n                        docker.build(imageName, \"--file .woloxci/Dockerfile .\").inside(\"--link ${db.id}:postgres --link ${redis.id}:redis\") {\n                            sh \"rake db:create\"\n                            sh \"rake db:migrate\"\n                            sh \"bundle exec rspec spec\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nGroovy is flexible enough to allow this same declarative code to be\ncreated at runtime, making our dream of using a YAML to configure our\njob come true!\n\nIntroducing Wolox-CI\n\nThat’s how wolox-ci was born- our\nshared library for Jenkins!\n\nWith wolox-ci, our Jenkinsfile is now\nreduced to:\n\n@Library('wolox-ci') _\n\nnode {\n\n  checkout scm\n\n  woloxCi('.woloxci/config.yml');\n}\n\nNow it simply checks out the code and then calls wolox-ci. The library\nreads yaml file like this one\n\nconfig:\n  dockerfile: .woloxci/Dockerfile\n  project_name: some-project-name\n\nservices:\n  - postgresql\n  - redis\n\nsteps:\n  analysis:\n    - bundle exec rubocop -R app spec --format simple\n    - bundle exec rubycritic --path ./analysis --minimum-score 80 --no-browser\n  setup_db:\n    - bundle exec rails db:create\n    - bundle exec rails db:schema:load\n  test:\n    - bundle exec rspec\n  security:\n    - bundle exec brakeman --exit-on-error\n  audit:\n    - bundle audit check --update\n\n\nenvironment:\n  RAILS_ENV: test\n  GIT_COMMITTER_NAME: a\n  GIT_COMMITTER_EMAIL: b\n  LANG: C.UTF-8\n\nand builds the Jenkinsfile to get your job running on the fly.\n\nThe nice part about having a shared library is that we can extend and\nfix our library in a centralized way. Once we add new code, the library\nis automatically updated in Jenkins which will notify all of our jobs\nwith the update.\n\nSince we have projects in different languages we use Docker to build the\ntesting environment. WoloxCI assumes there is a Dockerfile to build and\nwill run all the specified commands inside the container.\n\nWoloxci config.yml\n\nConfig\n\nThe first part of the config.yml file specifies some basic\nconfiguration: project’s name and Dockerfile location. The Dockerfile is\nused to build the image where the commands will be run.\n\nServices\n\nThis section describes which services will be exposed to the container.\nOut of the box, WoloxCI has support for postgresql, mssql and\nredis. You can also specify the docker image version you want! It is\nnot hard to add a new service. You just need to add the corresponding\nfile at\n\nhttps://github.com/Wolox/wolox-ci/tree/development/vars\n\nand modify how the services are parsed\n\nhttps://github.com/Wolox/wolox-ci/blob/development/src/com/wolox/parser/ConfigParser.groovy#L76\n\nSteps\n\nThe listed commands in this section will run inside the Docker\ncontainer. As a result, you’ll see each of the steps on the Jenkins UI.\n\nEnvironment\n\nIf you need some environment variables during your build, you can\nspecify them here. Whatever variable you set will be available inside\nthe Docker container when your commands listed in the steps section\ndescribed above.\n\nWrapping up\n\nWoloxCI is still being tested with a not-so-small sample of our\nprojects. The possibility of changing the build steps through a YAML\nfile makes it accessible for everyone and that is a great improvement in\nour CI workflow.\n\nDocker gives us the possibility of easily changing the programming\nlanguage without making any changes to our Jenkins installation and\nJenkins’ Github Organization feature automatically adds new projects\nwhen a new repository with a Jenkinsfile is detected.\n\nAll of these improvements have reduced the time we spend maintaining\nJenkins significantly and give us the possibility of easily scaling\nwithout any extra configuration.\n\nThis library is working in our CI but it still can be improved.\nIf you would like to add features, feel free to\ncontribute!","title":"Configuring a Jenkins Pipeline using a YAML file","tags":["jenkins","pipelines","yaml","sharedlibrary"],"authors":[{"avatar":null,"blog":null,"github":"mdesanti","html":"<div class=\"paragraph\">\n<p>Head of Infrastructure &amp; Cloud at <a href=\"https://www.wolox.com.ar\">Wolox</a></p>\n</div>","id":"mdesanti","irc":null,"linkedin":null,"name":"Matias De Santi","slug":"/blog/authors/mdesanti/","twitter":"mdsanti"}]}},{"node":{"date":"2018-04-27T00:00:00.000Z","id":"3e9f5209-666c-54d9-9dcf-8fcbc3620a51","slug":"/blog/2018/04/27/essentials-versions-are-numbered/","strippedHtml":"Jenkins Essentials has been renamed to Jenkins Evergreen since this was written.\n\nA couple weeks ago, I\nwrote about the Jenkins Essentials\neffort, on which we’ve been making steady progress. Personally, the most\nexciting challenge of this project is defining the machinery to drive\nautomatic updates\nof Jenkins Essentials, which viewed from a high level, are classic continuous\ndelivery challenges.\n\nIn this post, I wanted to dive into a bit of the gritty details of how we’re\ngoing to be delivering Jenkins Essentials with automatic updates, which has\nsome really interesting requirements for the development of Jenkins itself.\n\nThe traditional Jenkins core and plugin development workflow involves a\ndeveloper working on changes for some amount of time, then when they’re ready,\nthey \"create a release\" which typically involves publishing artifacts to our\nArtifactory, and then on a timer (typically every 15 minutes) the Update Center will\nre-generate a file called update-center.json. Once the new Update Center has\nbeen generated, it is published and consumed by Jenkins installations within\n24 hours. Of course, only after Jenkins administrators recognize that there is\nan update available, can they install it. All in all, it can take quite a long\ntime from when a developer publishes a release, to when it is successfully used\nby an end-user.\n\nWith our desire to make Jenkins Essentials updates seamless and automatic, the\nstatus quo clearly was not going to work. Our shift in thinking has required a\ncouple simultaneous efforts to make this more continuously delivered approach\nviable.\n\nDeveloper Improvements\n\nStarting from the developer’s workflow,\nJesse Glick\nhas been working on publishing \"incremental builds\" of artifacts into a\nspecial Maven repository\nin Artifactory. Much of his work is described in the very thorough\nJenkins Enhancement Proposal 305.\nThis support, which is now live on\nci.jenkins.io\nallows plugin developers to publish versioned changes from pull requests and\nbranches to the incrementals repository. Not only does this make it much\neasier for Jenkins Essentials to deliver changes closer to the HEAD of\nmaster branches, it also unlocks lots of flexibility for Jenkins developers\nwho coordinate changes across matrices of plugins and core, as occasionally is\nnecessary for Jenkins Pipeline, Credentials, Blue Ocean, and a number of other\nfoundational components of a modern Jenkins install.\n\nIn a follow-up blog post, Jesse is going to go into much more detail on some of\nthe access control and tooling changes he had to solve to make this\nincrementals machinery work.\n\nOf course, incremental builds are only a piece of the puzzle, with those\nartifacts, Jenkins Essentials has to be able to do something useful with them!\n\nUpdate Improvements\n\nThe number one requirement, from my perspective, for the automatically updated\ndistribution is that it is safe. \"Safe\" means that a user doesn’t need to\nbe involved in the update process, and if something goes wrong, the\ninstance recovers without the user needing to do anything to remediate a\n\"bad code deploy.\"\n\nIn my previous post on the subject, I mentioned Baptiste’s work on\nJenkins Enhancement\nProposal 302 which describes the \"data safety\" system for safely applying\nupdates, and in case of failure, rolling back.\n\nThe next obvious question is \"what’s failure?\" which Baptiste spent some time\nexploring and implementing in two more designs:\n\nJEP-304: Essentials Client Error Telemetry Logging\n\nJEP-306: Essentials Instance Client Health Checking\n\nOn the server side, of which there is substantial work for Jenkins Essentials,\nthese concepts integrate with the concept of an\nUpdate Lifecycle\nbetween the server and client. In essence, the server side must be able to\ndeliver the right updates to the right clients, and avoid delivering tainted\nupdates (those with known problems) to clients. While this part of the work is\nstill on-going, tremendous progress has been made over the past couple weeks\nin ensuring that updates can be safely, securely, and automatically delivered.\n\nWith the ability to identify \"bad code deploys\", and having a mechanism for\nsafely rolling back, not only does Jenkins Essentials allow seamless\nupdates, but it enables Jenkins developers to deliver features and bugfixes\nmuch more quickly than our current distribution model allows.\n\nWhile Jenkins Essentials does not have a package ready for broad consumption\nyet, we’re rapidly closing in on the completion of our first milestone which\nties all of these automatic update components together and builds the\nfoundation for continuous delivery of all subsequent improvements.\n\nYou can follow our progress in the\njenkins-infra/evergreen\nrepository, or join us in our\nGitter chat!","title":"Jenkins Essentials: The days of versions are numbered","tags":["evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2018-04-30T00:00:00.000Z","id":"b56ab05f-d077-5b8d-ab93-27f00b4c8c1e","slug":"/blog/2018/04/30/using-the-beta-annotation/","strippedHtml":"This sort of slid under the radar in the middle of some bigger changes\nfor the JEP-202\nreference implementation, so I wanted to call it out now. Arguably this could\ndeserve a retroactive JEP, though I would rather fold it into a JEP for\nJENKINS-49651 (see below).\n\nAs of Jenkins 2.118, or plugin parent POM 3.7, you can mark any Java member\n( class, method, constructor, field, or I suppose also interface,\nenum, or annotation) with API visibility ( protected or public) with an\nannotation :\n\n@Restricted(Beta.class)\n\nThe idea is to announce to potential users of the member that the API\nmay still be in flux and only code prepared to keep up should be using\nit. For an example, 2.118 added a VirtualFile.toExternalURL() method\nthat is being implemented in artifact-manager-s3 and (pending some\nPR merges) called in copyartifact and workflow-basic-steps. We do\nnot necessarily want this to be called yet by unknown parties out\nthere in the Jenkins ecosystem. To enforce that, any attempt to call\nor implement toExternalURL will produce a build failure, unless you\nadd this property to your plugin POM, as these plugins have done:\n\ntrue\n\nWhy? Because there is a chance the design is wrong and it might need\nto be changed—perhaps some upcoming bug fix would demand a boolean\nparameter be added, for example.\n\nUnder the conventional notion of Jenkins API deprecation and compatibility\npolicy, once an API like this makes it into a release version, that is it—we\nmight mark it @Deprecated but we need to maintain compatibility indefinitely,\nand find some way to migrate existing implementations / call sites.\n\nWith the @Beta annotation, that promise is not being made. If it needs\na boolean parameter for some reason, that will be added and those\nthree plugins updated to match; we are not going to bother retaining\nthe original overload and somehow delegating to the new one. This\nsimplification of the developer workflow is important to the use cases\nof Essentials (JEP-3xx), and I would expect the useBeta mark to\nbecome widespread among plugins included in Essentials. Such as the situation\nwhere one team needs to feel\ncomfortable refactoring code under its aegis freely, and the refactored result\nshould be deliverable as a unit to production via the Evergreen distribution\nsystem.\n\nSo that leaves two important questions:\n\nFirst, is the annotation\npermanent, and if not, when should it be removed? I do not think there\nis any hard policy, but the intention is that it should be removed\nonce the API is in more or less widespread use and has held up. For\nthis example, if people start using S3 artifacts, and especially if\nsomeone successfully writes an implementation of artifact storage in\nAzure that uses the API, the concept will have been reasonably proven.\nAt that point we want the API to be used wherever it would make sense,\nand if there is some very belated realization that the design is not\nquite right, we accept the burden of deprecating the original and\nmigrating callers compatibly.\n\nSecond, it is fine and well to say that someone changing the signature\nof a beta toExternalURL is on the hook to update the three plugins\nusing it, but what if a Jenkins admin ( not running Essentials, for\nshame) upgrades to (say) Jenkins 2.125 with the new signature but\ndeclines to accept the updates to those plugins (say,\nworkflow-basic-steps 2.9) which adapt to the change? It is not\nenough to say that it is their fault for holding back on the updates\narbitrarily; the plugin manager offers you updates but does nothing\nto tell you when they are required, so suddenly throwing\nNoSuchMethodError is not a helpful response.\n\nThe solution needs to be ironed out, but my expectation is to use\nJENKINS-49651\nfor this. For example, workflow-basic-steps 2.8,\nusing toExternalURL(), would have declared itself compatible with\nJenkins-Version: 2.118, and thus implicitly anything newer. The\ndeveloper doing the refactoring would also amend some 2.125 (and\nnewer) core metadata to say that it conflicts with anything older than\nthe 2.9 release of the plugin. The plugin manager would therefore\nblock the 2.8 plugin from even being loaded on the 2.125 core; the\nadmin would need to update before using it. In the case of an\nincompatible change made to a plugin API, rather than a core API, the\nUX is a little smoother since the plugin manager could just refuse to\nlet you update one without the other.\n\nIf you’re a plugin or core developer who is interested in using the @Beta\nannotations, or have questions about our motiviations, please join the\ndiscussion on\nthis mailing list thread.","title":"Using new core APIs with the Beta annotation","tags":["core","developer","plugin"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick/","twitter":"tyvole"}]}},{"node":{"date":"2018-05-01T00:00:00.000Z","id":"29e7f29f-403c-5601-b053-b8a3c4a7dcee","slug":"/blog/2018/05/01/gsoc2018-projects-announcement/","strippedHtml":"On behalf of the Jenkins GSoC team and mentors,\nI would like to welcome\nShenyu Zheng,\nUdara De Silva,\nPham Vu Tuan and\nAbhishek Gautam.\nThey will be working on Google Summer of Code projects in the Jenkins organization,\nand they have already done some contributions.\n\nThis year we have the following projects:\n\nCode Coverage API Plugin -\ncreate a new API Plugin to unify existing Code Coverage plugins and provide new features.\n\nStudent: Shenyu Zheng from Henan University, Kaifeng, China\n\nMentors: Steven Christou and Supun Wanniarachchi\n\nElectronic Design Automation Plugins -\ncreate plugins for open-source Electronic Design Automation tools for synthesis, simulation and coverage analysis (iVerilog, covered, Yosys).\n\nStudent: Udara De Silva from University of Akron, Ohio, USA\n\nMentors: Martin d’Anjou and Oleg Nenashev\n\nJenkins Remoting over Message Bus/Queue -\nadd support of a popular message queue/bus technology (RabbitMQ or Kafka) as a fault-tolerant communication layer in Jenkins.\n\nStudent: Pham Vu Tuan from Nanyang Technological University, Singapore\n\nMentors: Oleg Nenashev and Supun Wanniarachchi\n\nSimple Pull-Request Job Plugin -\nadd ability to define Jenkins jobs as YAML files stored in SCM, integrate it with existing plugin ecosystem.\n\nStudent: Abhishek Gautam from Visvesvaraya National Institute of Technology, Nagpur, India\n\nMentors: Jeff Knurek, Kristin Whetstone and\nWilly Aguirre\n\nDuring next 4 weeks project teams will be reaching out to potential stakeholders in order to establish connections and\nto get comments regarding their project designs.\nIf you are interested in the projects, please join discussions in the\nDeveloper mailing lists and project meetings once they get scheduled.\nPlease also expect expect more detailed blogposts about the projects soon.\n\nIf you are interested to know more about GSoC in Jenkins, you can find information, timeline and communication channels\nhere.","title":"Welcome Google Summer of Code 2018 students!","tags":["gsoc","gsoc2018","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-05-08T00:00:00.000Z","id":"29ad061f-dba2-536d-91b4-878d290af36d","slug":"/blog/2018/05/08/jenkins-x-anchore/","strippedHtml":"Anchore provides docker image analysis for user defined acceptance policies to allow automated image validation and acceptance.\n\nAs developers we would like to know if a change we are proposing introduces a\nCommon Vulnerability and Exposure (CVE).\nAs operators we would like to know what running applications are affected if a new CVE is discovered.\n\nNow in Jenkins X pipelines, if we find an\nAnchore engine service running we will add the preview and release images to be analyzed.\nThis means we can look at any environment including previews (created from Pull Requests)\nto see if your application contains a CVE.\n\nUpgrade\n\nStart by checking your current Jenkins X version:\n\njx version\n\nIf your Jenkins X platform is older than 0.0.903, then first you will need to upgrade to at least 0.0.922:\n\njx upgrade cli\njx upgrade platform\n\nInstall addon\n\nYou can install the\nAnchore engine addon\nwhen you are in your Jenkins X team home environment.\n\njx env dev\njx create addon anchore\n\nThis will install the engine in a seperate anchore namespace\nand create a service link in the current team home environment\nso our pipeline builds can add docker images to Anchore for analysis.\n\nCreate an application\n\nYou can now create a new quickstart:\n\njx create quickstart\n\nList any CVEs\n\nOnce the build has run you will be able to check for CVEs in any environment incluing previews created for pull requests.\n\njx get cve --environment staging\n\nDemo\n\nHere’s a 4 minute video that demonstrates the steps above:\n\nUpgrading existing pipelines\n\nIf you have an existing application pipeline and and want enable image analysis you can update your Jenkinsfile,\nin the preview stage after the skaffold step add the line\n\nsh \"jx step validate --min-jx-version 1.2.36\"\nsh \"jx step post build --image \\$JENKINS_X_DOCKER_REGISTRY_SERVICE_HOST:\\$JENKINS_X_DOCKER_REGISTRY_SERVICE_PORT/$ORG/$APP_NAME:$PREVIEW_VERSION\"\n\nIn the master stage the add this line after the skaffold step\n\nsh \"jx step validate --min-jx-version 1.2.36\"\nsh \"jx step post build --image \\$JENKINS_X_DOCKER_REGISTRY_SERVICE_HOST:\\$JENKINS_X_DOCKER_REGISTRY_SERVICE_PORT/$ORG/$APP_NAME:\\$(cat VERSION)\"\n\nFor any questions please find us - we mainly hang out on Slack at\n#jenkins-x-dev - or see\njenkins-x.io/community for other channels.","title":"Jenkins X: Announcing CVE docker image analysis with Anchore","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8e8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg","srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/77b35/jrawlings.jpg 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/d4a57/jrawlings.jpg 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/68974/jrawlings.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/ef6ff/jrawlings.webp 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/8257c/jrawlings.webp 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/6766a/jrawlings.webp 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/22bfc/jrawlings.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/jrawlings.jpeg"},"blog":null,"github":"rawlingsj","html":"<div class=\"paragraph\">\n<p>James has a passion for continuous delivery and software automation in general.  Continually looking at\nways to help improve developers experience for the cloud.  James works on the OSS project <a href=\"https://jenkins-x.io/\">Jenkins X</a></p>\n</div>","id":"jrawlings","irc":null,"linkedin":null,"name":"James Rawlings","slug":"/blog/authors/jrawlings/","twitter":"jdrawlings"}]}},{"node":{"date":"2018-05-09T00:00:00.000Z","id":"60f8a17b-1600-571d-a45d-9012801aa2b7","slug":"/blog/2018/05/09/security-advisory/","strippedHtml":"We just released security updates to Jenkins, versions 2.121 and 2.107.3, that fix multiple security vulnerabilities.\n\nAdditionally, we announce previously published security issues and corresponding fixes in these plugins:\n\nBlack Duck Hub\n\nGroovy Postbuild\n\nGitlab Hook (fix unreleased)\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core and plugins","tags":["core","plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-05-15T00:00:00.000Z","id":"85458a0f-8ad5-53fb-a455-a4b6ae133fb4","slug":"/blog/2018/05/15/incremental-deployment/","strippedHtml":"A couple of weeks ago, Tyler mentioned some\ndeveloper improvements in Essentials\nthat had been recently introduced:\nthe ability for\nci.jenkins.io\nbuilds to get deployed automatically to an “Incrementals” Maven repository,\nas described in\nJEP-305.\nFor a plugin maintainer, you just need to\nturn on this support\nand you are ready to both deploy individual Git commits from your repository\nwithout the need to run heavyweight traditional Maven releases,\nand to depend directly on similar commits of Jenkins core or other plugins.\nThis is a stepping stone toward continuous delivery, and ultimately deployment, of Jenkins itself.\n\nHere I would like to peek behind the curtain a bit at how we did this,\nsince the solution turns out to be very interesting for people thinking about security in Jenkins.\nI will gloss over the Maven arcana required to get the project version to look like 1.40-rc301.87ce0dd8909b\n(a real example from the\nCopy Artifact plugin)\nrather than the usual 1.40-SNAPSHOT, and why this format is even useful.\nSuffice it to say that if you had enough permissions, you could run\n\nmvn -Dset.changelist -DskipTests clean deploy\n\nfrom your laptop to publish your latest commit.\nIndeed as\nmentioned in the JEP,\nthe most straightforward server setup would be to run more or less that command\nfrom the buildPlugin function called from a typical Jenkinsfile,\nwith some predefined credentials adequate to upload to the Maven repository.\n\nUnfortunately, that simple solution did not look very secure.\nIf you offer deployment credentials to a Jenkins job,\nyou need to trust anyone who might configure that job (here, its Jenkinsfile)\nto use those credentials appropriately.\n(The withCredentials step will mask the password from the log file, to prevent accidental disclosures.\nIt in no way blocks deliberate misuse or theft.)\nIf your Jenkins service runs inside a protected network and works with private repositories,\nthat is probably good enough.\n\nFor this project, we wanted to permit incremental deployments from any pull request.\nJenkins will refuse to run Jenkinsfile modifications from people\nwho would not normally be able to merge the pull request or push directly,\nand those people would be more or less trustworthy Jenkins developers,\nbut that is of no help if a pull request changes pom.xml\nor other source files used by the build itself.\nIf the server administrator exposes a secret to a job,\nand it is bound to an environment variable while running some open-ended command like a Maven build,\nthere is no practical way to control what might happen.\n\nThe lesson here is that the unit of access control in Jenkins is the job.\nYou can control who can configure a job, or who can edit files it uses,\nbut you have no control over what the job does or how it might use any credentials.\nFor JEP-305, therefore, we wanted a way to perform deployments from builds considered as black boxes.\nThis means a division of responsibility:\nthe build produces some artifacts, however it sees fit;\nand another process picks up those artifacts and deploys them.\n\nThis worked was tracked in\nINFRA-1571.\nThe idea was to create a “serverless function” in Azure\nthat would retrieve artifacts from Jenkins at the end of a build,\nperform a set of validations to ensure that the artifacts follow an expected repository path pattern,\nand finally deploy them to Artifactory using a trusted token.\nI prototyped this in Java, Tyler\nrewrote it in JavaScript,\nand together we brought it into production.\n\nThe crucial bit here is what information (or misinformation!) the Jenkins build can send to the function.\nAll we actually need to know is the build URL, so the\ncall site from Jenkins\nis quite simple.\nWhen the function is called with this URL,\nit starts off by performing input validation:\nit knows what the Jenkins base URL is,\nand what a build URL from inside an organization folder is supposed to look like:\nhttps://ci.jenkins.io/job/Plugins/job/git-plugin/job/PR-582/17/ , for example.\n\nThe next step is to call back to Jenkins and ask it for some metadata about that build.\nWhile we do not trust the build, we trust the server that ran it to be properly configured.\nAn obstacle here was that the ci.jenkins.io server had been configured to disable the Jenkins REST API;\nwith Tyler’s guidance I was able to amend this policy to permit API requests from registered users\n(or, in the case of the Incrementals publisher, a bot).\n\nIf you want to try this at home, get an\nAPI token,\npick a build of an “incrementalified” plugin or Jenkins core,\nand run something like\n\ncurl -igu : 'https://ci.jenkins.io/job/Plugins/job/git-plugin/job/PR-582/17/api/json?pretty&tree=actions[revision[hash,pullHash]]'\n\nYou will see a hash or pullHash corresponding to the main commit of that build.\n(This information was added to the Jenkins REST API to support this use case in\nJENKINS-50777.)\nThe main commit is selected when the build starts\nand always corresponds to the version of Jenkinsfile in the repository for which the job is named.\nWhile a build might checkout any number of repositories,\ncheckout scm always picks “this” repository in “this” version.\nTherefore the deployment function knows for sure which commit the sources came from,\nand will refuse to deploy artifacts named for some other commit.\n\nNext it looks up information about the Git repository at the folder level (again from JENKINS-50777):\n\ncurl -igu : 'https://ci.jenkins.io/job/Plugins/job/git-plugin/api/json?pretty&tree=sources[source[repoOwner,repository]]'\n\nThe Git repository now needs to be correlated to a list of Maven artifact paths that this component is expected to produce.\nThe\nrepository-permissions-updater\n(RPU) tool already had a list of artifact paths used to perform permission checks on regular release deployments to Artifactory; in\nINFRA-1598\nI extended it to also record the GitHub repository name, as can be seen\nhere.\nNow the function knows that the CI build in this example may legitimately create artifacts in the org/jenkins-ci/plugins/git/ namespace\nincluding 38c569094828 in their versions.\nThe build is expected to have produced artifacts in the same structure as mvn install sends to the local repository,\nso the function downloads everything associated with that commit hash:\n\ncurl -sg 'https://ci.jenkins.io/job/Plugins/job/git-plugin/job/PR-582/17/artifact/**/*-rc*.38c569094828/*-rc*.38c569094828*/*zip*/archive.zip' | jar t\n\nWhen all the artifacts are indeed inside the expected path(s),\nand at least one POM file is included (here org/jenkins-ci/plugins/git/3.9.0-rc1671.38c569094828/git-3.9.0-rc1671.38c569094828.pom),\nthen the ZIP file looks good—ready to send to Artifactory.\n\nOne last check is whether the commit has already been deployed (perhaps this is a rebuild).\nIf it has not, the function uses the Artifactory REST API to atomically upload the ZIP file\nand uses the GitHub Status API to associate a message with the commit\nso that you can see right in your pull request that it got deployed:\n\nOne more bit of caution was required.\nJust because we successfully published some bits from some PR does not mean they should be used!\nWe also needed a tool which lets you select the newest published version of some artifact\nwithin a particular branch, usually master.\nThis was tracked in\nJENKINS-50953\nand is available to start with as a Maven command operating on a pom.xml :\n\nmvn incrementals:update\n\nThis will check Artifactory for updates to relevant components.\nWhen each one is found, it will use the GitHub API to check whether the commit has been merged to the selected branch.\nOnly matches are offered for update.\n\nPutting all this together, we have a system for continuously delivering components\nfrom any of the hundreds of Jenkins Git repositories\ntriggered by the simple act of filing a pull request.\nSecuring that system was a lot of work\nbut highlights how boundaries of trust interact with CI/CD.","title":"Automatic deployment of “incremental” commits to Jenkins core and plugins","tags":["evergreen","developer"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick/","twitter":"tyvole"}]}},{"node":{"date":"2018-05-16T00:00:00.000Z","id":"33bc69d0-dfa9-5c28-bfe5-208f3373b7f9","slug":"/blog/2018/05/16/pipelines-with-git-tags/","strippedHtml":"One common pattern for automated releases I have seen and used relies on Git\ntags as the catalyst for a release process. The immutable nature of releases\nand the immutable nature of tags can definitely go hand in hand, but up until\nfew months ago Jenkins Pipeline was not able to trigger effectively off of Git\ntags.\n\nIn this post I want to briefly share how to use tags to drive behaviors in\nJenkins Pipeline. Consider the following contrived Jenkinsfile, which\ncontains the three basic stages of Build, Test, and Deploy:\n\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                sh 'make package'\n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'make check'\n            }\n        }\n        stage('Deploy') {\n            when { tag \"release-*\" }\n            steps {\n                echo 'Deploying only because this commit is tagged...'\n                sh 'make deploy'\n            }\n        }\n    }\n}\n\nOf particular note is the\nwhen\ncondition on the \"Deploy\" stage which is applying the tag criteria. This\nmeans the stage would only execute when the Pipeline has been triggered from a\ntag in Git matching the release-* Ant-style wildcard.\n\nIn practice, this means that all pull requests, and branch-based Pipeline Runs\nresult in the stage being skipped:\n\nWhen I push a release-1.0 tag, the Pipeline will then be triggerd and run the\n\"Deploy\" stage:\n\nOut of the box, Pipelines won’t trigger off of the presence of tags, which\nmeans that a Multibranch Pipeline must have a configuration update to know that\nit must Discover Tags.\n\nConfiguring\n\nFrom the configuration screen of a Multibranch Pipeline (or GitHub Organization\nFolder), Discovering tags can be enabled by adding the appropriate \"Behavior\"\nto the Branch Source configuration:\n\nWith these changes, the Jenkinsfile in the tagged versions of my source\nrepository can now drive distinct deployment behavior which is not otherwise\nenabled in the Pipeline.","title":"When using tags in Jenkins Pipeline","tags":["pipeline","git"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2018-05-17T00:00:00.000Z","id":"ae3ff15b-6a37-56b0-89c0-ca24db87819d","slug":"/blog/2018/05/17/tracymiranda-intro/","strippedHtml":"I’m Tracy Miranda, and I’m really excited to have joined CloudBees this month leading the open source program. CloudBees’ contributions to Jenkins include developing Pipeline and Blue Ocean, staffing the infrastructure team, advocacy and events work, as well as security efforts. My focus is on making sure there is a great relationship between the Jenkins community and CloudBees, which means strong communication, help get traction on things the community wants, and generally working to make Jenkins and the community thrive and stay awesome in an ever-changing tech landscape.\n\nHere’s a little background on me: I come from an electronics/EDA background but switched to software early in my career when I first got involved with open source software. I’ve been part of the Eclipse community for around 15 years, definitely from before git was even a thing. I love being involved with all levels: project committer, conference chair, steering committee for working groups and more recently board of directors.\n\nOn a personal note, I …\n\nLive in the UK with my husband and 2 young kids\n\nGrew up in Kenya\n\nEnjoy playing badminton, love good food & am always first at any buffets\n\nI am looking forward to getting to know the Jenkins community well, and really getting a feel for your Jenkins stories, good and bad. Please feel free to let me know:\n\nWhat you love about the Jenkins community & how you are using Jenkins\n\nWhat you’re working on doing with Jenkins\n\nWhat you don’t like and want improved\n\nYou can find me on the mailing lists or via:\n\nTwitter @tracymiranda\n\nEmail: tmiranda@cloudbees.com\n\nIRC: tracymiranda\n\nAlso I’ll be at the upcoming events: DevOps World - Jenkins World in San Francisco, California and Nice, France so if you plan to attend do come and say hi. The Jenkins community is the real force behind Jenkins. And in turn Jenkins powers so much of the software out there. It is an honour to be joining this wonderful community.","title":"Introducing Tracy Miranda as the CloudBees Open Source Program Lead","tags":["community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}},"publicURL":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/tracymiranda.jpg"},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda/","twitter":"tracymiranda"}]}},{"node":{"date":"2018-06-08T00:00:00.000Z","id":"f46b46ad-a0ad-590a-a614-37ad7eaf1e7d","slug":"/blog/2018/06/08/jenkins-java10-hackathon/","strippedHtml":"On behalf of the Jenkins Events Team,\nI would like to invite you to the “Jenkins & Java 10 Online Hackathon” which will take place from June 18th to 22nd.\nWe will be working together on Jenkins core and plugins in order\nto find and fix compatibility issues, share experiences and have some fun.\nEverybody is welcome to join, independently of their Jenkins experience and amount of time they have available.\n\nIf you are interested in participating in the hackathon, please sign-up in\nthis form.\n\nBackground\n\nJava 9 has recently been end-of-lifed, Java 10 is in GA, and Java 11 is in early beta.\nJenkins project currently requires Java 8 to run reliably,\nand there are some known compatibility issues with higher Java versions.\n\nDuring the Jenkins World 2017 Hackathon,\nMark Waite and\nBaptiste Mathus spent some time exploring Java 9 compatibility in Jenkins.\nWe are currently tracking compatibility issues in the\nJENKINS-40689 EPIC,\nbut there are likely many unknown issues in Jenkins core, plugins and in libraries we use in the project.\nWe would like to continue their effort and work on Java 10+ support.\n\nObjectives and Scope\n\nAs I have said above,\nthe goals are to explore/fix compatibility issues, share experiences and have fun.\nWe DO NOT plan to make Jenkins fully compatible with Java 10+\nduring the hackathon,\nbut we will try to integrate fixes and make them available.\n\nSince the announcement of the Hackathon in the mailing list,\nwe have got a number of registrations from contributors working on several project areas.\nWe will split our work to several areas:\n\nJenkins core and Remoting\n\nPipeline Engine\n\nPlugins (e.g. Git plugin or any plugin you want to work on)\n\nExploratory testing for Java 10 and beyond\n\nIn order to organize the effort, we have created a\njava10_hackathon label\nin Jenkins JIRA.\nIf you are interested in particular tasks,\nplease assign them to yourself and add the label.\n\nOrganization\n\nCurrently the event is in the planning stage.\nWe will be using the Developer mailing list\nfor synchronization before the event.\n\nWhat will we have?\n\nCommunications in #jenkins-hackhouse IRC and in the\nJenkins Gitter channel\n\nDaily recorded sync-up calls in Hangouts\n\nKnowledge transfer sessions during the event\n\nWe also want to prepare some special swag for active participants.\nIf you have reached this part of the blogpost,\nyou have probably seen the logo ;)\n\nLinks\n\nRegistration\n\nDeveloper mailing list\n\nHackathon sync-up document\n\nRunning Jenkins with Java 10 and 11\n\nJIRA: Java 10 compatibility\n\nJIRA: Java 11 compatibility\n\nJIRA: Hackathon tasks","title":"Jenkins & Java 10+ Online Hackathon (Jun 18-22)","tags":["events","community","developer","java10","java11"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-06-13T00:00:00.000Z","id":"a1c90a56-ed3d-57e4-bd0b-1397798cc5ea","slug":"/blog/2018/06/13/code-coverage-api-plugin/","strippedHtml":"About me\n\nMy name is Shenyu Zheng, and I am an undergraduate student in Computer Science and Technology at Henan University from China.\n\nI am very excited that I can participate in GSoC to work on Code Coverage API plugin with the Jenkins community and to contribute to the open source world. It is my greatest pleasure to write a plugin that many developers will use.\n\nMy mentors are Steven Christou, Supun Wanniarachchi, Jeff Pearce and Oleg Nenashev.\n\nAbstract\n\nThere are a lot of plugins which currently implement code coverage, however, they all use similar config, charts, and content. So it will be much better if we can have an API plugin which does the most repeated work for those plugins and offers a unified APIs which can be consumed by other plugins and external tools.\n\nThis API plugin will mainly do these things:\n\nFind coverage reports according to the user’s config.\n\nUse adapters to convert reports into the our standard format.\n\nParse standard format reports, and aggregate them.\n\nShow parsed result in a chart.\n\nSo, we can implement code coverage publishing by simply writing an adapter, and such adapter only needs to do one thing — convert a coverage report into the standard format. The implementation is based on extension points, so new adapters can be created in separate plugins. In order to simplify conversion for XML reports, there is also an abstraction layer which allows creating XSLT-based converters.\n\nCurrent Progress - Alpha Version\n\nI have developed an alpha version for this plugin. It currently integrates two different coverage tools - Cobertura and Jacoco. Also, it implements many basic functionalities like threshold, auto-detect, trend chart and so on.\n\nConfiguration Page\n\nconfig plugin\n\nWe can input the path pattern for auto detect, so that plugin will automatically find reports and group them using a corresponding converter. That makes config simpler and the user doesn’t need to fully specify the report name. Also, if we want, we can manually specify each coverage report.\n\nWe also have global and per-report threshold configurations, which makes the plugin more flexible than existing plugins (e.g. global threshold for a multi-language project that has several reports).\n\nPipeline Support\n\nIn addition to configuring the Code Coverage API plugin from the UI page, we also have pipeline support.\n\nnode {\n   publishCoverage(autoDetectPath: '**/*.xml', adapters: [jacoco(path: 'jacoco.xml')], globalThresholds: [[thresholdTarget: 'GROUPS', unhealthyThreshold: 20.0, unstableThreshold: 0.0]])\n}\n\nReport Defects\n\nAs we can see in Configuration page, we can set healthy threshold and stable threshold for each metric. The Code Coverage API plugin will report healthy score according to the healthy threshold we set.\n\nthreshold config\n\nresult\n\nAlso, we have a group of options which can fail the build if coverage falls below a particular threshold.\n\nCoverage Result Page\n\nThe coverage result page now has a modernized UI which shows coverage results more clearly.\nThe result page includes three parts - Trend chart, Summary chart, Child Summary chart.\n\nTrend Chart\n\nIn the Trend chart, we can see the coverage trend of the selected coverage metrics.\n\nSummary Chart\n\nIn the summary chart we can see the coverage summary of current coverage metric.\n\nChild Summary Chart\n\nIn the Child summary chart, we can see the coverage summary of each child, also, we can use the range handler to filter item we want to see to reduce the chart size.\n\nBy using those more modernized chart components, we can easily focus on the information we want to know.\n\nExtensibility\n\nWe provide several extension points to make our plugin more extensible and flexible. Also, we have a series of abstract layers to help us implementing these extension points much easier.\n\nCoverageReportAdapter\n\nWe can implement a coverage tool by implementing CoverageReportAdapter extension point. For example, by using the provided abstract layer, we can implement Jacoco simple like this:\n\npublic final class JacocoReportAdapter extends JavaXMLCoverageReportAdapter {\n\n    @DataBoundConstructor\n    public JacocoReportAdapter(String path) {\n        super(path);\n    }\n\n    @Override\n    public String getXSL() {\n        return \"jacoco-to-standard.xsl\";\n    }\n\n    @Override\n    public String getXSD() {\n        return null;\n    }\n\n    @Symbol(\"jacoco\")\n    @Extension\n    public static final class JacocoReportAdapterDescriptor extends CoverageReportAdapterDescriptor {\n\n        public JacocoReportAdapterDescriptor() {\n            super(JacocoReportAdapter.class, \"jacoco\");\n        }\n    }\n}\n\nAll we need is to extend an abstract layer for XML-based Java report and provide an XSL file to convert the report to our Java standard format. There are also other extension points which are under development.\n\nOther Extension points\n\nWe also plan to provide extension points for coverage threshold and report detector. Once it completed, we can have more control over our coverage report process.\n\nNext Phase Plan\n\nThe Alpha version now has many parts which still need to be implemented before the final release. So in next phase, I will mainly do those things.\n\nAPIs which can be used by others\n\nIntegrate Cobertura Plugin with Code Coverage API (JENKINS-51424).\n\nProvide API for getting coverage information. E.g. summary information about coverage (percentages, trends) (JENKINS-51422), (JENKINS-51423).\n\nImplementing abstract layer for other report formats like JSON. (JENKINS-51732).\n\nSupporting converters for non-Java languages. (JENKINS-51924).\n\nSupporting combining reports within a build(e.g. after parallel() execution in Pipeline) (JENKINS-51926).\n\nAdding source code navigation in Coverage Result Page (JENKINS-51988).\n\nRefactoring the configuration page to make it more user-friendly (JENKINS-51927).\n\nHow to Try It Out\n\nAlso, I have released the Alpha version in the Experimental Update Center. If you can give me some of your valuable advice about it, I will very appreciate.\n\nLinks\n\nJIRA Component\n\nProject Page\n\nProject Repository\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Intro: Code Coverage API Plugin","tags":["plugins","gsoc","gsoc2018"],"authors":[{"avatar":null,"blog":null,"github":"cizezsy","html":"<div class=\"paragraph\">\n<p>Shenyu comes from China. He is a third year student now, and his major is\nComputer Science and technology. He has participated in GSoC 2018 for\n<a href=\"https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/\">Code Coverage API Plugin</a></p>\n</div>","id":"shenyu_zheng","irc":"cizezsy","linkedin":null,"name":"Shenyu Zheng","slug":"/blog/authors/shenyu_zheng/","twitter":null}]}},{"node":{"date":"2018-06-15T00:00:00.000Z","id":"099fdcfb-2f30-562a-9c7c-67ed48398003","slug":"/blog/2018/06/15/simple-pull-request-plugin/","strippedHtml":"About me\n\nI am Abhishek Gautam, 3rd year student from Visvesvaraya National Institute of\ntechnology, India, Nagpur. I was a member of ACM Chapter and Google student developer club of my\ncollege. I am passionate about automation.\n\nMentors\n\nOleg Nenashev (Org Admin)\n\nMartin d’Anjou\n\nKristin Whetstone\n\nJeff Knurek\n\nProject Summary\n\nThis is a GSoC 2018 project.\n\nThis project aims to develop a pull request Job Plugin. Users should be able to\nconfigure job type using YAML file placed in root directory of the\nGit repository being the subject of the pull request. The plugin should interact with various\nplatforms like Bitbucket, Github, Gitlab, etc whenever a pull request is created or updated.\n\nPlugin detects the presence of certain types of the report at conventional locations,\nand publish them automatically. If the reports are not present at conventional location,\ncan specify the location using the YAML file.\n\nBenefits to the community\n\nProject administrators will be able to handle builds for pull requests more easily.\n\nBuild specifications for pull request can be written in a concise declarative format.\n\nBuild reports will be automatically published to Github, Bitbucket, etc.\n\nBuild status updates will be sent to git servers automatically.\n\nUsers will not have to deal with pipeline code.\n\nIf there will be no merge conflicts or build failures, the PR can be merged into target branch.\n\nPrior work\n\nTravis YML Plugin :\nDesigned to run .travis.yml as Jenkins pipeline job.\nTravis-CI does not support external pull requests. Jenkins environment\nis different than Travis and does not always make sense to use configurations\ndefined for other environment in Jenkins. Also maintenance of this is slowed\ndown and last commit for this plugin was on 14 Nov 2016.\nClick here to check.\n\nCodeShip Plugin :\nThis plugin is designed to convert codeship \"steps.yaml\" and\n\"services.yaml\" to scripted pipeline code. This plugin has never been released.\n\nJenkins pipeline builder :\nThis is a external non-Java-based tool, which cannot be easily converted to a Jenkins plugin.\n\nDesign\n\nThis plugin will be developed on the top of the MultiBranch Pipeline plugin.\n\nFor now the plugin is bulding branches and Pull request both using Jenkinsfile.yaml,\nbut this plugin is inclined to use for pull requests. This will be fixed in next coding phase.\n\nThis plugin is following below steps for now:\n\nclone target repo\n\ncheckout to target branch\n\nfetch the source branch\n\nmerge source-branch\n\ncall user call user script to build the repo.\n\npush changes of pull request to target branch\n\npublish test reports\n\nPlugin will start above steps if and only if the pull request is\nmergeable, to avoid merge conflicts while merging the source branch to target\nbranch. Pull request’s payload contains information if the pull request changes\nare mergeable or not hence, the pull request is mergebale or not can also be\ndecided by the payload of webhook also.\n\nHow to run the Plugin\n\nSee How to run the demo\nand set credentials, owner and repository on your own and you will be good to go.\n\nExample branch-source configuration.\n\nPhase 1 features\n\nUsers are able to select the Jenkinsfile.yaml file as the source for the Pipeline configuration.\n\nGit Push step\n\nharvest results and reports (and post in the pull request)\n\njunit()\n\nfindbugs()\n\narchiveArtifacts()\n\nBasic interface to parse and get build specifications from YAML file.\n\nThings decided\n\nTo build the plugin on the top of multibranch pipeline plugin. As that plugin has implementation of\n\nNice interface to show different branch and pull requests build separately with use of suitable plugins like Github, Bitbucket.\n\nDetect trusted revisions in a repository.\n\nPublishing of build status to the repository.\n\nConvert the YAML configuration to declarative pipeline.\n\nUser will provide path to the script relative to the root directory of the repository\nwithout extension (.sh or .bat) in the YAML file. The plugin will generate pipeline script to detect the\nplatform and call .sh or .bat script.\n\nExample:\n  Path provided: ./scripts/hello\n  a. On UNIX machine “./scripts/hello.sh” will be called\n  b. On non-UNIX machine “./scripts/hello.bat” will be called.\n\nImplementations till now\n\nA first prototype of the plugin is ready. It supports all features of Multi-Branch Pipeline and offers the following features.\n\nBuild description is defined via YAML file stored within the SCM repo. This plugin\nwill depend on GitHub plugin, Bitbucket plugin, Gitlab plugin if users will be\nusing respective paltfroms for their repositories.\n\nBasic conversion of YAML to Declarative Pipeline: A class YamlToPipeline\nis written which will load the \"Jenkinsfile.yaml\" and make use of PipelineSnippetGenerator class\nto generate Declarative pipeline code.\n\nReporting of results.\n\nPlugin is using Yaml from target branch right now. (Maybe this needs some discussion, example:\nwhat if pull request contains changes in Jenkinsfile.yaml)\n\nGit Push step: To push the changes of pull request to the target branch. This is implemented\nusing git-plugin, PushCommand is used for this from git-plugin. credentialId,\nbranch name and repository url for intracting with Github, Bitbucket, etc\nwill be taken automatically from \"Branch-Source\" (Users have to fill thes\ndetails of branch source in job configuration UI). (You can see\nHow to run the demo)\n\nJenkinsfile.yaml example\n\nFor the phase 1 prototype demonstration, the following yaml file was used.\nNote that this format is subject to change in the next phases of the project,\nas we formalise the yaml format definition.\n\nagent:\n    dockerImage: maven:3.5.3-jdk-8\n    args: -v /tmp:/tmp\n\ntestResultPaths:\n    - target/surefire-reports/*.xml\n\nfindBugs: target/*.xml\n\nstages:\n    - name: First\n      scripts:\n        -   ./scripts/hello\n    - name: Build\n      scripts:\n        -   ./scripts/build\n    - name: Tests\n      scripts:\n        -   ./scripts/test\n\narchiveArtifacts:\n    - Jenkinsfile.yaml\n    - scripts/hello.sh\n\nFrom the yaml file shown above, the plugin generates the following pipeline code:\n\npipeline {\n  agent {\n    docker {\n      image 'maven:3.5.3-jdk-8'\n      args '-v /tmp:/tmp'\n      alwaysPull false\n      reuseNode false\n    }\n  }\n  stages {\n    stage('First') {\n      steps {\n        script {\n          if (isUnix()) {\n            sh './scripts/hello.sh'\n          } else {\n            bat './scripts/hello.bat'\n          }\n        }\n      }\n    }\n    stage('Build') {\n      steps {\n        script {\n          if (isUnix()) {\n            sh './scripts/build.sh'\n          } else {\n            bat './scripts/build.bat'\n          }\n        }pipeline\n      }\n      post {\n        success {\n          archiveArtifacts artifacts: '**/target/*.jar'\n          archiveArtifacts artifacts: 'Jenkinsfile.yaml'\n          archiveArtifacts artifacts: 'scripts/hello.sh'\n        }\n      }\n    }\n    stage('Tests') {\n      steps {\n        script {\n          if (isUnix()) {\n            sh './scripts/test.sh'\n          } else {\n            bat './scripts/test.bat'\n          }\n        }\n      }\n      post {\n        success {\n          junit 'target/surefire-reports/*.xml'\n        }\n        always {\n          findbugs pattern: 'target/*.xml'\n        }\n      }\n    }\n  }\n}\n\nPipeline view in Jenkins instance\n\nCoding Phase 2 plans\n\nDecide a proper YAML format to use for Jenkinsfile.yaml\n\nCreate Step Configurator for SPRP plugin. Jenkins-51637.\nThis will enable users to use Pipeline steps in Jenkinsfile.yaml.\n\nAutomatic indentation generation in the generated Pipeline SnipperGenerator class.\n\nWrite tests for the plugin.\n\nJira Epic\n\nHow to reach me\n\nEmail: gautamabhishek46@gmail.com\n\nGitter room: https://gitter.im/Jenkinsci/simple-pull-request-job-plugin\n\nReferences\n\nInitial proposal of the project\n\nProject repository\n\nProject page\n\nGitter chat\n\nBug Tracker\n\nDemo Repository\n\nPhase 1 Presentation video (June 14, 2018)\n\nPhase 1 Presentation Slides (June 14, 2018)","title":"GSoC Project Intro: Pipeline as YAML","tags":["gsoc2018","gsoc","plugin","pipeline","yaml"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg","srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/77b35/abhishek_gautam.jpg 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/d4a57/abhishek_gautam.jpg 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/68974/abhishek_gautam.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/ef6ff/abhishek_gautam.webp 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/8257c/abhishek_gautam.webp 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/6766a/abhishek_gautam.webp 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/22bfc/abhishek_gautam.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/abhishek_gautam.JPG"},"blog":null,"github":"gautamabhishek46","html":"<div class=\"paragraph\">\n<p>Abhishek is a 3rd year Computer Science student from Visvesvaraya National\nInstitute of Technology, Nagpur, India. He has done some website projects for\nhis college technical festival. He is also a regular competitive programmer\n(abhishekg1128 at codechef). He has done two internships as a Game Programmer\nas well. He was a member of ACM Chapter and Google student developer club of his\ncollege. His interest in automation motivated his participation in the Jenkins\nGSOC 2018 program.</p>\n</div>","id":"abhishek_gautam","irc":"abhishekg","linkedin":null,"name":"Abhishek Gautam","slug":"/blog/authors/abhishek_gautam/","twitter":null}]}},{"node":{"date":"2018-06-17T00:00:00.000Z","id":"2a47e8d0-b919-50d2-9fe2-b9937f8d85bc","slug":"/blog/2018/06/17/running-jenkins-with-java10-11/","strippedHtml":"Please refer to Running Jenkins on Java 11 documentation to have the up-to-date details on how to run Jenkins on Java 11.\n\nGuidelines in this blogpost are rendered obsolete by the Java 11 Support Preview Availability\nannouncement on Dec 13, 2018 and by the Java 11 GA release on Sep 25, 2018.\nSee the Java support page\nfor up-to-date information about running Jenkins with Java 11.\nThe Jenkins project also no longer ships preview versions for Java 10.\n\nAs you probably know, we will have a\nJenkins and Java 10+ online hackathon this week.\nIn order to enable early adopters to try out Jenkins with new Java versions,\nwe have updated Jenkins core and Docker packages.\nStarting from Jenkins 2.127,\nweekly releases can be launched with Java 10 and Java 11 (preview).\nAlthough there are some known compatibility issues,\nthe packages are ready for evaluation and exploratory testing.\n\nThis article explains how to run Jenkins with Java 10 and 11 using Docker images and WAR files.\nIt also lists known issues and provides contributor guidelines.\n\nRunning in Docker\n\nIn order to simplify testing, we have created a new\njenkins/jenkins-experimental\nrepository on DockerHub.\nThis repository includes various Jenkins Core images, including Java 10 and Java 11 images.\nWe have also set up development branches and continuous delivery flows for Jenkins core,\nso now we can deliver patches for these images without waiting for weekly releases.\n\nYou can run the image simply as:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins-experimental:latest-jdk11\n\nThe following tags are available:\n\n2.127-jdk10, 2.128-jdk10 - Weekly releases packaged with Java 10\n\n2.127-jdk11, 2.128-jdk11 - Weekly releases packaged with Java 11\n\nlatest-jdk10 - Jenkins core build from the java10-support branch\n\nlatest-jdk11 - Automatic build from the core’s java11-support branch.\n\nblueocean-jdk10, blueocean-jdk11 - Experimental build, which bundles all Jenkins Pipeline and\nBlue Ocean patches required to run on Java 11.\nIf you want to try Pipeline, use this image\n\nJava 10/11 images are fully compatible with the official\njenkins/jenkins\nDocker image documentation,\ne.g. you can use plugins.txt to install plugins, mount volumes and pass extra options via environment variables.\n\nRunning Jenkins without Docker\n\nJava 10\n\nDownload Jenkins WAR for 2.127 or above\n(or build the experimental branch)\n\nRun WAR with the following command:\n\n${JAVA10_HOME}/bin/java --add-modules java.xml.bind -jar jenkins.war \\\n    --enable-future-java --httpPort=8080 --prefix=/jenkins\n\nJava 11\n\nDownload Jenkins WAR for 2.127 or above\n(or build the experimental branch)\n\nDownload the following libraries to the same directory as jenkins.war\n\njaxb-api-2.3.0.jar (save as jaxb-api.jar)\n\njaxb-core-2.3.0.1.jar (save as jaxb-core.jar)\n\njaxb-impl-2.3.0.1.jar (save as jaxb-impl.jar)\n\njavax.activation v.1.2.0 (save as javax.activation.jar)\n\nRun the following command:\n\nRun Jenkins with ${JAVA11_HOME}/bin/java \\\n    -p jaxb-api.jar:javax.activation.jar --add-modules java.xml.bind,java.activation \\\n    -cp jaxb-core.jar:jaxb-impl.jar \\\n    -jar jenkins.war --enable-future-java --httpPort=8080 --prefix=/jenkins\n\nCurrent state\n\nAs of June 17, we have achieved the following state:\n\nJenkins 2.127+ starts up successfully with\nOpenJDK 10.0.1 and\nOpenJDK 11+17-Debian-2 (preview)\n\nIt is possible to configure and run simple Freestyle jobs\n\nJenkins agents are able to start on Java 10, to connect to the controller and to execute Freestyle jobs\n\nAgents can be connected using Docker Plugin and Yet Another Docker Plugin\n\nJob DSL plugin works well on demo projects\n\nMaven Integration plugin can build\nplugin-pom -based\nJenkins plugins when running on agents with JDK 8\n\nIt is possible to create Folders and manage items in them\n\nIt is possible to configure Jenkins using Configuration-as-Code plugin\n\nJenkins is able to execute Groovy scripts in Script Console and\nGroovy Hooks\n\nKnown issues\n\nSo far we know about the following issues:\n\nPipeline crashes immediately on Java 10 and 11 ( JENKINS-46602)\n\nWorkaround: Pipeline: Support plugin should be updated to version 3.0-java11-alpha-1-rc684.d802f5d9aeed from the Incrementals repo\n( download)\n\nFIXED - Git Client plugin 2.7.2 cannot be installed when running with Java 11 build 18ea\n\nThere are many warnings about Illegal reflective access during execution\n(linked in JENKINS-40689).\n\nIn current Java 10 and 11 releases it does not lead to failures,\nbut we want to cleanup these warnings anyway\n\nFIXED - Configuration-as-Code plugin fails to export configurations on Java 10\n( JENKINS-51991)\n\nWe anticipate to discover and report more issues during the hackathon this week.\n\nContributing\n\nIf you discover incompatibilities in plugins, please\nreport issues in our bugtracker.\nWe have java10 and java11 labels for such issues.\n\nIf you are interested to try out Jenkins with Java 10 and 11 before June 22nd,\nyou may be interested to sign-up to the Jenkins and Java 10+ online hackathon.\nEverybody is welcome to join, independently of their Jenkins experience and amount of time they have available.\nExploratory testing is also within the hackathon’s scope.\nDuring this event, please also use the java10_hackathon label.\nIt will help us to track contributions and send folks some small \"thank you\" gifts for participating (details will be figured out during the hackathon).\n\nIf you want to contribute patches to the core,\nplease submit pull requests to java10-support or\njava11-support branches.\nIf the patches are compatible with Java 8, we will try to upstream them to weekly releases.\nFor plugin patches please create pull requests against main branches and then follow guidelines from plugin maintainers.\nIf you need additional reviews and you are a member of the jenkinsci organization,\nfeel free to mention the @jenkinsci/java10-support team in your PRs.\n\nLinks:\n\nDocker: jenkins/jenkins-experimental images\n\nJIRA: Java 10 compatibility\n\nJIRA: Java 11 compatibility\n\nJenkins and Java 10+ online hackathon","title":"Running Jenkins with Java 10 and 11 (experimental support)","tags":["core","developer","java10","java11"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-06-18T00:00:00.000Z","id":"88647b04-059d-549e-a712-a9dfe1d2427e","slug":"/blog/2018/06/18/remoting-over-message-bus/","strippedHtml":"About me\n\nMy name is Pham Vu Tuan, I am a final year undergraduate student from Singapore. This is the first time I participate in Google Summer of Code and contribute to an open-source organization. I am very excited to contribute this summer.\n\nMentors\n\nI have GSoC mentors who help me in this project Oleg Nenashev and Supun Wanniarachchi. Besides that, I also receive great support from developers in remoting project Devin Nusbaum and Jeff Thompson.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nThis project aims to develop a plugin in order to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins.\n\nWhy Kafka?\n\nWhen planning for this project, we want to use traditional message queue system such as ActiveMQ or RabbitMQ. However, after some discussion, we decided to have a try with Kafka with more suitable features with this project:\n\nKafka itself is not a queue like ActiveMQ or RabbitMQ, it is a distributed, replicated commit log. This helps to remove message delivery complexity we have in traditional queue system.\n\nWe need to support data streaming as a requirement, and Kafka is good at this aspect, which RabbitMQ is lack of.\n\nKafka is said to have a better scalability and good support from the development community.\n\nCurrent State\n\nThe project is reaching the end of the first phase and here are things we have achieved so far:\n\nSetup project as a set of Docker Compose components: Kafka cluster, Jenkins controller (with plugin) and a custom agent (JAR).\n\nCreate a PoC with new command transport implementation to support Kafka, which involves of command invocation, RMI, classloading and data streaming.\n\nMake neccessary changes in Remoting and Jenkins core to make them extensible for the use of this project.\n\nDecide to use Kafka as a suitable final implementation.\n\nWe planned to release an alpha version of this plugin by the end of this phase, but decided to move this release to the second phase because we need to wait for remoting and core patches to be released.\n\nArchitecture Overview\n\nThe project consists of multiple components:\n\nKafka Client Library - new command transport implementation, producer and consumer client logic.\n\nRemoting Kafka Plugin - plugin implementation with KafkaGlobalConfiguration and KafkaComputerLauncher.\n\nRemoting Kafka Agent - A custom JAR agent with remoting JAR packaged together with a custom Engine implementation to setup a communication channel with Kafka.\n\nAll the components are packaged together with Docker Compose.\n\nThe below diagram is the overview of the current architecture:\n\nWith this design, controller is not communicating with agent using direct TCP communication anymore, all the communication commands are transfered with Kafka.\n\nFeatures\n\n1. Kafka Global Configuration\n\n2. Custom agent start up as a JAR\n\nUser can start running an agent with the following command:\n\n3. Launch agents with Kafka\n\n4. Commands transferred between controller and agent over Kafka\n\nRemoting operations are being executed over Kafka. In the log you may see:\n\nClassloading (Classloader.fetch())\n\nLog streaming (Pipe.chunk())\n\n5. Run jobs with remoting Kafka\n\nIt is possible to run jobs on Agents connected over Kafka\n\nNext Phase Plan\n\nHere are the tasks planned for the next phase:\n\nSupport security for controller-agent connection:\n\nKafka authentication/authorization ( JENKINS-51472, JENKINS-51473).\n\nAgent secrets ( JENKINS-51470).\n\nImprove Kafka producer-consumer model to ensure reliability ( JENKINS-51942).\n\nBug fixing.\n\nRelease alpha version and address feedback ( JENKINS-51713).\n\nHow to run demo\n\nYou can try to run a demo of the plugin by following the instruction.\n\nLinks\n\nGitHub Repository\n\nProject Page\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Intro: Jenkins Remoting over Message Bus/Queue","tags":["plugins","gsoc","gsoc2018","remoting"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg","srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/77b35/pvtuan10.jpg 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/d4a57/pvtuan10.jpg 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/ef6ff/pvtuan10.webp 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/8257c/pvtuan10.webp 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/6766a/pvtuan10.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/pvtuan10.jpeg"},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/authors/pvtuan10/","twitter":null}]}},{"node":{"date":"2018-06-19T00:00:00.000Z","id":"4e634674-53af-534b-ad3d-0fb231791ac9","slug":"/blog/2018/06/19/jenkins-java10-hackathon-day2/","strippedHtml":"This week we have a\nJenkins & Java 10 Online Hackathon.\nThis is an open online event, where we work together on Jenkins core and plugins in order\nto find and fix compatibility issues, share experiences and have some fun.\nEverybody is welcome to join, independently of their Jenkins experience and amount of time they have available.\n\nAfter the kick off on Monday\nJenkins contributors have been working on Java 10 and Java 11 support in Jenkins.\nWe have already received contributions from 12 hackathon participants, and the number keeps growing.\nThere are still 3 days ahead, but we have already achieved some important results we want to share.\n\nJenkins Pipeline\n\nOne of our major efforts over last 2 days was to get Jenkins Pipeline working on\nJava 10+.\nWhen the hackathon started Jenkins Pipeline was not working at all,\nand it was a major blocker for Java support and for exploratory testing in particular.\nWe’ve been working together with Sam van Oort and Devin Nusbaum to fix the libraries in\nthe Jenkins core, Pipeline: Support plugin and Docker packaging.\n\nJust to summarize the result of two days in one screenshot…​\n\nYes, we have got it running!\nOver two days we have got from the \"Pipeline Crashes Immediately\"\nstate to the situation when the most of key Pipeline features are operational,\nincluding Scripted and Declarative Pipeline, Blue Ocean, shared libraries and\ndozens of plugins being used in the Jenkins plugin build flow.\n\nThere is still a lot of work to do to get the changes finalized,\nbut Jenkins Pipeline is available for testing on Java 10 and 11 now.\nIf you want to try it out, you can use a new jenkins/jenkins-experimental:blueocean-jdk10\nimage we have created.\nIt bundles all the required patches, so you can just run the following command to get started:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins-experimental:blueocean-jdk10\n\nIf you want to try more complex scenarions, see the\nRunning Jenkins with Java 10 and 11 blogpost\nand List of Required patches.\n\nWhat else?\n\nAlthough Pipeline is the most visible change,\nthere are other ongoing activities:\n\nDevin Nusbaum explored plugin startup issues we had with JDK 11ea+17\nand confirmed that we need to upgrade our images to JDK 11ea+18\n\nGianpaolo Macario is working on adopting the Java 10 experimental images in his\neasy-jenkins project\n\nSam van Oort and Devin Nusbaum are working on getting plugin build and test flows\nwhen using JDK 10 with Maven\n\nNicolas de Loof is working on cleaning up Illegal reflective access warnings in Jenkins components,\nusing the new Fields micro-library\n\nOlivier Lamy and Nicolas de Loof are updating the\nAnimal Sniffer plugin for Maven\nto make it compatible with Java 9 and above\n\nKohsuke Kawaguchi has released a repackaged version of ASM 6.2 we use in the project\n\nLast but not least, Liam Newman and Tracy Miranda helped us a lot to run the meetings\nand to get this hackathon organized\n\nThere are also other contributors working on exploratory testing and reporting\ndefects they discover.\nSee our status doc\nfor the full list.\n\nWhat’s next?\n\nTomorrow we will have 2 sessions:\n\nAt 8AM UTC we will have a sync-up.\nAccording to the requests from hackathon paticipants, we will have an intro session to Jenkins development for newcomers\n\nYouTube link\n\nAt 4PM UTC we will have a meeting with key JDK Project Jigsaw committers\n\nMark Reinhold, Mandy Chung and Paul Sandoz will join us to talk about\nJava 10/11 adoption\n\nYouTube link\n\nWe will also post participant links in our Gitter channel\n15 minutes before the meetings.\nIf you have any questions, please join the meetings or raise questions in the chat during the call.\n\nCan I still join the hackathon?\n\nYes, you can!\nIt is possible to hop in and hop off at any time.\nJust respond to the registration form,\njoin our Gitter channel and start hacking/testing.\n\nWe also have a number of\nnewbie-friendly issues\nyou can start from.\nSee our Kick-off session and\nslides for quick start guidelines.\n\nLinks\n\nDeveloper mailing list\n\nHackathon sync-up document\n\nRunning Jenkins with Java 10 and 11\n\nJenkins Online Meetup page","title":"Jenkins & Java 10+ Online Hackathon. Day 2 Update","tags":["events","community","developer","java10","java11"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-06-20T00:00:00.000Z","id":"c6c81158-09c3-5db5-9f8e-8e8ad25bd805","slug":"/blog/2018/06/20/anchore-image-scanning/","strippedHtml":"(adapted from this blog post by Daniel Nurmi)\n\nAs more and more Jenkins users ship docker containers, it is worth thinking about the security implications of this model, where the variance in software being included by developers has increased dramatically from previous models. Security implications in this context include what makes up the image, but also the components of the app that get bundled into your image. Docker images are increasingly becoming a “unit of deployment”, and if you look at a typical app (especially if it is a microservice), much of the components, libraries, and system are someone else’s code.\n\nAnchore exists to provide technology to act as a last line of defense, verifying the contents of these new deployable units against user specified policies to enforce security and compliance requirements. In this blog you will get a quick tour of this capability, and how to add the open-source Anchore Engine API service into your pipeline to validate that the flow of images you are shipping comply with your specific requirements, from a security point of view.\n\nKey among the fundamental tenets of agile development is the notion of “fail fast, fail often”, which is where CI/CD comes in: A developer commits code into the source code repository, such as git, that automatically triggers Jenkins to perform a build of the application that is then run through automated tests. If these tests fail the developer is notified immediately and can quickly correct the code. This level of automation increases the overall quality of code and speeds development.\n\nWhile some may feel that “fail fast” sounds rather negative (especially regarding security), you could better describe this process as “learn fast” as mistakes are found earlier in the development cycle and can be easily corrected. The increased use of CI/CD platforms such as Jenkins has helped to improve the efficiency of development teams and streamlined the testing process. We can leverage the same CI/CD infrastructure to improve the security of our container deployments.\n\nFor many organizations the last step before deploying an application is for the security team to perform an audit. This may entail scanning the image for vulnerable software components (like outdated packages that contain known security vulnerabilities) and verifying that the applications and OS are correctly configured. They may also check that the organization’s best practices and compliance policies have been correctly implemented.\n\nIn this post we walk through adding security and compliance checking into the CI/CD process so you can “learn fast” and correct any security or compliance issues early in the development cycle. This document will outline the steps to deploy Anchore’s open source security and compliance scanning engine with Jenkins to add analytics, compliance and governance to your CI/CD pipeline.\n\nAnchore has been designed to plug seamlessly into the CI/CD workflow, where a developer commits code into the source code management system, which then triggers Jenkins to start a build that creates a container image. In the typical workflow this container image is then run through automated testing. If an image does not meet your organization’s requirements for security or compliance then it makes little sense to invest the time required to perform automated tests on the image, it would be better to “learn fast” by failing the build and returning the appropriate reports back to the developer to allow the issue to be addressed.\n\nAnchore has published a plugin for Jenkins which, along with Anchore’s open source engine or Enterprise offering, allows container analysis and governance to be added quickly into the CI/CD process.\n\nRequirements\n\nThis guide presumes the following prerequisites have been met:\n\nJenkins 2.x installed and running on a virtual machine or physical server.\n\nAnchore-Engine installed and running, with accessible engine API URL (later referred to as) and credentials (later referred to as and) available - see Anchore Engine overview and installation.\n\nAnchore’s Jenkins plugin can work with single node installations or installations with multiple worker nodes.\n\nStep 1: Install the Anchore plugin\n\nThe Anchore plugin has been published in the Jenkins plugin registry and is available for installation on any Jenkins server. From the main Jenkins menu select Manage Jenkins, then Manage Plugins, select the Available tab, select and install Anchore Container Image Scanner.\n\nStep 2: Configure Anchore Plugin.\n\nOnce the Anchore Container Image Scanner plugin is installed - select Manage Jenkins menu click Configure System, and locate the Anchore Configuration section.  Select and enter the following parameters in this section:\n\nClick Enable Anchore Scanning\n\nSelect Engine Mode\n\nEnter your in the Engine URL text box - for example: http://your-anchore-engine.com:8228/v1\n\nEnter your and in the Engine Username and Engine Password fields, respectively\n\nClick Save\n\nAn example of a filled out configuration section is below, where we’ve used “http://192.168.1.3:8228/v1” as, “admin” as and “foobar” as :\n\nAt this point the Anchore plugin is configured on Jenkins, and is available to be accessed by any project to perform Anchore security and policy checks as part of your container image build pipeline.\n\nStep 3: Add Anchore image scanning to a pipeline build.\n\nIn the Pipeline model the entire build process is defined as code. This code can be created, edited and managed in the same way as any other artifact of your software project, or input via the Jenkins UI.\n\nPipeline builds can be more complex including forks/joins and parallelism. The pipeline is more resilient and can survive the controller node failure and restarts. To add an Anchore scan you need to add a simple code snippet to any existing pipeline code that first builds an image and pushes it to a docker registry. Once the image is available in a registry accessible by your installed Anchore Engine, a pipeline script will instruct the Anchore plugin to:\n\nSend an API call to the Anchore Engine to add the image for analysis\n\nWait for analysis of the image to complete by polling the engine\n\nSend an API call to the Anchore Engine service to perform a policy evaluation\n\nRetrieve the evaluation result and potentially fail the build if the plugin is configured to fail the build on policy evaluation STOP result (by default it will)\n\nProvide a report of the policy evaluation for review\n\nBelow is an example end-to-end script that will make a Dockerfile, use the docker plugin to build and push the a docker container image to dockerhub, perform an Anchore image analysis on the image and the result, and cleanup the built container.  In this example, we’re using a pre-configured docker-exampleuser named dockerhub credential for dockerhub access, and exampleuser/examplerepo:latest as the image to build and push.  These values would need to be changed to reflect your own local settings, or you can use the below example to extract the analyze stage to integrate an anchore scan into any pre-existing pipeline script, any time after a container image is built and is available in a docker registry that your anchore-engine service can access.\n\npipeline {\n    agent any\n    stages {\n        stage('build') {\n            steps {\n                sh'''\n                    echo 'FROM debian:latest’ > Dockerfile\n                    echo ‘CMD [\"/bin/echo\", \"HELLO WORLD....\"]' >> Dockerfile\n                '''\n                script {\n                    docker.withRegistry('https://index.docker.io/v1/', 'docker-exampleuser') {\n                        def image = docker.build('exampleuser/examplerepo:latest')\n                        image.push()\n                    }\n                }\n            }\n        }\n        stage('analyze') {\n            steps {\n                sh 'echo \"docker.io/exampleuser/examplerepo:latest `pwd`/Dockerfile\" > anchore_images'\n                anchore name: 'anchore_images'\n            }\n        }\n        stage('teardown') {\n            steps {\n                sh'''\n                    for i in `cat anchore_images | awk '{print $1}'`;do docker rmi $i; done\n                '''\n            }\n        }\n    }\n}\n\nThis code snippet writes out the anchore_images file that is read by the plugin to determine which image is to be added to Anchore Engine for scanning.\n\nThis code snippet can be crafted by hand or built using the Jenkins UI, for any Pipeline project. In the project configuration, select Pipeline Syntax from the Project.\n\nThis will launch the Snippet Generator where you can enter the available plugin parameters and press the Generate Pipeline Script button which will produce a snippet that you can use as a starting point.\n\nUsing our example from above, next we save the project:\n\nNote that once you are happy with your script, you could also check it into a Jenkinsfile, alongside the source code.\n\nStep 4: Run the build and review the results.\n\nFinally, we run the build, which will generate a report.  In the below screenshots, we’ve scanned the image docker.io/library/debian:latest to demonstrate some example results.  Once the build completes, the final build report will have some links that will take you to a page that describes the result of the Anchore Engine policy evaluation and security scan:\n\nIn this case, since we left the Fail build on policy STOP result as its default (True), the build has failed due to anchore-engine reporting a policy violation.  In order to see the results, click the Anchore Report (STOP) link:\n\nHere, we can see that there is a single policy check that has generated a ‘STOP’ action, which triggered due to a high severity vulnerability being found against a package installed in the image.  If there were only ‘WARN’ or ‘GO‘ check results here, they would also be displayed, but the build would have succeeded.\n\nWith the combination of Jenkins pipeline project capabilities, plus the Anchore scanner plugin, it’s quick and easy to add container image security scanning and policy checking to your Jenkins project.  In this example, we provide the mechanism for adding scanning to a Jenkins pipeline project using a simple policy that is doing an OS package vulnerability scan, but there are many more policy options that can be configured and loaded into Anchore Engine ranging from security checks to your own site-specific best practice checks (software licenses, package whitelist/blacklist, dockerfile checks, and many more).  For more information about the breadth of Anchore policies, you can find information about Anchore Engine configuration and usage here.\n\nFor more information on Jenkins Pipelines and Anchore Engine, check out the following information sources:\n\nhttps://anchore.com/\n\nhttps://anchore.com/opensource/\n\nhttps://github.com/anchore/anchore-engine\n\nhttps://anchore.freshdesk.com/support/home\n\nChat on Anchore open source slack","title":"Securing your Jenkins CI/CD Container Pipeline with Anchore (in under 10 minutes)","tags":["community","developer","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2018-06-21T00:00:00.000Z","id":"f197eae4-55a6-578b-aa6b-0f8809ef8608","slug":"/blog/2018/06/21/jenkins-x-devpods/","strippedHtml":"I use macOS day to day, and often struggle to keep my devtools up to date.\nThis isn’t any fault of packaging or tools, more just that I get tired of seeing the beachball:\n\nThe demands on dev machines grow, developers are now working across a more diverse\nset of technologies than just a JVM or a single scripting language these days.\n\nThis keeping up to date is a drag on time (and thus money).\nThere are lots of costs involved with development, and I\nhave written about\nabout the machine cost for development (how using something like GKE can be much\ncheaper than buying a new machine) but there is also the cost of a developer’s time.\nThankfully, there are ways to apply the same smarts here to save time as well as money.\n And time is money, or money is time?\n\nGiven all the work done in automating the detection and installation of required\ntools, environments, and libraries that goes on when you run ‘jx import’ in\nJenkins X,\nit makes sense to also make those available for development time,\nand the concept of “DevPods” was born.\n\nThe pod part of the name comes from the Kubernetes concept of pods (but you don’t have to know about Kubernetes or pods to use Jenkins X. There is a lot to Kubernetes but Jenkins X aims to provide a developer experience that doesn’t require you to understand it).\n\nWhy not use Jenkins X from code editing all the way to production,\nbefore you even commit the code or open a pull request?\nAll the tools are there, all the environments are there, ready to use (as they are used at CI time!).\n\nThis rounds out the picture: Jenkins X aims to deal with the whole lifecycle for you,\nfrom ideas/issues, change requests, testing, CI/CD, security and compliance verification,\nrollout and monitoring. So it totally makes sense to include the actual dev time tools.\n\nIf you have an existing project, you can create a DevPod by running (with the jx command):\n\njx create devpod\n\nThis will detect what type of project is (using build packs) and create a DevPod\nfor you with all the tools pre-installed and ready to go.\n\nObviously, at this point you want to be able to make changes to your app and try it out.\nEither run unit tests in the DevPod, or perhaps see some dev version of the app running in your browser (if it is a web app).\nWeb-based code editors have been a holy grail for some time, but never have quite taken off in the mainstream of developers (despite there being excellent ones out there, most developers prefer to develop on their desktop).\nIronically, the current crop of popular editors are based around\n“electron” which is actually a web technology stack,\nbut it runs locally (Visual Studio Code is my personal favourite at the moment),\nin fact Visual Studio Code has a Jenkins X extension (but you don’t have to use it):\n\nTo get your changes up to the Dev Pod, in a fresh shell run (and leave it running):\n\njx sync\n\nThis will watch for any changes locally (say you want to edit files locally on your desktop)\nand sync them to the Dev Pod.\n\nFinally, you can have the Dev Pod automatically deploy an “edit” version of the\napp on every single change you make in your editor:\n\njx create devpod --sync --reuse\n./watch.sh\n\nThe first command will create or reuse an existing Dev Pod and open a shell to it,\nthen the watch command will pick up any changes, and deploy them to your “edit” app.\nYou can keep this open in your browser, make a change, and just refresh it.\nYou don’t need to run any dev tools locally, or any manual commands in the Dev Pod to do this, it takes care of that.\n\nYou can have many DevPods running (jx get devpods), and you could stop them at the end of the day (jx delete devpod), start them at the beginning, if you like (or as I say: keep them running in the hours between coffee and beer). A pod uses resources on your cluster, and as the Jenkins X project fleshes out its support for dev tools (via things like VS Code extensions) you can expect even these few steps to be automated away in the near future, so many of the above instructions will not be needed!\n\nEnd-to-end experience\n\nSo bringing it all together, let me show a very wide (you may need to zoom out) screen shot of this workflow:\n\nFrom Left to Right :\n\nI have my editor (if you look closely, you can see the Jenkins X extension showing the state of apps,\npipelines and the environments it is deployed to).\n\nIn the middle I have jx sync running, pushing changes up to the cloud from the editor,\nand also the ‘watch’ script running in the DevPod. This means every change I make in my editor,\na temporary version of the app (and its dependencies are deployed).\n\nOn the right is my browser open to the “edit” version of the app.\nJenkins X automatically creates an “edit” environment for live changes,\nso if I make a change to my source on the left, the code is synced,\nbuild/tested and updated so I can see the change on the right\n(but I didn’t build anything locally, it all happens in the DevPod on Jenkins X).\n\nOn visual studio code: The Jenkins X extension for visual studio code can automate the creation of devpods and syncing for you. Expect richer support soon for this editor and others.\n\nExplaining things with pictures\n\nTo give a big picture of how this hangs together:\n\nIn my example, GitHub is still involved, but I don’t push any changes back to it until I am happy with the state of my “edit app” and changes.\nI run the editor on my local workstation and jx takes care of the rest.\nThis gives a tight feedback loop for changes. Of course, you can use any editor you like,\nand build and test changes locally (there is no requirement to use DevPods to make use of Jenkins X).\n\nJenkins X comes with some ready to go environments: development, staging and production (you can add more if you like).\nThese are implemented as Kubernetes namespaces to avoid the wrong app things talking to the wrong place.\nThe development environment is where the dev tools live: and this is also where the DevPods can live!\nThis makes sense as all the tools are available, and saves the hassle of you having slightly different\nversions of tools on your local workstation than what you are using in your pipeline.\n\nDevPods are an interesting idea, and at the very least a cool name!\nThere will be many more improvements/enhancements in this area, so keep an eye out for them.\nThey are a work in progress, so do check the documentation page for better ways to use them.\n\nSome more reading:\n\nDocs on DevPods on jenkins-x.io\n\nThe Visual Studio Code extension\nfor Jenkins X (what a different world: an open source editor by Microsoft!)\n\nJames Strachan’s great intro\nto Jenkins X talk at Devoxx-UK also   includes a DevPod demo","title":"Using Jenkins X DevPods for development","tags":["jenkinsx","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2018-06-26T00:00:00.000Z","id":"40137c5d-c5ac-54d7-87d1-c1c8460bf136","slug":"/blog/2018/06/26/jenkins-essentials-at-eclipsecon-france/","strippedHtml":"Jenkins Essentials has been renamed to Jenkins Evergreen since this was written.\n\nIt’s been far too long since we posted an update on\nJenkins Essentials. While it’s not\nquite ready for users to start trying it out, we\ncontinue hacking away on all\nmanner of changes to support the safe and automatic upgrades of a running\nJenkins environment. In the meantime, Jenkins contributor\nBaptiste Mathus took some time to introduce and\ndemonstrate Jenkins Essentials at the recently held\nEclipseCon France,\n\nFrom the talk’s abstract:\n\nThe Jenkins Project is working on providing its users with a brand new,\nstrongly opinionated, and continuously delivered distribution of Jenkins:\nJenkins Essentials. Constantly self-updating, including auto-rollback, with\nan aggressive subset of verified plugins.\n\nIn this talk, we will detail how this works: how we run and upgrade Jenkins\nitself. How instances are continuously sending health data back to help\nautomated decision-making about the quality of given new release, and decide to\ngeneralize a given version of Jenkins to the whole fleet, or roll it back.\n\nWe will end giving an overview of the status of the project: how it’s managed\nin a fully open manner, from design to code and its infrastructure, and all the\nradical solutions to imagine and the upcoming challenges for the next months.\n\nI hope you enjoy the video\n\nYou can learn more about Jenkins Essentials from\nGitHub repository, or join us\non our\nGitter channel.","title":"Presenting Jenkins Essentials at EclipseCon France","tags":["jenkinsevergreen","evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2018-06-27T00:00:00.000Z","id":"fdf34f60-9243-5d28-b9d3-ea140833ede2","slug":"/blog/2018/06/27/lessons-java10-hackathon/","strippedHtml":"Last week I participated in the\nJenkins & Java 10 Online Hackathon.\nIt was my first Jenkins hackathon and I roped in\nJonah Graham to do some pair-programming.\nThe hackathon featured JDK Project Jigsaw committers Mandy Chung and Paul Sandoz,\nas well as Jenkins creator Kohsuke Kawaguchi.\nIt was a great opportunity for me to learn a lot about Jenkins and Java 10.\n\nWhy Java 10?\n\nWith the\nJava 8 EoL data looming,\nthe focus was on the current available version of Java, Java 10.\nJava 10 offers some nice new features and APIs, not least\nimproved docker container integration.\nWe learned from Paul of a number of projects with Java 10 migration success stories including Elasticsearch, Kafka & Netty.\n\nAt the beginning of the hackathon week, the Jenkins Pipeline feature would crash out when using Java 10.\nThis was resolved with a number of fixes including the upgrade of the\nASM library.\nThen it was nice to see things\nup and running with Java 10.\n\nGetting up & running\n\nThe first steps were to do some exploratory testing using\nJenkins with Java 10 via Docker, thanks to\nOleg for providing clear instructions.\nThis was boringly straightforward as most things worked and we only found one\nissue to report.\nNext to try to get some patches in, we needed to set-up a dev environment.\nThe live session gave us what we needed to set up a\nplugin or\ncore dev environment.\nOne open question we had was whether Jenkins has semantic versioning and\nAPI tools\nto help identify when you might be breaking backwards compatibility.\nOverall it was straightforward to get a dev environment up and running.\n\nJava 10 New APIs\n\nThe next step was to find an issue which we could help resolve.\nMany of the Java 10 issues were related to 'Illegal reflective access' from various plugins or third-party libraries.\nHowever after investigating a couple, removing these warnings required a good architectural knowledge of the plugin or core code itself.\nIn the end we decided that messing around with classloaders or attempting to upgrade version of jdom was not one for the newbies.\n\nInstead we looked at\nremoving reflection\nin cases of isAccessible calls.\nWe found the\nProcessHandle\napi very useful and a good replacement for some misuse of reflection, and even better it made the code work on Windows too.\nMandy also pointed us to look at the\nLookup api\nas possible alternate to findClass calls.\n\nMulti-Release JAR Builds\n\nUsing new APIs is all well and good but presents a problem when you want to maintain backwards compatibility with Java 8.\nHence the need for some sort of multi-jar solution -\nNicolas De loof proposed one such solution for\nmulti-release jars with Maven for this case.\n\nsun.misc.Signal\n\nThe Java Signal API is being deprecated, but so far no replacement APIs\nare available for signal handling.\nJenkins makes use of the Signal APIs so a big question for the Jigsaw team was whether this would be replaced going forward.\nKohsuke pointed out how it is important for Java to maintain this UNIX like behaviour as it shouldn’t matter to end users that Jenkins is written in Java.\nIt seems these APIs will be replaced in due course, they just\naren’t there right now.\n\nCollaboration, Collaboration, Collaboration\n\nIt was great to have the discussions with the Jigsaw team.\nThey reminded us how they need to know the Java use cases out there and how their team uses these to feed into their development process.\nIn turn, the hackathon had Jenkins community members participate, for instance\neasy-jenkins was up and running with Java 10 by the end of the week.\nThe hackathon had a great feeling of community spirit and was a reminder why collaborations with communities and also between different communities can be powerful and fun for all involved.\n\nAt the end of the week Jonah and I were both happy that we made our first Jenkins contributions (which were reviewed and merged quickly).\nThanks to all who participated and made it highly enjoyable, especially Oleg for great organization.\nI look forward to the next one!","title":"What I learned from the Jenkins & Java 10+ Hackathon","tags":["events","community","developer","java10","java11"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}},"publicURL":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/tracymiranda.jpg"},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda/","twitter":"tracymiranda"}]}},{"node":{"date":"2018-06-27T00:00:00.000Z","id":"c68773a2-1f81-56bc-af65-71e0703df409","slug":"/blog/2018/06/27/new-login-page/","strippedHtml":"This blog post gives an introduction to the new design for the login and signup forms and Jenkins is (re)starting pages introduced in Jenkins 2.128.\nThe first part of the blog post is an introduction to the new design and UX for Jenkins users.\nThe later part is talking about extensibility in a more technical manner, aimed at plugin developers.\n\nOverview\n\nThe recent changes to some core pages provide new design and UX and further dropping all external dependencies to prevent\nany possible malicious javascript introduced by third party libraries.\nTo be clear, this never was an issue with previous releases of Jenkins, but having read this article, this author believes that the article has good points and leading by example may raise awareness of data protection.\n\nThis meant to drop the usage of the jelly layout lib (aka xmlns:l=\"/lib/layout\") and as well the page decorators it\nsupported. However there is a new SimplePageDecorator extension point (discussed below) which can be used to modify the look and feel for the login and sign up page.\n\nThe following pages have given a new design:\n\nJenkins is (re)starting pages\n\nLogin\n\nSign up\n\nUX enhancement\n\nForm validation has changed to give inline feedback about data validation errors in the same form.\n\nLogin\n\nSign up\n\nThe above image shows that the validation is now done on all input fields instead of before breaking on the\nfirst error found, which should lead to fewer retry cycles.\n\nInstead of forcing the user to repeat the password, the new UX introduces the possibility to display the password in\nclear text. Further a basic password strength meter indicates password strength to the user while she enters the password.\n\nCustomizing the UI\n\nThe re-/starting screens do not support the concept of decorators very well, hence the decision to not support them for these pages.\n\nThe SimplePageDecorator is the key component for customization and uses three different files to\nallow overriding the look and feel of the login and signup pages.\n\nsimple-head.jelly\n\nsimple-header.jelly\n\nsimple-footer.jelly\n\nAll of the above SimplePageDecorator Jelly files are supported in the login page. The following snippet is a minimal excerpt\nof the login page, showing how it makes use of SimplePageDecorator.\n\nThe sign-up page only supports the simple-head.jelly:\n\nSimplePageDecorator - custom implementations\n\nHave a look at Login Theme Plugin, which allows you to\nconfigure your own custom content to be injected into the new login/sign-up page.\n\nTo allow easy customisation the decorator only implements one instance by the principal \"first-come-first-serve\".\nIf jenkins finds an extension of the SimplePageDecorator it will use the Jelly files provided by that plugin.\nOtherwise Jenkins will fall back to the default implementation.\n\n@Extension\npublic class MySimplePageDecorator extends SimplePageDecorator {\n   public String getProductName() {\n     return \"MyJenkins\";\n   }\n}\n\nThe above will take override over the default because the default implementation has a very low ordinal ( @Extension(ordinal=-9999))\nIf you have competing plugins implementing SimplePageDecorator, the implementation with the highest ordinal will be used.\n\nAs a simple example, to customize the logo we display in the login page, create a simple-head.jelly with the following content:\n\nTo customize the login page further, create a simple-header.jelly like this:\n\nWelcome to ${it.productName}!\n\nFor example, I used this technique to create a prototype of a login page for a CloudBees product I am working on:\n\nConclusion\n\nWe hope you like the recent changes to some core pages and as well the new design and UX. We further hope you feel enabled to\ncustomize the look and feel to adopt your needs with the SimplePageDecorator.","title":"New design, UX and extensibility digest for login page et. al.","tags":["core","developer","ux"],"authors":[{"avatar":null,"blog":null,"github":"scherler","html":"<div class=\"paragraph\">\n<p>Thorsten Scherler has a broad background in open source consulting, training and solutions since 2002.\nHe&#8217;s an engineer at CloudBees, working full time on the <a href=\"https://jenkins.io/projects/blueocean/\">Blue Ocean</a> front end.\nHe left Germany in 2003 after finishing his university degrees and has been living in sunny Seville ever since.</p>\n</div>","id":"scherler","irc":null,"linkedin":null,"name":"Thorsten Scherler","slug":"/blog/authors/scherler/","twitter":"thorScherler"}]}},{"node":{"date":"2018-07-02T00:00:00.000Z","id":"0c991121-dfec-5b10-a945-33a402cf3ddd","slug":"/blog/2018/07/02/new-api-token-system/","strippedHtml":"About API tokens\n\nJenkins API tokens are an authentication mechanism that allows a tool (script, application, etc.) to impersonate a user\nwithout providing the actual password for use with the Jenkins API or CLI.\nThis is especially useful when your security realm is based on a central directory, like Active Directory or LDAP,\nand you don’t want to store your password in scripts.\nRecent versions of Jenkins also make it easier to use the remote API when using API tokens to authenticate,\nas no CSRF tokens need to be provided even with CSRF protection enabled.\nAPI tokens are not meant to — and cannot — replace the regular password for the Jenkins UI.\n\nPrevious problems\n\nWe addressed two major problems with the existing API token system in Jenkins 2.129:\n\nFirst, reported in JENKINS-32442,\nuser accounts in Jenkins have an automatically generated API token by default.\nAs these tokens can be used to authenticate as a given user, they increase the attack surface of Jenkins.\n\nThe second problem was reported in JENKINS-32776 :\nThe tokens were previously stored on disk in an encrypted form.\nThis meant that they could be decrypted by unauthorized users by leveraging another security vulnerability,\nor obtained, for example, from improperly secured backups, and used to impersonate other users.\n\nNew approach\n\nThe main objective of this new system is to provide API tokens that are stored in a unidirectional way on the disk,\ni.e. using a hashing algorithm (in this particular case SHA-256).\n\nWhile this means that you will not be able to see the actual API tokens anymore after you’ve created them,\nseveral features were added to mitigate this potential problem:\n\nYou can have multiple active API tokens at the same time.\nIf you don’t remember an API token’s value anymore, just revoke it.\n\nYou can name your tokens to know where they are used (and rename them after creation if desired).\nWe recommend that tokens use a name that indicates where (for example the application, script, or host) where it will be used.\n\nYou can track the usage of your tokens.\nEvery token keeps a record of the number of uses and the date of the last use.\nThis will allow you to better know which tokens are really used and which are no longer actively required.\nJenkins also encourages users to rotate old API tokens by highlighting their creation date in orange after six months, and in red after twelve months.\nThe goal is to remind the user that tokens are more secure when you regenerate them often:\nThe longer a token is around, perhaps passed around in script files and stored on shared drives,\nthe greater the chance it’s going to be accessed by someone not authorized to use it.\n\nFigure 1. Token usage tracking\n\nYou can revoke API tokens.\nWhen you know that you are not using a given token anymore, you can revoke it to reduce the risk of it getting used by unauthorized users.\nSince you can have multiple API tokens, this allows fine-grained control over which scripts, hosts, or applications are allowed to use Jenkins as a given user.\n\nMigrating to new API tokens\n\nTo help administrators migrate their instances progressively, the legacy behavior is still available, while new system is also usable.\n\nOn the user configuration page, the legacy token is highlighted with a warning sign,\nexplaining that users should revoke it and generate a new one (if needed) to increase security.\n\nFigure 2. Legacy token renewal still possible\n\nNew options for administrators\n\nIn order to let administrators control the pace of migration to the new API token system,\nwe added two global configuration options in the \"Configure Global Security\" page in the brand new \"API Token\" section:\n\nAn option to disable the creation of legacy API tokens on user creation.\n\nAn option to disable the recreation of legacy API tokens by users, forcing them to only use the new, unrecoverable API tokens.\n\nBoth options are disabled by default for new installations (the safe default), while they’re enabled when Jenkins is upgraded from before 2.129.\n\nFigure 3. Security Configuration options\n\nFigure 4. Remove legacy token and disable the re-creation\n\nNew administrator warnings\n\nWhen upgrading to Jenkins 2.129, an administrative monitor informs admins about the new options described above, and recommend disabling them.\n\nAnother administrative warnings shows up if at least one user still has a legacy API token.\nIt provides central control over legacy tokens still configured in the Jenkins instance, and allows revoking them all.\n\nFigure 5. Legacy token monitoring page\n\nSummary\n\nJenkins API tokens are now much more flexible: They allow and even encourage better security practices.\nWe recommend you revoke legacy API tokens as soon as you can, and only use the newly introduced API tokens.","title":"Security Hardening: New API token system in Jenkins 2.129+","tags":["community","core","security","upgrade"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/c09ea/wadeck.jpg","srcSet":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/534e5/wadeck.jpg 32w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/99887/wadeck.jpg 64w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/c09ea/wadeck.jpg 128w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/5f0ee/wadeck.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/59a6b/wadeck.webp 32w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/cbb78/wadeck.webp 64w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/96250/wadeck.webp 128w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/890ef/wadeck.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}},"publicURL":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/wadeck.jpg"},"blog":null,"github":"wadeck","html":"<div class=\"paragraph\">\n<p>Wadeck is a member of the <a href=\"/security/#team\">Jenkins security team</a>, working on fixes and improvements to Jenkins security.\nHe likes to provide solutions that are both useful and easy to use.</p>\n</div>","id":"wadeck","irc":null,"linkedin":null,"name":"Wadeck Follonier","slug":"/blog/authors/wadeck/","twitter":null}]}},{"node":{"date":"2018-07-02T00:00:00.000Z","id":"44cd4bd6-4c8f-5fdd-8f54-c99da078882e","slug":"/blog/2018/07/02/whats-new-declarative-piepline-13x-sequential-stages/","strippedHtml":"We recently released version 1.3 of Declarative Pipelines, which includes a couple significant new features. We’re\ngoing to cover these features in separate blog posts. The next post will show the new ability to restart a completed\nPipeline run starting from a stage partway through the Pipeline, but first, let’s look at the new sequential stages\nfeature.\n\nSequential Stages\n\nIn Declarative 1.2, we added the ability to define stages to run in parallel\nas part of the Declarative syntax. Now in Declarative 1.3, we’ve added another way to specify stages nested within other\nstages, which we’re calling \"sequential stages\".\n\nRunning Multiple Stages in a Parallel Branch\n\nOne common use case is running build and tests on multiple platforms. You could already do that with parallel stages,\nbut now you can run multiple stages in each parallel branch giving you more visibility into the progress of your\nPipeline without having to check the logs to see exactly which step is currently running where, etc.\n\nYou can also\nuse stage directives, including post, when, agent, and all the others covered in the\nPipeline Syntax reference\nin your sequential stages, letting you control behavior for different parts of each parallel branch.\n\nIn the example below, we are running builds on both Windows and Linux, but only want to deploy if we’re on the master branch.\n\npipeline {\n    agent none\n\n    stages {\n        stage(\"build and deploy on Windows and Linux\") {\n            parallel {\n                stage(\"windows\") {\n                    agent {\n                        label \"windows\"\n                    }\n                    stages {\n                        stage(\"build\") {\n                            steps {\n                                bat \"run-build.bat\"\n                            }\n                        }\n                        stage(\"deploy\") {\n                            when {\n                                branch \"master\"\n                            }\n                            steps {\n                                bat \"run-deploy.bat\"\n                            }\n                        }\n                    }\n                }\n\n                stage(\"linux\") {\n                    agent {\n                        label \"linux\"\n                    }\n                    stages {\n                        stage(\"build\") {\n                            steps {\n                                sh \"./run-build.sh\"\n                            }\n                        }\n                        stage(\"deploy\") {\n                             when {\n                                 branch \"master\"\n                             }\n                             steps {\n                                sh \"./run-deploy.sh\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nRunning Multiple Stages with the Same agent, or environment, or options\n\nWhile the sequential stages feature was originally driven by users wanting to have multiple stages in parallel branches,\nwe’ve found that being able to group multiple stages together with the same agent, environment, when, etc has a lot\nof other uses. For example, if you are using multiple agents in your Pipeline, but would like to be sure that stages using\nthe same agent use the same workspace, you can use a parent stage with an agent directive on it, and then all the stages\ninside its stages directive will run on the same executor, in the same workspace. Another example is that until now, you\ncould only set a timeout for the entire Pipeline or an individual stage. But by using a parent stage with nested stages,\nyou can define a timeout in the parent’s options directive, and that timeout will be applied for the execution of the\nparent, including its nested stages. You may also want to conditionally control the execution of multiple stages. For example,\nyour deployment process may be spread across multiple stages, and you don’t want to run any of those stages unless you’re on\na certain branch or some other criteria is satisified. Now you can group all those related stages together in a parent\nstage, within its stages directive, and have a single when condition on that parent, rather than having to copy an\nidentical when condition to each of the relevant stages.\n\nOne of my favorite use cases is shown in the example below. In Declarative 1.2.6, we added the input directive for stages.\nThis will pause the execution of the Pipeline until a user confirms that the Pipeline should continue, using the Scripted\nPipeline input step. The input directive is evaluated before the stage enters its agent, if it has one specified, and\nbefore the stage’s when condition, if specified, is evaluated. But if you’re using a top-level agent for most of your\nstages, you’re still going to be using that agent’s executor while waiting for input, which can be a waste of resources.\nWith sequential stages, you can instead use agent none at the top-level of the Pipeline, and group the stages using a common\nagent and running before the stage with the input directive together under a parent stage with the required agent\nspecified. Then, when your Pipeline reaches the stage with input, it will no longer be using an agent’s executor.\n\npipeline {\n    agent none\n\n    stages {\n        stage(\"build and test the project\") {\n            agent {\n                docker \"our-build-tools-image\"\n            }\n            stages {\n               stage(\"build\") {\n                   steps {\n                       sh \"./build.sh\"\n                   }\n               }\n               stage(\"test\") {\n                   steps {\n                       sh \"./test.sh\"\n                   }\n               }\n            }\n            post {\n                success {\n                    stash name: \"artifacts\", includes: \"artifacts/**/*\"\n                }\n            }\n        }\n\n        stage(\"deploy the artifacts if a user confirms\") {\n            input {\n                message \"Should we deploy the project?\"\n            }\n            agent {\n                docker \"our-deploy-tools-image\"\n            }\n            steps {\n                sh \"./deploy.sh\"\n            }\n        }\n    }\n}\n\nThese are just a few example of the power of the new sequential stages feature in Declarative 1.3.\nThis new feature adds another set of significant use cases that can be handled smoothly using Declarative Pipeline.\nIn my next post, I’ll show the another highly requested feature - the new ability to restart a Pipeline run from any stage in that Pipeline.","title":"What's New in Declarative Pipeline 1.3: Sequential Stages","tags":["pipeline"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer/","twitter":"abayer"}]}},{"node":{"date":"2018-07-05T00:00:00.000Z","id":"b1c89781-ce73-5eec-8d31-bf7f51174f63","slug":"/blog/2018/07/05/remoting-over-message-bus-alpha-release/","strippedHtml":"I am happy to announce that we have recently released an alpha version of Remoting Kafka Plugin to the Experimental Update Center. You can check the CHANGELOG to see the features included in this initial release.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nRemoting Kafka Plugin is a plugin developed under Jenkins Google Summer of Code 2018. The plugin is developed to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins. A quick introduction of the project can be found in this introduction blogpost.\n\nHow to use the plugin?\n\nThe instructions to run the plugin in alpha version are written here. Feel free to have a try and let us know your feedback on Gitter or the mailing list.\n\nLinks\n\nAlpha Changelog\n\nIntroduction Blogpost\n\nGitHub Repository\n\nProject Page\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Update: Alpha release of Remoting Kafka Plugin","tags":["plugins","gsoc","gsoc2018","remoting","alpha-release"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg","srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/77b35/pvtuan10.jpg 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/d4a57/pvtuan10.jpg 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/ef6ff/pvtuan10.webp 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/8257c/pvtuan10.webp 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/6766a/pvtuan10.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/pvtuan10.jpeg"},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/authors/pvtuan10/","twitter":null}]}},{"node":{"date":"2018-07-10T00:00:00.000Z","id":"b0312033-b8b4-5dbc-b5a3-6c06dd49dcb5","slug":"/blog/2018/07/10/jenkins-essentials-on-aws/","strippedHtml":"Jenkins Essentials has been renamed to Jenkins Evergreen since this was written.\n\nJenkins Essentials is about providing a distribution of Jenkins in less than five minutes and five clicks.\nOne of the main ideas to make this a reality is that Jenkins will be autoconfigured with sane defaults for the environment it is running in.\n\nWe are happy to report we recently merged the change that provides this feature for AWS.\nWe use an AWS CloudFormation template to provision a working version of Jenkins Essentials, automatically configured to:\n\ndynamically provision EC2 agents, using the EC2 plugin;\n\nuse the Artifact Manager on S3 plugin, so that artifacts are not stored anymore on the controller’s file system, but directly in an S3 bucket.\n\nI recorded a short demo video last week showing the basics of this:\n\nWhile there are still many items to complete to provide a usable version for end-users, we are making steady progress towards it.\n\nYou can learn more about Jenkins Essentials from the\nGitHub repository, or join us\non our\nGitter channel.","title":"Jenkins Essentials flavor for AWS","tags":["jenkinsevergreen","evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}},"publicURL":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/batmat.jpg"},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat/","twitter":"bmathus"}]}},{"node":{"date":"2018-07-13T00:00:00.000Z","id":"970120e2-6f31-5ddd-9fed-9bfcc306c79a","slug":"/blog/2018/07/13/jenkins-user-conference-china.adoc/","strippedHtml":"On June 30, 2018 in sunny Beijing, the capital of China, we welcomed over 200 attendees to Jenkins User Conference China (JUCC). This is the first JUCC in Beijing and we are overwhelmed by the interest and love for Jenkins. The conference had sessions in DevOps, Continuous Delivery, Jenkins X, Pipeline, and Container. The GreatOps community, event host, invited John Willis, a thought leader of DevOps to deliver the keynote speech. John’s topic was \"DevOps: Almost 10 years - What A  Strange Long Trip It’s Been.\" It was very insightful to learn of the history of DevOps and John’s point of view on the practice.\n\nLily Lin from Micro Focus presented, \"How to practice CI/CD for large-scale micro service based on Jenkins Pipeline.\"\n\nJames Rawlings, one of the core Jenkins X contributors traveled from the United Kingdom to present, \"Jenkins X for the future, Easy CI/CD for Kubernetes.\"\n\nAfter James’ presentation, there were many questions about Jenkins X, Jenkins users in China are very interested in Jenkins X. We all posed Jenkins \"X\" gesture.\n\nWe also invite Shuwei Hao from Alibaba, Michael Hüttermann who is the author of DevOps for Developers, Xiang Lu from CPI.\n\nMr Huaqiang Li and Xiaojie Zhao ran a workshop for help attendees master Jenkins Pipeline and Jenkins X in the cloud environment.\n\nHere are additional pictures from our event\n\nSpecial THANKS to BC who is the co-organizer of JUCC to host the main track and Alyssa and Maxwell for your help with our event.\n\nNext up, Jenkins User Conference China Shenzhen in November.\nLet’s Jenkins X and DevOps!","title":"Jenkins User Conference China Beijing Recap","tags":["event","juc"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Forest runs\nthe <a href=\"https://www.meetup.com/Shanghai-Jenkins-Area-Meetup/\">Shanghai Jenkins Area Meetup</a> and <a href=\"https://www.bagevent.com/event/jenkins-user-conference\">Jenkins User Conference China</a>.</p>\n</div>","id":"fjing","irc":null,"linkedin":null,"name":"Forest Jing","slug":"/blog/authors/fjing/","twitter":null}]}},{"node":{"date":"2018-07-17T00:00:00.000Z","id":"2629d18c-2a10-59b8-8b11-b24bb8b2b87d","slug":"/blog/2018/07/17/simple-pull-request-plugin/","strippedHtml":"About me\n\nI am Abhishek Gautam, 3rd year student from Visvesvaraya National Institute of\ntechnology, India, Nagpur. I was a member of ACM Chapter and Google student developer club of my\ncollege. I am passionate about automation.\n\nProject Summary\n\nThis is a GSoC 2018 project.\n\nThis project aims to develop a pull request Job Plugin. Users should be able to\nconfigure job type using YAML file placed in root directory of the\nGit repository being the subject of the pull request. The plugin should interact with various\nplatforms like Bitbucket, Github, Gitlab, etc whenever a pull request is created or updated.\n\nPlugin detects the presence of certain types of reports at conventional locations,\nand publish them automatically. If the reports are not present at their respective conventional\nlocation, the location of the report can be configured in the YAML file.\n\nMy mentors are\nOleg Nenashev (Org Admin),\nMartin d’Anjou,\nKristin Whetstone,\nJeff Knurek\n\nBenefits to the community\n\nProject administrators will be able to handle pull request builds more easily.\n\nBuild specifications for pull requests can be written in a concise declarative format.\n\nBuild reports will be automatically published to Github, Bitbucket, etc.\n\nBuild status updates will be sent to git servers automatically.\n\nUsers will not have to deal with pipeline code.\n\nIf there will be no merge conflicts or build failures, the PR can be merged into target branch.\n\nPhase 1 blog post\n\nPlease see Phase 1 blog post\n\nImplementations till now\n\nAlpha version of the plugin is released. It supports all features of Multi-Branch Pipeline and offers the following features.\n\nBuild description is defined via YAML file stored within the SCM repo. This plugin\nwill depend on GitHub plugin, Bitbucket plugin, Gitlab plugin if users will be\nusing respective platforms for their repositories.\n\nConversion of YAML to Declarative Pipeline: A class YamlToPipeline\nis written which will load the \"Jenkinsfile.yaml\" and make use of PipelineSnippetGenerator class\nto generate Declarative pipeline code.\n\nReporting of results, only xml report types is supported for now.\n\nUse of Yaml file (Jenkinsfile.yaml) from target branch.\n\nGit Push step: To push the changes of pull request to the target branch. This is implemented\nusing git-plugin, PushCommand is used for this from git-plugin. credentialId,\nbranch name and repository url for interacting with Github, Bitbucket, etc\nwill be taken automatically from \"Branch-Source\" (Users have to fill this\ndetails of branch source in job configuration UI). (You can see\nHow to run the demo)\n\nStepConfigurator: To generate pipeline code for all supported steps in Jenkins. This is using\nJenkins configuration-as-code plugin (JCasC plugin) to configure a particular step object and\nthen that step object is passed to Snippetizer.object2Groovy() method to generate the script of that step.\n\nJenkinsfile.yaml example\n\nFor the phase 1 prototype demonstration, the following yaml file was used.\nNote that this format is subject to change in the next phases of the project,\nas we formalise the yaml format definition.\n\n#  Docker image agent example\nagent:\n label: my_label\n customWorkspace: path_to_workspace\n dockerImage: maven:3-alpine\n args: -v /tmp:/tmp\n\n  tools:\n    maven : maven_3.0.1\n    jdk : jdk8\n\nconfiguration:\n  # Push PR changes to the target branch if the build succeeds.\n  # default value is false\n  pushPrOnSuccess: false\n\n  # Trusted user to approve pull requests\n  prApprovers:\n    - username1\n    - username2\n    - username3\n\nenvironment:\n  variables:\n    variable_1: value_1\n    variable_2: value_2\n\n  # Credentials contains only two fields. credentialId must be present in the Jenkins Credentials\n  credentials:\n    - credentialId : fileCredentialId\n      variable : FILE\n\n      # In user scripts Username and Password can be accessed by LOGIN_USR and LOGIN_PSW\n      # respectively as environment variales\n    - credentialId : dummyGitRepo\n      variable : LOGIN\n\nstages:\n  - name: stage1\n    agent: any\n    steps:\n      - sh: \"scripts/hello\"\n      - sleep:\n          time: 2\n          unit: SECONDS\n      - sleep: 2\n      - junit:\n          testResults: \"target/**.xml\"\n          allowEmptyResults: true\n          testDataPublishers:\n            - AutomateTestDataPublisher\n            - JunitResultPublisher:\n                urlOverride: \"urlOverride\"\n    # Post section for \"stage1\". All Conditions which are available in Jenkins\n    # declarative pipeline are supported\n    post:\n      failure:\n        - sh: \"scripts/hello\"\n\n# Outer post section. Just like declarative pipeline.\npost:\n  always:\n    - sh: \"scripts/hello\"\n\nCoding Phase 2 plans (Completed)\n\nDecide a proper YAML format to use for Jenkinsfile.yaml\n\nCreate Step Configurator for SPRP plugin. JENKINS-51637.\nThis will enable users to use Pipeline steps in Jenkinsfile.yaml.\n\nAutomatic indentation generation in the generated PipelineSnippetGenerator class.\n\nWrite tests for the plugin.\n\nCoding Phase 3 plans\n\nTest Multi-Branch Pipeline features support:\n\nSupport for webhooks ( JENKINS-51941)\n\nCheck if trusted people have approved a pull request and start build accordingly ( JENKINS-52517)\n\nFinalize documentation ( JENKINS-52518)\n\nRelease 1.0 ( JENKINS-52519)\n\nPlugin overview blog post\n\nCoding Phase 3 plans after release\n\nSupport the “when” Declarative Pipeline directive ( JENKINS-52520)\n\nNice2have: Support hierarchical report types ( JENKINS-52521)\n\nAdd unit tests, JenkinsRule tests, and ATH tests ( JENKINS-52495, JENKINS-52496)\n\nAutomatic Workspace Cleanup when PR is closed ( JENKINS-51897)\n\nRefactor snippet generator to extensions ( JENKINS-52491)\n\nPhase 3 Jira Epic\n\nPhase 2 evaluation presentation video\n\nVideo:\n\nPhase 2 evaluation presentation slides\n\nHow to reach me\n\nEmail: gautamabhishek46@gmail.com\n\nGitter room: https://gitter.im/Jenkinsci/simple-pull-request-job-plugin\n\nReferences\n\nProject repository\n\nProject page\n\nGitter chat\n\nBug Tracker\n\nDemo Repository\n\nPhase 2 Presentation video (July 12, 2018)\n\nPhase 2 Presentation Slides (July 12, 2018)","title":"Pipeline as YAML: Alpha release","tags":["gsoc2018","plugin","pipeline","yaml"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg","srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/77b35/abhishek_gautam.jpg 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/d4a57/abhishek_gautam.jpg 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/68974/abhishek_gautam.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/ef6ff/abhishek_gautam.webp 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/8257c/abhishek_gautam.webp 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/6766a/abhishek_gautam.webp 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/22bfc/abhishek_gautam.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/abhishek_gautam.JPG"},"blog":null,"github":"gautamabhishek46","html":"<div class=\"paragraph\">\n<p>Abhishek is a 3rd year Computer Science student from Visvesvaraya National\nInstitute of Technology, Nagpur, India. He has done some website projects for\nhis college technical festival. He is also a regular competitive programmer\n(abhishekg1128 at codechef). He has done two internships as a Game Programmer\nas well. He was a member of ACM Chapter and Google student developer club of his\ncollege. His interest in automation motivated his participation in the Jenkins\nGSOC 2018 program.</p>\n</div>","id":"abhishek_gautam","irc":"abhishekg","linkedin":null,"name":"Abhishek Gautam","slug":"/blog/authors/abhishek_gautam/","twitter":null}]}},{"node":{"date":"2018-07-18T00:00:00.000Z","id":"4f74ad43-7236-5f3c-bf1f-5c49dd133357","slug":"/blog/2018/07/18/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.133 and 2.121.2, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-07-19T00:00:00.000Z","id":"e791a263-9144-5400-9cc7-12e369131b87","slug":"/blog/2018/07/19/jenkins-x-accelerate/","strippedHtml":"Jenkins X uses Capabilities identified by the \"Accelerate:  The Science Behind Devops\"\n\nJenkins X is a reimagined CI/CD implementation for the Cloud which is heavily influence by the\nState of DevOps reports and more recently the book\n\"Accelerate: The Science Behind Devops\" by\nNicole Forsgren,\nJez Humble and\nGene Kim\n\nYears of gathering data from real world teams and organisations which has been analyzed by inspiring thought leaders and data\nscientists from the DevOps world, \"Accelerate\" recommends a number of capabilities that Jenkins X is implementing so\nusers gain the scientifically proven benefits, out of the box. We’ve started documenting the capabilities that are available\ntoday and will continue as more become available.\n\nCredit: thanks to tracymiranda for the image\n\nUse version control for all artifacts\n\nThe Weaveworks folks coined the term GitOps which we love.  Any change to an environment, whether it be a new application,\nversion upgrade, resource limit change or simple application configuration should be raised as a Pull Request to Git, have\nchecks run against it like a form of CI for environments and approved by a team that has control over what goes into the\nrelated environment.  We can now enable governance and have full traceability for any change to an environment.\n\nRelated Accelerate capability:  Use version control for all production artifacts\n\nAutomate your deployment process\n\nEnvironments\n\nJenkins X will automatically create Git backed environments during installation and makes it easy to add new ones using\njx create environment.  Additionally when creating new applications via a quickstart ( jx create quickstart), Java based\nSpringBoot ( jx create spring) or importing existing applications ( jx import), Jenkins X will both automatically add\nCI / CD pipelines and setup the jobs, git repos and webhooks to enable an automated deployment process.\n\nOut of the box Jenkins X creates Staging and Production (this is customisable) permanent environments as well as temporary\nenvironments for preview applications from Pull Requests.\n\nPreviews Environments\n\nWe are trying to move as much testing, security, validation and experimentation for a change before it’s merged to master.\nWith the use of temporary dynamically created Preview Environments any pull request can have a preview version built and\ndeployed, including libraries that feed into a downstream deployable application.  This means we can code review, test,\ncollaborate better with all teams that are involved in agreeing that change can go live.\n\nUltimately Jenkins X wants to provide a way that developers, testers, designers and product managers can be as sure as they\ncan that when a change is merged to master it works as expected.  We want to be confident the proposed change does not\nnegatively affect any service or feature as well as deliver the value it is intended to.\n\nWhere Preview Environments get really interesting is when we are able to progress a PR through various stages of maturity and\nconfidence where we begin to direct a percentage of real production traffic like beta users to it.  We can then analyse the\nvalue of the proposed change and possible run multiple automated experiments over time using Hypothesis Driven Development.\nThis helps give us better understanding of how the change will perform when released to all users.\n\nRelated Accelerate capability: Foster and enable team experimentation\n\nUsing preview environments is a great way to introduce better test automation.  While Jenkins X enables this we don’t yet\nhave examples of automated tests being run against a preview environment.  A simple test would be to ensure the application\nstarts ok and Kubernetes liveness check pass for an amount of time. This relates to\n\nRelated Accelerate capability: Implement Test Automation\nRelated Accelerate capability: Automate your deployment process\n\nPermanent Environments\n\nIn software development we’re used to working with multiple environments in the lead up to a change being promoted to a live\nproduction environment.  Whilst this seems business as usual it can cause significant delays to other changes if for any\nreason that it is deemed not fit via some process that didn’t happen pre merge to master.  Subsequent commits then become\nblocked and can cause delay of urgent changes being promoted to production.\n\nAs above Jenkins X wants any changes and experiments to be validated before it is merged to master.  We would like changes in\na staging environment to be held there for a short amount of time before being promoted, ideally in an automated fashion.\n\nThe default Jenkins X pipelines provide deployment automation via environments.  These are customisable to suite your own\nCI / CD pipeline requirements.\n\nJenkins X recommends Staging should act as a near as possible reflection on production, ideally with real production data\nshadowed to it using a service mesh to understand the behaviour.  This also helps when developing changes in preview where we\ncan link to non production services in staging.\n\nRelated Accelerate capability: Automate your deployment process\n\nUse trunk-based development\n\nThe Accelerate book found that teams which use trunk based development with short lived branches performed better.  This has\nalways worked for the Jenkins X core team members so this was an easy capability for Jenkins X to implement when setting up\nGit repositories and CI/CD jobs.\n\nImplement Continuous Integration\n\nJenkins X sees CI as the effort of validating a proposed change via pull requests before it is merged to controller.  Jenkins X\nwill automatically configure source code repositories, Jenkins and Kubernetes to provide Continuous Integration of the box.\n\nImplement Continuous Delivery\n\nJenkins X sees CD as the effort of taking that change after it’s been merged to controller through to running in a live\nenvironment.  Jenkins X automates many parts in a release pipeline:\n\nJenkins X advocates the use of semantic versioning.  We use git tags to calculate the next release version which means we\ndon’t need to store the latest release version in the controller branch.  Where release systems do store the last or next version\nin Git repos it means CD becomes hard, as a commit in a release pipeline back to controller triggers a new release.  This results\nin a recursive release trigger.  Using a Git tag helps avoid this situation which Jenkins X completely automates.\n\nJenkins X will automatically create a released version on every merge to master which can then potentially progress\nthrough to production.\n\nUse loosely coupled architecture\n\nBy targeting Kubernetes users of Jenkins X can take advantage of many of the cloud features that help design and develop\nloosely coupled solutions.  Service discovery, fault tolerance, scalability, health checks, rolling upgrades, container\nscheduling and orchestration to name just a few examples of where Kubernetes helps.\n\nArchitect for empowered teams\n\nJenkins X aims to help polyglot application developers.  Right now Jenkins X has quickstarts and automated CI/CD setup with\nlanguage detection for Golang, Java, NodeJS, .Net, React, Angular, Rust, Swift and more to come.  What this also does is\nprovide a consistent Way of Working so developers can concentrate on developing.\n\nJenkins X also provides many addons, for example Grafana and Prometheus for automated metrics collection and visualisation.\nIn this example centralised metrics help understand how your applications behave when built and deployed on Kubernetes.\n\nDevPods are another feature which enables developers to edit source code in their\nlocal IDE, behind the scenes it is then synced to the cloud and rapidly built and redeployed.\n\nJenkins X believes providing developers automation that helps them experiment in the cloud, with different technologies and\nfeedback empowers them to make the best decisions - faster.\n\nFancy a closer look?\n\nMyself, James Strachan and\nRob Davies are going to be presenting and running workshops at\nDevOps World  | Jenkins World.  We’ll also be hanging out at the Jenkins X demo\narea so come and say hello and see what’s the latest cool and exiting things to come out of Jenkins X.  Use JWFOSS for 30%\ndiscount off registration\n\nWant to get involved?\n\nJenkins X is open source, the community mainly hangs out in the\nJenkins X Kubernetes slack channels and for tips on being more involved with Jenkins X\ntake a look at our contributing docs.  We’ve been helping lots of folks get into open source, learn\nnew technoligies and languages like golang.  Why not get involved?\n\nDemo\n\nIf you’ve not already seen it here’s a video showing a spring boot quickstart with automatic CI/CD pipelines and preview environments.","title":"Accelerate with Jenkins X","tags":["jenkinsx","developer","kubernetes"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8e8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg","srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/77b35/jrawlings.jpg 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/d4a57/jrawlings.jpg 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/68974/jrawlings.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/ef6ff/jrawlings.webp 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/8257c/jrawlings.webp 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/6766a/jrawlings.webp 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/22bfc/jrawlings.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/jrawlings.jpeg"},"blog":null,"github":"rawlingsj","html":"<div class=\"paragraph\">\n<p>James has a passion for continuous delivery and software automation in general.  Continually looking at\nways to help improve developers experience for the cloud.  James works on the OSS project <a href=\"https://jenkins-x.io/\">Jenkins X</a></p>\n</div>","id":"jrawlings","irc":null,"linkedin":null,"name":"James Rawlings","slug":"/blog/authors/jrawlings/","twitter":"jdrawlings"}]}},{"node":{"date":"2018-07-20T00:00:00.000Z","id":"9b44e013-999c-51f8-b612-64b922311110","slug":"/blog/2018/07/20/devops-world-jenkins-world-2018-agenda-is-live/","strippedHtml":"This year the Jenkins project introduced a few exciting efforts:\nConfiguration as Code, Jenkins X, Jenkins Evergreen, Blue Ocean and Pipeline.\nWith DevOps World-Jenkins World San Francisco and Nice only a few short months away,\nwe’ve made sure to include plenty of sessions related to these exciting efforts on the agenda.\nWith that said, the agenda for both cities is now live and will include workshops and deep dive\nsessions on these efforts and much more.\nProject contributors for these efforts will be present at both conferences as well, come say ‘hello’.\nHere’s a glimpse of what’s on the agenda:\n\nWorkshops\n\nBuilding Continuous Delivery for Microservices with Jenkins X\n\nCreating a Deployment Pipeline with Jenkins 2\n\nJenkins Administration Fundamentals\n\nJenkins Pipeline Fundamentals\n\nAnd more\n\nSessions\n\nCommon Pitfalls in Jenkins Security and How to Avoid Them –\nOleg Nenashev\n\nHabits, Tips and Tricks to Efficiently Automate Tasks with Jenkins -\nMichael Paillloncy\n\nSafely Upgrading Jenkins Everyday - Baptiste Mathus -\nBaptiste Mathus\n\nRunning Jenkins at Scale on Kubernetes – Guillermo Palacio -\nGuillermo Palacio\n\nContinuously Delivering an Easy-to-Use Jenkins with Jenkins Evergreen –\nTyler Croy\n\n“Look ma, no hands” – Manage Configuration as Code\nEwelina Wilkosz &\nNicolas De Loof\n\nAutomate Testing in Your Container Platform with Jenkins –\nEleanor Mehlenbacher\n\nmuch more\n\nSee the full agenda for both cities here:\n\nDevOps World – Jenkins World 2018 San Francisco Agenda\n\nDevOps World – Jenkins World 2018 Nice Agenda\n\nYou can plan on this to be highly educational, wildly engaging… overall an excellent space for collaborative conversations with project maintainers, contributors, and active community members.\n\nSee you there!\n\nIf you need more persuasion, use the code JWFOSS to get 30% discount off your pass.","title":"DevOps World-Jenkins World 2018 Agenda is Live","tags":["event","jenkins-world"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2018-07-23T00:00:00.000Z","id":"bc08dba7-169b-5284-bbaa-6f3d64408472","slug":"/blog/2018/07/23/javadoc-service-improvements/","strippedHtml":"Jenkins infrastructure is continuously improving.\nThe latest service to get some attention and major improvement is the Jenkins javadoc.\n\nThere were a number of issues affecting that service:\n\nIrregular updates -\nDevelopers wouldn’t find the latest java documentation because of inadequate update frequence.\n\nBroken HTTPS support -\nwhen users would go to the Javadoc site they would get an unsafe site warning and then an incorrect redirection.\n\nObsolete content - Javadoc was not cleaned up correctly and plenty of obsolete pages remained which confused end users.\n\nAs Jenkins services\nmigrate to Azure infrastructure,\nsomething that needed to be done was to move the javadoc service there as a standalone service.\nI took the same approach as jenkins.io, putting data on an azure file storage, using a nginx proxy in front of it and running on kubernetes.\nThis approach brings multiple benefits:\n\nWe store static files on an azure file storage which brings data reliability, redundancy, etc.\n\nWe use Kubernetes Ingress to configure HTTP/HTTPS endpoint\n\nWe use Kubernetes Service to provide load balancing\n\nWe use Kubernetes deployment to deploy default nginx containers with azure file storage volume.\n\nHTTP/HTTPS workflow\n\n+----------------------+     goes on     +------------------------------+\n  |  Jenkins Developer   |---------------->+  https://javadoc.jenkins.io  |\n  +----------------------+                 +------------------------------+\n                                                                      |\n  +-------------------------------------------------------------------|---------+\n  | Kubernetes Cluster:                                               |         |\n  |                                                                   |         |\n  | +---------------------+     +-------------------+     +-----------v------+  |\n  | | Deployment: Javadoc |     | Service: javadoc  <-----| Ingress: javadoc |  |\n  + +---------------------+     +-------------------+     +------------------+  |\n  |                                           |                                 |\n  |                          -----------------+                                 |\n  |                          |                |                                 |\n  |                          |                |                                 |\n  | +------------------------v--+    +--------v------------------+              |\n  | | Pod: javadoc              |    | Pod: javadoc              |              |\n  | | container: \"nginx:alpine\" |    | container: \"nginx:alpine\" |              |\n  | | +-----------------------+ |    | +-----------------------+ |              |\n  | | | Volume:               | |    | | Volume:               | |              |\n  | | | /usr/share/nginx/html | |    | | /usr/share/nginx/html | |              |\n  | | +-------------------+---+ |    | +----+------------------+ |              |\n  | +---------------------|-----+    +------|--------------------+              |\n  |                       |                 |                                   |\n  +-----------------------|-----------------|-----------------------------------+\n                          |                 |\n                          |                 |\n                       +--+-----------------+-----------+\n                       |   Azure File Storage: javadoc  |\n                       +--------------------------------+\n\nThe javadoc static files are now generated by a Jenkins\njob regularly and then published from a trusted jenkins instance.\nWe only update what has changed and remove obsolete documents.\nMore information can be find\nhere\n\nThe next thing in continuously improving is also to look at the user experience of the javadoc to make it easier to discover javadoc for other components or versions.\n( Help Needed)\n\nThese changes all go towards improving the developer experience for those using javadocs and making life easier for core and plugin developers.\nSee the new and improved javadoc service here\nJenkins Javadoc.","title":"Jenkins Javadoc: Service Improvements","tags":["javadoc","azure","infrastructure","kubernetes"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/olblak.png"},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak/","twitter":"0lblak"}]}},{"node":{"date":"2018-07-23T00:00:00.000Z","id":"c28896d2-8e68-54bb-a656-dea6d6148131","slug":"/blog/2018/07/23/remoting-kafka-plugin-1.0-release/","strippedHtml":"I am very excited to announce that we have recently released 1.0 version of Remoting Kafka Plugin under Jenkins Plugin. You can check the CHANGELOG to see the features included in this release.\n\nAbout me\n\nMy name is Pham Vu Tuan, I am a final year undergraduate student from Singapore. This is the first time I participate in Google Summer of Code and contribute to an open-source organization.\n\nMentors\n\nI have GSoC mentors who help me in this project Oleg Nenashev and Supun Wanniarachchi. Besides that, I also receive great support from developers in remoting project Devin Nusbaum and Jeff Thompson.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nThis project aims to develop a plugin in order to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins.\n\nBenefits to the community\n\nProvide a new method to connect agent to controller using Kafka besides existing methods such as JNLP or SSH Build Agents plugin.\n\nHelp to resolve the existing issues with the TCP protocol between controller and agent communication in Jenkins.\n\nHelp to resolve traffic prioritization and multi-agent communications issue in Jenkins.\n\nWhy Kafka?\n\nWhen planning for this project, we want to use traditional message queue system such as ActiveMQ or RabbitMQ. However, after some discussion, we decided to have a try with Kafka with more suitable features with this project:\n\nKafka itself is not a queue like ActiveMQ or RabbitMQ, it is a distributed, replicated commit log. This helps to remove message delivery complexity we have in traditional queue system.\n\nWe need to support data streaming as a requirement, and Kafka is good at this aspect, which RabbitMQ is lack of.\n\nKafka is said to have a better scalability and good support from the development community.\n\nArchitecture Overview\n\nThe project consists of multiple components:\n\nKafka Client Library - new command transport implementation, producer and consumer client logic.\n\nRemoting Kafka Plugin - plugin implementation with KafkaGlobalConfiguration, KafkaComputerLauncher and KafkaSecretManager.\n\nRemoting Kafka Agent - A custom JAR agent with remoting JAR packaged together with a custom Engine implementation to setup a communication channel with Kafka. The agent is also packaged as a Docker image in DockerHub.\n\nAll the components are packaged together with Docker Compose.\n\nThe below diagram is the overview of the current architecture:\n\nWith this design, controller is not communicating with agent using direct TCP communication anymore, all the communication commands are transfered with Kafka.\n\nFeatures\n\nThe project is now under the third coding phase and we have some features available in 1.0 release.\n\n1. Kafka Global Configuration with support of credentials plugin to store secrets.\n\n2. Launch agent with Kafka Launcher.\n\n3. Launch agent from CLI using agent JAR with secret provided to ensure security.\n\n4. Run jobs, pipeline using Kafka agent.\n\n5. Kafka communication between controller and agent.\n\nRemoting operations are being executed over Kafka. In the log you may see:\n\nCommand execution (SlaveInstallerFactoryImpl.isWindows())\n\nClassloading (Classloader.fetch())\n\nLog streaming (Pipe.chunk())\n\nHow to run demo\n\nWe have setup a ready-to-fly demo for this plugin. You can try to run a demo of the plugin by following this instruction.\nFeatures in the demo:\n\nDocker Compose starts preconfigured controller and agent instance, they connect automatically using Kafka launcher.\n\nKafka is secured and encrypted with SSL.\n\nThere few demo jobs in the instance so that a user can launch a job on the agent.\n\nKakfa Manager supported in localhost:9000 to support monitoring of Kafka cluster.\n\nPhase 2 Presentation Slides\n\nPhase 2 Presentation Video\n\nLinks\n\nGitHub Repository\n\nWiki\n\nPlugin Site\n\nProject Info\n\nIntroduction Blogpost\n\nPhase 1 Evaluation Slides\n\nPhase 2 Evaluation Slides\n\nPhase 1 Evaluation Video\n\nPhase 2 Evaluation Video","title":"Remoting Kafka Plugin 1.0: A new method to connect agents","tags":["plugins","gsoc","gsoc2018","remoting","kafka"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg","srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/77b35/pvtuan10.jpg 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/d4a57/pvtuan10.jpg 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/19e71/pvtuan10.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/ef6ff/pvtuan10.webp 32w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/8257c/pvtuan10.webp 64w,\n/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/6766a/pvtuan10.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/227c1aaf83f4dc4f3b44ed51b9e39c2b/pvtuan10.jpeg"},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/authors/pvtuan10/","twitter":null}]}},{"node":{"date":"2018-07-25T00:00:00.000Z","id":"f66d8201-21f2-5fce-ba34-d032e061e6fe","slug":"/blog/2018/07/25/contributor-summit/","strippedHtml":"The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.\nThis summit will be on Monday, September 17th 2018 in San Francisco, just before DevOps World | Jenkins World.\nThe summit brings together community members to learn, meet and help shape the future of Jenkins.\nIn the Jenkins commmunity we value all types and sizes of contributions and love to welcome new participants.\nRegister here.\n\nTopics\n\nThere are plenty of exciting developments happening in the Jenkins community.\nThe summit will feature a 'State of the Project' update including updates from the Jenkins officers.\nWe will also have updates on the 'Big 5' projects in active development:\n\nJenkins Evergreen\n\nJenkins X\n\nConfiguration as Code\n\nJenkins Pipeline\n\nCloud Native Jenkins Architecture\n\nPlus we will feature a Google Summer of Code update, and more!\n\nAgenda\n\nThe agenda is shaping up well and here is the outline so far.\n\n9:00am Kickoff & Welcome with coffee/pastries\n\n10:00am Project Updates\n\n12:00pm Lunch\n\n1.00pm BoF/Unconference\n\n3.00pm Break\n\n3.30pm Ignite Talks\n\n5.00pm Wrap-up\n\n6.00pm Contributor Dinner\n\nThe BoF (birds-of-a-feather) session will be an opportunity for in depth discussions, hacking or learning more about any of the big 5.\nBring your laptop, come prepared with questions and ideas, and be ready for some hacking too if you want.\nJoin in, hear the latest and get involved in any project during the BoF sessions.\nIf you want to share anything there will be an opportunity to do a 5-min ignite talk at the end.\nAttending is free, and no DevOps World | Jenkins World ticket is needed, but RSVP if you are going to attend to help us plan.\nSee you there!","title":"Join us at the Jenkins Contributor Summit San Francisco, Monday 17 September 2018","tags":["community","events","jenkins-world"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}},"publicURL":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/tracymiranda.jpg"},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda/","twitter":"tracymiranda"}]}},{"node":{"date":"2018-07-30T00:00:00.000Z","id":"3f5d0df0-bf7b-55f9-bbfe-fd861133015d","slug":"/blog/2018/07/30/introducing-cloud-native-sig/","strippedHtml":"On large-scale Jenkins instances controller disk and network I/O become bottlenecks in particular cases.\nBuild logging and artifact storage were one for the most intensive I/O consumers,\nhence it would be great to somehow redirect them to an external storage.\nBack in 2016 there were active discussions about such Pluggable Storage for Jenkins.\nAt that point we created several prototypes, but then other work took precedence.\nThere was still a high demand in Pluggable Storage for large-scale instances,\nand these stories also become a major obstacle for cloud native Jenkins setups.\n\nI am happy to say that the Pluggable Storage discussions are back online.\nYou may have seen changes in the Core for Artifact Storage\n( JEP-202)\nand a new Artifact Manager for S3 plugin.\nWe have also created a number of JEPs for External Logging\nand created a new Cloud Native Special Interest Group (SIG)\nto offer a venue for discussing changes and to keep them as open as possible.\n\nTomorrow Jesse Glick and I will be\npresenting the current External Logging designs at the\nCloud Native SIG online meeting,\nyou can find more info about the meeting here.\nI decided that it is a good time to write about the new SIG.\nIn this blogpost I will try to provide my vision of the SIG and its purpose.\nI will also summarize the current status of the activities in the group.\n\nWhat are Special Interest Groups?\n\nIf you follow the developer mailing list,\nyou may have seen the discussion about introducing SIGs\nin the Jenkins project.\nThe SIG model has been proposed by\nR. Tyler Croy,\nand it largely follows the successful\nKubernetes SIG model.\nThe objective of these SIGs is to make the community more transparent to contributors\nand to offer venues for specific discussions.\nThe idea of SIGs and how to create them is documented in\nJEP-4.\nJEP-4 is still in Draft state, but a few SIGs have been already created using that process:\nPlatform SIG, GSoC SIG and, finally,\nCloud Native SIG.\n\nSIGs are a big opportunity to the Jenkins project,\noffering a new way to onboard contributors who are interested only in particular aspects of Jenkins.\nWith SIGs they can subscribe to particular topics without\nfollowing the entire Developer mailing list which can become pretty buzzy nowadays.\nIt also offers company contributors a clear way how to join community and participate in specific areas.\nThis is great for larger projects which cannot be done by a single contributor.\nLike JEPs, SIGs help focus and coordinate efforts.\n\nAnd, back to major efforts…​\nLack of resources among core contributors was one of the reasons\nwhy we did not deliver on Pluggable Storage stories back in 2016.\nI believe that SIGs can help fix that in Jenkins,\nmaking it easier to find groups with the same interests and\nreach out to them in order to organize activity.\nRegular meetings are also helpful to get such efforts moving.\n\nPoints above are the main reasons why I joined the Cloud Native SIG.\nSimilarly, that’s why I decided to create a Platform SIG\nto deliver on major efforts like Java 10+ support in Jenkins.\nI hope that more SIGs get created soon so that contributors could focus on areas of their interest.\n\nCloud Native SIG\n\nIn the original proposal Carlos Sanchez,\nthe Cloud Native SIG chair, has described the purpose of the SIG well.\nThere has been great progress this year in cloud-native-minded projects like Jenkins X and Jenkins Evergreen,\nbut the current Jenkins architecture does not offer particular\nfeatures which could be utilized there:\nPluggable Storage, High Availability, etc.\nThere are ways to achieve it using Jenkins plugins and some infrastructure tweaks,\nbut it is far from the out-of-the-box experience.\nIt complicates Jenkins management and slows down development of new cloud-native solutions for Jenkins.\n\nSo, what do I expect from the SIG?\n\nDefine roadmap towards Cloud-Native Jenkins architecture\nwhich will help the project to stay relevant for Cloud Native installations\n\nProvide a venue for discussion of critical Jenkins architecture changes\n\nAct as a steering committee for Jenkins Enhancement Proposals in the area of\nCloud-Native solutions\n\nFinally, coordinate efforts between contributors and get new\ncontributors onboard\n\nWhat’s next in the SIG?\n\nThe SIG agenda is largely defined by the SIG participants.\nIf you are interested to discuss particular topics,\njust propose them in the SIG mailing list.\nAs the current SIG page describes,\nthere are several areas defined as initial topics:\nArtifact Storage,\nLog Storage,\nConfiguration Storage\n\nAll these topics are related to the Pluggable Storage Area,\nand the end goal for them is to ensure that all data is externalized\nso that replication becomes possible.\nIn addition to the mentioned data types,\ndiscussed at the Jenkins World 2016 summit,\nwe will need to externalize other data types:\nItem and Run storage,\nFingerprints,\nTest and coverage results,\netc.\nThere is some foundation work being done for that.\nFor example, Shenyu Zheng is working on a\nCode Coverage API plugin\nwhich would allow to unify the code coverage storage formats in Jenkins.\n\nOnce the Pluggable Storage stories are done the next steps are true High Availability, rolling or canary upgrades and zero downtime.\nAt that point other foundation stories like Remoting over Kafka\nby Pham Vu Tuan\nmight be integrated into the Cloud Native architecture to make Jenkins more robust against outages within the cluster.\nIt will take some time to get to this state, but it can be done incrementally.\n\nLet me briefly summarize current state of the 3 focuses listed in the Cloud Native SIG.\n\nArtifact Storage\n\nThere are many existing plugins allowing to upload and download artifacts from external storage\n(e.g. S3, Artifactory, Publish over SFTP, etc., etc.),\nbut there are no plugins which can do it transparently without using\nnew steps.\nIn many cases the artifacts also get uploaded through the controller,\nand it increases load on the system.\nIt would be great if there was a layer which would allow storing artifacts externally\nwhen using common steps like Archive Artifacts.\n\nArtifact storage work was started this spring by Jesse Glick, Carlos Sanchez and\nIvan Fernandez Calvo\nbefore the Cloud Native SIG was actually founded.\nCurrent state:\n\nJEP-202 \"External Artifact Storage\"\nhas been proposed in the Jenkins community.\nThis JEP defines API changes in the Jenkins core which are needed to\nsupport External artifact managers\n\nJenkins Pipeline has been updated to support external artifact storages\nfor archive / unarchive and stash / unstash\n\nNew Artifact Manager for S3 plugin\nreference implementation of the new API.\nThe plugin is available in main Jenkins update centers\n\nA number of plugins has been updated in order to support\nexternal artifact storage\n\nThe Artifact Manager API is available in Jenkins LTS starting from 2.121.1,\nso it is possible to create new implementations using the provided API and\nexisting implementations.\nThis new feature is fully backward compatible with the default Filesystem-based storage,\nbut there are known issues for plugins explicitly relying on artifact locations in JENKINS_HOME\n(you can find a list of such plugins\nhere).\nIt will take a while to get all plugins supported,\nbut the new API in the core should allow migrating plugins.\n\nI hope we will revisit the External Artifact Storage at the SIG meetings at some point.\nIt would be a good opportunity to do a retrospective and to understand how to improve the process\nin SIG.\n\nLog storage\n\nLog storage is a separate big story.\nBack in 2016 External logging was one of the key Pluggable Storage stories we defined at the contributor summit.\nWe created an EPIC for the story ( JENKINS-38313)\nand after that created a number of prototypes together with\nXing Yan and Jesse Glick.\nOne of these prototypes for Pipeline has recently been updated and published\nhere.\n\nJesse Glick and Carlos Sanchez\nare returning to this story and plan to discuss it within the Cloud Native SIG.\nThere are a number of Jenkins Enhancement proposals which have been submitted recently:\n\njep:207[] -\nExternal Build Logging support in the Jenkins Core\n\njep:210[] -\nExternal log storage for Pipeline\n\njep:212[] -\nExternal Logging API Plugin\n\njep:206[] -\nUse UTF-8 for Pipeline build logs\n\nIn the linked documents you can find references to current reference implementations.\nSo far we have a working prototype for the new design.\nThere are still many bits to fix before the final release,\nbut the designs are ready for review and feedback.\n\nThis Tuesday (Jul 31) we are going to have a SIG meeting in order to present the current state and to discuss the proposed designs and JEPs.\nThe meeting will happen at 3PM UTC.\nYou can watch the broadcast using this link.\nParticipant link will be posted in the SIGs Gitter channel 10 minutes before the meeting.\n\nConfiguration storage\n\nThis is one of the future stories we would like to consider.\nAlthough configurations are not big, externalizing them is a critical task\nfor getting highly-available or disposable Jenkins controllers.\nThere are many ways to store configurations in Jenkins,\nbut 95% of cases are covered by the XmlFile layer which\nserializes objects to disk and reads them using the XStream library.\nExternalizing these XmlFile s would be a great step forward.\n\nThere are several prototypes for externalizing configurations,\ne.g. in DotCI.\nThere are also other implementations which could be upstreamed to the Jenkins core:\n\nAlex Nordlund has recently proposed a\npull request\nto Jenkins Core, which should make the XML Storage pluggable\n\nJames Strachan has implemented similar engine\nfor Kubernetes in the kubeify prototype\n\nI also did some experiments with externalizing XML Storages back in 2016\n\nThe next steps for this story would be to aggregate implementations into a single JEP.\nI have it in my queue, and I hope to write up a design once we get more clarity on the External logging stories.\n\nConclusions\n\nSpecial Interest Groups are a new format for collaboration and disucssion in the Jenkins community.\nAlthough we have had some work groups before (Infrastructure, Configuration-as-Code, etc.),\nintroduction of SIGs sets a new bar in terms of the project transparency and consistency.\nMajor architecture changes in Jenkins are needed to ensure its future in the new environments,\nand SIGs will help to boost visibility and participation around these changes.\n\nIf you want to know more about the Cloud Native SIG,\nall resources are listed on the SIG’s page on jenkins.io.\nIf you want to participate in the SIG’s activities, just do the following:\n\nSubscribe to the mailing list\n\nJoin our Gitter channel\n\nJoin our public meetings\n\nI am also working on organizing a face-to-face Cloud Native SIG meeting at the\nJenkins Contributor Summit,\nwhich will happen on September 17 during\nDevOps World | Jenkins World in San Francisco.\nIf you come to DevOps World | Jenkins World,\nplease feel free to join us at the contributor summit or to meet us at the community booth.\nTogether with Jesse and Carlos we are also going to present some bits of our work at the\nA Cloud Native Jenkins talk.\n\nStay tuned for more updates and demos on the Cloud-Native Jenkins fronts!","title":"Introducing Jenkins Cloud Native SIG","tags":["community","sig","cloud-native","cloud-native-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-08-06T00:00:00.000Z","id":"e7cd7824-744d-512b-9ee1-51257e0c567a","slug":"/blog/2018/08/06/serverless-cicd-jenkins/","strippedHtml":"Everyone is talking about serverless.\n\nAs with any new hyped-technology the term 'serverless' is often overloaded with different meanings.\nSometimes serverless is oversimplified to mean function-as-a-service(faas).\nBut there is more to it than that.\nAlso, not many people are talking about doing CI/CD with serverless,\neven though where there is code there still in need of continuous integration and continuous delivery.\nSo I was excited to hear about this talk by\nAnubhav Mishra on\nBuilding a CI/CD Pipeline for Serverless Applications.\n\nIn the talk Anubhav proposes a new definition for serverless:\n\n\"\"\nServerless is a technology pattern that provides services and concepts to minimize operational overhead that comes with managing servers.\nIt is a powerful abstraction when used can result in an increased focus on business value.\n\"\"\n\nThe talk then goes on to demo Jenkins on AWS Fargate (a platform for running containers without managing servers or clusters).\nThe main focus is on increased elasticity/scaling.\n\nThe advantages of this approach are:\n\nNo nodes/servers to manage\n\nLaunch 10,000+ builds/containers in seconds\n\nNo cost for idle time\n\nThe real headline is the cost saving, which is 2 orders of magnitude better with serverless.\nA cost comparison is done based on 1 vCPU & 2GB memory:\n\nWith Jenkins on Fargate: 100 builds * 5 mins = $0.633/month\n\nWith Jenkins on EC2 Instances: ~50/month\n\nThis huge potential cost saving is one of the things that makes serverless incredibly compelling.\nNot to mention you don’t have to think much upfront about scaling the system.\n\nBut there are drawbacks with this approach, noted as:\n\nCold starts - slower boot times for clients\n\nLarge container images (~1G)\n\nNo root access\n\nEphemeral storage (default)\n\nThis is an area where Jenkins can continue to evolve to make the most of serverless architectures.\nI highly recommend you check out the\nslides for yourself.\nThe best part is that, in the true spirit of open source, Anubvha shared the code\nhere.\nSo you can give it a try yourself and build your own serverless CI/CD pipeline with Jenkins.","title":"Building a Serverless CI/CD Pipeline with Jenkins","tags":["serverless","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}},"publicURL":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/tracymiranda.jpg"},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda/","twitter":"tracymiranda"}]}},{"node":{"date":"2018-08-14T00:00:00.000Z","id":"2fa297fb-b9d2-5c87-846c-6ac7d68adea3","slug":"/blog/2018/08/14/simple-pull-request-plugin-final-evaluation/","strippedHtml":"About me\n\nI am Abhishek Gautam, 3rd year student from Visvesvaraya National Institute of\ntechnology, India, Nagpur. I was a member of ACM Chapter and Google student developer club of my\ncollege. I am passionate about automation.\n\nProject Summary\n\nThis is a GSoC 2018 project.\n\nThis project aims to develop a pull request Job Plugin. Users should be able to\nconfigure job type using YAML file placed in root directory of the\nGit repository being the subject of the pull request. The plugin should interact with various\nplatforms like Bitbucket, Github, Gitlab, etc whenever a pull request is created or updated.\n\nPlugin detects the presence of certain types of reports at conventional locations,\nand publish them automatically. If the reports are not present at their respective conventional\nlocation, the location of the report can be configured in the YAML file.\n\nMy mentors are\nOleg Nenashev (Org Admin),\nMartin d’Anjou,\nKristin Whetstone,\nJeff Knurek\n\nProject Repository\n\nProject repository\n\nCode changes\n\nAll the pull requests made can be found here\n\nList of major pull requests.\n\nPhase 1\n\nPR-5 : Git wrappers like clone, pull, checkout,\npullChangesOfPullrequest, merge, deleteBranch and merge added.\n\nPR-6 : Yaml to Declarative Pipeline code generation.\n\nPlease see Phase 1 blog post\n\nPhase 2\n\nPR-11 : Implemented StepConfigurator\nusing Jenkins configuration as code plugin.\n\nPR-19 : Unit tests created for agent and yaml to pipeline generation.\n\nPlease see Phase 2 blog post\n\nPhase 3\n\nPR-25 : Declarative pipeline code generator code\nexported to extensions for extensibility and support of custom sections\n\nJenkinsfile.yaml example\n\nDocumentation of Jenkinsfile.yaml and yaml format can be found here\n\nTasks completed in Coding Phase 3\n\nAdd unit tests, JenkinsRule tests JENKINS-52495\n\nRefactor snippet generator to extensions ( JENKINS-52491)\n\nPlugin overview (Present in README.md)\n\nFuture tasks\n\nPhase 3 Jira Epic\n\nRelease 1.0 ( JENKINS-52519)\n\nSupport the “when” Declarative Pipeline directive ( JENKINS-52520)\n\nNice2have: Support hierarchical report types ( JENKINS-52521)\n\nAcceptance Test Harness tests JENKINS-52496\n\nAutomatic Workspace Cleanup when PR is closed ( JENKINS-51897)\n\nTest Multi-Branch Pipeline features support:\n\nSupport for webhooks ( JENKINS-51941)\n\nCheck if trusted people have approved a pull request and start build accordingly ( JENKINS-52517)\n\nFinalize documentation ( JENKINS-52518)\n\nTest the integration with various platforms Bitbucket, Gitlab, Github.\n\nPhase 3 evaluation presentation video\n\nVideo: Link to video evaluation\n\nPhase 3 evaluation presentation slides\n\nLink to presentation slides\n\nMy GSoC experience\n\nStudent applications started on March 12 16:00 UTC and ended on March 27 16:00 UTC. Application period allowed me to explore\nmany new technology and platforms that are making peoples life easy.\n\nBefore starting of the application\nperiod I did not know anything about Jenkins. I found Jenkins organisation on the GSoC organisations page\nand came to know that I is a CI/CD platform that is used automate various things related to software development. I studied\nabout Jenkins online and went through the problem statements provided by some mentors.\n\nI decided that to work on Simple Pull-Request Job Plugin project.\nThen I wrote a draft proposal for this project and received many comments to refactor the proposal and enhance its quality from the mentors,\nthen finally I submitted my final proposal to Google.\n\nI was able to complete most of the tasks decided in Phase 1 and 2. After Phase 2 I was not able to give time to the project because\nof the placement season in the my college. I modified the code so that other plugin developers can contribute to it by Jenkins extensions.\n\nAll the mentors made themselves available for most of the weekly calls and provided many valuable suggestions during the\nentire period of GSoC. Sometimes I was not able to communicate effectively. As communication is the key while working remotely, mentors\nsuggested to communicate more thorough gitter chat.\n\nMy overall experience of GSoC was good and all the mentors helped me as they can all times. This project allowed me to explore\nJenkins and the services offered by it. I am allowed to work on the project after GSoC ends (This is a good thing).\n\nHow to reach me\n\nEmail: gautamabhishek46@gmail.com\n\nGitter room: https://gitter.im/Jenkinsci/simple-pull-request-job-plugin\n\nReferences\n\nProject repository\n\nProject page\n\nGitter chat\n\nBug Tracker\n\nDemo Repository","title":"alpha-3 release Pipeline as YAML (Simple pull request plugin)","tags":["gsoc2018","plugin","pipeline","yaml"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg","srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/77b35/abhishek_gautam.jpg 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/d4a57/abhishek_gautam.jpg 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/68974/abhishek_gautam.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/ef6ff/abhishek_gautam.webp 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/8257c/abhishek_gautam.webp 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/6766a/abhishek_gautam.webp 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/22bfc/abhishek_gautam.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/abhishek_gautam.JPG"},"blog":null,"github":"gautamabhishek46","html":"<div class=\"paragraph\">\n<p>Abhishek is a 3rd year Computer Science student from Visvesvaraya National\nInstitute of Technology, Nagpur, India. He has done some website projects for\nhis college technical festival. He is also a regular competitive programmer\n(abhishekg1128 at codechef). He has done two internships as a Game Programmer\nas well. He was a member of ACM Chapter and Google student developer club of his\ncollege. His interest in automation motivated his participation in the Jenkins\nGSOC 2018 program.</p>\n</div>","id":"abhishek_gautam","irc":"abhishekg","linkedin":null,"name":"Abhishek Gautam","slug":"/blog/authors/abhishek_gautam/","twitter":null}]}},{"node":{"date":"2018-08-15T00:00:00.000Z","id":"09b0e766-f69d-5d93-bda5-3729f028d501","slug":"/blog/2018/08/15/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.138 and 2.121.3, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Jenkins 2.121.3 and 2.138 security updates","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-08-16T00:00:00.000Z","id":"8a951bf4-62b1-5a68-b1e8-22376e509229","slug":"/blog/2018/08/16/dwjw-2018-is-almost-here/","strippedHtml":"DevOps World | Jenkins World 2018 in San Francisco is only a month away.\nIt is shaping up to be a great event including the Contributor Summit,\nthe \"Ask the Experts\" desk at the Jenkin booth, several days of training and certifications,\nand tons of informative presentation and demos.\n\nTo give you a taste of what you’ll see this year at DevOps World | Jenkins World 2018,\nwe’ve lined up a series of guest blog posts by a number of this years speakers,\nstarting in the next week with posts from Tracy Miranda, Brent Laster, and Nicholas De Loof.\nFor now, let’s take a look at last year’s keynote from Kohsuke Kawaguchi.\n\nStay tuned!\n\nJoin the Jenkins project at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"DevOps World | Jenkins World 2018 is Almost Here","tags":["event","jenkinsworld","jenkinsworld2018"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2018-08-17T00:00:00.000Z","id":"e4121dfc-f5a5-57b7-b1e0-733189f8140a","slug":"/blog/2018/08/17/code-coverage-api-plugin-1.0-release/","strippedHtml":"I am happy to announce availability of Code Coverage API. These plugins have been recently released as 1.0, and they are now available in the Jenkins Update Center. In this blogpost I will introduce the features and project structure of Code Coverage API plugin.\n\nMy name is Shenyu Zheng, and I am an undergraduate student in Computer Science and Technology at Henan University from China.\n\nOverview\n\nCode Coverage API plugin is one of GSoC 2018 Jenkins projects.\n\nThere are a lot of plugins which currently implement code coverage; however, they all use similar config, charts, and content. So it would be much better if we could have an API plugin which does the most repeated work for those plugins and offers a unified API which can be consumed by other plugins and external tools.\n\nMy mentors are Steven Christou, Supun Wanniarachchi, Jeff Pearce and Oleg Nenashev.\n\nSupported Coverage Formats\n\nEmbedded\n\nJaCoCo\n\nOther plugins as an Extension of Code Coverage API plugin\n\nCobertura ( Cobertura Plugin)\n\nllvm-cov ( llvm-cov Plugin)\n\nFeatures\n\nModernized coverage chart\n\nCoverage trend\n\nSource code navigation\n\nParallel pipeline support\n\nReports combining\n\nREST API\n\nFailed conditions and flexible threshold setting\n\nOther small features\n\nModernized Coverage Chart\n\nIn the summary chart we can see the coverage summary of current coverage metric.\n\nIn the child summary chart, we can see the coverage summary of each child, also, we can use the range handler to filter item we want to see to reduce the chart size. If we want to see coverage details of the child, we can click the child name to see more information.\n\nCoverage Trend\n\nWe also support coverage trend to show coverage metrics changing between builds.\n\nSource Code Navigation\n\nYou can enable source code navigation by specifying Source File Storing Level to save last build source files (enable source files navigation in current and last build) or save all build source files (enable source files navigation in all builds).\n\nYou can see source file with coverage information on File level coverage page.\n\nParallel Pipeline Support\n\nWe support parallel pipeline. You can call the Code Coverage API plugin in different branches like this:\n\nnode {\n    parallel firstBranch: {\n        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')]\n}, secondBranch: {\n        publishCoverage adapters: [jacocoAdapter('jacoco.xml')]\n    }\n}\n\nReports Combining\n\nYou can add tag on publishCoverage and Code Coverage API plugin will combine reports have same tag\n\nnode {\n    parallel firstBranch: {\n        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], tag: ‘t’\n}, secondBranch: {\n        publishCoverage adapters: [jacocoAdapter('jacoco.xml')], tag: ‘t’\n    }\n}\n\nREST API\n\nWe provide a REST API to retrieve coverage data:\n\nCoverage result:…​/{buildNumber}/coverage/…​/result/api/\\{json|xml\\}\n\nTrend result:…​/{buildNumber}/coverage/…​/trend/api/\\{json|xml\\}\n\nCoverage result of last build:…​/{buildNumber}/coverage/…​/last/result/api/\\{json|xml\\}\n\nTrend result of last build:…​/{buildNumber}/coverage/…​/last/trend/api/\\{json|xml\\}\n\nFailed Conditions and Flexible Threshold Setting\n\nYou can set different failed conditions and threholds to control build result.\n\nIf the thresholds satisfy the failed conditions, it will fail the build.\n\nOther Small Features\n\nWe also have other small features like auto detecting reports, coverage filters, etc. You can find more information about these features in the plugin documentation.\n\nArchitecture\n\nThis API plugin will mainly do these things:\n\nFind coverage reports according to the user’s config.\n\nUse adapters to convert reports into the our standard format.\n\nParse standard format reports, and aggregate them.\n\nShow parsed result in a chart.\n\nSo, we can implement code coverage publishing by simply writing an adapter, and such adapter only needs to do one thing - convert a coverage report into the standard format. The implementation is based on extension points, so new adapters can be created in separate plugins. In order to simplify conversion for XML reports, there is also an abstraction layer which allows creating XSLT-based converters.\n\nThe below diagram show the architecture of Code Coverage API plugin\n\nImplementing a New Coverage Plugin\n\nWe can implement a coverage plugin by implementing CoverageReportAdapter extension point. For example, by using the provided abstract layer, we can implement JaCoCo simple like this:\n\npublic final class JacocoReportAdapter extends JavaXMLCoverageReportAdapter {\n\n    @DataBoundConstructor\n    public JacocoReportAdapter(String path) {\n        super(path);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getXSL() {\n        return \"jacoco-to-standard.xsl\";\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getXSD() {\n        return null;\n    }\n\n    @Symbol(\"jacoco\")\n    @Extension\n    public static final class JacocoReportAdapterDescriptor extends JavaCoverageReportAdapterDescriptor {\n\n        public JacocoReportAdapterDescriptor() {\n            super(JacocoReportAdapter.class);\n        }\n\n        @NonNull\n        @Override\n        public String getDisplayName() {\n            return Messages.JacocoReportAdapter_displayName();\n        }\n    }\n}\n\nAll we need is to extend an abstract layer for XML-based Java report and provide an XSL file to convert the report to our standard format. There are also other extension points which are under development.\n\nIf you want implement a new coverage format that we did not provide abstract layer, you need to register `CoverageElement`s and implement an simple parser. See llvm-cov Plugin to get more details.\n\nFuture Tasks\n\nSupport more coverage tools ( JENKINS-52467, JENKINS-52469 and etc.)\n\nMake the UI extensible ( JENKINS-51738)\n\nImprove performance ( JENKINS-52982)\n\nPhase 3 Presentation Slides\n\nPhase 3 Presentation Video\n\nLinks\n\nJIRA Component\n\nProject Page\n\nProject Repository","title":"Code Coverage API plugin: 1.0 Release","tags":["plugins","gsoc","gsoc2018"],"authors":[{"avatar":null,"blog":null,"github":"cizezsy","html":"<div class=\"paragraph\">\n<p>Shenyu comes from China. He is a third year student now, and his major is\nComputer Science and technology. He has participated in GSoC 2018 for\n<a href=\"https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/\">Code Coverage API Plugin</a></p>\n</div>","id":"shenyu_zheng","irc":"cizezsy","linkedin":null,"name":"Shenyu Zheng","slug":"/blog/authors/shenyu_zheng/","twitter":null}]}},{"node":{"date":"2018-08-17T00:00:00.000Z","id":"003e40e9-a1b3-5859-a18a-60017d86c651","slug":"/blog/2018/08/17/speaker-blog-brent-laster/","strippedHtml":"More and more today, continuous delivery (CD) pipelines are making use of containers.\nIn many implementations, the primary workflow/orchestration tool for CD pipelines is Jenkins.\nAnd the primary container orchestration tool is Docker.\nTogether these two applications provide a powerful, yet simple to understand and use, model for leveraging containers in your CD pipeline.\n\nWhen creating a pipeline script in Jenkins, there are multiple ways to incorporate Docker into your CD pipeline.\nThey include:\n\nManually running a predefined Docker image as a separate Jenkins agent\n\nAutomatically provisioning a Docker image, when needed, as a part of a “cloud” configuration\n\nReferencing a “docker” global variable that can be invoked via the Jenkins DSL\n\nCalling the Docker executable directly via a shell call in the Jenkins DSL\n\nFor this article, we’ll focus on the third item in this list given that it provides the most flexibility and convenience for Docker use in the pipeline.\nMore details on the other three can be found in the upcoming “Continuous Delivery and Containerization” workshop at Jenkins World/DevOps World 2018.\n\nFirst, we’ll provide some background on a couple of terms for those who may not be familiar with Jenkins 2.\nIf you already are familiar with it, feel free to skip ahead to the Global Variables section.\n\nBackground\n\nWhen we talk about Jenkins here, we’re referring to “Jenkins 2” - a name we use to generally refer to the 2.0 and beyond versions of Jenkins.\nJenkins 2 offers a powerful evolution of Jenkins over prior versions.\nIn particular, it provides full integration for “pipeline-as-code” (PAC).\nPAC refers to being able to write your pipeline in a scripting language, much like source code for any program.\nThe code you write becomes the program that defines your pipeline.\nIt is also the code that gets executed when your pipeline is initiated.\nListing 1 shows a simple example pipeline.\nNotice that this is very different from the classic way of creating pipelines in Jenkins.\nHere you are writing code - rather than the more traditional approaches, such as filling in web forms to configure a Freestyle job.\n\n// Scripted Pipeline //\nnode('worker') {\n    stage('Source') { // Get code\n        // Get code from our git repository\n        git 'git@diyvb2:/home/git/repositories/workshop.git'\n    }\n    stage('Compile') { // Compile and do unit testing\n        // Run gradle to execute compile and unit testing\n        sh \"gradle clean compileJava test\"\n    }\n}\n// Declarative //\n\nListing 1: Example Jenkins 2 pipeline\n\nThe language that we write the Jenkins pipeline code in is a Domain-Specific Language (DSL).\nYou can think of it as the “programming language” for Jenkins pipelines.\nThere are two variants of it.\nThe style we saw in figure 1 is called “scripted syntax”.\nIt is a mixture of elements from the Groovy programming language and special Jenkins “steps”.\nThe Jenkins steps are provided by the plugins that are installed in the current system.\nA built-in tool called the Snippet Generator provides a wizard interface to allow users to pick the step and options they want.\nThen, the user can click on a button to have Jenkins automatically generate the correct DSL code in the large text box (figure 1).\nThe DSL code can be copied from there and pasted into the pipeline script.\n\nFigure 1. The Snippet Generator\n\nA second type of syntax is called “declarative syntax.”  We won’t go into detail on it here.\nBut it is a much more structured syntax that focuses on having users declare what they want in a pipeline, rather than writing the logic to make it happen.\n\nGlobal Variables\n\nIn addition to the steps that are provided by plugins, additional functionality for pipelines can be provided by global variables.\nThe simplest way to think of a global variable is as an object with methods that can be invoked on it.\nSeveral of these are built in to Jenkins, such as the Docker global variable.\nOthers can be created by users as part of the structure of a shared source code repository called a “shared pipeline library.”\n\nTo get a list of the global variables that are currently available to your Jenkins instance, you can go to the Snippet Generator screen.\nImmediately below the box for the generated pipeline script is a section titled Global Variables.\nThere, within the small print, is a link to get to the actual section (figure 2).\n\nFigure 2. Link to Global Variables Reference section.\n\nClicking on that link takes us to a list of currently available Global Variables.\nIf you have the Docker Pipeline Plugin installed, you will see one at the top for Docker. (Figure 3).\n\nFigure 3. Docker global variable specifics.\n\nBroadly, the docker global variable includes methods that can be applied to the Docker application, Docker images, and Docker containers.\n\nWe’ll focus first on a couple of the Docker image methods as shown in figure 4.\n\nFigure 4. Key methods for getting a Docker image.\n\nThere are multiple ways you can use these methods to create a new image.\nListing 2 shows a basic example of assigning and pulling an image using the image method.\n\nmyImage = docker.image(\"bclaster/jenkins-node:1.0\")\nmyImage.pull()\n\nListing 2: Assigning a image to a variable and pulling it down.\n\nThis can also be done in a single statement as shown in listing 3.\n\ndocker.image(\"bclaster/jenkins-node:1.0\").pull()\n\nListing 3: Shorthand version of previous call.\n\nYou can also download a Dockerfile and build an image based on it.(See listing 4.)\n\nnode() {\n    def myImg\n    stage (\"Build image\") {\n        // download the dockerfile to build from\n        git 'git@diyvb:repos/dockerResources.git'\n\n        // build our docker image\n        myImg = docker.build 'my-image:snapshot'\n    }\n}\n\nListing 4: Pipeline code to download a Dockerfile and build an image from it.\n\nFigure 5 shows the actual output from running that “Build image” stage.\nNote that the docker.build step was translated into an actual Docker build command.\n\nFigure 5. Actual Docker output from running the download and build\n\nThe Inside Command\n\nAnother powerful method available for the Docker global variable is the inside method.\nWhen executed, this method will do the following:\n\nGet an agent and a workspace to execute on\n\nIf the Docker image is not already present, pull it down\n\nStart the container with that image\n\nMount the workspace from Jenkins\n\nExecute the build steps\n\nMounting the workspace means that the Jenkins workspace will appear as a volume inside the container.\nAnd it will have the same file path.\nSo, things running in the container will have direct access to the same location.\nHowever, this can only be done if the container is running on the same underlying system - such that it can directly access the path.\n\nIn terms of executing the build steps, the inside method acts as a scoping method.\nThis means that the environment it sets up is in effect for any statement that happens within its scope (within the block under it bounded by {}).\nThe practical application here is that any pipeline “sh” steps (a call to the shell to execute something) are automatically run in the container.\nBehind the scenes, this is done by wrapping the calls with “docker exec”.\n\nWhen executed, the calls with the global variable are translated (by Jenkins) into actual Docker call invocations.\nListing 5 shows an example of using this in a script, along with the output from the first invocation of the “inside” method.\nYou can see in the output the docker commands that are generated from the inside method call.\n\nstage (\"Get Source\") {\n        // run a command to get the source code download\n        myImg.inside('-v /home/git/repos:/home/git/repos') {\n            sh \"rm -rf gradle-greetings\"\n            sh \"git clone --branch test /home/git/repos/gradle-greetings.git\"\n        }\n    }\n    stage (\"Run Build\") {\n        myImg.inside() {\n            sh \"cd gradle-greetings && gradle -g /tmp clean build -x test\"\n        }\n    }\n\nListing 5: Example inside method usage.\n\nFigure 6. Example inside method Docker command output.\n\nOnce completed, the inside step will stop the container,\nget rid of the storage, and create a record that this image was used for the build.\nThat record facilitates image traceability, updates, etc.\n\nAs you can see, the combination of using the Docker “global variable” and its “inside” method provide a simple and powerful way to spin up and work with containers in your pipeline.\nIn addition, since you are not having to make the direct Docker calls, you can invoke steps like sh within the scope of the inside method, and have them executed by Docker transparently.\n\nAs we mentioned, this is only one of several ways you can interact with Docker in your pipeline code.\nTo learn about the other methods and get hands-on practice, join me at DevOps World/Jenkins World in San Francisco or Nice for the workshop\n\" Creating a Deployment Pipeline with Jenkins 2\".\nHope to see you there!\n\nJoin the Jenkins project at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Using the Docker Global Variable in Your Jenkins Pipeline","tags":["event","jenkinsworld","jenkinsworld2018","pipeline","docker"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/19e71/brentlaster.jpg","srcSet":"/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/77b35/brentlaster.jpg 32w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/d4a57/brentlaster.jpg 64w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/19e71/brentlaster.jpg 128w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/68974/brentlaster.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/ef6ff/brentlaster.webp 32w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/8257c/brentlaster.webp 64w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/6766a/brentlaster.webp 128w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/22bfc/brentlaster.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/brentlaster.jpg"},"blog":null,"github":"brentlaster","html":"<div class=\"paragraph\">\n<p>Brent Laster is a Senior Manager in the Research and Development division at SAS in Cary, North Carolina. He manages several groups involved with release engineering processes, best practices, and tooling. He also serves as a resource for the use of open-source technologies and conducts internal training classes in technologies such as Git, Gerrit, Gradle, and Jenkins, both in the U.S. and abroad.</p>\n</div>\n<div class=\"paragraph\">\n<p>Brent Laster is the author of \"Professional Git\"\n(a comprehensive guide to Git for users ranging from beginners to advanced)\nand \"Jenkins 2 – Up and Running:  Evolve Your Pipeline for Next-Generation Automation\".</p>\n</div>","id":"brentlaster","irc":null,"linkedin":null,"name":"Brent Laster","slug":"/blog/authors/brentlaster/","twitter":"brentclaster"}]}},{"node":{"date":"2018-08-21T00:00:00.000Z","id":"814e4630-7e61-5840-9cbd-22628b628bfe","slug":"/blog/2018/08/21/contributor-summit-nice/","strippedHtml":"The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.\nThis summit will be on Tuesday, October 23rd 2018 in Nice, France just before Jenkins World.\nThe summit brings together community members to learn, meet and help shape the future of Jenkins.\nIn the Jenkins commmunity we value all types and sizes of contributions and love to welcome new participants.\nIt is free to join, just register here.\n\nTopics\n\nThere are plenty of exciting developments happening in the Jenkins community.\nThe summit will feature a 'State of the Project' update including updates from the Jenkins officers.\nWe will also have updates on the 'Big 5' projects in active development:\n\nJenkins Evergreen\n\nJenkins X\n\nConfiguration as Code\n\nJenkins Pipeline\n\nCloud Native Jenkins\n\nPlus we will feature a Google Summer of Code update, Special Interest Group updates and more!\n\nAgenda\n\nThe agenda is shaping up well and here is the outline so far.\n\n9:00am Kickoff & Welcome with coffee/pastries\n\n10:00am Project Updates\n\n12:00pm Lunch\n\n1.00pm BoF/Unconference\n\n3.00pm Break\n\n3.30pm Ignite Talks\n\n5.00pm Wrap-up\n\n6.00pm Contributor Dinner\n\nThe BoF (birds-of-a-feather) session will be an opportunity for in depth discussions, hacking or learning more about any of the big 5.\nBring your laptop, come prepared with questions and ideas, and be ready for some hacking too if you want.\nJoin in, hear the latest and get involved in any project during the BoF sessions.\nIf you want to share anything there will be an opportunity to do a 5-min ignite talk at the end.\nAttending is free, and no DevOps World | Jenkins World ticket is needed, but RSVP if you are going to attend to help us plan.\nSee you there!","title":"Join us at the Jenkins Contributor Summit Nice, Tuesday 23 October 2018","tags":["community","events","jenkins-world"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}},"publicURL":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/tracymiranda.jpg"},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda/","twitter":"tracymiranda"}]}},{"node":{"date":"2018-08-23T00:00:00.000Z","id":"409d4d90-3aa4-5eba-ac07-97d9486bc294","slug":"/blog/2018/08/23/speaker-blog-casc-part-1/","strippedHtml":"This blog post is part 1 of a Configuration-as-Code series\n\nJenkins is highly flexible and is today the de facto standard for implementing CI/CD, with an active community to maintain plugins for almost any combination of tools and use-cases.\nBut flexibility has a cost: in addition to Jenkins core, many plugins require some system-level configuration to be set so they can do their job.\n\nIn some circumstances, \"Jenkins Administrator\" is a full time position.\nOne person is responsible for both maintaining the infrastructure, and also pampering a huge Jenkins controller with hundred installed plugins and thousands hosted jobs.\nMaintaining up-to-date plugin versions is a challenge and failover is a nightmare.\n\nThis is like years ago when system administrators had to manage dedicated machines per service.\nIn 2018, everything is managed as code using infrastructure automation tools and virtualization.\nNeed a fresh new application server as staging environment for your application? Just deploy a Docker container.\nInfrastructure is missing resources? Apply a Terraform recipe to allocate more on your favourite Cloud.\n\nWhat about the Jenkins administrator role in this context? Should they still spend hours in the web UI, clicking checkboxes on web forms? Maybe they already adopted some automation, relying on Groovy script voodoo, or some home-made XML templating?\n\nEarly this year we announced the first alpha release of “Jenkins Configuration-as-Code” (JCasC), a fresh new approach to Jenkins configuration management, based on YAML configuration files and automatic model discovery.\n“JCasC” has been promoted as a\ntop-level Jenkins project, and the corresponding\nJenkins Enhancement Proposal has been accepted.\n\nWhat can JCasC do for our Jenkins Administrator?\n\nJCasC allows us to apply a set of YAML files on our Jenkins controller at startup or on-demand via the web UI.\nThose configuration files are very concise and human readable compared to verbose XML files the Jenkins uses to actually store configuration.\nThe files also have user-friendly naming conventions making it easy for administrators to configure all Jenkins components.\n\nHere’s an example:\n\njenkins:\n systemMessage: \"Jenkins managed by Configuration as Code\"\n\n securityRealm:\n   ldap:\n     configurations:\n       - server: ldap.acme.com\n         rootDN: dc=acme,dc=fr\n         managerPasswordSecret: ${LDAP_PASSWORD}\n     cache:\n       size: 100\n       ttl: 10\n     userIdStrategy: CaseInsensitive\n     groupIdStrategy: CaseSensitive\n\nAs you can see, you don’t need long explanation to understand how this YAML file will setup your Jenkins controller.\n\nBenefits\n\nThe most immediate benefit of JCasC is reproducibility.\nAn administrator can now bootstrap a new Jenkins controller with the exact same configuration with a trivial setup.\nThis allows them to create a test instance and check the impact of plugin upgrades in a sandboxed environment.\nThis also lets them be more confident with failover and disaster recovery scenarios.\n\nFurther benefits come when administrators start managing their Jenkins’ YAML configuration files in source control, like they do with Terraform configuration.\nDoing so gives them auditing and reversibility of their Jenkins controller configuration.\nTheycan establish a sane configuration change workflow that runs a test Jenkins instance and ensures configuration is healthy before actually applying any change to their production Jenkins controller.\n\nLast but not least, with ability to quickly setup Jenkins controllers and control them from a set of shared YAML configuration files, administrators can now offer per-team Jenkins instances, with more flexibility on installed plugins.\nA controller becomes more or less a transient piece of infrastructure for your team, as long as they also manage build definition with Jenkinsfiles.\n\nWith Configuration-as-Code we can stop having to treat our Jenkins controller like a pet we need to pamper, and start managing Jenkins controllers as cattle you can replace without effort nor impacts.\nWelcome in the “as-code” world.\n\nFigure 1. They are still cute though, right?\n\nOk, so what’s next?\n\nYou can read more about the Jenkins Configuration-as-Code plugin on the project’s\ngithub repository.\nTo chat with the community and contributors join our\ngitter channel,\nor come see us in person at\nlink: Jenkins World to discuss the JCasC project and its future!\n\nAlso don’t miss next post from the Configuration-as-Code series, where we’ll look at how JCasC works with sensitive data like passwords and other credentials.\n\nCome meet the Configuration as Code contributors, Nicolas de Loof and Ewelina Wilkosz at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins Configuration-as-Code: Look ma, no hands","tags":["configuration-as-code","jenkinsworld","jenkinsworld2018"],"authors":[{"avatar":null,"blog":null,"github":"ndeloof","html":"","id":"ndeloof","irc":null,"linkedin":null,"name":"Nicolas De Loof","slug":"/blog/authors/ndeloof/","twitter":null}]}},{"node":{"date":"2018-08-29T00:00:00.000Z","id":"edd1abcd-b413-5696-b610-a81a6a7fdd9f","slug":"/blog/2018/08/29/day-of-jenkins-and-other-chances-to-meet-jcasc/","strippedHtml":"The Jenkins Configuration as Code plugin is reaching a stage when it is almost ready to be used in a production environment.\nAs a matter of fact, I know some living-on-the-edge users are already doing that.\nThe first release candidates are out and the official 1.0 is just around the corner.\n\nI’d like to use this chance to invite you to meet us and contribute to the plugin.\nThere will be plenty of opportunities this autumn.\n\nJenkins Configuration as Code (also called \"JCasC\") is a Jenkins plugin that allows you to store and maintain all your Jenkins configuration in yaml file.\nIt’s like Pipeline or Job DSL but for managing Jenkins.\n\nIn one of my blogposts,\nJenkins Configuration as Code - Automating an automation server,\nI provide a longer explanation of the plugin, and answer questions like\n“why did we decided to develop it?” and “why you may want to use it?”.\nI recommend you to read that one if you’re not familiar with the project yet.\n\nThe plugin has been presented at a number of meetups - by me but also other contributors.\nThis is the first open source project that I’ve actively participated in and I’m quite shocked - positively - to see how many people decided to join the effort and actively develop the plugin with us.\nNow it’s time to take it to the bigger stage and broader audience.\nSo together with Nicolas de Loof I’m gonna present the plugin at DevOps World | Jenkins World in San Francisco (19th of September)  and in Nice (24th of October) - yes, Jenkins World is coming to Europe.\n\nBut that’s not all!\nPraqma - the company I work for -\nhas organised a number of “Day of Jenkins” events around Scandinavia in past years.\nThis October they have decided to bring the events back with a theme: Day of Jenkins 2018 is\nDay of Jenkins [as code] .\nIt’s a two track one day event with presentations and hands-on sessions for users and a hackathon for contributors - in that specific case Configuration as Code Plugin’s contributors.\n\nDetailed agenda is available on the\nevent page -\nJenkins X, Jenkins Evergreen, Jenkins Configuration as Code and more waiting for you!\n\nI really can’t wait to hear what Kohsuke has to say and to introduce you to the plugin during the hands-on session I’ll run.\n\nHope to see you at least at one of those events!\n\nCome meet the Configuration as Code contributors, Nicolas de Loof and Ewelina Wilkosz at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Day of Jenkins, and other chances to meet JCasC","tags":["jenkins","jcasc","configuration as code"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/19e71/ewelinawilkosz.jpg","srcSet":"/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/77b35/ewelinawilkosz.jpg 32w,\n/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/d4a57/ewelinawilkosz.jpg 64w,\n/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/19e71/ewelinawilkosz.jpg 128w,\n/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/68974/ewelinawilkosz.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/ef6ff/ewelinawilkosz.webp 32w,\n/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/8257c/ewelinawilkosz.webp 64w,\n/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/6766a/ewelinawilkosz.webp 128w,\n/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/22bfc/ewelinawilkosz.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/62cac5d7353c59176523b1ca3cb1166c/ewelinawilkosz.jpg"},"blog":null,"github":"ewelinawilkosz","html":"<div class=\"paragraph\">\n<p>Jenkins Contributor since 2017, when she got involved in Jenkins Configuration as Code Plugin development.\nVoted Most Valuable Contributor in 2018.\nShe has 14 years of experience in IT, currently working as a CI/CD consultant at Verifa.\nIn that role she’s trying to solve numerous issues Jenkins users are facing daily - as developers, administrators, maintainers.\nJenkins Governance Board member.</p>\n</div>","id":"ewelinawilkosz","irc":null,"linkedin":null,"name":"Ewelina Wilkosz","slug":"/blog/authors/ewelinawilkosz/","twitter":"WilkoszEwelina"}]}},{"node":{"date":"2018-08-30T00:00:00.000Z","id":"76fe30c4-d5ca-529d-af0c-044c46a5a864","slug":"/blog/2018/08/30/speaker-blog-kubernetes-plugin/","strippedHtml":"This is a guest blog by Niklas Tanskanen, consultant at\nEficode.\n\nKubernetes, the container orchestration platform is rapidly becoming popular. There are more and more workloads that you can run on top of Kubernetes. It’s becoming an enabling layer of your Hyper-convergenced infrastructure.\n\nIf you set up Kubernetes as a Cloud provider in Jenkins, you’ll get a very powerful couple for running your workloads.\nTo do that, you can simply install\nKubernetes plugin.\nKubernetes is able to run your Jenkins workloads as long as they are run in container.\nAnd containers are an awesome way if your workload is a build, because you can pack all your application and OS dependencies in a container and then run it anywhere!\n\nLet’s imagine that you have been running a Kubernetes cluster setup in your organisation for a while now.\nFirst it was all about proof of concept but now its becoming more popular within your developers and you have to think about scaling and orchestration.\nResource quotas are a part of that and every responsible operator should set those up both in both development and production clusters.\nOtherwise people will be lazy and just reserve all the resources of your cluster without actually using those resources for anything.\nBy introducing quotas into your cluster, you can control how many resources should each namespace have.\n\nQuotas are a mature feature of Kubernetes already.\nYou have the possibility to create very fine grained quotas for different hardware resources, whenever it’s fast disk, GPUs or CPU time.\nYou can also specify multiple scopes of quota per one namespace.\nFor example, you can have a quota for workloads that are to be run to the infinity like web servers or databases.\nOr have quota for workloads that are short lived like builds or test automation runs.\n\nTable 1. Scopes\n\nScope\nDescription\n\nTerminating\nMatch pods where.spec.activeDeadlineSeconds >= 0\n\nNotTerminating\nMatch pods where.spec.activeDeadlineSeconds is nil\n\nBestEffort\nMatch pods that have best effort quality of service.\n\nNotBestEffort\nMatch pods that do not have best effort quality of service.\n\nDifferent scopes of Kubernetes quota\n\nSince Jenkins is all about running short workloads, you should aim for the Terminating scope of quota.\nBut how do you specify workloads in Jenkins so that correct scope is used?\n\nIf you were to do this in Kubernetes, you have to specify.spec.activeDeadlineSeconds.\nThe same field can also be specified by the Kubernetes plugin when you are specifying a Pod Template.\n\nFigure 1. Specifying.spec.activeDeadlineSeconds in the Kubernetes plugin\n\nSame configuration is available in the Jenkinsfile as well if you don’t like static configurations.\n\npodTemplate(label: 'maven', activeDeadlineSeconds: 180, containers: [\n    containerTemplate(name: 'maven', image: 'maven:3.5.4-jdk-10-slim')\n  ]) {\n  // maven magic\n}\n\nThis was just a small sample of features of the Kubernetes plugin in Jenkins. For more, be sure to check out our\ntalk where we share more of how you can utilise Kubernetes with Jenkins!\n\nCome see Niklas Tanskanen and many other Jenkins experts and contributors at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Effectively using Kubernetes plugin with Jenkins","tags":["kubernetes","jenkinsworld","jenkinsworld2018"],"authors":[{"avatar":null,"blog":null,"github":"tanskann","html":"","id":"tanskann","irc":null,"linkedin":null,"name":"Niklas Tanskanen","slug":"/blog/authors/tanskann/","twitter":null}]}},{"node":{"date":"2018-08-31T00:00:00.000Z","id":"0d561c02-de0c-5799-a5a4-74b3cc361577","slug":"/blog/2018/08/31/shifting-gears/","strippedHtml":"Kohsuke here. This is a message for my fellow Jenkins developers.\n\nJenkins has been on an amazing run, but I believe we are trapped in a local optimum, and losing appeal to people who fall outside of our traditional sweet spot.\nWe need to take on new efforts to solve this. One is “cloud native Jenkins” that creates a flavor of Jenkins that runs well on Kubernetes.\nThe other is “gear shift”, where we take an evolutionary line from the current Jenkins 2, but with breaking changes in order to gain higher development speed.\n\nI say it’s time we tackle these problems head on. I’ve been talking to various folks, and I think we need to take on two initiatives.\nOne is what I call \"Cloud Native Jenkins,\" and the other is to insert a jolt in Jenkins.\n\nSome of you have already seen the presentation I posted on the Jenkins YouTube channel.  In this post, I’ll expand on that with some additional details.\n\nJenkins: Shifting Gears Presentation ( Slides)\n\nCome hear more in Kohsuke’s keynote at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.\n\nOur Amazing Success\n\nOur project has been an amazing success over the past 10+ years, thanks to you all. What started as my hobby project became a huge community that boasts thousands of contributors and millions of users.\nWhen I think about what enabled this amazing journey, I can think of several magic sauces:\n\nExtensible:\nthe ability to take the system, or a portion of the system, then build on top of it to achieve what you need, without anyone else’s permission.\nHere, I’m not talking about the specific technical mechanism of Guice, extension point, etc, but rather I’m talking more broadly about the governance, culture, distribution mechanism, and so on.\n\nGeneral purpose:\nAt the base level, Jenkins can be used for any kind of automation around the area of software development.\nThis matched the reality of the software engineering world well.\nCombined with extensibility, this general purpose system that is Jenkins can specialize into any domain, much like Linux and JetBrains IDEs.\n\nCommunity:\nTogether we created a community where different people push envelopes in different directions and share the fruits with others.\nThis meant everyone can benefit from somebody else’s work, and great ideas and best practices spread more quickly.\n\nOur Challenges\n\nThe way we set up our community meant that collectively we were able to work toward solving certain kinds of problems locally and organically, such as Android application development, new UX, more expressive pipeline description language, …​\n\nBut at the same time, the incremental, autonomous nature of our community made us demonstrably unable to solve certain kinds of problems.\nAnd after 10+ years, these unsolved problems are getting more pronounced, and they are taking a toll — segments of users correctly feel that the community doesn’t get them, because we have shown an inability to address some of their greatest difficulties in using Jenkins.\nAnd I know some of those problems, such as service instability, matter to all of us.\n\nIn a way, we are stuck in a local optimum, and that is a dangerous place to be when there is growing competition from all sides.\nSo we must solve these problems to ensure our continued relevance and popularity in the space.\n\nSolving those problems starts with correctly understanding them, so let’s look at those.\n\nService Instability\n\nCI/CD service was once a novelty and a nice-to-have.\nToday, it is very much a mission critical service, in no small part because of us!\nIncreasingly, people are running bigger and bigger workloads, loading up more and more plugins, and expect higher and higher availability.\n\nAdmins today are unable to meet that heightened expectation using Jenkins easily enough.\nA Jenkins instance, especially a large one, requires too much overhead just to keep it running.\nIt’s not unheard of that somebody restarts Jenkins every day.\n\nAdmins expect errors to be contained and not impact the entire service.\nThey expect Jenkins to defend itself better from issues such as pipeline execution problems, run-away processes, over resource consumption so that they don’t have to constantly babysit the service.\n\nEvery restart implies degraded service for the software delivery teams where they have to wait longer for their builds to start or complete.\n\nBrittle Configuration\n\nEvery Jenkins admin must have been burnt at least once in the past by making changes that have caused unintended side effects.\nBy “changes,” I’m talking about installing/upgrading plugins, tweaking job settings, etc.\n\nAs a result, too many admins today aren’t confident that they can make changes safely.\nThey fear that their changes might cause issues for their software delivery teams, that those teams will notice regressions before they do, and that they may not be able to back out somes changes easily.\nIt feels like touching a Jenga tower for them, even when a change is small.\n\nUpgrading Jenkins and plugins is an important sub case of this, where admins often do not have understanding of the impact.\nThis decreases the willingness to upgrade, which in turn makes it difficult for the project to move forward more rapidly, and instead we get trapped with the long tail of compatibility burden.\n\nAssembly Required\n\nI’ve often described Jenkins as a bucket full of LEGO blocks — you can build any car you want, but everyone first has to assemble their own car in order to drive one.\n\nAs CI/CD has gone mainstream, this is no longer OK.\nPeople want something that works out of the box, something that gets people to productivity within 5 clicks in 5 minutes.\nToo many choices are confusing users, and we are not helping them toward “the lit path.”\nEveryone feels uncertain if they are doing the right thing, contributors are spread thin, and the whole thing feels a bit like a Frankenstein.\n\nThis is yet another problem we can’t solve by “writing more plugins.”\n\nReduced Development Velocity\n\nThis one is a little different from others that our users face, but nonetheless a very important one, because it impacts our ability to expand and sustain the developer community, and influences how fast we can solve challenges that our users face.\n\nSome of these problems are not structural and rather just a matter of doing it (for example, Java 11 upgrade), but there are some problems here that are structural.\n\nI think the following ones are the key ones:\n\nAs a contributor, a change that spans across multiple plugins is difficult.\nTooling gets in the way, users might not always upgrade a group of changes together, reviewing changes is hard.\n\nAs a contributor, the tests that we have do not give me enough confidence to ship code.\nNot enough of them run automatically, coverage is shallow, and there just isn’t anything like production workload of real users/customers.\n\nThese core problems create other downstream problems, for example:\n\nAs a non-regular contributor, what I think of as a small and reasonable change takes forever and a 100 comments going back & forth to get in. I get discouraged from ever doing it again.\n\nAs a regular contributor, I feel people are throwing crap over the wall, and if they cause problems after a release, I’m on the hook to clean up that mess.\n\nAs a user, I get a half-baked change that wreaks havoc, which results in loss of their confidence to Jenkins, an even slower pace of change, etc. This is a vicious cycle as it makes us even more conservative, and slow down the development velocity.\n\nPath Forward\n\nIn the past, my frustration and regret is that we couldn’t take on an effort of this magnitude.\nBut that is NO MORE!\nAs CTO of CloudBees, I’m excited that these challenges are important enough for CloudBees now that we want to solve these efforts within the Jenkins project.\n\nI’ve been talking to many of you, and there are a number of existing efforts going on that touch this space already.\nFrom there, the vision emerged is that we organize around two key efforts:\n\nCloud Native Jenkins: a general purpose CI/CD engine that runs on Kubernetes, and embraces a fundamentally different architecture and extensibility mechanism.\n\nJolt in Jenkins: continue the incremental trajectory of Jenkins 2 today, but with renegotiated “contract” with users to gain what we really need, such as faster pace of development and better stability.\n\nCloud Native Jenkins\n\nIn order to solve these problems that we can’t solve incrementally,\nI’m proposing the “Cloud Native Jenkins” sub-project in the context of the\nCloud Native SIG\nwith Carlos, who is the leader of this SIG.\n\nWe don’t have all the answers, that’s something we’ll discuss and figure out collectively, but based on numerous conversations with various folks, I think there are many clear pieces of puzzles.\n\nKubernetes as the Runtime\n\nJust like Java was the winning server application platform in the early 2000s, today, Kubernetes is the dominant, winning platform.\nCloud Native Jenkins should embrace the paradigm this new platform encourages. For example,\n\nServerless / function-as-a-service build execution (ala\nJenkinsfile runner)\nthat are isolated.\n\nVarious pieces of functionalities deployed as separate microservices.\n\nServices interacting through\nKubernetes CRDs\nin order to promote better reuse and composability.\n\nThese are the design principles that enable highly desirable properties like infinite scalability, pay-as-you-go cost model, immutability, zero down time operability, etc.\n\nNew Extensibility Mechanism\n\nWe need to introduce a new mechanism of extensibility in order to retain the magic sauces, and continue our incredible ecosystem.\n\nFor example, microservice or container-based extensibility avoids the service instability problem (ala\nKnative builder\nand the\nuserspace-scm work.)\nPipeline shared libraries is another example that concretely shows how extensibility mechanism can go beyond plugin, though it hasn’t fully flourished as one just yet.\n\nData on Cloud Managed Data Services\n\nThe long-term data storage must be moved from the file system to data services backed by cloud managed services, in order to achieve high availability and horizontal scalability, without burdening admins with additional operational responsibilities.\n\nConfiguration as Code\n\nJenkins Configuration as Code\nhas been incredibly well received, in part because it helps to solve some of the brittle configuration problems.\nIn Cloud Native Jenkins, JCasC must play a more central role, which in turn also helps us reduce the surface area for Blue Ocean to cover by eliminating many configuration screens.\n\nEvergreen\n\nJenkins Evergreen\nis another well received effort that’s already underway, which aims to solve the brittleness problem and developer velocity problem. This is a key piece of the puzzle that allows us to move faster without throwing users under the bus.\n\nSecure by Default Design\n\nOver the past years, we’ve learned that several different areas of Jenkins codebase, such as Remoting, are inherently prone to security vulnerabilities because of their design. Cloud Native Jenkins must address those problems by flipping those to “secure by design.”\n\nFollowing Footsteps of Jenkins X\n\nJenkins X\nhas been pioneering the use of Jenkins on Kubernetes for a while now, and it has been very well received, too.\nSo naturally, part of the aim of Cloud Native Jenkins is to grow and morph Jenkins into a shape that really works well for Jenkins X.\nCloud Native Jenkins will be the general purpose CI/CD engine that runs on Kubernetes, which Jenkins X uses to create an opinionated CD experience for developing cloud native apps.\n\nAll The Same Good Things, with New Foundation\n\nAnd then on top of these foundations, we need to rebuild or transplant all the good things that people love about Jenkins today, and all the good things people expect, such as:\n\nGreat “batteries included” onboarding experience for new users, where we are present in all the marketplaces, 5 clicks to get going and easy integration with key services.\n\nModern lovable UX in the direction of front-end web apps that Blue Ocean pioneered.\n\nGeneral purpose software that is useful for all sorts of software development.\n\nCloud Native Jenkins MVP\n\nAs I wrote, a number of good efforts are already ongoing today. Thus in order to get this effort off the ground, I believe the first MVP that we aim toward is pretty clear, which is to build a function-as-a-service style Jenkins build engine  that can be used underneath Jenkins X.\n\nCloud Native Jenkins MVP combines the spirits of Jenkins Pipeline, Jenkins Evergreen, Jenkinsfile Runner, and Jenkins Configuration as Code.\nIt consists of:\n\nWebhook receiver:\na service that receives webhooks from GitHub and triggers a build engine.\n\nBuild Engine:\ntake Jenkinsfile Runner and evolve it so that it can run as a “function” that carries out a pipeline execution, with some CasC sprinkled together in order to control Jenkins configuration and plugins  used.\nThis way, Jenkinsfile works as-is for the most part.\n\nContinuously delivered through Evergreen:\nIt allows us to solve the combinatorial version explosion problem, allow us to develop changes that span multiple plugins faster, and develop changes more confidently.\nOf all the projects out there, ours should be the community that believes in the value of Continuous Delivery and Evergreen is how we bring continuous delivery to the development of Cloud Native Jenkins itself.\n\nThis solves some of the key challenges listed above that are really hard to achieve today, so it’s already incredibly useful.\n\nThe catch is that this MVP has no GUI. There’s no Blue Ocean UI to look at. No parsing of test reports, no build history. It uses no persistent volumes, it keeps no record of builds. The only thing permanent at the end of a build is whatever data is pushed out from Jenkins Pipeline, such as images pushed to a Docker registry, email notifications, and GitHub commit status updates.  Load of other features in Jenkins will not be available here.\n\nThis is not that far from how some sophisticated users are deploying Jenkins today. All in all, I think this is the right trade off for the first MVP. As you can see, we have most of the pieces already.\n\nFrom here, the build engine will get continuously more polished and more cloud native, other services will get added to regain features that were  lost, new extensibility will get introduced to reduce the role of current in-VM plugins, and so on.\n\nJolt in Jenkins\n\nCloud Native Jenkins is a major effort and in particular initially it’s not usable for everyone; it only targets a subset of Jenkins functionalities, and it requires a platform whose adoption is still limited today.\nSo in parallel, we need to continue the incremental evolution of Jenkins 2, but in an accelerated speed. Said differently, we need to continue to serve the majority of production workload on Jenkins 2 today, but we are willing to break some stuff to gain what we really need, such as faster pace of development and better stability, in ways that were previously not possible. This requires us injecting a jolt in Jenkins.\n\nRelease Model Change\n\nThe kind of jolts that we need will almost certainly means we need to renegotiate the expectation around new releases with our users.\nMy inspiration source is what happened to the development of Java SE. It changed the release model and started moving faster, by shedding off more pieces faster, in ways that they haven’t done before.\nAgain, Jenkins Evergreen is the key piece that achieves this without throwing users under a bus, for the reasons I described in the Cloud Native MVP above.\n\nCompatibility\n\nThis jolt is aimed to put us on a different footing, one where our current “forever compatibility” expectation does not hold. If that requires us to use a new major version number, such as Jenkins 3, or new major version number every N months, I’m open to that.\n\nOf course, whatever move we do has to make sense to users. The accelerated pace of value delivery needs to justify any inconvenience we put on users, such as migration, breaking changes, and so on.\n\nIn practice, what that means is that we need to be largely compatible. We have to protect users’ investment into their existing job definitions as much as possible. We continue to run freestyle jobs, etc…​\n\nIngredients\n\nOther proposals CloudBees is putting forward with the intent to staff the effort are:\n\nConfiguration as Code: accelerate that and make it a more central  part of Jenkins.\n\nDeveloper experience improvements through buildpack style auto-detection of project types.\n\nContinued evolution of Jenkins Pipeline\n\nThere’s an effort going on to remove CPS execution of Pipeline and isolate any failures during pipeline execution.\n\nContinue to evolve Jenkins Pipeline toward the sweet spot that works well with the Cloud Native Jenkins effort.\n\nContinued tactical bug-by-bug improvements of Pipeline.\n\nEvergreen: I already talked about this above.\n\nPlugin spring cleaning: let’s actively guide users more toward the sweet spot of Jenkins and reduce our feature surface area, so that we can focus our contributors’ effort to important parts of Jenkins. I expect this to be a combination of governance and technical efforts.\n\nTable stakes service integration: let’s look at what kind of tablestake tool/service integrations today’s user need, and\nsee if we are meeting/exceeding the competition.\nWhere we fall short, let’s add/reimplement what are needed.\n\nUI Effort\n\nThe Web UI will be likely done differently in Cloud Native Jenkins, as its own app and not a plugin in Jenkins. JCasC will also play a bigger role in Cloud Native Jenkins, reducing UI surface area from Jenkins.\n\nGiven that, CloudBees will reconsider where to spend its effort in Blue Ocean. The current work where parts of Blue Ocean are made reusable as NPM modules is one example that aligns well with this new vision.\n\nConclusion\n\nThis document lays out the key directions and approaches in a broad stroke, which I discussed with a number of you in the past. Hopefully, this gives you the big picture of how I envision where to move Jenkins forward, not just as the creator of Jenkins but as the CTO of CloudBees, who employs a number of key contributors to the Jenkins project.\n\nCome meet Kohsuke and chat with him about the direction of Jenkins at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins: Shifting Gears","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2018-09-10T00:00:00.000Z","id":"3cfe2a34-ab7c-5a8e-baa2-c46178e12dd1","slug":"/blog/2018/09/10/scaling-network-connections/","strippedHtml":"Oleg Nenashev and I will be speaking at DevOps World | Jenkins World in San Francisco this year about\nScaling Network Connections from the Jenkins Controller.\nOver the years there have been many efforts to analyze, optimize, and fortify the “Remoting channel”\nthat allows a controller to orchestrate agent activity and receive build results.\nTechniques such as tuning the agent launcher can improve service,\nbut qualitative change can only come from fundamentally reworking what gets transmitted and how.\n\nIn March, jira:27035[] introduced a framework for inspecting the traffic on a Remoting channel at a high level.\nPreviously, developers could only use generic low-level tools such as Wireshark,\nwhich cannot identify the precise piece of Jenkins code responsible for traffic.\n\nOver the past few months, the\nCloud Native SIG\nhas been making progress in addressing root causes.\nThe\nArtifact Manager on S3 plugin\nhas been released and integrated with Jenkins Evergreen,\nallowing upload and download of large artifacts to happen entirely between the agent and Amazon servers.\nPrototype plugins allow all build log content generated by an agent (such as in sh steps)\nto be streamed directly to external storage services such as AWS CloudWatch Logs.\nWork has also begun on uploading JUnit-format test results, which can sometimes get big,\ndirectly from an agent to database storage.\nAll these efforts can reduce the load on the Jenkins controller and local network\nwithout requiring developers to touch their Pipeline scripts.\n\nOther approaches are on the horizon.\nWhile “one-shot” agents run in fresh VMs or containers greatly improve reproducibility,\nthey suffer from the need to transmit megabytes of Java code for every build,\nso Jenkins features will need to be built to precache most or all of it.\nWork is underway to use Apache Kafka to make channels more robust against network failures.\nMost dramatically, the proposed\nCloud Native Jenkins MVP\nwould eliminate the bottleneck of a single Jenkins controller service handling hundreds of builds.\n\nCome meet Jesse, Oleg, and other Cloud Native SIG members at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Scaling Network Connections from the Jenkins Controller","tags":["jenkinsworld","jenkinsworld2018","cloud-native","performance","scalability","remoting"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick/","twitter":"tyvole"}]}},{"node":{"date":"2018-09-11T00:00:00.000Z","id":"023ce63a-1296-5fa9-b1fd-4c4141fdc95b","slug":"/blog/2018/09/11/speaker-blog-warnings-plugin/","strippedHtml":"Jenkins' Warnings plugin collects compiler warnings or issues reported by static analysis tools and visualizes the\nresults. The plugin (and the associated static analysis plugin suite) has been part of the Jenkins plugin eco-system\nfor more than ten years now. In order to optimize user experience and support Pipeline, a major rewrite of\nthe whole set of plugins was necessary. This new version (code name White Mountain) is now available as a public\nbeta. Please download and install this new version and help us to identify problems before the API is sealed.\n\nThe new release is available in the\nexperimental update center.\nIt has built-in support for almost hundred static analysis tools (including several compilers), see the list of\nsupported report formats.\n\nFeatures overview\n\nThe Warnings plugin provides the following features when added as a post build action (or step) to a job:\n\nThe plugin scans the console log of a Jenkins build or files in the workspace of your job for any kind of issues.\nThere are almost one hundred\nreport formats supported.\nAmong the problems it can detect:\n\nerrors from your compiler (C, C#, Java, etc.)\n\nwarnings from a static analysis tool (CheckStyle, StyleCop, SpotBugs, etc.)\n\nduplications from a copy-and-paste detector (CPD, Simian, etc.)\n\nvulnerabilities\n\nopen tasks in comments of your source files\n\nThe plugin publishes a report of the issues found in your build, so you can navigate to a summary report from the\nmain build page. From there you can also dive into the details:\n\ndistribution of new, fixed and outstanding issues\n\ndistribution of the issues by severity, category, type, module, or package\n\nlist of all issues including helpful comments from the reporting tool\n\nannotated source code of the affected files\n\ntrend charts of the issues\n\nIn the next sections, I’ll show the new and enhanced features in more detail.\n\nOne plugin for all tools\n\nPreviously the warnings plugin was part of the static analysis suite that provided the same set of features through\nseveral plugins (CheckStyle, PMD, Static Analysis Utilities, Analysis Collector etc.).\nIn order to simplify the user experience and the development process, these\nplugins and the core functionality have been merged into the warnings plugin. All other plugins are not required\nanymore and will not be supported in the future. If you currently use one of these plugins you should migrate\nto the new recorders and steps as soon as possible. I will still maintain the old code for a while,\nbut the main development effort will be spent into the new code base.\n\nThe following plugins have been integrated into the beta version of the warnings plugin:\n\nAndroid-Lint Plugin\n\nCheckStyle Plugin\n\nCCM Plugin\n\nDry Plugin\n\nPMD Plugin\n\nFindBugs Plugin\n\nAll other plugins still need to be integrated or need to be refactored to use the new API.\n\nNew pipeline support\n\nRequirements for using the Warnings plugin in Jenkins Pipeline can be complex and sometimes controversial.\nIn order to be as flexible as possible I decided to split the main step into two individual parts,\nwhich could then be used independently from each other.\n\nSimple pipeline configuration\n\nThe simple pipeline configuration is provided by the step recordIssues. This step is automatically derived from the\nFreeStyle job recorder: it scans for issues in a given set of files (or in the console log) and reports these issues\nin your build. You can use the snippet generator to create a working snippet that calls this step. A typical example\nof this step is shown in the following example:\n\nrecordIssues\n    enabledForFailure: true,\n    tools: [[pattern: '*.log', tool: [$class: 'Java']]],\n    filters: [includeFile('MyFile.*.java'), excludeCategory('WHITESPACE')]\n\nIn this example, the files '*.log' are scanned for Java issues. Only issues with a file name matching the\npattern 'MyFile.*.java' are included. Issues with category 'WHITESPACE' will be excluded. The\nstep will be executed even if the build failed. The recorded report of warnings will be published under the fixed\nURL 'https://[ your-jenkins ]/job/[ your-job ]/java'. URL or name of the report can be changed if required.\n\nAdvanced Pipeline Configuration\n\nSometimes publishing and reporting issues using a single step is not sufficient. For instance, if you build your\nproduct using several parallel steps and you want to combine the issues from all of these steps into\na single result. Then you need to split scanning and aggregation. Therefore, the plugin  provides the following\ntwo steps that are combined by using an intermediate result object:\n\nscanForIssues : this step scans a report file or the console log with a particular parser and creates an\nintermediate report object that contains the report.\n\npublishIssues : this step publishes a new report in your build that contains the aggregated results\nof one or several scanForIssues steps.\n\nYou can see the usage of these two steps in the following example:\n\ndef java = scanForIssues tool: [$class: 'Java']\ndef javadoc = scanForIssues tool: [$class: 'JavaDoc']\n\npublishIssues issues:[java, javadoc], filters:[includePackage('io.jenkins.plugins.analysis.*')]\n\ndef checkstyle = scanForIssues tool: [$class: 'CheckStyle'], pattern: '**/target/checkstyle-result.xml'\npublishIssues issues:[checkstyle]\n\ndef pmd = scanForIssues tool: [$class: 'Pmd'], pattern: '**/target/pmd.xml'\npublishIssues issues:[pmd]\n\npublishIssues id:'analysis', name:'White Mountains Issues', issues:[checkstyle, pmd],\n    filters:[includePackage('io.jenkins.plugins.analysis.*')]\n\nFiltering issues\n\nThe created report of issues can be filtered afterwards. You can specify an arbitrary number of include or exclude\nfilters. Currently, there is support for filtering issues by module name, package or namespace name, file name,\ncategory or type.\n\nAn example pipeline that uses such a filter is shown in the following snippet:\n\nrecordIssues\n    tools: [[pattern: '*.log', tool: [$class: 'Java']]],\n    filters: [includeFile('MyFile.*.java'), excludeCategory('WHITESPACE')]\n\nQuality gate configuration\n\nYou can define several quality gates that will be checked after the issues have been reported. These quality gates\nlet you to modify Jenkins' build status so that you immediately see if the desired quality of your product is met.\nA build can be set to unstable or failed for each of these quality gates. All quality gates use a simple metric:\nthe maximum number of issues that can be found and still pass a given quality gate.\n\nAn example pipeline that enables a quality gate for 10 warnings in total or 1 new warning is shown in the\nfollowing snippet:\n\nrecordIssues\n    tools: [[pattern: '*.log', tool: [$class: 'Java']]], unstableTotalHigh: 10, unstableNewAll: 1\n\nIssues history: new, fixed, and outstanding issues\n\nOne highlight of the plugin is the ability to categorize issues of subsequent builds as new, fixed and outstanding.\n\nUsing this feature makes it a lot easier to keep the quality of your project under control: you can focus\nonly on those warnings that have been introduced recently.\n\nNote: the detection of new warnings is based on a complex algorithm that tries to track the same warning in\ntwo two different versions of the source code. Depending on the extend of the modification of the source code\nit might produce some false positives, i.e., you might still get some new and fixed warnings even if there should\nbe none. The accuracy of this algorithm is still ongoing research and will be refined in the next couple of months.\n\nSeverities\n\nThe plugin shows the distribution of the severities of the issues in a chart. It defines the\nfollowing default severities, but additional ones might be added by plugins that extend the warnings plugin.\n\nError : Indicates an error that typically fails the build\n\nWarning (High, Normal, Low): Indicates a warning of the given priority. Mapping to the priorities\nis up to the individual parsers.\n\nNote that not every parser is capable of producing warnings with a different severity. Some of the parses simply\nuse the same severity for all issues.\n\nBuild Trend\n\nIn order to see the trend of the analysis results, a chart showing the number of issues per build is also\nshown. This chart is used in the details page as well as in the job overview. Currently, type and configuration\nof the chart is fixed. This will be enhanced in future versions of the plugin.\n\nIssues Overview\n\nYou can get a fast and efficient overview of the reported set of issues in several aggregation views.\nDepending on the number or type of issues you will see the distribution of issues by\n\nStatic Analysis Tool\n\nModule\n\nPackage or Namespace\n\nSeverity\n\nCategory\n\nType\n\nEach of these detail views are interactive, i.e. you can navigate into a subset of the categorized issues.\n\nIssues Details\n\nThe set of reported issues is shown in a modern and responsive table. The table is loaded on demand using an Ajax\ncall. It provides the following features:\n\nPagination : the number of issues is subdivided into several pages which can be selected by using the provided page\nlinks. Note that currently the pagination is done on the client side, i.e. it may take some time to obtain the whole table of\nissues from the server.\n\nSorting : the table content can be sorted by clicking on ony of the table columns.\n\nFiltering, Searching : you can filter the shown issues by entering some text in the search box.\n\nContent Aware : columns are only shown if there is something useful to display. I.e., if a tool does not report an\nissues category, then the category will be automatically hidden.\n\nResponsive : the layout should adapt to the actual screen size.\n\nDetails : the details message for an issue (if provided by the corresponding static analysis tool) is shown as\nchild row within the table.\n\nRemote API\n\nThe plugin provides two REST API endpoints.\n\nSummary of the analysis result\n\nYou can obtain a summary of a particular analysis report by using the URL [tool-id]/api/xml\n(or [tool-id]/api/json). The summary contains the number of issues, the quality gate status, and all\ninfo and error messages.\n\nDetails of the analysis result\n\nThe reported issues are also available as REST API. You can either query all issues or only the\nnew, fixed, or outstanding issues. The corresponding URLs are:\n\n[tool-id]/all/api/xml : lists all issues\n\n[tool-id]/fixed/api/xml : lists all fixed issues\n\n[tool-id]/new/api/xml : lists all new issues\n\n[tool-id]/outstanding/api/xml : lists all outstanding issues\n\nHow You Can Help\n\nI hope these new features are useful for everyone! Please download or install this new release and test it in your jobs:\n\nConvert some of your jobs to the new API and test the new (and old) features (based on your requirements).\n\nRead all labels carefully, I’m not a native speaker so some descriptions might be misleading or incorrect.\n\nCheck the new URLs and names of the parsers, see list of\nsupported report formats. These\ncan’t be changed after the beta testing.\n\nIf you find a problem, incorrect phrase, typo, etc. please report a bug in Jira (or even better: file a PR in GitHub).\n\nThis has been a brief overview of the new features of the Warnings plugin in Jenkins. For more, be sure to check out my\ntalk at \"DevOps World | Jenkins World\" where I show more details of the Warnings plugin!\n\nCome see Ullrich Hafner and many other Jenkins experts and contributors at\nDevOps World | Jenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Warnings Plugin 5.0 (White Mountain) Public Beta","tags":["warnings","jenkinsworld","jenkinsworld2018"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/uhafner.jpg"},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/authors/uhafner/","twitter":null}]}},{"node":{"date":"2018-09-12T00:00:00.000Z","id":"4f66e646-7f00-5fcb-825e-a751b21abc62","slug":"/blog/2018/09/12/2018-community-survey/","strippedHtml":"Take the 5th Annual DevOps and Jenkins Community Survey\n\nWith DevOps World | Jenkins World San Francisco right around the corner, CloudBees is excited to sponsor the 2018 DevOps and Jenkins Community Survey. We want to capture the details of your DevOps experience in order to provide valuable insights to the Jenkins Community and beyond. Our community is stronger together - and this look at our collective experience will reveal the big picture and shine a light on key trends. This year, as the Jenkins project continues to evolve with Jenkins X , Configuration as Code and more, your input is more critical than ever.\n\nLet’s look at what we learned in 2016 and 2017:\n\nIn 2016 we found that:\n\nJenkins continued to hold the position as a company standard orchestration solution.\n\n29% of respondents companies use Jenkins on more than 50 projects\n\nIn regards to SCM tools, Git continued the march to dominance:\n\nGit usage increased to 85%\n\nSubversion usage decreased to 35%\n\nWhen it comes to practices, Agile and CI seemed to be the standard, and CD adoption still had a ways to go:\n\n85% practiced Agile\n\n82% practiced CI\n\n61% practiced DevOps\n\n46% practiced CD\n\nIn 2017 respondents reported that:\n\nJenkins Pipeline gained widespread adoption with 89% of survey takers used pipeline or planned to use in 6 months or less.\n\nContainer technology was cemented as a key part of the CD/DevOps ecosystem, yet Kubernetes usage was just starting gain momentum at 20.15%:\n\nJenkins, CD, and DevOps are getting more attention from Architects with 39% of respondents identified as Architects, nearly double the previous year\n\nGit was the clear SCM of choice at 90%, increasing nearly 5% over last the previous year\n\nWhat will you and the community tell us this year?  Are more people practicing DevOps?  Is Kubernetes the leader in container orchestration?  Is pipeline the standard for creating workflows?  Take the survey and let’s find out!\n\nAs always, your personal information (name, email address and company) will NOT be used by CloudBees for sales or marketing and the survey results will be made publicly available to the Jenkins Community. We will also be publishing a blog series analyzing trends over the last 5 years and offering  predictions on the evolution of DevOps. If you’re curious about what insights your input will provide, see the results of last year’s 2017 survey.\n\nAs an added incentive to participate, CloudBees will enter participants into a drawing for a free pass to DevOps World | Jenkins World 2019 (1st prize, $1,199.00 value) or a $100 Amazon gift card (2nd prize)!\n\nThe survey will close at the end of October so grab a cup of coffee get started. We promise the survey will be done before your latte is.\n\nTake me to the survey.\n\nThere are laws that govern prize giveaways and eligibility; CloudBees has compiled all those fancy terms and conditions here.","title":"2018 DevOps|Jenkins Community Survey Now Open","tags":["jenkins","devops","jenkinsworld2018"],"authors":[{"avatar":null,"blog":null,"github":"bvdawson","html":"<div class=\"paragraph\">\n<p>DevOps dude at CloudBees.\nJenkins Marketing Manager.\nTools geek.</p>\n</div>","id":"bvdawson","irc":null,"linkedin":null,"name":"Brian Dawson","slug":"/blog/authors/bvdawson/","twitter":"brianvdawson"}]}},{"node":{"date":"2018-09-12T00:00:00.000Z","id":"25b519ed-5da4-5f9a-a173-6ea9a343b90a","slug":"/blog/2018/09/12/speaker-blog-a-cloud-native-jenkins/","strippedHtml":"A few months ago I published a\nblog post about\nCloud Native Special Interest Group (SIG)\nand ongoing projects related to Cloud Native Jenkins.\nNext week we will be presenting at DevOps World | Jenkins World together with Carlos Sanchez and Jesse Glick,\nso I would like to provide a heads up for\nour talk: “A Cloud Native Jenkins”.\n\nIn our talk, we will focus on the following topics: Pluggable Storage,\nour ephemeral Jenkins controllers experiments,\nand tools which may be used to implement single-shot controllers.\n\nPluggable Storage\n\nPluggable storage is one of the major areas we have been working on over the last few months.\nThere are a number of parallel stories which are summarized on\nthis page.\nThere has been significant progress in the areas of artifact storage, build logging and configuration storage.\nA number of Jenkins Enhancement Proposals were submitted and accepted,\nand there are plugin releases and prototypes for these stories.\n\nDuring our talk we will discuss the current status of these stories and future plans.\nIn particular, we will cover the following areas and reference implementations:\n\nStoring all your artifacts transparently, e.g. in a cloud service blob store like AWS S3.\n\nArtifact Manager for S3 Plugin is an implementation we have recently released\n\nProviding credentials from an external location.\n\nKubernetes Credentials Provider is one of the existing implementations for Kubernetes secrets\n\nSending and retrieving the build logs from a cloud service.\n\nWe are working on reference implementations for AWS CloudWatch Logs and\nElasticsearch\n\nStoring configuration data in external storage like Kubernetes Resources and SQL database\n\nStoring test results externally, e.g. in an SQL database or a specialized Test Management System\n\nThere are existing plugins for the areas above, but there is a difference in approach we have taken.\nInstead of creating new custom steps we extend Jenkins architecture in a way that the storage becomes transparent to users.\nFor example, with Artifact Manager for S3 Plugin common Archive Artifacts steps\nwork transparently with Remote storage, as well as Jenkins Pipeline’s stash() / unstash() steps.\n\nThe reference implementations intentionally use different technologies so that we cover more scenarios.\nWe regularly discuss the implementations in the Cloud Native SIG,\nand we would appreciate your feedback.\n\nEphemeral Jenkins controllers research\n\nWant something new?\nSeveral days ago Kohsuke Kawaguchi, the creator of Jenkins, posted the\nJenkins: Shifting Gears article to summarize the plan for Jenkins evolution.\nCloud Native Jenkins is a critical part of this plan, and it is not “just Jenkins X”.\nThere are various architectural changes in Jenkins required to make this vision happen,\nand we plan to work on these changes in the Cloud Native SIG.\n\nIn our presentation, we will talk about our experiment with ephemeral Jenkins and single-shot controllers.\nIn this story we are creating a headless single-shot controller which starts in a container,\nexecutes a Pipeline build and pushes all the results to remote storage so that the container can just be deleted after completion.\nSuch a controller bundles plugins and self-configuration logic using “Configuration as Code”,\nso that it can start executing Pipelines in just a few seconds.\nOnce packaged, it can be invoked from CLI as simply as…​\n\ndocker run --rm -v $PWD/demo/Jenkinsfile:/workspace/Jenkinsfile onenashev/cwp-jenkinsfile-runner-demo\n\nor, in Kubernetes:\n\nkubectl create configmap jenkinsfile --from-file=demo/Jenkinsfile\nkubectl create -f demo/kubernetes.yaml\n\nSuch a single-shot controller could also be made a part of a Cloud Native Jenkins system.\nStandard event handlers like Prow can invoke the builds on webhooks and report results back,\nso that the single-shot controller can be used to build pull requests or to run Continuous Delivery flows.\nExtra agents could also be connected to the controller on-demand, using the Kubernetes plugin or sidecar containers.\n\nTools\n\nIn order to make this experiment possible, we used a toolchain based on\nDocker,\nJenkinsfile Runner,\nConfiguration as Code Plugin (JCasC), and a\nCustom WAR Packager tool which glues all the things together.\n\nCustom WAR Packager is a new tool which takes various configurations (YAML specification defining core version, list of plugins, system properties, Groovy Hooks, JCasC YAMLs)…​\nand then bundles everything as a ready-to-fly WAR file or Docker image.\nStarting from version 1.2, Custom WAR Packager also supports packaging Jenkinsfile Runner images as an experimental feature.\nI will do a separate blogpost about this new tool later,\nbut there is already some documentation a number of demos in the project’s repo.\n\nOur demo\n\nYes, we will have a demo! We will show a single-shot controller running with Pluggable storage implementations for AWS environments (Amazon S3, AWS CloudWatch, EKS, etc.),\nwhich executes Jenkins Pipelines for Maven projects and provisions agents in Kubernetes on-demand.\n\nThe demo has to be published yes, but you can already find a more simple Jenkinsfile Runner demo\nhere.\n\nWant to know more?\n\nThe upcoming DevOps World | Jenkins World conferences\nare heavily packed with talks related to Cloud Native Jenkins,\nincluding war stories and presentations on projects like Jenkins X and Jenkins Evergreen.\nIt is a great chance to get more information about using Jenkins in cloud environments.\n\nIf you are a Jenkins contributor or just want to become a contributor,\nalso join the Contributor Summit (Sep 17 in US and Oct 23 in Nice) or visit the Jenkins community booth in the Exhibition hall.\nAt the Contributor Summit on Sep 17 we will also have a face-to-face Cloud Native SIG meeting.\nFeel free to contribute to the agenda here.\n\nCome meet Carlos, Jesse, Oleg, and other Cloud Native SIG members at\nJenkins World on September 16-19th in San Francisco and on October 22-25 in Nice.\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Speaker blogpost: A Cloud Native Jenkins","tags":["jenkinsworld","jenkinsworld2018","cloud-native","pluggable-storage","jenkinsfile-runner"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-09-13T00:00:00.000Z","id":"e528d035-a68d-5607-bf76-e95c721d6e49","slug":"/blog/2018/09/13/speaker-blog-evergreen-safely-upgrading/","strippedHtml":"Evergreen is a distribution of Jenkins we are working on that provides an easy to use and automatically upgrading experience.\nThis year at the conference, there will be not just one, but two talks to present Evergreen to the Jenkins community:\n\nContinuously Delivering an Easy-to-Use Jenkins with Jenkins Evergreen, by R. Tyler Croy.\n\nSafely Upgrading Jenkins Every Single Day, by Baptiste Mathus.\n\nTyler will present the overall Jenkins Evergreen architecture, its inception and how this aims at making it much simpler for people to just use Jenkins to build their projects, without having to become Jenkins admins.\n\nOn the last conference day, during my own talk I will focus on the improved developer experience, and zoom into how we implemented some important features.\n\nWe will dig together into the Error Telemetry system put in place, allowing us to actually fix errors and warnings people see in production environments.\nHow instances are automatically reporting errors to the Evergreen backend, and how we then centralize and analyze them using Sentry.\nWe will explain how the Incrementals system allows developers a very short roundtrip, between a merged pull-request and a release we can push out to all instances.\nWe will see concrete examples of issues we already fixed and released to Evergreen instances in just a few days after we opened an alpha version to the world.\n\nI will show you how an instance starts up and gets upgraded by discussing with the backend it’s constantly connected to.\nHow the backend knows what it should instruct an instance to download and install, or how we trigger an automated data snapshot.\n\nYou will obviously see a demo of all this showing in particular how Evergreen can already run on a Docker host, or on AWS (more environments to come!), using some of the so-called flavors for Jenkins Evergreen.\n\nCome meet us at\nDevOps World | Jenkins World 2018 on September 16-19th in San Francisco.\nWe will be hanging out around the OSS space, eager to answer more questions.\n\nRegister with the code JWFOSS for a 30% discount off your pass.","title":"Speaker blogpost: Jenkins Evergreen At DevOps World | Jenkins World 2018","tags":["jenkinsworld","jenkinsworld2018","evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}},"publicURL":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/batmat.jpg"},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat/","twitter":"bmathus"}]}},{"node":{"date":"2018-09-14T00:00:00.000Z","id":"3853be51-02ed-55b0-8b3f-edbfcfe998c7","slug":"/blog/2018/09/14/kubernetes-and-secret-agents/","strippedHtml":"At long last, the way we build and deploy software is finally changing and significantly so.\nThe days of the persnickety, prima donna build machine where monolithic applications were built, tested, and deployed are numbered.\nAnd that is a \"Good Thing (tm)\" - a consequence of how we will meet the transformation goals of our businesses.\nModern applications consist of distributed services, often with multiple microservices that are developed and deployed independent of other services.\nHowever, the only way to build these services with their own dependencies and schedules is to bake in continuous integration and delivery from the beginning.\nAnd as usual, your Jenkins platform is your friend.\n\nBut let’s take a moment and think about that in the context of microservices, especially if you’ve only used Jenkins for monolithic applications.\nYou’ll be creating a greater number of individual Jenkins jobs that each run multiple times a day.\nThis is a significant process change, and it’s important to acknowledge this and change our approach to managing Jenkins to accommodate these changes.\nIt’s well within Jenkins’ capabilities, but you will need to think a little differently, and invest to close those last-mile deployment gaps.\n\nEvolution of my Jenkins Environment\n\nOne of the biggest challenges I’ve faced as a DevOps practitioner is a long and evolving set of options to manage my Jenkins agent infrastructure.\nWith only a few large jobs you don’t really need to worry too much about your agents.\nBut when you’re orchestrating the CI/CD pipelines for dozens or even hundreds of services, optimizing efficiency and minimizing cost becomes important.\nAnd that journey has allowed me to consider and test many different Jenkins build agent architectures over the years.\nThis journey may be familiar to you as well.\n\nThese are the types of Jenkins environments I’ve run over the years.\n\nExecute all the builds on the controller.\nConcentrate all the moving parts on one instance.\n(I call this Hello Jenkins)\n\nCreate a Jenkins EC2 agent with all the required tools for building every service, and then clone it if I need to “scale” Jenkins.\n(I call this the Monster Agent.)\n\nCreate an individual Jenkins EC2 agent for each service I need to build.\n(I call this the Snowflake Agent.)\n\nRun build steps in containers.\nFor example, launching agents in containers using the\nDocker Plugin or using multi-stage Dockerfiles to encapsulate all the logic for building, testing and packaging an application.\nThey are both good first steps in container abstraction and allow you to easily copy artifacts from one container to another.\nOf course, access to a Docker engine is required for either approach, and I’ve managed my Docker host(s) for running Jenkins agents several different ways:\n\nRun the Docker engine inside my Jenkins controller container - Docker in Docker (DinD)\n\nMount the Docker socket of the host on which my Jenkins controller container runs, allowing agents to run as sibling or sidecar containers - Docker outside of Docker (DooD)\n\nConfigure a single external EC2 Docker host for the Jenkins controller to use for launching builds in containers\n\nDynamically launch agents using the EC2 plugin with an AMI that contains the Docker Engine and then run all the steps in a multi-stage Dockerfile\n\nAll these approaches were attempts to get out of the business of curating and managing Jenkins agents and infrastructure, each with their own benefits and drawbacks.\nBut recently I begin working in a new Jenkins environment - Jenkins on Kubernetes.\n\nOnce you’ve come to view Jenkins, build agents and jobs as containerized services, migrating platforms becomes much more straightforward.\nAnd total disclaimer here - I had never used Kubernetes in my life, not even for side projects - when I set out to do this.\nThat said, it was surprisingly simple to create a Kubernetes cluster in Google Cloud Platform’s (GCP) GKE, launch a Jenkins controller using a\nHelm chart and begin running build steps in Jenkins agents running in containers on my new Kubernetes cluster.\n\nLaunch agents in Kubernetes from your pipeline scripts\n\nThe focus of this post and my Jenkins World talk for 2018, is to show you how to configure Jenkins to launch agents in Kubernetes from your pipeline scripts.\nMy examples assume you are launching your agents in the same Kubernetes cluster where your Jenkins controller is running, but there are other options.\nYou’ll begin by installing the\nKubernetes plugin.\nAs a bonus, when I installed Jenkins using the latest stable chart in the default Helm repository, the Kubernetes plugin was automatically installed for me.\n\nOnce you get the Jenkins controller running on your Kubernetes cluster, there are only a few configuration steps required and then you can begin launching ephemeral build agents on Kubernetes.\n\nConfigure the Jenkins controller\n\nYou’ll first need to create a credentials set for the Jenkins controller to access the Kubernetes cluster.\nTo do this, perform the following steps:\n\nIn the Jenkins UI, click the Credentials link in the left-hand navigation pane\n\nClick the arrow next to (global) in the Stores scoped to Jenkins table (you have to hover next to the link to see the arrow)\n\nClick Add Credentials\n\nUnder Kind, specify Kubernetes Service Account\n\nLeave the scope set to Global\n\nClick OK.\n\nThat’s it! This configuration allows the Jenkins controller to use a Kubernetes service account to access the Kubernetes API.\n\nCreate a Cloud Configuration on the Jenkins controller\n\nThe next step is to create a cloud configuration for your K8s cluster.\n(When I use K8s instead of Kubernetes it’s because it is quicker to type, not just for coolness.)\n\nIn the Jenkins UI, go to Manage Jenkins → Configure System\n\nScroll down until you see Cloud settings and click the Add a new cloud box and select kubernetes\n\nThe following parameters must be set:\n\nName : - This defaults to kubernetes\n\nKubernetes URL : https://kubernetes.default - This was automatically configured from the service account.\n\nKubernetes Namespace : default - Unless you are running your controller in another namespace\n\nCredentials :  Select the Kubernetes Service Account credentials you created in the previous step\n\nJenkins URL : http:// :8080\n\nJenkins tunnel : :5555 - This is the port that is used to communicate with an agent\n\nThese were the only parameters I had to set to launch an agent in my K8s cluster.\nYou can certainly modify other parameters to tweak your environment.\n\nNow that you’ve configured your Jenkins controller so that it can access your K8s cluster, it’s time to define some pods.\nA pod is the basic building block of Kubernetes and consists of one or more containers with shared network and storage.\nEach Jenkins agent is launched as a Kubernetes pod.\nIt will always contain the default JNLP container that runs the Jenkins agent jar and any other containers you specify in the pod definition.\nThere are at least two ways to configure pod templates – in the Jenkins UI and in your pipeline script.\n\nConfigure a Pod Template in the Jenkins UI\n\nIn the Jenkins UI, go to Manage Jenkins → Configure Systems\n\nScroll down to the cloud settings you configured in the previous step\n\nClick the Add Pod Template button and select Kubernetes Pod Template\n\nEnter values for the following parameters:\n\nName :\n\nNamespace : default - unless you configured a different namespace in the previous step\n\nLabels : - this will be used to identify the agent pod from your Jenkinsfiles\n\nUsage : Select \" Use this node as much as possible\" if you would like for this pod to be your default node when no node is specified.\nSelect \" Only build jobs with label matching expressions matching this node\" to use this pod only when its label is specified in the pipeline script\n\nThe name of the pod template to inherit from - you can leave this blank.\nIt will be useful once you gain experience with this configuration, but don’t worry about it for now.\n\nContainers : The containers you want to launch inside this pod.\nThis is described in detail below.\n\nEnvVars : The environment variables you would like to inject into your pod at runtime.\nThis is described in detail below.\n\nVolumes :  Any volumes you want to mount inside your pod.\nThis is described further below.\n\nRemember that a pod consists of one or more containers that live and die together.\nThe pod must always include a JNLP container, which is configured by default if you installed the controller using the Helm Chart.\nHowever, you will want to add containers with the tool chains required to build your application.\n\nAdd Your Own Container Template\n\nIn the Jenkins UI, return to the pod template you created in the last step\n\nClick the Add Container button and select Container Template\n\nEnter values in the following fields:\n\nName :\n\nDocker image : any Docker image you’d like\nFor example, if you are building an application written in Go, you can enter 'golang:1.11-alpine3.8'\n\nLabel : Enter any label strings you’d like to use to refer to this container template in your pipeline scripts\n\nAlways pull image : - Select this option if you want the plugin to pull the image each time a pod is created.\n\nYou can leave the default values for the other parameters, but you can see that the plugin gives you fine-grained control over your pod and the individual containers that run within it.\nAny values you might set in your Kubernetes pod configuration can be set via this plugin as well.\nYou can also inject your configuration data by entering raw YAML.\nI encourage you not to get distracted by the sheer number of options you can configure in this plugin.\nYou only have to configure a small subset of them to get a working environment.\n\nYou can click the Add Environment Variable button in the container template to inject environment variables into a specific container.\nYou can click the Add Environment Variable button in the pod template to inject environment variables into all containers in the pod.\nThe following environment variables are automatically injected into the default JNLP container to allow it to connect automatically to the Jenkins controller:\n\nJENKINS_URL : Jenkins web interface url\n\nJENKINS_JNLP_URL : url for the jnlp definition of the specific agent\n\nJENKINS_SECRET : the secret key for authentication\n\nJENKINS_NAME : the name of the Jenkins agent\n\nIf you click the Add Volume button in the pod template, you’ll see several options for adding volumes to your pod.\nI use the Host Path Volume option to mount the docker socket inside the pod.\nI can then run a container with the Docker client installed and use the host Docker socket to build and push Docker images.\n\nAt this point, we’ve created a cloud configuration for our Kubernetes cluster and defined a pod consisting of one or more containers.\nNow, how do we use this to run Jenkins jobs? We simply refer to the pod and containers by label in our Jenkins pipeline script.\nWe use the label we gave to the pod in the node block and the label for the container we wish to use in the container block.\nThe examples in this post use scripted pipeline, but you can achieve the same outcome using the declarative pipeline syntax:\n\nnode('test-pod') {\n    stage('Checkout') {\n        checkout scm\n    }\n    stage('Build'){\n        container('go-agent') {\n            // This is where we build our code.\n        }\n    }\n}\n\nDefining the Pod in the Jenkinsfile\n\nConfiguring a plugin through the UI is perfectly fine in a proof of concept.\nHowever, it does not result in a software-defined infrastructure that can be versioned and stored right alongside your source code.\nLuckily, you can create the entire pod definition directly in your Jenkinsfile.\nIs there anything you can’t do in a Jenkinsfile???\n\nAny of the configuration parameters available in the UI or in the YAML definition can be added to the podTemplate and containerTemplate sections.\nIn the example below, I’ve defined a pod with two container templates.\nThe pod label is used in the node block to signify that we want to spin up an instance of this pod.\nAny steps defined directly inside the node block but not in a container block with be run in the default JNLP container.\n\nThe container block is used to signify that the steps inside the block should be run inside the container with the given label.\nI’ve defined a container template with the label 'golang', which I will use to build the Go executable that I will eventually package into a Docker image.\nIn the volumes definition, I have indicated that I want to mount the Docker socket of the host, but I still need the Docker client to interact with it using the Docker API.\nTherefore, I’ve defined a container template with the label 'docker' which uses an image with the Docker client installed.\n\npodTemplate(\n    name: 'test-pod',\n    label: 'test-pod',\n    containers: [\n        containerTemplate(name: 'golang', image: 'golang:1.9.4-alpine3.7'),\n        containerTemplate(name: 'docker', image:'trion/jenkins-docker-client'),\n    ],\n    volumes: [\n        hostPathVolume(mountPath: '/var/run/docker.sock'),\n        hostPath: '/var/run/docker.sock',\n    ],\n    {\n        //node = the pod label\n        node('test-pod'){\n            //container = the container label\n            stage('Build'){\n                container('golang'){\n                    // This is where we build our code.\n                }\n            }\n            stage('Build Docker Image'){\n                container(‘docker’){\n                    // This is where we build the Docker image\n                }\n            }\n        }\n    })\n\nIn my Docker-based pipeline scripts, I was building Docker images and pushing them to a Docker registry, and it was important to me to replicate that exactly with my new Kubernetes setup.\nOnce I accomplished that, I was ready to build my image using gcloud, the Google Cloud SDK, and push that image to the Google Container Registry in anticipation of deploying to my K8s cluster.\n\nTo do this, I specified a container template using a gcloud image and changed my docker command to a gcloud command.\nIt’s that simple!\n\npodTemplate(\n    name: 'test-pod',\n    label: 'test-pod',\n    containers: [\n        containerTemplate(name: 'golang', image: 'golang:1.9.4-alpine3.7'),\n        containerTemplate(name: 'gcloud', image:'gcr.io/cloud-builders/gcloud'),\n    ],\n    {\n        //node = the pod label\n        node('test-pod'){\n            //container = the container label\n            stage('Build'){\n                container('golang'){\n                    // This is where we build our code.\n                }\n            }\n            stage('Build Docker Image'){\n                container(‘gcloud’){\n                    //This is where we build and push our Docker image.\n                }\n            }\n        }\n    })\n\nStanding up a Jenkins controller on Kubernetes, running ephemeral agents, and building and deploying a sample application only took me a couple of hours.\nI spent another weekend really digging in to better understand the platform.\nYou can be up and running in a matter of days if you are a quick study.\nThere are a wealth of resources available on running Jenkins on Kubernetes, and I hope this blog post helps to further that knowledge.\nEven better, come to\nmy session at Jenkins World and let’s talk in person.\n\nSo, what else do you want to know?\nHit me up on Twitter.\nI might even add your questions to my Jenkins World session.\nI suppose next up is Mesos?\n\nCome meet Mandy and other Jenkins and Kubernetes experts at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins and Kubernetes - Secret Agents in the Clouds","tags":["jenkinsworld","jenkinsworld2018","cloud-native","kubernetes"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#485858","images":{"fallback":{"src":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/19e71/devmandy.jpg","srcSet":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/77b35/devmandy.jpg 32w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/d4a57/devmandy.jpg 64w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/19e71/devmandy.jpg 128w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/68974/devmandy.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/ef6ff/devmandy.webp 32w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/8257c/devmandy.webp 64w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/6766a/devmandy.webp 128w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/22bfc/devmandy.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/devmandy.jpeg"},"blog":null,"github":"DevMandy","html":"<div class=\"paragraph\">\n<p>Mandy Hubbard has almost 20 years of professional QA experience,\nmost of which has been spent in fast-paced startup environments driving product quality.\nShe is passionate about ensuring quality through process improvements, test automation, following CI/CD best practices and all things DevOps.\nShe is currently a software engineer/QA architect at CS Disco, an innovative startup delivering a cloud-based eDiscovery platform.</p>\n</div>","id":"devmandy","irc":null,"linkedin":null,"name":"Mandy Hubbard","slug":"/blog/authors/devmandy/","twitter":"DevMandy"}]}},{"node":{"date":"2018-09-14T00:00:00.000Z","id":"9d454b50-9959-5557-8c15-e1041ef6bff4","slug":"/blog/2018/09/14/speaker-blog-jenkins-builds-jenkins/","strippedHtml":"Next week Olivier Vernin from CloudBees and Brian Benz from Microsoft will be presenting a session at DevOps World | Jenkins World about how Microsoft has been working with Jenkins to build Jenkins plugins and produce Jenkins on Microsoft Azure.\nThese plugins run Jenkins on Azure Linux and Windows VMs, Kubernetes, azure App service, as well as deploy artifacts to those Azure platforms and more.\nAll are open source and available on GitHub.\n\nHere’s our session, where we’ll be sharing successes and challenges of getting the infrastructure up and running:\n\nTuesday, September 18\n\nSession: Developing and Delivering Jenkins in the cloud\n11:15am - 12:00pm Brian Benz with Olivier Vernin, CloudBees\n\nIn this session, we’ll discuss the real-life implementation of Jenkins' development and delivery infrastructure in the cloud as it has evolved from a mix of platforms to Microsoft Azure.\nExpect a frank discussion of how issues that were encountered along the way were overcome, how the architecture has evolved, and what’s on the roadmap.\nWe’ll share important tips and tricks for implementing your own Jenkins infrastructure on any cloud, based on Jenkins' own experience with their implementation.\n\nSee you in San Francisco!\n\nCome meet us at\nDevOps World | Jenkins World 2018 on September 16-19th in San Francisco.\nWe will be hanging out around the OSS space, eager to answer more questions.\n\nRegister with the code JWFOSS for a 30% discount off your pass.","title":"Want to know how Jenkins builds Jenkins? Catch this session at DevOps World | Jenkins World next week in San Francisco!","tags":["jenkinsworld","jenkinsworld2018","azure","infrastructure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/olblak.png"},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak/","twitter":"0lblak"}]}},{"node":{"date":"2018-09-17T00:00:00.000Z","id":"f2d08709-df38-5689-9363-0cab0bbbd723","slug":"/blog/2018/09/17/jenkins-artwork/","strippedHtml":"Hi all, this is my first blogpost on jenkins.io.\nMy name is Kseniia Nenasheva, I work as a Graphics Designer at CloudBees.\nI have been using Jenkins since 2012 as a QA engineer, and I am happy to contribute to the project.\nI have also submitted some patches to the core and plugins,\nand probably you have seen some Jenkins logos created by me,\nand some of you may even have them on your laptops.\nBy the way, Ron Burgundy is my favorite Jenkins logo.\n\nThis year I am going to DevOps World | Jenkins World in San Francisco.\nDuring the conference I will be working at the Jenkins community booth\nand creating exclusive pictures with conference visitors and one of the Jenkins heroes.\nSo, if you come to our booth and share your Jenkins story, you can get a special picture.\n\nIf you are interested to get a logo for your Jenkins Area Meetup\nor an open-source project (including Jenkins plugins, of course),\nplease also stop by at the booth and share your ideas.\nAfter the conference I will try to implement the most interesting proposals.\n\nYou can also meet me at the contributor summit on September 17.\n\nCome meet Kseniia and other Jenkins contributors at\nJenkins World on September 16-19th in San Francisco and on October 22-25 in Nice.\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins Artwork at the DevOps World | Jenkins World 2018 Community Booth","tags":["jenkinsworld","jenkinsworld2018","artwork","community"],"authors":[{"avatar":null,"blog":null,"github":"ksenia-nenasheva","html":"","id":"ksenia-nenasheva","irc":null,"linkedin":null,"name":"Ksenia Nenasheva","slug":"/blog/authors/ksenia-nenasheva/","twitter":null}]}},{"node":{"date":"2018-09-18T00:00:00.000Z","id":"05f18d70-cabf-59fd-91c1-537a47157934","slug":"/blog/2018/09/18/automatically-upgrading-with-evergreen/","strippedHtml":"When I first wrote about Jenkins\nEvergreen, which was then referred to as \"Jenkins Essentials\", I mentioned a\nnumber of future developments which in the subsequent months have become\nreality. At this year’s DevOps World - Jenkins World in San Francisco, I will\nbe sharing more details on the philosophy behind Jenkins Evergreen, show off\nhow far we have come, and discuss where we’re going with this radical\ndistribution of Jenkins.\n\nAs discussed in my first blog post, and\nJEP-300,\nthe first two pillars of Jenkins Evergreen have been the primary focus of our\nefforts.\n\nAutomatically Updated Distribution\n\nPerhaps unsurprisingly, implementing the mechanisms necessary for safely and\nautomatically updating a Jenkins distribution, which includes core and plugins,\nwas and continues to be a sizable amount of work. In\nBaptiste’s talk\nhe will be speaking about the details which make Evergreen \"go\" whereas\nI will be speaking about why an automatically updating distribution is\nimportant.\n\nAs continuous integration and continuous delivery have become more commonplace,\nand fundamental to modern software engineering, Jenkins tends to live two\ndifferent lifestyles depending on the organization. In some organizations,\nJenkins is managed and deployed methodically with automation tools like Chef,\nPuppet, etc. In many other organizations however, Jenkins is treated much more\nlike an appliance, not unlike the office wireless router. Installed and so\nlong as it continues to do its job, people won’t think about it too much.\n\nJenkins Evergreen’s distribution makes the \"Jenkins as an Appliance\" model much\nbetter for everybody by ensuring the latest feature updates, bug and security\nfixes are always installed in Jenkins.\n\nAdditionally, I believe Evergreen will serve another group we don’t adequately\nserve at the moment: those who want Jenkins to behave much more like a\nservice. We typically don’t consider \"versions\" of GitHub.com, we receive\nincremental updates to the site and realize the benefits of GitHub’s on-going\ndevelopment without ever thinking about an \"upgrade.\"\n\nI believe Jenkins Evergreen can, and will provide that same experience.\n\nAutomatic Sane Defaults\n\nThe really powerful thing about Jenkins as a platform is the broad variety of\npatterns and practices different organizations may adopt. For newer users, or\nusers with common use-cases, that significant amount of flexibility can result\nin a paradox of choice. With Jenkins Evergreen, much of the most common\nconfiguration is automatically configured out of the box.\n\nIncluded is Jenkins Pipeline and Blue Ocean, by default. We also removed some\nlegacy functionalities from Jenkins while we were at it.\n\nWe are also utilizing some of the fantastic\nConfiguration as Code\nwork, which recently had its 1.0 release, to automatically set sane defaults in\nJenkins Evergreen.\n\nStatus Quo\n\nThe effort has made significant strides thus far this year, and we’re really\nexcited for people to start trying out Jenkins Evergreen. As of today,\nJenkins Evergreen\nis ready for early adopters. We do not yet recommend using Jenkins\nEvergreen for a production environment.\n\nIf you’re at DevOps World - Jenkins World in San Francisco please come see\nBaptiste’s talk Wednesday at 3:45pm in Golden Gate Ballroom A. Or\nmy talk at 11:15am in Golden Gate Ballroom B.\n\nIf you can’t join us here in San Francisco, we hope to hear your feedback and thoughts in our\nGitter channel!","title":"Continuously delivering an easy-to-use Jenkins with Evergreen","tags":["jenkinsworld","jenkinsworld2018","evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2018-10-01T00:00:00.000Z","id":"95e2de7d-ae79-567d-ae41-aa700b9078c9","slug":"/blog/2018/10/01/hacktoberfest/","strippedHtml":"Once again October has arrived.\nThat means the regular Hacktoberfest event is back!\nThis year it will be the fifth installment.\nDuring this one-month hackathon you can support open-source and earn a limited edition swag.\n\nOn behalf of the Jenkins project,\nwe invite you to participate in Hacktoberfest and to work on the project.\nWe welcome all contributors, regardless of their background and Jenkins experience.\n\nQuick start\n\nSign-up to Hacktoberfest on the event website.\n\nEverything is set, just start creating pull-requests!\n\nContributing to Jenkins\n\nThere are many ways to\ncontribute to Jenkins during Hacktoberfest.\nGenerally, any pull requests in GitHub may qualify.\nYou can…​\n\nCode - Contribute to the code or automated tests\n\nJenkins project codebase includes dozens of programming languages,\nmostly Java, Groovy, and JavaScript + Go in Jenkins\n\nYou can also find components in Ruby/Kotlin, and even native components in C/C++\n\nDocument - Improve documentation\n\nBlog - write blogposts about Jenkins\n\nLocalize - Localize Jenkins components\n\nDesign - artwork and UI improvements also count!\n\nOrganize - Organize a local meetup for Jenkins & Hacktoberfest (see below)\n\nSee the Contribute and Participate page for more information.\n\nProjects\n\nThe Jenkins project is spread across  several organizations on GitHub (jenkinsci, jenkins-x, jenkins-infra).\nYou are welcome contribute to any repository in any of those organizations,\nhowever various components in Jenkins have differing review and delivery velocity.\nHere is a list of Jenkins subprojects with maintainers who have committed to delivering quick reviews to Hackathon participants.\n\nProject/component\nIdeas and links\n\nJenkins Core\nThere is always something to improve in Jenkins core itself.\n  You can address various issues, improve the codebase,\n  and add new features there.\nContributing,\nnewbie-friendly issues\n\nJenkins Website\nExtend and improve Jenkins documentation, add your own blogpost.\nContributing guidelines\n\nJenkins X\nTry out the project and create new demos,\n  extend documentation, and create new builders for your toolchains.\nContributing guidelines,\nQuick start,\ncreating custom builders,\nnewbie-friendly issues\n\nJenkins Configuration-as-Code Plugin\nContribute to the fresh new plugin: improve the codebase,\n  add demos and plugin integrations.\nContributing to JCasC\n\nJenkins Evergreen\nTry and improve the recently released Evergreen project -\n  an automatically updating rolling distribution system for Jenkins.\nQuick start,\nnewbie-friendly issues.\n\nJava 11 support (jep:211[])\nContribute to Jenkins core and plugins to enable Java 11 in future releases.\n  You can help to create new packaging, new features, testing flows, or cleanup issues\nIllegal Reflective Access in the code.\nGitter chat,\nnewbie-friendly issues\n\nDocker Packaging\nAdd new features and improvements to Jenkins Docker packaging:\nJenkins controller,\nAgents,\n  and other components.\n\nChinese Localization SIG\nContribute to the new Website and\n  the Simplified Chinese Localization plugin.\n\nJenkins Artwork\nCreate new images and logos for Jenkins area meetups,\nsubprojects, and plugins.\n  You can also contribute new graphics to plugins.\n\nNote that this is not a full list,\nand the list will be extended depending on the interest from maintainers.\nYou are welcome to contribute to existing Jenkins plugins…​\nand even to create new ones.\n\nLocal events\n\nHacktoberfest is an online event,\nbut there are many events being organized by open-source communities.\nYou can join one of these events.\n\nWe also encourage Jenkins Area Meetup organizers to\nrun Jenkins-specific events in October (workshops, hackergartens).\nIf you are not a meetup organizer but want to host a meetup,\nyou can reach out to the organizers via meetup.com resources\n(you can find a JAM here).\nCheck out the Hacktoberfest Event Kit\nfor more info.\n\nFAQ\n\nYou can find Hacktoberfest FAQ here.\nBelow you can find answer to some Jenkins-specific questions.\n\nQ: I am new to Jenkins, how do I start?\n\nIf you are new to Jenkins,\nyou could start by fixing some small and well described issues.\nThere are lists of such newbie-friendly issues, see the links in the table above.\nYou can also submit your own issue and propose a fix.\n\nQ: I want to work on my own plugin, is it fine?\n\nYes, it is fine!\nAny contributions count, your role in a repository does not matter.\nJust make sure you create pull requests instead of direct pushes\n(hint: it’s a best practice if you have a CI configured for your repository).\n\nQ: How to find documentation?\n\nJenkins project contains lots of materials about contributing to the project.\nHere are some links which may help:\n\nParticipate - landing page for newcomer contributors\n\nPlugin Development Tutorials\n\nDeveloper Documentation\n\nGitter channel for Q&A\n\nProjects in the table above also have their own documentation to help newcomers.\n\nQ: How do I get reviews?\n\nAll projects in the list above are monitored by their maintainers,\nand you will likely get a review within few days.\nReviews in other repositories and plugins may take longer.\nIn the case of delays, ping us in the hacktoberfest-help channel in Gitter.\nUnmerged pull-requests also count in Hacktoberfest,\nso merge delays won’t block you from getting prizes.\n\nQ: I am stuck. How do I get help?\n\nFor non-technical questions (process and general direction) use our hacktoberfest-help\nchannel in Gitter.\n\nFor technical questions please use the IRC chat,\nDeveloper mailing lists,\nor the main jenkinsci/jenkins channel.\nMany subprojects also have their own chats.\n\nQ: Does Jenkins project send special swag?\n\nAll participants will get swag from Hacktoberfest organizers if they create at least5 pull requests.\nJenkins project may also distribute some swag to top contributors,\ndepending on the budget and contributions.","title":"Hacktoberfest 2018. Contribute to Jenkins!","tags":["hacktoberfest","event","community","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-10-09T00:00:00.000Z","id":"5b555e56-ade0-57d9-9cb9-c98ec50c81bf","slug":"/blog/2018/10/09/telemetry/","strippedHtml":"One of the major strengths of Jenkins is its customizability and extensibility.\nWith its plugin ecosystem and long list of (possibly hidden) options, Jenkins can be used for a wide range of use cases.\n\nThe downside of all this flexibility is that, not knowing how people use Jenkins, we mostly rely on issues filed in our bug tracker to know when things go wrong.\nAnd over the years, quite a few things have gone wrong.\nThe worst of these have been security fixes that have had unintended side effects.\nUnlike regular changes, it’s not really feasible to roll back security fixes, so users have sometimes had to choose between security and functionality.\nBut even changes developed in the open, such as the introduction of JEP-200, haven’t gone as smoothly as we hoped.\nWith big changes in the works, it’s more important than ever for us to have a better idea how Jenkins is used, so that we can deliver major changes safely.\n\nJenkins Evergreen solves this to some degree by being always connected to the Jenkins project and reporting back telemetry (mostly errors) allowing us to quickly react and provide fixes.\nBut that project is still pretty new, and its goal of being a more standardized Jenkins does not represent the breadth of configurations of the general user base.\n\nUplink telemetry\n\nSo we recently extended the existing, very limited anonymous usage statistics by adding a simple, extensible telemetry reporting client.\nWe’re calling it Uplink telemetry, based on the name of the service it reports its data to.\nIt made its debut in Jenkins 2.143.\n\nUplink telemetry is designed to collect data in trials, which are defined as:\n\na well defined set of technical data with a specific purpose\n\na start and end date of the collection\n\nDetailed information explaining the scope and purpose of currently active trials is available in the inline help for the usage statistics control in the global configuration.\n\nOf course, opting out of anonymous usage statistics there also disables the submission of Uplink telemetry.\nAnd while Uplink trials report a per-instance UUID to help with collation (e.g. removal of duplicate submissions), that UUID is exclusively used for this purpose, and independent of all other properties of an instance.\nThis prevents us from correlating reported data with specific instances.\nThese measures are in place to strike a balance between the need to understand how Jenkins is used and respecting users' privacy.\n\nImproving Jenkins through real-world data\n\nWe’re already created our first trial.\nJenkins 2.143 includes a trial to gather information about how common it is for instances to use Java system properties to disable (parts of) security fixes.\nWhen we publish a security fix and we’re not completely certain it is safe to apply for everyone, we add another of these options — just in case.\nAs you can imagine, quite a few of these hidden options exist.\nUntil now, user feedback in our issue tracker was the only way we could estimate the need for any of these options.\nWith Uplink, Jenkins will report that information to us.\n\nThe trial is scheduled to run for the next six weeks, enough to hopefully gather this information from a large number of users of both LTS and weekly releases.\nOur hope is that we will be able to remove some of these options entirely, as they might not be needed after all.\nFor others, we might need to consider elevating them to supported features, or finding better solutions obviating the need for them.\n\nIn the future, I will publish of some of what we have learned from the first trial running through Uplink telemetry.\nI look forward to Jenkins continuing to improve with real-world data informing our future decisions.","title":"Improving Jenkins Release Quality using Uplink Telemetry\n","tags":["core"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-10-10T00:00:00.000Z","id":"c142077a-cf17-5ac3-a33f-2658b51ec566","slug":"/blog/2018/10/10/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.146 and 2.138.2, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nFurther improvements\n\nIn addition to the security fixes listed in the security advisory, we also applied multiple improvements that make future security vulnerabilities more difficult, or even impossible to exploit.\n\nOne such improvement concerns cross-site scripting vulnerabilities, and comes with a risk of regressions.\n\nJenkins uses a fork of Jelly for the vast majority of the views it renders.\nSince 2011, it includes a feature that lets view authors opt in or out of automatic escaping of variable values for rendering in HTML, and since 2016, the plugin build tooling requires that views explicitly specify whether to apply this automatic escaping.\nDetails are available in the developer documentation.\n\nUntil now, if views do not declare whether to automatically escape, they were rendered without automatic escaping, and developers were expected to explicitly escape every variable reference that was not supposed to contain markup.\nThis has resulted in a number of cross-site scripting (XSS) vulnerabilities, most recently SECURITY-1130 in Job Config History Plugin.\n\nFor that reason, we have decided to enable this automatic escaping by default if plugins do not specify a preference.\nThis can result in problems with some plugins if they need their output to remain unescaped.\nWe expect that those plugins will adapt pretty quickly to this change, as the fix is typically straightforward.\nWe track known affected plugins and their status on the Jenkins wiki.\n\nIn the mean time, users can set the system property org.kohsuke.stapler.jelly.CustomJellyContext.escapeByDefault to false to disable this additional protection.","title":"Important security updates for Jenkins","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-10-12T00:00:00.000Z","id":"ea880537-4dfa-5cf5-9dbd-1aa35b08242b","slug":"/blog/2018/10/12/hackathons-in-october/","strippedHtml":"Traditionally there are a lot of events happening in the Jenkins organization in Autumn.\nI would like to share some information about the upcoming hackathons.\n\nOnline Event: Hacktoberfest\n\nAs you probably know, there is an ongoing Hacktoberfest event.\nThe Jenkins project is participating in it and everybody is welcome to contribute to Jenkins as a part of this event.\nThe event lasts from October 01 to October 31,\nand you can can join it at any time.\n\nSee this blogpost for more information about Hacktoberfest in the Jenkins project.\n\nOnsite Hackathons\n\nHacktoberfest is not the only event happening in the Jenkins community this month,\nthere are also a number of upcoming on-site events:\n\nOct 19 - Copenhagen, Denmark\n\nJenkins Configuration as Code hackathon at\nDay of Jenkins [as code ]\n\nRegistration: all conference participants can attend\n\nOct 22 - Nice, France - Hackathon at\nDevOps World - Jenkins World Nice\n\nRSVP here\n\nMake sure to also attend the Jenkins Contributor Summit on Oct 23 ;)\n\nOct 27 - Beijing, China\n\nRSVP here\n\nOct 30 - Neuchatel, Switzerland - Hacktoberfest: Jenkins & Friends event (Swiss Jenkins Area meetup)\n\nRSVP here\n\nAll contributions during these in-person events qualify as\nHacktoberfest contributions as well. :)\nMore events will also be announced later in the year,\ne.g. we traditionally do a hackfest in Brussels after FOSDEM in February.\nFollow our developer mailing lists and social media to receive announcements.","title":"Jenkins Hackathons in October","tags":["events","community","hacktoberfest"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-10-14T00:00:00.000Z","id":"c5377da5-1ab5-51ab-994c-510bae06a710","slug":"/blog/2018/10/14/gsoc2018-results/","strippedHtml":"It has been a while since the last blogpost about Google Summer of Code in Jenkins.\nGSoC 2018 has officially finished on August 23, and we had a Jenkins Online Meetup where we had final presentations of the GSoC projects.\nIt is never late to provide more context, so I would like to summarize the results and provide updates of what was happening in Jenkins GSoC Special Interest Group over last 2 months.\nIn this blogpost you can find project status overviews and updates from the Jenkins GSoC SIG.\n\nBut first of all, I would like to thank all our students, their mentors\nand to all other contributors who proposed project ideas, participated in student selection, community bonding and further reviews.\nGoogle Summer of Code is a major effort which would not be possible without active participation of the Jenkins community\n\nSummary\n\nThis year we started preparing for Google Summer of Code in early December.\n14 project ideas and 12 potential mentors we published on our website,\nand we got dozens of students reaching out to us during the application period.\nAfter processing applications, we have selected 4 applications for GSoC.\nUnfortunately one project got cancelled due to student eligibility issues.\n\nSo, we had the following projects:\nCode Coverage API plugin, Remoting over Apache Kafka, and Simple Pull-Request Job Plugin\n(also known as Pipeline as YAML).\nAll these projects have a significant value to the Jenkins community.\nThey were focused on areas which have been discussed in the community for a long time,\nbut which had no progress so far.\nGoogle Summer of Code allowed us to kick-start these projects,\nand to make significant progress there.\nAll projects have been released and made available in the Jenkins community (common or experimental update centers).\n\nIn total there were 9 blogposts about GSoC projects on jenkins.io,\nand also 2 Jenkins Online Meetups.\nGSoC results have been also presented at DevOps World - Jenkins World conference and the contributor summit.\n\nCode Coverage API Plugin\n\nStudent: Shenyu Zheng, Henan University, China\n\nMentors:\nJeff Pearce,\nSteven Christou,\nOleg Nenashev,\nSupun Wanniarachchi\n\nProject page\n\nThere are many code coverage plugins in Jenkins: Cobertura, JaCoCo, Emma, etc., etc.\nThe problem with these plugins is that each of them implements all code coverage features on their own.\nSo you get different feature sets, UIs, CLI commands and REST APIs.\nThe idea of this project was to unify the existing functionality and offer a new API plugin which other plugins could extend.\nIt would help to simplify existing plugin and to create new plugins for coverage tools.\n\nThe project has started really well, and we had the first demo after a week of coding.\nThen Shenyu continued extending the plugin’s functionality over coding periods.\nHere is the list of the key features offered by the plugin:\n\nFlexible data structure for defining and storing coverage metrics within Jenkins\n\nCoverage charts and trends\n\nSource code navigation\n\nREST API for retrieving coverage stats and trends\n\nReport aggregation for parallel steps\n\nExtension points which allow integrating other plugins\n\nIn addition to the Code Coverage API Plugin,\nShenyu added integration to the Cobertura Plugin and also created a new llvm-cov plugin which is expected to be released soon.\n\nAfter GSoC Shenyu continued contributing to the Jenkins project.\nHe works on the Code Coverage API plugin and also participates in the Chinese Localization SIG.\n\nSimple Pull-Request Job Plugin\n\nStudent: Abhishek Gautam, Visvesvaraya National Institute of technology, India\n\nMentors:\nMartin d’Anjou,\nJeff Knurek,\nKristin Whetstone\n\nProject page\n\nThis project focused on introducing a way to\neasily define pull-request build job definitions in YAML.\nThis project has been shaped a lot during the application period and community bonding,\nso that the project fit the existing Jenkins Ecosystem better.\nFinally it was decided to build the new plugin on the top of Pipeline: Multi-Branch Plugin.\nThere was also an idea to offer extra syntax sugar, templating and automatic resolution for common flows,\nso that users need less time to define Pipelines for common use-cases.\n\nThe plugin allows defining Pipeline jobs as YAML being stored in SCM.\nOriginal design presumed a new job type,\nbut during community bonding and Phase 1 prototyping it was decided to build the plugin on the top of the existing Pipeline ecosystem and extension points.\nCurrently the plugin generates Declarative Pipeline code from YAML so that it gets a lot of Pipeline features out-of-the box.\nIn addition to that, Simple Pull Request Job Plugin uses a an engine provided by the Configuration as Code plugin to convert YAML snippets\nto Pipeline step definitions.\n\nThe plugin has been well described by Abhishek in his Pipeline as YAML blogpost in August.\nCurrently it is available in the Experimental Update Center as an alpha version.\nPham Vu Tuan, one of our GSoC students, have also joined the plugin team.\nAt the DevOps World - Jenkins World hackfest we had discussions with the Jenkins Pipeline team,\nand we have a plan towards making this plugin available as an Incubated Pipeline project.\nThe final implementation may change,\nbut in any case the project gave us a working prototype and a lot of information about  obstacles we need to resolve.\n\nRemoting over Apache Kafka\n\nStudent: Pham Vu Tuan, Nanyang Technological University, Singapore\n\nMentors:\nOleg Nenashev,\nSupun Wanniarachchi\n\nProject page\n\nLast but not least, Remoting over Kafka is another challenging project we had.\nTo implement communication between its controllers and agents, Jenkins widely uses home-grown protocol implementations based on TCP\n( JNLP 1..4 protocols).\nThere are some performance and stability implementations,\nand there have been discussions about using an industry-standard message bus or queue.\nPham Vu Tuan proposed to use Apache Kafka for it,\nand after some experiments during community bonding and first coding phase we agreed to go forward with this implementation.\n\nDuring his project Vu Tuan extended Jenkins Core and Remoting to allow implementing an agent communication channel in a plugin.\nThen he has created a new Remoting over Kafka plugin\nwhich is now available in the main Jenkins Update cente.\nOnce the plugin is installed, it is possible to connect to agents over Apache Kafka and execute all types of Jenkins jobs there.\nThere are also official jenkins/remoting-kafka-agent images available on DockerHub.\n\nVu Tuan continued contributing to the Jenkins project after GSoC, currently he maintains the Remoting over Kafka plugin.\nHe visited the DevOps World - Jenkins World US conference in September, presented his GSoC project at the\nJenkins Contributor Summit.\nYou can find his slides here.\nAfter the conference he also participated in the hackfest where he helped to migrate Jenkins' DNS services to Microsoft Azure.\n\nWhat could we do better?\n\nAfter the end of GSoC we had a Retrospective with GSoC students and mentors.\nWe discussed the issues we encountered during the projects,\nand ways to improve the student and mentor experience.\n\nMain takeaways for us:\n\nGSoC projects should be aligned with Jenkins Special Interest Groups (SIGs) or subprojects in order to get a wider list of stakeholders\nProjects should be aligned with SIG priorities when possible\n\nIn addition to GSoC SIG meetings and Jenkins Online Meetups during student evaluation,\nwe should also run regular status updates within SIGs so that there more contributors involved in projects\n\nWe should invest more time into forming mentor teams before the application period starts.\nThis year there were changes in mentor teams after the community bonding started, and it complicated the work\n\nWe should pay more attention to student eligibility.\nThis year we started from 4 projects, but unfortunately one project (EDA plugins for Jenkins) got cancelled due to the visa limitations the student had.\n\nWe should do regular office hours for mentors/students so that it is possible to exchange information between GSoC projects within the organization.\nThis year we cancelled them at the end of phase and relied only on regular project meetings and mailing lists, but this is not enough.\n\nFor me personally the main takeaway is also to reduce direct involvement into the project as a mentor and technical advisor.\nDoing org administration, logistics and mentorship is not good from a bus factor PoV,\nand I believe I was pushing my vision too hard in few cases.\nWill do my best to prevent it next year.\n\nIf you want to share your feedback and ideas,\nplease reach out to us using the GSoC mailing list.\n\nWhat’s next?\n\nIn order to improve GSoC organization in Jenkins,\nwe have have created a GSoC Special Interest Group which will be running non-stop as other SIGs in Jenkins.\nThe objective of the SIG is to organize GSoC, work with potential students/mentors,\nand to help students stay involved in the community after GSoC ends.\nIn this SIG we will have monthly meetings to sync-up on GSoC.\nIf you are interested to contribute, please join the SIG.\n\nAccording to the Retrospective, next year we plan to invest more\ninto communication with mentors.\nWe will also try to tie new project proposals to Jenkins\nSpecial Interest Groups so that the students become a part\nof ongoing coordinated efforts.\nThis weekend Martin d’Anjou, Jeff Pearce and me are participating in the GSoC Mentor summit to share experiences and to study from other GSoC organizations.\nOn October 17 we will have a GSoC SIG meeting to discuss our experience and to discuss next steps.\n\nIn addition to that,\nJenkins Google Summer of Code will be presented at DevOps World - Jenkins World Nice and at the contributor summit.\nIf you plan to visit the conference and you are interested to participate in Google Summer of Code and other community activities,\nplease join us at the contributor summit or stop by at the community booth.\n\nAnd, elephant in the room…​ GSoC 2019.\nOf course we are going to apply, stay tuned for new announcements.\nWe have already started collecting project ideas for the next year.\nIf you are interested to participate as a student or mentor,\nplease reach out to us using the GSoC SIG mailing list.","title":"Jenkins in Google Summer of Code 2018 Results","tags":["community","events","gsoc","gsoc2018"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-10-16T00:00:00.000Z","id":"2abe9d0a-5a91-57f9-b708-13a0a890774b","slug":"/blog/2018/10/16/custom-war-packager/","strippedHtml":"I would like to introduce Custom WAR Packager -\na new tool for Jenkins administrators and developers.\nThis tool allows packaging custom Jenkins distributions as WAR files,\nDocker images\nand Jenkinsfile Runner bundles.\nThis tool allows packaging Jenkins, plugins, and configurations in a ready-to-fly distribution.\nCustom WAR packager is a part of the Ephemeral Jenkins controller toolchain\nwhich we presented in our A Cloud Native Jenkins blogpost.\nThis toolchain is already used in Jenkins X to package serverless images.\n\nIn this blogpost I will show some common use-cases for Custom WAR Packager.\n\nHistory\n\nAs with Jenkins itself, Custom WAR Packager started as a small development tool.\nFor a long time it was a problem to run integration testing in Jenkins.\nWe have 3 main frameworks for it:\nJenkins Test Harness,\nAcceptance Test Harness,\n    and Plugin Compatibility Tester.\nAll these frameworks require a Jenkins WAR file to be passed to them to run tests.\nWhat if you want to run Jenkins tests in a custom environment like AWS?\nOr what if you want to reuse existing Jenkins Pipeline tests and to run them against\nPluggable Storage to ensure there are no regressions?\n\nAnd it was not just an idle question.\nThere were major activities happening in the Jenkins project: Cloud-Native Jenkins, Jenkins Evergreen, and Jenkins X.\nAll these activities required a lot of integration testing  to enable Continuous Delivery flows.\nIn order to do this in existing test frameworks, we needed to package a self-configuring WAR file so that it would be possible to run integration tests in existing frameworks.\nThat is why Custom WAR Packager was created in April 2018.\nLater it got support for packaging Docker images,\nand in September 2018 it also got support for Jenkinsfile Runner\nwhich was created by Kohsuke Kawaguchi\nand then improved by Nicolas de Loof.\n\nWhat’s inside?\n\nCustom WAR packager is a tool which is available as CLI Executable, Maven Plugin, or Docker package.\nThis tool takes input definitions and packages them as requested by the user.\nEverything is managed by a YAML configuration file:\n\nThe tool supports various types of inputs.\nThe list of plugins can be passed via YAML itself, pom.xml, or a BOM file from jep:309[].\nCustom WAR Packager supports not only released versions,\nbut also builds deployed to the Incremental repository (CD flow for Jenkins core and plugins - jep:305[]) and\neven direct builds by Git or directory path specifications.\nIt allows building packages from any source, without waiting for official releases.\nThe builds are also pretty fast, because the plugin does caching in the local Maven repository by using commit IDs.\n\nCustom WAR packager also supports the following self-configuration options:\n\nYAML files for Jenkins Configuration as Code\n\nGroovy Hooks (e.g. init hooks for pre-configuration)\n\nSystem properties\n\nWAR Packaging\n\nWAR packaging happens by default every time the repo is built.\nGenerally Custom WAR Packager repackages all inputs into a single WAR file by following conventions defined in the Jenkins core and the JCasC plugin.\n\nSample configuration:\n\nbundle:\n  groupId: \"io.jenkins.tools.war-packager.demo\"\n  artifactId: \"blogpost-demo\"\n  vendor: \"Jenkins project\"\n  description: \"Just a demo for the blogpost\"\nwar:\n  groupId: \"org.jenkins-ci.main\"\n  artifactId: \"jenkins-war\"\n  source:\n    version: 2.138.2\nplugins:\n  - groupId: \"io.jenkins\"\n    artifactId: \"configuration-as-code\"\n    source:\n      # Common release\n      version: 1.0-rc2\n  - groupId: \"io.jenkins\"\n    artifactId: \"artifact-manager-s3\"\n    source:\n      # Incrementals\n      version: 1.2-rc259.c9d60bf2f88c\n  - groupId: \"org.jenkins-ci.plugins.workflow\"\n    artifactId: \"workflow-job\"\n    source:\n      # Git\n      git: https://github.com/jglick/workflow-job-plugin.git\n      commit: 18d78f305a4526af9cdf3a7b68eb9caf97c7cfbc\n  # etc.\nsystemProperties:\n    jenkins.model.Jenkins.slaveAgentPort: \"9000\"\n    jenkins.model.Jenkins.slaveAgentPortEnforce: \"true\"\ngroovyHooks:\n  - type: \"init\"\n    id: \"initScripts\"\n    source:\n      dir: src/main/groovy\ncasc:\n  - id: \"jcasc\"\n    source:\n      dir: casc.yml\n\nDocker packaging\n\nIn order to do the Docker packaging, Custom WAR Packager uses the official\njenkins/jenkins\nDocker images or other images using the same format.\nDuring the build the WAR file just gets replaced by the one built by the tool.\nIt means that ALL image features are available for such custom builds: plugins.txt, Java options, Groovy hooks, etc., etc.\n\n## ...\n## WAR configuration from above\n## ...\n\nbuildSettings:\n  docker:\n    build: true\n    # Base image\n    base: \"jenkins/jenkins:2.138.2\"\n    # Tag to set for the produced image\n    tag: \"jenkins/custom-war-packager-casc-demo\"\n\nFor example, this demo\nshows packaging of a Docker image with External Build Logging to Elasticsearch.\nAlthough the implementations have been improved as a part of jep:207[] and jep:210[],\nyou can check out this demo to see how the Docker image does self-configuration, connects to a Elasicsearch, and then starts externally storing logs without changes in build log UIs.\nA Docker Compose file for running the entire cluster is included.\n\nJenkinsfile Runner packaging\n\nThis is probably the most tricky mode of Jenkinsfile Runner.\nIn March a new Jenkinsfile Runner project\nwas announced in the developer mailing list.\nThe main idea is to support running Jenkins Pipeline in a single-shot controller mode when the instance just executes a single run and prints outputs to the console.\nJenkinsfile Runner runs as CLI or as a Docker image.\nCustom WAR Packager is able to produce both, though only Docker run mode is recommended.\nWith Jenkinsfile Runner you can run Pipelines simply as…​\n\ndocker run --rm -v $PWD/Jenkinsfile:/workspace/Jenkinsfile acmeorg/jenkinsfile-runner\n\nWhen we started working on Ephemeral (aka \"single-shot\") controllers in the Cloud Native SIG,\nthere was an idea to use Custom WAR Packager and other existing tools (Jenkinsfile Runner, Jenkins Configuration as Code, etc.) to implement it.\nIt would be possible to just replace Jenkins core JAR and add plugins to Jenkinsfile Runner, but it is not enough.\nTo be efficient, Jenkinsfile Runner images should start up FAST, really fast.\nIn the build flow implementation we used some experimental options available in Jenkins and Jenkinsfile Runner, including classloader precaching, plugin unarchiving, etc, etc.\nWith such patches Jenkins starts up in few seconds with configuration-as-code and dozens of bundled plugins.\n\nSo, how to build custom Jenkinsfile Runner images?\nAlthough there is no release so far, it is not something which can stop us as you see above.\n\n##...\n## WAR Configuration from above\n##...\n\nbuildSettings:\n  jenkinsfileRunner:\n    source:\n      groupId: \"io.jenkins\"\n      artifactId: \"jenkinsfile-runner\"\n      build:\n        noCache: true\n      source:\n        git: https://github.com/jenkinsci/jenkinsfile-runner.git\n        commit: 8ff9b1e9a097e629c5fbffca9a3d69750097ecc4\n    docker:\n      base: \"jenkins/jenkins:2.138.2\"\n      tag: \"onenashev/cwp-jenkinsfile-runner-demo\"\n      build: true\n\nYou can find a Demo of Jenkinsfile Runner packaging with Custom WAR Packager\nhere.\n\nMore info\n\nThere are many other features which are not described in this blogpost.\nFor example, it is possible to alter Maven build settings or to add/replace libraries within the Jenkins core (e.g. Remoting).\nPlease see the Custom WAR Packager documentation for more information.\nThere are a number of demos available in the repository.\n\nIf you are interested to contribute to the repository,\nplease create pull requests and CC @oleg-nenashev\nand Raul Arabaolaza who is the second maintainer now working on Jenkins test automation flows.\n\nWhat’s next?\n\nThere are still many improvements that could be made to the tool to make it more efficient:\n\nAdd upper bounds checks for transitive plugin dependencies so that the conflicts are discovered during the build\n\nAllow passing all kinds of system properties and Java options via configuration YAML\n\nImprove Jenkinsfile Runner to improve performance\n\nIntegrate the tool into Jenkins Integration test flows\n(see essentialsTest()\nin the Jenkins Pipeline library)\n\nMany other tasks could be implemented in Custom WAR Packager,\nbut even now it is available to all Jenkins users so that they can build their own Jenkins bundles with it.\n\nWant to know more?\n\nIf you are going to DevOps World - Jenkins World in Nice on Oct 22-25,\nI will be presenting Custom WAR Packager at the Community Booth during the lunch demo sessions.\nWe will be also repeating our A Cloud Native Jenkins talk together with Carlos Sanchez where we will show how Ephemeral Jenkins works with Pluggable Storage.\nJenkins X team is also going to present their project using Custom WAR Packager.\n\nCome meet Oleg and other Cloud Native SIG members at\nDevOps World - Jenkins World on October 22-25 in Nice.\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Build your own Jenkins! Introducing Custom WAR/Docker Packager","tags":["tools","docker","jenkins-x","cloud-native"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-10-18T00:00:00.000Z","id":"1f156101-c348-5cb5-bc0d-019cb25844c5","slug":"/blog/2018/10/18/contributor-summit-summary/","strippedHtml":"The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.\nThis summit will be on Tuesday, October 23rd 2018 in Nice, France just before Jenkins World.\nWhat should those planning on joining expect at the event?\nEarlier this year in September we had a contributor summit in San Francisco which gave us a pretty good outline of what to expect.\nFirst of all it was one of the biggest contributor summits ever with lots of first-time attendees.\n\nMorning\n\nThere are plenty of exciting developments happening in the Jenkins community, which meant there was a packed program.\nOne of the most anticipated updates was Kohsuke Kawaguchi speaking about Jenkins Shifting Gears.\n\nThere were also updates on the '5 Jenkins Superpower' projects in active development:\n\nJenkins Evergreen\n\nJenkins X\n\nConfiguration as Code\n\nJenkins Pipeline\n\nCloud Native Jenkins\n\nAs ever Jenkins is a community driven by its members so it was also great to get an update on Google Summer of Code.\n\nBirds-of-a-feather (BoF)\n\nAfter a packed morning of updates, it was time for a break and some lunch.\nAfter lunch attendees divided up into groups and gathered around tables for unconference style discussions of specific areas.\nEach table ran differently: some had demos, some did presentations, some hacked on code and others brainstormed ideas.\nThere was definitely alot of energy in the room and huge exchange of ideas.\n\nIgnite Talks & Wrap-up\n\nTo finish off the session we had a set of ignite talks.\nAttendees were invited to volunteer on the day - no easy task given the pressure involved- and many did.\nHats off to Liam Newman, Mandy Hubbard, Eric Smalling, Pui Chee Chan, Martin d’Anjou and Vishal Raina for getting out of their comfort zone and doing talks.\nThere were two surprise ignite talks, one for James Strachan and one for Kohsuke Kawaguchi which were highly entertaining gave the audience lots of laughs.\nSomeone even captured KK’s talk on video.  The sound isn’t great but it was a truly visionary talk:\n\nFinally the event finished with swag presentations and a fun Kahoot quiz to wrap things up.\n\nContributor Appreciation Event\n\nAfter the summit, contributors were invited to join at the after party at Spin.\nSpin was a unique venue in San Francisco where attendees could socialise and also play ping-pong!\nWhile some took it seriously most enjoyed the relaxed way to get to know their fellow contributors.\n\nSee you in Nice\n\nThe event was a lot of fun and the contributor summit in Nice will follow a very similar structure.\nAll levels of contributor are welcome, there will be lots of opportunity for in-depth discussions and you can even do an ignite talk!\nWhile we won’t be repeating the ping pong event there will be something equally unique to follow on from the summit.\n\nAttending is free, and no DevOps World | Jenkins World ticket is needed, but RSVP if you are going to attend to help us plan.\nSee you there!\n\nAs long as you’re in Nice for the Contributor Summit,\njoin Tracy, Kohsuke, and hundreds of other Jenkins users at\nDevOps World - Jenkins World on October 22-25.\nRegister with the code JWFOSS for a 30% discount off your pass.","title":"What to Expect at the Jenkins Contributor Summit","tags":["community","events","jenkins-world"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}},"publicURL":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/tracymiranda.jpg"},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda/","twitter":"tracymiranda"}]}},{"node":{"date":"2018-11-13T00:00:00.000Z","id":"7987b7c8-a622-559a-9886-2bb78562c4ac","slug":"/blog/2018/11/13/martinda-gsoc-mentor-summit-experience/","strippedHtml":"This year, the Jenkins organization participated in the Google Summer of Code Mentor Summit\nat the Google office in Sunnyvale on Oct 12, 13 and 14, 2018.\nThe GSoC Mentor Summit is where mentors of all organizations participating in the GSoC program are invited each year\nto learn and network with mentors from other organization, and make GSoC a better program.\nThis is the second time Jenkins mentors have participated in the summit, the first time was in 2016.\n\nExceptionally, three Jenkins GSoC mentors were invited to the summit this year.\nNormally only two mentors are invited, but when there are cancellations, Google draws a name at random from the waiting list,\nand the Jenkins organization was lucky enough and sent an extra mentor this year!\nThe mentors participating this year were Oleg Nenashev, Jeff Pearce and Martin d’Anjou.\n\nIt is worth mentioning that the Mentor Summit is not a typical conference where you go\nsit and listen at what speakers have to say, quite the contrary. The Mentor Summit is an unconference\nwhere participants are invited to fill empty time slots with their own topic of discussion.\n\nFriday Oct 12\n\nPre-conference meeting\n\nThe mentors had a short pre-conference meeting to reflect on the Jenkins participation in the 2018 GSoC program,\nand to plan for 2019.\nWe were joined at this meeting by Lloyd Chang, whom we had met at Jenkins World 2018.\nThank you Lloyd for joining us! A few ideas we had for 2019 are:\n\nMove project proposals to individual Google Documents\n\nCreate a template for project proposed by potential mentors and by project champions\n\nCreate an Organization Administrator Guide for future Jenkins GSoC project admins\n\nOther preparations we agreed to work on include a review of the 2018 feedback and the creation\nof an Epic capturing the action items in preparation for 2019.\nWe are also planning on making progress on the GSoC Budget process described in JEP-8.\n\nSummit Starts!\n\nThe summit started by a welcoming dinner at the Google Cafeteria and an evening session\nwhere we were explained how the unconference would work. We proposed a few topics:\ndealing with CPT lost slots, motivating mentors, and Open Source Hardware ASIC/FPGA.\n\nOn thing to say is that everyone at the conference had heard of Jenkins, or was already using Jenkins.\nLots of people came to tell us their Jenkins experience.\n\nI noticed this too - made me feel proud to be part of the Jenkins project.\n\n— Jeff Pearce\nJenkins GSoC mentor in 2018\n\nSaturday Oct 13\n\nThe morning started with a couple of announcements from Google.\nThe first one was that Google is thinking of creating a program called \"Google Season of Docs\" (GSoD for short),\nwhere technical writers would be paired with Open Source Organizations to help them write documentation such as:\n\nHigh-impact tutorials\n\nSet of How-To Guides\n\nContributor’s Guide\n\nDocumentation refactoring\n\nPlain documentation\n\nWe have additional details regarding this in the\nGSoC Mentor Summit Notes\nand we quickly concluded that if this program comes to life, Jenkins should be a participating organization.\n\nThe other announcement made by the GSoC administrators is that GSoC may take a different form in 2020.\nHowever, not much more information has been made available at this time.\nThe program has been operating for 13 years, and in 2020 it will have been 15 years.\n\nThe announcements were followed by a series of morning lightning talks.\nThis is where organizations showcase what their students accomplished during the program.\nThis is when we had a bit of a surprise…​\n\nOleg who had signed up for the evening lightning talks, was watching the talks while casually preparing slides for his evening presentation.\nBut something unusual happened: many talks were shorter than the 3-minute allotted, and suddenly we were ahead of schedule.\nThat’s when Oleg was called to the stage.\nI had no idea whether his slides were ready or not since he had just leaned over to me to say that he wanted to talk about all 3 projects we had this year.\nNot knowing how far he had gotten into refactoring the slides, this was going to be…​ interesting.\nBeing an experienced presenter, Oleg pulled it off brilliantly.\nThe slides were effectively ready (how he managed that I have no idea),\nbut you can see the slides of his lightning talk here:\nJenkins Remoting over Apache Kafka.\n\nThen there were the unconference sessions. Some of the sessions we attended are:\n\nDocumentation\n\nAttracting and retaining mentors (facilitated by Martin)\n\nOrganizing and motivating volunteers and mentors\n\nGetting students from coding/boot camps involved in open source\n\nRetaining students after GSoC\n\nOpen Event management System\n\nGSoC Feedback\n\nWe have notes for all the session in the main document.\nSome sessions were captured in separated documents which are linked from the main document, or from this blog post.\n\nThere were lots of good ideas in those sessions, and we will do what we can next year to implement some of them.\n\nSome organizations have said that the key for student retention\nis to give them responsibilities and tasks after the program is over.\nWe have certainly seen that this year, with one of our students asking for more responsibilities and wanting to know how\nhis plugin project could continue to grow within the Jenkins project (while at the same time help out on another GSoC plugin!).\n\nIn the evening was the second round of lightning talks.\nJeff Pearce presented the Code Coverage API Plugin lightning talk,\n(he was not caught by surprise).\n\nAfter the lightning talks, we were invited to hang out at the cafeteria and on the patio, to exchange stickers,\nnetwork with mentors of other organizations, and enjoy late evening snacks, music and of course the chocolate table!\n\nSunday Oct 14\n\nOn Sunday, the sessions continued. An interesting session was \"Beyond GSoC, What can Google do?\".\nOne person got a big round of applause when he said: \"Cloud credits\". It turns out the GSoC program admins\nhave been trying to get that for us for about 3 years. Google may be big and powerful, but some things\nare hard and remain hard in the corporate world.\n\nAn interesting suggestion was made by Oleg, and it would be to have a program with smaller, shorter term\ncommitments, something that would encourage more granular contributions but would not require a 4-month\nlong commitment. This was noted by the GSoC program admins.\n\nThen we attended a number of sessions:\n\nOpen Hardware ASIC/FPGA (facilitated by Martin)\n\nCommunity Metrics\n\nOutreachy (Jenkins is participating in this program)\n\nFailing a student\n\nBurnout (of mentors and org admins)\n\nThen the day came to an end with some last words by Google thanking all the mentors and volunteers who\nrun this program in their organizations.\n\nReturn trip\n\nI would now like to add a personal note. After the summit, like many others I fly back home,\nso I spend the evening at the SFO international terminal waiting for my late night flight.\nThat is where I get to meet more mentors, as some of us still wear our badges and T-Shirts,\nand also recognize each other from being at the conference.\nAnd funny enough, there are so many geeks at that terminal\nthat we may have recruited, among the passengers, a mentor to another org for next year!\n\nWant a GSoC student to work on your project in 2019?\n\nWe have already started the preparations for GSoC 2019.\nAnd we cannot do this without the participation of the Jenkins community.\nWe are already looking for:\n\nMentors from the Jenkins Special Interest Groups\n\nMentors from any background and any provenance (being a Jenkins developer is NOT required)\n\nProject proposals\n\nStudents and their proposals\n\nLots of people are afraid that mentoring a student will take a lot of their time.\nIf you feel that way, you are not alone. It does take some time. In my case, I spend 5 to 8 hours per week on mentor tasks (more at the start, less at the end).\nTo make it easier on mentors who likely have full time jobs and life commitments, we define different mentor roles:\n\nProject champion co-mentor : this is the mentor who proposes the idea, but may not have all the Jenkins code expertise needed. This mentor works with the student to define the project and acts mostly as a \"customer\" of the project. This mentor usually know enough about coding to comment on pull-requests with regards to the over quality, style and features of the code.\n\nTechnical co-mentor : this is the mentor who knows enough about the Jenkins code to guide the student on coding, and to provide Jenkins specific code reviews on pull-requests, but has limited involvement outside the coding activity of the student.\n\nThere is a third role which is:\n\nSubject Matter Expert : these individuals are not mentors, but we reach out to them 3-4 times during the project for advice and guidance, and sometimes complicated programming challenges.\n\nIf you have questions or are curious about the program,\ncontact us on the GSoC Gitter SIG chat.\n\nWe would like to emphasize that project proposals are not limited to \"big projects\".\nFor example, it is perfectly fine to have a proposal that is a collection of related Jira issues that aim to improve your project,\nor a list of tasks that need to be done for your project.\nWriting documentation is outside the scope of GSoC, but automating\ndocumentation generation, as long as it is mostly about writing code, is within the scope of GSoC.\n\nWe look forward working with the Jenkins community on GSoC 2019!","title":"Google Summer of Code Mentor Summit 2018","tags":["community","events","gsoc","gsoc2018"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#7898d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png","srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/4c2a5/martinda.png 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/8bef2/martinda.png 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/2864c/martinda.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/5abcf/martinda.webp 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/410d2/martinda.webp 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/6f814/martinda.webp 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/ca864/martinda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":136}},"publicURL":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/martinda.png"},"blog":null,"github":"martinda","html":"<div class=\"paragraph\">\n<p>Martin is a Jenkins community member. He participates since 2016 in the Jenkins GSoC program as a mentor, and more recently as an organization admin.\nHe currrently works in ASIC/FPGA Development Automation, using Jenkins, Gradle, Make, Artifactory, and a million other tools and languages.</p>\n</div>","id":"martinda","irc":"martinda","linkedin":null,"name":"Martin d'Anjou","slug":"/blog/authors/martinda/","twitter":"martindanjou14"}]}},{"node":{"date":"2018-11-07T00:00:00.000Z","id":"f78fd338-8583-5f00-82a2-c7210a261909","slug":"/blog/2018/11/07/Validate-Jenkinsfile/","strippedHtml":"In my daily work I often have to create or modify Jenkinsfiles and more often than I would like, I make mistakes. It is a very tedious workflow when you make a change to your Jenkinsfile, create a commit, push the commit and wait for your Jenkins Server to tell you, that you have missed a bracket.\n\nThe Command-line Pipeline Linter ( https://jenkins.io/doc/book/pipeline/development/) does a great job of reducing the turnaround times when writing a Jenkinsfile, but its usage has its own inconveniences. You need tools like curl or ssh to make a connection to your Jenkins Server and you need to remember the correct command to validate your Jenkinsfile. I still did not like the solution.\n\nAs VS Code is my daily driver, I started to look at writing extensions for it and out of it came a little extension which makes validating Jenkinsfiles just a little bit more comfortable.\n\nWhat the 'Jenkins Pipeline Linter Connector' does is, that it takes the file that you have currently opened, pushes it to your Jenkins Server and displays the validation result in VS Code.\n\n​You can find the extension from within the VS Code extension browser or at the following url: https://marketplace.visualstudio.com/items?itemName=janjoerke.jenkins-pipeline-linter-connector\n\nThe extension adds four settings entries to VS Code which you have to use to configure the Jenkins Server you want to use for validation.\n\njenkins.pipeline.linter.connector.url is the endpoint at which your Jenkins Server expects the POST request, containing your Jenkinsfile which you want to validate. Typically this points to /pipeline-model-converter/validate\" class=\"bare\">http:// /pipeline-model-converter/validate .\n\njenkins.pipeline.linter.connector.user allows you to specify your Jenkins username.\n\njenkins.pipeline.linter.connector.pass allows you to specify your Jenkins password.\n\njenkins.pipeline.linter.connector.crumbUrl has to be specified if your Jenkins Server has CRSF protection enabled. Typically this points to /crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb\" class=\"bare\">http:// /crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb).\n​","title":"Validate your Jenkinsfile from within VS Code","tags":["jenkinsfile","validation","vscode","pipeline","pipeline authoring","development"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#887878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/5236e/janjoerke.jpg","srcSet":"/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/534e5/janjoerke.jpg 32w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/99887/janjoerke.jpg 64w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/5236e/janjoerke.jpg 128w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/76fd4/janjoerke.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/59a6b/janjoerke.webp 32w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/cbb78/janjoerke.webp 64w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/1a93d/janjoerke.webp 128w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/50511/janjoerke.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":170}},"publicURL":"/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/janjoerke.jpg"},"blog":null,"github":"janjoerke","html":"<div class=\"paragraph\">\n<p>Software Engineer from northern Germany.</p>\n</div>","id":"janjoerke","irc":null,"linkedin":null,"name":"Jan Jörke","slug":"/blog/authors/janjoerke/","twitter":"janjoerke"}]}},{"node":{"date":"2018-11-12T00:00:00.000Z","id":"19ad29c6-3758-5c7b-bc08-31222e0bfca7","slug":"/blog/2018/11/12/inspecting-binaries-with-jenkins/","strippedHtml":"In a past blog post,\nDelivery Pipelines, with Jenkins 2, SonarQube, and Artifactory,\nwe talked about pipelines which result in binaries for development versions, and in\nDelivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production,\nwe examined ways to consistently promote applications toward production. In this blog post, I continue on both by discussing more details on security related quality gates\nand bringing this together with the handling of Docker images.\n\nUse case: Foster security on given, containerized business application\n\nSecurity is an overloaded term with varying meaning in different contexts. For this contribution, I consider security as the sum of rules regarding vulnerabilities\n(Common Vulnerability and Exposure, CVE), in binaries. In a past blog post, we’ve identified SonarQube already, as a very helpful tool to identify flaws\nin source code, particularly concerning reliability (bugs), vulnerabilities (security, e.g. CWE, that is common weakness enumaration, and OWASP, that is the Open Web Application Security Project), and\nmaintainability (code smells). Now it is a good time to add another tool to the chain, that is Twistlock, for inspection binaries for security issues.\nFeatures of Twistlock include\n\nCompliance and vulnerability management, transitively\n\nRuntime defense\n\nCloud-native CI/CD support\n\nBroad coverage of supported artifact types and platforms\n\nAPI, dashboards, and Jenkins integration, with strong configuration options\n\nThe underlying use case can be derived from several real-world security initiatives, in enterprises, based on given containerized applications. In practice, it is not a surprise that after adding such new\nquality gates, you identify historically grown issues. However, there are many good reasons to do so. You don’t need any Word documents to check any governance criteria manually, rather\nexecution and reporting are done automatically and also part of the actions are taken automatically. And above all, of course, your application is quality assured regarding known vulnerability issues, aligned with\nthe DevOps approach: development is interested in quick feedback whether their change would introduce any vulnerabilities, and operations is interested in insights whether and\nhow running applications are affected if a new CVE is discovered.\n\nThe term DevSecOps was coined to explicitely add security concerns to DevOps.\nIn my opinion, security is already inherent part of DevOps.\nThus, there is no strong reason to introduce a new word. Surely, new words are catchy.\nBut they have limits.\nOr have you ever experienced NoDev, the variant of DevOps where features are suddenly falling from the sky and deployed to production automatically?\n\nConceptually, container inspection is now part of the delivery pipeline and Twistlock processing is now triggered once we have produced our Docker images, see below, in order to get\nfast feedback.\n\nSoftware is staged over different environments by configuration, without rebuilding. All changes go through the entire staging process, although defined\nexception routines may be in place, for details see Michael Hüttermann, Agile ALM (Manning, 2012). The staged software consists of all artifacts which\nmake up the release, consistently, including the business application, test cases, build scripts, Chef cookbooks, Dockerfiles, Jenkins files to build all\nthat in a self-contained way, for details see Michael Hüttermann, DevOps for Developers (Apress, 2012).\n\nThis blog post covers sample tools. Please note, that there are also alternative tools available, and the best target architecture is aligned with concrete requirements and given basic\nconditions. Besides that, the sample toolchain is derived from couple of real world success stories, designed and implemented in the field. However, this blog post\nsimplifies and abstracts them in order to stay focussed while discussing the primitives of delivery units. For example, aggregating multiple Docker images with ASCII files, does not change the\nunderlying primitives and their handlings. For more information on all parts of the blog post, please consult the respective documentation, good books or attend fine conferences. Or go to the extremes: talk to your colleagues.\n\nIn our sample process, we produce a web application that is packaged in a Docker image. The produced Docker images are distributed only if the dedicated quality gate passes.\nA quality gate is a stage in the overall pipeline and a sum of defined commitments, often\ncalled requirements, the unit of work must pass. In our case, the quality gate comprises inspection of produced binaries and it fails if vulnerabilities of severity 'critical' are found.\nWe can configure Twistlock according to our requirements. Have a look how we’ve integrated it into our Jenkins pipeline, with focus on detecting vulnerabilities.\n\nJenkinsfile (excerpt): Twistlock inspection triggered\n\nstage('Twistlock: Analysis') { (1)\nString version = readFile('version.properties').trim() (2)\nprintln \"Scanning for version: ${version}\"\n    twistlockScan ca: '', cert: '', compliancePolicy: 'critical', \\\n        dockerAddress: 'unix:///var/run/docker.sock', \\\n        ignoreImageBuildTime: false, key: '', logLevel: 'true', \\\n        policy: 'critical', repository: 'huttermann-docker-local.jfrog.io/michaelhuettermann/alpine-tomcat7', \\ (3)\nrequirePackageUpdate: false, tag: \"$version\", timeout: 10\n}\n\nstage('Twistlock: Publish') { (4)\nString version = readFile('version.properties ').trim()\n    println \"Publishing scan results for version: ${version}\"\n    twistlockPublish ca: '', cert: '', \\\n        dockerAddress: 'unix:///var/run/docker.sock', key: '', \\\n        logLevel: 'true', repository: 'huttermann-docker-local.jfrog.io/michaelhuettermann/alpine-tomcat7', tag: \"$version\", \\\n        timeout: 10\n}\n\n1\nTwistlock inspection as part of the sequence of stages in Jenkinsfile\n\n2\nNailing down the version of the to be inspected image, dynamically\n\n3\nConfiguring analysis including vulnerability severity level\n\n4\nPublishing the inspection results to Twistlock console, that is the dashboard\n\nNow let’s start with the first phase to bring our application in shape again, that is gaining insight about the security related flaws.\n\nPhase 1: Gain insights about security related flaws\n\nAfter we’ve introduced the new quality gate, it failed, see image above. As integration with other tools, Jenkins is the automation engine and does provide helpful context information,\nhowever, those cannot replace features and data the dedicated, triggered tool does offer. Thus, this is the moment to switch to the dedicated tool, that is Twistlock. Opening\nthe dashboard, we can navigate to the Jenkins build jobs, that is the specific run of the build, and the respective results of the Twistlock analysis. What we see now is a list\nof vulnerabilities, and we need to fix those of severity critical in order to pass the quality gate, and get our changes again toward production. The list shows entries of\ntype jar, that is a finding in a binary as part of the Docker image, in our case the WAR file we’ve deployed to a web container (Tomcat), and of type OS, those are issues of the underlying image itself, the\noperating system, either part of the base image, or as a package added/changed in our Dockerfile.\n\nWe can now easily zoom in and examine the vulnerabilities of the Docker layers. This really helps to structure work and identify root causes. Since, typically,\na Docker image extends a Docker base image, the findings in the base image are shown on the top, see next screenshot, grouped by severity.\n\nOther Docker layers were added to the base image, and those can add vulnerabilities too. In our case, the packaged WAR file obviously contains a vulnerability. The next image shows how we examine that finding, while this time\nexpanding the Twistlock wizard (that is the plus sign) to directly see the list of found vulnerabilities.\n\nFinding and visualizing the issues are a very good first step, and we’ve even made those findings actionable, so we now have to take action and address them.\n\nPhase 2: Address the findings\n\nTo address the findings, we need to split our initiative into two parts:\n\nFixing the critical vulnerabilities related to the Docker image (in our case largely the base image)\n\nFixing the critical vulnerabilities related to the embedded deployment unit (in our case the WAR)\n\nLet’s proceed bottom up, first coping with the Docker base image.\n\nThis is an easy example covering multiple scenarios particularly identifying and fixing vulnerabilities in transitive binaries, i.e. binaries contained in\nother binaries, e.g. a Docker image containing a WAR file that in turn contains libraries. To expand this vertical feasibility spike, you can easily add\nmore units of each layer, or add more abstractions, however, the idea can always be nailed down to the primitives, covered in this blog post.\n\nLet’s now have a look at the used Docker image by looking at the used Dockerfile.\n\nDockerfile: The Dockerfile based on Alpine, running OpenJDK 8\n\nFROM openjdk:8-jre-alpine (1)\nLABEL maintainer \"michael@huettermann.net\"\n\n# Domain of your Artifactory. Any other storage and URI download link works, just change the ADD command, see below.\nARG ARTI\nARG VER\n\n# Expose web port\nEXPOSE 8080\n\n# Tomcat Version\nENV TOMCAT_VERSION_MAJOR 9 (2)\nENV TOMCAT_VERSION_FULL  9.0.6\n\n# Download, install, housekeeping\nRUN apk add --update curl &&\\ (3)\napk add bash &&\\\n  #apk add -u libx11 &&\\ (4)\nmkdir /opt &&\\\n  curl -LO ${ARTI}/list/generic-local/apache/org/tomcat/tomcat-${TOMCAT_VERSION_MAJOR}/v${TOMCAT_VERSION_FULL}/bin/apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz &&\\\n  gunzip -c apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz | tar -xf - -C /opt &&\\\n  rm -f apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz &&\\\n  ln -s /opt/apache-tomcat-${TOMCAT_VERSION_FULL} /opt/tomcat &&\\\n  rm -rf /opt/tomcat/webapps/examples /opt/tomcat/webapps/docs &&\\\n  apk del curl &&\\\n  rm -rf /var/cache/apk/*\n\n# Download and deploy the Java EE WAR\nADD http://${ARTI}/list/libs-release-local/com/huettermann/web/${VER}/all-${VER}.war /opt/tomcat/webapps/all.war (5)\n\nRUN chmod 755 /opt/tomcat/webapps/*.war\n\n# Set environment\nENV CATALINA_HOME /opt/tomcat\n\n# Start Tomcat on startup\nCMD ${CATALINA_HOME}/bin/catalina.sh run\n\n1\nBase image ships OpenJDK 8, on Alpine\n\n2\nDefined version of web container\n\n3\nApplying some defined steps to configure Alpine, according to requirements\n\n4\nUpdating package itself would address one vulnerability already\n\n5\nDeploying the application\n\nBy checking available versions of the official OpenJDK Alpine image, we see that there’s a newer version 8u181 which we could use.\nWe can zoom in and study release notes and contents, or we just pragmatically switch the base image to a more recent version. Often it is a good idea\nto upgrade versions regularly, in defined intervals. This leads to the following change in the Dockerfile.\n\nDockerfile (excerpt): The Dockerfile based on Alpine, running OpenJDK 8u181\n\nFROM openjdk:8u181-jre-alpine (1)\nLABEL maintainer \"michael@huettermann.net\"\n\n1\nBase image is now OpenJDK 8u181, on Alpine\n\nThere are more options available to fix the issues, but let’s proceed to the second part, the vulnerabilities in the deployment unit.\n\nBefore we push this change to GitHub, we also address the vulnerability issue in the deployment unit, that is jetty-io. Here we are a bit unsure about\nwhy, in this specific use case, the library is used. To retrieve more information about dependencies, we run a dependency:tree command on our Maven\nbased project. We now see that jetty-io is transitively referenced by org.seleniumhq.selenium:htmlunit-driver. We can surely discuss why this is a compile\ndependency and the libraries are shipped as part of the WAR, but let’s consider this to be given according to requirements, thus we must take special attention now\nto version 2.29.0 of the specific library.\n\nAlso here we can browse release notes and content (particularly how those libs are built themselves), and come to the conclusion to\nswitch from the used version, that is 2.29.0, to a newer version of htmlunit-driver, that is 2.31.1.\n\npom.xml (excerpt): Build file\n\n(1)\n\norg.seleniumhq.selenium\nselenium-java\n3.14.0\n\norg.seleniumhq.selenium (2)\nhtmlunit-driver\n2.31.1\n\njunit\njunit\n4.7\n\n1\nPart of the underlying POM defining dependencies\n\n2\nDefinition of the dependency, causing the vulnerability finding; we use a newer version now\n\nOK, now we are done. We push the changes to GitHub, and our GitHub webhook directly triggers the workflow. This time the quality gate passes, so it\nlooks like our fixes did address the root causes and eliminated those with the configured threshold severity.\n\nFinally, after running through our entire workflow, that is made up of different pipelines, our inspected and quality assured container does successfully\nrun in our production runtime environment, that is on Oracle Cloud.\n\nCrisp, isn’t it?\n\nSummary\n\nThis closes our quick walkthrough of how to inject security related quality gates into a Jenkins based delivery pipeline.\nWe’ve discussed some concepts and how this can look like with sample tools.\nIn the center of our efforts, we used Jenkins, the swiss army knife of automation.\nWe enriched our ecosystem by integrating couple of platforms and tools, above all Twistlock.\nAfter this tasty appetizer you are ready to assess your own delivery pipelines,\nconcepts and tools, and to possibly invest even more attention to security.\n\nReferences\n\n'Agile ALM', Manning, 2011\n\n'DevOps for Developers', Apress, 2012\n\nDocker, the standard to develop and ship set of changes\n\nDocker images, shipping OpenJDK\n\nOracle Cloud Infrastructure, for containers\n\nAlpine Linux\n\nSonarQube, the language/platform agnostic Continuous Inspection tool\n\nTwistlock, the container security platform\n\nSources on GitHub\n\nASCII, commonly used standard to work on primitives, such as Docker (and their aggregations)\n\nCommon Vulnerabilities and Exposures\n\nHolistic pipelines, Live 15-minute Jenkins Demos, Part 1, on YouTube\n\nHolistic pipelines, Live 15-minute Jenkins Demos, Part 2, on YouTube\n\nDelivery Pipelines, with Jenkins 2, SonarQube, and Artifactory\n\nDelivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production","title":"The Silence of the Lambs: Inspecting binaries with Jenkins","tags":["devops","devsecops","security","vulnerabilities","compliance","twistlock"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg","srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/534e5/michaelhuettermann.jpg 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/99887/michaelhuettermann.jpg 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/76fd4/michaelhuettermann.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/59a6b/michaelhuettermann.webp 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/cbb78/michaelhuettermann.webp 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/96250/michaelhuettermann.webp 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/50511/michaelhuettermann.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}},"publicURL":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/michaelhuettermann.jpg"},"blog":"http://huettermann.net","github":"michaelhuettermann","html":"<div class=\"paragraph\">\n<p>Michael is expert in Continuous Delivery, DevOps and SCM/ALM supporting enterprises in implementing DevOps.\nMichael is Jenkins Ambassador.</p>\n</div>","id":"michaelhuettermann","irc":null,"linkedin":null,"name":"Michael Hüttermann","slug":"/blog/authors/michaelhuettermann/","twitter":"huettermann"}]}},{"node":{"date":"2018-12-05T00:00:00.000Z","id":"f0b2bc67-df2c-5d35-83cb-1f19d82bdcd8","slug":"/blog/2018/12/05/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.154 and LTS 2.150.1, that fix multiple security vulnerabilities.\nSince 2.150.1 is the first release in the new LTS line, we also released 2.138.4, a security update for the previous LTS line.\nThis allows administrators to install today’s security fixes without having to upgrade to the new LTS line immediately.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes, see our LTS 2.138.4 upgrade guide.\n\nA note on previously released changes related to this fix\n\nIn the Jenkins core security updates released in August and October, we also included security improvements that can be disabled by setting various system properties.\nThose changes are an essential part of the SECURITY-595 fix, so we strongly recommend not disabling them for any reason.\nPreviously published documentation has been updated.","title":"Important security updates for Jenkins","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2018-12-10T00:00:00.000Z","id":"a9e14a72-e8bc-5d64-8f07-6daa5be4a88f","slug":"/blog/2018/12/10/kubecon-is-here/","strippedHtml":"The time has come - KubeCon + CloudNativeCon North America 2018 has arrived.\nThe conference has completely sold out and the schedule is jam packed with interesting talks.\n\nIf you’re among those with tickets, here are a couple Jenkins related events that might interest you:\n\nOn Wednesday at 3:40pm, Carlos Sanchez will be presenting\nJenkins X: Continuous Delivery for Kubernetes in\nTahoma 3/4 @ TCC.\n\nOn Tuesday at 2:35pm, Jonathan Hess & Loren Trout from\nSAP will discuss how\nMigrating Jenkins to Kubernetes Broke Our Brains in Room 606-609.\n\nI look forward to seeing you there!","title":"KubeCon + CloudNativeCon North America 2018 is Here!","tags":["cloud-native","kubernetes","kubecon"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2018-12-10T00:00:00.000Z","id":"eb4020fb-4167-5e6e-8795-9cfb2603d8a6","slug":"/blog/2018/12/10/outreachy-audit-log-plugin/","strippedHtml":"This year marks the first time the Jenkins project is participating in Outreachy.\nOutreachy is a program similar to Google Summer of Code (GSoC) where interns work on open source projects for a paid stipend.\nThe key difference is that Outreachy reaches out to underrepresented groups and those who face systemic bias or discrimination in the technology industry in their home country.\nOnce I learned about this program, I immediately volunteered to mentor as the concept strongly aligns with my ideals of inclusiveness and community building.\nI’m happy to report that both the Jenkins project,  and my employer [CloudBees]( https://www.cloudbees.com), have been very supportive of this program.\n\nExpanding on our previous efforts to mentor students in GSoC, this year we’ve joined up with Outreachy to mentor two interns.\nOur interns for this season of Outreachy, Latha Gunasekar and David Olorundare, will be working with me on audit logging support for Jenkins.\nI am excited to welcome both David and Latha, and am looking forward to what they will learn about both professional software engineering and contributing to an open source community.\nStay tuned for blog post entries introducing both people in the near future.\n\nThe audit logging support project forms a new connection between Jenkins and Apache Log4j which offers great opportunities for our interns to learn more about open source governance and meet new people.\nAs a bonus, the project aims to provide the tooling necessary to support advanced observability concerns such as running anomaly detection on authentication events to detect potential intrusion attempts.\nWe will also be authoring a JEP to detail the audit logging API provided by the plugin and how other plugins can define and log their own audit events besides the Jenkins Core ones that come with the plugin.\n\nI’m looking forward to the great work we’ll be doing together, and I hope that we’ll be able to welcome more Outreachy interns in the future!","title":"Outreachy internships to add audit logging support to Jenkins","tags":["community","outreachy","outreachy2018"],"authors":[{"avatar":null,"blog":"https://musigma.blog/","github":"jvz","html":"<div class=\"paragraph\">\n<p>Mathematician, software engineer, and free software evangelist.\nWorks for CloudBees on the <a href=\"https://jenkins.io/security/\">Jenkins Security Team</a> along with other Jenkins community work since 2018.\nPMC Chair of the <a href=\"https://logging.apache.org/\">Apache Logging Services project</a> and Secretary for the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.</p>\n</div>","id":"jvz","irc":null,"linkedin":null,"name":"Matt Sicker","slug":"/blog/authors/jvz/","twitter":"jvz"}]}},{"node":{"date":"2018-12-10T00:00:00.000Z","id":"432aab4d-1fb0-5872-b4e3-0530602e2a92","slug":"/blog/2018/12/10/the-official-Docker-image/","strippedHtml":"There are now three different Docker Hub repositories that are or have been used as the \"official\" Jenkins image.\nThis article aims at providing a clarification about which one is the current official one (as of December 2018 :-)).\n\nThe official one\n\ndocker pull jenkins/jenkins\n\ni.e. https://hub.docker.com/r/jenkins/jenkins/ is the right repository to use.\n\nI also documented some time ago on my blog the recommended way to run Jenkins using the official Docker image.\n\nThe deprecated ones\n\njenkins\n\nDeprecated since a long time already.\nA short version of why we stopped using and updating this image is that we never had a way to get our images published without having each time to go through a manual process.\n\njenkinsci/jenkins\n\nDeprecated since a long time too, but for easing transition, we had kept updating both jenkins/jenkins (the right one) and jenkinsci/jenkins together.\nWe stopped updating jenkinsci/jenkins in early December 2018 (cf. INFRA-1934 for details if you are interested)\n\nThanks for reading!","title":"Official Jenkins image to use from Docker Hub","tags":["docker"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}},"publicURL":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/batmat.jpg"},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat/","twitter":"bmathus"}]}},{"node":{"date":"2018-12-14T00:00:00.000Z","id":"cc052415-dba7-5a62-91d8-3f6906f485d9","slug":"/blog/2018/12/14/java11-preview-availability/","strippedHtml":"Please refer to Running Jenkins on Java 11 documentation to have the up-to-date details on how to run Jenkins on Java 11.\n\nThis is a joint blogpost prepared by the Java 11 Support Team.\nOn Dec 18 (4PM UTC) we will be also presenting the Java 11 Preview Support at the Jenkins Online Meetup\n( link)\n\nJenkins, one of the leading open-source automation servers, still supports only Java 8.\nOn September 25 OpenJDK 11 was released.\nThis is a Long-Term-Support which will stay around for years,\nand in the Jenkins project we are interested to offer a full support of this version.\nOver the last year many contributors have been working towards enabling support for Java 11 in the project (Jenkins JEP-211).\nIt was a thorny path,\nbut now, on behalf of the Jenkins Platform SIG,\nwe are happy to announce preview availability of Java 11 support in Jenkins weekly releases!\n\nWhy do we need preview availability for Java 11?\nIt offers Jenkins contributors and early adopters a way\nto try out the changes before the general availability release happens early next year.\nIt should help us to get more exploratory testing and, hopefully,\nresolve most of the issues before Java 11 is officially supported in Jenkins.\n\nIn this blog post we will describe how to run with Java 11,\nand how to investigate compatibility issues and report them.\n\nBackground\n\nAs you probably remember,\nin June 2018 we had an online hackathon targeting Java 10+ support in Jenkins.\nAs a part of the hackathon,\nwe provided the experimental support of Java 11.\nThis event was a big success for us,\nand we were able to get Jenkins running with Java 10 and 11-ea,\nincluding major features like Jenkins Pipeline, JobDSL, Docker/Kubernetes plugins, Configuration as Code, BlueOcean, etc.\nIt gave us confidence that we can provide Java 11 support in Jenkins without major breaking changes.\nAfter the hackathon, Oleg Nenashev created\njep:211[\"Java 10+ support in Jenkins\"] (was later adjusted to target Java 11 only).\nPlatform Special Interest Group\nhas been also founded to coordinate the Java 11 support work\nand other platform support efforts (packaging, operating system support, etc.).\n\nA group of contributors continued working on Java 11 support,\nmostly focusing on upstreaming functional patches,\nenabling Java 11 support in development tools,\ntesting and addressing known compatibility issues.\nSee the Platform SIG meeting notes for detailed status updates.\nStarting from Jenkins 2.148, Jenkins successfully runs with latest OpenJDK 11 releases on various Linux and Windows platforms.\nWe performed a LOT of automated and exploratory tests, Jenkins plugins appear to work well with some exceptions (see below).\nThere is ongoing test automation effort towards the GA releases,\nbut we were able to successfully run Jenkins core tests,\nfull Acceptance Test Harness,\nand Plugin Compat Tester for recommended plugins.\nWe also deployed a temporary\nExperimental Update Center for Java 11\nwhich allows quickly delivering fixes for Java 11 early adopters.\nJenkins 2.155+ defaults to this update center when running with Java 11,\nand that’s why we announce preview availability for this version.\n\nOn Nov 19, 2018 we presented the current Java 11 support status at the Platform SIG meeting\nslides,\nand we agreed that we would like to proceed with the preview availability so that\nwe can offer something for evaluation to Jenkins users.\nBy the next meeting on Dec 04, all blockers have been addressed,\nand the Platform SIG meeting signed off the Java 11 preview availability.\n\nRunning Jenkins and Java 11 in Docker\n\nStarting from Jenkins 2.155, we provide Docker images for the Jenkins controller and agent.\nAll these images are based on the official\nopenjdk:11-jdk image maintained by the Docker Community.\nThere were discussions about migrating to other base images,\nbut we decided to exclude it from the Preview Availability scope.\nSimilarly, we do not provide Alpine images for now.\n\nJenkins controller image\n\nJava 11 support is now provided as a part of the official\njenkins/jenkins image.\nYou can run the Jenkins with Java 11 simply as:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:jdk11\n\nThe following tags are available:\n\njdk11 - Latest weekly release with Java 11 support\n\n2.155-jdk11 - Weekly releases packaged with Java 11\n\nThe image is fully compatible with\njenkins/jenkins documentation,\ne.g. you can use plugins.txt to install plugins, mount volumes and pass extra options via environment variables.\n\nAgent images\n\nIf you use containerized agents via Docker or Kubernetes plugins,\nwe have also released official Docker images for Jenkins agents:\n\njenkins/agent\n\njenkins/inbound-agent\n\njenkins/ssh-build-agent\n\nAll images use the latest-jdk11 image tag for JDK11 bundles.\nAnd sorry for the obsolete names!\n\nExperimental Jenkins controller images\n\nIn order to simplify testing, we also provide some experimental images on DockerHub.\nWe set up a continuous delivery flow for them,\nso you can get patches without waiting for Jenkins weekly releases.\n\njenkins4eval/blueocean-platform-support -\nEquivalent of jenkinsci/blueocean\n\nTag: latest-jdk11\n\nThe image bundles all Jenkins Pipeline and Blue Ocean patches required to run on Java 11\n\nIf you want to try Pipeline, use this image\n\njenkins/jenkins-experimental -\nEquivalent of jenkins/jenkins\n\nTag: latest-jdk11\n\nThe image is released from the java11-support feature branch in the Jenkins core\n\nThe branch may be slightly ahead or behind the master branch,\nwe may use the branch to quickly deliver patches to Java 11 users\n\nEventually we will move the experimental flow to the new jenkins4eval organization\nbeing created as a part of jep:217[].\n\nRunning jenkins.war with Java 11\n\nRunning without Docker is not that trivial,\nbecause Jenkins depends on some modules which have been removed from Java 11.\nWe plan to address it in the General Availability release somehow (see jira:JENKINS-52186[]),\nbut for now some manual actions are required to run Jenkins WAR with Java 11.\n\nDownload Jenkins WAR for 2.155\n\nDownload the following libraries to the same directory as jenkins.war\n\njaxb-api-2.3.0.jar (save as jaxb-api.jar)\n\njaxb-core-2.3.0.1.jar (save as jaxb-core.jar)\n\njaxb-impl-2.3.0.1.jar (save as jaxb-impl.jar)\n\njavax.activation v.1.2.0 (save as javax.activation.jar)\n\nRun the following command:\n\nRun Jenkins with ${JAVA11_HOME}/bin/java \\\n    -p jaxb-api.jar:javax.activation.jar --add-modules java.xml.bind,java.activation \\\n    -cp jaxb-core.jar:jaxb-impl.jar \\\n    -jar jenkins.war --enable-future-java --httpPort=8080 --prefix=/jenkins\n\nKnown compatibility issues\n\nTo help users to track down the compatibility issues,\nwe have created a new Known Java 11 Compatibility Issues Wiki page.\n\nSeveral important issues and obstacles:\n\nPipeline: Support Plugin has a known issue\nwith context persistency when running with Java 11 (jira:JENKINS-51998[])\n\nWe have deployed a temporary fix to the\nExperimental Update Center for Java 11.\n Fix version: 3.0-java11-alpha-1\n\nIf you use Jenkins Pipeline, make sure you run with this fix.\nOtherwise the jobs will fail almost immediately\n\nWhen updating instances to Java 11, make sure there is no running Pipelines\n\njira:JENKINS-54305[] -\nJDK Tool Plugin does not offer installers for JDK 11\n\njira:JENKINS-52282[] -\nJava Web Start is no longer available in Java 11, so it is no longer possible to start agents from Web UI.\nWe do not plan to provide a replacement.\n\nWe also know about some minor incompatibilities in other plugins,\nbut we do not consider them as blockers for preview availability.\n\nReporting compatibility issues\n\nIf you discover any Java 11 incompatibilities, please\nreport issues in our bugtracker.\nPlease set java11-compatibility labels for such issues\nso that they automatically appear on the Wiki page and get triaged.\n\nFor the security issues please use the standard\nvulnerability reporting process.\nAlthough we will be fixing Java 11 specific issues in public while it is in the preview,\nfollowing the security process will help us to investigate impact on Java 8 users.\n\nJava 11 Support Team\n\nOnce Java 11 support is released, we expect reports of regressions in plugins and Jenkins core.\nOne of the concerns are exotic platforms with native libraries, and of course other Java versions.\nThere is also a risk of 3rd-party library incompatibilities with Java 11.\nTo mitigate the risks, we have created a\nJava 11 Support Team.\nThis team will be focusing on triaging the incoming issues,\nhelping to review pull requests and, in some cases, delivering the fixes.\nThe process for this team is documented in JEP-211.\n\nWe do not expect the Java 11 Support Team to be able to fix all discovered issues,\nand we will be working with Jenkins core and plugin maintainers to get the fixes delivered.\nIf you are interested to join the team,\nreach out to us in the Platform SIG Gitter Channel.\n\nContributing\n\nWe will appreciate any kind of contributions in the Java 11 effort,\nincluding trying out Jenkins with Java 11, reporting and fixing compatibility issues.\n\nIf you want to do the exploratory testing,\nwe recommend to try out Java 11 support at one of your test instances.\nSuch testing will be much appreciated,\nespecially if you use some service integration plugins or exotic platforms.\nThe issue reporting guidelines are provided above\n\nIf you are a plugin developer/maintainer,\nwe would appreciate if you could test your plugin with Java 11.\nIn order to help with that, we have created a Wiki page with\nJava 11 Developer guidelines.\nThis page explains how to build and test plugins with Java 11,\nand it also lists known issues in development tools\n\nWhatever you do, please let us know about your experience by sending a message to\nthe Platform SIG mailing list.\nSuch information will help us a lot to track changes and contributions.\nAny other feedback about the migration complexity will be appreciated!\n\nWhat’s next?\n\nOn Dec 18 (4PM UTC) we will be presenting the Java 11 Preview Support at the Jenkins Online Meetup\n( link).\nAt this meetup we will summarize the current Java 11 Preview support status.\nIf you are a plugin developer, we will also organize separate sessions about testing plugins with Java 11 and about common best practices for fixing compatibility issues.\nPlease follow the Platform SIG announcements if you are interested.\n\nIn the next weeks we will focus on addressing feedback from early adopters and\nfixing the discovered compatibility issues.\nWe will also continue working on Java 11 support patches towards the general availability next year (jira:JENKINS-51805[]).\nIn addition to that, we will start working on Java 11 support in subprojects,\nincluding Jenkins X and Jenkins Evergreen.\n\nLinks\n\nJEP-211: Java 11 support in Jenkins\n\nJava requirements in Jenkins\n\nKnown Java 11 Compatibility Issues\n\nJava 11 Developer guidelines\n\nPlatform Special Interest Group","title":"Java 11 Support Preview is available in Jenkins 2.155+","tags":["core","developer","java11","community","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-12-25T00:00:00.000Z","id":"c8d9b205-2db8-5364-a27b-52588cce2a9d","slug":"/blog/2018/12/25/year-in-review/","strippedHtml":"The end of a year is a great time to step back from the daily grind to look at the big picture.\n\nAcross the industry, the relentless march toward more automation still continues on. We are writing software faster than ever, but the demand for software seems to be going up even more, and I feel more and more businesses and executives are keenly aware that software and developers are king. At the ground level, every team I meet sees the software delivery automation to be a critical part of their \"software factory,\" and it’s important for them to create and manage them with unhinged flexibility and visibility.\n\nJenkins continues to play a major role in making this possible, after 14+ years since its birth, and if anything the pace of growth seems to be accelerating. In this dog year industry, that’s truly remarkable. Being a part of this achievement truly makes me proud.\n\nBuilding Jenkins, being a tool that everyone uses, comes with a great responsibility. So within the Jenkins community, we’ve been hard at work. In fact, 2018 has been the single most innovative year in the history of the whole project across the field, at multiple levels.\n\nAs we got bigger, we needed better ways to drive initiatives that cut across multiple people. This thinking led to JEPs and SIGs, and 2018 saw these formats getting great traction. After a year of operating them, I think we’ve learnt a lot, and I hope we will continue to improve them based on the learning.\n\nThese new formats gave rise to new collaborations. For example, Chinese Localization SIG resulted in our WeChat presence and localized website. Platform SIG was instrumental in Java 11 support.\n\nI’m also very happy to see new batch of leaders. In fear of missing out some people, I’m not going to list them individually, but we celebrated many of them as Jenkins Ambassadors this fall (and please nominate more for the next year!) Those people who lead key efforts are often people who are new to those roles.\n\nSome of the new leaders led other efforts that unlock new contributors. It’s about consciously thinking which segment of our potential contributors we aren’t tapping today and understanding why. Something any business does all the time. Ours resulted in Google Summer of Code and Outreachy participations.\n\nOur security process and the pace of fixes have gone up considerably this year again, reflecting our stepping up to the trust our users gave to us. For example, this year we rolled out a telemetry system that informs us to develop better fixes more quickly.\n\nNow, where these community improvements ultimately matter is what impact we are creating to software that you use. On that front, I think we did great in 2018, resulting in what I call\"5 super powers\" :\n\nJenkins X is probably the most visible innovation of this year, making it much easier to create modern cloud applications on Kubernetes. This also represents the significant expansion of the Jenkins community and its mission.\n\nJenkins Configuration as Code hit a major milestone \"1.0\" this year, and it’s continuing to gain more momentum and traction.\n\n\"Cloud Native Jenkins\" is the term I gave to a new effort that I’m calling to transform Jenkins into general purpose CI/CD engine that runs at scale on Kubernetes. There’s still much to be defined here, but you can already see some great things like Serverless Jenkins.\n\nEvergreen is another young and upcoming project that has ambitious thesis --- drastically simplifying the adoption and operation of Jenkins.\n\nPipeline effort formed a new SIG and I’m looking forward to the impact this will drive in 2019.\n\nThe not-so-secret sauce of the Jenkins community that threads together all these improvements from user visible changes to the community improvements is our ability to evolve. As I look forward to 2019, no doubt these things I mentioned will evolve, morph, merge, and split as we continue to learn and adopt.\n\nSo please, follow @jenkinsci and @jenkinsxio on Twitter to get updates on how we will evolve, and join our community to together build the software that rocks the world. How many open-source projects can say that?","title":"2018 in Review: A year of innovation","tags":["core","community","new-year-blogpost"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2018-12-26T00:00:00.000Z","id":"14d2c0a3-cdcd-532e-847f-8b8c1d9171e1","slug":"/blog/2018/12/26/gsoc-2019-call-for-mentors/","strippedHtml":"Google Summer of Code\nis as program where students are paid a stipend by Google to work on a free open source project like Jenkins,\nat full-time for four months (May to August).\nMentors get actively involved with students starting at the end of February when students start to apply\n(see the timeline).\n\nWe are looking for mentors and project ideas to participate in the 15th edition of the Google Summer of Code program!\nWe have until February 6th, 2019 at 8pm UTC to submit the application on behalf the Jenkins Organization, but obviously,\nwe want to be ready before that.\n\nThe first step in the process is to have mentors and project ideas.\nThen we will apply to Google.\nWe need Google to accept Jenkins' application to the program itself.\nAnd for this to happen, we need project proposals and mentors.\n\nWe currently have a list of project idea proposals,\nand we are looking for new project proposals, mentors, technical advisers, and subject matter experts.\nGSoC projects may be about anything around code: new features, plugins, test frameworks, infrastructure, etc., etc.\n\nMaking a project idea proposal is easy, you can read the instructions here.\nQuick start:\n\nCopy the project proposal template,\nadd a short description of your project idea\n\nOpen the document for public view and comments, reference communication channels there (if any)\n\nLet us know about the project idea via our gitter channel or the\nmailing list.\n\nAfter getting initial feedback from org admins, share your idea with other contributors who might be interested\n(via the developer mailing list, chats, or special interest groups)\n\nPotential mentors are invited to read the information for mentors for more information about the project.\nNote that being a GSoC mentor does not require expert knowledge of Jenkins.\nGSoC org admins will help to find technical advisors, so you can study together with your students.\n\nMentoring takes about 5 to 6 hours of work per week (more at the start, less at the end).\nIn return, a student works on your project full time for four months.\nThink about the projects that you’ve always wanted to do but could not find the time…​\nThere are also many opportunities to engage with the Jenkins community (meetups, knowledge sharing, communications) and with other projects (e.g. going to the GSoC Mentor Summit).\nGSoC is a pretty good return on the investment!\n\nFor any question, you can find the GSoC admins,\nmentors and participants on the GSoC SIG Gitter chat.\n\nThe Jenkins GSoC Org Admin Team 2019","title":"Google Summer of Code 2019. Call for Project ideas and Mentors","tags":["gsoc","gsoc2019","community","events","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#7898d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png","srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/4c2a5/martinda.png 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/8bef2/martinda.png 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/2864c/martinda.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/5abcf/martinda.webp 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/410d2/martinda.webp 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/6f814/martinda.webp 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/ca864/martinda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":136}},"publicURL":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/martinda.png"},"blog":null,"github":"martinda","html":"<div class=\"paragraph\">\n<p>Martin is a Jenkins community member. He participates since 2016 in the Jenkins GSoC program as a mentor, and more recently as an organization admin.\nHe currrently works in ASIC/FPGA Development Automation, using Jenkins, Gradle, Make, Artifactory, and a million other tools and languages.</p>\n</div>","id":"martinda","irc":"martinda","linkedin":null,"name":"Martin d'Anjou","slug":"/blog/authors/martinda/","twitter":"martindanjou14"}]}},{"node":{"date":"2019-01-07T00:00:00.000Z","id":"4187a71c-adb8-54ce-90c9-c412101f2f56","slug":"/blog/2019/01/07/webhook-firewalls/","strippedHtml":"In this post I wanted to show how you can run Jenkins behind a firewall (which could be a corporate firewall, a NAT’ed network like you have at home) but still receive webhooks in real time from GitHub.com. You can generalise this to other services too - such as BitBucket or DockerHub, or anything really that emits webhooks, but the instructions will be for GitHub projects hosted on github.com.\n\nWhat are webhooks\n\nJust a very quick refresher on what webhooks are: Messages (often JSON, but not always) typically posted by HTTP(S) from a server to a client that is listening for events.\n\nThe events flow left to right, Jenkins sits there happily listing on paths like /github-webhook/ or /dockerhub-webhook/ etc for some HTTP request to tell it to wake up and do some work.\n\nGitHub/BitBucket may be reporting a new commit or PR, or DockerHub reporting an upstream image has changed. What all these things have in common is that they push to Jenkins, and expect to be able to push to it (ie that Jenkins is visible to them). This works great when the network is open - say GitHub Enterprise, or Jenkins is listening on the web.\n\nNot on the web\n\nThe trick is when something gets in the middle, say a firewall:\n\n( As is industry standard, all firewalls have to be a wall on fire. Please don’t somehow set bricks on fire in your organisation)\n\nThis is just the same when you fire up Jenkins on your laptop, and want to receive webhooks from github.com (a legitimate thing, perhaps to test out your setup, perhaps to run builds for iOS on a mac, or some corner of a network that is not exposed to the web). Unless your laptop is addressable to the whole web that is (not likely), or your network is configured just right, the webhooks won’t be able to flow.\n\nThis is fine - we can fall back to polling for changes. Except this is terrible. You burn through API quotas, and you don’t get changes in real time, and really no one is happy.\n\nSome problems are opportunities\n\nWe can both solve this problem, but also, view this is an opportunity. Having things not addressable on the web, or locked down in some default way is a feature, not a bug. You massively reduce your attack surface, and can have defence in depth:\n\nA Webhook forwarding service\n\nEnter the memorably named Smee. This is an OSS project provided by GitHub and also helpfully hosted as a service by GitHub. This can capture and forward webhooks for you. I’ll try to explain it with a diagram:\n\nGitHub pushes an event (via HTTPS/json in this case) to Smee.io (the funny thing with circles, which is on the public web and accessible from GitHub.com) - and Jenkins in turn subscribes to Smee with an outgoing connection from a client. Note the direction of the arrows: Jenkins only makes an outbound connection.\n\nThis is the important point: this will work as long as the firewall is one way (like a NAT typically is, and many networks). If the Jenkins side can’t connect to anything on the outside world - well, this won’t help with that of course (but that is not often the case).\n\nSetting it up\n\nStep 1: Firstly - go to https://smee.io/ and click “Start a new channel”:\n\nThis will give you a unique URL (which you should copy for later use):\n\nNext you should install the smee client next to where you have the Jenkins server running:\n\nnpm install --global smee-client\n\n(This will make the smee client/command available to receive and forward webhooks).\n\nNow start the smee client and point it to your Jenkins server. In this case I have it running on port 8080 (the default if you fire it up on your laptop, change both the port and the smee URL as needed):\n\nsmee --url https://smee.io/GSm1B40sRfBvSjYS --path /github-webhook/ --port 8080\n\nThis says to connect to the smee service, and forward webhooks to /github-webhook/ (that trailing slash is important, don’t miss it). Once this is running, you will see it log that it is connected and forwarding webhooks. Leave this command running for as long as you want to receive webhooks.\n\nNext, you need to configure a pipeline that makes use of github. In this case I set up one from scratch. You can skip this if you already have a pipeline setup:\n\nI then chose “GitHub” as the where the code is:\n\nThen choose your repository. This will set things up ready to receive webhooks from GitHub. (also if you have an existing pipeline setup, and it is using GitHub as the SCM source, that is also fine).\n\nThe final step is to tell GitHub to post webhook events for that repository (or organization, you can do that too) to Smee (which ultimately means Jenkins will receive them).\n\nGo to the settings tab for your GitHub repository, and then click “add webhook”:\n\nNext, configure the webhook:\n\nPaste in the “smee” URL you copied from the step above.\n\nChoose application/json as the content type\n\nTell it to send everything (you can pick and choose what events, but I just did that as simpler).\n\nPress Add Webhook (or update)\n\nIt should look something like this:\n\nOK - webhooks should be flowing now. You can make a change to your repository, and check that a build starts soon after:\n\nGood luck!","title":"Triggering builds with webhooks behind a secure firewall","tags":["jenkins","webhooks","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale/","twitter":"michaelneale"}]}},{"node":{"date":"2019-01-08T00:00:00.000Z","id":"058588ed-0d18-5d03-bd6b-e2e62be7093b","slug":"/blog/2019/01/08/mpl-modular-pipeline-library/","strippedHtml":"Despite speeding up development with deployment automation, one of our clients\nwas experiencing slow time-to-market due to a lack of collaboration in DevOps.\nWhile they had invested in DevOps, every production pipeline was set up\nindividually, forcing teams to remake the wheel for each project. Making matters\nworse, there was no cross-team collaboration, so any bug in the platform was\npresent in each new pipeline. Many of our clients have similar issues, so we\ndecided that we should develop a common tool which would both help current\nclients, and be adaptable for use in the future. While the most obvious option\nwas standardizing the CI/CD platform with a common framework, this led to a\nmonolithic structure, which was inflexible and ultimately unworkable. Since each\nteam needed to work on their own pipelines, we developed a solution that would\nstore each reusable part of the DevOps pipeline for later use: a Jenkins-powered\nmodular pipeline library.\n\nSolution: a modular pipeline library\n\nThe modular pipeline library ( MPL) we\ncreated is a highly-flexible shared library for a Jenkins Pipeline that enables\neasy sharing of best practices across the entire company. It has a clear modular\nstructure, an advanced testing framework, multi-level nesting, a pipeline\nconfiguration system, improved error handling, and many other useful components.\n\nWe will take a look under the hood and explain how our solution works in several\nparts:\n\nExplore the technologies and tools we used to build the MPL\n\nReview the MPL, and illustrate why it’s effective\n\nFollow a step-by-step guide to operate the MPL on a sample pipeline\n\nDive into some of the more important components of the solution, such as the test framework and nested libraries\n\nSo now let’s jump right into an explanation of the crucial features we used to\nbuild our solution.\n\nBuilding the MPL with shared libraries and Jenkins pipelines\n\nJenkins, our main automation platform, recently received some updates to\nJenkins Pipeline. These updates allow us to\ncreate one Jenkinsfile that\ndescribes the entire pipeline, and the steps that need to be executed with a\nseries of self-explanatory scripts. This increases the visibility of CI/CD\nautomation processes for end users, and improves supportability by DevOps teams.\n\nHowever, there’s a large issue with Pipeline: it’s hard to support multiple\nJenkinsfiles (and therefore multiple projects) with unique pipelines. We need to\nstore the common logic somewhere, which is where\nJenkins Shared Libraries\ncome in. They are included in the Jenkinsfile, and allow the use of prepared\ninterfaces to simplify automation and store common pieces.\n\nWhile shared libraries allow you to store logic and manipulate Jenkins, they\ndon’t provide a good way to utilize all the common information. Therefore, the\nMPL optimizes the pipeline and shared libraries by allowing users to create\neasy-to-follow descriptions for processes, which are then stored for later use\nby other teams.\n\nThe MPL works to create collaborative DevOps processes across teams\n\nWith the MPL, we are now able to collaborate and share our DevOps practices\nacross teams, easily adopt existing pipelines for specific projects, and debug\nand test features before we actually integrate them into the library. Each team\ncan create a nested library, add a number of pipelines and modules inside, and\nuse it with pipeline automation to create great visibility of the processes for\nthe end user. The MPL can also work on any project to prepare a Jenkinsfile, and\nmanage it as flexibly as the project team wants.\n\nAt its core, the MPL provides a simple way to:\n\nSeparate pipelines and steps by introducing modules\n\nDescribe steps in the modules with an easy configuration interface\n\nTest the described modules and share the results with other pipelines and projects\n\nThere are a lot of other features in the MPL, but it’s essentially a platform to\nsolve general DevOps collaboration issues. To simplify development and manual\ntesting, the MPL provides modules overriding and an inheritance model, allowing\nusers to test specific fixes in the project without affecting anything else. In\nJenkins, a module is a file with scripted steps and logic to reach a simple goal\n(build an artifact, run tests, create an image, etc.). These modules are\ncombined in the pipeline stages, and are easily readable for anyone who knows\nthe Jenkins Pipeline syntax.\n\nThe MPL allows users to use the core features of the library (structure,\nmodules, pipelines) and create nested libraries for specific DevOps team needs.\nA DevOps team can prepare complete pipelines with any custom logic and use it\nfor their projects. They can also override and inherit the core MPL modules in a\nnumber of ways, or prepare custom modules which are easy to share with other\nteams. Check out the infographic below to see how modules fit in:\n\nYou can also specify certain pipeline required poststeps in a module. For\nexample, a dynamic deployment module creates the test environment, which needs\nto be destroyed when the pipeline ends. To take a closer look at the MPL calling\nprocess, check out the infographic below:\n\nThis infographic shows how calls are executed in the MPL. First, you need a job\non your Jenkins, which will call a Jenkinsfile (for example, when the source\ncode is changed), after which the Jenkinsfile will call a pipeline. The pipeline\ncould be described on the MPL side, in the pipeline script in the job, in the\nnested library, or in the project Jenkinsfile. Finally, the stages of the\npipeline will call the modules, and these modules will use features, which could\nbe groovy logic, pipeline steps, or steps in the shared libraries.\n\nNow that we’ve done an overview of the solution, let’s take a look at a simple\npipeline execution to see how the MPL works in action.\n\nAn example of a pipeline execution in the MPL\n\nFor example, let’s say you have a common Java Maven project. You are creating a\nJenkinsfile in the repo, and want to use the default pipeline prepared by your\nDevOps team. The MPL already has a simple pipeline: the core MPLPipeline. It’s\na really simple pipeline, but it’s a good start for anyone who wants to try the\nMPL. Let’s look at a simple Jenkinsfile:\n\n@Library('mpl') _\nMPLPipeline {}\n\nThis Jenkinsfile contains a single line to load the MPL, and another line to run\nthe pipeline. Most of the shared libraries implement an interface like this,\ncalling one step and providing some parameters. MPLPipeline is merely a custom\nPipeline step, as it lies in the vars directory, and its structure is very\nsimple, following these steps:\n\nInitialize the MPL\nThe MPL uses the MPLManager singleton object to control the pipeline\n\nMerge configuration with default and store it\nA default configuration needed to specify stages and predefine some useful configs\n\nDefine a declarative pipeline with 4 stages and poststeps:\n\nCheckout - Getting the project sources\n\nBuild - Compiling, validation of static, unit tests\n\nDeploy - Uploading artifacts to the dynamic environment and running the app\n\nTest - Checking integration with other components\n\nPoststeps - Cleaning dynamic environment, sending notifications, etc.\n\nRunning the defined pipeline\nThis is where the MPL starts to work its magic and actually runs\n\nStages of the main MPL usually have just one step, the MPLModule .\nThis step contains the core functionality of the MPL: executing the modules\nwhich contain the pipeline logic. You can find default modules in the MPL\nrepository, which are placed in resources/com/griddynamics/devops/mpl/modules.\nSome of the folders include: Checkout, Build, Deploy, and Test, and in each of\nthem we can find Groovy files with the actual logic for the stages. This\ninfographic is a good example of a simplified MPL repository\nstructure:\n\nWhen the Checkout stage starts, MPLModule loads the module by name (by default\na stage name), and runs the Checkout/Checkout.groovy\nlogic:\n\nif( CFG.'git.url' )\n  MPLModule('Git Checkout', CFG)\nelse\n  MPLModule('Default Checkout', CFG)\n\nIf the configuration contains the git.url option, it will load a Git Checkout\nmodule; otherwise, it will run the Default Checkout module. All the called\nmodules use the same configuration as the parent module, which is why CFG was\npassed to the MPLModule call. In this case, we have no specific configuration,\nso it will run the\nCheckout/DefaultCheckout.groovy\nlogic. The space in the name is a separator to place the module into a specific\nfolder.\n\nIn the Default Checkout module, there is just one line with checkout scm\nexecution, which clones the repository specified in the Jenkins job. That’s all\nthe Checkout stage does, as the MPL functionality is excessive for such a small\nstage, and we only need to talk about it here to show how the MPL works in\nmodules.\n\nThe same process applies to the Build stage, as the pipeline runs the\nMaven Build\nmodule:\n\nwithEnv([\"PATH+MAVEN=${tool(CFG.'maven.tool_version' ?: 'Maven 3')}/bin\"]) {\n  def settings = CFG.'maven.settings_path' ? \"-s '${CFG.'maven.settings_path'}'\" : ''\n  sh \"\"\"mvn -B ${settings} -DargLine='-Xmx1024m -XX:MaxPermSize=1024m' clean install\"\"\"\n}\n\nThis stage is a little bit more complicated, but the action is simple: we take\nthe tool with the default name Maven 3, and use it to run mvn clean install.\nThe modules are scripted pipelines, so you can do the same steps usually\navailable in the Jenkins Pipeline. The files don’t need any specific and\ncomplicated syntax, just a plain file with steps and CFG as a predefined\nvariable with a stage configuration. The MPL modules inherited the sandbox from\nthe parent, so your scripts will be safe and survive the Jenkins restart, just\nlike a plain Jenkins pipeline.\n\nIn the Deploy folder, we find the sample structure of the Openshift Deploy\nmodule. Its main purpose here is to show how to use poststep definitions in the\nmodules:\n\nMPLPostStep('always') {\n  echo \"OpenShift Deploy Decommission poststep\"\n}\necho 'Executing Openshift Deploy process'\n\nFirst, we define the always poststep. It is stored in the MPLManager, and is\ncalled when poststeps are executed. We can call MPLPostStep with always as\nmany times as we want: all the poststeps will be stored and executed in FILO\norder. Therefore, we can store poststep logic for actions that need to be done,\nand then undone, in the same module, such as the decommission of the dynamic\nenvironment. This ensures that the actions will be executed when the pipeline\nis complete.\n\nAfter the deploy stage, the pipeline executes the Test stage, but nothing too\ninteresting happens there. However, there is an aspect of testing which is very\nimportant, and that’s the testing framework of the MPL itself.\n\nTesting of the MPL\n\nThe testing framework of the MPL is based on the\nJenkinsPipelineUnit\nfrom LesFurets, with the one small difference being its ability to test the MPL\nmodules. Testing the whole pipeline doesn’t work, as pipelines can be really\ncomplicated, and writing tests for such monsters is a Sisyphean task. It is much\neasier to test a black box with a small amount of steps, ensuring that this\nparticular task is working correctly.\n\nIn the MPL, you can find Build module testing examples: all the tests are\nstored in the\ntest/groovy/com/griddynamics/devops/mpl/modules\ndirectory, and you can find the\nBuild/BuildTest.groovy\nfile with a number of test cases there. Tests are executed during the MPL build\nprocess, allowing users to see traces like this:\n\nLoading shared library mpl with version snapshot\n  MPLModule.call(Build, {maven={tool_version=Maven 2}})\n    Build.run()\n      Build.MPLModule(Maven Build, {maven.tool_version=Maven 2})\n        MavenBuild.run()\n          MavenBuild.tool(Maven 2)\n          MavenBuild.withEnv([PATH+MAVEN=Maven 2_HOME/bin], groovy.lang.Closure)\n            MavenBuild.sh(mvn -B  -DargLine='-Xmx1024m -XX:MaxPermSize=1024m' clean install)\n      Build.fileExists(openshift)\n\nThe test runs the MPLModule with custom configuration and mocked steps to\ncheck that, during execution, the tool was changed to Maven 2 according to the\nprovided configuration. We cover all test cases with such tests, ensuring that\nthe modules are working as expected, and that the pipeline will work properly.\nYou can test the whole pipeline if you want, but testing by modules is just an\nadditional way to simplify the testing process.\n\nNow that we’ve looked at how to test the MPL modules, it’s time to look at one\nof the key features of the MPL, which is nested libraries.\n\nThe benefits of nested libraries\n\nWhen working with a large company, supporting one big library makes no sense.\nEach department requires multiple configuration options and tuning for a\nsomewhat standard pipeline, which creates extra work. The MPL solves such\nproblems by introducing nested libraries. This infographic displays how a nested\nlibrary compares to just using the main library:\n\nA nested library is the same as a shared library that imports the MPL and uses\nits functionality, modules, and pipelines. Also, it allows the separation of\nsome team-related logic from the company common logic. Here is the structure of\nthe MPL with nested libraries:\n\nYou can import the MPL in the overridden pipeline, specify the path of some\nadditional modules, override module logic, and use Jenkins power moves: there\nare no limitations. When another team needs your unique module, you can just\ncreate a change request to the basic company MPL repo, and share your functional\nmodule with the others.\n\nWith nested libraries, it’s possible to debug and modify MPL-provided steps\n( MPLModule for example) and pipelines. This is because nested libraries can\noverride low-level functionalities of the MPL or the Jenkins Pipeline. There are\nno limitations to what you can or can’t change, as these overrides only affect\nyour own pipeline. This enables experimentation to be done, and then discussed\nwith other teams to see if it will work in other nested libraries as well.\n\nThere are also no limits to the number of nesting levels created, but we\nrecommend using just two (MPL and nested), because additional levels make\nconfiguration and testing of the nested libraries on lower levels very\ncomplicated.\n\nThe power of module overriding\n\nFurther into the nested libraries or project-side modules, it’s possible to\nstore a module with the same name as one in the upper-level library. This is a\ngood way to override the logic - you can just replace Build/Build.groovy with\nyour own - as the functional module will be executed instead of the upper-level\nmodule. For example, this infographic shows module overriding:\n\nEven better, one of the strengths of the MPL is that you still can use the\nupper-level module! The MPL has mechanisms to prevent loops, so the same module\ncan’t be executed in the same executing branch again. However, you can easily\ncall the original module a name from another module to use the upper-level\nlogic.\n\nThe Petclinic-Selenium example above uses the default MPLPipeline (you can\nfind it on the MPL Wiki-page), and\ncontains project-side modules in a.jenkins directory. These modules will be\ncalled before the library modules. For example, the Checkout module is not\nplaced on the project side, so it will be called from the MPL, but the Build\nmodule exists in a.jenkins directory on the project side, and it will be\ncalled:\n\nMPLPostStep('always') {\n  junit 'target/surefire-reports/*.xml'\n}\n\nMPLModule('Build', CFG)\n\nif( fileExists('Dockerfile') ) {\n  MPLModule('Docker Build', CFG)\n}\n\nAs you can see, the Build module from the project registers the poststep,\ncalls the original Build module from the MPL, and then calls the additional\nDocker Build module. The following stages of the pipeline are more\ncomplicated, but all module overriding essentially works like this. Some\nprojects can be tricky, and need some small tunings for the existing modules.\nHowever, you can easily implement those changes on the project level, and think\nabout how to move the functionality to the nested library or MPL later.\n\nConclusion: what the MPL brings to DevOps\n\nMany DevOps teams and companies work with bloated, restrictive, and buggy CI/CD\nautomation platforms. These increase the learning curve for users, cause teams\nto work slower, and raise production costs. DevOps teams frequently run into\nsimilar issues on different projects, but a lack of collaboration means that\nthey have to be individually fixed each time.\n\nHowever, with the MPL, DevOps teams have a shared, simple, and flexible CI/CD\nplatform to improve user support, collaboration, and overall project source code\nto the production process. By utilizing the MPL, your company can find an\nautomation consensus, reach cross-company collaboration goals, and reuse the\nbest practices from a large community, all with open source tools. If you’re\ninterested in building an MPL, please contact us to learn more!\n\nAdditional resources\n\nJenkins Pipeline Engine\n\nJenkins Shared Libraries\n\nMPL GitHub repository\n\nOverview & demo videos:\n\nIntroduction\n\nOverview\n\nDemo of the MPL Build\n\nDemo of the Nested Library\n\nDemo of the Petclinic Pipeline","title":"MPL - Modular Pipeline Library","tags":["jenkinsfile","pipeline","sharedlibrary"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/bf8e1/sparshev.png","srcSet":"/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/914ee/sparshev.png 32w,\n/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/1c9ce/sparshev.png 64w,\n/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/bf8e1/sparshev.png 128w,\n/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/acb7c/sparshev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/ef6ff/sparshev.webp 32w,\n/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/8257c/sparshev.webp 64w,\n/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/6766a/sparshev.webp 128w,\n/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/22bfc/sparshev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/47da77b67c60ffe2efee543d5593025e/sparshev.png"},"blog":"https://www.state-of-the-art.io/","github":"sparshev","html":"<div class=\"paragraph\">\n<p>Sergei is a DevOps engineer and using Jenkins as a main automation tool since 2011.\nWants to automate everything to make sure that there no more room for boring tasks.</p>\n</div>","id":"sparshev","irc":null,"linkedin":null,"name":"Sergei Parshev","slug":"/blog/authors/sparshev/","twitter":null}]}},{"node":{"date":"2019-01-09T00:00:00.000Z","id":"2bba9081-9075-5138-b4bd-6bcf248a769e","slug":"/blog/2019/01/09/jenkins-user-conference-china-shenzhen-update/","strippedHtml":"On November 3rd, 2018 the Jenkins User Conference China (JUCC) met Jenkins users in Shenzhen which is the most burgeoning city in China.\nIt was the first time to hold JUCC in Shenzhen.\nWe held JUCC along with DevOps International Summit, which is the biggest DevOps event in China.\nMore than 200 attendees gathered at JUCC Shenzhen to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.\n\nBelow, I am sharing pictures and some of the topics discussed at the event:\n\nYu Gu from Accenture presented New challenges for DevOps in Cloud Native.\n\nPeng Wang from Meituan which is the biggest group-buying website in China much like Groupon presented\nThe continuous delivery toolchains based on Jenkins for ten thousand times build per day.\n\nGuangming Zhou from Ctrip who is a Jenkins expert in China presented CD system in Ctrip.\n\nJiaqi Guo Jiaqi Guo from Kingston presented DevOps practices in large manufacturing industry.\n\nYaxing Li from Tencent presented How to support the CI CD requirements for thousands of products in Tencent based on Jenkins.\n\nMei Xiao from ZTE presented Fast integration practice for Android.\n\nJohn Willis presented Next Generation Infrastructure which included Kubernetes and  Istio practices.\n\nBC Shi from JD.com who is also a Jenkins Ambassador and the co-organizer of JUCC presented Pipeline 3.0  for DevOps toolchains.\nHe introduced the practices based on Jenkins and Jenkins X to build an end to end pipeline for DevOps from requirement to online service.\n\nWe’ve also released a DevOps tool map to recommend an excellent tool to the community.\n\nLastly, myself, Forest Jing co-organizer of JUCC and also am a Jenkins Ambassador interacted with the attendees.\n\nWe also organized the Jenkins workshop and Open space for the attendees.\nRuddy Li ,Yunhua Li , Yu Gu and Dingan Liang have worked together to run an open space to lead the attendees to discuss problems they met in DevOps and CD.\n\nHuaqiang Li who is a Certified Jenkins Engineer and CCJE has led the attendees to practice Jenkins functions for a whole afternoon.\n\nHere are more photos from our event, it was a fantastic JUCC in Shenzhen.\nThere were so much interest and appetite to learn about Jenkins and DevOps.\nWe are looking forward to doing this again next year.\n\nSlides from the event can be downloaded at PPT Download Address, password: sepe (the website is in Chinese).\n\nThank you to Alyssa and Maxwell’s help to organize this event.\nJenkins User Conference China continues and we hope to see many of you next year in China for our next JUCC.\nLet’s be Kung fu Jenkins!","title":"Jenkins User Conference China - Shenzhen Update","tags":["jenkins","jenkinsuserconference","chinese"],"authors":[{"avatar":null,"blog":null,"github":"ijyun","html":"","id":"ijyun","irc":null,"linkedin":null,"name":"Forest Jing（景韵）","slug":"/blog/authors/ijyun/","twitter":null}]}},{"node":{"date":"2019-01-21T00:00:00.000Z","id":"a737d1ad-0575-5b79-8f34-0dd038cbbc0f","slug":"/blog/2019/01/21/fosdem-2019/","strippedHtml":"FOSDEM 2019 (February 2 & 3) is a free event for software developers to meet, share ideas and collaborate.\nIt is an annual event that brings open source contributors from around the world for two days of presentations, discussions, and learning.\nWhile the Jenkins project won’t have a table at FOSDEM 2019, we will be well represented before, during, and after the event.\n\nFriday Day - Workshops and Jenkins Office Hours\n\nOn Friday, February 1, we’ll start off with a couple workshops:\n\nJenkins Pipeline Fundamentals\n(9:00 AM – 5:00 PM)\nLearn to create and run Declarative Pipelines!\nYou’ll learn the structure of Declarative Pipeline, how to control the flow of execution, how to save artifacts of the build, and get practice using some of the features that give fit and finish to your Pipeline.\nRegistration required - see the\nevent page\nfor details\n\nJenkins X, Kubernetes, and Friends\nTwo sessions: (9:00 AM – 12:00 PM) and (1:00pm to 4:00pm)\nBy combining the power of Jenkins, its community and the power of Kubernetes, the Jenkins X project provides a path to the future of continuous delivery for microservices and cloud-native applications.\nCome explore some of the features of Jenkins X through this hands-on workshop.\nRegistration required - see the\nevent page\nfor details\n\nAside from the workshops, from 9am to 5pm a bunch of people will be working out of Hilton Brussels Grand Place, hanging out as travelers come in.\nIt’ll be a casual, unstructured day. Sign up on this meetup page to be notified what meeting room we’re in.\n\nFriday Evening - Happy Hour\n\nAfter the office hours and workshops, we’ll have a happy hour Friday evening before FOSDEM at Cafe Le Roy d’Espagne.\nSee the meetup page for details.\n\nPresentations at FOSDEM\n\nHackers gotta eat: Building a Company Around an Open Source Project\nby Kohsuke Kawaguchi\n\nSetting up an HPC lab from scratch with Mr-Provisioner, Jenkins and Ansible\nby Renato Golin\n\nMulticloud CI/CD with OpenStack and Kubernetes by Maxime Guyot\n\nJenkins Hackfest after FOSDEM\n\nFinally, a Jenkins Hackfest will be held the day after FOSDEM 2019 on Monday (February 4).\nThose who would like to join us for the hackfest should register for the meetup.\n\nMeals, snacks, and beverages will be provided for the hackfest.  Come join us, and let’s write some code!\n\nQuestions? feel free to contact\nAlyssa Tong or\nBaptiste Mathus or join us on the\nadvocacy-and-outreach gitter channel.","title":"FOSDEM 2019!","tags":["community","events"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2019-02-01T00:00:00.000Z","id":"16256d3b-178f-556d-93f1-d366b7ff53cb","slug":"/blog/2019/02/01/windows-installers/","strippedHtml":"The Windows Installer for Jenkins has been around for many years as a way for users to install a Jenkins controller on Windows as a service.\nSince it’s initial development, it has not received a lot of updates or features, but that is about to change.\n\nFirst, let’s take a look at the current installer experience.\n\nStep 1\n\nThis is the default look and feel for a Windows Installer using the WiX Toolset, not very pretty and doesn’t give\nmuch branding information as to what the installer is for.\n\nStep 2\n\nAgain, not much branding information.\n\nStep 3\n\nThe installer in general does not give many options for installing Jenkins, other than selecting the installation location.\n\nIssues\n\nThe current installer has a few issues that the Platform SIG wanted to fix in a new install experience for users.\n\nThe installer only supports 32-bit installations.\n\nThe user could not select ports or user accounts to run the service on.\n\nThe installer bundled a 32-bit version of the Java runtime instead of using a pre-existing JRE\n\nThe installer did not support the experimental support in Jenkins for Java 11\n\nThe JENKINS_HOME directory was not placed in a good spot for modern Windows\n\nThere is no branding in the installer.\n\nRoad Forward\n\nWith the experimental Jenkins Windows Installer, most of these issues have been resolved!\n\nThe installer will only support 64-bit systems going forward. This is the vast majority of Windows systems these days,\nso this will help more users install Jenkins using the installer package.\n\nThe user is now able to enter user information for the service and select the port that Jenkins will use and verify that the port is available.\n\nThe installer no longer bundles a JRE, but will search for a compatible JRE on the system. If the user wants to use a different JRE, they can specify during install.\n\nThe installer has support for running with a Java 11 JRE, including the components listed on the Java 11 Preview Page.\n\nthe JENKINS_HOME directory is placed in the LocalAppData directory for the user that the service will run as, this aligns with modern Windows file system layouts.\n\nThe installer has been updated with branding to make it look nicer and provide a better user experience.\n\nScreenshots\n\nBelow are screenshots of the new installer sequence:\n\nStep 1\n\nThe Jenkins logo is now a prominent part of the UI for the installer.\n\nStep 2\n\nThe Jenkins logo and name are now in the header during all phases of the installer.\n\nStep 3\n\nThe installer now allows you to specify the username/password for the account to run as and checks that the account has LogonAsService rights.\n\nStep 4\n\nThe installer also allows you to specify the port that Jenkins should run on and will not continue until a valid port is entered and tested.\n\nStep 5\n\nInstead of bundling a JRE, the installer now searches for a compatible JRE on the system (JRE 8 is the current search). If you want to use a different\nJRE on the system than the one found by the installer, you can browse and specify it. Only JRE 8 and JRE 11 runtimes are supported. The installer will\nautomatically add the necessary arguments and additional jar files for running under Java 11 if the selected JRE is found to be version 11.\n\nStep 6\n\nAll of the items that users can enter in the installer should be overridable on the command line for automated deployment as well. The full list of properties that\ncan be overridden will be available soon.\n\nNext Steps\n\nThe new installer is under review by the members of the Platform SIG, but we need people to test the installer and give feedback. If you are interested in testing\nthe new installer, please join the Platform SIG gitter room for more information.\n\nThere are still some things that are being researched and implemented in the new installer (e.g., keeping port and other selections when doing an upgrade), but it is\ngetting close to release.\n\nIn addition to updates to the MSI based Windows installer, the Platform SIG is working on taking over the Chocolatey Jenkins package and\nreleasing a version for each update.","title":"Windows Installer Updates","tags":["windows","platform-sig","installers"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/slide_o_mix.jpg"},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix/","twitter":"alexcearl"}]}},{"node":{"date":"2019-02-05T00:00:00.000Z","id":"9488675b-0d5a-5055-8c7d-1ab61e7ad642","slug":"/blog/2019/02/05/jenkins-new-year-in-china/","strippedHtml":"At the time of the Spring Festival. I want to make a summary of some activities in the last year.\nYou might already notice that more and more Chinese contributors emerge in the Jenkins community.\nWe have a GSoC champion who is Shenyu Zheng.\nHe is a great example for other students. With the effort of three skilled engineers,\nmany Jenkins users could learn the edge technologies and useful use cases.\nThey co-organized several Jenkins Meetups in a couple of cities in China.\n\nThere are two workshops about Jenkins and Jenkins X in the DevOps International Summit. James Rawlings gave us a wonderful view of the Jenkins X. Many people start to know this project. The Chinese website of jx would be helpful to those people.\n\nOn November 3rd, 2018 the Jenkins User Conference China(JUCC) was hosted in Shenzhen. More than 200 attendees gathered at JUCC to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.\n\nThere was a Jenkins workshop to teach users to develop a plugin in October. It was during the Hacktoberfest 2018. So some people got a beautiful T-shirt at this meetup. We’ll keep this event in 2019. I hope more users and developers could join us.\n\nThank you all folks. And other friendly contributors.\n\nChinese is our main communication language. A large number of the Jenkins users are not a proficient English speaker.\nSo letting most of Chinese Jenkins users could easily use Jenkins as their CI/CD platform is the final mission of Chinese Localization SIG.\nYou can find three participants on the page. But that’s not the full list.\nMore exciting thing is that Alauda giving a big support which as a startup company.\n\nWeChat is the greatest social media channel in China. WeChat has one billion users.\nAlmost everyone in China has a WeChat account. It must be a perfect place to publish articles and events.\nThere are over 1k people subscribed the Jenkins official WeChat Subscription Account in the last three months.\n\nIn the new year, I’m looking forward to growing up with you all!","title":"Jenkins new year in China","tags":["core","community","chinese"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#989898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg","srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/77b35/linuxsuren.jpg 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/d4a57/linuxsuren.jpg 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/68974/linuxsuren.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/ef6ff/linuxsuren.webp 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/8257c/linuxsuren.webp 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/6766a/linuxsuren.webp 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/22bfc/linuxsuren.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/linuxsuren.jpg"},"blog":null,"github":"LinuxSuRen","html":"<div class=\"paragraph\">\n<p>Rick is a big fan of Jenkins, also as a contributor leading the Jenkins China community.</p>\n</div>","id":"linuxsuren","irc":null,"linkedin":"linuxsuren","name":"赵晓杰(Rick)","slug":"/blog/authors/linuxsuren/","twitter":"LinuxSuRen"}]}},{"node":{"date":"2019-02-06T00:00:00.000Z","id":"ed5dfb33-f5e6-565b-a671-f4ae47d2c691","slug":"/blog/2019/02/06/ssh-steps-for-jenkins-pipeline/","strippedHtml":"Pipeline-as-code or defining the deployment pipeline through code rather than manual job creation through UI, provides tremendous benefits for teams automating builds and deployment infrastructure across their environments.\n\nSource of image: https://jenkins.io/doc/book/pipeline/\n\nJenkins Pipelines\n\nJenkins is a well-known open source continuous integration and continuous deployment automation tool. With the latest 2.0 release, Jenkins introduced the Pipeline plugin that implements Pipeline-as-code. This plugin lets you define delivery pipelines using concise scripts which deal elegantly with jobs involving persistence and asynchrony.\n\nThe Pipeline-as-code’s script is also known as a Jenkinsfile.\n\nJenkinsfiles uses a domain specific language syntax based on the Groovy programming language. They are persistent files which can be checked in and version-controlled along with the rest of their project source code. This file can contain the complete set of encoded steps (steps, nodes, and stages) necessary to define the entire application life-cycle, becoming the intersecting point between development and operations.\n\nMissing piece of the puzzle\n\nOne of the most common steps defined in a basic pipeline job is the Deploy step. The deployment stage encompasses everything from publishing build artifacts to pushing code into pre-production and production environments. This deployment stage usually involves both development and operations teams logging onto various remote nodes to run commands and/or scripts to deploy code and configuration. While there are a couple of existing ssh plugins for Jenkins, they currently don’t support the functionality such as logging into nodes for pipelines. Thus, there was a need for a plugin that supports these steps.\n\nIntroducing SSH Steps\n\nRecently, our team at Cerner started working on a project to automate deployments through Jenkins pipelines to help facilitate running commands on over one thousand nodes. We looked at several options including existing plugins, internal shared Jenkins libraries, and others. In the end, we felt it was best to create and open source a plugin to fill this gap so that it can be used across Cerner and beyond.\n\nThe initial version of this new plugin SSH Steps supports the following:\n\nsshCommand : Executes the given command on a remote node.\n\nsshScript : Executes the given shell script on a remote node.\n\nsshGet : Gets a file/directory from the remote node to current workspace.\n\nsshPut : Puts a file/directory from the current workspace to remote node.\n\nsshRemove : Removes a file/directory from the remote node.\n\nUsage\n\nBelow is a simple demonstration on how to use above steps. More documentation can be found on GitHub.\n\ndef remote = [:]\nremote.name = \"node\"\nremote.host = \"node.abc.com\"\nremote.allowAnyHosts = true\n\nnode {\n    withCredentials([usernamePassword(credentialsId: 'sshUserAcct', passwordVariable: 'password', usernameVariable: 'userName')]) {\n        remote.user = userName\n        remote.password = password\n\n        stage(\"SSH Steps Rocks!\") {\n            writeFile file: 'test.sh', text: 'ls'\n            sshCommand remote: remote, command: 'for i in {1..5}; do echo -n \\\"Loop \\$i \\\"; date ; sleep 1; done'\n            sshScript remote: remote, script: 'test.sh'\n            sshPut remote: remote, from: 'test.sh', into: '.'\n            sshGet remote: remote, from: 'test.sh', into: 'test_new.sh', override: true\n            sshRemove remote: remote, path: 'test.sh'\n        }\n    }\n}\n\nConfiguring via YAML\n\nAt Cerner, we always strive to have simple configuration files for CI/CD pipelines whenever possible. With that in mind, my team built a wrapper on top of these steps from this plugin. After some design and analysis, we came up with the following YAML structure to run commands across various remote groups:\n\nconfig:\n  credentials_id: sshUserAcct\n\nremote_groups:\n  r_group_1:\n    - name: node01\n      host: node01.abc.net\n    - name: node02\n      host: node02.abc.net\n  r_group_2:\n    - name: node03\n      host: node03.abc.net\n\ncommand_groups:\n  c_group_1:\n    - commands:\n        - 'ls -lrt'\n        - 'whoami'\n    - scripts:\n        - 'test.sh'\n  c_group_2:\n    - gets:\n        - from: 'test.sh'\n          to: 'test_new.sh'\n    - puts:\n        - from: 'test.sh'\n          to: '.'\n    - removes:\n        - 'test.sh'\n\nsteps:\n  deploy:\n    - remote_groups:\n        - r_group_1\n      command_groups:\n        - c_group_1\n    - remote_groups:\n        - r_group_2\n      command_groups:\n        - c_group_2\n\nThe above example runs commands from c_group_1 on remote nodes within r_group_1 in parallel before it moves on to the next group using sshUserAcct (from the Jenkins Credentials store) to logon to nodes.\n\nShared Pipeline Library\n\nWe have created a shared pipeline library that contains a sshDeploy step to support the above mentioned YAML syntax. Below is the code snippet for the sshDeploy step from the library. The full version can be found here on Github.\n\n#!/usr/bin/groovy\ndef call(String yamlName) {\n    def yaml = readYaml file: yamlName\n    withCredentials([usernamePassword(credentialsId: yaml.config.credentials_id, passwordVariable: 'password', usernameVariable: 'userName')]) {\n        yaml.steps.each { stageName, step ->\n            step.each {\n                def remoteGroups = [:]\n                def allRemotes = []\n                it.remote_groups.each {\n                    remoteGroups[it] = yaml.remotes.\"$it\"\n                }\n\n                def commandGroups = [:]\n                it.command_groups.each {\n                    commandGroups[it] = yaml.commands.\"$it\"\n                }\n                def isSudo = false\n                remoteGroups.each { remoteGroupName, remotes ->\n                    allRemotes += remotes.collect { remote ->\n                        if(!remote.name)\n                            remote.name = remote.host\n                        remote.user = userName\n                        remote.password = password\n                        remote.allowAnyHosts = true\n                        remote.groupName = remoteGroupName\n                        remote\n                    }\n                }\n                if(allRemotes) {\n                    if(allRemotes.size() > 1) {\n                        def stepsForParallel = allRemotes.collectEntries { remote ->\n                            [\"${remote.groupName}-${remote.name}\" : transformIntoStep(stageName, remote.groupName, remote, commandGroups)]\n                        }\n                        stage(stageName) {\n                            parallel stepsForParallel\n                        }\n                    } else {\n                        def remote = allRemotes.first()\n                        stage(stageName + \"\\n\" + remote.groupName + \"-\" + remote.name) {\n                            transformIntoStep(stageName, remote.groupName, remote, commandGroups).call()\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nBy using the step (as described in the snippet above) from this shared pipeline library, a Jenkinsfile can be reduced to:\n\n@Library('ssh_deploy') _\n\nnode {\n  checkout scm\n  sshDeploy('dev/deploy.yml');\n}\n\nAn example execution of the above pipeline code in Blue Ocean looks like this:\n\nWrapping up\n\nSteps from the SSH Steps Plugin are deliberately generic enough that they can be used for various other use-cases as well, not just for deploying code. Using SSH Steps has significantly reduced the time we spend on deployments and has given us the possibility of easily scaling our deployment workflows to various environments.\n\nHelp us make this plugin better by contributing. Whether it is adding or suggesting a new feature, bug fixes, or simply improving documentation, contributions are always welcome.","title":"SSH Steps for Jenkins Pipeline","tags":["pipeline","plugins","ssh","steps"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/19e71/nrayapati.jpg","srcSet":"/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/77b35/nrayapati.jpg 32w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/d4a57/nrayapati.jpg 64w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/19e71/nrayapati.jpg 128w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/68974/nrayapati.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/ef6ff/nrayapati.webp 32w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/8257c/nrayapati.webp 64w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/6766a/nrayapati.webp 128w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/22bfc/nrayapati.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/nrayapati.jpeg"},"blog":null,"github":"nrayapati","html":"<div class=\"paragraph\">\n<p>Software Architect at <a href=\"https://www.cerner.com/\">Cerner Corporation</a>. Passionate about Agile, DevOps &amp; Continuous Delivery, and all things Automation.\nOSS Contributor, he is maintaining couple of Jenkins plugins since past several years. <a href=\"https://plugins.jenkins.io/ssh-steps\">SSH Steps</a> - <a href=\"https://plugins.jenkins.io/jira-steps\">JIRA Steps</a> - <a href=\"https://plugins.jenkins.io/hubot-steps\">Hubot Steps</a></p>\n</div>","id":"nrayapati","irc":null,"linkedin":null,"name":"Naresh Rayapati","slug":"/blog/authors/nrayapati/","twitter":"nrayapati"}]}},{"node":{"date":"2019-02-17T00:00:00.000Z","id":"a79ea93c-0082-5a4a-a338-9fde01ae88b1","slug":"/blog/2019/02/17/remoting-cli-removed/","strippedHtml":"Close to two years ago, we announced in\nNew, safer CLI in 2.54\nthat the traditional “Remoting” operation mode of the Jenkins command-line interface\nwas being deprecated for a variety of reasons, especially its very poor security record.\nToday in Jenkins 2.165 support for this mode is finally being removed altogether,\nin both the server and bundled jenkins-cli.jar client.\nThe projected June 5th LTS release will reflect this removal,\nat which point the Jenkins project will no longer maintain this feature\nnor investigate security vulnerabilities in it.\n\nThis change makes the code in Jenkins core related to the CLI considerably simpler and more maintainable.\n(There are still two transports —HTTP(S) and SSH—but they have similar capabilities and behavior.)\nIt also reduces the “attack surface” the Jenkins security team must consider.\nAmong other issues, a compromised server could freely attack a developer’s laptop if -remoting were used.\n\nThe\n2.46.x upgrade guide\nalready urged administrators to disable Remoting mode on the server.\nThose Jenkins users who rely on the CLI for remote scripting (as opposed to the HTTP(S) REST APIs)\nwould be affected only if they were still using the -remoting CLI flag,\nsince the default has long been to use HTTP(S) mode.\n\nMost CLI features have long worked fine without -remoting,\nin some cases using slightly different syntax such as requiring shell redirects to access local files.\nAs part of this change, some CLI commands, options, and option types in Jenkins core have been removed, other than -remoting itself:\n\nThe login and logout commands, and the --username and --password options.\n\nThe -p option to select a proxy. (The CLI in default -http mode accesses Jenkins no differently than any other HTTP client.)\n\nThe install-tool, set-build-parameter, and set-build-result commands relied on a fundamentally insecure idiom that is no longer supportable.\n\nCommand options or arguments which took either a local file or = for standard input/output (e.g., install-plugin, build -p, support) now only accept the latter.\n\nSome features of relatively little-used plugins will no longer work, such as:\n\nDistFork\n\nRemote Terminal Access\n\nBuild Env Propagator","title":"Remoting-based CLI removed from Jenkins","tags":["core","security","remoting"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick/","twitter":"tyvole"}]}},{"node":{"date":"2019-02-21T00:00:00.000Z","id":"ee6f71b5-7195-56bb-8a9e-87e021747a53","slug":"/blog/2019/02/21/credentials-masking/","strippedHtml":"In the Jenkins project, we ask that people report security issues to our private issue tracker.\nThis allows us to review issues and prepare fixes in private, often resulting in better, safer security fixes.\n\nAs a side effect of that, we also learn about common misconceptions and usability problems related to security in Jenkins.\nThis post is intended to address one of those:\nThe goal and limitations of credentials masking.\n\nThe Problem\n\nOne very common example of that is the role of credentials masking in Jenkins, typically involving a pipeline snippet that looks like this:\n\n// Scripted //\nwithCredentials([usernamePassword(credentialsId: 'topSecretCredentials', passwordVariable: 'PWD', usernameVariable: 'USR')])\n  sh './deploy.sh' // requires PWD and USR to be set\n}\n// Declarative //\n\nCredentials that are in scope are made available to the pipeline without limitation.\nTo prevent accidental exposure in the build log, credentials are masked from regular output, so an invocation of env (Linux) or set (Windows), or programs printing their environment or parameters would not reveal them in the build log to users who would not otherwise have access to the credentials.\n\nThe misconception here is that Jenkins will prevent other, perhaps deliberate ways to reveal the password.\nSome examples:\n\n// Scripted //\nwithCredentials([usernamePassword(credentialsId: 'topSecretCredentials', passwordVariable: 'PWD', usernameVariable: 'USR')])\n  sh 'echo $PWD | base64' // will print e.g. dDBwczNjcjN0Cg= which is trivially converted back to the top secret password\n}\n// Declarative //\n\n// Scripted //\nwithCredentials([usernamePassword(credentialsId: 'topSecretCredentials', passwordVariable: 'PWD', usernameVariable: 'USR')])\n  sh 'echo $PWD > myfile'\n  archiveArtifacts 'myfile' // then browse archived artifacts from the Jenkins UI\n}\n// Declarative //\n\nBoth of these snippets circumvent credentials masking in the build log, and show that people with control over the build script can use credentials in ways not necessarily intended or approved by admins.\n\nObviously these are just the most straightforward examples illustrating the problem.\nOthers could involve the proc file system, sending it to an HTTP server in response to a 401 authentication challenge, embedding it in the (otherwise legitimate) build result, etc.\n\nIt would be great if Jenkins could allow the flexible use of credentials with no risk of exposing them through straightforward build script modifications, but realistically, it is impossible for Jenkins to police use of the credential by a build script without the support of a very specific environment setup (e.g. restrictive network configuration).\n\nIt should also be noted that credentials aren’t just at risk from users able to control the pipeline, typically by editing the Jenkinsfile.\nActual build scripts invoked by pipelines, either shell scripts as in the example above, or more standard build tools such as Maven (controlled by pom.xml) are just as much of a risk if they are run inside a withCredentials block, or executing on the same agent as another block that passed such credentials.\n\nDisclosure of secrets can also happen inadvertently:\nJenkins will prevent exact matches of the password or other secret to appear in the log file.\nConsider that the secret may contain shell metacharacters that bash +x would escape by adding a \\ before those characters.\nThe sequence of characters to be printed is no longer identical to the secret, so would not be masked.\n\nThe Solution\n\nCredentials can be defined in different scopes:\nCredentials defined on the root Jenkins store (the default) will be available to all jobs on the instance.\nThe only exception are credentials with System scope, intended for the global configuration only, for example, to connect to agents.\nCredentials defined in a folder are only available within that folder (transitively, i.e. also in folders inside this folder).\n\nThis allows defining sensitive credentials, such as deployment credentials, on specific folders whose contents only users trusted with those credentials are allowed to configure:\nDirectly in Jenkins using Matrix Authorization Plugin and by limiting write access to repositories defining pipelines as code.\n\nPipelines inside this folder can use the (e.g. deployment) credentials without limitation, while they’re inaccessible to pipelines outside the folder.\nThose would need to use the build step or similar approaches to invoke the pipelines inside the folder to deploy their output.\n\nCaveats\n\nWhile the previous section outlines a solution to the problem of restricting access to credentials, care needs to be taken so that credentials are not captured anyway.\nFor example, a deployment pipeline that allows its users to define where to deploy to as a build parameter might still be used to send credentials to a maliciously set up host to capture them.\nA blog post explaining the design of some Jenkins project infrastructure discusses some of these concerns around trust.\n\nIt should also be noted that credential domains are a UI hint only — defining a credential to only be valid for github.com does not actually prevent its use elsewhere.","title":"Limitations of Credentials Masking","tags":["security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2019-02-26T00:00:00.000Z","id":"c5e445a3-8d1e-5054-be35-b27be24516a0","slug":"/blog/2019/02/26/jenkins-alexa-voice-controlled-cicd/","strippedHtml":"Integrating Jenkins with Alexa to launch your pipelines and obtain results\nabout your deployments through voice is easier than you think.  Learn how Alexa\nChampion, Kesha Williams', latest side project teaches Alexa to deploy code to\nthe cloud.\n\nAlexa (named after the ancient library of Alexandria) is Amazon’s Artificial\nIntelligence (AI) powered intelligent voice assistant that runs in the cloud.\nSoftware engineers make Alexa smarter by creating apps, called skills.  From\nthe time that I developed my first Alexa skill, I dreamed of deploying my Java\nprojects to the cloud via voice.  For me, telling Alexa to deploy my code is\nthe ultimate level of cool!  I recently made my dream a reality when I devoted\na weekend to developing my newest Alexa skill, DevOps Pal.  In this blog, I\nwill show you how I developed DevOps Pal and hopefully inspire you to build\nyour own version.\n\nWhy Choose Voice to Deploy Code\n\nVoice-first technology is revolutionizing how we interact with technology because the interaction is simple, frictionless, and time-saving.\nFor me, voice is an easier way to control Jenkins and retrieve results about my deployments without having to touch a keyboard.\nIn this use case, voice is another access point for data and is a way to further automate the process of building, testing, and deploying a Java project to the cloud, improving efficiency.\n\nContinuous Integration and Continuous Delivery (CI/CD)\n\nIf you’re working with DevOps, you understand the need for Continuous Integration and Continuous Delivery (CI/CD) to automate the software delivery pipeline in a reproducible way.\nCI/CD is the practice of continuously building, testing, and deploying code once it’s committed to version control.\nDevOps and CI/CD provides software engineering teams with confidence in the code being pushed to production and shorter development lifecycles, which in the end produces happier users, clients, and customers.\n\nDevOps Pal Overview\n\nDevOps Pal is a private Alexa for Business skill that is used to kick off a Jenkins pipeline job.\nAlexa for Business was the perfect way for me to distribute DevOps Pal since I have the ability to enable the skill on an organization-by-organization basis, which gives me complete control over who has access.\nOnce DevOps Pal invokes the job, the pipeline status displays in real-time via the Blue Ocean Pipeline Run Details View Page.\n\nDevOps Pal Architecture\n\nI used several components and tools to create DevOps Pal. Let’s review the architecture in detail.\n\nThe flow begins by saying, \"Alexa, open DevOps Pal and deploy my code\", to the Echo device.\n\nThe Echo device listens for the wake word (e.g. Alexa, Echo, Computer, or Amazon), which employs deep learning technology running on the device to recognize the wake word the user has chosen.\nOnce the wake word is detected, what I say is recorded and sent to the Alexa Voice Service (AVS), which uses speech to text and natural language understanding (NLU) to identify my intent.\nMy intent is sent to DevOps Pal; the skill acts accordingly by kicking off the Jenkins job and sending a response back using text-to-speech synthesis (TTS), which makes the response natural sounding.\n\nLet’s explore each component in more detail:\n\nAlexa Voice Service (AVS) - I often refer to the Alexa Voice Service as the \"Alexa brain that runs in the cloud\". The AVS is a suite of services built around a voice-controlled AI assistant. The AVS is flexible enough to allow third parties to add intelligent voice control to any connected product that has a microphone and speaker, so Alexa is not limited to just Echo devices.\n\nAlexa Skills Kit (ASK) - ASK is the \"SDK\" (Software Development Kit) that allows developers to build custom skills for Alexa.\n\nAlexa Developer Portal - An Alexa skill includes a voice user interface, or VUI, to understand user intents, and a back-end cloud service to process intents by telling Alexa how to respond. The VUI and the integration with the back-end service is setup and configured through the Alexa Developer Portal.\n\nAWS Lambda - A chunk of code that runs in the cloud. Developers can run their code without having to provision or manage servers. Applications created with AWS Lambda are considered to be serverless. Lambda supports several popular languages like Python, Java, Node.js, Go, C#, etc.\n\nGitHub - A version control system for the Java project source code.\n\nJenkins on EC2 - I use Jenkins to build, test, and deploy my Java Application Programming Interface (API). Elastic Cloud Computer (EC2) is the virtual server where Jenkins is installed. Jenkins works alongside several other tools:\n\nMaven - A build automation tool for Java projects.\n\nJunit - A testing framework for Java projects.\n\nAWS Command Line Interface (CLI) - This is a command line tool that allows developers to access their Amazon Web Services (AWS) account.\n\nBlue Ocean - This is a plugin for Jenkins that provides an easy to use interface to create and monitor Jenkins pipelines.\n\nAWS Elastic Beanstalk - This is an orchestration service that allows developers to deploy and manage web applications in the AWS cloud.\n\nPostman - This is an HTTP client for testing APIs and web services.\n\nVoice Interaction Model\n\nThe Voice User Interface (VUI) describes the overall conversational flow and is setup via the Alexa Developer Console.\n\nA few important components of the VUI are the Invocation Name (how users launch your skill) and the Intents (phrases a user says to \"talk to\" or interact with your skill).\n\nSpecifically, the \"DeployCodeIntent\" is invoked when a user says one of several phrases (e.g. run jenkins pipeline, run jenkins job, deploy the code, deploy code, or deploy ) or a variation of the phrase like, \"deploy my code\".\n\nThe endpoint is the destination where the skill requests are sent for fulfillment.\nIn this case, the backend logic is an AWS Lambda authored in Python.\nThe business logic in the Python Lambda uses the Jenkins remote access API to trigger the job remotely.\nThe format of the URL to trigger the job is jenkins_url/job/job_name/build.\nThe API call uses BASIC authentication and a Jenkins Crumb passed in the HTTP request header for CSRF protection.\nAlternatively, since Jenkins 2.96, you can use an API token instead of a Jenkins Crumb and password to authenticate your API call.\n\nJenkins Job\n\nThe Jenkins job, 'alexa-cicd', is the job invoked from DevOps Pal.\nAlthough, the Jenkins Classic User Interface (UI) is functional, I prefer the Blue Ocean interface because it rethinks the user experience of Jenkins by making it visually intuitive.\nBlue Ocean is easily enabled via a plugin and leaves the option to continue using the Jenkins Classic UI should you so choose.\n\nAfter Alexa kicks off the 'alexa-cicd' job, I navigate to the Pipeline Run Details View Page, which allows me to watch the job status in realtime.\nThis job has four stages: Initialize, Build, Test, and Deploy.\nThe final stage, Deploy, uses the AWS Command Line Interface (CLI) on the Jenkins server to copy the artifact to Amazon Simple Storage Service (S3) and create a new Elastic Beanstalk application version based on the artifact located on S3.\n\nCool Features to Add\n\nThe ability to deploy code with voice is just the beginning.\nThere are several cool features that can easily be added:\n\nDevOps Pal can be updated to prompt the user for the specific Jenkins pipeline job name. This adds a level of flexibility that will really empower DevOps teams.\n\nAlexa Notifications can be integrated with DevOps Pal to send a notification to the Echo device when the Jenkins job is finished or when it fails. If the job fails, more information about where the job failed and exactly why will be provided. This will prove useful for long running jobs or for getting timely updates regarding the job status.\n\nDevOps Pal can be updated to answer direct questions about the real-time status of a specific job.\n\nWant to Learn More\n\nI hope you’ve enjoyed learning more about the architecture of DevOps Pal and deploying code to the cloud using Jenkins and voice.\nFor more detailed steps, I’ve collaborated with Cloud Academy to author a course, AWS Alexa for CI/CD on the subject.","title":"Jenkins + Alexa: Say Hello to Voice Controlled CI/CD","tags":["jenkins","alexa"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/f84e8/keshawilliams.jpg","srcSet":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/5c08a/keshawilliams.jpg 32w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/4a6e8/keshawilliams.jpg 64w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/f84e8/keshawilliams.jpg 128w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/d158b/keshawilliams.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/ad81f/keshawilliams.webp 32w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/10333/keshawilliams.webp 64w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/ba2bd/keshawilliams.webp 128w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/b679b/keshawilliams.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":179}},"publicURL":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/keshawilliams.jpg"},"blog":"http://www.kesha.tech/","github":"ProfessorKesha","html":"<div class=\"paragraph\">\n<p>Kesha Williams is an award-winning software engineering manager at Chick-fil-A with over 20 years' experience.\nShe has trained and mentored thousands of software developers in the US, Europe, and Asia while teaching at the university level.\nShe routinely leads innovation teams in proving out emerging technologies and shares her learnings at conferences across the globe.\nShe has published several Alexa skills, was featured during Amazon&#8217;s \"Alexa Women of Voice\" campaign, and recently named an Alexa Champion.\nIn her spare time, she leads the Georgia chapter of Technovation and mentors women in tech.</p>\n</div>","id":"keshawilliams","irc":null,"linkedin":null,"name":"Kesha Williams","slug":"/blog/authors/keshawilliams/","twitter":"keshawillz"}]}},{"node":{"date":"2019-02-28T00:00:00.000Z","id":"9905a0f3-35a6-5676-b4b5-b69b913d1b36","slug":"/blog/2019/02/28/serverless-jenkins/","strippedHtml":"My job is to work on a Jenkins pipeline specific to SAP S/4HANA extensions running on SAP Cloud Platform.\nSee the original blog post here.\n\nJenkins is a powerful tool for automation, and we heavily rely on the codified pipeline syntax introduced in Jenkins 2.\n\nWith regards to operations, we minimized the need for care with the cx-server life-cycle management greatly.\nStill, you need to run that Jenkins server.\nThis means you’ll need to update the server and plugins (simplified by our life-cycle management), and scale as the number of builds grows.\nUser administration and backups are also required in a productive setup.\n\nIs this really required, or is there an alternative approach?\n\nIn this blog post, I’ll introduce a prototype I did to get rid of that long running pet Jenkins instance.\nRather, we’ll have cattle Jenkins instances, created and destroyed on demand.\n“Serverless” Jenkins in the sense that we don’t have to provision the server for Jenkins to run.\n\nThe setup described in this post is highly experimental. I encourage you to try this out in a demo project, but be very cautious until further notice to use this on productive code. In this proof of concept, I’ll use a public GitHub repository and the free open-source offering by TravisCI. This setup is not suitable for commercial software.\n\nThe pets vs cattle metaphor describes how approaches in managing servers differ.\nWhile you care for pets and treat them when they are unwell, cattle can be easily replaced.\nYour traditional Jenkins server is a pet because it is often configured manually, and replacing it is a major effort.\nFor more background on this metaphor, click here.\n\nBefore we’re getting into the technical details, let’s discuss why we would want to try this out in the first place.\nRunning Jenkins on arbitrary CI/CD services, such as TravisCI seems very odd on first sight.\nOn such services you’ll usually invoke your build tools like Maven or npm in a small script, and that will do your build.\nBut in the enterprise world, both inside SAP and in the community, Jenkins has a huge market share.\nThere are many shared libraries for Jenkins, providing pre-made build steps which would be expensive to re-implement for other platforms.\nAdditionally, SAP S/4HANA Cloud SDK Pipeline is a ready to use pipeline based on Jenkins where you as the developer of an SAP S/4HANA extension application do not need to write and maintain the pipeline yourself.\nThis means reduced costs and effort for you, while the quality of your application improves, for example due to the many cloud qualities which are checked out of the box.\n\nLet me show you an experiment to see if we can get the best of both worlds.\nThe goal is to get all the quality checks and the continuous delivery that the SAP S/4HANA Cloud SDK Pipeline provides us, without the need for a pet Jenkins server.\n\nHow do we do that? The Jenkins project has a project called Jenkinsfile runner.\nIt is a command line tool that basically boots up a stripped-down Jenkins instance, creates and runs a single job, and throws away that instance once the job is done. As you might guess, there is some overhead in that process.\nThis will add about 20 seconds to each build, which I found to be surprisingly fast, considering the usual startup time of a Jenkins server.\nFor convenient consumption, we have packaged Jenkinsfile runner as a Docker image which includes the Jenkins plugins that are required for SAP S/4HANA Cloud SDK Pipeline.\n\nWe also utilize the quite new Configuration as Code plugin for Jenkins, which allows to codify the Jenkins configuration as YAML files.\nAs you will see in a minute, both Jenkinsfile runner and Configuration as Code are a perfect match.\n\nIf you want to follow along, feel free to use our provided Address Manager example application.\nYou may fork the repository, or create your own repository and activate it on TravisCI.\n\nBased on the existing Address Manager, let’s add a small.travis.yml file to instruct the build:\n\nlanguage: minimal\nservices:\n- docker\nscript: docker run -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:/workspace -v /tmp -e CASC_JENKINS_CONFIG=/workspace/jenkins.yml -e CF_PW -e ERP_PW -e BRANCH_NAME=$TRAVIS_BRANCH ppiper/jenkinsfile-runner\n\nThe script line has quite a few things going on, let’s see what is there.\n\nWe run a Docker container based on the ppiper/jenkinsfile-runner image.\nWe need to mount the Docker socket, so that our container can spawn sibling containers for tooling such as Maven or the CloudFoundry CLI.\nWe also need to mount the current directory (root of our project) to /workspace, and tell the Jenkins Configuration as Code Plugin where to find the configuration file.\nWe’ll come to that file in a minute. Also be sure to pass your secret variables here.\nTravis will mask them, so they are not in plain text in your build log.\nTake note to change the names of the variables according to your requirements.\nYou might wonder that we need a BRANCH_NAME environment variable.\nThis is required for the Pipeline to check if you’re working on the “productive branch”, where a productive deployment to SAP Cloud Platform is supposed to happen.\nIf you omit passing this variable, the pipeline will still run but never in the productive mode, and hence not deploy to SAP Cloud Platform.\n\nYou might need some secrets in the build, for example in integration tests or for deployment to SAP Cloud Platform.\nYou can make use of the travis command line tool to encrypt them on your local machine as documented here.\nTake care that this might add your secret in plain text to the shell history on your machine.\n\ntravis encrypt CF_PW=supersecret --add\ntravis encrypt ERP_PW=alsosupersecret --add\n\nThis command will add a line to your.travis.yml file with the encrypted secret value.\nBe sure to commit this change.\nAlso take note of the name of your variable, which must match the environment parameter, and your Jenkins configuration.\nYou should be aware of this TravisCI document on secrets.\n\nWe’ll also need to add a jenkins.yml file to our project.\nHere we need to configure two shared libraries which are required for the SAP S/4HANA Cloud SDK Pipeline, and the credentials that are required for our pipeline.\nBe sure not to put your secrets in plain text in here, but use the variables you used before via the travis cli tool.\nTravisCI will decrypt the password on the fly for you.\n\njenkins:\n  numExecutors: 10\nunclassified:\n  globallibraries:\n    libraries:\n    - defaultVersion: \"master\"\n      name: \"s4sdk-pipeline-library\"\n      retriever:\n        modernSCM:\n          scm:\n            git:\n              remote: \"https://github.com/SAP/cloud-s4-sdk-pipeline-lib.git\"\n    - defaultVersion: \"master\"\n      name: \"piper-library-os\"\n      retriever:\n        modernSCM:\n          scm:\n            git:\n              remote: \"https://github.com/SAP/jenkins-library.git\"\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"MY-ERP\"\n              username: MY_USER\n              password: ${ERP_PW}\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"cf\"\n              username: P12344223\n              password: ${CF_PW}\n\nYou might add more configuration to this file as you need it.\n\nCommit both files to your repo and push.\nIf the travis build works, you’ll see the build integration on GitHub.\n\nOn travis, you can follow the progress of your build live, and get the full text log of your Jenkins build.\nIf all went well, you will be greeted with a green build after a few minutes.\n\nCongratulations. You’re running a serverless Jenkins build with all the qualities checked by the SAP S/4HANA Cloud SDK Pipeline, without hosting your own Jenkins instance.\n\nKeep in mind this is a proof of concept at this point.\nThe serverless Jenkins ecosystem is currently evolving, and neither Jenkinsfile runner, nor Configuration as Code are in a mature state as of February 2019.\nOne downside of this approach is that we lose the Jenkins user interface, so we can’t see our pipeline in blue ocean, and we don’t get the nice build summary.\nWe can get the whole log output from TravisCI, so this can be mitigated, but this is arguable not the best user experience.\n\nBut on the contrary, we don’t have to care for our pet Jenkins, we don’t need to update plugins or backup the configuration or build logs.","title":"Run your Jenkins pipeline without operating a Jenkins instance","tags":["jenkins","serverless"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/79d32/fwilhe.jpg","srcSet":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/b8799/fwilhe.jpg 32w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/8532e/fwilhe.jpg 64w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/79d32/fwilhe.jpg 128w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/97a5e/fwilhe.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/c9eb6/fwilhe.webp 32w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/3ea93/fwilhe.webp 64w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/bf8fb/fwilhe.webp 128w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/e7a87/fwilhe.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":125}},"publicURL":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/fwilhe.jpg"},"blog":null,"github":"fwilhe","html":"<div class=\"paragraph\">\n<p>Software Developer working on CI/CD at SAP Innovation Center in Potsdam. I am employed by SAP, but thoughts here are my own.\n---</p>\n</div>","id":"fwilhe","irc":null,"linkedin":null,"name":"Florian Wilhelm","slug":"/blog/authors/fwilhe/","twitter":"fwilhe"}]}},{"node":{"date":"2019-03-01T00:00:00.000Z","id":"3a32be4f-441e-5dd8-a3ed-bf3e1d6e4048","slug":"/blog/2019/03/01/devops-world-jenkins-world-cfp-open/","strippedHtml":"The DevOps World | Jenkins World shuttle is ready for lift off once again. As usual, the sign of festivities looming begins with the Call for Speakers.\nThose who attended DevOps World | Jenkins World 2018 know that DevOps World | Jenkins World 2019 is coming back to San Francisco, and adding a stop in  Europe - Lisbon, Portugal.\n\nJenkins World USA | San Francisco | August 12 - 15, 2019\n\nJenkins World Europe | Lisbon | December 2 - 5, 2019*\n\nTo encourage open collaboration and stimulate discussions that will help advance Jenkins adoption and drive it forward, we invite Jenkins users, developers and industry experts to submit a speaking proposal to DevOps World | Jenkins World San Francisco and or Lisbon.\nSubmissions for both locations are being accepted now.\nThe submission deadline for San Francisco, CA has been extended through March 24, 2019, @ 11:59 PM Pacific and the submission deadline for Lisbon, Portugal is June 9, 2019, @ 11:59 PM Pacific.\n\nThe below Q&A will help you breeze through the submission process.\n\nWhere do I go to submit my proposal?\n\nSubmissions for both DevOps World | Jenkins World USA and Europe are accepted at:\n\nJenkins World USA\n\nJenkins World Europe\n\nCan I make proposal(s) to both conferences?\n\nYes, you can! Once you’ve created an account on the CFP website you will be given the option to make submission(s) to one conference or both conferences.\n\nWhen is the deadline for DevOps World | Jenkins World USA?\n\nSaturday March 24, 2019 @ 11:59PM Pacific\n\nWhen is the deadline for DevOps World | Jenkins World Europe?\n\nTuesday, June 9, 2019, @ 11:59 PM Pacific\n\nSan Francisco Important Dates:\n\nJanuary 9, 2019: Call for papers opens\n\nMarch 24, 2019: Call for papers closes\n\nApril 12, 2019: Submission decisions sent\n\nMay 1, 2019: Agenda published - San Francisco, CA\n\nMay 6, 2019: Speaker tasklist is sent out\n\nAugust 12-15, 2019: DevOps World | Jenkins World 2019 San Francisco\n\n*Due to the deadline extensions for DevOps World | Jenkins World 2019 San Francisco any talks submitted after March 10th will be subject to the important dates below:\n\nJanuary 9, 2019: Call for papers opens\n\nMarch 24, 2019: Call for papers closes\n\nWeek of April 1, 2019: Submission decisions sent\n\nWeek of April 29, 2019: Agenda published - San Francisco, CA\n\nMay 6, 2019: Speaker tasklist is sent out\n\nAugust 12-15, 2019: DevOps World | Jenkins World 2019 San Francisco\n\nLisbon Important Dates:\n\nJanuary 9, 2019: Call for papers opens\n\nJune 9, 2019: Call for papers closes\n\nJuly 19, 2019: Submission decisions sent\n\nAugust 19, 2019: Agenda published\n\nAugust 23, 2019: Speaker tasklist is sent out\n\nDecember 2-5, 2019: DevOps World | Jenkins World 2019 Lisbon, Portugal\n\n*All Dates Are Subject To Change.\n\nWe look forward to receiving your inspiring stories!","title":"DevOps World - Jenkins World 2019: Call for Papers is Open","tags":["event","jenkinsworld"],"authors":[{"avatar":null,"blog":null,"github":"svanalstine","html":"","id":"svanalstine","irc":null,"linkedin":null,"name":"Skylar VanAlstine","slug":"/blog/authors/svanalstine/","twitter":null}]}},{"node":{"date":"2019-03-04T00:00:00.000Z","id":"d85f9019-be6e-5fed-9a43-5cc4d0781ec3","slug":"/blog/2019/03/04/gsoc2019-announcement/","strippedHtml":"On behalf of the Jenkins GSoC org team,\nI am happy to announce that the Jenkins project has been accepted to\nGoogle Summer of Code 2019.\nThis year we invite students and mentors to join the Jenkins community and work together\non enhancing the Jenkins ecosystem.\n\nJust to provide some numbers, this is the biggest GSoC ever, 206 organizations will participate in GSoC this year.\nAnd it will be hopefully the biggest year for Jenkins as well.\nWe have 25 project ideas\nand more than 30 potential mentors (and counting!).\nIt is already more than in 2016 and 2018 combined.\nThere are many plugins, SIGs and sub-projects which have already joined GSoC this year.\nAnd we have already received messages and first contributions from dozens of students, yey!\n\nWhat’s next?\nGSoC is officially announced, and please expect more students to contact projects in our\nGitter channels and mailing lists.\nMany communications will also happen in SIG and sub-project channels.\nWe will be working hard in order to help students to find interesting projects, to explore the area,\nand to prepare their project proposals before the deadline on April 9th.\nThen we will process the applications, select projects and assign mentor teams.\n\nAll information about the Jenkins GSoC is available on its sub-project page.\n\nI am a student. How do I apply?\n\nSee the Information for students page for full application guidelines.\n\nWe encourage interested students to reach out to the Jenkins community early and to start exploring project ideas.\nAll project ideas have chats and mailing lists referenced on their pages.\nWe will be also organizing office hours for students,\nand you can use these meetings to meet org admins and mentors and to ask questions.\nAlso, join our Gitter channel and the\nmailing list\nto receive information about such incoming events in the project.\n\nThe application period starts on March 25th, but you can prepare now!\nUse the time before the application period to discuss and improve your project proposals.\nWe also recommend that you become familiar with Jenkins and start exploring your proposal areas.\nProject ideas include quick-start guidelines and reference newbie-friendly issues\nwhich may help with initial study.\nIf you do not see anything interesting,\nyou can propose your own project idea\nor check out ideas proposed by other organizations\nparticipating in GSoC.\n\nI want to be a mentor. Is it too late?\n\nIt’s not!\nWe are looking for more project ideas and for Jenkins contributors/users\nwho are passionate about Jenkins and want to mentor students.\nNo hardcore experience required, mentors can study the project internals together with students and technical advisors.\nWe are especially interested in ideas beyond the Java stack, and in ideas focusing new technologies and areas\n(e.g. Kubernetes, IoT, Python, Go, whatever).\n\nYou can either propose a new project idea or join an existing one.\nSee the Call for Mentors post\nand Information for mentors for details.\nIf you want to propose a new project,\nplease do so by March 11th so that students have time to explore them and to prepare their proposals.\n\nThis year mentorship does NOT require strong expertise in Jenkins development.\nThe objective is to guide students and to get involved into the Jenkins community.\nGSoC org admins will help to find advisers if special expertise is required.\n\nImportant dates\n\nMar 11 - deadline for new GSoC project idea proposals\n\nApr 09 - deadline for student applications\n\nMay 06 - accepted projects announced, teams start community bonding and coding\n\nAug 26 - coding period ends\n\nSep 03 - Results announced\n\nSee the GSoC Timeline for more info.\nIn the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).","title":"Jenkins is accepted to Google Summer Of Code 2019!","tags":["gsoc","gsoc2019","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2019-03-11T00:00:00.000Z","id":"c9f62da3-bfb4-5c14-b822-339fc3c213da","slug":"/blog/2019/03/11/let-s-celebrate-java-11-support/","strippedHtml":"This is a joint blog post prepared by the Java 11 Support Team: Adrien Lecharpentier, Ashton Treadway, Baptiste Mathus, Jenn Briden, Kevin Earls, María Isabel Vilacides, Mark Waite, Ramón León and Oleg Nenashev.\n\nWe have worked hard for this and it’s now here.\nWe are thrilled to announce full support for Java 11 in Jenkins starting from Jenkins 2.164 (released on Feb 10, 2019) and LTS 2.164.1 (ETA: March 14th).\nThis means you can now run your Jenkins controllers and agents with a Java 11 JVM.\n\nStarting in June 2018, many events were organized to improve Jenkins code base and add Java 11 support.\nBeyond these events, Core/Plugins maintainers and many other contributors have worked hard to make sure they discover and solve as many issues as possible related to Java 11 support.\n\nThe effort to support Java 11 led to the creation of the JEP-211: Java 10+ support in Jenkins.\nIt also spurred the creation of the Platform Special Interest Group to coordinate the Java 11 work and other platform support efforts.\n\nCelebration\n\nWe’d like to take a moment to thank everyone involved in these tasks: code contributors, issue reporters, testers, event planners and attendees and all those in the community who have generously lent their time and support to this effort.\nThank you all!\n\nHere are some of the contributors who helped with this task (alphabetical order):\n\nAlex Earl,\nAlyssa Tong,\nAshton Treadway,\nBaptiste Mathus,\nCarlos Sanchez,\nDaniel Beck,\nDavid Aldrich,\nDenis Digtyar,\nDevin Nusbaum,\nEmeric Vernat,\nEvaristo Gutierrez,\nGavin Mogan,\nGianpaolo Macario,\nIsabel Vilacides,\nJames Howe,\nJeff Pearce,\nJeff Thompson,\nJenn Briden,\nJesse Glick,\nJonah Graham,\nKevin Earls,\nKsenia Nenasheva,\nKohsuke Kawaguchi,\nLiam Newman,\nMandy Chung,\nMark Waite,\nNicolas De Loof,\nOleg Nenashev,\nOliver Gondža,\nOlivier Lamy,\nOlivier Vernin,\nParker Ennis,\nPaul Sandoz,\nRamón León,\nSam Van Oort,\nTobias Getrost,\nTracy Miranda,\nUlli Hafner,\nVincent Latombe,\nWadeck Follonier\n\n(We are deeply sorry if we missed anyone in this list.)\n\nGuidelines\n\nIn order to keep it simple, here is how you can start Jenkins on Java 11 using the Docker image.\nYou can select a Java 11 based image by suffixing the tag of the image with -jdk11.\nIf you are upgrading an existing instance please read the Upgrading Jenkins Java version from 8 to 11 page before upgrading.\n\nSo you can run Jenkins on Java 11 with:\n\ndocker run -p 50000:50000 -p 8080:8080 jenkins/jenkins:2.164-jdk11\n\nHowever, and as always, you can still start Jenkins with other methods.\nPlease see the more detailed documentation at Running Jenkins on Java 11.\n\nDeveloper guidelines\n\nFor developers involved in Jenkins development, you can find details on developing and testing Jenkins to run on Java 11 on the Java 11 Developer Guidelines.\n\nThis resource regroups the modifications which might need to be done in order to validate the compatibility of plugins for Java 11.\n\nWhat’s next\n\nEven though this is a big achievement, we still have work to do.\n\nOur first priority is adding Java 11 support to JenkinsFile Runner project.\nFrom there, we will move on to port Java 11 support to the Jenkins X project and the Evergreen project.\n\nSo, even if this is a big deal to us, this is not the end of the story.\nIt is a major step that will benefit users, developers, and members of the Jenkins community.\n\nReference links\n\nRunning Jenkins on Java 11\n\nhttps://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues\n\nhttps://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines\n\njep:211[Java 11 support in Jenkins]","title":"Let's celebrate Java 11 Support on Jenkins","tags":["core","developer","java11","community","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/19e71/alecharp.jpg","srcSet":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/77b35/alecharp.jpg 32w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/d4a57/alecharp.jpg 64w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/19e71/alecharp.jpg 128w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/68974/alecharp.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/ef6ff/alecharp.webp 32w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/8257c/alecharp.webp 64w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/6766a/alecharp.webp 128w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/22bfc/alecharp.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/alecharp.jpg"},"blog":"https://alecharp.fr","github":"alecharp","html":"<div class=\"paragraph\">\n<p>Adrien is a Jenkins user and plugins developer since 2009 and maintains several plugins.\nCurrently, Adrien works at <a href=\"https://www.cloudbees.com\">CloudBees</a> as a software engineer, involved in open-source code development.</p>\n</div>","id":"alecharp","irc":null,"linkedin":null,"name":"Adrien Lecharpentier","slug":"/blog/authors/alecharp/","twitter":"alecharp"}]}},{"node":{"date":"2019-03-12T00:00:00.000Z","id":"8eccd6b4-7a2d-5929-8547-14557b2a4ad8","slug":"/blog/2019/03/12/cdf-launch/","strippedHtml":"Today Linux Foundation, along with CloudBees, Google, and a number of other companies, launched a new open-source software foundation called Continuous Delivery Foundation (CDF.) The CDF believes in the power of Continuous Delivery, and it aims to foster and sustain the ecosystem of open-source, vendor neutral projects.\n\nJenkins contributors have decided that our project should join this new foundation. This discussion happened over a period of time, with a relatively succinct summary of the motivation comes from here.\n\nNow, as a user, what does this mean?\n\nFirst, there will be no big disruption/discontinuity. The same people are still here, no URL is changing, releases will come out like they’ve always been. We will make the decisions the same way as we’ve been making, and pull requests land the same way. Changes will happen continuously over the period of time.\n\nThis is yet another testament to the maturity and the importance of the Jenkins project in this space. With a quarter million Jenkins running around the globe, it’s truly rocking the world of software development from IoT to games, cloud native webapps to machine learning projects. It makes Jenkins such an obvious, safe choice for anyone seeking open heterogeneous DevOps strategy.\n\nThe CDF creates a level playing field that is well-understood to organized contributors, which further, translate into more contributors, hence resulting in a better Jenkins, faster. Over the past years, the Jenkins project has been steadily growing more structures that provide this clarity, and this is the newest step on this trajectory.\n\nAny serious dev teams are combining multiple tools and services to cover the whole software development spectrum. A lot of work gets reinvented in those teams to integrate those tools together. Jenkins will be working more closely with other projects under the umbrella of the CDF, which would result in better aligned software with less overlap.\n\nOur users are practitioners trying to improve the software development process in their organizations. They get that CI/CD/automation which unlocks the productivity that their organizations need, but that’s not always obvious to their organizations as a whole. So our users often struggle to get the necessary support. The CDF will advocate for the practice of Continuous Delivery, and because it’s not coming from a vendor or a project, it will reach the people who can lend that support.\n\nSo I hope you can see why we are so excited about this!\n\nIn fact, for us, this is an idea that we’ve been cooking for close to two years. I don’t think I’m exaggerating much to say the whole idea of the CDF started from the Jenkins project.\n\nA lot of people have done so much work behind the scene to make this happen. But a few people played such instrumental roles that I have to personally thank them namely, Chris Aniszczyk for his patience and persistence, R. Tyler Croy for cooking and evolving the idea, and Tracy Miranda for bringing this idea into a reality.","title":"Jenkins is joining the Continuous Delivery Foundation","tags":["cdf","general","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2019-03-28T00:00:00.000Z","id":"3add1f77-2dd4-5731-912e-279ff12aa081","slug":"/blog/2019/03/28/outreachy-review/","strippedHtml":"Over the past three months, I have been mentoring two Outreachy interns, David and Latha, with my co-mentor, Jeff Thompson.\nOur project was to introduce a standardized way for creating an audit log of Jenkins and plugins using Apache Log4j Audit.\nWhile this type of feature is addressed by other existing plugins, there is no unifying way for plugins to contribute their own actions.\nThis project provided ample opportunities for each of our interns to experience the community processes for starting a new Jenkins plugin, contributing changes to Jenkins itself in order to support more audit event types, using CICD principles, and developing a Jenkins Enhancement Proposal to begin the standardization process of audit logging throughout the ecosystem.\n\nDuring this internship, David and Latha contributed several aspects of the project, much of which lays the foundation for easily instrumenting more subsystems and plugins with audit logs.\nA template log4j2.xml file is used for allowing more complex logging output configurations with a configuration UI.\n\nNew APIs have been introduced in Jenkins to allow for more authentication-related events to be audited by the plugin.\nAudit events have been defined for a few authorization scenarios and some build events.\nFor example, here is a snippet of audit log output for a build execution in the JSON layout:\n\n{\n  \"thread\" : \"Executor #0 for master : executing test #1\",\n  \"level\" : \"OFF\",\n  \"loggerName\" : \"AuditLogger\",\n  \"marker\" : {\n    \"name\" : \"Audit\",\n    \"parents\" : [ {\n      \"name\" : \"EVENT\"\n    } ]\n  },\n  \"message\" : \"Audit [buildStart buildNumber=\\\"1\\\" cause=\\\"[Started by user anonymous]\\\" projectName=\\\"test\\\" timestamp=\\\"Mon Mar 25 13:48:09 CDT 2019\\\" userId=\\\"SYSTEM\\\"]\",\n  \"endOfBatch\" : false,\n  \"loggerFqcn\" : \"org.apache.logging.log4j.audit.AuditLogger\",\n  \"instant\" : {\n    \"epochSecond\" : 1553539689,\n    \"nanoOfSecond\" : 810000000\n  },\n  \"contextMap\" : { },\n  \"threadId\" : 54,\n  \"threadPriority\" : 5\n}\n{\n  \"thread\" : \"Executor #0 for master : executing test #1\",\n  \"level\" : \"OFF\",\n  \"loggerName\" : \"AuditLogger\",\n  \"marker\" : {\n    \"name\" : \"Audit\",\n    \"parents\" : [ {\n      \"name\" : \"EVENT\"\n    } ]\n  },\n  \"message\" : \"Audit [buildFinish buildNumber=\\\"1\\\" cause=\\\"[Started by user anonymous]\\\" projectName=\\\"test\\\" timestamp=\\\"Mon Mar 25 13:48:10 CDT 2019\\\" userId=\\\"SYSTEM\\\"]\",\n  \"endOfBatch\" : false,\n  \"loggerFqcn\" : \"org.apache.logging.log4j.audit.AuditLogger\",\n  \"instant\" : {\n    \"epochSecond\" : 1553539690,\n    \"nanoOfSecond\" : 155000000\n  },\n  \"contextMap\" : { },\n  \"threadId\" : 54,\n  \"threadPriority\" : 5\n}\n\nBest of all, this project has helped instill important software engineering values such as automated testing and continuous delivery.\n\nAs we conclude this round, we look forward to participating in the next Outreachy internship to continue this project and grow the community.\nFor more information about the next round, check out the Outreachy website.","title":"Outreachy 2018-2019 In Review","tags":["outreachy"],"authors":[{"avatar":null,"blog":"https://musigma.blog/","github":"jvz","html":"<div class=\"paragraph\">\n<p>Mathematician, software engineer, and free software evangelist.\nWorks for CloudBees on the <a href=\"https://jenkins.io/security/\">Jenkins Security Team</a> along with other Jenkins community work since 2018.\nPMC Chair of the <a href=\"https://logging.apache.org/\">Apache Logging Services project</a> and Secretary for the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.</p>\n</div>","id":"jvz","irc":null,"linkedin":null,"name":"Matt Sicker","slug":"/blog/authors/jvz/","twitter":"jvz"}]}},{"node":{"date":"2019-03-29T00:00:00.000Z","id":"994d7fe1-0a77-5a87-a6ff-1ab920df5676","slug":"/blog/2019/03/29/becoming-contributor-intro/","strippedHtml":"As a software engineer, for many years I have used open source software (frameworks, libraries, tools…​) in the\ndifferent companies I have worked at. However, I had never been able to engage in an open-source project as a\ncontributor, until now.\n\nSince I made my first—​ridiculously simple—​commit into Jenkins, six months ago (in September, 2018), I have been\nattempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,\nchallenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often\ndifficult to know where to start and also difficult to come up with a plan to keep moving forward and contributing\nregularly, and in more meaningful ways over time.\n\nWhen it comes to the Jenkins project, I have encountered challenges that others trying to get into the community are\nlikely to encounter. For that reason, I have decided to go ahead and share my journey of becoming a more engaged Jenkins\ncontributor.\n\nI plan to publish roughly 1 post per month, describing this journey. I will attempt to start contributing to the pieces\nthat are easier to start with, transitioning towards more complex contributions over time.\n\nWhere to start\n\njenkins.io\n\nTo become a Jenkins contributor, the most obvious place to start looking at is jenkins.io. In the\ntop navbar there is a Community dropdown, with several links to different sections. The first entry,\nOverview, takes us to the “Participate and contribute” section.\n\nIn this section we get lots of information about the many ways in which we can engage with the Jenkins project and\ncommunity. Even though the intention is to display all the possible options, allowing the reader to choose, it can feel\na bit overwhelming.\n\nThe page is divided into two columns, the column on the left shows the different options to participate, while the\ncolumn on the right shows the different options to contribute.\n\nSuggestions to Participate\n\nIn the left column of the “Participate and contribute” page, there are several ideas on how to engage with the community,\nranging from communicating to reviewing changes or providing feedback.\n\nOne of the pieces that got me confused at first in this area were the communication channels. There are many different\nchannels for communication. There are several mailing lists and there are also IRC\nand Gitter channels.\n\nDuring my first attempts to get involved, I subscribed to many of the mailing lists and several IRC and Gitter channels,\nbut I quickly noticed that there is significant communication going on; and that most threads in the most active lists\nand channels are specific to issues users or developers have. So, unless your goal is to support other users right away\n(if you are an experienced Jenkins user already it might be the case) or you plan to ask questions that you already\nhave in mind, I would advise against spending too much time on this at first.\n\nEven though it is great to see how the community members support each other, the amount of communication might be\noverwhelming for a newcomer, and if you are also trying to contribute to the project (either with translations,\ndocumentation or code), following these conversations might not be the best way to start.\n\nSuggestions to Contribute\n\nIn the right column of the “Participate and contribute” page there are several ideas on how to contribute, mostly\ngrouped into: writing code, translating, documenting and testing.\n\nIn following posts, I will be going through all of these types of contributions, as well as through some of the\nsuggestions to participate, which include reviewing Pull Requests (PRs) or providing feedback (either reporting new\nissues or replicating cases other users have already described, providing additional information to help the maintainer\nreproduce and fix them).\n\nMy first contribution in this journey\n\nWhen looking at the “Participate and contribute” page, I noticed a couple of things in that page that I could help\nimprove. And I was actually planning to pick one of those as the first example of a contribution for this post. But\nwhen I was reading the contributing guidelines of the repository, I found an even easier contribution I could make,\nwhich I thought would be a great example to illustrate how simple it could be to start contributing. So I decided to go\nahead with it.\n\nThe website repository\n\nIn the ”Document” section there is a link to the\ncontributing guidelines of the jenkins.io repository.\nThe CONTRIBUTING file is a common file present in the root folder of most open-source-project repositories.\n\nFollowing the link to that file, I reached the jenkins.io repository, which is the one that contains the sources for\nthe corresponding website—​which also includes this blog. And, in fact, the contributing file was the first file I\nwanted to review, in order to learn more about how to contribute to the website.\n\nFound a broken link\n\nWhen reading the contributing file, I learned about the Awestruct static site generator, which is the tool used to\ntransform the AsciiDoc source files in the repo into a website. However, when I clicked the link to learn more about it, I noticed it was broken. The domain had expired.\n\nWhy not fix it?\n\nThis was the opportunity I chose to show other newcomers how easy it can be to start contributing.\n\nForking the repository\n\nThe first step, as usual, would be to fork the repository and clone it to my machine.\n\nApplying the change\n\nThe next step would be to apply the change to the corresponding file. To do so, I created a new branch\n“alternative-awestruct-link” and applied the change there:\n\nMaking sure everything builds correctly and tests pass\n\nEven though in this case my contribution was not to the actual website, but to the contributing guidelines (and for\nthat reason was unlikely to break anything), it is a best practice to get used to the regular process every\ncontribution should follow, making sure everything builds correctly after any change.\n\nAs stated in the contributing guidelines themselves, in order to build this repository we just have to run the default\n“make” target, in the root of the repository.\n\nOnce the command execution finishes, if everything looks good, we are ready to go to the next step: creating the PR.\n\nCreating the PR\n\nOnce my change had been committed and pushed to my repository, I just had to create the PR. We have an easy way to do so\nby just clicking the link that we get in our git logs once the push is completed, although we can create the PR directly\nthrough the GitHub UI, if we prefer so; or even use “hub”, the GitHub CLI, to do it.\n\nIn this case, I just clicked the link, which took me to the PR creation page on GitHub. Once there, I added a\ndescription and created the PR.\n\nWhen a PR to this repository is created, we notice there are some checks that start running. Jenkins repositories are\nconfigured to notify the “Jenkins on Jenkins”, which runs the corresponding CI pipelines for\neach repository, as described in the corresponding Jenkinsfile.\n\nOnce the checks are completed, we can see the result in the PR:\n\nAnd if we want to see the details of the execution, we can follow the “Show all checks” link:\n\nPR Review\n\nNow that the PR has been created and all automated checks are passing, we only have to wait for peer code reviews.\n\nOnce someone approves the PR and it is later merged, your contribution is integrated into the master branch of the\nrepository, becoming part of the next release.\n\nI have contributed!\n\nThis contribution I made is a trivial one, with very little complexity and it might not be the most interesting one if\nyou are trying to contribute code to the Jenkins project itself.\n\nHowever, for me, as the contributor, it was a great way to get familiar with the repository, its contributing\nguidelines, the technology behind the jenkins.io website; and, above anything else, to start “losing the fear” of\ncontributing to an open source project like Jenkins.\n\nSo, if you are in the same position I was, do not hesitate. Go ahead and find your own first contribution. Every little\ncounts!","title":"The journey of becoming a Jenkins contributor: Introduction","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg","srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/3af71/romenrg.jpg 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/1e7bb/romenrg.jpg 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/7b60f/romenrg.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/bf13b/romenrg.webp 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/9edd6/romenrg.webp 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/f5f75/romenrg.webp 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff962/romenrg.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}},"publicURL":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/romenrg.jpg"},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/authors/romenrg/","twitter":"romenrg"}]}},{"node":{"date":"2019-04-03T00:00:00.000Z","id":"1e16c395-d668-5169-973c-ecab9af0f1b0","slug":"/blog/2019/04/03/security-advisory/","strippedHtml":"Today we published a security advisory that mostly informs about issues in Jenkins plugins that have no fixes.\nWhat’s going on?\n\nThe Jenkins security team triages incoming reports both to Jira and our non-public mailing list.\nOnce we’ve determined it is a plugin not maintained by any Jenkins security team members, we try to inform the plugin maintainer about the issue, offering our help in developing, reviewing, and publishing any fixes.\nSometimes the affected plugin is unmaintained, or maintainers don’t respond in a timely manner to the notifications or the followup emails we send.\n\nIn such cases, we publish security advisories informing users about these issues, even if there’s no new release with a fix.\nDoing so allows administrators to make an informed decision about the continued use of plugins with unresolved security vulnerabilities.\nToday’s advisory is overwhelmingly such an advisory.\n\nSee a plugin you love on this list and want to help out? Learn about adopting plugins.","title":"Security spring cleaning","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2019-05-05T00:00:00.000Z","id":"7783e32b-2866-5124-b6e5-a89740fbfd19","slug":"/blog/2019/05/05/telemetry-success/","strippedHtml":"Half a year ago we delivered a security fix for Jenkins that had the potential to break the entire Jenkins UI.\nWe needed to change how Jenkins, through the Stapler web framework, handled HTTP requests, tightening the rules around what requests would be processed by Jenkins.\nIn the six months since, we didn’t receive notable reports of problems resulting from this change, and it’s thanks to the telemetry we gathered beforehand.\n\nThe Problem\n\nJenkins uses the Stapler web framework for HTTP request handling.\nStapler’s basic premise is that it uses reflective access to code elements matching its naming conventions.\nFor example, any public method whose name starts with get, and that has a String, int, long, or no argument can be invoked this way on objects that are reachable through these means.\nAs these naming conventions closely match common code patterns in Java, accessing crafted URLs could invoke methods never intended to be invoked this way.\n\nA simple example of that is a URL every Jenkins user would be familiar with: /job/jobname.\nThis ends up invoking a method called #getJob(String), with the argument being\"jobname\", on the root application object, and having it handle the rest of the URL, if any.\nOf course, this is a URL intended to be accessed this way.\nHow about invoking Object#getClass(), followed by Class#getClassLoader(), by accessing the URL /class/classLoader?\nWhile this particular chain would not result in a useful response, this doesn’t change that the methods were invoked.\nWe identified a number of URLs that could be abused to access otherwise inaccessible jobs, or even invoke internal methods in the web application server to invalidate all sessions.\nThe security advisory provides an overview of the issues we’d identified by then.\n\nThe Idea\n\nTo solve this problem inherent in the Stapler framework’s design, we defined rules that restrict invocation beyond what would be allowed by Stapler.\nFor example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.\nOtherwise, the type wouldn’t be aware of Stapler, and couldn’t produce a meaningful response anyway.\n\nThis meant that getters just declaring Object (or List, Map, etc.) would no longer be allowed by default.\nIt was clear to the developers working on this problem that we needed the ability to be able to override the default rules for specific getters.\nBut allowing plugin developers to adapt their plugins after we published the fix wasn’t going to cut it;\nJenkins needed to ship with a comprehensive default whitelist for methods known to not conform to the new rules, so that updating would not result in problems for users.\n\nThe Solution\n\nWhile there is tooling like Plugin Compatibility Tester and Acceptance Test Harness, many Jenkins plugins do not have comprehensive tests of their UI — the Jenkins UI is fairly stable after all.\nWe did not expect to have sufficient test coverage to deliver a change like this with confidence.\nThe only way we would be able to build such a comprehensive whitelist would be to add telemetry to Jenkins.\n\nWhile Jenkins instances periodically report usage statistics to the Jenkins project, the information included is very bare bones and mostly useful to know the number of installations, the popularity of plugins, and the general size of Jenkins instances through number and types of jobs and agents.\nWe also didn’t want to just collect data without a clear goal, so we set ourselves some limitations — collect as little data as possible, no personally identifiable information, have a specific purpose for each kind of information we would collect, and define an end date for the collection in advance.\nWe defined all of this in JEP-214, created the Uplink service that would receive submissions, and added the basic client framework to Jenkins.\nThe implementation is fairly basic — we just submit an arbitrary JSON object with some added metadata to a service.\nThis system would inform tweaks to a security fix we were anxious to get out, after all.\n\nStarting in mid October for weekly releases, and early November for LTS, tens of thousands of Jenkins instances would submit Stapler request dispatch telemetry daily, and we would keep identifying code incompatible with the new rules and amending the fix.\nUltimately, the whitelist would include a few dozen entries, preventing serious regressions in popular plugins like Credentials Plugin, JUnit Plugin, or the Pipeline plugins suite, down to Google Health Check Plugin, a plugin with just 80 installations when we published the fix.\n\nLearning what requests would result in problems also allowed us to write better developer documentation — we already knew what code patterns would break, and how popular each of them was in the plugin ecosystem.\n\nThe Overhaul\n\nI wrote above:\n\nFor example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.\n\nWhile this was true for the fix during most of development, it isn’t how the fix that we published actually works.\nAbout a month before the intended release date, internal design/code review feedback criticized the complicated and time-consuming implementation that at the time required scanning the class path of Jenkins and all plugins and looking for related resources, and suggested a different approach.\n\nSo we tried to require that the declared type or any of its ancestors be annotated with the new annotation @StaplerAccessibleType, annotated a bunch of types in Jenkins itself ( ModelObject being the obvious first choice), and ran our scripts that check to see whether Stapler would be allowed to dispatch methods identified in telemetry.\nWe’d long since automated the daily update of dispatch telemetry processing, so it was a simple matter of changing which Jenkins build we were working with.\n\nAfter a few iterations of adding the annotation to more classes, the results were very positive: Very few additional types needed whitelisting, while many more were no longer (unnecessarily) allowed to be dispatched to.\nThis experiment, late during development, ended up being essentially the fix we delivered.\nWe didn’t need to perform costly scanning of the class path on startup — we didn’t need to scan the class path at all — , and the rules governing request dispatch in Stapler, while different from before, are still pretty easy to understand and independent of how components are packaged.\n\nThe Outcome\n\nAs usual when delivering a fix we expect could result in regressions in plugins, we created a wiki page that users could report problems on.\nRight now, there’s one entry on that wiki page.\nIt is one we were aware of well before release, decided against whitelisting it, and the affected, undocumented feature in Git Plugin ended up being removed.\nThe situation in our issue tracker is only slightly worse, with two apparently minor issues having been reported in Jira.\n\nWithout telemetry, delivering a fix like this one would have been difficult to begin with.\nTinkering with the implementation just a few weeks before release and having any confidence in the result?\nNot causing any significant regressions?\nI think this would simply be impossible.","title":"First successful use of Jenkins telemetry","tags":["core","security","telemetry"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2019-05-09T00:00:00.000Z","id":"38964a5b-f559-5f17-9f39-7c96117907bb","slug":"/blog/2019/05/09/chinese-localization/","strippedHtml":"Since 2017, I started to do some contributions to the Jenkins community. As a beginner, translation might be\nthe easiest way to help the project. You don’t need to understand the whole context, even to create a ticket in the\nissue tracker system. Improvement of localization usually is minor. But some problems occurred soon,\nthere isn’t a native speaker of Chinese that could review my PRs. So, sometimes my PRs\nare delayed from being merged into master.\n\nSome contributors told me that I can start a thread at the mailing list. Normally, discussing at the mailing list\nis the open source community way. We got a lot of ideas for the localization from there. As a result,\nwe achieved some goals that I’d like to share here.\n\nJEP-216\n\nPreviously, language localization files were distributed in core and in each plugin.\nFor this proposal, each language has a single localization plugin, such as Chinese Localization plugin.\nFinally, Localization Support Plugin and\nChinese Localization plugin are able to support\nall types of localization resource files. From the plugins website,\nyou can see that there are already 13 000 installations.\nWe removed all Chinese localization files at the PR-4008.\n\nI really appreciate Daniel Beck for helping me to add localization support,\nLiam Newman helping me to review JEP-216, and many other community members.\n\nChinese Localization SIG\n\nWe believe that this SIG could help to improve Jenkins experience for Chinese users and gather more contributors\nfrom China. This SIG is responsible for maintaining the Chinese Jenkins website,\npromoting the Jenkins community in China in the social media with WeChat account. We publish translated blog\narticles, Jenkins release notes, JAM or other events at the WeChat account. For now, there are 1800 followers that can\nread our news from the last half a year.\n\nEspecially, I want to say thanks to Wang Donghui, Zhai Zhijun, and other contributors. They did a lot of contributions.\nI wish I could see more and more folks join us.","title":"A Big Step of the Chinese Localization","tags":["general","community","localization","chinese"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#989898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg","srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/77b35/linuxsuren.jpg 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/d4a57/linuxsuren.jpg 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/68974/linuxsuren.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/ef6ff/linuxsuren.webp 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/8257c/linuxsuren.webp 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/6766a/linuxsuren.webp 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/22bfc/linuxsuren.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/linuxsuren.jpg"},"blog":null,"github":"LinuxSuRen","html":"<div class=\"paragraph\">\n<p>Rick is a big fan of Jenkins, also as a contributor leading the Jenkins China community.</p>\n</div>","id":"linuxsuren","irc":null,"linkedin":"linuxsuren","name":"赵晓杰(Rick)","slug":"/blog/authors/linuxsuren/","twitter":"LinuxSuRen"}]}},{"node":{"date":"2019-05-09T00:00:00.000Z","id":"8e971fb0-7d4b-559d-a327-05b99fb4739e","slug":"/blog/2019/05/09/templating-engine/","strippedHtml":"Implementing DevSecOps practices at the enterprise scale is challenging. With multiple programming languages, automated testing frameworks, and security compliance tools being used by different applications within your organization, it becomes difficult to build and maintain pipelines for each team.\n\nMost pipelines are going to follow the same generic workflow regardless of which specific tech stack is employed by an application.  The Templating Engine Plugin (abbreviated as JTE for Jenkins Templating Engine) allows you to capture this efficiency by creating tool-agnostic, templated workflows to be reused by every team.\n\nAs technology consultants with clients in both the public and private sectors, at Booz Allen we found ourselves building DevSecOps pipelines from scratch for every new project.  Through developing the Jenkins Templating Engine, we’ve seen pipeline development decrease from months to days now that we can reuse tool integrations while bringing a new level of governance to Jenkins pipelines.\n\nPipeline Templating\n\nOrganizations benefit from letting application developers focus on what they do best: building applications. Supporting this means building a centralized DevOps team responsible for maintaining platform infrastructure and creating CI/CD pipelines utilized by development teams.\n\nWith the rise of microservice-based architectures, a centralized DevOps teams can support many different development teams simultaneously; all of whom may be leveraging different programming languages and automated testing tools.\n\nWhile the tools may differ between development teams, the workflow is often the same: unit test, static code analysis, build and publish an artifact, deploy it, and then perform different types of testing against the deployed application.\n\nThe Templating Engine Plugin allows you to remove the Jenkinsfile from each repository by defining a common workflow for teams to inherit.  Instead of an entire pipeline definition in each repository, teams supply a configuration file specifying which tools to use for the workflow.\n\nJTE in Action\n\nLet’s walk through a bare bones example to demonstrate the reusability of templates:\n\nExample Pipeline Template:\n\nunit_test()\nbuild()\nstatic_code_analysis()\n\nTemplates leverage Steps contributed by Libraries to outline a workflow teams must implement.  While a template does get executed just like any other Jenkinsfile (meaning that the standard scripted and declarative syntax is supported), the goal of a template should be to read like plain English and avoid any technical implementation.\n\nLeveraging templates in this way lets you separate the business logic (what should happen when) of your pipeline from the\ntechnical implementation (what’s actually going to happen).  The result of this is a CI/CD pipeline that’s proven to be\nsignificantly easier to manage when supporting multiple teams simultaneously.\n\nThe steps outlined by this template ( unit_test, build, and static_code_analysis) have been named generically on purpose. This way teams can specify different libraries to use while sharing the same pipeline.\n\nImplementing the Template\n\nImplementing a shareable pipeline with the Templating Engine requires a few key components:\n\nPipeline Template : Outline the workflow to be performed\n\nLibraries : Provide technical implementations of the steps of the workflow\n\nConfiguration Files : Specify which libraries to use and their configuration\n\nStep 1: Create a Pipeline Configuration Repository\n\nA Pipeline Configuration Repository is used to store common configurations and pipeline templates inherited by teams.\n\nThis example Pipeline Configuration Repository will later be configured as part of a Governance Tier : the mechanism in JTE that allows you to build hierarchical configurations representing your organization.\n\nA Governance Tier holds three things:\n\nPipeline Templates\n\nA list of Library Sources\n\nThe tier’s configuration file ( pipeline_config.groovy)\n\nThe pipeline templates and the configuration file for a Governance Tier are stored in the pipeline configuration repository.\n\nWhen configuring the Governance Tier in Jenkins, you will provide a source code management location for a repository that contains the above components as well as the base directory where these artifacts can be found.\n\nStep 2: Create the Pipeline Template\n\nNext, we’ll create a Jenkinsfile for the Governance Tier.  In JTE, the Jenkinsfile is the default pipeline template that an execution will use.\n\nJenkinsfile\n\nunit_test()\nbuild()\nstatic_code_analysis()\n\nStep 3: Create the Libraries\n\nThe Templating Engine Plugin has implemented a version of Jenkins Shared Libraries to enhance the reusability of libraries.  A library is a root directory within a source code repository that has been configured as a Library Source on a Governance Tier.\n\nIn our example, the pipeline template needs to perform unit testing, package an artifact, and run static code analysis.\n\nLet’s assume that we have some teams using gradle and some teams using maven to build and test their application but they will both use SonarQube to perform static code analysis.\n\nIn this scenario, we should create gradle, maven, and sonarqube libraries.\n\n|- gradle/\n  \\-- build.groovy\n  \\-- unit_test.groovy\n|- maven/\n  \\-- build.groovy\n  \\-- unit_test.groovy\n|- sonarqube/\n  \\-- static_code_analysis.groovy\n\nStep 4: Implement the Steps\n\nImplementing a library step is exactly the same as just writing regular global variables as part of the default Jenkins Shared Libraries.\n\nFor the purposes of this demonstration, we will just have each step print out the step name and contributing library.\n\ngradle/build.groovy\n\nvoid call(){\n    println \"gradle: build()\"\n}\n\nRead more about Library Development within JTE.\n\nStep 5: Create the Configuration Files\n\nThe configuration file for JTE is named pipeline_config.groovy.\n\nIn the Governance Tier we’ll create a configuration file specifying common configurations between the applications. In this case, both applications are using the sonarqube library:\n\npipeline_config.groovy\n\nlibraries{\n  merge = true // allow individual apps to contribute additional libraries\n  sonarqube\n}\n\nNext, we’ll create two more repositories representing the maven and gradle applications. Within those repositories all we’ll need is an application-specific pipeline_config.groovy file.\n\nThese repositories both contain an application pipeline_config.groovy configuration file.\n\nmaven app: pipeline_config.groovy\n\nlibraries{\n    maven\n}\n\ngradle app: pipeline_config.groovy\n\nlibraries{\n    gradle\n}\n\nStep 6: Configure the Governance Tier in Jenkins\n\nNow that we have a Pipeline Configuration Repository and a Library Source Repository, we can configure a Governance Tier in Jenkins:\n\nThis configuration shown in the image above can be found under Manage Jenkins >> Configure System\n\nThrough the Templating Engine, you can create a pipeline governance hierarchy matching your organization’s taxonomy by representing this structure via Folders in Jenkins.\n\nStep 7: Create a Multibranch Pipeline for Both Applications\n\nWhen creating Multibranch Pipeline Projects for each app, the Templating Engine plugin supplies a new Project Recognizer\ncalled Jenkins Templating Engine.  This sets the project to use the Templating Engine framework for all branches within the\nrepository.\n\nYou can also set the Jenkins Templating Engine project recognizer for a GitHub Organization project, enabling you to easily share the same pipeline across an entire Github Organization!\n\nStep 8: Run the Pipelines\n\nThat’s it!  Now, both applications will leverage the exact same pipeline template while having the flexibility to select which\ntools should be used during each phase of the workflow.\n\nBelow is sample output from the console log from both applications pipeline runs:\n\nGradle:\n\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-gradle.git\n[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git\n[JTE] Loading Library gradle from git https://github.com/steven-terrana/example-jte-libraries.git\n...\n[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration\n[JTE][Step - gradle/unit_test]\n[Pipeline] echo\ngradle: unit_test()\n[JTE][Step - gradle/build]\n[Pipeline] echo\ngradle: build()\n[JTE][Step - sonarqube/static_code_analysis]\n[Pipeline] echo\nsonarqube: static_code_analysis()\n[Pipeline] End of Pipeline\n\nMaven:\n\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-maven.git\n[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git\n[JTE] Loading Library maven from git https://github.com/steven-terrana/example-jte-libraries.git\n...\n[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration\n[JTE][Step - maven/unit_test]\n[Pipeline] echo\nmaven: unit_test()\n[JTE][Step - maven/build]\n[Pipeline] echo\nmaven: build()\n[JTE][Step - sonarqube/static_code_analysis]\n[Pipeline] echo\nsonarqube: static_code_analysis()\n[Pipeline] End of Pipeline\n\nBenefits of the Templating Engine\n\nApply Organizational Governance\n\nLeveraging the Templating Engine Plugin will allow you to define enterprise-scale, approved\nworkflows that can be used by teams regardless of what tools are being used.  This top-down\napproach makes scaling and enforcing DevSecOps principles significantly easier within your organization.\n\nOptimize Code Reuse\n\nThere’s really no need for every team in your organization to figure out how to do the same things over\nand over again.  At Booz Allen, we have seen pipeline development time decrease from months to days as\nwe have continuously reused and expanded upon our Templating Engine library portfolio as part of our Solutions\nDelivery Platform.\n\nSimplify Pipeline Maintainability\n\nOften DevOps engineers find themselves building and supporting pipelines for multiple development teams at\nthe same time.  By decoupling the workflow from the technical implementation and consolidating the pipeline\ndefinition to a centralized location, the Templating Engine plugin allows DevOps engineers to scale much faster.\n\nGet Involved!\n\nThe Templating Engine Plugin has been open sourced and made available in the Jenkins Update Center.\n\nWe always appreciate feedback and contributions! If you have an interesting use case or would like to ask questions, try the templating-engine-plugin on Gitter.\n\nAdvanced Features\n\nConfiguration File Conditional Inheritance\n\nExternalize Library Configurations\n\nAspect Oriented LifeCycle Hooks\n\nMultiple Pipeline Templates\n\nDefault Step Implementation\n\nConfiguration File DSL Sandboxing\n\nMore Resources\n\nFor this Demonstration\n\nPipeline Configuration Repository\n\nSample Libraries\n\nSample Maven Repository\n\nSample Gradle Repository\n\nAdditional Resources\n\nTemplating Engine Documentation\n\nSource Code\n\nBooz Allen’s SDP Pipeline Libraries\n\nBooz Allen Hamilton","title":"Introducing the Jenkins Templating Engine!","tags":["general","pipeline","plugin","pipeline-authoring"],"authors":[{"avatar":null,"blog":null,"github":"steven-terrana","html":"","id":"steven-terrana","irc":null,"linkedin":null,"name":"Steven Terrana","slug":"/blog/authors/steven-terrana/","twitter":null}]}},{"node":{"date":"2019-05-11T00:00:00.000Z","id":"958e77ed-5f61-569f-b036-053c7e4e1e6e","slug":"/blog/2019/05/11/docs-sig-announcement/","strippedHtml":"We’re pleased to announce the formation of the Jenkins Documentation Special Interest Group.\nThe Docs SIG encourages contributors and external communities to create and review Jenkins documentation.\n\nSee the Special Interest Group Overview for more details and plans.\n\nHow can I help?\n\nThe Jenkins Documentation SIG would love to have your help with:\n\nreviewing and fixing open bug reports\n\nreviewing Jenkins documentation pull requests\n\nreviewing Jenkins X documentation pull requests\n\nHow can I fix a documentation bug?\n\nInstructions for contributing to the Jenkins documentation are in the CONTRIBUTING file of the site repository.\nFollow the instructions in that file and submit pull requests for review.\n\nInstructions for contributing to the Jenkins X documentation are on the Jenkins X documentation site.\nFollow the instructions in that file and submit pull requests for review.\n\nHow can I evaluate a pull request?\n\nPull requests for the Jenkins project are reviewed in the Jenkins documentation repository.\nLog in to GitHub with your credentials and add your review comments to pull requests.\n\nPull requests for the Jenkins X project are reviewed in the Jenkins X documentation repository.\nLogin to GitHub with your credentials and add your review comments to pull requests.","title":"Jenkins Documentation Special Interest Group","tags":["documentation","docs","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2019-05-22T00:00:00.000Z","id":"50433d34-f53f-56da-b4f5-354c5b873ee1","slug":"/blog/2019/05/22/outreachy-audit-log-project/","strippedHtml":"The Audit Log Plugin for Jenkins is an in development project to integrate standardized audit logging trails to various core actions in Jenkins.\nThis project integrates the recently released Apache Log4j Audit library to allow for a vast array of possible audit logging destinations and configuration.\nWe began this plugin not long after Log4j Audit 1.0.0 was released last year by partnering with Outreachy where we mentored two interns who laid the foundations of the project.\nThis year, we applied to Outreachy again to continue the project, and we were able to accept two more Outreachy interns: Aarthi Rajaraman and Gayathri Rajendar.\nBoth have already been adding new features and improving the plugin over the past couple months, and the internship officially began on 20 May.\n\nThis round has some ambitious goals of various features and documentation we wish to create.\nAfter having added audit log support for several built-in event listeners in Jenkins around the lifecycle of projects, builds, nodes, and authentication during both the previous internship and the applications to this one, we would like to accomplish the following:\n\nMake a 1.0 release of the plugin for the Jenkins Update Center. #34\n\nAdd documentation on supported audit log types and configuration options. #40\n\nAdd audit logs for credential usage and lifecycle events. #35, #36\n\nAdd audit logs for user property lifecycle events. #37\n\nDefine or document an API for other plugins to use to define and log their own audit events. #30\n\nEnsure audit log events use consistent vocabulary with the Jenkins UI. #33\n\nAdd an audit log event recorder/viewer comparable to the Jenkins logger recorder administrative UI. #32\n\nAdd support for configuring a syslog-compatible log server for writing audit logs. #29\n\nAdd support for configuring a relational database such as PostgreSQL for writing audit logs. #31\n\nImprove unit test coverage and pay down technical debt. #38\n\nBegin discovery on alternative ways to manage the underlying Log4j Core configuration such as via the upcoming integration with Spring Cloud Configuration. #39\n\nIn the future, we hope to participate with more projects and mentors.\nGoing on concurrently with Outreachy right now is Google Summer of Code 2019 where we are mentoring several more projects and students.\nPlease extend a warm welcome to all our new contributors and community members from Outreachy and GSoC!","title":"Audit Logging in Jenkins: An Outreachy Project","tags":["community","logging","outreachy"],"authors":[{"avatar":null,"blog":"https://musigma.blog/","github":"jvz","html":"<div class=\"paragraph\">\n<p>Mathematician, software engineer, and free software evangelist.\nWorks for CloudBees on the <a href=\"https://jenkins.io/security/\">Jenkins Security Team</a> along with other Jenkins community work since 2018.\nPMC Chair of the <a href=\"https://logging.apache.org/\">Apache Logging Services project</a> and Secretary for the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.</p>\n</div>","id":"jvz","irc":null,"linkedin":null,"name":"Matt Sicker","slug":"/blog/authors/jvz/","twitter":"jvz"}]}},{"node":{"date":"2019-05-30T00:00:00.000Z","id":"0cba81fa-0a2a-5225-8fdf-6ce66f9aa4d5","slug":"/blog/2019/05/30/becoming-contributor-newbie-tickets/","strippedHtml":"Two months ago I published an introductory article on\nthe journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about\nthe multiple ways in which we can participate and contribute. Then, a first—​basic—​contribution I made to the site\nrepository was described.\n\nNow, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.\n\nGetting started with tickets and processes\n\nBeginners guide to contributing and Jenkins Jira\n\nReviewing the developer section in jenkins.io is probably the best starting point, and a\nreference link to keep handy. The beginners guide to contributing to Jenkins\ncan also be useful, since it points to different repositories, tools (such as the issue tracker) and governance documents.\nBesides, it describes best practices for commit messages, code style conventions, PR guidelines, etc.\n\nOnce we get a general understanding of the former and want to actually start coding, we may get stuck trying to come up\nwith something to work on.\n\nVisiting the Jenkins issue tracker, feels like the natural next\nstep, since it is full of potential bugs and enhancements that have already been reported by the community. However, it\nis quite easy to feel overwhelmed by the possibilities listed there. Bear in mind that in a 10+-year-old project like\nthis, most of the things that are reported are tricky for a newcomer to work on. For that reason, filtering by\nnewbie-friendly tickets is probably\nthe best idea.\n\nFigure 1. Screenshot displaying the list of newbie-friendly tickets in the Jenkins Jira\n\nSelecting a ticket\n\nIn my case, I spent some time reviewing the newbie-friendly tickets, until I found one\nthat seemed interesting to me and also looked like something I would be able to fix:\n\nFigure 2. Screenshot of the ticket I decided to work on\n\nProcesses\n\nAt this stage, when we have decided to take ownership of a ticket, it’s a good practice to let the rest of the community\nknow that we are planning to start working on it. We can do so easily, by assigning the ticket to ourselves (see the\n“ Assign ” button below the ticket summary).\n\nAssigning the ticket to ourselves in the Jenkins Jira will allow any other contributors to know that we are planning to\ntake care of the ticket; and in case they are also interested in contributing to it, they will know who to reach if they\nwant to coordinate work or ask for status. That said, it is worth mentioning that assigning a ticket to yourself does\nnot mean that other contributors cannot work on it from then onwards. Jenkins is an open-source project and anyone is\nwelcome to create their own PRs, so anybody can propose their own solution to the ticket. But as you can guess, if the\nticket is assigned to somebody, most people will probably reach the assignee before starting to work on it.\n\nRelated to the former, it is also important to bear in mind that we should not postpone work on the ticket for too long\nonce we have assigned the ticket to ourselves. Other potential contributors might be ignoring the ticket because they\nsee yourself assigned to it.\n\nOnce we are about to actually start working on the ticket, it is also a good practice to click the “ Start Progress ”\nbutton. This action will change the status to “ In progress ”, signaling to the community that we are currently working\non this particular ticket.\n\nSetting up the necessary stuff on our computer\n\nConfiguring, installing and testing\n\nAs described in the first article of this journey, the\ninitial step to start contributing to a particular repository is to fork it to our GitHub account, and then clone it to\nour local computer.\n\nAs usual, in the Jenkins core repository the CONTRIBUTING file\ndescribes the necessary steps to get the repository working locally. This includes installing the necessary development\ntools: Java Development Kit ( OpenJDK is the recommended choice), Maven and any IDE supporting\nMaven projects. Note that instructions to install JDK and Maven are linked in the contributing guidelines.\n\nOnce we have all the necessary tools installed and configured, we are ready to build Jenkins locally\nand also to run tests.\n\nGetting down to business\n\nReviewing ticket details\n\nNow that I was ready to start working on the ticket, I had to review it in more detail, to fully understand the problem.\n\nThe description of the ticket I was planning to work on included two links. The first one was to\na screenshot that showed the actual bug. It showed\nhow several non-compatible plugins were being selected when clicking “ All ”, even though the intended behavior was to\nonly select the compatible plugins. The second link was a reference to a code fragment\nthat showed other validations that had to be taken into account when checking if a plugin update was compatible or not\nwith the current installation.\n\nReproducing the issue locally\n\nEven though I had now understood the issue in better detail, I had not seen it myself live yet, so it seemed to me that\nthe next logical step was to reproduce it locally.\n\nTo reproduce the issue locally in our computer, we can either use the local war file that we can generate by\nbuilding Jenkins from the source code\nor we can download the latest Jenkins version available and run it locally. When I worked\non this ticket, the latest available version was 2.172 and, when I built if from the sources I saw version 2.173-SNAPSHOT,\nwhich was the next version, in which the community was already working on.\n\nIn general it is a good idea to reproduce bugs locally, not only to get a better understanding, but also to make sure\nthey are actual issues. It could always be an issue happening only on the reporter’s end (e.g. some user misconfiguration).\nOr it could be a ticket referencing an old issue that has been fixed already. This latest possibility didn’t sound that\nstrange to me, since the ticket was one month old. It could have been handled by someone else in the meantime, without\nnoticing the ticket existed. Or the contributor might have forgotten to update the ticket in the issue tracker after the\nfix was committed.\n\nSo, for all the reasons above, I ran the latest Jenkins version locally. From a terminal, I went to the\nfolder in which the war file was placed, and ran java -jar jenkins.war, which starts Jenkins locally on http://localhost:8080.\n\nFrom the home page I navigated to the Plugin Manager (clicking the “ Manage Jenkins ” link in the left hand side and\nthen selecting “ Manage Plugins ” in the list).\n\nIn the Manage Plugins page, the list of plugin updates appears. In my case, since I re-used an old JENKINS_HOME\nfrom an older installation, several plugins showed up in the list, requiring updates. That allowed me to test the behavior\nthat was supposed to be failing.\n\nWhen I clicked on the “Select all” option at the bottom, this is what I got:\n\nFigure 3. Screenshot showing the error, reproduced locally, after clicking “Select All”\n\nAs it had been reported in the ticket, the behavior was inconsistent. In a previous version, the behavior of the “ All ”\nselector had been changed (with the best intent), aiming to only check the compatible plugins. However, as can be seen\nin the screenshot, the behavior was not the expected one. Now, neither “all” nor “only compatible” plugins were being\nselected, since some plugins with compatibility issues were also being checked, unintentionally.\n\nFiguring out a fix\n\nWhen reading the conversation in the original PR in which the behavior of the “ All ” selector had been changed, I saw a\nsuggestion of having a separate “ Compatible ” selector, thus leaving the “ All ” selector with the traditional behavior.\nI liked the idea, so I decided to include it as part of my proposed change.\n\nAt this stage, I had a clear picture of the different things I needed to change. These included: 1) The UI, to add a new\nselector for “Compatible” plugins only, 2) the JS code that applied the changes to the interface when the selectors were\nclicked and 3) probably the back-end method that was determining if a plugin was compatible or not.\n\nApplying the change\n\nAs usual, and as it is also recommended in the contributing guidelines, I created a separate feature branch to work on\nthe ticket.\n\nAfter reviewing the code, I spent some time figuring out which pieces I needed to change, both in the back-end and also\nin the front-end. For more details about the changes I had to make, you can take a look at the changes in my PR.\n\nAs a basic summary, I learned that the classic Jenkins UI was built using Jelly\nand, after understanding its basics, I modified the index.jelly file to include the new selector, assigning the\nfunction that checked the compatible plugins to this new selector, and re-using the existing “toggle” function to set\nall checkboxes to true in the case of “ All ”. I also had to modify the behavior of the checkPluginsWithoutWarnings\nJavaScript function, to un-check the incompatible ones, since there was now an actual “ All ” selector that was not there\npreviously, and that un-check case was not being taken into account. Then, I created a new back-end Java method\nisCompatible, inside the UpdateSite.java class, which now calls all the different methods that check different\ncompatibilities and returns the combined boolean result. For this change, I included an automated test to verify the\ncorrect behavior of the method, contributing to the test coverage of the project. Finally, I modified the table.jelly\nfile to call the new back-end method from the UI, replacing the existing one that was not taking all cases into account.\n\nAs you can see, the change involved touching different technologies, but even if you face a similar situation in which\nyou are not familiar with some of them, my advice would be carry on, don’t let that stop you. As software engineers, we\nshould focus on our evergreen skills, rather than on knowing\nspecific technologies; adapting to whatever framework we have to use at a given moment, learning whatever we need about\nthe new technology to complete the task and applying cross-framework principles and best practices to provide a quality\nsolution.\n\nResult\n\nAfter the changes described above, the resulting UI includes a new option, and the corresponding behaviors of the three\nselectors work as expected:\n\nFigure 4. Screenshot of the new version, displaying the behavior achieved by clicking the new “Compatible” selector\n\nPublishing the change\n\nSubmitting a Pull Request\n\nIn the contributing guidelines of the Jenkins core repository there is also a section about proposing changes,\nwhich describes the necessary steps that have to be followed in order to create a Pull Request (PR) with our change.\n\nFurthermore, there is a PR template in\nthe repository, which will be loaded automatically when creating a new PR and that will serve as a basis for us to provide\nthe necessary information for the reviewers. We are expected to: include a link to the ticket, list the proposed changelog\nentries describing our changes, complete the submitter checklist and add mentions to the desired reviewers (if any).\n\nIn my case, I followed the template when creating my PR,\ncompleting all sections. I linked the Jira ticket, provided two proposed changelog entries, completed the submitter\nchecklist and added three desired reviewers (explaining why I thought their reviews would be valuable). I also linked\nthe original PR that was referenced in the ticket, to provide further context.\n\nFigure 5. Screenshot of the PR I submitted\n\nThe approve and merge process\n\nAs stated in the contributing guidelines, typically two approvals are needed for the PR to be merged; and it can take\nfrom a few days to a couple of weeks to get them. Sometimes, one approval from a reviewer and a 1-week delay without\nextra reviews is considered enough to set the PR as ready-for-merge. However, both the time-to-merge and the number\nof approvals necessary might vary, depending on the complexity of the change or the area of Jenkins core that it affects.\n\nAfter the necessary approvals have been received, a Jenkins core maintainer will set the PR as ready-for-merge, which\nwill lead to it being merged into the master branch when one of the following releases are being prepared.\n\nIn my case, I received a review by Daniel (the reporter of the ticket and one of my “desired reviewers”) the very day I\nsubmitted the PR (April 14th). He made several very useful suggestions, which led to changes from my side. After those\nchanges, Daniel made minor remarks and my PR got another review, which was its first approval. After a week had passed\nwithout further news, I added the remaining minor suggestions from Daniel and a few days later received another approval,\nto which Daniel’s final approval was added, leading the PR to be labeled ready-for-merge, being later merged the same\nday (April 26th).\n\nFigure 6. Screenshot of the final state of the PR, after being merged\n\nRelease\n\nFor every new release, repository maintainers will select a set of PRs that have already been labeled ready-for-merge,\nmerge them to master, prepare changelogs (often using the suggestions included in the PRs by the authors) and proceed with\nthe creation of the new release. There is no additional action required from Pull Request authors at this point.\n\nEvery week a new version of Jenkins is released, so when your PR is merged, your changes will—​most likely—​become part\nof the following weekly release of Jenkins.\n\nEventually, your changes will also reach the Long-term support (LTS) release, which is\na different release line, aimed for more conservative users. This release line gets synced with the weekly release by\npicking, every 12 weeks, a relatively recent weekly release as baseline for the new LTS release. In between, intermediate\nLTS releases are created only to include important bug fixes, cherry-picked from the weekly releases. New features are\ntypically delayed until the next baseline for the LTS release is defined.\n\nRegarding the example described in this post, it was released in Jenkins 2.175 (weekly release), soon after being\nmerged. And will probably be included in the next LTS, which should be released next month (June 2019).\n\nDone!\n\nAnd that’s it! We have now covered the whole lifecycle of a new proposed change to Jenkins core. We have reviewed the\nprocess from the very beginning, picking a ticket from the Jenkins issue tracker; all the way to the end, having our\nchange released in a new Jenkins version.\n\nIf you have never contributed but are willing to do so, I hope this article motivates you to go back to the list of\nnewbie-friendly tickets, find one that looks interesting to you, and follow the steps described above, until you see\nyour own change released in a new Jenkins version.\n\nRemember, don’t try to solve a complicated issue as your first ticket, there are plenty of easier ways in which you can\ncontribute, and every little helps!","title":"Becoming a Jenkins contributor: Newbie-friendly tickets","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg","srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/3af71/romenrg.jpg 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/1e7bb/romenrg.jpg 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/7b60f/romenrg.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/bf13b/romenrg.webp 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/9edd6/romenrg.webp 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/f5f75/romenrg.webp 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff962/romenrg.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}},"publicURL":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/romenrg.jpg"},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/authors/romenrg/","twitter":"romenrg"}]}},{"node":{"date":"2019-06-03T00:00:00.000Z","id":"42277358-8fb3-53f2-a4d7-e57be525c9e9","slug":"/blog/2019/06/03/DevOps-World-Jenkins-World-2019-San-Francisco-Agenda-is-Live/","strippedHtml":"We are a little over two months away from the largest Jenkins gathering of the year.  From Jenkins users, to maintainers, contributors, mentors and those new to Jenkins this event will have something for everyone.\n\nThis year’s DevOps World - Jenkins World 2019 San Francisco has moved to a larger venue to facilitate the growth. From August 12 - 15, 2019 the event will take place at the Moscone West Center.  The event boasts 100+ sessions, and will offer training, hands-on workshops, onsite certification, contributor summit and much more.  Conference attendees can expect to be inspired while learning the latest innovations from industry leaders. Attendees will learn the value that digital transformation has in delivering software more efficiently, more quickly and with higher quality.\n\nWe are excited to announce most of the agenda for DevOps World Jenkins World San Francisco is now live. We will continue to fill out the agenda with more sessions, trainings/workshops, and activities. Below is a small sampling of sessions from some of our favorite Jenkins contributors:\n\nJenkins Configuration as Code: try it & start contributing! - Ewelina Wilkosz\n\nJenkins Configuration as Code is an open source Jenkins plugin that allows users to keep complete Jenkins configuration in a simple configuration file (yaml format). In the talk, I’ll briefly present the history of the plugin, the vision for the future and current status. Then I’ll move to the demo section where I’ll show how easy it is to configure and run Jenkins with the help of the plugin.\n\nThinking about Jenkins Security - Mark Waite & Wadeck Follonier\n\nJenkins security concepts, authorization, authentication and auditing, secure builds, agent security, configuration and administration security, auditing, and security best practices.\n\nDocker and Jenkins [as Code] - Dr. Oleg Nenashev\n\nThe Configuration as Code plugin is a new milestone which enables managing Jenkins configurations via YAML. Together with Docker, this plugin offers many ways to produce ready-to-fly Jenkins images for any environments. In my talk, I will describe official controller and agent images offered by the Jenkins project. What’s inside them? How do you configure images with JCasC and Groovy hooks? How do you use these approaches together? And, finally, how do you simplify packaging of custom Jenkins images and define the entire system [as code]?\n\nCan Jenkins be the Engine of Mobile DevOps? - Shashikant Jagtap\n\nIn this talk, we will explore the following topics:\n\nHow mobile DevOps is different than web DevOps\n\nChallenges in mobile DevOps ( iOS and Android)\n\nHow Jenkins fits in mobile DevOps and CI/CD pipelines\n\nWhat Jenkins misses for mobile\n\nHow we can make Jenkins better for mobile apps\n\nCreating a CI/CD Pipeline for Your Shared Libraries - Roderick Randolph\n\nAt Capital One we run tens of thousands of CI/CD pipelines on Jenkins, leveraging the Jenkins Pipeline shared libraries extension to enable code reuse and decrease time to market for dev teams. A code change to our shared library goes live immediately and is consumed the next time a team triggers their project’s pipeline. So, why do we have such high confidence that a code change to our library won’t break a team’s pipeline? The answer: we’ve developed a fully automated CI/CD pipeline for our shared library.\n\nDuring this talk, you will learn how to create a fully automated pipeline for your shared libraries including how to develop tests, create canary releases, monitor for issues and quickly rollback changes to your shared library to achieve rapid delivery while minimizing any impact on dev teams.\n\nHow Jenkins Builds and Delivers Jenkins in the Cloud - Brian Benz & Tyler Croy\n\nWant to know how Jenkins builds Jenkins? Catch this session to see the real-life implementation of Jenkins’ development (at ci.jenkins.io) and delivery infrastructure in the cloud as it evolved from a mix of platforms to multi-platform VMs, containers and Kubernetes on Microsoft Azure.  Expect a frank discussion of issues that were encountered along the way, how the architecture has evolved and what’s on the roadmap.  We’ll share important tips and tricks for implementing your own Jenkins infrastructure on any cloud, based on Jenkins’ own implementation experience.\n\nDeclarative Pipeline 2019: Tips, Tricks and What’s Next - Liam Newman\n\nAre you using Declarative Pipeline? Are you considering using them? Are you just curious? Well, we’re going to help you get more out of Declarative Pipeline with less complexity and less effort. We’ll walk through some best practices, point out some tricks you might not have known, warn you off some common mistakes, review what’s changed in the last year and give you a preview of what we’re working on for Declarative Pipeline going forward.\n\nSay Goodbye to Hello World, Say Hello to Real World Delivery Pipelines - Brian Benz & Jessica Deen\n\nAre you tired of \"Hello World\" and hypothetical demos? So are we! In this code-heavy, deeply technical session, you’ll learn more than just tips and tricks.  You’ll learn best practices and how to start from absolute zero. Whether you’re using Jenkins, Azure DevOps, a mixture of the two, or another CI/CD tool, you’ll learn how to create multiple build and release pipelines using real world code hosted on open source platforms such as GitHub.\n\nFor the complete agenda see DevOps World - Jenkins World 2019 San Francisco .\n\nFeel free to use discount code JWFOSS for a 30% discount off your pass.\n\nHope to see you there!","title":"DevOps World-Jenkins World 2019 San Francisco: Agenda is Live","tags":["event","devopsworldjenkinsworld2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2019-06-21T00:00:00.000Z","id":"b06db1a3-a822-5949-960f-cb7f3e69c3da","slug":"/blog/2019/06/21/performance-testing-jenkins/","strippedHtml":"I have been working on improving the performance of the Role Strategy Plugin as a part of my Google Summer of Code project.\nSince there was no existing way to measure performance and do benchmarks on Jenkins Plugins,\nmy work for the first phase of the project was to create a framework for running\nbenchmarks in Jenkins plugins with a Jenkins instance available. To make our job a bit easier,\nwe chose Java Microbenchmark Harness for running these benchmarks. This\nallows us to reliably measure performance of our time-critical functions and will help make Jenkins perform faster\nfor everyone.\n\nThe micro-benchmarking framework was recently released in the Jenkins Unit Test Harness 2.50.\nThe blog post below shows how to run benchmarks in your plugins.\n\nIntroduction\n\nThe framework runs works by starting a temporary Jenkins instance for each fork of the JMH benchmark,\njust like JenkinsRule from Jenkins Test Harness. Benchmarks are run directly from your JUnit Tests which allows\nyou to fail builds on the fly and easily run benchmarks from your IDE, just like unit tests. You can easily\nconfigure your benchmarks by either using your Java methods, or by using Jenkins Configuration-as-Code plugin\nand passing the path to your YAML file.\n\nTo run benchmarks from your plugins, you need to do the following:\n\nbump up the minimum required Jenkins version to 2.60.3 or above\n\nbump Plugin-POM to a version ≥ 3.46 or manually upgrade to Jenkins Test Harness ≥ 2.51.\n\nNow, to run the benchmarks, you need to have a benchmark runner that contains a @Test so it can run\nlike a JUnit test. From inside a test method, you can use the OptionsBuilder provided by JMH to\nconfigure your benchmarks. For example:\n\npublic class BenchmarkRunner {\n    @Test\n    public void runJmhBenchmarks() throws Exception {\n        ChainedOptionsBuilder options = new OptionsBuilder()\n                .mode(Mode.AverageTime)\n                .forks(2)\n                .result(\"jmh-report.json\");\n\n        // Automatically detect benchmark classes annotated with @JmhBenchmark\n        new BenchmarkFinder(getClass()).findBenchmarks(options);\n        new Runner(options.build()).run();\n    }\n}\n\nSample benchmarks\n\nNow, you can write your first benchmark:\n\nWithout any special setup\n\n@JmhBenchmark\npublic class JmhStateBenchmark {\n    public static class MyState extends JmhBenchmarkState {\n    }\n\n    @Benchmark\n    public void benchmark(MyState state) {\n        // benchmark code goes here\n        state.getJenkins().setSystemMessage(\"Hello world\");\n    }\n}\n\nUsing Configuration as Code\n\nTo use configuration as code, apart from the dependencies above you also need to add the following\nto your pom.xml :\n\nio.jenkins\nconfiguration-as-code\n1.21\ntrue\n\nio.jenkins\nconfiguration-as-code\n1.21\ntests\ntest\n\nNow configuring a benchmark is as simple as providing path to your YAML file and specifying the class\ncontaining the benchmark state.\n\n@JmhBenchmark\npublic class SampleBenchmark {\n    public static class MyState extends CascJmhBenchmarkState {\n        @NonNull\n        @Override\n        protected String getResourcePath() {\n            return \"config.yml\";\n        }\n\n        @NonNull\n        @Override\n        protected Class getEnclosingClass() {\n            return SampleBenchmark.class;\n        }\n    }\n\n    @Benchmark\n    public void benchmark(MyState state) {\n        Jenkins jenkins = state.getJenkins(); // jenkins is configured and ready to be benchmarked.\n        // your benchmark code goes here...\n    }\n}\n\nMore Samples\n\nAs a part of this project, a few benchmarks have been created in the Role Strategy Plugin which show\nconfiguring the instances for various situations. You can find them\nhere.\n\nRunning Benchmarks\n\nRunning benchmarks from Maven\n\nTo easily run benchmarks from Maven, a Maven profile to run the benchmarks has been created\nand is available starting Plugin-POM version 3.45. You can then run your benchmarks from the\ncommand line using mvn test -Dbenchmark.\n\nRunning benchmarks on ci.jenkins.io\n\nIf you have your plugins hosted on ci.jenkins.io, you can easily run benchmarks directly from your Jenkinsfile\nby using the runBenchmarks() method after the buildPlugin() step in your which is now available in\nJenkins Pipeline library.\nThis function also accepts the path to your generated JMH benchmark reports as an optional\nparameter and archives the benchmark results. Running benchmarks in pull request builds allows you to constantly\nmonitor the performance implications of a given change. For example, the Jenkinsfile from Role Strategy Plugin:\n\nbuildPlugin()\nrunBenchmarks('jmh-report.json')\n\nVisualizing benchmark results\n\nBenchmark reports generated (in JSON) can be visualized using the either the JMH Report Plugin\nor by passing the benchmark reports to the JMH visualizer web service. As an example, here is\na visualized report of some benchmarks from the Role Strategy Plugin:\n\nThese improvements seen above were obtained through a small pull request\nto the plugin and shows how even seemingly small changes can bring major performance improvements. Microbenchmarks\nhelp to find these hot-spots and estimate the impact of changes.\n\nSome tips and tricks\n\nSince BenchmarkRunner class name in the example above does not qualify as a test according to Maven surefire plugin’s\nnaming conventions, the benchmarks will not interfere with your JUnit tests.\n\nBenchmark methods need to be annotated by @Benchmark for JMH to detect them.\n\nClasses containing benchmarks are found automatically by the BenchmarkFinder\nwhen annotated with @JmhBenchmark.\n\nA reference to the Jenkins instance is available through either JmhBenchmarkState#getJenkins() or through\nJenkins.getInstance() like you would otherwise do.\n\nJmhBenchmarkState provides setup() and tearDown() methods which can be overridden to configure the\nJenkins instance according to your benchmark’s requirements.\n\nThe benchmark builds on ci.jenkins.io are currently throttled because of the limited availability of highmem nodes.\n\nThe benchmark framework was made available in Jenkins Test Harness 2.50, it is recommended to use version 2.51 as it includes some bug fixes.\n\nLinks and Feedback\n\nIf you have any feedback, comments or questions, please feel free to reach out to me through either\nthe Role Strategy Plugin Gitter chat or through\nthe Jenkins Developer Mailing list.\n\nPresentation slides\n\nDemo at Platform SIG meeting\n\nDocumentation for the micro-benchmark framework:\n\nWriting benchmarks (Jenkins Test Harness)\n\nPreconfiguring benchmarks using JCasC\n\nRunning benchmarks using Plugin POM profile\n\nBuild Step for running benchmarks on ci.jenkins.io","title":"Micro-benchmarking Framework for Jenkins Plugins","tags":["jmh","plugins","benchmark","performance","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg","srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f4523/abhyudayasharma.jpg 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1e7bb/abhyudayasharma.jpg 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/b48b6/abhyudayasharma.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1fd06/abhyudayasharma.webp 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/9edd6/abhyudayasharma.webp 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f5f75/abhyudayasharma.webp 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/05d06/abhyudayasharma.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}},"publicURL":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/abhyudayasharma.jpg"},"blog":null,"github":"AbhyudayaSharma","html":"<div class=\"paragraph\">\n<p>Abhyudaya is a Computer Science student at Shiv Nadar University, India.\nHe is participating in Google Summer of Code 2019 to improve the performance\nof the <a href=\"https://github.com/jenkinsci/role-strategy-plugin\">Role Strategy Plugin</a>.</p>\n</div>","id":"abhyudayasharma","irc":null,"linkedin":null,"name":"Abhyudaya Sharma","slug":"/blog/authors/abhyudayasharma/","twitter":null}]}},{"node":{"date":"2019-06-29T00:00:00.000Z","id":"7b06e02e-ca3c-5b58-8850-3e214fd8268e","slug":"/blog/2019/06/29/phase-1-multibranch-pipeline-support-for-gitlab/","strippedHtml":"This is one of the Jenkins project in GSoC 2019. We are working on adding support\nfor Multi-branch\nPipeline Jobs and Folder Organisation in GitLab. The plan is to create the following\nplugins:\n\nGitLab API Plugin - Wraps GitLab Java APIs.\n\nGitLab Branch Source Plugin - Contains two packages:\n\nio.jenkins.plugins.gitlabserverconfig - Manages server configuration and web hooks management.\nIdeally should reside inside another plugin with name GitLab Plugin. In future, this package should\nbe moved into a new plugin.\n\nio.jenkins.plugins.gitlabbranchsource - Adds GitLab Branch Source for Multi-branch Pipeline Jobs (including\nMerge Requests) and Folder organisation.\n\nPresent State\n\nFreeStyle Job and Pipeline(Single Branch) Job are fully supported.\n\nMulti-branch Pipeline Job is partially supported (no MRs detection).\n\nGitLab Folder Organisation is not supported.\n\nGoals of this project\n\nImplement a lightweight GitLab Plugin that depends on GitLab API Plugin.\n\nFollow convention of 3 separate plugins i.e. GitLab Plugin, GitLab API Plugin, GitLab Branch Source Plugin.\n\nImplement GitLab Branch Source Plugin with support for Multi-branch Pipeline Jobs.\n\nSupport new Jenkins features such as\nJenkins Code as Configuration (JCasC),\nIncremental Tools.\n\nClear & Efficient design.\n\nSupport new SCM Trait APIs.\n\nSupport Java 8 and above.\n\nBuilding the plugin\n\nNo binaries are available for this plugin as the plugin is in the very early alpha stage, and not ready for the general\npublic quite yet.  If you want to jump in early, you can try building it yourself from source.\n\nInstallation:\n\nCheckout source code to your local machine:\n\ngit clone https://github.com/baymac/gitlab-branch-source-plugin.git\n\ncd gitlab-branch-source-plugin\n\nInstall the plugin:\n\nmvn clean install\n\nmvn clean install -DskipTests # to skip tests\n\nRun the plugin:\n\nmvn hpi:run # runs a Jenkins instance at localhost:8080\n\nmvn hpi:run -Djetty.port= # to run on your desired port number\n\nIf you want to test it with your Jenkins server, after mvn clean install follow these steps in your Jenkins instance:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nSelect Advanced tab\n\nIn Upload Plugin section, select Choose file\n\nSelect $ /target/gitlab-branch-source.hpi\n\nSelect Upload\n\nSelect Install without restart\n\nUsage\n\nAssuming plugin installation has done been already.\n\nSetting up GitLab Server Configuration on Jenkins\n\nOn jenkins, select Manage Jenkins\n\nSelect Configure System\n\nScroll down to find the GitLab section\n\nSelect Add GitLab Server | Select GitLab Server\n\nNow you will now see the GitLab Server Configuration options.\n\nThere are 4 fields that needs to be configured:\n\nName - Plugin automatically generates an unique server name for you. User may want to configure this field\nto suit their needs but should make sure it is sufficiently unique. We recommend to keep it as it is.\n\nServer URL - Contains the URL to your GitLab Server. By default it is set to \"https://gitlab.com\". User can\nmodify it to enter their GitLab Server URL e.g. https://gitlab.gnome.org/, http://gitlab.example.com:7990. etc.\n\nCredentials - Contains a list of credentials entries that are of type GitLab Personal Access Token. When\nno credential has been added it shows \"-none-\". User can add a credential by clicking \"Add\" button.\n\nWeb Hook - This field is a checkbox. If you want the plugin to setup a webhook on your GitLab project(s)\nrelated jobs, check this box. The plugin listens to a URL for the concerned GitLab project(s) and when an event\noccurs in the GitLab Server, the server sends an event trigger to the URL where the web hook is setup. If you\nwant continuous integration (or continuous delivery) on your GitLab project then you may want to automatically\nset it up.\n\nAdding a Personal Access Token Credentials (To automatically generate Personal Access Token see\nnext section):\n\nUser is required to add a GitLab Personal Access Token type credentials entry to securely persist the token\ninside Jenkins.\n\nGenerate a Personal Access Token on your GitLab Server:\n\nSelect profile dropdown menu from top-right corner\n\nSelect Settings\n\nSelect Access Token from left column\n\nEnter a name | Set Scope to api, read_user, read_repository\n\nSelect Create Personal Access Token\n\nCopy the token generated\n\nReturn to Jenkins | Select Add in Credentials field | Select Jenkins\n\nSet Kind to GitLab Personal Access Token\n\nEnter Token\n\nEnter a unique id in ID\n\nEnter a human readable description\n\nSelect Add\n\nTesting connection:\n\nSelect your desired token in the Credentials dropdown\n\nSelect Test Connection\n\nIt should return something like Credentials verified for user\n\nSelect Apply (at the bottom)\n\nGitLab Server is now setup on Jenkins\n\nCreating Personal Access Token within Jenkins\n\nAlternatively, users can generate a GitLab Personal Access Token within Jenkins itself and automatically add the\nGitLab Personal Access Token credentials to Jenkins server credentials.\n\nSelect Advanced at the bottom of GitLab Section\n\nSelect Manage Additional GitLab Actions\n\nSelect Convert login and password to token\n\nSet the GitLab Server URL\n\nThere are 2 options to generate token;\n\nFrom credentials - To select an already persisting Username Password Credentials or add an Username Password\ncredential to persist it.\n\nFrom login and password - If this is a one time thing then you can directly enter you credentials to the text boxes\nand the username/password credential is not persisted.\n\nAfter setting your username/password credential, select Create token credentials.\n\nThe token creator will create a Personal Access Token in your GitLab Server for the given user with the\nrequired scope and also create a credentials for the same inside Jenkins server. You can go back to the GitLab Server\nConfiguration to select the new credentials generated (select \"-none-\" first then new credentials will appear). For\nsecurity reasons this token is not revealed as plain text rather returns an id. It is a 128-bit long UUID-4 string\n(36 characters).\n\nConfiguration as Code\n\nNo need for messing around in the UI. Jenkins Configuration as Code (JCasC) or simply Configuration as Code Plugin\nallows you to configure Jenkins via a yaml file. If you are a first time user, you can learn more about JCasC\nhere.\n\nAdd configuration YAML:\n\nThere are multiple ways to load JCasC yaml file to configure Jenkins:\n\nJCasC by default searches for a file with the name jenkins.yaml in $JENKINS_ROOT.\n\nThe JCasC looks for an environment variable CASC_JENKINS_CONFIG which contains the path\nfor the configuration yaml file.\n\nA path to a folder containing a set of config files e.g. /var/jenkins_home/casc_configs.\n\nA full path to a single file e.g. /var/jenkins_home/casc_configs/jenkins.yaml.\n\nA URL pointing to a file served on the web e.g. /jenkins.yaml\" class=\"bare\">https:// /jenkins.yaml .\n\nYou can also set the configuration yaml path in the UI. Go to /configuration-as-code.\nEnter path or URL to jenkins.yaml and select Apply New Configuration.\n\nAn example of configuring GitLab server via jenkins.yaml :\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - gitlabPersonalAccessToken:\n              scope: SYSTEM\n              id: \"i<3GitLab\"\n              token: \"XfsqZvVtAx5YCph5bq3r\" # gitlab personal access token\n\nunclassified:\n  gitLabServers:\n    servers:\n      - credentialsId: \"i<3GitLab\"\n        manageHooks: true\n        name: \"gitlab.com\"\n        serverUrl: \"https://gitlab.com\"\n\nFor better security, see handling secrets\nsection in JCasC\ndocumentation.\n\nFuture Scope of work\n\nThe second phase of GSoC will be utilized to develop GitLab Branch Source. The new feature is a work in progress, but\nthe codebase is unstable and requires lot of bugfixes. Some features like Multibranch Pipeline Jobs are functioning\nproperly. More about it at the end of second phase.\n\nIssue Tracking\n\nThis project uses Jenkins JIRA to track issues. You can file issues under\ngitlab-branch-source-plugin component.\n\nAcknowledgements\n\nThis plugin is built and maintained by the Google Summer of Code (GSoC) Team for\nMulti-branch Pipeline\nSupport for GitLab. A lot of inspiration was drawn from GitLab Plugin, Gitea Plugin and GitHub Plugin.\n\nOur team consists of: baymac, LinuxSuRen,\nMarky, Joseph,\nJustin, Jeff.\n\nWith support from: Oleg, Greg,\nOwen.\n\nAlso thanks to entire Jenkins community for contributing with technical expertise and inspiration.\n\nLinks\n\nPhase 1 demo\n\nPresentation slides\n\nGitLab API Plugin\n\nGitLab Branch Source Plugin\n\nGitLab API Plugin Wiki\n\nIssue Tracker for Phase 1\n\nBlog","title":"Multi-branch Pipeline Jobs Support for GitLab SCM","tags":["gitlab","plugins","pipeline","credentials","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg","srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/eb017/baymac.jpg 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/ed0e7/baymac.jpg 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/b3c75/baymac.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/bcdad/baymac.webp 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/21187/baymac.webp 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/33025/baymac.webp 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/d386c/baymac.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":192}},"publicURL":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/baymac.jpg"},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/authors/baymac/","twitter":"baymac04"}]}},{"node":{"date":"2019-07-02T00:00:00.000Z","id":"535f2380-6f41-5360-bb77-129bf606e195","slug":"/blog/2019/07/02/plugin-management-tool-alpha-release/","strippedHtml":"\"Everybody is re-inventing the wheel, partially implementing the \"details\" of plugin management (signed metadata, artifacts checksums, plugins detached from core,…​).\nIt becomes obvious Jenkins should provide adequate tooling for plugin installation outside a live Jenkins instance.\" jira:JENKINS-53767[]\n\nMy Google Summer of Code project\ntries to solve this problem by creating a library that will unify plugin management logic across the different implementations\nof Jenkins and providing a CLI tool that will make it easy for users to download plugins and view plugin information before Jenkins even starts.\nI’m excited to share that we just released an alpha version that you can check out here!\n\nGSoC Phase 1 Update\n\nWhile I looked into pulling the Plugin Manager out of Jenkins core,\nthis ended up being a challenging first step due to the complexity and number of dependencies.  We instead decided to start by converting the\ninstall-plugins.sh bash script in Jenkins Docker to Java.\nThere are several issues with the install-plugins.sh script - namely, that it is a bash script and has limited extensibility.\nFurthermore, it does not retrieve all of the most-up-to-date update center metadata.\n\nAlpha Release Details\n\nMimicking what was done in the install-plugins.sh script from the official Jenkins Docker image, the new plugin management library takes in a list of plugins, their versions,\nand/or urls from which to download the plugins, and downloads the requested plugins and their dependencies. The plugins are downloaded from the update center\nto a specified directory, and can then be loaded into Jenkins. Currently, the plugins to be downloaded can be specified via a plugins.txt file and/or the -plugins cli option, but we plan to further expand the input formats that can be accepted.\nCustom version specifiers for different update centers are also supported.\n\nThe library will first check if any of the requested plugins are currently either installed in the user-specified download location or user-specified Jenkins war file.\nAlready installed plugins will be ignored or upgraded if a higher version is requested or required as a dependency.  After determining the plugin download URL, the library\nwill download the plugins and resolve and download their dependencies.\n\nThis is just the beginning: the plugin manager library and cli tool are very much still a work in progress.\nFor the most up-to-date information on CLI options and how to run the tool, see the repository README.md.\nMore robust input parsing, support for security warnings and available updates, Docker integration, and additional features coming soon!\n\nLinks and Feedback\n\nFeel free to reach out through\nthe Plugin Installation Manager CLI Tool Gitter chat or through\nthe Jenkins Developer Mailing list. I would love to get your questions, comments, and feedback!\nWe have meetings Tuesdays and Thursdays at 6PM UTC.\n\nPhase 1 Presentation Slides\n\nPhase 1 Recorded Demo\n\nJira Issue Search\n\nRepository","title":"Plugin Management Library and CLI Tool Alpha Release","tags":["plugins","pluginmanagement","platform-sig","cli","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#280818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg","srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/405b9/stopalopa.jpg 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7b6be/stopalopa.jpg 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/ebcfb/stopalopa.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/0ade5/stopalopa.webp 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/5b0b1/stopalopa.webp 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/96834/stopalopa.webp 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/805f6/stopalopa.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":184}},"publicURL":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/stopalopa.jpg"},"blog":null,"github":"stopalopa","html":"<div class=\"paragraph\">\n<p>Natasha is a Master&#8217;s student at Penn State University. She was accepted to Google Summer of Code 2019 for a project on creating <a href=\"https://jenkins.io/projects/gsoc/2019/plugin-installation-manager-tool-cli/\">a plugin management tool</a>.\nIn her spare time she enjoys spending time outdoors, listening to podcasts and cuddling with her cat.</p>\n</div>","id":"stopalopa","irc":null,"linkedin":null,"name":"Natasha Stopa","slug":"/blog/authors/stopalopa/","twitter":"stopamine"}]}},{"node":{"date":"2019-07-05T00:00:00.000Z","id":"c2501d40-c7cb-5ca7-8a4c-4b96a13b434f","slug":"/blog/2019/07/05/jenkins-pipeline-stage-result-visualization-improvements/","strippedHtml":"Some changes have recently been released to give Pipeline authors some new tools to improve Pipeline visualizations in Blue Ocean, in particular to address the highly-voted issue JENKINS-39203, which causes all non-failing stages to be visualized as though they were unstable if the overall build result of the Pipeline was unstable. This issue made it difficult to quickly identify why a build was unstable, and forced users to read through builds logs and the Jenkinsfile to figure out what actually happened.\n\nIn order to fix this issue, we introduced a new Pipeline API that can be used to attach additional result information to individual Pipeline steps. Visualization tools like Blue Ocean use this new API when deciding how a given stage should be displayed. Steps like junit that used to set only the overall build result now additionally use the new API to set step-level result information. We created the new unstable and warnError steps so that Pipeline authors with more complicated use cases can still take advantage of this new API.\n\nThe core fixes for the issue are present in the following plugins, all of which require Jenkins 2.138.4 or newer:\n\nPipeline: API 2.34\n\nPipeline: Basic Steps 2.18 (requires a simultaneous update to Pipeline: Groovy 2.70)\n\nPipeline: Graph Analysis 1.10\n\nPipeline: Declarative 1.3.9\n\nBlue Ocean 1.17.0\n\nHere is a screenshot from Blue Ocean of a Pipeline using the unstable step where only the failing stage is marked as unstable:\n\nExamples\n\nHere are some examples of how to update your Pipelines to use the new improvements:\n\nUse the new warnError step to catch errors and mark the build and stage as unstable. warnError requires a single String parameter, which is a message to log when an error is caught. When warnError catches an error, it logs the message  and the error and sets the build and stage result to unstable. Using it looks like this:\n\nwarnError('Script failed!') {\n  sh('false')\n}\n\nUse the new unstable step to set the build and stage result to unstable. This step can be used as a direct replacement for currentBuild.result = 'UNSTABLE', and may be useful in cases where warnError is not flexible enough. unstable requires a single String parameter, which is a message to log when the step runs. Using it might look like this:\n\ntry {\n  sh('false')\n} catch (ex) {\n  unstable('Script failed!')\n}\n\nJUnit Plugin : Update to version 1.28 or newer to pick up fixes for the junit step so that it correctly marks the stage as unstable.\n\nWarnings Next Generation Plugin : Update to version 5.2.0 or newer to pick up fixes for the publishIssues and recordIssues steps so that they correctly mark the stage as unstable.\n\nOther Plugins : If your Pipeline is marked as unstable by a step in another plugin, please file a new issue with the component set to that plugin (after checking for duplicates), clearly describing which step has the problem and under what circumstances it occurs, and link to the developer section of this post as a reference for how the maintainer might be able to address the problem.\n\nLimitations\n\nIf you do not migrate to the unstable or warnError steps, or update plugins that set the build result to versions that integrate with the new API, then in cases where the build is unstable, Blue Ocean will not show any stages as unstable.\n\nEven after these changes, currentBuild.result continues to refer only to the overall build result. Unfortunately, it was not possible to adapt the currentBuild global variable to make it track step or stage-level results, since it is implemented as a global variable, which means it does not have any step-level context through which it could use the new API.\n\nPipeline Stage View Plugin has not yet been updated to use the new API, so these changes do not affect the visualization it provides.\n\nHistory\n\nJenkins Pipeline steps can complete in one of two ways: successfully, by returning a (possibly null) result, or unsuccessfully, by throwing an exception. When a step fails by throwing an exception, that exception propagates throughout the Pipeline until another step or Groovy code catches it, or it reaches the top level of the Pipeline, which causes the Pipeline itself to fail. Depending on the type of exception thrown, the final result of the Pipeline may be something other than failure (for example in some cases it will be aborted). Because of the way the exception propagates, it is easy for tools like Blue Ocean to identify steps (and therefore stages) which failed due to an exception.\n\nIn order for Pipelines to be able to interact with established Jenkins APIs, it was also necessary for Pipeline builds to have an overall build result that can be modified during the build. Among other things, this allows Pipelines to use build steps and wrappers that were originally written for use in Freestyle projects.\n\nIn some cases, it is desirable for a Pipeline step to be able to complete successfully so that the rest of the Pipeline continues normal execution, but for it to be able to note that some kind of error occurred so that visualizations are able to identify that something went wrong with the step, even though it didn’t fail completely. A good example of this is the junit step. This step looks at specified test results, and if there were any failures, marks the overall build result as unstable. This kind of behavior is problematic for visualization tools like Blue Ocean, because the step completed successfully, and there is no programmatic way to associate the overall build result with the step that ended up setting that result.\n\nLooking at JENKINS-39203 again, we see that there were essentially two options for the visualization. If the overall build result was unstable, either all steps that completed successfully could be shown as unstable, because they may have been the step that caused the build to become unstable, or they could be shown as successful, because we have no way to relate the setting of the build result to a specific step. In the end, the first option was chosen.\n\nTo work around this issue, some users tried to do things like throw exceptions and add try/catch blocks around stages that handle exceptions so that Blue Ocean would be able to use the exceptions to mark step and stage results as desired, and then by catching the exception the Pipeline would be able to continue normal execution. These kinds of workarounds were hard to understand, fragile, and did not work well (if at all) for Declarative Pipelines.\n\nDevelopers\n\nIf you are a developer of a plugin that integrates with Pipeline using a step, and want to take advantage of the new API so that your step can report an non-successful result without throwing an exception, please see this post to the Jenkins Developers mailing list, and respond there if you have any questions.","title":"Jenkins Pipeline Stage Result Visualization Improvements","tags":["pipeline","blueocean"],"authors":[{"avatar":null,"blog":null,"github":"dwnusbaum","html":"<div class=\"paragraph\">\n<p>Devin has worked on various areas of Jenkins for the past two years as a software engineer at CloudBees. He is currently a maintainer of core Jenkins Pipeline plugins and also works on Jenkins X Pipeline.</p>\n</div>","id":"dwnusbaum","irc":null,"linkedin":null,"name":"Devin Nusbaum","slug":"/blog/authors/dwnusbaum/","twitter":null}]}},{"node":{"date":"2019-07-09T00:00:00.000Z","id":"e038d6ca-3dd1-5904-9bf3-e30e4baa0a9c","slug":"/blog/2019/07/09/Phase1-Updates-On-Working-Hours-Plugin/","strippedHtml":"The Working Hour Plugin provides an interface to set up a schedule of allowable build days and times.  Jobs that run outside of configured working hours are held until the next allowable build time.\n\nFor the first code phase at Google Summer of Code, I’ve been working on Working Hours Project, which needed improvements on usability.\n\nRather than classical Jelly pages, React seems to be more prefered when we want to design a much customized UI with a huge amount of libraries we could use, especially the open source components such as date pickers.\n\nBut we have to face a challenge of the integration of React and Jenkins, which I’m currently working on.\n\nAchievements For The First Code Phase\n\nFor the first code phase, we are focusing on the UI improvements, we’ve achieved following major improvements:\n\nA standalone webapp which could be then integrated.\n\nSlider for choosing a time range.\n\nMore fields when setting a excluded date.\n\nPresets for choosing a excluded date.\n\nA Jenkins styling UI.\n\nHow We Integrate React Into Jenkins\n\nA solution doc for integration could be found at\nhttps://drive.google.com/open?id=1JLRCDg9JNBWR0Dfq8w3pTI9mrl6i9JU29pBoH6bO0J8\n\nAt first, we found BlueOcean is a great example for using React in Jenkins, but yet it’s not a choice for common development with plugins. So we need to find out another way to integrate.\n\nHere are the steps to do the integration:\n\nA mount point in your jelly file, usually it’s a element with a unique id.\n\nWrite your React Application, but need to set the mount point to the id you set above.\n\nCopy the output after you build the Project into the plugin’s webapp dir.\n\nAdd your files using a script tag in your jelly file.\n\nOnce we are using React, the traditional jelly request won’t be available anymore, another way to process requests will be using stapler. You can define a process function like below.\n[source, java]\n\npublic HttpResponse doDynamic(StaplerRequest request) {\n        if (config == null) {\n            config = ExtensionList.lookup(WorkingHoursPlugin.class).get(0);\n        }\n        String restOfPath = request.getRestOfPath();\n        String[] pathTokens = restOfPath.split(\"/\");\n        List params = new ArrayList<>();\n        switch (params.get(0)) {\n            case \"list-excluded-dates\":\n                return listExcludedDate(request);\n            case \"set-excluded-dates\":\n                return setExcludedDates(request);\n            case \"list-time-ranges\":\n                return listTimeRanges(request);\n            case \"set-time-ranges\":\n                return setTimeRanges(request);\n        }\n    }\n\nRun Our Application\n\nIf you would like to take a look at our plugin, you can go to the repo\nworking-hours-plugin\n\nJust follow the README file, then you could run a copy of your working hours plugin.\n\nScreenshots\n\nThe current plugin’s outlook is a bit simple and the plugin is a bit unconvinient for use.\n\nOne of the problems is that if we want to input a excluded date, it’ll be a string in a constant format like 15/9/2019, but the new UI choosed React so we could use a datepicker to improve this.\n\nCurrent Plugin\n\nNew (Time Ranges)\n\nNew (Exclude Dates)\n\nHelpful links\n\nIf you have any questions or advices, we are glad to hear from you.\n\nSeveral useful links are listed below:\n\nDevelop Repo\n\nMain Repo\n\nDesign Doc\n\nDoc for React Integration Solution\n\nGitter Chat\n\nSlides for Phase 1 Demo\n\nVideo Recording for Phase 1","title":"GSOC Phase 1 Updates On Working Hours Plugin","tags":["react","plugins","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ead9a/jackshen.jpg","srcSet":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/77b35/jackshen.jpg 32w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/d4a57/jackshen.jpg 64w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ead9a/jackshen.jpg 128w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/14734/jackshen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ef6ff/jackshen.webp 32w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/8257c/jackshen.webp 64w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/f4bd7/jackshen.webp 128w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/65cd2/jackshen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":129}},"publicURL":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/jackshen.jpg"},"blog":null,"github":"ShenJack","html":"<div class=\"paragraph\">\n<p>Shen is a student from Beijing Forestry University. One of the students accepted to GSoC 2019.</p>\n</div>","id":"jackshen","irc":null,"linkedin":null,"name":"Jack Shen","slug":"/blog/authors/jackshen/","twitter":null}]}},{"node":{"date":"2019-07-11T00:00:00.000Z","id":"0f6a7c3f-b06c-5c30-a7c4-31c396c5fecf","slug":"/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/","strippedHtml":"I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. This is the first time I have contributed for Jenkins and I am very excited to announce the features that have been done in Phase 1.\n\nProject Introduction\n\nCurrent version of Remoting over Apache Kafka plugin requires users to manually configure the entire system which includes Zookeeper, Kafka and remoting agents. It also doesn’t support dynamic agent provisioning so scalability is harder to achieve. My project aims to solve two problems:\n\nOut-of-the-box solution to provision Apache Kafka cluster.\n\nDynamic agent provisioning in a Kubernetes cluster.\n\nCurrent State\n\nKubernetes connector with credentials supported.\n\nApache Kafka provisioning in Kubernetes feature is fully implemented.\n\nHelm chart is partially implemented.\n\nApache Kafka provisioning in Kubernetes\n\nThis feature is part of 2.0 version so it is not yet released officially. You can try out the feature by using the Experimental Update Center to update to 2.0.0-alpha version or building directly from master branch:\n\ngit clone https://github.com/jenkinsci/remoting-kafka-plugin.git\ncd remoting-kafka-plugin/plugin\nmvn hpi:run\n\nOn the Global Configuration page, users can input Kubernetes server information and credentials. Then they can start Apache Kafka with only one button click.\n\nWhen users click Start Kafka on Kubernetes button, Jenkins will create a Kubernetes client from the information and then apply Zookeeper and Kafka YAML specification files from resources.\n\nHelm Chart\n\nHelm chart for Remoting over Apache Kafka plugin is based on stable/jenkins chart and incubator/kafka chart. As of now, the chart is still a Work in Progress because it is still waiting for Cloud API implementation in Phase 2. However, you can check out the demo chart with a single standalone Remoting Kafka Agent:\n\ngit clone -b demo-helm-phase-1 https://github.com/longngn/remoting-kafka-plugin.git\ncd remoting-kafka-plugin\nK8S_NODE=./helm/jenkins-remoting-kafka/do.sh start\n\nThe command do.sh start will do the following steps:\n\nInstall the chart (with Jenkins and Kafka).\n\nLaunch a Kafka computer on Jenkins controller by applying the following JCasC.\n\njenkins:\n  nodes:\n    - permanent:\n        name: \"test\"\n        remoteFS: \"/home/jenkins\"\n        launcher:\n          kafka: {}\n\nLaunch a single Remoting Kafka Agent pod.\n\nYou can check the chart state by running kubectl, for example:\n\n$ kubectl get all -n demo-helm\nNAME                                    READY   STATUS    RESTARTS   AGE\npod/demo-jenkins-998bcdfd4-tjmjs        2/2     Running   0          6m30s\npod/demo-jenkins-remoting-kafka-agent   1/1     Running   0          4m10s\npod/demo-kafka-0                        1/1     Running   0          6m30s\npod/demo-zookeeper-0                    1/1     Running   0          6m30s\n\nNAME                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE\nservice/demo-0-external           NodePort    10.106.254.187 19092:31090/TCP              6m30s\nservice/demo-jenkins              NodePort    10.101.84.33 8080:31465/TCP               6m31s\nservice/demo-jenkins-agent        ClusterIP   10.97.169.65 50000/TCP                    6m31s\nservice/demo-kafka                ClusterIP   10.106.248.10 9092/TCP                     6m30s\nservice/demo-kafka-headless       ClusterIP   None 9092/TCP                     6m30s\nservice/demo-zookeeper            ClusterIP   10.109.222.63 2181/TCP                     6m30s\nservice/demo-zookeeper-headless   ClusterIP   None 2181/TCP,3888/TCP,2888/TCP   6m31s\n\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/demo-jenkins   1/1     1            1           6m30s\n\nNAME                                     DESIRED   CURRENT   READY   AGE\nreplicaset.apps/demo-jenkins-998bcdfd4   1         1         1       6m30s\n\nNAME                              READY   AGE\nstatefulset.apps/demo-kafka       1/1     6m30s\nstatefulset.apps/demo-zookeeper   1/1     6m30s\n\nNext Phase Plan\n\nImplement Cloud API to provision Remoting Kafka Agent. ( JENKINS-57668)\n\nIntegrate Cloud API implementation with Helm chart. ( JENKINS-58288)\n\nUnit tests and integration tests.\n\nRelease version 2.0 and address feedbacks. ( JENKINS-58289)\n\nLinks\n\nPhase 1 Demo Video\n\nPhase 1 Presentation Slides\n\nRemoting over Apache Kafka plugin\n\nProject Page\n\nGitter Channel","title":"Remoting over Apache Kafka plugin with Kafka launcher in Kubernetes","tags":["remoting","kafka","kubernetes","helm","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg","srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/77b35/longnguyen.jpg 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/d4a57/longnguyen.jpg 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/68974/longnguyen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/ef6ff/longnguyen.webp 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/8257c/longnguyen.webp 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/6766a/longnguyen.webp 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/22bfc/longnguyen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/longnguyen.jpg"},"blog":null,"github":"longngn","html":"<div class=\"paragraph\">\n<p>Long is a Software Engineering student at FPT University, Vietnam. He started to contribute for Jenkins from Google Summer of Code 2019 for the project <a href=\"https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/\">Remoting over Apache Kafka with Kubernetes features</a></p>\n</div>","id":"longnguyen","irc":null,"linkedin":null,"name":"Long Nguyen","slug":"/blog/authors/longnguyen/","twitter":null}]}},{"node":{"date":"2019-07-15T00:00:00.000Z","id":"41025c8c-be64-5725-9360-c21fc24cca93","slug":"/blog/2019/07/15/pipeline-config-history-plugin/","strippedHtml":"Pipelines are the efficient and modern way how to create jobs in Jenkins.\nTo recognize pipeline changes quickly and easily, we developed the Pipeline Configuration History plugin.\nThis plugin detects changes of pipelines and provides the user an option to view changes between two builds (diffs) of pipeline configurations visibly and traceably.\n\nHow everything started\n\nIt all started 10 years ago — with classical job types (e.g. Freestyle, Maven, etc.).\nEvery once in a while users contacted us because their jobs failed to build overnight.\nWhy did the job fail?\nWas the failure related to a job configuration change?\nThe users' typical answer was: \"We didn’t change anything!\", but is that really true?\nWe thought about this and decided to develop a plugin that helped us solve this problem.\nThis was the idea and the beginning of Job Configuration History.\n\nNow it was possible to view changes of job configurations (like other branches, JDK versions, etc.) and more often the reason for breaking builds were changes of job configurations.\n\nOver the years the plugin got developed and is still under development.\nNew functions were added, that not only view job configurations, but also changes of global and agent configurations.\nIt is also possible to recover old configuration versions.\nToday the plugin has more than 30,000 installations.\nFor many years JobConfigHistory relieves our daily work — with more than 3,000 Jenkins jobs!\nThen there was a new type of job: Pipelines.\n\nPipelines - something new was needed\n\nPipeline jobs are fundamentally different than classical job types .\nWhile classic job types are configured via the Jenkins GUI, Pipeline jobs are configured as code.\nEvery pipeline job indeed gets created via the Jenkins GUI, however that is not necessarily where the pipeline configuration is located.\nPipelines can be configured:\n\nDirectly in the Jenkins job as script.\nThe code gets inserted directly in the job configuration page.\n\nAs Jenkinsfile in the source code management system (SCM): The pipeline configuration is defined in a text file (Jenkinsfile) in the SCM.\nIn the job itself only the path to the repository of the Jenkinsfile is configured.\nDuring the build the Jenkinsfile gets checked out from the SCM and processed.\n\nAs a shared library: A part of the pipeline configuration gets moved to separate files that can be used by several jobs.\nThese files are also saved in the SCM.\nEven so a Jenkinsfile is still needed (or a pipeline script in the job).\n\nWith every save operation of the job configuration, JobConfigHistory creates a copy of the actual job configuration if something has changed.\nThat only works for pipeline jobs if the pipeline configuration is inserted in the job configuration page as script.\nChanges in the Jenkinsfile or the shared libraries are not detected by JobConfigHistory.\nYou have to use the SCM system to view changes of the Jenkinsfile or the shared libraries.\nIt is complex and time intensive to find a correlation between the time of a build and a change to the Jenkinsfile or shared library.\n\nThis new problem is much more than JobConfigHistory.  A new solution was needed to detect pipeline changes and show these changes in Jenkins.\nSo we developed Pipeline Configuration History.\n\nDuring every pipeline run the Jenkinsfile and related shared libraries are saved in the builds directory of the job.\nPipeline Configuration History saves changes of the pipeline files between the last run and the previous run as history events.\nTherefore when a pipeline job ceases to build successfully, you can check if something has changed on any used pipeline file.\nYou can also see the build where changes occurred.\n\nBecause a pipeline configuration can consist of several files where changes could have occurred, only files with changes between two builds are shown in the diff.\nThat makes the whole thing more compact and effective:\n\nBut sometimes you may want to show more than the differences between pipeline files.  You may want to see which pipeline files are in use or the content of those files when they were used.\nSo it’s possible to view all files and their content.\nIf required you can download them as well:\n\nConclusion\n\nWe use Pipeline Configuration History successfully in production. It has helped us from the very first day as we solved problems that occurred due to pipeline configuration changes.\nPipeline Configuration History won’t replace Job Configuration History.\nThe plugins have different use cases.\nMany times small changes on job or pipeline configurations also have big impacts.\nBecause of the correlation in time between changes of job or pipeline configurations and different build behavior, it is now possible to substantially reduce the time and effort to analyze build failures.\nThe Job Configuration History and Pipeline Configuration History plugins let us help our users in consulting and in solving issues.  We resolve problems much faster through easy access to the configuration history of jobs.  These plugins are essential for our daily work.","title":"Introducing the Pipeline Configuration History Plugin","tags":["pipeline","plugins"],"authors":[{"avatar":null,"blog":null,"github":"Jochen-A-Fuerbacher","html":"<div class=\"paragraph\">\n<p>Jochen is a software developer for development infrastructure at 1&amp;1 Telecommunication.\nHe has been working with Jenkins for many years and develops some Jenkins plugins.</p>\n</div>","id":"jochenafuerbacher","irc":null,"linkedin":null,"name":"Jochen A. Fürbacher","slug":"/blog/authors/jochenafuerbacher/","twitter":null},{"avatar":null,"blog":null,"github":"stefanbrausch","html":"<div class=\"paragraph\">\n<p>Stefan is a software developer for development infrastructure at 1&amp;1 Telecommunication.\nHe has been working with Jenkins for many years and develops some Jenkins plugins.</p>\n</div>","id":"stefanbrausch","irc":null,"linkedin":null,"name":"Stefan Brausch","slug":"/blog/authors/stefanbrausch/","twitter":null},{"avatar":null,"blog":null,"github":"RobinRSchulz","html":"<div class=\"paragraph\">\n<p>Robin is a software developer for development infrastructure at 1&amp;1 Telecommunication.\nHe has been working with Jenkins for many years and develops some Jenkins plugins.</p>\n</div>","id":"robinrschulz","irc":null,"linkedin":null,"name":"Robin Schulz","slug":"/blog/authors/robinrschulz/","twitter":null}]}},{"node":{"date":"2019-07-17T00:00:00.000Z","id":"9f73ac2f-d418-5bf3-8f3c-f90ae712af6e","slug":"/blog/2019/07/17/DevOps-World-Jenkins-World-2019-San-Francisco-Lunch-Demos/","strippedHtml":"If you’re looking for more opportunities to learn Jenkins and Jenkins X during the lunch hours while at DevOps World - Jenkins World 2019 San Francisco , come join us at the Jenkins and Jenkins X Community Booth!\n\nIf you don’t yet have your pass for DevOps World - Jenkins World 2019 San Francisco , and don’t want to miss out on the fun, you can get yours using JWFOSS for a 30% discount.\n\nDuring lunch hours we are scheduling the following demo briefs at the Jenkins and Jenkins X Community Booth:\n\nWednesday  August 14, 2019\n\n12:10 - 12:25pm \tFaster Git Mark Waite\n\nAttendees will learn the techniques they can use with Jenkins to make their systems clone and update git repositories faster and with less disc space.\n\n12:25 - 12:40pm\tObservability in Jenkins X Oscar Medina\n\nIf you are using Jenkins X, you’re already building at rapid pace.  However, most miss the opportunity to gain real insights into their build and release pipeline.  I’ll show you how you can increase observability by activating metric capture and analysis during a containerized application deployment with Jenkins X.  This  entails modifying the declarative Tekton pipelines.\n\n12:40 - 12:55pm\tFrom setup to build status on the command line Martin d’Anjou\n\nUsing bash, groovy, JCasC and the jenkins-rest, we demonstrate how to setup Jenkins from scratch, upload a configuration as code yaml file, create folders and jobs, run a build, and track it to its completion, all from the command line, without ever touching the GUI.\n\n12:55 - 1:10pm\t\tDevOps without Quality: An IT Horror Story\tLaura Keaton\n\nDevOps, the current IT Industry sweetheart, has a dark secret that has victimized organizations on their transformational journey. Investigate two case studies that left development and delivery teams in tatters and how quality engineering solutions could have prevented their disastrous outcomes.\n\n1:10 - 1:25pm\tSecuring Your Jenkins Container Pipeline with Open Source Tools Christian Wiens\n\nDiscuss the security pitfalls of containers and how embedding an open source image scanning and policy based compliance tool like Anchore into your CI/CD pipeline can mitigate this risk.\n\nThursday  August 15, 2019\n\n12:25 - 12:35pm\tResults from the 2019 Jenkins Google Summer of Code Martin d’Anjou\n\nIn 2019, the Jenkins project participated in the Google Summer of Code. This is an annual, international, program which encourages college-aged students to participate in open source projects during the summer break between classes. In 2019, we had dozens of applications and many student projects. In this session, we will showcase the students' projects and talk about what they bring to the Jenkins ecosystem.\n\n12:35 - 12:45pm\t\tPlugin installation CLI Tool Natasha Stopa\n\nThis talk will demo the new plugin installation tool done as part of a Google Summer of Code project. It will show the CLI features and how the library has been incorporated into other areas of Jenkins.\n\n12:45 - 12:55pm\t\tSysdig Secure Jenkins Plugin Marky Jackson\n\nSysdig Secure is a container security platform that brings together docker image scanning and run-time protection to identify vulnerabilities, block threats, enforce compliance, and audit activity across your microservices. The Sysdig Secure Jenkins plugin can be used in a Pipeline job, or added as a build step to a Freestyle job, to automate the process of running an image analysis, evaluating custom policies against images, and performing security scans.\n\n12:55 - 1:10pm\t\tUsing React for plugin UI Jeff Pearce\n\nThe working hours plugin has a date driven UI. During this summer’s Google Summer of Code, our student rewrite the UI in React, so that we could take advantage open source modules such as calendar pickers. I’ll talk about how the student approached the UI, demonstrate the UI and talk about particular challenges we faces.\n\n1:10 - 1:25pm\t\tJenkins GKE Plugin Craig Barber\n\nIn this demo we will showcase the Jenkins GKE plugin, newest addition to GCP’s suite of officially supported plugins. We’ll show how to leverage this plugin to deploy applications built in Jenkins pipelines to multiple clusters running in GKE.\n\nGrab your lunch and join us at the community theater!","title":"DevOps World - Jenkins World 2019 San Francisco: Lunch Time Demos","tags":["event","devopsworldjenkinsworld2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2019-07-21T00:00:00.000Z","id":"e7a046ff-9ae1-585e-826a-dc8f41a2ab04","slug":"/blog/2019/07/21/Jenkins-code-coverage-diff-for-pull-request/","strippedHtml":"Hello.\n\nAs you may know, during the last year GSoC Mr. Shenyu Zheng was working on the Jenkins Code Coverage API Plugin. With Mr. Zheng we made a change so the plugin now is able to check the difference in code coverage between pull requests and target branches.\n\nIn lots of projects it is a common practice to track if unit tests code coverage doesn’t decrease. So, with this plugin, you may skip separate services that track code coverage and have this feature right in your favorite CI system.\n\nHow it works\n\nWhen you build a PR in Jenkins, using plugins like Github or Bitbucket Branch Source, that use SCM API Plugin, your PR knows what target branch commit it is based on. (The commit may change because of Discover pull requests from origin strategies). To calculate the diff, when you publish your coverage from PR, it looks for the target branch build for the commit that your PR was based on. If it finds the build on the target branch, it looks for any published code coverage for this target branch build. In case the build has it, the plugin calculates the percentage diff for the line coverage and shows it on the pull request build page. Also, it gives you a link to the target branch build that was used for the comparison.\n\nThat it how it looks like:\n\nDecreased coverage\n\nIncreased coverage\n\nHow to enable code coverage diff for pull requests\n\nTo enable this behavior you need to publish your code coverage with the calculateDiffForChangeRequests flag equals true, like this:\n.Jenkinsfile\n\nnode(...) {\n  ...\n  // Here we are using the istanbulCoberturaAdapter\n  publishCoverage adapters: [istanbulCoberturaAdapter('cobertura-coverage.xml')],\n    sourceFileResolver: sourceFiles('NEVER_STORE'),\n    calculateDiffForChangeRequests: true\n\n  ...\n}\n\nLinks and Feedback\n\nIf you have some questions about this behavior, please ask me in email.\n\nYou are free to contribute to this plugin to make it better for everyone. There are a lot of interesting features that can be added and issues that can be solved. Also, you can write some new plugins for other code coverage formats that use the Code Coverage API plugin as a base.\n\nHere is the repo of the plugin - Code Coverage API Plugin\n\nThank you.","title":"Jenkins code coverage diff in pull requests","tags":["plugins","codecoverage"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/19e71/asavanchuk.jpg","srcSet":"/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/77b35/asavanchuk.jpg 32w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/d4a57/asavanchuk.jpg 64w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/19e71/asavanchuk.jpg 128w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/68974/asavanchuk.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/ef6ff/asavanchuk.webp 32w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/8257c/asavanchuk.webp 64w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/6766a/asavanchuk.webp 128w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/22bfc/asavanchuk.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/asavanchuk.jpg"},"blog":null,"github":"tempora-mutantur","html":"<div class=\"paragraph\">\n<p>Software developer from Minsk, Belarus.</p>\n</div>","id":"asavanchuk","irc":null,"linkedin":null,"name":"Aliaksei Savanchuk","slug":"/blog/authors/asavanchuk/","twitter":null}]}},{"node":{"date":"2019-07-25T00:00:00.000Z","id":"c8dcfc2d-fe9b-51ed-b1d8-8da5973e144c","slug":"/blog/2019/07/25/azure-artifact-manager/","strippedHtml":"Jenkins stores all generated artifacts on the controller server filesystem. This presents a couple of challenges especially when you try to run Jenkins in the cloud:\n\nAs the number of artifacts grow, your Jenkins controller will run out of disk space. Eventually, performance can be impacted.\n\nFrequent transfer of files between agents and controller may cause load, CPU or network issues which are always hard to diagnose.\n\nSeveral existing plugins allow you to manage your artifacts externally. To use these plugins, you need to know how they work and perform specific steps in your job’s configuration. And if you are new to Jenkins, you may find it hard to follow existing samples in Jenkins tutorial like Recording tests and artifacts.\n\nSo, if you are running Jenkins in Azure, you can consider automatically managing new artifacts on Azure Storage. The new Azure Artifact Management plugin allows you to store artifacts in Azure blob storage and simplify your existing Jenkins jobs that contain Jenkins general artifacts management steps. This approach will give you all the advantages of a cloud storage, with less effort on your part to maintain your Jenkins instance.\n\nConfiguration\n\nAzure storage account\n\nFirst, you need to have an Azure Storage account. You can skip this section if you already have one. Otherwise, create an Azure storage account for storing your artifacts. Follow this tutorial to quickly create one. Then navigate to Access keys in the Settings section to get the storage account name and one of its keys.\n\nExisting Jenkins instance\n\nFor existing Jenkins instance, make sure you install the Azure Artifact Manager plugin. Then you can go to your Jenkins System Configuration page and locate the Artifact Management for Builds section. Select the Add button to configure an Azure Artifact Storage. Fill in the following parameters:\n\nStorage Type: Azure storage supports several storage types like blob, file, queue etc. This plugin currently supports blob storage only.\n\nStorage Credentials: Credentials used to authenticate with Azure storage. If you do not have an existing Azure storage credential in you Jenkins credential store, click the Add button and choose Microsoft Azure Storage kind to create one.\n\nAzure Container Name: The container under which to keep your artifacts. If the container name does not exist in the blob, this plugin automatically creates one for you when artifacts are uploaded to the blob.\n\nBase Prefix: Prefix added to your artifact paths stored in your container, a forward slash will be parsed as a folder. In the following screenshot, all your artifacts will be stored in the “staging” folder in the container “Jenkins”.\n\nNew Jenkins instance\n\nIf you need to create a new Jenkins controller, follow this tutorial to quickly create an Jenkins instance on Azure. In the Integration Settings section, you can now set up Azure Artifact Manager directly. Note that you can change any of the configuration after your Jenkins instance is created. Azure storage account and credential, in this case, are still prerequisites.\n\nUsage\n\nJenkins Pipeline\n\nHere are a few commonly used artifact related steps in pipeline jobs; all are supported to push artifacts to the Azure Storage blob specified.\n\nYou can use archiveArtifacts step to archive target artifacts into Azure storage. For more details about archiveArtifacts step, see the Jenkins archiveArtifacts setp documentation.\n\nnode {\n  //...\n  stage('Archive') {\n    archiveArtifacts \"pattern\"\n  }\n}\n\nYou can use the unarchive step to retrieve the artifacts from Azure storage. For more details about unarchive step, please see unarchive step documentation.\n\nnode {\n  //...\n  stage('Unarchive') {\n    unarchive mapping: [\"pattern\": '.']\n  }\n}\n\nTo save a set of files so that you can use them later in the same build (generally on another node or workspace), you can use stash step to store files into Azure storage for later use. Stash step documentation can be found here.\n\nnode {\n  //...\n  stash name: 'name', includes: '*'\n}\n\nYou can use unstash step to retrieve the files saved with stash step from Azure storage to the local workspace. Unstash documentation can be found here.\n\nnode {\n  //...\n  unstash 'name'\n}\n\nFreeStyle Job\n\nFor a FreeStyle Jenkins job, you can use Archive the artifacts step in Post-build Actions to upload the target artifacts into Azure storage.\n\nThis Azure Artifact Manager plugin is also compatible with some other popular management plugins, such as the Copy Artifact plugin. You can still use these plugins without changing anything.\n\nTroubleshooting\n\nIf you have any problems or suggestions when using Azure Artifact Manager plugin, you can file a ticket on Jenkins JIRA for the azure-artifact-manager-plugin component.\n\nConclusion\n\nThe Azure Artifact Manager enables a more cloud-native Jenkins. This is the first step in the Cloud Native project. We have a long way to go to get Jenkins to run on cloud environments as a true “Cloud Native” application. We need help and welcome your participation and contributions to make Jenkins better. Please start contributing and/or give us feedback!","title":"Managing Jenkins Artifacts with the Azure Artifact Manager Plugin","tags":["general","azure","plugin"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/19e71/jshen.jpg","srcSet":"/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/77b35/jshen.jpg 32w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/d4a57/jshen.jpg 64w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/19e71/jshen.jpg 128w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/68974/jshen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/ef6ff/jshen.webp 32w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/8257c/jshen.webp 64w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/6766a/jshen.webp 128w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/22bfc/jshen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/jshen.jpg"},"blog":null,"github":"gavinfish","html":"<div class=\"paragraph\">\n<p>Software engineer at Microsoft. Focusing on DevOps and cloud native.</p>\n</div>","id":"jshen","irc":null,"linkedin":null,"name":"Jie Shen","slug":"/blog/authors/jshen/","twitter":null}]}},{"node":{"date":"2019-07-30T00:00:00.000Z","id":"9f72bb8f-5b81-55ef-8ffc-f58fb42841f2","slug":"/blog/2019/07/30/plugin-management-tool-phase2-updates/","strippedHtml":"At end of the first GSoC phase, I\nannounced\nthe first alpha release of the CLI tool and library that will help centralize\nplugin management and make plugin tooling easier.\n\nPhase 2 has mainly been focused on improving upon the initial CLI and library written\nin Coding Phase 1. In particular, we’ve been focusing on getting the tool ready to\nincorporate into the Jenkins Docker Image to replace the\ninstall-plugins.sh bash script\nto download plugins.  This work included parsing improvements so that blank lines and comments in the\nplugins.txt file are filtered out, allowing update centers and the plugin download\ndirectory to be set via environment variables or CLI Options, creating Windows\ncompatible defaults, and fixing a bug in which dependencies for specific\nplugin versions were not always getting resolved correctly.\n\nIn parallel to getting the tool ready for Jenkins Docker integration, Phase 2 saw\nthe addition of several new features.\n\nYaml Input\n\nIn addition to specifying the plugins they want to download via the --plugins\nCLI option or through a .txt file, users can now use a Jenkins yaml file with a\nplugins root element.\n\nSay goodbye to the days of specifying incremental\nplugins like incrementals;org.jenkins-ci.plugins.workflow;2.20-rc530.b4f7f7869384 -\n  you can enter the artifactId, groupId, and version to specify an incremental plugin.\n\nMaking the Download Process More Transparent\n\nPreviously, the plugin download process was not very transparent to users - it was\ndifficult to know the final set of plugins that would be downloaded after pulling in\nall the dependencies.  Instead of determing the set of plugins that will be downloaded\nat the time of download, users now have the option to see the full set of plugins\nand their versions that will be downloaded in advance. With the --list CLI\noption, users can see all currently downloaded and bundled plugins, the set of all\nplugins that will be downloaded, and the effective plugin set - the set of all\nplugins that are already downloaded or will be downloaded.\n\nViewing Information About plugins\n\nNow that you know which plugins will be downloaded, wouldn’t it be nice to know\nif these are the latest versions or if any of the versions you want to install have\nsecurity warnings?  You can do that now too.\n\nNext Steps and Additional Information\n\nThe updates mentioned in this blog will be released soon so you can try them out.\nThe focus of Phase 3 will be to continue to iterate upon and improve the library\nand CLI. We hope to release a first version and submit a pull request to Jenkins Docker soon.\nThanks to everyone who has already tried it out and given feedback! I will also be\npresenting my work at DevOps World\nin San Francisco in a few weeks.  You can use the code PREVIEW for a discounted registration\n($799 instead of $1,499).\n\nFeel free to reach out through\nthe Plugin Installation Manager CLI Tool Gitter chat or through\nthe Jenkins Developer Mailing list. I would love to get your questions, comments, and feedback!\nWe have meetings Tuesdays and Thursdays at 6PM UTC.\n\nPhase 2 Presentation Slides\n\nPhase 2 Recorded Demo\n\nJira Issue Search\n\nRepository","title":"Plugin Management Library and CLI Tool Phase 2 GSoC Updates","tags":["plugins","pluginmanagement","platform-sig","cli","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#280818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg","srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/405b9/stopalopa.jpg 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7b6be/stopalopa.jpg 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/ebcfb/stopalopa.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/0ade5/stopalopa.webp 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/5b0b1/stopalopa.webp 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/96834/stopalopa.webp 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/805f6/stopalopa.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":184}},"publicURL":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/stopalopa.jpg"},"blog":null,"github":"stopalopa","html":"<div class=\"paragraph\">\n<p>Natasha is a Master&#8217;s student at Penn State University. She was accepted to Google Summer of Code 2019 for a project on creating <a href=\"https://jenkins.io/projects/gsoc/2019/plugin-installation-manager-tool-cli/\">a plugin management tool</a>.\nIn her spare time she enjoys spending time outdoors, listening to podcasts and cuddling with her cat.</p>\n</div>","id":"stopalopa","irc":null,"linkedin":null,"name":"Natasha Stopa","slug":"/blog/authors/stopalopa/","twitter":"stopamine"}]}},{"node":{"date":"2019-08-16T00:00:00.000Z","id":"765c4285-c91b-5554-af65-6b25fe8433c3","slug":"/blog/2019/08/16/folder-auth-plugin/","strippedHtml":"During my Google Summer of Code Project,\nI have created the brand new Folder Auth Plugin for easily\nmanaging permissions to projects organized in folders from the Folders plugin.\nThis new plugin is designed for fast permission checks with easy-to-manage roles.\nThe 1.0 version of the plugin has just been released and can be downloaded\nfrom your Jenkins' Update center.\n\nThis plugin was inspired by the Role Strategy Plugin\nand brings about performance improvements and makes managing roles much easier.\nThe plugin was developed to overcome performance limitations of the Role Strategy\nplugin on a large number of roles. At the same time, the plugin addresses one\nof the most popular ways of organizing projects in Jenkins, through folders.\nThe plugin also has a new UI with more improvements to come in the future.\n\nThe plugin supports three types of roles which are applicable at different places\nin Jenkins.\n\nGlobal Roles: applicable everywhere in Jenkins\n\nAgent Roles: restrict permissions for multiple agents connected to your instance\n\nFolder Roles: applicable to multiple jobs organized inside folders\n\nPerformance Improvements over Role Strategy Plugin\n\nThis plugin, unlike the Role Strategy plugin, does not use regular expressions\nfor finding matching projects and agents giving us performance improvements\nand makes administrators' lives easier. To reduce the number of roles required\nto be managed, permissions given to a folder through a folder role get inherited\nto all of its children. This is useful for giving access to multiple projects\nthrough a single role. Similarly, an agent role can be applied to multiple agents\nand assigned to multiple users.\n\nThis plugin is designed to outperform Role Strategy Plugin in permission\nchecks. The improvements were measured using the\nmicro-benchmark framework\nI had created during the first phase of my GSoC project.\nBenchmarks for identical configurations for both plugin show that the\npermissions check are up to 934x faster for 500 global roles when compared to\nthe global roles from the Role Strategy 2.13, which in itself contains several\nperformance improvements. Comparing folder roles with Role Strategy’s project\nroles, a permission check for access to a job almost 15x faster for 250 projects\norganized in two-level deep folders on an instance with 150 users. You can see\nthe benchmarks and the result comparisons\nhere.\n\nJenkins Configuration as Code Support\n\nThe plugin supports Jenkins Configuration-as-Code so you can configure permissions\nwithout going through the Web UI. A YAML configuration looks like this:\n\njenkins:\n  authorizationStrategy:\n    folderBased:\n      globalRoles:\n        - name: \"admin\"\n          permissions:\n            - id: \"hudson.model.Hudson.Administer\"\n              # ...\n          sids:\n            - \"admin\"\n        - name: \"read\"\n          permissions:\n            - id: \"hudson.model.Hudson.Read\"\n          sids:\n            - \"user1\"\n      folderRoles:\n        - folders:\n            - \"root\"\n          name: \"viewRoot\"\n          permissions:\n            - id: \"hudson.model.Item.Read\"\n          sids:\n            - \"user1\"\n      agentRoles:\n        - agents:\n            - \"agent1\"\n          name: \"agentRole1\"\n          permissions:\n            - id: \"hudson.model.Computer.Configure\"\n            - id: \"hudson.model.Computer.Disconnect\"\n          sids:\n            - \"user1\"\n\nREST APIs with Swagger support\n\nThe plugin provides REST APIs for managing roles with OpenAPI specifications\nthrough Swagger.json. You can check out the Swagger API on\nSwaggerHub.\nSwaggerHub provides stubs in multiple languages which can be downloaded and\nused to interact with the plugin. You can also see some sample requests from\nthe command line using curl.\n\nWhat’s next\n\nIn the (not-too-distant) future, I would like to work on improving the UI and\nmake the plugin easier to work with. I would also like to work on improving the\nAPIs, documentation and more optimizations for improving the plugin’s performance.\n\nLinks and Feedback\n\nI would love to hear your comments and suggestions. Please feel free to reach\nout to me through either the\nRole Strategy Plugin Gitter chat or through\nJenkins Developer Mailing list.\n\nPresentation slides for second phase evaluations\n\nDocumentation for the Folder Auth Plugin\n\nDemo of the Folder Authorization plugin","title":"Introducing new Folder Authorization Plugin","tags":["plugins","security","performance","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg","srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f4523/abhyudayasharma.jpg 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1e7bb/abhyudayasharma.jpg 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/b48b6/abhyudayasharma.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1fd06/abhyudayasharma.webp 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/9edd6/abhyudayasharma.webp 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f5f75/abhyudayasharma.webp 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/05d06/abhyudayasharma.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}},"publicURL":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/abhyudayasharma.jpg"},"blog":null,"github":"AbhyudayaSharma","html":"<div class=\"paragraph\">\n<p>Abhyudaya is a Computer Science student at Shiv Nadar University, India.\nHe is participating in Google Summer of Code 2019 to improve the performance\nof the <a href=\"https://github.com/jenkinsci/role-strategy-plugin\">Role Strategy Plugin</a>.</p>\n</div>","id":"abhyudayasharma","irc":null,"linkedin":null,"name":"Abhyudaya Sharma","slug":"/blog/authors/abhyudayasharma/","twitter":null}]}},{"node":{"date":"2019-08-19T00:00:00.000Z","id":"a8a6f50d-13d8-5ff0-b148-cd0ef7696ecf","slug":"/blog/2019/08/19/remoting-kafka-kubernetes-release-2.0/","strippedHtml":"I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. After a successful Phase 1, finally the 2.0 version of the plugin has been released. The 2.0 version provides seamless integration with Kubernetes environment.\n\n2.0 version features\n\nStart a simple Apache Kafka server in Kubernetes.\n\nDynamically provision Remoting Kafka Agent in Kubernetes.\n\nHelm chart to bootstrap the whole system in Kubernetes.\n\nStart a simple Apache Kafka server in Kubernetes\n\nUse of the plugin requires that users have a configured Apache Zookeeper and Apache Kafka server, which could be intimidating for people who just want to try out the plugin. Now, users can start a simple, single-node Apache Kafka server in Kubernetes environment with just one button click.\n\nOn the Global Configuration page, users can input Kubernetes server information and credentials. When users click Start Kafka on Kubernetes button, Jenkins will create a Kubernetes client from the information and then apply Apache Zookeeper and Apache Kafka YAML specification files from resources. After downloading images and creating containers, it will automatically update Apache Zookeeper and Apache Kafka URLs into respective fields.\n\nDynamically provision Remoting Kafka Agent in Kubernetes\n\nWith previous version, users have to manually add/remove nodes so it is hard to scale builds quickly. Kubernetes plugin allows us to dynamically provision agents in Kubernetes but it is designed for JNLP agent. With this new version, Remoting Kafka agent can also be provisioned automatically in Kubernetes environment.\n\nUsers can find the new feature in Cloud section in /configure. Here users could input Kubernetes connection parameters and desired Remoting Kafka agent properties including labels. When new build with matching labels gets started and there are no free nodes, Cloud will automatically provision Remoting Kafka agent pod in Kubernetes to run the build.\n\nHelm Chart\n\nHelm chart for Remoting over Apache Kafka plugin is based on stable/jenkins chart and incubator/kafka chart. You can follow the instruction here to install a demo ready-to-use Helm release. Your kubectl get all should look like this:\n\nNAME                                READY   STATUS    RESTARTS   AGE\npod/demo-jenkins-64dbd87987-bmndf   1/1     Running   0          2m21s\npod/demo-kafka-0                    1/1     Running   0          2m21s\npod/demo-zookeeper-0                1/1     Running   0          2m21s\n\nNAME                              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\nservice/demo-jenkins              NodePort    10.108.238.56 8080:30386/TCP               2m21s\nservice/demo-jenkins-agent        ClusterIP   10.98.85.184 50000/TCP                    2m21s\nservice/demo-kafka                ClusterIP   10.109.231.58 9092/TCP                     2m21s\nservice/demo-kafka-headless       ClusterIP   None 9092/TCP                     2m21s\nservice/demo-zookeeper            ClusterIP   10.103.2.231 2181/TCP                     2m21s\nservice/demo-zookeeper-headless   ClusterIP   None 2181/TCP,3888/TCP,2888/TCP   2m21s\n\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/demo-jenkins   1/1     1            1           2m21s\n\nNAME                                      DESIRED   CURRENT   READY   AGE\nreplicaset.apps/demo-jenkins-64dbd87987   1         1         1       2m21s\n\nNAME                              READY   AGE\nstatefulset.apps/demo-kafka       1/1     2m21s\nstatefulset.apps/demo-zookeeper   1/1     2m21s\n\nHow to Contribute\n\nYou are welcome to try out the plugin and integrate it into your current setup. If you find out any bug or if you would like to request new feature, you can create ticket at JIRA. If you would like to contribute code directly, you can create pull requests in the GitHub page below.\n\nLinks\n\nPhase 2 Demo Video\n\nPhase 2 Presentation Slides\n\nPhase 1 Blog Post\n\nPhase 1 Demo Video\n\nPhase 1 Presentation Slides\n\nRemoting over Apache Kafka plugin source code\n\nProject Page\n\nGitter Channel","title":"Remoting over Apache Kafka 2.0: Built-in Kubernetes support","tags":["remoting","kafka","kubernetes","helm","plugin","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg","srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/77b35/longnguyen.jpg 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/d4a57/longnguyen.jpg 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/68974/longnguyen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/ef6ff/longnguyen.webp 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/8257c/longnguyen.webp 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/6766a/longnguyen.webp 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/22bfc/longnguyen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/longnguyen.jpg"},"blog":null,"github":"longngn","html":"<div class=\"paragraph\">\n<p>Long is a Software Engineering student at FPT University, Vietnam. He started to contribute for Jenkins from Google Summer of Code 2019 for the project <a href=\"https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/\">Remoting over Apache Kafka with Kubernetes features</a></p>\n</div>","id":"longnguyen","irc":null,"linkedin":null,"name":"Long Nguyen","slug":"/blog/authors/longnguyen/","twitter":null}]}},{"node":{"date":"2019-08-22T00:00:00.000Z","id":"9628d1b5-66f4-59a3-9d83-6daecb429bb8","slug":"/blog/2019/08/22/devops-world/","strippedHtml":"Last week I had the privilege of attending DevOps World - Jenkins World in San\nFrancisco to present my Google Summer of Code project for plugin management. It was\nan amazing experience getting to meet people from all over world who are trying\nto make the development and release process easier and more efficient. I enjoyed\nlearning more about industry tools, processes, and standards, and meeting CI/CD\nexperts and contributors in the open source community.\n\nBelow is a summary of my experience. Thank you to the Jenkins project and CloudBees for making\n my trip and attendance possible!\n\nDay 1\n\nMonday was the Continuous Delivery Contributor Summit, which focused on projects\nunder the CDF umbrella.  After checking in and grabbing my badge, I was able to\nmeet up with some of the Google Summer of Code org admins. It was great\nbeing able to actually meet them in person after talking to them over video\nconferencing and chats all summer!\n\nTracy Miranda started the summit out by introducing the Continuous Delivery Foundation,\nwhich aims to provide a vendor neutral home to help and sustain open source projects\nfocusing on all aspects of continuous delivery.  Currently, Jenkins, Tekton, Spinnaker,\nand JenkinsX have joined the foundation.  Project updates were given for Jenkins,\nTekton, and JenkinsX.  In the afternoon, attendees split into different groups for\nunconference sessions.  I presented my project to the Jenkins group.  Afterwards,\nthere was free time to chat with other attendees about my project and the other Jenkins\nprojects. Lastly, lightning talks were given before everyone headed to the contributor\nappreciation event to grab some food and drinks.\n\nDay 2\n\nI attended the Jenkins Pipeline Fundamentals Short Course in the morning. Even\nthough I’m working on a project for Jenkins, there’s still a lot I don’t know so\nI just wanted to try to learn more.\n\nA lot of the afternoon sessions filled up, so I spent the afternoon trying to meet\nother people at the conference, before heading to the keynote. The keynote\ntalked more about the CDF and some of the backstory behind its origin.  This year is also a big anniversary for Jenkins - it has now been\naround for 15 years.\n\nAfter the keynote, I checked out a Women in Tech mixer and\nthe opening of the exibition hall. Probably my favorite swag I picked up was the\n\"Will Code for Beer\" stickers and a bottle of hot sauce.\n\nDay 3\n\nThe morning began with another keynote. Shawn Ahmed of CloudBees talked about the\nchallenges of visibility into bottlenecks of the development process and Rajeev Mahajan\ndiscussed how HSBC tackled DevOps.  The rest of the day I attended different sessions\non container tooling, implementing CI/CD in a cloud native environment, running\nJenkins on Jenkins, and database DevOps.\n\nAfter the sessions finished, I wandered\naround the expo until it closed, then joined some of the other conference attendees\nto have some fun at a ping pong bar nearby.\n\nDay 4\n\nThe final and last day of the conference was probably my favorite.  The morning\nkeynote revealed that Zhao Xiaojie had won an award for his work on Jenkins advocacy,\nsome other DevOps award panelists talked about their approaches to different challenges,\nthen David Stanke gave an enjoyable presentation about cloud native CI/CD. I was\nable to present my summer project and attend a few more sessions, including one\nabout DevOps at scale, and another about use cases for machine learning in CI/CD pipelines.\n\nThe last keynote given by James Governor was a thoughtful look into the current and\nfuture states of tech. How does tech look like it will scale in the coming years\nin the U.S. and across the world? How can we make tech more inclusive and accessible?\nWhat can we do to minimize our environmental footprint?  In particular, his points\non welcoming people from a non-traditional computer science background resonated with\nme since I’m currently undergoing my own career transition to tech.\n\nAfter the conference ended, I said goodbye to the remaining GSoC org admins before\nmeeting an old friend for dinner and bringing along some new friends I met at the\nconference.  I spent the remaining part of the night singing karaoke with\nthem before heading out of San Francisco the next morning.\n\nThanks again to everyone who supported me and encouraged me leading up to and during\nmy presentation, patiently answered my questions as I tried to gather more context\nabout CI/CD tools and practices, and made my first DevOps conference so enjoyable!","title":"My DevOps World - Jenkins World 2019 Experience","tags":["pluginmanagement","devopsworld2019","gsoc","gsoc2019","community","events"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#280818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg","srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/405b9/stopalopa.jpg 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7b6be/stopalopa.jpg 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/ebcfb/stopalopa.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/0ade5/stopalopa.webp 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/5b0b1/stopalopa.webp 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/96834/stopalopa.webp 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/805f6/stopalopa.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":184}},"publicURL":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/stopalopa.jpg"},"blog":null,"github":"stopalopa","html":"<div class=\"paragraph\">\n<p>Natasha is a Master&#8217;s student at Penn State University. She was accepted to Google Summer of Code 2019 for a project on creating <a href=\"https://jenkins.io/projects/gsoc/2019/plugin-installation-manager-tool-cli/\">a plugin management tool</a>.\nIn her spare time she enjoys spending time outdoors, listening to podcasts and cuddling with her cat.</p>\n</div>","id":"stopalopa","irc":null,"linkedin":null,"name":"Natasha Stopa","slug":"/blog/authors/stopalopa/","twitter":"stopamine"}]}},{"node":{"date":"2019-08-23T00:00:00.000Z","id":"67f9da03-2668-58bd-93f3-3bf494bb5192","slug":"/blog/2019/08/23/introduce-react-plugin-template/","strippedHtml":"The template’s main repo is at\nReact Plugin Template\n\nThis template is part of the project Working Hours UI Improvement during\nGoogle Summer of Code 2019, which improved the UI of Working Hours Plugin using this pattern to develop Jenkins plugins with React. The Working Hours Plugin repository can be found at Working Hours Plugin.\n\nOverview\n\nDeveloping plugin for Jenkins has always been easy to do with its Jelly based UI render system, but Jelly seems to be pretty heavy when we want to use more modernized frameworks like React, or if we need to make the plugin UI more customized. This is what this template is built for.\n\nAnd with React integrated, development of Jenkins plugin is more modernized, developer can now use tons of React libraries, the way to use libraries is now tinier and safer with webpack, in short, coding with Jenkins plugin can be much easier.\n\nFeatures\n\nFeature\nSummary\n\nReact Integrated\nReact is integrated, you can take full control of the UI\n\nUsing Iframe\nUsing iframe can create a new javascript env, we can get rid of some side effects of some polyfills which was added globally.(such as Prototype.js)\n\nMaven Lifecycle\nnpm commands are integrated into Maven lifecycle with help of Frontend Maven Plugin\n\nWebpack\nWebpack helps us reduce the size of the bundle, also avoids pollution on the global namespace.\n\nJenkins Crumb attached\nCrumb is attached to Axios client, now you can send requests in the way you used to do in React.\n\nExpress as devserver\nYou can run your react app in a standalone page so you can develop in webpack hot reload mode, also with webpack proxy, the standalone app is still accessible to the jenkins dev server.\n\nAxios as http client\nAxios hugely simplify the way to make requests.\n\nScreenshots\n\nExample Plugin UI\n\nManagement Link\n\nGetting Started\n\nClone the repo:\n\ngit clone https://github.com/jenkinsci/react-plugin-template.git\ncd react-plugin-template\n\nInstall the Maven dependencies and node modules.\n\nmvn install -DskipTests\n\nRun standalone React app with hot reload\n\nnpm run start\n\nRun plugin\n\nmvn hpi:run -Dskip.npm -f pom.xml\n\nSend HTTP requests\n\nAs Crumb Issuer is default enabled in Jenkins and each ajax request is required to contain a Jenkins Crumb in request header, so be sure to use the axiosInstance which is already set up with Jenkins Crumb and exported at src/main/react/app/api.js.\n\nexport const apiGetData = () => {\n  return axiosInstance.post(\"/data\");\n};\n\nOr if you want to use your own http client, remember to add the Jenkins Crumb to your request’s header, the Crumb’s key and content could be found at src/main/react/app/utils/urlConfig.js, then you can set the header like below.\n\nconst headers = {};\nconst crumbHeaderName = UrlConfig.getCrumbHeaderName();\n\nif (crumbHeaderName) {\n  headers[crumbHeaderName] = UrlConfig.getCrumbToken();\n}\n\nWrite your own request handler\n\nNow you can customize your request pattern as you want, also we need to write a handler.\n\nJenkins is using stapler to preprocess the requests, so if you need a request handler. For example and also in this template, you can use an Action class to create a sub-url, and then a StaplerProxy to proxy the request like a router. More info about handlers can be found in the Stapler Reference.\n\nExample handler\n\nManagementLink would get the request and then hand it off to the PluginUI\n\n@Extension\npublic class PluginManagementLink extends ManagementLink implements StaplerProxy {\n\n    PluginUI webapp;\n\n    public Object getTarget() {\n        return webapp;\n    }\n\n    public String getUrlName() {\n        return \"react-plugin-template\";\n    }\n}\n\nPluginUI, stapler would then find methods in the target class, in this case, it finds doDynamic, then we can choose the next handler by return the methods result, in this case, getTodos or setTodos, and PluginUI just function like a url router.\n\npublic class PluginUI{\n    public HttpResponse doDynamic(StaplerRequest request) {\n        ...\n\n        List params = getRequestParams(request);\n\n        switch (params.get(0)) {\n        case \"get-todos\":\n            return getTodos();\n        case \"set-todos\":\n            return setTodos(request);\n        }\n        ...\n    }\n}\n\nData Persistence\n\nYou can save your data with a descriptor\n\n@Extension\npublic class PluginConfig extends Descriptor implements Describable\n\nAnd after each time you change data, call save() to persist them.\n\npublic void setTodos(\n            @CheckForNull List value) {\n        this.todos = value;\n        save();\n    }\n\nAnd in your handler, you can get the config class by calling\n\nconfig = ExtensionList.lookup(PluginConfig.class).get(0);\n\nCustomize your plugin\n\nBe sure to modify all the occurrence of react-template\n\nAt org/jenkinsci/plugins/reactplugintemplate/PluginUI/index.jelly, change the iframe’s id and its source url.\n\nAt src/main/react/app/utils/urlConfig.js change\n\nAt src/main/react/server/config.js, change the proxy route.\n\nAt src/main/react/package.json, change the start script’s BASE_URL\n\nAt pom.xml, change the artifactId\n\nAt org/jenkinsci/plugins/reactplugintemplate/PluginManagementLink.java, change names.\n\nAlso use the same value to modify the occurrence in src\\main\\react\\app\\utils\\urlConfig.js.\n\nCustomize a page for your plugin\n\nA management Link is recommended, which would get your plugin a standalone page, along with a entry button in the /manage system manage page.\n\nHow does this template work?\n\nThis template is putting a webpack project inside a Maven project, and this template is just chaining the build result by copy the webpack output to the plugin’s webapp folder to make it accessible from the iframe, then Jelly render the iframe and the client gets the Plugin UI.\n\nWhy iframe?\n\nOver time, Jenkins has added a lot of various javascript libraries to every regular page, which now causes problems for using modern Javascript tooling and as such, we decided to inline the new react based pages in their own sandbox which prevents collisions with other libraries, and maybe the iframe is a good sandbox case.\n\nLinks\n\nGithub: React Plugin Template\n\nGithub: Working Hours Plugin","title":"Introduce React Plugin Template","tags":["react","plugins","template","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ead9a/jackshen.jpg","srcSet":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/77b35/jackshen.jpg 32w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/d4a57/jackshen.jpg 64w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ead9a/jackshen.jpg 128w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/14734/jackshen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ef6ff/jackshen.webp 32w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/8257c/jackshen.webp 64w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/f4bd7/jackshen.webp 128w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/65cd2/jackshen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":129}},"publicURL":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/jackshen.jpg"},"blog":null,"github":"ShenJack","html":"<div class=\"paragraph\">\n<p>Shen is a student from Beijing Forestry University. One of the students accepted to GSoC 2019.</p>\n</div>","id":"jackshen","irc":null,"linkedin":null,"name":"Jack Shen","slug":"/blog/authors/jackshen/","twitter":null}]}},{"node":{"date":"2019-08-23T00:00:00.000Z","id":"eddbf0dc-37bf-5f4d-8a6e-0bef8711db73","slug":"/blog/2019/08/23/introducing-gitlab-branch-source-plugin/","strippedHtml":"The GitLab Branch Source Plugin has come out of its beta stage and has been released to the Jenkins update center. It allows you to create job based on GitLab user or group or subgroup project(s). You can either:\n\nImport a single project’s branches as jobs from a GitLab user/group/subgroup (Multibranch Pipeline Job)\n\nImport all or a subset of projects as jobs from a GitLab user/group/subgroup (GitLab Group Job or GitLab Folder Organization)\n\nThe GitLab Group project scans the projects, importing the pipeline jobs it identifies based on the criteria provided. After a project is imported, Jenkins immediately runs the jobs based on the Jenkinsfile pipeline script and notifies the status to GitLab Pipeline Status. This plugin unlike other Branch Source Plugins provides GitLab server configuration which can be configured in Configure System. Jenkins Configuration as Code (JCasC) can also be used to configure the server. To learn more about server configuration see my previous blog post.\n\nRequirements\n\nJenkins - 2.176.2 (LTS)\n\nGitLab - v11.0+\n\nCreating a Job\n\nTo create a Multibranch Pipeline Job (with GitLab branch source) or GitLab Group Job, you must have GitLab Personal Access Token added to the server configuration. The credentials is used to fetch meta data of the project(s) and to set up hooks on GitLab Server. If the token has admin access you can also set up System Hooks while Web Hooks can be set up from any user token.\n\nCreate a Multibranch Pipeline Job\n\nGo to Jenkins > New Item > Multibranch Pipeline > Add Source > GitLab Project\n\nServer - Select your desired GitLab server from the dropdown, needs to be configured before creating this job.\n\nCheckout Credentials - Add credentials of type SSHPrivateKey or Username/Password if there are any private projects to be built by the plugin. If all projects are public then no checkout credentials required. Checkout credential is different from the credential (of type GitLab Personal Access Token) setup in GitLab server config.\n\nOwner - Can be a user, group or subgroup. Depending on this the Projects field is populated.\n\nProjects - Select the project you want to build from the dropdown.\n\nBehaviours - These traits are very powerful tool to configure the build logic and post build logic. We have defined new traits. You can see all the information in repository documentation.\n\nSave and wait for the branches indexing. You are free to navigate from here, the job progress is displayed to the left hand side.\n\nAfter the indexing, the imported project listed all the branches, merge requests and tags as jobs.\n\nOn visiting each job, you will find some action items on the left hand side:\n\nYou can trigger the job manually by selecting Build Now.\n\nYou can visiting the particular branch/merge request/tag on your GitLab Server by selecting the corresponding button.\n\nCreate a GitLab Group Job Type\n\nGo to Jenkins > New Item > GitLab Group\n\nYou can notice the configuration is very similar to Multibranch Pipeline Job with only Projects field missing. You can add all the projects inside your Owner i.e. User/Group/Subgroup. The form validation will check with your GitLab server if the owner is valid. You can add Discover subgroup project trait which allows you to discover this child projects of all subgroups inside a Group or Subgroup but this trait is not applicable to User. While indexing, web hook is created in each project. GitLab Api doesn’t support creation of Group web hooks so this plugin doesn’t support that feature which is only available in GitLab EE.\n\nYou can now explore your imported projects, configuring different settings on each of those folders if needed.\n\nGitLab Pipeline Status Notification\n\nGitLab is notified about build status from the point of queuing of jobs.\n\nSuccess - the job was successful\n\nFailure - the job failed and the merge request is not ready to be merged\n\nError - something unexpected happened; example: the job was aborted in Jenkins\n\nPending - the job is waiting in the build queue\n\nOn GitLab Pipeline status are hyperlinks to the corresponding Jenkins job build. To see the Pipeline Stages and the console output you will be required to visit your Jenkins server. We also planned to notify the pipeline stages to GitLab but it came with some drawbacks which has been addressed so far but there is future plan to add it as trait.\n\nYou can also skip notifying GitLab about the pipeline status by selecting Skip pipeline status notifications from the traits list.\n\nMerge Requests\n\nImplementing support for Merge Requests for the projects was challenging. First, MRs are of 2 types i.e. Origin branches and Forked Project branches so there had to be different implementation for each head. Second, MRs from forks can be from untrusted sources, so a new strategy Trust Members was implemented which allows CI to build MRs only from trusted users who have accesslevel of Developer / Maintainer / Owner.\n\nThird, MRs from forks do not support pipeline status notification due to GitLab issue, see this. You can add a trait Log Build Status as Comment on GitLab that allows you to add a sudo user (leave empty if you want owner user) to comment on the commit/tag/mrs the build result. To add a sudo user your token must have admin access. By default only failure/error are logged as comment but you can also enable logging of success build by ticking the checkbox.\n\nSometimes, Merge Requests fail due to external errors so you want to trigger rebuild of mr by commenting jenkins rebuild. To enable this trigger add the trait Trigger build on merge request comment. The comment body can be changed in the trait. For security reasons, commentor should have Developer / Maintainer / Owner accesslevel in the project.\n\nHooks\n\nWeb hooks are automatically created on your projects if configured to do so in server configuration. Web hooks are ensured to pass through a CSRF filter. Jenkins listens to web hooks on the path /gitlab-webhook/post. On GitLab web hooks are triggered on the following events:\n\nPush Event - when a commit or branch is pushed\n\nTag Event - when a new tag is created\n\nMerge Request Event - when a merge request is created/updated\n\nNote Event - when a comment is made on a merge request\n\nYou can also set up System Hooks on your GitLab server if your token has admin access. System hooks are triggered when new projects are created, Jenkins triggers a rescan of the new project based on the configuration and sets up web hook on it. Jenkins listens to system hooks on the path /gitlab-systemhook/post. On GitLab system hooks are triigered on Repository Update Events.\n\nYou can also use Override Hook Management mode trait to override the default hook management and choose if you want to use a different context (say Item) or disable it altogether.\n\nJob DSL and JCasC\n\nYou can use Job DSL to create jobs. Here’s an example of Job DSL script:\n\norganizationFolder('GitLab Organization Folder') {\n    description(\"GitLab org folder created with Job DSL\")\n    displayName('My Project')\n    // \"Projects\"\n    organizations {\n        gitLabSCMNavigator {\n            projectOwner(\"baymac\")\n            credentialsId(\"i<3GitLab\")\n            serverName(\"gitlab-3214\")\n            // \"Traits\" (\"Behaviours\" in the GUI) that are \"declarative-compatible\"\n            traits {\n                subGroupProjectDiscoveryTrait() // discover projects inside subgroups\n                gitLabBranchDiscovery {\n                    strategyId(3) // discover all branches\n                }\n                originMergeRequestDiscoveryTrait {\n                    strategyId(1) // discover MRs and merge them with target branch\n                }\n                gitLabTagDiscovery() // discover tags\n            }\n        }\n    }\n    // \"Traits\" (\"Behaviours\" in the GUI) that are NOT \"declarative-compatible\"\n    // For some 'traits, we need to configure this stuff by hand until JobDSL handles it\n    // https://issues.jenkins.io/browse/JENKINS-45504\n    configure {\n        def traits = it / navigators / 'io.jenkins.plugins.gitlabbranchsource.GitLabSCMNavigator' / traits\n        traits\n\nYou can also use JCasC to directly create job from a Job DSL script. For example see the plugin repository.\n\nHow to talk to us about bugs or new features?\n\nThis project uses Jenkins JIRA to track issues. You can file issues under gitlab-branch-source-plugin component.\n\nSend your mail in the Developer Mailing list.\n\nJoin our Gitter channel.\n\nFuture work\n\nActively maintain GitLab Branch Source Plugin and take feedbacks from users to improve the plugin’s user experience.\n\nExtend support for GitLab Pipeline to Blueocean.\n\nResources\n\nGitLab API Plugin\n\nGitLab API Plugin Wiki\n\nGitLab Branch Source Plugin\n\nProject Summary\n\nGitHub Branch Source Plugin Release\n\nThank you Jenkins and Google Summer of Code :)","title":"Introducing new GitLab Branch Source Plugin","tags":["gitlab","plugins","pipeline","multibranch","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg","srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/eb017/baymac.jpg 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/ed0e7/baymac.jpg 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/b3c75/baymac.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/bcdad/baymac.webp 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/21187/baymac.webp 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/33025/baymac.webp 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/d386c/baymac.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":192}},"publicURL":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/baymac.jpg"},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/authors/baymac/","twitter":"baymac04"}]}},{"node":{"date":"2019-08-25T00:00:00.000Z","id":"d12bee04-3e3b-5a23-9775-d800d9abf794","slug":"/blog/2019/08/25/jenkinsworld-contrib-summit-ask-the-expert-booth/","strippedHtml":"Jenkins turns 15 years old!\nJenkins World brings together DevOps thought leaders, IT executives, continuous delivery practitioners and the Jenkins\ncommunity and ecosystem in one global event, providing attendees with the opportunity to learn, explore, network\nface-to-face and help shape the next evolution of Jenkins development and solutions for DevOps.\n\nThere is also the Jenkins Contributor Summit in San Francisco. The Jenkins Contributor Summit is the place where\ncurrent and future contributors get together to discuss, learn and collaborate on the latest and greatest efforts within\nJenkins project. The morning portion of the summit is a mix of presentations by the core contributors. The\npresentations highlight what each effort is about and what community members can do to help. In the\nafternoon breakout sessions with  Birds of a Feather tables for in-depth discussion, and collaboration with sub-project\ncontributors.\n\nI feel very honored to have been a part of this.\n\nDay 1\n\nDay one started with the contributor summit. This was a chance for everyone to get together and talk about\ncontributions and put faces to names. Most people I had only met via video chat or on gitter so I was super excited.\nWe gathered to hear about the start of the Jenkins open source landscape.\n\nNext up was the BoF/Unconference. I was leading these sessions and I felt they went really well.\nWe had fellow org admins Martin d’Anjou and Jeff Pearce give a talk about Google Summer of Code projects.\n\nGoogle Summer of Code student Natasha Stopa presented her project, Plugin Installation Manager Library/CLI Tool. This is\na super cool project and very well received in the community.\n\nWe closed out the session with a presentation from Steven Terrana from Booz Allen Hamilton and the awesome Jenkins\nTemplating Engine. If you have not had a chance to try this, please make sure you do at https://github.com/boozallen/jenkins-templating-engine.\n\nMain Expo Hall\n\nDay two and onward saw me and other Jenkins org admins in the Ask the Expert booth for the Jenkins community.\n\nThis was a really cool experience and gave me a chance to hear about things the community is working on and help with\nissues they are facing.\nThere were a range of questions from Jenkins X to many of the plugins I maintain such and the Jenkins Prometheus and the\nSysdig Secure Scanning plugins.\nThere were also a lot of Kubernetes questions. There is a lot of marketing data regarding the increased usage of\nKubernetes but I was seriously surprised by the massive interest in Jenkins on Kubernetes.\nOf course there were opportunities for selfie requests.\n\nLunch time demos got underway and we had a busy schedule.\nFirst up was the awesome Mark Waite to talk about the\nGit plugin. A lot of people use git in\nJenkins.\nThank you so much for all that you do Mark.\n\nJenkins org admin Martin d’Anjou was next on deck to talk about the Google Summer of Code. So amazing to think that the\nGoogle Summer of Code is also in its 15th year like Jenkins!\n\nNatasha Stopa is a Google Summer of Code student and she presented her project Plugin Installation Manager Library/CLI Tool.\nNatasha really put a lot of hard work in to this plugin and it was really awesome to see the turn out and support during\nher presentation.\n\nFinally there was me. I presented the Sysdig Secure Scanning Jenkins plugin which I am a maintainer of. I thank everyone who attended\n\nRight after the lunch time demos I also oversaw the Jenkins open space. This was an opportunity for the community to talk\nabout items and let them flow organically. I really enjoyed this session and felt it was also well received.\n\nWe closed out the day and the event with a picture of some of the Jenkins org admins and Google Summer of Code students.\nMissing from this photos are fellow org admins, Lloyd Chang and Oleg Nenashev\n\nClosing\n\nThis was an amazing experience. Huge thanks to CloudBees, the Jenkins community, Google Summer of Code, Tracy Miranda,\nAlyssa Tong and my employer Sysdig.\n\nTo think Jenkins is 15 years old is amazing! There has been so much accomplished and the future is so bright. I am so\nthankful for the opportunity to serve and be a part of the open source community.\nHere’s to 15 more years all!\n\nIf you are interested in joining any one of the Jenkins open source special interest groups, look here. We can use your\nhelp: https://jenkins.io/sigs/\n\nIf you are interested in joining the Summer of Code, look here: https://jenkins.io/projects/gsoc/\nIf you want to chat with us, find us here: https://jenkins.io/chat/\nOr if you want to email us, reach out at: https://jenkins.io/mailing-lists/\n\nSome photos outtakes:","title":"Jenkins World Contributor Summit and Ask the Expert booth","tags":["jenkinsworld","devopsworld2019","gsoc","gsoc2019","community","opensource","events","contributorsummit","asktheexpert"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png","srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/914ee/markyjackson-taulia.png 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/1c9ce/markyjackson-taulia.png 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/acb7c/markyjackson-taulia.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/ef6ff/markyjackson-taulia.webp 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/8257c/markyjackson-taulia.webp 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/6766a/markyjackson-taulia.webp 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/22bfc/markyjackson-taulia.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/markyjackson-taulia.png"},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"/blog/authors/markyjackson-taulia/","twitter":"markyjackson5"}]}},{"node":{"date":"2019-08-26T00:00:00.000Z","id":"ec0ca077-b2d0-53a4-8b1d-2ecb784b35fd","slug":"/blog/2019/08/26/role-strategy-performance/","strippedHtml":"The task for my Google Summer of Code program was to improve the performance\nof the Role Strategy Plugin. The performance issues for Role Strategy Plugin\nhad been reported multiple times on Jenkins JIRA. With a large number of roles\nand with complex regular expressions, a large slow-down was visible on the Web UI.\nEven before GSoC started, there were a number of patches which tried to improve\nperformance of the plugin (by Deepansh Nagaria\nand others).\n\nAt the time, there was no way to reliably measure improvements in performance.\nTherefore, we started by creating a\nframework\nfor running micro-benchmarks on Jenkins Plugins. Benchmarks using the framework\nwere added to the Role Strategy Plugin find performance\ncritical parts of the plugins and to measure the improvements of a change.\nThis blog post summarizes the changes that were made and performance improvements\nmeasured.\n\nCaching matching roles\n\nA couple of major changes were made to the Role Strategy Plugin to improve its\nperformance. First, we started collection of roles that matched a given\nproject name. The Role Strategy plugin before version 2.12 used to run over\nregular expressions for every role that it had for every permission checking\nrequest it got. Storing this produced set of roles in the memory provides us\nlarge improvements in performance and avoids repeated matching of project names\nwith regular expressions. For keeping the plugin working securely, we invalidate\nthe cache whenever any update is made to the roles.\n\nAfter this change, we were able to observe performance improvements of up to\n3300%. These improvements were visualized using\nJMH Visualizer.\n\nMore information is available at pull request on GitHub:\nhttps://github.com/jenkinsci/role-strategy-plugin/pull/81\n\nCalculating Implying Permisions when plugin is loaded\n\nJenkins' permission model allows one permissions to imply other permissions.\nWhen a permission check is made, we need to check if the user has any of\npermissions that would imply this permisison. For every permission checking\nrequest that that the Role Strategy, it used to calculate all the implying\npermissions. To avoid this, we now calculate and store implying permissions\nfor every permission in the Jenkins system when the plugin gets loaded.\n\nAfter both of these changes, we were able to experience improvements of up to\n10000%. The benchmark results show it better:\n\nMore information about this change can be found at the GitHub pull request:\nhttps://github.com/jenkinsci/role-strategy-plugin/pull/83\n\nBoth of these changes were integrated into the Role Strategy Plugin and the\nimprovements can be experienced starting with version\n2.13.\n\nBonus: Configuration-as-Code export now works for Role Strategy\n\nWith Configuration-as-Code plugin version\n1.24\nand above, export of your configuration as YAML now works!\n\nAs an alternative to\nRole Strategy Plugin, I also created the brand new Folder Authorization Plugin.\nYou can check out the blog post for\nmore information about the plugin.\n\nLinks and Feedback\n\nI would love to hear your comments and suggestions. Please feel free to reach\nout to me through either the\nRole Strategy Plugin Gitter chat or through\nJenkins Developer Mailing list.\n\nPresentation slides for final evaluation of GSoC\n\nThe Folder Authorization Plugin\n\nDemo for the final evaluations","title":"Performance Improvements to Role Strategy Plugin","tags":["plugins","security","performance","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg","srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f4523/abhyudayasharma.jpg 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1e7bb/abhyudayasharma.jpg 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/b48b6/abhyudayasharma.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1fd06/abhyudayasharma.webp 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/9edd6/abhyudayasharma.webp 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f5f75/abhyudayasharma.webp 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/05d06/abhyudayasharma.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}},"publicURL":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/abhyudayasharma.jpg"},"blog":null,"github":"AbhyudayaSharma","html":"<div class=\"paragraph\">\n<p>Abhyudaya is a Computer Science student at Shiv Nadar University, India.\nHe is participating in Google Summer of Code 2019 to improve the performance\nof the <a href=\"https://github.com/jenkinsci/role-strategy-plugin\">Role Strategy Plugin</a>.</p>\n</div>","id":"abhyudayasharma","irc":null,"linkedin":null,"name":"Abhyudaya Sharma","slug":"/blog/authors/abhyudayasharma/","twitter":null}]}},{"node":{"date":"2019-08-30T00:00:00.000Z","id":"ddc369d5-a5e4-57f5-8fb7-5ebe49126b06","slug":"/blog/2019/08/30/jenkins-cli/","strippedHtml":"As a developer, I usually use Jenkins like this:\n\nFind a job which is related with my current work\n\nTrigger that job\n\nCheck the output of the build log\n\nSometimes, I might need to check the update center. Maybe a new plugin is needed, or I need to update an existing plugin.\nOr, I want to upload a plugin from my computer. For all these cases, I just don’t need a UI or even a browser.\nI like to use a CLI to complete most of my tasks. For example, I use kubectl to manage my Kubernetes cluster,\nto create or modify the kubernetes resources. So, I start to think, 'Why not use a CLI to manage my Jenkins?'.\n\nWhy create a new one?\n\nFirst, I almost forgot about the existing Jenkins CLI, written in Java. Let me introduce how to use that one.\n\nVisit Jenkins page from http://localhost:8080/jenkins/cli/ . You’ll see a command like java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ help. So, a jar file needs to be download.\nWe can use this command to complete this task wget http://localhost:8080/jenkins/jnlpJars/jenkins-cli.jar .\n\nNow you can see that this is not a Linux-style CLI. Please consider some points below:\n\nThe users must have a JRE. This is not convenient for developers who don’t use Java.\n\nThe CLI is too wordy. We always need to type java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ as the initial command.\n\nCannot install it by some popular package manager, like brew or yum.\n\nOf course, the Java CLI client is more native with Jenkins. But I’d like to use this more easily.\nSo I decided to create a new CLI tool which would be written in Go and which would natively run on modern platforms.\n\nThat’s the story of creating jcli.\n\nFeatures\n\nEasy to maintain config file for jcli\n\nMultiple Jenkins support\n\nPlugins management (list, search, install, upload)\n\nJob management (search, build, log)\n\nOpen your Jenkins with a browser\n\nRestart your Jenkins\n\nConnection with proxy support\n\nHow to get it?\n\nYou can clone jcli from the jenkins-cli repo. For now, we support\nthese three most popular OS platforms: MacOS, Linux, and Windows.\n\nMacOS\n\nYou can use brew to install jcli.\n\nbrew tap jenkins-zh/jcli\nbrew install jcli\n\nLinux\n\nIt’s very simple to install jcli into your Linux OS. Just need to execute a command line at below:\n\ncurl -L https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-linux-amd64.tar.gz|tar xzv\nsudo mv jcli /usr/local/bin/\n\nWindows\n\nYou can find the latest version by clicking here. Then download the tar file, cp the uncompressed jcli directory into your system path.\n\nHow to get started?\n\nIt’s very simple to use this. Once you get jcli on your computer, use this command to generate a sample configuration:\n\n$ jcli config generate\ncurrent: yourServer\njenkins_servers:\n- name: yourServer\n  url: http://localhost:8080/jenkins\n  username: admin\n  token: 111e3a2f0231198855dceaff96f20540a9\n  proxy: \"\"\n  proxyAuth: \"\"\n# Goto 'http://localhost:8080/jenkins/me/configure', then you can generate your token.\n\nIn most cases, you should modify three fields which are url, username and token. OK, I believe you’re ready. Please check whether you install the github plugin in your Jenkins:\n\njcli plugin list --filter name=github\n\nThat’s the end. It’s still in very early development stage. Any contribution is welcome.","title":"Managing Jenkins with jcli","tags":["general","jcli","cli","tools"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#989898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg","srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/77b35/linuxsuren.jpg 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/d4a57/linuxsuren.jpg 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/68974/linuxsuren.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/ef6ff/linuxsuren.webp 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/8257c/linuxsuren.webp 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/6766a/linuxsuren.webp 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/22bfc/linuxsuren.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/linuxsuren.jpg"},"blog":null,"github":"LinuxSuRen","html":"<div class=\"paragraph\">\n<p>Rick is a big fan of Jenkins, also as a contributor leading the Jenkins China community.</p>\n</div>","id":"linuxsuren","irc":null,"linkedin":"linuxsuren","name":"赵晓杰(Rick)","slug":"/blog/authors/linuxsuren/","twitter":"LinuxSuRen"}]}},{"node":{"date":"2019-09-10T00:00:00.000Z","id":"d5e0f766-e02d-50ec-a790-2201ba4d74b9","slug":"/blog/2019/09/10/introducing-the-jira-software-plugin-for-jenkins/","strippedHtml":"According to a recent survey we conducted, software & IT teams on average use 4+ tools to move code from development to customer-facing production. As a result, teams struggle with keeping the status of work updated and understanding the overall health of their delivery pipeline.\n\nTo solve this problem, I am excited to announce that we built an official Jenkins plugin for Jira Software Cloud. The plugin automatically associates build and deployment information from Jenkins with relevant Jira issues and exposes key information about your pipeline across Jira issues, boards and via JQL. This means you can use Jira Software to automatically update and track issues through your complete development pipeline, from backlog to release.\n\nI hope this plugin adds value to you and your team. If you are interested in contributing or forking this plug-in you can head over to our project on the Jenkins GitHub repo to get started.\n\nBetter collaboration between teams\n\nThis new information view is so powerful because historically it was dispersed across multiple tools only accessible to a few members of your team. Now anyone involved in the software delivery process can self-serve this information. For example, product managers, QA, and support teams can view which features have been deployed to customers and which are still waiting in staging environments.\n\nWith better information sharing between tools in your delivery stack, you can also improve cross-collaboration between teams. Teams such as QA and operations can collaborate in the software teams next sprint. For example, you can use build information in Jira Software to create a workflow between QA and developers and create a rapid feedback loop for testing at any point in your development process.\n\nUse Jira’s Querying Language for advanced views\n\nIn addition to building better ways to collaborate, these integrations also give your team deeper insight into the development pipeline from within Jira Software. You can now create powerful views into your delivery pipeline with JQL queries across multiple connected tools. For example, you can write a custom JQL query to report all Jira issues that have been deployed to production but still have an open PR.\n\ndeploymentEnvironmentType ~ “production“ AND development[pullrequests].open\n\nGet started\n\nIn Jira Software Cloud\n\nCreate OAuth credentials in Jira for Jenkins\n\nNavigate to Jira home > Jira settings > Apps.\n\nSelect OAuth credentials.\n\nSelect Create credentials.\n\nEnter the following details:\n\nApp name - Jenkins\n\nApp logo - A URL to the Jenkins logo, which will be used as an icon in the list of credentials. Eg: https://jenkins.yourcompany.com/logo.png\n\nServer base URL - The URL to your Jenkins server. Eg: https://jenkins.yourcompany.com\n\nIn Jenkins\n\nInstall the Jenkins plugin\n\nLogin to your Jenkins server and navigate to the Plugin Manager.\n\nSelect the 'Available' tab and search for 'Atlassian Jira Software Cloud' as the plugin name then install it.\n\nThe open-source plugin is hosted in the Jenkins GitHub account. You can check it out here.\n\nSet up Jenkins credentials\n\nIn Jenkins, go to Manage Jenkins > Configure System screen and scroll to the Jira Software Cloud integration section.\n\nSelect Add Jira Cloud Site > Jira Cloud Site. The Site name, ClientID, and Secret fields display.\n\nEnter the following details:\n\nSite name: The URL for your Jira Cloud site, for example yourcompany.atlassian.net.\n\nClient ID: Copy from OAuth credentials screen (Client ID column).\n\nSecret: Select Add > Jenkins.\n\nFor Kind, select Secret text.\n\nFor Secret, copy from OAuth credentials screen (Secret column).\n\nFor Description, provide a helpful description\n\nSelect Test settings to make sure your credentials are valid for your Jira site.\n\nHow to use the plugin\n\nTo start using the integration:\n\nGo into a specific pipeline in Jenkins ( Note: Your pipeline must be a 'Multibranch Pipeline' ).\n\nFrom the left-hand menu, select Pipeline Syntax.\n\nIn the Snippet Generator, select jiraSendDeploymentInfo or jiraSendBuildInfo from the dropdown list of Sample Steps and fill in the relevant details.\n\nSelect Generate Pipeline Script and copy/paste the output into your Jenkinsfile on the relevant Repository you are using. This will be used to notify Jira when you run that pipeline on that repo.\n\nFor sending build information\n\nThis is an example snippet of a very simple ‘build’ stage set up in a Jenkinsfile. After the pipeline is run, it will post the build information to your Jira Cloud site by looking at the branch name. If there is a Jira issue key (e.g. “TEST-123”) in the branch name, it will send the data over to Jira.\n\nJenkinsfile example\n\npipeline {\n     agent any\n     stages {\n         stage('Build') {\n             steps {\n                 echo 'Building...'\n             }\n             post {\n                 always {\n                     jiraSendBuildInfo site: 'example.atlassian.net'\n                 }\n             }\n         }\n     }\n }\n\nFor sending deployment information\n\nThis is an example snippet of two stages that run on any change to the staging or master branch. Again, we use a post step to send deployment data to Jira and the relevant issues. Here, the environmentId, environmentName, and environmentType need to be set to whatever you want to appear in Jira.\n\nJenkinsfile example\n\npipeline {\n     agent any\n     stages {\n         stage('Deploy - Staging') {\n             when {\n                 branch 'master'\n             }\n             steps {\n                 echo 'Deploying to Staging from master...'\n             }\n             post {\n                 always {\n                     jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-stg-1', environmentName: 'us-stg-1', environmentType: 'staging'\n                 }\n             }\n         }\n         stage('Deploy - Production') {\n            when {\n                branch 'master'\n            }\n            steps {\n                echo 'Deploying to Production from master...'\n            }\n            post {\n                always {\n                    jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-prod-1', environmentName: 'us-prod-1', environmentType: 'production'\n                }\n            }\n         }\n     }\n }\n\nThe entire Jenkinsfile may look something like this. This is only meant to represent an example of what the Jira snippets could look like within a stage or step.\n\nJenkinsfile example\n\npipeline {\n     agent any\n     stages {\n         stage('Build') {\n             steps {\n                 echo 'Building...'\n             }\n             post {\n                 always {\n                     jiraSendBuildInfo site: 'example.atlassian.net'\n                 }\n             }\n         }\n         stage('Deploy - Staging') {\n             when {\n                 branch 'master'\n             }\n             steps {\n                 echo 'Deploying to Staging from master...'\n             }\n             post {\n                 always {\n                     jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-stg-1', environmentName: 'us-stg-1', environmentType: 'staging'\n                 }\n             }\n         }\n         stage('Deploy - Production') {\n            when {\n                branch 'master'\n            }\n            steps {\n                echo 'Deploying to Production from master...'\n            }\n            post {\n                always {\n                    jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-prod-1', environmentName: 'us-prod-1', environmentType: 'production'\n                }\n            }\n         }\n     }\n }\n\nQuestions or feedback?\n\nIf you have any questions, please contact Atlassian support and they will route it to the correct team to help you.","title":"Introducing the Jira Software plugin for Jenkins","tags":["jira","plugin","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"rafalmyslek","html":"","id":"rafalmyslek","irc":null,"linkedin":null,"name":"Rafal Myslek","slug":"/blog/authors/rafalmyslek/","twitter":null}]}},{"node":{"date":"2019-09-23T00:00:00.000Z","id":"c729ed47-ed8f-594c-a5e9-e523cff8ffd2","slug":"/blog/2019/09/23/outreachy-audit-log-release/","strippedHtml":"Thanks to our Outreachy interns over the past year, I’m proud to announce the initial release of the Audit Log plugin for Jenkins.\nThis plugin is the first major project completed related to Outreachy, and I’d like to give a brief overview of the functionality that was developed for this release.\nThe primary goal of this plugin is to introduce an audit trail of various Jenkins events using structured logging and related audit logging standards.\nInitially, this plugin covers audit events related to core Jenkins concepts like user accounts, jobs, builds, nodes, and credentials usage.\nMore specifically, this tracks:\n\nUser login and logout events\n\nCredentials usage\n\nUser creation (when using the Jenkins user database as a security realm)\n\nUser password updates (ditto)\n\nStarts and ends of builds\n\nCreation/modification/deletion/copying of items (which correspond to projects, pipelines, folders, etc.)\n\nCreation/modification/deletion of nodes.\n\nThis plugin defines and exports standardized log event classes and schemas corresponding to these events.\nOther plugins can add audit-log as a dependency to define their own audit events using Apache Log4j Audit and its catalog editor; then they can use the Maven plugin for generating the audit event classes for use in the plugin.\n\nThe other major feature of this plugin is configuring where to output these audit logs.\nBy default, audit logs will be written in HTML files (rotated once per day) to $JENKINS_HOME/logs/html/audit.html which are viewable through the \"Audit Logs\" root action link.\nIn the system settings, a section for audit logging is added where the main audit log output can be configured.\nThis can initially be configured to output via either a JSON log file in $JENKINS_HOME/logs/audit.log by default or to a syslog server using RFC5424 encoding.\n\nOverall, this experience has been rather interesting.\nBesides having an opportunity to mentor new contributors, Outreachy has helped open my eyes to the struggles that developers from around the world are dealing with which can be improved upon to help expand our communities.\nFor example, many countries do not have reliable internet or electricity, so the use of synchronous videoconferencing and other heavyweight, synchronous processes common to more corporate-style development are inadequate in this international context.\nThis doesn’t even begin to account for the difference in timezones which is not always an issue, though both problems are addressable by using asynchronous communication methods like chat and email.\nThis notion of asynchronous communication is an important aspect of the Apache Way, for example, which emphasises processes that allow for vendor neutral communities to form and thrive around a project.\n\nThis mentoring project was valuable to myself as well.\nAs a software engineer myself, project management is not my specialty, so this gave me a great opportunity to develop my own PM skills and technical leadership.\nMy own typical discovery process for feature development involves experimenting directly with the code to see what features make sense to prioritize and which would take a vast effort to implement.\nChanging my own discovery process to avoid implementing the features myself was difficult to adjust to, though I did defer any of my own feature contributions to this plugin until after the initial release.\nIn order to appropriately scope the project, I still had to spend a bit of time reading through the Jenkins codebase to determine which tasks could be implemented simply (e.g., good newbie-friendly issues), which tasks might require changes to Jenkins itself (previously discovered to take too long for these relatively short Outreachy rounds), and which tasks would require intimate familiarity with Jenkins and would likely be infeasible for new developers to Jenkins.\nThanks to the work done in discovery and delivery, I’ve also identified potential features for Log4j itself which could be used in future versions of this plugin.\n\nOverall, I think we did a good job of balancing the scope of this project without spending too much time in any specific area.\nThe first release of this plugin is now available in the Jenkins Update Center.\nIn the future, I hope to learn more about developing Jenkins UI components so that we can create a more dynamic and Jenkins-like configuration page for choosing where logs are output.\nWhile I don’t intend on using this plugin for further Outreachy rounds, I do hope to see more interest in it over time as the more security-conscious users out there discover this new plugin.","title":"Audit Log Plugin for Jenkins Releases 1.0","tags":["outreachy","logging","security","plugin","community"],"authors":[{"avatar":null,"blog":"https://musigma.blog/","github":"jvz","html":"<div class=\"paragraph\">\n<p>Mathematician, software engineer, and free software evangelist.\nWorks for CloudBees on the <a href=\"https://jenkins.io/security/\">Jenkins Security Team</a> along with other Jenkins community work since 2018.\nPMC Chair of the <a href=\"https://logging.apache.org/\">Apache Logging Services project</a> and Secretary for the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.</p>\n</div>","id":"jvz","irc":null,"linkedin":null,"name":"Matt Sicker","slug":"/blog/authors/jvz/","twitter":"jvz"}]}},{"node":{"date":"2019-09-25T00:00:00.000Z","id":"784a72e9-875d-5a7a-aeb6-857a36385db1","slug":"/blog/2019/09/25/board-elections/","strippedHtml":"This is a repost of the original announcement made by Kohsuke Kawaguchi in the Jenkins Developer mailing list.\nMinor changes were applied to reflect the posting date and to provide more links.\n\nNominations for the 2019 Jenkins Board elections open for three governing board positions and five officer positions, namely: Security, Events, Release, Infrastructure and Documentation.\n\nThe terms of office for these positions are:\n\nOfficer positions (1 year): November 4, 2019 to November 3, 2020\n\nGoverning board members (2 years): November 4, 2019 to November 3, 2021\n\nTo nominate someone, simply send an email to jenkinsci-board@googlegroups.com with their name and position you nominate them for.\nPlease share any information on why you are making the nomination.\nSelf nominations are also welcome.\n\nThe board positions and officer roles are an essential part of Jenkins' community governance and well-being.\nI highly encourage everyone to consider participating.\n\nKey dates\n\nOct 04, 2019: Nominations close\n\nOct 08, 2019: List of nominees posted to mailing list\n\nOct 11, 2019: Nominees’ personal statements made available\n\nOct 14, 2019: Voting begins\n\nOct 27, 2019: Voting closes at 5pm Pacific Time\n\nNov 04, 2019: New representatives announced\n\nReferences\n\nJenkins Governance Board\n\nJenkins Board Election Process\n\nJenkins Officers\n\nAnnouncement in the developer mailing list\n\n2019 elections proposal in the developer mailing list","title":"2019 Jenkins Board and Officer elections. Nominations are open!","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2019-10-01T00:00:00.000Z","id":"352e9ec4-8e30-52da-98d7-ee02d21defd4","slug":"/blog/2019/10/01/hacktoberfest/","strippedHtml":"Once again, Hacktoberfest is back!\nDuring this October event, everyone can support open-source by contributing changes, and can earn limited edition swag.\nWe invite you to contribute to Jenkins, regardless of your experience and background.\nYou can write code, improve documentation and design, localize Jenkins or create new artwork.\nAny GitHub pull request counts!\n\nQuick start\n\nSign-up to Hacktoberfest on the event website.\n\nJoin our Gitter channel.\n\nEverything is set, just start creating pull-requests!\n\nThis year Hacktoberfest does not require labeling pull requests,\nbut please mention Hacktoberfest in your pull requests for faster reviews\n(see FAQ: Marking Pull requests)\n\nSee the details below.\n\nHow to contribute?\n\nThere are many ways to\ncontribute to Jenkins.\nIt is not just about code, any pull request in GitHub counts towards the Hacktoberfest goal.\n\nCode - Contribute to the code or automated tests.\nWe have components written in Java, JavasScript, Groovy, Go, Ruby and other languages.\n\nWrite - Improve documentation, write blogposts, create tutorials or solution pages\n\nLocalize - Help us to Localize Jenkins to other languages\n\nDesign - artwork and UI improvements also count!\n\nOrganize - Organize a local meetup for Jenkins & Hacktoberfest (see our event kit)\n\nSpread the word - Share your accomplishments in social media using the #hacktoberfest and #jenkinsci hashtags\n(or CC @jenkinsci in Twitter).\n\nWhere to contribute?\n\nThe Jenkins project is spread across multiple organizations on GitHub (jenkinsci, jenkins-infra, jenkins-zh).\nYou are welcome to contribute to any repository in any of these organizations,\nor to any other Jenkins-related repository on GitHub.\nIf you adopt Jenkins in your own open-source projects (e.g. Jenkins Pipeline or Configuration as Code),\nit counts as well! Some useful queries:\n\nJenkins JIRA issues suggested for Hacktoberfest\n\nGitHub issues suggested for Hacktoberfest\n\nNewbie-friendly issues in Jenkins JIRA\n\nGood first issues on GitHub\n\nFeatured projects. If you are a newcomer contributor, we have prepared a list of projects/components where you will get a warm welcome.\nAll these projects have newbie-friendly tasks, contributing guidelines, and active maintainers\nwho have committed to assist contributors and to quickly review pull requests.\nThe list of featured projects will be updated during the event,\nand we will make sure to create more newbie-friendly tasks if needed.\n\nIf you wonder about Jenkins X, it also part of Hacktoberfest this year!\nThey offer various topics, including hacking Jenkins X or improving its documentation.\nSee this blogpost for the announcement and links.\n\nHow to get help?\n\nIf you are stuck or have any question,\nsee our Hacktoberfest FAQ page for the common questions.\nIf it does not help, please reach out to us in our Gitter chat.\n\nAny meetups this year?\n\nThere are many events being organized by open-source communities.\nYou can join one of these events.\nWe invite to join the Jenkins Online Meetups on Oct 03\n ( APAC/EMEA - 7AM UTC,\nEMEA/Americas - 2PM UTC).\n\nThere will be also area meetups in Munich, Beijing, St. Petersburg and other cities.\nYou can find the full list here.\n\nUseful links\n\nHacktoberfest website\n\nHacktoberfest in Jenkins\n\nOur Gitter channel\n\nFrequently asked questions\n\nContributing to Jenkins\n\nHave a great hacking time!","title":"Hacktoberfest 2019. Contribute to Jenkins!","tags":["hacktoberfest","event","community","newcomer","outreach-programs"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2019-10-08T00:00:00.000Z","id":"1aef3427-db0e-553e-8196-ae1a3516d783","slug":"/blog/2019/10/08/google-summer-of-code-mentor-and-org-admin-perspective/","strippedHtml":"I was fortunate enough to participate in the Google Summer of Code 2019 as a mentor and org admin. This was great\nand I wanted to share in hopes of encouraging more people to join.\nYou can learn more about the Google Summer of Code here: https://jenkins.io/projects/gsoc/\n\nCommunity Bonding\n\nThe first phase of the project is the community bonding phase. This is where the student and other mentors come together\nto lay out the plan for the project. It is important to set expectations and ensure that the student is well aware of\nwhat will take place and also made to feel welcome.\n\nParichay Barpanda was the student and he was super awesome from the get go. The project he was working on was the Gitlab\nBranch Source Plugin. More can be found here: jenkinsci/gitlab-branch-source-plugin\n\nFrom the mentor side it was myself and Justin Harringa. Justin was just amazing throughout this project and I seriously\ncould not have done this without him. He was encouraging, empathetic and just all around great. I would gladly serve\nwith him again.\n\nWe laid out our plan and guidance and got to work.\n\nFirst Evaluations\n\nThe first evaluation was quickly upon us and Parichay was ready!\nThe work he put in was nothing shy of amazing. We did our 1st demo and he really rocked it. A video of that demo can be\nfound on : Youtube\n\nSecond Evaluations\n\nThere was not much time to rest before we realized that phase II end was upon us but Parichay was ready. Again, he\nnailed it.\n\nThat demo can be found here\n\nMentors Submit Final Evaluations\n\nWe had our final evaluation and at this point Parichay was seasoned. He was getting issues assigned to him, working on\nlittle bug fixes and setting his roadmap for features. He absolutely blew Justin and I away.\n\nParichay’s final evaluation demo can be seen here\n\nAt the conclusion of the final demo’s, Justin and I met and went over Parichay’s final evaluation. At this point we had\nmet twice a week for several months, we have reviewed code daily, we had community involvement and most of all we had\nseen Parichay grow into a seasoned software developer.\n\nJustin and I were without a doubt passing Parichay on his entire body of work. I am actually tearing up typing this\nbecause I am so proud of Parichay.\n\nOrg Admin\n\nBeing an org admin for the 2019 Google Summer of Code project for the Jenkins organization was truly rewarding and couldn’t\nhave been accomplished without the help from Oleg Nenashev, Martin d’Anjou, Jeff Pearce and Lloyd Chang.\n\nAs an org admin we handled issues with mentors, community members and disagreements involving work. These items were only\na few and as a team we handled them accordingly.\n\nWe regularly met to discuss and plan. Coordinating and dealing with a project like Google Summer of Code is no small feat\nbut this team made it super easy and I am so thankful for them and all that I learned.\n\nClosing\n\nIn looking back at this experience I am so grateful for the opportunity I was given. This was such a rewarding experience\nto not only be able to mentor but also be an org admin. Not only will I be back next year (we are already in the\nplanning stages) but I highly encourage people reading this to consider joining. You will not be disappointed.\n\nI am so thankful for all the students, mentors and fellow org admins. Your dedication to open source is so valued. You\nshowed and continue to show what this project is all about, and that is being welcoming, open and transparent. Helping\npeople grow as individuals while learning skills is what I love about this community.\n\nThank you to everyone and I hope your futures are bright!","title":"Google Summer of Code Mentor and Org Admin Perspective","tags":["gsoc","gsoc2019","jenkins","community","events","mentor"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png","srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/914ee/markyjackson-taulia.png 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/1c9ce/markyjackson-taulia.png 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/acb7c/markyjackson-taulia.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/ef6ff/markyjackson-taulia.webp 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/8257c/markyjackson-taulia.webp 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/6766a/markyjackson-taulia.webp 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/22bfc/markyjackson-taulia.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/markyjackson-taulia.png"},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"/blog/authors/markyjackson-taulia/","twitter":"markyjackson5"}]}},{"node":{"date":"2019-10-08T00:00:00.000Z","id":"a535bdaf-c81a-500c-8263-825803a1797a","slug":"/blog/2019/10/08/jcasc-phase1-blog/","strippedHtml":"Community Bridge Introduction\n\nCommunity Bridge is an initiative by the Linux Foundation to accelerate the adoption, innovation and sustainability of open source projects. I came across this initiative in a blog post. I had been contributing to Jenkins at the time and decided to have a chat with Oleg Nenashev and Tracy Miranda regarding the possibility of a project under the Community Bridge initiative. Fortunately for me JCasC ( Jenkins Configuration as Code) had the mentors as well as the project idea in place to start a project. After a few regular meetings we ironed out the details of the programme and on August 7th I began with my journey!\n\nJCasC Developer Tools — JSON Schema\n\nJSON files when submitted to a server undergo a validation to determine whether the values and the format are correct and that they conform to a well defined schema, this schema is known as a JSON Schema. A YAML file can also be validated using a JSON Schema.\nThe main premise of JCasC is to load YAML files written by developers into the Jenkins instance. An example of a JCasC YAML file is:\n\n---\njenkins:\n systemMessage: “Hello World”\n numExecutors:2\n ---\n\nThe above YAML configuration will configure Jenkins to display a message Hello world with the number of executors set to two. In order to validate the YAML we have a schema. This schema is written using jelly files (Executable XML files) and currently it is not a valid schema. The first phase of the project is based around rewriting the schema generation to java and developing a better test framework for it, because currently the schema is not testable.\n\nPhase 1 — JCasC Dev Tools\n\nThe first week I got into studying how the schema was generated.With the support of two of my awesome mentors Tim Jacomb and Joseph Peterson\nI finally got an understanding of the current schema.\nSo JCasC has a set of configurators for describing a YAML file.\nThey are:\na) Base Configurators\nb) Hetero Describable Configurators\nc) Data Bound Configurators\nThese configurators together successfully describe a YAML file.\nWe proceeded to generate the schema with the help of individual description of each of these configurators.\nThe JSON Schema has a set of components, consider the above yaml file as an example:\n\n---\n{\n  \"jenkins\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"systemMessage\": {\n        \"type\": \"string\"\n      },\n      \"numExecutors\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n---\n\nSo here Jenkins is the base configurator and it has a set of attributes viz systemMessage and numExecutors, so our schema needs to be able to describe a set of attributes for every field in the schema. Some of the fields that our JSON Schema uses to describe the YAML are:\n\n1) type : String, int, Boolean etc.\n\n2) properties : A set of fields describing the part field.\n\n3) id: Unique Identifier for the field\nThus the above schema successfully verifies the YAML configuration.\n\nJAVA Rewrite\n\nWe used JSON Objects to build components of the schema.The basic flow that is followed to generate the schema is as follows:\n\na) Iterate through the Base Configurators.\n\nb) Iterate over the list of Base Configurator.Attributes and add each attribute to the schema.\n\nc) Iterate over the HeteroDescribable Configurators and add each configurator to the schema along with its required properties.\n\nThe set of PR’s Resolved during Phase 1 are as follows:\n\na) Basic Schema\n\nb) Schema Doc Page\n\nc) Test Framework\n\nd) Nested Schema\n\nThat is all from me guys, I am currently preparing for phase 2 and working towards fixing any pending issues of Phase 1. Thanks for reading.\n\nPhase 2 Goals:\n\nWe would primarily target VSCode integration in phase 2 with the aim of:\n\na)Validation of JCasC YAML files with the schema\n\nb)Autocompletion\n\nc)Integration with a live Jenkins instance.\n\nContributions\n\nWe would love to get feedback from you on the stuff we are working on. Contributions to the project would be highly appreciated.\n\na) Gitter Chat\n\nb) Github Repository\n\nc) Project Introduction","title":"JCasC Community Bridge Dev Tools - Phase 1","tags":["community-bridge","JCasC","VSCode","community"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/authors/sladyn98/","twitter":"SladynN"}]}},{"node":{"date":"2019-10-21T00:00:00.000Z","id":"b2fe0751-2a13-5720-ba79-3c07e09417b5","slug":"/blog/2019/10/21/plugin-docs-on-github/","strippedHtml":"In September 2019 we announced\nsupport of GitHub as a source of documentation for the Jenkins Plugin Site.\nThanks to Zbynek Konecny and Olivier Vernin and other contributors,\nnow it is possible to store plugin documentation right inside plugin repositories instead of Jenkins Wiki which was historically difficult to maintain for plugin maintainers and for the Jenkins infrastructure team.\n\nThis blogpost may be interesting to plugin maintainers and to those who want to contribute to the Jenkins documentation.\nI will describe how to migrate plugin documentation to GitHub and to get pages like this one:\n\nWhy?\n\nBy using plugin GitHub repositories for documentation,\nplugin maintainers can follow the Documentation-as-code approach and make documentation changes a part of the pull requests so that documentation follow-ups do not get forgotten.\nIt also gives an opportunity to review the documentation changes and to add documentation contributor recognition, especially if the story is combined with Release Drafter.\n\nUnfortunately, before September 2019 usage of GitHub documentation was causing some issues.\nFirst of all, many plugin maintainers have already moved their documentation to GitHub, and it caused fragmentation of the documentation (Wiki, GitHub, jenkins.io).\nTo address it, plugin maintainers still had to maintain stub Wiki pages with redirects,\nand users had to spend some time to find out where the real documentation is located.\nBy supporting GitHub as a documentation source, we allow maintainers to phase out the plugin Wiki pages while improving the user experience.\n\nAnd there are even more pressing reasons to do the migration now…​\nIf you are subscribed to the developer mailing list,\nyou may have also seen an announcement by R. Tyler Croy about Jenkins Wiki stability issues\nand making it read-only as a temporary measure to stabilize the instance\n( mailing list thread).\nAlthough the functionality has been partially restored afterwards,\nthere is a consensus in the Infrastructure team that we should gradually move to alternate solutions.\n\nExamples\n\nSince the announcement in September, more than 50 plugins were moved from Wiki to GitHub.\nFew examples:\n\nConfiguration as Code Plugin\n\nMailer Plugin\n\nGradle Plugin\n\nRole Strategy Plugin\n\nHow to enable GitHub documentation for your plugin?\n\nConvert documentation from Wiki to GitHub Asciidoc or Markdown format if you have not done it yet.\n\nIt can be easily done in a semi-automatic way using Jenkins Wiki Exporter\n\nSee the guidelines\nhere.\n\nChange the field in pom.xml so that it points to GitHub\n( guide).\n Examples of valid links:\n\nhttps://github.com/jenkinsci/mailer-plugin - plugin site will use GitHub REST API to extract README\n\nhttps://github.com/jenkinsci/ssh-credentials-plugin/blob/master/doc/README.md - extraction of a plugin page from a custom location\n\nOptional: Add badges to the page to improve look&feel and to provide quick links for users.\nThere are standard badges for changelogs, chats, plugin site, and installation numbers.\n\nExample for Markdown\n\nExample for Asciidoc\n\nRelease the new plugin version\n\nWait a few hours till the change propagates.\nAfter that, the Jenkins Plugin Site will show the new documentation from GitHub.\n\nWhat’s next?\n\nThe story is tracked as jira:WEBSITE-406[] which is a part of the wider subproject for using GitHub as a source of data for the Jenkins plugin site and update managers (jira:WEBSITE-637[]).\nLater steps include support showing changelogs from GitHub releases, pulling plugin tags from GitHub, showing plugin logos, and using Repository Permission Updater as a source of the maintainer information.\n\nHow to contribute?\n\nOctober is a great time to contribute!\nPlugin documentation is one of the featured projects for Hacktoberfest,\nand we will welcome all contributions to the documentation and to the codebase.\n\nContributing to Documentation\n\nWe are looking for contributors who are interested to improve plugin documentation and to help us with migration from Wiki to GitHub.\nFor dozens of plugins the documentation is already in GitHub,\nand you are welcome to submit pull requests against any repository.\n\nMigrating documentation:\n\nMigrating plugin documentation from Wiki to GitHub\n\nMoving documentation from Jenkins Wiki to jenkins.io\n\njira:JENKINS-59467[Template issue for plugin docs migration]\n\nNewbie-friendly documentation tasks\n\nIf you have any questions about contributing to the documentation,\nplease see this page or reach out to us in the Docs SIG Gitter chat.\n\nCode contributions\n\nWould you like to write some code in Java or JavaScript?\nOr would you like to work on CSS styles and improve Jenkins design?\nIn such case you are welcome to contribute to the Jenkins Plugin Site.\nIt is our own plugin marketplace implementation, and we invite contributions to this area.\nThe plugin site is really easy to develop.\n\njira:WEBSITE-637[] - EPIC for Plugin site and GitHub integrations\n\njenkins-infra/plugin-site - Frontend (JavaScript, React, XSS, YARN)\n\njenkins-infra/plugin-site-api - Plugin site API and Docker packaging (Java, Maven, Docker)\n\nUseful links\n\nPlugin Documentation\n\nJenkins Plugin Site\n\nJenkins Wiki Exporter tool","title":"Plugin Documentation-as-Code: Moving docs to GitHub","tags":["hacktoberfest","developer","documentation","wiki","contributors"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2019-10-21T00:00:00.000Z","id":"60f2a970-8226-5d65-b557-42bea62a60be","slug":"/blog/2019/10/21/thinking-about-jenkins-security/","strippedHtml":"This is a speaker blogpost for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal\n\nCome join us at DevOps World | Jenkins World 2019 for \" Thinking about Jenkins Security \", a talk about securing your Jenkins server.\nWe’ll review the layers that secure Jenkins and describe techniques that you can use to protect your Jenkins server.\n\nTopics will include:\n\nThe secure by default configuration that Jenkins provides\n\nRisks associated with reducing default security settings\n\nAuthentication and authorization alternatives\n\nUsing \" least privilege\" principles\n\nJenkins credentials and trusted access to resources\n\nSoftware updates and Jenkins project security notices\n\nWe’ll intermix descriptions of good practices with some security horror stories.\nThe horror stories remind us of our mistakes; we will discuss how to detect them and how to prevent them.\n\nCome join us for the presentation in Lisbon!\n\nSlides","title":"Thinking About Jenkins Security - DevOps World | Jenkins World 2019","tags":["jenkins world","jenkinsworld","devopsworld2019","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/c09ea/wadeck.jpg","srcSet":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/534e5/wadeck.jpg 32w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/99887/wadeck.jpg 64w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/c09ea/wadeck.jpg 128w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/5f0ee/wadeck.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/59a6b/wadeck.webp 32w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/cbb78/wadeck.webp 64w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/96250/wadeck.webp 128w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/890ef/wadeck.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}},"publicURL":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/wadeck.jpg"},"blog":null,"github":"wadeck","html":"<div class=\"paragraph\">\n<p>Wadeck is a member of the <a href=\"/security/#team\">Jenkins security team</a>, working on fixes and improvements to Jenkins security.\nHe likes to provide solutions that are both useful and easy to use.</p>\n</div>","id":"wadeck","irc":null,"linkedin":null,"name":"Wadeck Follonier","slug":"/blog/authors/wadeck/","twitter":null},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#182828","images":{"fallback":{"src":"/gatsby-jenkins-io/static/563c3f57746cca05f813cf26d75b8455/19e71/stackscribe.jpg","srcSet":"/gatsby-jenkins-io/static/563c3f57746cca05f813cf26d75b8455/77b35/stackscribe.jpg 32w,\n/gatsby-jenkins-io/static/563c3f57746cca05f813cf26d75b8455/d4a57/stackscribe.jpg 64w,\n/gatsby-jenkins-io/static/563c3f57746cca05f813cf26d75b8455/19e71/stackscribe.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/563c3f57746cca05f813cf26d75b8455/ef6ff/stackscribe.webp 32w,\n/gatsby-jenkins-io/static/563c3f57746cca05f813cf26d75b8455/8257c/stackscribe.webp 64w,\n/gatsby-jenkins-io/static/563c3f57746cca05f813cf26d75b8455/6766a/stackscribe.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/563c3f57746cca05f813cf26d75b8455/stackscribe.jpg"},"blog":null,"github":"stackscribe","html":"<div class=\"paragraph\">\n<p>Meg is an experienced technical writer and training author with career experience at Bell Labs, SCO, Trend Micro, and CloudBees.</p>\n</div>","id":"stackscribe","irc":null,"linkedin":null,"name":"Meg McRoberts","slug":"/blog/authors/stackscribe/","twitter":null}]}},{"node":{"date":"2019-10-24T00:00:00.000Z","id":"63c960fe-cb12-5cdb-8985-10457666b67d","slug":"/blog/2019/10/24/jenkins-performance-avoiding-pitfalls/","strippedHtml":"This is a speaker blogpost for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal\n\nWith Halloween upon us, there’s no better time to discuss Jenkinstein!\nAre you suffering from Jenkins performance issues?\nAre users complaining about a slow UI or even scarier, is Jenkins going down frequently?\n\nCome join me at DevOps World | Jenkins World 2019 for \" Jenkins Performance: Avoiding Pitfalls, Diagnosing Issues, and Scaling for Growth \", a talk about JVM administration and best practices from the front lines of supporting thousands of Jenkins installations worldwide.\nDuring this talk we’ll cover how to prevent your Jenkins instance from becoming a Jenkinstein!\n\nTopics we will be discussing:\n\nJVM administration best practices\n\nHorizontal scaling\n\nAnalyzing thread dumps, GC logs, and heap dumps\n\nReal world data showing 3500% performance increases\n\nGarbage collection\n\nWe’ll be discussing how you can forecast for growth, and baseline using key performance indicators like application throughput and latency, by analyzing spooky data like Garbage Collection logs!\n\nCome join me for the presentation in Lisbon! There will be candy!\n\nSlides","title":"Jenkins Performance: Avoiding Pitfalls, Diagnosing Issues, and Scaling for Growth - DevOps World | Jenkins World 2019","tags":["jenkins world","jenkinsworld","devopsworld2019","performance"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#989898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/19e71/ryansmith303.jpg","srcSet":"/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/77b35/ryansmith303.jpg 32w,\n/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/d4a57/ryansmith303.jpg 64w,\n/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/19e71/ryansmith303.jpg 128w,\n/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/68974/ryansmith303.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/ef6ff/ryansmith303.webp 32w,\n/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/8257c/ryansmith303.webp 64w,\n/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/6766a/ryansmith303.webp 128w,\n/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/22bfc/ryansmith303.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/e88f1e6ae05bafde36323febb94c9c0c/ryansmith303.jpg"},"blog":null,"github":"ryansmith303","html":"<div class=\"paragraph\">\n<p>Ryan Smith is a Certified CloudBees Jenkins Platform Engineer, and currently works as a Senior Developer Support Engineer for CloudBees. Ryan currently leads the performance and stability team within the support organization, and spends his days evangelizing enterprise Java deployment best practices. He resides in Grand Junction, Colorado, USA and would love to discuss JVM garbage collection over a cocktail with you.</p>\n</div>","id":"ryansmith303","irc":null,"linkedin":null,"name":"Ryan Smith","slug":"/blog/authors/ryansmith303/","twitter":null}]}},{"node":{"date":"2019-11-01T00:00:00.000Z","id":"09c19419-deb1-5016-ab06-4383186a37e4","slug":"/blog/2019/11/01/devops-world-jenkins-world-san-francisco-in-living-colors/","strippedHtml":"DevOps World | Jenkins World San Francisco was August 12 - 15, 2019.\nThe event was delivered in vivid colors starting with flowing banners hung from street lamp posts to the big screens in breakout rooms, to the expo hall.\nThe energy and enthusiasm in the Moscone convention center made the colors even more vibrant, thanks to the people attending the conference.\n\nHere’s a recap of the conference in pictures:\n\nDevOps World | Jenkins World 2019 - San Francisco\n\nKeynote - Evolution of the Continuous Delivery Foundation\n\nTracy Miranda opened the keynote explaining the evolution of the Continuous Delivery Foundation.\n\nKeynote - Evolution of the Continuous Delivery Foundation\n\nInfluencers, Creators, and Members\n\nThe influencers, creators, and members of the CD Foundation: Tracy Miranda (far left),\nAndy Glover (Netflix), Tara Hernandez (Google), Chris Aniszczyk (Linux Foundation), Dave Stanke (Google), Kohsuke Kawaguchi (Jenkins creator), Jayne Groll (DevOps Institute), James Strachan (Jenkins X creator).\n“We want to help set Jenkins up for success, into the next decade”, Tyler Croy (not in picture).\n\nInfluencers, Creators, and Members of the Continuous Delivery Foundation\n\nContributor Summit\n\nThe inaugural Continuous Delivery Foundation Contributor Summit and it was a full house!\n\nContinous Delivery Foudnation Contributor Summit\n\n15 Years of Jenkins\n\nA remarkable milestone for the Jenkins project, a celebration of Jenkins turning 15…​cake included!\n\nFifteen Years of Jenkins\n\nBee Diverse Luncheon\n\nInteractive and engaging luncheon celebrating diversity\n\nBee Diverse Luncheon Entrance\n\nBee Diverse Luncheon Leading Voices\n\nBee Diverse Luncheon Group Discussions\n\nJenkins Contributors and Experts\n\nJenkins contributors and experts on hand to educate and share lightning talks and provide one on one Jenkins support.\n\nJenkins Lightning Talks\n\nJenkins Experts Answering Questions\n\nJenkins Experts Discussing and Helping\n\nJenkins Experts Gathered\n\nDevOps Superheroes\n\nEven though the conference offered endless learning and networking possibilities, and major milestones worth celebrating,  I felt the true highlight of the conference was the celebration of each individual, “You”.\n“You” are the super hero, the driving force behind the incredible innovations to advance technology to where it is today.\nHere’s celebrating the super heros in all of YOU!\n\nDevOps Superheroes\n\nSuperheroes and the Wookie\n\nFour Superheroes\n\nKohsuke Kawaguchi - Founding Superhero\n\nA DevOps League of Superheroes\n\nCrowd of Superheroes\n\nThis party will be coming to Lisbon, Portugal on December 3-5, 2019.\nWe hope to see our EU Jenkins fans at DevOps World | Jenkins World Lisbon.\nUse JWFOSS for a 30% discount off your pass.\n\nHope to see you in Lisbon!","title":"DevOps World | Jenkins World San Francisco in Living Colors","tags":["events","devopsworld2019","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2019-11-04T00:00:00.000Z","id":"d7cd86a9-cbed-5942-90a0-dd192dcd3459","slug":"/blog/2019/11/04/speaker-blog-how-to-build-the-top-mobile-game/","strippedHtml":"Context\n\nYou have been tasked with managing the Jenkins instance for the highest grossing mobile\ngame in the world. You learn that this involves helping the game studio iterate their work\nagainst eight different target platforms, each with their SDK, on four different main pipelines,\nplus a lot of extra auxiliary jobs. And, of course, the studio wants all of this to go smoothly, in\norder to maintain a good pace of features and bugfixes for every release - a release happening\nevery two weeks. Hitting hundreds of millions of players worldwide.\n\nHow are you going to make sure that the environment stays correctly configured, with the\nright versions of the required software; helping the studio maintain stability and scalability of\ntheir pipelines; ensuring operability of the Jenkins instance; improving the speed of the builds\nmonth after month?\n\nIt’s OK to sweat. You are going to need some help!\n\nThis is just a regular day in the office for a build engineer working at King. Facing a very\nbroad problem, with high quality standards and even higher stakes. Thankfully, we are not\nalone. We have access to a lot of tools - either open source tools, tools developed by the\nstudios or tools developed by our stellar build infrastructure team in Barcelona - to help carry\nus all the way to the publish line. We put all of these tools together, and by their powers\ncombined, we provide fast, easily operable workflows for the studios, cutting minutes here\nand there, ensuring the features a smooth sail from dev, to master, to release.\n\nI will explain all of the tricks we use at King to speed builds up, and to make Jenkins operation\neasier for our studios on December 4, 2019, at DevOps World | Jenkins\nWorld Lisbon.\nUse JWFOSS for 30% discount on registration!\nFor now, let’s take a look at some of them.\n\nWhere do we start?\n\nWe use on-premises elastic infrastructure, spawning machines from certain templates\nwhenever they are needed. This means that for every build, we are getting a fresh\nenvironment - no intermediate artifacts leftover or anything of the sort, which is good. That\nalso means that we need to clone our repositories and compile everything every time, which is\nbad. However, we have solutions for these two problems.\n\nWe make full use of linkclones/snapshots when spawning a VM. Every night we run a\nbootstrapper that will power on the base image and perform whatever operations we decide on\nit, before turning it back into a template and re-creating the snapshot. In the case of Candy\nCrush, we update our caches, and this helps us cut some time off of git clone and compilation.\nWe call this bootstrapper “cacheo”. It looks more or less like this:\n\nCacheo\n\n1. Start elastic agent template image\n2. Connect it to Jenkins\n3. Perform cleanup\n4. Trigger git reference cache jobs\n5. Trigger all the builds you want cached\n6. Turn off template image, delete the agent and recreate the linked clone snapshot\n\nEvery studio can specify on which templates will cacheo run, and what will it do in each of them.\nMaybe you want to make sure your Android license is on point. Or download some\npackages from artifactory. Perhaps pre-load your gradle dependencies. Whatever it is, cacheo\ndoes it for you and updates your base images every night.\n\nOne of the most common uses is to pre-fill a local git cache, and when doing so, the\nimprovement is very visible, especially on Windows:\n\nLinux\nMacOS\nWindows\n\nNFS\n2 min 11s\n2min 34s\n8min 32s\n\nLocal\n1 min 20s\n1min 35s\n3min 49s\n\nDifference\n39% faster\n39% faster\n55% faster\n\nThis means, speeding up source code fetching by 55% on Windows, on average. That is a LOT!!\n\nBut what about actual compilation?\n\nAll of our major games use the same engine; we bring this code in by means of submodules. This means\nthere is a big bunch of shared code that needs to be compiled and linked whenever we build the game.\nAnd it’s not rare that this shared code is bigger than the actual game code!\nThankfully, the engine team lent us a hand, and they developed a way to package the compiled shared code.\nNormally, the game code lives alongside a specific version of the shared code, which doesn’t get updated too frequently.\nSometimes once a month, sometimes to grab a hotfix. This translates to us potentially compiling the\nexact same shared code for quite some time, every time we build the game. Thanks to these\nprebuilt artifacts, we are able to skip a huge part of the compilation, at the cost of a simple artifactory download.\n\nCacheo\n\nif generate_prebuilt_libs:\n    compile_project()\n\n    generate_empty_cmakelists()\n\n    for dependency in dependencies:\n        merge_compiled_dependency_into_metalib(dependency)\n        write_dependency_to_generated_cmakelists_as_alias_for_metalib(dependency)\n\nelif use_prebuilt_libs:\n    add_generated_cmakelists_with_metalib_as_dependency()\n\n    compile_project()\n\nThanks to these prebuilt libraries, we are able to skip a big chunk of the compilation,\nand it builds up really quickly! Iterative work on several branches, as long as they have\nthe same engine version, gets sped up in noticeable ways.\nThere are, however, specific cases when we do choose to build the shared code regardless, such as\nwhen we build release candidates for instance.\n\nJust so you get an idea, times on this table are on average:\n\niOS\nWindows\n\nNo prebuilts\n20min 17s\n40min 30s\n\nPrebuilts\n10min 2s\n23min 20s\n\nDifference\n51% faster\n43% faster\n\nI just don’t want to have to deal with bureaucracy\n\nOperating Jenkins can be quite complicated. Talk about “Tell me\nsomething I don’t know”, right? And with so many moving pieces (elastic\ninfrastructure, plugins, dirty workspaces), it might not be easy for\neveryone to run specific maintenance tasks. We have a lot of small\npipelines, created by the build infrastructure group, that we can use to\ndiagnose and work around certain errors, as well as gather useful\ninformation that might be otherwise difficult to find. These pipelines\ndo things like printing all the installed plugins, deleting offline\non-demand agents, cleaning disconnected VMs from vSphere, or re-run\npuppet in a specific Jenkins instance. And any user can run these jobs,\nthere is no need to be an admin. This allows the team to unblock\nthemselves if they need to by using these jobs. Here’s one that I\nparticularly like. How many times have you modified a pipeline and, when\ntrying to run it, the first thing that happens is that Jenkins says that\nit needs approval?\n\nScript Approval\n\nimport org.jenkinsci.plugins.scriptsecurity.scripts.*\n\n@NonCPS\n\n// Disclaimer - this can have serious security consequences\n// Be mindful when you run this!\n\ndef call() {\n    sa = ScriptApproval.get()\n    toApproveScripts = sa.getPendingScripts().collect()\n    println (\"toApproveScripts: \" + toApproveScripts)\n    toApproveScripts.each {pending ->\n        sa.get().approveScript(pending.getHash())\n\tprintln (\"approvedScripts: \" + pending.getHash())\n\t}\n    sa.save()\n}\n\nThe best part? All our Jenkins instances include these jobs, by default, so\nno one misses out on the fun.","title":"How to build the top mobile game for every platform imaginable","tags":["jenkinsworld","jenkinsworld2019","mobile-game"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#483838","images":{"fallback":{"src":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/19e71/ignacio_fernandez.jpg","srcSet":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/77b35/ignacio_fernandez.jpg 32w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/d4a57/ignacio_fernandez.jpg 64w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/19e71/ignacio_fernandez.jpg 128w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/68974/ignacio_fernandez.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/ef6ff/ignacio_fernandez.webp 32w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/8257c/ignacio_fernandez.webp 64w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/6766a/ignacio_fernandez.webp 128w,\n/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/22bfc/ignacio_fernandez.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/65fe0ac3c5bb3e4da27248b175dc5c31/ignacio_fernandez.jpg"},"blog":null,"github":"Napo2k","html":"<div class=\"paragraph\">\n<p>Nacho is a Build Engineer with several years of experience in the videogame industry, and has worked in both AAA projects as well as free-to-play and mobile.\nCurrently, Nacho works at King Stockholm, taking care of Jenkins operations for Candy Crush Saga and Candy Crush Soda Saga.</p>\n</div>","id":"ignacio_fernandez","irc":null,"linkedin":"ignaciofernandezpuerta","name":"Ignacio 'Nacho' Fernández","slug":"/blog/authors/ignacio_fernandez/","twitter":"@napo2k"}]}},{"node":{"date":"2019-11-08T00:00:00.000Z","id":"476c260c-b24d-5dc6-acfa-3ff9c0c413c1","slug":"/blog/2019/11/08/board-elections/","strippedHtml":"The Jenkins community is conducting the 2019 elections for Board and Officer positions.\nThe call for nominations has concluded.\nWe received many nominations.\nBased on the people who are willing to accept their nomination and the uncontested officer positions, we will have 3 votes:\n\nA vote to elect 3 board members\n\nA vote to elect the Jenkins security officer\n\nA vote to elect the Jenkins events officer\n\nCandidates\n\nEach candidate has provided a statement to help guide voters on why they should vote for the candidate.\nRefer to the candidate statements for more details.\nThe candidates running for a board position are:\n\nAlex Earl\n\nOliver Gondza\n\nUllrich Hafner\n\nOleg Nenashev\n\nMark Waite\n\nZhao Xiaojie (a.k.a. Rick to many of you)\n\nThe candidates running for Security Officer are:\n\nDaniel Beck\n\nWadeck Follonier\n\nThe candidates running for Events Officer are:\n\nAlyssa Tong\n\nZhao Xiaojie (a.k.a. Rick to many of you)\n\nVoter Registration\n\nThis is the first time in a while that we are running a Jenkins election; we are learning as we go.\nJenkins elections aim to be very inclusive.\nWe do not restrict elections to just code committers.\nAnyone who has a Jenkins account registered before September 1, 2019 is eligible to vote.\nJenkins, being the successful project it is, has  approximately 100 000 accounts that meet that criteria.\nAs a result we are contacting eligible voters and requesting that they explicitly ‘opt-in’ to participate in the voting.\n\nIf you meet the criteria, you will receive an email at your registered jenkins.io email address.\nIt will be from elections@jenkins.io with the title ‘ 2019 Jenkins Election - Invitation to Participate ’.\nThe email will provide election details and will include an \" I want to participate\" button.\n\nVoter Confirmation\n\nOnce you click on the link, you should see a confirmation screen as follows:\n\nIf you do not receive the email by November 14, 2019 or if you have any problems voting, please comment on the Jenkins Election 2019 Jira issue.\n\nVoting\n\nThe voting will officially open on November 11, 2019.\nCandidates will receive an email from the Condorcet internet voting sent by Kohsuke Kawaguchi.\nOne email will be sent for each vote (so 3 in total: 1 for board, 1 for event officer and 1 for security officer).\nThe vote will ask to rank the candidates using a screen like this:\n\nElection Dates\n\nHere is a summary of the key election dates:\n\nDate\nEvent\n\nNow\nVoter registration ongoing\n\nNov 11, 2019\nVoting begins\n\nNov 17, 2019\nVoter registration closes\n\nNov 24, 2019\nVoting closes a 5:00 PM Pacific Time\n\nDec 3, 2019\nNew representatives announced\n\nElection results will be posted to the Jenkins developer mailing list, followed by an announcement blog post on jenkins.io.\n\nIf there are any delays to the proposed dates we will aim to communicate that as soon as we can.\nThank you very much for all the candidates showing the Jenkins spirit of service to their community.\nWe encourage everyone to register to vote and participate in the Jenkins community.\n\nUncontested Officer Positions\n\nWhen an officer position has only one candidate that is willing to accept the nomination, there is no reason to vote on that position.\nThe individual becomes an officer as the sole candidate for the position.\n\nUncontested officers include:\n\nName\nRole\n\nOlivier Vernin\nInfrastructure Officer\n\nOliver Gondza\nRelease Officer\n\nMark Waite\nDocumentation Officer\n\nReferences\n\nJenkins Governance Board\n\nJenkins Board Election Process\n\nJenkins Officers\n\nAnnouncement in the developer mailing list\n\n2019 elections proposal in the developer mailing list","title":"2019 Jenkins Board and Officer Elections Update","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}},"publicURL":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/tracymiranda.jpg"},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda/","twitter":"tracymiranda"}]}},{"node":{"date":"2019-11-22T00:00:00.000Z","id":"add1d65a-e5d3-5a51-85db-aba3b7ead937","slug":"/blog/2019/11/22/jenkins-health-advisor-by-cloudbees/","strippedHtml":"Managing any software presents its own unique challenges. Jenkins controllers are no exception. For example,\n\nHow do you keep a finger on the pulse of everything going on in your Jenkins environment? Are you looking at every new defect opened in the issue tracker?\n\nHow do you make sure that your controllers or agents don’t silently fail? Are you monitoring its logs? All of its internal components? If something does go wrong, how do you fix it??\n\nHow do you avoid the infamous “angry Jenkins” logo?\n\nThat’s why we created Jenkins Health Advisor by CloudBees.\n\nHere at CloudBees, we have years of experience supporting our customers who are using Jenkins, including our proprietary products build on top of Jenkins like CloudBees Core.\nAs a result, our support team is made up of automation experts with Jenkins knowledge you can’t get anywhere else.\n\nAutomated health checks started when our support engineers created a platform so they could write rules to detect known issues on support bundles provided by our customers, and redirect them to the required knowledge source to diagnose and resolve the issue.\n\nAfter years of internal usage we decided to share this service with the community and we are pleased to introduce a new free  (as in beer) service available to every Jenkins user : Jenkins Health Advisor by CloudBees .\n\nJenkins Health Advisor by CloudBees automatically analyzes your Jenkins environment, proactively identifies potential issues and advises you of solutions with detailed email reports.\n\nJenkins Health Advisor by CloudBees can detect a large range of issues from simple configuration issues to security and best practices concerns - all critical elements of Jenkins implementations.\nGetting started is done in 3 steps, and within 24 hours you will receive your first report.\n\nWe hope that you will appreciate this service and it will help you to keep your controllers healthy.\n\nTake a few minutes to read our documentation, discover the service and don’t hesitate to contact us on the Jenkins community channels ( Gitter, jenkinsci-users@googlegroups.com, …​).\n\nDon’t miss also the opportunity to meet our support team on the \"Ask the experts\" booth at DevOps World | Jenkins World 2019.\n\nUseful links:\n\nPlugin Documentation\n\nJenkins Plugin Site\n\nCloudBees Jenkins Support","title":"Jenkins Health Advisor by CloudBees is here!","tags":["jenkins","health","healthcheck","stability"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/bf8e1/aheritier.png","srcSet":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/914ee/aheritier.png 32w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/1c9ce/aheritier.png 64w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/bf8e1/aheritier.png 128w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/acb7c/aheritier.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/ef6ff/aheritier.webp 32w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/8257c/aheritier.webp 64w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/6766a/aheritier.webp 128w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/22bfc/aheritier.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/aheritier.png"},"blog":"https://aheritier.net","github":"aheritier","html":"<div class=\"paragraph\">\n<p>Specialised in <a href=\"https://www.linkedin.com/in/aheritier\">software development and process automation</a>, he has been contributing for many years to various open source projects such as <a href=\"https://jenkins.io\">Jenkins</a>, <a href=\"https://maven.apache.org\">Apache Maven</a> and to various communities around Java and DevOps.\nMember of <a href=\"https://lescastcodeurs.com\">Les Cast Codeurs</a> podcast (a french podcast dedicated to IT in general and Java ecosystem), he regularly speaks at various conferences, users groups and participates in the organisation of <a href=\"https://devoxx.fr/what-is-devoxx-france\">Devoxx France</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In 2015, he joined <a href=\"http://www.cloudbees.com\">CloudBees, Inc.</a>, where he is now managing the Support Tooling development activity.</p>\n</div>","id":"aheritier","irc":null,"linkedin":null,"name":"Arnaud Héritier","slug":"/blog/authors/aheritier/","twitter":"aheritier"}]}},{"node":{"date":"2019-11-22T00:00:00.000Z","id":"e5f5bc1a-7d2f-5807-8b41-7478e232a4f1","slug":"/blog/2019/11/22/welcome-to-the-matrix/","strippedHtml":"I often find myself needing to run the same actions on a bunch of different configurations.\nUp to now, that meant I had to make multiple copies of the same stages in my pipelines.\nWhen I needed to make changes, I had to make the same changes in multiple places throughout my pipeline.\nMaintaining even a small number of configuration was difficult for larger pipelines.\n\nDeclarative Pipeline 1.5.0-beta1 (now available from the\nJenkins Experimental Update site) adds a new matrix section that lets me specify a list stages once and then run that same list in parallel on multiple configurations.\nLet’s take a look!\n\nSingle configuration pipeline\n\nI’ll start with a simple pipeline with build and test stages.\nI’m using echo steps as placeholders for my build and test actions.\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            agent any\n            stages {\n                stage('Build') {\n                    steps {\n                        echo 'Do Build'\n                    }\n                }\n                stage('Test') {\n                    steps {\n                        echo 'Do Test'\n                    }\n                }\n            }\n        }\n    }\n}\n\nPipeline for multiple platforms and browsers\n\nI’d like to run my build and tests on a combination of platforms and browsers.\nThe new matrix directive lets me specify a set of axes.\nEach axis has a name and a list of one or more values.\nWhen the pipeline is run, Jenkins will take those and run my stages on all possible combinations of values from each axis.\nAll cells in a matrix run in parallel (limited only by the number of available agents).\nStages within each cell are run sequentially.\n\nMy matrix has two axes: PLATFORM and BROWSER.\nI have three values for PLATFORM and four values for BROWSER resulting in my stages being run with twelve different combinations.\nI’ve changed my echo steps to use the axis values for each cell.\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent any\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nLog output (truncated)\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'edge') (hide)\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'edge')\n...\nDo Build for linux - safari\nDo Build for linux - firefox\nDo Build for windows - firefox\nDo Test for linux - firefox\nDo Build for mac - firefox\nDo Build for linux - chrome\nDo Test for windows - firefox\n...\n\nExcluding invalid combinations\n\nNow that I have my basic matrix created, I’ve noticed that I have some invalid combinations.\nMicrosoft Edge only runs on Windows and there isn’t a Linux version of Safari.\n\nI can remove invalid cells from my matrix using exclude directives. Each exclude has one or more axis directives with name and values.\nThe axis directives inside an exclude generate a set of combinations (similar to generating the matrix cells).\nThe matrix cells that match all the values from an exclude combination are removed from the matrix.\nIf I have more than one exclude directive, each are evaluated separately to remove cells.\n\nWhen dealing with a long lists of values to exclude, I can use notValues instead of values to specify axis values we don’t want excluded.\nYes, that’s a double negative, so it can get a little confusing.\nI try to use it only when I really need it.\n\nIn my sample pipeline below, I specifically exclude the linux, safari combination and I also exclude any platform that is not windows with the edge browser.\n\nThis pipeline uses two axes but there is no limit on the number of axis directives.\n\nAlso, in this pipeline each exclude specifies values for both axes, but that is not required.\nIf we wanted to run only \"linux\" cells, we could use the following exclude :\n\nexclude {\n    axis {\n        name 'PLATFORM'\n        notValues 'linux'\n    }\n}\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent any\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                excludes {\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            values 'linux'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'safari'\n                        }\n                    }\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            notValues 'windows'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'edge'\n                        }\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nLog output (truncated)\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n...\nDo Build for linux - firefox\n...\n\nControlling cell behavior at runtime\n\nInside the matrix directive I can also add \"per-cell\" directives.\nThese are the same directives that I would add to a stage and they let me control the behavior of each cell in the matrix.\nThese directives can use the axis values from their cell as part of their inputs, allowing me to customize the behavior of each cell to match its axis values.\n\nOn my Jenkins server I have configured agents with labels that match the OS for each agent (\"linux-agent\", \"windows-agent\", and \"mac-agent\").\nTo run each cell in my matrix on the appropriate operating system, I configure the label for that cell using Groovy string templating.\n\nmatrix {\n    axes { ... }\n    excludes { ... }\n    agent {\n        label \"${PLATFORM}-agent\"\n    }\n    stages { ... }\n    // ...\n}\n\nOccasionally I run my pipeline manually from the Jenkins Web UI.\nWhen I do that, I’d like to be able to select just one platform to run.\nThe axis and exclude directives define the static set of cells that make up the matrix.\nThat set of combinations is generated before the start of the run, before any parameters are processed.\nWhat this means is that I can’t add or remove cells from a matrix after the job has started.\n\nThe \"per-cell\" directives, on the other hand, are evaluated at runtime.\nI can use the \"per-cell\" when directive inside matrix to control which cells in the matrix are executed.\nI’ll add a choice parameter with the list of platforms, and add conditions to the when directive, which will either let all platforms execute, or only execute cells that match my selected platform.\n\npipeline {\n    parameters {\n        choice(name: 'PLATFORM_FILTER', choices: ['all', 'linux', 'windows', 'mac'], description: 'Run on specific platform')\n    }\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent {\n                    label \"${PLATFORM}-agent\"\n                }\n                when { anyOf {\n                    expression { params.PLATFORM_FILTER == 'all' }\n                    expression { params.PLATFORM_FILTER == env.PLATFORM }\n                } }\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                excludes {\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            values 'linux'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'safari'\n                        }\n                    }\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            notValues 'windows'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'edge'\n                        }\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nIf I run this Pipeline from the Jenkins UI and set the PLATFORM_FILTER parameter to mac, I’ll get something like the output below:\n\nLog output (truncated - PLATFORM_FILTER = 'mac' )\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n...\nStage \"Matrix - OS = 'linux', BROWSER = 'chrome'\" skipped due to when conditional\nStage \"Matrix - OS = 'linux', BROWSER = 'firefox'\" skipped due to when conditional\n...\nDo Build for mac - firefox\nDo Build for mac - chrome\nDo Build for mac - safari\n...\nStage \"Matrix - OS = 'windows', BROWSER = 'chrome'\" skipped due to when conditional\nStage \"Matrix - OS = 'windows', BROWSER = 'edge'\" skipped due to when conditional\n...\nDo Test for mac - safari\nDo Test for mac - firefox\nDo Test for mac - chrome\n\nCome join me at DevOps World | Jenkins World 2019 for \" Declarative Pipeline 2019: Tips, Tricks and What’s Next \".\nI’ll go over what’s been added to Pipeline in the last year (including matrix) and discuss ideas about where pipeline should go next.\n\nConclusion\n\nIn this blog post, we’ve looked at how to use the matrix directive to make concise but powerful declarative pipelines.\nAn equivalent pipeline created without matrix would easily be several times larger, and much harder to understand and maintain.\n\nMatrix is now available from the experimental update center.\nIt will be released to the main update center as soon as we’re done putting the finishing touches on the documentation and online help.\n\nLinks\n\nJenkins Experimental Update Center\n\nUsing the Jenkins Experimental Update Center","title":"Welcome to the Matrix","tags":["pipeline","plugins","declarative","matrix"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2019-11-25T00:00:00.000Z","id":"726986a7-4dcd-5c99-8b23-e199566c8eea","slug":"/blog/2019/11/25/macos-native-installer-deprecation/","strippedHtml":"In addition to WAR files and Docker images, the Jenkins project provides native installers for each weekly and LTS release.\nThere are installers available for Linux distributions, Windows, macOS and other operating systems.\nThere are also installers provided by third parties.\nYou can find the list of these installers on the Downloads page.\n\nIn this blog post, we announce the upcoming deprecation of the macOS native installer.\nWe will review the replacement options and the rollout plan.\n\nWhy?\n\nMaintaining installers is a significant maintenance effort for the project\nbecause installers require testing and, sometimes, specific platforms and environments for packaging.\nWhen installers lose relevance for the majority of the Jenkins audience, we remove them or handover maintenance to third parties on other areas.\nFor macOS, there are currently two types of packages: native installers with GUI for desktop versions and Homebrew packages.\nSince Homebrew is now a defacto standard package manager for macOS users, from the Jenkins standpoint it made sense to deprecate the native installers.\n\nWhy now?\nThere is ongoing work on automating Jenkins Core releases within the Jenkins infrastructure.\nLong story short, we are moving Jenkins release pipelines to Kubernetes on Microsoft Azure.\nThis environment does not offer macOS machines that are needed to produce native installers.\nIf you are interested to know more, there will be a How Jenkins Builds and Delivers Jenkins in the Cloud talk presented by Olivier Vernin at DevOps World | Jenkins World 2019 Europe in Lisbon (use the JWFOSS code for a 30% discount!).\n\nWe could have used an external service for building macOS installers,\nbut it would have added an additional point of failure and implementation/maintenance overhead.\nSo we discussed it in the developer mailing list and agreed that it is better to just deprecate and then remove the packages.\n\nReplacing native installers\n\nIn the case of macOS, there are two main alternatives available: managing the service manually or migrating to Homebrew packages.\nBefore doing a migration, we highly recommend backing up your instance.\n\nManaging Jenkins with WAR file on macOS\n\nIf your Jenkins instance was previously set up with a native installer,\nto update Jenkins it will be enough to replace the jenkins.war file in the installation directory and restart the instance.\nThe services will keep running as it was configured before the migration.\nThe default installation directory is /Applications/Jenkins/jenkins.war\n\nManaging Jenkins with Homebrew\n\nInstalling Jenkins with Homebrew is a way to go for those who want to install Jenkins using a package manager.\nThere are two Homebrew formulas for Jenkins: jenkins for Weekly releases and jenkins-lts for LTS ones.\nThese packages are supported by a third party (Homebrew community),\nand they may be not as frequently updated as packages supported by the Jenkins project directly.\n\nBefore doing a migration from macOS Native installers to HomeBrew, please make sure to backup your Jenkins instance.\nThere are no automatic migration tools available, and the installation may corrupt your JENKINS_HOME or service configuration files in edge cases.\n\nIf you switch to Homebrew, you will need to properly migrate the JENKINS_HOME data to the new location.\nWe do not provide an official migration guide, but it is possible to find some guidelines on the Web.\n\nSample commands:\n\nInstall the latest Weekly version: brew install jenkins\n\nInstall a specific Weekly version: brew install jenkins@YOUR_VERSION\n\nStart the Jenkins service: brew services start jenkins\n\nRestart the Jenkins service: brew services restart jenkins\n\nUpdate the Jenkins version: brew upgrade jenkins\n\nFor more information see the documentation for Homebrew packages on the macOS Download pages.\n\nRollout plan\n\nmacOS native packaging is considered as deprecated starting from Jenkins 2.206 and Jenkins LTS 2.204.1\n\nFor Jenkins Weekly macOS native packaging will be removed with the switch to the new Jenkins release flow.\nThe exact date is to be determined.\n\nAfter the change, there will be no macOS native installers produced for new Jenkins Weekly releases\n\nReleases for previous versions will be available in this archive\n\nFor Jenkins LTS macOS will be removed with the switch to the new Jenkins release flow in the LTS baseline.\nThis change will happen only after the deployment of the new release flow in Jenkins Weekly.\n\nAfter the switch, there will be no macOS native installers produced for new Jenkins LTS releases\n\nReleases for previous versions will be available in this archive\n\nSee the discussion on the developer mailing list for more information.\n\nQuestions and feedback\n\nIf you have any questions or want to provide feedback, please use the developer mailing list thread mentioned above Platform SIG channels (chat, google group).\nAny feedback will be much appreciated because we plan more installer/ and platform deprecations in the future.","title":"Jenkins macOS native installer deprecation","tags":["announcement","deprecation","macos","platform-sig","platforms"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2019-11-29T00:00:00.000Z","id":"c4402fa6-fa64-5bd5-9fce-956f048b190a","slug":"/blog/2019/11/29/do-plugins-store-credentials-in-a-secure-way/","strippedHtml":"This is a speaker blog post for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal and has been posted in line with NCC Group responsible disclosure policy.\nRelated Jenkins security advisories:\n2017-11-08,\n2017-11-16,\n2018-06-25,\n2018-07-30,\n2018-09-25,\n2019-02-19,\n2019-03-06,\n2019-03-25,\n2019-04-03,\n2019-04-17,\n2019-08-07,\n2019-09-12,\n2019-10-01,\n2019-10-16,\n2019-10-23.\nSome of the vulnerabilities have been announced without a fix, see Jenkins Security Spring Cleaning 2019.\nThe most of the announced vulnerabilities are fixed at the moment of this blogpost publishing.\n\nCome join us at DevOps World | Jenkins World 2019 for \" The Story, the Findings and the Fixes Behind More than 100 Jenkins Plugins Vulnerabilities \", a talk about the most common vulnerabilities found during research in more than 100 plugins.\nWe’ll review how to prevent these vulnerabilities during plugin development so that a more secure Jenkins CI and CD environment can be built.\n\nWhen I first began familiarising myself with Jenkins, I found myself almost overwhelmed by the amount of plugins to choose from. Most of these plugins are developed by third party developers or companies and can assist the user in a range of ways. They can extend the core functions, they can offer solutions to repetitive tasks or they can help with using a service. For example, they could help with publishing to an artifact store or spinning up cloud instances. However, before a plugin can use a network based service that requires credentials to connect, those credentials have to be typed in and saved somewhere. This raises the question, are those credentials stored securely? Or not?\nWhen I started looking at different plugins this was one of the first areas I investigated. I found a Jenkins security advisory describing this issue and came to the conclusion that this could be a problem in some plugins, albeit one that could be fixed easily. I found an example of weakly stored credentials in the Publish Over Dropbox Plugin; this plugin used a simple web form with a textbox element to display the token in the plugin’s settings page. This token was stored in plaintext:\n\nThe following Jelly code was behind the web form and shows that a password field wasn’t used:\n\nThe related plugin .xml file contained the secret key in plaintext:\n\nGLOBAL\nwoodspeed\n\nlYD2VnNz\nlYD2VnNz\n\nJenkins offers at least two ways to store credentials in an encrypted format:\n\nUsing a Secret type offered by Jenkins\n\nThird party plugin called Credentials Plugin\n\nThe first case is the easiest solution, because Jenkins will automatically handle the encryption and decryption.\n\nDevelopers should also use the password field tag instead of the textbox field, as shown in the following Jelly control example:\n\nIf you would like to know what other vulnerabilities I discovered and how to fix them, come and join us for the presentation in Lisbon!\nIn case you are unable to attend the conference, you can read more at Story of a Hundred Vulnerable Jenkins Plugins.","title":"Do Plugins Store Credentials In A Secure Way? - DevOps World | Jenkins World 2019","tags":["jenkins world","jenkinsworld","devopsworld2019","security"],"authors":[{"avatar":null,"blog":null,"github":"woodspeed","html":"<div class=\"paragraph\">\n<p>Viktor is a security consultant and the 2019 Jenkins Security MVP.</p>\n</div>","id":"woodspeed","irc":null,"linkedin":null,"name":"Viktor Gazdag","slug":"/blog/authors/woodspeed/","twitter":"wucpi"}]}},{"node":{"date":"2019-12-02T00:00:00.000Z","id":"85ad92d1-eb99-59b8-9bbf-3b4f6309d6df","slug":"/blog/2019/12/02/matrix-building-with-scripted-pipeline/","strippedHtml":"Table of Contents\n\nMatrix building with scripted pipeline\nScreenshot of matrix pipeline\nAdding static choices\nAdding dynamic choices\nFull pipeline example with dynamic choices\nBackground: How does it work?\nExposing a shared library pipeline step\nSummary\n\nWith the recent announcement about matrix building you can perform\nMatrix builds\nwith declarative pipeline.  However, if you must use scripted pipeline, then\nI’m going to cover how to matrix build platforms and tools using scripted\npipeline.  The examples in this post are modeled after the declarative pipeline\nmatrix examples.\n\nMatrix building with scripted pipeline\n\nThe following Jenkins scripted pipeline will build combinations across two\nmatrix axes.  However, adding more axes to the matrix is just as easy as adding\nanother entry to the Map matrix_axes.\n\nJenkinsfile\n\n// you can add more axes and this will still work\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\n@NonCPS\nList getMatrixAxes(Map matrix_axes) {\n    List axes = []\n    matrix_axes.each { axis, values ->\n        List axisList = []\n        values.each { value ->\n            axisList << [(axis): value]\n        }\n        axes !(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\n// parallel task map\nMap tasks = [failFast: false]\n\nfor(int i = 0; i\"${k}=${v}\"\n    }\n    // let's say you have diverse agents among Windows, Mac and Linux all of\n    // which have proper labels for their platform and what browsers are\n    // available on those agents.\n    String nodeLabel = \"os:${axis['PLATFORM']} && browser:${axis['BROWSER']}\"\n    tasks[axisEnv.join(', ')] = { ->\n        node(nodeLabel) {\n            withEnv(axisEnv) {\n                stage(\"Build\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n                stage(\"Test\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n            }\n        }\n    }\n}\n\nstage(\"Matrix builds\") {\n    parallel(tasks)\n}\n\nMatrix axes contain the following combinations:\n\n[PLATFORM=linux, BROWSER=firefox]\n[PLATFORM=windows, BROWSER=firefox]\n[PLATFORM=mac, BROWSER=firefox]\n[PLATFORM=linux, BROWSER=chrome]\n[PLATFORM=windows, BROWSER=chrome]\n[PLATFORM=mac, BROWSER=chrome]\n[PLATFORM=windows, BROWSER=safari]\n[PLATFORM=mac, BROWSER=safari]\n[PLATFORM=windows, BROWSER=edge]\n\nIt is worth noting that Jenkins agent labels can contain a colon ( :).  So\nos:linux and browser:firefox are both valid agent labels.  The node\nexpression os:linux && browser:firefox will search for Jenkins agents which\nhave both labels.\n\nScreenshot of matrix pipeline\n\nThe following is a screenshot of the pipeline code above running in a sandbox\nJenkins environment.\n\nAdding static choices\n\nIt is useful for users to be able to customize building matrices when a build\nis triggered.  Adding static choices requires only a few changes to the above\nscript.  Static choices as in we hard code the question and matrix filters.\n\nJenkinsfile\n\n(response['PLATFORM'] == 'all' || response['PLATFORM'] == axis['PLATFORM']) &&\n    (response['BROWSER'] == 'all' || response['BROWSER'] == axis['BROWSER']) &&\n    !(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\nThe pipeline code then renders the following choice dialog.\n\nWhen a user chooses the customized options, the pipeline reacts to the\nrequested options.\n\nAdding dynamic choices\n\nDynamic choices means the choice dialog for users to customize the build is\ngenerated from the Map matrix_axes rather than being something a pipeline\ndeveloper hard codes.\n\nFor user experience (UX), you’ll want your choices to automatically reflect the\nmatrix axis options you have available.  For example, let’s say you want to add\na new dimension for Java to the matrix.\n\n// you can add more axes and this will still work\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    JAVA: ['openjdk8', 'openjdk10', 'openjdk11'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\nTo support dynamic choices, your choice and matrix axis filter needs to be\nupdated to the following.\n\nchoice(\n                choices: ['all'] + options.sort(),\n                description: \"Choose a single ${key.toLowerCase()} or all to run tests.\",\n                name: key)\n        })\n}\n\n// filter the matrix axes since\n// Safari is not available on Linux and\n// Edge is only available on Windows\nList axes = getMatrixAxes(matrix_axes).findAll { axis ->\n    response.every { key, choice ->\n        choice == 'all' || choice == axis[key]\n    } &&\n    !(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\nIt will dynamically generate choices based on available matrix axes and will\nautomatically filter if users customize it.  Here’s an example dialog and\nrendered choice when the pipeline executes.\n\nFull pipeline example with dynamic choices\n\nThe following script is the full pipeline example which contains dynamic\nchoices.\n\n// you can add more axes and this will still work\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    JAVA: ['openjdk8', 'openjdk10', 'openjdk11'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\n@NonCPS\nList getMatrixAxes(Map matrix_axes) {\n    List axes = []\n    matrix_axes.each { axis, values ->\n        List axisList = []\n        values.each { value ->\n            axisList << [(axis): value]\n        }\n        axes \nchoice(\n                choices: ['all'] + options.sort(),\n                description: \"Choose a single ${key.toLowerCase()} or all to run tests.\",\n                name: key)\n        })\n}\n\n// filter the matrix axes since\n// Safari is not available on Linux and\n// Edge is only available on Windows\nList axes = getMatrixAxes(matrix_axes).findAll { axis ->\n    response.every { key, choice ->\n        choice == 'all' || choice == axis[key]\n    } &&\n    !(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\n// parallel task map\nMap tasks = [failFast: false]\n\nfor(int i = 0; i\"${k}=${v}\"\n    }\n    // let's say you have diverse agents among Windows, Mac and Linux all of\n    // which have proper labels for their platform and what browsers are\n    // available on those agents.\n    String nodeLabel = \"os:${axis['PLATFORM']} && browser:${axis['BROWSER']}\"\n    tasks[axisEnv.join(', ')] = { ->\n        node(nodeLabel) {\n            withEnv(axisEnv) {\n                stage(\"Build\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n                stage(\"Test\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n            }\n        }\n    }\n}\n\nstage(\"Matrix builds\") {\n    parallel(tasks)\n}\n\nBackground: How does it work?\n\nThe trick is in axes.combinations()*.sum().  Groovy combinations are a quick\nand easy way to perform a\ncartesian product.\n\nHere’s a simpler example of how cartesian product works.  Take two simple lists\nand create combinations.\n\nList a = ['a', 'b', 'c']\nList b = [1, 2, 3]\n\n[a, b].combinations()\n\nThe result of [a, b].combinations() is the following.\n\n[\n    ['a', 1],\n    ['b', 1],\n    ['c', 1],\n    ['a', 2],\n    ['b', 2],\n    ['c', 2],\n    ['a', 3],\n    ['b', 3],\n    ['c', 3]\n]\n\nInstead of a, b, c and 1, 2, 3 let’s do the same example again but instead using matrix maps.\n\nList java = [[java: 8], [java: 10]]\nList os = [[os: 'linux'], [os: 'freebsd']]\n\n[java, os].combinations()\n\nThe result of [java, os].combinations() is the following.\n\n[\n    [ [java:8],  [os:linux]   ],\n    [ [java:10], [os:linux]   ],\n    [ [java:8],  [os:freebsd] ],\n    [ [java:10], [os:freebsd] ]\n]\n\nIn order for us to easily use this as a single map we must add the maps\ntogether to create a single map.  For example, adding\n[java: 8] + [os: 'linux'] will render a single hashmap\n[java: 8, os: 'linux'].  This means we need our list of lists of maps to\nbecome a simple list of maps so that we can use them effectively in pipelines.\n\nTo accomplish this we make use of the\nGroovy spread\noperator ( *. in axes.combinations()*.sum()).\n\nLet’s see the same java / os example again but with the spread operator being\nused.\n\nList java = [[java: 8], [java: 10]]\nList os = [[os: 'linux'], [os: 'freebsd']]\n\n[java, os].combinations()*.sum()\n\nThe result is the following.\n\n[\n    [ java: 8,  os: 'linux'],\n    [ java: 10, os: 'linux'],\n    [ java: 8,  os: 'freebsd'],\n    [ java: 10, os: 'freebsd']\n]\n\nWith the spread operator the end result of a list of maps which we can\neffectively use as matrix axes.  It also allows us to do neat matrix filtering\nwith the findAll {} Groovy List method.\n\nExposing a shared library pipeline step\n\nThe best user experience is to expose the above code as a shared library\npipeline step.  As an example, I have added\nvars/getMatrixAxes.groovy\nto Jervis.  This provides a flexible shared library step which you can copy\ninto your own shared pipeline libraries.\n\nThe step becomes easy to use in the following way with a simple one dimension matrix.\n\nJenkinsfile\n\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n]\n\nList axes = getMatrixAxes(matrix_axes)\n\n// alternately with a user prompt\n//List axes = getMatrixAxes(matrix_axes, user_prompt: true)\n\nHere’s a more complex example using a two dimensional matrix with filtering.\n\nJenkinsfile\n\n!(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\nAnd again with a three dimensional matrix with filtering and prompting for user\ninput.\n\nJenkinsfile\n\n!(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\nThe script approval is not necessary for\nShared Libraries.\n\nIf you don’t want to provide a shared step.  In order to expose matrix building\nto end-users, you must allow the following method approval in the script\napproval configuration.\n\nScript approval\n\nstaticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods combinations java.util.Collection\n\nSummary\n\nWe covered how to perform matrix builds using scripted pipeline as well as how\nto prompt users for customizing the matrix build.  Additionally, an example was\nprovided where we exposed getting buildable matrix axes to users as an easy to\nuse Shared Library\nstep via vars/getMatrixAxes.groovy.  Using a shared library step is\ndefinitely the recommended way for admins to support users rather than trying\nto whitelist groovy methods.\n\nJervis shared pipeline library has supported matrix building since 2017 in Jenkins scripted pipelines.\n( see here and\nhere\nfor an example).","title":"Matrix building in scripted pipeline","tags":["matrix","pipeline","plugins","scripted"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8b8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/bf8e1/sgleske.png","srcSet":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/914ee/sgleske.png 32w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/1c9ce/sgleske.png 64w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/bf8e1/sgleske.png 128w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/acb7c/sgleske.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/ef6ff/sgleske.webp 32w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/8257c/sgleske.webp 64w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/6766a/sgleske.webp 128w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/22bfc/sgleske.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/sgleske.png"},"blog":null,"github":"samrocketman","html":"<div class=\"paragraph\">\n<p>A Senior Software Engineer at <a href=\"https://integralads.com/\">Integral Ad\nScience</a>, he develops a Jenkins solution to scale CI/CD onboarding for the\nentire company.  To aide in this cause he has been developing\n<a href=\"https://github.com/samrocketman/jervis/wiki\">Jervis: Jenkins as a service</a>\nwhich strongly focuses on onboarding people and not just technology or projects\ninto Jenkins.  When not at work he enjoys contributing to open source software,\nlike the Jenkins project, solely through volunteer time.</p>\n</div>","id":"sgleske","irc":null,"linkedin":null,"name":"Sam Gleske","slug":"/blog/authors/sgleske/","twitter":"sag47"}]}},{"node":{"date":"2019-12-10T00:00:00.000Z","id":"ed404ce2-c53c-5f43-ae06-381e9a803bce","slug":"/blog/2019/12/10/introducing-aws-secrets-manager-credentials-provider-plugin/","strippedHtml":"API keys and secrets are difficult to handle safely, and probably something you avoid thinking about. In this post I’ll show how the new AWS Secrets Manager Credentials Provider plugin allows you to marshal your secrets into one place, and use them securely from Jenkins.\n\nWhen CI/CD pipelines moved to the public cloud, credential management did not evolve with them. If you’re in this situation, you may have seen a number of tactical workarounds to keep Jenkins builds talking to the services they depend on. The workarounds range from bad (hardcoding plaintext secrets into Git) to merely painful (wrangling Hiera EYAML), but their common feature is that they tend to make copies of secrets beyond the reach of automation. This increases their attack surface, makes routine key rotation impractical, and makes remediation difficult after a breach.\n\nThe good news is that there is a better way!\n\nAWS Secrets Manager is a comprehensive solution for secure secret storage. You define a secret just once for your whole AWS account, then you give your consumers permission to use the secrets. Secrets Manager lets you manage a secret entry (name and metadata) separately from its value, and it integrates with other AWS services that you already use:\n\nSecret entry management: Manual (Web console, AWS CLI) or with an infrastructure management tool ( Terraform, CloudFormation etc.)\n\nSecret value management: Manual (Web console, AWS CLI) or automatic (secret rotation Lambda function).\n\nAccess control: AWS IAM policies (for both applications and human operators).\n\nSecret encryption: Amazon KMS automatically encrypts the secret value. Use either the account’s default KMS key, or a customer-managed KMS key.\n\nAuditing: AWS CloudTrail and CloudWatch Events.\n\nA couple of teams in my company started to use Secrets Manager from Jenkins jobs by calling the AWS CLI, but this remained a niche approach as it was quite unwieldy. There was clearly an appetite to integrate key developer apps with a centralised secrets store, but production-ready integrations were needed for wider adoption. So this year I created the AWS Secrets Manager Credentials Provider plugin for Jenkins, with help from friends in the Jenkins community, to do exactly that.\n\nThis is how you set it up…​\n\nInstall the plugin from the Jenkins update center.\n\nGive Jenkins read-only access to Secrets Manager with an IAM policy.\n\n(Optional) Configure the plugin, either through the Global Configuration screen or Jenkins Configuration As Code.\n\nThis is how you use it…​\n\nCreate your build secrets in AWS Secrets Manager. (You can start by uploading secrets via the AWS CLI. More sophisticated methods of secret creation are also available.)\n\nView the credentials in the Jenkins UI, to check that Jenkins can see them.\n\nBind the credentials by ID in your Jenkins job.\n\nThe provider supports the following standard Jenkins credential types:\n\nSecret Text\n\nUsername With Password\n\nSSH User Private Key\n\nPKCS#12 Certificate\n\nAnd it has powerful advantages over quick-fix tactical solutions:\n\nYour Jenkins jobs consume the credentials with no knowledge of Secrets Manager, so they stay vendor-independent.\n\nThe provider caches relevant Secrets Manager API calls, for a quicker and more reliable experience.\n\nThe provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Git and SSH Agent plugins.\n\nThe provider records credential usage in the central Jenkins credentials tracking log.\n\nJenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Secrets Manager while consuming other credentials from your existing providers.\n\nAfter the plugin’s first public release, developers at other companies adopted it too. It has had contributions so far from people at Elsevier, GoDaddy, and Northeastern University, as well as the fantastic Jenkins core team. We even got fan mail for our work!\n\nIn enterprise security, \"The important things are always simple. The simple things are always hard. The easy way is always mined.\" ( @thegrugq) It’s easy to buy a shiny ‘next generation' security appliance and drop it into your network. But it’s hard to embed the security fundamentals (like secrets management, OS patching, secure development) across your organisation. This Jenkins plugin is part of the effort [ 1 ] to take one of the persistent hard problems in security, and make it easier for everyone.\n\n1. If you’re on Azure or you run most of your workload on Kubernetes, check out the Azure Credentials Plugin and the Kubernetes Credentials Provider Plugin.","title":"Introducing the AWS Secrets Manager Credentials Provider for Jenkins","tags":["pipeline","plugins","aws","credentials","security"],"authors":[{"avatar":null,"blog":null,"github":"chriskilding","html":"","id":"chriskilding","irc":null,"linkedin":"chriskilding","name":"Chris Kilding","slug":"/blog/authors/chriskilding/","twitter":null}]}},{"node":{"date":"2019-12-14T00:00:00.000Z","id":"646ce24b-257b-5341-bb67-a06739313fd5","slug":"/blog/2019/12/14/generic-webhook-trigger-plugin/","strippedHtml":"Table of Contents\n\nThe Problem\n\nCode Duplication And Security\nA Branch Is Not A Feature\nDocumentation\n\nThe Solution\n\nCode Duplication And Security\nA Branch Is Not A Feature\nDocumentation\n\nThis post will describe some common problems I’ve had with Jenkins and how I solved them by developing Generic Webhook Trigger Plugin.\n\nThe Problem\n\nI was often struggling with the same issues when working with Jenkins:\n\nCode duplication and security - Jenkinsfiles in every repository.\n\nA branch is not a feature - Parameterized jobs on master branch often mix parameters relevant for different features.\n\nPoorly documented trigger plugins - Proper documented services but poorly documented consuming plugins.\n\nCode Duplication And Security\n\nHaving Jenkinsfiles in every Git repository allows developers to let those files diverge. Developers pushes forward with their projects and it is hard to maintain patterns to share code.\n\nI have, almost, solved code duplication with shared libraries but it does not allow me to setup a strict pattern that must be followed. Any developer can still decide to not invoke the features provided by the shared library.\n\nThere is also the security aspect of letting developers run any code from the Jenkinsfiles. Developers might, for example, print passwords gathered from credentials. Letting developers execute any code on the Jenkins nodes just does not seem right to me.\n\nA Branch Is Not A Feature\n\nIn Bitbucket there are projects and each project has a collection of git repositories. Something like this:\n\nPROJ_1\n\nREPO_1\n\nREPO_2\n\nPROJ_2\n\nREPO_3\n\nLets think about some features we want to provide for these repositories:\n\nPull request verification\n\nBuilding snapshot (or pre release if you will)\n\nBuilding releases\n\nIf the developers are use to the repositories being organized like this in Bitbucket, should we not organize them the same way in Jenkins? And if they browse Jenkins should they not find one job per feature, like pull-request, snapshot and release? Each job with parameters only relevant for that feature. I think so! Like this:\n\n/ - Jenkins root\n\n/PROJ_1 - A folder, lists git repositories\n\n/PROJ_1/REPO_1 - A folder, lists jobs relevant for that repo.\n\n/PROJ_1/REPO_1/release - A job, performs releases.\n\n/PROJ_1/REPO_1/snapshot - A job, performs snapshot releases.\n\n/PROJ_1/REPO_1/pull-request - A job, verifies pull requests.\n\n…​\n\nIn this example, both snapshot and release jobs might work with the same git branch. The difference is the feature they provide. Their parameters can be well documented as you don’t have to mix parameters relevant for releases and those relevant for snapshots. This cannot be done with Multibranch Pipeline Plugin where you specify parameters as properties per branch.\n\nDocumentation\n\nWebhooks are often well documented in the services providing them. See:\n\nBitbucket Cloud\n\nBitbucket Server\n\nGitHub\n\nGitLab\n\nGogs and Gitea\n\nAssembla\n\nJira\n\nIt bothered me that, even if I understood these webhooks, I was unable to use them. Because I needed to perform development in the plugin I was using in order to provide whatever value from the webhook to the build. That process could take months from PR to actual release. Such a simple thing should really not be an issue.\n\nThe Solution\n\nMy solution is pretty much back to basics : We have an automation server (Jenkins) and we want to trigger it on external webhooks. We want to gather information from that webhook and provide it to our build. In order to support it I have created the Generic Webhook Trigger Plugin.\n\nThe latest docs are available in the repo and I also have a fully working example with GitLab implemented using configuration-as-code. See the repository here.\n\nCode Duplication And Security\n\nI establish a convention that all developers must follow. Instead of letting the developers explicitly invoke the infrastructure from Jenkinsfiles. There are rules to follow, like:\n\nAll git repositories should be built from the root of the repo.\n\nIf it contains a gradlew\n\nBuild is done with./gradlew build\n\nRelease is done with./gradlew release\n\n…​ and so on\n\nIf it contains a package.json\n\nBuild is done with npm run build\n\nRelease is done with npm run release\n\n…​ and so on\n\nWith these rules, pipelines can be totally generic and no Jenkinsfiles are needed in the repositories. Some git repositories may, for some reason, need to disable test cases. That can be solved by allowing repositories to add a special file, perhaps jenkins-settings.json, let the infrastructure discover and act on its content.\n\nThis also helps the developers even when not doing CI. When they clone a new, to them unknown, repository they will know what commands can be issued and their semantics.\n\nA Branch Is Not A Feature\n\nI implement:\n\nJenkins job configurations - With Job DSL.\n\nJenkins build process - With Pipelines and Shared Library.\n\nBy integrating with the git service from Job DSL I can automatically find the git repositories. I create jobs dynamically organized in folders. Also invoking the git service to setup webhooks triggering those jobs. The jobs are ordinary pipelines, not multibranch, and they don’t use Jenkinsfile from Git but instead Jenksinfile configured in the job using Job DSL. So that all job configurations and pipelines are under version control. This is all happening here.\n\nDocumentation\n\nThe plugin uses JSONPath, and also XPath, to extract values from JSON and provide them to the build. Letting the user pick whatever is needed from the webhook. It also has a regular expression filter to allow not triggering for some conditions.\n\nThe plugin is not very big, just being the glue between the webhook, JSONPath / XPath and regular expression. All these parts are very well documented already and I do my best supporting the plugin. That way this is a very well documented solution to use!","title":"Generic Webhook Trigger Plugin","tags":["webhooks","trigger","pipeline","security","scalability"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#98a8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg","srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/77b35/tomasbjerre.jpg 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/d4a57/tomasbjerre.jpg 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/68974/tomasbjerre.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/ef6ff/tomasbjerre.webp 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/8257c/tomasbjerre.webp 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/6766a/tomasbjerre.webp 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/22bfc/tomasbjerre.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/tomasbjerre.jpg"},"blog":"https://bjurr.com/","github":"tomasbjerre","html":"<div class=\"paragraph\">\n<p>Tomas Bjerre is an experienced fullstack software developer. Been working full time since 2010 after graduating with a masters degree in computer science from Lund University (Faculty of Engineering, LTH). Is currently working full time and maintaining a bunch of Jenkins plugins on his spare time.</p>\n</div>","id":"tomasbjerre","irc":null,"linkedin":"tomasbjerre","name":"Tomas Bjerre","slug":"/blog/authors/tomasbjerre/","twitter":null}]}},{"node":{"date":"2019-12-16T00:00:00.000Z","id":"0695b632-9d61-5e3b-8e0a-2ff9637b97ae","slug":"/blog/2019/12/16/board-election-results/","strippedHtml":"The Jenkins community has recently completed the 2019 elections for Board and Officer positions.\nThe call for nominations concluded on Nov 25 and the election results were announced in the developer mailing list on Nov 28.\n\nOn behalf of the Jenkins community, we congratulate all elected board members and officers!\nWe also thank all contributors who participated this year: all nominees and hundreds of voters.\nThese are the first elections ever conducted by the Jenkins project, and it is a big milestone for the community.\n\nElection results:\n\nUllrich Hafner, Alex Earl and Oleg Nenashev will join Kohsuke Kawaguchi and R. Tyler Croy on the Jenkins Governance Board\n\nDaniel Beck was elected as Security Officer\n\nAlyssa Tong was elected as Events Officer\n\nNominations for Infrastructure, Release and Documentation officer positions were uncontested.\n\nOlivier Vernin was elected as Infrastructure Officer (uncontested)\n\nOliver Gondža was elected as Release Officer (uncontested)\n\nMark Waite was elected as Documentation Officer (uncontested)\n\nIf you are interested to learn more, please see the blog post below.\n\nBoard election details\n\nThe voting results are:\n\nOleg Nenashev (Condorcet winner: wins contests with all other choices)\n\nMark Waite loses to Oleg Nenashev by 181–127\n\nUllrich Hafner loses to Oleg Nenashev by 198–115, loses to Mark Waite by 171–133\n\nAlex Earl loses to Oleg Nenashev by 225–82, loses to Ullrich Hafner by 168–128\n\nOliver Gondža loses to Oleg Nenashev by 227–76, loses to Alex Earl by 151–136\n\nZhao Xiaojie (aka Rick) loses to Oleg Nenashev by 233–82, loses to Oliver Gondža by 160–131\n\nAlthough Mark Waite came second in the voting results, being on the board would violate the Corporate Involvement clause which states that \"the number of board members affiliated with one company must be less than 50%\".\nBased on that rule, the third seat Alex Earl will join the Jenkins board.\nAt the same time, Mark Waite will take the newly introduced role of Documentation officer.\n\nAll new board members are elected for a 2-year term, unless they step down earlier.\nThe estimated end of term for them is December 02, 2021.\nThe actual date will depend on the election schedule in 2021.\n\nOfficer election details\n\nWe have reelected all 5 officers for the new 1-year term, with the estimated end of term on Dec 02, 2020.\n\nAlyssa Tong won the biggest support as an Events officer ( voting results)\n\nDaniel Beck won the biggest support as a Security officer ( voting results)\n\nWhen an officer position has only one candidate that is willing to accept the nomination, there is no reason to vote on that position.\nThis year some nominees declined the nominations before the election happened, and 3 officer nominations were finally uncontested:\nOlivier Vernin - infrastructure officer,\nOliver Gondža - release officer,\nMark Waite - documentation officer.\n\nStatistics\n\nHere are some voting stats from these elections:\n\nTotal number of eligible accounts: 91,015\n\nTotal number of registered voters: 831\n\nTotal number of votes: 343\n\nThis election was hosted on the Condorcet Internet Voting Service (CIVS).\nWhile preparing for the elections, we discovered that CIVS is unable to support our large number of eligible voters.\nWe created a voter registration system to identify voters and then registered those voters with CIVS.\nThe workaround required a slight voting delay.\nSpecial thanks to Olivier Vernin and Tracy Miranda who made it possible!\n\nWhat’s next for the board?\n\nIn short term, the renewed board will focus on running the Jenkins governance processes (meetings, budget approvals, funding, etc.) and defining next steps towards improving the project.\nOne of the priorities will be to organize knowledge and permission transfers to new board members so that they can be effective in their new roles.\nThere are also pending activities like Jenkins' transition to Continuous Delivery Foundation which require attention from board members.\n\nFor longer term, there are some ideas floating around:\n  roadmap for key components,\n  long-anticipated architecture changes (UX revamp, pluggable storage, cloud native Jenkins),\n  adopting Linux Foundation best practices like Core Infrastructure Initiative,\n  contributor onboarding,\n  etc.\nSuch initiatives are instrumental for further evolvement of the Jenkins project,\nand the board could help to facilitate them in the community.\nThe ideas will be discussed in mailing lists and during governance meetings.\nIf you would like to share your vision and ideas about what’s needed in the project,\nit is definitely a great time to do so!\n\nFeedback\n\nWe will also also plan to conduct a public retrospective at one of the next Advocacy and Outreach SIG meetings.\n\nJenkins project plans to conduct elections every year.\nWe appreciate and welcome any feedback regarding the election process.\nPlease use the following channels for feedback and suggestions:\n\nThere is a Retrospective document in Google Docs.\nEveryone can suggest changes in this document, and we will integrate them.\n\nFor ideas about the project improvements and next steps for the board,\nplease use the Jenkins Developers mailing list.\n\nFor private feedback, please send an email to the Jenkins Board or to Tracy Miranda.\n\nReferences\n\nJenkins Governance Board\n\nJenkins Board Election Process\n\nJenkins Officers\n\n2019 election announcement\n\n2019 election updates on Nov 08\n\nRetrospective document","title":"2019 Jenkins Board and Officer Elections Results","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2019-12-20T00:00:00.000Z","id":"e3541aaa-92ad-5cb5-8924-7de87ca344b2","slug":"/blog/2019/12/20/call-for-mentors/","strippedHtml":"Google Summer of Code (GSoC)\nis as program where students are paid a stipend by Google to work on a free open source project.\nStudents work on the project full-time for four months (May to August).\nMentors are actively involved with students starting at the end of February when students start to work on and submit their applications.\n(see the timeline)\n\nWe are looking for project ideas and mentors to participate in GSoC 2020.\nGSoC project ideas are coding projects that university or college students can accomplish in about four months.\nThe coding projects can be new features, plugins, test frameworks, infrastructure, etc.\nAnyone can submit a project idea, but of course we like it even better if you offer to mentor your project idea.\n\nWe accept new project ideas at any time,\nBUT we need a series of ideas READY before February 5th, 2020 at 7pm UTC,\nwhich is the deadline for the Jenkins organization to apply to the GSoC program.\nSo send us your project ideas before the beginning of February so they can get a proper review by the GSoC committee and by the community.\n\nHow to submit a project idea\n\nFor 2020, we have simplified the process.\nSimply create a pull-request with your idea in a.adoc file\nin the idea folder.\nIt is no longer necessary to submit a Google Doc, but it will still work if you want to do that.\nSee the instructions on submitting ideas which include an.adoc template and some examples.\n\nCurrent list of ideas\n\nWe currently have a list of project ideas for students to browse,\ncopied from last year. Note that this list is subject to change.\n\nWhat does mentoring involve?\n\nPotential mentors are invited to read the information for mentors.\nNote that being a GSoC mentor does not require expert knowledge of Jenkins.\nMentors do not work alone. We make sure that every project has at least two mentors.\nGSoC org admins will help to find technical advisers, so you can study together with your students.\n\nMentoring takes about 5 to 8 hours of work per week (more at the start, less at the end).\nMentors provide guidance, coaching, and sometimes a bit of cheerleading.\nThey review student proposals, pull-requests and the students presentations\nat the evaluation phase.\nThey fill in the Google provided evaluation report form at the end of coding periods.\n\nWhat do you get in exchange?\n\nIn return of mentoring, a student works on your project full time for four months.\nThink about the projects that you’ve always wanted to do but never had the time…​\n\nHaving a mentoring opportunity also means that you get to improve your management and people skills.\n\nAs well, up to two mentors per organization are eligible to participate in the Google Mentor Summit taking place each year.\nThe Jenkins Org Admins try to send different mentors each year.\nIt is also possible to win an additional seat at the summit in the \"last minute draw\"\n(Google draws mentors at random to fill the cancellations and empty seats).\n\nSee this post from one of the 2019 mentors\non the kind of experience this was.\n\nGSoC is a pretty good return on the investment!\n\nFor any question, you can find the GSoC Org Admins,\nmentors and participants on the GSoC SIG Gitter chat.","title":"Google Summer of Code 2020 call for Project ideas and Mentors","tags":["gsoc","gsoc2020","community","events","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#7898d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png","srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/4c2a5/martinda.png 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/8bef2/martinda.png 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/2864c/martinda.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/5abcf/martinda.webp 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/410d2/martinda.webp 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/6f814/martinda.webp 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/ca864/martinda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":136}},"publicURL":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/martinda.png"},"blog":null,"github":"martinda","html":"<div class=\"paragraph\">\n<p>Martin is a Jenkins community member. He participates since 2016 in the Jenkins GSoC program as a mentor, and more recently as an organization admin.\nHe currrently works in ASIC/FPGA Development Automation, using Jenkins, Gradle, Make, Artifactory, and a million other tools and languages.</p>\n</div>","id":"martinda","irc":"martinda","linkedin":null,"name":"Martin d'Anjou","slug":"/blog/authors/martinda/","twitter":"martindanjou14"}]}},{"node":{"date":"2020-01-07T00:00:00.000Z","id":"30b969d7-465b-5cae-b8a9-9a72456f49e4","slug":"/blog/2020/01/07/happy-new-year/","strippedHtml":"Jenkins project congratulates all users and contributors with the New Year!\nLet’s take a look at some changes this year.\n\nHighlights\n\nWe celebrated 15 years of Jenkins\n\nWe had first ever Governance Board and Officer elections\n\nJenkins project joined the Continuous Delivery Foundation (CDF)\n\nWe released Java 11 support in Jenkins\n\nJenkins X has graduated as a Jenkins sub-project and became a new project under umbrella of CDF\n\nIn October 2019 we reached the record high number of contributions: 915 unique contributors, 124 of them were first-timers\n\nWe started new special interest groups for Documentation and User Experience.\n\nA new position of the Documentation officer was introduced to highlight an important role of documentation in the project\n\nWe ran multiple mentorship programs with 12 mentees in total: Google Summer of Code, Hacktoberfest and Outreachy\n\nIf you are interested to know more about Jenkins features introduced in 2019,\nstay tuned for a separate blog post about it (coming soon!).\n\nProject updates\n\nHighlights above do not cover all advancements we had in the project.\nBelow you can find slides from the Jenkins contributor summit in Lisbon.\nThere we had project updates by officers, SIG and sub-project leaders.\nSee the slide deck to know about: Jenkins Core, Pipeline, Configuration-as-Code, Security, UX Overhaul, Jenkins Infrastructure, platform support and documentation.\n\nSome stats and numbers\n\nIf this section seems to be too long for you, here is some infographic prepared by Tracy Miranda.\nAs you may see, Jenkins is pretty big :)\n\nCommunity.\nOver the past year we had 5433 contributors in GitHub repositories (committers, reviewers, issue submitters, etc.).\nWe had 1892 unique committers who created 7122 pull requests and 45484 commits, bots excluded.\nContributors represent 273 companies and 111 countries, 8% of contributors are recognized as independent.\nThe most active repositories were Jenkins Core and jenkins.io.\nThe most active month was October 2019 when we reached the record high number of contributions: 915 unique contributors, 124 of them were first-timers, thanks to Hacktoberfest!.\n\nJenkins core.\nIn 2019 Jenkins core had 54 weekly and 13 LTS releases with several hundreds of notable fixes/enhancements.\nThere was a login screen extensibility rework, many update manager and administrative monitors improvements.\nWe also introduced support for user timezones, not speaking of emojis support 🥳.\nThere was also a lot of housekeeping work: better APIs, codebase refresh, cleaning up static analysis warnings and removing deprecated features like Remoting CLI.\nThe core’s components also got major updates.\nOnly Jenkins Remoting got 11 releases with stability improvements and new features like support of inbound connections to headless Jenkins controllers.\nThere are also major incoming features like jep:222[WebSocket Services support], UI look&feel updates, jira:JENKINS-12548[Readonly system configuration support], Docker images for new platforms like Arm.\nTo facilitate further changes we created a new Core pull request reviewers team and added 9 contributors there.\n\nPlugins.\nThere were 2654 plugin releases, and 157 NEW plugins have been hosted in the Update Center.\nJenkins ecosystem got a lot of new integrations with Development and DevOps tools.\nAlso, warm welcome back to the Scriptler Plugin which was depublished in 2017 due to security issues.\nIf you are afraid about such plugin numbers and dependency management, there is a new Plugin Installation Manager CLI Tool which should help Jenkins users to manage plugins more efficiently.\n\nSecurity.\nIt was a hot year for the Jenkins Security Team.\nThere were 5 security advisories for the core and 20 - for plugins.\nIn total we disclosed 288 vulnerabilities across the project, including some backlog cleaning for unmaintained plugins.\nScript Security Plugin was the hottest plugin with 10 critical fixes addressing various sandbox bypass vulnerabilities.\nPlain text storage and unprotected credentials were the most popular vulnerability type 120 disclosures in 2019.\nIt was made possible by hundreds of reports submitted by contributors after code surveys,\nspecial thanks to Viktor Gazdag who reported the most of the issues and became the Jenkins 2019 Security MVP (check out his story here).\n\nInfrastructure.\nGot Jenkins? If so, you rely on Jenkins update centers, website and issue tracker.\nAll these and many other services are maintained by the Jenkins Infrastructure Team.\nThis year the team handled more than 400 requests in the bugtracker, and many other informal requests.\nIn total, more than 30 people contributed to Jenkins infrastructure this year (website content is excluded).\nWe also deployed 4 new services, migrated 7 services from Azure Container Service to Azure Kubernetes Service and updated many other services.\nMore changes will happen in the next months, and we are looking for new INFRA team members!\n\nDocumentation.\nOnly last quarter we had 178 contributors to Jenkins documentation. It includes jenkins.io and other documentation hosted on GitHub, Wiki is not included.\nThere is also ongoing migration plugin documentation from Jenkins Wiki to GitHub ( announcement).\nSince the beginning of the project in Sep 2019, more than 150 plugin were migrated, and they got significant documentation revamp during the migration.\nYou can see the current status here.\nWe also work on introducing changelog automation in the project.\n123 plugins have already adopted the new changelog tools, powered by Release Drafter.\nAlso, we had more than 60 technical blog posts published on jenkins.io.\n\nConfiguration as Code was one of the most popular areas this year.\nJenkins Configuration as Code Plugin had more than 30 releases with new features and bug fixes.\nMore than 50 plugins have been also updated in order to offer better configuration-as-code support.\nAs a result, the JCasC Plugin got massive adoption this year (from 2000 to almost 8000 installations),\nand now it becomes a de-facto standard for managing Jenkins as code.\nThis year we also ran our very first CommunityBridge project devoted to JCasC Schema validation and developer tools.\n\nEvents and outreach programs.\nIn 2019 we participated in multiple conferences, including FOSDEM, DevOps World | Jenkins World, SCALE.\nMore than 40 Jenkins Area Meetups were organized across the world, and there were many other meetups devoted to Jenkins.\nWe also kept expanding our outreach programs.\nIn total we had 12 students who participated in Google Summer of Code, Outreachy and newly introduced Community Bridge.\nWe also had the biggest ever Hacktoberfest with 664 pull requests and 102 participants.\nThese outreach programs help us to deliver new features in Jenkins.\nFor example, this year we added Multi-branch Pipeline support for Gitlab and a new Plugin Installation Manager Tool during GSoC,\nand Outreachy resulted in a new Audit Log Plugin.\n\nWhere did we get those stats?\nGitHub stats came from the CDF DevStats service.\nThese stats include all repositories in the jenkinsci organization and most popular repositories in jenkins-infra, Jenkins X and other organizations/repositories within the project are not included.\nOther stats came from project reports, component changelogs, Jenkins usage statistics service, plugin releases history.\n\nWhat’s next?\n\nYear 2020 will be pretty busy for the Jenkins project.\nThere are many long-overdue changes in the project, which need to happen if we want the project to succeed.\nAs it was written Board elections blogpost,\nthere are many areas to consider: UX revamp, cloud native Jenkins, pluggable storage, etc.\nIn the coming months there will be a lot of discussions in mailing lists and special interest groups,\nand we invite all teams to work on their roadmaps and to communicate them in the community.\n\nNext month we will participate in FOSDEM, and there will be a Jenkins stand there.\nOn January 31st we will also host a traditional contributor summit in Brussels,\nwhere we will talk about next steps for the project, in terms of technical roadmaps and the project governance.\nIf you are interested in Jenkins, stop by at our community booths and join us at the summit!\nSee this thread for more information.\n\nWe also plan to continue all outreach programs.\nAt the moment we are looking for Google Summer of Code 2020 mentors and project ideas ( announcement),\nand we will be also interested to consider non-coding projects as a part of other programs like CommunityBridge.\nWe also work on improving contribution guidelines for newcomers and expert contributors.\nIf you are interested, please contact the Advocacy and Outreach SIG.\n\nAnd even more\n\nThis blog post does not provide a full overview of what changed in the project.\nThe Jenkins project consists of more than 2000 plugins and components which are developed by thousands of contributors.\nThanks to them, a lot of changes happen in the project every day.\nWe are cordially grateful to everybody who participates in the project, regardless of contribution size.\nEverything matters: new features, bug fixes, documentation, blog posts, well reported issues, Stackoverflow responses, etc.\nTHANKS A LOT FOR ALL YOUR CONTRIBUTIONS!\n\nSo, keep updating Jenkins and exploring new features.\nAnd stay tuned, there is much more to come next year!","title":"Happy New Year! 2019/2020 edition","tags":["community","new-year-blogpost","governance"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-01-08T00:00:00.000Z","id":"9f6eb48f-3ae6-5fa4-8bc2-bee1eeeed2d0","slug":"/blog/2020/01/08/atlassians-new-bitbucket-server-integration-for-jenkins/","strippedHtml":"We know that for many of our customers Jenkins is incredibly important and its integration with Bitbucket Server is a key part of their development workflow.\nUnfortunately, we also know that integrating Bitbucket Server with Jenkins wasn’t always easy – it may have required multiple plugins and considerable time.\nThat’s why earlier this year we set out to change this.\nWe began building our own integration, and we’re proud to announce that v1.0 is out.\n\nThe new Bitbucket Server integration for Jenkins plugin, which is built and supported by Atlassian, is the easiest way to link Jenkins with Bitbucket Server.\nIt streamlines the entire set-up process, from creating a webhook to trigger builds in Jenkins, to posting build statuses back to Bitbucket Server.\nIt also supports smart mirroring and lets Jenkins clone from mirrors to free up valuable resources on your primary server.\n\nOur plugin is available to install through Jenkins now.\nWatch this video to find out how, or read the BitBucket Server solution page to learn more about it.\n\nOnce you’ve tried it out we’d love to hear any feedback you have.\nTo share it with us, visit https://issues.jenkins.io and create an issue using the component atlassian-bitbucket-server-integration-plugin.","title":"Atlassian's new Bitbucket Server integration for Jenkins","tags":["bitbucket","pipeline","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#888888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/19e71/dkjellin.jpg","srcSet":"/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/77b35/dkjellin.jpg 32w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/d4a57/dkjellin.jpg 64w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/19e71/dkjellin.jpg 128w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/68974/dkjellin.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/ef6ff/dkjellin.webp 32w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/8257c/dkjellin.webp 64w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/6766a/dkjellin.webp 128w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/22bfc/dkjellin.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/dkjellin.jpg"},"blog":null,"github":"dkjellin","html":"<div class=\"paragraph\">\n<p>Daniel has been with <a href=\"https://www.atlassian.com\">Atlassian</a> over ten years working on a variety of different products. Lately he has led the work to write a new and improved integration between <a href=\"https://www.atlassian.com/software/bitbucket/enterprise/data-center\">Bitbucket Server</a> and Jenkins.</p>\n</div>","id":"dkjellin","irc":null,"linkedin":null,"name":"Daniel Kjellin","slug":"/blog/authors/dkjellin/","twitter":null}]}},{"node":{"date":"2020-01-10T00:00:00.000Z","id":"57fae2bf-06be-518a-aa90-8776f373d812","slug":"/blog/2020/01/10/fosdem-is-coming/","strippedHtml":"FOSDEM 2020 is coming and with it, a lot of great folks come in town.\nIt’s always a great moment to meet Jenkins community members, share stories and get inspired.\nI hope that this year will be as great as it always been and for that, we organize a few things\n\nThings we’ll do\n\nDuring the whole event, we’ll be virtually on the Gitter\n\nOn the Thursday 30 of January, there will be two workshops one about Jenkins Pipelines lead by Mark Waite, and a second one about JenkinsX by Viktor Farcic.\n\nOn the Friday 31 of January, the Jenkins project will hold a Contributor Summit where we invite active contributors and those who are interested in working on foundation projects, e.g. key architecture changes and projects (UX, JCasC, Cloud native Jenkins, etc.), governance, infrastructure. There will be no user-focused topics (no presentations, no trainings, etc.) but we will focus on defining key priorities for the project, building a roadmap and resolving issues we have in the project at the moment.\nWe’ll end up the day with our now traditional Orval and flemish beef stew at Le Roy d’Espagne\n\nFinally the FOSDEM, the 01 and 02 of February, we’ll all be at FOSDEM. So come and say \"hi\" at the Jenkins/JenkinsX stand, inside the CICD Devroom.\n\nOr just come and share beers\n\nCheers","title":"FOSDEM 2020 is coming","tags":["fosdem","events","community","outreach-programs"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/olblak.png"},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak/","twitter":"0lblak"}]}},{"node":{"date":"2020-01-23T00:00:00.000Z","id":"b56c3926-16c3-522f-ae8f-4b714de4beff","slug":"/blog/2020/01/23/a-new-chapter-for-kohsuke/","strippedHtml":"2020 is going to be a year of change for me.\nBy the end of January, I’ll be officially stepping back from Jenkins,\nswitching my role at CloudBees to an advisor,\nand turning attention to my new startup.\nThe rest of this post is to contextualize this transition, because if you haven’t been working closely with me, this might come across as a surprise.\n\nJenkins has been an amazing journey that never stopped giving.\nI have loved it all - especially meeting the users around the world who made Jenkins what it is today.\nAs the creator of the project, at some point I started wondering how to pass the torch to the next leaders, how to get people to step up and drive it forward.\nToday, thanks to CloudBees and the community, there is a new generation of talented and capable leaders who are passionately driving things forward - and it’s been great to see.\nNewly elected board members, Jenkins X folks, just to name a few.\nThese new people bring new culture and new code, and altogether it has created a positive jolt that pushed Jenkins out of a local optimum I talked about.\nThey have all my support and respect.\nIn reality, my involvement with Jenkins lately has already been largely symbolic, a little bit like an emperor of Japan or a queen of the UK.\nThat’s why this announcement has little practical impact on the forward motion of Jenkins.\n\nSeveral years ago, I used to feel like the sky would fall down if I stepped aside.\nSomewhere in 2019, I suddenly noticed that I wasn’t feeling like that at all anymore.\nThe shift was gradual and steady, so I’m not sure exactly when I crossed the threshold, but in 2019 it was clear I was on the other side.\nThat’s how I knew I could finally end this chapter of my life.\n15 years with Jenkins and 9 years with CloudBees.\nThat is a long time.\n\nI hope you will be wondering what is my new chapter.\nI’m launching a new startup, Launchable, with my old time buddy Harpreet Singh.\nI have known him since my days at Sun Microsystems and JavaEE, and he was my partner in crime at CloudBees to build the Jenkins business from scratch.\nHe went to Atlassian running its BitBucket business for a while, but now he and I are back sitting side by side again.\nA number of CloudBees people invested, including Sacha Labourey,\nBob Bickel,\nand John Vrionis.\n\nThrough Jenkins and CloudBees, I was able to push the state of automation forward in software development.\nSuch automation is producing a lot of data, but we are not using that data to improve our lives.\nIt truly is a wasted gold mine.\nLaunchable is working on harnessing that information to improve developer productivity.\nI wrote a separate blog post to discuss more about my thinking.\n\nLastly, even though I’m moving on from CloudBees as a full-time employee, I’m not completely going away.\nI’ll be still in the CloudBees orbit, as an advisor.\nI’m still very much invested both emotionally and financially in CloudBees.\nI’m still a big fan, and I’ll continue to cheer for them, but from the sideline.\nThe same with Jenkins.\nI’m still on the governance board, ensuring the continuity.\nI’m also still on the Technical Oversight Committee of the Continuous Delivery Foundation,\nthough my chairperson term will expire in March.\n\nI’m incredibly grateful for the undeserved opportunity and the privilege given to me during this chapter.\nI was surrounded by wonderful, inspiring, and talented people, from whom I learned a lot.\nI can only hope that I was able to make a positive impact, and give something back in return to them.\nI won’t name names, but you know who you are, and we’ll stay in touch.\n\nThis year is going to be truly exciting for me. To infinity and beyond!!","title":"A new chapter for Kohsuke","tags":["community","governance","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke/","twitter":"kohsukekawa"}]}},{"node":{"date":"2020-01-29T00:00:00.000Z","id":"63429a32-68ab-54b9-ad78-3e5643129e68","slug":"/blog/2020/01/29/gsoc-report/","strippedHtml":"Google Summer of Code is much more than a summer internship program, it is a year-round effort for the organization and some community members.\nNow, after the DevOps World | Jenkins World conference in Lisbon and final retrospective meetings, we can say that GSoC 2019 is officially over.\nWe would like to start by thanking all participants: students, mentors, subject matter experts and all other contributors who proposed project ideas, participated in student selection, in community bonding and in further discussions and reviews.\nGoogle Summer of Code is a major effort which would not be possible without the active participation of the Jenkins community.\n\nIn this blogpost we would like to share the results and our experience from the previous year.\n\nResults\n\nFive GSoC projects were successfully completed this year:\nRole Strategy Plugin Performance Improvements,\nPlugins Installation Manager CLI Tool/Library,\nWorking Hours Plugin - UI Improvements,\nRemoting over Apache Kafka with Kubernetes features,\nMulti-branch Pipeline support for Gitlab SCM.\nWe will talk about the projects a little later in the document.\n\nProject details\n\nWe held the final presentations as Jenkins Online Meetups in late August and Google published the results on Sept 3rd.\nThe final presentations can be found here:\nPart 1,\nPart 2,\nPart 3.\nWe also presented the\n2019 Jenkins GSoC report\nat the DevOps World | Jenkins World San Francisco\nand at the\nDevOps World | Jenkins World 2019 Lisbon conferences.\n\nIn the following sections, we present a brief summary of each project, links to the coding phase 3 presentations, and to the final products.\n\nRole Strategy Plugin Performance Improvements\n\nRole Strategy Plugin is one of the most widely used authorization plugins for Jenkins,\nbut it has never been famous for performance due to architecture issues and regular expression checks for project roles.\nAbhyudaya Sharma was working on this project together with hist mentors:\nOleg Nenashev, Runze Xia and Supun Wanniarachchi.\nHe started the project from creating a new Micro-benchmarking Framework for Jenkins Plugins based on JMH,\ncreated benchmarks and achieved a 3501% improvement on some real-world scenarios.\nThen he went further and created a new Folder-based Authorization Strategy Plugin which offers even better performance for Jenkins instances where permissions are scoped to folders.\nDuring his project Abhyudaya also fixed the Jenkins Configuration-as-Code support in Role Strategy and contributed several improvements and fixes to the JCasC Plugin itself.\n\nProject page\n\nBlog posts: Micro-benchmarking Framework for Jenkins Plugins,\nIntroducing new Folder Authorization Plugin, Performance Improvements to Role Strategy Plugin\n\nFinal evaluation: slides, video\n\nSource code: Role Strategy Plugin, Folder Authorization Plugin\n\nPlugins Installation Manager CLI Tool/Library\n\nNatasha Stopa was working on a new CLI tool for plugin management,\nwhich should unify features available in other tools like install-plugins.sh in Docker images.\nIt also introduced many new features like YAML configuration format support, listing of available updates and security fixes.\nThe newly created tool should eventually replace the previous ones.\nNatasha’s mentors: Kristin Whetstone, Jon Brohauge and Arnab Banerjee.\nAlso, many contributors from Platform SIG and JCasC plugin team joined the project as a key stakeholders and subject-matter experts.\n\nProject page\n\nBlog posts: alpha release announcement,\ncoding phase 2 updates\n\nFinal evaluation: slides,\nvideo\n\nSource code: Plugin installation manager tool\n\nWorking Hours Plugin - UI Improvements\n\nJenkins UI and frontend framework are a common topic in the Jenkins project,\nespecially in recent months after the new UX SIG was established.\nJack Shen was working on exploring new ways to build Jenkins Web UI together with his mentor Jeff Pearce.\nJack updated the Working Hours Plugin to use UI controls provided by standard React libraries.\nThen he documented his experienced and created template for plugins with React-based UI.\n\nProject page\n\nBlog posts: Updates on Working Hours Plugin UI,\nReact Plugin Template\n\nFinal evaluation: slides, video\n\nSource code: Working Hours Plugin, Template for Jenkins plugins with React-based UI\n\nRemoting over Apache Kafka with Kubernetes features\n\nLong Le Vu Nguyen was working on extended Kubernetes support in the Remoting over Apache Kafka Plugin.\nHis mentors were Andrey Falco and Pham vu Tuan who was our GSoC 2018 student and the plugin creator.\nDuring this project Long has added a new agent launcher which provisions Jenkins agents in Kubernetes and connects them to the controller.\nHe also created a Cloud API implementation for it and a new Helm chart which can provision Jenkins as entire system in Kubernetes,\nwith Apache Kafka enabled by default.\nAll these features were released in Remoting over Apache Kafka Plugin 2.0.\n\nProject page\n\nBlog post for [Remoting over Apache Kafka Plugin 2.0\n\nFinal evaluation: slides, video\n\nPlugin source code\n\nMulti-branch Pipeline support for Gitlab SCM\n\nParichay Barpanda was working on the new GitLab Branch Source Plugin with Multi-branch Pipeline Jobs and Folder Organisation support.\nHis mentors were\nMarky Jackson-Taulia,\nJustin Harringa,\nZhao Xiaojie and\nJoseph Petersen.\nThe plugin scans the projects, importing the pipeline jobs it identifies based on the criteria provided.\nAfter a project is imported, Jenkins immediately runs the jobs based on the Jenkinsfile pipeline script and notifies the status to GitLab Pipeline Status.\nThis plugin also provides GitLab server configuration which can be configured in Configure System or via Jenkins Configuration as Code (JCasC).\nread more about this project in the GitLab Branch Source 1.0 announcement.\n\nProject page\n\nCoding phase 3 presentation\n\nGitlab Branch Source Plugin, Gitlab API plugin\n\nProjects which were not completed\n\nNot all projects have been completed this year.\nWe were also working on Artifact Promotion plugin for Jenkins Pipeline\nand on Cloud Features for External Workspace Manager Plugin,\nbut unfortunately both projects were stopped after coding phase 1.\nAnyway, we got a lot of experience and takeaways in these areas (see linked Jira tickets!.\nWe hope that these stories will be implemented by Jenkins contributors at some point.\nGoogle Summer of Code 2020 maybe?\n\nRunning the GSoC program at our organization level\n\nHere are some of the things our organization did before and during GSoC behind the scenes.\nTo prepare for the influx of students, we updated all our GSoC pages and wrote down all the knowledge we accumulated over the years of running the program.\nWe started preparing in October 2018, long before the official start of the program.\nThe main objective was to address the feedback we got during GSoC 2018 retrospectives.\n\nProject ideas.\nWe started gathering project ideas in the last months of 2018.\nWe prepared a list of project ideas in a Google doc, and we tracked ownership of each project in a table of that document.\nEach project idea was further elaborated in its own Google doc.\nWe find that when projects get complicated during the definition phase, perhaps they are really too complicated and should not be done.\n\nSince we wanted all the project ideas to be documented the same way, we created a template to guide the contributors.\nMost of the project idea documents were written by org admins or mentors, but occasionally a student proposed a genuine idea.\nWe also captured contact information in that document such as GitHub and Gitter handles, and a preliminary list of potential mentors for the project.\nWe embedded all the project documents on our website.\n\nMentor and student guidelines.\nWe updated the mentor information page with details on what we expect mentors to do during the program,\nincluding the number of hours that are expected from mentors,\nand we even have a section on preventing conflict of interest.\nWhen we recruit mentors, we point them to the mentor information page.\n\nWe also updated the student information page.\nWe find this is a huge time saver as every student contacting us has the same questions about joining and participating in the program.\nInstead of re-explaining the program each time, we send them a link to those pages.\n\nApplication phase.\nStudents started to reach out very early on as well, many weeks before GSoC officially started.\nThis was very motivating.\nSome students even started to work on project ideas before the official start of the program.\n\nProject selection. This year the org admin team had some very difficult decisions to make.\nWith lots of students, lots of projects and lots of mentors, we had to request the right number of slots and try to match the projects with the most chances of success.\nWe were trying to form mentor teams at the same time as we were requesting the number of slots, and it was hard to get responses from all mentors in time for the deadline.\nFinally we requested fewer slots than we could have filled.\nWhen we request slots, we submit two numbers: a minimum and a maximum. The GSoC guide states that:\n\nThe minimum is based on the projects that are so amazing they really want to see these projects occur over the summer,\n\nand the maximum number should be the number of solid and amazing projects they wish to mentor over the summer.\n\nWe were awarded minimum. So we had to make very hard decisions: we had to decide between \"amazing\" and \"solid\" proposals.\nFor some proposals, the very outstanding ones, it’s easy.\nBut for the others, it’s hard.\nWe know we cannot make the perfect decision, and by experience, we know that some students or some mentors will not be able to complete the program due to uncontrollable life events, even for the outstanding proposals.\nSo we have to make the best decision knowing that some of our choices won’t complete the program.\n\nCommunity Bonding.\nWe have found that the community bonding phase was crucial to the success of each project.\nUsually projects that don’t do well during community bonding have difficulties later on.\nIn order to get students involved in the community better, almost all projects were handled under the umbrella of Special Interest Groups so that there were more stakeholders and communications.\n\nCommunications.\nEvery year we have students who contact mentors via personal messages.\nStudents, if you are reading this, please do NOT send us personal messages about the projects, you will not receive any preferential treatment.\nObviously, in open source we want all discussions to be public, so students have to be reminded of that regularly.\nIn 2019 we are using Gitter chat for most communications, but from an admin point of view this is more fragmented than mailing lists.\nIt is also harder to search.\nChat rooms are very convenient because they are focused, but from an admin point of view, the lack of threads in Gitter makes it hard to get an overview.\nGitter threads were added recently (Nov 2019) but do not yet work well on Android and iOS.\nWe adopted Zoom Meetings towards the end of the program and we are finding it easier to work with than Google Hangouts.\n\nStatus tracking.\nAnother thing that was hard was to get an overview of how all the projects were doing once they were running.\nWe made extensive use of Google sheets to track lists of projects and participants during the program\nto rank projects and to track statuses of project phases (community bonding, coding, etc.).\nIt is a challenge to keep these sheets up to date, as each project involves several people and several links.\nWe have found it time consuming and a bit hard to keep these sheets up to date, accurate and complete, especially up until the start of the coding phase.\n\nPerhaps some kind of objective tracking tool would help.\nWe used Jenkins Jira for tracking projects, with each phase representing a separate sprint.\nIt helped a lot for successful projects.\nIn our organization, we try to get everyone to beat the deadlines by a couple of days, because we know that there might be events such as power outages,\nbad weather (happens even in Seattle!), or other uncontrolled interruptions, that might interfere with submitting project data.\nWe also know that when deadlines coincide with weekends, there is a risk that people may forget.\n\nRetrospective.\nAt the end of our project, we also held a retrospective and captured some ideas for the future.\nYou can find the notes here.\nWe already addressed the most important comments in our documentation and project ideas for the next year.\n\nRecognition\n\nLast year, we wanted to thank everyone who participated in the program by sending swag.\nThis year, we collected all the mailing addresses we could and sent to everyone we could the 15-year Jenkins special edition T-shirt, and some stickers.\nThis was a great feel good moment.\nI want to personally thank Alyssa Tong her help on setting aside the t-shirt and stickers.\n\nMentor summit\n\nEach year Google invites two or more mentors from each organization to the Google Summer of Code Mentor Summit.\nAt this event, hundreds of open-source project maintainers and mentors meet together and have unconference sessions targeting GSoC, community management and various tools.\nThis year the summit was held in Munich,\nand we sent Marky Jackson and Oleg Nenashev as representatives there.\n\nApart from discussing projects and sharing chocolate, we also presented Jenkins there, conducted a lightning talk and hosted the unconference session about automation bots for GitHub.\nWe did not make a team photo there, so try to find Oleg and Marky on this photo:\n\nGSoC Team at DevOps World | Jenkins World\n\nWe traditionally use GSoC organization payments and travel grants to sponsor student trips to major Jenkins-related events.\nThis year four students traveled to the DevOps World | Jenkins World conferences in San-Francisco and Lisbon.\nStudents presented their projects at the community booth and at the contributor summits,\nand their presentations got a lot of traction in the community!\n\nThanks a lot to Google and CloudBees who made these trips possible.\nYou can find a travel report from Natasha Stopa here,\nmore travel reports are coming soon.\n\nConclusion\n\nThis year, five projects were successfully completed.\nWe find this to be normal and in line with what we hear from other participating organizations.\n\nTaking the time early to update our GSoC pages saved us a lot of time later because we did not have to repeat all the information every time someone contacted us.\nWe find that keeping track of all the mentors, the students, the projects, and the meta information is a necessary but time consuming task.\nWe wish we had a tool to help us do that.\nCoordinating meetings and reminding participants of what needs to be accomplished for deadlines is part of the cheerleading aspect of GSoC, we need to keep doing this.\n\nLastly, I want to thank again all participants, we could not do this without you.\nEach year we are impressed by the students who do great work and bring great contributions to the Jenkins community.\n\nGSoC 2020?\n\nYes, there will be Google Summer of Code 2020!\nWe plan to participate, and we are looking for project ideas, mentors and students.\nJenkins GSoC pages have been already updated towards the next year, and we invite everybody interested to join us next year!\n\nMain page with all contacts\n\nGSoC 2020 Project Ideas\n\nGSoC 2020 Call for Mentors and Project Ideas\n\nInformation for students and mentors","title":"Google Summer of Code 2019 Report","tags":["gsoc","gsoc2019","jenkins","community","events"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#7898d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png","srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/4c2a5/martinda.png 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/8bef2/martinda.png 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/2864c/martinda.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/5abcf/martinda.webp 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/410d2/martinda.webp 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/6f814/martinda.webp 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/ca864/martinda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":136}},"publicURL":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/martinda.png"},"blog":null,"github":"martinda","html":"<div class=\"paragraph\">\n<p>Martin is a Jenkins community member. He participates since 2016 in the Jenkins GSoC program as a mentor, and more recently as an organization admin.\nHe currrently works in ASIC/FPGA Development Automation, using Jenkins, Gradle, Make, Artifactory, and a million other tools and languages.</p>\n</div>","id":"martinda","irc":"martinda","linkedin":null,"name":"Martin d'Anjou","slug":"/blog/authors/martinda/","twitter":"martindanjou14"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/9a74a/jeffpearce.png","srcSet":"/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/c5deb/jeffpearce.png 32w,\n/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/9749a/jeffpearce.png 64w,\n/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/9a74a/jeffpearce.png 128w,\n/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/17c17/jeffpearce.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/0465c/jeffpearce.webp 32w,\n/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/89767/jeffpearce.webp 64w,\n/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/40d97/jeffpearce.webp 128w,\n/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/5028e/jeffpearce.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/3f5190ddeb5b249babe4d25138729512/jeffpearce.png"},"blog":null,"github":"jeffpearce","html":"<div class=\"paragraph\">\n<p>Jeff is a Jenkins community member, co-maintainer of the <a href=\"https://github.com/jenkinsci/cobertura-plugin\">Cobertura Code Coverage plugin</a>,\nand the author of the <a href=\"https://github.com/jenkinsci/github-autostatus-plugin\">Job and Stage monitoring plugin</a> and\n<a href=\"https://github.com/jenkinsci/working-hours-plugin\">Working Hours plugin</a>. He participated in the Jenkins GSoC as a mentor in 2018, and is currently a mentor and\norganization admin for GSoC 2019.</p>\n</div>","id":"jeffpearce","irc":null,"linkedin":"jeffpea","name":"Jeff Pearce","slug":"/blog/authors/jeffpearce/","twitter":"jeff_pearce"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png","srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/914ee/markyjackson-taulia.png 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/1c9ce/markyjackson-taulia.png 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/acb7c/markyjackson-taulia.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/ef6ff/markyjackson-taulia.webp 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/8257c/markyjackson-taulia.webp 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/6766a/markyjackson-taulia.webp 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/22bfc/markyjackson-taulia.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/markyjackson-taulia.png"},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"/blog/authors/markyjackson-taulia/","twitter":"markyjackson5"}]}},{"node":{"date":"2020-02-02T00:00:00.000Z","id":"bd7439b7-9ac0-59cd-a51c-c1739abb74ee","slug":"/blog/2020/02/02/web-socket/","strippedHtml":"I am happy to report that jep:222[] has landed in Jenkins weeklies,\nstarting in 2.217.\nThis improvement brings experimental WebSocket support to Jenkins,\navailable when connecting inbound agents or when running the CLI.\nThe WebSocket protocol allows bidirectional, streaming communication over an HTTP(S) port.\n\nWhile many users of Jenkins could benefit,\nimplementing this system was particularly important for CloudBees\nbecause of how CloudBees Core on modern cloud platforms\n(i.e., running on Kubernetes) configures networking.\nWhen an administrator wishes to connect an inbound (formerly known as “JNLP”) external agent to a Jenkins controller,\nsuch as a Windows virtual machine running outside the cluster and using the agent service wrapper,\nuntil now the only option was to use a special TCP port.\nThis port needed to be opened to external traffic using low-level network configuration.\nFor example, users of the nginx ingress controller\nwould need to proxy a separate external port for each Jenkins service in the cluster.\nThe instructions to do this are complex and hard to troubleshoot.\n\nUsing WebSocket, inbound agents can now be connected much more simply when a reverse proxy is present:\nif the HTTP(S) port is already serving traffic,\nmost proxies will allow WebSocket connections with no additional configuration.\nThe WebSocket mode can be enabled in agent configuration,\nand support for pod-based agents in the Kubernetes plugin is coming soon.\nYou will need an agent version 4.0 or later,\nwhich is bundled with Jenkins in the usual way (Docker images with this version are coming soon).\n\nAnother part of Jenkins that was troublesome for reverse proxy users was the CLI.\nBesides the SSH protocol on port 22, which again was a hassle to open from the outside,\nthe CLI already had the ability to use HTTP(S) transport.\nUnfortunately the trick used to implement that confused some proxies and was not very portable.\nJenkins 2.217 offers a new -webSocket CLI mode which should avoid these issues;\nagain you will need to download a new version of jenkins-cli.jar to use this mode.\n\nThe WebSocket code has been tested against a sample of Kubernetes implementations (including OpenShift),\nbut it is likely that some bugs and limitations remain,\nand scalability of agents under heavy build loads has not yet been tested.\nTreat this feature as beta quality for now and let us know how it works!","title":"WebSocket","tags":["core","remoting","agents","cli"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick/","twitter":"tyvole"}]}},{"node":{"date":"2020-02-07T00:00:00.000Z","id":"3a8b2614-e129-54fc-90ed-707104f68f14","slug":"/blog/2020/02/07/trip-to-dwjw/","strippedHtml":"I had the privilege of being invited to DevOps World | Jenkins World\n2019 for presenting the work I did during Google Summer of Code 2019.\nWhat follows is a day-by-day summary of an amazing trip to the\nconference.\n\nDay 0: December 1, 2019\n\nI am an undergraduate student from New Delhi, India and had traveled to\nLisbon to attend the conference. I had an early morning flight to Lisbon\nfrom Delhi via Istanbul. At the Airport, I met Parichay who had been\nwaiting there from his connecting flight. After flying 8000 km, we\nreached Lisbon. We took a taxi to the hotel and were greeted there by\none of my Google Summer of Code mentors, Oleg. After four months of\nworking with him on my GSoC project, meeting him was an amazing\nexperience. Later that day, after stretching our legs in the hotel, we\nmet Long for an early dinner, who came to the hotel after exploring much\nof Lisbon.\n\nDay 1: Hackfest, December 2\n\nNext morning, we all met for breakfast where we all got to taste some\nPastel de Nata. We then took a cab to the Congress Centre for attending\nthe Jenkins and Jenkins X hackfest. At the Hackfest, I met Mark, Joseph,\nKasper, Andrey and other Jenkins contributors. I also met Oleg, this\ntime together with his son and his wife. After our introductions, and a\nshort presentation by Oleg, I started hacking on the Folder Auth plugin\nand made it possible to delete user sids from roles. The best part of\nhacking there was to get instant feedback on what I was working on. More\nand more people kept coming throughout the day. It was great to see so\nmany people working hard to improve Jenkins. At the end, everyone\npresented what they had achieved that day. Having skipped lunch for some\nsnacks, Oleg and others tried hard to get some pizza delivered without\nmuch success. After the Hackfest, everyone was hungry and most attendees\nincluding me went looking for nearby restaurants. Since it was early and\nmost restaurants were not open yet, we all decided to have burgers. It\nwas a great learning experience listening to and talking about Jenkins,\nElasticsearch, Jira, GitHub and a lot of other things. After that, we\ntook a taxi back to the hotel and I went to bed.\n\nDay 2: Contributor Summit, December 3\n\nWe had the Jenkins and Jenkins X contributor summit the next day. Me and\nParichay took the bus to the Congress Centre in the morning. After\nregistration, I got my ‘Speaker’ badge and the conference T-shirt. The\ncontributor summit took place in the same hall as the Hackfest, but the\nseating arrangement was completely different and there were a lot more\npeople. The summit started with everyone introducing themselves. It\nturned out that there were a lot of people from Munich. There were\npresentations and talks about all things Jenkins, Jenkins X and the\nContinuous Delivery Foundation by Kohsuke, Oleg, Joseph, Liam, Olivier,\nWadek and others. I had no experience with Jenkins X which made the\nsummit very interesting. After lunch, the talks were over, and everyone\nwas free to join any session discussing various things about Jenkins. I\nattended the Cloud Native Jenkins and the Configuration-as-Code\nsessions.\n\nWhile some of the conference attendees were in the Contributor summit,\nthe others were going through certifications and trainings. At around 5\no’clock in the evening, the summit and the trainings all got over and\nthe expo hall was thrown open. On the entrance, there was a large stack\nof big DWJW bags. I did not realize why those bags were kept there.\nSince everyone was taking one, I took one as well. As soon as I went\ninto the hall, I realized that those bags were for collecting swag. I\nhad never seen anything like this where sponsors were just giving away\nT-shirts, stickers and other stuff. There were snacks and Kohsuke was\ncutting the extremely tasty 15 years of Jenkins cake. After having the\ncake, I went on a swag-collecting spree going from one sponsor booth to\nthe other. This was an amazing experience, not only was I able to get\ncool stuff, I was also able to learn a lot about the software these\ncompanies made and how it fits into the DevOps pipeline.\n\nAfter the conference got over, me, Long and Parichay went to the Lisbon\nMariott Hotel for the Eurodog party. After collecting another T-shirt, I\nwent to the nearest restaurant (McDonald’s) with Andrey who I had\nearlier met at the Hackfest.\n\nDay 3: December 4\n\nThis was the first official day of the conference and it began with the\nkeynote. There were over 900 people in the keynote hall. It was amazing\nto see so many people attending the conference. After the keynote got\nover, I went to several sessions throughout the day learning about how\ncompanies are using Jenkins and implementing DevOps tools.\n\nIn the evening, we had the Sonatype Superparty which was a lot of fun.\nThere were neon lights, arcade machines, VR experiences, superheroes and\nmore swag. There was a lot of good food including pizzas and burgers and\nhot dogs. Superhero inspired desserts were very interesting. I was able\nto talk to Oleg and Wadek about the security challenges in Jenkins.\nDuring the party, I also got a chance to meet the CEO of CloudBees,\nSacha Labourey.\n\nDay 4, December 5\n\nThis was the last day of the conference and it began with another\nkeynote. After the keynote, I attended a very interesting talk on how\nthe European Observatory built software for large telescopes using\nJenkins. After that, I prepared for my talk on the work I did during\nGoogle Summer of Code 2019. I had my presentation in the community booth\nduring the lunch time. Presenting in front of real people was an amazing\nexperience and very different from the ones we had on Zoom chats for our\nGSoC evaluations. In the evening, I got another chance to present my\nproject at the Jenkins Community Lightning Talks.\n\nAfter that, the conference came to an end and I went back to the hotel.\nAfter relaxing for some time, me, Parichay and Long were invited by Oleg\nto a dinner at Corinthia Hotel with Kohsuke, Mark and his wife, Tracy,\nAlyssa, and Liam. Unfortunately, Long couldn’t attend the dinner because\nhe had the flight back earlier that evening. After the amazing dinner, I\nthanked everyone for such an amazing trip and said goodbye.\n\nDWJW was the best experience I’ve ever had. I was able to learn about a\nlot of new things and talk to some amazing people. In the end, I would\nlike to especially thank Oleg for helping me throughout and making it\npossible for me to attend such a wonderful conference. I would like to\nthank my other mentors Runze Xia and Supun for their support in my\nGoogle Summer of Code project. I would like to thank Google for\norganizing Google Summer of Code, everyone at Jenkins project for\nsponsoring my travel, and CloudBees for inviting me to the conference.\n\nLooking forward to seeing you all again soon!","title":"Trip to DevOps World | Jenkins World","tags":["gsoc","gsoc2019","devopsworld","jenkinsworld","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg","srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f4523/abhyudayasharma.jpg 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1e7bb/abhyudayasharma.jpg 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/b48b6/abhyudayasharma.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1fd06/abhyudayasharma.webp 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/9edd6/abhyudayasharma.webp 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f5f75/abhyudayasharma.webp 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/05d06/abhyudayasharma.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}},"publicURL":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/abhyudayasharma.jpg"},"blog":null,"github":"AbhyudayaSharma","html":"<div class=\"paragraph\">\n<p>Abhyudaya is a Computer Science student at Shiv Nadar University, India.\nHe is participating in Google Summer of Code 2019 to improve the performance\nof the <a href=\"https://github.com/jenkinsci/role-strategy-plugin\">Role Strategy Plugin</a>.</p>\n</div>","id":"abhyudayasharma","irc":null,"linkedin":null,"name":"Abhyudaya Sharma","slug":"/blog/authors/abhyudayasharma/","twitter":null}]}},{"node":{"date":"2020-02-19T00:00:00.000Z","id":"21c55fa8-27ea-50d0-a167-c780371a54d9","slug":"/blog/2020/02/19/jenkins-world-lisbon-with-love-from-india/","strippedHtml":"After an amazing three months of development period in the summer of 2019 with Jenkins Project, I was a better developer, loved open source, met\npassionate people and had fun at work. Jenkins is not just a community, it is a family. When GSoC period was over, we received swags from Jenkins.\nNatasha Stopa (one of the students in GSoC 2019) was invited to attend DevOps World | Jenkins World San Francisco.\nIt was nice to see her enjoy there. But guess what? Jenkins also invited three other students (Abhyudaya, Long and me) to DevOps World | Jenkins World Lisbon.\nI was super psyched when Marky Jackson (one of my project mentors) broke the news to me.\n\nThe trip to Lisbon required to sort a few things like flight tickets, hotel booking, passport, visa etc. Oleg Nenashev had scheduled meetings to discuss\nand help us with arranging everything for our travel. Thanks to him. :)\n\nFrom India to Lisbon (Dec 1)\n\nAbhyudaya and I boarded our flight from Indira Gandhi Airport (New Delhi) to Lisbon on December 1, 2019 morning at 0500 hours (local time). It was a fine\ntrip with an hour layover in Istanbul Ataturk Airport. We arrived in Lisbon at 1500 hours (local time). The weather in Lisbon was terrific. A mild cold\nbut strong sea breeze was the starting point of me falling in love with the place. We arrived at our hotel (Novotel Lisboa) in an Uber. Oleg met us at\nthe lobby to help us with check-in. It was great to finally meet him in person after months of knowing and working together. We had a good chat about the\nevent, what to expect and other sightseeing areas. After a short time of refresh, Long who traveled from Berlin a day before met us at the restaurant. We\nhad a brief chat knowing each other, had our food and went to bed. The next day was Hackfest. We hit the bed after that as we had to reach Centro de\nCongressos de Lisboa (CCL) where the event was organised by 0900 hours.\n\nDay 0 (Dec 2)\n\nI woke up early for a short jog in the streets. Lisbon is a city made on hills. The streets have beautiful mosaic styled pavements. It was\nnice to see around the city. Then Abhyudaya and me went for breakfast and reached CCL in an Uber at 0815 hours.\n\nThere was a round table sitting arrangement in an auditorium. It was like a meet-and-greet event to interact with other developers (some known and some new).\nEverybody had to figure out their problem statements and work on it. There was milk, juice, sandwiches which gave us energy throughout the day. I took a\nsmall break to come out of the building to go to the other side of the road which was on the banks of Tagus River. From there you could have very close\nview underneath the Ponte 25 de Abril (looks strikingly similar to Golden Gate Bridge). You can also see The Sanctuary of Christ the King on the other side\nof the river (again looks similar to Christ the Redeemer in Rio, Brazil). It was great to kick off the event with Hackfest. At the end of Hackfest some of\nus presented our work. Later, we went to a nearby restaurant to have burgers which apparently was the best burger I ever had (could be because I hadn’t\ntried too many burgers before :P). We talked and interacted with people from other parts of the world for about an hour and a half then went back to our hotel\nrooms.\n\nDay 1 (Dec 3)\n\nThe conference officially began on this day. Abyudaya and me had breakfast and took the shuttle to CCL. We collected our t-shirts and IDs. The event managing team\nmade an app for DevOps World | Jenkins World (DWJW) Lisbon with all schedules and other informations which was incredibly convenient for all attendees.\nThere were multiple sessions/events on different topics related to Jenkins or DevOps in general. I attended the Jenkins and Jenkins X contributor summit.\nHad a nice lunch and went around to explore Lisbon. I went to Padrao dos Descobrimentos and the beautiful Belem Palace. Had some Pasteis de Belem\n(a popular Portuguese desert). Took a tram to Praça do Comércio. It is Lisbon’s most important square. You will find lots of tourists, street bands,\nsea food restaurants, shops for every budget, the famous pink street and so much more. Later that evening we had a party hosted by EURODOG (European\nDevOps Group) at Lisboa Marriott. It was a nice party to network with developers over casual wine and beer. We later head out to a nearby Indian restaurant\nfor Kebab and rice.\n\nDay 2 (Dec 4)\n\nThe second day began with the opening keynote. Later went to the Jenkins X Introduction, Deploying K8s with Jenkins on GCP, Build top mobile games\nby King in that order. Also occasionally hitting the sponsors booth to have a chat and collect some swags. In the evening there was the superhero\nthemed party, sponsored by Sonatype. It was probably the most fun event in the entire conference. The expo hall had an entirely different look with the party lights on,\npeople wearing capes, fun events going around. There were artists dressed in a Bumblebee, a Batman, a Superman, a Supergirl, a Thor and more superhero\ncostumes! I was previously made aware of the interesting parties at Jenkins World but the experience was very different. People from all over the world had\ncome together to celebrate the 15 years of success of an open source software. After partying from 5 to 7 we went back to the hotel. I spent some time\nto prepare the slides for the next day’s presentation and went to bed.\n\nDay 3 (Dec 5)\n\nThe third and final day of conference began with Jenkins World Fun Run. I missed the keynote for being late and other setup required for the\npresentation. My laptop was broken so had to do all the setup for demo on a friend’s laptop. The situation felt like a Jenkins admin under fire\nfor a production bug. After being under pressure for a while, took a break to admire the developer comics and had a chat with the graffiti painter.\nDuring lunch it was time for the GSoC presentation at the Jenkins community booth. All our presentation went well and we also interacted with real users.\nThen we had the GSoC Team pic at the Jenkins community booth. Later Abhyudaya and me gave our presentation at the lightning talks as well upon Mark Waite’s\nrequest. The event concluded with emotional goodbyes.\n\nAll GSoC Students were invited for dinner at Corinthia Lisboa’s Soul Garden restaurant. The party comprised of Oleg, Mark and his lovely wife, Liam, Tracy,\nAlyssa and Olivier. We had a very nice conversation and I had a very delicious Bacalhau (cod fish) dish. Then bid final goodbye to everybody.\n\nIt was a wonderful experience in a wonderful country among wonderful people. Hats off to the management team lead by Alyssa Tong and co. An event this big was\ncarried out without any hiccups! Everybody contributed their part to the event which made it very interactive and fun. Checkout some of my swags:\n\nA big shout out to the Jenkins project and CloudBees for sponsoring this trip. Also thank you Jenkins and Google Summer of Code for support. :)","title":"My DevOps World | Jenkins World Lisbon Experience","tags":["gitlab","devopsworld","jenkinsworld","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg","srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/eb017/baymac.jpg 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/ed0e7/baymac.jpg 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/b3c75/baymac.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/bcdad/baymac.webp 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/21187/baymac.webp 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/33025/baymac.webp 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/d386c/baymac.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":192}},"publicURL":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/baymac.jpg"},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/authors/baymac/","twitter":"baymac04"}]}},{"node":{"date":"2020-02-25T00:00:00.000Z","id":"b35e3ed8-c5a3-59da-9d68-6292f2b2e520","slug":"/blog/2020/02/25/vscode-caseStudy/","strippedHtml":"Configuration-as-code plugin\n\nProblem Statement: Convert the existing schema validation workflow from the current scripting language in the Jenkins Configuration as Code Plugin to a Java based rewrite thereby enhancing its readablity and testability supported by a testing framework for the same. Enhance developer experience by developing a VSCode Plugin to facilitate autocompletion and validation which would help the developer write correct yaml files before application to a Jenkins Instance.\n\nThe Configuration as Code plugin has been designed as an opinionated way to configure Jenkins based on human-readable declarative configuration files. Writing such a file should be feasible without being a Jenkins expert, just translating into code a configuration process one is used to executing in the web UI. The plugin uses a schema to verify the files being applied to the Jenkins instance.\n\nWith the new JSON Schema being enabled developers can now test their yaml file against it. The schema checks the descriptors i.e. configuration that can be applied to a plugin or Jenkins core, the correct type is used and help text is provided in some cases. VSCode allows us to test out the schema right out of the box with some modifications. This project was built as part of the Community Bridge initiative which is a platform created by the Linux Foundation to empower developers — and the individuals and companies who support them — to advance sustainability, security, and diversity in open source technology. You can take a look at the Jenkins Community Bridge Project Page\n\nSteps to Enable the Schema Validation\n\na) The first step includes installing the JCasC Plugin for Visual Studio Code and opening up the extension via the extension list. Shortcut for opening the extension list in VSCode editor using Ctrl + Shift + X.\n\nb) In order to enable validation we need to include it in the workspace settings.\nNavigate to File and then Preference and then Settings. Inside settings search for json and inside settings.json include the following configuration.\n\n{\n\"yaml.schemas\": {\n        \"schema.json\": \"y[a]?ml\"\n    }\n}\n\nYou can specify a glob pattern as the value for schema.json which is the file name for the schema. This would apply the schema to all yaml files. eg:.[y[a]?ml]\n\nc) The following tasks can be done using VSCode:\n\na) Auto completion (Ctrl + Space):\n  Auto completes on all commands.\n\nb) Document Outlining (Ctrl + Shift + O):\nProvides the document outlining of all completed nodes in the file.\n\nd) Create a new file under the work directory called jenkins.yml. For example consider the following contents for the file:\n\njenkins:\n  systemMessage: “Hello World”\n  numExecutors: 2\n\nThe above yaml file is valid according to the schema and vscode should provide you with validation and autocompletion for the same.\n\nScreenshots\n\nWe are holding an online meetup on the 26th February regarding this plugin and how you could use it to validate your YAML configuration files.\nFor any suggestions or dicussions regarding the schema feel free to join our gitter channel.\nIssues can be created on Github.","title":"Validating JCasC configuration files using Visual Studio Code","tags":["community-bridge","JCasC","VSCode","community"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/authors/sladyn98/","twitter":"SladynN"}]}},{"node":{"date":"2020-03-02T00:00:00.000Z","id":"8a3a05f0-7335-5af6-9e0c-880d773b3f24","slug":"/blog/2020/03/02/findsecbugs/","strippedHtml":"Spotbugs is a utility used in Jenkins and many other Java projects to detect common Java coding mistakes and bugs. It is integrated into the build process to improve the code before it gets merged and released. Findsecbugs is a plugin for Spotbugs that adds 135 vulnerability types focused on the OWASP TOP 10 and the Common Weakness Enumeration (CWE). I’m working on integrating findsecbugs into our Jenkins ecosystem.\n\nBackground\n\nSpotbugs traces its history through Findbugs, which started in 2006. As Findbugs it was widely adopted by many projects. About 2016, the Findbugs project ground to a halt. Like the mythical phoenix, the Spotbugs project rose from the ashes to keep the capabilities alive. Most things are completely compatible between the two systems.\n\nJenkins has used Findbugs and now Spotbugs for years. This is integrated as a build step into parent Maven poms, including the plugin parent pom and the parent pom for libraries and core components. There are various properties that can be set to control the detection threshold, the effort, and findings or categories to exclude. Take a look at the effective pom for a project to see the settings.\n\nConundrums\n\nThere is a fundamental conundrum with introducing an analysis tool into a project. The best time to have done it is always in the past, particularly when the project first started. There are always difficulties in introducing it into an existing project. Putting it off for later just delays the useful results and makes later implementation more difficult. The best time to do it is now, as early as possible.\n\nAll analysis tools are imperfect. They report some issues that don’t actually exist. They miss some important issues. This is worse in legacy code, making the adoption more difficult. Findings have to be examined and evaluated. Some are code weaknesses but don’t indicate necessary fixes. For example, MD5 has been known for years as a weak algorithm, unsuitable for security uses. It can be used for non-security purposes, such as fingerprinting, but even there other algorithms (SHA-2) are preferred. We should replace all usages of MD5, but in some cases that’s difficult and it’s not exactly a problem.\n\nUltimately, the gain from these analysis tools isn’t so much from finding issues in existing code. The value comes more from catching new regressions that might be introduced or improving new code. This is one reason why it is valuable to add useful new analysis such as findsecbugs now, so that we can begin reaping the benefits.\n\nWith a security tool like findsecbugs, there is another paradox. Adding the tool makes it easier to find potential security issues. Attackers could take advantage of this information. However, security by obscurity is not a good design. Anyone can run findsecbugs now without the project integrating it. Integrating it makes it easier for legitimate developers to resolve issues and prevent future ones.\n\nImplementation\n\nI’ve been working on integrating findsecbugs into the Jenkins project for several months. It is working in several repos. There are several others where I have presented draft PRs to demonstrate what it will look like once it is enabled. As soon as we can disseminate the information enough, I propose to enable it in the parent poms for widespread use.\n\nExisting\n\nI started by enabling findsecbugs in two major components where I have a high degree of familiarity, Remoting, and Jenkins. Most of the work here involves examining each finding and figuring out what to do with it. In most cases this results in using one of the suppression mechanisms to ignore the finding. In some cases, the code can be removed or improved.\n\nFindsecbugs reported a significant number of false positives in Remoting for a couple of notable reasons. (See the PR.) Remoting uses Spotbugs aggressively with a Low threshold setting. This produces more results. Findsecbugs targets Java web applications. As the communication layer between agents and controller, Remoting uses some mechanisms that would be a problem on the server side but are acceptable on the agent.\n\nEven without all its plugins, Jenkins is a considerable collection of code. Findsecbugs reported a smaller number of false positives for Jenkins (See the PR.) It runs Spotbugs at a High threshold, so it only reports issues it deems more concerning. A number of these indicate code debt, deprecated code to remove, or areas that could be improved. I created Jira tickets for many of these.\n\nDemonstrated\n\nI have created draft PRs to demonstrate how findsecbugs will look in several plugins. The goal is not to use these PRs directly but instead integrate findsecbugs at the parent pom level. These PRs serve as reference documentation.\n\nCredentials\n\nThis one is particularly interesting because here findsecbugs correctly detects the remains of a valid security vulnerability ( CVE-2019-10320). Currently, this code is safely used only for migration of old data. If we had run findsecbugs on this plugin a year ago, it would have detected this valid vulnerability.\n\nSSH Build Agents\n\nThis one is interesting because it flags MD5 as a concern. Since it is used for fingerprinting, it isn’t a valid vulnerability, but since the hash isn’t stored it is easy to improve the code here.\n\nEC2\n\nIn this case, findsecbugs found some valid concerns, but the code isn’t used so it can be removed. Also, MD5 is harder to remove here but should be considered technical debt and removed when possible.\n\nPlatform Labeler\n\nFindsecbugs didn’t find any concerns here. This means adapting to it requires no work. In this demonstration, I added a fake finding to prove that it was working.\n\nFile Leak Detector\n\nThere is one simple finding noted here. Because it is part of the configuration performed by an administrator we can ignore it.\n\nCredentials Binding\n\nNothing was found here so integration requires no effort.\n\nProposed\n\nMy proposal is to integrate findsecbugs configuration into the parent poms as soon as we can. The delay is currently mostly around sharing the information to prepare developers by blog post, email list discussion, and presentation.\n\nEven before I started working on this, StefanSpieker proposed a PR to integrate into the parent Jenkins pom. This will apply to Jenkins libraries and core components. Once this is integrated, I will pull out the changes I made to the Jenkins and Remoting project poms.\n\nI also plan on integrating findsecbugs into the plugin and Stapler parent poms. Once it is added to the plugin parent pom all plugins will automatically perform these checks when they upgrade their parent pom version. If there are any findings, developers will need to take care of them as described in the next section.\n\nWhat do you need to do?\n\nOnce developers upgrade to a parent pom version that integrates findsecbugs, they may have to deal with evaluating, fixing, or suppressing findings. The parent pom versions do not yet exist but are in process or proposed.\n\nExtraneous build message\n\nIn some cases, an extraneous message may show up in the build logs. It starts with a line like this The following classes needed for analysis were missing: followed by lines listing some methods by name. Ignore this message. It results from SpotBugs printing some internal, debug information that isn’t helpful here.\n\nExamine findings\n\nIf findsecbugs reports any findings, then a developer needs to examine and determine what to do about each one.\n\nExcluding issues\n\nYou can exclude an issue, so that it is never reported in a project. This is done by configuring an exclusion file. If you encounter the findings CRLF_INJECTION_LOGS or INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE feel free to add these to an exclusion file. These are not considered a concern in Jenkins. See the Jenkins project exclusion file for an example. You should be cautious about including other issue types here.\n\nTemporarily disable findsecbugs\n\nYou may disable findsecbugs by adding to the exclusion file. I strongly encourage you to only disable findsecbugs temporarily when genuinely needed.\n\nSuppress a finding\n\nAfter determining that a finding is not important, you can suppress it by annotating a method or a class with @SuppressFBWarnings(value = “…​”, justification=”…​”). I encourage you to suppress narrowly. Never suppress at the class level when you can add it to a method. For a long method, extract the problematic part into a small method and add the suppression there. I also encourage you to always add a meaningful justification.\n\nImprove code\n\nWhenever possible improve the code such that the problematic code no longer exists. This can include removing deprecated or unused code, using improved algorithms, or improving structure or implementation. This is where the significant gains come from with SpotBugs and findsecbugs. Also, as you make changes or add new features make sure to implement them so as not to introduce new issues.\n\nReport security vulnerabilities\n\nIf you encounter a finding related to a valid security vulnerability, please report it via the Jenkins security reporting process. This is the responsible behavior that benefits the community. Try not to discuss or call attention to the issue before it can be disclosed in a Jenkins security advisory.\n\nCreate tasks\n\nIf you discover an improvement area that is too large to fit into your current work or release plan, I encourage you to record a task to get it done. You can do this in Jira, like I did for several issues in Jenkins core, or in whatever task management system you use.\n\nConclusion\n\nSpotBugs has long been used in Jenkins to catch bugs and improve code quality. Findsecbugs adds valuable security-related bug definitions. As we integrate it into the existing Jenkins code base it will require analysis and suppression for legacy code. This identifies areas we can improve and enhances quality as we move forward. Please responsibly report any security vulnerabilites you discover.","title":"Findsecbugs for Developers","tags":["jenkins","security","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/19e71/jeffret-b.jpg","srcSet":"/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/77b35/jeffret-b.jpg 32w,\n/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/d4a57/jeffret-b.jpg 64w,\n/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/19e71/jeffret-b.jpg 128w,\n/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/68974/jeffret-b.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/ef6ff/jeffret-b.webp 32w,\n/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/8257c/jeffret-b.webp 64w,\n/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/6766a/jeffret-b.webp 128w,\n/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/22bfc/jeffret-b.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f1cc92ec0a7523e21842aee0aebbb56c/jeffret-b.jpg"},"blog":null,"github":"jeffret-b","html":"<div class=\"paragraph\">\n<p>Jeff has been using Jenkins for many years.\nSince 2018 he has been contributing to Jenkins core and plugins.\nHe maintains the Remoting library and participates on the Jenkins security team.</p>\n</div>","id":"jeffret-b","irc":null,"linkedin":null,"name":"Jeff Thompson","slug":"/blog/authors/jeffret-b/","twitter":null}]}},{"node":{"date":"2020-03-02T00:00:00.000Z","id":"b5d641eb-bed7-5caf-9805-42a1970f13d1","slug":"/blog/2020/03/02/pipeline-authoring-sig-update/","strippedHtml":"What is the Pipeline-Authoring Special Interest Group\n\nThis special interest group aims to improve and curate the experience of authoring Jenkins Pipelines. This includes the\nsyntax of `Jenkinsfile`s and shared libraries, code sharing and reuse, testing of Pipelines and shared libraries, IDE\nintegration and other development tools, documentation, best practices, and examples.\n\nWhat Are The Focus Areas of the Pipeline-Authoring Special Interest Group\n\nSyntax - How `Jenkinsfile`s and shared libraries are written.\n\nCode sharing and reuse - Shared libraries and future improvements.\n\nTesting - Unit and functional testing of `Jenkinsfile`s and shared libraries.\n\nIDE integration, editors, and other development tools - IDE plugins, visual editors, etc.\n\nDocumentation - Reference documentation, tutorials, and more.\n\nBest practices - Defining, maintaining, and evangelizing best practices in Jenkins Pipeline.\n\nExamples - Real-world `Jenkinsfile`s and shared libraries demonstrating how to utilize various features of Pipeline,\nas well as basic or starter `Jenkinsfile`s for common patterns that can be used as jumping-off points by new users.\n\nWhat Have We Been Up To\n\nWith the start of a new year, members got together to discuss the roadmap for 2020. During the initial discussions we\ndetermined that it would be good to examine the goals of previous meetings and determine the best path forward.\n\nA mutual decision was made that to better create a roadmap; we needed to understand better who we were aiming to help.\nWe decided that creating personas was very beneficial. Personas are fictional characters, which we are creating based\nupon our research to represent the different user types that might use Jenkins pipelines.\nCreating personas can help us step out of ourselves. It can help us to recognize that different people have different\nneeds and expectations, and it can also help us to identify with the user we are building the roadmap for. Personas make\nthe task at hand less complicated, they guide our ideation processes, and they can help us to achieve the goal of\ncreating a good user experience for our target user group.\nA lot of that work can be found here:\nhttps://docs.google.com/document/d/1CdyzJwt50Wk3uUNsLMl2d4w2MGYss-phqet0s-KjbEs/edit\nThe idea is to map the personas to a maturity model and then map the maturity model to the actual documentation. That\nmaturity model can be found here: https://drive.google.com/file/d/1ByzWlPU0j1qM_gqspJppkNKkR5ZVLWlB/view\n\nHow Can I Get Involved\n\nWe have been meeting regularly to define personas to help us better create the SIG roadmap. We meet twice a week,\nonce on Thursday for the EMEA timezone and once on Friday for the US timezone. Meeting notes can be found here:\nhttps://docs.google.com/document/d/1EhWoBplGl4M8bHz0uuP-iOynPGuONjcz4enQm8sDyUE/edit# and the calendar, if you would\nlike to attend, is here: https://jenkins.io/event-calendar/. The previous recording of the meetings are\nlocated here: https://www.youtube.com/watch?v=pz_kPpb9C1w&list=PLN7ajX_VdyaOKKLBXek6iG8wTS24Ac7Y3\n\nNext Steps\n\nWe have a lot of work to do and could use your help. If you would love to join us, check out the meeting link. If you\nwould like to check out the personas and give feedback, also check out the link.\nOnce we have wrapped up the personas work, we will start to identify the available documentation and ensure we have\nadequate documentation with the help of the Doc SIG.\nWe will finally then start working to build out tools to help the community with pipelines in Jenkins better.\n\nContact Us\n\nIf you would like to get in touch with the Pipeline-Authoring SIG, you can by joining the\nPipeline-Authoring SIG gitter channel or via the\nPipeline-Authoring SIG mailing list","title":"Pipeline-Authoring SIG Update","tags":["Pipeline-Authoring","SIG","community","opensource"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png","srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/914ee/markyjackson-taulia.png 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/1c9ce/markyjackson-taulia.png 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/acb7c/markyjackson-taulia.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/ef6ff/markyjackson-taulia.webp 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/8257c/markyjackson-taulia.webp 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/6766a/markyjackson-taulia.webp 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/22bfc/markyjackson-taulia.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/markyjackson-taulia.png"},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"/blog/authors/markyjackson-taulia/","twitter":"markyjackson5"}]}},{"node":{"date":"2020-03-17T00:00:00.000Z","id":"d79e4a42-13d6-5155-8cc3-c8c31c9738ff","slug":"/blog/2020/03/17/ui-plugins/","strippedHtml":"This article has been presented in an recorded online session\nduring the Jenkins 2020 UI/UX Hackfest.\n\nFor Jenkins a large number of plugins are available that visualize the results of a wide variety of build steps. There\nare plugins available to render the test results, the code coverage, the static analysis and so on. All of these plugins\ntypically pick up the build results of a given build step and show them in the user interface. In order to render these\ndetails most of the plugins use static HTML pages, since this type of user interface is the standard visualization in\nJenkins since its inception in 2007.\n\nIn order to improve the look and feel and the user experience of these plugins it makes sense to move forward and\nincorporate some modern Java Script libraries and components. Since development of Blue Ocean has been stopped (see\nJenkins mailing list post)\nplugin authors need to decide on their own, which UI technologies are helpful for that task. However, the universe of\nmodern UI components is so overwhelming that it makes sense to pick up only a small set of components that are proven\nto be useful and compatible with Jenkins underlying web technologies. Moreover, the initial setup of\nincorporating such a new component is quite large so it would be helpful if that work needs to be done only once.\n\nThis guide introduces a few UI components\nthat make sense to be used by all plugin authors in the future to provide a rich user interface for reports in Jenkins.\nIn order to simplify the usage of these libraries in the context of Jenkins as a Java based web application, these\nJava Script libraries and components have been packaged as ordinary Jenkins plugins.\n\nIn the following sections, these new components will be introduced step by step. In order to see how these components\ncan be used a plugin, I demonstrate the new features while enhancing the existing\nForensics Plugin with a new user\ninterface. Since the Warnings Next Generation Plugin also uses these new components, you can see additional examples\nin the documentation of the warnings plugin\nor in our public ci.jenkins.io instance, that\nalready is using these components in the detail views of the warnings plugin.\n\n1. New user interface plugins\n\nThe following UI components are provided as new Jenkins plugins:\n\njquery3-api-plugin :\nProvides jQuery 3 for Jenkins Plugins.\njQuery is — as described on their home page — a fast, small, and feature-rich JavaScript library. It makes things\nlike HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API\nthat works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the\nway that millions of people write JavaScript.\n\nbootstrap4-api-plugin :\nProvides Bootstrap 4 for Jenkins Plugins. Bootstrap is — according to their self-perception — the world’s most popular front-end component library to build responsive, mobile-first projects on the web. It is\nan open source toolkit for developing with HTML, CSS, and JS. Developers can quickly prototype their ideas or\nbuild entire apps with their Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful plugins\nbuilt on jQuery.\n\ndata-tables-api-plugin :\nProvides DataTables for Jenkins Plugins.\nDataTables is a plug-in for the jQuery Javascript library. It is a highly flexible tool, built upon the foundations\nof progressive enhancement, that adds all of these advanced features to any HTML table:\n\nPrevious, next and page navigation\n\nFilter results by text search\n\nSort data by multiple columns at once\n\nDOM, Javascript, Ajax and server-side processing\n\nEasily theme-able\n\nMobile friendly\n\necharts-api-plugin :\nProvides ECharts for Jenkins Plugins. ECharts is an open-sourced\nJavaScript visualization tool to create intuitive, interactive, and highly-customizable charts. It\ncan run fluently on PC and mobile devices and it is compatible with most modern\nWeb Browsers.\n\nfont-awesome-api-plugin :\nProvides Font Awesome for Jenkins Plugins. Font Awesome has vector icons and social logos,\naccording to their self-perception it is the web’s most popular icon set and toolkit. Currently, it contains more than\n1,500 free icons.\n\npopper-api-plugin\nProvides Popper.js for Jenkins Plugins. Popper can\neasily position tooltips, popovers or anything else with just a line of code.\n\nplugin-util-api-plugin : This small plugin provides\nsome helper and base classes to simplify the creation of reporters in Jenkins. This plugin also\nprovides a set of architecture rules that can be included in an architecture test suite of your plugin.\n\n2. Required changes for a plugin POM\n\nIn order to use these plugins you need to add them as dependencies in your plugin pom. You can use the following snippet\nto add them all:\n\npom.xml\n\n[...]\n\n1.0.2\n5.12.0-7\n4.4.1-10\n4.6.0-8\n1.10.20-13\n[...]\n\nio.jenkins.plugins\nplugin-util-api\n${plugin-util-api.version}\n\nio.jenkins.plugins\nfont-awesome-api\n${font-awesome-api.version}\n\nio.jenkins.plugins\nbootstrap4-api\n${bootstrap4-api.version}\n\nio.jenkins.plugins\necharts-api\n${echarts-api.version}\n\nio.jenkins.plugins\ndata-tables-api\n${data-tables-api.version}\n\n[...]\n\n[...]\n\nAlternatively, you have a look at the POM files of the\nWarnings Next Generation Plugin or the\nForensics API Plugin which already use these\nplugins.\n\n3. General structure of a reporter\n\nIn this section I will explain some fundamentals of the design of Jenkins, i.e. the Java model and the associated\nuser interface elements. If you are already familiar on how to implement the corresponding extension points of a\nreporter plugin (see section Extensibility in Jenkins'\ndeveloper guide), then you can skip this section and head directly to Section 3.1.\n\nJenkins organizes projects using the static object model structure shown in Figure 1.\n\nFigure 1. Jenkins design - high level view of the Java model\n\nThe top level items in Jenkins user interface are jobs (at least the top level items\nwe are interested in). Jenkins contains several jobs of different types (Freestyle jobs, Maven Jobs, Pipelines, etc.).\n\nEach of these jobs contains an arbitrary number of builds (or more technically, runs). Each build is identified by its\nunique build number. Jenkins plugins can attach results to these builds, e.g. build artifacts, test results,\nanalysis reports, etc. In order to attach such a result, a plugin technically needs to implement and create an action\nthat stores these results.\n\nThese Java objects are visualized in several different views, which are described in more detail in the following\nsections. The top-level view that shows all available Jobs is shown in Figure 2.\n\nFigure 2. Jenkins view showing all available jobs\n\nPlugins can also contribute UI elements in these views, but this is out of scope of this guide.\n\nEach job has a detail view, where plugins can extend corresponding extension points and provide summary boxes and\ntrend charts. Typically, summary boxes for reporters are not required on the job level, so I describe only trend charts\nin more detail, see section Section 5.5.2.\n\nFigure 3. Jenkins view showing details about a job\n\nEach build has a detail view as well. Here plugins can provide summary boxes similar to the boxes for the job details\nview. Typically, plugins show here only a short summary and provide a link to detailed results, see Figure 4 for\nan example.\n\nFigure 4. Jenkins view showing details about a build\n\nThe last element in the view hierarchy actually is a dedicated view that shows the results of a specific plugin. E.g.,\nthere are views to show the test results, the analysis results, and so on. It is totally up to a given plugin what\nelements should be shown there. In the next few sections I will introduce some new UI components that can be used\nto show the corresponding results in a pleasant way.\n\n3.1. Extending Jenkins object model\n\nSince reporters typically are composed in a similar way, I extended Jenkins' original object model\n(see Figure 1) with some additional elements, so it will be much simpler to create or implement\na new reporter plugin. This new model is shown in Figure 5. The central element is a build action that\nwill store the results of a plugin reporter. This action will be attached to each build and will hold (and persist) the\nresults for a reporter. The detail data of each action will be automatically stored in an additional file, so the\nmemory footprint of Jenkins can be kept small if the details are never requested by users. Additionally, this\naction is also used to simplify the creation of project actions and trend charts, see Section 5.5.2.\n\nFigure 5. Jenkins reporter design - high level view of the model for reporter plugins\n\n4. Git Forensics plugin\n\nThe elements in this tutorial will be all used in the new\nForensics API Plugin (actually the plugin is not new, it is a dependency of the\nWarnings Next Generation Plugin). You can download the plugin content\nand see in more detail how these new components can be used in practice. Or you can change this plugin just to see\nhow these new components can be parametrized.\n\nIf you are using Git as source code management system then this plugin will mine\nthe repository in the style of\nCode as a Crime Scene\n(Adam Tornhill, November 2013) to determine statistics of the contained source code files:\n\ntotal number of commits\n\ntotal number of different authors\n\ncreation time\n\nlast modification time\n\nThe plugin provides a new step (or post build publisher) that starts the repository mining and stores\nthe collected information in a Jenkins action (see Figure 5). Afterwards you get a new\nbuild summary that shows the total number of scanned files (as trend and as build result). From\nhere you can navigate to the details view that shows the scanned files in a table that can be\nsimply sorted and filtered. You also will get some pie charts that show important aspects of the\ncommit history.\n\nPlease note that this functionality of the plugin still is a proof of concept: the performance of this step heavily\ndepends on the size and the number of commits of your Git repository. Currently it scans the whole repository in each\nbuild. In the near future I hope to find a volunteer who is interested in replacing this dumb algorithm with an incremental scanner.\n\n5. Introducing the new  UI components\n\nAs already mentioned in Section 3, a details view is plugin specific. What is shown and how these\nelements are presented is up to the individual plugin author. So in the next sections I provide some examples\nand new concepts that plugins can use as building blocks for their own content.\n\n5.1. Modern icons\n\nJenkins plugins typically do not use icons very frequently. Most plugins provide an icon for the actions and that’s it.\nIf you intend to use icons in other places, plugin authors are left on their own: the recommended Tango icon set is more\nthan 10 years old and too limited nowadays. There are several options available, but the most popular is the\nFont Awesome Icon Set. It provides more than 1500 free icons that follow the same\ndesign guidelines:\n\nFigure 6. Font Awesome icons in Jenkins plugins\n\nIn order to use Font Awesome icons in a plugin you simply need a dependency to the corresponding\nfont-awesome-api-plugin. Then you can use any of the solid icons\nby using the new tag svg-icon in your jelly view:\n\nindex.jelly\n\n[...]\n\n[...]\n\nIf you are generating views using Java code, then you also can use the class SvgTag to generate the\nHTML markup for such an icon.\n\n5.2. Grid layout\n\nJenkins currently includes in all views an old and patched version of Boostrap’s grid system (with 24 columns). This version\nis not compatible with Boostrap 4 or any of the JS libraries that depend on Bootstrap4. In order to use Bootstrap 4\nfeatures we need to replace the Jenkins provided layout.jelly file with a patched version, that does not load\nthe broken grid system. I’m planning to create a PR that fixes the grid in Jenkins core, but that will take some time.\nUntil then you will need to use the provided layout.jelly of the Boostrap4 plugin, see below.\n\nThe first thing to decide is, which elements should be shown on a plugin page and how much space each element\nshould occupy. Typically, all visible components are mapped on the available space using a simple grid.\nIn a Jenkins view we have a fixed header and footer and a navigation bar on the left\n(20 percent of the horizontal space). The rest of a screen can be used by\na details view. In order to simplify the distribution of elements in that remaining space we use\nBootstrap’s grid system.\n\nFigure 7. Jenkins layout with a details view that contains a grid system\n\nThat means, a view is split into 12 columns and and arbitrary number of rows. This grid system is simple to use\n(but complex enough to also support fancy screen layouts) - I won’t go into\ndetails here, please refer to the Bootstrap documentation\nfor details.\n\nFor the forensics detail view we use a simple grid of two rows and two columns. Since the number of columns always is 12\nwe need to create two \"fat\" columns that fill 6 of the standard columns.\nIn order to create such a view in our\nplugin we need to create a view given as a jelly file and a corresponding Java view model object. A view with this layout\nis shown in the following snippet:\n\nindex.jelly\n\n(1)\n\n(2)\n(3)\n\n(4)\n(5)\nContent of column 1 in row 1\n\n(6)\nContent of column 2 in row 1\n\n(7)\n(8)\nContent of row 2\n\n1\nUse a custom layout based on Bootstrap: since Jenkins core contains an old version of Bootstrap,\nwe need to replace the standard layout.jelly file.\n\n2\nImport Bootstrap 4: Importing of JS and CSS components is done using the adjunct concept,\nwhich is the preferred way of referencing static resources within Jenkins' Stapler Web framework.\n\n3\nThe whole view will be placed into a fluid container that fills up the whole screen (100% width).\n\n4\nA new row of the view is specified with class row. The additional class py-3 defines the padding to use for\nthis row, see Bootstrap Spacing for more details.\n\n5\nSince Bootstrap automatically splits up a row into 12 equal sized columns we define here\nthat the first column should occupy 6 of these 12 columns. You can also leave off the detailed numbers, then Bootstrap will\nautomatically distribute the content in the available space. Just be aware that this not what you want in most of the times.\n\n6\nThe second column uses the remaining space, i.e. 6 of the 12 columns.\n\n7\nThe second row uses the same layout as row 1.\n\n8\nThere is only one column for row 1, it will fill the whole available space.\n\nYou can also specify different column layouts for one row, based on the actual visible size of the screen.\nThis helps to improve the layout for larger screens. In the warnings plugin you will find\nan example: on small devices, there is one card visible that shows one pie chart in a carousel. If you are\nopening the same page on a larger device, then two of the pie charts are shown side by side and the carousel is hidden.\n\n5.3. Cards\n\nWhen presenting information of a plugin as a block, typically plain text elements are shown. This will normally result\nin some kind of boring web pages. In order to create a more appealing interface, it makes sense to present such information\nin a card, that has a border, a header, an icon, and so on. In order to create such a\nBootstrap card a small jelly tag has been provided by the new\nBootstrap plugin that simplifies this task for a plugin.\nSuch a card can be easily created in a jelly view in the following way:\n\nContent of the card\n\nIn Figure 8 examples of such cards are shown. The cards in the upper row contain pie charts that show the\ndistribution of the number of authors and commits in the whole repository. The card at the bottom shows the detail\ninformation in a DataTable. The visualization is not limited to charts or tables, you can\nshow any kind of HTML content in there. You can show any icon of your\nplugin in these cards, but it is recommended to use one of the existing Font Awesome icons\nto get a consistent look and feel in Jenkins' plugin ecosystem.\n\nFigure 8. Bootstraps cards in Jenkins plugins\n\nNote that the size of the cards is determined by the grid configuration, see Section 5.2.\n\n5.4. Tables\n\nA common UI element to show plugin details is a table control. Most plugins (and Jenkins core) typically use\nplain HTML tables. However, if the table should show a large number of rows then using a more sophisticated control\nlike DataTables makes more sense. Using this JS based table control provides additional\nfeatures at no cost:\n\nfilter results by text search\n\nprovide pagination of the result set\n\nsort data by multiple columns at once\n\nobtain table rows using Ajax calls\n\nshow and hide columns based on the screen resolution\n\nIn order to use DataTables in a view there are two options, you can either decorate existing\nstatic HTML tables (see Section 5.4.1) or populate the table content using Ajax (see Section 5.4.2).\n\n5.4.1. Tables with static HTML content\n\nThe easiest way of using DataTables is by creating a static HTML table that will be decorated by simply calling the\nconstructor of the datatable. This approach involves no special handling on the Java and Jelly side, so I think it is\nsufficient to follow the example in the DataTables\ndocumentation. Just make sure that after building the table in your Jelly file you need to decorate the table\nwith the following piece of code:\n\n[...]\n\n[...]\n\n[...]\n\n1\nreplace id with the ID of your HTML table element\n\nIn the Forensics plugin no such static table is used so far, but you can have a look at the\ntable that shows fixed warnings\nin the warnings plugin to see how such a table can be decorated.\n\n5.4.2. Tables with dynamic model based content\n\nWhile static HTML tables are easy to implement, they have several limitations. So it makes sense to follow a more\nsophisticated approach. Typically, tables in user interfaces are defined by using a corresponding table (and row) model.\nJava Swing successfully provides such a\ntable model concept since the early days of Java.\nI adapted these concepts for Jenkins and DataTables as well. In order to create a table in a Jenkins view a plugin\nneeds to provide a table model class, that provides the following information:\n\nthe ID of the table (since there might be several tables in the view)\n\nthe model of the columns (i.e., the number, type, and header labels of the columns)\n\nthe content of the table (i.e. the individual row objects)\n\nYou will find an example of such a table in the Forensics plugin: here a table lists\nthe files in your Git repository combined with the corresponding commit statistics (number of authors,\nnumber of commits, last modification, first commit). A screenshot of that table is shown in Figure 9.\n\nFigure 9. Dynamic Table in the Forensics plugin\n\nIn order to create such a table in Jenkins, you need to create a table model class that derives from TableModel.\nIn Figure 10 a diagram of the corresponding classes in the Forensics plugin is shown.\n\nFigure 10. Table model of the Forensics plugin\n\nTable column model\n\nThis first thing a table model class defines is a model of the available columns by creating corresponding\nTableColumn instances. For each column you need to specify a header label and the name of the bean property that\nshould be shown in the corresponding column (the row elements are actually Java beans: each column will\nshow one distinct property of such a bean, see next section). You can\nuse any of the supported column types by simply providing a\nString or Integer based column.\n\nTable rows content\n\nAdditionally, a table model class provides the content of the rows. This getRows() method\nwill be invoked asynchronously using an Ajax call. Typically, this method simply returns a list of Java Bean instances,\nthat provide the properties of each column (see previous section). These objects will be converted automatically\nto an array of JSON objects, the basic data structure required for the DataTables API.\nYou will find a fully working example table model\nimplementation in the Git repository of the forensics plugin in the class\nForensicsTableModel.\n\nIn order to use such a table in your plugin view you need to create the table in the associated\nJelly file using the new table tag:\n\nindex.jelly\n\n[...]\n\n(1)\n[...]\n\n1\nreplace id with the id of your table\n\nThe only parameter you need to provide for the table is the model — it is typically part of the corresponding\nJenkins view model class (this object is referenced with ${it} in the view).\nIn order to connect the corresponding Jenkins view model class with the table, the view model class needs to\nimplement the AsyncTableContentProvider interface. Or even simpler, let your view model class derive from\nDefaultAsyncTableContentProvider. This relationship is required, so that Jenkins can automatically create\nand bind a proxy for the Ajax calls that will automatically fill the table content after the HTML page has been created.\n\nIf we put all those pieces together, we are required to define a model similar to the model of the Forensics plugin,\nthat is shown in Figure 11.\n\nFigure 11. Jenkins reporter design - high level view of the model for reporter plugins\n\nAs already described in Figure 5 the plugin needs to attach a BuildAction to each build. The\nForensics plugin attaches a ForensicBuildAction to the build. This action stores a RepositoryStatistics instance,\nthat contains the repository results for a given build. This action delegates all Stapler requests to a new\nstaplerdoc:org.kohsuke.stapler.StaplerProxy[Stapler proxy instance] so we can keep the\naction clean of user interface code. This ForensicsViewModel class then acts as view model that provides the server\nside model for the corresponding Jelly view given by the file index.jelly.\n\nWhile this approach looks quite complex at a first view, you will see that the actual implementation part\nis quite small. Most of the boilerplate code is already provided by the base classes and you need to implement\nonly a few methods. Using this concept also provides some additional features, that are part of the DataTables plugin:\n\nOrdering of columns is persisted automatically in the browser local storage.\n\nPaging size is persisted automatically in the browser local storage.\n\nThe Ajax calls are actually invoked only if a table will become visible. So if you have\nseveral tables hidden in tabs then the content will be loaded on demand only, reducing the amount of data\nto be transferred.\n\nThere is an option available to provide an additional details row that can be expanded with a + symbol,\nsee warnings plugin table for details.\n\n5.5. Charts\n\nA plugin reporter typically also reports some kind of trend from build to build. Up to now Jenkins core provides only a\nquite limited concept of rendering such trends as trend charts. The\nJFreeChart framework offered by Jenkins core is a server\nside rendering engine that creates charts as static PNG images that will be included on the job and details pages.\nNowadays, several powerful JS based charting libraries are available, that do the same job\n(well actually an even better job) on the client side. That has the advantage that these charts can be customized\non each client without affecting the server performance. Moreover, you get a lot of additional\nfeatures (like zooming, animation, etc.) for free. Additionally, these charting libraries not only support the typical\nbuild trend charts but also a lot of additional charts types that can be used to improve the user experience of\na plugin.\nOne of those charting libraries is ECharts : this library has a powerful API\nand supports literally every chart type one can image of. You can get some impressions of the features on the\nexamples page of the library.\n\nIn order to use these charts one can embed charts that use this library by importing the corresponding JS files and by\ndefining the chart in the corresponding Jelly file. While that already works quite well it\nwill be still somewhat cumbersome to provide the corresponding model for these charts from Jenkins build results. So\nI added a powerful Java API that helps to create the model for these charts on the Java side. This API provides the\nfollowing features:\n\nCreate trend charts based on a collection of build results.\n\nSeparate the chart type from the aggregation in order to simplify unit testing of the chart model.\n\nToggle the type of the X-Axis between build number or build date (with automatic aggregation of results that\nhave been recorded at the same day).\n\nAutomatic conversion of the Java model to the required JSON model for the JS side.\n\nSupport for pie and line charts (more to come soon).\n\nThose charts can be used as trend chart in the project page (see Figure 3) or as information chart in the details\nview of a plugin (see Section 5).\n\n5.5.1. Pie charts\n\nA simple but still informative chart is a pie chart that illustrates numerical proportions of plugin data. In the Forensics\nplugin I am using this chart to show the numerical proportions of the number of authors or commits for the\nsource code files in the Git repository (see Figure 8). In the warnings plugin I use this chart to show the\nnumerical proportions of the new, outstanding, or fixed warnings, see Figure 12.\n\nFigure 12. Pie chart in the Warnings plugin\n\nIn order to include such a chart in your details view, you can use the provided pie-chart tag.\nIn the following snippet you see this tag in action (embedded in a Bootstrap card, see Section 5.3):\n\nindex.jelly\n\n[...]\n<c:pie-chart id=\"authors\" model=\"${it.authorsModel}\" height=\"256\" />\n\n[...]\n\nYou need to provide a unique ID for this chart and the corresponding model value. The model must be the JSON\nrepresentation of a corresponding PieChartModel instance. Such a model can be created with a couple of lines:\n\nViewModel.java\n\n[...]\n    PieChartModel model = new PieChartModel(\"Title\");\n\n    model.add(new PieData(\"Segment 1 name\", 10), Palette.RED);\n    model.add(new PieData(\"Segment 2 name\", 15), Palette.GREEN);\n    model.add(new PieData(\"Segment 3 name\", 20), Palette.YELLOW);\n\n    String json = new JacksonFacade().toJson(model);\n    [...]\n\n5.5.2. Trend charts on the job level view\n\nIn order to show a trend that renders a line chart on the job page (see Figure 3) you need to provide a so called\nfloating box (stored in the file floatingBox.jelly of your job action (see Section 3)).\nThe content of this file is quite simple and contains just a trend-chart tag:\n\nfloatingBox.jelly\n\n<c:trend-chart it=\"${from}\" title=\"${%SCM Files Count Trend}\" enableLinks=\"true\"/>\n\nOn the Java side the model for the chart needs to be provided in the corresponding sub class of JobAction (which is\nthe owner of the floating box). Since the computation of trend charts is quite expensive on the server side as well\n(several builds need to be read from disk and the interesting data points need to be computed) this process has been\nput into a separate background job. Once the computation is done the result is shown via an Ajax call. In order to\nhide these details for plugin authors you should simply derive your JobAction class from the corresponding\nAsyncTrendJobAction class, that already contains the boilerplate code. So your static plugin object model will actually\nbecome a little bit more complex:\n\nFigure 13. Jenkins chart model design\n\nBasically, you need to implement the method LinesChartModel createChartModel() to create the line\nchart. This method is quite simple to implement, since most of the hard work is provided by the library: you will\ninvoke with an iterator of your build actions, starting with the latest build. The iterator advances from build to build\nuntil no more results are available (or the maximum number of builds to consider has been reached). The most important\nthing to implement in your plugin is the way how data points are computed for a given BuildAction. Here is an example of\nsuch a SeriesBuilder implementation in the Forensics Plugin:\n\nFilesCountSeriesBuilder.java\n\npackage io.jenkins.plugins.forensics.miner;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport edu.hm.hafner.echarts.SeriesBuilder;\n\n/**\n * Builds one x-axis point for the series of a line chart showing the number of files in the repository.\n *\n * @author Ullrich Hafner\n */\npublic class FilesCountSeriesBuilder extends SeriesBuilder {\n    static final String TOTALS_KEY = \"total\";\n\n    @Override\n    protected Map computeSeries(final ForensicsBuildAction current) {\n        Map series = new HashMap<>();\n        series.put(TOTALS_KEY, current.getNumberOfFiles());\n        return series;\n    }\n}\n\nYou are not limited to a single line chart. You can show several lines in a single chart, you can show stacked values,\nor even the delta between some values. You can also have a look at the\ncharts of the warnings plugin\nto see some of these features in detail.\n\nFigure 14. Trend chart with several lines in the Warnings plugin\n\nFigure 15. Trend chart with stacked lines in the Warnings plugin","title":"Hands On: Beautify the user interface of Jenkins reporter plugins","tags":["ui","ux","plugins","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/uhafner.jpg"},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/authors/uhafner/","twitter":null}]}},{"node":{"date":"2020-03-30T00:00:00.000Z","id":"479ec095-b427-5e47-95a5-1bca6fbc97c5","slug":"/blog/2020/03/30/azure-key-vault-cred-provider/","strippedHtml":"Azure Key Vault is a product for securely managing keys, secrets and certificates.\n\nI’m happy to announce two new features in the Azure Key Vault plugin:\n\na credential provider to tightly link Jenkins and Azure Key Vault.\n\nhuge thanks to Jie Shen for contributing this\n\nintegration with the configuration-as-code plugin.\n\nThese changes were released in v1.8 but make sure to run the latest version of the plugin, there has been some fixes since then.\n\nSome advantages of using the credential provider rather than your own scripts:\n\nyour Jenkins jobs consume the credentials with no knowledge of Azure Key Vault, so they stay vendor-independent.\n\nthe provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Slack Notifications plugin.\n\ncredential usage is recorded in the central Jenkins credentials tracking log.\n\nJenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Azure Key Vault while consuming other credentials from your existing providers.\n\nNote: Currently only secret text credentials are supported via the credential provider, you can use the configuration-as-code integration to load the secret from Azure Key Vault into the System Credential Provider to work around this limitation.\n\nGetting started\n\nInstall the Azure Key Vault plugin\n\nThen you will need to configure the plugin.\n\nAzure authentication\n\nThere’s two types of authentication you can use 'Microsoft Azure Service Principal' or 'Managed Identities for Azure Resources'\n\nThe easiest one to set this up quickly with is the 'Microsoft Azure Service Principal',\n\n$ az ad sp create-for-rbac --name http://service-principal-name\nCreating a role assignment under the scope of \"/subscriptions/ff251390-d7c3-4d2f-8352-f9c6f0cc8f3b\"\n  Retrying role assignment creation: 1/36\n  Retrying role assignment creation: 2/36\n{\n  \"appId\": \"021b5050-9177-4268-a300-7880f2beede3\",\n  \"displayName\": \"service-principal-name\",\n  \"name\": \"http://service-principal-name\",\n  \"password\": \"d9d0d1ba-d16f-4e85-9b48-81ea45a46448\",\n  \"tenant\": \"7e593e3e-9a1e-4c3d-a26a-b5f71de28463\"\n}\n\nIf this doesn’t work then take a look at the Microsoft documentation for creating a service principal.\n\nNote: for production 'Managed Identities for Azure Resources' is more secure as there’s no password involved and you don’t need to worry about the service principal’s password or certificate expiring.\n\nVault setup\n\nYou need to create a vault and give your service principal access to it:\n\nRESOURCE_GROUP_NAME=my-resource-group\naz group create --location uksouth --name $RESOURCE_GROUP_NAME\n\nVAULT=my-vault # you will need a unique name for the vault\naz keyvault create --resource-group $RESOURCE_GROUP_NAME --name $VAULT\naz keyvault set-policy --resource-group $RESOURCE_GROUP_NAME --name $VAULT \\\n  --secret-permissions get list --spn http://service-principal-name\n\nJenkins credential\n\nThe next step is to configure the credential in Jenkins:\n\nclick 'Credentials'\n\nclick 'System' (it’ll appear below the Credentials link in the side bar)\n\nclick 'Global credentials (unrestricted)'\n\nclick 'Add Credentials'\n\nselect 'Microsoft Azure Service Principal'\n\nfill out the form from the credential created above, appId is 'Client ID', password is 'Client Secret'\n\nclick 'Verify Service Principal', you should see 'Successfully verified the Microsoft Azure Service Principal'.\n\nclick 'Save'\n\nJenkins Azure Key Vault plugin configuration\n\nYou now have a credential you can use to interact with Azure resources from Jenkins, now you need to configure the plugin:\n\ngo back to the Jenkins home page\n\nclick 'Manage Jenkins'\n\nclick 'Configure System'\n\nsearch for 'Azure Key Vault Plugin'\n\nenter your vault url and select your credential\n\nclick 'Save'\n\nStore a secret in Azure Key Vault\n\nFor the step after this you will need a secret, so let’s create one now:\n\n$ az keyvault secret set --vault-name $YOUR_VAULT --name secret-key --value my-super-secret\n\nCreate a pipeline\n\nInstall the Pipeline plugin if you don’t already have it.\n\nFrom the Jenkins home page, click 'New item', and then:\n\nenter a name, i.e. 'key-vault-test'\n\nclick on 'Pipeline'\n\nadd the following to the pipeline definition:\n\n// Declarative //\npipeline {\n  agent any\n  environment {\n    SECRET_KEY = credentials('secret-key')\n  }\n  stages {\n    stage('Foo') {\n      steps {\n        echo SECRET_KEY\n        echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n      }\n    }\n  }\n}\n\n// Scripted //\nwithCredentials([string(credentialsId: 'secret-key', variable: 'SECRET_KEY')]) {\n    echo SECRET_KEY\n    echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n}\n\nYou have now successfully retrieved a credential from Azure Key Vault using native Jenkins credentials integration.\n\nconfiguration-as-code integration\n\nThe Configuration as Code plugin has been designed as an opinionated way to configure Jenkins based on human-readable declarative configuration files. Writing such a file should be easy without being a Jenkins expert.\n\nFor many secrets the credential provider is enough,\nbut when integrating with other plugins you will likely need more than string credentials.\n\nYou can use the configuration-as-code plugin (aka JCasC) to allow integrating with other credential types.\n\nconfigure authentication\n\nAs the JCasC plugin runs during initial startup the Azure Key Vault credential provider needs to be configured before JCasC runs during startup.\n\nThe easiest way to do that is via environment variables set before Jenkins starts up:\n\nexport AZURE_KEYVAULT_URL=https://my.vault.azure.net\nexport AZURE_KEYVAULT_SP_CLIENT_ID=...\nexport AZURE_KEYVAULT_SP_CLIENT_SECRET=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\n\nSee the azure-keyvault documentation for other authentication options.\n\nYou will now be able to refer to Azure Key Vault secret IDs in your jenkins.yaml file:\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n        - usernamePassword:\n            description: \"GitHub\"\n            id: \"jenkins-github\"\n            password: \"${jenkins-github-apikey}\"\n            scope: GLOBAL\n            username: \"jenkinsadmin\"\n\nThanks for reading, send feedback on twitter using the tweet button in the top right, any issues or feature requests use GitHub issues.","title":"Introducing the Azure Key Vault Credentials Provider for Jenkins","tags":["jenkins","pipeline","security","azure","credentials","credential-provider","configuration-as-code"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja/","twitter":"Tjaynz"}]}},{"node":{"date":"2020-04-16T00:00:00.000Z","id":"c9bdc8f4-e8bc-5080-883f-d67fbd7f7847","slug":"/blog/2020/04/16/github-app-authentication/","strippedHtml":"This blogpost was updated to reflect the general availability of the feature after the release of GitHub Branch Source 2.7.1 on April 26th, 2020.\n\nI’m excited to announce support for authenticating as a GitHub app in Jenkins.\nThis has been a long awaited feature by many users.\nIt has been released in GitHub Branch Source 2.7.1 which is now available in the Jenkins update centers.\n\nAuthenticating as a GitHub app brings many benefits:\n\nLarger rate limits - The rate limit for a GitHub app scales with your organization size,\nwhereas a user based token has a limit of 5000 regardless of how many repositories you have.\n\nUser-independent authentication - Each GitHub app has its own user-independent authentication. No more need for 'bot' users or figuring out who should be the owner of 2FA or OAuth tokens.\n\nImproved security and tighter permissions - GitHub Apps offer much finer-grained permissions compared to a service user and its personal access tokens. This lets the Jenkins GitHub app require a much smaller set of privileges to run properly.\n\nAccess to GitHub Checks API - GitHub Apps can access the the GitHub Checks API to create check runs and check suites from Jenkins jobs and provide detailed feedback on commits as well as code annotation\n\nGetting started\n\nInstall the GitHub Branch Source plugin,\nmake sure the version is 2.7.1 or above.\n\nConfiguring the GitHub Organization Folder\n\nFollow the GitHub App Authentication setup guide.  These instructions are also linked from the plugin’s README on GitHub.\n\nOnce you’ve finished setting it up, Jenkins will validate your credential and you should see your new rate limit.\nHere’s an example on a large org:\n\nHow do I get an API token in my pipeline?\n\nIn addition to usage of GitHub App authentication for Multi-Branch Pipeline, you can also use app authentication directly in your Pipelines.\nYou can access the Bearer token for the GitHub API by just loading a 'Username/Password' credential as usual,\nthe plugin will handle authenticating with GitHub in the background.\n\nThis could be used to call additional GitHub API endpoints from your pipeline, possibly the\ndeployments api or you may wish to implement your own\nchecks api integration until Jenkins supports this out of the box.\n\nNote: the API token you get will only be valid for one hour, don’t get it at the start of the pipeline and assume it will be valid all the way through\n\nExample: Let’s submit a check run to Jenkins from our Pipeline:\n\npipeline {\n  agent any\n\n  stages{\n    stage('Check run') {\n      steps {\n        withCredentials([usernamePassword(credentialsId: 'githubapp-jenkins',\n                                          usernameVariable: 'GITHUB_APP',\n                                          passwordVariable: 'GITHUB_ACCESS_TOKEN')]) {\n            sh '''\n            curl -H \"Content-Type: application/json\" \\\n                 -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n                 -H \"authorization: Bearer ${GITHUB_ACCESS_TOKEN}\" \\\n                 -d '{ \"name\": \"check_run\", \\\n                       \"head_sha\": \"'${GIT_COMMIT}'\", \\\n                       \"status\": \"in_progress\", \\\n                       \"external_id\": \"42\", \\\n                       \"started_at\": \"2020-03-05T11:14:52Z\", \\\n                       \"output\": { \"title\": \"Check run from Jenkins!\", \\\n                                   \"summary\": \"This is a check run which has been generated from Jenkins as GitHub App\", \\\n                                   \"text\": \"...and that is awesome\"}}' https://api.github.com/repos/ / /check-runs\n            '''\n        }\n      }\n    }\n  }\n}\n\nWhat’s next\n\nGitHub Apps authentication in Jenkins is a huge improvement.  Many teams have already started using it and have helped improve it by giving pre-release feedback. There are more improvements on the way.\n\nThere’s a proposed Google Summer of Code project: GitHub Checks API for Jenkins Plugins.\nIt will look at integrating with the Checks API,\nwith a focus on reporting issues found using the warnings-ng plugin\ndirectly onto the GitHub pull requests, along with test results summary on GitHub.\nHopefully it will make the Pipeline example below much simpler for Jenkins users :)\nIf you want to get involved with this, join the GSoC Gitter channel\nand ask how you can help.","title":"GitHub App authentication support released","tags":["github","github-branch-source","pipeline","announcement"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja/","twitter":"Tjaynz"}]}},{"node":{"date":"2020-04-30T00:00:00.000Z","id":"006c2cd0-d626-5a78-bc2f-501e3180dee3","slug":"/blog/2020/04/30/jenkins-is-the-way/","strippedHtml":"One of the things we loved about going to developer conferences was meeting Jenkins users — newbies and old-timers alike — who are excited to talk about their projects and share tips on how to move forward using Jenkins.\nSince the coronavirus pandemic, we’re learning to rely more on new ways to gather, and it’s happening via Jenkins online meetups, GitHub collaborations, and Twitter threads, to name a few.\n\nIt’s a significant change.\nBut what hasn’t changed is the need to share stories about the things users have built, the solutions they’ve developed, and the excellent results they’re getting from some really innovative Jenkins implementations.\nThen we wondered, why isn’t anyone collecting these user stories and sharing them with the Jenkins community.\n\nIntroducing Jenkins is the Way\n\nSo we took the first step to record and archive all the great stuff everyone in our community is building with Jenkins.\nThis way, Jenkins users old and new can come to an archive and search for Jenkins solutions for inspiration.\nWe foresee a vast library of solutions from all around the world, solving a wide array of challenges in every industry imaginable.\nWe decided to call this archive \" Jenkins Is The Way\" and host it at https://JenkinsIsTheWay.io.\n\nTo aggregate all these stories, we built a simple online questionnaire so that Jenkins users can submit their own experience using this leading open source automation server.\nWith so many plugins to support building, deploying, and automating your projects, we expect to see a vast collection of stories.\n\nWe’ve already received a handful, including stories that illustrate how Jenkins Is The Way :\n\nto code your own release pipelines\n\nto cast magic of continuous delivery\n\nto understand and simplify your software lifecycle\n\nto accelerate automation in the cloud\n\nto facilitate day-to-day work\n\nAdd your story. Show your Jenkins pride. Get our T-shirt\n\nBe an inspiration to the Jenkins community by sharing your Jenkins story.\nJust go to this link and fill out the form.\nWe’ll ask you about your project’s goals, the technical challenges you overcame with Jenkins, and the solutions you created.\nIt should take no more than 20-30 minutes to complete.\n\nWe’ll clean it up for clarity and publish it on https://JenkinsIsTheWay.io.\n\nOnce it’s part of our archive, we’ll send you our new 2020 Jenkins Is the Way t-shirt.\n\nAnd since the more, the merrier, please share this blog post with peers and colleagues.\nWe want to hear everyone’s stories about the clever ways Jenkins is used to automate all that we need to do.\n\nThanks and Acknowledgement\n\nSpecial thanks to abConsulting for creating and managing the https://JenkinsIsTheWay.io site and for reviewing, editing, and publishing the submitted stories.\n\nThanks to the Jenkins Advocacy and Outreach SIG for their reviews and feedback.\n\nThanks also to CloudBees for sponsoring the \" Jenkins is the Way\" program.","title":"Call for User Stories - Jenkins is the Way","tags":["announcement","outreach-programs","advocacy-and-outreach","jenkins-is-the-way"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-05-06T00:00:00.000Z","id":"4e4838ee-bab2-53c0-b338-e2fa90ee89b2","slug":"/blog/2020/05/06/docker-agent-image-renaming/","strippedHtml":"We would like to announce the renaming of the official Docker images for Jenkins agents.\nIt does not have any immediate impact on Jenkins users, but they are expected to gradually upgrade their instances.\nThis article provides information about the new official names, upgrade procedure, and the support policy for the old images.\nWe will also talk about what’s next for the Docker packaging in Jenkins.\n\nNew image names\n\njenkins/agent is the new name of the old jenkins/slave image,\nstarting from 4.3-2\n\njenkins/inbound-agent is the new name of the jenkins/jnlp-slave image,\nstarting from 4.3-2\n\njenkins/ssh-agent is the new name of the old jenkins/ssh-slave image,\nstarting from 2.0.0\n\nSee the upgrade guidelines below.\n\nWhy?\n\nThe \"slave\" term is widely considered inappropriate in open source communities.\nIt has been officially deprecated in Jenkins 2.0 in 2016, but there are remaining usages in some Jenkins components.\nThe jira:JENKINS-42816[Slave to Agent renaming leftovers] EPIC tracks cleanup of such usages.\nOfficial Docker agent images were a glaring case, it was not easy to fix that with the previous versions of the image release Pipelines on DockerHub.\nIt is great to have the image naming issue finally fixed by this update.\n\nAnother notable change is replacing the JNLP agent term with inbound agent.\nHistorically \"JNLP\" has been used as a name of Remoting protocols.\nJNLP stands for Java Network Launch Protocol which is a part of the Java Web Start.\nJenkins supports Java Web Start mode for agents when running agents on Java 1.8,\nbut our networking protocols are based on TCP and have nothing to do with Java Network Launch Protocol.\nThis name has been very confusing since the beginning\nand became worse with the introduction of WebSocket support in Jenkins 2.217 (jep:222[]).\nDocker agent images support WebSockets, so we decided to change the image name to jenkins/inbound-agent so that it prevents further confusion.\nInbound agent term refers to agent protocols in which the agent initiates the connection to the Jenkins controller through different protocols.\n\nThanks a lot to Alex Earl and krufab for the repository restructuring groundwork which made the renaming possible!\nAlso thanks to Tim Jacomb, Marky Jackson, Mark Waite, Ivan Fernandez Calvo and other contributors for their reviews and testing.\n\nUpgrading and Compatibility Notes\n\nGood news, there are no breaking changes caused by this renaming.\nAll images have been already modified to use the new terminology internally.\nIf you use the recent versions of the previous images,\nyou can just replace the old names with the new ones.\nThese names may be referenced in your Dockerfiles, scripts, and Jenkins configurations.\n\nWe will keep updating the old images on DockerHub for at least 3 months (until August 05, 2020).\nThere will be no new configurations and platforms added to the old images,\nbut all existing ones will remain available (Debian for Java 1.8 and 11, Alpine for Java 1.8, etc.).\nAfter August 05, 2020, the old images will no longer receive updates, but previous versions will remain available to users on DockerHub.\n\nWhat’s next?\n\nWe will continue renaming of the Docker images in Jenkins components which reference old image names.\nThere is also a set of convenience Docker images which include build tools like Maven or Gradle which will be renamed later.\nThe jenkins/ssh-agent image might be renamed again in the future as well;\nsee the ongoing discussion in this developer mailing list thread.\n\nIf you are rather interested in new features in Jenkins Docker packaging,\nstay tuned for future announcements!\nThere are multiple ongoing initiatives which you can find on the public Jenkins roadmap\n(in the draft stage, see jep:14[]).\nSome stories:\n\nGeneral availability of Windows images.\n\nSupport for more platforms (AArch64, IBM s390x, PowerPC).\n\nSwitching to AdoptOpenJDK.\n\nIntroducing multi-platform Docker images.\n\nIf you are interested in any of these projects and would like to contribute,\nplease reach out to the Platform Special Interest Group which coordinates initiatives related to Jenkins in Docker.\n\nRegarding the agent terminology cleanup outside Docker images,\nwe will keep working on this project in the Advocacy & Outreach SIG.\nIf you see the usage of the obsolete \"slave\" term anywhere in the Jenkins organization (Web UI, documentation, etc.),\nplease feel free to submit a pull request or to report an issue in the jira:JENKINS-42816[Slave to Agent renaming leftovers] EPIC.\nThere are \"just\" 3000 occurences left in the jenkinsci GitHub organization, but we will get there.\nAny contributions will be appreciated!","title":"Docker images for agents: New names and What's next","tags":["announcement","docker","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-05-11T00:00:00.000Z","id":"a9a89ae0-1c8f-5566-81ab-6fdf73b725f7","slug":"/blog/2020/05/11/docker-windows-agents/","strippedHtml":"We would like to announce the availability of official Windows agent images for Docker.\nThese images allow provisioning Jenkins agents with Windows OS on Docker and Kubernetes.\n\nNew images\n\nAll official Docker images for agents now provide nanoserver-1809 and windowsservercore-1809 tags which include Windows images and, at the moment, Java 8 (these are like the latest tag).\nWe also provide tags with explicit Java selection, e.g. jdk8-windowsservercore-1809 or jdk11-nanoserver-1809.\nVersion tags are also available, e.g. jenkins/agent:4.3-4-jdk8-nanoserver-1809.\n\njenkins/agent is a basic agent which bundles the agent.jar for agent ⇐ ⇒ controller communication. This is most useful as a base image for other images.\nWindows images are available starting from version 4.3-4\n\njenkins/inbound-agent is an agent that is based on the jenkins/agent image above. It provides a wrapper script written in PowerShell to help specify the parameters to agent.jar.\nWindows images are available starting from version 4.3-4\n\njenkins/ssh-agent is an image which has OpenSSH installed and should be used with the SSH Build Agents Plugin.\nWindows images are available starting from version 2.1.0\n\nUsing Windows Docker images\n\nTo use the new images, you will need a proper Docker or Kubernetes environment which supports running Windows containers.\nFor Windows desktop users, the easiest way is to use Docker for Windows.\nWindows support in Kubernetes is documented here.\n\njenkins/agent\n\nThe jenkins/agent image is a simple agent with the JDK and the agent.jar (Jenkins Remoting library).\n\nThere are two main use cases for this image:\n\nAs a base image for other Docker images (e.g., FROM jenkins/agent:jdk8-nanoserver-1809 in your Dockerfile). The jenkins/inbound-agent is based on this image.\n\nThis image may also be used to launch an agent using the Launch method of Launch agent via execution of command on the master.  This allows the controller to launch the agent inside the docker container automatically.\n\nTo run the agent for the second use case, you would specify the following command on the Jenkins controller after setting Remote root directory to C:\\Users\\jenkins\\agent :\n\ndocker run -i --rm --name agent --init jenkins/agent:jdk8-windowsservercore-1809 java -jar C:/ProgramData/Jenkins/agent.jar\n\njenkins/inbound-agent\n\nThe inbound-agent Docker image tries to provide a higher level interaction with the agent.jar executable. It provides a PowerShell wrapper script around agent.jar and it is specified as the entrypoint so that you just need to pass in some command line arguments to run the agent. A pull request has been opened which documents these command line parameters and environment variables.\n\nExample:\n\ndocker run jenkins/inbound-agent:windowsservercore-1809 `\n   -Url http://jenkins-server:port `\n   -WorkDir=C:/Users/jenkins/Agent `\n   -Secret `\n   -Name\n\nExample using environment variables:\n\ndocker run -e \"JENKINS_URL=http://jenkins-server:port\" -e \"JENKINS_AGENT_NAME=AGENTNAME\" `\n   jenkins/inbound-agent:windowsservercore-1809 `\n   -WorkDir=C:/Users/jenkins/Agent `\n   -Secret `\n   -Name\n\nThe -Url, -Name and -Secret parameters are required, but can be specified as either command line parameters or environment variables.\n\njenkins/ssh-agent\n\nAs mentioned above the jenkins/ssh-agent docker image is based on SSH communication with the controller, rather than the remoting TCP or WebSocket protocols. The image sets up a jenkins user and the OpenSSH server so that the controller can connect to the agent via SSH. The image expects an SSH public key as a parameter and puts that key into the authorized_keys file for the jenkins user. The private key should be specified in the agent configuration on the controller to allow the controller to connect.\n\nExample:\n\ndocker run jenkins/ssh-agent:jdk8-windowsservercore-1809 \"\"\n\nYou can also pass the public key as an environment variable when using docker run.\n\nExample:\n\ndocker run -e \"JENKINS_AGENT_SSH_PUBKEY=\" jenkins/ssh-agent:jdk8-windowsservercore-1809\n\nYou will then be able to connect this agent using the SSH Build Agents Plugin as \"jenkins\" with the matching private key.\n\nWhat’s next?\n\nWe are considering providing versions based on Windows Server 2019 build 1909 so that Jenkins users can run these images on GKE clusters (see this issue).\n\nWe are also looking into providing multiarch manifests which would allow Windows images to be part of the latest tag.\n\nThere is also an open pull-request to create a Windows based Docker image for a Jenkins controller. There hasn’t been a lot of requests for this, but to make the offerings complete for Windows users, the pull request was created.\n\nFor plans unrelated to Windows, please see the Docker images for agents: New names and What’s next blogpost.","title":"Windows Docker Agent Images: General Availability","tags":["announcement","docker","platform-sig","windows"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/slide_o_mix.jpg"},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix/","twitter":"alexcearl"}]}},{"node":{"date":"2020-05-12T00:00:00.000Z","id":"96c5da12-e5e0-51af-86a5-d619e4901dae","slug":"/blog/2020/05/12/uiux-hackfest-announcement/","strippedHtml":"This event is over, thanks a lot to all contributors!\nPlease the event page for results.\n\nOn behalf of the Jenkins User Experience, Documentation and Advocacy and Outreach special interest groups,\nwe are happy to announce the online UI/UX hackfest on May 25-29!\nEveryone is welcome to participate, regardless of their Jenkins development experience.\n\nThe goal is to get together and work on improving Jenkins user experience,\nincluding but not limited to user interface and user documentation.\nWe also invite you to share experiences about Jenkins and to participate in UX testing.\nThe event follows the Jenkins is the Way theme and the\nmost active contributors will get special edition swag and prizes!\n\nEvent plan\n\nThis hackfest is NOT a hackathon.\nWe do not expect participants to dedicate all their time during the event timeframe, but hop-in/hop-out as their time allows.\nEverybody can spend as much time as they are willing to dedicate.\nSpending a few days or just a few hours is fine, any contributions matter regardless of their size.\nJenkins development experience is not required,\nwe have newcomer-friendly stories for those who want to start contributing to the project.\nWe will also have a 24/7 jenkinsci/hackfest Gitter chat for Q&A and coordination between contributors.\n\nThere will be 3 main tracks :\n\nUser Interface -\nImprove look&feel and accessibility for Jenkins users,\nwork on new read-only interface for instances managed with configuration as code,\ncreate and update Jenkins themes,\nand many other topics.\nThis track is coordinated by the UX SIG.\n\nUser Documentation -\nImprove and create new user documentation, tutorials and solution pages.\nAlso, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\nThis track is coordinated by the Documentation SIG.\n\nSpread the word -\nWrite user stories for Jenkins Is The Way site and the Jenkins blog,\npost about your Jenkins user experience and new features,\nrecord overview and HOWTO videos, etc.\nThis track is coordinated by the Advocacy and Outreach SIG.\n\nWe are working on publishing project ideas and issues for the listed tracks.\nThe current list can be found on the UI / UX hackfest event page,\nthis list will be finalized by the beginning of the hackfest.\nYou are welcome to propose your own projects within the User Experience theme.\n\nDuring the event, we will organize online meetups and ad-hoc training sessions in different timezones.\nAll these sessions will be recorded and shared on our YouTube channel.\nThere are no mandatory sessions you must attend, you are welcome to join ones remotely or watch the recordings.\nAfter the event we will invite participants to demo their projects at online meetings or recorded sessions.\n\nRegistration\n\nThis event is over, thanks a lot to all contributors!\n\nP.S: Note that the registration form has a question top 3 things we could change in Jenkins to improve your user experience.\nWe would appreciate your response there!\n\nContacts\n\nPlease use the following contacts to contact organizers:\n\nGitter chat\n\nMailing list\n\nResources\n\nEvent Page\n\nRegistration form.\n\nProject ideas (work-in-progress).\nThe full list will be published by the beginning of the event.\n\nFrequently Asked Questions\n\nContributing to Jenkins\n\nCode of Conduct\n\nSwag and Prizes\n\nThanks to our sponsors ( CloudBees, Inc. and Continuous Delivery Foundation),\nwe are happy to offer swag to active contributors!\n\n50 most-active contributors will get an exclusive \"Jenkins Is The Way\" T-shirt and stickers\n\nActive contributors will get Jenkins stickers and socks\n\nWe are working on special prizes for top contributors, to be announced later\n\nAcknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\nCloudBees, Inc. and\nContinuous Delivery Foundation (CDF).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our online meetup platform which we will be using for the event.\n\n.","title":"Join us for online UI/UX hackfest on May 25-29!","tags":["announcement","event","ui","ux","documentation","outreach-programs","advocacy-and-outreach","jenkins-is-the-way","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-05-25T00:00:00.000Z","id":"bbaf3958-fe7d-5fd6-a06c-16651d385923","slug":"/blog/2020/05/25/read-only-jenkins-announcement/","strippedHtml":"I’m excited to announce that the 'read-only' Jenkins feature is now available for preview.\nThis feature allows restricting configuration UIs and APIs while providing access to essential Jenkins system configuration, diagnostics, and self-monitoring tools through Web UI.\nSuch mode is critical for instances managed as code, e.g. with Jenkins Configuration-as-Code plugin.\nIt is delivered as a part of the jep:224[Readonly system configuration] effort.\n\nYou will want to use at least Jenkins 2.238 to have all the features mentioned in this post.\n\nRead-only Jenkins currently allows users to have access to:\n\njob configuration\n\nsystem configuration\n\nplugin manager\n\nsystem logs\n\ncloud configuration\n\nagent configuration\n\nagent logs\n\nFor more planned integrations see the jira:JENKINS-12548[] epic.\n\nRead-only Jenkins is split into three permissions:\n\nJob/ExtendedRead - Read-only access to job configurations\n\nexisted since 2009 but the UI didn’t do anything to indicate to the users\nthat they couldn’t edit the job configuration page.\nThis has now been adapted to the new read-only engine.\n\nAgent/ExtendedRead - Read-only access to agent configurations\n\nexisted since 2013 but it was undocumented and only allowed access to API and no UI\n\nUI support added in Jenkins 2.238\n\nOverall/SystemRead - Read-only access to Jenkins system configuration.\nIt is very useful for Jenkins instances managed as code, e.g. with help of the Jenkins Configuration as Code Plugin.\n\nIntroduced in Jenkins 2.222 as a part of jep:224[Readonly system configuration]\n\nYou can selectively grant the permission(s) as you wish.\n\nWhy do I want this?\n\nGiven the rise of the configuration-as-code plugin a lot of Jenkins instances are fully managed as code,\nwhich means that no changes are allowed through the UI.\n\nThe problem with this is you don’t know when new plugin versions are available and in order to see what other configuration options are available to a plugin you currently need the 'Administer' permission.\n\nRead-only access to system administration information allows users who are not administrators to more easily debug build issues.\nFor example, given a 'Jenkins' error message in a build the user can check:\n\nwhich plugins are installed\n\nthe version of the plugin\n\nThis can allow the user to solve their issue themselves and makes it easier for the user to report an issue with a plugin directly to the maintainers.\n\nWhat can I expect\n\nAll built in UI controls have been adapted to clearly distinguish between\nan editable control and a control you don’t have permission to edit:\n\nEditable:\n\nNon editable:\n\nNote: there are other controls such as in the credentials and pipeline plugins that have\nnot been updated yet.\n\nAction buttons, (Such as 'Save' and 'Apply') have been hidden in most cases.\n\nWork will continue on read-only configuration.  Some plugins need support added and certain controls\ncould have some improvements done to render better.\n\nHow can I use it?\n\nThese permissions are currently available in beta and for now disabled by default.\nYou can enable them by installing the Extended read permission plugin v3.2 or above.\n\nThen you will need to add the following permissions to a user / group depending on your use case:\n\nOverall/SystemRead\n\nJob/ExtendedRead\n\nAgent/ExtendedRead\n\nNote: You will need to set the Overall/Read and Job/Read permissions as well.  You might\nwant to consider creating a role containing the required permissions.\n\nHere is an example using the Configuration as Code plugin and the Folder-based Authorization Strategy plugin :\n\njenkins:\n  authorizationStrategy:\n    folderBased:\n      globalRoles:\n        - name: \"admin\"\n          permissions:\n            - id: \"Overall/Administer\"\n          sids:\n            - \"admin\"\n        - name: \"global read\"\n          permissions:\n            - id: \"Agent/ExtendedRead\"\n            - id: \"Overall/SystemRead\"\n            - id: \"Overall/Read\"\n            - id: \"Job/Read\"\n            - id: \"Job/ExtendedRead\"\n          sids:\n            - \"reader\"\n\nI can’t see a configuration that I think should be allowed\n\nMost of Jenkins itself has been updated to support read-only Jenkins, but not very many plugins.\nPlease create an enhancement issue on the plugins issue tracker.\nIf the plugin uses Jira to track issues, then you can add it to the jira:JENKINS-12548[] epic.\n\nHow do I update my plugin to support it\n\nSee the Read only view section of the developer documentation.\n\nWhat’s next\n\nIn this release we introduce a foundation feature which is already supported in all key Jenkins core controls and in some plugins.\nThere are many plugins which contribute to global configurations and diagnostics which still need to be adapted to support the new mode.\nWe will keep working on this feature and its adoption so that the next LTS baseline in September provides a full-fledged user experience for Jenkins admins.\n\nSystem read permission is a featured project in the UI/UX Hackfest\nhappening May 25-29 2020. If you want to get involved please check it out!","title":"Read-only Jenkins Configuration","tags":["system-read","extended-read","configuration-as-code","announcement"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja/","twitter":"Tjaynz"}]}},{"node":{"date":"2020-06-03T00:00:00.000Z","id":"d34ea0a7-91c1-5a7d-b78e-94d7cfb9e85b","slug":"/blog/2020/06/03/machine-learning-plugin-community-bonding/","strippedHtml":"Hello everyone !\n\nThis is one of the Jenkins project in GSoC 2020. We are working this new Machine Learning Plugin for this GSoC 2020.\nThis is my story about the community bonding of GSoC 2020. I am happy to share my journey with you.\n\nIntroducing Myself and my Fantastic 4 Mentors\n\nI am Loghi Perinpanayagam from University of Moratuwa. I was selected for GSoC 2020 for Machine Learning Plugin in Jenkins. I am glad to introduce my mentors to this project. I was assigned with four mentors who are really enthusiastic to help me on kicking off this summer of code.\n\nStudent\n\nLoghi Perinpanayagam\n\nMentors\n\nBruno P. Kinoshita\n\nIoannis Moutsatsos\n\nMarky Jackson\n\nShivay Lamba\n\nHow was my preparation last year ?\n\nI learned about this open source program in my second year. But atleast I tried last year on a different organization’s project that was related to Data Visualization Recommendation for Data Science. But the problem was I did not contribute as much as this year and was too late in the application process. As usual Machine learning related projects have a lot of competition compared to other projects. I prepared on learning Data visualization in Machine Learning and existing Models for the recommendation system. Finally I wrote a proposal with the SeqToSeq model without much knowledge on neural networks at that time. And I did not communicate much through the dedicated slack channel.  That may be one of the reasons for the failure. But the main reason was my latency for GSoC 2019.\n\nHow did I hurdle GSoC 2020 ?\n\nSince the time I realized how open source is needed and helpful for the community, I have been passionate about contributing to open source projects. At the instance, I finished my internship in Bangalore, India in 2019, I immediately focused on participating in GSoC. This is my last year (2020) as a student of my BSc Computer Science life, I wanted to get selected this year as a student.\n\nThere was a guidance seminar organized by our department, I got to know that Jenkins had opened their project ideas. That was an extremely impressive beginning of my GSoC 2020 journey. I walked through all the draft and accepted projects in the Jenkins.io page. As I am already interested in Machine Learning and I am familiar with Java, I picked the most impressive idea for me that does not have an initial repo. That means I wanted to use my knowledge to think and research a lot with this project. But I had to contribute and want to know about the infrastructure of Jenkins codebase. Because that makes the selection panel easy to pick up the student for the project.  Then I repeatedly searched to contribute to Jenkins. I found issues that were easy for me to work from the git plugin and git client plugin. I started to contribute some test issues on git plugin and git client plugin. After I got a clear knowledge on how a plugin works in Jenkins, I started working on the POC with the hint provided in the project idea page. Actually, that was fun to code.\n\nMentors have helped many students during the application process. I was able to do a working POC that had a minimum capability to do the task of the project. Finally mentors opened for proposal submission. I hurried to prepare a draft proposal. After I got reviews from mentors, I started to improve the proposal. At the end of the proposal submission, I was able to deliver a good proposal for this project. As I was curious about this plugin, I dug into more on how to integrate Jupyter notebook with this plugin. I published an medium article as a result of my research during the acceptance waiting period.\n\nResults released\n\nThe result was going to be announced on 4th May, I believed in my project proposal and POC and I got selected for this GSoC 2020. Whoa ! That was a goosebumping moment in my entire life. The feeling was like Something I achieved. As a result of my hard work, I deserved that.\nFor example, I spent 7 days continuously making the POC work without any collision between maven artifacts.\n\nCommunity Bonding\n\nAfter the release of results, I was preparing myself for the community bonding. There are lots of interactions happening between me and mentors than before.I had to update my project page and my profile in Jenkins.io. We had our first meeting with lots of excitement and love on 10th of May. Mentors and I introduced ourselves even though we know each other. We discussed the high level view of GSoC and I asked some questions that I had in my mind. As my plugin was a new repository, most of the discussion was related to the repository and its name. I had  to find a name for the new plugin. We had regular conversations about the blogpost and presentations at the end.\n\nIn the second meeting, We discussed the process for hosting a new plugin in Jenkins, tracking issues with JIRA, blog posts and high level road map for the project. And I suggested some interesting plugin names but they were not matching to the goal of the project, mentors told me to try other names which perfectly describe the project. I was advised to read all the research guidelines and plugin naming conventions. We discussed how code reviews will be done and source code management through the git. After this meeting, our meeting has shifted to the official Jenkins Zoom account.\n\nOur third meeting was quite serious about our project planning. I had been preparing my design document for the project with the help of mentors before the meeting day. Hence I got lots of reviews and useful examples for my future work on phase 1. At this point, we decided with the plugin name Machine Learning Plugin which was accepted by all mentors and I created the repo and requested a Jira ticket for the plugin hosting request. We were planning to remind the Jira ticket within the next 3 days. Mentors want me to make sure I updated the Jenkins GSoC page before the community period ends. Lots of discussion carried about the design document that I had been preparing last week before the meeting. Some important points from the meeting notes follows :\n\nDefine features in the design document\n\nDiagrams for the operations\n\nHow plugin works in distributed environment\n\nCode editor library\n\nRequirements for the first Plugin release\n\nBlog post draft document\n\nToDo works for me for next week\n\nTherefore, I had to work hard after this meeting, this made me involved in the project more. I have to put my huge effort to make this opportunity golden. Our team has the willingness to complete this project and will definitely help the Data Science community with this plugin.\nKudos to my team for the amazing work so far!!!\n\nThis was my entire journey until now. Hope you enjoyed it and hope you learned the mistakes I made last year and corrected in this summer.\nThanks for reading, and Stay tuned I will be uploading blog posts for those of you interested.\n\nResources and Links\n\nProject page\n\nDesign document","title":"Machine Learning Plugin project - community bonding blog post","tags":["machinelearning","datascience","plugins","communitybonding","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg","srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/9b030/loghijiaha.jpg 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/f38b5/loghijiaha.jpg 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/bcd2b/loghijiaha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/ceea6/loghijiaha.webp 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/45b82/loghijiaha.webp 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/933cd/loghijiaha.webp 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/6c13d/loghijiaha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":158}},"publicURL":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/loghijiaha.jpeg"},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"/blog/authors/loghijiaha/","twitter":"loghi5"}]}},{"node":{"date":"2020-06-08T00:00:00.000Z","id":"347b5134-2053-52fa-9696-e62715a7ff78","slug":"/blog/2020/06/08/hackfest-docs-results/","strippedHtml":"Documentation is not glamorous, but it is goodness.\n\n— Thomas Otter\n\nJenkins technical documentation is an important part of our project as it is key to using Jenkins well.\nGood documentation guides users and encourages good implementation choices.\nIt is a crucial part of the user experience.\n\nIn the recent Jenkins UI/UX hackfest, documentation was a specific track to improve the Jenkins user experience.\nWe received many improvements from experienced Jenkins contributors and newcomers alike.\nContributors from all around the world submitted pull requests for documentation on installing, managing, administering, and operating Jenkins.\n\nDocumentation migration from Wiki\n\nThe Jenkins Wiki pages have collected 15 years of experience and wisdom for Jenkins users.\nHowever, that experience and wisdom is intermixed with inaccurate, incomplete, and outdated information.\n\nThe Jenkins Wiki migration project identified the 50 most accessed pages on the Jenkins wiki and created GitHub issues to track the migration of those pages to www.jenkins.io.\nThis was our first large scale experiment using GitHub issues for documentation.\nThe results have been overwhelmingly positive.\nHackfest contributors added new sections to many documentation chapters, including:\n\nUsing Jenkins\n\nPipeline\n\nManaging Jenkins\n\nSystem Administration\n\nThe Hackfest closed 19 of the wiki migration issues.\nWork is in progress on an additional 25 wiki migration issues.\nWe’ve made great progress and look forward to even better results in the future.\nNew contributors used the \"good first issue\" label very effectively.\nWe started the Hackfest with most of the 25 \"good first issues\" unassigned and completed the Hackfest with 14 closed and 10 others in progress.\nWe’ll provide more \"good first issues\" as we use the Jenkins Wiki migration to welcome new documentation contributors.\n\nMigrating plugin documentation\n\nPlugin documentation is also in transition.\nSince November 2019, plugins have been moving their documentation into the GitHub repository that hosts the plugin source code.\nThis\"documentation as code\" approach allows plugin maintainers to include documentation improvements in the same pull requests that implement new capabilities.\nIt assures that documentation changes are reviewed by the same maintainers who review and approve new capabilities.\n\nHackfest participants submitted pull requests to migrate plugin documentation to GitHub.\n10 plugin pull requests are in progress from the Hackfest.\n5 plugin pull requests from the Hackfest have been already merged and are awaiting the release of the plugin.\n\nChuck Norris uses documentation as code\n\nIn the spirit of fun and adventure, Oleg Nenashev migrated the \"Chuck Norris plugin\" to GitHub documentation as code in a live Hackfest presentation May 26, 2020.\nLinks to the recording, the plugin migration guide, and the export tool are available from\"Migrating plugins to documentation-as-code\".\n\nDocumentation updates\n\nJenkins works with other technologies to solve automation challenges in many different environments.\nWe describe those environments in our\"Solution Pages\".\nAs part of the Hackfest, we’ve started a series of improvements to the solution pages.\n\nThe Docker solutions page now includes updated videos and a better page layout for easier reading and better navigation.\nOther solution pages will receive similar improvements in the future.\n\nSystem properties\n\nThe global configuration of Jenkins can be modified at startup by defining Java properties.\nSystem properties can change system defaults and can provide compatibility \"escape hatches\" when a new default configuration might be incompatible with existing installations.\n\nDaniel Beck has improved the navigation and user experience of the system properties page as part of the Hackfest.\nIt is now much easier to read and to reference, with embeddable links available with a mouse-over to the right of every property and labels that categorize and classify each property.\n\nPlugin site improvements\n\nDuring the Hackfest, Gavin Mogan has continued his efforts to improve the Jenkins Plugins Site so that users can easily access plugin changelogs and reported issues.\nOnce this pull request is merged, it will greatly improve the experience of those Jenkins users who want to update plugins and look for documentation about what has changed in them and what are the possible issues they might experience.\n\nExample of the incoming UI for the Jira plugin:\n\nWhat’s next?\n\nThere is still much to do in Jenkins documentation and we need your help to do it.\nThere are many ways to participate in the Jenkins project, including documentation.\nSee the contributing guidelines for detailed instructions.\nJoin the documentation chat for personalized help and encouragement.\n\nThe Jenkins project has been also accepted to Google Season of Docs this year.\nThis open-source mentorship program brings together open source and technical writers communities for the benefit of both.\nWe are looking for technical writers who are interested to contribute to the project in September-December 2020.\nIt is a great opportunity to study Documentation-as-code tools and to learn more about contributing to open-source projects.\nYou can find Jenkins project ideas and more information here.","title":"Jenkins User Experience Hackfest Documentation Results","tags":["ux","documentation","community","outreach-programs","jenkins-is-the-way"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}},"publicURL":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/tracymiranda.jpg"},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda/","twitter":"tracymiranda"}]}},{"node":{"date":"2020-06-17T00:00:00.000Z","id":"d04987cd-4df5-5758-b9a2-2f39da9d1862","slug":"/blog/2020/06/17/infra-and-aws-donation/","strippedHtml":"The Jenkins project relies heavily on its infrastructure.\nWe use websites like www.jenkins.io and plugins.jenkins.io, ticketing systems like issues.jenkins.io, CI/CD infrastructure like ci.jenkins.io, and many other services.\nJust to provide some context about the Jenkins infrastructure scale, here are some stats from April 2020:\n\nOver 600 000 people visited www.jenkins.io\n\nOver 250 000 Jenkins servers regularly checked the\nJenkins package server and the\nJenkins update server\n\nOver 43 000 continuous integration jobs ran on ci.jenkins.io\n\nOver 950 plugins ran their continuous integration pipelines on ci.jenkins.io\n\nCountry by country visitors to jenkins.io\n\nThe Jenkins project, as an open source project, is built and maintained by its awesome community.\nLike in any organization, there are specific people who make sure that those services are always up and running.\nEveryone is welcome to participate.\nInfrastructure is no exception, we are always looking for new contributors to the infrastructure!\n\nWhile we can’t share publicly everything like secrets and certificates,\nwe still try to be as transparent as possible so that everybody can understand and improve our infrastructure without having privileged access.\nWhat better way than using Git to manage infrastructure work?\n\nWho said GitOps?\n\nSince the creation of the Jenkins-infra organization on GitHub in March 2008, more than 650 people have contributed to over 80 git repositories.\nThose contributions make the Jenkins community what it is today.\nIf you can’t find something there, it probably means that some help is welcomed.\n\nMore recently, with help from Gavin Mogan, Tim Jacomb, and Alex Earl, big achievements have been possible on many fronts like automating Jenkins releases, refreshing plugins.jenkins.io, adding new agents to ci.jenkins.io, and maintaining our Kubernetes cluster.\nWe thank them for their help and for the infrastructure progress they have enabled.\n\nInfrastructure at Scale\n\nRunning infrastructure at the scale the Jenkins project does is expensive and sometimes quite challenging.\nWe are fortunate enough to be supported by many leading companies that provide us their expertise, their products, and their support.\n\nRecently, Amazon Web Services donated $60 000 to run Jenkins infrastructure on the AWS cloud.\nWe’re so grateful for their donation and for the flexibility it provides.\nWe’re running Linux agents with AMD64 and ARM64 architectures on AWS.\nWe’re using AWS cloud for our Windows agents.\nThe generous infrastructure donation from Amazon Web Services has increased our continuous integration capacity and broadened our platform coverage.\n\nOur Sponsors\n\nMajor sponsors of the Jenkins infrastructure include\nCloudBees,\nOregon State University Open Source Lab,\nContinuous Delivery Foundation,\nRed Hat,\nAmazon Web Services, and\nGitHub.\n\nAdditional sponsors of Jenkins infrastructure services and software include\nAtlassian,\nDatadog,\nFastly,\nIBM.\nJFrog,\nPagerduty,\nRackspace,\nSentry,\nServerion,\nSpinUp,\nTsinghua University, and\nXMission.\n\nEach of these organizations support the Jenkins project in their own way.\nWe thank them for their contributions, their support and for their willingness to help the Jenkins community.\n\nhttps://www.jenkins.io/projects/infrastructure/","title":"Jenkins Infrastructure: Stats, Updates, and AWS sponsorship","tags":["aws","community","infrastructure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/olblak.png"},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak/","twitter":"0lblak"}]}},{"node":{"date":"2020-06-18T00:00:00.000Z","id":"e3d886d7-5e78-54d1-8574-c544fa957395","slug":"/blog/2020/06/18/terminology-update/","strippedHtml":"In 2016, the Jenkins community decided to start removing offensive terminology within the project.\nThe \"slave\" term was deprecated in Jenkins 2.0 and replaced by the \"agent\" term.\nOther terminology was slated for review after the cleanup of the \"slave\" term which was considered as most problematic one.\nIn 2017, the project began tracking areas for correction.\nWork has been done on renaming the SSH build agent plugin as well as gradual removal of offensive naming in services and repositories.\nThis year, a group of core contributors continued addressing this critical work.\n\nThe Advocacy & Outreach SIG met to discuss and prioritize the continued work. The governance board has also met and there will be more information coming regarding removal of offensive terminology.\nLast week we took another step towards removing offensive terminology within the project by updating previous blog posts and removing offensive terminology in old blogs, cleaning up some references in Jenkins built-in documetation and localization, etc.\nThe meeting minutes are available here and a recording of the meeting here\nThere is more work to do. The core team is working to address terms such as \"Master\", \"whitelist\" and \"blacklist\" as well addressing git branching terminology.\n\nWe could use your help\nWe continue to do this much needed work and would like to remind everyone that the Jenkins project is governed by the Code of Conduct.\n\nSincerely,\nMarky Jackson","title":"On Jenkins Terminology Updates","tags":["community","opensource","governance","documentation"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png","srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/914ee/markyjackson-taulia.png 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/1c9ce/markyjackson-taulia.png 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/acb7c/markyjackson-taulia.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/ef6ff/markyjackson-taulia.webp 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/8257c/markyjackson-taulia.webp 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/6766a/markyjackson-taulia.webp 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/22bfc/markyjackson-taulia.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/markyjackson-taulia.png"},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"/blog/authors/markyjackson-taulia/","twitter":"markyjackson5"}]}},{"node":{"date":"2020-06-26T00:00:00.000Z","id":"1590b5a3-15e6-5bc9-a980-1e26f0ff3deb","slug":"/blog/2020/06/26/ui-ux-hackfest-ui-track/","strippedHtml":"In this article, I would like to share some highlights from the User Interface track of the\nJenkins UI/UX Hackfest we held on May 25..29.\nThis blog post has been slightly delayed by the infrastructure issues we had in the project,\nbut, as for improving the Jenkins UI, it is better late than never.\nKey highlights from the event:\n\nWe delivered a preview of Jenkins read-only configuration.\nDuring the hackfest we discovered and fixed many compatibility issues.\n\nWe created a new Dark Theme for Jenkins.\nWe also improved theming support in the core, and fixed compatibility in many plugins.\n\nWe contributed to the Jenkins UI accessibility, including UX testing and fixing the reported issues.\njira:JENKINS-62437[Configuration UI: Tables to divs migration] testing was the dominant story there.\n\nWe worked on a New Script Security approvals management UI\n\nWe had 54 contributors at the hackfest.\n22 of them have contributed to the user interface track as committers, testers and reviewers:\nTim Jacomb,\nUllrich Hafner,\nRaihaan Shouhell,\nSumit Sarin,\nDaniel Beck,\nRomén Rodríguez-Gil,\nwadeck Follonier,\nRunxia Ye,\nFélix Queiruga,\nAytunc Beken,\nPeter Jonsson,\nAntonio Muniz,\nKseniia Nenasheva,\nSladyn Nuner,\nAbhyudaya Sharma,\nOleg Nenashev,\nNimish Bongale,\nEsther Álvarez Feijoo,\nDenys Digtiar,\nSlavo,\nLiam Newman, and\nGavin Mogan.\nThanks to all contributors!\n\nSee the blog post below to know more about these and other user interface improvements.\n\nRead-only Jenkins Configuration\n\nQuick access:\ndemo,\nfeature preview announcement,\npresentation materials\n\nA read-only view of Jenkins configurations, jobs and agents is important to Jenkins Configuration-as-Code users.\nIt would allow them to access configuration and diagnostics information about their Jenkins instances while having no opportunity to occasionally change it.\nThis story is a part of the Jenkins roadmap,\nand it was featured as an area for contribution during the UI/UX hackfest.\n\nOn May 25th we have released a preview for Read-only Jenkins Configuration.\nRead the announcement by Tim Jacomb in this blogpost.\nDuring the hackfest we kept testing the change and fixing compatibility in the Jenkins plugins,\nincluding the Cloud Stats Plugin, Role Strategy Plugin, Simple Disk Usage Plugin and others.\n\nWe would appreciate feedback and testing from the Jenkins users!\nSee the blogpost for the guidelines.\n\nDark Theme\n\nQuick access:\ndemo,\nproject repository\n\nDark user interface themes are very popular among developers: in IDE, communication tools, etc.\nAnd there is an interest to have one for Jenkins.\nThere were a few of implementations before the hackfest, most notably camalot/jenkins-dark-stylish and a dark version of the Neo2 Theme.\nThese themes were difficult to maintain, and finally they were either removed or abandoned.\nWhat if Jenkins had an official theme?\n\nDuring the event a group of contributors focused on creating a new Dark Theme for Jenkins.\nThis effort included:\n\nPatches to the Jenkins core which simplified development and maintenance of UI themes.\nSupport for CSS variables was added, as well as PostCSS processing which helps to simplify browser compatibility.\n\nDark Theme itself.\n\nUI Testing and compatibility fixes in the core and multiple Jenkins plugins.\n\nDark theme demo with support for the development mode.\n\nYou can try out this theme starting from Jenkins 2.239.\nIt is available as a plugin from the Jenkins Update Center.\nAn example screenshot of the main page:\n\nIf you discover any Dark theme compatibility issues,\nplease report them here.\n\nJenkins Configuration UI Accessibility\n\nQuick access:\ndemo,\nproject page\n\nJenkins Web UI accessibility was one of the suggested topics at the event.\nWe would like to make Jenkins usable by as many people as possible.\nIt includes multiple groups of users: people with disabilities, ones using mobile devices, or those with slow network connections.\nIn general, all Jenkins users would benefit from better navigation and layouts.\nSome of the accessibility improvements we implemented during the event:\n\nAdded aria-labels to username & password input fields\n\nIndicate the language of the page in the footer (not merged yet)\n\nRemove page generation timestamp from the footer\n\nAt the UI/UX hackfest the major focus was on migrating configuration pages from tables to divs\n(jira:JENKINS-62437[]).\nIt will make them more user-friendly on narrow and especially mobile screens.\nThe change will also help users to navigate complex forms with multiple levels of nesting.\nOur progress:\n\nUser Experience testing.\nThanks to the contributors, we discovered several compatibility issues in plugins.\n\nBug fixes in several plugins\n\nA new Dockerized demo which allows to evaluate the change with a set of pre-configured plugins.\n\nHere is an example of a job configuration page using the new layout:\n\nWe will keep working on this change in the coming weeks,\nand we invite Jenkins users and Contributors to help us with testing the change!\nTesting guidelines are available in the jira:JENKINS-62437[] ticket.\n\nNew Script Security approvals management UI\n\nQuick access:\ndemo,\npull request\n\nDuring the hackfest Wadeck Follonier redesigned the script approval interface in the Script Security Plugin.\nThe new UI allows viewing the list of approved scripts, shows the last access timestamp, and allows managing the approvals individually.\nBefore, it was not possible to do it from the Web interface.\nOnce the pull request is released,\nthe feature will become available to Jenkins users.\n\nOther UI improvements\n\nIn addition to the major improvements listed above,\nthere were also many smaller patches in the Jenkins core and various plugins.\nYou can find a full list of contributions to the user interface here,\nsome important improvements:\n\nImproved navigation in the Credentials plugin.\n\nSupport for wide screens in the Autograding plugin.\n\nUI Improvements in the Folder-based Authorization Strategy plugin.\n\nImproved Fingerprint listing in the Jenkins core\n\nContributing\n\nWe invite Jenkins users and contributors to join the effort and to improve the user interface together.\nThe Jenkins project gradually adopts modern frontend stacks (JavaScript, React, Gatsby, Vue.js, etc.) and design methodologies.\nFor example, see the presentation about beautifying the UI of Jenkins reporter plugins by Ullrich Hafner.\nIt is a great opportunity for frontend developers to join the project, share their experiences, experiment with new technologies, and improve the Jenkins user interface and user experience.\nJoin us!\n\nSee this page for more information about contributing to the Jenkins codebase.\nIf you want to know more, join us in the Jenkins User Experience SIG channels.\n\nReferences\n\nYou can find more information about the Hackfest here:\n\nJenkins UI/UX Hackfest Page\n\nUI/UX Hackfest Closing Demos\n\nAll presentations and demos\n\nFull list of contributions to the user interface","title":"UI/UX Hackfest: Jenkins User Interface track highlights","tags":["community","event","ui","outreach-programs","jenkins-is-the-way"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-06-27T00:00:00.000Z","id":"a288c37b-abcd-5bdc-8b5b-012344f2934c","slug":"/blog/2020/06/27/external-fingerprint-storage/","strippedHtml":"Externalizing fingerprint storage for Jenkins is a  Google Summer of Code 2020 project.\nWe are working on building a pluggable storage engine for fingerprints (see jep:226[]).\n\nFile fingerprinting is a way to track which version of a file is being used by a job/build, making dependency tracking easy. The fingerprint engine of Jenkins can track usages of artifacts, credentials, files, etc. within the system. Currently, it does this by maintaining a local XML-based database which leads to dependence on the physical disk of the Jenkins controller.\n\nAllowing fingerprint storage to be moved to external storages decreases the dependence of Jenkins instances on the physical disk space and also allows for tracking the flow of fingerprints across instances of Jenkins connected to the same external storage.\n\nAdvantages of using external storage drivers:\n\nRemove dependence on Jenkins controller disk storage\n\nCan configure pay-as-you-use cloud storages\n\nEasy Backup Management\n\nBetter Reliability and Availability\n\nFingerprints can be tracked across Jenkins instances\n\nAlong with this API, we are also working on a reference implementation in the form of a plugin, powered by Redis.\n\nAs phase 1 of this project comes to an end, this blog post serves as a summary of the progress we made to the entire Jenkins community.\n\nCurrent State\n\nThe new API introduced in Jenkins core is under review. Once merged, it will offer developers to extend it to build external fingerprint storage plugins.\n\nThe Redis Fingerprint Storage Plugin is alpha release ready. We would immensely appreciate any feedback.\n\nExternal Fingerprint Storage Demo\n\nIntroducing the new API for plugin developers\n\nWith PR-4731, we introduce a new fingerprint storage API, allowing configuring custom storage engines.\nWe exposed the following methods in the new FingerprintStorage class:\n\nvoid save()\n\nSaves the given Fingerprint in the storage.\n\nFingerprint load(String id)\n\nReturns the Fingerprint with the given unique ID. The unique ID for a fingerprint is defined by Fingerprint#getHashString().\n\nvoid delete(String id)\n\nDeletes the Fingerprint with the given unique ID.\n\nboolean isReady()\n\nReturns true if there is some data in the fingerprint database corresponding to the particular Jenkins instance.\n\nIntroducing Redis Fingerprint Storage Plugin\n\nRedis Fingerprint Storage Plugin uses the new External Fingerprint Storage API to store the fingerprints in a Redis instance.\n\nInstallation:\n\nThe alpha release (version 0.1-alpha-1) for the plugin was drafted, and can be installed using the experimental update center.\n\nFollow along the following steps after running Jenkins to download and install the plugin:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nGo to Advanced tab\n\nConfigure the Update Site URL as: https://updates.jenkins.io/experimental/update-center.json\n\nClick on Submit, and then press the Check Now button.\n\nGo to Available tab.\n\nSearch for Redis Fingerprint Storage Plugin and check the box along it.\n\nClick on Install without restart\n\nThe plugin should now be installed on your system.\n\nUsage\n\nOnce the plugin has been installed, you can configure the Redis server details by following the steps below:\n\nSelect Manage Jenkins\n\nSelect Configure System\n\nScroll to the section Redis Fingerprint Storage Configuration and fill in the required details:\n\nHost - Enter hostname where Redis is running\n\nPort - Specify the port on which Redis is running\n\nSSL - Click if SSL is enabled\n\nDatabase - Redis supports integer indexed databases, which can be specified here.\n\nConnection Timeout - Set the connection timeout duration in milliseconds.\n\nSocked Timeout - Set the socket timeout duration in milliseconds.\n\nCredentials - Configure authentication using username and password to the Redis instance.\n\nEnabled - Check this to enable the plugin (Note: This is likely to be removed very soon, and will be enabled by default.)\n\nUse the Test Redis Connection to verify that the details are correct and Jenkins is able to connect to the Redis instance.\n\nPress the Save button.\n\nNow, all the fingerprints produced by this Jenkins instance should be saved in the configured Redis server!\n\nFuture Work\n\nSome of the topics we aim to tackle in the next phases include extending the API, fingerprint cleanup, migrations (internal→external, external→internal, external→external), tracing, ORM, implementing the saveable listener, etc.\n\nAcknowledgements\n\nThe Redis Fingerprint Storage plugin is built and maintained by the Google Summer of Code (GSoC) Team for\nExternal Fingerprint Storage for Jenkins.\n\nSpecial thanks to Oleg Nenashev, Andrey Falko, Mike Cirioli, Jesse Glick, and the entire Jenkins community for all the contribution to this project.\n\nReaching Out\n\nFeel free to reach out to us for any questions, feedback, etc. on the project’s Gitter Channel or the Jenkins Developer Mailing list\n\nWe use Jenkins Jira to track issues.\nFeel free to file issues under redis-fingerprint-storage-plugin component.\n\nOther Links\n\nPhase 1 demo\n\nPresentation slides\n\nRedis Fingerprint Storage Plugin\n\nIssue Tracker for Phase 1\n\njep:226[]\n\nGitter Channel\n\nProject Page","title":"External Fingerprint Storage Phase-1 Updates","tags":["plugins","fingerprint","cloud-native","external-storage","developer","redis","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg","srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/77b35/stellargo.jpg 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/d4a57/stellargo.jpg 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/ef6ff/stellargo.webp 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/8257c/stellargo.webp 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/6766a/stellargo.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/stellargo.jpeg"},"blog":"https://medium.com/@sumitsarinofficial","github":"stellargo","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 student. Sumit is an engineering student (senior) at Netaji Subhas Institute of Technology, University of Delhi. He started his journey of contributing to Jenkins in December 2019. His tiny contribution revolved around the Jenkins Fingerprint engine. He is currently working on building <a href=\"https://www.jenkins.io/projects/gsoc/2020/projects/external-fingerprint-storage\">External Fingerprint Storage for Jenkins</a>.</p>\n</div>","id":"stellargo","irc":null,"linkedin":"sumit-sarin","name":"Sumit Sarin","slug":"/blog/authors/stellargo/","twitter":null}]}},{"node":{"date":"2020-06-30T00:00:00.000Z","id":"9a5f343b-e83f-526e-aab4-05c8c88ea996","slug":"/blog/2020/06/30/machine-learning-plugin-coding-phase1/","strippedHtml":"Welcome back !\n\nThis blog post is briefing my coding phase 1 in Jenkins Machine Learning Plugin for this GSoC 2020.\n\nAfter a fresh introduction of community bonding, On June 1st, coding of GSoC had started officially with phase 1. At this point, every GSoC student should be expected to have a rigid plan with their entire project. With the guidance of mentors I was able to complete a design document and timeline which can be slightly adjustable during the coding. The coding phase was more about coding and discussion.\n\nQuick review\n\nPull Requests\n21\n\nJira Issues\n11\n\nMajor Tasks\n3\n\nCompleted\n3\n\nIn progress\n0\n\nWeek 1\n\nI have to ensure that I have a solid architecture for implementing the core of this plugin such that perhaps I or future community will be able to develop R and Julia kernels for this plugin. Factory method design patterns are suitable when users need different types of products ( Python, R and Julia) without knowing much about the internal infrastructure ( Manager of these interpreters ).\n\nAll the base classes were implemented this week.\n\nDesign the Kernel connectors\n\nInitiate the interpreter\n\nClose the connection\n\nAdd simple tests\n\nUpdate pom.xml\n\nMore than these changes, repo was updated with pull request template and licence header. Readme was extended a little at the end of the week.\n\nIssues and Challenges\n\nGit rebase and squash\n\nTests invokes ipython client in the server failed during the CI build\n\nWeek 2\n\nWith the help of a design document, I had a plan to do the configurations globally and using the Abstract Folder property I could save the configuration and retrieve for the job configuartion. I used to reference some other well developed plugin for the structure of code. That helped me a lot while I was coding. Our first official contributor has popped out his pull request.\n\nForm validations and helper html will be a great help in the user point of view as well as developers. A minor bug was fixed with the guidance of mentors by writing tests with ‘Jenkins WebClient`. Until the end of the week, builder class of the plugin has been implemented with lots of research and discussion. Finally,  Test connection was added to the global configuration page to start the connection and test it. A single issue that blocked me using py4j authentication about zeppelin-python was reported in Jira.\n\nServer Configuration\n\nIssues and challenges\n\nBackend depends on Apache zeppelin-python API to connect IPython\n\nFind relevant extension points to extend the plugin\n\nWeek 3\n\nEarlier in this week, we were trying to merge our IPython builder PR without any memory leaks or bugs that will cause the system to be devastating while running this plugin. Later, this whole week I was implementing a file parser that could copy the necessary files and had the ability to accomplish the file conversion.\n\nSupported file types\n\nPython (.py)\n\nJSON (Zeppelin notebooks format)\n\nIPython builder was able to run Jupyter Notebooks and Zeppelin formatted JSON files at the end of the 3rd week. Minor issues were fixed in the code. We used ANSI color plugin to fix the abnormal view of error messages produced by the ipython kernel.\n\nCopying and converting Jupyter Notebook\n\nIssues and Challenges\n\nPython error messages could not be displayed in rich format\nIf a job is running at user level, but if the python code access file/file path which is not authorized to the user, it returns a permission denied message.\nWhile running on agent, notebook has to be written/copied to agent workspace\nArtifacts should be maintained/reachable from controller after build.\n\nWeek 4\n\nAs all the major tasks has done, the demo preparation and plan for a experimental release was carried during the last week. There were lots of research on how to connect to a existing kernel in remote. Demo and presentation were prepared along the week.\n\nIssues and Challenges\n\nReleasing the first version was bit late\n\nKnowledge transfer\n\nHow to debug the code through IntelliJ\n\nEdit configuration → Add new Configuration → Maven\n\nCommand line → type hpi:run\n\nClick the debug icon on the toolbar or go to Run menu then Debug\n\nHow to setup to test the plugin\n\nSetup JDK 8 and Maven 3.5.*\n\nCreate a directory $ mkdir machine-learning-plugin\n\nCreate a virtual environment $ virtualenv venv\n\nActivate your virtual environment $ source venv/bin/activate\n\nRun $ which python to ensure your python path\n\n$ git clone https://github.com/jenkinsci/machine-learning-plugin.git\n\nRun $ mvn clean install from the machine-learning-plugin directory\n\nRun $ mvn hpi:run to start Jenkins with the plugin\n\nSet up the builder with localhost and other parameters\n\nCreate a job\n\nWrite python code like print(“plugin works”)\n\nBuild the job\n\nIssues and bugs\n\nJENKINS-62528 Issues on Jenkins build in the plugin repository\n\nJENKINS-62621 Global configuration for IPython servers\n\nJENKINS-62649 Implementation of IPython Builder\n\nJENKINS-62711 File parser to copy source files to workspace\n\nJENKINS-62733 Python errors are not displayed properly in console log\n\nJENKINS-62735 Send/Receive necessary files from controller/agent to agent/controller\n\nJENKINS-62593 Improve the documentation\n\nJENKINS-62742 Increase Test coverage\n\nResources and Links\n\nGithub\n\nProject page\n\nDesign document","title":"Machine Learning Plugin project - coding phase 1 blog post","tags":["machinelearning","datascience","plugins","communitybonding","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg","srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/9b030/loghijiaha.jpg 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/f38b5/loghijiaha.jpg 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/bcd2b/loghijiaha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/ceea6/loghijiaha.webp 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/45b82/loghijiaha.webp 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/933cd/loghijiaha.webp 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/6c13d/loghijiaha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":158}},"publicURL":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/loghijiaha.jpeg"},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"/blog/authors/loghijiaha/","twitter":"loghi5"}]}},{"node":{"date":"2020-07-27T00:00:00.000Z","id":"28af9b14-9cf1-5cb2-94df-b2869b9e73fc","slug":"/blog/2020/07/27/custom-distribution-service/","strippedHtml":"Hello,\nAfter an eventful community bonding period we finally entered into the coding phase. This blog post will summarize the work done till the midterm of the coding phases i.e. week 6. If some of the topics here require a more detailed explanation, I will write a separate blog post. These blogs posts will not have a very defined format but would cover all of the user stories or features implemented.\n\nProject Summary\n\nThe main idea behind the project is to build a customizable jenkins distribution service that could be used to build tailor-made jenkins distributions. The service would provide users with a simple interface to select the configurations they want to build the instance with eg: plugins, authorization matrices etc. Furthermore it would include a section for sharing community created distros so that users can find and download already built jenkins war/configuration files to use out of the box.\n\nQuick review\n\nPull Requests Opened\n38\n\nGithub Issues completed\n36\n\nDetails\n\nI have written separate blog posts for every week in GSoC and the intricate details for each of them can be found at their respective blog pages. I am including a summary for every phase supported with the respective links.\n\nCommunity Bonding\n\nThis year GSoC had a longer community bonding than any of the previous editions due to the Coronavirus pandemic and therefore this gave me a lot of time to explore, so I spent it by building a prototype for my project. I realised some of the blockages I might face early on, and therefore it gave me more clarity in terms of how I can proceed. I also spent this time preparing a design document which you can find here.\n\nCommunity Bonding Blog\n\nWeek 1\n\nIn week one, I spent time getting used to the tech stack I would be using, I was pretty familiar with Spring Boot but React was something I was going to be using for the first time, so I spent time studying more about it. I also got the project page ready, the issues I was going to tackle and the milestones that I had to achieve before the evaluation. I also spent a bit of time setting up the home page and a bit of front-end components.\n\nWeek 1 Blog\n\nWeek 2\n\nOnce we were done with the initial setup, it was time to work on the core of the project.\nIn the second week, I worked on generating the package configuration and the plugin list dummy display page setup.\nI also ran into issues with the Jenkinsfile so the majority of time was spent fixing it.\nFinally I managed to get around those problems.\nYou can read more about it in the Week 2 Blog post.\n\nWeek 2 Blog\n\nWeek 3\n\nThe last week was spent cleaning up most of the code and getting the remaining milestones in. This was probably the hardest part of phase 1 because it involved connecting the front and back end of the project.You can read more about it here.\n\nWeek 3\n\nMidterm Update\n\nThe second phase has been going on for the past 3 weeks and we have already accomplished a majority of the deliverables including community configurations, war downloading and filtering of plugins. More details about the mid term report can be found here.\n\nMidterm Update\n\nGetting the Code\n\nThe Custom Distribution Service was created from scratch during GSoC and can be found here on Github.\n\nOther links\n\nGSoC Proposal\nDesign Document\nDaily Notes\nDemo\n\nFeedback channel\n\nGitter Channel Link.","title":"Custom Distribution Service : Midterm Summary","tags":["service","distribution","cloud-native","gsoc","gsoc2020","packaging","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/authors/sladyn98/","twitter":"SladynN"}]}},{"node":{"date":"2017-04-05T00:00:00.000Z","id":"a861a6c5-914d-5da6-9d4b-4b250827f304","slug":"/blog/2017/04/05/say-hello-blueocean-1-0/","strippedHtml":"Back in May 2016 we announced our intent\nto rethink the Jenkins User experience with the Blue Ocean project and today\nthe Jenkins project are pleased to announce the general\navailability of Blue Ocean 1.0.\n\nBlue Ocean is an entirely new, modern and fun way for developers to use Jenkins\nthat has been built from the ground up to help teams of any size approach\nContinuous Delivery. Easily installed as a plugin for Jenkins and integrated\nwith Jenkins Pipeline, it is available from today for production use.\n\nSince the start of the beta at Jenkins World 2016 in September there are now\nover 7400+ installations making use of Blue Ocean. This wouldn’t be possible\nwithout the support of the entire Jenkins developer and\nuser community - so thank you for your support!\n\nBlue Ocean is available today from the update center and also as a\nDocker image - why not give it a try?\n\nVisual Pipeline Editing - Team members of any skill level can create continuous\ndelivery pipelines from start to finish, with just several clicks, using the\nintuitive, visual pipeline editor. Any pipeline created with the visual editor\ncan also be edited in your favorite text editor\nbringing all the benefits of Pipeline as Code.\n\nPipeline Visualization - Developers can visually represent pipelines in a way\nthat anyone on the team can understand - even your boss’s boss - improving\nclarity into the continuous delivery process for the whole organization.\nThe visualization helps you focus on what the pipeline does, not how it does it.\n\nPinpoint Troubleshooting - Blue Ocean enables developers to locate automation\nproblems instantly, without endlessly scanning through logs or navigating\nthrough many screens, so you can get back to building the next big thing.\n\nGitHub and Git Integration - Pipelines are created for all feature branches\nand pull requests, with their status reported back to GitHub.\nThe whole team has visibility into whether changes need work or are good to go.\n\nPersonalization – Every team member can make Jenkins their own by customizing\nthe dashboard so that they only see those pipelines that matter to them.\nFavoriting any pipeline or branch in Blue Ocean will show a favourite card on\nthe dashboard so you can see its status at a glance.\n\nJust one more thing – I’d like to pay special thanks to:\n\nThe Core team – to Keith Zantow, Thorsten Scherler, Tom Fennelly,\nIvan Meredith, Josh McDonald, Vivek Pandey, Brody Maclean and Cliff Meyers.\nEach of and everyone of you have brought your own passion, expertise and flair\nto the project – and it shows. It’s been crazy fun and I hope working on\nBlue Ocean is something you look back on fondly.\n\nJenkins Developers past and present – we recognise that we are standing on\nthe shoulders of giants and none of this wouldn’t be possible without your\nhard work and dedication to free & open source software and Jenkins.\nHere’s to the next 10 years 🍻 !\n\nCloudBees – in particular, Sacha Labourey (CEO), Harpreet Singh\n(VP of Product) and Spike Washburn (VP of Engineering) whose dedication to\nJenkins, Open Source and continued faith in the vision and team made all of\nthis possible, and of course Bob Bickel (Advisor) who dared us to dream big.\n\nMichael Neale – who drank all the kool-aide and is just as obsessed with\nand dedicated to Blue Ocean as I am. This project would never have shipped\nwithout his hand steady at the tiller. I couldn’t ask for a better friend\nand partner-in-crime.\n\nTyler Croy – for guiding the project and myself on how to do open source\nThe Right Way™. Tyler works tirelessly behind the scenes to to make Jenkins\nawesome and it wouldn’t be possible to keep this show running without\nhis help and sage-like advice.\n\nKohsuke Kawaguchi – For creating Jenkins, getting Blue Ocean off of\nthe ground, his tour of Tokyo and above all, his trust.\n\nJenkins Users – your enthusiasm for better development tools which\nkept our spirits and momentum up when the days grew long and things\nlooked tough. We couldn’t ask for a better, more appreciative or\npassionate group of people. Hopefully we’ve done our job and you can get\nback to building your next big thing!\n\nNext stop, some well needed rest & recovery then back to to making\nJenkins one of the experiences for software developers worldwide!\n\nIf you’re interested in joining us to make Blue Ocean a great user experience\nfor Jenkins, please join the Blue Ocean development\nteam on Gitter!","title":"Say hello to Blue Ocean 1.0","tags":["blueocean","ux","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/authors/i386/","twitter":"i386"}]}},{"node":{"date":"2017-03-24T00:00:00.000Z","id":"cd9ac93a-3ea0-5543-8c2e-1e647b9eb8a1","slug":"/blog/2017/03/24/jenkins-community-survey/","strippedHtml":"This is a guest post by Bhavani Rao, Marketing Manager at CloudBees\n\nLast fall, prior to Jenkins World, CloudBees conducted a\nCommunity Survey.\nWe received over 1200 responses, and thanks to this input, we have some\ninteresting insights into how Jenkins users and their use of Jenkins are\nevolving.\n\nBased on the survey’s results, Jenkins is increasingly being used to support\ncontinuous delivery (CD). Adoption of Jenkins 2, which featured \"Pipeline as code\" and\nencouraged users to adopt Jenkins Pipeline, has\nskyrocketed to more than half of all Jenkins installations.  Other data\nremained consistent with findings year-to-year, for example, the number of\nJenkins users continues to increase and 90% of survey respondents still\nconsider Jenkins mission-critical.\n\nGet the survey infographic PDF\n\nGet the complete survey results in PDF\n\nHere are some of the key findings:\n\n85% of respondants indicated that Jenkins usage had increased\n\n30% of organizations with more than 50 software projects used Jenkins in 2016 as compared to 16% in 2015\n\nAn impressive 46% of respondents were running Jenkins 2.x, eight months after\nits release.\n\nAdoption of Jenkins Pipeline for continuous delivery\n(CD) is accelerating, 54% of respondents who have adopted CD are using Pipeline.\n\n61% of respondents are deploying changes to production at least once per week\n\nLinux is the platform of choice for builds, favored by 85% of respondents\n\n85% of respondants use Git as the source code repository\n\nHalf of respondents are deploying applications directly to the cloud, with Amazon Web Services as the favored platform\n\nWe want to thank everyone for completing the survey, and congratulations to\nIker Garcia for winning a free pass to\nJenkins World 2017 and to\nDave Leifer for winning the Amazon gift card.\n\nWe’re looking forward to creating a 2017 Community Survey later this year and\nhearing more from users at Jenkins World 2017 in San Francisco, we hope to\nsee you there!","title":"The State of Jenkins - 2016 Community Survey","tags":["community","survey","continuous delivery"],"authors":[{"avatar":null,"blog":"https://www.cloudbees.com/blogs/bhavani-rao","github":null,"html":"","id":"brao","irc":null,"linkedin":null,"name":"Bhavani Rao","slug":"/blog/authors/brao/","twitter":null}]}},{"node":{"date":"2017-04-05T00:00:00.000Z","id":"ef0f71cf-7b8f-528c-bdbf-cb7997704db5","slug":"/blog/2017/04/05/welcome-to-blue-ocean/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nWelcome to Blue Ocean 1.0!\n\nIn case you’ve been heads down on other projects\nfor the past 10 months,\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 was released today!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nI’ve been working with it for the past several months, and I can tell you it is amazing.\nI wish all the interactions with Jenkins were as easy as this:\n\n10 minutes to Blue Ocean\n\nBlue Ocean is simple to install and will work on basically any Jenkins 2 instance (version 2.7 or later).\nEven better, it runs side-by-side with the existing Jenkins web UI -\nyou can switch back and forth between them whenever you like.\nThere’s really no risk.\nIf you have a Jenkins instance and a good network connection,\nin 10 minutes you could be using Blue Ocean.\n\nLogin to your Jenkins server\n\nClick Manage Jenkins in the sidebar then Manage Plugins\n\nChoose the Available tab and use the search bar to find Blue Ocean\n\nClick the checkbox in the Install column\n\nClick either Install without restart or Download now and install after\nrestart\n\nAfter you install Blue Ocean, you can start using it\nby clicking on Open Blue Ocean in the navigation bar of the\nJenkins web UI, or you can navigate directly to Blue Ocean by adding\n/blue to your Jenkins URL, for example https://ci.jenkins.io/blue .\n\nIf you have to go back to the \"classic\" Jenkins UI,\nthere’s an \"exit\" icon located at the top of every page in Blue Ocean.\n\nDive in!\n\nThat’s it! You now have a working Blue Ocean installation.\nTake a look around at your Pipelines and activity, or try creating a new Pipeline.\nI think you’ll be pleasantly surprised at how intuitive and helpful Blue Ocean can be.\nBlue Ocean is so cool, I never want to leave it.\nOver the next few days, I’ll be publishing a series of videos,\nshowing some common Jenkins use cases and how Blue Ocean makes them clearer and easier than ever before.\n\nStay Tuned!","title":"Getting Started with Blue Ocean","tags":["blueocean","ux","pipeline","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},{"node":{"date":"2020-07-08T00:00:00.000Z","id":"e374d21c-96c4-5212-b662-0867a675e5a2","slug":"/blog/2020/07/08/winsw-yaml-support/","strippedHtml":"Hello all, I am Buddhika Chathuranga from Sri Lanka and I am a final year undergraduate at the Faculty of IT, University of Moratuwa. I am participating in GSoC 2020 with Jenkins.\nI am working on the Windows Service Wrapper Project.\nSo the Coding Phase 01 of GSoC 2020 is now over and this blog post describes what I have done so far.\n\nWindows Service Wrapper is an executable, which we can use to run applications as Windows Services on Windows machines, which has almost one million downloads.\nIn Jenkins, we use Windows service wrapper to run Jenkins server and agents as Windows services to gain more robustness.\nThis feature is bundled into Jenkins’s core. Currently, the Windows Service wrapper is configured by an XML file.\nHowever, there is a limited number of configuration checks and there is no XML schema.\n\nXML is not such a human-friendly way to do that. It is quite verbose and not easy to identify the schema without some effort.\nUsually, users misconfigure the service wrapper. This is a sample XML configuration file that we can use to provide configurations to Windows Service Wrapper.\n\nSample XML Configuration File\n\njenkins\nJenkins\nThis service runs Jenkins automation server.\n\nC:\\Program Files\\Java\\jdk1.8.0_201\\bin\\java.exe\n-Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"C:\\Program Files\\Jenkins\\jenkins.war\" --httpPort=8081 --webroot=\"%LocalAppData%\\Jenkinswar\"\nrotate\n\n%LocalAppData%\\Jenkinsjenkins.pid\n10000\nfalse\n\nThe usage of YAML could simplify configuration management in Jenkins, especially when automated and configuration management tools are used.\nSo what we are doing under GSoC - 2020 is to update the Windows Service Wrapper to support YAML configurations.\nAfter finishing this project, users will be able to provide configurations to the Windows Service Wrapper as a YAML file.\n\nThis is a sample YAML configuration file for Windows Service Wrapper and you can see it is less verbose than XML or JSON and much more human friendly.\nUsers can read and edit this without a big effort.\n\nSample YAML Configuration File\n\nid: jenkins\nname: Jenkins\ndescription: This service runs Jenkins automation server.\nenv:\n    _name: JENKINS_HOME\n    _value: '%LocalAppData%\\Jenkins.jenkins'\nexecutable: 'C:\\Program Files\\Java\\jdk1.8.0_201\\bin\\java.exe'\narguments: >-\n    -Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"C:\\Program Files\\Jenkins\\jenkins.war\" --httpPort=8081 --webroot=\"%LocalAppData%\\Jenkinswar\"\nlogmode: rotate\nonfailure:\n    _action: restart\nextensions:\n    -\n        pidfile: '%LocalAppData%\\Jenkinsjenkins.pid'\n        stopTimeout: '10000'\n        stopParentFirst: 'false'\n        _enabled: 'true'\n        _className: winsw.Plugins.RunawayProcessKiller.RunawayProcessKillerExtension\n        _id: killOnStartup\n\nAdvantages of YAML as a configuration file\n\nIt is less verbose and much more human friendly than XML.\n\nSince YAML is not using extra delimiters, it is lightweight.\n\nNowadays YAML has become more popular among configuration management tools.\n\nProject Scope\n\nDuring this project, I will add the following features to Windows Service Wrapper.\n\nYAML Configuration support\n\nYAML Schema validation\n\nNew CLI for the Windows Service Wrapper\n\nSupport for XML Schema validation via XML Schema Definition (XSD)\n\nPhase 01 Updates\n\nIn GSoC - 2020 phase 01, I have done the following updates to the Windows Service Wrapper.\n\nProject Structure overview document. (Published)\n\nYAML configurations support (Not released yet) - Pull Request\n\nNew CLI (Not released yet) - Pull Request\n\nXML Schema validation (Not released yet) - Pull Request\n\nYou can find Phase 01 Demo slides in this link.\n\nBelow you can find more details about the deliverables listed above.\n\nProject Structure overview\n\nThe project structure overview document describes how files and directories are organized in the Windows Service Wrapper project.\nIt will help contributors as well as users, to understand the codebase easily.\nAlso, it helps me a lot to understand the codebase. You can find the document from the given link.\n\nYAML configurations support\n\nAs I explained before, in this project, configurations will be provided as a YAML file.\nI used YamlDotNet library which has more than 2.2k stars on GitHub, to deserialize the YAML file into an Object graph.\nIn this YAML file, users can specify configurations in a more structured way than in XML configuration files.\nAs an example, now users can specify all the log related configurations under the log config.\nUsers can specify all service account related configurations under serviceaccount config etc.\n\nAt the moment, I am working on a design document for YAML configuration support. I will add it to the GitHub Issue once ready\n\nNew CLI\n\nBefore moving into Phase 01 updates, it’s better to explain why we needed a new CLI for Windows Service Wrapper.\nIn the early phases of Windows Service Wrapper, we will keep the XML configuration support as well.\nSo we should allow users to specify the configurations file separately.\nThe current approach is, configurations file should be in the same directory, where Windows Service Wrapper executable exists and the file name of the XML file should be the same as the Windows Service Wrapper executable file name.\nAlso, users should be able to redirect logs if they need to and they should be allowed to elevate command prompt using Windows Service Wrapper.\nAlso, we thought that it’s better to allow users to skip schema validation if they needed. So we decided to move into a new CLI.\n\nAs I explained, after releasing this, users will have options in addition to commands.\nIt will make the WinSW CLI more flexible so that we can easily extend it later. These are the options users are allowed to use.\nThese options are available with all the commands except help and version\n\n--redirect / -r [string]\n\nUsers can specify the redirect path for the logs if needed\n\nNot required | Default value is null\n\n--elevated / -e [boolean]\n\nElevate the command prompt before executing the command\n\nNot required | Default value is false\n\n--configFile / -c [string]\n\nUsers can specify the configurations file as a path\n\nNot Required | Default value is null\n\n--skipConfigValidation / -s [boolean]\n\nUsers can skip schema validation for configurations file if needed\n\nNot required | Default value is true\n\n--help / -h\n\nUser can find what options are available with a particular command with this option\n\nThis option is available with the install command\n\n--profile / -f [boolean]\n\nIf this option is true, then users can provide a service account for installation explicitly.\n\nNot required | Default value is false\n\nWe used commandlineparser/commandline library to parse the command line argument which has more than 2k stars in GitHub. At a glance, the library is compatible with .NET Framework 4.0+, Mono 2.1+ Profile, .NET Standard, and .NET Core.\n\nXML Schema validation\n\nAs I mentioned before, there was no schema validation for XML in Windows Service Wrapper.\nHence, I was working on schema validation for XML. I use XSD to validate XML files. The XSD file will be shipped as an embedded resource with the executable.\nYou can find the XSD file in my pull request.\n\nFuture updates\n\nIn the next phase, for GSoC 2020 the listed deliverables features will be released and the YAML schema validation feature will be added.\nAlso, we hope to publish a design document for the new features, which will help contributors.\n\nHow to contribute\n\nYou can find the GitHub repository in this link. Issues and Pull requests are always welcome.\nAlso, you can communicate with us in the WinSW Gitter channel, which is a great way to get in touch and there are project sync up meetings every Tuesday at 13:30 UTC on the Gitter channel.\n\nSome useful links\n\nProject Page\n\nProject Repository\n\nGitter Channel\n\nYamlDotNet library\n\nCommand Line Parser library","title":"Windows Service Wrapper : YAML Configuration Support - GSoC Phase - 01 Updates","tags":["winsw","windows","jenkins","gsoc","gsoc2020"],"authors":[{"avatar":null,"blog":null,"github":"buddhikac96","html":"","id":"buddhikac96","irc":null,"linkedin":null,"name":"Buddhika Chathuranga","slug":"/blog/authors/buddhikac96/","twitter":null}]}},{"node":{"date":"2020-07-09T00:00:00.000Z","id":"615c1ac2-c3da-5001-be28-908ac6008d94","slug":"/blog/2020/07/09/git-performance-improvement-phase1/","strippedHtml":"Git Plugin Performance Improvement is a Google Summer of Code 2020 project.\nIt aims to improve the performance of the git plugin, which provides fundamental git functionalities.\n\nInternally, the plugin provides these functionalities using two implementations: command line git and JGit (pure java implementation).\n\nCLI git is the default implementation for the plugin, a user can switch to JGit if needed\n\nThe project is divided into two parallel stages:\n\nStage 1 : Create benchmarks which evaluate the execution time of a git operation provided by CLI git and JGit using JMH, a micro benchmarking test harness.\n\nStage 2 : Implement the insights gained from the analysis into the plugin to improve the overall performance of the plugin.\n\nThe project also aims to fix any existing performance bottlenecks within the plugin as well.\n\nBenchmarks\n\nThe benchmarks are written using JMH. It was introduced in a GSoC 2019 project to Jenkins.\n\nJMH is provided within the plugin through the Jenkins Unit Test Harness POM dependency.\n\nThe JMH benchmarks are created and run within the git client plugin\n\nDuring phase-1, we have created benchmarks for two operations: \"git fetch\" and \"git ls-remote\"\n\nResults and Analysis\n\nThe benchmark analysis for git fetch:\n\nGit fetch results\n\nThe performance of git fetch (average execution time/op) is strongly correlated to the size of a repository\n\nThere exists an inflection point on the scale of repository size after which the nature of JGit performance changes (it starts to degrade)\n\nAfter running multiple benchmarks, it is safe to say that for a large sized repository CLI-git would be a better choice of implementation.\n\nWe can use this insight to implement a feature which avoids JGit when it comes to large repositories.\n\nPlease refer to PR-521 for an elaborate explanation on these results\n\nNote: Repository size means du -h .git\n\nFixing redundant fetch issue\n\nThe git plugin performs two fetch operations instead of one while performing a fresh checkout of a remote git repository.\n\nTo fix this issue, we had to safely remove the second fetch keeping multiple use-cases in mind. The fix itself was not difficult to code, but to do that safely without breaking any existing use-case was a challenging task.\n\nFurther Plan\n\nAfter consolidating a benchmarking strategy during Phase 1, the next steps will be:\n\nProvide functionality to the git plugin, which enables it to estimate the size of the repository without cloning it.\n\nBroaden the scope of benchmarking strategy\n\nConsider parameters like number of branches, references and commit history to find a relation with the performance of a git operation\n\nThe git plugin depends on other plugins like Credentials which might require benchmarking the plugin itself and the effects of these external dependencies on the plugin’s performance\n\nFocus on other use-cases of the plugin\n\nFor phase-1, I focused on the checkout step and the operations involved with it\n\nFor the next phase, the focus will shift to other areas like Multibranch pipelines or Organisation Folders\n\nHow can you help?\n\nIf you have reached this far of the blog, you might be interested in the project.\n\nTo help, you can\n\nReview the benchmarks in the benchmarks module\n\nAnalyse the benchmarks results available on ci.jenkins.io [soon]\n\nCome visit our Gitter channel: https://gitter.im/jenkinsci/git-plugin","title":"Git Plugin Performance Improvement: Phase-1","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/rishabhbudhouliya.jpg"},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/authors/rishabhbudhouliya/","twitter":null}]}},{"node":{"date":"2020-07-09T00:00:00.000Z","id":"f26945c7-7d59-55b5-84e1-9d4e82638d84","slug":"/blog/2020/07/09/github-checks-api-plugin-coding-phase-1/","strippedHtml":"This blog post is about our coding phase 1 progress on GSoC project: GitHub Checks API Plugin.\n\nThe GitHub Checks API is a highly customized way to integrate CI tools to make reports for pull-requests (PRs).\nIt allows users to see CI reports on GitHub pages directly.\n\nFigure 1. GitHub Check Run Screenshot from GitHub Docs\n\nWhat’s more exciting is that it can leave annotations on specific lines of code, just as the comments people left while reviewing.\n\nFigure 2. Check Run Annotation Screenshot from GitHub Docs\n\nWhile on Jenkins' side, the source code view provided by Warnings Next Generation Plugin does pretty much the same thing.\n\nFigure 3. Source Code View from Warnings Next Generation Plugin\n\nUtilizing such features through GitHub Checks API, it would make Jenkins more convenient to GitHub users.\n\nFeatures from Coding Phase 1\n\nIn the past month, our team was mostly working on the general checks API and an implementation for GitHub checks API.\n\nGitHub Checks API Plugin Demo [starts from 50:15]\n\nGeneral Checks API\n\nAlthough the general checks API is developed based on the semantic meaning of GitHub Checks API, we still want to prepare it for similar concepts on other platforms like Commit Status API from GitLab.\nContributions for implementations on these platforms will be welcomed in the future.\n\nGitHub Checks API Implementation\n\nOur work on supporting GitHub Checks API is mostly done by now.\nBesides, we implemented a consumer to automatically create a check run that simply indicates the current stage of a Jenkins build.\nAfter the release, Jenkins developers (especially publisher plugin ones) can create their own GitHub checks for a GitHub branch source project by consuming our API.\n\nExample: To create a check run like:\n\nConsumers need to use our API in this way:\n\nChecksDetails details = new ChecksDetailsBuilder()\n        .withName(\"Jenkins\")\n        .withStatus(ChecksStatus.COMPLETED)\n        .withDetailsURL(\"https://ci.jenkins.io\")\n        .withStartedAt(LocalDateTime.now(ZoneOffset.UTC))\n        .withCompletedAt(LocalDateTime.now(ZoneOffset.UTC))\n        .withConclusion(ChecksConclusion.SUCCESS)\n        .withOutput(new ChecksOutputBuilder()\n                .withTitle(\"Jenkins Check\")\n                .withSummary(\"# A Successful Build\")\n                .withText(\"## 0 Failures\")\n                .withAnnotations(Arrays.asList(\n                        new ChecksAnnotationBuilder()\n                                .withPath(\"Jenkinsfile\")\n                                .withLine(1)\n                                .withAnnotationLevel(ChecksAnnotationLevel.NOTICE)\n                                .withMessage(\"say hello to Jenkins\")\n                                .withStartColumn(0)\n                                .withEndColumn(20)\n                                .withTitle(\"Hello Jenkins\")\n                                .withRawDetails(\"a simple echo command\")\n                                .build(),\n                        new ChecksAnnotationBuilder()\n                                .withPath(\"Jenkinsfile\")\n                                .withLine(2)\n                                .withAnnotationLevel(ChecksAnnotationLevel.WARNING)\n                                .withMessage(\"say hello to GitHub Checks API\")\n                                .withStartColumn(0)\n                                .withEndColumn(30)\n                                .withTitle(\"Hello GitHub Checks API\")\n                                .withRawDetails(\"a simple echo command\")\n                                .build()))\n                .build())\n        .withActions(Collections.singletonList(\n                new ChecksAction(\"formatting\", \"format code\", \"#0\")))\n        .build();\n\nChecksPublisher publisher = ChecksPublisherFactory.fromRun(run);\npublisher.publish(details);\n\nFuture Works\n\nThe next step is integrating our API into Warnings Next Generation Plugin and Code Coverage API Plugin consume our API.\nAfter that, pipeline support will be added: users can publish checks directly in a pipeline script without requiring a consumer plugin that support the checks.\n\nResources\n\nGitHub Repository\n\nProject Page\n\nGitter Channel\n\nReferences\n\nGitHub Doc: Creating CI tests with the Checks API\n\nWarnings Next Generation Plugin: Source Code View","title":"GitHub Checks API Plugin Project - Coding Phase 1","tags":["github","api","plugins","developer","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg","srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/77b35/XiongKezhi.jpg 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/d4a57/XiongKezhi.jpg 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/68974/XiongKezhi.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/ef6ff/XiongKezhi.webp 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/8257c/XiongKezhi.webp 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/6766a/XiongKezhi.webp 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/22bfc/XiongKezhi.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/XiongKezhi.jpeg"},"blog":null,"github":"XiongKezhi","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 Student. Kezhi is an open source enthusiast who enjoys sharing ideas with other developers. He started contributing to Jenkins in March 2020. Currently, he is working on <a href=\"https://github.com/XiongKezhi/checks-api-plugin\">GitHub Checks API Plugin</a>.</p>\n</div>","id":"XiongKezhi","irc":null,"linkedin":"kezhi-xiong-44234a188","name":"Kezhi Xiong","slug":"/blog/authors/xiongkezhi/","twitter":"AugustX_"}]}},{"node":{"date":"2020-07-15T00:00:00.000Z","id":"ea6acacc-eca1-580a-a013-eb8a8cacca6c","slug":"/blog/2020/07/15/xss-severity/","strippedHtml":"Eagle-eyed readers of today’s security advisory may already have noticed that we consider the cross-site scripting (XSS) vulnerabilities to be 'High' severity.\nThis is a change from previous security advisories, in which similar vulnerabilities got a 'Medium' score.\n\nWe follow the guidelines of CVSS version 3.0 for the severity we assign to these issues.\nTheir examples for XSS vulnerabilities, as well as XSS vulnerabilities in other software, consider the most severe, immediate impact to be a modification of the HTML output, possibly also the extraction of the session cookie (something Jenkins prevents by declaring it to be HttpOnly).\n\nUnfortunately, this does not adequately model the impact that a successful XSS exploitation in Jenkins can have:\nJenkins administrators can perform far more sensitive actions than e.g. the admins of most content management systems could, as it is designed to allow users to execute code to build, test, and deploy their software.\nSo this kind of vulnerability, that allows attackers to do anything their victims have permission to do, in Jenkins can mean execution of arbitrary code, perhaps via the script console, if the victim has the Overall/Administer permission.\nNone of this requires chaining different actions in an attack, a well-chosen XSS payload will accomplish this.\n\nTherefore, starting today, we score XSS vulnerabilities by the highest immediate impact a successful attack can have, which is a complete system compromise if admins can be attacked.\nFor stored XSS requiring some permissions, like the ability to configure jobs, a typical score would be 8.0.\nReflected XSS, which don’t require any permissions to exploit, will usually score 8.8.","title":"Severity of cross-site scripting vulnerabilities","tags":["security","announcement"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2020-07-23T00:00:00.000Z","id":"fd686e1c-3df7-5236-8624-f2cd50ed3461","slug":"/blog/2020/07/23/windows-support-updates/","strippedHtml":"In this article, I would like to announce the new Windows support policy\nwhich was introduced in the Jenkins project in June 2020.\nThis policy sets an expectation about how we handle issues and patches related to Windows support for the Jenkins server and agents, and how we organize testing of Windows support in the project.\nWe will also talk about .NET Framework 2.0 support removal in Jenkins 2.248,\nand about new Windows service management features and fixes Jenkins users get with this release.\n\nFigure 1. Jenkins on Windows\n\nWhy?\n\nIn theory, Jenkins can run everywhere where you can run Java 8 or Java 11, but, in practice, there are some limitations.\nThe Jenkins core and some plugins contain native code, and hence they rely on operating systems and platforms.\nWe use Java Native Access and Java Native Runtime libraries which provide wide platform support for low-level operations,\nbut there are platform-specific cases not covered by such generic libraries.\nIn the case of Windows platforms we use Windows Service Wrapper (WinSW) and\nWindows Process Management Library (WinP).\nThese libraries depend on particular Windows API versions and, in the case of Windows services, on .NET Framework.\n\nHistorically Jenkins had no documented support policy for Windows,\nand we were accepting patches for all versions which existed since the Hudson inception in 2004.\nIt became a serious obstacle for Windows component maintainers who had to be very conservative about incoming patches so that we could avoid breaking instances running on old platforms.\nLack of testing for older platforms did not help either.\nAnd it is not just about maintenance overhead.\nUsers were impacted as well, because it blocked us from adopting some new Windows features and making Jenkins more stable/maintainable on modern platforms.\n\nNew policy\n\nTo set proper expectations about Windows support,\nin the new policy we defined four support levels.\nSee the Windows support policy page for the actual information about the support levels and the supported platforms.\nThis blogpost captures the support state as of Jul 23, 2020:\n\nLevel 1 - Full Support\n\nWe run automated testing for these platforms, and we intend to timely fix the reported issues.\nThis support level includes 64-bit (amd-64) Windows Server versions with the latest GA update pack,\nand versions used in the official Jenkins server and agent Docker images.\n\nLevel 2 - Supported\n\nWe do not actively test these platforms, but we intend to keep compatibility.\nWe are happy to accept patches.\nThis support level includes 64-bit (amd64) Windows Server and Windows 10 versions generally supported by Microsoft.\n\nLevel 3 - Patches considered\n\nThe platforms are generally expected to work, but they may have limitations and extra requirements.\nWe do not test compatibility, and we may drop support if needed.\nWe will consider patches if they do not put Level 1/2 platforms at risk and if they do not create maintenance overhead.\nThis support level includes non-amd64 platforms like x86 (32-bit) and AArch64 (Arm).\nIt also applies to non-mainstream release lines like Windows Embedded, preview releases, and versions no longer supported by Microsoft.\n\nLevel 4 - Unsupported\n\nThese versions are known to be incompatible or to have severe limitations.\nWe do not support the listed platforms, and we will not accept patches.\nAt the moment this level applies to platforms released before 2008.\n\nWhen the policy was introduced, there were questions raised about platforms listed in the Level 3 support category.\nFirst of all, these platforms are still supported.\nUsers are welcome to run Jenkins on these platforms.\nWe recognize the importance of the platforms listed there, and we intend to keep compatibility with them.\nAt the same time, particular functionality may break there due to the lack of testing when we update Jenkins or upstream dependencies.\nIt may take a while until a fix is submitted by a user or contributor,\nbecause we do not maintain development environments for these platforms.\nBy setting a Level 3 support level, we want to set an explicit expectation about those limitations.\n\nIf you are interested in expanding the official Windows support policy and adding more platforms there,\nwe invite you to participate in quality assurance of Jenkins.\nYou may contribute by expanding test automation for Jenkins,\ncontributing test environments for your platforms,\nor participating in the LTS release candidate testing and reporting results.\nPlease contact us via Platform SIG channels if you are interested.\n\nWindows Service Management changes in Jenkins 2.248\n\nFigure 2. WinSW Logo\n\nAlthough the policy was introduced more than 1 month ago,\nJenkins 2.248 is the first release where the new policy is applied.\nStarting from this release, we won’t support .NET Framework 2.0 for launching the Jenkins server or agents as Windows services.\n .NET Framework 4.0 or above is now required for using the default service management features.\n\nThis release also upgrades Windows Service Wrapper (WinSW) from 2.3.0 to 2.9.0 and replaces the bundled binary from .NET Framework 2.0 to 4.0.\nThere are many improvements and fixes in these versions,\nbig thanks to NextTurn and all other contributors.\nYou can find the full WinSW changelog here,\njust a few highlights important to Jenkins users:\n\nPrompt for permission elevation when administrative access is required.\nNow Jenkins users do not need to run the agent process as Administrator to install the agent as a service from GUI.\n\nEnable TLS 1.1/1.2 in .NET Framework 4.0 packages on Windows 7 and Windows Server 2008 R2.\n\nEnable strong cryptography when running .NET Framework 4.0 binaries on .NET 4.6.\n\nSupport security descriptor string in the Windows service definition.\n\nSupport 'If-Modified-Since' and proxy settings for automatic downloads.\n\nFix Runaway Process Killer extension so that it does not kill wrong processes with the same PID on startup.\n\nFix the default domain name in the serviceaccount parameter (jira:JENKINS-12660[])\n\nFix archiving of old logs in the roll-by-size-time mode.\n\nAs you may see, there are many improvements available with this version,\nand we hope that it will make Windows service installation even more reliable.\nSome of the changes in WinSW also replaced old workarounds in the Jenkins core,\nmaking the code more maintainable.\n\nUse-cases affected by .NET Framework 2.0 support removal\n\nIf you use .NET Framework 2.0 to run the Jenkins Windows services,\nthe following use-cases are likely to be affected:\n\nInstalling the Jenkins server as a Windows service from Web UI.\nThe official MSI Installer supports .NET Framework 2.0 for the moment, but it will be changed in future versions.\n\nInstalling agents as Windows services from GUI.\nThis feature is provided by in Windows Agent Installer Module from the Jenkins core.\n\nInstalling agents over Windows Management Instrumentation (WMI) via the WMI Windows Agents plugin\n\nAuto-updating of Windows service wrappers on agents installed from GUI.\n\nUpgrade guidelines\n\nIf all of your Jenkins server and agent instances already use .NET Framework 4.0 or above,\nthere are no special upgrade steps required.\nPlease enjoy the new features!\n\nIf you run the Jenkins server as a Windows Service with .NET Framework 2.0,\nthis instance will require an upgrade of .NET Framework to version 4.0 or above.\nWe recommend running with .NET Framework 4.6.1 or above,\nbecause this .NET version provides many platform features by default\n(e.g. TLS 1.2 encryption and strong cryptography),\nand Windows Service Wrapper does not have to apply custom workarounds.\n\nIf you want to continue running some of your agents with .NET Framework 2.0,\nthe following extra upgrade steps are required:\n\nDisable auto-upgrade of Windows Service Wrapper on agents by setting the\n-Dorg.jenkinsci.modules.windows_slave_installer.disableAutoUpdate=true flag on the Jenkins server side.\n\nUpgrade agents with .NET Framework 4.0+ by downloading the recent Windows Service Wrapper 2.x\nversion from WinSW GitHub Releases\nand manually replacing the wrapper \".exe\" files in the agent workspaces.\n\nWhat’s next?\n\nWe plan to continue expanding the Windows support in Jenkins,\nincluding providing official Docker images for newer Windows versions.\nFor example, there is already a pull request which will introduce official agent images for Windows Server Core LTSC 2019 and\nfor Windows Server Core and Nano Server 1909.\nWe are also interested to keep expanding test coverage for Windows platforms.\nAny contributions and feedback will be appreciated!\n\nWe also keep working on improving Windows Services.\nBuddhika Chathuranga, a Google Summer of Code 2020 student, is working on support for YAML Configurations in Windows Service Wrapper,\nand on better verification of XML and YAML Configurations.\nSee the details on the project page and in the\nCoding Phase 1 Report.\nIn addition to that, there is ongoing work on a new Windows Service Wrapper 3.0 release which will redesign CLI and introduce a lot more improvements.\nIf you are interested in contributing to Windows Service Wrapper,\nsee the guidelines here.\nWe will also appreciate your feedback on the WinSW Gitter channel.","title":"Jenkins 2.248: Windows Support Updates","tags":["announcement","windows","platform","winsw"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-07-24T00:00:00.000Z","id":"4bb5ba32-d613-5603-8d83-2dabce9481fa","slug":"/blog/2020/07/24/external-fingerprint-storage-phase-2/","strippedHtml":"As another great phase for the\nExternal Fingerprint Storage Project\ncomes to an end, we summarise the work done during this phase in this blog post.\nIt was an exciting and fruitful journey, just like the previous phase, and offered some great learning experience.\n\nTo understand what the project is about and the past progress, please refer to the\nphase 1 blog post.\n\nNew Stories Completed\n\nWe targeted four stories in this phase, namely fingerprint cleanup, fingerprint migration, refactoring the current\nimplementation to use descriptors, and improved testing of the Redis Fingerprint Storage Plugin.\nWe explain these stories in detail below.\n\nFingerprint Cleanup\n\nhttps://github.com/jenkinsci/jenkins/pull/4817\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/23\n\nThis story involved extending the FingerprintStorage API to allow external storage plugins to perform and configure\ntheir own fingerprint cleanup strategies.\nWe added the following functionalities to Jenkins core API:\n\nFingerprintStorage#iterateAndCleanupFingerprints(TaskListener taskListener)\n\nThis allows external fingerprint storage implementations to implement their own custom fingerprint cleanup.\nThe method is called periodically by Jenkins core.\n\nFingerprintStorage#cleanFingerprint(Fingerprint fingerprint, TaskListener taskListener)\n\nThis is a reference implementation which can be called by external storage plugins to clean up a fingerprint.\nIt is upto the plugin implementation to decide whether to use this method.\nThey may choose to write a custom implementation.\n\nWe consume these new API functionalities in the\nRedis Fingerprint Storage plugin.\nThe plugin uses cursors to traverse the fingerprints, updating the build information, and deleting the build-less\nfingerprints.\n\nEarlier, fingerprint cleanup was always run periodically and there was no way to turn it off.\nWe also added an option to allow the user to turn off fingerprint cleanup.\n\nThis was done because it may be the case that keeping redundant fingerprints in memory might be cheaper than the\ncleanup operation (especially in the case of external storages, which are cheaper these days).\n\nFingerprint Migration\n\nhttps://github.com/jenkinsci/jenkins/pull/4825\n\nEarlier, there was no support for fingerprints stored in the local storage.\nIn this phase, we introduce migration support for users.\nThe old fingerprints are now migrated to the new configured external storage whenever they are used (lazy migration).\nThis allows gradual migration of old fingerprints from local disk storage to the new external storage.\n\nRefactor FingerprintStorage to use descriptors\n\nhttps://github.com/jenkinsci/jenkins/pull/4834\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/36\n\nEarlier, whenever an external fingerprint storage plugin was installed, it was enabled by default.\nWe refactored the implementation to make use of Descriptor pattern so the fingerprint engine can now be selected\nas a dropdown from the Jenkins configuration page.\nThe dropdown is shown only when multiple fingerprint storage engines are configured on the system.\nRedis Fingerprint Storage Plugin was refactored\nto use this new implementation.\n\nStrengthened testing for the Redis Fingerprint Storage Plugin\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/33\n\nWe introduced new connection tests in the\nRedis Fingerprint Storage Plugin.\nThese tests allow testing of cases like slow connection, breakage of connection to Redis, etc.\nThese were implemented using the Toxiproxy module inside Testcontainers.\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/31\n\nWe introduced test for Configuration-as-code (JCasC) compatibility with the plugin.\nThe documentation for configuring the plugin using JCasC was also added.\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/39\n\nWe introduced a suite of authentication tests, to verify the proper working of the Redis authentication system.\nAuthentication uses the credentials plugin.\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/32\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/36\n\nWe strengthened our web UI testing to ensure that the configuration page for the plugin works properly as planned.\n\nOther miscellaneous tasks\n\nPlease refer to the Jira Epic for this phase.\n\nReleases 🚀\n\nChanges in the Jenkins core (except migration) were released in Jenkins 2.248.\n\nWe drafted 1.0-rc-1\nrelease for the Redis Fingerprint Storage Plugin\nto deliver the changes.\nThis was an increment from the alpha release\nwe had drafted at the end of the previous phase.\nThe plugin is now available at https://plugins.jenkins.io/redis-fingerprint-storage/!\n\nTrying out the new features!\n\nThe latest release for the plugin can be downloaded from the update center, instructions for which can be\nfound in the README\nof the plugin.\nWe appreciate you trying out the plugin, and welcome any suggestions, feature requests, bug reports, etc.\n\nAcknowledgements\n\nThe Redis Fingerprint Storage plugin is built and maintained by the Google Summer of Code (GSoC) Team for\nExternal Fingerprint Storage for\nJenkins. Special thanks to Oleg Nenashev,\nAndrey Falko, Mike Cirioli,\nTim Jacomb, and the entire Jenkins community for all the contribution to this project.\n\nFuture Work\n\nSome of the topics we aim to tackle in the next phase include a new reference implementation (possibly backed\nby PostgreSQL), tracing, etc.\n\nReaching Out\n\nFeel free to reach out to us for any questions, feedback, etc. on the project’s Gitter Channel or the Jenkins\nDeveloper Mailing list.\nWe use Jenkins Jira to track issues.\nFeel free to file issues under redis-fingerprint-storage-plugin component.\n\nOther Links\n\nRedis Fingerprint Storage Plugin\n\nIssue Tracker for Phase 2\n\njep:226[]\n\nGitter Channel\n\nProject Page\n\nPhase 1 Blog Post","title":"External Fingerprint Storage Phase-2 Updates","tags":["plugins","fingerprint","cloud-native","external-storage","developer","redis","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg","srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/77b35/stellargo.jpg 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/d4a57/stellargo.jpg 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/ef6ff/stellargo.webp 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/8257c/stellargo.webp 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/6766a/stellargo.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/stellargo.jpeg"},"blog":"https://medium.com/@sumitsarinofficial","github":"stellargo","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 student. Sumit is an engineering student (senior) at Netaji Subhas Institute of Technology, University of Delhi. He started his journey of contributing to Jenkins in December 2019. His tiny contribution revolved around the Jenkins Fingerprint engine. He is currently working on building <a href=\"https://www.jenkins.io/projects/gsoc/2020/projects/external-fingerprint-storage\">External Fingerprint Storage for Jenkins</a>.</p>\n</div>","id":"stellargo","irc":null,"linkedin":"sumit-sarin","name":"Sumit Sarin","slug":"/blog/authors/stellargo/","twitter":null}]}},{"node":{"date":"2020-07-27T00:00:00.000Z","id":"0b676e9e-8bca-5401-ad70-50c30452b445","slug":"/blog/2020/07/27/machine-learning-plugin-coding-phase2/","strippedHtml":"Welcome back folks!\n\nThis blog post is about my coding phase 2 in Jenkins Machine Learning Plugin for this GSoC 2020.\nAfter successfully passing the evaluation and demo in the phase 1, our team went ahead for facing the challenges in phase 2.\n\nSummary\n\nThis phase of coding was well spent by documentation and by fixing many bugs.\nAs the main feature of connecting to an IPython Kernel is done in phase 1, we were able to focus on fixing minor/major bugs and documenting for the users.\nAccording to the JENKINS-62927 issue, a Docker agent was built to facilitate users without concerning plugin dependencies in python.\nIn the act of deprecation of Python 2, we ported our plugin to support Python 3.\nWe have tested our plugin in Conda, venv and Windows environments.\nMachine learning plugin has successfully passed the end to end test. A feature for a code editor is needed for further discussion/analysis as we have done a simple editor that may be useful in other ways in the future. PR#35\n\nMain features of Machine Learning plugin\n\nRun Jupyter notebook, (Zeppelin) JSON and Python files\n\nRun Python code directly\n\nConvert Jupyter Notebooks to Python and JSON\n\nConfigure IPython kernel properties\n\nSupport to execute Notebooks/Python on Agent\n\nSupport for Windows and Linux\n\nUpcoming features\n\nExtract graph/map/images from the code\n\nSave artifacts according to the step name\n\nGenerate reports for corresponding build\n\nFuture improvements\n\nUsage of JupyterRestClient\n\nSupport for multiple language kernels\n\nNote : There is no commitment on future improvements during GSoC period\n\nDocker agent\n\nThe following Dockerfile can be used to build the Docker container as an agent for the Machine Learning plugin. This docker agent can be used to run  notebooks or python scripts.\n\nDockerfile\n\nFROM jenkins/agent:latest\n\nMAINTAINER Loghi\n\nUSER root\n\nRUN apt update && apt install --no-install-recommends python3 -y \\\n    python3-pip \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.txt /requirements.txt\n\nRUN pip3 install --upgrade pip setuptools && \\\n    pip3 install --no-cache-dir -r /requirements.txt && \\\n    ln -sf /usr/bin/python3 /usr/bin/python && \\\n    ln -sf /usr/bin/pip3 /usr/bin/pip\n\nUSER jenkins\n\nPorted to Python 3\n\nAs discussed in the previous meeting, we concluded that the plugin should support Python 3 as Python 2.7+ has been deprecated since the beginning of 2020. Pull request for docker agent should be also ported to Python 3 support.\n\nJupyter Rest Client API\n\nThe Jupyter Notebook server API seemed to be promising that it can be also used to run notebooks and codes. There were 3 api implementations that were merged in the master. But we had to focus on what was proposed in the design document and had to finish all must-have issues/works. Jupyter REST client was left for future implementation. It is also a good start to contribute to the plugin from the community.\n\nFixed bugs for running in agent\n\nThere were a few bugs related to the file path of notebooks while building a job. The major problem was caused by the python dependencies needed to connect to a IPython kernel. All issues/bugs were fixed before the timeline given.\n\nR support as a future improvement\n\nThis is what we tried to give a glimpse of knowledge that this plugin can be extended for multi language support in the future. There was a conclusion that the kernel should be selected dynamically using extension of the script file(like eval_model.rb or train_model.r), instead of scripting the same code for each kernel.\n\nDocumentation and End to End testing\n\nA well explained documentation was published in the repository. A guided tutorial to run a notebook checked out from a git repo in an agent was included in the docs page. Mentors helped to test our plugin in both Linux and Windows.\n\nCode editor with rebuild feature\n\nCode editor was filtered as a nice to have feature in the design document. After grabbing the idea of Jenkinsfile replay editor, I could do the same for the code. At the same time, when we are getting the source code from git, it is not an elegant way of editing code in the original code. After the discussion, we had to leave the PR open that may have use cases in the future if needed.\n\nJenkins LTS update\n\nThe plugin has been updated to support Jenkins LTS 2.204.1 as 2.164.3 had some problems with installing pipeline supported API/plugin\n\nInstallation for experimental version\n\nEnable the experimental update center\n\nSearch for Machine Learning Plugin and check the box along it.\n\nClick on Install without restart\n\nThe plugin should now be installed on your system.\n\nResources\n\nCommunity Bonding blog post\n\nPhase 1 blog post\n\nGithub\n\nProject page\n\nDesign document","title":"Machine Learning Plugin project - Coding Phase 2 blog post","tags":["machinelearning","datascience","plugins","communitybonding","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg","srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/9b030/loghijiaha.jpg 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/f38b5/loghijiaha.jpg 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/bcd2b/loghijiaha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/ceea6/loghijiaha.webp 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/45b82/loghijiaha.webp 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/933cd/loghijiaha.webp 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/6c13d/loghijiaha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":158}},"publicURL":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/loghijiaha.jpeg"},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"/blog/authors/loghijiaha/","twitter":"loghi5"}]}},{"node":{"date":"2020-07-27T00:00:00.000Z","id":"eff5a9fc-561f-50a6-8a43-4e2faffe72ae","slug":"/blog/2020/07/27/repository-signing-keys-changing/","strippedHtml":"The Jenkins core release automation project has been delivering Jenkins weekly releases since Jenkins 2.232, April 16, 2020.\nThe Linux repositories that deliver the weekly release were updated with new GPG keys with the release of Jenkins 2.232.\n\nBeginning with Jenkins LTS release 2.235.3, stable repositories will be signed with the same GPG keys that sign the weekly repositories.\nAdministrators of Linux systems must install the new signing keys on their Linux servers before installing Jenkins 2.235.3.\n\nDebian/Ubuntu\n\nUpdate Debian compatible operating systems (Debian, Ubuntu, Linux Mint Debian Edition, etc.) with the command:\n\nDebian/Ubuntu\n\n# wget -qO - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n\nRed Hat/CentOS\n\nUpdate Red Hat compatible operating systems (Red Hat Enterprise Linux, CentOS, Fedora, Oracle Linux, Scientific Linux, etc.) with the command:\n\nRed Hat/CentOS\n\n# rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n\nFrequently Asked Questions\n\nWhat if I don’t update the repository signing key?\n\nUpdates will be blocked by the operating system package manager (apt, yum, dnf) on operating systems that have not installed the new repository signing key.\nSample messages from the operating system may look like:\n\nDebian/Ubuntu\n\nReading package lists... Done\nW: GPG error: https://pkg.jenkins.io/debian-stable binary/ Release:\n    The following signatures couldn't be verified because the public key is not available:\n        NO_PUBKEY FCEF32E745F2C3D5\nE: The repository 'https://pkg.jenkins.io/debian-stable binary/ Release' is not signed.\nN: Updating from such a repository can't be done securely, and is therefore disabled by default.\nN: See apt-secure(8) manpage for repository creation and user configuration details.\n\nRed Hat/CentOS\n\nDownloading packages:\nwarning: /var/cache/yum/x86_64/7/jenkins/packages/jenkins-2.235.3-1.1.noarch.rpm:\n    Header V4 RSA/SHA512 Signature, key ID 45f2c3d5: NOKEY\nPublic key for jenkins-2.235.3-1.1.noarch.rpm is not installed\n\nWhy is the repository signing key being updated?\n\nThe original repository GPG signing key is owned by Kohsuke Kawaguchi.\nRather than require that Kohsuke disclose his personal GPG signing key, the core release automation project has used a new repository signing key.\nThe updated GPG repository signing key is used in the weekly repositories and the stable repositories.\n\nWhich operating systems are affected?\n\nOperating systems that use Debian package management (apt) and operating systems that use Red Hat package management (yum and dnf) need the new repository signing key.\n\nOther operating systems like Windows, macOS, FreeBSD, OpenBSD, Solaris, and OpenIndiana are not affected.\n\nAre there other signing changes?\n\nYes, there are other signing changes, though they do not need specific action from users.\n\nThe jenkins.war file is signed with a new code signing certificate.\nThe new code signing certificate has been used on weekly releases since April 2020.","title":"Jenkins 2.235.3: New Linux Repository Signing Keys","tags":["announcement","linux","platform"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-07-29T00:00:00.000Z","id":"84676949-9b05-55b1-b843-435c0ff0696d","slug":"/blog/2020/07/29/git-performance-improvement-phase2/","strippedHtml":"The second phase of the Git Plugin Performance Improvement project has been great in terms of the progress we have achieved in implementing performance improvement insights\nderived from the phase one JMH micro-benchmark experiments.\n\nWhat we’ve learned so far in this project is that a git fetch is highly correlated to the size of the remote repository. In order to make fetch improvements in this plugin, our task was to find the difference in performance for the two available git implementations in the Git Plugin, git and JGit.\n\nOur major finding was that git performs much better than JGit when it comes to a large sized repository (>100 MiB). Interestingly, JGit performs better than git when size of the repository is less than 100 MiB.\n\nIn this phase, we were successful in coding this derived knowledge from the benchmarks into a new functionality called the\nGitToolChooser.\n\nGitToolChooser\n\nThis class aims to add the functionality of recommending a git implementation on the basis of the size of a repository which has a strong correlation to the performance of git fetch (from performance Benchmarks).\n\nIt utilizes two heuristics to calculate the size:\n\nUsing cached .git dir from multibranch projects to estimate the size of a repository\n\nProviding an extension point which, upon implementation, can use REST APIs exposed by git service providers like Github, GitLab, etc to fetch the size of the remote repository.\n\nWill it optimize your Jenkins instance?\nThat requires one of the following:\n\nyou have a multibranch project in your Jenkins instance, the plugin can use that to recommend the optimal git implementation\n\nyou have a branch Source Plugin installed in the Jenkins instance, the particular branch source plugin will recommend a git implementation using REST APIs provided by GitHub or GitLab respectively.\n\nThe architecture and code for this class is at: PR-931\n\nNote : This functionality is an upcoming feature in the subsequent Git Plugin release.\n\nJMH benchmarks in multiple environments\n\nThe benchmarks were being executed on Linux and macOS machines frequently but there was a need to check if the results gained from those benchmarks would hold true across more platforms to ensure that the solution (GitToolChooser) is generally platform-agnostic.\n\nTo test this hypothesis, we performed an experiment:\n\nRunning git fetch operation for a 400 MiB sized repository on:\n\nWindows\n\nFreeBSD 12\n\nppc64le\n\ns390x\n\nThe result of running this experiment is given below:\n\nObservations:\n\nppc64le and s390x are able to run the operation in almost half the time it takes for the Windows or FreeBSD 12 machine. This behavior may be attributed to the increased computational power of those machines.\n\nThe difference in performance between git and JGit remains constant across all platforms which is a positive sign for the GitToolChooser as its recommendation would be consistent across multiple devices and operating systems.\n\nRelease Plan 🚀\n\nJENKINS-49757 - Avoid double fetch from Git checkout step\nThis issue was fixed in phase one, avoids the second fetch in redundant cases.\nIt will be shipped with some benchmarks on the change in performance due to the removal of the second fetch.\n\nPR-574\n\nPR-904\n\nGitToolChooser\n\nPR-931\nThis pull request is under review, will be shipped in one of the subsequent Git Plugin releases.\n\nCurrent Challenges with GitToolChooser\n\nImplement the extension point to support GitHub Branch Source Plugin, Gitlab Branch Source Plugin and Gitea Plugin.\n\nThe current version of JGit doesn’t support LFS checkout and sparse checkout, need to make sure that the recommendation doesn’t break existing use cases.\n\nFuture Work\n\nIn phase three, we wish to:\n\nRelease a new version of the Git and Git Client Plugin with the features developed during the project\n\nContinue to explore more areas for performance improvement\n\nAdd a new git operation: git clone (Stretch Goal)\n\nReaching Out\n\nFeel free to reach out to us for any questions or feedback on the project’s Gitter Channel or the Jenkins\nDeveloper Mailing list.\n\nProject Page\n\nPhase 1 Blog Post","title":"Git Plugin Performance Improvement Phase-2 Progress","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/rishabhbudhouliya.jpg"},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/authors/rishabhbudhouliya/","twitter":null}]}},{"node":{"date":"2020-08-03T00:00:00.000Z","id":"1a966f1b-f29c-510f-943e-ff264acdf7dd","slug":"/blog/2020/08/03/github-checks-api-plugin-coding-phase-2/","strippedHtml":"Another great coding phase for GitHub Checks API Project ends!\nIn this phase, we focused on consuming the checks API in two widely used plugins:\n\nWarnings NG Plugin\n\nCode Coverage API Plugin\n\nBesides the external usage, we have also split the general checks API from its GitHub implementation and released both of the plugins:\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nCoding Phase 2 Demo [starts from 25:20]\n\nWarning Checks\n\nThe newly released Warnings NG plugin 8.4.0 will use checks API to publish different check runs for different static analysis tools.\nWithout leaving GitHub, users are now able to see the analysis report they interested in.\n\nOn GitHub’s conversation tab for each PR, users will see summaries for those checks like the screenshot above. The summaries will include:\n\nThe status that indicates the quality gate\n\nThe name of the analysis tool used\n\nA short message that indicates statistics of new and total issues\n\nMore fine-grained statistics can be found in the Details page.\n\nAnother practical feature is the annotation for specific lines of code. Users can now review the code alone with the annotations.\n\nTry It\n\nIn Wanings NG plugin 8.4.0, the warning checks is set as a default feature only for GitHub.\nFor other SCM platforms, a NullPublisher will be used which does nothing.\nTherefore, you can get those checks for your own GitHub project just in a few steps:\n\nUpdate Warnings NG plugin to 8.4.0\n\nInstall GitHub Checks plugin on your Jenkins instance\n\nFollow the GitHub app authentication guide to configure the credentials for the multi-branch project or GitHub organization project you are going to use\n\nUse warnings-ng plugin in your Jenkinsfile for the project you configured in the last step, e.g.\n\nnode {\n    stage ('Checkout') {\n        checkout scm\n    }\n\n    stage ('Build and Static Analysis') {\n        sh 'mvn -V -e clean verify -Dmaven.test.failure.ignore'\n\n        recordIssues tools: [java(), javaDoc()], aggregatingResults: 'true', id: 'java', name: 'Java'\n        recordIssues tool: errorProne(), healthy: 1, unhealthy: 20\n        recordIssues tools: [checkStyle(pattern: 'target/checkstyle-result.xml'),\n            spotBugs(pattern: 'target/spotbugsXml.xml'),\n            pmdParser(pattern: 'target/pmd.xml'),\n            cpd(pattern: 'target/cpd.xml')],\n            qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]\n    }\n}\n\nFor more about the pipeline usage of warnings-ng plugin, please see the official documentation.\n\nHowever, if you don’t want to publish the warnings to GitHub, you can either uninstall the GitHub Checks plugin or disable it by adding skipPublishingChecks: true.\n\nrecordIssues enabledForFailure: true, tools: [java(), javaDoc()], skipPublishingChecks: true\n\nCoverage Checks\n\nThe coverage checks are achieved by consuming the API in Code Coverage API plugin.\nFirst, in the conversation tab of a PR, users will be able to see the summary about the coverage difference compared to previous builds.\n\nThe Details page will contain some other things:\n\nLinks to the reference build, including the target branch build from the master branch and the last successful build from this branch\n\nCoverage healthy score (the default value is 100% if the threshold is not configured)\n\nCoverages and trends of different types in table format\n\nThe pull request for this feature will soon be merged and will be included in the next release of Coverage Checks API plugin. After that, you can use it by adding the below section to your pipeline script:\n\nnode {\n    stage ('Checkout') {\n        checkout scm\n    }\n\n    stage ('Line and Branch Coverage') {\n        publishCoverage adapters: [jacoco('**/*/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_ALL_BUILD')\n    }\n}\n\nLike the warning checks, you can also disable the coverage checks by setting the field skipPublishingChecks, e.g.\n\npublishCoverage adapters: [jacoco('**/*/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_ALL_BUILD'), skipPublishingChecks: true\n\nNext Phase\n\nIn the next phase, we will turn our attention back to Checks API Plugin and GitHub Checks Plugin and add the following features in future versions:\n\nPipeline Support\n\nUsers can publish checks directly in a pipeline script without requiring a consumer plugin that supports the checks.\n\nRe-run Request\n\nUsers can re-run Jenkins build through Checks API.\n\nLastly, it is exciting to inform that we are currently making the checks feature available on ci.jenkins.io for all plugins hosted in the jenkinsci GitHub organization, please see INFRA-2694 for more details.\n\nResources\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nProject Page\n\nGitter Channel","title":"GitHub Checks API Plugin Project - Coding Phase 2","tags":["github","api","plugins","developer","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg","srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/77b35/XiongKezhi.jpg 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/d4a57/XiongKezhi.jpg 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/68974/XiongKezhi.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/ef6ff/XiongKezhi.webp 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/8257c/XiongKezhi.webp 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/6766a/XiongKezhi.webp 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/22bfc/XiongKezhi.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/XiongKezhi.jpeg"},"blog":null,"github":"XiongKezhi","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 Student. Kezhi is an open source enthusiast who enjoys sharing ideas with other developers. He started contributing to Jenkins in March 2020. Currently, he is working on <a href=\"https://github.com/XiongKezhi/checks-api-plugin\">GitHub Checks API Plugin</a>.</p>\n</div>","id":"XiongKezhi","irc":null,"linkedin":"kezhi-xiong-44234a188","name":"Kezhi Xiong","slug":"/blog/authors/xiongkezhi/","twitter":"AugustX_"}]}},{"node":{"date":"2020-08-04T00:00:00.000Z","id":"784b9495-ce55-533e-bf33-ddb9b2de1fea","slug":"/blog/2020/08/04/cdf-graduation/","strippedHtml":"We are happy to announce that the Jenkins project has achieved the graduated status in\nthe Continuous Delivery Foundation (CDF).\nThis status is officially effective Aug 03, 2020.\nJenkins is the first project to graduate in the CD Foundation.\nThanks to all contributors who made our graduation possible!\n\nIn this article, we will discuss what the CD Foundation membership and graduation mean to the Jenkins community.\nWe will also talk about what changed in Jenkins as a part of the graduation,\nand what are the future steps for the project.\n\nTo know more about the Jenkins graduation,\nsee also the announcement on the CD Foundation website.\nAlso see the special edition of the CD Foundation Newsletter for Jenkins user success stories and some surprise content.\nThe press release is available here.\n\nHow does CDF membership help us?\n\nAbout 18 months ago, Jenkins became one of the CDF founding projects, along with Jenkins X, Spinnaker and Tekton.\nA new foundation was formed to provide a vendor-neutral home for open source projects used for Continuous Delivery and Continuous Integration.\nSpecial interest groups were started to foster collaboration between projects and end user companies,\nmost notably:\nInteroperability,\nMLOps and\nSecurity SIGs.\nAlso, a Community Ambassador role was created to organize local meetups and to provide public-facing community representatives.\nMany former Jenkins Ambassadors and other contributors are now CDF Ambassadors, and they promote Jenkins and other projects there.\n\nThanks to this membership we addressed key project infrastructure needs.\nStarting from Jan 2020, CDF covers a significant part of the infrastructure costs\nincluding our services and CI/CD instances running on Microsoft Azure.\nThe CD Foundation provided us with legal assistance required to get code signing keys for the Jenkins project.\nThanks to that, we were able to switch to a new Jenkins Release Infrastructure.\nThe foundation sponsors the Zoom account we use for Jenkins Online Meetups and community meetings.\nIn the future we will continue to review ways of reducing maintenance overhead by switching some of our self-hosted services to equivalents provided by the Linux Foundation to CDF members.\n\nAnother important CDF membership benefit is community outreach and marketing.\nIt helped us to establish connections with other CI/CD projects and end user companies.\nThrough the foundation we have access to the DevStats service\nthat provides community contribution statistics and helps us track trends and discover areas for improvement.\nOn the marketing side, the foundation organizes webinars, podcasts and newsletters.\nJenkins is regularly represented there.\nThe CD Foundation also runs the meetup.com professional account which is used by local Jenkins communities for\nCI/CD and Jenkins Area Meetups.\nLast but not least, the Jenkins community is also represented at virtual conferences where CDF has a booth.\nAll of that helps to grow Jenkins visibility and to highlight new features and initiatives in the project.\n\nWhy did we graduate?\n\nThe Jenkins project has a long history of open governance which is a key part of today’s project success.\nStarting from 2011, the project has introduced the governance meeting which are open to anyone.\nMost of the discussions and decision making happen publicly in the mailing lists.\nIn 2015 we introduced teams, sub-projects and officer roles.\nIn 2017 we introduced the Jenkins Enhancement Proposal process which helped us to make the key architecture and governance decisions more open and transparent to the community and the Jenkins users.\nIn 2018 we introduced special interest groups that focus on community needs.\nIn 2019 we have expanded the Jenkins governance board\nso that it got more bandwidth to facilitate initiatives in the project.\n\nSince the Jenkins project inception 15 years ago, it has been steadily growing.\nNow it has millions of users and thousands of contributors.\nIn 2019 it has seen 5,433 contributors from 111 countries and 272 companies,\n67 core and 2,654 plugin releases,\n45,484 commits, 7,000+ pull requests.\nIn 2020 Q2 the project has seen 21% growth in pull requests numbers compared to 2019 Q2, bots excluded.\n\nOne may say that the Jenkins project already has everything needed to succeed.\nIt is a result of continuous work by many community members,\nand this work will never end as long as the project remains active.\nLike in any other industry, the CI/CD ecosystem changes every day and sets new expectations from the automation tools in this domain.\nJust as the tools evolve, open source communities need to evolve so that they can address expectations, and onboard more users and contributors.\nThe CDF graduation process helped us to discover opportunities for improvement,\nand address them.\nWe reviewed the project processes and compared them with the Graduated Project criteria defined in the CDF project lifecycle.\nBased on this review, we made changes in our processes and documentation.\nIt should improve the experience of Jenkins users,\nand help to make the Jenkins community more welcoming to existing and newcomer contributors.\n\nWhat changed for the project?\n\nBelow you can find a few key changes we have applied during the graduation process:\n\nPublic roadmap\n\nWe introduced a new public roadmap for the Jenkins project.\nThis roadmap aggregates key initiatives in all community areas: features, infrastructure, documentation, community, etc.\nIt makes the project more transparent to all Jenkins users and adopters,\nand at the same time helps potential contributors find the hot areas and opportunities for contribution.\nThe roadmap is driven by the Jenkins community and it has a fully public process documented in jep:14[].\n\nMore details about the public roadmap are coming next week, stay tuned for a separate blogpost.\nOn July 10th we had an online contributor meetup about the roadmap\nand you can find more information in its materials\n( slides, video recording).\n\nUser Documentation\n\nJenkins Weekly Release line is now documented on our website ( here).\nWe have also reworked the downloads page and added guidelines explaining how to verify downloads.\n\nA new list of Jenkins adopters was introduced on jenkins.io.\nThis list highlights Jenkins users and references their case studies and success stories,\nincluding ones submitted through the Jenkins Is The Way portal.\nPlease do not hesitate to add your company there!\n\nCommunity\n\nWe passed the Core Infrastructure Initiative (CII) certification.\nThis certification helps us to verify compliance with open source best practices\nand to make adjustments in the project (see the bullets below).\nIt also provides Jenkins users and adopters with a public summary about compliance with each best practice.\nDetails are on the Jenkins core page.\n\nJenkins Code of Conduct was updated\nto the new version of Contributor Covenant.\nIn particular, it sets best practices of behavior in the community, and expands definitions of unacceptable behavior.\n\nThe default Jenkins contributing template was updated to cover more common cases for plugin contributors.\nThis page provides links to the Participate and Contribute guidelines hosted on our website,\nand helps potential contributors to easily access the documentation.\n\nThe Jenkins Core maintainer guide was updated to include maintenance and issues triage guidelines.\nIt should help us to deliver quality releases and to timely triage and address issues reported by Jenkins users.\n\nWhat’s next?\n\nIt an honor to be the first project to reach the graduated stage in the Continuous Delivery Foundation,\nbut it is also a great responsibility for the project.\nAs a project, we plan to continue participating in the CDF activities and to work with other projects and end users to maintain the Jenkins' leader role in the CI/CD space.\n\nWe encourage everyone to join the project and participate in evolving the Jenkins project and driving its roadmap.\nIt does not necessarily mean committing code or documentation patches;\nuser feedback is also very important to the project.\nIf you are interested to contribute or to share your feedback,\nplease contact us in the Jenkins community channels ( mailing lists, chats)!\n\nAcknowledgements\n\nCDF graduation work was a major effort in the Jenkins community.\nCongratulations and thanks to the dozens of contributors who made our graduation possible.\nI would like to thank\nAlex Earl,\nAlyssa Tong,\nDan Lorenc,\nDaniel Beck,\nJeff Thompson,\nMarky Jackson,\nMark Waite,\nOlivier Vernin,\nTim Jacomb,\nTracy Miranda,\nUllrich Hafner,\nWadeck Follonier,\nand all other contributors who helped with reviews and provided their feedback!\n\nAlso thanks to the Continuous Delivery Foundation marketing team (Jacqueline Salinas, Jesse Casman and Roxanne Joncas) for their work on promoting the Jenkins project and, specifically, its graduation.\n\nAbout the Continuous Delivery Foundation\n\nThe Continuous Delivery Foundation (CDF) serves as the vendor-neutral home of many of the fastest-growing projects for continuous delivery, including Jenkins, Jenkins X, Tekton, and Spinnaker,\nas well as fosters collaboration between the industry’s top developers, end users and vendors to further continuous delivery best practices.\nThe CDF is part of the Linux Foundation, a nonprofit organization.\nFor more information about the foundation, please visit its website.\n\nMore information\n\nTo know more about the Jenkins graduation in the Continuous Delivery Foundation,\nsee the announcement on the CD Foundation website.\nAlso see the special edition of the CD Foundation Newsletter for Jenkins user success stories and some surprise content.\nThe press release is available here.","title":"Jenkins graduates in the Continuous Delivery Foundation","tags":["announcement","cdf","general","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-08-09T00:00:00.000Z","id":"babe2cb7-b1f3-538d-a0da-40bd4f32b839","slug":"/blog/2020/08/09/custom-distribution-service-phase-2/","strippedHtml":"Hello everyone,\nIt is time to wrap up another successfull phase for the custom distribution service project,\nand we have incorporated most of the features that we had planned at the start of the phase.\nIt has been an immense learning curve for me and the entire team.\n\nTo understand what the project is about and the past progress, please refer to the phase one blogpost\nhere.\n\nFront-End\n\nFilters for Plugins\n\nIn the previous phase we implemented the ability to add plugins to the configuration,\nand the ability to search these plugins via a search bar.\nSometimes though we would like to filter these plugins based on their usage,\npopularity, stars etc. Hence we have added a certain set of filters to these plugins.\nWe support only four major filters for now. They are:\n\nTitle\n\nMost installed\n\nRelevance\n\nTrending\n\nFilter implementation\n\nThe major heavy lifting is done by the plugin api which takes in the necessary parameters\nand returns the relevant plugins in the form of a json object,\nhere is an example of the api call url: const url = https://plugins.jenkins.io/api/plugins?$params .\n\nFor details, see:\n\nFeature request #9\n\nPull Request #76\n\nCommunity Configurations\n\nOne major deliverable for the project was the ability for users to share the configurations developed by them, so that they can be used widely within the community.\nFor example we see quite a lot of jenkins configurations involve being run on AWS and kubernetes and so on. Therefore it would be really good for the community to have a place to find and run\nthese configurations right out of the box.\n\nDesign Decision\n\nThe major design decision taken here was whether to include the configurations inside\nthe repository or to have them in a completely new repository.\nLet us talk about both these approaches.\n\nHaving the configurations in the current repository:\n\nThis allows us to have all of the relevant configurations inside the repository itself,\nand so users would not have to go fetch this in different repositories.\nWe could have issues with the release cycle and dependencies since,\nit would have to happen along with the custom distribution service project releases.\n\nHaving the configurations in a different repository:\n\nThis allows us to manage all of the configurations and the relevant dependencies separately and easily,\nthus avoiding any release conflict with the current repository.\nHowever it would be a bit difficult if users were to not find this repository.\n\nDecision : We still cannot quite agree on what is the best method so for now,\nI have included the url from which the community configurations are picked up as a\nconfiguration variable in the.env file which can be configured later and\ntherefore it can be up to the user to configure. Another advantage of having it configurable,\nis that the user can decide to load configurations which are private to his organization as well.\n\nFor details, see:\n\nIssue #6161\n\nPull Request #73\n\nBack-End\n\nWar Generation\n\nThe ability to generate and download war files has finally been achieved,\nthe reason this feature took so long to complete is because we had some difficulty\nin implementing the war generation and its tests. However this has been completed\nand can now be tested successfully.\n\nThings to take care while generating war files\n\nIn its current state the war generation cannot include casc.yml or groovy files\nif they are included in the configuration they would have to be added externally.\nThere is an issue opened here.\nThe war file generation would yell at you if you tried to build a war file with a jcasc file configuration.\n\nFor details, see:\n\nIssue #60\n\nPull Request #68\n\nPull Request Creation\n\nThis feature was included in the design document that I created after my GSoC selection.\nIt involves the ability to create pull requests via the front-end of the service.\nThe User Story behind this feature was that If I want to share a configuration with the community and I do not quite know how to use github or I do not want to do it via the terminal.\nThis feature includes creation of a bot that handles the creation of pull requests in the repository.\nThis bot would have to be installed by the jenkins organization in this repository and the bot would handle the rest.\n\nFor details, see:\n\nIssue #59\n\nPull Request #72\n\nDisclaimer:\n\nThis feature has however been put on the back-burner for now because\nwe are focusing on getting the project to be self hosted and therefore\nwould like to implement this once we have a clear path for the project to be hosted by the jenkins-infra team.If you would like to participate in the discussion here are the links for the pull requests,\nPR 1 and link: PR 2, or you can even jump in our gitter channel.\n\nIf you have been following my posts,\nI mentioned in my second week blog post that pulling in the json file consisting of more than\n1600 plugins took a bit more time that my liking.\nWe managed to solve that issue using a caching mechanism,\nso now the files are pulled in the first time you start the service and downloaded in a temporary folder. The next time you want to view the plugin cards they are pulled in directly from the temp directory bam ! thereby reducing time.\n\nFor details see Pull Request #90\n\nFixes and improvements\n\nPort 8080\n\nPort 8080 now does have a message instead of a whitelabel error message which is present\nby default in the spring-boot tomcat server setup.\nTurns out it requires overriding a particular class, and inserting a custom message\n\nFor details, see:\n\nPull Request #92\n\nWar Generation\n\nTill now while you were generating the war file,\nif something went wrong during genration the service would not complain it would just swallow the error and throw back a corrupted war file,\nhowever now we have added an error support feature\nthat will alert you when something goes wrong, the error is not very informative as of now,\nbut we are working on making it more informative in the future.\n\nFor details, see:\n\nWar generation error handling #91\n\nAdd Github controller and jwt helper #66\n\nDockerfile\n\nOne of the major milestones of this phase was to have a project that can be self hosted,\nneedless to say we needed the dockerfile i.e docker-compose.yml to spin the project with a few commands.\nThe major issue we faced here was that there was a bit of a problem making the two containers talk to each other. Let me give you a little bit of context here.\nOur docker-compose is constructed using two separate dockerfiles one for the backend of the service and the other for the front-end.\nThe backend makes api calls to the front-end via the proxy url i.e localhost:8080.\nWe now had to change this since the network bridge between the two containers spoke to each other via the backend-server name i.e app-server.\nTo brige that gap we have this PR that ensured that the docker compose works flawlessly.\n\nFor details, see:\n\nPull Request #82\n\nHowever there is a minor draw-back of the above approach was now the entire\nproject just relied on the docker compose and could not run using the simple\ncombination of npm and maven since the proxy was different.\nIn order to fix this I decided to follow a multiple environment approach,\nwhere we have multiple environment files that pick up the correct proxy and insert it at build time,\nto elaborate further we have two environment files,\n(using the env-cmd library ).env and the docker.env and we insert,\nthe correct file depending on how you want to build the project.\nFor instance if you want to run it using the dockerfile the command that is run under the hood is something along these lines — npm --env-cmd -f docker.env start scripts.\n\nFor details, see:\n\nPull Request #88\n\nOther links\n\nGitter Channel Link\nGSoC Proposal\nDesign Document\nDaily Notes\nDemo","title":"Custom Distribution Service : Phase 2 Blogpost","tags":["service","distribution","cloud-native","gsoc","gsoc2020","packaging","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/authors/sladyn98/","twitter":"SladynN"}]}},{"node":{"date":"2020-08-12T00:00:00.000Z","id":"52309c34-03ae-57ce-b801-39141f4c3b3c","slug":"/blog/2020/08/12/windows-installers-upgrade/","strippedHtml":"This article describes the transition from the old Jenkins Windows installer 2.235.2 (32 bit) to the new Jenkins Windows installer 2.235.3 (64 bit)\n\nLet’s take a look how Jenkins installation on Windows happened before release of this upgrade.\n\nStep 1\n\nIt’s evident that branding information is not present here.\n\nStep 2\n\nJenkins would be installed into the 32 bit programs directory along with a 32 bit Java 8 runtime environment.\n\nStep 3\n\nThere was no option to select the user that would run the Jenkins service or the network port that would be used.\n\nIssues\n\nThe previous installer had issues that needed to be resolved:\n\nOnly supported 32-bit installations\n\nBundled an outdated Java 8 runtime environment\n\nNo support for Java 11\n\nNo port selection during installation\n\nNo choice of account for the Jenkins service\n\nThe Program Files (x86) directory was used for the Jenkins home directory\n\nRoad Forward\n\nThe new Jenkins Windows Installer resolves those issues\n\nSupports 64 bit installations and drops 32 bit support\n\nSupports 64 bit Java 8 and 64 bit Java 11\n\nPort selection and validation from the installer\n\nService account selection and validation from the installer\n\nProgram is installed in Program Files with Jenkins home directory in %AppData% of the selected service account\n\nThe JENKINS_HOME directory is placed in the LocalAppData directory for the user that the service will run as, this aligns with modern Windows file system layouts\n\nThe installer has been updated with branding to make it look nicer and provide a better user experience\n\nScreenshots\n\nYou may see below the sequence of screenshots for the new installer:\n\nStep 1\n\nWe can see now the Jenkins logo as a prominent part of the installer UI.\n\nStep 2\n\nJenkins installs by default in the 64 bit programs folder rather than in the 32 bit folder.\nNow the Jenkins logo and name are in the header during entire process of installation.\n\nStep 3\n\nNow the installer allows both specifying and testing the credentials by validating that the account has LogonAsService rights.\n\nStep 4\n\nNow the installer also allows specifying the port that Jenkins should run on and will not continue until a valid port is entered and tested.\n\nStep 5\n\nNow instead of bundling a JRE, the installer searches for a compatible JRE on the system (in the current search no JRE was installed).\nIn case you would like to use a different JRE from the one found by the installer, you can browse and specify it.\nOnly Java 8 and Java 11 runtimes are supported.\nIn case the selected JRE is found to be version 11 the installer will automatically add the necessary arguments and additional jar files for running under Java 11.\n\nStep 6\n\nAll of the items that users can enter in the installer should be overridable on the command line for automated deployment as well. The full list of properties that can be overridden will be available soon.\n\nNext Steps\n\nWindows users have alternatives for their existing Jenkins installations:\n\nUpgrade from inside Jenkins\n\nThe \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.\nUpgrade from inside Jenkins will continue to use the current Java version.\nUpgrade from inside Jenkins will continue to use the current installation location.\n\nUpgrade with the new Jenkins MSI installer\n\nIf you run the new Jenkins MSI installer on your Jenkins that was installed with the old Jenkins MSI installer, it will prompt for a new port and a service account.\n\nStop and disable the existing Jenkins service from the Windows Service Manager\n\nRun the new installer to create the new installation with desired settings\n\nStop the newly installed Jenkins service\n\nCopy existing Jenkins configuration files to the new Jenkins home directory\n\nStart the newly installed Jenkins service\n\nAfter the new Jenkins MSI installer has run, the \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.","title":"Windows Installer Upgrades","tags":["windows","platform-sig","installers","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg","srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/534e5/vsilverman.jpg 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/99887/vsilverman.jpg 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/76fd4/vsilverman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/59a6b/vsilverman.webp 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/cbb78/vsilverman.webp 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/96250/vsilverman.webp 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/50511/vsilverman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}},"publicURL":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/vsilverman.jpg"},"blog":null,"github":"vsilverman","html":"<div class=\"paragraph\">\n<p>Vlad is an active user of Jenkins and at the beginning of 2020 he also started actively contributing to the Jenkins project. He resides in Silicon Valley and for 10+ years had been involved in building/testing business processes for large enterprises and mid-size companies.</p>\n</div>","id":"vsilverman","irc":null,"linkedin":null,"name":"Vlad Silverman","slug":"/blog/authors/vsilverman/","twitter":"vsilverman"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/slide_o_mix.jpg"},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix/","twitter":"alexcearl"}]}},{"node":{"date":"2020-08-25T00:00:00.000Z","id":"7a744457-8457-529e-9c68-1e00d5e790df","slug":"/blog/2020/08/25/external-fingerprint-storage-phase-3/","strippedHtml":"The final phase for the External Fingerprint Storage\nProject has come to an end and to finish off, we release one more fingerprint storage plugin:\nthe PostgreSQL Fingerprint Storage Plugin!\n\nThis post highlights the progress made during phase-3.\nTo understand what the project is about and the past progress, please refer to the\nphase-1 post and the\nphase-2 post.\n\nIntroducing the PostgreSQL Fingerprint Storage Plugin\n\nWhy PostgreSQL?\n\nThere were several reasons why it made sense to build another reference implementation, especially backed by PostgreSQL.\n\nRedis is a key-value storage, and hence stores the fingerprints as blobs.\nThe PostgreSQL plugin defines a relational structure for fingerprints.\nThis offers a more powerful way to query the database for fingerprint information.\nFingerprint facets can store extra information inside the fingerprints, which cannot be queried in Redis directly.\nPostgreSQL plugin allows powerful (indexing) and efficient querying strategies which can even query the facet metadata.\n\nAnother reason for building this plugin was to provide a basis for other relational database plugins to be built.\nIt also validates the flexibility and design of our external fingerprint storage API.\n\nSince PostgreSQL is a traditional disk storage database, it is more suitable for systems storing a massive number of\nfingerprints.\n\nAmong relational databases, PostgreSQL is quite popular, has extensive support, and is open-source.\nWe expect the new implementation to drive more adoption, and prove to be beneficial to the community.\n\nInstallation:\n\nThe plugin can be installed using the\nexperimental update center.\nFollow along the following steps after running Jenkins to download and install the plugin:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nGo to Advanced tab\n\nConfigure the Update Site URL as: https://updates.jenkins.io/experimental/update-center.json\n\nClick on Submit, and then press the Check Now button.\n\nGo to Available tab.\n\nSearch for PostgreSQL Fingerprint Storage Plugin and check the box along it.\n\nClick on Install without restart\n\nThe plugin should now be installed on the system.\n\nUsage\n\nOnce the plugin has been installed, you can configure the PostgreSQL server details by following the steps below:\n\nSelect Manage Jenkins\n\nSelect Configure System\n\nScroll to the section Fingerprints and choose PostgreSQL Fingerprint Storage in the dropdown for\nFingerprint Storage Engine.\n\nConfigure the following parameters to connect to your PostgreSQL instance:\n\nHost - Enter hostname where PostgreSQL is running\n\nPort - Specify the port on which PostgreSQL is running\n\nSSL - Click if SSL is enabled\n\nDatabase Name - Specify the database name inside the PostgreSQL instance to be used. Please note that the database\nwill not be created by the plugin, the user has to create the database.\n\nConnection Timeout - Set the connection timeout duration in seconds.\n\nSocket Timeout - Set the socket timeout duration in seconds.\n\nCredentials - Configure authentication using username and password to the PostgreSQL instance.\n\nUse the Test PostgreSQL Connection button to verify that the details are correct and Jenkins is able to connect to\nthe PostgreSQL instance.\n\n[IMPORTANT] When configuring the plugin for the first time, it is highly important to press the Perform PostgreSQL\nSchema Initialization button. It will automatically perform schema initialization and create the necessary indexes.\nThe button can also be used in the case the database is wiped out and schema needs to be recreated.\n\nPress the Save button.\n\nNow, all the fingerprints produced by this Jenkins instance should be saved in the configured PostgreSQL instance!\n\nQuerying the Fingerprint Database\n\nDue to the relational structure defined by PostgreSQL, it allows users/developers to query the fingerprint data which\nwas not possible using the Redis fingerprint storage plugin.\n\nThe fingerprint storage can act as a consolidated storage for multiple Jenkins instances.\nFor example, to search for a fingerprint id across Jenkins instances using the file name, the following query could be\nused:\n\nSELECT fingerprint_id FROM fingerprint.fingerprint\nWHERE filename = 'random_file';\n\nA sample query is provided which can be tweaked depending on the parameters to be searched:\n\nSELECT * FROM fingerprint.fingerprint\nWHERE fingerprint_id = 'random_id'\n        AND instance_id = 'random_jenkins_instance_id'\n        AND filename = 'random_file'\n        AND original_job_name = 'random_job'\n        AND original_job_build_number = 'random_build_number'\n        AND timestamp BETWEEN '2019-12-01 23:59:59'::timestamp AND now()::timestamp\n\nThe facets are stored in the database as jsonb.\nPostgreSQL offers support to query jsonb.\nThis is especially useful for querying the information stored inside fingerprint facets.\nAs an example, the Docker Traceability Plugin stores information like the name of Docker images inside these\nfacets.\nThese can be queried across Jenkins instances like so:\n\n>'imageName' = 'random_container';\n\nAt the moment these queries require working knowledge of the database.\nIn future, these queries can be abstracted away by plugins and the features made available to users directly inside\nJenkins.\n\nDemo\n\nExternal Fingerprint Storage Demo\n\nSlide deck\n\nReleases 🚀\n\nWe released the 0.1-alpha-1 version for the\nPostgreSQL Fingerprint Storage Plugin.\nPlease refer to the\n\nchangelog for more information.\n\nRedis Fingerprint Storage Plugin 1.0-rc-3 was also\nreleased.\nThe\n\nchangelog provides more details.\n\nA few API changes made in the Jenkins core were released in Jenkins-2.253.\nIt mainly includes exposing fingerprint range set serialization methods for plugins.\n\nFuture Directions\n\nThe relational structure of the plugin allows some performance improvements that can be made when implementing\ncleanup, as well as improving the performance of Fingerprint#add(String job, int buildNumber).\nThese designs were discussed and are a scope of future improvement.\n\nThe current external fingerprint storage API supports configuring multiple Jenkins instances to a single storage.\nThis opens up the possibility of developing traceability plugins which can track fingerprints across Jenkins instances.\n\nPlease consider reaching out to us if you feel any of the use cases would benefit you, or if you would like to share\nsome new use cases.\n\nAcknowledgements\n\nThe PostgreSQL Fingerprint Storage Plugin and the Redis Fingerprint Storage plugin are maintained by the\nGoogle Summer of Code (GSoC) Team for External\nFingerprint Storage for Jenkins.\nSpecial thanks to Oleg Nenashev,\nAndrey Falko, Mike Cirioli,\nTim Jacomb, and the entire Jenkins community for all the contribution to this project.\n\nAs we wrap up, we would like to point out that there are plenty of future directions and use cases for the externalized\nfingerprint storage, as mentioned in the previous section, and we welcome everybody to contribute.\n\nReaching Out\n\nFeel free to reach out to us for any questions, feedback, etc. on the project’s\nGitter Channel or the\nJenkins Developer Mailing list.\nWe use Jenkins Jira to track issues.\nFeel free to file issues under either the postgresql-fingerprint-storage-plugin or the\nredis-fingerprint-storage-plugin component depending on the plugin.\n\nOther Links\n\nPhase 1 Post\n\nPhase 2 Post\n\nPostgreSQL Fingerprint Storage Plugin\n\nRedis Fingerprint Storage Plugin\n\njep:226[]\n\nGitter Channel\n\nProject Page","title":"External Fingerprint Storage Phase-3 Update: Introducing the PostgreSQL Fingerprint Storage Plugin","tags":["plugins","fingerprint","cloud-native","external-storage","developer","PostgreSQL","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg","srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/77b35/stellargo.jpg 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/d4a57/stellargo.jpg 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/ef6ff/stellargo.webp 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/8257c/stellargo.webp 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/6766a/stellargo.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/stellargo.jpeg"},"blog":"https://medium.com/@sumitsarinofficial","github":"stellargo","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 student. Sumit is an engineering student (senior) at Netaji Subhas Institute of Technology, University of Delhi. He started his journey of contributing to Jenkins in December 2019. His tiny contribution revolved around the Jenkins Fingerprint engine. He is currently working on building <a href=\"https://www.jenkins.io/projects/gsoc/2020/projects/external-fingerprint-storage\">External Fingerprint Storage for Jenkins</a>.</p>\n</div>","id":"stellargo","irc":null,"linkedin":"sumit-sarin","name":"Sumit Sarin","slug":"/blog/authors/stellargo/","twitter":null}]}},{"node":{"date":"2020-08-27T00:00:00.000Z","id":"c3c50d8e-f813-526e-9f03-e29284122a65","slug":"/blog/2020/08/27/machine-learning-plugin-coding-phase3/","strippedHtml":"Good to see you all again !\n\nThis is my final blog post about coding phase 3 in Jenkins Machine Learning Plugin for GSoC 2020.\nBeing at the end of GSoC 2020, we had to finish all the pending issues and testing before a stable release in the main repository. Throughout this program, there were lots of learning and hard work will make this plugin valuable to the Data Science and Jenkins community.\n\nSummary\n\nWith combining all of the work in phase 1, 2 and 3, initial version of Machine learning plugin( 1.0 ) was successfully released in Jenkins plugin repository.\nAn interesting feature which allows users to connect to their existing programming language kernels more than connecting to only IPython kernel was introduced in this phase. It can be selected in multiple steps with different kernel.\nImages and graphs produced by Jupyter notebooks will be saved in user preferred folder in the workspace that can be used for reporting/analytic purposes later. Hoping this blog summarizes the Machine Learning’s features and future contributions. Thank you for your interest and support !!!\n\nMain features of Machine Learning plugin\n\nExecute Jupyter notebooks directly\n\nRun different language scripts using multiple build steps\n\nConvert Jupyter Notebooks to Python\n\nConfigure Jupyter kernels( IPython, IRKernel, IJulia etc) properties\n\nSupport to execute Notebooks/scripts on Agent\n\nExtract graph/map/images from the code\n\nEach build step can be associated with a machine learning task\n\nSupport for Windows and Linux\n\nFuture improvements\n\nImproving performance of the plugin\n\nTry to implement jira:JENKINS-63377[]\n\nSupport parameterized definitions in Notebooks jira:JENKINS-63478[]\n\nIncreasing testing code coverage\n\nMultiple language kernel support\n\nIf there are existing kernels in the system, user will be able to configure in the global configurations in order to apply in the builder/step configuration.\n\nSome popular interactive kernels\n\nIPython for python\n\nIRKernel for R\n\nIJulia for Julia\n\nIJavascript for javascript\n\nMore kernels and installation guides are found here. https://github.com/jupyter/jupyter/wiki/Jupyter-kernels\n\nDump images and graphs\n\nText output will be displayed in the console log. At the same time images/graphs/heat maps and HTMLs will be saved in the workspace. An action is shown in the left panel to display images in realtime. Due to the Content Security Policy of jenkins, some HTMLs which contain harmful javascript may not render in jenkins UI.\n\nFixed bugs\n\nThere were more bugs identified and fixed with many interactive testings. Setting the working directory of kernels was a big issue while getting datasets/files by script. Zeppelin process launcher was bypassed to fix this issue.\n\nPatch version released\n\nA major bug which was created while setting the process working directory had patched in the v1.0.1. The latest release is more stable now.\n\nAcknowledgement\n\nMachine Learning plugin had been developed under GSoC 2020 program. A huge thanks to Bruno P. Kinoshita, Marky Jackson, Shivay Lamba, Ioannis Moutsatsos and Org admins for this wonderful experience.\nI would be grateful for contributing this plugin continuously and more in Jenkins.\n\nResources\n\nCommunity Bonding blog post\n\nPhase 1 blog post\n\nPhase 2 blog post\n\nGithub\n\nProject page\n\nPlugin page\n\nDesign document","title":"Machine Learning Plugin project - Coding Phase 3 blog post","tags":["machinelearning","datascience","jupyter","plugins","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg","srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/9b030/loghijiaha.jpg 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/f38b5/loghijiaha.jpg 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/bcd2b/loghijiaha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/ceea6/loghijiaha.webp 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/45b82/loghijiaha.webp 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/933cd/loghijiaha.webp 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/6c13d/loghijiaha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":158}},"publicURL":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/loghijiaha.jpeg"},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"/blog/authors/loghijiaha/","twitter":"loghi5"}]}},{"node":{"date":"2020-08-27T00:00:00.000Z","id":"ab88123c-a9df-5bf7-97c3-bc6cd5656a55","slug":"/blog/2020/08/27/winsw-yaml-support/","strippedHtml":"Hello, world! GSoC 2020 Phase 3 has ended now and it was a great period for thw Jenkins Windows Services - YAML Configuration Support project.\nIn this blog post, I will announce the updates during the GSoC 2020 - Phase 2 and Phase 3. If you are not already aware of this project,\nI would recommend reading this blog post which was published after GSoC 2020 - Phase 1.\n\nProject Scope\n\nWindows Service Wrapper - YAML configuration support\n\nYAML schema validation\n\nNew CLI\n\nXML Schema validation\n\nYAML Configuration Support\n\nUnder WinSW - YAML configurations support, these tasks will be done.\n\nYAML to Object mapping\n\nAt the moment YAML object mapping is finished and merged.\nYou can find all the implementations in this Pull Request.\n\nExtend WinSW to support both XML and YAML\n\nThis task is already done and merged. Find the implementation in this Pull Request.\n\nYAML Configuration support for Extensions\n\nAt the moment there are 2 internal plugins in WinSW. RunAwayProcessKiller and SharedDirectoryMapper.\nWe allow users to provide configurations for those plugins in the same XML and YAML configuration file which is used to configure WinSW. This task is merged as well.\nPull Request\n\nYAML schema validation\n\nUsers can validate YAML configuration file against JSON schema file.\nUsers can use YAML utility tool from Visual Studio market place to validate YAML config file against JSON schema.\n\nKey updates in Phase 2 and Phase 3\n\nYAML Configuration structure\n\nEnvironment variables\n\nNow users can provide environment variables as a sequence of dictionaries that contains name and value for environment variables.\n\nTimeStamp values\n\nUsers can specify timestamp values in the same manner used in XML (e.g. 10 ms, 5 sec, 3 min)\n\nYAML configuration document was published. YAML Configuration Specification\n\nExtend the WinSW to support both XML and YAML\n\nYAML support for extensions\n\nYAML schema validation against JSON schema\n\nSample YAML Configuration File\n\nid: jenkins\nname: Jenkins\ndescription: This service runs Jenkins automation server.\nenv:\n    - name: JENKINS_HOME\n      value: '%LocalAppData%\\Jenkins.jenkins'\n    - name: LM_LICENSE_FILE\n      value: host1;host2\nexecutable: java\narguments: >-\n    -Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"E:\\Winsw Test\\yml6\\jenkins.war\" --httpPort=8081\nlog:\n    mode: rotate\nonFailure:\n    - action: restart\n      delay: 10 sec\n    - action: reboot\n      delay: 1 hour\nextensions:\n    - id: killOnStartup\n      enabled: yes\n      classname: WinSW.Plugins.RunawayProcessKiller.RunawayProcessKillerExtension\n      settings:\n            pidfile: '%BASE%\\pid.txt'\n            stopTimeOut: 5000\n            StoprootFirst: false\n    - id: mapNetworDirs\n      enabled: yes\n      classname: WinSW.Plugins.SharedDirectoryMapper.SharedDirectoryMapper\n      settings:\n            mapping:\n                - enabled: false\n                  label: N\n                  uncpath: \\\\UNC\n                - enabled: false\n                  label: M\n                  uncpath: \\\\UNC2\n\nNew CLI\n\nLet me explain in brief, why we need a new CLI.\nIn WinSW, we will keep both XML and YAML configuration support.\nBut according to the current implementation, the user can’t specify the configurations file explicitly.\nAlso, we want to let the user skip the schema validation as well.\nSo We decided to move into new CLI which is more structured with commands and options.\nPlease read my previous blog post to learn more about commands and options in the new CLI.\n\nKey updates in Phase 2 and Phase 3\n\nRemove the /redirect command\n\ntestwait command was removed and add the wait option to the test command.\n\nstopwait command was removed and add the wait option to the stop command.\n\nHow to try\n\nUser can configure the Windows Service Wrapper by both XML and YAML configuration files using the following steps.\n\nCreate the configuration file (XML or YAML).\n\nSave it with the same name as the Windows Service Wrapper executable name.\n\nPlace the configuration file inside the directory(or in a parent directory), where the Windows Service Wrapper executable is located.\n\nIf there are both XML and YAML configuraiton files, Windows Service Wrapper will be configured by the XML configuration file.\n\nGSoC 2020 Phase 2 Demo\n\nGSoC 2020 Phase 3 Demo\n\nFuture Works\n\nXML Schema validation\n\nXML configuration file will be validated with the XSD file.\nI have started working on this feature and you can find the implementation in this Pull Request.\n\nYAML Configuration validate on startup\n\nHow to contribute\n\nYou can find the GitHub repository in this link.\nIssues and Pull requests are always welcome. Also, you can communicate with us in the WinSW Gitter channel,\nwhich is a great way to get in touch and there are project sync up meetings every Tuesday at 13:30 UTC on the Gitter channel.\n\nSome useful links\n\nPresentation Slides\n\nProject Page\n\nProject Repository\n\nFeature preview\n\nGitter Channel\n\nYamlDotNet library\n\nCommand Line Parser library","title":"Jenkins Windows Services: YAML Configuration Support - GSoC Project Results","tags":["winsw","windows","jenkins","gsoc","gsoc2020","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"buddhikac96","html":"","id":"buddhikac96","irc":null,"linkedin":null,"name":"Buddhika Chathuranga","slug":"/blog/authors/buddhikac96/","twitter":null}]}},{"node":{"date":"2020-08-29T00:00:00.000Z","id":"a6cfa2b5-a75a-5920-892a-2548994c1318","slug":"/blog/2020/08/29/git-performance-improvement-phase3/","strippedHtml":"Since the beginning of the project, the core value which drove its progress was \"To enhance the user experience for running Jenkins jobs by reducing the overall execution time\".\n\nTo achieve this goal, we laid out a path:\n\nCompare the two existing git implementations i.e CliGitAPIImpl and JGitAPIImpl using performance benchmarking\n\nUse the results to create a feature which would improve the overall performance of git plugin\n\nAlso, fix existing user reported performance issues\n\nLet’s take a journey to understand how we’ve built the new features. If you’d like to skip the journey part, you can directly go to the [major performance improvements] section and the [minor performance section] to see what we’ve done!\n\nJourney to release\n\nThe project started with deciding to choose a git operation and then trying to compare the performance of that operation by using command line git and then with JGit.\n\nStage 1: Benchmark results with git fetch\n\nThe performance of git fetch (average execution time/op) is strongly correlated to the size of a repository\n\nThere exists an inflection point on the scale of repository size after which the nature of JGit performance changes (it starts to degrade)\n\nAfter running multiple benchmarks, it is safe to say that for a large sized repository command line git would be a better choice of implementation.\n\nWe can use this insight to implement a feature which avoids JGit with large repositories.\n\nStage 2: Comparing platforms\n\nThe project was also concerned that there might be important differences between operating systems.\nFor example, what if command line Git for Windows performed very differently than command line Git on Linux or FreeBSD?\nBenchmarks were run to compare fetch performance on several platforms.\n\nRunning git fetch operation for a 400 MiB sized repository on:\n\nAMD64 Microsoft Winders\n\nAMD64 FreeBSD\n\nIBM PowerPC 64 LE Ubuntu 18\n\nIBM System 390 Ubuntu 18\n\nThe result of running this experiment is given below:\n\nThe difference in performance between git and JGit remains constant across all platforms.\n\nBenchmark results on one platform are applicable to all platforms.\n\nStage 3: Performance of git fetch and repository structure\n\nThe area of the circle enclosing each parameter signifies the strength of the positive correlation between the performance of a git fetch operation and that parameter. From the diagram:\n\nSize of the aggregated objects is the dominant player in determining the execution time for a git fetch\n\nNumber of branches and Number of tags play a similar role but are strongly overshadowed by size of repository\n\nNumber of commits has a negligible effect on the performance of running git fetch\n\nAfter running these experiments from Stage-1 to Stage-3, we developed a solution called the GitToolChooser which is explained in the next stage\n\nStage 4: Faster checkout with Git tool chooser\n\nThis feature takes the responsibility of choosing the optimal implementation from the user and hands it to the plugin. It takes the decision of recommending an implementation on the basis of the size of the repository. Here is how it works.\n\nThe image above depicts the performance enhancements we have performed over the course of the GSoC project. These improvements have enabled the checkout step to be finished within half of what it used to take earlier in some cases.\n\nLet’s talk about performance improvements in two parts.\n\nMajor performance improvements\n\nBuilding Tensorflow (~800 MiB) using a Jenkins pipeline, there is over 50% reduction in overall time spent in completing a job!\nThe result is consistent multiple platforms.\n\nThe reason for such a decrease is the fact that JGit degrades in performance when we are talking about large sized repositories. Since the GitToolChooser is aware of this fact, it chooses to recommend command line git instead which saves the user some time.\n\nMinor performance improvements\n\nNote: Enable JGit before using the new performance features to let GitToolChooser work with more options → Here’s how\n\nBuilding the git plugin (~ 20 MiB) using a Jenkins pipeline, there is a drop of a second across all platforms when performance enhancement is enabled. Also, eliminating a redundant fetch reduces unnecessary load on git servers.\n\nThe reason for this change is the fact that JGit performs better than command line git for small sized repositories (<50MiB) as an already warmed up JVM favors the native Java implementation.\n\nReleases\n\nGit Plugin 4.4.0\n\nAdd GitToolChooser\n\nRemove redundant fetch\n\nGit Client Plugin 3.4.0\n\nAdd support to communicate compatibility of JGit with certain additional SCM behaviors\n\nThe road ahead\n\nSupport from other branch source plugins\n\nPlugins like the GitHub Branch Source Plugin or GitLab Branch Source Plugin need to extend an extension point provided by the git plugin to facilitate the exchange of information related to size of a remote repository hosted by the particular git provider\n\nJENKINS-63519 : GitToolChooser predicts the wrong implementation\n\nAddition of this feature to GitSCMSource\n\nDetection of lock related delays accessing the cache directories present on the controller\n\nThis issue was reported by the plugin maintainer Mark Waite, there is a need to reproduce the issue first and then find a possible solution.\n\nReaching out\n\nFeel free to reach out to us for any questions or feedback on the project’s\nGitter Channel or the\nJenkins Developer Mailing list.\nReport an issue at Jenkins Jira.\n\nUseful Links\n\nPhase 1 Blog: https://www.jenkins.io/blog/2020/07/09/git-performance-improvement-phase1/\n\nPhase 2 Blog: https://www.jenkins.io/blog/2020/07/29/git-performance-improvement-phase2/\n\nProject Page: https://www.jenkins.io/projects/gsoc/2020/projects/git-plugin-performance/\n\nDemonstration","title":"Git Plugin Performance Improvement: Final Phase and Release","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/rishabhbudhouliya.jpg"},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/authors/rishabhbudhouliya/","twitter":null}]}},{"node":{"date":"2020-08-31T00:00:00.000Z","id":"43eb825a-3d18-5e4f-a85a-0f03ad89902f","slug":"/blog/2020/08/31/custom-distribution-service/","strippedHtml":"Hello everyone,\n\nThis is the final blog post for the Custom Distribution Service project during the Google Summer of Code timeline.\nI have mixed feelings since we are almost near the finish line for one of the most amazing open source programs out there.\nHowever, it is time to wrap things up for this project and achieve a state where the project can be built upon and extended further.\nThis phase has been super busy with respect to the bug fixes, testing and getting the project hosted, so let us get straight into the phase 3 updates.\n\nFixes and Code quality assurance\n\nSet Jenkinsfile agent to linux\n\nWe realised that the build was failing on windows and that there was not really a use-case\nfor running it on windows for right now. Maybe it could be on a future roadmap. Therefore, we\ndecided to shift the testing to only linux agents with respect to running the tests on the jenkins\nserver.\n\nPull Request #116\n\nBackend port error message\n\nSpring boot has a default message on the port:8080 and therefore we wanted to change\nit to a custom message on the backend. So the major takeaway here is that we needed to\nimplement the Error Controller interface and include a custom message in it.\nThis was technical debt from the last phase and was completed and merged during this phase.\n\nPull Request #92\n\nPMD Analysis\n\nIn order to enhance the quality of the code, the PMD source code analyser was applied to the project.\nIt helped me catch tons of errors. When the initial PMD check was run and we found approximately 162 PMD errors. We realised some of them were not relevant and some of them could be fixed later.\n\nPull Request #102\n\nFindbugs Analysis\n\nAnother tool to improve code quality that we included in this phase was findbugs.\nIt did catch around 5-10 bugs in my code which I immediately resolved. Most of them were\naround the Closeable HTTP Request and an easy fix was the try with resources.\n\nPull Request #118\n\nJacoco Code Coverage\n\nWe needed to make sure most of the code we write had proper coverage for all branches and\nlines. Therefore we decided to include a JaCoco Code Coverage reporter that helped us find the\nuncovered lines and areas we need to improve coverage on.\n\nPull Request #103\n\nRemove JCasC generation\n\nWhile developing the service we quickly realised that the generation of the war package broke if we\nincluded a configuration as code section but did not provide a path to the corresponding required yml\nfile. Therefore we took a decision to remove the casc section all together. Maybe it will comeback in\na future patch\n\nPull Request link: #127\n\nIssue link: #65\n\nMinor Fixes\n\nLogging Fix: #99\n\nDocs Fix : link: #120\n\nUpdate Center Dump Fix : link: #125\n\nClass Path Fix: link: #126\n\nRelease Drafter Addition: link: #136\n\nFront end\n\nCommunity Config Navigation link\n\nThere was no community configuration link present for navigation which was added here.\n Now it is easier to navigate to the community page from the home page itself.\n\nPull Request #100\n\nDocker updates\n\nBuild everything with Docker\n\nThis was one of the major changes this phase with respect to making the service very easy to spin up locally, this change will greatly help community adoption since it eliminates the tools one needs to install locally. Initially the process was to run maven locally, generate all of the files and then copy all of its contents into the container. However, with this change we are going to generate all of the files inside the docker container itself. Allowing the user to just run a couple of commands to get the service up and running.\n\nSo some of the major changes we did with respect to the dockerfile was:\n\na) Copy all of the configuration files and pom.xml into the container.\n\nb) Run the command mvn clean package inside the container which generates the jar.\n\nc) Run the jar inside the container.\n\nPull Request #104\n\nHosting updates\n\nThis process was supposed to be a future roadmap, however the infra team approved and was super helpful\nin making this process as smooth as possible. Thanks to Gavin, Tim and Oblak for making this possible.\nHere is the google group dicussion\n\nThe project has now been hosted here as a preview. It still needs\nsome fixes to be fully functional.\n\nInfra Docker PR #131\n\nInfra Project Addition PR link: #393\n\nTesting Updates\n\nUnit test the services\n\nWith respect to community hosting and adoption, testing of the service one of the most important and major milestones for this phase was to test the majority of the code and we have completed the testing with flying colors. All of the services have been completely unit tested, which is a major accomplishment.\nFor the testing of the service we decided to go with wiremock which can be used to mock external services. Kezhi’s comment helped us to understand what we needed to do since he had done something quite similar in his Github Checks API project.\n\nSo we basically wiremocked the update-center url and made sure we were getting\nthe accurate response with appropriate control flow logic tested.\n\nwireMockRule.stubFor(get(urlPathMatching(\"/getUpdateCenter\"))\n                .willReturn(aResponse()\n                        .withStatus(200)\n                        .withHeader(\"Content-Type\", \"application/json\")\n                        .withBody(updateCenterBody)));\n\nPull Request #105\n\nAdd Update Center controller tests\n\nAnother major testing change involved testing the controllers. For this we decided to use the wiremock library in java to mock the server response when the controllers were invoked.\n\nFor example: If I have a controller that serves in an api called /api/plugin/getPluginList\nwiremock can be used to stub out its response when the system is under test. So we use something like this to test it out.\n\nwhen(updateService.downloadUpdateCenterJSON()).thenReturn(util.convertPayloadToJSON(dummyUpdateBody))\n\nWhen the particular controller is called the underlying service is mocked and it returns a response according to the one provided by us. To find more details the PR is here.\n\nPull Request #106\n\nAdd Packager Controller Tests\n\nAlong with the update center controller tests another controller that needed to be tested was the\npackager controller. Also we needed to make sure that all the branches for the controllers were properly tested. Additional details can be found in the PR below.\n\nPull Request #133\n\nDocker Compose Tests\n\nOne problem that we faced the entire phase was the docker containers. We regularly found out that due to\nsome changes in the codebase the docker container build sometimes broke, or even sometimes the inner api’s seemed to malfunction. In order to counteract that we decided to come up with some tests locally.\nSo what I did was basically introduce a set of bash scripts that would do the following:\n\na) Build the container using the docker-compose command.\n\nb) Run the container.\n\nc) Test the api’s using the exposed port.\n\nd) Teardown the running containers.\n\nPull Request #131\n\nUser Documentation\n\nWe also included a user docs guide so that it makes it super easy to get started with the service.\n\nPull Request #145\n\nFuture Roadmap\n\nThis has been a super exciting project to work on and I can definitely see this project being built\nupon and extended in the future.\n\nI would like to talk about some of the features that are left to come in and can be taken up in\na future roadmap discussion\n\na) JCasC Support :\n\nDescription: Support the generation of a Jenkins Configuration as Code file asking the user interactively for the plugins they select what would be the configuration they would want eg: If the user selects the slack plugin we need to ask him questions like what is the slack channel? what is the token? etc, and on the basis of this generate a casc file. This feature was initially planned to go into the service but we realised this is a project in its own capacity.\n\nb) Auto Pull Request Creation :\n\nDescription: Allow users to create a configuration file and immediately open a pull request on github\nwithout leaving the user interface. This was originally planned using a github bot and we started the work on it. But we were in doubt if the service would be hosted or not and therefore put the development on hold.\nYou can find the pull requests here:\n\nGithub Controller #72\n\nPull Request Creation Functions #66\n\nc) Synergy with Image Controller\n\nDescription: This feature requires some planning, some of the questions we can ask are:\n\na) Can we generate the images (i.e Image Controller).\nb) Can we have the service as a multipurpose generator ?\n\nStatistics\n\nThis phase has been the busiest of all phases and it has involved a lot of work, more than I had\ninitially expected in the phase. Although lines\nof code added is not an indication of work done, however 800 lines of Code added is a real personal milestone for me.\n\nPull Requests Opened\n26\n\nLines of Code Added\n1096\n\nLines of Docs Added\n200\n\nOther links\n\nGitter Channel Link\nGSoC Proposal\nDesign Document\nDaily Notes","title":"Custom Distribution Service : Phase 3 Blogpost","tags":["service","distribution","cloud-native","gsoc","gsoc2020","packaging","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/authors/sladyn98/","twitter":"SladynN"}]}},{"node":{"date":"2020-08-31T00:00:00.000Z","id":"6bac69c5-68d0-5291-8064-51a2296a084b","slug":"/blog/2020/08/31/github-checks-api-plugin-coding-phase-3/","strippedHtml":"This blog post is about our phase 3 progress on GitHub Checks API Project, you can find our previous blog posts for phase 1 and phase 2.\n\nAt the end of this summer, the GSoC journey for GitHub Checks API Project comes to an end as well.\nIn this blog post, I’ll show you our works during the last month:\n\nPipeline Support\n\nRerun Request Support\n\nGit SCM Support\n\nDocumentation\n\nAll the above features will be available in our planned 1.0.0 version of Checks API Plugin and GitHub Checks Plugin.\n\nCoding Phase 3 Demo\n\nPipeline Support\n\nThe pipeline support allows users to directly publish checks in their pipeline script without depending on any other consumers.\n\nThe check in the above screenshot is published by script:\n\npublishChecks name: 'pipeline check', title: 'pipeline ', summary: '# A pipeline check example',\n        text: \"## This check is published through the pipeline script\",\n        detailsURL: 'https://ci.jenkins.io'\n\nIf you want to publish checks to GitHub, please install the GitHub implementation and refer to the GitHub API documentation for the requirements for each field. A default value (build link) for detailsURL will be provided automatically.\n\nThis feature can be useful when many stages exist in your pipeline script and each takes a long time: you can publish a check for each stage to keep track of the build.\n\nRerun Request Support\n\nThe rerun request allows GitHub users to rerun the failed builds. When a build failed (which leads to a failed check), a Re-run button will be added automatically by GitHub.\n\nBy clicking the Re-run button, Jenkins will reschedule a build for the last commit of this branch.\n\nSince all checks of a commit are produced by a single build, you don’t have to rerun all failed checks, just rerun any one of the failed check will refresh all checks.\n\nGit SCM Support\n\nThanks to Ullrich 's great help, the GitHub Checks Plugin now supports Git SCM.\nThis means now you can publish checks for your freestyle project or any other projects that use Git SCM.\n\nDocument\n\nConsumers Guide and Implementation Guide are now available.\nAs a Jenkins developer, you can now start consuming our API or even providing an implementation for other SCM platforms beside GitHub.\n\nAcknowledgment\n\nThe whole GitHub Checks API project is started as a Google Summer of Code project. Much appreciate my mentors ( Tim and Ullrich) for their great help during the whole summer. Also huge thanks to the Jenkins GSoC SIG and the whole community for the technique support and resources.\n\nResources\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nProject Page\n\nGitter Channel","title":"GitHub Checks API Plugin Project - Coding Phase 3","tags":["github","api","plugins","developer","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg","srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/77b35/XiongKezhi.jpg 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/d4a57/XiongKezhi.jpg 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/68974/XiongKezhi.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/ef6ff/XiongKezhi.webp 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/8257c/XiongKezhi.webp 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/6766a/XiongKezhi.webp 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/22bfc/XiongKezhi.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/XiongKezhi.jpeg"},"blog":null,"github":"XiongKezhi","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 Student. Kezhi is an open source enthusiast who enjoys sharing ideas with other developers. He started contributing to Jenkins in March 2020. Currently, he is working on <a href=\"https://github.com/XiongKezhi/checks-api-plugin\">GitHub Checks API Plugin</a>.</p>\n</div>","id":"XiongKezhi","irc":null,"linkedin":"kezhi-xiong-44234a188","name":"Kezhi Xiong","slug":"/blog/authors/xiongkezhi/","twitter":"AugustX_"}]}},{"node":{"date":"2020-09-10T00:00:00.000Z","id":"a847810a-0c71-5703-bb4a-557bea75dea1","slug":"/blog/2020/09/10/jenkins-continuous-evolution-cdcon/","strippedHtml":"The Jenkins project has been around for over fifteen years and is the defacto platform for CI/CD. One of the reasons it continues to be so ubiquitous is that Jenkins constantly evolves and offers flexibility to integrate other tools that work well for your solution.\n\nAt CDCon, on October 7-8, there are two particular Jenkins talks that will focus on new directions that the Jenkins platform is evolving too and getting better and better for users.\n\nHeard of JCasC and Not Sure Where to Start? Let me Help You!\n\nConfiguration as code is a best practice for your CI/CD setup as it makes the complex process of setting up Jenkins simpler and more reproducible. Jenkins Configuration as Code (JCasc) enables Jenkins users to define the whole configuration as a simple, plain text YAML syntax. With JCasc, setting up a new Jenkins controller is easier than ever before. To get started with JCasC some initial effort is required. This talk walks you through a basic setup for easily spinning up new Jenkins instances.\n\nOctober 7 at 2:20 PM PST\nSpeaker: Ewelina Wilkosz, Eficode\n\nEwelina W is passionate about making sure that her customers' software is being built, tested and released in the best possible way. And, most importantly, that software developers don’t hate the process. Ewelina has been involved in Jenkins Configuration as Code plugin development from the very beginning. This is a must-see talk where Ewelina will also share some tips and tricks. The talk will feature using Docker, Jenkins and GitHub Actions as a quick way to build… Jenkins!\n\nBridging the Gap with Tekton-client-plugin for Jenkins\n\nTekton provides Kubernetes-native CI/CD building blocks. It enables users to take full advantage of cloud-native features around scalability and high availability. Jenkins flexibility enables integration with Tekton. This talk showcases the new tekton-client-plugin for Jenkins that enables Jenkins to interact with Tekton pipelines on a Kubernetes cluster. Tekton and Jenkins are both CDF projects and this talk highlights the first steps towards better Tekton and Jenkins interoperability, a key goal of the CD Foundation.\n\nOctober 7 at 11:40 AM PST\nSpeaker: Vibhav Bobade, Red Hat\n\nRegister for CDCon\n\nBoth these talks showcase the ultimate flexibility and power of the Jenkins platform and how it continues to evolve to meet the challenges of modern-day CI/CD. Don’t miss out; register for CDCon to attend.\n\nCDCon has pledged to donate 100% of the proceeds received from CDCon 2020 registration to charitable causes: Black Girls Code, Women Who Code and the CDF Diversity Fund. Registrants indicate which charitable fund they want their 25 USD registration fees to go to during registration. If you can’t afford the registration cost, please apply for the diversity scholarship.","title":"Learn more about Jenkins' continuous evolution at CDCon","tags":["cdcon","talks","jcasc","cicd","tekton"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/4ea1f/cdfoundation.jpg","srcSet":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/b8799/cdfoundation.jpg 32w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/c15a4/cdfoundation.jpg 64w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/4ea1f/cdfoundation.jpg 128w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/d4baf/cdfoundation.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/c9eb6/cdfoundation.webp 32w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/5f6e9/cdfoundation.webp 64w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/b881c/cdfoundation.webp 128w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/3f20b/cdfoundation.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":122}},"publicURL":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/cdfoundation.jpg"},"blog":"https://cd.foundation/news/blog/","github":"cdfoundation","html":"<div class=\"paragraph\">\n<p>The Continuous Delivery Foundation (CDF) serves as the vendor-neutral home of many of the fastest-growing projects for continuous delivery, including Jenkins, Jenkins X, Spinnaker, and Tekton.\nCDF supports DevOps practitioners with an open model, training, industry guidelines, and a portability focus.</p>\n</div>","id":"cdfoundation","irc":null,"linkedin":null,"name":"Continuous Delivery Foundation","slug":"/blog/authors/cdfoundation/","twitter":"cdeliveryfdn"}]}},{"node":{"date":"2020-09-12T00:00:00.000Z","id":"a3ff4762-962b-5dfe-9279-693999cbe8b8","slug":"/blog/2020/09/12/new-jenkins-release-observations/","strippedHtml":"This article describes our observations during Windows testing of the Jenkins 2.249.1 release candidate.\n\nUpgrade testing\n\nJenkins 2.249.1 is a new long term support release with user interface improvements and changes in Windows support.\nIt is the first long term support release to drop support for Microsoft.NET framework 2.0.\nThe end of support for Microsoft.NET framework 2.0 was announced in the Windows Support Updates blog post.\nThe Windows support upgrade guidelines describe major things to consider when upgrading Jenkins controllers and agents on Windows.\n\nAs part of our preparation for the release, we tested several configurations.\nThis article describes our experiences with those configurations.\n\nUpgrade approaches\n\nWe tested controller and agent upgrades from Jenkins 2.235.x to 2.249.1-rc on Windows.\nThe tests included:\n\n32 bit Windows MSI\n\n64 bit Windows MSI\n\nWAR (file) on Windows\n\nUpgrade process\n\nOur upgrade process included:\n\nInstall a previous version of Jenkins controller on Windows\n\nInstall a previous version of Jenkins agent on Windows and configure it as a service\n\nUpgrade Jenkins controller from \"Manage Jenkins\"\n\nRestart the Jenkins Windows service for the controller\n\nUpgrade the Jenkins agent on Windows with the latest agent.jar\n\nRestart the Jenkins Windows service for the agent\n\nTesting results\n\nWe successfully tested\n\nRestarting Windows service for controller ( JENKINS-63198)\n\nRestarting Windows service for agents ( JENKINS-63223)\n\nWe confirmed that we can continue our Level 1 support policy for Jenkins 2.249.1.\n\n32 bit Windows MSI\n\nPrior to Jenkins 2.235.3, the Jenkins LTS Windows installer was provided as a 32 bit MSI and included a bundled Java 8 runtime environment.\nThe Jenkins agent can be downloaded and run through Java web start using the bundled Java 8 runtime environment.\nThe agent can also be configured to run as a service using the bundled Java 8 runtime environment.\n\nJenkins controller\n\nJenkins 2.235.1 installs JRE 8u144 for 32 bit Windows.\nThe installer configures the Jenkins controller to run as the SYSTEM user.\n\nRefer to the Windows Installer Updates blog post for details of the controller installation process with the 32 bit MSI.\n\nJenkins agent\n\nJenkins agents on Windows are often configured to \"Launch agent by connecting it to the master\".\nThe Jenkins agent configuration correctly warns that the controller must open the TCP port for inbound agents in the \"Configure Global Security\" page.\nIt is easiest to allow Jenkins to choose the port (a \"Random\" port).\nJenkins selects a random available port number and shares that port number with agents during their initial connection to the Jenkins http port.\n\nConfigure the agent\n\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\n\nDownload the agent\n\nThe agent starts the first time by clicking the \"Launch\" button on the agent configuration page (only available with Java 8).\nThat downloads the \"slave-agent.jnlp\" file from the web browser.\n\nStart the agent\n\nThe downloaded file needs to be opened from a command prompt using the javaws command that is included with the bundled JRE:\n\nC:\\> \"C:\\Program Files (x86)\\Jenkins\\jre\\bin\\javaws.exe\" -wait slave-agent.jnlp\n\nThe javaws program has been removed from  the most recent releases of Java 8 and from Java 11.\nRefer to [Jenkins agent and icedtea] for a technique that can help users of the most recent releases of Java 8.\n\nJava web start (javaws.exe) prompts for permission to run the program with this dialog:\n\nInstall the agent as a service\n\nThe agent runs and displays a window on the desktop with a single menu entry, \"Install as a service\".\n\nWhen the \"Install as a service\" menu item is clicked, the agent is adjusted to run as a Windows service using the SYSTEM account.\n\nUpgrade the controller\n\nThe Jenkins controller on Windows can be upgraded to Jenkins 2.249.1 from the \"Manage Jenkins\" page.\nThe upgrade process downloads the new jenkins.war file, saves the current version in case of later downgrade, and offers to restart.\n\nUpgrade the agent\n\nThe Jenkins inbound agent is not upgraded automatically.\nThe agent administrator downloads the most recent agent.jar from their Jenkins controller, stops the running agent, and replaces the installed agent.jar with the downloaded version.\nThe agent service will reconnect to the Jenkins controller after the administrator restarts it.\n\n64 bit Windows MSI\n\nBeginning with Jenkins 2.235.3, the Jenkins LTS Windows installer is a 64 bit MSI.\nIt runs Jenkins with the 64 bit JDK (Java 8 or Java 11) selected by the user.\n\nJenkins controller\n\nJenkins 2.235.3 was installed using AdoptOpenJDK Java 8u262 in one test.\nIt was installed using AdoptOpenJDK Java 11.0.8 in another test.\nIn both cases, the installer configured the Jenkins controller to run with the Windows service account we had previously configured.\n\nRefer to the Windows Installer Updates blog post for details of the controller installation process with the 64 bit MSI.\n\nJenkins agent\n\nJenkins agents on Windows are often configured to \"Launch agent by connecting it to the master\".\nThe Jenkins agent configuration correctly warns that the controller must open the TCP port for inbound agents in the \"Configure Global Security\" page.\nIt is easiest to allow Jenkins to choose the port (a \"Random\" port).\nJenkins selects a random available port number and shares that port number with agents during their initial connection to the Jenkins http port.\n\nConfigure the agent\n\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\n\nDownload the agent\n\nThe agent was started the first time by clicking the \"Launch\" button on the agent configuration page (only available with Java 8).\nThat downloads the \"slave-agent.jnlp\" file from the web browser.\n\nStart the agent with IcedTea-Web\n\nRecent versions of Java 8 and all versions of Java 11 have removed the javaws command.\nJenkins agents for Java 8 can still be started with the javaws command, but it needs to be downloaded separately from the JVM.\nWe open \"slave-agent.jnlp\" from a command prompt using the javaws command that is available from AdoptOpenJDK IcedTea :\n\nC:\\> C:\\icedtea-web-1.8.3.win.bin\\icedtea-web-image\\bin\\javaws.exe -wait slave-agent.jnlp\n\nJava web start (javaws.exe) prompts for permission to run the program with this dialog:\n\nInstall the agent as a service\n\nThe agent runs and displays a window on the desktop with a single menu entry, \"Install as a service\".\n\nWhen the \"Install as a service\" menu item is clicked, the agent is installed and configured to run as a Windows service using the SYSTEM account.\n\nUpgrading the controller\n\nThe Jenkins controller on Windows was upgraded to Jenkins 2.249.1 from the \"Manage Jenkins\" page.\nThe upgrade process downloads the new jenkins.war file, saves the current version in case of later downgrade, and offers to restart.\n\nUpgrading the agent\n\nThe Jenkins inbound agent is not upgraded automatically or from a Jenkins user interface.\nThe agent administrator downloads the most recent agent.jar from their Jenkins controller and replaces the installed agent.jar with the downloaded version.\n\nWAR (file) on Windows\n\nJenkins allows users to run the Jenkins web archive (WAR) file from a command line and then install it as a service from within Jenkins.\nThis installation technique uses the Jenkins WAR file but does not use a Windows MSI package.\nThe Jenkins WAR file includes the necessary components to install and configure Jenkins as a service.\n\nInstall controller as a service\n\nWhen the Jenkins war file is started from a Windows command prompt, \"Manage Jenkins\" includes \"Install as a service\".\nAn administrator selects that entry and Jenkins will configure itself to run as a service/\nThe installer configures the Jenkins controller to run as the SYSTEM user.\n\nJenkins agent\n\nJenkins agents on Windows are often configured to \"Launch agent by connecting it to the master\".\nThe Jenkins agent configuration correctly warns that the controller must open the TCP port for inbound agents in the \"Configure Global Security\" page.\nIt is easiest to allow Jenkins to choose the port (a \"Random\" port).\nJenkins selects a random available port number and shares that port number with agents during their initial connection to the Jenkins http port.\n\nConfigure the agent\n\nAfter opening the Jenkins TCP port for inbound agents, we configured a new agent from the \"Nodes\" menu\nThis created an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\n\nDownload the agent\n\nThe agent was started the first time by clicking the \"Launch\" button on the agent configuration page (only available with Java 8).\nThat downloads the \"slave-agent.jnlp\" file from the web browser.\n\nStart the agent with IcedTea-Web\n\nRecent versions of Java 8 and all versions of Java 11 have removed the javaws command.\nJenkins agents for Java 8 can still be started with the javaws command, but it needs to be downloaded separately from the JVM.\nOpen \"slave-agent.jnlp\" from a command prompt using the javaws command that is available from AdoptOpenJDK IcedTea-Web :\n\nC:\\> C:\\icedtea-web-1.8.3.win.bin\\icedtea-web-image\\bin\\javaws.exe -wait slave-agent.jnlp\n\nJava web start (javaws.exe) prompts for permission to run the program with this dialog:\n\nInstall the agent as a service\n\nThe agent runs and displays a window on the desktop with a single menu entry, \"Install as a service\".\n\nWhen the \"Install as a service\" menu item is clicked, the agent is installed and configured to run as a Windows service using the SYSTEM account.\n\nConclusion\n\nJenkins controller installation is best done with the new 64 bit MSI package.\nPrevious controller installations can be upgraded to the most recent Jenkins release from within Jenkins.\n\nJenkins inbound agent installation is more complicated now that the javaws.exe program is not included in the JDK.\nThe AdoptOpenJDK IcedTea-Web project allows administrators to install and configure Jenkins inbound agents with most of the ease that was available in prior Java releases.","title":"Testing Jenkins 2.249.1 on Windows","tags":["windows","platform-sig","installers","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg","srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/534e5/vsilverman.jpg 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/99887/vsilverman.jpg 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/76fd4/vsilverman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/59a6b/vsilverman.webp 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/cbb78/vsilverman.webp 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/96250/vsilverman.webp 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/50511/vsilverman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}},"publicURL":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/vsilverman.jpg"},"blog":null,"github":"vsilverman","html":"<div class=\"paragraph\">\n<p>Vlad is an active user of Jenkins and at the beginning of 2020 he also started actively contributing to the Jenkins project. He resides in Silicon Valley and for 10+ years had been involved in building/testing business processes for large enterprises and mid-size companies.</p>\n</div>","id":"vsilverman","irc":null,"linkedin":null,"name":"Vlad Silverman","slug":"/blog/authors/vsilverman/","twitter":"vsilverman"}]}},{"node":{"date":"2020-09-19T00:00:00.000Z","id":"1be8a810-e566-5f46-aae8-affa7e1b8407","slug":"/blog/2020/09/19/jenkins-at-devops-world-2020/","strippedHtml":"The annual DevOps World, formerly known as DevOps World | Jenkins World is next week - Sept 22-24, with workshops on Sept 25. Just like other events this year, DevOps World pivoted to a virtual event but that doesn’t mean there is a shortage of sessions or networking opportunities. There will be over 50 Jenkins/open source sessions and opportunities to virtually connect with over 20,000+ attendees on the event platform. Below are just a few sessions, the full agenda can be found HERE :\n\nJenkins: Where It Is and Where It is Going\n\nDate: Tuesday, September 22, 7:00 a.m.-7:30 a.m (PDT)\n\nSpeaker: Oleg Nenashev\n\nJenkins keeps evolving to address demands from its users and contributors: configuration as code, better support of cloud-native technologies, etc. Recently, we have introduced a public roadmap for the project, and there are many key initiatives in development and preview phases. This session will cover the current state of Jenkins and what’s next for the project.\n\nManaging DevSecOps Pipelines at Scale with Jenkins Templating Engine\n\nDate: Tuesday, September 22, 11:30 a.m.-12:00 p.m. (PDT)\n\nSpeaker: Steven Terrana\n\nAre you currently helping build or maintain a Jenkins pipeline for more than one application or team? Are you tired of copying and pasting Jenkinsfiles and tweaking them to fit each team’s specific needs? This session will feature a live demonstration of getting up and running with the Jenkins Templating Engine (JTE). Attendees will learn how to stop creating bespoke pipelines on a per-application basis and, instead, create tool-agnostic pipeline templates that multiple teams can inherit - regardless of tech stack.\n\neBay’s Journey Building CI at Scale\n\nDate: Tuesday, September 22, 12:30 p.m.-1:00 p.m.(PDT)\n\nSpeakers: Ravi Kiran Rao Bukka & Vasumathy Seenuvasan\n\nA scalable CI platform with 6,000+ Jenkins instances serving around 43,000 builds per day on multi-cluster Kubernetes. A system built with metrics, key resource tuning, remediation’s and security in place. Join this session to hear from eBay on their journey of best practices and learnings about open source.\n\nMachine Learning Plugins for Data Science in Jenkins\n\nDate: Wednesday, September 23, 11:00 a.m.-11:15 a.m.(PDT)\n\nSpeaker: Loghi Perinpanayagam\n\nMachine Learning has evolved rapidly in the software industry for recent years. Jenkins CI/CD can be a good practice to deliver a high reliable product in the end. We have done an initial startup on this plugin that can be used to build Jupyter Notebooks, Python files and JSON files in Zeppelin format. In addition, the build wrappers could be used to convert Jupyter Notebooks to Python/JSON and/or copy the files to the workspace for more actions.  This Machine Learning plugin will endeavor to satisfy the data science community together with the help of other plugins. Success of this plugin will definitely serve much benefits to the community and Jenkins.\n\nJenkins UI Gets a Makeover\n\nDate: Thursday, September 24, 7:30 a.m.-8:00 a.m.(PDT)\n\nSpeakers: Felix Queiruga & Jeremy Hartley\n\nAn overview of the Jenkins UI overhaul. We are taking an iterative approach to gradually refresh the Jenkins UI. This approach will make Jenkins look fresh and modern, without changing the way users are accustomed to working with Jenkins or require plugins to be rewritten to render properly in the new Jenkins UI. Join this session to learn the changes we’ve made and how you can help to improve the Jenkins UI.\n\nThe event is free to everyone and recordings will be available on-demand. Registration is required to access the on-demand recordings. And don’t forget to visit the CDF booth in the expo hall for one on one Q&A’s with Jenkins experts.","title":"Jenkins at DevOps World 2020","tags":["events","conference","cicd","talks","workshops"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2020-09-24T00:00:00.000Z","id":"ce6df408-6cd5-5276-88d1-f05a7d26b213","slug":"/blog/2020/09/24/board-elections/","strippedHtml":"Jenkins 2020 Elections are over, thanks to all participants!\nPlease see the results announcement.\n\nWe are happy to announce the 2020 elections in the Jenkins project!\nNominations are open for two governance board and for all five officer positions,\nnamely: Security, Events, Release, Infrastructure, and Documentation.\nThe board positions and officer roles are an essential part of Jenkins' community governance and well-being.\nWe invite Jenkins contributors and community members to sign-up for elections and to nominate contributors for the elected roles.\nDeadline for nominations is Oct 15, voter registration ends on Nov 02.\n\nThese are the second elections held by the Jenkins project.\nDuring the 2019 elections, we elected 3 board members and 5 officers.\nYou can find the voting results here.\nThis year, we decided to make a few changes in the election process based on the 2019 elections feedback.\n\nKey dates\n\nSep 24 - Nominations open, voting sign-up begins.\n\nOct 15 - Board and officer nominations deadline.\n\nOct 26 (or later) - List of candidates is published, including personal statements.\n\nNov 10 - Voting begins. Condorcet Internet Voting Service will be used for voting.\n\nNov 24 - Voting sign-up is over.\n\nNov 27 - Voting ends, 11PM UTC.\n\nDec 03 - Election results are announced and take effect.\n\nSigning up for voting\n\nAny Jenkins individual contributor is eligible to vote in the election\nif there was a contribution made before September 01, 2020.\nContribution does not mean a code contribution,\nall contributions count:\ndocumentation patches,\ncode reviews,\nsubstantial issue reports,\nissues and mailing list responses,\nsocial media posts,\ntesting,\netc.\nSuch a contribution should be public.\n\nYou can register to vote in one of two ways:\n\nFill out this Google Form.\nThis way requires logging into your Google Account to verify authenticity.\n\nSend an email to jenkins-2020-elections@googlegroups.com.\nYou will need to provide the information specified here.\n\nDuring the registration period, the election committee will process the form submissions and prepare a list of the registered voters.\nIn the case of rejection, one of the election committee members will send a rejection email.\nEvery individual contributor is expected to vote only once.\n\nDeadline for the voter registration is November 24.\n\nNominating contributors\n\nSuggestions from the community members are highly valued,\nand the board welcomes additional nominations.\nIf you feel that a particular person is well suited to help guide Jenkins, please submit a name and the reason for your nomination to jenkinsci-board@googlegroups.com.\nSelf nominations are also welcome.\n\nDeadline for nominations is October 15.\n\nTerms\n\nThe terms of office for these elected positions are:\n\nOfficer positions (1 year): December 03, 2020 to December 2, 2021\n\nGoverning board member (2 years): December 03, 2020 to December 2, 2022\n\nElections committee\n\nThe 2020 elections are coordinated by the Jenkins Governance Board members who are not up for re-election this year:\nAlex Earl,\nUllrich Hafner, and\nOleg Nenashev.\nThese contributors are responsible for managing the process,\npreparing the nominee list for elections,\nforming and verifying the voter list,\nprocessing the votes,\nand announcing the results.\n\nYou can contact the election committee via jenkins-2020-elections@googlegroups.com.\nPlease use this email for any queries and feedback regarding the elections.\n\nReferences\n\nJenkins Governance Board and Jenkins Officers\n\nJenkins Board and Officer Election Process\n\n2019 election results\n\nElections coordination in the mailing list","title":"2020 Jenkins Board and Officer elections. Nominations and voter registration are open!","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-09-25T00:00:00.000Z","id":"0691e7e4-2e97-54ec-ab3c-e0f175b8a679","slug":"/blog/2020/09/25/document-jenkins-on-kubernetes-introduction/","strippedHtml":"I’m thrilled to announce that I will be participating in Google Season of Docs (GSoD)\n2020 with the Jenkins project. I started contributing to Jenkins documentation during the technical writer\nexploration phase for Google Season of Docs 2020 and I must say, my journey so far\nhas been nothing short of amazing majorly because of the supportive community behind this project.\nI chose the Jenkins project because I understood this project from a user point of view as I had been exposed to setting up, configuring,\nand using Jenkins to automate CI/CD processes. I piqued interest in two of Jenkins project ideas,\nPlugin documentation migration and update and Document Jenkins on Kubernetes, submitted proposals for these two projects and to my utmost joy, the latter was selected.\n\nIn this article, I’m going to be explaining what my selected project is about and why this project is important to the Jenkins community and its users.\n\nIntroduction\n\nKubernetes is a platform-agnostic container orchestration tool created by Google and heavily supported\nby the open-source community as a project of the Cloud Native Computing Foundation.\nIt allows you to use container instances and manage them for scaling and fault tolerance.\nIt also handles a wide range of management activities that would otherwise require separate solutions or custom code,\nincluding request routing, container discovery, health checks, and rolling updates.\n\nKubernetes is compatible with the majority of CI/CD tools which allow developers to run tests,\ndeploy builds in Kubernetes and update applications with no downtime.\nOne of the most popular CI/CD tools now is Jenkins for the following reasons:\n\nIt is open-source and free.\n\nit is user-friendly, easy to install and does not require additional installations or components.\n\nJenkins is also quite easy to configure, modify and extend.\n\nIt deploys code and generates test reports.\n\nIt also boasts a rich plugin ecosystem. The extensive pool of plugins makes Jenkins flexible and allows building, deploying and automating across various platforms.\n\nJenkins can be configured according to the requirements for continuous integrations and continuous delivery.\n\nJenkins is available for all platforms and different operating systems, whether it is OS X, Windows or Linux.\n\nMost of the integration work is automated. Hence fewer integration issues. This saves both time and money over the lifespan of a project.\n\nThe following reasons have made Jenkins on Kubernetes a popular theme for Jenkins users, however,\nthere’s currently no central location for documentation describing Jenkins on Kubernetes,\nthereby making it difficult for Jenkins on Kubernetes users to navigate and find information.\nThis project would create a new Kubernetes Volume on Jenkins.io which would describe the concepts,\ntechniques, and choices for Kubernetes users running Jenkins.\n\nCurrent State\n\nThere are a lot of presentations and articles about running Jenkins on Kubernetes, however,\nthere’s no central location for describing Jenkins on Kubernetes. This makes it difficult for:\n\nJenkins on Kubernetes users to navigate and find information\n\nTrack, update and maintain information on Jenkins on Kubernetes\n\nProject Improvements\n\nTo solve the existing issue with Jenkins on Kubernetes documentation,\na new Kubernetes volume will be created on Jenkins.io.\nThis Volume is going to aggregate user guides, information on cloud providers and demos on Jenkins on Kubernetes.\nYou can find the proposed contents for the new volume here.\nFeel free to comment on any suggestions you might have in the proposed content doc.\n\nThis project will also provide the following advantages:\n\nImprove the user experience of Jenkins on Kubernetes users by giving them a one-stop-shop for information on Jenkins on Kubernetes.\n\nMake it easy to track, update and maintain information on Jenkins on Kubernetes using the Solutions page\n\nReference the existing community documentation for Jenkins on K8s (plugins and tools/integrations).\n\nHow to guides, tutorials and explanations of concepts and techniques in Jenkins on Kubernetes.\n\nJust-In-Time documentation which means that rather than documenting every feature comprehensively,\nwe will produce and release documentation in bits but continuously based on popular questions,\nfeedback and area of interests gathered from the community and users.\n\nProject Timeline\n\nFind below a summary of the project timeline.\n\nCommunity bonding ( August 17 - September 13 )\n\nSet up a communication channel and time (due to time difference).\n\nRefine my goals and set expectations on both sides.\n\nLearn more about the community and Jenkins.\n\nGather and thoroughly study existing resources that will be useful and helpful to the project.\n\nPre-planning of the project\n\nContacting Stakeholders and onboarding contributors\n\nDocumentation Period\n\nThis period is going to be focused on creating contents which include user guides,\ntutorials, demos, etc. for Jenkins on Kubernetes.\nSome of the topics to be covered include Installing Jenkins on Kubernetes,\nAdministering Jenkins on Kubernetes, Cloud providers and much more.\n\nDocumentation Timeline\n\n1st Month (September - October)\n\nSome basic prerequisites for installing jenkins on kubernetes include docker, a kubernetes cluster, and optionally Helm or the Jenkins Operator for Kubernetes.\n\nHelm is a package manager which automates the process of installing, configuring, upgrading, and removing complex Kubernetes application. A Helm chart defines several Kubernetes resources as a set. Helm can make deployments easier and repeatable because all resources for an application are deployed by running one command.\n\nHelm has two elements, a client (helm) and a server (Tiller). The server element runs inside a Kubernetes cluster and manages the installation of charts. With Helm, configuration settings are kept in values.yaml file separate from the manifest formats. The configuration values can be changed according to application need without touching the rest of the manifest.\n\nOn the other hand, the Jenkins operator is a Kubernetes native operator which fully manages Jenkins on Kubernetes. It is easy to install with just a few manifests and allows users to configure and manage Jenkins on Kubernetes. To run jenkins-operator, you need to have a running Kubernetes cluster and kubectl installed.\n\nThe Jenkins Operator provides out of the box:\n\nIntegration with Kubernetes — preconfigured kubernetes-plugin for provisioning dynamic Jenkins Slaves as Pods\n\nPipelines as Code — declarative way to version your pipelines in VCS\n\nExtensibility via Groovy scripts or Configuration as Code plugin-customize your Jenkins, configure OAuth authorization and more\n\nSecurity and Hardening — an initial security hardening of Jenkins instance via Groovy scripts to prevent security vulnerabilities\n\nIn the first month, the focus will be on documenting an introductory section.\nThis section will include but is not limited to Setting up Kubernetes cluster, Installing Jenkins on Kubernetes, exploring the various approaches by which this can be achieved such as using helm package manager or the Jenkins Operator as explained above and Administering Jenkins on Kubernetes.\n\n2nd Month (October - November)\n\nIn the second month, the focus will be on documenting how to setup up CI/CD pipelines using Jenkins and Kubernetes on different cloud providers.\nSome of the cloud providers we will be looking at include but are not limited to:\n\nAmazon Web Service (AWS)\n\nAzure Kubernetes Service\n\nGoogle Cloud\n\n3rd Month (November - December)\n\nIn the final month, the focus will be on creating demos and tutorials,\nsubmitting project report, evaluation of mentors and finally,\npublishing a report of my experience as a participant in Season of Docs.\n\nConclusion\n\nJenkins community is actively working towards improving its documentation to create a better\nexperience for Jenkins users and invites technical writers to join the community and contribute to the Jenkins on Kubernetes project.\n\nTo contribute to the Jenkins on Kubernetes project, simply join the Jenkins documentation Gitter channel and drop a message,\nyou can also find the Google season of docs office hour notes and recordings for Jenkins on Kubernetes here.\nGSOD office hours take place twice a week on Mondays and Thursdays between 6pm GMT+1 and 7pm GMT+1,\nif you would like to be part of these meetings, you can indicate interest in the Jenkins Documentation\nGitter channel and we would be happy to have you.\n\nIf you are also a newcomer and would like to contribute to Jenkins, documentation is a great place to contribute.\nA lot of small patches can be done from the GitHub web interface even without cloning repositories locally.\nYou can find some good first issues to get started with here.\n\nFind more information on contributing to Jenkins documentation here.\nIf you have further questions about the Jenkins on Kubernetes project or contributing to Jenkins,\nyou can reach out on the Jenkins documentation Gitter channel.\n\nAdditional Resources\n\nGSoD Proposal\n\nGSoD Office Hours Notes\n\nGoogle Season of Docs - Startup\n\nGoogle Season of Docs on jenkins.io\n\nDocs SIG for Google Season of Docs startup ( video)","title":"Documenting Jenkins on Kubernetes Introduction","tags":["kubernetes","documentation","gsod","gsod2020"],"authors":[{"avatar":null,"blog":null,"github":"zaycodes","html":"<div class=\"paragraph\">\n<p>Zainab is a software developer and technical writer who is passionate about contributing to open source, improving technical documentation and advocating for gender diversity in open source collaboration. She started contributing to Jenkins documentation during the technical writer exploration phase for <a href=\"https://developers.google.com/season-of-docs\">Google Season of Docs</a> 2020, and is currently working on <a href=\"/sigs/docs/#jenkins-on-kubernetes\">Documentation for Jenkins on Kubernetes</a>.</p>\n</div>","id":"zaycodes","irc":null,"linkedin":"zaycodes","name":"Zainab Abubakar","slug":"/blog/authors/zaycodes/","twitter":"zaycodes"}]}},{"node":{"date":"2020-10-20T00:00:00.000Z","id":"2f05be94-85ad-5b81-b393-4fd50549545d","slug":"/blog/2020/10/20/Cross-Industry-DevOps-3-Firms-Get-It-Right-with-Jenkins/","strippedHtml":"Some months ago, we took a significant step in helping the Jenkins community share their stories of how they improved workflows, sped up testing, and saw better quality results after implementing Jenkins into their software development processes.\n\nBy the end of the year, we’ll have over 50 Jenkins user stories published with many more in the pipeline. We invite you to explore them all but wanted to share three inspiring examples highlighting how various organizations approach — and implement — Jenkins in the workplace. Enjoy!\n\nStory 1: Jenkins is the way to tackle any challenge\n\nEnterprise-wide CI/CD solution caters to the complex problems that project teams face each day, as told by Jenkins user Mark Baumann:\n\n“Our development teams work in a wide range of projects and domains. We have a very diverse tooling landscape since the projects work with all kinds of different software tools. Of course, projects in the embedded domain will have different toolsets than those working in the automotive domain.\n\nEach project team created its own CI Toolchain, which caused a lot of work for the developers and the IT department. Each project needed to set up their own virtual machine, install and manage their own CI Server, Version Management, and whatever they needed. Creating such a toolchain could easily take up weeks until it was running because there was no standard solution and each team had to start from scratch.”\n\nDiscover how ITK-Engineering GmbH developed a company-wide, common, internal CI/CD toolchain and increased the number of builds for each project and how nearly all departments are now practicing CI/CD. The full Jenkins / ITK Engineering story is here!\n\nStory 2: Jenkins is the way to add spicy flavors to agency processes\n\nA creative agency start-up simplifies the build, test, and deploy steps, allowing the small team to focus more on the deliverables and less on the process. As told by Jenkins user Erik Woitschig:\n\n“It was quite a challenge to streamline and combine all the services to build an artifact to deploy. Because of our micro service-oriented and distributed architecture, the most challenging part of rethinking our build, test, and deploy process was to figure out how best to sync the deployment of all services. We also had to retest builds properly to go live or initiate a rollback.\n\nWith Jenkins and some pipelines, it was relatively simple to create a local and distributed artifact of our application to quickly share and deploy across the team, locally and globally.”\n\nBecause Jenkins is simple to install and easy to maintain, Muzkat has increased productivity far beyond that of a 3-person team. Read on to learn how this bootstrapped Berlin-based agency is making a go of it with Jenkins. The full Jenkins / Muzkat story is here!\n\nStory 3: Jenkins is the way to focus on your code\n\nAs demands for the Wright Medical’s services grew, they required an agile DevOps environment that would grow and scale along with the tech team, as told by Jenkins user Christophe Carpentier:\n\n“What was critical to our success was the stability of Jenkins and a significant number of reliable plugins! We could take a few plugins, set up our workflow, and add GitLab and SonarQube integration without ever stopping or losing data in over a year. We found that all of the problems we encountered were our own, and that is why it was critical to make Jenkins an essential part of our workflow.\n\nWith this implementation, Jenkins allows more than would be manually possible. It flawlessly updates our staging environments, blocks commits based on the SonarQube analysis, and provides us with near-instant feedback on merge requests.”\n\nLearn how Wright Medical supports a growing dev team by switching to an agile DevOps process that allows for automatic daily releases — versus weekly manual builds. Best of all, it’s letting the developers focus on building great code rather than infrastructure. The full Jenkins / Wright Medical story is here!\n\nWhat are you building?\n\nHope you enjoy these Jenkins user stories. You’ll find that “Jenkins Is The Way” website is a global showcase of how developers and engineers build, deploy, and automate great stuff with Jenkins. If you want to share your story, we’ll send you a free Jenkins Is The Way T-Shirt in return. Hope to hear from you soon!","title":"Cross-Industry DevOps: 3 Firms Get It Right with Jenkins","tags":["jenkinsistheway","Jenkinsuserstories"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2020-10-21T00:00:00.000Z","id":"7c9b1586-7a87-5fd5-8543-1a27aa94a68f","slug":"/blog/2020/10/21/a-sustainable-pattern-with-shared-library/","strippedHtml":"Table of Contents\n\nContext\nThe Problems\nThe Solution\n\nShared Library\nDuplication\nDocumentation\nScalability\nInstallation Agnostic\nFeature Toggling\n\nThis post will describe how I use a shared library in Jenkins. Typically when using multibranch pipeline.\n\nIf possible (if not forced to) I implement the pipelines without multibranch. I previously wrote about how I do that with my Generic Webhook Trigger Plugin in a previous post. But this will be my second choice, If I am not allowed to remove the Jenkinsfile :s from the repositories entirely.\n\nContext\n\nWithin an organization, you typically have a few different kinds of repositories. Each repository versioning one application. You may use different techniques for different kinds of applications. The Jenkins organization on GitHub is an example with 2300 repositories.\n\nThe Problems\n\nLarge Jenkinsfiles in every repository containing duplicated code. It seems common that the Jenkinsfile :s in every repository contains much more than just the things that are unique for that repository. The shared libraries feature may not be used, or it is used but not with an optimal pattern.\n\nInstallation specific Jenkinsfile:s that only work with one specific Jenkins installation. Sometimes I see multiple Jenkinsfile :s, one for each purpose or Jenkins installation.\n\nNo documentation and/or no natural place to write documentation.\n\nDevelopment is slow. Adding new features to repositories is a time consuming task. I want to be able to push features to 1000+ repositories without having to update their Jenkinsfile :s.\n\nNo flexible way of doing feature toggling. When maintaining a large number of repositories it is sometimes nice to introduce a feature to a subset of those repositories. If that works well, the feature is introduced to all repositories.\n\nThe Solution\n\nMy solution is a pattern that is inspired by how the Jenkins organization on GitHub does it with its buildPlugin(). But it is not exactly the same.\n\nShared Library\n\nHere is how I organize my shared libraries.\n\nJenkinsfile\n\nI put this in the Jenkinsfile :s:\n\nbuildRepo()\n\nDefault Configuration\n\nI provide a default configuration that any repository will get, if no other configuration is given in buildRepo().\n\nI create a vars/getConfig.groovy with:\n\ndef call(givenConfig = [:]) {\n  def defaultConfig = [\n    /**\n      * The Jenkins node, or label, that will be allocated for this build.\n      */\n    \"jenkinsNode\": \"BUILD\",\n    /**\n      * All config specific to NPM repo type.\n      */\n    \"npm\": [\n      /**\n        * Whether or not to run Cypress tests, if there are any.\n        */\n      \"cypress\": true\n    ],\n    \"maven\": [\n      /**\n        * Whether or not to run integration tests, if there are any.\n        */\n      \"integTest\": true\n    ]\n  ]\n  // https://e.printstacktrace.blog/how-to-merge-two-maps-in-groovy/\n  def effectiveConfig merge(defaultConfig, givenConfig)\n  println \"Configuration is documented here: https://whereverYouHos/getConfig.groovy\"\n  println \"Default config: \" + defaultConfig\n  println \"Given config: \" + givenConfig\n  println \"Effective config: \" + effectiveConfig\n  return effectiveConfig\n}\n\nBuild Plan\n\nI construct a build plan as early as possible. Taking decisions on what will be done in this build. So that the rest of the code becomes more streamlined.\n\nI try to rely as much as possible on conventions. I may provide configuration that lets users turn off features, but they are otherwise turned on if they are detected.\n\nI create a vars/getBuildPlan.groovy with:\n\ndef call(effectiveConfig = [:]) {\n  def derivedBuildPlan = [\n    \"repoType\": \"NOT DETECTED\"\n    \"npm\": [],\n    \"maven\": []\n  ]\n\n  node {\n    deleteDir()\n    checkout([$class: 'GitSCM',\n      branches: [[name: '*/branchName']],\n      extensions: [\n          [$class: 'SparseCheckoutPaths',\n            sparseCheckoutPaths:\n            [[$class:'SparseCheckoutPath', path:'package.json,pom.xml']]\n          ]\n      ],\n      userRemoteConfigs: [[credentialsId: 'someID',\n      url: 'git@link.git']]\n    ])\n\n    if (fileExists('package.json')) {\n      def packageJSON = readJSON file: 'package.json'\n      derivedBuildPlan.repoType = \"NPM\"\n      derivedBuildPlan.npm.cypress = effectiveConfig.npm.cypress && packageJSON.devDependencies.cypress\n      derivedBuildPlan.npm.eslint = packageJSON.devDependencies.eslint\n      derivedBuildPlan.npm.tslint = packageJSON.devDependencies.tslint\n    } else if (fileExists('pom.xml')) {\n      derivedBuildPlan.repoType = \"MAVEN\"\n      derivedBuildPlan.maven.integTest = effectiveConfig.maven.integTest && fileExists('src/integtest')\n    } else {\n      throw RuntimeException('Unable to detect repoType')\n    }\n\n    println \"Build plan: \" + derivedBuildPlan\n    deleteDir()\n  }\n  return derivedBuildPlan\n}\n\nPublic API\n\nThis is the public API, this is what I want the users of this library to actually invoke.\n\nI implement a buildRepo() method that will use that default configuration. It can also be called with a subset of the default configuration to tweak it.\n\nI create a vars/buildRepo.groovy with:\n\ndef call(givenConfig = [:]) {\n  def effectiveConfig = getConfig(givenConfig)\n  def buildPlan = getBuildPlan(effectiveConfig)\n\n  if (effectiveConfig.repoType == 'MAVEN')\n    buildRepoMaven(buildPlan);\n  } else if (effectiveConfig.repoType == 'NPM')\n    buildRepoNpm(buildPlan);\n  }\n}\n\nA user can get all the default behavior with:\n\nbuildRepo()\n\nA user can also choose not to run Cypress, even if it exists in the repository:\n\nbuildRepo([\n  \"npm\": [\n    \"cypress\": false\n  ]\n])\n\nSupporting Methods\n\nThis is usually much more complex, but I put some code here just to have a complete implementation.\n\nI create a vars/buildRepoNpm.groovy with:\n\ndef call(buildPlan = [:]) {\n  node(buildPlan.jenkinsNode) {\n    stage(\"Install\") {\n      sh \"npm install\"\n    }\n    stage(\"Build\") {\n      sh \"npm run build\"\n    }\n    if (buildPlan.npm.tslint) {\n      stage(\"TSlint\") {\n        sh \"npm run tslint\"\n      }\n    }\n    if (buildPlan.npm.eslint) {\n      stage(\"ESlint\") {\n        sh \"npm run eslint\"\n      }\n    }\n    if (buildPlan.npm.cypress) {\n      stage(\"Cypress\") {\n        sh \"npm run e2e:cypress\"\n      }\n    }\n  }\n}\n\nI create a vars/buildRepoMaven.groovy with:\n\ndef call(buildPlan = [:]) {\n  node(buildPlan.jenkinsNode) {\n    if (buildPlan.maven.integTest) {\n      stage(\"Verify\") {\n        sh \"mvn verify\"\n      }\n    } else {\n      stage(\"Package\") {\n        sh \"mvn package\"\n      }\n    }\n  }\n}\n\nDuplication\n\nThe Jenkinsfile :s are kept extremely small. It is only when they, for some reason, diverge from the default config that they need to be changed.\n\nDocumentation\n\nThere is one single point where documentation is written, the getConfig.groovy -file. It can be referred to whenever someone asks for documentation.\n\nScalability\n\nThis is a highly scalable pattern. Both with regards to performance and maintainability in code.\n\nIt scales in performance because the Jenkinsfile :s can be used by any Jenkins installation. So that you can scale by adding several completely separate Jenkins installations, not only nodes.\n\nIt scales in code because it adds just a tiny Jenkinsfile to repositories. It relies on conventions instead, like the existence of attributes in package.json and location of integration tests in src/integtest.\n\nInstallation Agnostic\n\nThe Jenkinsfile :s does not point at any implementation of this API. It just invokes it and it is up to the Jenkins installation to implement it, with a shared libraries.\n\nIt can even be used by something that is not Jenkins. Perhaps you decide to do something in a Docker container, you can still parse the Jenkinsfile with Groovy or (with some magic) with any language.\n\nFeature Toggling\n\nThe shared library can do feature toggling by:\n\nLetting some feature be enabled by default for every repository with name starting with x.\n\nOr, adding some default config saying\"feature-x-enabled\": false, while some repos change their Jenkinsfile :s to buildRepo([\"feature-x-enabled\": true]).\n\nWhenever the feature feels stable, it can be enabled for everyone by changing only the shared library.","title":"A sustainable pattern with shared library","tags":["pipeline","scalability","sharedlibrary","infrastructure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#98a8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg","srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/77b35/tomasbjerre.jpg 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/d4a57/tomasbjerre.jpg 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/68974/tomasbjerre.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/ef6ff/tomasbjerre.webp 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/8257c/tomasbjerre.webp 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/6766a/tomasbjerre.webp 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/22bfc/tomasbjerre.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/tomasbjerre.jpg"},"blog":"https://bjurr.com/","github":"tomasbjerre","html":"<div class=\"paragraph\">\n<p>Tomas Bjerre is an experienced fullstack software developer. Been working full time since 2010 after graduating with a masters degree in computer science from Lund University (Faculty of Engineering, LTH). Is currently working full time and maintaining a bunch of Jenkins plugins on his spare time.</p>\n</div>","id":"tomasbjerre","irc":null,"linkedin":"tomasbjerre","name":"Tomas Bjerre","slug":"/blog/authors/tomasbjerre/","twitter":null}]}},{"node":{"date":"2020-10-28T00:00:00.000Z","id":"9b07c9a0-6617-5760-a321-56da263f62d5","slug":"/blog/2020/10/28/election-candidates/","strippedHtml":"Jenkins 2020 Elections are over, thanks to all participants!\nPlease see the results announcement.\n\nAs you probably know, in a few weeks we will have the Jenkins 2020 elections.\nWe will be electing two governance board members and five officers,\nnamely: Security, Events, Release, Infrastructure, and Documentation.\nAfter the announcement on Sep 24,\nwe have been accepting nominations from community members.\n\nAfter the processing and confirmations with potential candidates,\nthe Jenkins 2020 Elections committee is happy to announce the candidates for the Jenkins Governance Board and Officer roles:\n\nGovernance Board candidates: Andrey Falko, Ewelina Wilkosz, Frederic Gurr, Gavin Mogan, Justin Harringa, Mark Waite, Marky Jackson, Steven Terrana, Zhao Xiaojie (Rick)\n\nRelease officer: Baptiste Mathus, Tim Jacomb, Victor Martinez\n\nSecurity officer: Daniel Beck (uncontested)\n\nEvents officer: Marky Jackson (uncontested)\n\nInfrastructure Officer: Olivier Vernin (uncontested)\n\nDocumentation officer: Mark Waite (uncontested)\n\nWe encourage all community members to support the candidates and to participate in the elections!\n\nKey dates\n\nNov 10 - Voting begins. Condorcet Internet Voting Service will be used for voting.\n\nNov 24 - Voting sign-up is over.\n\nNov 27 - Voting ends, 11PM UTC.\n\nDec 03 - Election results are announced and take effect.\n\nSigning up for voting\n\nAny Jenkins individual contributor is eligible to vote in the election\nif there was a contribution made before September 01, 2020.\nContribution does not mean a code contribution,\nall contributions count:\ndocumentation patches,\ncode reviews,\nsubstantial issue reports,\nissues and mailing list responses,\nsocial media posts,\ntesting,\netc.\nSuch a contribution should be public.\n\nYou can register to vote in one of two ways:\n\nFill out this Google Form.\nThis way requires logging into your Google Account to verify authenticity.\n\nSend an email to jenkins-2020-elections@googlegroups.com.\nYou will need to provide the information specified here.\n\nOnce sign-up is over, the election committee will process the form submissions and prepare a list of the registered voters.\nIn the case of rejection, one of the election committee members will send a rejection email.\nEvery individual contributor is expected to vote only once.\n\nCandidates\n\nBelow you can find statements, affiliations and profile links provided by the candidates.\n\nMinimum copy-editing was applied to the content by the Jenkins 2020 Elections Committee.\nCandidates are sorted by the first name.\n\nGovernance Board\n\nAndrey Falko\n\nI have been a Jenkins user and administrator on and off since around 2010.\nIn 2016, I got into evangelism by organizing a\nJenkins Area Meetup in San Francisco.\nI spoke at Jenkins World 2017\nand again at\nJenkins World 2018.\nJustin Harringa and I wrote and open sourced the Config Driven Pipeline Plugin.\nFor two years running, I’ve been a mentor for two Google Summer of Code projects:\nExternal Fingerprint Storage Project and\nRemoting over Apache Kafka with Kubernetes features.\n\nWith this nomination, I hope to continue helping strengthen and\nprogress the community further. As a member of the governance board,\nI’ll bring a fresh perspective by asking questions, providing feedback,\nand finding opportunities for others to contribute.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Stripe\n\nEwelina Wilkosz\n\nAs a consultant I support my customers with their Jenkins issues since the beginning of 2017.\nAnd almost from the start it was some kind of \"as code\" approach.\nThe experience I gained during that time resulted in getting myself involved in the development of Configuration as Code Plugin for Jenkins.\nI consider becoming a part of Jenkins Community one of the most valuable experiences in my career so far.\nI appreciate how much I have learned and how welcoming the community is.\n\nI am not a very active contributor these days, at least when it comes to code, but what I have to offer is rather extensive experience\nwith Jenkins end users - from small, single instance setups to environments with hundreds of controllers run in a different way on different operating systems.\nEvery day I see challenges those users go through, I know what issues they are facing and which features they consider valuable or missing.\nAs a Jenkins Governance Board Member I can represent those users.\n\nThanks to my involvement in Configuration as Code Plugin development\nI had a chance to deliver a number of public presentations\nwhere I focused on the benefits of the solution and tried to make it easier for newcomers to try it.\nHere are a few examples of my activities related to Jenkins Configuration as Code:\nblogpost,\ncdCON presentation,\npodcast recording.\nSo my focus is not only on representing users but also on educating them, and educating myself,\nso I actually know what they need and why.\n\nProfile links:\nGitHub,\nLinkedIn,\nTwitter\n\nAffiliations: Eficode (former Praqma)\n\nFrederic Gurr\n\nI started to use Jenkins back in 2008, when it still had a different name.\nIn 2011 I started to contribute and created my first little plugin called\nextra-columns.\nSince then, using and administering Jenkins servers has become a major part of my work life,\nwhile getting involved with the Jenkins community\nkickstarted my interest and involvement with open source software and communities.\n\nI’ve been working as a release engineer at the Eclipse Foundation since 2016,\nsupporting 250+ Jenkins instances for various open source projects.\nI’d be honored to bring a user and admin oriented perspective to the Governance Board and help\nshape the future of Jenkins.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: Eclipse Foundation\n\nGavin Mogan\n\nI got started with Jenkins early on when I was just getting started with testing.\nI knew there had to be a way to run the tests automatically and report on them back to people.\nI started hacking my own tools before I came across Jenkins (then Hudson) and was hooked ever since.\nOver the years I’ve managed to install and configure Jenkins at various jobs,\nand even was employed making internal and external plugins and integrations.\nYou’ll often find me on the Jenkins IRC and Gitter channels as well as the subreddit giving a hand to people who are stuck.\nI also try to get involved with Jenkins Infrastructure projects as much as I can.\nI currently maintain the plugin site, plugin site API, Jenkins Wiki exporter, and a bunch of other minor projects.\nI also help run Vancouver’s chapter of Nodeschool.\n\nIf elected, I would like to address improving commercial support avenues.\nRight now it’s a lot of people flailing in isolation.\nI would like to not only improve things so people can find easier ways to get help,\nbut also encourage more users to help others, and push for a\ncentralized source of companies providing commercial support.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: Digital Ocean, Nodeschool Vancouver\n\nJustin Harringa\n\nThe nomination is quite an honor for me.\nI have been a Hudson/Jenkins user since around 2009/2010 when\nI started working through driving continuous integration in a corporate environment at John Deere.\nAs time went on, I began contributing some small fixes to plugins such as the Job DSL Plugin, OpenID Plugin, and the Workflow Job Plugin.\nEventually, I ended up helping maintain Salesforce’s Chatter plugin and then open sourcing plugins such as the Config-Driven Pipeline Plugin with Andrey Falko.\nMore recently, I have also had the extreme pleasure of mentoring in 2 Jenkins projects for Google Summer of Code\n(Multi-branch Pipeline support for Gitlab in 2019 and Git Plugin Performance Improvements in 2020).\n\nI have learned so much from working with Jenkins and I would love to give back to the project further.\nHaving introduced Jenkins at both small and large companies,\nI would love to help contribute to the direction of the project through the Roadmap/SIGs/JEPs and encourage others to also contribute / improve Jenkins.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn\n\nAffiliations: Salesforce, Spinnaker SIG for Azure\n\nMark Waite\n\nI’m a Jenkins contributor, a member of the Jenkins core team,\none of the leaders of the Platform Special Interest Group,\nand leader of the Documentation Special Interest Group.\nI’ve served as the Jenkins Documentation Officer since 2019.\nI was a mentor for Google Season of Code 2020 and am one of the maintainers of the Git plugin for Jenkins.\n\nIf elected and allowed to serve on the Jenkins Board, I’ll work to increase community involvement and community development.\nI’m deeply interested in tooling and environments that support the Jenkins project,\nincluding the Jenkins CI environments, issue tracker, artifact repository, and source code repositories.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: CloudBees\n\nMarky Jackson\n\nI have been involved in the Jenkins project for many years.\nI started out as a plugin maintainer, SIG member and general helper.\nI moved to a SIG lead, speakers and Google Summer of Code and Docs org admin and mentor.\nMy current goals are to help continue the work of the public roadmap as well and gain most community members by continuing to be a champion of the community.\n\nFor me, being on the Jenkins Board is another opportunity to improve upon the great work\nwe have all done as well as work toward branching out our efforts to have more women, people of color and LGBTQIA members.\nI would be honored to have this opportunity.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: Equinix Metal, Continuous Delivery Foundation, Kubernetes, Ortelius\n\nSteven Terrana\n\nI have been a Jenkins user since 2017 and contributor since 2018.\nI am the primary maintainer of the Jenkins Templating Engine,\na plugin that allows users to create truly templated Jenkins pipelines that can be shared across teams.\nThrough that work, I’ve had the great pleasure of helping to organize the Pipeline Authoring Special Interest Group,\ncontributing to the Jenkins Pipeline documentation, and contributing bug fixes to various plugins\n(including the pipeline plugin and workflow-cps library).\n\nAs a Continuous Delivery Foundation Ambassador,\nI’ve enjoyed doing what I can to advance the community’s approach to CI/CD and simplifying DevSecOps adoption within large organizations.\nIt would be a privilege to serve on the Jenkins Governance Board and offer my support wherever I can.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Booz Allen Hamilton, Continuous Delivery Foundation\n\nZhao Xiaojie (Rick)\n\nThree years ago I joined the Jenkins community.\nI learned a lot during the process of contributing.\nI even became a Jenkins hero in my city.\nThe most exciting thing I want to do is help more new users of Jenkins get started, and let more contributors feel comfortable.\nI always love to host a JAM no matter if it’s online or offline.\n\nPlans: improve the experience of using Jenkins in different\ncountries; reorganize the knowledge of Jenkins, for example the tutorial\nby text or video format; help other SIG leaders to organize meetings.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: N/A\n\nRelease Officer\n\nBaptiste Mathus\n\nI have been using and contributing to Jenkins for so long that it is difficult for me to check when it started exactly.\nMy first pull-request to Jenkins was in 2011 and I had started to use it long before it.\nThroughout the years, I have contributed to various areas:\ncreated our local Jenkins Area Meetup with Michaël Pailloncy,\nhelped users and developers on our mailing lists and IRC channels,\ncontributed to the Jenkins infrastructure, the website,\nprocessing plugins hosting requests, worked full time on Jenkins Evergreen,\nand I am still present today.\n\nFor all these reasons, it would be an honor to serve as the Release Officer for the Jenkins Project.\n\nProfile links:\nGitHub,\nTwitter,\nJenkins Blog\n\nAffiliations: CloudBees\n\nTim Jacomb\n\nI have been a user of Jenkins for the last 8 years and a regular contributor since 2018.\nI began with maintaining the Slack plugin and over the last couple of years I have since expanded that to many more plugins and the Jenkins core.\nThese are some of the components I maintain when I have time: Slack, Azure Key Vault, Junit,\nmost of the Database plugins, Dark theme, Plugin installation manager, Jenkins Helm chart, Configuration as code plugin.\nI am also a member of the Jenkins infrastructure team,\nand I was involved in the release automation project and the mirrors modernisation effort,\nalong with the day to day support helping people regain access to accounts etc.\n\nAs a Release Officer I would like to increase automation,\nease onboarding of new contributors to the release team, and ensure that\nresponsibilities rotate among people so that I wouldn’t be a bottleneck for any task.\n\nProfile links:\nGitHub,\nJenkins Blog\n\nAffiliations: Kainos\n\nVictor Martinez\n\nI have been involved in the Jenkins project since 2011 by different means, as a user, as an administrator, as a contributor\n(bug reporting, plugin development, documentation, hackfest),\nbeing active in the different Jenkins forums such as the Jenkins-dev and Jenkins-user mailing lists,\nworking with the jenkins-infra shared library and so on.\nI’m also an advocate for the Jenkins project through some presentations anytime that I had the opportunity such as\nDevOps World 2020 and\nJenkins World 2017.\n\nI’ve been happily nominated for the Release officer role which matches not just my area of professional expertise that\nI’ve been doing for the last 14 years in different roles for different companies but also that’s an area of personal interest\nwhere I’d like to spend time with the Jenkins community to understand, document and automate the process\nin a way we can keep the project sustainable for a long term as it’s today,\nit’s not just about what I can bring for the community but also about growing together.\n\nIf elected as a Release officer I would aim to focus on the following areas:\nproceed with the existing responsibilities for this role;\ndocument and automate the release process;\nbeing an enabler for the Continuous Delivery not just for the plugins but also for the core.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Elastic\n\nSecurity Officer - uncontested\n\nDaniel Beck\n\nI’ve been a Jenkins user since 2011, contributor since 2013, and core maintainer since 2014.\nIn 2015, I took on the scheduling and authoring of security advisories and have been doing that ever since,\nworking with reporters, maintainers, and the Jenkins security team to deliver security fixes.\nBeyond that, I regularly contribute to Jenkins and project infrastructure.\n\nSince I’ve started in the Security Officer role, we’ve made significant\nimprovements:\nPlugins no longer allow ordinary users to run arbitrary scripts (no sandbox!) as a regular feature. I introduced fine-grained permission management\nfor our GitHub repositories and\nthe Maven repository hosting our releases.\nWarnings directly in Jenkins inform admins when an installed component has known security issues (and their UX was improved earlier this year).\nThe Jenkins project is now a CVE Numbers Authority,\nto ensure timely and high-quality information in the CVE vulnerability database.\nWorking with Tyler, I added telemetry to Jenkins,\nwhich allowed us to deliver multiple large-scale security fixes with\nminimal impact.\nMore recently, I’ve started writing code scanning rules for common problems in Jenkins and\ninvited maintainers to sign their plugins up,\nwhich is something I hope to properly publish and roll out more widely soon.\n\nProfile links:\nGitHub\nJenkins Blog\n\nAffiliations: CloudBees\n\nEvents Officer - uncontested\n\nMarky Jackson\n\nI have been a part of the Jenkins community for some time, and I have received the utmost joy in volunteering.\nI have been extremely fortunate to have played a lead role in the Outreach & Advocacy SIG, the pipeline-Authoring SIG,\nand, most recently, the Cloud-Native SIG.\nI have taken part in many meetups, org admin, and mentor in the GSoC & GSoD.\nFinally, At DevOps World 2020, I received Jenkins most valuable advocate at DevOps World.\nI have experience advocating in other communities as well:\nKubernetes Release Manager Associate, Kubernetes Mentoring Lead, Ortelius Community Manager.\n\nJenkins is the most widely used Continuous Integration tool around,\nand I want to continue to promote that by focusing on the following areas: meetups; conference presentation from the Jenkins community;\nnew user outreach and onboarding; cross-community collaboration (e.g., Kubernetes community);\nworking with the Continuous Delivery Foundation on interoperability; focusing on SIG events.\n\nMy roots are open-source, and I am so proud to be a part of the Jenkins community.\nYou can read more about my journey in open-source here.\nYou can also see some of my presentations here and\nhere.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: OpsMx, Continuous Delivery Foundation, Kubernetes, Ortelius, Spinnaker\n\nInfrastructure Officer - uncontested\n\nOlivier Vernin\n\nI have been actively contributing to the Jenkins project for the past four years with contributions across many areas,\nand infrastructure is one of my favorite topics.\nOver my previous mandate as a Jenkins infrastructure officer, I focused on improving contribution experience,\nand let community members opportunities to take ownership of the different services.\nI worked on various sponsoring initiatives to make the Jenkins infrastructure more sustainable.\nWe provided a new environment for releasing Jenkins core (and one plugin!), and also many more things.\n\nFor the coming year, It is hard to make commitments on what it will look like as we have things we know,\nlike services that need some attention (“ci.jenkins.io/) and the things we don’t know yet.\nAnyway, It’s important to me to have a transparent project where everybody could read, learn, participate,\nand understand how the Jenkins project manages infrastructure and I want to continue down that path.\n\nProfile links:\nGitHub,\nTwitter,\nJenkins Blog\n\nAffiliations: CloudBees\n\nDocumentation Officer - uncontested\n\nMark Waite\n\nI’m a Jenkins contributor, a member of the Jenkins core team, one of the leaders of the Platform Special Interest Group,\nand leader of the Documentation Special Interest Group.\nI’ve served as the Jenkins Documentation Officer since 2019.\nI was a mentor for Google Season of Code 2020 and am one of the maintainers of the Git plugin for Jenkins.\n\nIf elected and allowed to serve as Documentation Officer,\nI’ll continue efforts to invite more contributors through regular Documentation Office Hours and outreach programs like Google Season of Docs, CommunityBridge, Outreachy, and Jenkins Hackfests.\nI’ll work to assure an inviting and welcoming environment for contributors.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: CloudBees\n\nMore information\n\nJenkins 2020 elections announcement\n\nJenkins Governance Board and Jenkins Officers\n\nJenkins Board and Officer Election Process\n\n2019 election results\n\nElections coordination in the mailing list","title":"2020 Elections: Governance Board and Officer candidates","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-11-04T00:00:00.000Z","id":"507874d6-f29d-5e57-82cd-0383757359fc","slug":"/blog/2020/11/04/codeql/","strippedHtml":"A little over a month ago, GitHub announced the general availability of its code scanning solution.\nIt’s based on CodeQL, which makes it pretty easy to write queries for it and run them using the CodeQL GitHub action, CodeQL command line tools, or on lgtm.com.\n\nMany of the security vulnerabilities discovered in Jenkins plugins are fairly similar to each other, and unfortunately they’re usually specific to Jenkins, which means existing generic tools would not be able to discover them.\nSo I decided to write CodeQL queries for Jenkins-specific issues and invited maintainers to sign their plugins up for a \"private beta\" of code scanning for these issues.\n\nToday’s security advisory is the first one that includes findings discovered through that initiative.\nAll these issues were discovered with assistance by this tooling:\n\nSECURITY-2101 in AWS Global Configuration Plugin,\n\nSECURITY-2102 and SECURITY-2103 in Kubernetes Plugin,\n\nSECURITY-2104 and SECURITY-2115 in Mercurial Plugin,\n\nSECURITY-2110 in Azure Key Vault Plugin, and\n\nSECURITY-2126 in Active Directory Plugin\n\nWhile there were of course also false positives we had to review and mark as ignored, the integration with the GitHub UI made this pretty straightforward.\nOverall I’m very happy with the results so far, especially considering how new this initiative is.\n\nInterested in making the plugin you are maintaining more secure?\nSign up now by filing an INFRA issue in the github component and list the plugin repositories you’d like to have scanned.","title":"First results from using GitHub CodeQL to discover security vulnerabilities in Jenkins plugins","tags":["jenkins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck/","twitter":null}]}},{"node":{"date":"2020-11-05T00:00:00.000Z","id":"048474b0-1674-5ecc-b72f-376e9c14e52a","slug":"/blog/2020/11/05/installing-jenkins-on-kubernetes/","strippedHtml":"We are super excited to announce that the Document Jenkins on Kubernetes Project recently merged its first PR into Jenkins.io.\nThis PR adds a new Kubernetes section to the existing Installing Jenkins chapter of Jenkins.io.\n\nThis new section describes two options to install/run Jenkins on Kubernetes, how to setup a minikube cluster on which to run your Jenkins deployment and finally a bonus segment that explains some Post-installation setups such as unlocking Jenkins, customizing Jenkins with plugins and creating your first administrator user.\n\nThe first installation option covered in this section is helm a package manager for Kubernetes whose package format is called a chart. The helm section covers the prerequisites for installing Jenkins on Kubernetes using Helm, installing and configuring helm, creating a persistent volume and service account, and finally, Installing Jenkins.\n\nThe second option describes how to install Jenkins using a set of yaml files.\nThis section explains how to create a Jenkins deployment file, Deploy Jenkins, grant access to jenkins service, and finally access your Jenkins dashboard after installation.\n\nSplitting the Installing Jenkins Chapter\n\nThe addition of the Kubernetes section highlighted a long-standing challenge with the Installing Jenkins chapter.\nIt was too long and contained too many topics, making it difficult and unpleasant for\nmost users to navigate.\nTo top the icing on the cake and further improve the experience on Jenkins documentation users, another PR was merged into Jenkins.io to split the Installing Jenkins chapter into smaller chapters for better separation of concerns and easy navigation. This PR also redirects bookmarks that linked to the previous locations like https://www.jenkins.io/doc/book/installing/#debianubuntu using Javascript.\n\nThe image above is a snapshot of what the Installing Jenkins chapter looked like before the PR.\nAll sections of this chapter such as docker, Kubernetes and others were lumped up on the same page making it too long with so much information thereby making it difficult to navigate or even find information on this page.\n\nThis snapshot shows what the Installing Jenkins chapter looks like after the PR.\nWith this chapter split into smaller sections, it’s neater, clearer and most importantly easier to navigate to the section of interest without having to scroll through so much information that’s not necessarily needed.\n\nTesting, Participating and Contributing\n\nThe Jenkins Community invites the general public to try out these documentation updates and give feedback to help us further improve the documentation.\nIf you have any feedback, suggestions, or would like to contribute to the Jenkins on Kubernetes project,  drop a message indicating your interest in the Jenkins documentation Gitter channel.\nYou can also find the Google season of docs office hour notes and recordings for Jenkins on Kubernetes here.\nGSOD office hours take place twice a week on Mondays and Thursdays between 6 pm GMT+1 and 7 pm GMT+1, if you would like to be part of these meetings, you can indicate interest in the Jenkins Documentation Gitter channel and we would be happy to have you.\n\nAdditional Resources\n\nInstalling Jenkins on Kubernetes PR\n\nSplitting Installing Jenkins Chapter PR\n\nDocument Jenkins on Kubernetes Project\n\nGSoD Proposal\n\nGSoD Office Hours Notes\n\nGoogle Season of Docs - Startup\n\nGoogle Season of Docs on jenkins.io\n\nDocs SIG for Google Season of Docs startup ( video)","title":"Document Jenkins on Kubernetes: Installing Jenkins on Kubernetes Documentation Release","tags":["kubernetes","helm","documentation","gsod","gsod2020"],"authors":[{"avatar":null,"blog":null,"github":"zaycodes","html":"<div class=\"paragraph\">\n<p>Zainab is a software developer and technical writer who is passionate about contributing to open source, improving technical documentation and advocating for gender diversity in open source collaboration. She started contributing to Jenkins documentation during the technical writer exploration phase for <a href=\"https://developers.google.com/season-of-docs\">Google Season of Docs</a> 2020, and is currently working on <a href=\"/sigs/docs/#jenkins-on-kubernetes\">Documentation for Jenkins on Kubernetes</a>.</p>\n</div>","id":"zaycodes","irc":null,"linkedin":"zaycodes","name":"Zainab Abubakar","slug":"/blog/authors/zaycodes/","twitter":"zaycodes"}]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"a4d05a2d-a0a0-5795-a164-1b18cbfae9a3","slug":"/blog/2020/11/10/major-changes-in-weekly-releases/","strippedHtml":"Recently we have selected Jenkins 2.263 as a new baseline for the LTS release line, with ETA in December 2020.\nIt allows delivering significant and in some cases breaking changes which have been previously on hold.\nBeginning with the Jenkins 2.264 release on October 27, 2020, we’ve entered a period where the Jenkins weekly releases will include more significant changes than usual.\nThat period of more significant changes is expected to continue for a month or more.\nAs you may have seen from the release community ratings, there might be regressions and instabilities during this period.\n\nWe’re excited for the changes.\nThey help to improve user experience and to address the technical debt accumulated in the Jenkins core.\nWe invite Jenkins users to evaluate those changes and provide feedback.\nThis is an especially valuable time for users and administrators to test the weekly releases and report issues with them,\nespecially on Jenkins test environments.\nIn the Jenkins project we have invested a lot in test coverage for the main functionality,\nbut in many cases we rely on user feedback for exotic plugins and environments not yet covered by our test automation.\n\nThe most notable changes include:\n\nConfiguration UI - Tables to Divs\n\nCore - Spring Security replaces Acegi Security\n\nCore - XStream unfork\n\nUI - JQuery upgrade\n\nConfiguration UI - Tables to Divs\n\nJenkins 2.264 is the first weekly release to include the \"Tables to Divs migration\" user interface work of Josh Soref, Tim Jacomb, and Felix Queiruga.\nIt is a significant step to improve forms in the Jenkins user interface (configuration pages, build parameters, etc.), especially for users on narrow devices like tablets and phones.\n\nA better user interface\n\nThe transition from using HTML table tags to using HTML div tags provides a more attractive user interface for all users and a much better experience for users on narrower devices.\nBefore the conversion from table tags to div tags, the\"Manage Jenkins\" page looked like this in a 1024x768 window:\n\nAfter the conversion, the\"Manage Jenkins\" page now looks like this:\n\nThe user interface improvements from the transition are a nice step forward for Jenkins.\nHowever, because the user interface improvements require changes in plugins, we need your help.\n\nWe need users to test the latest weekly Jenkins releases with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\nPlease add the tables-to-divs-regression label to the issues.\nThe tables-to-divs-regression label makes it easier to find issues related to the tables to divs transition.\n\nPlugin developers\n\nSeveral plugins have already been identified that may need changes.\nSee the Jira epic for plugins that are likely to need changes for the new user interface layout.\nThe list of open tables-to-divs-regression issues can also be used to see plugins that need changes.\n\nIf you can assist with plugin testing and code changes, select one of the plugins from that epic, test it, and propose a pull request to help with this user interface transition.\nIf you’re not comfortable proposing a pull request, describe the problems you see in a bug report.\n\nA tables to divs migration guide is available.\nIt describes areas that typically need to be changed as part of the migration from tables to divs.\nIt also includes detailed examples that allow the plugin to continue supporting older Jenkins versions with table layouts and use div layouts for newer Jenkins versions.\n\nCore - Spring Security replaces Acegi Security\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the Spring Security libraries from the Acegi security libraries that Jesse Glick has proposed and developed through jep:227[Jenkins Enhancement Proposal 227].\n\nThis upgrade replaces the Acegi Security library with the current release of the Spring Security library.\nDetails of the change are described in jep:227[] and in the pull request.\n\nWe need users to test the latest Jenkins weekly releases with their plugins and watch for issues related to authentication.\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the Spring Security compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the Spring Security upgrade.\n\nCore - XStream unfork\n\nJenkins has been using a fork of the XStream serialization library to read and write XML files.\nThe XStream library was forked over 10 years ago and had a few fixes applied to it.\nUnfortunately, at that time the fixes were rejected by the upstream maintainers of XStream (unsupported patterns of API use) and the fork fell behind the upstream version.\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the upstream version of the XStream library that Jesse Glick has proposed and developed through jep:228[Jenkins Enhancement Proposal 228].\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the XStream compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the XStream upgrade.\n\nUI - JQuery upgrade\n\nJenkins uses a 1.x version of the jQuery user interface library for some of its components.\nFelix Queiruga has started the work to update that library to a current jQuery version.\n\nIt will arrive in a future Jenkins weekly release.\nWhen it arrives, it will be noted in the Jenkins weekly changelog.\n\nWhen the jQuery update arrives, We will need users to test the Jenkins weekly release with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\n\nCall to test\n\nThis is a great time to help the Jenkins project by testing the weekly releases.\nWe encourage you to test the user interface and the interactions that are most important to you.\nIf you find an issue, please report the issue so that others can benefit from your discovery.","title":"Jenkins 2.264+: Major changes in the weekly release line","tags":["jenkins","core","testing","ui"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"4a81cf3c-4ca0-511f-9197-d77a776ede34","slug":"/blog/2020/11/10/spring-xstream/","strippedHtml":"Cleaning up technical debt is a perennial topic among Jenkins core developers,\nand one of the most visible issues is the use of obsolete and/or forked third-party libraries.\nIn a world where Dependabot is offering updates to libraries released just hours before,\nit is unpleasant to be working with dependencies that are many years old.\nSince large organizations in particular are unhappy to install software using obsolete or nonstandard versions,\nmy employer (CloudBees) gave its blessing for me to spend some time cleaning up some of the worst offenders.\n\nThe toughest nut to crack was the Acegi Security library used for authentication,\nwhich has long since been replaced by Spring Security\n(and Jenkins was also bundling a long-outdated version of some Spring Framework dependencies).\njep:227[] tracks the complicated task of updating to Spring Security\nwithout breaking the numerous plugins that interact with authentication,\nespecially those offering a Security Realm.\n\nAnother longstanding problem was the XStream library which Jenkins uses to read and write XML configuration files.\nThis had been forked long ago by what was then the Hudson project and a few fixes applied.\nUnfortunately, some of those fixes were rejected upstream as invalid (representing unsupported usage patterns),\nand the fork fell behind the upstream version.\njep:228[] describes the impact of switching to the upstream library in a more standard usage mode,\nincluding fixes to a smaller number of plugins which would otherwise be incompatible.\n\nNow that the Jenkins 2.266 weekly release includes both updates,\nit is important for both Jenkins administrators and plugin maintainers to check for actual or potential incompatibilities.\nThere are two tables listing the impact of these changes on plugins:\n\nSpring Security compatibility\n\nXStream compatibility\n\nIf you use Jenkins then it is a good idea before upgrading to take a look at these tables\nto see if you are running any plugins considered incompatible.\nIf so, try not to rely on that plugin, or find out if there is an active maintainer who could help.\nFor entries marked unknown, it would be appreciated if you could do a sanity check after upgrading\nand offer a pull request to the table page (click Edit this file) with a more informative status.\n\nIf you find a regression in a plugin, please file a bug report in Jira and link to it from the table.\nAlso please add a JEP-227 or JEP-228 label as appropriate, for ease of tracking:\n\nOpen JEP-227 issues\n\nOpen JEP-228 issues\n\nIt is a good idea to update all your plugins before upgrading Jenkins core.\nIn the case of the Spring Security update, some security realm plugins including LDAP and Active Directory must be updated in advance.\n(You can safely run the new plugin versions on Jenkins releases prior to this change.)\nOtherwise, you risk being unable to log in to Jenkins—and thus unable to update those plugins from the GUI!\nThe LDAP plugin additionally has a new version available only after the core upgrade, but there is no rush in switching to that.\n\nIf you maintain a Jenkins plugin then please check whether it is marked anything less than compatible.\nIn some cases, there are already pull requests awaiting merge.\nIn other cases, some minor aspects of the source code have been identified that could be edited to improve compatibility.\n\nWe expect to see a bit of disruption from these changes\nbut hope that in the long run they will save time for core and plugin developers\nand lead to a more secure and stable tool.\nPlease reach out on the developers’ list with any questions or suggestions.","title":"Spring and XStream updates (breaking changes!)","tags":["jenkins","core","developer"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick/","twitter":"tyvole"}]}},{"node":{"date":"2020-12-03T00:00:00.000Z","id":"2b02956c-1094-559a-9408-ef0c76b5fdb1","slug":"/blog/2020/12/03/election-results/","strippedHtml":"The Jenkins community has recently completed the 2020 elections.\nOn behalf of the Jenkins community and the elections committee,\nwe congratulate all newly elected board members and officers!\nWe also thank all candidates and voters who participated this year.\n\nElection results:\n\nGavin Mogan and Marky Jackson will join\nKohsuke Kawaguchi, Ullrich Hafner and Oleg Nenashev\non the Jenkins Governance Board\n\nTim Jacomb was elected as Release Officer\n\nMarky Jackson will become the new Events Officer (uncontested)\n\nOlivier Vernin will continue in the role of Infrastructure Officer for another term (uncontested)\n\nDaniel Beck will continue in the role of Security Officer for another term (uncontested)\n\nMark Waite will continue in the role of Documentation Officer for another term (uncontested)\n\nThe board positions and officer roles are an essential part of Jenkins' community governance and well-being,\nand we are excited to see contributors taking these roles.\nIf you are interested to learn more, please see the blog post below.\n\nGovernance Board election details\n\nThis year we had nine candidates participating in Jenkins Governance Board elections:\nAndrey Falko, Ewelina Wilkosz, Frederic Gurr, Gavin Mogan, Justin Harringa,\nMark Waite, Marky Jackson, Steven Terrana, and Zhao Xiaojie (Rick).\nAll of them are awesome community leaders who actively contribute to the Jenkins project and\nrepresent its users.\nIt would be an honor to have them on the Jenkins board.\nRegardless of the election results, we appreciate their participation and the time they invested in these elections.\n\nThis year we were electing 2 governance board members.\nWe were using the Condorcet Internet Voting Service that allows voters to rank their choices rather than just picking their one favorite choice.\nYou can find full voting results here :\n\nMark Waite  (Condorcet winner: wins contests with all other choices)\n\nMarky Jackson loses to Mark Waite by 48–12\n\nGavin Mogan loses to Mark Waite by 51–10, loses to Marky Jackson by 31–20\n\nEwelina Wilkosz  loses to Mark Waite by 48–14, loses to Gavin Mogan by 29–28\n\nJustin Harringa  loses to Mark Waite by 51–11, loses to Ewelina Wilkosz by 35–16\n\nSteven Terrana  loses to Mark Waite by 47–16, loses to Justin Harringa by 20–19\n\nZhao Xiaojie (Rick)  loses to Mark Waite by 57–5, loses to Steven Terrana by 25–24\n\nFrederic Gurr  loses to Mark Waite by 52–10, loses to Zhao Xiaojie (Rick) by 25–24\n\nAndrey Falko  loses to Mark Waite by 56–6, loses to Frederic Gurr by 26–13\n\nAlthough Mark Waite came first in the voting results,\nbeing on the board would violate the Corporate Involvement clause which states that\n\"the number of board members affiliated with one company must be less than 50%\".\nMark will continue to be Documentation officer.\nRegardless of his official role, Mark has been leading many initiatives and helping a lot with various aspects of the community governance.\n\nCongratulations to Marky and Gavin, and thanks to all candidates!\nAll new board members are elected for a 2-year term unless they decide to step down earlier.\nThe estimated end of the term for them is December 02, 2022.\nWe would also like to thank Alex Earl and R. Tyler Croy who step down from the Jenkins Governance Board this year.\nThanks to them for all contributions and for continued community leadership.\n\nStatement from Marky Jackson:\n\nIt is a tremendous honor to be elected to this roles. I am so humbled.\nBeing part of this community is a fantastic opportunity that I have had. It has given me so many joys. Whether helping to foster community collaboration, working on the roadmap, leading various SIG’s or helping meetups or conferences, this community has given me so much.\nMy goals are bridging the Jenkins project with other interoperability projects, defining the roadmap, achieving roadmap goals, continuing to help meetups thrive, and our conferences focus on the community. I want to ensure we are transparent in our goals and how we achieved them. I want to continue to build up a welcoming community that holds diversity and inclusion at the forefront.\nI look forward to working with the other members of the Governance Board to continue to deliver on the incredible things this project is known for.\n\n— Marky Jackson, Jenkins Governance Board Member and Events Officer\n\nStatement from Gavin Mogan:\n\nGavin here. I’m still in shock that I got voted in for the Jenkins board.\nIt felt like yesterday I just got started helping people randomly on IRC. This is truly exciting.\nI plan to continue to help out as much as I can wherever I can, just in a bit more official capacity.\nThis is truly exciting. I have no firm plans or agenda, just keep pushing advocacy and getting people to help each other in a positive and safe way.\nMy specialities lie in outside of Jenkins core, whether it be working on the plugin site, or hanging out on IRC, Gitter and Reddit helping out where I can.\n\n— Gavin Mogan, Jenkins Governance Board Member\n\nOfficer election details\n\nAll 5 officer positions were up for election this year.\nThese roles have a 1-year term, with the estimated end of term on Dec 02, 2021.\nAfter the initial review of nominations and confirmations with potential candidates,\n4 officer positions were uncontested:\n\nOlivier Vernin - Infrastructure officer.\n\nMarky Jackson - Events officer.\nMarky inherits this role from Alyssa Tong\nwho decided to step down from the officer role and to focus on the Jenkins community marketing,\nincluding Jenkins Is The Way and many other initiatives started by Alyssa.\n\nMark Waite - Documentation officer.\n\nDaniel Beck - Security officer.\n\nThanks to all Jenkins officers for their continued leadership!\nOfficers take responsibility for many day-to-day processes in the Jenkins community and lead the contributor teams working on them.\nIt requires significant time commitment, and it is not taken for granted.\n\nRelease Officer election results\n\nTim Jacomb won the biggest support as a Release officer ( voting results).\nTim will replace in this role Oliver Gondža\nwho has been leading the Release Team and the release processes since 2016 when the role was officially introduced.\n\nTim Jacomb (Condorcet winner: wins contests with all other choices)\n\nBaptiste Mathus  loses to Tim Jacomb by 40–23\n\nVictor Martinez  loses to Tim Jacomb by 38–25, loses to Baptiste Mathus by 32–31\n\nHere is a statement from Tim Jacomb:\n\nI’m excited for the year ahead, let’s see where we can take the Jenkins release area in the future.\nAs a Release Officer I would like to increase automation, ease onboarding of new contributors to the release team,\nand ensure that responsibilities rotate among people so that I wouldn’t be a bottleneck for any task.\n\n— Tim Jacomb, Jenkins Release Officer\n\nThanks to Alyssa Tong and Oliver Gondža for their long-time service as Jenkins officers!\nWe are looking to continue working with them in the Jenkins community.\nAnd congratulations to Tim Jacomb and Marky Jackson for joining the team!\n\nStatistics\n\nThis year we had 92 registered voters and around 65 actual votes.\nIt is significantly lower than in the 2019 elections when we had almost 350 voters.\nIt can be partially explained by the change of the communication process.\nThis year we decided to not use the previous voter registration system,\nand we relied on the user and developer mailing lists instead of sending messages to the entire LDAP user database.\nThis is definitely something we need to review at the retrospective.\n\nWhat’s next for the board?\n\nThe last year was awesome for the Jenkins project governance.\nWith help of many contributors and with the renewed board,\nwe have been able to facilitate many initiatives in the Jenkins project,\nfor example hosting contributor summits,\npublishing the public roadmap,\nCode of Conduct update,\nterminology changes,\nand graduation in the Continuous Delivery Foundation.\nThere is a lot more work to do to grow the community and to ensure the long term sustainability of the project.\n\nIn short term, our key priority is to organize knowledge and permission transfers to the new board members and officers so that they can be effective in their new roles.\nThe board will also focus on maintaining the Jenkins governance processes\n(meetings, budget approvals, funding, etc.) and defining the next steps and priorities.\n\nThere are many longer-term initiatives the board could facilitate:\nlong-anticipated features and architecture changes,\nchanging the Jenkins Enhancement Proposal process,\ncreating better communication channels with Jenkins users,\nand onboarding of new contributors and maintainers.\nSuch initiatives are instrumental for the evolution of the Jenkins project.\nThe ideas will be discussed in mailing lists and during governance meetings.\nIf you would like to share your vision and ideas about what’s needed in the project,\nit is definitely a great time to contribute!\n\nFeedback\n\nJenkins project plans to conduct elections every year.\nWe will appreciate and welcome any feedback regarding the election process so that we can improve the process.\nWe have started a Retrospective document for these elections.\nEveryone can suggest changes in this document, and we will integrate them.\nThere will be also a public retrospective review at the next Advocacy and Outreach SIG meeting on Dec 17.\n\nIf you have any private feedback you would like to share,\nplease send an email to the Jenkins Board.\nIf you would like to raise any issues about the election process,\nplease contact one of the elected Governance Board members.\n\nReferences\n\nJenkins Governance Board\n\nJenkins Board Election Process\n\nJenkins Officers\n\n2020 election announcement\n\n2020 election candidates\n\nRetrospective document","title":"2020 Jenkins Board and Officer Elections Results","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/slide_o_mix.jpg"},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix/","twitter":"alexcearl"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/uhafner.jpg"},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/authors/uhafner/","twitter":null}]}},{"node":{"date":"2020-12-04T00:00:00.000Z","id":"7f63955e-c485-543c-8e96-4de3b98e74a9","slug":"/blog/2020/12/04/gsod-project-report/","strippedHtml":"Jenkins is the world’s leading open-source automation server used by companies large and small around the globe to implement continuous integration and continuous delivery.\nKubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.\nKubernetes is compatible with the majority of CI/CD tools which allow developers to run tests, deploy builds in Kubernetes and update applications with no downtime.\nOne of the most popular CI/CD tools now is Jenkins thereby making Jenkins on Kubernetes a popular theme for Jenkins users.\n\nDuring the Google Season Of Docs program, I worked with the Jenkins organization on the project - Document Jenkins on Kubernetes.\nThe original proposal for this project can be found here.\n\nProject Goals\n\nAfter my proposal was accepted by the Jenkins organization, my mentors and I agreed on the expectations for the Google Season of Docs project.\nThe goal of this project was to create a new Kubernetes Volume which would describe the concepts, techniques, and choices for Kubernetes users running Jenkins thereby providing the following advantages:\n\nImprove the user experience of Jenkins on Kubernetes users by giving them a one-stop-shop for information on Jenkins on Kubernetes.\n\nMake it easy to track, update and maintain information on Jenkins on Kubernetes\n\nReference the existing community documentation for Jenkins on K8s (plugins and tools/integrations).\n\nHow to guides, tutorials and explanations of concepts and techniques in Jenkins on Kubernetes.\n\nJust-In-Time documentation which means that rather than documenting every feature comprehensively, we produce and release documentation in bits but continuously based on popular questions, feedback and area of interests gathered from the community and users.\n\nCommunity Bonding: Planning the solution\n\nFind below an outline of my activities during the community bonding phase:\n\nSetting up communication channels: meetings, mailings, chats: My mentors and I agreed on the right time and channel for communication due to time difference.\nWe agreed to meet twice weekly, on Mondays and Thursdays at 7:00 PM GMT +1 and use Jenkins documentation gitter channel for other communications.\n\nContacting Stakeholders and onboarding contributors: The project was  announced on social media and different Jenkins channels.\nI wrote a blog post to announce the project and created a project page on Jenkins.io.\n\nKnowledge transfer: I and my mentors planned knowledge sharing sessions and fixed tentative dates based on the availability of the trainers.\nMy mentors also shared useful resources to help me prepare for the project.\n\nGetting permissions: I and my mentors agreed I didn’t need any special permissions from the beginning, however, this topic was left open for discussion if the need arose later on in the project.\n\nPre-planning of the project: I refined my goals and set expectations with my mentor and also learned more about the community(Jenkins).\nI also had to ensure that the proposed documentation structure I drafted was in line with the goals of the organization so my mentors vetted it and we finalized on the proposed sections that I was supposed to work on.\n\nDocumentation Development Phase\n\nKnowledge Sharing Sessions\n\nDuring the development phase, my mentors hosted two knowledge sharing sessions:\n\nKatacoda and Helm by Marky Jackson\n\nSee the slides\n\nHelm by Torsten Walter\n\nSee the slides\n\nThese sessions gave me an in-depth understanding of concepts and tools needed for the project.\n\nJenkins on Kubernetes Documentation Skeleton\n\nAt the application phase, I drafted a structure describing the proposed Jenkins on Kubernetes section.\nMy intention was to use it as a guide during the implementation phase of the project, but when the development phase kicked off, my mentors and I thought of a better approach to creating a new Jenkins on Kubernetes section which was to add the Jenkins on Kubernetes contents to existing related sections for easier navigation and better user experience.\nAn example of this approach would be creating the Installing Jenkins on Kubernetes section under the Installing Jenkins section rather than putting it under an entirely new section.\nWith this new approach, I was assigned a task to create a skeleton with all the proposed Jenkins on Kubernetes sections on Jenkins.io and mark these sections as\nWork In Progress (WIP).\nThe Plan was to use this skeleton as a guide throughout the GSOD Project.\nThe Jenkins on Kubernetes skeleton PR can be found here.\n\nDocumenting Jenkins on Kubernetes\n\nWhile working on this project, I had to do a lot of research and test all the documented steps locally before pushing the documentation out for review.\nI also made sure to use updated terms and terminologies where necessary like Controller instead of Master and Agents instead of Slave.\n\nDuring the documentation phase, I was able to work on documenting Installing Jenkins on Kubernetes with three sections Helm, Set of Yaml files and Jenkins Operator.\nI also worked on creating a directory for Jenkins on kubernetes sample files in Jenkins.io repository, documenting Scaling Jenkins on Kubernetes and Jenkins on AWS which is still in progress.\n\nWork Done\n\nPull Requests : All the pull requests I submitted to Jenkins.io documentation can be found here.\nThis spreadsheet contains links to the published documentation on Jenkins.io.\nThe spreadsheet also highlights the initial proposed tasks and the status of each of them.\n\nIf you would like to contribute to the Jenkins on Kubernetes documentation, you can check out pending tasks here and reach out in the Jenkins documentation gitter channel.\n\nChallenges\n\nUsing a Windows computer was a bit of a challenge for me.\nTo run Jenkins.io locally, the project uses GNU/Make and Docker in order to generate the fully statically generated jenkins.io web site.\nThe key tool for converting source code into the site is the Awestruct static site generator, which is downloaded automatically as part of the build process.\nTo achieve this, I needed to have GNU/Make and Docker available on my machine.\nDocker was not a problem, but to achieve the latter, I needed to use Windows Subsystem for Linux (WSL).\nWSL had two versions WSL1 and WSL2. Using WSL2 would have been much more convenient, but my version of windows wasn’t compatible with WSL2 as it required Version 1903 or higher, with Build 18362 or higher for x64 systems.\nWith this obstacle, I had to stick to making WSL1 work but I still couldn’t get this to work, a series of issues came up which I was able to pass through with the help of my mentors until I got stuck at permission issues.\nI raised the issue with my mentor and after looking through the issue with me and trying to solve it to no avail, he suggested setting up an Ubuntu VM in Hyper-V.\nThis article helped me achieve this and that solved my problem.\n\nWhat did I learn?\n\nI learned a lot more about the Jenkins project, Kubernetes, helm package manager, Jenkins Operator and much more.\nThis project also gave me the opportunity to work with cloud providers like AWS which was totally new to me and also learn from field experts through knowledge sharing sessions and weekly meetings with my mentors and org admin.\nMy technical writing skill and communication skill have definitely become better and I owe it to this project.\n\nOverall, contributing to the Jenkins.io project is an amazing experience for me.\nI have been using Jenkins, and the fact that I was able to contribute to the organization and collaborate with the community is an honor.","title":"GSOD Project Report: Document Jenkins on Kubernetes","tags":["kubernetes","helm","documentation","gsod","gsod2020"],"authors":[{"avatar":null,"blog":null,"github":"zaycodes","html":"<div class=\"paragraph\">\n<p>Zainab is a software developer and technical writer who is passionate about contributing to open source, improving technical documentation and advocating for gender diversity in open source collaboration. She started contributing to Jenkins documentation during the technical writer exploration phase for <a href=\"https://developers.google.com/season-of-docs\">Google Season of Docs</a> 2020, and is currently working on <a href=\"/sigs/docs/#jenkins-on-kubernetes\">Documentation for Jenkins on Kubernetes</a>.</p>\n</div>","id":"zaycodes","irc":null,"linkedin":"zaycodes","name":"Zainab Abubakar","slug":"/blog/authors/zaycodes/","twitter":"zaycodes"}]}},{"node":{"date":"2020-12-05T00:00:00.000Z","id":"16cc6561-bad4-57af-b784-07441e6f0705","slug":"/blog/2020/12/05/3-Cases-Jenkins-Success-stories-from-the-community/","strippedHtml":"Back in April, when we started canvassing the Jenkins community for user stories concerning how Jenkins helped enterprise companies, startups, and students, we thought we’d see some exciting tales of DevOps inspiration and CI/CD integration. We found that some submitted stories were far too big to be constrained by our format of 'background/goal/solution/results.'\n\nSome Jenkins users had a much more complex story to tell, whether it was about getting upper management to buy-in, keeping developers happy, or simply making sure pipelines weren’t just bottlenecks in disguise.\n\nHere are a handful of Jenkins Case Studies we’ve published in the past few months, with many more on the way!\n\nCase Study #1: D4Science\n\nAmping up scientific research with CI/CD powered by Jenkins\n\nTo promote open science practices and support scientific communities while serving 11k registered users in 45 countries, D4Science introduced a new delivery pipeline that replaced their pre-existing build platform.\n\nOf course, they had to build and release their software framework (gCube) in a way that would support multi-project releases at scale — from 200+ Git repositories within the same day! It had to be fast, automate all release activities, and it had to deliver incremental releases to address user requirements quickly. Most of all, the solution had to be cost-effective.\n\nUsing Jenkins, they created an innovative approach to software delivery: a continuous integration/continuous delivery (CI/CD) pipeline, scalable, easy to maintain, and upgradable at a minimal cost.\n\nDiscover how D4Science empowers e-Science and virtual research communities with software released via Jenkins. Read the Jenkins case study featuring D4Science here!\n\nCase Study #2: Gainsight\n\nHumanizing CSX with tech innovation and a robust DevSecOps platform\n\nGainsight’s customer service experience platform helps customer success teams at more than 100 leading IT and healthcare clients. How? By driving engagement for tens of thousands of their customers.\n\nThat’s why the engineering team at Gainsight approached the customer experience by building a smarter, faster DevSecOps platform using Jenkins. They stuck to an infrastructure-as-code approach while integrating various tools and programming languages all within the platform. And they secured processes with better visibility and air-tight quality control.\n\nThe result was a flexible DevSecOps infrastructure, 95% of which is scalable with code. And the cost of infrastructure costs was 40% less. That provides Gainsight with ease of collaboration, keener operational insight, and — because builds are 30% faster — the ability to stay a step ahead of the competition.\n\nRead why Gainsight’s lead DevOps engineer, Prudviraj Pentakota, says \"Jenkins is the epicenter of DevSecOps in our organization.\" Get the full story here.\n\nCase Study #3: Avoris Travel\n\nReinventing travel with an inventive technology platform\n\nPart of Barceló Group, Ávoris Travel is behind prominent destination travel brands like LeSki, Le Musik, and a selection of author travels under its \"Viagens Com Assinatura\" signature travel concept. A proprietary database and a smart, dynamic booking engine are the tickets to offering differentiating and inventive travel opportunities.\n\nAlso unique to Avoris is a discreet machining technology that enables agents to enter specific criteria to search and find all types of trips and travel opportunities across the entire network.\n\n\"Our infrastructure is very important because we have to be online to meet customer demand anywhere in the world,\" said Alejandro Alvarez Vazquez, Sysadmin, Avoris Travel. \"Our CI/CD platform is used by 200 people. The services that we build and deploy are used by thousands of potential clients and by our network of 675 own agencies located in Spain and Portugal.\"\n\nRead the case study to learn how the flexibility of Jenkins plugins helped Avoris reduce build times by over 50% and became a go-to, scalable infrastructure supporting 675 agencies and over 2.8 million international consumers.\n\nWhat’s your story?\n\nWe want to know what you’re building with Jenkins and would love to post your case study on our\"Jenkins Is The Way\" website, a global showcase of how developers and engineers build, deploy, and automate great stuff with Jenkins.\n\nThe best way to get started is to share your Jenkins User story with us. We’ll send you a free Jenkins Is The Way T-Shirt in return and publish your account for the entire Jenkins community to see. And if it’s selected for a Case Study, we’ll be in touch for a one-on-one interview! Hope to hear from you soon!","title":"3 Cases: Jenkins success stories from the community","tags":["Jenkinsistheway","Jenkinsuserstories"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2020-12-11T00:00:00.000Z","id":"53f79d7e-fbae-5ff1-9c1d-0b57ccbf4a00","slug":"/blog/2020/12/11/devops-world-2020-jenkins-contributors-awarded-top-honors-at-devops-worlds-2020/","strippedHtml":"At DevOps World on September 24, 2020, through the sponsorship of CloudBees, three Jenkins contributors were recognized for their contributions to the Jenkins project.  The Jenkins Contributor Awards honor those who have made significant contributions to the Jenkins project.  The 2020 Jenkins Contributor Award winners are:\n\nMost Valuable Jenkins Contributor\n\nThis award is presented to an individual who has contributed to the Jenkins project the most through new features, bug fixes or plugin development efforts.\n\nTim Jacomb - Tim is everywhere in the Jenkins community: plugins, Jenkins core maintenance, Google Summer of Code, infrastructure, and new initiatives like GitHub App authentication and Dark Theme. His software, frontend and infrastructure skills help to push the Jenkins project forward. Several examples of features shipped by Tim in 2020: Read-only Jenkins configuration, GitHub App Authentication support, Jenkins Dark Theme and many other smaller features here and there. Tim is also the second most active code reviewer in the Jenkins core.\n\nJenkins Security MVP\n\nThis award is presented to the individual who most consistently provides excellent Jenkins security reports or resolves Jenkins security issues.\n\nJames Holderness - Security issues reported by James have been included in nine of the nineteen security advisories published by the Jenkins project in the last 12 months. His issue reports have detected many cases where sensitive information was being stored insecurely by plugin maintainers. Jenkins users and the Jenkins security team are sincerely grateful for the issue reports that James has provided.\n\nMost Valuable Jenkins Advocate\n\nThis award is presented to an individual who has helped advocate for Jenkins through organization of a local Jenkins Area Meetup(s), or virtual equivalent.\n\nMarky Jackson -  Marky has been very active in many Jenkins advocacy & Outreach initiatives. He was a leader of the Advocacy & Outreach SIG, and he participated in many promotional initiatives organized by the SIG. Marky was also a copy-editor of the Jenkins Twitter account where he contributed a lot to it. In addition to that, Marky has presented talks as well as provided technical support on Jenkins at multiple events including Jenkins Online Meetups, in person as well as virtual conferences.\n\nCongratulations to James, Marky and Tim! We are grateful for their contributions to the betterment of the Jenkins project.","title":"“Jenkins Contributors Awarded Top Honors at DevOps World 2020”","tags":["event","devopsworld2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2020-12-16T00:00:00.000Z","id":"c4aebfbd-d38b-5f0a-9232-aed83e29625f","slug":"/blog/2020/12/16/call-for-mentors/","strippedHtml":"Google Summer of Code (GSoC)\nis a program where students are paid a stipend by Google to work on a free open source project.\nStudents work on the project for three months (June to August).\nPrior to the coding phase, there is a month of community bonding, to welcome students to the Jenkins community and acquaint them with the projects processes for communication and collaboration.\nMentors are actively involved with students from March when students start to work on and submit their applications.\n(see the timeline)\n\nWe are looking for project ideas and mentors to participate in GSoC 2021.\nGSoC project ideas are coding projects that university or college students can accomplish in about three months.\nThe coding projects can be new features, plugins, test frameworks, infrastructure, etc.\nAnyone can submit a project idea, but of course we like it even better if you offer to mentor your project idea.\n\nWe accept new project ideas at any time,\nHowever, project ideas need to be finalised before February 19th, 2021 at 7pm UTC,\nwhich is the deadline for the Jenkins organization to apply to the GSoC program.\nPlease send us your project ideas before the beginning of February so they can get a proper review by the GSoC committee and by the community.\n\nHow to submit a project idea\n\nCreate a pull-request with your idea in a.adoc file\nin the project ideas.\nIt is not necessary to submit a Google Doc, but it will still work if you want to do that.\nSee the instructions on submitting ideas which include an.adoc template and some examples.\n\nCurrent list of ideas\n\nWe currently have a list of project ideas for students to browse.\nNote that this list is subject to change.\n\nWhat does mentoring involve?\n\nPotential mentors are invited to read the information for mentors.\nNote that being a GSoC mentor does not require expert knowledge of Jenkins.\nMentors do not work alone. We make sure that every project has at least two mentors.\nGSoC org admins will help to find technical advisers, so you can study together with your students.\n\nMentoring takes about 5 to 8 hours of work per week (more at the start, less at the end).\nMentors provide guidance, coaching, and sometimes a bit of cheerleading.\nThey review student proposals, pull-requests and the students presentations\nat the evaluation phase.\nThey fill in the Google provided evaluation report form at the end of coding periods.\n\nWhat do you get in exchange?\n\nIn return of mentoring, a student works on your project full time for three months.\nThink about the projects that you’ve always wanted to do but never had the time…​\n\nMentoring is also an opportunity to improve your management and people skills, while giving back to the community.\n\nThere will be a Google Mentor Summit which takes place every year.\nIn 2020, the Mentor Summit was virtual, but in previous years the summit has taken place in person.\n\nSee this post\nabout the 2019 in person Mentor Summit.\n\nGSoC is a fantastic program and the Jenkins project is happy to participate in GSoC again in 2021!\n\nFor any question, you can find the GSoC Org Admins,\nmentors and participants on the GSoC SIG Gitter chat.","title":"Google Summer of Code 2021 call for Project Ideas and Mentors","tags":["gsoc","gsoc2021","community","events","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#082848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/0e311/marckk.jpg","srcSet":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/6105b/marckk.jpg 32w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/11755/marckk.jpg 64w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/0e311/marckk.jpg 128w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/b2ade/marckk.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/a4758/marckk.webp 32w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/47694/marckk.webp 64w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/bf0f6/marckk.webp 128w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/445f6/marckk.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116.99999999999999}},"publicURL":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/marckk.jpg"},"blog":null,"github":"MarckK","html":"<div class=\"paragraph\">\n<p>Kara works with the open source community at CloudBees.\nShe is co-chair of the Continuous Delivery Foundation’s Interoperability SIG and a mentor and org admin for Outreachy and Google Summer of Code.\nAs a board director of codebar.io, Kara works to increase diversity in the tech industry.\nShe is passionate about making technology accessible and building welcoming tech communities.</p>\n</div>","id":"marckk","irc":null,"linkedin":"karadelamarck","name":"Kara de la Marck","slug":"/blog/authors/marckk/","twitter":"KaraMarck"}]}},{"node":{"date":"2020-12-17T00:00:00.000Z","id":"9753ae32-51e9-5bc8-9342-e525dab1f74c","slug":"/blog/2020/12/17/jira-upgrade-for-the-jenkins-project/","strippedHtml":"The Jenkins project has used Jira to track issues for many years.\nJenkins core, Jenkins modules, Jenkins infrastructure, and many Jenkins plugins manage their issue reports with our Jira server.\n\nJira helps the Jenkins project manage issues and tasks related to over 250 000 Jenkins installations.\nIt tracks bugs, enhancement requests, tasks, and security issues.\nIt is used regularly by users around the world.\n\nWe’re grateful for the long-standing contribution that Atlassian provides by donating the Jira license to the Jenkins project.\nWe’re grateful to the Oregon State University Open Source Lab for their donation of equipment and bandwidth to host the server.\n\nUpgrade Timeline\n\nWe were running Jira 7.13 and had been managing that installation for a few years.\nAtlassian announced that Jira 7.13 would end its support life on November 28, 2020.\nWe needed to upgrade from Jira 7.13 to a more recent version of Jira.\nAs part of our membership in the Continuous Delivery Foundation, a Linux Foundation initiative, we could use their project services team to manage our Jira server.\nWe decided to move from hosting our own Jira server to having the Jira experts at the Linux Foundation host it.\n\nThe upgrade timeline looked like this:\n\nNovember 2019 - Infrastructure team begins discussions about the November 2020 end of support for Jira 7.13\n\nAugust 2020 - First conversations with Linux Foundation to host Jira for the Jenkins project.  Draft of the upgrade plan assembled and shared with the community\n\nSeptember 2020 - Schedule for testing week and final transition week proposed.  Authentication options evaluated and selected\n\nOctober 2020 - Test upgrade performed and tested\n\nNovember 2020 - Final upgrade completed and verified\n\nConfronting the Complications\n\nInitial discussions between the Jenkins infrastructure team and the Linux Foundation identified complications related to authentication and SSL certificates.\nWe planned, negotiated, and tested our assumptions throughout the project.\n\nAuthentication\n\nJira servers at the Linux Foundation typically use Linux Foundation accounts for user access.\nUnfortunately, the Jenkins LDAP database includes over 100,000 users and for many of them, Linux Foundation username doesn’t correspond to Jenkins account username.\nIt was not feasible to transition 100,000 user accounts from the Jenkins LDAP database to the Linux Foundation accounts system and still complete the Jira upgrade before the November 28, 2020 deadline.\n\nThe Linux Foundation Project Services team evaluated authentication alternatives and confirmed that they could use the Jenkins LDAP server.\nUsing the Jenkins LDAP server spared us from two transitions, LDAP and Jira, and kept the project timeline feasible.\n\nSSL Certificates\n\nJira servers at the Linux Foundation use Let’s Encrypt to generate SSL certificates for HTTPS.\nThe Linux Foundation uses the DNS method to obtain SSL certificates.\nUnfortunately, the Jenkins project uses the HTTP method to obtain SSL certificates.\n\nThankfully, Olivier Vernin of the Jenkins project and Anton Baranov of the Linux Foundation found a solution.\nThey created an ACME record in the Jenkins DNS server and pointed the issues.jenkins.io DNS record at the new Linux Foundation Jira server.\n\nBuilding the Prototype\n\nAnton Baranov created a prototype Jira server, restored an older Jenkins Jira backup, and upgraded it to Jira 8.13.\nThat first restore detected that we had not provided the Jira attachments or the Jira avatars.\nThat attachments and avatars added multiple gigabytes to the initial backup data and were vital to complete the update.\n\nTesting the Upgrade\n\nA group of volunteers including Jenkins users, security team members, and infrastructure team members tested the upgrade during the week of October 26, 2020.\nThe tests confirmed that authentication worked as expected and that the Jira prototype was functioning as expected.\n\nWe thank the test team, including:\n\nDaniel Beck\n\nTim Jacomb\n\nOlivier Vernin\n\nMark Waite\n\nThe tests included:\n\nCreating and routing issues\n\nCommenting on issues\n\nViewing dashboards with the expected content\n\nLDAP settings\n\nEmail notification\n\nThe tests detected minor issues that Anton was able to correct in preparation for the final upgrade.\nThe testing team agreed that the tests were successful.\n\nDeploying the Upgrade\n\nOlivier Vernin announced the final upgrade by email to the Jenkins infra list with details of the changes happening during the upgrade.\nMonday, November 9, 2020, the final backup of the existing Jira server was copied into the new Linux Foundation server.\n\nThe final upgrade encountered issues that we had not seen during the initial tests.\nThe \"bumps and bruises\" from the unexpected issues were resolved by Anton Baranov as he used a multi-step upgrade process.\nThe steps included:\n\nRestore the earlier backup to Jira 7.13\n\nRestore the most recent backup\n\nUpgrade to Jira 8.13\n\nInstall avatars, attachments, and other images\n\nUpdate DNS entries to point to the new Jenkins Jira server\n\nLessons from the Upgrade\n\nLessons were related to timing, estimation, and communication.\n\nScheduling the Upgrade\n\nThe test upgrade started the week of October 19, 2020.\nIt took several days longer than originally expected.\nThankfully, we had allowed an extra week between the test upgrade and the production upgrade.\n\nThe originally announced schedule for the final upgrade was intentionally placed in a week that would not include a long term support release.\nThat reduced the risk of disruption if the upgrade took longer than required or failed and we had to roll back.\n\nEstimating the Work\n\nDiscussions with the Jenkins project Jira administrators and the Linux Foundation Jira experts provided very reasonable estimates of time to complete the work.\nWe intentionally allowed additional time between first test and final upgrade.\nWe needed that additional time and used it well as the testing week.\n\nCommunicating the Plan\n\nThe distributed nature of the Jenkins project makes communication challenging for major changes.\nWe communicated plans at various stages but still found occasions where the communication was insufficient.\nIn this case, the adage held true that it is, \"impossible to communicate too much\".\n\nThanks for your patience during the upgrade and thanks to the Linux Foundation for administering the Jenkins Jira server.","title":"Jira upgrade for the Jenkins project","tags":["jenkins","infrastructure","jira"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-12-22T00:00:00.000Z","id":"c343609c-9f27-5839-9053-d4fffab8550f","slug":"/blog/2020/12/22/gsoc-report/","strippedHtml":"With the mentor summit and the project retrospectives finished in October,\nnow we can call Google Summer of Code 2020 officially over in the Jenkins community.\nOn behalf of the Jenkins org team, we would like to thank all participants: students, mentors, applicants, and dozens of other contributors who participated in the project this year.\nGoogle Summer of Code would not be successful without the active participation of the Jenkins community.\n\nIf you follow the Jenkins blog, you may have already seen many GSoC 2020 articles created by the project teams.\nHere I would like to focus on the key highlights from the project.\n\nProjects\n\nIn 2020 we had seven students working in the Jenkins mentoring organization.\nWe had 6 projects focused on Jenkins and one project focused on Jenkins X.\nAs usual, in GSoC we focused on problems important to the Jenkins users and community members.\nThe projects delivered highly anticipated new features and key architecture changes\nneeded for long-term evolution of Jenkins.\n\nHere are the projects we had this year:\n\nCustom Jenkins distribution build service by Sladyn Nunes\n\nExternal Fingerprint Storage by Sumit Sarin\n\nGit Plugin Performance Improvements by Rishabh Budhouliya\n\nGitHub Checks API for Jenkins Plugins by Kezhi Xiong\n\nJenkins X: Apps/Addons consolidation by Zixuan Liu\n\nMachine Learning Plugins for Data Science by Loghi Perinpanayagam\n\nJenkins Windows Services: YAML Configuration Support by Buddhika Chathuranga\n\nPlease refer to the project pages for more information, links to the blog posts, and project demos.\nLet’s focus on the results instead.\nThis is the first ever time in Jenkins when all GSoC students have reached the final evaluation and successfully passed it.\nIt was an incredible effort by all the project members and, most importantly, by the students. Thanks a lot to them!\n\n.\n\nThanks a lot to all mentors who were guiding students during their projects:\nZhao Xiaojie,\nKristin Whetstone,\nParichay Barpanda,\nMartin d’Anjou,\nOleg Nenashev,\nAndrey Falko,\nMike Cirioli,\nMark Waite,\nFrancisco Fernandez,\nJustin Harringa,\nOmkar Deshpande,\nUlli Hafner,\nTim Jacomb,\nKara de la Marck,\nJames Strachan,\nNeha Gupta,\nOscar Medina,\nNikhil Da Rocha,\nSahil Kalra,\nBruno P. Kinoshita,\nIoannis Moutsatsos,\nMarky Jackson,\nShivay Lamba, and\nNext Turn.\n\nGSoC 2020 Org admin team:\nKara de la Marck,\nMartin d’Anjou,\nMarky Jackson,\nOleg Nenashev.\n\nEvents\n\nThanks to the GSoC organization stipend from Google and other donations,\nthe Jenkins project usually provides travel grants to successful students so that they can visit a major community event, meet their mentors and community members in person, and present their work there.\nHere are some notes about the GSoC 2019 travel.\nUnfortunately this year it was not possible, and GSoC went completely virtual this year.\n\nOnline meetups\n\nIn August we organized Jenkins Online Meetups where students have presented their projects\n( part 1, part 2).\nYou can find recordings of these presentations in this playlist on the Jenkins YouTube channel.\n\nDevOps World\n\nThis year CloudBees, one of the Jenkins corporate sponsors, invited all students to participate in the DevOps World virtual conference on September 23-25.\nGSoC students did lighting talks about their projects, attended other conference talks, and joined the Continuous Delivery Foundation booth which represented the project at the conference.\nYou can find recordings of the talks and all materials here.\nAlthough the conference was in September, the talks were pre-recorded in early August.\nPlease refer to the Jenkins online meetup recordings for the recent versions.\n\nGSoC Mentor summit\n\nThis is a regular gathering for Google Summer of Code mentors and org admins where they share their experiences about GSoC, outreach programs, community management, and tools.\nUsually it is organized as a multi-day unconference after the end of GSoC, with 2-3 representatives from each project.\nIt has been a great learning experience to participate in it.\nThis year it was a single-day virtual event, and all mentors were able to attend.\nShivay Lamba, one of the GSoC 2020 mentors, also did a lightning talk about the GSoC projects he was working on in Jenkins and CNCF ( slides).\n\nSwag\n\nAll Google Summer of Code students and mentors get swag from Google.\nThis year, Contrinuos Delivery Foundation (CDF) has sponsored swag for 50 most active GSoC participants:\nall students, mentors, and many other contributors who participated and helped the projects to succeed.\nThis is the third year when the Jenkins organization sends extra GSoC swag,\nIn the previous years the swag logistics was one of the most challenging tasks for org admins during the entire project.\nand we highly appreciate help from CDF with this part.\nAs DevOps World presenters, the students have also received special edition speaker swag from CloudBees.\n\nThanks a lot to Google, Contrinuos Delivery Foundation (CDF) and CloudBees!\n\nRetrospective\n\nAfter completion of the coding phases,\norg admins have reached out to all GSoC 2020 participants to gather their feedback and suggestions.\nWe also recommended that project teams hold their own retrospective meetings.\nSuch information is instrumental to continuously improving GSoC in the Jenkins community.\nWe thank all contributors who shared their feedback!\n\nThe organization-wide retrospective was organized as a survey and a series of retrospective meetings.\nYou can find aggregated results in this Google Doc.\nOverall, we received very positive feedback from students and mentors.\nThe GSoC framework in Jenkins has matured significantly during the previous years.\nThe effort we invested to create guidelines and recommendations for all parties helped a lot because all the expectations were known in advance.\nAs usual, there is much to improve, especially with regards to the community bonding phases and cross-project communications.\nWe are processing the feedback, and we will expand our documentation and the contributor onboarding plans next year.\n\nSome personal notes\n\nI have been involved in leading and coordinating Google Summer of Code in open source projects since 2016.\nThis year I visited the GSoC stand at FOSDEM and met a few organizers and former students.\nA few days after, I proposed participating in GSoC at the Jenkins contributor summit in Brussels,\nand several contributors supported this idea.\nWe spent several hours to create the first Jenkins GSoC page and brainstorm on project ideas.\nWe submitted our application and were accepted.\nThanks a lot to the Google team that gave us a chance!\n\nIt is great to work with the students and see how they explore the open source community and grow professionally as engineers.\nIt is also awesome to see how some of them stay in the project and keep contributing,\nincluding becoming plugin maintainers and GSoC mentors.\nBut, for me, Google Summer of Code is not just about mentoring.\nIt also helps a lot with the community bonding…​ for the existing community like Jenkins which has a lot of isolated sub-communities in plugins.\nMany maintainers work alone, and it can be quite lonely working to maintain a plugin without feedback, developer ideas, and user interactions.\nWhen plugin contributors become project mentors, they join the wider community effort and work in teams.\nIn many cases they start contributing to the organization-wide activities and goals,\nand it grows the \"backbone\" of the Jenkins community.\nLike other community-driven projects, we need such backbone to scale the community and onboard more contributors to the countless Jenkins components.\nSo far it works really well and GSoC excels among outreach programs in this regard.\n\nI would like to thank the Google Open Source team, students and all Jenkins community members for the great Google Summer of Code this year.\nWe also thank the Continuous Delivery Foundation for their help to recognize contributors and allow organization administrators to focus on projects.\nLast but not least, I would like to thank the Jenkins org admin team:\nMartin d’Anjou,\nMarky Jackson, and\nKara de la Marck.\nThis was a crazy year for everyone. Regardless of that, the org admins stepped up and took responsibility for students and mentors involved in the project, with a serious time commitment.\nNot all work by the organizers is publicly visible (applications, project selection, resolving conflicts),\nbut this work is essential to the project’s success.\nThanks a lot to org admins and mentors who helped with the administrative tasks this year!\n\nWhat’s about GSoC 2021?\n\nYes, we plan to participate in Google Summer of Code 2021.\nThe application period for organizations will start in a few months,\nbut we have already started preparing for the next GSoC session.\nWe are looking for mentors, org admins and project ideas.\nPlease contact us if you are interested!\n\nCall for Mentors and Project Ideas\n\nGSoC 2021 project ideas\n\nHOWTO: Propose a project idea\n\nInformation for mentors : guidelines and expectations\n\nWe invite potential students to start exploring the project and the available project ideas.\nOriginal ideas are always welcome in the project, and starting early is a great opportunity to\nget introduced to the Jenkins community, collect more information about the problem areas,\nand to create a good proposal.\n\"Start early\" is the most popular recommendation from GSoC 2020 participants to future GSoC students,\nand we encourage you to follow this advice!","title":"Google Summer of Code 2020 summary","tags":["gsoc","gsoc2020","jenkins","community","events","mentor"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2021-01-12T00:00:00.000Z","id":"ae6a8999-441c-5627-ae10-15ce8370007b","slug":"/blog/2021/01/12/new-year-report/","strippedHtml":"The Jenkins community congratulates all users and contributors with the New Year!\nLet’s take a look at some changes this year.\nWe would like to thank all awesome Jenkins users and contributors who have been with us during this year.\n\nHighlights\n\nSome of the key highlights:\n\nHundreds of first-timer contributors joined the community\n\nMajor UI/UX improvements in the Jenkins core, including the landing page, plugin manager, dark theme, and read-only configurations support\n\nOutreach programs like Google Summer of Code (7 projects), Google Season of Docs, UI/UX hackfest, etc.\n\nPublic roadmap for the project\n\nTerminology changes in the project, new Code of Conduct\n\nTechnical debt cleanup: XStream unforking, Acegi Security replacement, etc.\n\nContinued evolution of the plugin ecosystem, especially in the area of Cloud Native solutions and tool integrations\n\nContinued documentation cleanup, great progress with plugin documentation migration\n\nGraduation in the Continuous Delivery Foundation\n\nJenkins User Interface and User Experience\n\nThis year there were many activities around Jenkins user experience and long-anticipated user interface changes.\nThis is a coordinated effort being led by the User Experience SIG, and by many contributors to the project.\nKey project highlights:\n\nLook & Feel updates of the Jenkins Web UI, including styling rework, new typography and layouts\n\nMajor rework of plugin management UI/UX\n\nDark theme for Jenkins\n\nAccessibility improvements\n\nSupport for read-only configuration pages\n\nIn May we also organized a Jenkins UI/UX hackfest where we worked on some key stories improving user experience.\n\nJenkins security\n\nIn 2020 the Jenkins security team has released 19 advisories for the Jenkins core, plugins and other components.\nIn total 198 vulnerabilities were fixed, and 72 plugin vulnerabilities were announced without a fix at the time of advisory publishing.\nAs a project, we are receiving a continuous flow of new reports and continue to provide corrections.\nCross-site scripting (XSS) vulnerabilities were the most popular type this year, followed by unprotected credentials.\n\nThere have also been developer tooling improvements,\nincluding GitHub CodeQL evaluation for targeted security issues search\nand Find-Sec-Bugs adoption for static analysis of the plugin and Jenkins core code.\nAlong with wider adoption of Dependabot and automated dependency scanning on GitHub.\n\nDocumentation\n\nJenkins Documentation SIG is working on creating more documentation for Jenkins on different platforms,\nincluding cloud platforms.\nJenkins on Kubernetes was one of the key stories this year for the SIG,\nalong with documentation migration to jenkins.io and wider adoption of Documentation-as-code in plugins.\n95% of the 200 most installed Jenkins plugins have moved to \"documentation as code\" or have a pending pull request with updates.\nIn total, almost 600 plugins have already been migrated.\nThere were major updates in Jenkins documentation on jenkins.io, with a lot of content being moved from the old Jenkins Wiki.\n\n2020 was the first year when Jenkins participated in Google Season of Docs (GSoD).\nThis program brings together open-source and technical writers communities for the benefit of both.\nThis year’s student, Zainab Abubakar,\ndid an amazing job documenting Jenkins on Kubernetes.\nNow Jenkins users can find official documentation about deploying and scaling Jenkins in Kubernetes.\nSee the project report by Zainab here.\n\nJenkins Release Automation\n\nThe Jenkins project has delivered weekly and long term support releases since it was formed in 2011.\nThose releases were delivered by Kohsuke Kawaguchi from his release infrastructure.\n\nBeginning in April 2020, those releases are delivered by the new release automation setup.\nIt is hosted within the Jenkins’ Kubernetes cluster, with fully automated management and continuous delivery of services within the setup.\nWe transitioned to new build processes, new code signing certificates, and new release automation jobs.\nThanks to Olivier Vernin and all Infrastructure sub-project contributors for the successful completion of the release automation project!\n\nMoreover, there is ongoing work on continuous delivery of Jenkins plugins ( JEP-229) and on re-designing other Jenkins instances within the project (infra-ci, trusted-ci, and ci.jenkins.io for plugins).\nIn the next few months these stories should provide Jenkins contributors with a modern environment for CI and CD of all Jenkins components.\n\nTerminology updates\n\nSince July, we have officially replaced the old \"master\" terminology with the \"controller\" term.\nIt is a follow-up to the \"agent\" terminology introduced in 2016.\nWe have also deprecated usages of the “blacklist/whitelist” terminology in all components.\nCurrently the community is working on the cleanup of the remaining occurrences in the codebase and documentation, and we invite everyone to contribute.\n\nAs a part of the terminology cleanup, last spring we announced the renaming of the official Docker images for Jenkins agents.\nAs a reminder, it does not have any immediate impact on Jenkins users, but they are expected to gradually upgrade their instances.\n\nSee more information about terminology updates here and here.\n\n“Jenkins is the Way” program\n\nThis year the Advocacy and Outreach SIG started the “Jenkins is the Way” initiative which focuses on promoting user success stories.\nOver the year, the team published 54 user stories and six case studies on https://jenkinsistheway.io/ as well as a significant amount of community marketing.\nWe also published a number of testimonial videos advertising user stories,\nincluding this Introduction to \"Jenkins is the Way\" video.\n\nSee all the stories HERE\n\nEvents\n\nGoogle Summer of Code\n\nIn 2020 we had seven students working in the Jenkins mentoring organization.\nWe had 6 projects focused on Jenkins and one project focused on Jenkins X.\nAs usual, in GSoC we focused on problems important to the Jenkins users and community members.\nThe projects delivered highly anticipated new features and key architecture changes needed for the long-term evolution of Jenkins.\n\nThis is the first-ever time in Jenkins when all GSoC students have reached the final evaluation and successfully passed it.\nIt was an incredible effort by all the project members and, most importantly, by the students. Thanks a lot to them!\n\nRead more: https://www.jenkins.io/blog/2020/12/22/gsoc-report/\n\nJenkins in Hacktoberfest 2020\n\nIn October we participated in Hacktoberfest.\nOur featured projects included the Jenkins core, jenkins.io website and plugins.jenkins.io, Helm charts, and multiple plugins.\nWe also encouraged contributors to participate in the Documentation as Code and terminology cleanup across the entire Jenkins ecosystem.\n\nSee the details in the Hacktoberfest page.\n\nIn total we received 226 pull requests from Hacktoberfest participants.\nSome stats per Jenkins GitHub organization:\n\n'jenkinsci', PRs: 189, Hacktoberfest contributors: 61\n\n'jenkins-infra', PRs: 100, Hacktoberfest contributors: 40\n\n'jenkins-zh', PRs: 37, Hacktoberfest contributors: 2\n\nJenkins at DevOps World\n\nThe annual DevOps World,\nformerly known as DevOps World | Jenkins World held on Sept 22-24, with workshops on Sept 25.\nJust like other events in 2020, DevOps World pivoted to a virtual event but that didn’t mean there was a shortage of sessions or networking opportunities. There were over 50 Jenkins/open-source.\nAnd a special congratulations is in order to this year’s Jenkins Contributor Award winners:\n\nJames Holderness - Jenkins security MVP\n\nMarky Jackson - Most valuable Jenkins advocate\n\nTim Jacomb - Most valuable Jenkins contributor\n\nBelow are just a few sessions, the full agenda can be found HERE :\n\nJenkins Where It Is and Where It Is Going\n\nOne Jenkins to Rule them All\n\nJenkins UI Gets a Makeover\n\nJenkins Pipeline and DevSecOps for API Security\n\nGraduation at Continuous Delivery Foundation\n\nJenkins is the first project to graduate in the CD Foundation.\nIn August the project announced that the Jenkins project has achieved the graduated status in the Continuous Delivery Foundation (CDF).\nThanks to all contributors who made our graduation possible!\nBelow you can find a few key changes we have applied during the graduation process:\n\nWe introduced a new public roadmap for the Jenkins project.\nThis roadmap aggregates key initiatives in all community areas: features, infrastructure, documentation, community, etc.\nIt makes the project more transparent to all Jenkins users and adopters, and at the same time helps potential contributors find the hot areas and opportunities for contribution.\nThe roadmap is driven by the Jenkins community and it has a fully public process documented in JEP-14.\n\nA new list of Jenkins adopters was introduced on jenkins.io.\nThis list highlights Jenkins users and references their case studies and success stories,\nincluding ones submitted through the Jenkins Is The Way portal.\nPlease do not hesitate to add your company there!\n\nWe passed the Core Infrastructure Initiative (CII) certification.\nThis certification helps us to verify compliance with open source best practices and to make adjustments in the project (see the bullets below).\nIt also provides Jenkins users and adopters with a public summary about compliance with each best practice.\nDetails are on the Jenkins core page.\n\nJenkins Code of Conduct was updated to the new version of Contributor Covenant.\nIn particular, it sets best practices of behavior in the community, and expands definitions of unacceptable behavior.\n\nMore information can be found HERE, and HERE.\n\nPublic Roadmap\n\nThe Jenkins project now has a public, community-driven project roadmap.  Roadmap items are major initiatives and are considered as official plans.\nThe roadmap aggregates key initiatives in all areas of the project.\n\nMany of the 2020 released roadmap items are mentioned elsewhere in this document, including release automation, Core Infrastructure Initiative (CII) certification,\nuser interface improvements, read-only configuration pages,\nand Google Summer of Code projects like the GitHub Checks API or External Fingerprint Storage.\n\nOther roadmap items include mirror infrastructure improvements, a new Windows installer,\nand preview releases of pluggable storage for external fingerprints, build logs, and unit test results.\n\nJenkins 2020 Elections\n\nIn October-December the Jenkins community held the regular elections.\nThis year we were  electing for 2 governance board members and for all five officer positions, namely: Security, Events, Release, Infrastructure, and Documentation. These roles are an essential part of Jenkins' community governance and well-being. We thank all candidates and voters who participated this year.\n\nKey results:\n\nGavin Mogan and Marky Jackson joined the Jenkins Governance Board\n\nTim Jacomb was elected as Release Officer\n\nMarky Jackson became the new Events Officer\n\nOlivier Vernin, Daniel Beck, and Mark Waite will continue as Infrastructure, Security and Documentation officers\n\nFull election results: https://www.jenkins.io/blog/2020/12/03/election-results/\n\nAnd even more\n\nThis blog post does not provide a full overview of what changed in the project,\nit is just a slice of the key highlights mentioned by the contributors.\nThe Jenkins project consists of more than 2000 plugins and components which are developed by thousands of contributors.\nThanks to them, a lot of changes happen in the project every day. We are cordially grateful to everybody who participates in the project, regardless of contribution size. Everything matters: new features, bug fixes, documentation, blog posts, well reported issues, Stackoverflow responses, etc. THANKS A LOT TO ALL CONTRIBUTORS!\n\nSo, keep updating Jenkins and exploring new features.\nAnd stay tuned, there is much more to come next year!\n\nWhat’s next?\n\nTechnical changes. 2021 will be another busy year for the Jenkins community.\nThere are many long-overdue changes in the project, which need to happen if we want Jenkins to succeed.\nThere are many areas on the roadmap : UX revamp, cloud native Jenkins, pluggable storage, etc.\nThere will also be a continued cleanup of old dependencies and technical debt.\nSeveral key changes are expected to land in the March LTS baseline: update to Spring Security, XStream unforking, JQuery update, etc.( announcement).\nIn addition to that, we will keep working on expanding platform support in Jenkins, including provisioning support for new Java versions and official images for more architectures like Arm.\n\nDocumentation. Documentation efforts will continue in the next year,\nwith a focus on documenting Jenkins usage on modern platforms and and automation use-cases.\nWide adoption of documentation-as-code will also continue for plugins By this time almost 600 plugins have been migrated, but there are hundreds more plugins to go.\n\nSecurity. Another important area is Jenkins security. Automation tools like Jenkins are a key part of the software delivery process in organizations, and their security is essential for the security of products.\nMisconfigured or outdated systems are a common attack vector, but there are also areas for improvement on the project’s side.\nBe sure there will be security advisories and vulnerability fixes in 2021.\nWe plan to keep adopting best security development and software delivery practices, and to improve dependency management and developer tools in the project. These areas will be in the spotlight for the project next year.\n\nEvents. Next month we will participate in FOSDEM, and there will be a virtual Jenkins stand there.\nThere will also be a CI/CD devroom.\nIf you are interested to meet Jenkins contributors, it is a great opportunity. We also plan to continue all outreach programs and on onboarding more contributors.\nAt the moment we are looking for Google Summer of Code 2020 mentors and project ideas ( announcement).\nWe are also ready to consider other non-coding project ideas as a part of CommunityBridge.\nIf you are interested, please contact the Advocacy and Outreach SIG.\n\nJoin us in 2021!\n\nWe are always looking for more contributors, regardless of the profile and experience.\nJenkins is a vast ecosystem which includes many modern technologies.\n\nWe invite Jenkins users and contributors to participate in the community and to move these initiatives forward!\nJoin us in the mailing lists and special interest groups,","title":"2020 A Year Like No Other","tags":["community","new-year-blogpost","governance"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png","srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/914ee/markyjackson-taulia.png 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/1c9ce/markyjackson-taulia.png 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/acb7c/markyjackson-taulia.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/ef6ff/markyjackson-taulia.webp 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/8257c/markyjackson-taulia.webp 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/6766a/markyjackson-taulia.webp 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/22bfc/markyjackson-taulia.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/markyjackson-taulia.png"},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"/blog/authors/markyjackson-taulia/","twitter":"markyjackson5"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2021-01-26T00:00:00.000Z","id":"59910496-62a4-5b58-a9d0-a4df1e331026","slug":"/blog/2021/01/26/new-ebook-build-deploy-and-automate-great-stuff-with-jenkins/","strippedHtml":"In April of last year, we launched a new Jenkins community website called JenkinsIsTheWay.\nThe Jenkins Is The Way site has collected the experiences of Jenkins users around the world as they develop software and create solutions.\nThey are charting new paths, discovering new opportunities, and overcoming challenges.\n\nThat’s what makes Jenkins Is The Way tick.\nEngineers in the Netherlands might have already met challenges faced by developers in India.\nSolutions uncovered by DevOps teams in Spain may benefit those just starting in the USA.\nInterns in Bogota may develop pipeline solutions that can be integrated into workflows used across the globe in Tokyo.\nOr vice versa!\n\nNo matter where you are, regardless of whether your solution is regional or global in nature, Jenkins Is The Way.\n\nTelling your stories in a new eBook\n\nTo date, we have nearly 60 user stories, a handful of case studies, and some new user testimonial videos from the Jenkins community.\nYou shared how using Jenkins has helped make your builds faster, your pipelines more secure, and your developers and software engineers happier.\nIn essence, Jenkins Is The Way showcases how Jenkins has made it a whole lot easier to do the work you do every day.\n\nWe’ve now gathered some of those stories in our first Jenkins Is The Way ebook, covering various challenges and solutions from six different industries: Aerospace, Education, Finance, Insurance, Retail, and Travel.\n\nYou’ll read about innovations from KP Labs in Poland and Preply in Ukraine.\nYou’ll discover how automation helped Avoris out of Spain & Portugal and Tymit in the United Kingdom.\nAnd you’ll be inspired by what China’s JD.com and Topdanmark in Denmark were able to achieve after tapping into the Jenkins community.\n\nThis curated collection of stories illustrates how Jenkins community members build next-generation DevOps and CI/CD platforms as the backbone for software innovation across companies of all sizes.\nThey highlight the innovation, ingenuity, and keen ability to adapt Jenkins plugins to handle everyday business issues, everywhere.\n\nThe technology landscape is full of solutions perfected to tackle all aspects of software development.\nBut time and time again, developers keep coming back to Jenkins.\nYour engineering time and resources are too valuable to be spent re-inventing the wheel or handling manual testing and deployment cycles.\n\nJenkins' vast array of plugins and pre-built solutions will have you automating more than you ever imagined.\nSo, get inspired to build great stuff with Jenkins.\nAnd, please share this ebook with your network.\n\nShare your story!\n\nAnd when you’re ready to tell your story, we’re prepared to help you share it.\nFill out the short questionnaire, and we’ll send you our Jenkins Is The Way T-shirt as a thank you!\n\nSpecial thanks to CloudBees, Inc. for sponsoring this program.","title":"New eBook: Build, deploy, and automate great stuff with Jenkins","tags":["jenkins","jenkinsistheway","casestudies","Jenkinsuserstories"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2021-02-08T00:00:00.000Z","id":"cf843c22-ea33-5664-9347-9c1a8010c2ed","slug":"/blog/2021/02/08/docker-base-os-upgrade/","strippedHtml":"Beginning with Jenkins 2.279 and Jenkins 2.263.4, the Jenkins project is upgrading the base operating system and Java version used in the jenkins/jenkins:latest and jenkins/jenkins:lts images.\nThe update replaces OpenJDK 8u242 with AdoptOpenJDK 8u282 and replaces Debian 9 (\"Stretch\") with Debian 10 (\"Buster\").\n\nWhy?\n\nWe’re changing the base image so that we have a better supported operating system and a more current Java release for Jenkins controllers.\n\nBetter supported operating system\n\nThe Docker images provided by the Jenkins project rely on the operating system security processes of the operating system provider.\n\nOur Docker images have used Debian 9 (\"Stretch\") for multiple years.\nDebian 9 security updates have been discontinued as of July 6, 2020.\nDebian 9 Long Term Support security updates will be discontinued at the end of June 2022.\nThe upgrade to Debian 10 keeps us on an operating system maintained by the operating system security team.\n\nMore current Java release\n\nThe Debian 9 Docker images were based on the openjdk:8-jdk-stretch Docker image.\nThe last update to that image was one year ago with the release of JDK 8u242.\nWe need a maintained Docker base image that keeps pace with JDK releases and operating system updates so that the controller is running the most recent Java updates and most recent operating system updates.\n\nOther Jenkins controller images have already switched from using openjdk base images to instead use base images provided by Eclipse Adoptium.\nEclipse Adoptium is the Eclipse project formed when AdoptOpenJDK joined the Eclipse Foundation.\nThis change adapts the jenkins/jenkins:latest and jenkins/jenkins:lts images to use the Adoptium JDK images in the same pattern as is already used for the Jenkins JDK 11 Docker images like jenkins/jenkins:lts-jdk11.\nThe Jenkins Platform SIG has enjoyed very good results in our interactions with the Eclipse Adoptium project.\nWe look forward to continuing our collaboration with them.\n\nThanks a lot to Alex Earl and Jim Crowley for the image build restructuring groundwork that made the image upgrade possible!\nAlso thanks to Oleg Nenashev and other contributors for their reviews and testing.\n\nPackaging changes\n\nThe Jenkins Docker image based on Debian 10 (\"Buster\") includes some different packages than Debian 9 (\"Stretch\").\nSome packages have been removed because they are no longer supported by their communities.\nSome packages have been removed due to infrequent and decreasing use.\nUsers of the Jenkins Docker images may need to extend their definition of their Docker image to include packages that are no longer included in the base image.\n\nSCM packages removed\n\nThe following source control management packages are no longer included in the Jenkins controller images for jenkins/jenkins:latest or for jenkins/jenkins:lts :\n\nbzr\n\nmercurial\n\nsubversion\n\nOther packages removed\n\nAdditional packages that are no longer included in the Jenkins controller images include:\n\nbzip2\n\nmime-support\n\npython (the Python project stopped supporting Python 2 January 1, 2020)\n\nxz-utils\n\nA detailed list of the exact package changes is available in the pull request.\n\nUpgrade and compatibility notes\n\nThe Jenkins controller images are designed to be extended to meet user needs.\nCustom Jenkins controller images can be created from the base images and are designed to allow additional Jenkins plugins and additional operating system packages.\n\nFor example, the Installing Docker instructions illustrate a technique to install the Blue Ocean plugins and some operating system packages in a custom Docker image.\n\nDocker image with Subversion\n\nThe following Docker image definition installs the most recent Jenkins Long Term Support release with the subversion plugin and the operating system subversion command:\n\nFROM jenkins/jenkins:lts\nUSER root\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends subversion\nUSER jenkins\nRUN jenkins-plugin-cli --plugins subversion:2.14.0\n\nBuild a new docker image from this Dockerfile and assign the image a meaningful name, e.g. \"myjenkins-subversion:1.1\":\n\ndocker build -t myjenkins-subversion:1.1 .\n\nDocker image with Mercurial\n\nThe following Docker image definition installs the most recent Jenkins Weekly release with the mercurial plugin and the operating system hg command:\n\nFROM jenkins/jenkins:latest\nUSER root\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends mercurial\nUSER jenkins\nRUN jenkins-plugin-cli --plugins mercurial:2.12\n\nBuild a new docker image from this Dockerfile and assign the image a meaningful name, e.g. \"myjenkins-mercurial:1.1\":\n\ndocker build -t myjenkins-mercurial:1.1 .\n\nWhat’s next?\n\nWe will continue Docker image updates as new Java versions are released.\n\nIf you are interested in new features in Jenkins Docker packaging,\nstay tuned for future announcements!\nThere are multiple ongoing initiatives which you can find on the public Jenkins roadmap.\nSome stories:\n\nSwitching to AdoptOpenJDK.\n\nGeneral availability of Windows images.\n\nSupport for more platforms (AArch64, IBM s390x, PowerPC).\n\nIntroducing multi-platform Docker images.\n\nIf you are interested in any of these projects and would like to contribute,\nplease reach out to the Platform Special Interest Group which coordinates initiatives related to Jenkins in Docker.","title":"Docker image updates","tags":["announcement","docker","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2021-02-16T00:00:00.000Z","id":"8b7706b6-a71f-52c2-ad5b-3f79d55f7ede","slug":"/blog/2021/02/16/contributor-summit-online/","strippedHtml":"The Jenkins Contributor Summit brings together current and future contributors to the Jenkins project.\nWe’re hosting an online summit this year to encourage contributors from around the world to meet, discuss, and plan for the future.\n\nThe Contributor Summit will be Tuesday, February 23rd 2021 through Thursday, February 25, 2021.\nThe summit brings together community members to learn, meet, and help shape the future of Jenkins.\nIn the Jenkins community we value all types and sizes of contributions and love to welcome new participants.\n\nFormat\n\nThe online format allows greater flexibility for meeting times and topics.\nContributors will meet to discuss specific topics in smaller groups at times that are convenient for those in the meeting.\n\nOpening session\n\nThe opening session will start Tuesday, February 23, 2021 at 15:00 UTC.\nAfter an initial welcome and overview, we’ll hear from leaders in the Jenkins project as they share the results from the previous 12 months and outline ideas for the next 12 months.\n\nSecurity - Daniel Beck\n\nInfrastructure - Olivier Vernin\n\nRelease - Tim Jacomb\n\nUser experience - Félix Queiruga\n\nChinese localization - 赵晓杰(Rick)\n\nConfiguration as code - Tim Jacomb\n\nGoogle Summer of Code - Kara de la Marck\n\nDocumentation - Mark Waite\n\nEvents and Advocacy - Alyssa Tong\n\nCloud Native - Kara de la Marck\n\nPlatforms - Mark Waite\n\nAfter those presentations, we’ll create \"breakout rooms\" in the online meeting that will allow those interested in specific tracks to meet, identify preferred times for their tracks, and prepare draft agendas for their tracks.\n\nTracks\n\nSmaller sessions (\"tracks\") will be run in the 48 hour period between the opening session and the closing session.\nThese smaller sessions will be focused on specific topics.\nA track leader will organize the track meeting, facilitate discussions in the track meeting, and present a summary of the track results in the closing session.\n\nClosing session\n\nThe opening session will start Thursday, February 25, 2021 at 15:00 UTC.\nAfter an initial welcome and overview, we’ll hear from track leaders as they share the results from their track meetings.\n\nWe’ll identify items that should be added to the Jenkins roadmap, items that should be further investigated by special interest groups, and items that need further discussion elsewhere.","title":"Jenkins Contributor Summit Online Feb 23-25","tags":["community","events"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2021-02-17T00:00:00.000Z","id":"85fd5981-bfcf-58c9-9dcf-04e8ebca8c11","slug":"/blog/2021/02/17/cfp-cdcon/","strippedHtml":"Hear ye! Hear ye! Jenkins Community,\n\ncdCon 2021 (the Continuous Delivery Foundation’s annual flagship event) is happening June 23-24 and its call for papers is open!\n\nThis is your chance to share what you’ve been doing with Jenkins.\nAre you building something cool?\nUsing it to solve real-world problems?\nAre you making things fast?\nSecure?\nOr maybe you’re a contributor and want to share what’s new.\nIn all cases, we want to hear from you!\n\nSubmit your talk for cdCon 2021 to be part of the conversation driving the future of software delivery for technology teams, enterprise leadership, and open-source communities.\n\nSubmission Deadlines\n\nEarly-Bird Deadline\n\nFriday, February 19 by 11:59 PM PST\n\nFinal Deadline\n\nFriday, March 5 at 11:59 PM PST\n\nTopics\n\nHere are the suggested tracks:\n\nContinuous Delivery Ecosystem\n\nThis track spans the entire Continuous Delivery ecosystem, from workflow orchestration, configuration management, testing, security, release automation, deployment strategies, developer experience, and more.\n\nAdvanced Delivery Techniques\n\nFor talks on the very cutting edge of continuous delivery and emerging technology, for example, progressive delivery, observability, and MLOps.\n\nGitOps & Cloud-Native CD\n\nSubmit to this track for talks related to continuous delivery involving containers, Kubernetes, and cloud*native technologies. This includes GitOps, cloud-native CD pipelines, chatops, best practices, etc.\n\nContinuous Delivery in Action\n\nThis track is for showcasing real-world continuous delivery addressing challenges in specific domains e.g. fintech, embedded, healthcare, retail, etc. Talks may cover topics such as governance, compliance, security, etc.\n\nLeadership Track\n\nTalks for leaders and decision-makers on topics such as measuring DevOps, build vs buy, scaling, culture, security, FinOps, and developer productivity.\n\nCommunity Track\n\nThere is more to open source than code contributions. This track covers topics such as growing open source project communities, diversity & inclusion, measuring community health, project roadmaps, and any other topic around sustaining open source and open source communities.\n\nSingular project focus and/or interoperability between:\n\nJenkins\n\nJenkins X\n\nOrtelius\n\nSpinnaker\n\nScrewdriver\n\nTekton\n\nOther – e.g. Keptn, Flagger, Argo, Flux\n\nView all tracks and read CFP details.\n\nWe look forward to reading your proposal!\n\nSubmit it here","title":"cdCon 2021 - Call for Jenkins Proposals","tags":["cdcon","cfp","cicd","continuous delivery"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/4ea1f/cdfoundation.jpg","srcSet":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/b8799/cdfoundation.jpg 32w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/c15a4/cdfoundation.jpg 64w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/4ea1f/cdfoundation.jpg 128w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/d4baf/cdfoundation.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/c9eb6/cdfoundation.webp 32w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/5f6e9/cdfoundation.webp 64w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/b881c/cdfoundation.webp 128w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/3f20b/cdfoundation.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":122}},"publicURL":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/cdfoundation.jpg"},"blog":"https://cd.foundation/news/blog/","github":"cdfoundation","html":"<div class=\"paragraph\">\n<p>The Continuous Delivery Foundation (CDF) serves as the vendor-neutral home of many of the fastest-growing projects for continuous delivery, including Jenkins, Jenkins X, Spinnaker, and Tekton.\nCDF supports DevOps practitioners with an open model, training, industry guidelines, and a portability focus.</p>\n</div>","id":"cdfoundation","irc":null,"linkedin":null,"name":"Continuous Delivery Foundation","slug":"/blog/authors/cdfoundation/","twitter":"cdeliveryfdn"}]}},{"node":{"date":"2021-03-15T00:00:00.000Z","id":"0cdf29b8-8d09-5818-971a-659c5fc9353a","slug":"/blog/2021/03/15/update-center-certificate-rotation/","strippedHtml":"On the 29th of March 2021, we’ll rotate the Jenkins update center certificate.\nThe existing certificate expires in April 2021.\nWhen the new certificate is installed on March 29, 2021, Jenkins versions older than 2.178 (April 2018), won’t be able to communicate with the default and experimental update centers.\nInstances using alternative update centers (self-hosted or vendor-provided) will not be affected by this change.\nRegarding plugins update, the update-center usually supports up to one-year-old Jenkins core versions with 2.204 being the oldest version supported.\n\nIf you don’t update regularly, please review the Jenkins security advisories and use this change as your motivation to update to a more recent Jenkins version.\n\nWho\n\nJenkins users running Jenkins versions older than 2.178 will not see any further updates after the update center certificate change March 29, 2021.\n\nJenkins developers will not see plugin updates when they use mvn hpi:run to test their plugin if the Jenkins version is older than 2.178.\nPlugin developers can update their minimum Jenkins version to a newer Jenkins version.\nRefer to the guidelines in\"Choosing a Jenkins version\" when selecting the new minimum Jenkins version.\nPlugin developers may also be able to test with a newer Jenkins version using arguments like mvn -Djenkins.version=2.249.1 hpi:run.\n\nJenkins users running versions 2.178 or newer are not affected by this change.\n\nWhat\n\nJenkins uses the update center to identify updates to core and to plugins.\nThe service signs its metadata with a certificate that is cross-signed by a root certificate.\nJenkins is bundled with the root certificate so it can confirm the authenticity of update center data.\nWhen updates are available, an alert is shown to Jenkins users that reminds them to update.\n\nWhy\n\nThe root certificate bundled in Jenkins was created in April 2011 and will expire in April 2021.\nWe prepared for this rotation in April 2018 when we bundled the new root certificate with Jenkins core releases.\nIt’s now time to use the new root certificate with a new update center certificate.\nThe new root certificate will expire in April 2028.\n\nYou can follow the work for this certificate rotation in this ticket INFRA-2902\n\nSo again, keep your instance updated and everything should be fine.\n\nSee you in 2028,\n\nVarious Links:\n\nINFRA-2902 - Rotate the update center certificate\n\nINFRA-2732 - Annual certificate update\n\nINFRA-1502 - Add new root certificate (2018)\n\njenkins-infra/update-center2 - Jenkins update center certificates\n\nupdates.jenkins.io - Jenkins update center\n\nadvisories - Jenkins security advisories","title":"Update-Center certificate rotation","tags":["announcement","update-center"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/olblak.png"},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak/","twitter":"0lblak"}]}},{"node":{"date":"2021-03-17T00:00:00.000Z","id":"cb66640e-a043-514d-8d9e-460298a6e73d","slug":"/blog/2021/03/17/gsoc2021-announcement/","strippedHtml":"On behalf of the Jenkins GSoC org team,\nI am happy to announce that this year, for the first time, the Jenkins projects will be participating in\nGoogle Summer of Code 2021\nas part of the\nContinuous Delivery Foundation (CDF) GSoC organization.\n\nWe’re very excited to have the Jenkins project participate in GSoC as part the CDF mentoring organisation along with\nfellow CDF projects such as Ortelius, Screwdriver, Spinnaker, and Tekton. We believe that being part of the CDF\nGSoC org will create an environment for students with even more mentoring channels, potential cross-fertilization of ideas,\nand an even greater community of DevOps practitioners to join!\n\nWhat’s next?\nGSoC is officially announced, and please expect more students to contact projects in our\nGitter channels and mailing lists.\nMany communications will also happen in SIG and sub-project channels.\nAlso, please join the gsoc channel on the /\">CDF Slack.\nWe will be working hard in order to help students to find interesting projects, to explore the area,\nand to prepare their project proposals before the deadline on April 13th.\nThen we will process the applications, select projects and assign mentor teams.\n\nAll information about the Jenkins GSoC is available on its sub-project page.\n\nI am a student. How do I apply?\n\nSee the Information for students page for full application guidelines.\n\nWe encourage interested students to reach out to the Jenkins community early and to start exploring project ideas.\nAll project ideas have chats and mailing lists referenced on their pages.\nWe will be also organizing office hours for students,\nand you can use these meetings to meet org admins and mentors and to ask questions.\nAlso, join our Gitter channel and the\nmailing list\nto receive information about such incoming events in the project.\n\nThe application period starts on March 29th, but you can prepare now!\nUse the time before the application period to discuss and improve your project proposals.\nWe also recommend that you become familiar with Jenkins and start exploring your proposal areas.\nProject ideas include quick-start guidelines and reference newbie-friendly issues\nwhich may help with initial study.\nIf you do not see anything interesting,\nyou can propose your own project idea\nor check out ideas proposed by other CDF organizations\nparticipating in GSoC.\n\nI want to be a mentor. Is it too late?\n\nIt’s not!\nWe are looking for more project ideas and for Jenkins contributors/users\nwho are passionate about Jenkins and want to mentor students.\nNo hardcore experience required, mentors can study the project internals together with students and technical advisors.\nWe are especially interested in ideas beyond the Java stack, and in ideas focusing new technologies and areas\n(e.g. Kubernetes, IoT, Python, Go, whatever).\n\nYou can either propose a new project idea or join an existing one.\nSee the Call for Mentors post\nand Information for mentors for details.\nIf you want to propose a new project,\nplease do so as soon as possible so that students have time to explore them and to prepare their proposals.\n\nThis year mentorship does NOT require strong expertise in Jenkins development.\nThe objective is to guide students and to get involved into the Jenkins community.\nGSoC org admins will help to find advisers if special expertise is required.\n\nTestimonials from former Jenkins GSoC participants ❤️\n\n\"I participated in Google Summer of Code 2020 in cooperation with the Jenkins organization\nand I work on a project called Windows Service Wrapper, which allows running Jenkins as a service on a Windows machine.\nGSoC was the most wonderful and the most valuable experience I gained during my student life.\nThe whole journey was full of experiences and Jenkins mentors always were there for us.\nI experienced a huge development of my skills while I was working on the project.\nI had many meetings, knowledge sharing sessions, and one pair-coding session with my mentors.\nOne of the best things that I learned is the open-source community and open source mentality.\nIt is not only about taking, but also about giving.\nToday I am maintaining an open-source project which is a simple programming language for kids\nwhich allows them to code in their native language, which will help to learn coding to students in rural areas of my country.\nFinally, Jenkins is a wonderful family and they always were there for us in all the ups and downs.\nI am proud to be a part of the Jenkins community.\"\n\nBuddhika Chathuranga, GSoC 2020 student, Support for YAML Configuration in Windows Service Wrapper\n\n\"My GSoC journey in the Jenkins community starts by a draft proposal full of comments from mentors and ends by two plugins with hundreds of installations.\nAlong with the daily coding review, the weekly meeting and the growth of the project,\nI increased my skills on programming and became a much more eligible engineer.\nWhat is more, the support from the whole Jenkins community leads me to a broader career path.\nI learned how to maintain a project, how to communicate with users and other developers on GitHub.\nMost importantly, the Jenkins community teaches me the principles of the open source world\nand welcomes me to the open source world with all their kind help.\"\n\nKezhi Xiong, GSoC 2020 students, GitHub Checks API project\n\n\"I worked as a Google Summer of Code student with the Jenkins project during the summer of 2019.\nThe project provided me with an excellent opportunity to contribute to the world’s most popular automation server,\nlearn about building performant and reliable applications, and interact with awesome people around the globe.\nJenkins' ever helpful and extremely knowledgeable community made working on my project a real treat.\nI even got a chance to present my project at DevOps World in Lisbon!\nIf you’re deciding which organization to work for this year, choose the Jenkins project — you can’t have a better GSoC experience than this!\"\n\nAbhyudaya Sharma, GSoC 2019 student, Role Strategy Performance Improvements\n\n\"I participated in Google Summer of Code 2018 with Jenkins as a student developer.\nWorking for Jenkins in GSoC 2018 was one of the best experiences I have ever had.\nDuring 3 months of summer, I learned a lot of new things when working on the open-source project with Jenkins.\nAnother best thing about Jenkins is the people, I received a lot of support from my mentors\nand other developers from the Jenkins community when working on my project.\nAfter GSoC, I also had a chance to go to the Jenkins World Conference in San Francisco\nto meet and connect with my mentors and other people in the Jenkins community.\nOverall, GSoC with Jenkins was a great experience and\nI highly recommend Jenkins as a great community to kickstart your open source journey.\"\n\nPham Vu Tuan, GSoC 2018 student, Remoting over Apache Kafka project\n\nImportant dates for GSoC 2021\n\nApr 13 - deadline for student applications\n\nMay 17 - accepted projects announced, teams start community bonding and coding\n\nAug 16 - coding period ends\n\nAug 31 - Results announced\n\nSee the GSoC Timeline for more info.","title":"Jenkins accepted in Google Summer Of Code 2021!","tags":["gsoc","gsoc2021","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#082848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/0e311/marckk.jpg","srcSet":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/6105b/marckk.jpg 32w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/11755/marckk.jpg 64w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/0e311/marckk.jpg 128w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/b2ade/marckk.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/a4758/marckk.webp 32w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/47694/marckk.webp 64w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/bf0f6/marckk.webp 128w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/445f6/marckk.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116.99999999999999}},"publicURL":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/marckk.jpg"},"blog":null,"github":"MarckK","html":"<div class=\"paragraph\">\n<p>Kara works with the open source community at CloudBees.\nShe is co-chair of the Continuous Delivery Foundation’s Interoperability SIG and a mentor and org admin for Outreachy and Google Summer of Code.\nAs a board director of codebar.io, Kara works to increase diversity in the tech industry.\nShe is passionate about making technology accessible and building welcoming tech communities.</p>\n</div>","id":"marckk","irc":null,"linkedin":"karadelamarck","name":"Kara de la Marck","slug":"/blog/authors/marckk/","twitter":"KaraMarck"}]}},{"node":{"date":"2021-03-19T00:00:00.000Z","id":"cd893011-39b1-56af-a7fd-e02eb54e1a8c","slug":"/blog/2021/03/19/SheCodeAfrica-announcement/","strippedHtml":"She Code Africa is a non-profit organization focused on celebrating and empowering young girls and women in technology across Africa.\nThey provide resources and events that help women grow and achieve their personal and career goals.\nTheir mentoring programs provide help and guidance as participants learn and grow in their careers.\n\nThis year, She Code Africa is organizing the She Code Africa Contributhon.\nContributhon is a boot camp where African women are paid to work with open source organizations on selected projects with dedicated mentors.\nThis program aims to create a more diverse, inclusive, and innovative culture within the African open source ecosystem by matching African women in technology with sponsor and mentor open source organizations.\n\nJenkins in She Code Africa Contributhon\n\nThe Jenkins project has been accepted as a Contributhon mentoring organization.\nOur project idea will introduce participants to Jenkins and plugin development as they create Pipeline examples and create Pipeline help for Jenkins Pipeline plugins.\nParticipants will learn more about Jenkins Pipeline and will submit plugin pull requests with examples and online help.\n\nThe Jenkins Pipeline Steps Reference and Pipeline online help often receive feedback that more examples are needed, that step return values need to be described, and that arguments need more description of their purpose, allowed values, and expected results.\nMost plugin maintainers do not provide detailed documentation of the pipeline steps, or the arguments to those pipeline steps.\nThis project will improve the documentation of pipeline steps and their arguments while introducing Jenkins Pipeline, Jenkins plugin development, Jenkins documentation as code, and the concepts of GitHub forks and pull requests.\n\nWe’ve identified development tasks that up to three Contributhon participants will complete during April.\nThe tasks will introduce the participants to Jenkins plugin development.\nThey will experiment with plugin changes in Jenkins and submit pull requests to provide Pipeline examples and help.\nThey will meet twice a week with Jenkins mentors, Kristin Whetstone, Mark Waite, and Meg McRoberts to review their progress, provide coaching, and help with issues.\n\nData driven choices\n\nWe’ve been collecting Jenkins documentation feedback since 2017.\nNow we’re using that feedback to prioritize the plugins to improve as part of this project.\nThe top 10 Pipeline plugins that have received the most feedback are:\n\nBuild step\n\nSCM step\n\nGit step\n\nInput step\n\nNodes and processes steps\n\nWorkspace cleanup step\n\nBasic Pipeline steps\n\nSlack notification steps\n\nHTTP request step\n\nEmail extension steps\n\nWhat about my plugin?\n\nIf you are a plugin maintainer and would like help to add examples and online help for the Pipeline steps in your plugin, send email to the Jenkins Documentation mailing list.\nWe’ll consider including additional plugins as we better understand the development pace for She Code Africa participants.","title":"Jenkins accepted in She Code Africa Contributhon","tags":["events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2021-03-22T00:00:00.000Z","id":"dc15bc48-7621-5827-9c36-0317e6e16cda","slug":"/blog/2021/03/22/governance-updates/","strippedHtml":"We would like to announce changes in the Jenkins Governance Board.\nAs it was announced earlier this month, Marky Jackson has decided to step down from his elected roles.\nOn behalf of the Jenkins community, we would like to thank Marky for all contributions and for the continued participation in the Jenkins community.\nAs an active Jenkins contributor and community leader, Marky helped a lot of initiatives to happen:\n Jenkins and Kubernetes ecosystem, terminology changes, GSoC and GSoD, pipeline authoring SIG and many more activities.\nThank you Marky!\n\nThe governance board has followed the interim procedure\nto nominate the new governance board member until the end of the term.\nThe board decided to respect the results of the 2020 elections and\nto nominate Ewelina Wilkosz who received the most of the votes after the elected candidates.\nShe has accepted the nomination, and on March 10th the Governance Meeting has confirmed it.\nWe are happy to welcome Ewelina Wilkosz as a new Governance Board Member!\n\nEwelina will join other governance Board Members:\nKohsuke Kawaguchi,\nUllrich Hafner,\nOleg Nenashev, and\nGavin Mogan.\nThe term will last until December 2022.\n\nAbout Ewelina Wilkosz\n\nEwelina has been a Jenkins Contributor since 2017, when she got involved in Jenkins Configuration as Code Plugin development.\nVoted Most Valuable Jenkins Contributor in 2018.\nShe has 14 years of experience in IT, working as a CI/CD consultant since the beginning of 2017.\nIn that role she’s trying to solve numerous issues Jenkins users are facing daily - as developers, administrators, maintainers.\n\nHere is Ewelina’s statement from the elections:\n\nAs a consultant I support my customers with their Jenkins issues since the beginning of 2017.\nAnd almost from the start it was some kind of \"as code\" approach.\nThe experience I gained during that time resulted in getting myself involved in the development of Configuration as Code Plugin for Jenkins.\nI consider becoming a part of Jenkins Community one of the most valuable experiences in my career so far.\nI appreciate how much I have learned and how welcoming the community is.\n\nI am not a very active contributor these days, at least when it comes to code, but what I have to offer is rather extensive experience\nwith Jenkins end users - from small, single instance setups to environments with hundreds of controllers run in a different way on different operating systems.\nEvery day I see challenges those users go through, I know what issues they are facing and which features they consider valuable or missing.\nAs a Jenkins Governance Board Member I can represent those users.\n\nThanks to my involvement in Configuration as Code Plugin development\nI had a chance to deliver a number of public presentations\nwhere I focused on the benefits of the solution and tried to make it easier for newcomers to try it.\nHere are a few examples of my activities related to Jenkins Configuration as Code:\nblogpost,\ncdCON presentation,\npodcast recording.\nSo my focus is not only on representing users but also on educating them, and educating myself,\nso I actually know what they need and why.\n\nWhat’s next for the Jenkins Governance Board?\n\nIn February we had the Jenkins Contributor Summit.\nThere we discussed many topics related to the Jenkins evolution and its roadmap.\nWe identified several initiatives we would like to focus on,\nincluding but not limited to improving user experience, contributor onboarding, and securing Jenkins delivery pipelines.\nThese initiatives will be a key focus until the next contributor summit we plan to organize in June.\nThe board will also focus on maintaining the Jenkins governance processes\n(meetings, budget approvals, funding, etc.) and facilitating contributions to the project.\n\nParticipating in Jenkins Governance\n\nJenkins Governance Board has just a representative function in the community.\nThe project and the community have a long history of open and inclusive governance driven by many contributors.\nWe invite all community members to participate in the project by joining the\ngovernance meeting,\nparticipating in the mailing list conversations,\nand joining special interest groups driving particular topics.\n\nSee this page to know more about contributing to Jenkins in general.","title":"Welcome Ewelina Wilkosz - new Jenkins Governance Board member","tags":["community","governance","governance-board"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2021-04-07T00:00:00.000Z","id":"4420f416-6666-56da-a0b5-3d25e4c667e3","slug":"/blog/2021/04/07/contributhon-participants/","strippedHtml":"The She Code Africa Contributhon started April 1, 2021.\nThe She Code Africa Contributhon is a boot camp where African women are paid to work with open source organizations on selected projects with dedicated mentors.\nThis program aims to create a more diverse, inclusive, and innovative culture within the African open source ecosystem by matching African women in technology with sponsor and mentor open source organizations.\nThe 5 mentees joining the Jenkins project come from Nigeria, Kenya, and Rwanda.\n\nThe Jenkins project has been accepted as a Contributhon mentoring organization.\nOur project idea will introduce mentees to Jenkins and plugin development as they create Pipeline examples and create Pipeline help for Jenkins Pipeline plugins.\n\nTwice weekly mentoring sessions are scheduled with the mentees and are listed in the events calendar.\nWe’ve already received the first pull request to improve the embedded documentation that generates the Steps Reference and provides contextual help in the Snippet Generator.\nWe’re looking forward to more pull requests and more improvements throughout April, 2021.\n\nWe’d like to introduce our mentees so that you recognize them and can welcome them during code review and online chat.\n\nOnyinye Ezike\n\nOnyinye is based in Lagos, Nigeria.\nShe’s a junior fullstack software developer who is very passionate about learning.\nShe uses Angular, React, Nodejs, and Spring Boot.\nShe has spent the last two years building up herself in software development and she’s hoping to become a world-class software developer.\n\nYou’ll recognize her contributions as Onyimatics on GitHub and on the Jenkins issue tracker.\n\nSharon Jebitok\n\nSharon is based in Kenya.\nShe’s a software development student at Microverse, a remote school for software developers.\nShe has been an active member of She Code Africa and she’s presently a mentee on She Code Africa’s Contributhon Program with the Jenkins project.\nShe has spent one year in the software industry since she switched her career into tech, learning to write meaningful code and collaborate with other developers/designers and the tech community.\n\nYou’ll recognize her contributions as jebitok-dev on GitHub and as jebitok16_ on the Jenkins issue tracker.\n\nEsther Ejidike\n\nEsther is a frontend developer based in Lagos, Nigeria.\nShe is one of the participants in the She Code Africa Contributhon Open Source Program working with Jenkins and will be contributing to the nodes and processes plugin.\nShe loves to convert designs to exact replicas in the form of webpages and she likes to learn new things in her free time.\n\nYou’ll recognize her contributions as Queen-esther01 on GitHub and as esther101 on the Jenkins issue tracker.\n\nCynthia Iradukunda\n\nCynthia Iradukunda is based in Kigali, Rwanda.\nShe is currently a junior Computing student at the African Leadership University (ALU) in Mauritius.\nShe wants to be a software engineer because it will help her solve real-world problems while also allowing her to use her coding skills.\nHer coding skills include but not limited to Java, JavaScript, and attention to detail.\nBy contributing to the Git plugin, she hopes to help users have a smooth process using its documentation, get involved with the project, and connect with other community members.\n\nYou’ll recognize her contributions as ciradu2204 on GitHub and as ciradu2204 on the Jenkins issue tracker.\n\nLucy Karimi\n\nLucy is based in Nairobi, Kenya.\nShe is a software developer with experience in mobile app development.\nShe is very passionate about tech and is currently involved in the SheCodeAfrica Contributhon.\n\nYou’ll recognize her contributions as luciahroyalty101 on GitHub and as luciahroyalty101 on the Jenkins issue tracker.\n\nAbout the Contributhon projects\n\nSee the previous blog post for more information about She Code Africa, the Contributhon, and the plans for Jenkins.\n\nJenkins development tasks\n\nShe Code Africa Contributhon mentoring organizations\n\nShe Code Africa Contributhon\n\nShe Code Africa\n\nConversations related to the Contributhon are happening in a Continuous Delivery Foundation slack channel.\n\nMentors\n\nWe’re very grateful to the mentors from the Jenkins project that are hosting mentoring sessions, reviewing pull requests, and encouraging the mentees.\nThanks to:\n\nMeg McRoberts\n\nMark Waite\n\nKristin Whetstone\n\nOleg Nenashev\n\nAngélique Jard\n\nWe also thank Zainab Abubakar of She Code Africa for her efforts to facilitate the Contributhon and encourage participation.","title":"Welcome the She Code Africa Contributhon participants!","tags":["events","community","documentation","outreach-programs","contributing"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"}]}},{"node":{"date":"2021-04-15T00:00:00.000Z","id":"a9230039-d1c0-5968-b24d-fc0746acc97a","slug":"/blog/2021/04/15/jenkins-operator-sub-project/","strippedHtml":"We are happy to announce that Jenkins Operator officially became an official Jenkins sub-project.\n\nWhat does it mean for the project?\n\nBecoming an official part of the Jenkins project was a major step towards better alignment with the overall Jenkins’ roadmap and more opportunities to increase adoption of the Jenkins Operator project.\n\nFinally, with a dedicated team at VirtusLab actively maintaining the project we can engage with the wider community and participate in some of the Cloud-Native SIG meetings.\nThis opens a room for everyone to voice their opinions or start supporting the project.\n\nWe truly believe that this community engagement will result in significant improvements to Jenkins Operator, as well as the Jenkins ecosystem itself.\n\nBridging the gap between Jenkins and Kubernetes\n\nRunning Jenkins in a cloud-native environment like Kubernetes is not a trivial task.\nWith Jenkins Operator project we want to enable the community to take full advantage of Kubernetes and public cloud capabilities by:\n\nnative integration with public cloud services in areas of observability, storage and cloud security\n\nKubernetes autoscaling and self-healing mechanism\n\nsecure access to Jenkins instance\n\ndeclarative configuration using Kubernetes Custom Resources\n\nfull lifecycle management, eventually transforming it to autopilot\n\nTake part in the journey toward global trends\n\nStart contributing and play an important role in creating the automated Jenkins experience! Don’t hesitate - engage in the community.\nJoin us in our work of creating the functionalities you see beneficial.\nYou are welcome to create issues and pull requests. We are actively resolving community issues and providing answers on a dedicated Slack channel.\n\nAs the project has been initially developed and still actively maintained by VirtusLab, we started discussion towards an open governance model to facilitate communication and collaboration.\n\nLead the way we are heading by providing us feedback\n\nTo celebrate the new possibilities that are being opened for our project, we would like to invite you to take part in a short survey that will help put us on the right track.\nIf you have been using Jenkins Operator or running Jenkins in any other environment, please take a moment to fill out our quick survey.\nWe will choose at least three of the most informative answers and send you an awesome Jenkins Operator T-shirt with our cute Gopher butler.\nThe survey can be found here. Remember, the most sincere answers are the best.\n\nAnd if you still haven’t used Jenkins Kubernetes Operator, you’re more than welcome to do so.\nGive it a shot and discover a new kind of simplicity of running Jenkins.\n\nHow to get started.","title":"Jenkins Operator becomes an official sub-project!","tags":["kubernetes","operator","contributing","announcement"],"authors":[{"avatar":null,"blog":null,"github":"antoniaklja","html":"<div class=\"paragraph\">\n<p>Engineering Manager in a cloud-native world managing mid-sized cross-functional team and responsible for cloud-related initiatives at VirtusLab.</p>\n</div>","id":"antoniaklja","irc":null,"linkedin":null,"name":"Bartek Antoniak","slug":"/blog/authors/antoniaklja/","twitter":"antoniaklja"},{"avatar":null,"blog":null,"github":"SylwiaBrant","html":"<div class=\"paragraph\">\n<p>Software Engineer at VirtusLab, working in area of cloud-native technologies.</p>\n</div>\n<div class=\"paragraph\">\n<p>Maintainer of Jenkins Kubernetes Operator.</p>\n</div>","id":"sylwiabrant","irc":null,"linkedin":null,"name":"Sylwia Brant","slug":"/blog/authors/sylwiabrant/","twitter":null}]}},{"node":{"date":"2021-04-21T00:00:00.000Z","id":"be129944-4fa0-5e51-a899-a198162b78c4","slug":"/blog/2021/04/21/tekton-plugin/","strippedHtml":"What is Tekton?\n\nTekton is a powerful and flexible open-source framework for creating CI/CD systems, allowing developers to build, test, and deploy across cloud providers and on-premises systems.\n\nWhy use Tekton?\n\nTekton pipelines have a number of benefits:\n\nthey are cloud native and designed from the ground up for kubernetes\n\neach Tekton Pipeline is fully declarative and completely self described; it does not depend on any separate out of band Jenkins controllers, plugins or plugin/controller configurations\n\neach Pipeline Task runs as a stand alone kubernetes Pod which is completely independent of any other pods and pipelines and are fully scheduled by Kubernetes to maximise resilience and optimize resource usage. A bad pipeline cannot take down another one & the kubernetes scheduler manages them all\n\neach step can be any command in any container image with whatever secrets, volume mounts, environment variables and resource limits you need\n\nthere is no need to bundle a JVM or Jenkins Remoting container into the pod so you can keep resources and cost down\n\nWhy use Jenkins and Tekton together?\n\nJenkins is the most popular open source automation server around. Lots of developers use it every day to get things done.\nJenkins can now be used to automate Tekton pipelines too which helps teams digitally transform to more cloud native solutions for their CI and CD.\nIn such a case, you can use Tekton pipeline engine while getting all benefits from Jenkins as an orchestrator, user interface and the reporting engine.\n\nIntroducing the Tekton Plugin for Jenkins\n\nThe Tekton Client plugin for Jenkins lets you easily use Jenkins to automate creating and running Tekton pipelines.\nIt bridges the Kubernetes learning gap and allows invoking Tekton Pipelines and resources through Jenkins.\nThis allows users to not have much of the Kubernetes specific knowledge beforehand and work.\n\nIts a single Jenkins plugin to install - so it’s easy to use.\n\nFor background check out the  blog post Bridging the Gap with Tekton-client-plugin for Jenkins by the founder of the plugin Vibhav Bobade.\n\nRequirements\n\nThe Tekton Client plugin for jenkins assumes you have access to a kubernetes cluster.\n\nThe kubernetes cluster should have Tekton pipelines installed.\n\nIf you have not yet installed Tekton you could use this tekton helm chart\n\nThe Jenkins controller should also have kubernetes RBAC access to be able to create Tekton resources and watch them and their associated pods and pod logs.\n\nIf you are running your Jenkins controller inside Kubernetes then an easy way to setup the RBAC is to install the Jenkins Resource Helm Chart in the same namespace as your Jenkins controller.\n\nAnother option is to use an installation of Jenkins X and let it setup a Jenkins controller via GitOps\n\nSpecifying the Tekton pipelines\n\nYou can configure the Tekton pipeline via:\n\na file path in a git clone block\n\na URL to a tekton YAML file\n\na block of YAML\n\nWe recommend defining Tekton pipelines as YAML files and checking them into a git repository so that you can use GitOps and follow the Pipeline As Code pattern.\n\nThis means that you can version your pipelines in git. It also means you can benefit from the various IDE plugins available for Tekton such as VS Code and IDEA so that you get auto completion, formatting and validation while editing the YAML.\n\nSo you can use the usual Git provider support in Jenkins to clone the git repository that contains then Tekton YAML file then reference the file by name.\n\nReusing Pipelines from the Tekton Catalog\n\nThe Tekton Catalog defines a ton of Tekton Tasks you can reuse in your pipelines\n\nWe have found when it comes to a microsevices style architecture you end up with lots of repositories and pipelines. Then using a Pipeline As Code pattern with GitOps we want to Version Everything but also make it easy for any repository to use any version of any task or pipeline.\n\ne.g. you may have many repositories using the current version of a pipeline but want to try out a new change to the pipeline in just 1 repository to verify it works well; then if it does, incrementally roll that change out to more repositories.\n\nThis can make it hard trying to reuse as much as you can across the different git repositories while also minimising the number of versions and forks of git repositories you have and simplifying the maintenance of all of the pipelines.\n\nWe have found on the Jenkins X project that a nice way to do this via GitOps such that we reference versioned Tekton Tasks and Pipelines in git so that they are easy to reuse or override.\n\nSo we reuse Tasks and Pipelines via the uses: image notation which lets us keep all of our Tekton Tasks and Pipelines in vanilla Tekton YAML; so that the IDE completion and validation works - but we can easily reuse Tasks or steps from libraries while also Versioning Everything\n\nNote that if wish to reuse steps/tasks via the uses: image notation then you must click the Tekton Catalog flag in your Job definition which will then resolve the uses: clause with the actual step/task.\n\nWhat is Jenkins X?\n\nThe Jenkins X project automates your CI/CD on kubernetes to help you accelerate :\n\nAutomated CI/CD pipelines lets you focus on your actually application code while Jenkins X automatically creates battle tested Tekton CI/CD pipelines for your project which are managed via GitOps so that its super easy to keep your pipelines up to date across your repositories or to upgrade or override pipelines or steps for specific repositories.\n\nAutomatic promotion of versioned artifacts via GitOps through your Environments such as Staging, Pre-production and Production whether they are running in the same kubernetes cluster or you are using multiple clusters for your environments\n\nPreview Environments lets you propose code changes via Pull Requests and have a Preview Environment automatically created, running your code in kubernetes to get fast feedback from your team before agreeing to merge changes to the main branch\n\nChatOps comment on Pull Requests to give feedback, approve/hold changes, trigger optional pipelines for additional testing and other ChatOps commands\n\nAll of the above is implemented in reusable Tekton pipelines.\n\nReusing Jenkins X Pipelines\n\nSo how can we reuse automated CI/CD pipelines from Jenkins X project from Jenkins?\n\nMake sure you have the Tekton Client plugin for Jenkins installed in your Jenkins server.\n\nUsing a working template\n\nIf you want to start with a working example then\n\nCreate A Git Repository From This Template\n\nadd a new Frestyle project to your Jenkins server\n\nenable the Git source code management for your new github.com repository\n\nclick Add build Step (near the bottom of the page) and then select Tekton : Create Resource (Raw)\n\nmake sure that FILE is selected for the input and enter the name.lighthouse/jenkins-x/release.yaml for the file name\n\nif you are using a Jenkins X cluster enter jx for the namespace\n\nensure that Enable Tekton Catalog is checked\n\nnow save the pipeline - it should look something like this:\n\nNow if you trigger the pipeline you should see it create a Tekton Pipeline and you should see the output of the tekton pipeline in the Jenkins console. The pipeline is actually running as a completely separate Pod in kubernetes; the Jenkins controller just tails the log into the console.\n\nIn a Jenkins X cluster this pipeline should just work (reusing all the cloud resources and IAM roles setup by the Terraform) but in an arbitrary kubernetes cluster you may get issues around not being able to push images or promote due to lack of GitOps environments being defined which we can help you work through via the Jenkins X slack room\n\nUsing an existing repository\n\nYou can configure a Pull Request or Release pipeline in your project by copying the YAML file for the language pack you wish to use.\n\ne.g. if you are using maven then copy pullrequest.yaml or release.yaml into your projects source code then reference it from your Jenkins Job:\n\nThen follow the above instructions for setting up a Freestyle project for your git repository and referencing the file name for your pipeline.\n\nOverriding steps\n\nBeing able to reuse steps from libraries of pipelines is awesome; but sometimes you need to change things. The assumptions, commands, arguments, environment variables or approaches used for every step in a library may not quite match what you need on a specific application. You may need to run steps before/after steps in the library or you may need to override a specific step to do something different.\n\nYou can easily customize any inherited step in any shared pipeline or add custom steps before/after any step.\n\nThe fact that all the Tekton YAML is fully declarative makes it super easy to modify things via your IDE with validation and smart completion and not have to use a scripting language and understand complex shared pipeline libraries.\n\nThe easiest way to try overriding a step is to install the jx binary to your $PATH then use the jx pipeline override command which will create a new locally overridden step you can then just edit in your IDE.\n\nThen at any time you can view the effective pipeline when you make local changes\n\nComparing the Kubernetes and Tekton plugins\n\nThose of you using Jenkins on a Kubernetes cluster are probably using the kubernetes plugin right now.\n\nHere is an example of how to use a Jenkinsfile with a pod YAML file so that you can run commands in different containers in the pod.\n\nWhat this means is that:\n\na kubernetes pod is created based on the pod YAML file which is scheduled by kubernetes\n\nthe Jenkinsfile runs on the Jenkins controller talking over Jenkins remoting to the pod to tell it to run commands in different containers. The pod includes the jnlp container which does the remoting between the Jenkins controller and the pod\n\nThis has a few issues:\n\neach container in the pod must have a shell so that jnlp can invoke commands. This may mean you have to create your own images\n\nit can be a little slow to start since there is chattiness with the Jenkins controller and the pod - whereas with Tekton pods just start and run locally without any coodination with the Jenkins controller\n\nyou have to maintain 2 files: the Jenkinsfile and the pod.yaml and it’s hard to share/override both of those files across multiple repositories as you need to make changes (e.g. overriding environment variables/images/commands/resource limits on demand on steps).\n\nThough one downside of the tekton approach is that by default there is no automatic synchronisation of state; after a Task in tekton completes there’s no automatic upload of state to the Jenkins controllers disk. You can always add a step in your Task to upload workspace state to the Jenkins controller if that’s what you want.\n\nThough remember that tekton plugin doesn’t take anything away; so you can mix and match the kubernetes and tekton plugins to suit your needs.\n\nConclusion\n\nWe are really excited about the combination of Jenkins, Tekton and Jenkins X letting developers pick the best tool for the job while becoming more cloud native and increasing the automation help reduce the amount of manual work creating and maintaining pipelines while also helping to improve the quality and practices of our CI/CD.\n\nPlease try it out and let us know how you get on!","title":"Easily reuse Tekton and Jenkins X from Jenkins","tags":["jenkins-x","kubernetes","pipeline","tekton","gitops","interoperability"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg","srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/77b35/jstrachan.jpg 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/d4a57/jstrachan.jpg 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/68974/jstrachan.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/ef6ff/jstrachan.webp 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/8257c/jstrachan.webp 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/6766a/jstrachan.webp 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/22bfc/jstrachan.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/jstrachan.jpeg"},"blog":null,"github":"jstrachan","html":"<div class=\"paragraph\">\n<p>James is a long time open source contributor, created the Groovy programming language and Apache Camel integration framework.\nFor the past few years he&#8217;s been working on CI/CD with Kubernetes.</p>\n</div>","id":"jstrachan","irc":null,"linkedin":null,"name":"James Strachan","slug":"/blog/authors/jstrachan/","twitter":"jstrachan"}]}},{"node":{"date":"2021-04-23T00:00:00.000Z","id":"394ad183-1f00-5602-b583-2b72ef1215dc","slug":"/blog/2021/04/23/jenkins-contributor-awards/","strippedHtml":"This year, the Jenkins Contributor Awards will be run by the Continuous Delivery Foundation (CDF) along with many other CDF Community Awards.\n\nThe nominations are currently open and are being accepted using GitHub issues to make the process more transparent. Any contributor is eligible this time around! The deadline to nominate someone is May 14, 2021, and voting will open in May.\n\nNominate contributors or vote with reactions/comments for all three Jenkins awards:\n\nMost Valuable Jenkins Contributor\n\nMost Valuable Jenkins Advocate\n\nJenkins Security MVP\n\nThe winners will be announced at cdCon 2021, where we’re also co-locating the Jenkins Contributor Summit on June 25, 2021!\n\nYou can also nominate Jenkins community members for global awards like \"Top CDF Ambassador\" or \"Top GitOps Evangelist\"!\nFor all CDF Community Awards and more details, visit the CDF Award Page.","title":"Jenkins Contributor Awards - Nominations Open","tags":["awards","jenkins","cdcon","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/4ea1f/cdfoundation.jpg","srcSet":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/b8799/cdfoundation.jpg 32w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/c15a4/cdfoundation.jpg 64w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/4ea1f/cdfoundation.jpg 128w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/d4baf/cdfoundation.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/c9eb6/cdfoundation.webp 32w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/5f6e9/cdfoundation.webp 64w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/b881c/cdfoundation.webp 128w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/3f20b/cdfoundation.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":122}},"publicURL":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/cdfoundation.jpg"},"blog":"https://cd.foundation/news/blog/","github":"cdfoundation","html":"<div class=\"paragraph\">\n<p>The Continuous Delivery Foundation (CDF) serves as the vendor-neutral home of many of the fastest-growing projects for continuous delivery, including Jenkins, Jenkins X, Spinnaker, and Tekton.\nCDF supports DevOps practitioners with an open model, training, industry guidelines, and a portability focus.</p>\n</div>","id":"cdfoundation","irc":null,"linkedin":null,"name":"Continuous Delivery Foundation","slug":"/blog/authors/cdfoundation/","twitter":"cdeliveryfdn"}]}},{"node":{"date":"2021-05-20T00:00:00.000Z","id":"95f5c8b2-77be-5e34-b420-2968ceb655ee","slug":"/blog/2021/05/20/configure-plugins-with-jcasc/","strippedHtml":"This blog post is for anyone interested to know how to configure a plugin using the Jenkins Configuration as a Code (JCasC) plugin, more specifically, this blog will guide you to get the YAML equivalent of a plugin’s configuration and use it to do some changes to the plugin without using the Jenkins UI.\n\nIf you’re a beginner at JCasC and want to learn more about it, you can head over to the following resources to understand JCasC better:\n\nJCasC Documentation\n\nOverview of JCasC (Video Presentation)\n\nManage JCasC (DevOps World 2018)\n\nConfiguring your first plugin using JCasC (Video Demo)\n\nOverview\n\nSo, these are the steps we will be following to achieve our aim:\n\nBrief Introduction to jenkins.yaml file\n\nConfigure the plugin on the UI\n\nDownload the Configuration\n\nUpdate JCasC file locally\n\nLoad the jenkins.yaml file on the Jenkins server\n\nVerify the changes on the UI\n\nBrief Introduction to jenkins.yaml file\n\nThe jenkins.yaml file contains the configuration of the Jenkins instance in YAML format.\nThe JCasC plugin refers to this file to configure the Jenkins instance.\n\nThe default location of jenkins.yaml is $JENKINS_HOME/jenkins.yaml, from where it can be fetched into the Jenkins server whenever you apply a new configuration.\n\nDownload your jenkins.yaml file by going to Manage Jenkins Configuration as Code Download Configuration.\n\nMake sure this file is saved at location $JENKINS_HOME/jenkins.yaml.\n\nLet’s change the systemMessage field to:\n\nFigure 1. Updating the jenkins.yaml file\n\nReload the existing configuration to apply the system message change\n\nNow, go back to the Dashboard and you can see the updated System Message on top:\n\nFigure 2. Viewing the changes on Dashboard\n\nThis file will be used later to configure the plugin using JCasC.\n\nConfigure the plugin on the UI\n\nFor this demo, install the View Job Filters plugin.\n\nLet’s create a view by clicking on the New View option on the left side of the Dashboard.\n\nGive it a name (say, “testView”) and set its type to List View, and click on the OK button.\n\nFigure 3. Creating the View\n\nNow click on Add Job Filter to add any kind of filter, so let’s select Build Duration Filter and fill the field with any value (say, \"60\" minutes),\n\nFigure 4. Adding filter to the view\n\nClick on Apply Save.\n\nTo view the full configuration, check out your main jenkins.yaml configuration file, by clicking on Manage Jenkins Configuration as Code View Configuration\n\nGo to the views section in this YAML file to see details related to the view,\n\nFigure 5. Here, details regarding the view (which we just created) is visible\n\nDownload the Configuration\n\nNow that you have successfully configured your plugin by UI, let’s download the configuration by going to Manage Jenkins on the Dashboard, then click on Configuration as Code under \"System Configuration\".\n\nNow click on the Download Configuration button to save the configuration file locally.\n\nFigure 6. Downloading the Configuration\n\nUpdate JCasC file locally\n\nAdd some changes in your downloaded copy of the jenkins.yaml file, to see those changes being automatically reflected on the UI.\n\nFor demo purposes, let’s change the name to “YoutubeDemoView” and set the buildDurationMinutes as \"55\".\n\nFigure 7. Changing the View details locally\n\nSave the file.\n\nLoad the jenkins.yaml file on the Jenkins server\n\nNow to reflect the local changes done in the jenkins.yaml file onto the Jenkins server, click on the Reload existing configuration button.\n\nFigure 8. Applying the New Configuration to the Jenkins instance\n\nVerify the changes on the UI\n\nGo back to the main page by clicking on the Jenkins logo on the top-left side.\n\nAnd you will notice that the name of your view has been changed from \"testView\" to “YoutubeDemoView”,\n\nAnd the field value of Build Duration Filter has been changed from \"60\" to “55”.\n\nThese two are the exact changes that we did locally in our jenkins.yaml file.\n\nFigure 9. Verifying the changes\n\nCongratulations! You’ve successfully configured a plugin (“View Job Filter”) automatically with the help of the “Jenkins Configuration as Code” plugin! You can repeat the same process for other plugins as well.","title":"Configure Plugins with JCasC","tags":["jcasc","tutorial","plugins","yaml"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#586868","images":{"fallback":{"src":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/55658/dheerajodha.jpg","srcSet":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/3af71/dheerajodha.jpg 32w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/226ae/dheerajodha.jpg 64w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/55658/dheerajodha.jpg 128w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/3dc24/dheerajodha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/bf13b/dheerajodha.webp 32w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/12101/dheerajodha.webp 64w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/e9db2/dheerajodha.webp 128w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/6fafe/dheerajodha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":145}},"publicURL":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/dheerajodha.jpg"},"blog":null,"github":"dheerajodha","html":"<div class=\"paragraph\">\n<p>Dheeraj is a Computer Science Engineering student (senior) at Vivekanand Institute of Technology, University of Mumbai. He started his journey of contributing to Jenkins in March 2021. His tiny contributions revolve around the <a href=\"https://github.com/jenkinsci/custom-distribution-service\">Custom Distribution Service for Jenkins Project</a>. He also likes to contribute to the JCasC project and documentation to help the developers.</p>\n</div>","id":"dheerajodha","irc":null,"linkedin":"dheeraj-singh-jodha","name":"Dheeraj Singh Jodha","slug":"/blog/authors/dheerajodha/","twitter":null}]}},{"node":{"date":"2021-06-04T00:00:00.000Z","id":"ae4a71c1-cb70-5ef0-9944-ab05566b6516","slug":"/blog/2021/06/04/digester-removal/","strippedHtml":"Keeping up with our goal to clean up some of the technical debt inside Jenkins Core and reduce the maintenance overheads, we are happy to report we were able to remove a long-deprecated Apache Commons Digester library.\n\nJenkins Core does not depend anymore on Apache Commons Digester v.2.1, a version that has been released in 2010.\n\nSome plugins will require update to operate properly after the Jenkins core upgrade.\nSee JEP-231 for the full list of the affected plugins.\nBelow there is the list of plugins that did not have their fix released at the time of writing.\nThey will start to break with the weekly on the 7th of June, expected to be the 2.297.\n\nteamconcert\n\nvs-code-metrics\n\nBlameSubversion\n\njavatest-report\n\nvss\n\nsynergy\n\nconfig-rotator\n\nharvest\n\ncmvc\n\nIn addition to these still-served plugins, a few others will break.\nNote however that these were already suspended [ 1 ] for various reasons, so we do recommend to move away from using them or step up as maintainers.\nThe IDs for these plugins are: tfs, svn-release-mgr, cpptest, cflint, script-scm, rtc.\n\nIt is always a good idea to update all your plugins before upgrading Jenkins core.\n\nPlease reach out on the developers’ list with any questions or suggestions.\n\nGetting fixes in the affected plugins\n\nFor all affected plugins we have submitted pull requests with compatibility patches.\nThese plugins seem to have no active maintainer, and hence we cannot commit on delivering those fixes.\nIn mean time you can build a custom patch locally to resolve the issue on your instances.\nIf you use any of those plugins, consider stepping up and adopting them so that the fixes could be released.\nWe will appreciate any contributions!\n\nResources\n\nPR-5320\n\nremoving commons-digester:2.1.\nThis also contains a complete list of impacted plugins and their PRs and statuses.\n\nJEP-231\n\ndescribing this change.\n\n1. this means these plugins are not served anymore by the Jenkins Project’s hosting service. Even if they were released, the releases would not show up until additional issues are fixed.","title":"Apache Commons Digester library removal (breaking changes!)","tags":["jenkins","core","developer","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}},"publicURL":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/batmat.jpg"},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat/","twitter":"bmathus"}]}},{"node":{"date":"2021-06-10T00:00:00.000Z","id":"4c6e6edc-73d1-5cc5-a069-c6c11dc61c74","slug":"/blog/2021/06/10/jenkins-is-the-way-ebook-2/","strippedHtml":"A little over a year ago, we launched JenkinsIsTheWay.io, a website whose sole purpose is to share Jenkins user stories with the developers and engineers in our community.  Over a hundred of you have already shared your innovations, and they just keep coming.  It comes as no surprise that many of the submitted stories are from IT consultants and software developers around the world building next-generation DevOps and CI/CD platforms to fuel the modernization of enterprise companies far and wide.\n\nThat’s why we’ve dedicated our latest eBook to focus on Jenkins users in the global Information Technology sector.  We shine the spotlight on these developers and engineers who have solved unique software development and DevOps challenges by turning to the leading open source automation server.  From powering large enterprises needing a better way to manage their inventory to innovative tech firms looking to advance technologies and healthcare initiatives during a pandemic, you’ll read about how teams everywhere solved their unique challenges — with the help of Jenkins.\n\nJenkins is the Way to…\n\nIn our short User Story Survey, we ask Jenkins users to fill in the blank: Jenkins is the way to …​…​\n\nWe’ve seen results-oriented submissions like \"Jenkins is the way to deliver our new releases on time!\" and \"Jenkins is the way to understand and simplify your software workflows.\"  Several submissions riffed off of something like \"Jenkins is the way to completely automate your CI/CD workflow.\"  Meanwhile, others have had a bit more fun and languished praise on Jenkins, stating, \"Jenkins is the way to help teams focus on what is really important, make our life easier\" and, even, \"Jenkins is the way to save the day.\"\n\nIn this new eBook, we focus on the challenges users in the community face, and what they’ve built using Jenkins to achieve their unique goals. For example, Build & Release Manager, Donald Morton, turned to Jenkins to establish a flexible, modern, and more efficient DevOps platform for Graylog, a leading log management platform serving the enterprise.\n\nWith a Jenkins assist, Mark Baumann, DevOps Engineer with ITK Engineering, created “ one CI to rule them all.” He told us that “Jenkins provides a common CI/CD platform for all different kinds of projects and technology domains.”\n\nWhen IBM Lead Software Engineer Alec Rieger sought to simplify the build and testing pipeline for the company’s software engineers and developers, he also turned to Jenkins.  For a company the size of IBM, which services enterprise clients worldwide, Rieger wanted to help his colleagues manage many nodes on a large scale. Now, according to his Jenkins Is The Way user story, IBM uses Jenkins pipelines for each of their builds and relies on the flexibility and countless plugin features to continually improve their processes.\n\nStronger, Smarter, Faster Software Innovation\n\nWhile we all fondly think of Jenkins as a modest butler who has empowered developers with the open-source tools they need to succeed — on JenkinsIsTheWay.io, we liken him to an unpretentious, yet powerful superhero.  And like any great superhero, he (or she!) is sure to save the day.\n\nFor our Jenkins users, that means results — significant, measurable results with a common theme.  Using Jenkins has enabled you — the user — to help the businesses you serve save money, spin up software faster, and automate processes.  In doing so, you’ve freed up developers and engineers from countless hours of mundane tasks.  Thanks to Jenkins, you’re empowering entire IT teams to innovate, focus on what they love to do and, ultimately, build great stuff.\n\nOf course, we devote much of our latest eBook to those victories.  Results like how RedHat’s releases are 5x faster thanks to Jenkins.  The fact that DevOps problem tickets were reduced by over 90% for Electronic Health Solutions.  And why the CTO at Cloudologia was psyched to share that — with a Jenkins at the helm — they were able to shorten onboarding for deployment & build release cycles from one week to a single day.\n\nShare Your User Story, Too!\n\nI am proud to share another common theme from the users who have submitted their story:  you turn to our community for collaboration, guidance, and advice.  A community of a million strong and growing, this eBook and JenkinsIsTheWay.io are other ways to provide you with the insight and lessons learned by developers and engineers, like you, to innovate and build next-generation technologies for companies of all sizes.\n\nWhen you’re ready to tell your story, we’re prepared to help you share it. Fill out our short questionnaire, and we’ll send you our Jenkins Is The Way T-shirt as a thank you once it’s published!\n\nLinks\n\nJenkins IsThe Way. IT User Story eBook, chapter 2\n\nJenkins IsThe Way. IT User Story eBook, chapter 1\n\nVisit Jenkins Is The Way\n\nShare Your User Story\n\nSpecial thanks to CloudBees, Inc. for sponsoring this program.","title":"New eBook: Jenkins is the Way for IT and software developers","tags":["jenkins-is-the-way","case-study","ebook","community","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2021-06-17T00:00:00.000Z","id":"9f9a3a5e-47db-53de-a9b4-6390afba35fe","slug":"/blog/2021/06/17/libera-chat/","strippedHtml":"We are happy to announce that\nthe Jenkins community has moved all its official IRC channels to Libera chat.\nWe have started our migration on May 26 as a response to the\nhostile takeover\nof hundreds of open source community channel by the new Freenode management.\nAs decided  by the Jenkins governance meeting on June 16th,\nLibera Chat IRC channels are the only official channels going forward.\n\nA more detailed history of the transition is available on the Jenkins developers mailing list.\n\nWhat did we move?\n\nWe have created the following IRC chats:\n\nthat currently live on freenode to libera.chat:\n\n#jenkins - general discussion channel for Jenkins users and developers.\nWe no longer consider it a central chat for all things Jenkins, but we intend to keep it available to users\nwho want to keep using IRC.\n\n#jenkins-hosting - Chat used by the Hosting Team to manage hosting automation\n\n#jenkins-infra - Chat used by the Infrastructure Team to coordinate efforts related to Jenkins project infrastructure and the incident response\n\n#jenkins-release - Chat used for Jenkins core release coordination by the Release Team\n\nAll other channels have NOT been moved to Libera Chat IRC and were replaced by other channels.\nMost notable channels:\n\n#jenkins-meeting - the Jenkins Governance Meeting uses combination of Zoom and Google Docs at the moment. We do not longer use the IRC chat for that purpose.\n\n#jenkins-cert - no private chat going forward. The Security Team will use mailing lists only going forward\n\n#jenkins-community - Replaced by the Advocacy&Outreach Gitter channel.\n\nFreenode concerns and disclaimers\n\nGoing forward, the Jenkins community does not have ANY official channels on Freenode.\nAll channels are either removed or left abandoned.\nWe no longer manage or control our channels.\nMost of the Jenkins IRC channel operators use IRCCloud,\nand hence they were banned by the Freenode team on June 11th.\nOnly a few operators have reconnected since this event.\n\nTaking the takeover of Freenode and hostile actions taken by the new management,\nwe can no longer guarantee any of the following:\n\nAuthenticity of registered users on Freenode.\nAll IRC accounts, cloaked or not, might have been taken over by the new Freenode management.\n Do not trust messages from the Jenkins contributor account IDs there.\n\nConfidentiality of private channels like #jenkins-cert.\nWe performed audit of the conversations there, and we believe there are no undisclosed security vulnerabilities referenced in the channel.\n After all, this IRC has been rather dormant for the last 18 months.\n\nIRC User Passwords.\nAll passwords on Freenode IRC may be compromised in the future.\nWe strongly advise all users to rotate their passwords if they were used on Freenode IRC.\n\nWe have made backups of IRC channel conversations in the abandoned channels.\nIf you need to access the conversation history, please reach out to the Jenkins Infrastructure team.\n\nAcknowledgements\n\nWe thank the entire Libera Chat team and all contributors who have worked on creating\na Freenode replacement for hundreds of open source communities using IRC.\nWithin just a month, a new platform has been created and adopted by almost all active projects.\nWe remember the Hudson to Jenkins renaming days when a similar mobilization happened in the Jenkins community,\nand we appreciate all the effort put by contributors.\n\nSpecial thanks to Tim Jacomb, Gavin Mogan, Alex Earl, and Olivier Vernin for their work on the migration of IRC channels\nand our automation like the IRC Bot used by the Jenkins hosting team.\n\nWhat’s next?\n\nIn the Jenkins community we will keep using Libera Chat IRC and maintaining user and contributor channels there.\nOther Jenkins chat channels like Gitter and Slack are unchanged.\nWe intend to gradually replace many of those channels with community.jenkins.io.\nThis is a new portal powered by Discourse.\nThe service is sponsored by Civilized Discourse Construction Kit, Inc..\nIt is currently in preview, stay tuned for announcements.\nAs always, we will appreciate any suggestions and [feedback]( https://community.jenkins.io/c/site-feedback/2)!","title":"Jenkins IRC moves to Libera Chat","tags":["community","announcement","chat"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev/","twitter":"oleg_nenashev"}]}},{"node":{"date":"2021-06-21T00:00:00.000Z","id":"7b4a4572-df50-5808-b8c2-57dd18827c92","slug":"/blog/2021/06/21/student-luminy-project-security/","strippedHtml":"Context\n\nJenkins is a CI/CD solution and as such, it is critical that the open source plugins that constitute an integral part of it don’t expose the systems they are used on to any security risks and vulnerabilities.\nIt is in that context that we worked as an audit/code review team to track and report such flaws and problematic practices.\n\nWe worked in collaboration with Jenkins Security team member Wadeck Follonier, as part of an end-of-study project during our last year of the Master’s Degree - Reliability and IT Security in the university of Aix-Marseille.\n\nProject Goals\n\nThe main goal of this project was to allow us to discover and work on diverse security vulnerabilities in the context of a widely-used software solution, and in order to achieve that we had to separate the project in multiple other goals:\n\nLearning about some of the most common vulnerabilities and the form in which they can be found on a Jenkins Instance and its plugins.\n\nPerforming code review and technical audit on the application, and compiling our results as part of a security team.\n\nReporting our findings to the Jenkins team and the plugin maintainers, while sometimes helping the latter to correct these vulnerabilities.\n\nKnowledge Sharing\n\nAt the beginning of the project, we set up communication channels with our mentor through Slack and Google Meets, and agreed to schedule weekly sessions with him.\nThe goal of these sessions was both to teach us more about the functionalities of Jenkins and the types of vulnerabilities we would encounter, and to allow us to ask more specific questions regarding our findings.\n\nThanks to our mentor developing a mock plugin compiling a variety of classic vulnerabilities and several of their implementations, including server side request forgery ( SSRF), cross site scripting ( XSS), and XML external entity ( XXE) attacks, we have been able to learn through practice.\nIt allowed us to analyze the context of the code and the different ways the Jelly framework can be used to display information, expanding our payload options and giving us a clearer view of the patterns to look for during our code reviews.\n\nWe have also had the opportunity to learn about the process used to report the vulnerabilities to the maintainers through Jira issues, and some ways we could correct them or provide steps to do so.\n\nSearching and compiling\n\nAt first, we decided to work as a pretty loose team, with each member working on a different plugin and regrouping our findings to confirm or reject them, while staying in constant contact to ask each other questions.\nThis allowed us to broaden the scope of our searches, and is the reason why we have been able to find a larger number of vulnerabilities, in plugins that differed widely in popularity, than we would have working together from the start.\n\nWe used a single file to compile the plugins we audited and our findings, making it easier for our mentor to review them and give us feedback.\nPinpointing the specific portion of code causing the issue and providing reproduction steps as clear as we could proved useful for the reporting process, thus making the approval and correction faster.\n\nDuring the last third of this project, we began to work together on bigger plugins, in order to have more points of view reflecting on the same problem.\nWith different analyses, we were able to come up with new payloads, and sometimes with new vulnerabilities where we only found one separately.\n\nReporting and correcting the vulnerabilities\n\nAll of the reporting was done through Jira issues, which allows the Jenkins team to centralize and triage the vulnerabilities.\nOnce we provided the necessary information, along with the reproduction steps we had, a member of the Jenkins security team contacted the plugin maintainer and guided them through the next steps of the process, with hope that they would answer.\n\nWe have also tried to make the maintainers' job easier, working on some fixes.\nTo achieve this, we delved not only into the functionalities of the vulnerable plugins, but also into some mitigation processes that we found either in the Jenkins documentation,  or with the help of our mentor.\n\nEach one of our modifications has been tested locally, in order to assess whether the vulnerability was still present, and whether no function had been altered.\nHowever, some of the plugins we audited demanded more complex fixes, due to their intrinsic logic, or the thought process of their developer, which led to us being unable to provide a clear fix.\n\nConsidering this, the fixes we have been able to bring into light were only suggestions to the maintainers, for them to use as inspiration or template, in order not to interfere with the plugin logic.\n\nConclusion\n\nThrough this project, we have been able to work as a team, delving into some of the different issues that security engineers are bound to face, and the ways they have at their disposal to mitigate them.\nThis has allowed us to complement our studies with a more practical aspect, that we couldn’t have had otherwise, and to transition into the companies we are now interns in.\nThis experience has strongly encouraged us to improve in and document ourselves on this branch of cybersecurity, which will have a significant impact on our professional future.\n\nUseful links\n\nJenkins - 2021/03/30 Security Advisory - 5 from us\n\nJenkins - 2021/05/11 Security Advisory - 4 from us\n\nJenkins - 2021/05/25 Security Advisory - 3 from us\n\nJenkins - 2021/06/16 Security Advisory - 1 from us\n\nJenkins - 2021/06/18 Security Advisory - 1 from us\n\nMessage from the mentor\n\nI didn’t expect to have four students with a so deep desire to learn new things, new tricks.\nTheir curiosity helped them to find numerous vulnerabilities that already led to 14 published CVEs.\nThe experience was great and I wish them all the best for their professional career and their never ending quest for knowledge.\n\nIf you are student, intern, or just someone really interested in security and Jenkins in particularly, please reach out to us to see if there is a possibility to organize something together.\nMailing list: jenkinsci-cert@googlegroups.com","title":"Four students and their master project in Jenkins security","tags":["plugins","security","jenkins"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Justin is a cybersecurity engineer who participated in a hands on project related to Jenkins security during his last year of master.</p>\n</div>","id":"jphilip","irc":null,"linkedin":"justin-philip-amu","name":"Justin Philip","slug":"/blog/authors/jphilip/","twitter":null},{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Kevin is a cybersecurity engineer who participated in a hands on project related to Jenkins security during his last year of master.</p>\n</div>","id":"kguerroudj","irc":null,"linkedin":"kevin-guerroudj","name":"Kevin Guerroudj","slug":"/blog/authors/kguerroudj/","twitter":null},{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Quentin is a cybersecurity engineer who participated in a hands on project related to Jenkins security during his last year of master.</p>\n</div>","id":"qparra","irc":null,"linkedin":null,"name":"Quentin Parra","slug":"/blog/authors/qparra/","twitter":null},{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Marc is a cybersecurity engineer who participated in a hands on project related to Jenkins security during his last year of master.</p>\n</div>","id":"mheyries","irc":null,"linkedin":null,"name":"Marc Heyries","slug":"/blog/authors/mheyries/","twitter":null}]}},{"node":{"date":"2021-07-16T00:00:00.000Z","id":"79c95b8e-55ea-534e-81a0-7d12215795cd","slug":"/blog/2021/07/16/gsoc-midterm-presentation/","strippedHtml":"Congratulations to all GSoC students who have made it through the first half of the GSoC 2021 coding phase!\n\nThis year, the Jenkins project has been participating in GSoC as part of the Continuous Delivery Foundation’s GSoC org.\nTo celebrate our GSoC students and the fantastic work they have been doing, the CDF is hosting an online meetup where students will present their work.\nStudents will be showcasing what they have learned and accomplished thus far in GSoC, demoing their work, and discussing their goals and plans for the second coding phase.\n\nThe CDF Google Summer of Code Midterm Demos will be held online on July 20th, 13:00 UTC - 15:00 UTC.\n\nSign up here: Meetup Event\n\nSpeakers\n\nAkihiro Kiuchi - Jenkins Remoting Monitoring\n\nAkihiro is a student in the Department of information and communication engineering at the University of Tokyo.\nHe is improving the monitoring experience of Jenkins Remoting during Google Summer of Code 2021.\n\nAffiliation: The University of Tokyo and Jenkins project\n\nGitHub: Aki-7\n\nTitle: Jenkins Remoting Monitoring with OpenTelemetry\n\nIn this talk, he will discuss the problems in maintaining Jenkins agents and how to support Jenkins admins in troubleshooting them.\nAs one of the solutions, he will introduce the new Remoting monitoring with OpenTelemetry plugin that collects Jenkins Remoting monitoring data and troubleshooting data using OpenTelemetry.\nWhat kind of data the plugin will collect and how we will be able to visualize them using available open-source monitoring tools will be demonstrated.\n\nShruti Chaturvedi - CloudEvents Plugin for Jenkins\n\nShruti is an undergrad student of Computer Science at Kalamazoo College.\nShe is developing a CloudEvents integration for Jenkins, allowing other CloudEvents-compliant CI/CD tools to communicate easily.\nShruti is also the Founding Engineer of a California-based startup, MeetKlara, where she is building serverless solutions and advocating for developing CI/CD pipelines using open-source tools.\n\nAffiliation: Kalamazoo College and Jenkins project\n\nGitHub: ShrutiC-git\n\nLinkedIn: Shruti Chaturvedi\n\nTitle: CloudEvents Plugin for Jenkins: Moving Towards Interoperability\n\nIn this talk, we will look at interoperability as an essential element in building workloads across several services.\nWe will also talk about how CloudEvents solves one of the biggest challenges in achieving interoperability between systems: lack of normalization/standardization.\nWithout any standard definition, in order to achieve interoperability, services have to develop adapters specific to a particular system.\nThat, however, is complex because services are always changing the way data/events are emitted.\nCloudEvents solves this problem by defining a standard format for events, which can be emitted/consumed agnostically, thereby achieving indirect interoperability.\nShruti will demonstrate the workings of CloudEvents Plugin for Jenkins; she will walk us through how Jenkins can be configured as a source and a sink, emitting and consuming CloudEvents-compliant events in a platform-independent manner.\n\nDaniel Ko - try.spinnaker.io\n\nDaniel is studying computer science at the University of Wisconsin - Madison.\nHe is developing a public Spinnaker sandbox environment for Google Summer of Code 2021.\n\nAffiliation: University of Wisconsin - Madison and Spinnaker project\n\nGitHub: ko28\n\nTitle: try.spinnaker.io:  Explore Spinnaker in a Sandbox Environment!\n\nThe talk will go through a brief explanation of Spinnaker and the challenges that users face during the installation process.\nHe will discuss the infrastructure of this project and how a public multi tenant spinnaker instance will be managed and installed.\nWe will end with a demo of the site so far and the various features implemented, including Github authentication, K8s manifest deployment, AWS Load Balancer Controller to expose deployments, private ECR registry and the blocking of all public images, and auto resource cleanup.\n\nAditya Srivastava - Conventional Commits Plugin for Jenkins\n\nAditya is a curiosity driven individual striving to find ingenious solutions to real-world problems.\nHe is an open-source enthusiast and a lifelong learner.\nAditya is also the Co-Founder and Maintainer of an Open Source Organization - Auto-DL, where he’s leading the development of a Deep Learning Platform as a Service application.\n\nAffiliation: V.E.S.I.T & Jenkins project\n\nGitHub: ADI10HERO\n\nLinkedIn: Aditya S.\n\nTitle: Conventional Commits Plugin for Jenkins\n\nIn this talk, we’ll start with what are conventional commits and why they are needed.\nThen we’ll see what the jenkins plugin, \"Conventional Commits\" is and what goal it is trying to achieve.\nA demo of how the plugin can be used/integrated in the current workflow will be shown.\nFinally, we’ll talk about the next steps in plugin development followed by the QnA.\n\nHarshit Chopra - Git credentials binding for sh, bat, and powershell\n\nHarshit Chopra is a recent graduate and is currently working on a Jenkins project which brings the authentication support for cli git commands in a pipeline job and freestyle project.\n\nAffiliation: Punjab University & Jenkins Project\n\nGitHub: link: arpoch\n\nLinkedIn: Harshit Chopra\n\nWebsite\n\nTitle: Git credentials binding for sh, bat, and powershell\n\nIn this talk, he will give an overview of the project and will move on further explaining what problems are being faced, a bit about the workaround that are being used to tackle the problems,\nwhat makes the authentication support so important, why a feature and not a plugin in itself, accomplishments achieved and work done during the coding phase 1, will talk about the implementation of the feature, demonstration of git authentication support over HTTP protocol.\n\nPulkit Sharma - Security Validator for Jenkins Kubernetes Operator\n\nPulkit is a student at Indian Institute of Technology,BHU,Varanasi.\nHe is working on a GSoC Project under Jenkins where he aims to add a security validator to the Jenkins Kubernetes Operator.\n\nAffiliation: Indian Institute of Technology, BHU and Jenkins Project.\n\nGitHub: sharmapulkit04\n\nTitle: Security Validator for Jenkins Kubernetes Operator\n\nIn this talk, we will discuss why we need a security validator for the Jenkins Kubernetes Operator and how we are going to implement it via admission webhooks.\nWe will have a look at how we are going to implement the validation webhook, the validation logic being used and what tools we are using to achieve it.\nPulkit will showcase his progress and will discuss his future plans for phase 2 and beyond as well.","title":"GSoC CDF Meetup: Google Summer of Code Midterm Demos","tags":["gsoc","gsoc2021","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#082848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/0e311/marckk.jpg","srcSet":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/6105b/marckk.jpg 32w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/11755/marckk.jpg 64w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/0e311/marckk.jpg 128w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/b2ade/marckk.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/a4758/marckk.webp 32w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/47694/marckk.webp 64w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/bf0f6/marckk.webp 128w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/445f6/marckk.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116.99999999999999}},"publicURL":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/marckk.jpg"},"blog":null,"github":"MarckK","html":"<div class=\"paragraph\">\n<p>Kara works with the open source community at CloudBees.\nShe is co-chair of the Continuous Delivery Foundation’s Interoperability SIG and a mentor and org admin for Outreachy and Google Summer of Code.\nAs a board director of codebar.io, Kara works to increase diversity in the tech industry.\nShe is passionate about making technology accessible and building welcoming tech communities.</p>\n</div>","id":"marckk","irc":null,"linkedin":"karadelamarck","name":"Kara de la Marck","slug":"/blog/authors/marckk/","twitter":"KaraMarck"}]}},{"node":{"date":"2021-07-27T00:00:00.000Z","id":"65407863-9614-55a2-b325-2efe99f2c375","slug":"/blog/2021/07/27/git-credentials-binding-phase-1/","strippedHtml":"Google Summer of Code 2021 is implementing git credentials binding for sh, bat, and powershell .\nGit credentials binding is one of the most requested features for Jenkins Pipeline (see jira:JENKINS-28335[]).\n\nThe project involves extending the Credentials Binding Plugin to create custom bindings for two types of credentials essential to establish a remote connection with a git repository\n\nUsername/Password\n\nSSH Private Key\n\nWhy use git credentials binding?\n\nMany operations in a Jenkins Pipeline or Freestyle job can benefit from authenticated access to git repositories.\nAuthenticated access to a git repository allows a Jenkins job to\n\napply a tag and push the tag\n\nmerge a commit and push the merge\n\nupdate submodules from private repositories\n\nretrieve large files with git LFS\n\nThe git credentials username / password binding included in git plugin 4.8.0 allows Pipeline and Freestyle jobs to use command line git from sh, bat, and powershell for authenticated access to git repositories.\n\nHow to use git credentials binding?\n\nThe binding is accessible using the withCredentials Pipeline step.\nIt requires two parameters:\n\ncredentialsId\n\nReference id provided by creating a Username/Password type credential in the Jenkins configuration. To understand how to configure credentials in a Jenkins environment: Using Credentials\n\ngitToolName\n\nName of the git installation in the machine running the Jenkins instance\n(Check Global Tool Configuration section in Jenkins UI)\n\nNote: In case a user is not aware of the git tool installation of the particular machine, the default git installation will be chosen.\n\nExamples\n\nThe withCredentials wrapper allows declarative and scripted Pipeline jobs to perform authenticated command line git operations with sh , bat , and powershell tasks.\n\nShell example\n\nwithCredentials([gitUsernamePassword(credentialsId: 'my-credentials-id', gitToolName: 'git-tool')]) {\n  sh 'git fetch --all'\n}\n\nBatch example\n\nwithCredentials([gitUsernamePassword(credentialsId: 'my-credentials-id', gitToolName: 'git-tool')]) {\n  bat 'git submodule update --init --recursive'\n}\n\nPowershell example\n\nwithCredentials([gitUsernamePassword(credentialsId: 'my-credentials-id', gitToolName: 'git-tool')]) {\n  powershell 'git push'\n}\n\nThe Pipeline Syntax Snippet Generator is a good way to explore the syntax of the withCredentials step and the git username / password credentials binding.\n\nLimitations\n\nThe git credentials username / password binding has been tested on command line git versions 1.8.3 through 2.32.0.\nIt has been tested on CentOS 7, CentOS 8, Debian 9, Debian 10, FreeBSD 12, OpenBSD 6.9, openSUSE 15.2, Ubuntu 18.04, Ubuntu 20.04, Ubuntu 21.04, and Windows 10.\nProcessor testing has included amd64, arm32, arm64, and s390x.\n\nThe binding does not support private key credentials.\nThe binding is not supported on command line git versions prior to 1.8.3.\n\nWhat’s next?\n\nPrivate key credentials support is coming soon.","title":"Git username / password credentials binding","tags":["git"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/rishabhbudhouliya.jpg"},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/authors/rishabhbudhouliya/","twitter":null}]}},{"node":{"date":"2021-07-30T00:00:00.000Z","id":"ec28a413-ce25-5776-ac1c-84b03c9452d9","slug":"/blog/2021/07/30/introducing-conventional-commits-plugin-for-jenkins/","strippedHtml":"The conventional commits plugin is a Google Summer of Code project.\nSpecial thanks to the mentors Gareth Evans, Kristin Whetstone, Olivier Vernin and Allan Burdajewicz.\n\nWhat are Conventional Commits\n\nAccording to the official website, conventonal commits are, \"A specification for adding human and machine readable meaning to commit messages.\"\n\nConventional commits are a lightweight convention on top of commit messages.\n\nThe following table shows major structural elements offered by the conventional commits convention.\n\nStructural Element\nExample\n\nChore\nchore: improve logging\n\nFix\nfix: minor bug fix\n\nFeat\nfeat: add a new feature\n\nBreaking Change\nBREAKING CHANGE: reimplement\n\nWhy Conventional Commits\n\nAs the CI/CD world is moving more towards complete automation and minimal human interaction, the ability to fully automate a release is desired.\nConventional Commits enable the use of automated systems on top of commit messages.\nThese systems can \"truly\" automate a release with almost no human interaction.\n\nThe convention dovetails with semantic versioning.\nLet’s take an example, a maven project is currently versioned at 1.2.0.\nThe following table shows how conventional commits would bump the version depending on the type of the commit.\n\nCommit Message\nVersion Bump\nSemVer Equivalent\n\nchore: improve logging\n1.2.0 → 1.2.0\nNo version bump\n\nfix: minor bug fix\n1.2.0 → 1.2.1\nIncrement in the patch version\n\nfeat: add a new feature\n1.2.0 → 1.3.0\nIncrement in the minor version\n\nBREAKING CHANGE: reimplement\n1.2.0 → 2.0.0\nIncrement in the major version\n\nThe Conventional Commits Plugin\n\nThe conventional commits plugin is a Jenkins plugin to programatically determine the next semantic version of a git repository using:\n\nLast tagged version\n\nCommit message log\n\nCurrent version of the project\n\nHow it works?\n\nThe plugin will read the commit messages from the latest tag or the current version of the project till the latest commit.\nUsing this information it will determine what would be the next semantic Version for that particular project.\n\nSupported Project Types?\n\nCurrently the plugin can read the current version from various configuration files of the following project types:\n\nProject Type\nConfiguration File(s) Read\n\nMaven\npom.xml\n\nGradle\nbuild.gradle\n\nMake\nMakefile\n\nPython\nsetup.py\nsetup.cfg\npyproject.toml\n\nHelm\nCharts.yml\n\nNode (NPM)\npackage.json\n\nHow to request a project type support?\n\nPlease feel free to open an issue on the GitHub repository of the plugin.\n\nHow to use the plugin\n\nRecommended way of using the plugin is to add a step in a Jenkins Pipeline Project.\n\nnextVersion() is the pipeline step to be used.\n\nFor example:\n\npipeline {\n    agent any\n\n    environment {\n        NEXT_VERSION = nextVersion()\n    }\n\n    stages {\n        stage('Hello') {\n            steps {\n                echo \"next version = ${NEXT_VERSION}\"\n            }\n        }\n    }\n}\n\nTip: The pipeline step can also be generated with the help of the Snippet Generator.\nPlease select \"nextVersion\" in the Sample Step drop down and then click on \"Generate Pipeline Snippet\"\n\nThe plugin is released on every feature using JEP-229.\n\nThe plugin is available to download from the plugins site.\n\nDemo\n\nYou can watch the plugin in action in a demo presented at the GSoC Midterm Presentations\n\nNext Steps\n\nSupport for pre-release information. Example: 1.0.0-alpha, 1.0.0-beta, etc\n\nSupport for build metadata. Example: 1.0.0-beta+exp.sha.5114f85\n\nOptionally writing the calcuated \"Next Version\" into the project’s configuration file. Example: pom.xml for a maven project, setup.py for python.\n\nFeedback\n\nWe would love to hear your feedback & suggestions for the plugin.\n\nPlease reach out on the plugin’s GitHub repository, the Gitter channel or start a discussion on community.jenkins.io.","title":"Introducing the Conventional Commits Plugin for Jenkins","tags":["gsoc","gsoc2021","conventionalcommits","plugin"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#688898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png","srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/ff5a3/adi10hero.png 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b18f9/adi10hero.png 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b9e30/adi10hero.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8ba60/adi10hero.webp 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/a9ea7/adi10hero.webp 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8c23b/adi10hero.webp 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/fc98a/adi10hero.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":131}},"publicURL":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/adi10hero.png"},"blog":null,"github":"adi10hero","html":"<div class=\"paragraph\">\n<p>Aditya is a curiosity driven individual striving to find ingenious solutions to real-world problems. He is an open-source enthusiast and a life long learner.</p>\n</div>","id":"adi10hero","irc":null,"linkedin":null,"name":"Aditya Srivastava","slug":"/blog/authors/adi10hero/","twitter":"adi10hero"}]}},{"node":{"date":"2021-07-31T00:00:00.000Z","id":"eb573050-2c0c-527f-ab2c-3da89d375c1d","slug":"/blog/2021/07/31/remoting-monitoring-phase-1/","strippedHtml":"Goal\n\nThe goal of this project:\n\ncollect telemetry data(metrics, traces, logs) of remoting module with\nOpenTelemetry.\n\nsend the telemetry data to OpenTelemetry Protocol endpoint\n\nWhich OpenTelemetry endpoint to use and how to visualize the data are up to\nusers.\n\nOpenTelemetry\n\nAn observability framework for cloud-native software\n\nOpenTelemetry is a collection of tools, APIs, and SDKs.\nYou can use it to instrument, generate, collect, and export telemetry\ndata(metrics, logs, and traces) for analysis in order to understand your\nsoftware’s performance and behavior.\n\nPhase 1 summary\n\nUser survey\n\nOur team conducted a user survey to understand the pain point regarding Jenkins\nremoting.\n\nFig 1. What agent type/plugins do you use?\n\nFig 1 shows what types of agent users use, and 17 unique respondents out of\n28 use docker for agent. So I’m planning to publish a docker image to\ndemonstrate how we can build Docker image with our monitoring feature.\n\nThis survey and investigation of JIRA tickets of past two years also tell me five\ncommon causes of agent unavailability.\n\nConfiguration mistakes\n\nJenkins agent settings, e.g. misuse of \"tunnel connection through\" option.\n\nPlatform settings, e.g. invalid port setting of Kubernetes' helm template.\n\nNetwork settings, e.g. Load balancer misconfiguration.\n\nUncontrolled shutdown of nodes for downscaling.\n\nTimeout during provisioning a new node.\n\nFirewall, antivirus software or other network component kill the connection\n\nLack of hardware resources, e.g. memory, temp space, etc…​\n\nWe also heard valuable user voice in the survey.\n\nWhat areas would you like to see better in Jenkins monitoring?\n\nI have created a bunch of adhoc monitoring jobs to check on the agent’s health\nand send e-mail. Would be nice to have this consolidated.\n\nHaving archive of nodes with the access to their logs/events would have been\nnice.\n\nI hope that implementing these feature with OpenTelemetry, which is expected to\nbecome the industry standard for observability, will bring great monitoring\nexperience to Jenkins community.\n\nProof of Concept\n\nHow to deliver the monitoring program to agents\n\n1. Sending monitoring program to the agent over remoting\n\nIn my first implementation, I prepared a Jenkins plugin and send the\nmonitoring program from Jenkins controller. However, this approach have\nfollowing disadvantages.\n\nWe cannot collect telemetry data before the initial connection.\nWe are likely to encounter a problem while provisioning a new node,\nso it’s important to observe agents' telemetry data from the beginning.\n\nSome agent restarters (e.g. UnixSlaveRestarter)\nrestart agent completely when reconnecting. It means that the agent lost\nmonitoring program every time the connection closed, and we cannot collect\ntelemetry data after the connection is lost before a new connection is\nestablished.\n\nSo we decided to take the next approach.\n\n2. Install monitoring engine when provisioning a new agent\n\nIn this approach, user will download the monitoring program called monitoring\nengine, which is a JAR file, and place it in the agent node when provisioning.\n\nHow to instrument remoting to produce remoting trace\n\nAdd instrumentation extension point to remoting\n\nPull Request: https://github.com/jenkinsci/remoting/pull/471\n\nThis approach makes the agent launch command more complicated,\nand we have to overcome this problem.\n\nCurrent State\n\nMetrics\n\nWe currently support the following metrics and planning to support more.\n\nmetrics\nunit\nlabel\nkey\ndescription\n\nsystem.cpu.load\n1\n\nSystem CPU load. See com.sun.management.OperatingSystemMXBean.getSystemCpuLoad\n\nsystem.cpu.load.average.1m\n\nSystem CPU load average 1 minute See java.lang.management.OperatingSystemMXBean.getSystemLoadAverage\n\nsystem.memory.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize\n\nsystem.memory.utilization\n1\n\nSystem memory utilization,\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize.\nReport 0% if no physical memory is discovered by the JVM.\n\nsystem.paging.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\n\nsystem.paging.utilization\n1\n\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\nReport 0% if no swap memory is discovered by the JVM.\n\nprocess.cpu.load\n%\n\nProcess CPU load. See com.sun.management.OperatingSystemMXBean.getProcessCpuLoad.\n\nprocess.cpu.time\nns\n\nProcess CPU time. See com.sun.management.OperatingSystemMXBean.getProcessCpuTime.\n\nruntime.jvm.memory.area\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\narea\nheap, non_heap\n\nruntime.jvm.memory.pool\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\npool\nPS Eden Space, G1 Old Gen…​\n\nruntime.jvm.gc.time\nms\ngc\nG1 Young Generation, G1 Old Generation, …​\nsee GarbageCollectorMXBean\n\nruntime.jvm.gc.count\n1\ngc\nG1 Young Generation, G1 Old Generation, …​\nsee GarbageCollectorMXBean\n\nTraces\n\nWe tried several approaches to instrument remoting module, but good approach is not established yet.\n\nHere is a draft documentation of the spans to collect. Google Doc\n\nLogs\n\nComing soon!\n\nMetric and span demo visualization\n\nOur team created a demo example with Docker compose and visualized the metrics and spans.\n\nClick to open in new tab\n\nGoogle Summer of Code Midterm Demo\n\nOur project demo starts with 8:20\n\nNext Step\n\nLog support\n\nAlpha release!","title":"Remoting Monitoring with OpenTelemetry - Coding Phase 1","tags":["gsoc","gsoc2021","remoting","open-telemetry"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/19e71/aki-7.jpg","srcSet":"/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/77b35/aki-7.jpg 32w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/d4a57/aki-7.jpg 64w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/19e71/aki-7.jpg 128w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/68974/aki-7.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/ef6ff/aki-7.webp 32w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/8257c/aki-7.webp 64w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/6766a/aki-7.webp 128w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/22bfc/aki-7.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/aki-7.jpg"},"blog":null,"github":"Aki-7","html":"<div class=\"paragraph\">\n<p>GSoC 2021 student (Jenkins Remoting Monitoring). Akihiro is a student in the Department of information and communication engineering at the University of Tokyo.</p>\n</div>","id":"aki-7","irc":null,"linkedin":null,"name":"Akihiro Kiuchi","slug":"/blog/authors/aki-7/","twitter":null}]}},{"node":{"date":"2021-08-02T00:00:00.000Z","id":"4b818957-350e-52f3-a687-d86ebc43405d","slug":"/blog/2021/08/02/cloudevents-plugin-phase-I/","strippedHtml":"The What, Why and How of Interoperability\n\nWith workloads and teams becoming more diverse and complex, there is an increasing need to automate various tasks in the CI/CD ecosystem of an application as a way to decrease complexity that can come with CI/CD.\n\nA more diverse team working across different aspects of the application requires a diverse suite of CI/CD tools too, to test and deliver to a wide range of users. More often than not, we need these tools to work together and exchange data to form an effective CI/CD pipeline. However, chaining multiple services together can very easily increase complexity.\n\nHow? Each of these services use a different \"language\" to communicate and represent the entity(an event) which occured inside that service. In order for another service to understand this \"language\", the service might need to develop customized clients and agents which specialize in understanding, traversing and taking-actions based on what was transmitted to it by the first service.\n\nOne can think of it as a translator who specializes in a language called ABC, and each service who wants to communicate with the service who uses ABC will have to employ this translator, or perhaps get another trained translator. And there is no guarantee that this translator will also help communicate with other services speaking a completely different language.\n\nWe can see how easily that can grow in cost and maintenance. A preferred way is to have a common language each of these services use and understand as a way to communicate amongst each other. This way, an event which is emitted using this common language will be available to any of the interested receiver without that receiver needing a special agent. This way of communication which uses a common/standard language also creates a way for agnostic communication where the sender or the receiver are sending and receiving data without creating a tight coupling between the two.\n\nCloudEvents specification is enabling that loosely-coupled, event-driven communication between services by enforcing a common language which defines how an event should be emitted and transferred between systems.\n\nCloudEvents and Jenkins\n\nA specification for describing event data in a common way\n\nConsistency\n\nConsistent across tools and services.\n\nAccessibility\n\nCommon event format means common libraries, tooling, and infrastructure for delivering event data across environments can be used to develop with CloudEvents.\n\nPortability\n\nEasily port event-data across tools, truly leveraging event-driven architecture.\n\nThe CloudEvents plugin for Jenkins is developed as an effort to make interoperability between Jenkins and CI/CD tools much easier. The CloudEvents plugin for Jenkins is a GSoC project, and with the help from an amazing team of mentors, this project is aimed at enhancing event-driven interoperability between cloud-native CI/CD tools, making it easier for developers to include Jenkins in their CI/CD pipelines.\n\nWith this plugin, Jenkins can send and receive CloudEvents-compliant events to and from a wide variety of CI/CD tools using CloudEvents as their event format. This plugin makes chaining Jenkins with multiple tools like Tekton, Keptn, Knative and more, very easy.\n\nGSoC Phase 1 - CloudEvents Plugin\n\nUsing CloudEvents plugin for Jenkins\n\nThis plugin allows Jenkins to be configured as a source and sink, which can emit and consume CloudEvents from a range of tools simultaneously.\n\nJenkins as a Source\n\nConfiguring Jenkins as a Source enables Jenkins to send CloudEvents to a CloudEvents sink. For Phase-I of this project, there is support for HTTP Sinks, however CloudEvents supports various protocol bindings. Moving forward, there will also be support for other protocol bindings supported by CloudEvents.\n\nTo use Jenkins as a Source, the following configuration is needed:\n\nClick on Manage Jenkins in the Root-Actions menu on the left.\n\nInside the Manage Jenkins UI, search for Configure System under System Configuration.\n\nIn the Configure System UI, scroll down to the CloudEvents plugin section, and this is where all the plugin configuration will be present. Here, you will have to enter the following information:\n\nSink Type (For now, HTTP Protocol Binding for CloudEvent and HTTP Sink is supported.)\n\nSink URL (URL of the Sink where you want the cloudevents sent.)\n\nEvents you want sent to the CloudEvents sink URL.\n\nStep 1: Manage Jenkins\n\nStep 2: Configure System\n\nStep 3: Configure CloudEvents Sink\n\nWith Jenkins as a Source configured, Jenkins will send a POST request to the configured sink right as the selected event occurs inside Jenkins. Each event has a different payload specific to the type of the event emitted.\n\nEvent Types, Payload and Metadata\n\nCloudEvents emitted by Jenkins follow the Binary-structure supported by CloudEvents, where the CloudEvents metadata is present inside the header, and the event-data is serialized as JSON, and present under request-body. This is the HTTP Protocol Binding for CloudEvents. Each protocol binding for CloudEvents follows a definition specific to the binding protocol.\n\nFor now, the following Jenkins events are supported in the CloudEvents Plugin-Jenkins as a Source:\n\nQueue Events\n\nQueue Entered Waiting\n\nQueue Left\n\nBuild Events\n\nJob Started\n\nJob Completed\n\nJob Finalized\n\nJob Failed\n\nJob Events\n\nJob Created\n\nJob Updated\n\nNode Events\n\nNode Online\n\nNode Offline\n\nFollowing is a table of the queue-entered waiting cloudevents metadata:\n\nEvent Metadata Headers Key\nEvent Metadata Headers Value\n\nce-specversion\n1.0\n\nce-type\norg.jenkinsci.queue.entered_waiting\n\nce-source\njob/test\n\nce-id\n123-456-789\n\nAll of these fields will be present inside the HTTP-request headers since the CloudEvents format used here is the Binary structure.\n\nHere’s also an example of event payload for the queue-entered event:\n\n{\n  \"ciUrl\": \"http://3.101.116.80/\",\n  \"displayName\": \"test2\",\n  \"entryTime\": 1626611053609,\n  \"exitTime\": null,\n  \"startedBy\": \"shruti chaturvedi\",\n  \"jenkinsQueueId\": 25,\n  \"status\": \"ENTERED_WAITING\",\n  \"duration\": 0,\n  \"queueCauses\": [\n    {\n    \"reasonForWaiting\": \"In the quiet period. Expires in 0 ms\",\n    \"type\": \"entered_waiting\"\n    }\n  ]\n}\n\nTry the Plugin\n\nThe plugin will soon be releasing as the CloudEvents Plugin under https://plugins.jenkins.io/!!\n\nHere’s the GitHub Repo of the Plugin: CloudEvents Plugin GitHub Repo\n\nDemo\n\nHere is a video of the CloudEvents plugin with SockEye demoed at CDF GSoC Midterm Demos. SockEye is an open-source tool which is designed as a way to visulaize cloudevents which are sent from a sink. In this demo, we will take a look at how Jenkins installed in a multi-node K8s environment work with the CloudEvents plugin as a Source, sending events over HTTP to the SockEye sink.\n\nNext Steps\n\nJenkins as a Sink to allow Jenkins to trigger various actions as cloudevents are received from other tools.\n\nEnabling filtering on CloudEvents metadata to only act upon a certain kind of events recieved.\n\nSupport for other protocol bindings in CloudEvents.\n\nFeedback\n\nWe would absolutely love to hear your suggestions and feedback. This will help us understand the various use-cases for the plugin, and iterate to support a variety of bindings and formats.\n\nFeel free to log an issue at the CloudEvents Plugin GitHub repository. We are on CDF slack under gsoc-2021-jenkins-cloudevents-plugin. You can also start a discussion on community.jenkins.io. I also love emails! Drop me one on: shrutichaturvedi16.sc@gmail.com","title":"CloudEvents Plugin for Jenkins: Interoperability between Jenkins and other CI/CD Tools","tags":["gsoc","gsoc2021","cloudevents","interoperability","cloud-native"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/bf8e1/ShrutiC-git.png","srcSet":"/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/914ee/ShrutiC-git.png 32w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/1c9ce/ShrutiC-git.png 64w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/bf8e1/ShrutiC-git.png 128w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/acb7c/ShrutiC-git.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/ef6ff/ShrutiC-git.webp 32w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/8257c/ShrutiC-git.webp 64w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/6766a/ShrutiC-git.webp 128w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/22bfc/ShrutiC-git.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/ShrutiC-git.png"},"blog":null,"github":"ShrutiC-git","html":"<div class=\"paragraph\">\n<p>Shruti Chaturvedi is the <strong>Founding Engineer</strong> for Klara, a startup to revolutionalize the shopping experience for beauty products.\nShe is an <strong>Oracle Certified Cloud Practitioner</strong>, and is developing solutions on Cloud where CI/CD is her primary focus. She has worked with Jenkins as a User, and is very excited to contribute to Jenkins and be a part of the community.</p>\n</div>","id":"ShrutiC-git","irc":null,"linkedin":null,"name":"Shruti Chaturvedi","slug":"/blog/authors/shrutic-git/","twitter":"shruti_tech"}]}},{"node":{"date":"2021-08-17T00:00:00.000Z","id":"d629c3ce-afaa-5437-9120-457244788553","slug":"/blog/2021/08/17/docker-images-use-jdk-11-by-default/","strippedHtml":"The Jenkins project provides Docker images for controllers, inbound agents, outbound agents, and more.\nBeginning with Jenkins 2.307 released August 17, 2021 and Jenkins 2.303.1 released August 25, 2021, the Docker images provided by the Jenkins project will use Java 11 instead of Java 8.\n\nControllers use Java 11 by default\n\nIf you are running one of the Jenkins Docker controller images that does not include a JDK version in its label, the Java runtime will switch from Java 8 to Java 11 with the upgrade.\n\nFor example:\n\nJenkins 2.306 running as jenkins/jenkins:latest uses Java 8.\nWhen Jenkins 2.307 or later is run with jenkins/jenkins:latest, it will use Java 11\n\nJenkins 2.289.3 running as jenkins/jenkins:lts uses Java 8.\nWhen Jenkins 2.303.1 or later is run with jenkins/jenkins:lts, it will use Java 11\n\nThe Docker image tags affected by this upgrade include:\n\nalpine\n\ncentos7\n\nlatest\n\nlts\n\nslim\n\nUsers that need to remain with Java 8 may use a different Docker image tag to run with Java 8.\n\nJenkins 2.306 running as jenkins/jenkins:latest uses Java 8.\nWhen Jenkins 2.307 or later is run with jenkins/jenkins:latest-jdk8, it will use Java 8\n\nJenkins 2.289.3 running as jenkins/jenkins:lts uses Java 8.\nWhen Jenkins 2.303.1 or later is run with jenkins/jenkins:lts-jdk8, it will use Java 8\n\nAgents use Java 11 by default\n\nDuring the next 1-2 weeks (Aug 17, 2021 - Aug 31, 2021), the Jenkins agent images will be updated to use Java 11 instead of Java 8.\n\nFor example:\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.9-1 uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.10-1 it will use Java 11.\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:latest uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:latest after the agent change, it will use Java 11.\n\nUsers that need to remain with Java 8 may use a different Docker image tag to run with Java 8.\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.9-1 uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.10-1-jdk8 it will also use Java 8.\n\nDocker tag updates stopped\n\nThe Jenkins project will no longer update the Docker images that are based on CentOS 8.\nThe CentOS project has changed direction to track just ahead of a Red Hat Enterprise Linux release rather than tracking after a release.\nThey are no longer publishing updates for CentOS 8 Docker images.\n\nUsers running Jenkins 2.306 or earlier with the jenkins/jenkins:centos tag will need to switch to use a different tag.\nThey may consider using:\n\njenkins/jenkins:almalinux\n\njenkins/jenkins:rhel-ubi8-jdk11\n\nUsers running Jenkins 2.289.3 or earlier with the jenkins/jenkins:centos tag will need to switch to use a different tag\n\nThey may consider using:\n\njenkins/jenkins:lts-almalinux\n\njenkins/jenkins:lts-rhel-ubi8-jdk11\n\nWindow 1809 Docker images stopped\n\nThe Windows Docker images have published versions based on both the 1809 feature release and the Windows Server long term support channel (\"LTSC\").\nWindows support for the 1809 images will no longer be published because Microsoft has ended mainstream support for the 1809 images.\nUsers should switch to use the Jenkins images based on the \"LTSC\" channel.","title":"Docker images use Java 11 by default","tags":["java","platform","docker"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#586868","images":{"fallback":{"src":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/55658/dheerajodha.jpg","srcSet":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/3af71/dheerajodha.jpg 32w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/226ae/dheerajodha.jpg 64w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/55658/dheerajodha.jpg 128w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/3dc24/dheerajodha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/bf13b/dheerajodha.webp 32w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/12101/dheerajodha.webp 64w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/e9db2/dheerajodha.webp 128w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/6fafe/dheerajodha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":145}},"publicURL":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/dheerajodha.jpg"},"blog":null,"github":"dheerajodha","html":"<div class=\"paragraph\">\n<p>Dheeraj is a Computer Science Engineering student (senior) at Vivekanand Institute of Technology, University of Mumbai. He started his journey of contributing to Jenkins in March 2021. His tiny contributions revolve around the <a href=\"https://github.com/jenkinsci/custom-distribution-service\">Custom Distribution Service for Jenkins Project</a>. He also likes to contribute to the JCasC project and documentation to help the developers.</p>\n</div>","id":"dheerajodha","irc":null,"linkedin":"dheeraj-singh-jodha","name":"Dheeraj Singh Jodha","slug":"/blog/authors/dheerajodha/","twitter":null}]}},{"node":{"date":"2021-08-19T00:00:00.000Z","id":"3ba26599-8e1c-5bd0-9892-7a79594d049c","slug":"/blog/2021/08/19/git-credentials-binding-work-report/","strippedHtml":"Abstract\n\nThis project implemented two new credential bindings to perform authenticated operations using command line git in Jenkins pipeline and freestyle jobs.\n\nThe two credential bindings are gitSshPrivateKey and gitUsernamePassword.\n\nImplementation\n\nType\n\nFeature\n\nLocation\n\nThe gitUsernamePassword binding is implemented in Jenkins git plugin v4.8.0.\nThe gitSshPrivateKey binding is implemented in a pull request to the Jenkins git plugin\n\nDependencies\n\nCredentials Binding Plugin -\nIt is used to bind Git specific environment variables with shell scripts/commands which perform git authentication on behalf of the user, without their interaction with the command-line.\n\nBouncy Castle API Plugin -\nProvides an API to do common tasks like PEM/PKCS#8 Encoding/Decoding and ensuring its stability among Bouncy Castle API versions.\n\nSSH Server Plugin -\nProvides an API to perform tasks like OpenSSH private key encoding and decoding.\n\nPhase 1: Git Username Password Binding (gitUsernamePassword)\n\nDeliverables\n\nSupport git authentication over the HTTP protocol\n\nUse the GIT_ASKPASS environment variable to provide user credentials to command line git\n\nSupport different\n\nOS environments : CentOS 7, CentOS 8, Debian 9, Debian 10, FreeBSD 12, OpenBSD 6.9, openSUSE 15.2, Ubuntu 18.04, Ubuntu 20.04, Ubuntu 21.04, and Windows 10.\n\nProcessors : amd64, arm32, arm64, and s390x.\n\nAuthentication support for command line git only, not JGit or JGit Apache.\n\nCheck for specific git versions\n\nSetting git specific environment variables based on OS type\n\nAutomated test coverage more than 90%\n\nResources\n\nPull Requests\n\nAdd Git Credentials binding for Username and Password\n\nCheck the least command line git version required\n\nGit username password binding doc update in git-plugin\n\ngitUsernamePassword binding explanation\n\nWebinar slides\n\nGit username password binding released blog post\n\nPhase 1 demo and presentation:\n\nPhase 2: Git SSH Private Key Binding (gitSshPrivateKey)\n\nDeliverables\n\nTo support git authentication over the SSH protocol\n\nSupports:\n\nPrivate Key Formats\n\nOpenSSH\n\nPEM\n\nPKCS#8\n\nEncryption algorithms\n\nRSA\n\nDSA\n\nECDSA\n\nED25519\n\nOS environments : CentOS 7, CentOS 8, Debian 9, Debian 10, FreeBSD 12, OpenBSD 6.9, openSUSE 15.3, Ubuntu 18.04, Ubuntu 20.04, Ubuntu 21.04, and Windows 10.\n\nProcessors : amd64, arm32, arm64, and s390x.\n\nAuthentication support for command line git only, not JGit or JGit Apache.\n\nUse git specific environment variables depending upon the minimum git version\n\nGIT_SSH_COMMAND - If the version is greater than 2.3, provides ssh command including the necessary options.\n\nSSH_ASKPASS - If the version is less than 2.3, an executable script is attached to the variable.\n\nSetting variables based on the OS type\n\nResources\n\nPull Requests\n\nAdd Git Credentials binding for SSH Private Key\n\nLast GSOC-2021 noted commit\n\nScope change of getSSHExecutable method\n\ngitSshPrivateKey binding explanation\n\nWebinar Slides\n\nFinal phase demo and presentation\n\nAchievements\n\nThe git credential bindings which are available through the git plugin automate the git authentication process for a user effortlessly\n\nThe gitUsernamePassword and gitSshPrivateKey binding provides git authentication support for Pipeline and Freestyle Project users in various OS environments on different processors\n\nThe gitUsernamePassword binding has been released and is readily available from git plugin v4.8.0 and above\n\nThe gitSshPrivateKey binding provides support for OpenSSH format which is default for OpenSSH v7.8 and above\n\nFuture Work\n\nSSH private key binding pull request merge and release\n\nUnexpected complications from Jenkins class loader required extra effort and investigation, including an experiment shading a dependency into the git plugin\nWe intentionally chose to avoid the complication and risk of shading the dependency\nIf the SSH library use requires shading, then we may need to use maven modules in the git plugin","title":"Git Credentials Binding for sh, bat, powershell","tags":["git","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"arpoch","html":"<div class=\"paragraph\">\n<p>Harshit Chopra is an open source enthusiast from India.</p>\n</div>","id":"arpoch","irc":null,"linkedin":"harshit-chopra-275269178","name":"Harshit Chopra","slug":"/blog/authors/arpoch/","twitter":"Harshit14413301"}]}},{"node":{"date":"2021-08-23T00:00:00.000Z","id":"b598f8c2-ebc7-5a4d-9b91-8a9ea0e5e989","slug":"/blog/2021/08/23/jenkins-operator-security-work-report/","strippedHtml":"Background\n\nJenkins custom resources on a Kubernetes cluster are deployed using declarative YAML configuration files; hence some of the plugins declared in these files may contain security warnings.\nSo there is no way for the user to know other than manually checking for each on the site.\nThis project aims to add an extra step of validation before creating/updating a new Jenkins Custom Resource.\n\nDeliverables\n\nThis project aims to add a validating admission webhook to the Jenkins Operator for Kubernetes to detect potential security vulnerabilities in the plugins before the object is created.\n\nDependencies\n\nWebhooks communicate to the API server over HTTPS and use TLS. Thus, Jetstack/cert-manager is used to provision TLS certificates and establish connection between Kubernetes API and webhook.\n\nImplementaion\n\nOperator-SDK takes care of creating a new webhook and appending it to the manager and creating handlers.\nTls certificates are managed using cert-manager.\n\nValidation Logic:\n\nProposed Implementations: Iterate through the list of plugins to be installed and fetch warnings for each plugin from the plugin center API and check if the version of that plugin has any of those warnings.\n\nCaveats: Webhooks add latency to an API request, hence they should evaluate as quickly as possible thus having max allowed timeout of 30s. In the earlier approach I was fetching the security warnings from the plugin site API in the validator interface itself, and since network operations are slow, it was causing a timeout in the case of validating a larger number of plugins or when the Internet connection was not good.\n\nUpdated Implementaion: Instead of fetching information for each plugin, the information about all the plugins is downloaded and cached at the start of the operator and updated periodically, thus eliminating network calls and finishing validation in less than a second.\n\nEvaluation Phase 1:\n\nScaffoled a new validation webhook\n\nAdded manifests for ValidatingWebhookConfiguration, certificates and volumes, and updated Makefile\n\nImplemented the validator interface\n\nUpdated helm charts\n\nEvaluation Phase 2:\n\nReimplemented the validator interface.\n\nAdded unit tests for internal functions\n\nAdded e2e tests along with helm tests\n\nUpdated helm charts\n\nResources\n\nPull Requests\n\nAdded validation webhook,manifests,and updated Makefile\n\nImplemented validation logic,added tests and updated helm charts\n\nPhase 1 demo\n\nUser Guide\n\nThe webhook feature is completely optional for the user. It can be easily deployed using Helm Chart by setting webhook.enabled in values.yaml and in the Operator command line flag.\n\nwebhook.enabled=true\n\nTo enable security validation in the jenkins custom resource set\n\njenkins.ValidateSecurityWarnings=true\n\nNote: The webhook takes some time to get up and running, also when helm renders the template, the validating webhook configuration is applied last, hence if the user wants to deploy the Jenkins Custom Resource with validation turned on, he needs to wait for some time. After the webhook is up and running the user can deploy the Jenkins Custom Resource using helm or kubectl\n\nFuture work\n\nImplementing a post-install hook in the helm charts that checks whether the webhook is up and running.\n\nAdding validation for required core version of plugin and core version of Jenkins.\n\nMigrating other validation logic from controller to the webhook.\n\nAdding validation for the dependencies of the plugins.","title":"Security Validator for Jenkins Operator for Kubernetes","tags":["gsoc21","kubernetes","security","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#a88848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/67151/sharmapulkit04.jpg","srcSet":"/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/ede19/sharmapulkit04.jpg 32w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/bc20c/sharmapulkit04.jpg 64w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/67151/sharmapulkit04.jpg 128w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/f76df/sharmapulkit04.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/8ba60/sharmapulkit04.webp 32w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/a9ea7/sharmapulkit04.webp 64w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/8c23b/sharmapulkit04.webp 128w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/fc98a/sharmapulkit04.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":131}},"publicURL":"/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/sharmapulkit04.jpg"},"blog":null,"github":"sharmapulkit04","html":"<div class=\"paragraph\">\n<p>A Student at the Indian Institute of Technology(BHU) Varanasi, Pulkit is currently working on a GSoC Project under Jenkins where he aims to add a security validator to the Jenkins Kubernetes Operator.</p>\n</div>","id":"sharmapulkit04","irc":null,"linkedin":null,"name":"Pulkit Sharma","slug":"/blog/authors/sharmapulkit04/","twitter":"anarchist_04"}]}},{"node":{"date":"2021-08-28T00:00:00.000Z","id":"1191945b-e68d-5ab5-8c0e-ef54d9699ba9","slug":"/blog/2021/08/28/conventional-commits-plugin-project-report/","strippedHtml":"This blog post is part 2 of the Introducing the Conventional Commits Plugin blog.\n\nThe goal of this blog is to showcase the work done during the Google Summer of Code 2021 coding phases.\n\nPlease refer the part 1 of the blog for a detailed description of the plugin.\n\nAbstract\n\nThe project/plugin aims to fully automate a release process.\n\nThe plugin tries to achieve this goal by automatically determining the next semantic version based on commit messages.\n\nThere were 2 coding phases in the GSoC 2021.\nI call the first phase - \"Read\" and the 2nd phase - \"Write\", let’s see why.\n\nPhase 1: Read\n\nIn this phase, the \"read\" aspect of the plugin was enhanced.\nThe plugin supported multiple project types (Maven, Gradle, NPM, Helm, Python, Make) and was able to read current version information from the configuration files of the supported project types.\n\nDeliverables\n\nSupport multiline comments\n\nSupport reading the current version from a maven pom.xml\n\nSupport reading the current version from a build.gradle\n\nSupport reading the current version from a Makefile\n\nSupport reading the current version from a package.json\n\nSupport reading the current version from a helm Chart.yaml\n\nResources\n\nList of related issues\n\nPhase 1 Demo and Presentation:\n\nPhase 2: Write\n\nIn this phase, some work was done in extending the \"write\" aspect of the plugin.\nA provision (optional parameter) to write back the calculated next semantic version to the configuration files of projects was added to the plugin.\nAlong with that, the plugin now can append \"Pre-Release\" and \"Build Metadata\" information to the calculated semantic version.\n\nDeliverables\n\nAdd prerelease information to the calculated/new version\n\nAdd build metadata to the calculated/new version\n\nWrite next version in pom.xml\n\nWrite next version in package.json\n\nHandle version mismatch between config file and latest tag\n\nResources\n\nLink to related Issues\n\nUsing optional parameters in the Conventional Commits Plugin\n\nPhase 2 Presentation\n\nNext Steps\n\nWrite back version for Python project.\n\nWrite back version for Gradle project.\n\nHandle remote workspaces\n\nFeedback\n\nWe would love to hear your feedback & suggestions for the plugin.\n\nPlease reach out on the plugin’s GitHub repository, the Gitter channel or start a discussion on community.jenkins.io.","title":"Work report for the Conventional Commits Plugin for Jenkins","tags":["gsoc","gsoc2021","conventionalcommits","plugin"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#688898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png","srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/ff5a3/adi10hero.png 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b18f9/adi10hero.png 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b9e30/adi10hero.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8ba60/adi10hero.webp 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/a9ea7/adi10hero.webp 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8c23b/adi10hero.webp 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/fc98a/adi10hero.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":131}},"publicURL":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/adi10hero.png"},"blog":null,"github":"adi10hero","html":"<div class=\"paragraph\">\n<p>Aditya is a curiosity driven individual striving to find ingenious solutions to real-world problems. He is an open-source enthusiast and a life long learner.</p>\n</div>","id":"adi10hero","irc":null,"linkedin":null,"name":"Aditya Srivastava","slug":"/blog/authors/adi10hero/","twitter":"adi10hero"}]}},{"node":{"date":"2021-09-04T00:00:00.000Z","id":"38e8b09f-3f33-59fc-a9a2-2d18aa09a4fe","slug":"/blog/2021/09/04/wiki-attacked/","strippedHtml":"Earlier this week the Jenkins infrastructure team identified a successful attack against our deprecated Confluence service.\nWe responded immediately by taking the affected server offline while we investigated the potential impact.\nAt this time we have no reason to believe that any Jenkins releases, plugins, or source code have been affected.\n\nThus far in our investigation, we have learned that the Confluence CVE-2021-26084 exploit was used to install what we believe was a Monero miner in the container running the service.\nFrom there an attacker would not be able to access much of our other infrastructure.\nConfluence did integrate with our integrated identity system which also powers Jira, Artifactory, and numerous other services.\n\nThe trust and security in Jenkins core and plugin releases is our highest priority.\nWe do not have any indication that developer credentials were exfiltrated during the attack.\nAt the moment we cannot assert otherwise and are therefore assuming the worst.\nWe are taking actions to prevent releases at this time until we re-establish a chain of trust with our developer community.\nWe have reset passwords for all accounts in our integrated identity system.\nWe are improving the password reset system as part of this effort.\n\nAt this time, the Jenkins infrastructure team has permanently disabled the Confluence service, rotated privileged credentials, and taken proactive measures to further reduce the scope of access across our infrastructure.\nWe are working closely with our colleagues at the Linux Foundation and the Continuous Delivery Foundation to ensure that infrastructure which is not directly managed by the Jenkins project is also scrutinized.\n\nIn October 2019 we made the Confluence server read-only effectively deprecating it for day-to-day use within the project.\nAt that time, we began migrating documentation and changelogs from the wiki to GitHub repositories.\nThat migration has been ongoing, with hundreds of plugins and many other documentation pages moved from the wiki to GitHub repositories.\n\nWe are grateful for those of you who followed our responsible disclosure procedure and reached out to us about this vulnerability affecting the Jenkins project.\n\nWe will continue to take proactive measures to improve the security of our infrastructure and encourage you to follow us on Twitter for further updates.","title":"Jenkins project Confluence instance attacked","tags":["infrastructure","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite/","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},{"node":{"date":"2021-09-20T00:00:00.000Z","id":"4a603f29-d1fa-5828-bebd-39a9d9b5c6b1","slug":"/blog/2021/09/20/election-period-opened/","strippedHtml":"Dear all,\n\nTime flies and the Jenkins elections period is here.\n\nThis year, two board seats and all officer positions are up for election.\nThanks, Oleg Nenashev and Ullrich Hafner who led the Jenkins project as board members for the last two years.\nThanks, Tim Jacomb, Daniel Beck, Mark Waite for your dedication as officers over the past year.\n\nWe already had two successful editions in a row. I want us to continue on that path.\nThis is a tremendous opportunity for community members to influence the direction of the project for the next two years.\nTo make this year’s election even better, we slightly modified the process by leveraging our new community platform aka community.jenkins.io.\n\nTo participate in the election, we ask every Jenkins community member to have an account on community.jenkins.io.\nYou can either reuse your Github account or create a new discourse account specific to community.jenkins.io.\nThe second requirement is to be able to showcase at least one contribution done before the first of September 2021.\nAs mentioned on jenkins.io.io/participate, they are many different ways to contribute to Jenkins and for many of them, it’s very difficult to measure.\nTherefore we’ll trust participants and will not require that they provide evidence of contribution as part of their voter registration. We reserve the right to ban the specific account from the election process if we identify abuse.\nThe election works in three stages:\n\nIdentify voters and nominees\n\nVoting period\n\nAnnounce results\n\nVoters\n\nTo invite participants to vote, we need a list of email’s addresses that we would share with the Condorcet Internet Voting Service.\nTherefore we ask every community member who matches the requirements to join the group election-voter on community.jenkins.io.\nThe group will be open for joining during the registration period after we’ll close registration during the voting period.\nWe’ll use emails from the “election-voter” group members.\n\nNominees\n\nDuring the same period, we invite every community member to nominate candidates by sending a message to the group election-committee mentioning the position and the motivation.\nOn the 31 of October, the nomination period will end. We’ll notify all the nominees and get confirmation that they are interested in running as a candidate.\nThe list of candidates will be announced on the 7th of November.\n\nEverybody can nominate candidates.\n\nThis year we are looking for nominees for the following positions:\n\nBoard members\n\nDocumentation Officer\n\nEvents Officer\n\nInfrastructure Officer\n\nRelease Officer\n\nSecurity Officer\n\nMore information about the different roles can be found on jenkins.io/project/team-leads.\n\nElection\n\nOn the 7th of November, once voters and candidates are identified, we’ll invite everybody by email to vote using civs.cs.cornell.edu.\nAt this stage of the election, nobody will be allowed to register.\nVoting deadline is the 30th of November.\n\nResult\n\nAs soon as we have the election results, we’ll publish them.\nElected members will begin their official roles on the 3rd of December 2021.\n\nKey Dates\n\nSep 20: Nomination and voter registration begin\n\nOct 31: Nomination deadline\n\nNov 07: Candidates announced, Registration deadline, voting start\n\nNov 30: Voting deadline\n\nDec 03: Results announced\n\nKey Information:\n\nEverybody can suggest candidates by sending a private message to the group election-committee.\n\nVoters register for the election by joining the public group election-voter.\n\nEmail participants will be shared with Condorcet Voting System to send voting invitations.\n\nNobody can register for the election once we send invitations to Condorcet Voting System.\n\nOnce the election is over, every member of the group\"election-voter\" will get a badge on https://community.jenkins.io as a “2021 Election Participant”.\n\nOnce the election is over, every nominee will get the badge “2021 Election Nominee”.\n\nCheers,","title":"Jenkins Election 2021","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/olblak.png"},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak/","twitter":"0lblak"}]}},{"node":{"date":"2021-09-21T00:00:00.000Z","id":"46dca724-0a96-5dd5-b26f-0b1e33816612","slug":"/blog/2021/09/21/jenkins-at-devops-world/","strippedHtml":"DevOps World has been the largest gathering for Jenkins for many years.\nIn keeping with tradition, many Jenkins presentations and sessions are planned for this year’s event.\n\nJoin us for DevOps World on September 28 - 30, 2021.\nThe event is virtual, free to attend and will include the following Jenkins activities:\n\nJenkins workshops\n\nContributing to Open Source\n\nSecuring Jenkins Pipeline with CyberArk Conjur Secrets Manager\n\nSee the conference workshop list for more information about workshops.\n\nBreakout sessions\n\nEmbracing Observability in Jenkins with OpenTelemetry - Cyrille Le Clerc\n\nExpanding Open Source in Africa with Jenkins - Experience Report - Mark Waite and Zainab Abubakar\n\nVisualizing Git Forensics Data in a Jenkins Plugin - Ullrich Hafner\n\nSpeeding up Jenkins and Maven with a Build Cache - Justin Reock\n\nAuto Versioning at Scale with Jenkins and Ontrack - Taming the Hydra - Damien Coraboeuf\n\nBuild up a Reliable Jenkins on KubeSphere - Rick Zhao\n\nAutomate Jenkins operations on Kubernetes : Jenkins Automation Operator - Vibhav Bobade and Jawed Khelil\n\nRunning JenkinsFileRunner as a Service - Jose Taboada\n\nFrom Big and Slow to Small and Agile: Splitting Monolithic Jenkins Controllers for Increased Performance - Dylan Dewhurst\n\nSee the full agenda for more Jenkins sessions.\n\nBirds of a feather\n\nThese are 30 minute networking sessions.\nTopics will be on security and pipeline.\nDiscussions are led by Wadeck Follonier, Daniel Beck, Joost van der Griendt, and Mark Waite.\n\nJenkins contributor summit\n\nA Jenkins Contributor Summit will be held October 2, 2021 at 7:00 AM UTC.\n\nThe planning discussion is taking place at community.jenkins.io.\nWe welcome topic suggestions or you can volunteer to present a topic about which you are passionate.\nJoin in on the discussion.\nNew and veteran contributors are welcome!\n\nVirtual expo hall\n\nBe sure to stop by the Jenkins booth for project update content or to chat with one of the Jenkins maintainers.\n\nSpecial thanks to review committee\n\nLastly, special THANKS to the DevOps World review committee.\nWe are grateful for their contributions to review, score and provide feedback for paper submissions.\n\nAlex Earl\n\nViktor Farcic\n\nVictor Martinez\n\nCarlos Sanchez\n\nLooking forward to seeing you there!","title":"Join Jenkins at DevOps World 2021","tags":["events","conference","cicd","talks","workshops"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2021-09-22T00:00:00.000Z","id":"57398f0c-b0e2-5bb6-9342-182df7f80a51","slug":"/blog/2021/09/22/fortune-500-real-world-results/","strippedHtml":"If you’ve been following JenkinsIsTheWay.io, you’ve read some fantastic stories from the Jenkins user community about the great stuff they are building with Jenkins.\nWith over 200,000 installations to date, Jenkins remains the most widely used open-source automation server.\nAnd story after story, we hear what a critical role Jenkins plays in building robust, secure CI/CD pipelines.\n\nSo it comes as no surprise that in many of the back (and remote) offices of Fortune 500 companies, developers are turning to Jenkins to help make their lives easier with automation while also giving their engineers more time to innovate.\nWith this in mind, I invite you to read the latest ebook focused on the behind-the-scenes development activities underway in large-scale enterprises.\n\nJenkins led\n\nLearn how companies like IBM continue to innovate their software prowess while confidently relying on their custom-built CI/CD pipelines.\nYou’ll also read how Jenkins became the ultimate collaboration tool for thousands of Apple developers.\nAnd we don’t just shine the spotlight on tech companies.\nIn this ebook, Jenkins users span multiple industries across the enterprise.\n\nYou’ll read how Jenkins made it possible to standardize multidisciplinary team procedures so Roche engineers can create innovative healthcare applications with confidence.\nWe also dive into how Telstra’s software team was able to automate the build cycle - across 100,000 microservices - to accelerate the creation of world-class communication tools.\nAnd how Sainsbury’s development team used Jenkins as the way to \"bring a retail giant into the 21st century\".\n\nResults inspired\n\nNo time to dive into this Fortune 500 ebook?\nI thought it’s worth highlighting the real-world results experienced by enterprise developers and engineers who have turned to awesome plugins to help build, deploy and automate their software solutions.\nHere’s what they had to say in their own words!\n\nSoftware acceleration\n\nBuild times are much faster with the new node mechanism\n\nShared build pipelines are consistent and evolve faster\n\nFaster deployment times - from 5 days to several minutes\n\nDeploy multiple server patches 30x faster than normal processes\n\nReduce release time from 7 to 4 days\n\nSimpler, smarter processes\n\nOne-stop-shop for building, deploying, monitoring, testing and even self-managing\n\nEasy onboarding for new applications\n\nCredential management has gotten much simpler and stricter\n\nMade setting up CI/CD really easy\n\nProvides the visibility needed to track the deployment process\n\nLoved and relied on by developers\n\nUltimate collaboration tool for thousands of developers\n\n100% confidence in a consistent and repeatable pipeline\n\nKeeps the DevOps team in the loop\n\nJenkins-as-code has freed teams up to experiment more\n\nTeams are more self-empowered to provision and support their own builds\n\nOne thing to remember is that since Jenkins is a free open source solution, it also means savings across the enterprise.\nThis is highlighted in several of our user stories in this ebook.\nYou’ll discover how peers have \"decreased build server costs\" and have mentioned \"cost-cutting\" as a top Jenkins benefit.\n\nShare your story\n\nWhether working for a large corporation or an emerging tech startup, we relish hearing your experiences and the results you get with a Jenkins assist.\nWhen you’re ready to tell your story, we’re prepared to help you share it.\nFill out our short questionnaire, and we’ll send you our Jenkins Is The Way T-shirt as a thank you once it’s published!\n\nLinks\n\nDownload Fortune 500 User Story eBook\n\nVisit JenkinsIsTheWay\n\nShare your story","title":"New eBook: Fortune 500 Developers and Engineers Turn to Jenkins for Real-World Results","tags":["jenkins-is-the-way","case-study","ebook","community","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat/","twitter":null}]}},{"node":{"date":"2021-09-23T00:00:00.000Z","id":"fb842ea3-b4cc-5d91-b265-37f67eecc88d","slug":"/blog/2021/09/23/jenkins-health-advisor-by-cloudbees/","strippedHtml":"There are many ways to set up your Jenkins environment, and depending on the configuration you choose, there are different best practices and options to optimize your environment.\nIn this blog, I’m going to focus on Jenkins Health Advisor by CloudBees as a way to fine-tune your environment.\nIt’s a free tool that can help administrators understand and manage their Jenkins controller.\nIf you’re a CloudBees customer, the tool automatically comes with CloudBees CI.\nHowever, it’s also available as a free open source tool to anyone who uses Jenkins.\nThe Jenkins Health Advisor tool can make your life easier, because it can arm you with the information you need to keep your Jenkins environment running smoothly.\n\nA Bit of Background\n\nThe CloudBees support team originally created the tool as a way to help customers troubleshoot Jenkins issues.\nWith the tool, our support engineers could gather information from a customer’s Jenkins controller about the configuration of the controller and agents, the operating system, stats from web requests, and the like.\nOur tech support teams used this data to help customers pinpoint problems, such as security vulnerabilities, performance problems, and plugin version issues.\nVery quickly, our support tooling team saw the bigger-picture benefits of the diagnostic tool as an opportunity for people to proactively manage their controller.\nWith that bit of background, let’s dive into the Jenkins Health Advisor tool so you understand how it can help you.\n\nThe Problem — Lack of Visibility into Controller Environment\n\nBecause of the open-source nature of Jenkins and the vast array of plugins that you can deploy in your Jenkins installation, downstream code changes to plugins and corresponding dependencies can inadvertently impact your environment, which slows productivity, causes confusion, and impacts the quality of your software delivery.\nWhen problems arise, Jenkins administrators need to quickly pinpoint the root cause of an issue, and that can be quite a challenge.\n\nThe Solution — Jenkins Health Advisor by CloudBees\n\nWhen an issue arises, you need razor sharp insight to help you quickly sift through lines upon lines of data about your Jenkins controller and your plugins to identify the problem.\nAnd, that’s exactly what Jenkins Health Advisor does.\nIt gives you specific information about potential problems in your environment so you can resolve issues as quickly as possible.\n\nWhen you first install the Jenkins Health Advisor tool in your environment, you’ll receive a report that lists everything it detects in your system.\nYou’ll then receive report emails only when something changes that could impact your environment or when the tool identifies an issue that could be problematic.\nIf there are no issues in your environment, you don’t receive an email.\nIt’s really that simple.\n\nThe Power is in the Insight … and the CloudBees Support\n\nOk, so let’s explain how Jenkins Health Advisor uses data to help you optimize your environment.\nThe tool actually generates a support bundle every 24 hours.\nWe don’t want to bog down your email inbox with redundant reports emails, so we don’t send every report to you—only the reports that indicate an issue with your environment.\nHowever, CloudBees receives every support bundle from every user.\nWe are constantly monitoring all of this active Jenkins controller data with external Jenkins and open source data about known issues, plugin updates, security vulnerabilities, etc.\nIf the Jenkins Health Advisor tool identifies an issue that could impact your system, you’ll receive an email so you can proactively address the problem.\nAt the same time, CloudBees engineering teams are continually working to enhance the detection capabilities of the Jenkins Health Advisor tool, so you can work as proactively as possible to manage your environment.\n\nThe emails you receive identify potential problems, and they also include supporting information to help you resolve issues, with links to solutions and recommended resolutions as well as articles to understand the problem.\n\nHelpful Tips to Gain Value from Jenkins Health Advisor\n\nImprove Troubleshooting\n\nIf you need to troubleshoot a particular issue, you can manually generate a support bundle to give you point-in-time information on your environment.\nYou can filter the support bundle data on different system parameters, like the build queue, dump agent export tables, and garbage collection logs, so you get the specific information you need.\n\nGenerate Anonymized System Data\n\nAt any time, you can change the settings on your tool to anonymize the data in your support bundles.\nYou may want to do this if you don’t want to share sensitive project data with CloudBees.\nOur support and engineering teams can still gain valuable insight from your generic system data.\nThis is also a helpful feature if you need to share system data with a partner or vendor, and you don’t want to share project or personnel data.\n\nJenkins Health Advisor Tool Updates and Support\n\nAs we mentioned above, the CloudBees support tooling team is constantly working to enhance the tool.\nTo ensure it’s always as current as possible, we release updates to the tool every two weeks.\nUsually these updates won’t impact your Jenkins environment.\nHowever, if there are changes to the tool that might affect your system, you’ll receive a notification email so there are no surprises.\nAnd, if you need help with the Jenkins Health Advisor tool, our support engineers are available to answer your questions.\n\nStart Using Jenkins Health Advisor Today\n\nGiven the vast Jenkins community, it’s impossible to know everything that may impact your environment, even if you look at your control panel every day and scour open source forums on a regular basis to stay on top of new issues and vulnerabilities.\nThe Jenkins Health Advisor tool is designed to streamline the work effort of your daily routine by automatically telling you when there’s an issue that may impact your Jenkins environment.\nWith the proactive Jenkins Health Advisor notifications, you can spend your time on more strategic tasks.\n\nInstall the plugin and enroll your controller with Jenkins Health Advisor today!","title":"Jenkins Health Advisor by CloudBees Tool Makes Life Easier for Jenkins Administrators","tags":["jenkins","health","healthcheck","stability"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/bf8e1/aheritier.png","srcSet":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/914ee/aheritier.png 32w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/1c9ce/aheritier.png 64w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/bf8e1/aheritier.png 128w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/acb7c/aheritier.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/ef6ff/aheritier.webp 32w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/8257c/aheritier.webp 64w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/6766a/aheritier.webp 128w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/22bfc/aheritier.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/aheritier.png"},"blog":"https://aheritier.net","github":"aheritier","html":"<div class=\"paragraph\">\n<p>Specialised in <a href=\"https://www.linkedin.com/in/aheritier\">software development and process automation</a>, he has been contributing for many years to various open source projects such as <a href=\"https://jenkins.io\">Jenkins</a>, <a href=\"https://maven.apache.org\">Apache Maven</a> and to various communities around Java and DevOps.\nMember of <a href=\"https://lescastcodeurs.com\">Les Cast Codeurs</a> podcast (a french podcast dedicated to IT in general and Java ecosystem), he regularly speaks at various conferences, users groups and participates in the organisation of <a href=\"https://devoxx.fr/what-is-devoxx-france\">Devoxx France</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In 2015, he joined <a href=\"http://www.cloudbees.com\">CloudBees, Inc.</a>, where he is now managing the Support Tooling development activity.</p>\n</div>","id":"aheritier","irc":null,"linkedin":null,"name":"Arnaud Héritier","slug":"/blog/authors/aheritier/","twitter":"aheritier"}]}},{"node":{"date":"2021-09-24T00:00:00.000Z","id":"c605a807-b418-5bf1-9cbc-d6034184f502","slug":"/blog/2021/09/24/gsoc-report/","strippedHtml":"Congratulations to all Google Summer of Code (GSoC) 2021 students!\nOn behalf of the Jenkins org team, we would like to thank all participants: students, mentors, applicants, and dozens of other contributors who participated in GSoC this year.\n\nIn 2021, the Jenkins project participated in GSoC as part of the Continuous Delivery Foundation’s GSoC mentor organisation.\nWithin the CDF GSoC mentor organisation, we had six students working on projects: five projects focused on Jenkins\nand one project focused on Spinnaker.\nIn GSoC, we focus on projects that solve problems important to end users and community members.\nThis year’s GSoC projects delivered highly anticipated new features for Jenkins and Spinnaker.\n\nGoogle Summer of Code has been a successful and positive experience for students due to the active participation of the Jenkins community and the wider Continuous Delivery Foundation community.\n\n🎉 All of the CDF GSoC students have successfully completed their projects! 🎉\n\nThis is the second year in a row that all Jenkins GSoC students have reached the final evaluation and successfully passed!\nThis has been an extremely challenging year, and the amount of work and dedication that the students and their mentoring teams\nhave put into GSoC has been phenomenal.\nJenkins, Spinnaker, and the CDF are incredibly grateful to everyone who has contributed to GSoC 2021!\n\n☀️ GSoC Students and their Projects\n\nPlease see the individual project pages for more details on the projects and work undertaken.\nYou can view student presentations during mid-term demos and final demos\nand students have written numerous blog posts about their work.\n\nShruti Chaturvedi - CloudEvents Plugin for Jenkins\n\nShruti is an undergrad student of Computer Science at Kalamazoo College.\nShe is developing a CloudEvents integration for Jenkins, allowing other CloudEvents-compliant CI/CD tools to communicate easily.\nShruti is also the Founding Engineer of a California-based startup, MeetKlara, where she is building serverless solutions and advocating for developing CI/CD pipelines using open-source tools.\n\nAffiliation: Kalamazoo College and Jenkins project\n\nGitHub: ShrutiC-git\n\nLinkedIn: Shruti Chaturvedi\n\nCloudEvents Plugin for Jenkins\n\nProject page\n\nCompleted project blog post: Jenkins Interoperability with CloudEvents\n\nMid-term blog: CloudEvents Plugin for Jenkins: Interoperability between Jenkins and other CI/CD Tools\n\nFinal demo\n\nMid-term demo\n\nHarshit Chopra - Git credentials binding for sh, bat, and powershell\n\nHarshit Chopra is a recent graduate and is currently working on a Jenkins project which brings the authentication support for cli git commands in a pipeline job and freestyle project.\n\nAffiliation: Punjab University & Jenkins Project\n\nGitHub: link: arpoch\n\nLinkedIn: Harshit Chopra\n\nWebsite\n\nGit credentials binding for sh, bat, and powershell\n\nProject page\n\nMid-term blog: Git Credentials Binding for sh, bat, powershell\n\nFinal demo\n\nMid-term demo\n\nAkihiro Kiuchi - Jenkins Remoting Monitoring\n\nAkihiro is a student in the Department of information and communication engineering at the University of Tokyo.\nHe is improving the monitoring experience of Jenkins Remoting during Google Summer of Code 2021.\n\nAffiliation: The University of Tokyo and Jenkins project\n\nGitHub: Aki-7\n\nJenkins Remoting Monitoring with OpenTelemetry\n\nProject page\n\nMid-term blog: Remoting Monitoring with OpenTelemetry\n\nFinal demo\n\nMid-term demo\n\nDaniel Ko - try.spinnaker.io\n\nDaniel is studying computer science at the University of Wisconsin - Madison.\nHe is developing a public Spinnaker sandbox environment for Google Summer of Code 2021.\n\nAffiliation: University of Wisconsin - Madison and Spinnaker project\n\nGitHub: ko28\n\nLinkedIn: Daniel Ko\n\ntry.spinnaker.io:  Explore Spinnaker in a Sandbox Environment!\n\nProject page\n\nCompleted project blog post: Interview with Daniel Ko — Google Summer of Code 2021\n\nFinal demo\n\nMid-term demo\n\nPulkit Sharma - Security Validator for Jenkins Kubernetes Operator\n\nPulkit is a student at Indian Institute of Technology,BHU,Varanasi.\nHe is working on a GSoC Project under Jenkins where he aims to add a security validator to the Jenkins Kubernetes Operator.\n\nAffiliation: Indian Institute of Technology, BHU and Jenkins Project.\n\nGitHub: sharmapulkit04\n\nSecurity Validator for Jenkins Kubernetes Operator\n\nProject page\n\nCompleted project blog post: Security Validator for Jenkins Operator for Kubernetes\n\nFinal demo\n\nMid-term demo\n\nAditya Srivastava - Conventional Commits Plugin for Jenkins\n\nAditya is a curiosity driven individual striving to find ingenious solutions to real-world problems.\nHe is an open-source enthusiast and a lifelong learner.\nAditya is also the Co-Founder and Maintainer of an Open Source Organization - Auto-DL, where he’s leading the development of a Deep Learning Platform as a Service application.\n\nAffiliation: V.E.S.I.T & Jenkins project\n\nGitHub: ADI10HERO\n\nLinkedIn: Aditya S.\n\nConventional Commits Plugin for Jenkins\n\nProject page\n\nCompleted project blog post: Work report for the Conventional Commits Plugin for Jenkins\n\nMid-term blog: Introducing the Conventional Commits Plugin for Jenkins\n\nFinal demo\n\nMid-term demo\n\nUpcoming Events, September 28-30: DevOps World!\n\nThis year CloudBees, one of the Jenkins corporate sponsors, has invited all students to participate in the DevOps World virtual conference on September 28-30.\nGSoC students will present lighting talks about their projects, attended other conference talks, and join the Continuous Delivery Foundation booth which represents CDF projects at the conference.\nWe look forward to GSoC students' lightning talks during DevOps World!\n\nSwag\n\nAll Google Summer of Code students and mentors receive swag from Google.\nIn addition, this year, CloudBees has sponsored swag for the most active GSoC participants:\nall students, mentors, and many other contributors who participated and helped the projects to succeed.\nThis is the forth year when the Jenkins organization sends extra GSoC swag.\nIn the previous years swag logistics was one of the more challenging tasks for org admins during GSoC,\nand we highly appreciate that the Continuous Delivery Foundation will handle sending out the additional swag.\n\nThanks you Google Open Source, Continuous Delivery Foundation (CDF) and CloudBees!","title":"Congratulations to all Jenkins and CDF Google Summer of Code 2021 participants!","tags":["gsoc","gsoc2021","jenkins","community","events","mentor"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#082848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/0e311/marckk.jpg","srcSet":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/6105b/marckk.jpg 32w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/11755/marckk.jpg 64w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/0e311/marckk.jpg 128w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/b2ade/marckk.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/a4758/marckk.webp 32w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/47694/marckk.webp 64w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/bf0f6/marckk.webp 128w,\n/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/445f6/marckk.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116.99999999999999}},"publicURL":"/gatsby-jenkins-io/static/213476fc401270f56aae13bbdf67658a/marckk.jpg"},"blog":null,"github":"MarckK","html":"<div class=\"paragraph\">\n<p>Kara works with the open source community at CloudBees.\nShe is co-chair of the Continuous Delivery Foundation’s Interoperability SIG and a mentor and org admin for Outreachy and Google Summer of Code.\nAs a board director of codebar.io, Kara works to increase diversity in the tech industry.\nShe is passionate about making technology accessible and building welcoming tech communities.</p>\n</div>","id":"marckk","irc":null,"linkedin":"karadelamarck","name":"Kara de la Marck","slug":"/blog/authors/marckk/","twitter":"KaraMarck"}]}}]}},"pageContext":{}},
    "staticQueryHashes": ["3649515864"]}