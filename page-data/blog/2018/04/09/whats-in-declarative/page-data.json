{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/04/09/whats-in-declarative/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>Last week we released the latest version of Declarative Pipelines, version\n1.2.8. With that out, we thought now would be a good time to introduce you to\nthe new features and options that have been added to Declarative since the\nbeginning of 2018. These are all available <em>now</em> in the Update Center, with\nversion 1.2.8.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image right\"><img src=\"/images/post-images/declarative-1.2.8/directive-generator-link.png\" alt=\"Accessing the new Declarative Directive Generator\"></span></p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"declarative-directive-generator\"><a class=\"anchor\" href=\"#declarative-directive-generator\"></a>Declarative Directive Generator</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This is something we&#8217;re really happy about - if you go to the \"Pipeline Syntax\"\nlink from your Pipeline&#8217;s page in Jenkins, you&#8217;ll see a couple new links on the\nleft, including \"Declarative Directive Generator\". The Directive Generator is\nmuch like the Snippet Generator that&#8217;s been in Pipeline for a couple years now,\nbut where the Snippet Generator is just for filling out a form for a step and\ngenerating the Pipeline code that configuration maps to, the Directive\nGenerator is built to help you write your Declarative Pipeline directives, like\n<code>agent</code>, <code>options</code>, <code>stage</code>, and more!</p>\n</div>\n<div class=\"paragraph\">\n<p>This is the first release to include the Directive Generator, and it&#8217;s\ndefinitely going to see more polish going forward, but we think it should be\nquite helpful for you already. We&#8217;ll be putting up another blog post looking at\nthe Directive Generator in more detail in the near future.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"new-when-conditions\"><a class=\"anchor\" href=\"#new-when-conditions\"></a>New <code>when</code> conditions</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We&#8217;ve added a number of new <code>when</code> conditions, providing you more control over\nwhether your stages get executed.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>equals</code> - Compares two values - strings, variables, numbers, booleans - and\nreturns true if they&#8217;re equal. I&#8217;m honestly not sure how we missed adding\nthis earlier! You can do \"not equals\" comparisons using the <code>not { equals &#8230;&#8203;\n}</code> combination too.</p>\n</li>\n<li>\n<p><code>changeRequest</code> - In its simplest form, this will return true if this\nPipeline is building a change request, such as a GitHub pull request. You can\nalso do more detailed checks against the change request, allowing you to ask\n\"is this a change request against the master branch?\" and much more.</p>\n</li>\n<li>\n<p><code>buildingTag</code> - A simple condition that just checks if the Pipeline is\nrunning against a tag in SCM, rather than a branch or a specific commit\nreference.</p>\n</li>\n<li>\n<p><code>tag</code> - A more detailed equivalent of <code>buildingTag</code>, allowing you to check\nagainst the tag name itself.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>In addition, we&#8217;ve added a new option to <code>when</code>: <code>beforeAgent</code>. This allows you\nto specify that the <code>when</code> conditions should be evaluated before entering the\n<code>agent</code> for the <code>stage</code>, rather than the normal behavior of evaluating <code>when</code>\nconditions after entering the <code>agent</code>. When <code>beforeAgent true</code> is specified,\nyou will not have access to the <code>agent&#8217;s workspace, but you can avoid\nunnecessary SCM checkouts and waiting for a valid `agent</code> to be available. This\ncan speed up your Pipeline&#8217;s execution in some cases.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/declarative-1.2.8/directive-generator.png\" alt=\"Using the new Declarative Directive Generator\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"new-post-conditions\"><a class=\"anchor\" href=\"#new-post-conditions\"></a>New <code>post</code> conditions</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code>changed</code> condition has always been a bit confusing, and to be\nhonest, it wasn&#8217;t our best work. <code>changed</code> will fire any time the current run&#8217;s\nstatus is different than the previous run&#8217;s status - whether the current run is\nhealthier than the previous one, or the other way around. That&#8217;s&#8230;&#8203;not actually\nvery useful. So now we&#8217;ve added two new <code>post</code> conditions that should provide\nyou with a lot more value than <code>changed</code> has.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>fixed</code> - This will check to see if the current run is successful, and if the\nprevious run was either failed or unstable.</p>\n</li>\n<li>\n<p><code>regression</code> - This will check to see if the current run&#8217;s status is worse\nthan the previous run&#8217;s status. So if the previous run was successful, and\nthe current run is unstable, this will fire and its block of steps will\nexecute. It will also run if the previous run was unstable, and the current\nrun is a failure, etc.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"new-options\"><a class=\"anchor\" href=\"#new-options\"></a>New <code>options</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code>options</code> directive in Declarative can contain a number of different kinds\nof configuration: traditional Jenkins job properties, like <code>buildDiscarder</code>,\nwrapper steps to execute the entire Pipeline within, like <code>timeout</code>, and\nDeclarative-specific options that can switch from some default behaviors of\nDeclarative execution. We&#8217;ve added two new Declarative-specific options in the\nlast few releases.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>checkoutToSubdirectory</code> - Allows you to override the location that the\nautomatic SCM checkout will use. Using <code>checkoutToSubdirectory(\"foo\")</code>, your\nPipeline will checkout your repository to <code>\"$WORKSPACE/foo\"</code>, rather than the\ndefault of <code>\"$WORKSPACE\"</code>.</p>\n</li>\n<li>\n<p><code>newContainerPerStage</code> - If you&#8217;re using a top-level <code>docker</code> or <code>dockerfile</code>\n<code>agent</code>, and want to ensure that each of your stages run in a fresh container\nof the same image, you can use this option. Any <code>stage</code> without its own\n<code>agent</code> specified will run in a new container using the image you&#8217;ve\nspecified or built, on the same computer and with access to the same\nworkspace.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"stage-options\"><a class=\"anchor\" href=\"#stage-options\"></a>Stage options</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Sometimes, you may only want to disable automatic checkout of your repository,\nusing the <code>skipDefaultCheckout(true)</code> option, for one specific stage in your\nPipeline. Or perhaps you want to have a <code>timeout</code> that covers an entire\n<code>stage</code>, including time spent waiting for a valid <code>agent</code>, <code>post</code> condition\nexecution, or the new <code>input</code> directive for stages (see further down for more\ndetails on that!). To make those things possible, we&#8217;ve added a new <code>options</code>\ndirection to <code>stage</code>. You can use a subset of the top-level <code>options</code> content\nin a <code>stage&#8217;s `options</code> - wrapper steps, and Declarative-specific options that\nare marked as legal in a <code>stage</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"input\"><a class=\"anchor\" href=\"#input\"></a>Input</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You&#8217;ve always been able to run the <code>input</code> step inside a <code>stage&#8217;s `steps</code>\nblock, but we&#8217;ve found that approach can lose out on some of the value that the\n<code>input</code> step provides.</p>\n</div>\n<div class=\"paragraph\">\n<p>To help with that, we&#8217;ve added a new <code>input</code> directive\nto <code>stage</code>, with the same parameters as the <code>input</code> step. When you use the\n<code>stage</code> <code>input</code> directive rather than using the step directly, any parameters\nyou&#8217;ve specified for the <code>input</code> will be made available in the <code>stage&#8217;s\nenvironment, meaning you can reference parameters from the `input</code> in <code>when</code>\nconditions, or in <code>environment</code> variables.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n    agent none\n    stages {\n        stage('Example') {\n            input {\n                message \"Should we continue?\"\n                ok \"Yes, we should.\"\n                submitter \"alice,bob\"\n                parameters {\n                    string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')\n                }\n            }\n            agent any\n            steps {\n                echo \"Hello, ${PERSON}, nice to meet you.\"\n            }\n        }\n    }\n}\n// Script //</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Also, the <code>input</code> directive is evaluated before you enter any <code>agent</code> specified\non this <code>stage</code>, so if you are using a top-level <code>agent none</code> and each <code>stage</code>\nhas its own <code>agent</code> specified, you can avoid consuming an executor while\nwaiting for the <code>input</code> to be submitted.</p>\n</div>\n<div class=\"paragraph\">\n<p>Lastly, you can use <code>timeout</code> in the <code>stage</code> <code>options</code>, as\nmentioned above, to time-out the <code>input</code> if too much time has passed without a\nresponse.</p>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>I hope you find these new features and options for Declarative Pipelines\nhelpful, and I look forward to the rest of 2018 as we continue to invest and\nimprove in <a href=\"/doc/book/pipeline\">Jenkins Pipeline</a>!</p>\n</div>\n</div>\n</div>","id":"3494cf73-5468-5673-9163-ca20378f0110","title":"The new things arriving in Declarative Pipeline!","date":"2018-04-09T00:00:00.000Z","slug":"/blog/2018/04/09/whats-in-declarative/","links":{"discourse":""},"authors":[]}},"pageContext":{"next":"/blog/2018/04/10/opinionated-cd-jenkins-x/","previous":"/blog/2018/04/06/jenkins-essentials/","id":"3494cf73-5468-5673-9163-ca20378f0110"}},
    "staticQueryHashes": ["1271460761","3649515864"]}