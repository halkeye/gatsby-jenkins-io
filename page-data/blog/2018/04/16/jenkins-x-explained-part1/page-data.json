{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/04/16/jenkins-x-explained-part1/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p><a href=\"https://jenkins-x.io\">Jenkins X</a> is an opinionated platform for providing CI / CD on top of\n<a href=\"https://kubernetes.io/\">Kubernetes</a>.\nWe’ve chosen a set of core applications that we install and wire together so things work out-of-the-box, providing a\nturn key experience. This blog aims to build on previous introductions to Jenkins X and provide a deeper\ninsight to what you get when you install Jenkins X.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/jenkins-x/install/key.png\" alt=\"key\" width=\"300\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>So what happens? After downloading the jx CLI you will now be able to create clusters with public cloud providers\nor install onto an existing Kubernetes cluster.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/jenkins-x/install/cloud-providers.png\" alt=\"cloud Providers\" width=\"300\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This command will create a cluster on your cloud provider of choice.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>&gt; jx create cluster</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Alternatively you can bring your own Kubernetes cluster and install Jenkins X on it:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>&gt; jx install</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>That said, we’ve found that creating a new cluster on a public cloud such as GKE\nis a lot way easier to start as we can be sure of the state of the cluster.\nFor example we know that storage, networking and loadbalancers will be working as expected.\nCreating a cluster on GKE takes only a few minutes so it’s a great way to try things out as well as run your\nenterprise workloads.</p>\n</div>\n<div class=\"paragraph\">\n<p>For now lets assume we are using GKE. When <code>jx create cluster</code> has finished you will see some output in the\nterminal that also includes the default admin password to use when logging into the core applications below.\nThere is a flag <code>--default-admin-password</code> you can use to set this password yourself.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"accessing-applications\"><a class=\"anchor\" href=\"#accessing-applications\"></a>Accessing applications</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We automatically install an Nginx ingress controller running with an external loadbalancer pointing at it’s\nKubernetes service. We also generate all the Kubernetes Ingress rules using a golang library called\n\"<a href=\"https://github.com/jenkins-x/exposecontroller\">exposecontroller</a>\".\nThis runs as a Kubernetes Job triggered by a\n<a href=\"https://helm.sh/\">Helm</a> hook once any application is installed to the cluster.</p>\n</div>\n<div class=\"paragraph\">\n<p>Using \"exposecontroller\" means we can control all the ingress rules for an environment using a single set of\nconfigurations, rather than each application needing to know how to expose the kubernetes service to the outside world.\nThis also means we can easily switch between HTTP and HTTPS plus support intregration with projects like\n<a href=\"https://hub.kubeapps.com/charts/stable/cert-manager\">cert-manager</a> for auto generation of signed TLS certificates.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"environments\"><a class=\"anchor\" href=\"#environments\"></a>Environments</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>One important point to make is Jenkins X aims to use terminology that developers are familiar with. That’s not\nto say we are changing Kubernetes fundamentals, it’s more that if you don’t know Kubernetes concepts then we aim\nto help you still adopt the cloud technology and pull back the curtain as you gain confidence and experience.\nTo that point, a core part of Jenkins X are \"environments\". An environment can have one or more applications running\nin it. In Kubernetes term an \"environment\" maps to the concept of a \"namespace\" in code.</p>\n</div>\n<div class=\"paragraph\">\n<p>The installation by default created three environments, this is customisable but by default we have a \"dev\", a \"staging\"\nand a \"production environment\". To list, select, or switch between these environments run:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>&gt; jx env</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"jenkins-x-core-applications\"><a class=\"anchor\" href=\"#jenkins-x-core-applications\"></a>Jenkins X core applications</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In the \"dev\" environment we have installed a number of core applications we believe are required at a minimum\nto start folks off with CI/CD on Kubernetes. We can easily add to these core apps using Jenkins X addons but\nfor now lets focus on the core apps. Jenkins X comes with configuration that wires these services together,\nmeaning everything works together straight away. This dramatically reduces the time to get started with Kubernetes\nas all the passwords, environment variables and config files are all setup up to work with each other.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><strong>Jenkins</strong> — provides both CI and CD automation. There is an effort to decompose Jenkins over time to\nbecome more cloud native and make use of Kubernetes concepts around CRDs, storage and scaling for example.</p>\n</li>\n<li>\n<p><strong>Nexus</strong> — acts as a dependency cache for Nodejs and Java applications to dramatically improve build\ntimes. After an initial build of a SpringBoot application the build time is reduced from 12 mins to 4. We\nhave not yet but intend to demonstrate swapping this with Artifactory soon.</p>\n</li>\n<li>\n<p><strong>Docker Registry</strong> — an in cluster docker registry where our pipelines push application images, we will\nsoon switch to using native cloud provider registries such as Google Container Registry, Azure Container\nRegistry or Amazon Elastic Container Registry (ECR) for example.</p>\n</li>\n<li>\n<p><strong>Chartmuseum</strong> — a registry for publishing Helm charts</p>\n</li>\n<li>\n<p><strong>Monocular</strong> — a UI used for discovering and running Helm charts</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"helm\"><a class=\"anchor\" href=\"#helm\"></a>Helm</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We learned a lot in our early days with fabric8 on Kubernetes and there were some projects from the ecosystem\nthat either weren’t around or (at the time) didn’t work with OpenShift, therefore we were restricted when\nmaking some design decisions. A couple of years on and now with Jenkins X we were able to look at other OSS\nprojects that have been flourishing, so I was very happy to start looking at <a href=\"https://helm.sh/\">Helm</a>.\nHelm is a package manager for Kubernetes and allows easy installation and upgrades of applications.</p>\n</div>\n<div class=\"paragraph\">\n<p>It was pretty clear that for Jenkins to evolve and include deployments to the cloud we should embrace Helm\nand provide an opinionated experience that helps teams and developers. The core applications mentioned above\nmeans Jenkins X provides an out of the box integrated CI/CD solution for Helm.</p>\n</div>\n<div class=\"paragraph\">\n<p>We know that helm has limitations but with the work on\n<a href=\"https://github.com/kubernetes-helm/community/blob/master/helm-v3/000-helm-v3.md\">Helm 3</a>, the focus of the Kubernetes\nsig-apps group, the Kubernetes community and investment we see from key organisations such as Microsoft, we feel Helm\nis currently the best way to install and upgrade applications on Kubernetes.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"gitops\"><a class=\"anchor\" href=\"#gitops\"></a>GitOps</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We mentioned earlier that we setup three environments by default. What this means is for the staging and production\nenvironments we created:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Kubernetes namespace</p>\n</li>\n<li>\n<p>An environment resource (<a href=\"https://kubernetes.io/docs/concepts/api-extension/custom-resources/\">CustomResourceDefinition</a>)\nin the dev environment which includes details of how applications are promoted to it and includes various team\nsettings.</p>\n</li>\n<li>\n<p>A git repository that we store what applications and their versions should be present in that environment.\nThese are stored in a Helm requirements.yaml file</p>\n</li>\n<li>\n<p>A Jenkins Pipeline job: explained in more detail below</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"cicd-for-environments\"><a class=\"anchor\" href=\"#cicd-for-environments\"></a>CI/CD for Environments</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Having a Jenkins Pipeline Job for each environment means that Pull Requests to the git repo trigger a CI\njob.  For now that job performs basic validation but in the future will include ‘gates’ to ensure a change to that\nenvironment has passed expected checks such as QA tasks, gain enough approvals from the correct people, etc -\n<strong>YES</strong> CI for environments!</p>\n</div>\n<div class=\"paragraph\">\n<p>Once CI checks have passed the new application or version change can be merged. Only users that have karma\ncan merge the Pull Request and therefore we get RBAC plus traceability for our environment deployments.</p>\n</div>\n<div class=\"paragraph\">\n<p>This means every application manifest, their version and configuration including storage requirements, resource\nneeds and secrets for your environments are stored in Git repositories. Given a disaster recovery scenario this\nis exactly what you want.</p>\n</div>\n<div class=\"paragraph\">\n<p>Did I just say secrets in Git? Yes! We will be providing a nicer experience to helps folks get set up but we\nourselves encrypt our secrets and  store them in Git, then decrypt them when we come to install and upgrade.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here’s our Git repo <a href=\"https://github.com/jenkins-x/cloud-environments/blob/a1edcc6/env-jx-infra/secrets.yaml\" class=\"bare\">https://github.com/jenkins-x/cloud-environments/blob/a1edcc6/env-jx-infra/secrets.yaml</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>We do all this with the help of a Helm wrapper called <a href=\"https://github.com/futuresimple/helm-secrets\">helm secrets</a>.\nI&#8217;m working on a followup blog post with examples, better explanations and how to guides + add better integration\nwith JX in the coming weeks.</p>\n</div>\n<hr>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"fancy-getting-involved\"><a class=\"anchor\" href=\"#fancy-getting-involved\"></a>Fancy getting involved?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We mainly hangout in the <a href=\"https://jenkins-x.io/community/\">jenkins-x Kubernetes slack channels</a> and for tips on\nbeing more involved with Jenkins X take a look at our <a href=\"https://jenkins-x.io/contribute\">contributing docs</a></p>\n</div>\n<div class=\"paragraph\">\n<p>If you’ve not already seen it here’s a video showing the create cluster explained in this blog.</p>\n</div>\n<div class=\"videoblock\">\n<div class=\"content\">\n<iframe src=\"https://www.youtube.com/embed/r8-J9Qg-p9U?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n</div>\n</div>","id":"5bccde5f-c4ec-5989-8dc2-3f6097a019eb","title":"Jenkins X Explained Part 1 - an integrated CI/CD solution for Kubernetes","date":"2018-04-16T00:00:00.000Z","slug":"/blog/2018/04/16/jenkins-x-explained-part1/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8e8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg","srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/77b35/jrawlings.jpg 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/d4a57/jrawlings.jpg 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/68974/jrawlings.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/ef6ff/jrawlings.webp 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/8257c/jrawlings.webp 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/6766a/jrawlings.webp 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/22bfc/jrawlings.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rawlingsj","html":"<div class=\"paragraph\">\n<p>James has a passion for continuous delivery and software automation in general.  Continually looking at\nways to help improve developers experience for the cloud.  James works on the OSS project <a href=\"https://jenkins-x.io/\">Jenkins X</a></p>\n</div>","id":"jrawlings","irc":null,"linkedin":null,"name":"James Rawlings","slug":"/blog/author/jrawlings","twitter":"jdrawlings"}]}},"pageContext":{"next":"/blog/2018/04/18/blueocean-1-5-0/","previous":"/blog/2018/04/13/jenkins-x-23-days-later/","id":"5bccde5f-c4ec-5989-8dc2-3f6097a019eb"}},
    "staticQueryHashes": ["1271460761","3649515864"]}