{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/10/16/custom-war-packager/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>I would like to introduce <a href=\"https://github.com/jenkinsci/custom-war-packager\">Custom WAR Packager</a> -\na new tool for Jenkins administrators and developers.\nThis tool allows packaging custom Jenkins distributions as WAR files,\n<a href=\"https://github.com/jenkinsci/docker\">Docker images</a>\nand <a href=\"https://github.com/jenkinsci/jenkinsfile-runner\">Jenkinsfile Runner</a> bundles.\nThis tool allows packaging Jenkins, plugins, and configurations in a ready-to-fly distribution.\nCustom WAR packager is a part of the Ephemeral Jenkins controller toolchain\nwhich we presented in our <a href=\"/blog/2018/09/12/speaker-blog-a-cloud-native-jenkins/\">A Cloud Native Jenkins</a> blogpost.\nThis toolchain is already used in <a href=\"https://jenkins-x.io\">Jenkins X</a> to package <a href=\"https://github.com/jenkins-x/jenkins-x-serverless\">serverless images</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this blogpost I will show some common use-cases for Custom WAR Packager.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"history\"><a class=\"anchor\" href=\"#history\"></a>History</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>As with Jenkins itself, Custom WAR Packager started as a small development tool.\nFor a long time it was a problem to run integration testing in Jenkins.\nWe have 3 main frameworks for it:\n    <a href=\"https://github.com/jenkinsci/jenkins-test-harness\">Jenkins Test Harness</a>,\n    <a href=\"https://github.com/jenkinsci/acceptance-test-harness\">Acceptance Test Harness</a>,\n    and <a href=\"https://github.com/jenkinsci/plugin-compat-tester\">Plugin Compatibility Tester</a>.\nAll these frameworks require a Jenkins WAR file to be passed to them to run tests.\nWhat if you want to run Jenkins tests in a custom environment like AWS?\nOr what if you want to reuse existing Jenkins Pipeline tests and to run them against\n<a href=\"/sigs/cloud-native/pluggable-storage/\">Pluggable Storage</a> to ensure there are no regressions?</p>\n</div>\n<div class=\"paragraph\">\n<p>And it was not just an idle question.\nThere were major activities happening in the Jenkins project: Cloud-Native Jenkins, Jenkins Evergreen, and Jenkins X.\nAll these activities required a lot of integration testing  to enable Continuous Delivery flows.\nIn order to do this in existing test frameworks, we needed to package a self-configuring WAR file so that it would be possible to run integration tests in existing frameworks.\nThat is why Custom WAR Packager was created in April 2018.\nLater it got support for packaging Docker images,\nand in September 2018 it also got support for Jenkinsfile Runner\nwhich was created by <a href=\"https://github.com/kohsuke/\">Kohsuke Kawaguchi</a>\nand then improved by <a href=\"https://github.com/ndeloof\">Nicolas de Loof</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"whats-inside\"><a class=\"anchor\" href=\"#whats-inside\"></a>What&#8217;s inside?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Custom WAR packager is a tool which is available as CLI Executable, Maven Plugin, or Docker package.\nThis tool takes input definitions and packages them as requested by the user.\nEverything is managed by a YAML configuration file:</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-10-16-cwp/cwp_flow.png\" alt=\"Custom WAR Packager build flow\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The tool supports various types of inputs.\nThe list of plugins can be passed via YAML itself, <code>pom.xml</code>, or a BOM file from jep:309[].\nCustom WAR Packager supports not only released versions,\nbut also builds deployed to the <a href=\"/blog/2018/05/15/incremental-deployment/\">Incremental repository</a> (CD flow for Jenkins core and plugins - jep:305[]) and\neven direct builds by Git or directory path specifications.\nIt allows building packages from any source, without waiting for official releases.\nThe builds are also pretty fast, because the plugin does caching in the local Maven repository by using commit IDs.</p>\n</div>\n<div class=\"paragraph\">\n<p>Custom WAR packager also supports the following self-configuration options:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>YAML files for <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Jenkins Configuration as Code</a></p>\n</li>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Groovy+Hook+Script\">Groovy Hooks</a> (e.g. init hooks for pre-configuration)</p>\n</li>\n<li>\n<p>System properties</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"war-packaging\"><a class=\"anchor\" href=\"#war-packaging\"></a>WAR Packaging</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>WAR packaging happens by default every time the repo is built.\nGenerally Custom WAR Packager repackages all inputs into a single WAR file by following conventions defined in the Jenkins core and the JCasC plugin.</p>\n</div>\n<div class=\"paragraph\">\n<p>Sample configuration:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-yaml\" data-lang=\"yaml\">bundle:\n  groupId: \"io.jenkins.tools.war-packager.demo\"\n  artifactId: \"blogpost-demo\"\n  vendor: \"Jenkins project\"\n  description: \"Just a demo for the blogpost\"\nwar:\n  groupId: \"org.jenkins-ci.main\"\n  artifactId: \"jenkins-war\"\n  source:\n    version: 2.138.2\nplugins:\n  - groupId: \"io.jenkins\"\n    artifactId: \"configuration-as-code\"\n    source:\n      # Common release\n      version: 1.0-rc2\n  - groupId: \"io.jenkins\"\n    artifactId: \"artifact-manager-s3\"\n    source:\n      # Incrementals\n      version: 1.2-rc259.c9d60bf2f88c\n  - groupId: \"org.jenkins-ci.plugins.workflow\"\n    artifactId: \"workflow-job\"\n    source:\n      # Git\n      git: https://github.com/jglick/workflow-job-plugin.git\n      commit: 18d78f305a4526af9cdf3a7b68eb9caf97c7cfbc\n  # etc.\nsystemProperties:\n    jenkins.model.Jenkins.slaveAgentPort: \"9000\"\n    jenkins.model.Jenkins.slaveAgentPortEnforce: \"true\"\ngroovyHooks:\n  - type: \"init\"\n    id: \"initScripts\"\n    source:\n      dir: src/main/groovy\ncasc:\n  - id: \"jcasc\"\n    source:\n      dir: casc.yml</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"docker-packaging\"><a class=\"anchor\" href=\"#docker-packaging\"></a>Docker packaging</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In order to do the Docker packaging, Custom WAR Packager uses the official\n<a href=\"https://hub.docker.com/r/jenkins/jenkins/\">jenkins/jenkins</a>\nDocker images or other images using the same format.\nDuring the build the WAR file just gets replaced by the one built by the tool.\nIt means that <strong>ALL</strong> image features are available for such custom builds: <code>plugins.txt</code>, Java options, Groovy hooks, etc., etc.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-yaml\" data-lang=\"yaml\">## ...\n## WAR configuration from above\n## ...\n\nbuildSettings:\n  docker:\n    build: true\n    # Base image\n    base: \"jenkins/jenkins:2.138.2\"\n    # Tag to set for the produced image\n    tag: \"jenkins/custom-war-packager-casc-demo\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For example, <a href=\"https://github.com/jenkinsci/custom-war-packager/tree/master/demo/external-logging-elasticsearch\">this demo</a>\nshows packaging of a Docker image with External Build Logging to Elasticsearch.\nAlthough the implementations have been improved as a part of jep:207[] and jep:210[],\nyou can check out this demo to see how the Docker image does self-configuration, connects to a Elasicsearch, and then starts externally storing logs without changes in build log UIs.\nA Docker Compose file for running the entire cluster is included.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"jenkinsfile-runner-packaging\"><a class=\"anchor\" href=\"#jenkinsfile-runner-packaging\"></a>Jenkinsfile Runner packaging</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This is probably the most tricky mode of Jenkinsfile Runner.\nIn March a new <a href=\"https://github.com/jenkinsci/jenkinsfile-runner\">Jenkinsfile Runner</a> project\n<a href=\"https://groups.google.com/d/msg/jenkinsci-dev/gjz3CDhi-kk/1mwi_oa0AQAJ\">was announced</a> in the developer mailing list.\nThe main idea is to support running Jenkins Pipeline in a single-shot controller mode when the instance just executes a single run and prints outputs to the console.\nJenkinsfile Runner runs as CLI or as a Docker image.\nCustom WAR Packager is able to produce both, though only Docker run mode is recommended.\nWith Jenkinsfile Runner you can run Pipelines simply as&#8230;&#8203;</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-sh\" data-lang=\"sh\">docker run --rm -v $PWD/Jenkinsfile:/workspace/Jenkinsfile acmeorg/jenkinsfile-runner</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When we started working on Ephemeral (aka \"single-shot\") controllers in the Cloud Native SIG,\nthere was an idea to use Custom WAR Packager and other existing tools (Jenkinsfile Runner, Jenkins Configuration as Code, etc.) to implement it.\nIt would be possible to just replace Jenkins core JAR and add plugins to Jenkinsfile Runner, but it is not enough.\nTo be efficient, Jenkinsfile Runner images should start up <strong>FAST</strong>, really fast.\nIn the build flow implementation we used some experimental options available in Jenkins and Jenkinsfile Runner, including classloader precaching, plugin unarchiving, etc, etc.\nWith such patches Jenkins starts up in few seconds with configuration-as-code and dozens of bundled plugins.</p>\n</div>\n<div class=\"paragraph\">\n<p>So, how to build custom Jenkinsfile Runner images?\nAlthough there is no release so far, it is not something which can stop us as you see above.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-yaml\" data-lang=\"yaml\">##...\n## WAR Configuration from above\n##...\n\nbuildSettings:\n  jenkinsfileRunner:\n    source:\n      groupId: \"io.jenkins\"\n      artifactId: \"jenkinsfile-runner\"\n      build:\n        noCache: true\n      source:\n        git: https://github.com/jenkinsci/jenkinsfile-runner.git\n        commit: 8ff9b1e9a097e629c5fbffca9a3d69750097ecc4\n    docker:\n      base: \"jenkins/jenkins:2.138.2\"\n      tag: \"onenashev/cwp-jenkinsfile-runner-demo\"\n      build: true</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can find a Demo of Jenkinsfile Runner packaging with Custom WAR Packager\n<a href=\"https://github.com/jenkinsci/custom-war-packager/tree/master/demo/jenkinsfile-runner\">here</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"more-info\"><a class=\"anchor\" href=\"#more-info\"></a>More info</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are many other features which are not described in this blogpost.\nFor example, it is possible to alter Maven build settings or to add/replace libraries within the Jenkins core (e.g. Remoting).\nPlease see the <a href=\"https://github.com/jenkinsci/custom-war-packager/blob/master/README.md\">Custom WAR Packager documentation</a> for more information.\nThere are a number of demos available in the repository.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are interested to contribute to the repository,\nplease create pull requests and CC <a href=\"https://github.com/oleg-nenashev/\">@oleg-nenashev</a>\nand <a href=\"https://github.com/raul-arabaolaza\">Raul Arabaolaza</a> who is the second maintainer now working on Jenkins test automation flows.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"whats-next\"><a class=\"anchor\" href=\"#whats-next\"></a>What&#8217;s next?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are still many improvements that could be made to the tool to make it more efficient:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Add upper bounds checks for transitive plugin dependencies so that the conflicts are discovered during the build</p>\n</li>\n<li>\n<p>Allow passing all kinds of system properties and Java options via configuration YAML</p>\n</li>\n<li>\n<p>Improve Jenkinsfile Runner to improve performance</p>\n</li>\n<li>\n<p>Integrate the tool into Jenkins Integration test flows\n(see <a href=\"https://github.com/jenkins-infra/pipeline-library/blob/master/vars/essentialsTest.groovy\">essentialsTest()</a>\n in the Jenkins Pipeline library)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Many other tasks could be implemented in Custom WAR Packager,\nbut even now it is available to all Jenkins users so that they can build their own Jenkins bundles with it.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"want-to-know-more\"><a class=\"anchor\" href=\"#want-to-know-more\"></a>Want to know more?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are going to <a href=\"https://www.cloudbees.com/devops-world/nice\">DevOps World - Jenkins World in Nice</a> on Oct 22-25,\nI will be presenting Custom WAR Packager at the Community Booth during the lunch demo sessions.\nWe will be also repeating our <a href=\"https://sched.co/FIox\">A Cloud Native Jenkins</a> talk together with Carlos Sanchez where we will show how Ephemeral Jenkins works with Pluggable Storage.\nJenkins X team is also going to present their project using Custom WAR Packager.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Come meet Oleg and other Cloud Native SIG members at\n<a href=\"https://www.cloudbees.com/devops-world/nice\">DevOps World - Jenkins World</a> on October 22-25 in Nice.\nregister with the code <code>JWFOSS</code> for a 30% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>","id":"2abe9d0a-5a91-57f9-b708-13a0a890774b","title":"Build your own Jenkins! Introducing Custom WAR/Docker Packager","date":"2018-10-16T00:00:00.000Z","slug":"/blog/2018/10/16/custom-war-packager/","links":{"discourse":""},"authors":[]}},"pageContext":{"next":"/blog/2018/10/18/contributor-summit-summary/","previous":"/blog/2018/10/14/gsoc2018-results/","id":"2abe9d0a-5a91-57f9-b708-13a0a890774b"}},
    "staticQueryHashes": ["1271460761","3649515864"]}