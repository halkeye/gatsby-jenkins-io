{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/08/17/code-coverage-api-plugin-1.0-release/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>I am happy to announce availability of Code Coverage API. These plugins have been recently released as 1.0, and they are now available in the Jenkins Update Center. In this blogpost I will introduce the features and project structure of Code Coverage API plugin.</p>\n</div>\n<div class=\"paragraph\">\n<p>My name is Shenyu Zheng, and I am an undergraduate student in Computer Science and Technology at Henan University from China.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"overview\"><a class=\"anchor\" href=\"#overview\"></a>Overview</h3>\n<div class=\"paragraph\">\n<p>Code Coverage API plugin is one of <a href=\"https://jenkins.io/projects/gsoc/\">GSoC 2018 Jenkins projects</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>There are a lot of plugins which currently implement code coverage; however, they all use similar config, charts, and content. So it would be much better if we could have an API plugin which does the most repeated work for those plugins and offers a unified API which can be consumed by other plugins and external tools.</p>\n</div>\n<div class=\"paragraph\">\n<p>My mentors are <a href=\"https://github.com/christ66\">Steven Christou</a>, <a href=\"https://github.com/Supun94\">Supun Wanniarachchi</a>, <a href=\"https://github.com/jeffpearce\">Jeff Pearce</a> and <a href=\"https://github.com/oleg-nenashev\">Oleg Nenashev</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"supported-coverage-formats\"><a class=\"anchor\" href=\"#supported-coverage-formats\"></a>Supported Coverage Formats</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Embedded</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>JaCoCo</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>Other plugins as an Extension of Code Coverage API plugin</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Cobertura (<a href=\"https://github.com/jenkinsci/cobertura-plugin\">Cobertura Plugin</a>)</p>\n</li>\n<li>\n<p>llvm-cov (<a href=\"https://github.com/jenkinsci/llvm-cov-plugin\">llvm-cov Plugin</a>)</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"features\"><a class=\"anchor\" href=\"#features\"></a>Features</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Modernized coverage chart</p>\n</li>\n<li>\n<p>Coverage trend</p>\n</li>\n<li>\n<p>Source code navigation</p>\n</li>\n<li>\n<p>Parallel pipeline support</p>\n</li>\n<li>\n<p>Reports combining</p>\n</li>\n<li>\n<p>REST API</p>\n</li>\n<li>\n<p>Failed conditions and flexible threshold setting</p>\n</li>\n<li>\n<p>Other small features</p>\n</li>\n</ul>\n</div>\n<div class=\"sect3\">\n<h4 id=\"modernized-coverage-chart\"><a class=\"anchor\" href=\"#modernized-coverage-chart\"></a>Modernized Coverage Chart</h4>\n<div class=\"paragraph\">\n<p>In the summary chart we can see the coverage summary of current coverage metric.\n<span class=\"image center\"><img src=\"/images/post-images/2018-06-13-code-coverage-api-plugin/summary-chart.gif\" alt=\"summary chart\" title=\"Summary Chart\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>In the child summary chart, we can see the coverage summary of each child, also, we can use the range handler to filter item we want to see to reduce the chart size. If we want to see coverage details of the child, we can click the child name to see more information.\n<span class=\"image center\"><img src=\"/images/post-images/2018-06-13-code-coverage-api-plugin/child-summary-chart.gif\" alt=\"child summary chart\" title=\"Child Summary Chart\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"coverage-trend\"><a class=\"anchor\" href=\"#coverage-trend\"></a>Coverage Trend</h3>\n<div class=\"paragraph\">\n<p>We also support coverage trend to show coverage metrics changing between builds.\n<span class=\"image center\"><img src=\"/images/post-images/2018-06-13-code-coverage-api-plugin/trend-chart.gif\" alt=\"trend chart\" title=\"Trend Chart\"></span></p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"source-code-navigation\"><a class=\"anchor\" href=\"#source-code-navigation\"></a>Source Code Navigation</h4>\n<div class=\"paragraph\">\n<p>You can enable source code navigation by specifying Source File Storing Level to save last build source files (enable source files navigation in current and last build) or save all build source files (enable source files navigation in all builds).\n<span class=\"image center\"><img src=\"/images/post-images/code-coverage-api/source-files-config.png\" alt=\"source files config\" title=\"Source File Navigation Configuration\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>You can see source file with coverage information on File level coverage page.\n<span class=\"image center\"><img src=\"/images/post-images/code-coverage-api/source-files-result.png\" alt=\"source files result\" title=\"Source File Navigation Result\"></span></p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"parallel-pipeline-support\"><a class=\"anchor\" href=\"#parallel-pipeline-support\"></a>Parallel Pipeline Support</h4>\n<div class=\"paragraph\">\n<p>We support parallel pipeline. You can call the Code Coverage API plugin in different branches like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    parallel firstBranch: {\n        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')]\n}, secondBranch: {\n        publishCoverage adapters: [jacocoAdapter('jacoco.xml')]\n    }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"reports-combining\"><a class=\"anchor\" href=\"#reports-combining\"></a>Reports Combining</h4>\n<div class=\"paragraph\">\n<p>You can add tag on <code>publishCoverage</code> and Code Coverage API plugin will combine reports have same tag</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">node {\n    parallel firstBranch: {\n        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], tag: ‘t’\n}, secondBranch: {\n        publishCoverage adapters: [jacocoAdapter('jacoco.xml')], tag: ‘t’\n    }\n}</pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"rest-api\"><a class=\"anchor\" href=\"#rest-api\"></a>REST API</h4>\n<div class=\"paragraph\">\n<p>We provide a REST API to retrieve coverage data:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Coverage result: <code>&#8230;&#8203;/{buildNumber}/coverage/&#8230;&#8203;/result/api/\\{json|xml\\}</code></p>\n</li>\n<li>\n<p>Trend result: <code>&#8230;&#8203;/{buildNumber}/coverage/&#8230;&#8203;/trend/api/\\{json|xml\\}</code></p>\n</li>\n<li>\n<p>Coverage result of last build: <code>&#8230;&#8203;/{buildNumber}/coverage/&#8230;&#8203;/last/result/api/\\{json|xml\\}</code></p>\n</li>\n<li>\n<p>Trend result of last build: <code>&#8230;&#8203;/{buildNumber}/coverage/&#8230;&#8203;/last/trend/api/\\{json|xml\\}</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"failed-conditions-and-flexible-threshold-setting\"><a class=\"anchor\" href=\"#failed-conditions-and-flexible-threshold-setting\"></a>Failed Conditions and Flexible Threshold Setting</h4>\n<div class=\"paragraph\">\n<p>You can set different failed conditions and threholds to control build result.\n<span class=\"image center\"><img src=\"/images/post-images/code-coverage-api/thresholds-config.png\" alt=\"thresholds config\" title=\"Thresholds Configuration\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>If the thresholds satisfy the failed conditions, it will fail the build.\n<span class=\"image center\"><img src=\"/images/post-images/code-coverage-api/thresholds-result.png\" alt=\"thresholds result\" title=\"Thresholds Result\"></span></p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"other-small-features\"><a class=\"anchor\" href=\"#other-small-features\"></a>Other Small Features</h4>\n<div class=\"paragraph\">\n<p>We also have other small features like auto detecting reports, coverage filters, etc. You can find more information about these features in the plugin documentation.</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"architecture\"><a class=\"anchor\" href=\"#architecture\"></a>Architecture</h3>\n<div class=\"paragraph\">\n<p>This API plugin will mainly do these things:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Find coverage reports according to the user’s config.</p>\n</li>\n<li>\n<p>Use adapters to convert reports into the our standard format.</p>\n</li>\n<li>\n<p>Parse standard format reports, and aggregate them.</p>\n</li>\n<li>\n<p>Show parsed result in a chart.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>So, we can implement code coverage publishing by simply writing an adapter, and such adapter only needs to do one thing - convert a coverage report into the standard format. The implementation is based on extension points, so new adapters can be created in separate plugins. In order to simplify conversion for XML reports, there is also an abstraction layer which allows creating XSLT-based converters.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>The below diagram show the architecture of Code Coverage API plugin</strong></p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/code-coverage-api/architecture.png\" alt=\"architecture\" title=\"Code Coverage API Plugin Architecture\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"implementing-a-new-coverage-plugin\"><a class=\"anchor\" href=\"#implementing-a-new-coverage-plugin\"></a>Implementing a New Coverage Plugin</h3>\n<div class=\"paragraph\">\n<p>We can implement a coverage plugin by implementing CoverageReportAdapter extension point. For example, by using the provided abstract layer, we can implement JaCoCo simple like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-java\" data-lang=\"java\">public final class JacocoReportAdapter extends JavaXMLCoverageReportAdapter {\n\n    @DataBoundConstructor\n    public JacocoReportAdapter(String path) {\n        super(path);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getXSL() {\n        return \"jacoco-to-standard.xsl\";\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getXSD() {\n        return null;\n    }\n\n    @Symbol(\"jacoco\")\n    @Extension\n    public static final class JacocoReportAdapterDescriptor extends JavaCoverageReportAdapterDescriptor {\n\n        public JacocoReportAdapterDescriptor() {\n            super(JacocoReportAdapter.class);\n        }\n\n        @NonNull\n        @Override\n        public String getDisplayName() {\n            return Messages.JacocoReportAdapter_displayName();\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>All we need is to extend an abstract layer for XML-based Java report and provide an XSL file to convert the report to our standard format. There are also other extension points which are under development.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want implement a new coverage format that we did not provide abstract layer, you need to register `CoverageElement`s and implement an simple parser. See <a href=\"https://github.com/jenkinsci/llvm-cov-plugin\">llvm-cov Plugin</a> to get more details.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"future-tasks\"><a class=\"anchor\" href=\"#future-tasks\"></a>Future Tasks</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Support more coverage tools (<a href=\"https://issues.jenkins.io/browse/JENKINS-52467\">JENKINS-52467</a>, <a href=\"https://issues.jenkins.io/browse/JENKINS-52469\">JENKINS-52469</a> and etc.)</p>\n</li>\n<li>\n<p>Make the UI extensible (<a href=\"https://issues.jenkins.io/browse/JENKINS-51738\">JENKINS-51738</a>)</p>\n</li>\n<li>\n<p>Improve performance (<a href=\"https://issues.jenkins.io/browse/JENKINS-52982\">JENKINS-52982</a>)</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"phase-3-presentation-slides\"><a class=\"anchor\" href=\"#phase-3-presentation-slides\"></a>Phase 3 Presentation Slides</h3>\n<center>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vThjuFZCChtXhHOKINDxuC4Sfbv0JtHDN9GqWZFe7DfmbEOPZOk-t8DYZJSDEMeMWFpLeTqOAZgj0pB/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"720\" height=\"434\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n</center>\n</div>\n<div class=\"sect2\">\n<h3 id=\"phase-3-presentation-video\"><a class=\"anchor\" href=\"#phase-3-presentation-video\"></a>Phase 3 Presentation Video</h3>\n<center>\n  <iframe width=\"720\" height=\"434\" src=\"https://www.youtube.com/embed/GGEtN4nbtng\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n</center>\n</div>\n<div class=\"sect2\">\n<h3 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://gitter.im/jenkinsci/code-coverage-api-plugin\"><span class=\"image\"><img src=\"https://badges.gitter.im/jenkinsci/code-coverage-api-plugin.svg\" alt=\"title: &quot;Gitter&quot;\"></span></a></p>\n</li>\n<li>\n<p><a href=\"https://issues.jenkins.io/issues/?jql=project+%3D+JENKINS+AND+component+%3D+code-coverage-api-plugin\">JIRA Component</a></p>\n</li>\n<li>\n<p><a href=\"https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/\">Project Page</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkinsci/code-coverage-api-plugin\">Project Repository</a></p>\n</li>\n</ul>\n</div>\n</div>","id":"e4121dfc-f5a5-57b7-b1e0-733189f8140a","title":"Code Coverage API plugin: 1.0 Release","date":"2018-08-17T00:00:00.000Z","slug":"/blog/2018/08/17/code-coverage-api-plugin-1.0-release/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"cizezsy","html":"<div class=\"paragraph\">\n<p>Shenyu comes from China. He is a third year student now, and his major is\nComputer Science and technology. He has participated in GSoC 2018 for\n<a href=\"https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/\">Code Coverage API Plugin</a></p>\n</div>","id":"shenyu_zheng","irc":"cizezsy","linkedin":null,"name":"Shenyu Zheng","slug":"/blog/authors/shenyu_zheng","twitter":null}]}},"pageContext":{"next":"/blog/2018/08/17/speaker-blog-brent-laster/","previous":"/blog/2018/08/16/dwjw-2018-is-almost-here/","id":"e4121dfc-f5a5-57b7-b1e0-733189f8140a"}},
    "staticQueryHashes": ["1271460761","3649515864"]}