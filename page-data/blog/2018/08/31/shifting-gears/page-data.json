{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/08/31/shifting-gears/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>Kohsuke here. This is a message for my fellow Jenkins developers.</p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins has been on an amazing run, but I believe we are trapped in a local optimum, and losing appeal to people who fall outside of our traditional sweet spot.\nWe need to take on new efforts to solve this. One is “cloud native Jenkins” that creates a flavor of Jenkins that runs well on Kubernetes.\nThe other is “gear shift”, where we take an evolutionary line from the current Jenkins 2, but with breaking changes in order to gain higher development speed.</p>\n</div>\n<div class=\"paragraph\">\n<p>I say it&#8217;s time we tackle these problems head on. I&#8217;ve been talking to various folks, and I think we need to take on two initiatives.\nOne is what I call \"Cloud Native Jenkins,\" and the other is to insert a jolt in Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Some of you have already seen the presentation I posted on the Jenkins YouTube channel.  In this post, I&#8217;ll expand on that with some additional details.</p>\n</div>\n<div class=\"videoblock\">\n<div class=\"title\">Jenkins: Shifting Gears Presentation (<a href=\"https://drive.google.com/open?id=160LjRKw42XXuXT2n4j8BLCzsSL5z2m2_\">Slides</a>)</div>\n<div class=\"content\">\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/CgasN3icZp0?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Come hear more in Kohsuke&#8217;s keynote at\n<a href=\"https://www.cloudbees.com/devops-world\">Jenkins World</a> on September 16-19th,\nregister with the code <code>JWFOSS</code> for a 30% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect1\">\n<h2 id=\"our-amazing-success\"><a class=\"anchor\" href=\"#our-amazing-success\"></a>Our Amazing Success</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Our project has been an amazing success over the past 10+ years, thanks to you all. What started as my hobby project became a huge community that boasts thousands of contributors and millions of users.\nWhen I think about what enabled this amazing journey, I can think of several magic sauces:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Extensible:</strong>\nthe ability to take the system, or a portion of the system, then build on top of it to achieve what you need, without anyone else’s permission.\nHere, I’m not talking about the specific technical mechanism of Guice, extension point, etc, but rather I’m talking more broadly about the governance, culture, distribution mechanism, and so on.</p>\n</li>\n<li>\n<p><strong>General purpose:</strong>\nAt the base level, Jenkins can be used for any kind of automation around the area of software development.\nThis matched the reality of the software engineering world well.\nCombined with extensibility, this general purpose system that is Jenkins can specialize into any domain, much like Linux and JetBrains IDEs.</p>\n</li>\n<li>\n<p><strong>Community:</strong>\nTogether we created a community where different people push envelopes in different directions and share the fruits with others.\nThis meant everyone can benefit from somebody else’s work, and great ideas and best practices spread more quickly.</p>\n</li>\n</ul>\n</div>\n<div class=\"imageblock right\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://www.cloudbees.com/devops-world\"><img src=\"/images/conferences/devops-world-2018.jpg\" alt=\"DevOps World | Jenkins World 2018\"></a>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"our-challenges\"><a class=\"anchor\" href=\"#our-challenges\"></a>Our Challenges</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The way we set up our community meant that collectively we were able to work toward solving certain kinds of problems locally and organically, such as Android application development, new UX, more expressive pipeline description language, &#8230;&#8203;</p>\n</div>\n<div class=\"paragraph\">\n<p>But at the same time, the incremental, autonomous nature of our community made us demonstrably unable to solve certain kinds of problems.\nAnd after 10+ years, these unsolved problems are getting more pronounced, and they are taking a toll — segments of users correctly feel that the community doesn’t get them, because we have shown an inability to address some of their greatest difficulties in using Jenkins.\nAnd I know some of those problems, such as service instability, matter to all of us.</p>\n</div>\n<div class=\"paragraph\">\n<p>In a way, we are stuck in a local optimum, and that is a dangerous place to be when there is growing competition from all sides.\nSo we must solve these problems to ensure our continued relevance and popularity in the space.</p>\n</div>\n<div class=\"paragraph\">\n<p>Solving those problems starts with correctly understanding them, so let’s look at those.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"service-instability\"><a class=\"anchor\" href=\"#service-instability\"></a>Service Instability</h3>\n<div class=\"paragraph\">\n<p>CI/CD service was once a novelty and a nice-to-have.\nToday, it is very much a mission critical service, in no small part because of us!\nIncreasingly, people are running bigger and bigger workloads, loading up more and more plugins, and expect higher and higher availability.</p>\n</div>\n<div class=\"paragraph\">\n<p>Admins today are unable to meet that heightened expectation using Jenkins easily enough.\nA Jenkins instance, especially a large one, requires too much overhead just to keep it running.\nIt’s not unheard of that somebody restarts Jenkins every day.</p>\n</div>\n<div class=\"paragraph\">\n<p>Admins expect errors to be contained and not impact the entire service.\nThey expect Jenkins to defend itself better from issues such as pipeline execution problems, run-away processes, over resource consumption so that they don’t have to constantly babysit the service.</p>\n</div>\n<div class=\"paragraph\">\n<p>Every restart implies degraded service for the software delivery teams where they have to wait longer for their builds to start or complete.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"brittle-configuration\"><a class=\"anchor\" href=\"#brittle-configuration\"></a>Brittle Configuration</h3>\n<div class=\"paragraph\">\n<p>Every Jenkins admin must have been burnt at least once in the past by making changes that have caused unintended side effects.\nBy “changes,” I’m talking about installing/upgrading plugins, tweaking job settings, etc.</p>\n</div>\n<div class=\"paragraph\">\n<p>As a result, too many admins today aren’t confident that they can make changes safely.\nThey fear that their changes might cause issues for their software delivery teams, that those teams will notice regressions before they do, and that they may not be able to back out somes changes easily.\nIt feels like touching a Jenga tower for them, even when a change is small.</p>\n</div>\n<div class=\"paragraph\">\n<p>Upgrading Jenkins and plugins is an important sub case of this, where admins often do not have understanding of the impact.\nThis decreases the willingness to upgrade, which in turn makes it difficult for the project to move forward more rapidly, and instead we get trapped with the long tail of compatibility burden.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"assembly-required\"><a class=\"anchor\" href=\"#assembly-required\"></a>Assembly Required</h3>\n<div class=\"paragraph\">\n<p>I’ve often described Jenkins as a bucket full of LEGO blocks — you can build any car you want, but everyone first has to assemble their own car in order to drive one.</p>\n</div>\n<div class=\"paragraph\">\n<p>As CI/CD has gone mainstream, this is no longer OK.\nPeople want something that works out of the box, something that gets people to productivity within 5 clicks in 5 minutes.\nToo many choices are confusing users, and we are not helping them toward “the lit path.”\nEveryone feels uncertain if they are doing the right thing, contributors are spread thin, and the whole thing feels a bit like a Frankenstein.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is yet another problem we can’t solve by “writing more plugins.”</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"reduced-development-velocity\"><a class=\"anchor\" href=\"#reduced-development-velocity\"></a>Reduced Development Velocity</h3>\n<div class=\"paragraph\">\n<p>This one is a little different from others that our users face, but nonetheless a very important one, because it impacts our ability to expand and sustain the developer community, and influences how fast we can solve challenges that our users face.</p>\n</div>\n<div class=\"paragraph\">\n<p>Some of these problems are not structural and rather just a matter of doing it (for example, Java 11 upgrade), but there are some problems here that are structural.</p>\n</div>\n<div class=\"paragraph\">\n<p>I think the following ones are the key ones:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>As a contributor, a change that spans across multiple plugins is difficult.\nTooling gets in the way, users might not always upgrade a group of changes together, reviewing changes is hard.</p>\n</li>\n<li>\n<p>As a contributor, the tests that we have do not give me enough confidence to ship code.\nNot enough of them run automatically, coverage is shallow, and there just isn’t anything like production workload of real users/customers.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>These core problems create other downstream problems, for example:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>As a non-regular contributor, what I think of as a small and reasonable change takes forever and a 100 comments going back &amp; forth to get in. I get discouraged from ever doing it again.</p>\n</li>\n<li>\n<p>As a regular contributor, I feel people are throwing crap over the wall, and if they cause problems after a release, I’m on the hook to clean up that mess.</p>\n</li>\n<li>\n<p>As a user, I get a half-baked change that wreaks havoc, which results in loss of their confidence to Jenkins, an even slower pace of change, etc. This is a vicious cycle as it makes us even more conservative, and slow down the development velocity.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"path-forward\"><a class=\"anchor\" href=\"#path-forward\"></a>Path Forward</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In the past, my frustration and regret is that we couldn’t take on an effort of this magnitude.\nBut that is NO MORE!\nAs CTO of CloudBees, I’m excited that these challenges are important enough for CloudBees now that we want to solve these efforts within the Jenkins project.</p>\n</div>\n<div class=\"paragraph\">\n<p>I’ve been talking to many of you, and there are a number of existing efforts going on that touch this space already.\nFrom there, the vision emerged is that we organize around two key efforts:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Cloud Native Jenkins: a general purpose CI/CD engine that runs on Kubernetes, and embraces a fundamentally different architecture and extensibility mechanism.</p>\n</li>\n<li>\n<p>Jolt in Jenkins: continue the incremental trajectory of Jenkins 2 today, but with renegotiated “contract” with users to gain what we really need, such as faster pace of development and better stability.</p>\n</li>\n</ul>\n</div>\n<div class=\"sect2\">\n<h3 id=\"cloud-native-jenkins\"><a class=\"anchor\" href=\"#cloud-native-jenkins\"></a>Cloud Native Jenkins</h3>\n<div class=\"paragraph\">\n<p>In order to solve these problems that we can’t solve incrementally,\nI’m proposing the “Cloud Native Jenkins” sub-project in the context of the\n<a href=\"https://jenkins.io/sigs/cloud-native/\">Cloud Native SIG</a>\nwith Carlos, who is the leader of this SIG.</p>\n</div>\n<div class=\"paragraph\">\n<p>We don’t have all the answers, that’s something we’ll discuss and figure out collectively, but based on numerous conversations with various folks, I think there are many clear pieces of puzzles.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"kubernetes-as-the-runtime\"><a class=\"anchor\" href=\"#kubernetes-as-the-runtime\"></a>Kubernetes as the Runtime</h4>\n<div class=\"paragraph\">\n<p>Just like Java was the winning server application platform in the early 2000s, today, Kubernetes is the dominant, winning platform.\nCloud Native Jenkins should embrace the paradigm this new platform encourages. For example,</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Serverless / function-as-a-service build execution (ala\n<a href=\"https://groups.google.com/forum/#!topic/jenkinsci-dev/gjz3CDhi-kk\">Jenkinsfile runner</a>)\nthat are isolated.</p>\n</li>\n<li>\n<p>Various pieces of functionalities deployed as separate microservices.</p>\n</li>\n<li>\n<p>Services interacting through\n<a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\">Kubernetes CRDs</a>\nin order to promote better reuse and composability.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>These are the design principles that enable highly desirable properties like infinite scalability, pay-as-you-go cost model, immutability, zero down time operability, etc.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"new-extensibility-mechanism\"><a class=\"anchor\" href=\"#new-extensibility-mechanism\"></a>New Extensibility Mechanism</h4>\n<div class=\"paragraph\">\n<p>We need to introduce a new mechanism of extensibility in order to retain the magic sauces, and continue our incredible ecosystem.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, microservice or container-based extensibility avoids the service instability problem (ala\n<a href=\"https://github.com/knative/docs/blob/master/docs/build/builder-contract.md\">Knative builder</a>\nand the\n<a href=\"https://github.com/jglick/jk--\">userspace-scm</a> work.)\nPipeline shared libraries is another example that concretely shows how extensibility mechanism can go beyond plugin, though it hasn’t fully flourished as one just yet.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"data-on-cloud-managed-data-services\"><a class=\"anchor\" href=\"#data-on-cloud-managed-data-services\"></a>Data on Cloud Managed Data Services</h4>\n<div class=\"paragraph\">\n<p>The long-term data storage must be moved from the file system to data services backed by cloud managed services, in order to achieve high availability and horizontal scalability, without burdening admins with additional operational responsibilities.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"configuration-as-code\"><a class=\"anchor\" href=\"#configuration-as-code\"></a>Configuration as Code</h4>\n<div class=\"paragraph\">\n<p><a href=\"https://jenkins.io/projects/jcasc/\">Jenkins Configuration as Code</a>\nhas been incredibly well received, in part because it helps to solve some of the brittle configuration problems.\nIn Cloud Native Jenkins, JCasC must play a more central role, which in turn also helps us reduce the surface area for Blue Ocean to cover by eliminating many configuration screens.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"evergreen\"><a class=\"anchor\" href=\"#evergreen\"></a>Evergreen</h4>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/jenkinsci/jep/blob/master/jep/300/README.adoc\">Jenkins Evergreen</a>\nis another well received effort that’s already underway, which aims to solve the brittleness problem and developer velocity problem. This is a key piece of the puzzle that allows us to move faster without throwing users under the bus.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"secure-by-default-design\"><a class=\"anchor\" href=\"#secure-by-default-design\"></a>Secure by Default Design</h4>\n<div class=\"paragraph\">\n<p>Over the past years, we’ve learned that several different areas of Jenkins codebase, such as Remoting, are inherently prone to security vulnerabilities because of their design. Cloud Native Jenkins must address those problems by flipping those to “secure by design.”</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"following-footsteps-of-jenkins-x\"><a class=\"anchor\" href=\"#following-footsteps-of-jenkins-x\"></a>Following Footsteps of Jenkins X</h4>\n<div class=\"paragraph\">\n<p><a href=\"https://jenkins-x.io\">Jenkins X</a>\nhas been pioneering the use of Jenkins on Kubernetes for a while now, and it has been very well received, too.\nSo naturally, part of the aim of Cloud Native Jenkins is to grow and morph Jenkins into a shape that really works well for Jenkins X.\nCloud Native Jenkins will be the general purpose CI/CD engine that runs on Kubernetes, which Jenkins X uses to create an opinionated CD experience for developing cloud native apps.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"all-the-same-good-things-with-new-foundation\"><a class=\"anchor\" href=\"#all-the-same-good-things-with-new-foundation\"></a>All The Same Good Things, with New Foundation</h4>\n<div class=\"paragraph\">\n<p>And then on top of these foundations, we need to rebuild or transplant all the good things that people love about Jenkins today, and all the good things people expect, such as:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Great “batteries included” onboarding experience</strong>  for new users, where we are present in all the marketplaces, 5 clicks to get going and easy integration with key services.</p>\n</li>\n<li>\n<p><strong>Modern lovable UX</strong> in the direction of front-end web apps that Blue Ocean pioneered.</p>\n</li>\n<li>\n<p><strong>General purpose software</strong> that is useful for all sorts of software development.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"cloud-native-jenkins-mvp\"><a class=\"anchor\" href=\"#cloud-native-jenkins-mvp\"></a>Cloud Native Jenkins MVP</h4>\n<div class=\"paragraph\">\n<p>As I wrote, a number of good efforts are already ongoing today. Thus in order to get this effort off the ground, I believe the first MVP that we aim toward is pretty clear, which is to build a function-as-a-service style Jenkins build engine  that can be used underneath Jenkins X.</p>\n</div>\n<div class=\"paragraph\">\n<p>Cloud Native Jenkins MVP combines the spirits of Jenkins Pipeline, Jenkins Evergreen, Jenkinsfile Runner, and Jenkins Configuration as Code.\nIt consists of:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Webhook receiver:</strong>\na service that receives webhooks from GitHub and triggers a build engine.</p>\n</li>\n<li>\n<p><strong>Build Engine:</strong>\ntake Jenkinsfile Runner and evolve it so that it can run as a “function” that carries out a pipeline execution, with some CasC sprinkled together in order to control Jenkins configuration and plugins  used.\nThis way, Jenkinsfile works as-is for the most part.</p>\n</li>\n<li>\n<p><strong>Continuously delivered through Evergreen:</strong>\nIt allows us to solve the combinatorial version explosion problem, allow us to develop changes that span multiple plugins faster, and develop changes more confidently.\nOf all the projects out there, ours should be the community that believes in the value of Continuous Delivery and Evergreen is how we bring continuous delivery to the development of Cloud Native Jenkins itself.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This solves some of the key challenges listed above that are really hard to achieve today, so it’s already incredibly useful.</p>\n</div>\n<div class=\"paragraph\">\n<p>The catch is that this MVP has no GUI. There’s no Blue Ocean UI to look at. No parsing of test reports, no build history. It uses no persistent volumes, it keeps no record of builds. The only thing permanent at the end of a build is whatever data is pushed out from Jenkins Pipeline, such as images pushed to a Docker registry, email notifications, and GitHub commit status updates.  Load of other features in Jenkins will not be available here.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is not that far from how some sophisticated users are deploying Jenkins today. All in all, I think this is the right trade off for the first MVP. As you can see, we have most of the pieces already.</p>\n</div>\n<div class=\"paragraph\">\n<p>From here, the build engine will get continuously more polished and more cloud native, other services will get added to regain features that were  lost, new extensibility will get introduced to reduce the role of current in-VM plugins, and so on.</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"jolt-in-jenkins\"><a class=\"anchor\" href=\"#jolt-in-jenkins\"></a>Jolt in Jenkins</h3>\n<div class=\"paragraph\">\n<p>Cloud Native Jenkins is a major effort and in particular initially it’s not usable for everyone; it only targets a subset of Jenkins functionalities, and it requires a platform whose adoption is still limited today.\nSo in parallel, we need to continue the incremental evolution of Jenkins 2, but in an accelerated speed. Said differently, we need to continue to serve the majority of production workload on Jenkins 2 today, but we are willing to break some stuff to gain what we really need, such as faster pace of development and better stability, in ways that were previously not possible. This requires us injecting a jolt in Jenkins.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"release-model-change\"><a class=\"anchor\" href=\"#release-model-change\"></a>Release Model Change</h4>\n<div class=\"paragraph\">\n<p>The kind of jolts that we need will almost certainly means we need to renegotiate the expectation around new releases with our users.\nMy inspiration source is what happened to the development of Java SE. It changed the release model and started moving faster, by shedding off more pieces faster, in ways that they haven’t done before.\nAgain, Jenkins Evergreen is the key piece that achieves this without throwing users under a bus, for the reasons I described in the Cloud Native MVP above.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"compatibility\"><a class=\"anchor\" href=\"#compatibility\"></a>Compatibility</h4>\n<div class=\"paragraph\">\n<p>This jolt is aimed to put us on a different footing, one where our current “forever compatibility” expectation does not hold. If that requires us to use a new major version number, such as Jenkins 3, or new major version number every N months, I’m open to that.</p>\n</div>\n<div class=\"paragraph\">\n<p>Of course, whatever move we do has to make sense to users. The accelerated pace of value delivery needs to justify any inconvenience we put on users, such as migration, breaking changes, and so on.</p>\n</div>\n<div class=\"paragraph\">\n<p>In practice, what that means is that we need to be largely compatible. We have to protect users’ investment into their existing job definitions as much as possible. We continue to run freestyle jobs, etc&#8230;&#8203;</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"ingredients\"><a class=\"anchor\" href=\"#ingredients\"></a>Ingredients</h4>\n<div class=\"paragraph\">\n<p>Other proposals CloudBees is putting forward with the intent to staff the effort are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Configuration as Code:</strong> accelerate that and make it a more central  part of Jenkins.</p>\n</li>\n<li>\n<p><strong>Developer experience improvements</strong> through buildpack style auto-detection of project types.</p>\n</li>\n<li>\n<p><strong>Continued evolution of Jenkins Pipeline</strong></p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>There’s an effort going on to remove CPS execution of Pipeline and isolate any failures during pipeline execution.</p>\n</li>\n<li>\n<p>Continue to evolve Jenkins Pipeline toward the sweet spot that works well with the Cloud Native Jenkins effort.</p>\n</li>\n<li>\n<p>Continued tactical bug-by-bug improvements of Pipeline.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><strong>Evergreen:</strong> I already talked about this above.</p>\n</li>\n<li>\n<p><strong>Plugin spring cleaning:</strong> let’s actively guide users more toward the sweet spot of Jenkins and reduce our feature surface area, so that we can focus our contributors’ effort to important parts of Jenkins. I expect this to be a combination of governance and technical efforts.</p>\n</li>\n<li>\n<p><strong>Table stakes service integration:</strong> let’s look at what kind of tablestake tool/service integrations today’s user need, and\n<a href=\"https://www.dropbox.com/s/uvrx79d4wqbbv9i/JW%20contributor%20summit%20vision%20pitch.pptx?dl=0\">see if we are meeting/exceeding the competition</a>.\nWhere we fall short, let’s add/reimplement what are needed.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"ui-effort\"><a class=\"anchor\" href=\"#ui-effort\"></a>UI Effort</h4>\n<div class=\"paragraph\">\n<p>The Web UI will be likely done differently in Cloud Native Jenkins, as its own app and not a plugin in Jenkins. JCasC will also play a bigger role in Cloud Native Jenkins, reducing UI surface area from Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Given that, CloudBees will reconsider where to spend its effort in Blue Ocean. The current work where parts of Blue Ocean are made reusable as NPM modules is one example that aligns well with this new vision.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This document lays out the key directions and approaches in a broad stroke, which I discussed with a number of you in the past. Hopefully, this gives you the big picture of how I envision where to move Jenkins forward, not just as the creator of Jenkins but as the CTO of CloudBees, who employs a number of key contributors to the Jenkins project.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Come meet Kohsuke and chat with him about the direction of Jenkins at\n<a href=\"https://www.cloudbees.com/devops-world\">Jenkins World</a> on September 16-19th,\nregister with the code <code>JWFOSS</code> for a 30% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>","id":"0d561c02-de0c-5799-a5a4-74b3cc361577","title":"Jenkins: Shifting Gears","date":"2018-08-31T00:00:00.000Z","slug":"/blog/2018/08/31/shifting-gears/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},"pageContext":{"next":"/blog/2018/09/10/scaling-network-connections/","previous":"/blog/2018/08/30/speaker-blog-kubernetes-plugin/","id":"0d561c02-de0c-5799-a5a4-74b3cc361577"}},
    "staticQueryHashes": ["1271460761","3649515864"]}