{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/06/13/code-coverage-api-plugin/",
    "result": {"data":{"blog":{"html":"<div class=\"sect2\">\n<h3 id=\"about-me\"><a class=\"anchor\" href=\"#about-me\"></a>About me</h3>\n<div class=\"paragraph\">\n<p>My name is Shenyu Zheng, and I am an undergraduate student in Computer Science and Technology at Henan University from China.</p>\n</div>\n<div class=\"paragraph\">\n<p>I am very excited that I can participate in GSoC to work on Code Coverage API plugin with the Jenkins community and to contribute to the open source world. It is my greatest pleasure to write a plugin that many developers will use.</p>\n</div>\n<div class=\"paragraph\">\n<p>My mentors are <a href=\"https://github.com/christ66\">Steven Christou</a>, <a href=\"https://github.com/Supun94\">Supun Wanniarachchi</a>, <a href=\"https://github.com/jeffpearce\">Jeff Pearce</a> and <a href=\"https://github.com/oleg-nenashev\">Oleg Nenashev</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"abstract\"><a class=\"anchor\" href=\"#abstract\"></a>Abstract</h3>\n<div class=\"paragraph\">\n<p>There are a lot of plugins which currently implement code coverage, however, they all use similar config, charts, and content. So it will be much better if we can have an API plugin which does the most repeated work for those plugins and offers a unified APIs which can be consumed by other plugins and external tools.</p>\n</div>\n<div class=\"paragraph\">\n<p>This API plugin will mainly do these things:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Find coverage reports according to the user’s config.</p>\n</li>\n<li>\n<p>Use adapters to convert reports into the our standard format.</p>\n</li>\n<li>\n<p>Parse standard format reports, and aggregate them.</p>\n</li>\n<li>\n<p>Show parsed result in a chart.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>So, we can implement code coverage publishing by simply writing an adapter, and such adapter only needs to do one thing&#8201;&#8212;&#8201;convert a coverage report into the standard format. The implementation is based on extension points, so new adapters can be created in separate plugins. In order to simplify conversion for XML reports, there is also an abstraction layer which allows creating XSLT-based converters.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"current-progress-alpha-version\"><a class=\"anchor\" href=\"#current-progress-alpha-version\"></a>Current Progress - Alpha Version</h3>\n<div class=\"paragraph\">\n<p>I have developed an alpha version for this plugin. It currently integrates two different coverage tools - Cobertura and Jacoco. Also, it implements many basic functionalities like threshold, auto-detect, trend chart and so on.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"configuration-page\"><a class=\"anchor\" href=\"#configuration-page\"></a>Configuration Page</h4>\n<div class=\"paragraph\">\n<p><strong>config plugin</strong>\n<span class=\"image center\"><img src=\"/images/post-images/2018-06-13-code-coverage-api-plugin/configuration-page.png\" alt=\"configuration page\" title=\"Code Coverage API Plugin Configuration\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>We can input the path pattern for auto detect, so that plugin will automatically find reports and group them using a corresponding converter. That makes config simpler and the user doesn’t need to fully specify the report name. Also, if we want, we can manually specify each coverage report.</p>\n</div>\n<div class=\"paragraph\">\n<p>We also have global and per-report threshold configurations, which makes the plugin more flexible than existing plugins (e.g. global threshold for a multi-language project that has several reports).</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"pipeline-support\"><a class=\"anchor\" href=\"#pipeline-support\"></a>Pipeline Support</h4>\n<div class=\"paragraph\">\n<p>In addition to configuring the Code Coverage API plugin from the UI page, we also have pipeline support.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n   publishCoverage(autoDetectPath: '**/*.xml', adapters: [jacoco(path: 'jacoco.xml')], globalThresholds: [[thresholdTarget: 'GROUPS', unhealthyThreshold: 20.0, unstableThreshold: 0.0]])\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"report-defects\"><a class=\"anchor\" href=\"#report-defects\"></a>Report Defects</h4>\n<div class=\"paragraph\">\n<p>As we can see in Configuration page, we can set healthy threshold and stable threshold for each metric. The Code Coverage API plugin will report healthy score according to the healthy threshold we set.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>threshold config</strong>\n<span class=\"image center\"><img src=\"/images/post-images/2018-06-13-code-coverage-api-plugin/threshold-config.png\" alt=\"threshold config\" title=\"Threshold Config\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p><strong>result</strong>\n<span class=\"image center\"><img src=\"/images/post-images/2018-06-13-code-coverage-api-plugin/health-report.png\" alt=\"health report\" title=\"Result\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Also, we have a group of options which can fail the build if coverage falls below a particular threshold.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"coverage-result-page\"><a class=\"anchor\" href=\"#coverage-result-page\"></a>Coverage Result Page</h4>\n<div class=\"paragraph\">\n<p>The coverage result page now has a modernized UI which shows coverage results more clearly.\nThe result page includes three parts - Trend chart, Summary chart, Child Summary chart.</p>\n</div>\n<div class=\"sect4\">\n<h5 id=\"trend-chart\"><a class=\"anchor\" href=\"#trend-chart\"></a>Trend Chart</h5>\n<div class=\"paragraph\">\n<p>In the Trend chart, we can see the coverage trend of the selected coverage metrics.\n<span class=\"image center\"><img src=\"/images/post-images/2018-06-13-code-coverage-api-plugin/trend-chart.gif\" alt=\"trend chart\" title=\"Trend Chart\"></span></p>\n</div>\n</div>\n<div class=\"sect4\">\n<h5 id=\"summary-chart\"><a class=\"anchor\" href=\"#summary-chart\"></a>Summary Chart</h5>\n<div class=\"paragraph\">\n<p>In the summary chart we can see the coverage summary of current coverage metric.\n<span class=\"image center\"><img src=\"/images/post-images/2018-06-13-code-coverage-api-plugin/summary-chart.gif\" alt=\"summary chart\" title=\"Summary Chart\"></span></p>\n</div>\n</div>\n<div class=\"sect4\">\n<h5 id=\"child-summary-chart\"><a class=\"anchor\" href=\"#child-summary-chart\"></a>Child Summary Chart</h5>\n<div class=\"paragraph\">\n<p>In the Child summary chart, we can see the coverage summary of each child, also, we can use the range handler to filter item we want to see to reduce the chart size.\n<span class=\"image center\"><img src=\"/images/post-images/2018-06-13-code-coverage-api-plugin/child-summary-chart.gif\" alt=\"child summary chart\" title=\"Child Summary Chart\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>By using those more modernized chart components, we can easily focus on the information we want to know.</p>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"extensibility\"><a class=\"anchor\" href=\"#extensibility\"></a>Extensibility</h4>\n<div class=\"paragraph\">\n<p>We provide several extension points to make our plugin more extensible and flexible. Also, we have a series of abstract layers to help us implementing these extension points much easier.</p>\n</div>\n<div class=\"sect4\">\n<h5 id=\"coveragereportadapter\"><a class=\"anchor\" href=\"#coveragereportadapter\"></a>CoverageReportAdapter</h5>\n<div class=\"paragraph\">\n<p>We can implement a coverage tool by implementing CoverageReportAdapter extension point. For example, by using the provided abstract layer, we can implement Jacoco simple like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-java\" data-lang=\"java\">public final class JacocoReportAdapter extends JavaXMLCoverageReportAdapter {\n\n    @DataBoundConstructor\n    public JacocoReportAdapter(String path) {\n        super(path);\n    }\n\n    @Override\n    public String getXSL() {\n        return \"jacoco-to-standard.xsl\";\n    }\n\n    @Override\n    public String getXSD() {\n        return null;\n    }\n\n    @Symbol(\"jacoco\")\n    @Extension\n    public static final class JacocoReportAdapterDescriptor extends CoverageReportAdapterDescriptor&lt;CoverageReportAdapter&gt; {\n\n        public JacocoReportAdapterDescriptor() {\n            super(JacocoReportAdapter.class, \"jacoco\");\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>All we need is to extend an abstract layer for XML-based Java report and provide an XSL file to convert the report to our Java standard format. There are also other extension points which are under development.</p>\n</div>\n</div>\n<div class=\"sect4\">\n<h5 id=\"other-extension-points\"><a class=\"anchor\" href=\"#other-extension-points\"></a>Other Extension points</h5>\n<div class=\"paragraph\">\n<p>We also plan to provide extension points for coverage threshold and report detector. Once it completed, we can have more control over our coverage report process.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"next-phase-plan\"><a class=\"anchor\" href=\"#next-phase-plan\"></a>Next Phase Plan</h3>\n<div class=\"paragraph\">\n<p>The Alpha version now has many parts which still need to be implemented before the final release. So in next phase, I will mainly do those things.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>APIs which can be used by others</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Integrate Cobertura Plugin with Code Coverage API <a href=\"https://issues.jenkins.io/browse/JENKINS-51424\">(JENKINS-51424)</a>.</p>\n</li>\n<li>\n<p>Provide API for getting coverage information. E.g. summary information about coverage (percentages, trends) <a href=\"https://issues.jenkins.io/browse/JENKINS-51422\">(JENKINS-51422)</a>, <a href=\"https://issues.jenkins.io/browse/JENKINS-51423\">(JENKINS-51423)</a>.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>Implementing abstract layer for other report formats like JSON. <a href=\"https://issues.jenkins.io/browse/JENKINS-51732\">(JENKINS-51732)</a>.</p>\n</li>\n<li>\n<p>Supporting converters for non-Java languages. <a href=\"https://issues.jenkins.io/browse/JENKINS-51924\">(JENKINS-51924)</a>.</p>\n</li>\n<li>\n<p>Supporting combining reports within a build(e.g. after parallel() execution in Pipeline) <a href=\"https://issues.jenkins.io/browse/JENKINS-51926\">(JENKINS-51926)</a>.</p>\n</li>\n<li>\n<p>Adding source code navigation in Coverage Result Page <a href=\"https://issues.jenkins.io/browse/JENKINS-51988\">(JENKINS-51988)</a>.</p>\n</li>\n<li>\n<p>Refactoring the configuration page to make it more user-friendly <a href=\"https://issues.jenkins.io/browse/JENKINS-51927\">(JENKINS-51927)</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"how-to-try-it-out\"><a class=\"anchor\" href=\"#how-to-try-it-out\"></a>How to Try It Out</h3>\n<div class=\"paragraph\">\n<p>Also, I have released the Alpha version in the <a href=\"https://jenkins.io/doc/developer/publishing/releasing-experimental-updates/#configuring-jenkins-to-use-experimental-update-center\">Experimental Update Center</a>. If you can give me some of your valuable advice about it, I will very appreciate.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://gitter.im/jenkinsci/code-coverage-api-plugin\"><span class=\"image\"><img src=\"https://badges.gitter.im/jenkinsci/code-coverage-api-plugin.svg\" alt=\"title: &quot;Gitter&quot;\"></span></a></p>\n</li>\n<li>\n<p><a href=\"https://issues.jenkins.io/issues/?jql=project+%3D+JENKINS+AND+component+%3D+code-coverage-api-plugin\">JIRA Component</a></p>\n</li>\n<li>\n<p><a href=\"https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/\">Project Page</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkinsci/code-coverage-api-plugin\">Project Repository</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=qWHM8S0fzUw\">Phase 1 Presentation Video</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.google.com/presentation/d/141gvnLeNem-2SdiIEM4ZN-nzDmhVJUrUYv-r6a482R8/edit?usp=sharing\">Phase 1 Presentation Slides</a></p>\n</li>\n</ul>\n</div>\n</div>","id":"a1c90a56-ed3d-57e4-bd0b-1397798cc5ea","title":"GSoC Project Intro: Code Coverage API Plugin","date":"2018-06-13T00:00:00.000Z","slug":"/blog/2018/06/13/code-coverage-api-plugin/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"cizezsy","html":"<div class=\"paragraph\">\n<p>Shenyu comes from China. He is a third year student now, and his major is\nComputer Science and technology. He has participated in GSoC 2018 for\n<a href=\"https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/\">Code Coverage API Plugin</a></p>\n</div>","id":"shenyu_zheng","irc":"cizezsy","linkedin":null,"name":"Shenyu Zheng","slug":"/blog/authors/shenyu_zheng","twitter":null}]}},"pageContext":{"id":"a1c90a56-ed3d-57e4-bd0b-1397798cc5ea"}},
    "staticQueryHashes": ["1271460761","3649515864"]}