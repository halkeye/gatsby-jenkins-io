{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/06/27/new-login-page/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>This blog post gives an introduction to the new design for the login and signup forms and Jenkins is (re)starting pages introduced in Jenkins 2.128.\nThe first part of the blog post is an introduction to the new design and UX for Jenkins users.\nThe later part is talking about extensibility in a more technical manner, aimed at plugin developers.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"overview\"><a class=\"anchor\" href=\"#overview\"></a>Overview</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The recent changes to some core pages provide new design and UX and further dropping all external dependencies to prevent\nany possible malicious javascript introduced by third party libraries.\nTo be clear, this never was an issue with previous releases of Jenkins, but having read <a href=\"https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5\">this article</a>, this author believes that the article has good points and leading by example may raise awareness of data protection.</p>\n</div>\n<div class=\"paragraph\">\n<p>This meant to drop the usage of the jelly layout lib (aka <code>xmlns:l=\"/lib/layout\"</code>) and as well the page decorators it\nsupported. However there is a new <code>SimplePageDecorator</code> extension point (discussed below) which can be used to modify the look and feel for the login and sign up page.</p>\n</div>\n<div class=\"paragraph\">\n<p>The following pages have given a new design:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Jenkins is (re)starting pages</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2018-06-27-JENKINS-50447/JENKINS-50447_1_a.png\" alt=\"JENKINS 50447 1 a\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2018-06-27-JENKINS-50447/JENKINS-50447_1_b.png\" alt=\"JENKINS 50447 1 b\"></span></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Login</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2018-06-27-JENKINS-50447/JENKINS-50447_2.png\" alt=\"JENKINS 50447 2\"></span></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Sign up</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2018-06-27-JENKINS-50447/JENKINS-50447_3.png\" alt=\"JENKINS 50447 3\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"ux-enhancement\"><a class=\"anchor\" href=\"#ux-enhancement\"></a>UX enhancement</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Form validation has changed to give inline feedback about data validation errors in the same form.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Login</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2018-06-27-JENKINS-50447/JENKINS-50447_4.png\" alt=\"JENKINS 50447 4\"></span></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Sign up</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2018-06-27-JENKINS-50447/JENKINS-50447_5.png\" alt=\"JENKINS 50447 5\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The above image shows that the validation is now done on all input fields instead of before breaking on the\nfirst error found, which should lead to fewer retry cycles.</p>\n</div>\n<div class=\"paragraph\">\n<p>Instead of forcing the user to repeat the password, the new UX introduces the possibility to display the password in\nclear text. Further a basic password strength meter indicates password strength to the user while she enters the password.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2018-06-27-JENKINS-50447/JENKINS-50447_6.png\" alt=\"JENKINS 50447 6\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"customizing-the-ui\"><a class=\"anchor\" href=\"#customizing-the-ui\"></a>Customizing the UI</h2>\n<div class=\"sectionbody\">\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThe re-/starting screens do not support the concept of decorators very well, hence the decision to not support them for these pages.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>The SimplePageDecorator is the key component for customization and uses three different files to\nallow overriding the look and feel of the login and signup pages.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>simple-head.jelly</code></p>\n</li>\n<li>\n<p><code>simple-header.jelly</code></p>\n</li>\n<li>\n<p><code>simple-footer.jelly</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>All of the above <code>SimplePageDecorator</code> Jelly files are supported in the <strong>login</strong> page. The following snippet is a minimal excerpt\nof the login page, showing how it makes use of <code>SimplePageDecorator</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-html\" data-lang=\"html\">&lt;?jelly escape-by-default='true'?&gt;\n&lt;j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" &gt;\n  &lt;j:new var=\"h\" className=\"hudson.Functions\"/&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;!-- css styling, will fallback to default implementation --&gt;\n      &lt;st:include it=\"${h.simpleDecorator}\" page=\"simple-head.jelly\" optional=\"true\"/&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div class=\"simple-page\" role=\"main\"&gt;\n        &lt;st:include it=\"${h.simpleDecorator}\" page=\"simple-header.jelly\" optional=\"true\"/&gt;\n      &lt;/div&gt;\n      &lt;div class=\"footer\"&gt;\n        &lt;st:include it=\"${h.simpleDecorator}\" page=\"simple-footer.jelly\" optional=\"true\"/&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n&lt;/j:jelly&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <strong>sign-up</strong> page only supports the simple-head.jelly:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-html\" data-lang=\"html\">&lt;?jelly escape-by-default='true'?&gt;\n&lt;j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" &gt;\n  &lt;j:new var=\"h\" className=\"hudson.Functions\"/&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;!-- css styling, will fallback to default implementation --&gt;\n      &lt;st:include it=\"${h.simpleDecorator}\" page=\"simple-head.jelly\" optional=\"true\"/&gt;\n    &lt;/head&gt;\n  &lt;/html&gt;\n&lt;/j:jelly&gt;</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"simplepagedecorator-custom-implementations\"><a class=\"anchor\" href=\"#simplepagedecorator-custom-implementations\"></a>SimplePageDecorator - custom implementations</h2>\n<div class=\"sectionbody\">\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nHave a look at <a href=\"https://plugins.jenkins.io/login-theme\">Login Theme Plugin</a>, which allows you to\nconfigure your own custom content to be injected into the new login/sign-up page.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>To allow easy customisation the decorator only implements one instance by the principal \"first-come-first-serve\".\nIf jenkins finds an extension of the <code>SimplePageDecorator</code> it will use the Jelly files provided by that plugin.\nOtherwise Jenkins will fall back to the default implementation.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-java\" data-lang=\"java\">@Extension\npublic class MySimplePageDecorator extends SimplePageDecorator {\n   public String getProductName() {\n     return \"MyJenkins\";\n   }\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThe above will take override over the default because the default implementation has a very low ordinal (<code>@Extension(ordinal=-9999)</code>)\nIf you have competing plugins implementing <code>SimplePageDecorator</code>, the implementation with the highest ordinal will be used.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>As a simple example, to customize the logo we display in the login page, create a <code>simple-head.jelly</code> with the following content:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-html\" data-lang=\"html\">&lt;?jelly escape-by-default='true'?&gt;\n&lt;j:jelly xmlns:j=\"jelly:core\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"${resURL}/css/simple-page.css\" type=\"text/css\" /&gt;\n  &lt;link rel=\"stylesheet\" href=\"${resURL}/css/simple-page.theme.css\" type=\"text/css\" /&gt;\n  &lt;style&gt;\n    .simple-page .logo {\n        background-image: url('${resURL}/plugin/YOUR_PLUGIN/icons/my.svg');\n        background-repeat: no-repeat;\n        background-position: 50% 0;\n        height: 130px;\n    }\n  &lt;/style&gt;\n  &lt;link rel=\"stylesheet\" href=\"${resURL}/css/simple-page-forms.css\" type=\"text/css\" /&gt;\n&lt;/j:jelly&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To customize the login page further, create a <code>simple-header.jelly</code> like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-html\" data-lang=\"html\">&lt;?jelly escape-by-default='true'?&gt;\n&lt;j:jelly xmlns:j=\"jelly:core\"&gt;\n  &lt;div id=\"loginIntro\"&gt;\n    &lt;div class=\"logo\"&gt; &lt;/div&gt;\n    &lt;h1 id=\"productName\"&gt;Welcome to ${it.productName}!&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/j:jelly&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For example, I used this technique to create a prototype of a login page for a CloudBees product I am working on:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2018-06-27-JENKINS-50447/JENKINS-50447_7.png\" alt=\"JENKINS 50447 7\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We hope you like the recent changes to some core pages and as well the new design and UX. We further hope you feel enabled to\ncustomize the look and feel to adopt your needs with the <code>SimplePageDecorator</code>.</p>\n</div>\n</div>\n</div>","id":"c68773a2-1f81-56bc-af65-71e0703df409","title":"New design, UX and extensibility digest for login page et. al.","date":"2018-06-27T00:00:00.000Z","slug":"/blog/2018/06/27/new-login-page/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"scherler","html":"<div class=\"paragraph\">\n<p>Thorsten Scherler has a broad background in open source consulting, training and solutions since 2002.\nHe&#8217;s an engineer at CloudBees, working full time on the <a href=\"https://jenkins.io/projects/blueocean/\">Blue Ocean</a> front end.\nHe left Germany in 2003 after finishing his university degrees and has been living in sunny Seville ever since.</p>\n</div>","id":"scherler","irc":null,"linkedin":null,"name":"Thorsten Scherler","slug":"/blog/authors/scherler/","twitter":"thorScherler"}]}},"pageContext":{"id":"c68773a2-1f81-56bc-af65-71e0703df409"}},
    "staticQueryHashes": ["1271460761","3649515864"]}