{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/01/13/jep-200/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>There is a newer version of the announcement for Jenkins administrators.\nPlease see <a href=\"/blog/2018/03/15/jep-200-lts/\">this blogpost</a>.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect1\">\n<h2 id=\"overview\"><a class=\"anchor\" href=\"#overview\"></a>Overview</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/jenkinsci/jep/blob/master/jep/200/README.adoc\">JEP-200</a> has been integrated into Jenkins weekly builds\nand (if all goes well) will be a part of the next LTS line.\nIn a nutshell, this change is a security hardening measure\nto be less permissive about deserializing Java classes defined in the Java Platform or libraries bundled with Jenkins.\nFor several years now, Jenkins has specifically <em>blacklisted</em> certain classes and packages according to known or suspected exploits;\nnow it will reject all classes not explicitly mentioned in a <em>whitelist</em>, or defined in Jenkins core or plugins.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"for-jenkins-administrators\"><a class=\"anchor\" href=\"#for-jenkins-administrators\"></a>For Jenkins administrators</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"before-upgrade\"><a class=\"anchor\" href=\"#before-upgrade\"></a>Before upgrade</h3>\n<div class=\"paragraph\">\n<p>Back up your Jenkins instance prior to upgrade so you have any easy way of rolling back.\nIf you are running any of the plugins listed in\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+fix+for+JEP-200\">Plugins affected by fix for JEP-200</a>,\nupdate them after taking the backup but before upgrading Jenkins core.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you have a way of testing the upgrade in an isolated environment before applying it to production,\ndo so now.</p>\n</div>\n<div class=\"paragraph\">\n<p>Using backups and a staging server is good advice before <em>any</em> upgrade but especially this one,\nwith a relatively high risk of regression.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"after-upgrade\"><a class=\"anchor\" href=\"#after-upgrade\"></a>After upgrade</h3>\n<div class=\"paragraph\">\n<p>To the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nIf you do encounter a <code>java.lang.SecurityException: Rejected: some.pkg.and.ClassName</code> in the Jenkins UI or logs,\nyou may have found a case where an unusual plugin, or an unusual usage mode of a common plugin,\nviolates the existing whitelist.\nThis will be visible in the Jenkins system log as a message from <code>jenkins.security.ClassFilterImpl</code> like the following:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">some.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>where the link would direct you here.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you find such a case, please report it in the Jenkins issue tracker, under the appropriate plugin component.\nLink it to <a href=\"https://issues.jenkins.io/browse/JENKINS-47736\">JENKINS-47736</a> and add the <code>JEP-200</code> label.\nIf at all possible, include complete steps to reproduce the problem from scratch.\nJenkins developers will strive to evaluate the reason for the violation and offer a fix in the form of a core and/or plugin update.\nFor more details and current status, see\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+fix+for+JEP-200\">Plugins affected by fix for JEP-200</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Assuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nSimply make note of any class name(s) mentioned in such log messages,\nand run Jenkins with this startup option (details will depend on your installation method):</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">-Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"for-plugin-developers\"><a class=\"anchor\" href=\"#for-plugin-developers\"></a>For plugin developers</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"testing-plugins-against-jenkins-2-102-and-above\"><a class=\"anchor\" href=\"#testing-plugins-against-jenkins-2-102-and-above\"></a>Testing plugins against Jenkins 2.102 and above</h3>\n<div class=\"paragraph\">\n<p>As a plugin developer encountering this kind of error,\nyour first task is to ensure that it is reproducible in a functional (<code>JenkinsRule</code>) test\nwhen running Jenkins 2.102 or newer to reproduce the error.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-sh\" data-lang=\"sh\">mvn test -Djenkins.version=2.102 -Denforcer.skip=true</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The above assumes you are using a recent 2.x or 3.x parent <a href=\"https://github.com/jenkinsci/plugin-pom\">Plugin POM</a>.\nFor certain cases you may need to use <a href=\"https://github.com/jenkinsci/plugin-compat-tester\">Plugin Compat Tester (PCT)</a>\nto run tests against Jenkins core versions newer than your baseline.</p>\n</div>\n<div class=\"paragraph\">\n<p>Running PCT against the latest Jenkins core:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-sh\" data-lang=\"sh\">java -jar pct-cli.jar -reportFile $(pwd)/out/pct-report.xml \\\n    -workDirectory $(pwd)/work -skipTestCache true -mvn $(which mvn) \\\n    -includePlugins ${ARTIFACT_ID} -localCheckoutDir ${YOUR_PLUGIN_REPO}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You may need to run tests using an agent or force saves of plugin settings.</p>\n</div>\n<div class=\"paragraph\">\n<p>For maven plugins you can also specify custom Jenkins versions in <code>Jenkinsfile</code> to run tests against JEP-200:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">buildPlugin(jenkinsVersions: [null, '2.102'])</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>(again picking whatever version you need to test against)\nso that the test is included during CI builds, even while your minimum core baseline predates JEP-200.</p>\n</div>\n<div class=\"paragraph\">\n<p>If your plugins are built with Gradle, your mileage may vary.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"making-plugins-compatible-with-jenkins-2-102-or-above\"><a class=\"anchor\" href=\"#making-plugins-compatible-with-jenkins-2-102-or-above\"></a>Making plugins compatible with Jenkins 2.102 or above</h3>\n<div class=\"paragraph\">\n<p>If you discover a compatibility issue in your plugin,\nyou then have several choices for fixing the problem:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Ideally, simplify your code so that the mentioned class is not deserialized via Jenkins Remoting or XStream to begin with:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>If the problem occurred when receiving a response from an agent, change your <code>Callable</code> (or <code>FileCallable</code>) to return a plainer type.</p>\n</li>\n<li>\n<p>If the problem occurred when saving an XML file (such as a <code>config.xml</code> or <code>build.xml</code>), use a plainer type in non-<code>transient</code> fields in your persistable plugin classes.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>If the class(es) are defined in the Java Platform or some library bundled in Jenkins core, propose a pull request adding it to <code>core/src/main/resources/jenkins/security/whitelisted-classes.txt</code> in <code>jenkinsci/jenkins</code>.</p>\n</li>\n<li>\n<p>If the class(es) are defined in a third-party library bundled in your plugin, create a resource file <code>META-INF/hudson.remoting.ClassFilter</code> listing them. (<a href=\"https://github.com/jenkinsci/workflow-support-plugin/pull/50/files\">example</a>)</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>You may also do this for Java or Jenkins core library classes, as a hotfix until your core baseline includes the whitelist entry proposed above.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>If the class(es) are defined in a JAR you build and then bundle in your pluginâ€™s <code>*.jpi</code>, add a <code>Jenkins-ClassFilter-Whitelisted: true</code> manifest entry. This whitelists every class in the JAR. (<a href=\"https://github.com/jenkinsci/lib-jenkins-maven-embedder/pull/15/files\">example</a>)</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","id":"b30f609a-7e4a-56ef-93e3-f8629da662cd","title":"JEP-200: Remoting / XStream whitelist integrated into Jenkins core","date":"2018-01-13T00:00:00.000Z","slug":"/blog/2018/01/13/jep-200/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"blog/author/jglick","twitter":"tyvole"}]}},"pageContext":{"next":"/blog/2018/01/17/jenkins-world-cfp-open/","previous":"/blog/2018/01/08/moving-from-buddybuild-for-android/","id":"b30f609a-7e4a-56ef-93e3-f8629da662cd"}},
    "staticQueryHashes": ["1271460761","3649515864"]}