{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/01/08/moving-from-buddybuild-for-android/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>Last week, buddybuild — a hosted continuous integration service focused on mobile apps — announced that it had been <a href=\"https://www.buddybuild.com/blog/buddybuild-is-now-part-of-apple\">acquired by Apple</a>, and consequently its complete Android offering, along with its free tier for iOS users, will be discontinued at the beginning of March.</p>\n</div>\n<div class=\"paragraph\">\n<p>This was a fairly undesirable way to start 2018 for buddybuild&#8217;s Android users and, with less than two months to find an alternative, many took to Twitter to simultaneously <a href=\"https://twitter.com/K4KYA/status/948465314047635456\">congratulate buddybuild on their acquisition</a>, and commiserate with others who have to find a new way to build and test their app.</p>\n</div>\n<div class=\"paragraph\">\n<p>While Jenkins is usually deployed as a self-hosted solution (with over <a href=\"https://stats.jenkins.io/\">150k installs</a>), rather than a hosted service like buddybuild, we thought this would be a good time to highlight — thanks to the <a href=\"https://plugins.jenkins.io/\">rich plugin ecosystem</a> of Jenkins — some of the possibilities offered to Android developers by Jenkins.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"common-workflows\"><a class=\"anchor\" href=\"#common-workflows\"></a>Common workflows</h3>\n<div class=\"paragraph\">\n<p>Android projects are fundamentally no different from how other types of software development projects might make use of a Continuous Integration &amp; Continuous Delivery system (CI/CD) such as Jenkins: Android developers will collaborate using a source control management system (SCM) such as <a href=\"https://plugins.jenkins.io/git\">Git</a> or <a href=\"https://plugins.jenkins.io/mercurial\">Mercurial</a>; they will create Pull Requests, which should be automatically verified; they expect to get feedback on test failures and code quality (e.g. via email or Slack); and they should be able to easily deploy new versions of their app to beta testers or end users.</p>\n</div>\n<div class=\"paragraph\">\n<p>To this end, Jenkins lets you define your <a href=\"/doc/book/pipeline/\">build and deployment pipelines</a> in a structured and auditable fashion (via <code>Jenkinsfile</code>), supports a multitude of SCMs, while the <a href=\"/doc/tutorials/build-a-multibranch-pipeline-project/\">multibranch Pipeline</a> feature automatically creates new Jenkins jobs for every new Pull Request in your repository, and cleans them up as branches get merged.  The <a href=\"/projects/blueocean/\">Blue Ocean user interface</a> ties these features together in a clean, modern UI.</p>\n</div>\n<div class=\"paragraph boxshadow\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2018-01-08/blue-ocean-screenshot.png\" alt=\"Blue Ocean build screenshot\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"building-android-apps\"><a class=\"anchor\" href=\"#building-android-apps\"></a>Building Android Apps</h3>\n<div class=\"paragraph\">\n<p>To build an Android app, you need the Java development tools (JDK), which Jenkins can <a href=\"https://wiki.jenkins.io/display/JENKINS/Tool+Auto-Installation\">automatically install</a> for you, plus the Android SDK, which you can also install on individual build agents using a <a href=\"https://wiki.jenkins.io/display/JENKINS/Tool+Auto-Installation\">tool installer</a>, or you can use a <a href=\"https://docker.com/\">Docker container</a> with the Android SDK Tools preinstalled, for example.</p>\n</div>\n<div class=\"paragraph\">\n<p>Then, you can use your SCM plugin of choice to fetch your source code, and build the app using the Android Gradle Plugin via the <a href=\"https://docs.gradle.org/4.4.1/userguide/gradle_wrapper.html\">Gradle Wrapper</a> — in most cases this is as simple as running <code>./gradlew assembleDebug</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once your app has been built and packaged into a <code>.apk</code> file, you can use the <a href=\"/doc/pipeline/steps/core/#archiveartifacts-archive-the-artifacts\"><code>archiveArtifacts</code></a> build step, storing the APK, enabling colleagues to download APKs directly from Jenkins, so that they can try out the latest build.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"testing-android-apps\"><a class=\"anchor\" href=\"#testing-android-apps\"></a>Testing Android Apps</h3>\n<div class=\"paragraph\">\n<p>The Android SDK supports two types of test: unit tests, which run on the JVM, and instrumentation tests, which have to run on an Android device or emulator.  Both types of test can be executed using Jenkins and, since the Android Gradle Plugin writes the test results to disk in JUnit XML format, the <a href=\"https://plugins.jenkins.io/junit\">JUnit Plugin</a> for Jenkins can be used to parse the results, enabling you see a test report, and to be notified of test failures.</p>\n</div>\n<div class=\"paragraph\">\n<p>Compiling and executing the unit tests for your app is as simple as adding another build step which runs <code>./gradlew testDebugUnitTest</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Similarly, instrumentation tests can be compiled and executed via the <code>connectedDebugAndroidTest</code> task in Gradle.  However, before you do this, you should ensure that an Android device is connected to your Jenkins build agent, or you can make use of the <a href=\"https://plugins.jenkins.io/android-emulator\">Android Emulator Plugin</a> to automatically download, create, and start an emulator for you during a build.  There are also plugins for cloud testing services such as <a href=\"https://github.com/jenkinsci/aws-device-farm-plugin\">AWS Device Farm</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you have finished executing the tests, you can use the <a href=\"/doc/pipeline/steps/junit/#junit-archive-junit-formatted-test-results\"><code>junit</code></a> step to analyse the results: <code>junit '**/TEST-*.xml'</code>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"static-analysis\"><a class=\"anchor\" href=\"#static-analysis\"></a>Static Analysis</h3>\n<div class=\"paragraph\">\n<p>Similar to other Java or Kotlin projects, you can scan your codebase using static analysis tools like FindBugs or Checkstyle.  Once again, Jenkins has <a href=\"https://plugins.jenkins.io/analysis-core\">analysis plugins</a> which can parse the output of these tools, and present you with the results and trend graphs, or optionally flag the build as unstable or failed if too many problems have been detected.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Android SDK provides a further useful static analysis tool called <a href=\"https://developer.android.com/studio/write/lint.html\">Lint</a>.  The output of this tool can be parsed by the <a href=\"https://plugins.jenkins.io/warnings-ng\">Warnings Next Generation Plugin</a>, which will analyse the issues found, and provide you with a detailed report within Jenkins.  This functionality was <a href=\"https://www.youtube.com/watch?v=Erd2k6EKxCQ&amp;t=53m32s\">demonstrated by the Android Tools Team</a> at the Google I/O conference a few years back.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"securely-signing-and-deploying-android-apps\"><a class=\"anchor\" href=\"#securely-signing-and-deploying-android-apps\"></a>Securely signing and deploying Android apps</h3>\n<div class=\"paragraph\">\n<p>In order to distribute an Android app, it needs to be signed with a private key, which you should keep safe (losing it means you won&#8217;t be able to publish updates to your app!), and as secure as possible.</p>\n</div>\n<div class=\"paragraph\">\n<p>Instead of developers having to keep the signing keystore on their development machines, you can securely store the keystore and/or its passphrase on Jenkins using the <a href=\"https://plugins.jenkins.io/credentials\">Credentials Plugin</a>.  This avoids having to hardcode the passphrase into your <code>build.gradle</code>, or have it otherwise checked into your SCM.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Credentials Plugin allows you to store secrets in Jenkins — which will be stored encrypted on disk when not in use — and those secrets can temporarily be made available during a build, either as a file in the build workspace, or exposed as an environment variable.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can use such environment variables in a <code>signingConfig</code> block within your <code>build.gradle</code>, or you can make use of the <a href=\"https://plugins.jenkins.io/android-signing\">Android Signing Plugin</a> to sign your APK for you.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you have your production-ready APK built and signed, you can automatically upload it to Google Play using the <a href=\"https://plugins.jenkins.io/google-play-android-publisher\">Google Play Android Publisher plugin</a>.  The benefit of using this plugin is that it supports multiple APK upload, expansion files, uploading of ProGuard mapping files, promotion of builds from alpha, to beta, to production — and once again, your Google Play credentials are securely stored on Jenkins thanks to integration with the Credentials Plugin.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"sample-pipeline\"><a class=\"anchor\" href=\"#sample-pipeline\"></a>Sample Pipeline</h3>\n<div class=\"paragraph\">\n<p>Here&#8217;s a straightforward example of a <code>Jenkinsfile</code> defining a pipeline to build, test, and optionally deploy an Android app, from a multibranch Pipeline job.\nIt requires the Pipeline, JUnit, Android Lint, Google Play Android Publisher, and Mailer plugins to be installed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">pipeline {\n  agent {\n    // Run on a build agent where we have the Android SDK installed\n    label 'android'\n  }\n  options {\n    // Stop the build early in case of compile or test failures\n    skipStagesAfterUnstable()\n  }\n  stages {\n    stage('Compile') {\n      steps {\n        // Compile the app and its dependencies\n        sh './gradlew compileDebugSources'\n      }\n    }\n    stage('Unit test') {\n      steps {\n        // Compile and run the unit tests for the app and its dependencies\n        sh './gradlew testDebugUnitTest'\n\n        // Analyse the test results and update the build result as appropriate\n        junit '**/TEST-*.xml'\n      }\n    }\n    stage('Build APK') {\n      steps {\n        // Finish building and packaging the APK\n        sh './gradlew assembleDebug'\n\n        // Archive the APKs so that they can be downloaded from Jenkins\n        archiveArtifacts '**/*.apk'\n      }\n    }\n    stage('Static analysis') {\n      steps {\n        // Run Lint and analyse the results\n        sh './gradlew lintDebug'\n        androidLint pattern: '**/lint-results-*.xml'\n      }\n    }\n    stage('Deploy') {\n      when {\n        // Only execute this stage when building from the `beta` branch\n        branch 'beta'\n      }\n      environment {\n        // Assuming a file credential has been added to Jenkins, with the ID 'my-app-signing-keystore',\n        // this will export an environment variable during the build, pointing to the absolute path of\n        // the stored Android keystore file.  When the build ends, the temporarily file will be removed.\n        SIGNING_KEYSTORE = credentials('my-app-signing-keystore')\n\n        // Similarly, the value of this variable will be a password stored by the Credentials Plugin\n        SIGNING_KEY_PASSWORD = credentials('my-app-signing-password')\n      }\n      steps {\n        // Build the app in release mode, and sign the APK using the environment variables\n        sh './gradlew assembleRelease'\n\n        // Archive the APKs so that they can be downloaded from Jenkins\n        archiveArtifacts '**/*.apk'\n\n        // Upload the APK to Google Play\n        androidApkUpload googleCredentialsId: 'Google Play', apkFilesPattern: '**/*-release.apk', trackName: 'beta'\n      }\n      post {\n        success {\n          // Notify if the upload succeeded\n          mail to: 'beta-testers@example.com', subject: 'New build available!', body: 'Check it out!'\n        }\n      }\n    }\n  }\n  post {\n    failure {\n      // Notify developer team of the failure\n      mail to: 'android-devs@example.com', subject: 'Oops!', body: \"Build ${env.BUILD_NUMBER} failed; ${env.BUILD_URL}\"\n    }\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"not-just-for-android\"><a class=\"anchor\" href=\"#not-just-for-android\"></a>Not just for Android</h3>\n<div class=\"paragraph\">\n<p>While buddybuild concentrated on Android and iOS apps, thanks to the <a href=\"https://wiki.jenkins.io/display/JENKINS/Distributed+builds\">distributed build agent architecture</a> of Jenkins, you can automate any type of project.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, you can expand the capabilities of Jenkins by adding macOS (or Windows, Linux, BSD…) agents; you can dynamically spin up agents on <a href=\"https://plugins.jenkins.io/ec2\">AWS EC2 instances</a>, <a href=\"https://plugins.jenkins.io/azure-vm-agents\">Microsoft Azure VMs</a>, or <a href=\"https://plugins.jenkins.io/azure-container-agents\">Azure Container Instances</a>; you can create agents using <a href=\"https://plugins.jenkins.io/vsphere-cloud\">VMware</a>, and so on.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h3>\n<div class=\"paragraph\">\n<p>Thousands of Jenkins instances are already using the various Android-related plugins, and Pipeline along with the Blue Ocean User Interface make using Jenkins simpler than it&#8217;s ever been.</p>\n</div>\n<div class=\"paragraph\">\n<p>Give Jenkins a try for building your Android projects, check out the <a href=\"/doc/tutorials/\">tutorials</a>, and get in touch via the <a href=\"/mailing-lists/\">users' mailing list</a>, or <a href=\"/chat/\">IRC</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Finally, as with Jenkins itself, all <a href=\"https://plugins.jenkins.io/\">plugins</a> distributed are <a href=\"https://github.com/jenkinsci\">open-source</a>, so feel free to <a href=\"/participate/\">contribute</a>!</p>\n</div>\n</div>","id":"775a7cf1-5a4d-58b6-b98a-0d5ac2e2af67","title":"Moving from buddybuild to Jenkins for Android Developers","date":"2018-01-08T00:00:00.000Z","slug":"/blog/2018/01/08/moving-from-buddybuild-for-android/","links":{"discourse":""},"authors":[{"avatar":null,"blog":"https://chris.orr.me.uk/","github":"orrc","html":"<div class=\"paragraph\">\n<p>Chris has been hanging around the Jenkins project since 2008, working on\nplugins, helping out folk on IRC, and speaking to people at conferences about\nJenkins.  He maintains several Android-related plugins, and contributes to a few\nothers.</p>\n</div>","id":"orrc","irc":null,"linkedin":null,"name":"Christopher Orr","slug":"/blog/authors/orrc","twitter":"orrc"}]}},"pageContext":{"next":"/blog/2018/01/13/jep-200/","previous":"/blog/2018/01/06/gsoc2018-call-for-mentors/","id":"775a7cf1-5a4d-58b6-b98a-0d5ac2e2af67"}},
    "staticQueryHashes": ["1271460761","3649515864"]}