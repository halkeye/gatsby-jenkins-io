{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/09/14/kubernetes-and-secret-agents/",
    "result": {"data":{"blog":{"html":"<div class=\"imageblock right\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://www.cloudbees.com/devops-world\"><img src=\"/images/conferences/devops-world-2018.jpg\" alt=\"DevOps World | Jenkins World 2018\"></a>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>At long last, the way we build and deploy software is finally changing and significantly so.\nThe days of the persnickety, prima donna build machine where monolithic applications were built, tested, and deployed are numbered.\nAnd that is a \"Good Thing (tm)\" - a consequence of how we will meet the transformation goals of our businesses.\nModern applications consist of distributed services, often with multiple microservices that are developed and deployed independent of other services.\nHowever, the only way to build these services with their own dependencies and schedules is to bake in continuous integration and delivery from the beginning.\nAnd as usual, your Jenkins platform is your friend.</p>\n</div>\n<div class=\"paragraph\">\n<p>But let’s take a moment and think about that in the context of microservices, especially if you’ve only used Jenkins for monolithic applications.\nYou’ll be creating a greater number of individual Jenkins jobs that each run multiple times a day.\nThis is a significant process change, and it’s important to acknowledge this and change our approach to managing Jenkins to accommodate these changes.\nIt’s well within Jenkins’ capabilities, but you will need to think a little differently, and invest to close those last-mile deployment gaps.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"evolution-of-my-jenkins-environment\"><a class=\"anchor\" href=\"#evolution-of-my-jenkins-environment\"></a>Evolution of my Jenkins Environment</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>One of the biggest challenges I’ve faced as a DevOps practitioner is a long and evolving set of options to manage my Jenkins agent infrastructure.\nWith only a few large jobs you don’t really need to worry too much about your agents.\nBut when you’re orchestrating the CI/CD pipelines for dozens or even hundreds of services, optimizing efficiency and minimizing cost becomes important.\nAnd that journey has allowed me to consider and test many different Jenkins build agent architectures over the years.\nThis journey may be familiar to you as well.</p>\n</div>\n<div class=\"paragraph\">\n<p>These are the types of Jenkins environments I’ve run over the years.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Execute all the builds on the controller.\nConcentrate all the moving parts on one instance.\n(I call this Hello Jenkins)</p>\n</li>\n<li>\n<p>Create a Jenkins EC2 agent with all the required tools for building every service, and then clone it if I need to “scale” Jenkins.\n(I call this the Monster Agent.)</p>\n</li>\n<li>\n<p>Create an individual Jenkins EC2 agent for each service I need to build.\n(I call this the Snowflake Agent.)</p>\n</li>\n<li>\n<p>Run build steps in containers.\nFor example, launching agents in containers using the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Docker+Plugin\">Docker Plugin</a> or using multi-stage Dockerfiles to encapsulate all the logic for building, testing and packaging an application.\nThey are both good first steps in container abstraction and allow you to easily copy artifacts from one container to another.\nOf course, access to a Docker engine is required for either approach, and I’ve managed my Docker host(s) for running Jenkins agents several different ways:</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>Run the Docker engine inside my Jenkins controller container - Docker in Docker (DinD)</p>\n</li>\n<li>\n<p>Mount the Docker socket of the host on which my Jenkins controller container runs, allowing agents to run as sibling or sidecar containers - Docker outside of Docker (DooD)</p>\n</li>\n<li>\n<p>Configure a single external EC2 Docker host for the Jenkins controller to use for launching builds in containers</p>\n</li>\n<li>\n<p>Dynamically launch agents using the EC2 plugin with an AMI that contains the Docker Engine and then run all the steps in a multi-stage Dockerfile</p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>All these approaches were attempts to get out of the business of curating and managing Jenkins agents and infrastructure, each with their own benefits and drawbacks.\nBut recently I begin working in a new Jenkins environment - Jenkins on Kubernetes.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you’ve come to view Jenkins, build agents and jobs as containerized services, migrating platforms becomes much more straightforward.\nAnd total disclaimer here - I had never used Kubernetes in my life, not even for side projects - when I set out to do this.\nThat said, it was surprisingly simple to create a Kubernetes cluster in Google Cloud Platform’s (GCP) GKE, launch a Jenkins controller using a\n<a href=\"https://helm.sh/\">Helm</a> chart and begin running build steps in Jenkins agents running in containers on my new Kubernetes cluster.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"launch-agents-in-kubernetes-from-your-pipeline-scripts\"><a class=\"anchor\" href=\"#launch-agents-in-kubernetes-from-your-pipeline-scripts\"></a>Launch agents in Kubernetes from your pipeline scripts</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The focus of this post and my Jenkins World talk for 2018, is to show you how to configure Jenkins to launch agents in Kubernetes from your pipeline scripts.\nMy examples assume you are launching your agents in the same Kubernetes cluster where your Jenkins controller is running, but there are other options.\nYou’ll begin by installing the\n<a href=\"https://plugins.jenkins.io/kubernetes\">Kubernetes plugin</a>.\nAs a bonus, when I installed Jenkins using the latest stable chart in the default Helm repository, the Kubernetes plugin was automatically installed for me.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you get the Jenkins controller running on your Kubernetes cluster, there are only a few configuration steps required and then you can begin launching ephemeral build agents on Kubernetes.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"configure-the-jenkins-controller\"><a class=\"anchor\" href=\"#configure-the-jenkins-controller\"></a>Configure the Jenkins controller</h3>\n<div class=\"paragraph\">\n<p>You’ll first need to create a credentials set for the Jenkins controller to access the Kubernetes cluster.\nTo do this, perform the following steps:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>In the Jenkins UI, click the <em>Credentials</em> link in the left-hand navigation pane</p>\n</li>\n<li>\n<p>Click the arrow next to <em>(global)</em> in the <em>Stores scoped to Jenkins</em> table (you have to hover next to the link to see the arrow)</p>\n</li>\n<li>\n<p>Click <em>Add Credentials</em></p>\n</li>\n<li>\n<p>Under Kind, specify <em>Kubernetes Service Account</em></p>\n</li>\n<li>\n<p>Leave the scope set to <em>Global</em></p>\n</li>\n<li>\n<p>Click OK.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>That’s it! This configuration allows the Jenkins controller to use a Kubernetes service account to access the Kubernetes API.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"create-a-cloud-configuration-on-the-jenkins-controller\"><a class=\"anchor\" href=\"#create-a-cloud-configuration-on-the-jenkins-controller\"></a>Create a Cloud Configuration on the Jenkins controller</h3>\n<div class=\"paragraph\">\n<p>The next step is to create a cloud configuration for your K8s cluster.\n(When I use K8s instead of Kubernetes it’s because it is quicker to type, not just for coolness.)</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>In the Jenkins UI, go to <em>Manage Jenkins</em> &#8594; <em>Configure System</em></p>\n</li>\n<li>\n<p>Scroll down until you see <em>Cloud settings</em> and click the <em>Add a new cloud box</em> and select <em>kubernetes</em></p>\n</li>\n<li>\n<p>The following parameters must be set:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Name</strong>: &lt;your choice&gt; - This defaults to <code>kubernetes</code></p>\n</li>\n<li>\n<p><strong>Kubernetes URL</strong>: <code>https://kubernetes.default</code> - This was automatically configured from the service account.</p>\n</li>\n<li>\n<p><strong>Kubernetes Namespace</strong>: <code>default</code> - Unless you are running your controller in another namespace</p>\n</li>\n<li>\n<p><strong>Credentials</strong>:  Select the Kubernetes Service Account credentials you created in the previous step</p>\n</li>\n<li>\n<p><strong>Jenkins URL</strong>: <code>http://&lt;your_jenkins_hostname&gt;:8080</code></p>\n</li>\n<li>\n<p><strong>Jenkins tunnel</strong>: <code>&lt;your_jenkins_hostname&gt;:5555</code> - This is the port that is used to communicate with an agent</p>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-14-secret-agents/image1.png\" alt=\"Kubernetes Configuration\" width=\"800\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>These were the only parameters I had to set to launch an agent in my K8s cluster.\nYou can certainly modify other parameters to tweak your environment.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now that you’ve configured your Jenkins controller so that it can access your K8s cluster, it’s time to define some pods.\nA pod is the basic building block of Kubernetes and consists of one or more containers with shared network and storage.\nEach Jenkins agent is launched as a Kubernetes pod.\nIt will always contain the default JNLP container that runs the Jenkins agent jar and any other containers you specify in the pod definition.\nThere are at least two ways to configure pod templates – in the Jenkins UI and in your pipeline script.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"configure-a-pod-template-in-the-jenkins-ui\"><a class=\"anchor\" href=\"#configure-a-pod-template-in-the-jenkins-ui\"></a>Configure a Pod Template in the Jenkins UI</h3>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>In the Jenkins UI, go to <em>Manage Jenkins</em> &#8594; <em>Configure Systems</em></p>\n</li>\n<li>\n<p>Scroll down to the cloud settings you configured in the previous step</p>\n</li>\n<li>\n<p>Click the <em>Add Pod Template</em> button and select <em>Kubernetes Pod Template</em></p>\n</li>\n<li>\n<p>Enter values for the following parameters:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Name</strong>: <code>&lt;your choice&gt;</code></p>\n</li>\n<li>\n<p><strong>Namespace</strong>: <code>default</code> - unless you configured a different namespace in the previous step</p>\n</li>\n<li>\n<p><strong>Labels</strong>: <code>&lt;your choice&gt;</code> - this will be used to identify the agent pod from your Jenkinsfiles</p>\n</li>\n<li>\n<p><strong>Usage</strong>: Select \"<em>Use this node as much as possible</em>\" if you would like for this pod to be your default node when no node is specified.\nSelect \"<em>Only build jobs with label matching expressions matching this node</em>\" to use this pod only when its label is specified in the pipeline script</p>\n</li>\n<li>\n<p><strong>The name of the pod template to inherit from</strong> - you can leave this blank.\nIt will be useful once you gain experience with this configuration, but don’t worry about it for now.</p>\n</li>\n<li>\n<p><strong>Containers</strong>: The containers you want to launch inside this pod.\nThis is described in detail below.</p>\n</li>\n<li>\n<p><strong>EnvVars</strong>: The environment variables you would like to inject into your pod at runtime.\nThis is described in detail below.</p>\n</li>\n<li>\n<p><strong>Volumes</strong>:  Any volumes you want to mount inside your pod.\nThis is described further below.</p>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-14-secret-agents/image2.png\" alt=\"Kubernetes Pod Template\" width=\"800\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Remember that a pod consists of one or more containers that live and die together.\nThe pod must always include a JNLP container, which is configured by default if you installed the controller using the Helm Chart.\nHowever, you will want to add containers with the tool chains required to build your application.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"add-your-own-container-template\"><a class=\"anchor\" href=\"#add-your-own-container-template\"></a>Add Your Own Container Template</h3>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>In the Jenkins UI, return to the pod template you created in the last step</p>\n</li>\n<li>\n<p>Click the <em>Add Container</em> button and select <em>Container Template</em></p>\n</li>\n<li>\n<p>Enter values in the following fields:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Name</strong>:  <code>&lt;your choice&gt;</code></p>\n</li>\n<li>\n<p><strong>Docker image</strong>: any Docker image you’d like\nFor example, if you are building an application written in Go, you can enter <code>'golang:1.11-alpine3.8'</code></p>\n</li>\n<li>\n<p><strong>Label</strong>: Enter any label strings you’d like to use to refer to this container template in your pipeline scripts</p>\n</li>\n<li>\n<p><strong>Always pull image</strong>: - Select this option if you want the plugin to pull the image each time a pod is created.</p>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-14-secret-agents/image3.png\" alt=\"Container Template\" width=\"800\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can leave the default values for the other parameters, but you can see that the plugin gives you fine-grained control over your pod and the individual containers that run within it.\nAny values you might set in your Kubernetes pod configuration can be set via this plugin as well.\nYou can also inject your configuration data by entering raw YAML.\nI encourage you not to get distracted by the sheer number of options you can configure in this plugin.\nYou only have to configure a small subset of them to get a working environment.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can click the <em>Add Environment Variable</em> button in the container template to inject environment variables into a specific container.\nYou can click the <em>Add Environment Variable</em> button in the pod template to inject environment variables into all containers in the pod.\nThe following environment variables are automatically injected into the default JNLP container to allow it to connect automatically to the Jenkins controller:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>JENKINS_URL</code>: Jenkins web interface url</p>\n</li>\n<li>\n<p><code>JENKINS_JNLP_URL</code>: url for the jnlp definition of the specific agent</p>\n</li>\n<li>\n<p><code>JENKINS_SECRET</code>: the secret key for authentication</p>\n</li>\n<li>\n<p><code>JENKINS_NAME</code>: the name of the Jenkins agent</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>If you click the <em>Add Volume</em> button in the pod template, you’ll see several options for adding volumes to your pod.\nI use the <em>Host Path Volume</em> option to mount the docker socket inside the pod.\nI can then run a container with the Docker client installed and use the host Docker socket to build and push Docker images.</p>\n</div>\n<div class=\"paragraph\">\n<p>At this point, we’ve created a cloud configuration for our Kubernetes cluster and defined a pod consisting of one or more containers.\nNow, how do we use this to run Jenkins jobs? We simply refer to the pod and containers by label in our Jenkins pipeline script.\nWe use the label we gave to the pod in the node block and the label for the container we wish to use in the container block.\nThe examples in this post use scripted pipeline, but you can achieve the same outcome using the declarative pipeline syntax:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node('test-pod') {\n    stage('Checkout') {\n        checkout scm\n    }\n    stage('Build'){\n        container('go-agent') {\n            // This is where we build our code.\n        }\n    }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"defining-the-pod-in-the-jenkinsfile\"><a class=\"anchor\" href=\"#defining-the-pod-in-the-jenkinsfile\"></a>Defining the Pod in the Jenkinsfile</h3>\n<div class=\"paragraph\">\n<p>Configuring a plugin through the UI is perfectly fine in a proof of concept.\nHowever, it does not result in a software-defined infrastructure that can be versioned and stored right alongside your source code.\nLuckily, you can create the entire pod definition directly in your Jenkinsfile.\nIs there anything you can’t do in a Jenkinsfile???</p>\n</div>\n<div class=\"paragraph\">\n<p>Any of the configuration parameters available in the UI or in the YAML definition can be added to the <code>podTemplate</code> and <code>containerTemplate</code> sections.\nIn the example below, I’ve defined a pod with two container templates.\nThe pod label is used in the node block to signify that we want to spin up an instance of this pod.\nAny steps defined directly inside the node block but not in a container block with be run in the default JNLP container.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>container</code> block is used to signify that the steps inside the block should be run inside the container with the given label.\nI’ve defined a container template with the label <code>'golang'</code>, which I will use to build the Go executable that I will eventually package into a Docker image.\nIn the <code>volumes</code> definition, I have indicated that I want to mount the Docker socket of the host, but I still need the Docker client to interact with it using the Docker API.\nTherefore, I’ve defined a container template with the label <code>'docker'</code> which uses an image with the Docker client installed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">podTemplate(\n    name: 'test-pod',\n    label: 'test-pod',\n    containers: [\n        containerTemplate(name: 'golang', image: 'golang:1.9.4-alpine3.7'),\n        containerTemplate(name: 'docker', image:'trion/jenkins-docker-client'),\n    ],\n    volumes: [\n        hostPathVolume(mountPath: '/var/run/docker.sock'),\n        hostPath: '/var/run/docker.sock',\n    ],\n    {\n        //node = the pod label\n        node('test-pod'){\n            //container = the container label\n            stage('Build'){\n                container('golang'){\n                    // This is where we build our code.\n                }\n            }\n            stage('Build Docker Image'){\n                container(‘docker’){\n                    // This is where we build the Docker image\n                }\n            }\n        }\n    })</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In my Docker-based pipeline scripts, I was building Docker images and pushing them to a Docker registry, and it was important to me to replicate that exactly with my new Kubernetes setup.\nOnce I accomplished that, I was ready to build my image using <code>gcloud</code>, the Google Cloud SDK, and push that image to the Google Container Registry in anticipation of deploying to my K8s cluster.</p>\n</div>\n<div class=\"paragraph\">\n<p>To do this, I specified a container template using a gcloud image and changed my docker command to a gcloud command.\nIt’s that simple!</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">podTemplate(\n    name: 'test-pod',\n    label: 'test-pod',\n    containers: [\n        containerTemplate(name: 'golang', image: 'golang:1.9.4-alpine3.7'),\n        containerTemplate(name: 'gcloud', image:'gcr.io/cloud-builders/gcloud'),\n    ],\n    {\n        //node = the pod label\n        node('test-pod'){\n            //container = the container label\n            stage('Build'){\n                container('golang'){\n                    // This is where we build our code.\n                }\n            }\n            stage('Build Docker Image'){\n                container(‘gcloud’){\n                    //This is where we build and push our Docker image.\n                }\n            }\n        }\n    })</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Standing up a Jenkins controller on Kubernetes, running ephemeral agents, and building and deploying a sample application only took me a couple of hours.\nI spent another weekend really digging in to better understand the platform.\nYou can be up and running in a matter of days if you are a quick study.\nThere are a wealth of resources available on running Jenkins on Kubernetes, and I hope this blog post helps to further that knowledge.\nEven better, come to\n<a href=\"https://devopsworldjenkinsworld2018.sched.com/event/F9Ne/jenkins-and-kubernetes-secret-agents-in-the-cloud\">my session at Jenkins World</a> and let&#8217;s talk in person.</p>\n</div>\n<div class=\"paragraph\">\n<p>So, what else do you want to know?\nHit me up on Twitter.\nI might even add your questions to my Jenkins World session.\nI suppose next up is Mesos?</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Come meet Mandy and other Jenkins and Kubernetes experts at\n<a href=\"https://www.cloudbees.com/devops-world\">Jenkins World</a> on September 16-19th,\nregister with the code <code>JWFOSS</code> for a 30% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>","id":"3853be51-02ed-55b0-8b3f-edbfcfe998c7","title":"Jenkins and Kubernetes - Secret Agents in the Clouds","date":"2018-09-14T00:00:00.000Z","slug":"/blog/2018/09/14/kubernetes-and-secret-agents/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#485858","images":{"fallback":{"src":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/19e71/devmandy.jpg","srcSet":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/77b35/devmandy.jpg 32w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/d4a57/devmandy.jpg 64w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/19e71/devmandy.jpg 128w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/68974/devmandy.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/ef6ff/devmandy.webp 32w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/8257c/devmandy.webp 64w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/6766a/devmandy.webp 128w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/22bfc/devmandy.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/devmandy.jpeg"},"blog":null,"github":"DevMandy","html":"<div class=\"paragraph\">\n<p>Mandy Hubbard has almost 20 years of professional QA experience,\nmost of which has been spent in fast-paced startup environments driving product quality.\nShe is passionate about ensuring quality through process improvements, test automation, following CI/CD best practices and all things DevOps.\nShe is currently a software engineer/QA architect at CS Disco, an innovative startup delivering a cloud-based eDiscovery platform.</p>\n</div>","id":"devmandy","irc":null,"linkedin":null,"name":"Mandy Hubbard","slug":"/blog/authors/devmandy","twitter":"DevMandy"}]}},"pageContext":{"id":"3853be51-02ed-55b0-8b3f-edbfcfe998c7"}},
    "staticQueryHashes": ["1271460761","3649515864"]}