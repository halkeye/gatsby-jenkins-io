{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/09/11/speaker-blog-warnings-plugin/",
    "result": {"data":{"blog":{"html":"<div class=\"imageblock right\">\n<div class=\"content\">\n<a class=\"image\" href=\"https://www.cloudbees.com/devops-world\"><img src=\"/images/conferences/devops-world-2018.jpg\" alt=\"DevOps World | Jenkins World 2018\"></a>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins' <a href=\"https://plugins.jenkins.io/warnings\">Warnings plugin</a> collects compiler warnings or issues reported by static analysis tools and visualizes the\nresults. The plugin (and the associated static analysis plugin suite) has been part of the Jenkins plugin eco-system\nfor more than ten years now. In order to optimize user experience and support Pipeline, a major rewrite of\nthe whole set of plugins was necessary. This new version (code name <strong>White Mountain</strong>) is now available as a public\nbeta. Please download and install this new version and help us to identify problems before the API is sealed.</p>\n</div>\n<div class=\"paragraph\">\n<p>The new release is available in the\n<a href=\"https://jenkins.io/doc/developer/publishing/releasing-experimental-updates/\">experimental update center</a>.\nIt has built-in support for almost hundred static analysis tools (including several compilers), see the list of\n<a href=\"https://github.com/jenkinsci/warnings-plugin/blob/master/SUPPORTED-FORMATS.md\">supported report formats</a>.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"features-overview\"><a class=\"anchor\" href=\"#features-overview\"></a>Features overview</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Warnings plugin provides the following features when added as a post build action (or step) to a job:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>The plugin scans the console log of a Jenkins build or files in the workspace of your job for any kind of issues.\nThere are almost one hundred\n<a href=\"https://github.com/jenkinsci/warnings-plugin/blob/master/SUPPORTED-FORMATS.md\">report formats</a> supported.\nAmong the problems it can detect:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>errors from your compiler (C, C#, Java, etc.)</p>\n</li>\n<li>\n<p>warnings from a static analysis tool (CheckStyle, StyleCop, SpotBugs, etc.)</p>\n</li>\n<li>\n<p>duplications from a copy-and-paste detector (CPD, Simian, etc.)</p>\n</li>\n<li>\n<p>vulnerabilities</p>\n</li>\n<li>\n<p>open tasks in comments of your source files</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>The plugin publishes a report of the issues found in your build, so you can navigate to a summary report from the\nmain build page. From there you can also dive into the details:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>distribution of new, fixed and outstanding issues</p>\n</li>\n<li>\n<p>distribution of the issues by severity, category, type, module, or package</p>\n</li>\n<li>\n<p>list of all issues including helpful comments from the reporting tool</p>\n</li>\n<li>\n<p>annotated source code of the affected files</p>\n</li>\n<li>\n<p>trend charts of the issues</p>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>In the next sections, I&#8217;ll show the new and enhanced features in more detail.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"one-plugin-for-all-tools\"><a class=\"anchor\" href=\"#one-plugin-for-all-tools\"></a>One plugin for all tools</h3>\n<div class=\"paragraph\">\n<p>Previously the warnings plugin was part of the static analysis suite that provided the same set of features through\nseveral plugins (CheckStyle, PMD, Static Analysis Utilities, Analysis Collector etc.).\nIn order to simplify the user experience and the development process, these\nplugins and the core functionality have been merged into the warnings plugin. All other plugins are not required\nanymore and will not be supported in the future. If you currently use one of these plugins you should migrate\nto the new recorders and steps as soon as possible. I will still maintain the old code for a while,\nbut the main development effort will be spent into the new code base.</p>\n</div>\n<div class=\"paragraph\">\n<p>The following plugins have been integrated into the beta version of the warnings plugin:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Android-Lint Plugin</p>\n</li>\n<li>\n<p>CheckStyle Plugin</p>\n</li>\n<li>\n<p>CCM Plugin</p>\n</li>\n<li>\n<p>Dry Plugin</p>\n</li>\n<li>\n<p>PMD Plugin</p>\n</li>\n<li>\n<p>FindBugs Plugin</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>All other plugins still need to be integrated or need to be refactored to use the new API.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"new-pipeline-support\"><a class=\"anchor\" href=\"#new-pipeline-support\"></a>New pipeline support</h3>\n<div class=\"paragraph\">\n<p>Requirements for using the Warnings plugin in Jenkins Pipeline can be complex and sometimes controversial.\nIn order to be as flexible as possible I decided to split the main step into two individual parts,\nwhich could then be used independently from each other.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"simple-pipeline-configuration\"><a class=\"anchor\" href=\"#simple-pipeline-configuration\"></a>Simple pipeline configuration</h4>\n<div class=\"paragraph\">\n<p>The simple pipeline configuration is provided by the step <code>recordIssues</code>. This step is automatically derived from the\nFreeStyle job recorder: it scans for issues in a given set of files (or in the console log) and reports these issues\nin your build. You can use the snippet generator to create a working snippet that calls this step. A typical example\nof this step is shown in the following example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">recordIssues\n    enabledForFailure: true,\n    tools: [[pattern: '*.log', tool: [$class: 'Java']]],\n    filters: [includeFile('MyFile.*.java'), excludeCategory('WHITESPACE')]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this example, the files '*.log' are scanned for <strong>Java</strong> issues. Only issues with a file name matching the\npattern 'MyFile.*.java' are included. Issues with category 'WHITESPACE' will be excluded. The\nstep will be executed even if the build failed. The recorded report of warnings will be published under the fixed\nURL 'https://[<em>your-jenkins</em>]/job/[<em>your-job</em>]/java'. URL or name of the report can be changed if required.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"advanced-pipeline-configuration\"><a class=\"anchor\" href=\"#advanced-pipeline-configuration\"></a>Advanced Pipeline Configuration</h4>\n<div class=\"paragraph\">\n<p>Sometimes publishing and reporting issues using a single step is not sufficient. For instance, if you build your\nproduct using several parallel steps and you want to combine the issues from all of these steps into\na single result. Then you need to split scanning and aggregation. Therefore, the plugin  provides the following\ntwo steps that are combined by using an intermediate result object:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>scanForIssues</code>: this step scans a report file or the console log with a particular parser and creates an\nintermediate report object that contains the report.</p>\n</li>\n<li>\n<p><code>publishIssues</code>: this step publishes a new report in your build that contains the aggregated results\nof one or several <code>scanForIssues</code> steps.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>You can see the usage of these two steps in the following example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def java = scanForIssues tool: [$class: 'Java']\ndef javadoc = scanForIssues tool: [$class: 'JavaDoc']\n\npublishIssues issues:[java, javadoc], filters:[includePackage('io.jenkins.plugins.analysis.*')]\n\ndef checkstyle = scanForIssues tool: [$class: 'CheckStyle'], pattern: '**/target/checkstyle-result.xml'\npublishIssues issues:[checkstyle]\n\ndef pmd = scanForIssues tool: [$class: 'Pmd'], pattern: '**/target/pmd.xml'\npublishIssues issues:[pmd]\n\npublishIssues id:'analysis', name:'White Mountains Issues', issues:[checkstyle, pmd],\n    filters:[includePackage('io.jenkins.plugins.analysis.*')]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"filtering-issues\"><a class=\"anchor\" href=\"#filtering-issues\"></a>Filtering issues</h3>\n<div class=\"paragraph\">\n<p>The created report of issues can be filtered afterwards. You can specify an arbitrary number of include or exclude\nfilters. Currently, there is support for filtering issues by module name, package or namespace name, file name,\ncategory or type.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-11/filter.png\" alt=\"Filtering\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>An example pipeline that uses such a filter is shown in the following snippet:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">recordIssues\n    tools: [[pattern: '*.log', tool: [$class: 'Java']]],\n    filters: [includeFile('MyFile.*.java'), excludeCategory('WHITESPACE')]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"quality-gate-configuration\"><a class=\"anchor\" href=\"#quality-gate-configuration\"></a>Quality gate configuration</h3>\n<div class=\"paragraph\">\n<p>You can define several quality gates that will be checked after the issues have been reported. These quality gates\nlet you to modify Jenkins' build status so that you immediately see if the desired quality of your product is met.\nA build can be set to <strong>unstable</strong> or <strong>failed</strong> for each of these quality gates. All quality gates use a simple metric:\nthe maximum number of issues that can be found and still pass a given quality gate.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-11/quality-gate.png\" alt=\"Quality Gate\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>An example pipeline that enables a quality gate for 10 warnings in total or 1 new warning is shown in the\nfollowing snippet:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">recordIssues\n    tools: [[pattern: '*.log', tool: [$class: 'Java']]], unstableTotalHigh: 10, unstableNewAll: 1</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"issues-history-new-fixed-and-outstanding-issues\"><a class=\"anchor\" href=\"#issues-history-new-fixed-and-outstanding-issues\"></a>Issues history: new, fixed, and outstanding issues</h3>\n<div class=\"paragraph\">\n<p>One highlight of the plugin is the ability to categorize issues of subsequent builds as new, fixed and outstanding.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-11/trend.png\" alt=\"History\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Using this feature makes it a lot easier to keep the quality of your project under control: you can focus\nonly on those warnings that have been introduced recently.</p>\n</div>\n<div class=\"paragraph\">\n<p>Note: the detection of new warnings is based on a complex algorithm that tries to track the same warning in\ntwo two different versions of the source code. Depending on the extend of the modification of the source code\nit might produce some false positives, i.e., you might still get some new and fixed warnings even if there should\nbe none. The accuracy of this algorithm is still ongoing research and will be refined in the next couple of months.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"severities\"><a class=\"anchor\" href=\"#severities\"></a>Severities</h3>\n<div class=\"paragraph\">\n<p>The plugin shows the distribution of the severities of the issues in a chart. It defines the\nfollowing default severities, but additional ones might be added by plugins that extend the warnings plugin.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Error</strong>: Indicates an error that typically fails the build</p>\n</li>\n<li>\n<p><strong>Warning</strong> (High, Normal, Low): Indicates a warning of the given priority. Mapping to the priorities\nis up to the individual parsers.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Note that not every parser is capable of producing warnings with a different severity. Some of the parses simply\nuse the same severity for all issues.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-11/severities.png\" alt=\"Severities\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"build-trend\"><a class=\"anchor\" href=\"#build-trend\"></a>Build Trend</h3>\n<div class=\"paragraph\">\n<p>In order to see the trend of the analysis results, a chart showing the number of issues per build is also\nshown. This chart is used in the details page as well as in the job overview. Currently, type and configuration\nof the chart is fixed. This will be enhanced in future versions of the plugin.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-11/history.png\" alt=\"Trend Chart\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"issues-overview\"><a class=\"anchor\" href=\"#issues-overview\"></a>Issues Overview</h3>\n<div class=\"paragraph\">\n<p>You can get a fast and efficient overview of the reported set of issues in several aggregation views.\nDepending on the number or type of issues you will see the distribution of issues by</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Static Analysis Tool</p>\n</li>\n<li>\n<p>Module</p>\n</li>\n<li>\n<p>Package or Namespace</p>\n</li>\n<li>\n<p>Severity</p>\n</li>\n<li>\n<p>Category</p>\n</li>\n<li>\n<p>Type</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Each of these detail views are interactive, i.e. you can navigate into a subset of the categorized issues.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-11/packages.png\" alt=\"Packages Overview\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"issues-details\"><a class=\"anchor\" href=\"#issues-details\"></a>Issues Details</h3>\n<div class=\"paragraph\">\n<p>The set of reported issues is shown in a modern and responsive table. The table is loaded on demand using an Ajax\ncall. It provides the following features:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Pagination</strong>: the number of issues is subdivided into several pages which can be selected by using the provided page\nlinks. Note that currently the pagination is done on the client side, i.e. it may take some time to obtain the whole table of\nissues from the server.</p>\n</li>\n<li>\n<p><strong>Sorting</strong>: the table content can be sorted by clicking on ony of the table columns.</p>\n</li>\n<li>\n<p><strong>Filtering, Searching</strong>: you can filter the shown issues by entering some text in the search box.</p>\n</li>\n<li>\n<p><strong>Content Aware</strong>: columns are only shown if there is something useful to display. I.e., if a tool does not report an\nissues category, then the category will be automatically hidden.</p>\n</li>\n<li>\n<p><strong>Responsive</strong>: the layout should adapt to the actual screen size.</p>\n</li>\n<li>\n<p><strong>Details</strong>: the details message for an issue (if provided by the corresponding static analysis tool) is shown as\nchild row within the table.</p>\n</li>\n</ul>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2018-09-11/details.png\" alt=\"Details\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"remote-api\"><a class=\"anchor\" href=\"#remote-api\"></a>Remote API</h3>\n<div class=\"paragraph\">\n<p>The plugin provides two REST API endpoints.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"summary-of-the-analysis-result\"><a class=\"anchor\" href=\"#summary-of-the-analysis-result\"></a>Summary of the analysis result</h4>\n<div class=\"paragraph\">\n<p>You can obtain a summary of a particular analysis report by using the URL <code>[tool-id]/api/xml</code>\n(or <code>[tool-id]/api/json</code>). The summary contains the number of issues, the quality gate status, and all\ninfo and error messages.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"details-of-the-analysis-result\"><a class=\"anchor\" href=\"#details-of-the-analysis-result\"></a>Details of the analysis result</h4>\n<div class=\"paragraph\">\n<p>The reported issues are also available as REST API. You can either query all issues or only the\nnew, fixed, or outstanding issues. The corresponding URLs are:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>[tool-id]/all/api/xml</code>: lists all issues</p>\n</li>\n<li>\n<p><code>[tool-id]/fixed/api/xml</code>: lists all fixed issues</p>\n</li>\n<li>\n<p><code>[tool-id]/new/api/xml</code>: lists all new issues</p>\n</li>\n<li>\n<p><code>[tool-id]/outstanding/api/xml</code>: lists all outstanding issues</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"how-you-can-help\"><a class=\"anchor\" href=\"#how-you-can-help\"></a>How You Can Help</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I hope these new features are useful for everyone! Please download or install this new release and test it in your jobs:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Convert some of your jobs to the new API and test the new (and old) features (based on your requirements).</p>\n</li>\n<li>\n<p>Read all labels carefully, I’m not a native speaker so some descriptions might be misleading or incorrect.</p>\n</li>\n<li>\n<p>Check the new URLs and names of the parsers, see list of\n<a href=\"https://github.com/jenkinsci/warnings-plugin/blob/master/SUPPORTED-FORMATS.md\">supported report formats</a>. These\ncan&#8217;t be changed after the beta testing.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>If you find a problem, incorrect phrase, typo, etc. please report a bug in Jira (or even better: file a PR in GitHub).</p>\n</div>\n<div class=\"paragraph\">\n<p>This has been a brief overview of the new features of the Warnings plugin in Jenkins. For more, be sure to check out my\n<a href=\"https://sched.co/F9NZ\">talk</a> at \"DevOps World | Jenkins World\" where I show more details of the Warnings plugin!</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Come see Ullrich Hafner and many other Jenkins experts and contributors at\n<a href=\"https://www.cloudbees.com/devops-world\">DevOps World | Jenkins World</a> on September 16-19th,\nregister with the code <code>JWFOSS</code> for a 30% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>","id":"023ce63a-1296-5fa9-b1fd-4c4141fdc95b","title":"Warnings Plugin 5.0 (White Mountain) Public Beta","date":"2018-09-11T00:00:00.000Z","slug":"/blog/2018/09/11/speaker-blog-warnings-plugin/","links":{"discourse":""},"authors":[]}},"pageContext":{"next":"/blog/2018/09/12/2018-community-survey/","previous":"/blog/2018/09/10/scaling-network-connections/","id":"023ce63a-1296-5fa9-b1fd-4c4141fdc95b"}},
    "staticQueryHashes": ["1271460761","3649515864"]}