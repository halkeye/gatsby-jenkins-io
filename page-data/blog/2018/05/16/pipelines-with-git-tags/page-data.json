{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2018/05/16/pipelines-with-git-tags/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>One common pattern for automated releases I have seen and used relies on Git\ntags as the catalyst for a release process. The immutable nature of releases\nand the immutable nature of tags can definitely go hand in hand, but up until\nfew months ago Jenkins Pipeline was not able to trigger effectively off of Git\ntags.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this post I want to briefly share how to use tags to drive behaviors in\nJenkins Pipeline. Consider the following contrived <code>Jenkinsfile</code>, which\ncontains the three basic stages of Build, Test, and Deploy:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">pipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                sh 'make package'\n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'make check'\n            }\n        }\n        stage('Deploy') {\n            when { tag \"release-*\" }\n            steps {\n                echo 'Deploying only because this commit is tagged...'\n                sh 'make deploy'\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Of particular note is the\n<a href=\"/doc/book/pipeline/syntax/#when\"><code>when</code></a>\ncondition on the \"Deploy\" stage which is applying the <code>tag</code> criteria. This\nmeans the stage would only execute when the Pipeline has been triggered from a\ntag in Git matching the <code>release-*</code> Ant-style wildcard.</p>\n</div>\n<div class=\"paragraph\">\n<p>In practice, this means that all pull requests, and branch-based Pipeline Runs\nresult in the stage being skipped:</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/pipeline-tags/not-deployed.png\" alt=\"Not Deployed!\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When I push a <code>release-1.0</code> tag, the Pipeline will then be triggerd and run the\n\"Deploy\" stage:</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/pipeline-tags/deployed.png\" alt=\"Deployed!\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Out of the box, Pipelines won&#8217;t trigger off of the presence of tags, which\nmeans that a Multibranch Pipeline must have a configuration update to know that\nit must Discover Tags.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"configuring\"><a class=\"anchor\" href=\"#configuring\"></a>Configuring</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>From the configuration screen of a Multibranch Pipeline (or GitHub Organization\nFolder), Discovering tags can be enabled by adding the appropriate \"Behavior\"\nto the Branch Source configuration:</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/pipeline-tags/branch-source.png\" alt=\"Configuring the Multibranch Pipeline\">\n</div>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>With these changes, the <code>Jenkinsfile</code> in the tagged versions of my source\nrepository can now drive distinct deployment behavior which is not otherwise\nenabled in the Pipeline.</p>\n</div>\n</div>\n</div>","id":"33bc69d0-dfa9-5c28-bfe5-208f3373b7f9","title":"When using tags in Jenkins Pipeline","date":"2018-05-16T00:00:00.000Z","slug":"/blog/2018/05/16/pipelines-with-git-tags/","authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler/","twitter":"agentdero"}]}},"pageContext":{"id":"33bc69d0-dfa9-5c28-bfe5-208f3373b7f9"}},
    "staticQueryHashes": ["1271460761","3649515864"]}