{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2019/05/30/becoming-contributor-newbie-tickets/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>Two months ago I published an <a href=\"https://jenkins.io/blog/2019/03/29/becoming-contributor-intro/\">introductory article</a> on\nthe journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about\nthe multiple ways in which we can participate and contribute. Then, a first&#8212;&#8203;basic&#8212;&#8203;contribution I made to the site\nrepository was described.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"getting-started-with-tickets-and-processes\"><a class=\"anchor\" href=\"#getting-started-with-tickets-and-processes\"></a>Getting started with tickets and processes</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"beginners-guide-to-contributing-and-jenkins-jira\"><a class=\"anchor\" href=\"#beginners-guide-to-contributing-and-jenkins-jira\"></a>Beginners guide to contributing and Jenkins Jira</h3>\n<div class=\"paragraph\">\n<p>Reviewing the <a href=\"https://jenkins.io/doc/developer/\">developer section</a> in jenkins.io is probably the best starting point, and a\nreference link to keep handy. The <a href=\"https://wiki.jenkins.io/display/JENKINS/Beginners+Guide+to+Contributing\">beginners guide to contributing to Jenkins</a>\ncan also be useful, since it points to different repositories, tools (such as the issue tracker) and governance documents.\nBesides, it describes best practices for commit messages, code style conventions, PR guidelines, etc.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once we get a general understanding of the former and want to actually start coding, we may get stuck trying to come up\nwith something to work on.</p>\n</div>\n<div class=\"paragraph\">\n<p>Visiting the <a href=\"https://issues.jenkins.io/projects/JENKINS/issues\">Jenkins issue tracker</a>, feels like the natural next\nstep, since it is full of potential bugs and enhancements that have already been reported by the community. However, it\nis quite easy to feel overwhelmed by the possibilities listed there. Bear in mind that in a 10+-year-old project like\nthis, most of the things that are reported are tricky for a newcomer to work on. For that reason, filtering by\n<a href=\"https://issues.jenkins.io/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20component%20%3D%20core%20AND%20labels%20in%20(newbie-friendly)\">newbie-friendly tickets</a> is probably\nthe best idea.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2019-05-30-becoming-contributor/list-newbie-tickets.png\" alt=\"list newbie tickets\">\n</div>\n<div class=\"title\">Figure 1. Screenshot displaying the list of newbie-friendly tickets in the Jenkins Jira</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"selecting-a-ticket\"><a class=\"anchor\" href=\"#selecting-a-ticket\"></a>Selecting a ticket</h3>\n<div class=\"paragraph\">\n<p>In my case, I spent some time reviewing the <code>newbie-friendly</code> tickets, until <a href=\"https://issues.jenkins.io/browse/JENKINS-56477\">I found one</a>\nthat seemed interesting to me and also looked like something I would be able to fix:</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2019-05-30-becoming-contributor/jenkins-newbie-jira-ticket-selected.png\" alt=\"jenkins newbie jira ticket selected\">\n</div>\n<div class=\"title\">Figure 2. Screenshot of the ticket I decided to work on</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"processes\"><a class=\"anchor\" href=\"#processes\"></a>Processes</h3>\n<div class=\"paragraph\">\n<p>At this stage, when we have decided to take ownership of a ticket, it’s a good practice to let the rest of the community\nknow that we are planning to start working on it. We can do so easily, by assigning the ticket to ourselves (see the\n“<em>Assign</em>” button below the ticket summary).</p>\n</div>\n<div class=\"paragraph\">\n<p>Assigning the ticket to ourselves in the Jenkins Jira will allow any other contributors to know that we are planning to\ntake care of the ticket; and in case they are also interested in contributing to it, they will know who to reach if they\nwant to coordinate work or ask for status. That said, it is worth mentioning that assigning a ticket to yourself does\nnot mean that other contributors cannot work on it from then onwards. Jenkins is an open-source project and anyone is\nwelcome to create their own PRs, so anybody can propose their own solution to the ticket. But as you can guess, if the\nticket is assigned to somebody, most people will probably reach the assignee before starting to work on it.</p>\n</div>\n<div class=\"paragraph\">\n<p>Related to the former, it is also important to bear in mind that we should not postpone work on the ticket for too long\nonce we have assigned the ticket to ourselves. Other potential contributors might be ignoring the ticket because they\nsee yourself assigned to it.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once we are about to actually start working on the ticket, it is also a good practice to click the “<em>Start Progress</em>”\nbutton. This action will change the status to “<em>In progress</em>”, signaling to the community that we are currently working\non this particular ticket.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"setting-up-the-necessary-stuff-on-our-computer\"><a class=\"anchor\" href=\"#setting-up-the-necessary-stuff-on-our-computer\"></a>Setting up the necessary stuff on our computer</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"configuring-installing-and-testing\"><a class=\"anchor\" href=\"#configuring-installing-and-testing\"></a>Configuring, installing and testing</h3>\n<div class=\"paragraph\">\n<p>As described in the <a href=\"https://jenkins.io/blog/2019/03/29/becoming-contributor-intro/\">first article of this journey</a>, the\ninitial step to start contributing to a particular repository is to fork it to our GitHub account, and then clone it to\nour local computer.</p>\n</div>\n<div class=\"paragraph\">\n<p>As usual, in the Jenkins core repository the <a href=\"https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md\">CONTRIBUTING file</a>\ndescribes the necessary steps to get the repository working locally. This includes installing the necessary development\ntools: Java Development Kit (<em><a href=\"https://adoptopenjdk.net/\">OpenJDK</a> is the recommended choice</em>), Maven and any IDE supporting\nMaven projects. Note that instructions to install JDK and Maven are linked in the contributing guidelines.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once we have all the necessary tools installed and configured, we are ready to <a href=\"https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#building-and-debugging\">build Jenkins locally</a>\nand also to <a href=\"https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#testing-changes\">run tests</a>.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"getting-down-to-business\"><a class=\"anchor\" href=\"#getting-down-to-business\"></a>Getting down to business</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"reviewing-ticket-details\"><a class=\"anchor\" href=\"#reviewing-ticket-details\"></a>Reviewing ticket details</h3>\n<div class=\"paragraph\">\n<p>Now that I was ready to start working on the ticket, I had to review it in more detail, to fully understand the problem.</p>\n</div>\n<div class=\"paragraph\">\n<p>The description of the ticket I was planning to work on included two links. The first one was to\n<a href=\"https://github.com/jenkinsci/jenkins/pull/3715#issuecomment-470873111\">a screenshot that showed the actual bug</a>. It showed\nhow several non-compatible plugins were being selected when clicking “<em>All</em>”, even though the intended behavior was to\nonly select the compatible plugins. The second link was <a href=\"https://github.com/jenkinsci/jenkins/blob/master/core/src/main/resources/hudson/PluginManager/table.jelly#L108&#8230;&#8203;L120\">a reference to a code fragment</a>\nthat showed other validations that had to be taken into account when checking if a plugin update was compatible or not\nwith the current installation.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"reproducing-the-issue-locally\"><a class=\"anchor\" href=\"#reproducing-the-issue-locally\"></a>Reproducing the issue locally</h3>\n<div class=\"paragraph\">\n<p>Even though I had now understood the issue in better detail, I had not seen it myself live yet, so it seemed to me that\nthe next logical step was to reproduce it locally.</p>\n</div>\n<div class=\"paragraph\">\n<p>To reproduce the issue locally in our computer, we can either use the local <code>war</code> file that we can generate by\n<a href=\"https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#building-and-debugging\">building Jenkins from the source code</a>\nor we can download the <a href=\"https://jenkins.io/download/\">latest Jenkins version</a> available and run it locally. When I worked\non this ticket, the latest available version was <code>2.172</code> and, when I built if from the sources I saw version <code>2.173-SNAPSHOT</code>,\nwhich was the next version, in which the community was already working on.</p>\n</div>\n<div class=\"paragraph\">\n<p>In general it is a good idea to reproduce bugs locally, not only to get a better understanding, but also to make sure\nthey are actual issues. It could always be an issue happening only on the reporter’s end (e.g. some user misconfiguration).\nOr it could be a ticket referencing an old issue that has been fixed already. This latest possibility didn’t sound that\nstrange to me, since the ticket was one month old. It could have been handled by someone else in the meantime, without\nnoticing the ticket existed. Or the contributor might have forgotten to update the ticket in the issue tracker after the\nfix was committed.</p>\n</div>\n<div class=\"paragraph\">\n<p>So, for all the reasons above, I ran the latest Jenkins version locally. From a terminal, I went to the\nfolder in which the war file was placed, and ran <code>java -jar jenkins.war</code>, which starts Jenkins locally on <a href=\"http://localhost:8080\" class=\"bare\">http://localhost:8080</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>From the home page I navigated to the Plugin Manager (clicking the “<em>Manage Jenkins</em>” link in the left hand side and\nthen selecting “<em>Manage Plugins</em>” in the list).</p>\n</div>\n<div class=\"paragraph\">\n<p>In the Manage Plugins page, the list of plugin updates appears. In my case, since I re-used an old <code>JENKINS_HOME</code>\nfrom an older installation, several plugins showed up in the list, requiring updates. That allowed me to test the behavior\nthat was supposed to be failing.</p>\n</div>\n<div class=\"paragraph\">\n<p>When I clicked on the “Select all” option at the bottom, this is what I got:</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2019-05-30-becoming-contributor/jenkins-plugin-manager-updates-selected-bottom.png\" alt=\"jenkins plugin manager updates selected bottom\">\n</div>\n<div class=\"title\">Figure 3. Screenshot showing the error, reproduced locally, after clicking “Select All”</div>\n</div>\n<div class=\"paragraph\">\n<p>As it had been reported in the ticket, the behavior was inconsistent. In a previous version, the behavior of the “<em>All</em>”\nselector had been changed (with the best intent), aiming to only check the compatible plugins. However, as can be seen\nin the screenshot, the behavior was not the expected one. Now, neither “all” nor “only compatible” plugins were being\nselected, since some plugins with compatibility issues were also being checked, unintentionally.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"figuring-out-a-fix\"><a class=\"anchor\" href=\"#figuring-out-a-fix\"></a>Figuring out a fix</h3>\n<div class=\"paragraph\">\n<p>When reading the conversation in the original PR in which the behavior of the “<em>All</em>” selector had been changed, I saw a\nsuggestion of having a separate “<em>Compatible</em>” selector, thus leaving the “<em>All</em>” selector with the traditional behavior.\nI liked the idea, so I decided to include it as part of my proposed change.</p>\n</div>\n<div class=\"paragraph\">\n<p>At this stage, I had a clear picture of the different things I needed to change. These included: 1) The UI, to add a new\nselector for “Compatible” plugins only, 2) the JS code that applied the changes to the interface when the selectors were\nclicked and 3) probably the back-end method that was determining if a plugin was compatible or not.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"applying-the-change\"><a class=\"anchor\" href=\"#applying-the-change\"></a>Applying the change</h3>\n<div class=\"paragraph\">\n<p>As usual, and as it is also recommended in the contributing guidelines, I created a separate feature branch to work on\nthe ticket.</p>\n</div>\n<div class=\"paragraph\">\n<p>After reviewing the code, I spent some time figuring out which pieces I needed to change, both in the back-end and also\nin the front-end. For more details about the changes I had to make, you can take a look at the <a href=\"https://github.com/jenkinsci/jenkins/pull/3985/files\">changes in my PR</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>As a basic summary, I learned that the classic Jenkins UI was built using <a href=\"https://commons.apache.org/proper/commons-jelly/tutorial.html\">Jelly</a>\nand, after understanding its basics, I modified the <code>index.jelly</code> file to include the new selector, assigning the\nfunction that checked the compatible plugins to this new selector, and re-using the existing “toggle” function to set\nall checkboxes to true in the case of “<em>All</em>”. I also had to modify the behavior of the <code>checkPluginsWithoutWarnings</code>\nJavaScript function, to un-check the incompatible ones, since there was now an actual “<em>All</em>” selector that was not there\npreviously, and that un-check case was not being taken into account. Then, I created a new back-end Java method\n<code>isCompatible</code>, inside the <code>UpdateSite.java</code> class, which now calls all the different methods that check different\ncompatibilities and returns the combined boolean result. For this change, I included an automated test to verify the\ncorrect behavior of the method, contributing to the test coverage of the project. Finally, I modified the <code>table.jelly</code>\nfile to call the new back-end method from the UI, replacing the existing one that was not taking all cases into account.</p>\n</div>\n<div class=\"paragraph\">\n<p>As you can see, the change involved touching different technologies, but even if you face a similar situation in which\nyou are not familiar with some of them, my advice would be carry on, don’t let that stop you. As software engineers, we\nshould <a href=\"https://github.com/romenrg/evergreen-skills-developers\">focus on our evergreen skills</a>, rather than on knowing\nspecific technologies; adapting to whatever framework we have to use at a given moment, learning whatever we need about\nthe new technology to complete the task and applying cross-framework principles and best practices to provide a quality\nsolution.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"result\"><a class=\"anchor\" href=\"#result\"></a>Result</h3>\n<div class=\"paragraph\">\n<p>After the changes described above, the resulting UI includes a new option, and the corresponding behaviors of the three\nselectors work as expected:</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2019-05-30-becoming-contributor/fixed-select-compatible.png\" alt=\"fixed select compatible\">\n</div>\n<div class=\"title\">Figure 4. Screenshot of the new version, displaying the behavior achieved by clicking the new “Compatible” selector</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"publishing-the-change\"><a class=\"anchor\" href=\"#publishing-the-change\"></a>Publishing the change</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"submitting-a-pull-request\"><a class=\"anchor\" href=\"#submitting-a-pull-request\"></a>Submitting a Pull Request</h3>\n<div class=\"paragraph\">\n<p>In the contributing guidelines of the Jenkins core repository there is also a section about <a href=\"https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#proposing-changes\">proposing changes</a>,\nwhich describes the necessary steps that have to be followed in order to create a Pull Request (PR) with our change.</p>\n</div>\n<div class=\"paragraph\">\n<p>Furthermore, there is a <a href=\"https://github.com/jenkinsci/jenkins/blob/master/.github/PULL_REQUEST_TEMPLATE.md\">PR template</a> in\nthe repository, which will be loaded automatically when creating a new PR and that will serve as a basis for us to provide\nthe necessary information for the reviewers. We are expected to: include a link to the ticket, list the proposed changelog\nentries describing our changes, complete the submitter checklist and add mentions to the desired reviewers (if any).</p>\n</div>\n<div class=\"paragraph\">\n<p>In my case, <a href=\"https://github.com/jenkinsci/jenkins/pull/3985#issue-270291185\">I followed the template when creating my PR</a>,\ncompleting all sections. I linked the Jira ticket, provided two proposed changelog entries, completed the submitter\nchecklist and added three desired reviewers (explaining why I thought their reviews would be valuable). I also linked\nthe original PR that was referenced in the ticket, to provide further context.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2019-05-30-becoming-contributor/pr-created.png\" alt=\"pr created\">\n</div>\n<div class=\"title\">Figure 5. Screenshot of the PR I submitted</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"the-approve-and-merge-process\"><a class=\"anchor\" href=\"#the-approve-and-merge-process\"></a>The approve and merge process</h3>\n<div class=\"paragraph\">\n<p>As stated in the contributing guidelines, typically two approvals are needed for the PR to be merged; and it can take\nfrom a few days to a couple of weeks to get them. Sometimes, one approval from a reviewer and a 1-week delay without\nextra reviews is considered enough to set the PR as <code>ready-for-merge</code>. However, both the time-to-merge and the number\nof approvals necessary might vary, depending on the complexity of the change or the area of Jenkins core that it affects.</p>\n</div>\n<div class=\"paragraph\">\n<p>After the necessary approvals have been received, a Jenkins core maintainer will set the PR as  <code>ready-for-merge</code>, which\nwill lead to it being merged into the master branch when one of the following releases are being prepared.</p>\n</div>\n<div class=\"paragraph\">\n<p>In my case, I received a review by Daniel (the reporter of the ticket and one of my “desired reviewers”) the very day I\nsubmitted the PR (April 14th). He made several very useful suggestions, which led to changes from my side. After those\nchanges, Daniel made minor remarks and my PR got another review, which was its first approval. After a week had passed\nwithout further news, I added the remaining minor suggestions from Daniel and a few days later received another approval,\nto which Daniel’s final approval was added, leading the PR to be labeled <code>ready-for-merge</code>, being later merged the same\nday (April 26th).</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2019-05-30-becoming-contributor/pr-merged.png\" alt=\"pr merged\">\n</div>\n<div class=\"title\">Figure 6. Screenshot of the final state of the PR, after being merged</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"release\"><a class=\"anchor\" href=\"#release\"></a>Release</h3>\n<div class=\"paragraph\">\n<p>For every new release, repository maintainers will select a set of PRs that have already been labeled <code>ready-for-merge</code>,\nmerge them to master, prepare changelogs (often using the suggestions included in the PRs by the authors) and proceed with\nthe creation of the new release. There is no additional action required from Pull Request authors at this point.</p>\n</div>\n<div class=\"paragraph\">\n<p>Every week a new version of Jenkins is released, so when your PR is merged, your changes will&#8212;&#8203;most likely&#8212;&#8203;become part\nof the following weekly release of Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Eventually, your changes will also reach the <a href=\"https://jenkins.io/download/lts/\">Long-term support (LTS) release</a>, which is\na different release line, aimed for more conservative users. This release line gets synced with the weekly release by\npicking, every 12 weeks, a relatively recent weekly release as baseline for the new LTS release. In between, intermediate\nLTS releases are created only to include important bug fixes, cherry-picked from the weekly releases. New features are\ntypically delayed until the next baseline for the LTS release is defined.</p>\n</div>\n<div class=\"paragraph\">\n<p>Regarding the example described in this post, <strong>it was released in Jenkins <code>2.175</code></strong> (weekly release), soon after being\nmerged. And will probably be included in the next LTS, which should be released next month (June 2019).</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"done\"><a class=\"anchor\" href=\"#done\"></a>Done!</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>And that’s it! We have now covered the whole lifecycle of a new proposed change to Jenkins core. We have reviewed the\nprocess from the very beginning, picking a ticket from the Jenkins issue tracker; all the way to the end, having our\nchange released in a new Jenkins version.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you have never contributed but are willing to do so, I hope this article motivates you to go back to the list of\n<a href=\"https://issues.jenkins.io/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20component%20%3D%20core%20AND%20labels%20in%20(newbie-friendly)\"><code>newbie-friendly</code> tickets</a>, find one that looks interesting to you, and follow the steps described above, until you see\nyour own change released in a new Jenkins version.</p>\n</div>\n<div class=\"paragraph\">\n<p>Remember, don’t try to solve a complicated issue as your first ticket, there are plenty of easier ways in which you can\ncontribute, and every little helps!</p>\n</div>\n</div>\n</div>","id":"0cba81fa-0a2a-5225-8fdf-6ce66f9aa4d5","title":"Becoming a Jenkins contributor: Newbie-friendly tickets","date":"2019-05-30T00:00:00.000Z","slug":"/blog/2019/05/30/becoming-contributor-newbie-tickets/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":null},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/author/romenrg","twitter":"romenrg"}]}},"pageContext":{"next":"/blog/2019/06/03/DevOps-World-Jenkins-World-2019-San-Francisco-Agenda-is-Live/","previous":"/blog/2019/05/22/outreachy-audit-log-project/","id":"0cba81fa-0a2a-5225-8fdf-6ce66f9aa4d5"}},
    "staticQueryHashes": ["1271460761","3649515864"]}