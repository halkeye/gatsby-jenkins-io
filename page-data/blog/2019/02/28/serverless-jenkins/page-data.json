{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2019/02/28/serverless-jenkins/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nMy job is to work on a <a href=\"https://github.com/sap/cloud-s4-sdk-pipeline\">Jenkins pipeline</a> specific to SAP S/4HANA extensions running on SAP Cloud Platform.\nSee the <a href=\"https://blogs.sap.com/2019/02/11/deep-dive-experimental-serverless-cicd-with-sap-s4hana-cloud-sdk-continuous-delivery-toolkit/\">original blog post here</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins is a powerful tool for automation, and we heavily rely on the codified pipeline syntax introduced in Jenkins 2.</p>\n</div>\n<div class=\"paragraph\">\n<p>With regards to operations, we minimized the need for care with the <a href=\"https://blogs.sap.com/2017/09/20/continuous-integration-and-delivery/\">cx-server life-cycle management</a> greatly.\nStill, you need to run that Jenkins server.\nThis means you’ll need to update the server and plugins (simplified by our life-cycle management), and scale as the number of builds grows.\nUser administration and backups are also required in a productive setup.</p>\n</div>\n<div class=\"paragraph\">\n<p>Is this really required, or is there an alternative approach?</p>\n</div>\n<div class=\"paragraph\">\n<p>In this blog post, I’ll introduce a prototype I did to get rid of that long running pet Jenkins instance.\nRather, we’ll have cattle Jenkins instances, created and destroyed on demand.\n“Serverless” Jenkins in the sense that we don’t have to provision the server for Jenkins to run.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\nThe setup described in this post is highly experimental. I encourage you to try this out in a demo project, but be very cautious until further notice to use this on productive code. In this proof of concept, I’ll use a public GitHub repository and the free open-source offering by TravisCI. This setup is not suitable for commercial software.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>The pets vs cattle metaphor describes how approaches in managing servers differ.\nWhile you care for pets and treat them when they are unwell, cattle can be easily replaced.\nYour traditional Jenkins server is a pet because it is often configured manually, and replacing it is a major effort.\nFor more background on this metaphor, <a href=\"https://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/\">click here</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Before we’re getting into the technical details, let’s discuss why we would want to try this out in the first place.\nRunning Jenkins on arbitrary CI/CD services, such as TravisCI seems very odd on first sight.\nOn such services you’ll usually invoke your build tools like Maven or npm in a small script, and that will do your build.\nBut in the enterprise world, both inside SAP and in the community, Jenkins has a huge market share.\nThere are many shared libraries for Jenkins, providing pre-made build steps which would be expensive to re-implement for other platforms.\nAdditionally, SAP S/4HANA Cloud SDK Pipeline is a ready to use pipeline based on Jenkins where you as the developer of an SAP S/4HANA extension application do not need to write and maintain the pipeline yourself.\nThis means reduced costs and effort for you, while the quality of your application improves, for example due to the many <a href=\"https://github.com/SAP/cloud-s4-sdk-pipeline/blob/master/doc/pipeline/cloud-qualities.md\">cloud qualities</a> which are checked out of the box.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2019-02-22/green.png\" alt=\"green\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Let me show you an experiment to see if we can get the best of both worlds.\nThe goal is to get all the quality checks and the continuous delivery that the SAP S/4HANA Cloud SDK Pipeline provides us, without the need for a pet Jenkins server.</p>\n</div>\n<div class=\"paragraph\">\n<p>How do we do that? The Jenkins project has a project called <a href=\"https://github.com/jenkinsci/jenkinsfile-runner\">Jenkinsfile runner</a>.\nIt is a command line tool that basically boots up a stripped-down Jenkins instance, creates and runs a single job, and throws away that instance once the job is done. As you might guess, there is some overhead in that process.\nThis will add about 20 seconds to each build, which I found to be surprisingly fast, considering the usual startup time of a Jenkins server.\nFor convenient consumption, we have packaged <a href=\"https://hub.docker.com/r/ppiper/jenkinsfile-runner\">Jenkinsfile runner as a Docker image</a> which includes the Jenkins plugins that are required for SAP S/4HANA Cloud SDK Pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>We also utilize the quite new <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code plugin for Jenkins</a>, which allows to codify the Jenkins configuration as YAML files.\nAs you will see in a minute, both Jenkinsfile runner and Configuration as Code are a perfect match.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to follow along, feel free to use our provided <a href=\"https://github.com/sap/cloud-s4-sdk-book\">Address Manager example application</a>.\nYou may fork the repository, or create your own repository and activate it on TravisCI.</p>\n</div>\n<div class=\"paragraph\">\n<p>Based on the existing Address Manager, let’s add a small <code>.travis.yml</code> file to instruct the build:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">language: minimal\nservices:\n- docker\nscript: docker run -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:/workspace -v /tmp -e CASC_JENKINS_CONFIG=/workspace/jenkins.yml -e CF_PW -e ERP_PW -e BRANCH_NAME=$TRAVIS_BRANCH ppiper/jenkinsfile-runner</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The script line has quite a few things going on, let’s see what is there.</p>\n</div>\n<div class=\"paragraph\">\n<p>We run a Docker container based on the <code>ppiper/jenkinsfile-runner</code> image.\nWe need to mount the Docker socket, so that our container can spawn sibling containers for tooling such as Maven or the CloudFoundry CLI.\nWe also need to mount the current directory (root of our project) to <code>/workspace</code>, and tell the Jenkins Configuration as Code Plugin where to find the configuration file.\nWe’ll come to that file in a minute. Also be sure to pass your secret variables here.\nTravis will mask them, so they are not in plain text in your build log.\nTake note to change the names of the variables according to your requirements.\nYou might wonder that we need a <code>BRANCH_NAME</code> environment variable.\nThis is required for the Pipeline to check if you’re working on the “productive branch”, where a productive deployment to SAP Cloud Platform is supposed to happen.\nIf you omit passing this variable, the pipeline will still run but never in the productive mode, and hence not deploy to SAP Cloud Platform.</p>\n</div>\n<div class=\"paragraph\">\n<p>You might need some secrets in the build, for example in integration tests or for deployment to SAP Cloud Platform.\nYou can make use of the <a href=\"https://github.com/travis-ci/travis.rb#readme\">travis command line tool</a> to encrypt them on your local machine as <a href=\"https://docs.travis-ci.com/user/encryption-keys/\">documented here</a>.\nTake care that this might add your secret in plain text to the shell history on your machine.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">travis encrypt CF_PW=supersecret --add\ntravis encrypt ERP_PW=alsosupersecret --add</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This command will add a line to your <code>.travis.yml</code> file with the encrypted secret value.\nBe sure to commit this change.\nAlso take note of the name of your variable, which must match the environment parameter, and your Jenkins configuration.\nYou should be aware of <a href=\"https://docs.travis-ci.com/user/best-practices-security/\">this TravisCI document on secrets</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>We’ll also need to add a <code>jenkins.yml</code> file to our project.\nHere we need to configure two shared libraries which are required for the SAP S/4HANA Cloud SDK Pipeline, and the credentials that are required for our pipeline.\nBe sure not to put your secrets in plain text in here, but use the variables you used before via the travis cli tool.\nTravisCI will decrypt the password on the fly for you.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">jenkins:\n  numExecutors: 10\nunclassified:\n  globallibraries:\n    libraries:\n    - defaultVersion: \"master\"\n      name: \"s4sdk-pipeline-library\"\n      retriever:\n        modernSCM:\n          scm:\n            git:\n              remote: \"https://github.com/SAP/cloud-s4-sdk-pipeline-lib.git\"\n    - defaultVersion: \"master\"\n      name: \"piper-library-os\"\n      retriever:\n        modernSCM:\n          scm:\n            git:\n              remote: \"https://github.com/SAP/jenkins-library.git\"\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"MY-ERP\"\n              username: MY_USER\n              password: ${ERP_PW}\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"cf\"\n              username: P12344223\n              password: ${CF_PW}</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You might add more configuration to this file <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/README.md#initial-configuration\">as you need it</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Commit both files to your repo and push.\nIf the travis build works, you’ll see the build integration on GitHub.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2019-02-22/in-progress.png\" alt=\"in progress\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>On travis, you can follow the progress of your build live, and get the full text log of your Jenkins build.\nIf all went well, you will be greeted with a green build after a few minutes.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2019-02-22/log.png\" alt=\"log\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Congratulations. You’re running a serverless Jenkins build with all the qualities checked by the SAP S/4HANA Cloud SDK Pipeline, without hosting your own Jenkins instance.</p>\n</div>\n<div class=\"paragraph\">\n<p>Keep in mind this is a proof of concept at this point.\nThe serverless Jenkins ecosystem is currently evolving, and neither Jenkinsfile runner, nor Configuration as Code are in a mature state as of February 2019.\nOne downside of this approach is that we lose the Jenkins user interface, so we can’t see our pipeline in blue ocean, and we don’t get the nice build summary.\nWe can get the whole log output from TravisCI, so this can be mitigated, but this is arguable not the best user experience.</p>\n</div>\n<div class=\"paragraph\">\n<p>But on the contrary, we don’t have to care for our pet Jenkins, we don’t need to update plugins or backup the configuration or build logs.</p>\n</div>","id":"9905a0f3-35a6-5676-b4b5-b69b913d1b36","title":"Run your Jenkins pipeline without operating a Jenkins instance","date":"2019-02-28T00:00:00.000Z","slug":"/blog/2019/02/28/serverless-jenkins/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"fwilhe","html":"<div class=\"paragraph\">\n<p>Software Developer working on CI/CD at SAP Innovation Center in Potsdam. I am employed by SAP, but thoughts here are my own.\n---</p>\n</div>","id":"fwilhe","irc":null,"linkedin":null,"name":"Florian Wilhelm","slug":"/blog/author/fwilhe","twitter":"fwilhe"}]}},"pageContext":{"next":"/blog/2019/03/01/devops-world-jenkins-world-cfp-open/","previous":"/blog/2019/02/26/jenkins-alexa-voice-controlled-cicd/","id":"9905a0f3-35a6-5676-b4b5-b69b913d1b36"}},
    "staticQueryHashes": ["1271460761","3649515864"]}