{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2019/02/21/credentials-masking/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>In the Jenkins project, we ask that people <a href=\"/security/#reporting-vulnerabilities\">report security issues to our private issue tracker</a>.\nThis allows us to review issues and prepare fixes in private, often resulting in better, safer security fixes.</p>\n</div>\n<div class=\"paragraph\">\n<p>As a side effect of that, we also learn about common misconceptions and usability problems related to security in Jenkins.\nThis post is intended to address one of those:\nThe goal and limitations of credentials masking.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"the-problem\"><a class=\"anchor\" href=\"#the-problem\"></a>The Problem</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>One very common example of that is the role of credentials masking in Jenkins, typically involving a pipeline snippet that looks like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Scripted //\nwithCredentials([usernamePassword(credentialsId: 'topSecretCredentials', passwordVariable: 'PWD', usernameVariable: 'USR')])\n  sh './deploy.sh' // requires PWD and USR to be set\n}\n// Declarative //</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Credentials that are in scope are made available to the pipeline without limitation.\nTo prevent accidental exposure in the build log, credentials are masked from regular output, so an invocation of <code>env</code> (Linux) or <code>set</code> (Windows), or programs printing their environment or parameters would not reveal them in the build log to users who would not otherwise have access to the credentials.</p>\n</div>\n<div class=\"paragraph\">\n<p>The misconception here is that Jenkins will prevent other, perhaps deliberate ways to reveal the password.\nSome examples:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Scripted //\nwithCredentials([usernamePassword(credentialsId: 'topSecretCredentials', passwordVariable: 'PWD', usernameVariable: 'USR')])\n  sh 'echo $PWD | base64' // will print e.g. dDBwczNjcjN0Cg= which is trivially converted back to the top secret password\n}\n// Declarative //</pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Scripted //\nwithCredentials([usernamePassword(credentialsId: 'topSecretCredentials', passwordVariable: 'PWD', usernameVariable: 'USR')])\n  sh 'echo $PWD &gt; myfile'\n  archiveArtifacts 'myfile' // then browse archived artifacts from the Jenkins UI\n}\n// Declarative //</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Both of these snippets circumvent credentials masking in the build log, and show that people with control over the build script can use credentials in ways not necessarily intended or approved by admins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Obviously these are just the most straightforward examples illustrating the problem.\nOthers could involve the proc file system, sending it to an HTTP server in response to a 401 authentication challenge, embedding it in the (otherwise legitimate) build result, etc.</p>\n</div>\n<div class=\"paragraph\">\n<p>It would be great if Jenkins could allow the flexible use of credentials with no risk of exposing them through straightforward build script modifications, but realistically, it is impossible for Jenkins to police use of the credential by a build script without the support of a very specific environment setup (e.g. restrictive network configuration).</p>\n</div>\n<div class=\"paragraph\">\n<p>It should also be noted that credentials aren&#8217;t just at risk from users able to control the pipeline, typically by editing the <code>Jenkinsfile</code>.\nActual build scripts invoked by pipelines, either shell scripts as in the example above, or more standard build tools such as Maven (controlled by <code>pom.xml</code>) are just as much of a risk if they are run inside a <code>withCredentials</code> block, or executing on the same agent as another block that passed such credentials.</p>\n</div>\n<div class=\"paragraph\">\n<p>Disclosure of secrets can also happen inadvertently:\nJenkins will prevent <em>exact</em> matches of the password or other secret to appear in the log file.\nConsider that the secret may contain shell metacharacters that <code>bash +x</code> would escape by adding a <code>\\</code> before those characters.\nThe sequence of characters to be printed is no longer identical to the secret, so would not be masked.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"the-solution\"><a class=\"anchor\" href=\"#the-solution\"></a>The Solution</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Credentials can be defined in different scopes:\nCredentials defined on the root <em>Jenkins</em> store (the default) will be available to all jobs on the instance.\nThe only exception are credentials with <em>System</em> scope, intended for the global configuration only, for example, to connect to agents.\nCredentials defined in a folder are only available within that folder (transitively, i.e. also in folders inside this folder).</p>\n</div>\n<div class=\"paragraph\">\n<p>This allows defining sensitive credentials, such as deployment credentials, on specific folders whose contents only users trusted with those credentials are allowed to configure:\nDirectly in Jenkins using <a href=\"https://plugins.jenkins.io/matrix-auth\">Matrix Authorization Plugin</a> and by limiting write access to repositories defining pipelines as code.</p>\n</div>\n<div class=\"paragraph\">\n<p>Pipelines inside this folder can use the (e.g. deployment) credentials without limitation, while they&#8217;re inaccessible to pipelines outside the folder.\nThose would need to use the <a href=\"https://plugins.jenkins.io/pipeline-build-step\"><code>build</code> step</a> or similar approaches to invoke the pipelines inside the folder to deploy their output.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"#caveats\"></a>Caveats</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>While the previous section outlines a solution to the problem of restricting access to credentials, care needs to be taken so that credentials are not captured anyway.\nFor example, a deployment pipeline that allows its users to define where to deploy to as a build parameter might still be used to send credentials to a maliciously set up host to capture them.\n<a href=\"https://jenkins.io/blog/2018/05/15/incremental-deployment/\">A blog post explaining the design of some Jenkins project infrastructure</a> discusses some of these concerns around trust.</p>\n</div>\n<div class=\"paragraph\">\n<p>It should also be noted that credential domains are a UI hint only&#8201;&#8212;&#8201;defining a credential to only be valid for <code>github.com</code> does not actually prevent its use elsewhere.</p>\n</div>\n</div>\n</div>","id":"ee6f71b5-7195-56bb-8a9e-87e021747a53","title":"Limitations of Credentials Masking","date":"2019-02-21T00:00:00.000Z","slug":"/blog/2019/02/21/credentials-masking/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},"pageContext":{"next":"/blog/2019/02/26/jenkins-alexa-voice-controlled-cicd/","previous":"/blog/2019/02/17/remoting-cli-removed/","id":"ee6f71b5-7195-56bb-8a9e-87e021747a53"}},
    "staticQueryHashes": ["1271460761","3649515864"]}