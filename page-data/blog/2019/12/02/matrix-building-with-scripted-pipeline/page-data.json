{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2019/12/02/matrix-building-with-scripted-pipeline/",
    "result": {"data":{"blog":{"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#matrix-building-with-scripted-pipeline\">Matrix building with scripted pipeline</a></li>\n<li><a href=\"#screenshot-of-matrix-pipeline\">Screenshot of matrix pipeline</a></li>\n<li><a href=\"#adding-static-choices\">Adding static choices</a></li>\n<li><a href=\"#adding-dynamic-choices\">Adding dynamic choices</a></li>\n<li><a href=\"#full-pipeline-example-with-dynamic-choices\">Full pipeline example with dynamic choices</a></li>\n<li><a href=\"#background-how-does-it-work\">Background: How does it work?</a></li>\n<li><a href=\"#exposing-a-shared-library-pipeline-step\">Exposing a shared library pipeline step</a></li>\n<li><a href=\"#summary\">Summary</a></li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>With the recent announcement about matrix building you can perform\n<a href=\"https://jenkins.io/blog/2019/11/22/welcome-to-the-matrix/\">Matrix builds\nwith declarative pipeline</a>.  However, if you must use scripted pipeline, then\nI&#8217;m going to cover how to matrix build platforms and tools using scripted\npipeline.  The examples in this post are modeled after the declarative pipeline\nmatrix examples.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"matrix-building-with-scripted-pipeline\"><a class=\"anchor\" href=\"#matrix-building-with-scripted-pipeline\"></a>Matrix building with scripted pipeline</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following Jenkins scripted pipeline will build combinations across two\nmatrix axes.  However, adding more axes to the matrix is just as easy as adding\nanother entry to the <code>Map matrix_axes</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">// you can add more axes and this will still work\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\n@NonCPS\nList getMatrixAxes(Map matrix_axes) {\n    List axes = []\n    matrix_axes.each { axis, values -&gt;\n        List axisList = []\n        values.each { value -&gt;\n            axisList &lt;&lt; [(axis): value]\n        }\n        axes &lt;&lt; axisList\n    }\n    // calculate cartesian product\n    axes.combinations()*.sum()\n}\n\n// filter the matrix axes since\n// Safari is not available on Linux and\n// Edge is only available on Windows\nList axes = getMatrixAxes(matrix_axes).findAll { axis -&gt;\n    !(axis['BROWSER'] == 'safari' &amp;&amp; axis['PLATFORM'] == 'linux') &amp;&amp;\n    !(axis['BROWSER'] == 'edge' &amp;&amp; axis['PLATFORM'] != 'windows')\n}\n\n// parallel task map\nMap tasks = [failFast: false]\n\nfor(int i = 0; i &lt; axes.size(); i++) {\n    // convert the Axis into valid values for withEnv step\n    Map axis = axes[i]\n    List axisEnv = axis.collect { k, v -&gt;\n        \"${k}=${v}\"\n    }\n    // let's say you have diverse agents among Windows, Mac and Linux all of\n    // which have proper labels for their platform and what browsers are\n    // available on those agents.\n    String nodeLabel = \"os:${axis['PLATFORM']} &amp;&amp; browser:${axis['BROWSER']}\"\n    tasks[axisEnv.join(', ')] = { -&gt;\n        node(nodeLabel) {\n            withEnv(axisEnv) {\n                stage(\"Build\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n                stage(\"Test\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n            }\n        }\n    }\n}\n\nstage(\"Matrix builds\") {\n    parallel(tasks)\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Matrix axes contain the following combinations:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-text\" data-lang=\"text\">[PLATFORM=linux, BROWSER=firefox]\n[PLATFORM=windows, BROWSER=firefox]\n[PLATFORM=mac, BROWSER=firefox]\n[PLATFORM=linux, BROWSER=chrome]\n[PLATFORM=windows, BROWSER=chrome]\n[PLATFORM=mac, BROWSER=chrome]\n[PLATFORM=windows, BROWSER=safari]\n[PLATFORM=mac, BROWSER=safari]\n[PLATFORM=windows, BROWSER=edge]</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-important\" title=\"Important\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>It is worth noting that Jenkins agent labels can contain a colon (<code>:</code>).  So\n<code>os:linux</code> and <code>browser:firefox</code> are both valid agent labels.  The node\nexpression <code>os:linux &amp;&amp; browser:firefox</code> will search for Jenkins agents which\nhave <strong>both labels</strong>.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"screenshot-of-matrix-pipeline\"><a class=\"anchor\" href=\"#screenshot-of-matrix-pipeline\"></a>Screenshot of matrix pipeline</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following is a screenshot of the pipeline code above running in a sandbox\nJenkins environment.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/gatsby-jenkins-io/images/matrix-scripted-pipeline-screenshots/pipeline-screenshot.png\" alt=\"Screenshot of matrix pipeline\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"adding-static-choices\"><a class=\"anchor\" href=\"#adding-static-choices\"></a>Adding static choices</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>It is useful for users to be able to customize building matrices when a build\nis triggered.  Adding static choices requires only a few changes to the above\nscript.  Static choices as in we hard code the question and matrix filters.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">Map response = [:]\nstage(\"Choose combinations\") {\n    response = input(\n        id: 'Platform',\n        message: 'Customize your matrix build.',\n        parameters: [\n            choice(\n                choices: ['all', 'linux', 'mac', 'windows'],\n                description: 'Choose a single platform or all platforms to run tests.',\n                name: 'PLATFORM'),\n            choice(\n                choices: ['all', 'chrome', 'edge', 'firefox', 'safari'],\n                description: 'Choose a single browser or all browsers to run tests.',\n                name: 'BROWSER')\n        ])\n}\n\n// filter the matrix axes since\n// Safari is not available on Linux and\n// Edge is only available on Windows\nList axes = getMatrixAxes(matrix_axes).findAll { axis -&gt;\n    (response['PLATFORM'] == 'all' || response['PLATFORM'] == axis['PLATFORM']) &amp;&amp;\n    (response['BROWSER'] == 'all' || response['BROWSER'] == axis['BROWSER']) &amp;&amp;\n    !(axis['BROWSER'] == 'safari' &amp;&amp; axis['PLATFORM'] == 'linux') &amp;&amp;\n    !(axis['BROWSER'] == 'edge' &amp;&amp; axis['PLATFORM'] != 'windows')\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The pipeline code then renders the following choice dialog.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/gatsby-jenkins-io/images/matrix-scripted-pipeline-screenshots/static-choice-dialog.png\" alt=\"Screenshot of a dialog asking a question to customize matrix build\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>When a user chooses the customized options, the pipeline reacts to the\nrequested options.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/gatsby-jenkins-io/images/matrix-scripted-pipeline-screenshots/customized-pipeline-screenshot.png\" alt=\"Screenshot of pipeline running requested user customizations\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"adding-dynamic-choices\"><a class=\"anchor\" href=\"#adding-dynamic-choices\"></a>Adding dynamic choices</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Dynamic choices means the choice dialog for users to customize the build is\ngenerated from the <code>Map matrix_axes</code> rather than being something a pipeline\ndeveloper hard codes.</p>\n</div>\n<div class=\"paragraph\">\n<p>For user experience (UX), you&#8217;ll want your choices to automatically reflect the\nmatrix axis options you have available.  For example, let&#8217;s say you want to add\na new dimension for Java to the matrix.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">// you can add more axes and this will still work\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    JAVA: ['openjdk8', 'openjdk10', 'openjdk11'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To support dynamic choices, your choice and matrix axis filter needs to be\nupdated to the following.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">Map response = [:]\nstage(\"Choose combinations\") {\n    response = input(\n        id: 'Platform',\n        message: 'Customize your matrix build.',\n        parameters: matrix_axes.collect { key, options -&gt;\n            choice(\n                choices: ['all'] + options.sort(),\n                description: \"Choose a single ${key.toLowerCase()} or all to run tests.\",\n                name: key)\n        })\n}\n\n// filter the matrix axes since\n// Safari is not available on Linux and\n// Edge is only available on Windows\nList axes = getMatrixAxes(matrix_axes).findAll { axis -&gt;\n    response.every { key, choice -&gt;\n        choice == 'all' || choice == axis[key]\n    } &amp;&amp;\n    !(axis['BROWSER'] == 'safari' &amp;&amp; axis['PLATFORM'] == 'linux') &amp;&amp;\n    !(axis['BROWSER'] == 'edge' &amp;&amp; axis['PLATFORM'] != 'windows')\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It will dynamically generate choices based on available matrix axes and will\nautomatically filter if users customize it.  Here&#8217;s an example dialog and\nrendered choice when the pipeline executes.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/gatsby-jenkins-io/images/matrix-scripted-pipeline-screenshots/dynamic-choice-dialog.png\" alt=\"Screenshot of dynamically generated dialog for user to customize choices of matrix build\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/gatsby-jenkins-io/images/matrix-scripted-pipeline-screenshots/dynamic-customized-pipeline-screenshot.png\" alt=\"Screenshot of pipeline running user choices in a matrix\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"full-pipeline-example-with-dynamic-choices\"><a class=\"anchor\" href=\"#full-pipeline-example-with-dynamic-choices\"></a>Full pipeline example with dynamic choices</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following script is the full pipeline example which contains dynamic\nchoices.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">// you can add more axes and this will still work\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    JAVA: ['openjdk8', 'openjdk10', 'openjdk11'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\n@NonCPS\nList getMatrixAxes(Map matrix_axes) {\n    List axes = []\n    matrix_axes.each { axis, values -&gt;\n        List axisList = []\n        values.each { value -&gt;\n            axisList &lt;&lt; [(axis): value]\n        }\n        axes &lt;&lt; axisList\n    }\n    // calculate cartesian product\n    axes.combinations()*.sum()\n}\n\nMap response = [:]\nstage(\"Choose combinations\") {\n    response = input(\n        id: 'Platform',\n        message: 'Customize your matrix build.',\n        parameters: matrix_axes.collect { key, options -&gt;\n            choice(\n                choices: ['all'] + options.sort(),\n                description: \"Choose a single ${key.toLowerCase()} or all to run tests.\",\n                name: key)\n        })\n}\n\n// filter the matrix axes since\n// Safari is not available on Linux and\n// Edge is only available on Windows\nList axes = getMatrixAxes(matrix_axes).findAll { axis -&gt;\n    response.every { key, choice -&gt;\n        choice == 'all' || choice == axis[key]\n    } &amp;&amp;\n    !(axis['BROWSER'] == 'safari' &amp;&amp; axis['PLATFORM'] == 'linux') &amp;&amp;\n    !(axis['BROWSER'] == 'edge' &amp;&amp; axis['PLATFORM'] != 'windows')\n}\n\n// parallel task map\nMap tasks = [failFast: false]\n\nfor(int i = 0; i &lt; axes.size(); i++) {\n    // convert the Axis into valid values for withEnv step\n    Map axis = axes[i]\n    List axisEnv = axis.collect { k, v -&gt;\n        \"${k}=${v}\"\n    }\n    // let's say you have diverse agents among Windows, Mac and Linux all of\n    // which have proper labels for their platform and what browsers are\n    // available on those agents.\n    String nodeLabel = \"os:${axis['PLATFORM']} &amp;&amp; browser:${axis['BROWSER']}\"\n    tasks[axisEnv.join(', ')] = { -&gt;\n        node(nodeLabel) {\n            withEnv(axisEnv) {\n                stage(\"Build\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n                stage(\"Test\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n            }\n        }\n    }\n}\n\nstage(\"Matrix builds\") {\n    parallel(tasks)\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"background-how-does-it-work\"><a class=\"anchor\" href=\"#background-how-does-it-work\"></a>Background: How does it work?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The trick is in <code>axes.combinations()*.sum()</code>.  Groovy combinations are a quick\nand easy way to perform a\n<a href=\"https://en.wikipedia.org/wiki/Cartesian_product\">cartesian product</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s a simpler example of how cartesian product works.  Take two simple lists\nand create combinations.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">List a = ['a', 'b', 'c']\nList b = [1, 2, 3]\n\n[a, b].combinations()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The result of <code>[a, b].combinations()</code> is the following.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>[\n    ['a', 1],\n    ['b', 1],\n    ['c', 1],\n    ['a', 2],\n    ['b', 2],\n    ['c', 2],\n    ['a', 3],\n    ['b', 3],\n    ['c', 3]\n]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Instead of <code>a, b, c</code> and <code>1, 2, 3</code> let&#8217;s do the same example again but instead using matrix maps.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">List java = [[java: 8], [java: 10]]\nList os = [[os: 'linux'], [os: 'freebsd']]\n\n[java, os].combinations()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The result of <code>[java, os].combinations()</code> is the following.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>[\n    [ [java:8],  [os:linux]   ],\n    [ [java:10], [os:linux]   ],\n    [ [java:8],  [os:freebsd] ],\n    [ [java:10], [os:freebsd] ]\n]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In order for us to easily use this as a single map we must add the maps\ntogether to create a single map.  For example, adding\n<code>[java: 8] + [os: 'linux']</code> will render a single hashmap\n<code>[java: 8, os: 'linux']</code>.  This means we need our list of lists of maps to\nbecome a simple list of maps so that we can use them effectively in pipelines.</p>\n</div>\n<div class=\"paragraph\">\n<p>To accomplish this we make use of the\n<a href=\"https://www.groovy-lang.org/operators.html#_spread_operator\">Groovy spread\noperator</a> (<code>*.</code> in <code>axes.combinations()*.sum()</code>).</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s see the same <code>java</code>/<code>os</code> example again but with the spread operator being\nused.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">List java = [[java: 8], [java: 10]]\nList os = [[os: 'linux'], [os: 'freebsd']]\n\n[java, os].combinations()*.sum()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The result is the following.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code>[\n    [ java: 8,  os: 'linux'],\n    [ java: 10, os: 'linux'],\n    [ java: 8,  os: 'freebsd'],\n    [ java: 10, os: 'freebsd']\n]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>With the spread operator the end result of a list of maps which we can\neffectively use as matrix axes.  It also allows us to do neat matrix filtering\nwith the <a href=\"http://docs.groovy-lang.org/latest/html/groovy-jdk/java/util/List.html#findAll(groovy.lang.Closure)\"><code>findAll {}</code> Groovy <code>List</code> method</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"exposing-a-shared-library-pipeline-step\"><a class=\"anchor\" href=\"#exposing-a-shared-library-pipeline-step\"></a>Exposing a shared library pipeline step</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The best user experience is to expose the above code as a shared library\npipeline step.  As an example, I have added\n<a href=\"https://github.com/samrocketman/jervis/blob/8d6935e08437c1d9b9b3de1d8711cad6622fc631/vars/getMatrixAxes.groovy\"><code>vars/getMatrixAxes.groovy</code>\nto Jervis</a>.  This provides a flexible shared library step which you can copy\ninto your own shared pipeline libraries.</p>\n</div>\n<div class=\"paragraph\">\n<p>The step becomes easy to use in the following way with a simple one dimension matrix.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">Map matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n]\n\nList axes = getMatrixAxes(matrix_axes)\n\n// alternately with a user prompt\n//List axes = getMatrixAxes(matrix_axes, user_prompt: true)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s a more complex example using a two dimensional matrix with filtering.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">Map matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\nList axes = getMatrixAxes(matrix_axes) { Map axis -&gt;\n    !(axis['BROWSER'] == 'safari' &amp;&amp; axis['PLATFORM'] == 'linux') &amp;&amp;\n    !(axis['BROWSER'] == 'edge' &amp;&amp; axis['PLATFORM'] != 'windows')\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And again with a three dimensional matrix with filtering and prompting for user\ninput.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">Map matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    JAVA: ['openjdk8', 'openjdk10', 'openjdk11'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\nList axes = getMatrixAxes(matrix_axes, user_prompt: true) { Map axis -&gt;\n    !(axis['BROWSER'] == 'safari' &amp;&amp; axis['PLATFORM'] == 'linux') &amp;&amp;\n    !(axis['BROWSER'] == 'edge' &amp;&amp; axis['PLATFORM'] != 'windows')\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The script approval is not necessary for\n<a href=\"https://jenkins.io/doc/book/pipeline/shared-libraries/\">Shared Libraries</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you don&#8217;t want to provide a shared step.  In order to expose matrix building\nto end-users, you must allow the following method approval in the script\napproval configuration.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Script approval</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods combinations java.util.Collection</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\"></a>Summary</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We covered how to perform matrix builds using scripted pipeline as well as how\nto prompt users for customizing the matrix build.  Additionally, an example was\nprovided where we exposed getting buildable matrix axes to users as an easy to\nuse <a href=\"https://jenkins.io/doc/book/pipeline/shared-libraries/\">Shared Library</a>\nstep via <code>vars/getMatrixAxes.groovy</code>.  Using a shared library step is\ndefinitely the recommended way for admins to support users rather than trying\nto whitelist groovy methods.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/samrocketman/jervis\">Jervis shared pipeline library</a> has supported matrix building since 2017 in Jenkins scripted pipelines.\n(<a href=\"https://github.com/samrocketman/jervis/blob/db79f4d52b3aa23f1b19b59262156388b8193711/src/main/groovy/net/gleske/jervis/lang/pipelineGenerator.groovy#L275\">see here</a> and\n<a href=\"https://github.com/samrocketman/jervis/blob/f09c709326175ff2e701677250cac007170cbd3a/vars/matrixBuildProjectStage.groovy#L25\">here</a>\nfor an example).</p>\n</div>\n</div>\n</div>","id":"85ad92d1-eb99-59b8-9bbf-3b4f6309d6df","title":"Matrix building in scripted pipeline","date":"2019-12-02T00:00:00.000Z","slug":"/blog/2019/12/02/matrix-building-with-scripted-pipeline/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8b8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/bf8e1/sgleske.png","srcSet":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/914ee/sgleske.png 32w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/1c9ce/sgleske.png 64w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/bf8e1/sgleske.png 128w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/acb7c/sgleske.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/ef6ff/sgleske.webp 32w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/8257c/sgleske.webp 64w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/6766a/sgleske.webp 128w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/22bfc/sgleske.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/sgleske.png"},"blog":null,"github":"samrocketman","html":"<div class=\"paragraph\">\n<p>A Senior Software Engineer at <a href=\"https://integralads.com/\">Integral Ad\nScience</a>, he develops a Jenkins solution to scale CI/CD onboarding for the\nentire company.  To aide in this cause he has been developing\n<a href=\"https://github.com/samrocketman/jervis/wiki\">Jervis: Jenkins as a service</a>\nwhich strongly focuses on onboarding people and not just technology or projects\ninto Jenkins.  When not at work he enjoys contributing to open source software,\nlike the Jenkins project, solely through volunteer time.</p>\n</div>","id":"sgleske","irc":null,"linkedin":null,"name":"Sam Gleske","slug":"/blog/authors/sgleske/","twitter":"sag47"}]}},"pageContext":{"id":"85ad92d1-eb99-59b8-9bbf-3b4f6309d6df"}},
    "staticQueryHashes": ["1271460761","3649515864"]}