{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2019/12/14/generic-webhook-trigger-plugin/",
    "result": {"data":{"blog":{"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#the-problem\">The Problem</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#code-duplication-and-security\">Code Duplication And Security</a></li>\n<li><a href=\"#a-branch-is-not-a-feature\">A Branch Is Not A Feature</a></li>\n<li><a href=\"#documentation\">Documentation</a></li>\n</ul>\n</li>\n<li><a href=\"#the-solution\">The Solution</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#code-duplication-and-security-2\">Code Duplication And Security</a></li>\n<li><a href=\"#a-branch-is-not-a-feature-2\">A Branch Is Not A Feature</a></li>\n<li><a href=\"#documentation-2\">Documentation</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This post will describe some common problems I&#8217;ve had with Jenkins and how I solved them by developing <a href=\"https://plugins.jenkins.io/generic-webhook-trigger\">Generic Webhook Trigger Plugin</a>.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"the-problem\"><a class=\"anchor\" href=\"#the-problem\"></a>The Problem</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I was often struggling with the same issues when working with Jenkins:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Code duplication and security</strong> - <code>Jenkinsfiles</code> in every repository.</p>\n</li>\n<li>\n<p><strong>A branch is not a feature</strong> - Parameterized jobs on <code>master</code> branch often mix parameters relevant for different features.</p>\n</li>\n<li>\n<p><strong>Poorly documented trigger plugins</strong> - Proper documented services but poorly documented consuming plugins.</p>\n</li>\n</ul>\n</div>\n<div class=\"sect2\">\n<h3 id=\"code-duplication-and-security\"><a class=\"anchor\" href=\"#code-duplication-and-security\"></a>Code Duplication And Security</h3>\n<div class=\"paragraph\">\n<p>Having Jenkinsfiles in every Git repository allows developers to let those files diverge. Developers pushes forward with their projects and it is hard to maintain patterns to share code.</p>\n</div>\n<div class=\"paragraph\">\n<p>I have, almost, solved code duplication with <a href=\"/doc/book/pipeline/shared-libraries/\">shared libraries</a> but it does not allow me to setup a strict pattern that must be followed. Any developer can still decide to not invoke the features provided by the shared library.</p>\n</div>\n<div class=\"paragraph\">\n<p>There is also the security aspect of letting developers run any code from the Jenkinsfiles. Developers might, for example, print passwords gathered from credentials. Letting developers execute any code on the Jenkins nodes just does not seem right to me.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"a-branch-is-not-a-feature\"><a class=\"anchor\" href=\"#a-branch-is-not-a-feature\"></a>A Branch Is Not A Feature</h3>\n<div class=\"paragraph\">\n<p>In Bitbucket there are projects and each project has a collection of git repositories. Something like this:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>PROJ_1</code></p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>REPO_1</code></p>\n</li>\n<li>\n<p><code>REPO_2</code></p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code>PROJ_2</code></p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>REPO_3</code></p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Lets think about some features we want to provide for these repositories:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Pull request verification</p>\n</li>\n<li>\n<p>Building snapshot (or pre release if you will)</p>\n</li>\n<li>\n<p>Building releases</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>If the developers are use to the repositories being organized like this in Bitbucket, should we not organize them the same way in Jenkins? And if they browse Jenkins should they not find one job per feature, like <code>pull-request</code>, <code>snapshot</code> and <code>release</code>? Each job with parameters only relevant for that feature. I think so! Like this:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>/</code> - Jenkins root</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>/PROJ_1</code> - A folder, lists git repositories</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>/PROJ_1/REPO_1</code> - A folder, lists jobs relevant for that repo.</p>\n</li>\n<li>\n<p><code>/PROJ_1/REPO_1/release</code> - A job, performs releases.</p>\n</li>\n<li>\n<p><code>/PROJ_1/REPO_1/snapshot</code> - A job, performs snapshot releases.</p>\n</li>\n<li>\n<p><code>/PROJ_1/REPO_1/pull-request</code> - A job, verifies pull requests.</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code>&#8230;&#8203;</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>In this example, both <code>snapshot</code> and <code>release</code> jobs might work with the same git branch. The difference is the feature they provide. Their parameters can be well documented as you don&#8217;t have to mix parameters relevant for releases and those relevant for snapshots. This cannot be done with <a href=\"https://plugins.jenkins.io/workflow-multibranch\">Multibranch Pipeline Plugin</a> where you specify parameters as <code>properties</code> per branch.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"documentation\"><a class=\"anchor\" href=\"#documentation\"></a>Documentation</h3>\n<div class=\"paragraph\">\n<p>Webhooks are often well documented in the services providing them. See:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://confluence.atlassian.com/bitbucket/manage-webhooks-735643732.html\">Bitbucket Cloud</a></p>\n</li>\n<li>\n<p><a href=\"https://confluence.atlassian.com/bitbucketserver/managing-webhooks-in-bitbucket-server-938025878.html\">Bitbucket Server</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.github.com/webhooks/\">GitHub</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.gitlab.com/ce/user/project/integrations/webhooks.html\">GitLab</a></p>\n</li>\n<li>\n<p><a href=\"https://gogs.io/docs/features/webhook\">Gogs</a> and <a href=\"https://docs.gitea.io/en-us/webhooks/\">Gitea</a></p>\n</li>\n<li>\n<p><a href=\"https://portal.assembla.com/hc/en-us/articles/226889127-Post-information-to-external-systems-using-Webhooks\">Assembla</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.atlassian.com/server/jira/platform/webhooks/\">Jira</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>It bothered me that, even if I understood these webhooks, I was unable to use them. Because I needed to perform development in the plugin I was using in order to provide whatever value from the webhook to the build. That process could take months from PR to actual release. Such a simple thing should really not be an issue.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"the-solution\"><a class=\"anchor\" href=\"#the-solution\"></a>The Solution</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>My solution is pretty much <strong>back to basics</strong>: We have an automation server (Jenkins) and we want to trigger it on external webhooks. We want to gather information from that webhook and provide it to our build. In order to support it I have created the <a href=\"https://plugins.jenkins.io/generic-webhook-trigger\">Generic Webhook Trigger Plugin</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The latest docs are available in <a href=\"https://github.com/jenkinsci/generic-webhook-trigger-plugin/\">the repo</a> and I also have a fully working example with GitLab implemented using <code>configuration-as-code</code>. See the repository <a href=\"https://github.com/tomasbjerre/jenkins-configuration-as-code-sandbox\">here</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"code-duplication-and-security-2\"><a class=\"anchor\" href=\"#code-duplication-and-security-2\"></a>Code Duplication And Security</h3>\n<div class=\"paragraph\">\n<p>I establish a convention that all developers must follow. Instead of letting the developers explicitly invoke the infrastructure from Jenkinsfiles. There are rules to follow, like:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>All git repositories should be built from the root of the repo.</p>\n</li>\n<li>\n<p>If it contains a <code>gradlew</code></p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Build is done with <code>./gradlew build</code></p>\n</li>\n<li>\n<p>Release is done with <code>./gradlew release</code></p>\n</li>\n<li>\n<p>&#8230;&#8203; and so on</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>If it contains a <code>package.json</code></p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Build is done with <code>npm run build</code></p>\n</li>\n<li>\n<p>Release is done with <code>npm run release</code></p>\n</li>\n<li>\n<p>&#8230;&#8203; and so on</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>With these rules, pipelines can be totally generic and no Jenkinsfiles are needed in the repositories. Some git repositories may, for some reason, need to disable test cases. That can be solved by allowing repositories to add a special file, perhaps <code>jenkins-settings.json</code>, let the infrastructure discover and <a href=\"https://github.com/tomasbjerre/jenkins-configuration-as-code-sandbox/blob/master/vars/buildRepo.groovy#L52\">act on its content</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This also helps the developers even when not doing CI. When they clone a new, to them unknown, repository they will know what commands can be issued and their semantics.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"a-branch-is-not-a-feature-2\"><a class=\"anchor\" href=\"#a-branch-is-not-a-feature-2\"></a>A Branch Is Not A Feature</h3>\n<div class=\"paragraph\">\n<p>I implement:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Jenkins job configurations - With <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki\">Job DSL</a>.</p>\n</li>\n<li>\n<p>Jenkins build process - With <a href=\"/doc/book/pipeline/\">Pipelines</a> and <a href=\"/doc/book/pipeline/shared-libraries/\">Shared Library</a>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>By integrating with the git service from <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki\">Job DSL</a> I can automatically find the git repositories. I create jobs dynamically organized in folders. Also invoking the git service to setup webhooks triggering those jobs. The jobs are ordinary pipelines, not multibranch, and they don&#8217;t use Jenkinsfile from Git but instead Jenksinfile configured in the job using <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki\">Job DSL</a>. So that all job configurations and pipelines are under version control. This is all happening <a href=\"https://github.com/tomasbjerre/jenkins-configuration-as-code-sandbox/blob/master/jobs/applicationRepo.groovy\">here</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"documentation-2\"><a class=\"anchor\" href=\"#documentation-2\"></a>Documentation</h3>\n<div class=\"paragraph\">\n<p>The plugin uses <code>JSONPath</code>, and also <code>XPath</code>, to extract values from JSON and provide them to the build. Letting the user pick whatever is needed from the webhook. It also has a regular expression filter to allow not triggering for some conditions.</p>\n</div>\n<div class=\"paragraph\">\n<p>The plugin is not very big, just being the glue between the webhook, <code>JSONPath</code>/<code>XPath</code> and regular expression. All these parts are very well documented already and I do my best supporting the plugin. That way this is a very well documented solution to use!</p>\n</div>\n</div>\n</div>\n</div>","id":"646ce24b-257b-5341-bb67-a06739313fd5","title":"Generic Webhook Trigger Plugin","date":"2019-12-14T00:00:00.000Z","slug":"/blog/2019/12/14/generic-webhook-trigger-plugin/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#98a8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg","srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/77b35/tomasbjerre.jpg 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/d4a57/tomasbjerre.jpg 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/68974/tomasbjerre.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/ef6ff/tomasbjerre.webp 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/8257c/tomasbjerre.webp 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/6766a/tomasbjerre.webp 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/22bfc/tomasbjerre.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/tomasbjerre.jpg"},"blog":"https://bjurr.com/","github":"tomasbjerre","html":"<div class=\"paragraph\">\n<p>Tomas Bjerre is an experienced fullstack software developer. Been working full time since 2010 after graduating with a masters degree in computer science from Lund University (Faculty of Engineering, LTH). Is currently working full time and maintaining a bunch of Jenkins plugins on his spare time.</p>\n</div>","id":"tomasbjerre","irc":null,"linkedin":"tomasbjerre","name":"Tomas Bjerre","slug":"/blog/authors/tomasbjerre","twitter":null}]}},"pageContext":{"id":"646ce24b-257b-5341-bb67-a06739313fd5"}},
    "staticQueryHashes": ["1271460761","3649515864"]}