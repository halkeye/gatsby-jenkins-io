{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2019/12/10/introducing-aws-secrets-manager-credentials-provider-plugin/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>API keys and secrets are difficult to handle safely, and probably something you avoid thinking about. In this post I&#8217;ll show how the new <a href=\"https://plugins.jenkins.io/aws-secrets-manager-credentials-provider\">AWS Secrets Manager Credentials Provider</a> plugin allows you to marshal your secrets into one place, and use them securely from Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>When CI/CD pipelines moved to the public cloud, credential management did not evolve with them. If you&#8217;re in this situation, you may have seen a number of tactical workarounds to keep Jenkins builds talking to the services they depend on. The workarounds range from bad (hardcoding plaintext secrets into Git) to merely painful (wrangling Hiera EYAML), but their common feature is that they tend to make copies of secrets beyond the reach of automation. This increases their attack surface, makes routine key rotation impractical, and makes remediation difficult after a breach.</p>\n</div>\n<div class=\"paragraph\">\n<p>The good news is that there is a better way!</p>\n</div>\n<div class=\"paragraph\">\n<p>AWS Secrets Manager is a comprehensive solution for secure secret storage. You define a secret just once for your whole AWS account, then you give your consumers permission to use the secrets. Secrets Manager lets you manage a secret entry (name and metadata) separately from its value, and it integrates with other AWS services that you already use:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Secret entry management: Manual (Web console, AWS CLI) or with an infrastructure management tool (<a href=\"https://www.terraform.io/docs/providers/aws/r/secretsmanager_secret.html\">Terraform</a>, CloudFormation etc.)</p>\n</li>\n<li>\n<p>Secret value management: Manual (Web console, AWS CLI) or automatic (secret rotation Lambda function).</p>\n</li>\n<li>\n<p>Access control: AWS IAM policies (for both applications and human operators).</p>\n</li>\n<li>\n<p>Secret encryption: Amazon KMS automatically encrypts the secret value. Use either the account&#8217;s default KMS key, or a customer-managed KMS key.</p>\n</li>\n<li>\n<p>Auditing: AWS CloudTrail and CloudWatch Events.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>A couple of teams in my company started to use Secrets Manager from Jenkins jobs by calling the AWS CLI, but this remained a niche approach as it was quite unwieldy. There was clearly an appetite to integrate key developer apps with a centralised secrets store, but production-ready integrations were needed for wider adoption. So this year I created the <a href=\"https://plugins.jenkins.io/aws-secrets-manager-credentials-provider\">AWS Secrets Manager Credentials Provider</a> plugin for Jenkins, with help from friends in the Jenkins community, to do exactly that.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is how you set it up&#8230;&#8203;</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Install the plugin from the Jenkins update center.</p>\n</li>\n<li>\n<p>Give Jenkins read-only access to Secrets Manager with an IAM policy.</p>\n</li>\n<li>\n<p>(Optional) Configure the plugin, either through the Global Configuration screen or Jenkins Configuration As Code.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>This is how you use it&#8230;&#8203;</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Create your build secrets in AWS Secrets Manager. (You can start by uploading secrets via the AWS CLI. More sophisticated methods of secret creation are also available.)</p>\n</li>\n<li>\n<p>View the credentials in the Jenkins UI, to check that Jenkins can see them.</p>\n</li>\n<li>\n<p>Bind the credentials by ID in your Jenkins job.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>The provider supports the following standard Jenkins credential types:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Secret Text</p>\n</li>\n<li>\n<p>Username With Password</p>\n</li>\n<li>\n<p>SSH User Private Key</p>\n</li>\n<li>\n<p>PKCS#12 Certificate</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>And it has powerful advantages over quick-fix tactical solutions:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Your Jenkins jobs consume the credentials with no knowledge of Secrets Manager, so they stay vendor-independent.</p>\n</li>\n<li>\n<p>The provider caches relevant Secrets Manager API calls, for a quicker and more reliable experience.</p>\n</li>\n<li>\n<p>The provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Git and SSH Agent plugins.</p>\n</li>\n<li>\n<p>The provider records credential usage in the central Jenkins credentials tracking log.</p>\n</li>\n<li>\n<p>Jenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Secrets Manager while consuming other credentials from your existing providers.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>After the plugin&#8217;s first public release, developers at other companies adopted it too. It has had contributions so far from people at Elsevier, GoDaddy, and Northeastern University, as well as the fantastic Jenkins core team. We even got <a href=\"https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/pull/8#issuecomment-543721057\">fan mail</a> for our work!</p>\n</div>\n<div class=\"paragraph\">\n<p>In enterprise security, \"The important things are always simple. The simple things are always hard. The easy way is always mined.\" (<a href=\"https://medium.com/@thegrugq/equihax-fact-enabled-wild-speculation-21fd59aa39e2\">@thegrugq</a>) It&#8217;s easy to buy a shiny â€˜next generation' security appliance and drop it into your network. But it&#8217;s hard to embed the security fundamentals (like secrets management, OS patching, secure development) across your organisation. This Jenkins plugin is part of the effort <sup class=\"footnote\">[<a id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnotedef_1\" title=\"View footnote.\">1</a>]</sup> to take one of the persistent hard problems in security, and make it easier for everyone.</p>\n</div>\n<div id=\"footnotes\">\n<hr>\n<div class=\"footnote\" id=\"_footnotedef_1\">\n<a href=\"#_footnoteref_1\">1</a>. If you&#8217;re on Azure or you run most of your workload on Kubernetes, check out the <a href=\"https://plugins.jenkins.io/azure-credentials\">Azure Credentials Plugin</a> and the <a href=\"https://plugins.jenkins.io/kubernetes-credentials-provider\">Kubernetes Credentials Provider Plugin</a>.\n</div>\n</div>","id":"ed404ce2-c53c-5f43-ae06-381e9a803bce","title":"Introducing the AWS Secrets Manager Credentials Provider for Jenkins","date":"2019-12-10T00:00:00.000Z","slug":"/blog/2019/12/10/introducing-aws-secrets-manager-credentials-provider-plugin/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"chriskilding","html":"","id":"chriskilding","irc":null,"linkedin":"chriskilding","name":"Chris Kilding","slug":"/blog/authors/chriskilding/","twitter":null}]}},"pageContext":{"id":"ed404ce2-c53c-5f43-ae06-381e9a803bce"}},
    "staticQueryHashes": ["1271460761","3649515864"]}