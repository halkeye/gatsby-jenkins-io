{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/07/01/html-publisher-plugin/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Most projects need more that just JUnit result reporting.  Rather than writing a\ncustom plugin for each type of report, we can use the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/HTML+Publisher+Plugin\">HTML Publisher Plugin</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"lets-make-this-quick\"><a class=\"anchor\" href=\"#lets-make-this-quick\"></a>Let&#8217;s Make This Quick</h3>\n<div class=\"paragraph\">\n<p>I&#8217;ve found a Ruby project,\n<a href=\"https://github.com/reiseburo/hermann\">hermann</a>, I&#8217;d like to build using Jenkins Pipeline. I&#8217;d\nalso like to have the code coverage results published with each build job.  I could\nwrite a plugin to publish this data, but I&#8217;m in a bit of hurry and\nthe build already creates an HTML report file using <a href=\"https://github.com/colszowka/simplecov\">SimpleCov</a>\nwhen the unit tests run.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"simple-build\"><a class=\"anchor\" href=\"#simple-build\"></a>Simple Build</h3>\n<div class=\"paragraph\">\n<p>I&#8217;m going to use the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/HTML+Publisher+Plugin\">HTML Publisher Plugin</a>\nto add the HTML-formatted code coverage report to my builds.  Here&#8217;s a simple\npipeline for building the <a href=\"https://github.com/reiseburo/hermann\">hermann</a>\nproject.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">stage 'Build'\n\nnode {\n  // Checkout\n  checkout scm\n\n  // install required bundles\n  sh 'bundle install'\n\n  // build and run tests with coverage\n  sh 'bundle exec rake build spec'\n\n  // Archive the built artifacts\n  archive (includes: 'pkg/*.gem')\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This pipeline expects to be run from a <code>Jenkinsfile</code> in SCM.\nTo copy and paste it directly into a Jenkins Pipeline job, replace the <code>checkout scm</code> step with\n<code>git 'https://github.com/reiseburo/hermann.git'</code>.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Simple enough, it builds, runs tests, and archives the package.</p>\n</div>\n<hr>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-06-30/run-1.png\" alt=\"Job Run Without Report Link\">\n</div>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>Now I just need to add the step to publish the code coverage report.\nI know that <code>rake spec</code> creates an <code>index.html</code> file in the <code>coverage</code> directory.\nI&#8217;ve already installed the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/HTML+Publisher+Plugin\">HTML Publisher Plugin</a>.\nHow do I add the HTML publishing step to the pipeline?  The plugin page doesn&#8217;t\nsay anything about it.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"snippet-generator-to-the-rescue\"><a class=\"anchor\" href=\"#snippet-generator-to-the-rescue\"></a>Snippet Generator to the Rescue</h3>\n<div class=\"paragraph\">\n<p>Documentation is hard to maintain and easy to miss, even more so in a system\nlike Jenkins with hundreds of plugins the each potential have one or more\ngroovy fixtures to add to the Pipeline.  The Pipeline Syntax\n<a href=\"/blog/2016/05/31/pipeline-snippetizer/\">\"Snippet Generator\"</a> helps users\nnavigate this jungle by providing a way to generate a code snippet for any step using\nprovided inputs.</p>\n</div>\n<div class=\"paragraph\">\n<p>It offers a dynamically generated list of steps, based on the installed plugins.\nFrom that list I select the <code>publishHTML</code> step:</p>\n</div>\n<hr>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-06-30/snippet-generator-1.png\" alt=\"Snippet Generator Menu\">\n</div>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>Then it shows me a UI similar to the one used in job configuration.  I fill in\nthe fields, click \"generate\", and it shows me snippet of groovy generated from\nthat input.</p>\n</div>\n<hr>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-06-30/snippet-generator-2.png\" alt=\"Snippet Generator Output\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"html-published\"><a class=\"anchor\" href=\"#html-published\"></a>HTML Published</h3>\n<div class=\"paragraph\">\n<p>I can use that snippet directly or as a template for further customization.\nIn this case, I&#8217;ll just reformat and copy it in at the end of my\npipeline.  (I ran into a <a href=\"https://issues.jenkins.io/browse/JENKINS-29711\">minor bug</a>\nin the snippet generated for this plugin step. Typing\nerror string in my search bar immediately found the bug and a workaround.)</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">  /* ...unchanged... */\n\n  // Archive the built artifacts\n  archive (includes: 'pkg/*.gem')\n\n  // publish html\n  // snippet generator doesn't include \"target:\"\n  // https://issues.jenkins.io/browse/JENKINS-29711.\n  publishHTML (target: [\n      allowMissing: false,\n      alwaysLinkToLastBuild: false,\n      keepAll: true,\n      reportDir: 'coverage',\n      reportFiles: 'index.html',\n      reportName: \"RCov Report\"\n    ])\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When I run this new pipeline I am rewarded with an <code>RCov Report</code> link on left side,\nwhich I can follow to show the HTML report.</p>\n</div>\n<hr>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-06-30/run-2.png\" alt=\"Job Run With Report Link\">\n</div>\n</div>\n<hr>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-06-30/rcov.png\" alt=\"RCov Report\">\n</div>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>I even added the <code>keepAll</code> setting to let I can also go back an look at reports on old jobs as\nmore come in.  As I said to to begin with, this is not as slick as what I\ncould do with a custom plugin, but it is much easier and works with any static\nHTML.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/HTML+Publisher+Plugin\">HTML Publisher Plugin</a></p>\n</li>\n<li>\n<p><a href=\"/blog/2016/05/31/pipeline-snippetizer/\">Jenkins Pipeline Snippet Generator</a></p>\n</li>\n</ul>\n</div>\n</div>","id":"4848db1b-feac-54a0-8b3e-2a0f5e3fbfc6","title":"Publishing HTML Reports in Pipeline","date":"2016-07-01T00:00:00.000Z","slug":"/blog/2016/07/01/html-publisher-plugin/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},"pageContext":{"next":"/blog/2016/07/07/jenkins-2.7.1/","previous":"/blog/2016/06/30/ewm-alpha-version/","id":"4848db1b-feac-54a0-8b3e-2a0f5e3fbfc6"}},
    "staticQueryHashes": ["1271460761","3649515864"]}