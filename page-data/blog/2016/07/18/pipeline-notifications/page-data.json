{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/07/18/pipeline-notifications/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Rather than sitting and watching Jenkins for job status, I want Jenkins to send\nnotifications when events occur.  There are Jenkins plugins for\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Slack+Plugin\">Slack</a>,\n<a href=\"https://wiki.jenkins.io/display/JENKINS/HipChat+Plugin\">HipChat</a>,\nor even <a href=\"https://wiki.jenkins.io/display/JENKINS/Email-ext+plugin\">email</a>\namong others.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"note-something-is-happening\"><a class=\"anchor\" href=\"#note-something-is-happening\"></a>Note: Something is happening!</h3>\n<div class=\"paragraph\">\n<p>I think we can all agree getting notified when events occur is preferable to\nhaving to constantly monitor them just in case.  I&#8217;m going to continue from\nwhere I left off in my\n<a href=\"/blog/2016/07/01/html-publisher-plugin/\">previous post</a> with the\n<a href=\"https://github.com/reiseburo/hermann\">hermann</a> project.  I added a Jenkins\nPipeline with an HTML publisher for code coverage. This week, I&#8217;d like to make\nJenkins to notify me when builds start and when they succeed or fail.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"setup-and-configuration\"><a class=\"anchor\" href=\"#setup-and-configuration\"></a>Setup and Configuration</h3>\n<div class=\"paragraph\">\n<p>First, I select targets for my notifications. For this blog post, I&#8217;ll use sample\ntargets that I control.  I&#8217;ve created Slack and HipChat organizations called\n\"bitwiseman\", each with one member - me.  And for email I&#8217;m running a Ruby SMTP server called\n<a href=\"https://mailcatcher.me/\">mailcatcher</a>, that is perfect for local testing\nsuch as this.  Aside for these concessions, configuration would be much the\nsame in a non-demo situation.</p>\n</div>\n<div class=\"paragraph\">\n<p>Next, I install and add server-wide configuration for the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Slack+Plugin\">Slack</a>,\n<a href=\"https://wiki.jenkins.io/display/JENKINS/HipChat+Plugin\">HipChat</a>,\nand <a href=\"https://wiki.jenkins.io/display/JENKINS/Email-ext+plugin\">Email-ext</a>\nplugins.  Slack and HipChat use API tokens - both products have integration\npoints on their side that generate tokens which I copy into my Jenkins\nconfiguration. Mailcatcher SMTP runs locally. I just point Jenkins\nat it.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s what the Jenkins configuration section for each of these looks like:</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-07-15/slack-config.png\" alt=\"Slack Configuration\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-07-15/hipchat-config.png\" alt=\"HipChat Configuration\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-07-15/email-config.png\" alt=\"Email Configuration\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"original-pipeline\"><a class=\"anchor\" href=\"#original-pipeline\"></a>Original Pipeline</h3>\n<div class=\"paragraph\">\n<p>Now I can start adding notification steps. The same as\n<a href=\"/blog/2016/07/01/html-publisher-plugin/\">last week</a>, I&#8217;ll use the\n<a href=\"/blog/2016/05/31/pipeline-snippetizer/\">Jenkins Pipeline Snippet Generator</a>\nto explore the step syntax for the notification plugins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s the base pipeline before I start making changes:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">stage 'Build'\n\nnode {\n  // Checkout\n  checkout scm\n\n  // install required bundles\n  sh 'bundle install'\n\n  // build and run tests with coverage\n  sh 'bundle exec rake build spec'\n\n  // Archive the built artifacts\n  archive (includes: 'pkg/*.gem')\n\n  // publish html\n  // snippet generator doesn't include \"target:\"\n  // https://issues.jenkins.io/browse/JENKINS-29711.\n  publishHTML (target: [\n      allowMissing: false,\n      alwaysLinkToLastBuild: false,\n      keepAll: true,\n      reportDir: 'coverage',\n      reportFiles: 'index.html',\n      reportName: \"RCov Report\"\n    ])\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This pipeline expects to be run from a <code>Jenkinsfile</code> in SCM.\nTo copy and paste it directly into a Jenkins Pipeline job, replace the <code>checkout scm</code> step with\n<code>git 'https://github.com/reiseburo/hermann.git'</code>.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"job-started-notification\"><a class=\"anchor\" href=\"#job-started-notification\"></a>Job Started Notification</h3>\n<div class=\"paragraph\">\n<p>For the first change, I decide to add a \"Job Started\" notification.  The\nsnippet generator and then reformatting makes this straightforward:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n\n  notifyStarted()\n\n  /* ... existing build steps ... */\n}\n\ndef notifyStarted() {\n  // send to Slack\n  slackSend (color: '#FFFF00', message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n  // send to HipChat\n  hipchatSend (color: 'YELLOW', notify: true,\n      message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n    )\n\n  // send to email\n  emailext (\n      subject: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n      body: \"\"\"&lt;p&gt;STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':&lt;/p&gt;\n        &lt;p&gt;Check console output at &amp;QUOT;&lt;a href='${env.BUILD_URL}'&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&amp;QUOT;&lt;/p&gt;\"\"\",\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Since Pipeline is a Groovy-based DSL, I can use\n<a href=\"https://docs.groovy-lang.org/latest/html/documentation/index.html#_string_interpolation\">string interpolation</a>\nand variables to add exactly the details I want in my notification messages. When\nI run this I get the following notifications:</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-07-15/notify-started.png\" alt=\"Started Notifications\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-07-15/notify-started-email.png\" alt=\"Started Email Notification\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"job-successful-notification\"><a class=\"anchor\" href=\"#job-successful-notification\"></a>Job Successful Notification</h3>\n<div class=\"paragraph\">\n<p>The next logical choice is to get notifications when a job succeeds.  I&#8217;ll\ncopy and paste based on the <code>notifyStarted</code> method for now and do some refactoring\nlater.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n\n  notifyStarted()\n\n  /* ... existing build steps ... */\n\n  notifySuccessful()\n}\n\ndef notifyStarted() { /* .. */ }\n\ndef notifySuccessful() {\n  slackSend (color: '#00FF00', message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n  hipchatSend (color: 'GREEN', notify: true,\n      message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n    )\n\n  emailext (\n      subject: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n      body: \"\"\"&lt;p&gt;SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':&lt;/p&gt;\n        &lt;p&gt;Check console output at &amp;QUOT;&lt;a href='${env.BUILD_URL}'&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&amp;QUOT;&lt;/p&gt;\"\"\",\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Again, I get notifications, as expected.  This build is fast enough,\nsome of them are even on the screen at the same time:</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-07-15/notify-successful.png\" alt=\"Multiple Notifications\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"job-failed-notification\"><a class=\"anchor\" href=\"#job-failed-notification\"></a>Job Failed Notification</h3>\n<div class=\"paragraph\">\n<p>Next I want to add failure notification.  Here&#8217;s where we really start to see the power\nand expressiveness of Jenkins pipeline.  A Pipeline is a Groovy script, so as we&#8217;d\nexpect in any Groovy script, we can handle errors using <code>try-catch</code> blocks.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n  try {\n    notifyStarted()\n\n    /* ... existing build steps ... */\n\n    notifySuccessful()\n  } catch (e) {\n    currentBuild.result = \"FAILED\"\n    notifyFailed()\n    throw e\n  }\n}\n\ndef notifyStarted() { /* .. */ }\n\ndef notifySuccessful() { /* .. */ }\n\ndef notifyFailed() {\n  slackSend (color: '#FF0000', message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n  hipchatSend (color: 'RED', notify: true,\n      message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n    )\n\n  emailext (\n      subject: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n      body: \"\"\"&lt;p&gt;FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':&lt;/p&gt;\n        &lt;p&gt;Check console output at &amp;QUOT;&lt;a href='${env.BUILD_URL}'&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&amp;QUOT;&lt;/p&gt;\"\"\",\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-07-15/notify-failed.png\" alt=\"Failed Notifications\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"code-cleanup\"><a class=\"anchor\" href=\"#code-cleanup\"></a>Code Cleanup</h3>\n<div class=\"paragraph\">\n<p>Lastly, now that I have it all working, I&#8217;ll do some refactoring. I&#8217;ll unify\nall the notifications in one method and move the final success/failure notification\ninto a <code>finally</code> block.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">stage 'Build'\n\nnode {\n  try {\n    notifyBuild('STARTED')\n\n    /* ... existing build steps ... */\n\n  } catch (e) {\n    // If there was an exception thrown, the build failed\n    currentBuild.result = \"FAILED\"\n    throw e\n  } finally {\n    // Success or failure, always send notifications\n    notifyBuild(currentBuild.result)\n  }\n}\n\ndef notifyBuild(String buildStatus = 'STARTED') {\n  // build status of null means successful\n  buildStatus = buildStatus ?: 'SUCCESS'\n\n  // Default values\n  def colorName = 'RED'\n  def colorCode = '#FF0000'\n  def subject = \"${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\"\n  def summary = \"${subject} (${env.BUILD_URL})\"\n  def details = \"\"\"&lt;p&gt;STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':&lt;/p&gt;\n    &lt;p&gt;Check console output at &amp;QUOT;&lt;a href='${env.BUILD_URL}'&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&amp;QUOT;&lt;/p&gt;\"\"\"\n\n  // Override default values based on build status\n  if (buildStatus == 'STARTED') {\n    color = 'YELLOW'\n    colorCode = '#FFFF00'\n  } else if (buildStatus == 'SUCCESS') {\n    color = 'GREEN'\n    colorCode = '#00FF00'\n  } else {\n    color = 'RED'\n    colorCode = '#FF0000'\n  }\n\n  // Send notifications\n  slackSend (color: colorCode, message: summary)\n\n  hipchatSend (color: color, notify: true, message: summary)\n\n  emailext (\n      subject: subject,\n      body: details,\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"you-have-been-notified\"><a class=\"anchor\" href=\"#you-have-been-notified\"></a>You have been notified!</h3>\n<div class=\"paragraph\">\n<p>I now get notified twice per build on three different channels.  I&#8217;m not sure I\nneed to get notified this much for such a short build.  However, for a longer\nor complex CD pipeline, I might want exactly that.  If needed, I could even\nimprove this to handle other status strings and call it as needed throughout\nmy pipeline.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-07-15/final.png\" alt=\"Final View of Notifications\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Slack+Plugin\">Slack Plugin</a></p>\n</li>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/HipChat+Plugin\">HipChat Plugin</a></p>\n</li>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Email-ext+plugin\">Email-ext Plugin</a></p>\n</li>\n<li>\n<p><a href=\"/blog/2016/05/31/pipeline-snippetizer/\">Jenkins Pipeline Snippet Generator</a></p>\n</li>\n</ul>\n</div>\n</div>","id":"523da562-6777-53bd-978f-45ab4cb9092c","title":"Sending Notifications in Pipeline","date":"2016-07-18T00:00:00.000Z","slug":"/blog/2016/07/18/pipeline-notifications/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},"pageContext":{"id":"523da562-6777-53bd-978f-45ab4cb9092c"}},
    "staticQueryHashes": ["1271460761","3649515864"]}