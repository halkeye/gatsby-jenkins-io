{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>At Jenkins World on Wednesday 14th of September, the Jenkins project was happy to\nintroduce the beta release of Blue Ocean. Blue Ocean is the new user experience\nfor Jenkins, built from the ground up to take advantage of Jenkins Pipeline.\nIt is an entire rethink of the the way that modern developers will use Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Blue Ocean is available today via the Jenkins Update Center for Jenkins users\nrunning 2.7.1 and above.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"get-the-beta\"><a class=\"anchor\" href=\"#get-the-beta\"></a>Get the beta</h3>\n<div class=\"paragraph\">\n<p>Just search for <em>BlueOcean beta</em> in the Update Center, install it,\nbrowse to the dashboard, and then click the <em>Try BlueOcean UI</em> button on the dashboard.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"whats-included\"><a class=\"anchor\" href=\"#whats-included\"></a>Whats included?</h3>\n<div class=\"paragraph\">\n<p><a href=\"/blog/2016/05/26/introducing-blue-ocean/\">Back in April we open sourced Blue Ocean</a>\nand shared our vision with the community. We&#8217;re very happy that all the things we showed you then have\nshipped in the beta (software projects run <strong>on time</strong>?!).</p>\n</div>\n<div class=\"paragraph\">\n<p>For a refresher on Blue Ocean, watch this short video:</p>\n</div>\n<center>\n<iframe width=\"853\" height=\"480\"\nsrc=\"https://www.youtube-nocookie.com/embed/3dITffteCD4?rel=0\" frameborder=\"0\"\nallowfullscreen></iframe>\n</center>\n</div>\n<div class=\"sect2\">\n<h3 id=\"declarative-pipeline\"><a class=\"anchor\" href=\"#declarative-pipeline\"></a>Declarative Pipeline</h3>\n<div class=\"paragraph\">\n<p>We have heard from the community about the usability of <a href=\"/doc/pipeline\">Jenkins\nPipeline</a>. Much of the feedback we received was to a desire to\n<strong>configure</strong> Pipelines rather than <strong>script</strong> them, and to make it easy for beginners\nto get started with their first Pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is how <strong>Declarative Pipeline</strong> was born. We&#8217;ve introduced a new method whereby\nyou declare how you want your Pipeline to look rather than using Pipeline Script\n - it&#8217;s configuration rather than code.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s a small example of a Declarative Pipeline for nodejs that runs the whole\nPipeline inside a Docker container:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n  agent docker:'node:6.3'\n  stages {\n    stage('build') {\n      sh 'npm --version'\n      sh 'npm install'\n    }\n    stage ('test') {\n      sh 'npm test'\n    }\n  }\n}\n\n// Script //\nnode('docker') {\n  docker.image('node:6.3').inside {\n    stage('build') {\n      sh 'npm --version'\n      sh 'npm install'\n    }\n\n    stage('test') {\n      sh 'npm test'\n    }\n  }\n}</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Docker support in Declarative Pipeline allows you to version your application code,\nJenkins Pipeline configuration, and the environment where your pipeline will run,\nall in a single repository. It&#8217;s a crazy powerful combination.</p>\n</div>\n<div class=\"paragraph\">\n<p>Declarative Pipeline introduces the <code>postBuild</code> section that makes it\neasy to run things conditionally at the end of your Pipeline without the\ncomplexity of the <code>try&#8230;&#8203; catch</code> of Pipeline script.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npostBuild {\n  always {\n    sh 'echo \"This will always run\"'\n  }\n  success {\n    sh 'echo \"This will run only if successful\"'\n  }\n  failure {\n    sh 'echo \"This will run only if failed\"'\n  }\n  unstable {\n    sh 'echo \"This will run only if the run was marked as unstable\"'\n  }\n  changed {\n    sh 'echo \"This will run only if the state of the Pipeline has changed\"'\n    sh 'echo \"For example, the Pipeline was previously failing but is now successful\"'\n    sh 'echo \"... or the other way around :)\"'\n  }\n}\n\n\n// Script //\nnode('docker') {\n  try {\n    stage('build') {\n      /* .. snip .. */\n    }\n    stage('test') {\n      /* .. snip .. */\n    }\n\n    sh 'echo \"This will run only if successful\"'\n  }\n  catch (exc) {\n    if (currentBuild.result == 'UNSTABLE') {\n      sh 'echo \"This will run only if the run was marked as unstable\"'\n    }\n    if (currentBuild.result == 'FAILURE') {\n      sh 'echo \"This will run only if failed\"'\n    }\n  }\n  finally {\n    sh 'echo \"This will always run\"'\n  }\n}</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And there is so much more!</p>\n</div>\n<div class=\"paragraph\">\n<p>If you have the Blue Ocean beta installed you already have Declarative Pipeline.\nWhile Declarative Pipeline is still alpha at the moment, we do encourage you to\n<a href=\"https://github.com/jenkinsci/pipeline-model-definition-plugin/wiki/getting%20started\">follow our getting started guide</a>,\n give us feedback on the <a href=\"/content/mailing-lists/\">Jenkins Users mailing list</a>\n or file bugs <a href=\"https://issues.jenkins.io\">against the 'pipeline-model-definition' component in JIRA</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"introducing-the-pipeline-editor\"><a class=\"anchor\" href=\"#introducing-the-pipeline-editor\"></a>Introducing the Pipeline Editor</h3>\n<div class=\"paragraph\">\n<p>The Pipeline Editor is a graphical user interface that gives Jenkins users the\nsimplest way yet to get started with creating Pipelines in Jenkins. It will also\nsave a lot of time for intermediate and advanced Jenkins users as a way to author\nPipelines.</p>\n</div>\n<div class=\"paragraph\">\n<p>When you build your Pipeline in the Editor and click the save button, the editor\nwill commit a new <strong>Jenkinsfile</strong> back to your repository in the form of the new\nDeclarative Pipeline. When you want to edit again, Jenkins will read it from\nyour repository exactly how you saw it previously.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Pipeline Editor is a work in progress and should arrive in a beta release soon.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/blueocean/pipeline-editor.png\" alt=\"Personalized dashboard\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"thank-you\"><a class=\"anchor\" href=\"#thank-you\"></a>Thank you</h3>\n<div class=\"paragraph\">\n<p>Thanks for reading our news from Jenkins World and be sure to check the blog\nfor regular updates!</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;d also like to thank our amazing community for their feedback and support\nas we change the way software teams around the world use Jenkins. We couldn&#8217;t\ndo this without you.</p>\n</div>\n</div>","id":"9f1352d7-4bb9-5af7-a7b7-3dab3d29a690","title":"Announcing the Blue Ocean beta, Declarative Pipeline and Pipeline Editor","date":"2016-09-19T00:00:00.000Z","slug":"/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"blog/author/i386","twitter":"i386"}]}},"pageContext":{"next":"/blog/2016/09/20/jom-plugin-development/","previous":"/blog/2016/09/09/take-the-2016-jenkins-survey-blog/","id":"9f1352d7-4bb9-5af7-a7b7-3dab3d29a690"}},
    "staticQueryHashes": ["1271460761","3649515864"]}