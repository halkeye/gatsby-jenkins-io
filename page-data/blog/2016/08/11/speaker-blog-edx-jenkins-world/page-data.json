{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/08/11/speaker-blog-edx-jenkins-world/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by Ben Patterson, Engineering Manager at\n<a href=\"https://www.edx.org/\">edX</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Picking a pear from a basket is straightforward when you can hold it in your hand, feel its weight, perhaps give a gentle squeeze, observe its color and look more closely at any bruises. If the only information we had was a photograph from one angle, we’d have to do some educated guessing. <span class=\"image right\"><img src=\"/images/post-images/1pear.png\" alt=\"1pear\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>As developers, we don’t get a photograph; we get a green checkmark or a red x. We use that to decide whether or not we need to switch gears and go back to a pull request we submitted recently. At edX, we take advantage of some Jenkins features that could give us more granularity on GitHub pull requests, and make that decision less of a guessing game.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/5pears.png\" alt=\"5pears\"></span></p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"multiple-contexts-reporting-back-when-theyre-available\"><a class=\"anchor\" href=\"#multiple-contexts-reporting-back-when-theyre-available\"></a>Multiple contexts reporting back when they’re available</h3>\n<div class=\"paragraph\">\n<p>Pull requests on our platform are evaluated from several angles: static code analysis including linting and security audits, javascript unit tests, python unit tests, acceptance tests and accessibility tests. Using an elixir of plugins, including the GitHub Pull Request Builder Plugin, we put more direct feedback into the hands of the contributor so s/he can quickly decide how much digging is going to be needed.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, if I made adjustments to my branch and know more requirements are coming, then I may not be as worried about passing the linter; however, if my unit tests have failed, I likely have a problem I need to address regardless of when the new requirements arrive. Timing is important as well. Splitting out the contexts means we can run tests in parallel and report results faster.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"developers-can-re-run-specific-contexts\"><a class=\"anchor\" href=\"#developers-can-re-run-specific-contexts\"></a>Developers can re-run specific contexts</h3>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/jenkins-run-python.png\" alt=\"jenkins run python\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Occasionally the feedback mechanism fails. It is oftentimes a flaky condition in a test or in test setup. (Solving flakiness is a different discussion I’m sidestepping. Accept the fact that the system fails for purposes of this blog entry.) Engineers are armed with the power of re-running specific contexts, also available through the PR plugin. A developer can say “jenkins run bokchoy” to re-run the acceptance tests, for example. A developer can also re-run everything with “jenkins run all”. These phrases are set through the GitHub Pull Request Builder configuration.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"more-granular-data-is-easier-to-find-for-our-tools-team\"><a class=\"anchor\" href=\"#more-granular-data-is-easier-to-find-for-our-tools-team\"></a>More granular data is easier to find for our Tools team</h3>\n<div class=\"paragraph\">\n<p>Splitting the contexts has also given us important data points for our Tools team to help in highlighting things like flaky tests, time to feedback and other metrics that help the org prioritize what’s important. We use this with a log aggregator (in our case, Splunk) to produce valuable reports such as this one.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/95th-percentile.png\" alt=\"95th percentile\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>I could go on! The short answer here is we have an intuitive way of divvying up our tests, not only for optimizing the overall amount of time it takes to get build results, but also to make the experience more user-friendly to developers.</p>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-caution\" title=\"Caution\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Ben will be <a href=\"https://www.cloudbees.com/using-jenkins-diverse-feedback-github\">presenting</a> more on this topic at\n<a href=\"https://www.cloudbees.com/jenkinsworld/home\">Jenkins World</a> in September,\nregister with the code <code>JWFOSS</code> for a 20% discount off your pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>","id":"9a0e4574-a766-5c76-b7d9-8fc1d1fbcde3","title":"Using Jenkins for Disparate Feedback on GitHub","date":"2016-08-11T00:00:00.000Z","slug":"/blog/2016/08/11/speaker-blog-edx-jenkins-world/","authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman/","twitter":null}]}},"pageContext":{"id":"9a0e4574-a766-5c76-b7d9-8fc1d1fbcde3"}},
    "staticQueryHashes": ["1271460761","3649515864"]}