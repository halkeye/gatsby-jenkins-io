{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/08/09/ewm-beta-version/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>This blog post is a continuation of the External Workspace Manager Plugin related posts, starting with\n<a href=\"/blog/2016/05/23/external-workspace-manager-plugin/\">the introductory blog post</a>, and followed by\n<a href=\"/blog/2016/06/30/ewm-alpha-version/\">the alpha version release announcement</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>As the title suggests, the beta version of the External Workspace Manager Plugin was launched!\nThis means that it&#8217;s available only in the\n<a href=\"/blog/2013/09/23/experimental-plugins-update-center/\">Experimental Plugins Update Center</a>.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nTake care when installing plugins from the Experimental Update Center, since they may change in\nbackward-incompatible ways.\nIt&#8217;s advisable not to use it for Jenkins production environments.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>The plugin&#8217;s repository is on <a href=\"https://github.com/jenkinsci/external-workspace-manager-plugin\">GitHub</a>.\nThe complete plugin&#8217;s documentation can be accessed\n<a href=\"https://github.com/jenkinsci/external-workspace-manager-plugin/blob/master/README.md\">here</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"whats-new\"><a class=\"anchor\" href=\"#whats-new\"></a>What&#8217;s new</h3>\n<div class=\"paragraph\">\n<p>Bellow is a summary of the features added so far, since the alpha version.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"multiple-upstream-run-selection-strategies\"><a class=\"anchor\" href=\"#multiple-upstream-run-selection-strategies\"></a>Multiple upstream run selection strategies</h4>\n<div class=\"paragraph\">\n<p>It has support for the\n<a href=\"https://github.com/jenkinsci/run-selector-plugin\">Run Selector Plugin</a> (which is still in beta),\nso you can provide different run selection strategies when allocating a disk from the upstream job.</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s suppose that we have an upstream job that clones the repository and builds the project:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def extWorkspace = exwsAllocate 'diskpool1'\n\nnode ('linux') {\n    exws (extWorkspace) {\n        checkout scm\n        sh 'mvn clean install -DskipTests'\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In the downstream job, we run the tests on a different node, but we reuse the same workspace as the previous job:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def run = selectRun 'upstream'\ndef extWorkspace = exwsAllocate selectedRun: run\n\nnode ('test') {\n    exws (extWorkspace) {\n        sh 'mvn test'\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>selectRun</code> in this example selects the last stable build from the upstream job.\nBut, we can be more explicit, and select a specific build number from the upstream job.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def run = selectRun 'upstream',\n selector: [$class: 'SpecificRunSelector', buildNumber: UPSTREAM_BUILD_NUMBER]\ndef extWorkspace = exwsAllocate selectedRun: run\n// ...</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When the <code>selectedRun</code> parameter is given to the <code>exwsAllocate</code> step, it will allocate the same workspace that was\nused by that run.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Run Selector Plugin has several run selection strategies that are briefly explained\n<a href=\"https://github.com/jenkinsci/run-selector-plugin/blob/master/README.md\">here</a>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"automatic-workspace-cleanup\"><a class=\"anchor\" href=\"#automatic-workspace-cleanup\"></a>Automatic workspace cleanup</h4>\n<div class=\"paragraph\">\n<p>Provides an automatic workspace cleanup by integrating the\n<a href=\"https://github.com/jenkinsci/ws-cleanup-plugin\">Workspace Cleanup Plugin</a>.\nFor example, if we need to delete the workspace only if the build has failed, we can do the following:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def extWorkspace = exwsAllocate diskPoolId: 'diskpool1'\n\nnode ('linux') {\n    exws (extWorkspace) {\n        try {\n            checkout scm\n            sh 'mvn clean install'\n        } catch (e) {\n            currentBuild.result = 'FAILURE'\n            throw e\n        } finally {\n            step ([$class: 'WsCleanup', cleanWhenFailure: false])\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More workspace cleanup examples can be found at this\n<a href=\"https://github.com/jenkinsci/external-workspace-manager-plugin/blob/master/doc/WORKSPACE_CLEANUP.md\">link</a>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"custom-workspace-path\"><a class=\"anchor\" href=\"#custom-workspace-path\"></a>Custom workspace path</h4>\n<div class=\"paragraph\">\n<p>Allows the user to specify a custom workspace path to be used when allocating workspace on the disk.\nThe plugin offers two alternatives for doing this:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>by defining a global workspace template for each Disk Pool</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This can be defined in the Jenkins global config, <em>External Workspace Definitions</em> section.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/ewm/global-custom-workspace-path.png\" alt=\"global custom workspace path\" title=\"Global Custom Workspace Path\"></span></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>by defining a custom workspace path in the Pipeline script</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>We can use the Pipeline DSL to compute the workspace path.\nThen we pass this path as input parameter to the <code>exwsAllocate</code> step.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def customPath = \"${env.JOB_NAME}/${PULL_REQUEST_NUMBER}/${env.BUILD_NUMBER}\"\ndef extWorkspace = exwsAllocate diskPoolId: 'diskpool1', path: customPath\n// ...</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For more details see the afferent\n<a href=\"https://github.com/jenkinsci/external-workspace-manager-plugin/blob/master/doc/CUSTOM_WORKSPACE_PATH.md\">documentation page</a>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"disk-pool-restrictions\"><a class=\"anchor\" href=\"#disk-pool-restrictions\"></a>Disk Pool restrictions</h4>\n<div class=\"paragraph\">\n<p>The plugin comes with Disk Pool restriction strategies.\nIt does this by using the restriction capabilities provided by the\n<a href=\"https://github.com/jenkinsci/job-restrictions-plugin\">Job Restrictions Plugin</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, we can restrict a Disk Pool to be allocated only if the Jenkins job in which it&#8217;s allocated was triggered\nby a specific user:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/ewm/restriction-by-user.png\" alt=\"restriction by user\" title=\"Disk Pool Restriction By User\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Or, we can restrict the Disk Pool to be allocated only for those jobs whose name matches a well defined pattern:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/ewm/restriction-by-job-name.png\" alt=\"restriction by job name\" title=\"Disk Pool Restriction By Job Name\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"whats-next\"><a class=\"anchor\" href=\"#whats-next\"></a>What&#8217;s next</h3>\n<div class=\"paragraph\">\n<p>Currently there is ongoing work for providing flexible disk allocation strategies.\nThe user will be able to define a default disk allocation strategy in the Jenkins global config.\nSo for example, we want to select the disk with the most usable space as default allocation strategy:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/ewm/global-disk-allocation-strategy.png\" alt=\"global disk allocation strategy\" title=\"Global Disk Allocation Strategy\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>If needed, this allocation strategy may be overridden in the Pipeline code.\nLet&#8217;s suppose that for a specific job, we want to allocate the disk with the highest read speed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def extWorkspace = exwsAllocate diskPoolId: 'diskpool1', strategy: fastestRead()\n// ...</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When this feature is completed, the plugin will enter a final testing phase.\nIf all goes to plan, a stable version should be released in about two weeks.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you have any issues in setting up or using the plugin, please feel free to ask me on the plugin&#8217;s Gitter\n<a href=\"https://gitter.im/jenkinsci/external-workspace-manager-plugin\">chat</a>.\nAny feedback is welcome, and you may provide it either on the Gitter chat, or on\n<a href=\"https://issues.jenkins.io\">Jira</a> by using the <em>external-workspace-manager-plugin</em> component.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://gitter.im/jenkinsci/external-workspace-manager-plugin?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link\"><span class=\"image\"><img src=\"https://badges.gitter.im/jenkinsci/external-workspace-manager-plugin.svg\" alt=\"title: &quot;Gitter&quot;\"></span></a></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/jenkinsci/external-workspace-manager-plugin\">Project repository</a></p>\n</li>\n<li>\n<p><a href=\"/blog/2016/05/23/external-workspace-manager-plugin/\">Project intro blog post</a></p>\n</li>\n<li>\n<p><a href=\"/blog/2016/06/30/ewm-alpha-version/\">Alpha version announcement</a></p>\n</li>\n<li>\n<p><a href=\"https://summerofcode.withgoogle.com/\">GSoC page</a></p>\n</li>\n<li>\n<p><a href=\"/projects/gsoc/\">Jenkins GSoC Page</a></p>\n</li>\n</ul>\n</div>\n</div>","id":"e7eb5984-a870-5548-985b-25b9210fb2a0","title":"GSoC: External Workspace Manager for Pipeline. Beta release is available","date":"2016-08-09T00:00:00.000Z","slug":"/blog/2016/08/09/ewm-beta-version/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"alexsomai","html":"","id":"alexsomai","irc":null,"linkedin":null,"name":"Alexandru Somai","slug":"/blog/authors/alexsomai","twitter":"alex_somai"}]}},"pageContext":{"next":"/blog/2016/08/10/rails-cd-with-pipeline/","previous":"/blog/2016/08/08/docker-pipeline-environments/","id":"e7eb5984-a870-5548-985b-25b9210fb2a0"}},
    "staticQueryHashes": ["1271460761","3649515864"]}