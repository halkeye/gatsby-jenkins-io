{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/08/29/sauce-pipeline/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Testing web applications across multiple browsers on different platforms can be challenging even for smaller applications.\nWith Jenkins and the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Sauce+OnDemand+Plugin\">Sauce OnDemand Plugin</a>,\nyou can wrangle that complexity by defining your Pipeline as Code.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"pipeline-ui-testing-too\"><a class=\"anchor\" href=\"#pipeline-ui-testing-too\"></a>Pipeline &#9829; UI Testing, Too</h3>\n<div class=\"paragraph\">\n<p>I recently started looking for a way to do browser UI testing for an open-source JavaScript project to which I contribute.\nThe project is targeted primarily at\n<a href=\"https://nodejs.org\">Node.js</a>\nbut we&#8217;re committed to maintaining browser-client compatibility as well.\nThat means we should run tests on a matrix of browsers.\n<a href=\"https://saucelabs.com/\">Sauce Labs</a>\nhas an \"open-sauce\" program that provides free test instances to open-source projects.\nI decided to try using the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Sauce+OnDemand+Plugin\">Sauce OnDemand Plugin</a>\nand\n<a href=\"https://nightwatchjs.org/\">Nightwatch.js</a>\nto run Selenium tests on a sample project first, before trying a full-blown suite of tests.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"starting-from-framework\"><a class=\"anchor\" href=\"#starting-from-framework\"></a>Starting from Framework</h3>\n<div class=\"paragraph\">\n<p>I started off by following Sauce Labs' instructions on\n\"<a href=\"https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Labs+with+Jenkins\">Setting up Sauce Labs with Jenkins</a>\"\nas far as I could.\nI installed the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/JUnit+Plugin\">JUnit</a> and\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Sauce+OnDemand+Plugin\">Sauce OnDemand</a>\nplugins, created an account with Sauce Labs, and\n<a href=\"https://wiki.saucelabs.com/display/DOCS/Installing+and+Configuring+the+Sauce+OnDemand+Plugin+for+Jenkins\">added my Sauce Labs credentials to Jenkins</a>.\nFrom there I started to get a little lost.\nI&#8217;m new to Selenium and I had trouble understanding how to translate the instructions to my situation.\nI needed a working example that I could play with.</p>\n</div>\n<div class=\"paragraph\">\n<p>Happily, there&#8217;s a whole range of sample projects in\n\"<a href=\"https://github.com/saucelabs-sample-test-frameworks\">saucelabs-sample-test-frameworks</a>\"\non GitHub, which show how to integrate Sauce Labs with various test frameworks, including Nightwatch.js.\nI forked the Nightwatch.js sample to\n<a href=\"https://github.com/bitwiseman/JS-Nightwatch.js\">bitwiseman/JS-Nightwatch.js</a>\nand set to writing my <code>Jenkinsfile</code>.\nBetween the sample and the Sauce Labs instructions,\nI was able to write a pipeline that ran five tests on one browser via\n<a href=\"https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy\">Sauce Connect</a>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    stage \"Build\"\n    checkout scm\n\n    sh 'npm install' <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n    stage \"Test\"\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') { <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n        sauceconnect(options: '', useGeneratedTunnelIdentifier: false, verboseLogging: false) { <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n            sh './node_modules/.bin/nightwatch -e chrome --test tests/guineaPig.js || true' <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n            junit 'reports/**' <i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\n            step([$class: 'SauceOnDemandTestPublisher']) <i class=\"conum\" data-value=\"6\"></i><b>(6)</b>\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>Install dependencies</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>Use my\n<a href=\"https://wiki.saucelabs.com/display/DOCS/Installing+and+Configuring+the+Sauce+OnDemand+Plugin+for+Jenkins\">previously added sauce credentials</a></td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>Start up the\n<a href=\"https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy\">Sauce Connect</a>\ntunnel to Sauce Labs</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>Run Nightwatch.js</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"5\"></i><b>5</b></td>\n<td>Use JUnit to track results and show a trend graph</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"6\"></i><b>6</b></td>\n<td>Link result details from Sauce Labs</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This pipeline expects to be run from a <code>Jenkinsfile</code> in SCM.\nTo copy and paste it directly into a Jenkins Pipeline job, replace the <code>checkout scm</code> step with\n<code>git url:'https://github.com/bitwiseman/JS-Nightwatch.js', branch: 'sauce-pipeline'</code>.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>I ran this job a few times to get the JUnit report to show a trend graph.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-08-29/pipeline-report.png\" alt=\"Pipeline Report for &quot;sauce-pipeline&quot; Branch\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This sample app generates the <code>SauceOnDemandSessionID</code> for each test, enabling the Jenkins Sauce OnDemand Plugin&#8217;s result publisher to link results to details Sauce Labs captured during the run.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-08-29/pipeline-results.png\" alt=\"Sauce Test Results\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-08-29/sauce-details.png\" alt=\"Sauce Test Result Details\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"adding-platforms\"><a class=\"anchor\" href=\"#adding-platforms\"></a>Adding Platforms</h3>\n<div class=\"paragraph\">\n<p>Next I wanted to add a few more platforms to my matrix.\nThis would require changing both the test framework configuration and the pipeline.\nI&#8217;d need to add new named combinations of platform, browser, and browser version (called \"environments\") to the Nightwatch.js configuration file,\nand modify the pipeline to run tests in those new environments.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is a perfect example of the power of pipeline as code.\nIf I were working with a separately configured pipeline,\nI&#8217;d have to make the change to the test framework, then change the pipeline manually.\nWith my pipeline checked in as code,\nI could change both in one commit,\npreventing errors resulting from pipeline configurations going out of sync from the rest of the project.</p>\n</div>\n<div class=\"paragraph\">\n<p>I added three new environments to <code>nightwatch.json</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-js\" data-lang=\"js\">\"test_settings\" : {\n  \"default\": { /*----8&lt;----8&lt;----8&lt;----*/ },\n  \"chrome\": { /*----8&lt;----8&lt;----8&lt;----*/ },\n\n  \"firefox\": {\n    \"desiredCapabilities\": {\n      \"platform\": \"linux\",\n      \"browserName\": \"firefox\",\n      \"version\": \"latest\"\n    }\n  },\n  \"ie\": {\n    \"desiredCapabilities\": {\n      \"platform\": \"Windows 10\",\n      \"browserName\": \"internet explorer\",\n      \"version\": \"latest\"\n    }\n  },\n  \"edge\": {\n    \"desiredCapabilities\": {\n      \"platform\": \"Windows 10\",\n      \"browserName\": \"MicrosoftEdge\",\n      \"version\": \"latest\"\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And I modified my <code>Jenkinsfile</code> to call them:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">//----8&lt;----8&lt;----8&lt;----8&lt;----8&lt;----8&lt;----\nsauceconnect(options: '', useGeneratedTunnelIdentifier: false, verboseLogging: false) {\n    def configs = [ <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n        'chrome',\n        'firefox',\n        'ie',\n        'edge'\n    ].join(',')\n    // Run selenium tests using Nightwatch.js\n    sh \"./node_modules/.bin/nightwatch -e ${configs} --test tests/guineaPig.js\" <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n} //----8&lt;----8&lt;----8&lt;----8&lt;----8&lt;----8&lt;----</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>Using an array to improve readability and make it easy to add more platforms later.</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>Changed from single-quoted string to double-quoted to support variable substitution.</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Test frameworks have bugs too. Nightwatch.js (v0.9.8) generates incomplete JUnit files,\nreporting results without enough information in them to distinguish between platforms.\nI implemented a fix for it and\n<a href=\"https://github.com/nightwatchjs/nightwatch/pull/1160\">submitted a PR</a> to Nightwatch.js.\nThis blog shows output with that fix applied locally.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>As expected, Jenkins picked up the new pipeline and ran Nightwatch.js on four platforms.\nSauce Labs of course recorded the results and correctly linked them into this build.\nNightwatch.js was already configured to use multiple worker threads to run tests against those platforms in parallel, and\nmy Sauce Labs account supported running them all at the same time,\nletting me cover four configurations in less that twice the time,\nand that added time was most due to individual new environments taking longer to complete.\nWhen I move to the actual project, this will let me run broad acceptance passes quickly.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-08-29/platforms-results.png\" alt=\"Sauce Labs Results List\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-08-29/platforms-report.png\" alt=\"JUnit Report Showing Added Platforms\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"conclusion-to-awesome-and-beyond\"><a class=\"anchor\" href=\"#conclusion-to-awesome-and-beyond\"></a>Conclusion: To Awesome and Beyond</h3>\n<div class=\"paragraph\">\n<p>Considering the complexity of the system, I was impressed with how easy it was to integrate Jenkins with Sauce OnDemand to start testing on multiple browsers.\nThe plugin worked flawlessly with Jenkins Pipeline.\nI went ahead and ran some additional tests to show that failure reporting also behaved as expected.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">//----8&lt;----8&lt;----8&lt;----8&lt;----8&lt;----8&lt;----\n    sh \"./node_modules/.bin/nightwatch -e ${configs}\" <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n//----8&lt;----8&lt;----8&lt;----8&lt;----8&lt;----8&lt;----</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>Removed <code>--test</code> filter to run all tests</td>\n</tr>\n</table>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-08-29/tests-report.png\" alt=\"Tests\" width=\"Platorms\" height=\"Results\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"epilogue-pipeline-vs-freestyle\"><a class=\"anchor\" href=\"#epilogue-pipeline-vs-freestyle\"></a>Epilogue: Pipeline vs. Freestyle</h3>\n<div class=\"paragraph\">\n<p>Just for comparison here&#8217;s the final state of this job in Freestyle UI versus fully-commented pipeline code:</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This includes the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/AnsiColor+Plugin\">AnsiColor Plugin</a>\nto support Nightwatch.js' default ANSI color output.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect3\">\n<h4 id=\"freestyle\"><a class=\"anchor\" href=\"#freestyle\"></a>Freestyle</h4>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-08-29/freestyle-1.png\" alt=\"Freestyle Job Configuration - SCM\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-08-29/freestyle-2.png\" alt=\"Freestyle Job Configuration - Wrappers and Sauce\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-08-29/freestyle-3.png\" alt=\"Freestyle Job Configuration - Build and Publish\">\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"pipeline\"><a class=\"anchor\" href=\"#pipeline\"></a>Pipeline</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    stage \"Build\"\n    checkout scm\n\n    // Install dependencies\n    sh 'npm install'\n\n    stage \"Test\"\n\n    // Add sauce credentials\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n        // Start sauce connect\n        sauceconnect(options: '', useGeneratedTunnelIdentifier: false, verboseLogging: false) {\n\n            // List of browser configs we'll be testing against.\n            def platform_configs = [\n                'chrome',\n                'firefox',\n                'ie',\n                'edge'\n            ].join(',')\n\n            // Nightwatch.js supports color ouput, so wrap this step for ansi color\n            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {\n\n                // Run selenium tests using Nightwatch.js\n                // Ignore error codes. The junit publisher will cover setting build status.\n                sh \"./node_modules/.bin/nightwatch -e ${platform_configs} || true\"\n            }\n\n            junit 'reports/**'\n\n            step([$class: 'SauceOnDemandTestPublisher'])\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>This pipeline expects to be run from a <code>Jenkinsfile</code> in SCM.\nTo copy and paste it directly into a Jenkins Pipeline job, replace the <code>checkout scm</code> step with\n<code>git url:'https://github.com/bitwiseman/JS-Nightwatch.js', branch: 'sauce-pipeline'</code>.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Not only is the pipeline as code more compact,\nit also allows for comments to further clarify what is being done.\nAnd as I noted earlier,\nchanges to this pipeline code are committed the same as changes to the rest of the project,\nkeeping everything synchronized, reviewable, and testable at any commit.\nIn fact, you can view the full set of commits for this blog post in the\n<a href=\"https://github.com/bitwiseman/JS-Nightwatch.js/tree/blog/sauce-pipeline\">blog/sauce-pipeline</a>\nbranch of the\n<a href=\"https://github.com/bitwiseman/JS-Nightwatch.js\">bitwiseman/JS-Nightwatch.js</a>\nrepository.</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Sauce+OnDemand+Plugin\">Sauce OnDemand Plugin</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/bitwiseman/JS-Nightwatch.js\">bitwiseman/JS-Nightwatch.js</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/saucelabs-sample-test-frameworks\">saucelabs-sample-test-frameworks</a></p>\n</li>\n</ul>\n</div>\n</div>","id":"48307a4d-711a-56d1-885f-e9d1945fa4d5","title":"Browser-testing with Sauce OnDemand and Pipeline","date":"2016-08-29T00:00:00.000Z","slug":"/blog/2016/08/29/sauce-pipeline/","authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman/","twitter":"bitwiseman"}]}},"pageContext":{"id":"48307a4d-711a-56d1-885f-e9d1945fa4d5"}},
    "staticQueryHashes": ["1271460761","3649515864"]}