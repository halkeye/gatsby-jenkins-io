{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/08/29/jenkins-world-speaker-blog-goodgame/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by Jenkins World speaker David Hinske, Release\nEngineer at <a href=\"https://www.goodgamestudios.com/\">Goodgame Studios</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image right\"><img src=\"/images/conferences/Jenkins-World_125x125.png\" alt=\"Jenkins World\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Hey there, my name is David Hinske and I work at Goodgame Studios (GGS), a game\ndevelopment company in Hamburg, Germany. As Release Engineer in a company with\nseveral development teams, it comes in handy using several Jenkins instances.\nWhile this approach works fine in our company and gives the developers a lot of\nfreedom, we came across some long-term problems concerning maintenance and\nstandards. These problems were mostly caused by misconfiguration or non-use of\nplugins. With “configuration as code” in mind, I took the approach to apply\nstatic code analysis with the help of SonarQube, a platform to manage code\nquality, for all of our Jenkins job configurations.</p>\n</div>\n<div class=\"paragraph\">\n<p>As a small centralized team, we were looking for an easy way to control the\nhealth of our growing Jenkins infrastructure. With considering “configuration\nas code“, I developed a simple extension of SonarQube, to manage the quality\nand usage of all spawned Jenkins instances. The given SonarQube features (like\ncustomized rules/metrics, quality profiles and dashboards) allow us and the\ndevelopment teams to analyze and measure the quality of all created jobs in our\ncompany. Even though Jenkins configuration analysis cannot cover all\nSonarQube&#8217;s axes of code quality, I think there is still potential for\nconventions/standards, duplications, complexity, potential bugs\n(misconfiguration) and design and architecture.</p>\n</div>\n<div class=\"paragraph\">\n<p>The results of this analysis can be used by all people working with Jenkins. To\nachieve this, I developed a simple extension of SonarQube, containing\neverything which is needed to hook up our SonarQube with our Jenkins\nenvironment. The implementation contains a new basic-language “Jenkins“ and an\ninitial set of rules.</p>\n</div>\n<div class=\"paragraph\">\n<p>Of course the needs depend strongly on the way Jenkins is being used, so not\nevery rule implemented might be useful for every team, but this applies to all\ntypes of code analysis. The main inspirations for the rules were developer\nfeedback and some articles found in the web. The different ways Jenkins can be\nconfigured provides the potential for many more rules. With this new approach\nof quality analysis, we can enforce best practices like:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Polling must die (Better to triggerb uilds from pushes than poll the\nrepository every x minutes).</p>\n</li>\n<li>\n<p>Use Log Rotator (Not using log-rotator can result in disk space problems on\nthe controller).</p>\n</li>\n<li>\n<p>Use agents/labels (Jobs should be defined where to run).</p>\n</li>\n<li>\n<p>Don’t build on the controller (In larger systems, don&#8217;t build on the controller).</p>\n</li>\n<li>\n<p>Enforce plugin usage (For example: Timestamp, Mask-Passwords).</p>\n</li>\n<li>\n<p>Naming sanity (Limit project names to a sane (e.g. alphanumeric) character\nset).</p>\n</li>\n<li>\n<p>Analyze Groovy Scripts (For example: Prevent System.exit(0) in System Groovy\nScripts).</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/jw-speaker-blog-goodgame/jenkins1.png\" alt=\"jenkins1\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Besides taking control of all configuration of any Jenkins instance we want,\nthere is also room for additional metrics, like measuring the amount and\ndifferent types of jobs (Freestyle/Maven etc&#8230;&#8203;) to get an overview about the\ngeneral load of the Jenkins instance. A more sophisticated idea is to measure\ncomplexity of jobs and even pipelines. As code, jobs configuration gets harder\nto understand the more steps are involved. On the one hand scripts, conditions\nand many parameters can negatively influence the readability, especially if you\nhave external dependencies (like scripts) in different locations. On the other\nhand, pipelines can also grow very complex when many jobs are involved and\nchained for execution. It will be very interesting for us to see where and why\ntoo complex pipelines are being created.</p>\n</div>\n<div class=\"paragraph\">\n<p>On visualization we rely on the data and its interpretation of SonarQube, which\noffers a big bandwidth of widgets. Everybody can use and customize the\ndashboards. Our centralized team for example has a separate dashboard where we\ncan get a quick overview over all instances.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/jw-speaker-blog-goodgame/jenkins2.png\" alt=\"jenkins2\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The problem of \"growing\" Jenkins with maintenance problems is not new.\nEspecially when you have many developers involved, including with the access to\ncreate jobs and pipelines themselves, an analysis like this SonarQube plugin\nprovides can be useful for anyone who wants to keep their Jenkins in shape.\nCustomization and standards are playing a big role in this scenario. This blog\npost surely is not an advertisement for my developed plugin, it is more about\nthe crazy idea of using static code analysis for Jenkins job configuration. I\nhaven’t seen anything like it so far and I feel that there might be some\npotential behind this idea.</p>\n</div>\n<div class=\"paragraph\">\n<p>Join me at my Enforcing Jenkins Best Practices session at the 2016 Jenkins\nWorld to hear more!</p>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-caution\" title=\"Caution\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>David will be\n<a href=\"https://www.cloudbees.com/enforcing-jenkins-best-practices\">presenting</a>\nmore of this concept at\n<a href=\"https://www.cloudbees.com/jenkinsworld/home\">Jenkins World</a> in September.\nRegister with the code <code>JWFOSS</code> for 20% off your full conference pass.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>","id":"95ef7134-7327-5121-a920-cbff69688c23","title":"Enforcing Jenkins Best Practices","date":"2016-08-29T00:00:00.000Z","slug":"/blog/2016/08/29/jenkins-world-speaker-blog-goodgame/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/author/hinman","twitter":null}]}},"pageContext":{"next":"/blog/2016/08/29/sauce-pipeline/","previous":"/blog/2016/08/26/ask-the-experts-jenkins-world/","id":"95ef7134-7327-5121-a920-cbff69688c23"}},
    "staticQueryHashes": ["1271460761","3649515864"]}