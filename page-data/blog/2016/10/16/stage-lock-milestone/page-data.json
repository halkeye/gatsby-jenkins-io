{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/10/16/stage-lock-milestone/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/hrmpw\">Patrick Wolf</a>,\nDirector of Product Management at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Recently the Pipeline team began making several changes to improve the <code>stage</code> step and increase control of concurrent builds in Pipeline. Until now the <code>stage</code> step has been the catch-all for functionality related to the flow of builds through the Pipeline: grouping build steps into visualized stages, limiting concurrent builds, and discarding stale builds.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to improve upon each of these areas independently we decided to break this functionality into discrete steps rather than push more and more features into an already packed <code>stage</code> step.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Pipeline+Stage+Step+Plugin\">stage</a> - the <code>stage</code> step remains but is now focused on grouping steps and providing boundaries for Pipeline segments.</p>\n</li>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Lockable+Resources+Plugin\">lock</a> - the <code>lock</code> step throttles the number of concurrent builds in a defined section of the Pipeline.</p>\n</li>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Pipeline+Milestone+Step+Plugin\">milestone</a> - the <code>milestone</code> step automatically discards builds that will finish out of order and become stale.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Separating these concerns into explicit, independent steps allows for much greater control of Pipelines and broadens the set of possible use cases.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"stage\"><a class=\"anchor\" href=\"#stage\"></a>Stage</h3>\n<div class=\"paragraph\">\n<p>The <code>stage</code> step is a primary building block in Pipeline, dividing the steps of a Pipeline into explicit units and helping to visualize the progress using the \"Stage View\" plugin or <a href=\"/projects/blueocean/\">\"Blue Ocean\"</a>. Beginning with version 2.2 of \"Pipeline Stage Step\" plugin, the <code>stage</code> step now requires a block argument, wrapping all steps within the defined stage. This makes the boundaries of where each <code>stage</code> begins and ends obvious and predictable. In addition, the concurrency argument of <code>stage</code> has now been removed to make this step more concise; responsibility for concurrency control has been delegated to the <code>lock</code> step.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">stage('Build') {\n  doSomething()\n  sh \"echo $PATH\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Omitting the block from <code>stage</code> and using the concurrency argument are now deprecated in Pipeline. Pipelines using this syntax will continue to function but will produce a warning in the console log:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">Using the 'stage' step without a block argument is deprecated</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This message is only a reminder to update your Pipeline scripts; none of your Pipelines will stop working. If we reach a point where the old syntax is to be removed we will make an announcement prior to the change. We do, however, recommend that you update your existing Pipelines to utilize the new syntax.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>note:</strong> Stage View and Blue Ocean will both work with either the old <code>stage</code> syntax or the new.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"lock\"><a class=\"anchor\" href=\"#lock\"></a>Lock</h3>\n<div class=\"paragraph\">\n<p>Rather than attempt to limit the number of concurrent builds of a job using the <code>stage</code>, we now rely on the \"Lockable Resources\" plugin and the <code>lock</code> step to control this. The <code>lock</code> step limits concurrency to a single build and it provides much greater flexibility in designating where the concurrency is limited.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>lock</code> can be used to constrain an entire <code>stage</code> or just a segment:</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">stage('Build') {\n  doSomething()\n  lock('myResource') {\n    echo \"locked build\"\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>lock</code> can be also used to wrap multiple stages into a single concurrency unit:</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">lock('myResource') {\n  stage('Build') {\n    echo \"Building\"\n  }\n  stage('Test') {\n    echo \"Testing\"\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"milestone\"><a class=\"anchor\" href=\"#milestone\"></a>Milestone</h3>\n<div class=\"paragraph\">\n<p>The <code>milestone</code> step is the last piece of the puzzle to replace functionality originally intended for <code>stage</code> and adds even more control for handling concurrent builds of a job. The <code>lock</code> step limits the number of builds running concurrently in a section of your Pipeline while the <code>milestone</code> step ensures that older builds of a job will not overwrite a newer build.</p>\n</div>\n<div class=\"paragraph\">\n<p>Concurrent builds of the same job do not always run at the same rate. Depending on the network, the node used, compilation times, test times, etc. it is always possible for a newer build to complete faster than an older build. For example:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Build 1 is triggered</p>\n</li>\n<li>\n<p>Build 2 is triggered</p>\n</li>\n<li>\n<p>Build 2 builds faster than Build 1 and enters the Test stage sooner.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Rather than allowing Build 1 to continue and possibly overwrite the newer artifact produced in Build 2, you can use the <code>milestone</code> step to abort Build 1:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">stage('Build') {\n  milestone()\n  echo \"Building\"\n}\nstage('Test') {\n  milestone()\n  echo \"Testing\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When using the <code>input</code> step or the <code>lock</code> step a backlog of concurrent builds can easily stack up, either waiting for user input or waiting for a resource to become free. The <code>milestone</code> step will automatically prune all older jobs that are waiting at these junctions.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">milestone()\ninput message: \"Proceed?\"\nmilestone()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Bookending an <code>input</code> step like this allows you to select a specific build to proceed and automatically abort all antecedent builds.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">milestone()\nlock(resource: 'myResource', inversePrecedence: true) {\n  echo \"locked step\"\n  milestone()\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Similarly a pair of <code>milestone</code> steps used with a <code>lock</code> will discard all old builds waiting for a shared resource. In this example, <code>inversePrecedence: true</code> instructs the <code>lock</code> to begin most recent waiting build first, ensuring that the most recent code takes precedence.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"putting-it-all-together\"><a class=\"anchor\" href=\"#putting-it-all-together\"></a>Putting it all together</h3>\n<div class=\"paragraph\">\n<p>Each of these steps can be used independently of the others to control one aspect of a Pipeline or they can be combined to provide powerful, fine-grained control of every aspect of multiple concurrent builds flowing through a Pipeline. Here is a very simple example utilizing all three:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">stage('Build') {\n  // The first milestone step starts tracking concurrent build order\n  milestone()\n  node {\n    echo \"Building\"\n  }\n}\n\n// This locked resource contains both Test stages as a single concurrency Unit.\n// Only 1 concurrent build is allowed to utilize the test resources at a time.\n// Newer builds are pulled off the queue first. When a build reaches the\n// milestone at the end of the lock, all jobs started prior to the current\n// build that are still waiting for the lock will be aborted\nlock(resource: 'myResource', inversePrecedence: true){\n  node('test') {\n    stage('Unit Tests') {\n      echo \"Unit Tests\"\n    }\n    stage('System Tests') {\n      echo \"System Tests\"\n    }\n  }\n  milestone()\n}\n\n// The Deploy stage does not limit concurrency but requires manual input\n// from a user. Several builds might reach this step waiting for input.\n// When a user promotes a specific build all preceding builds are aborted,\n// ensuring that the latest code is always deployed.\nstage('Deploy') {\n  input \"Deploy?\"\n  milestone()\n  node {\n    echo \"Deploying\"\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For a more complete and complex example utilizing all these steps in a Pipeline check out the  <a href=\"https://github.com/jenkinsci/workflow-aggregator-plugin/blob/8a69bb4506d270c4a1fc58580519a0bcac1b8bce/demo/repo/Jenkinsfile\">Jenkinsfile</a> provided with the <a href=\"https://github.com/jenkinsci/workflow-aggregator-plugin/tree/8a69bb4506d270c4a1fc58580519a0bcac1b8bce/demo\">Docker image for demonstrating Pipeline</a>. This is a working demo that can be quickly set up and run.</p>\n</div>\n</div>","id":"1b6c5cc3-a7d6-56f2-91fc-f717ed4f85fc","title":"Controlling the Flow with Stage, Lock, and Milestone","date":"2016-10-16T00:00:00.000Z","slug":"/blog/2016/10/16/stage-lock-milestone/","authors":[{"avatar":null,"blog":null,"github":"HRMPW","html":"","id":"hrmpw","irc":null,"linkedin":null,"name":"Patrick Wolf","slug":"/blog/authors/hrmpw/","twitter":"hrmpw"}]}},"pageContext":{"id":"1b6c5cc3-a7d6-56f2-91fc-f717ed4f85fc"}},
    "staticQueryHashes": ["1271460761","3649515864"]}