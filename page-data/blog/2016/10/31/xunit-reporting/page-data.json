{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/10/31/xunit-reporting/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://github.com/bitwiseman\">Liam Newman</a>,\nTechnical Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>The\n<a href=\"https://wiki.jenkins.io/display/JENKINS/JUnit+Plugin\">JUnit plugin</a>\nis the go-to test result reporter for many Jenkins projects,\nbut the it is not the only one available.  The\n<a href=\"https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin\">xUnit plugin</a>\nis a viable alternative that supports JUnit and many other test result file formats.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\"></a>Introduction</h3>\n<div class=\"paragraph\">\n<p>No matter the project, you need to gather and report test results.\nJUnit is one of the most widely supported formats for recording test results.\nFor a scenarios where your tests are stable and your framework can produce JUnit output,\nthis makes the JUnit plugin ideal for reporting results in Jenkins.\nIt will consume results from a specified file or path, create a report,\nand if it finds test failures it will set the the job state to \"unstable\" or \"failed\".</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-7-report.png\" alt=\"Test reporting with JUnit\" width=\"800\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>There are also plenty of scenarios where the JUnit plugin is not enough.\nIf your project has some failing tests that will take some time to fix,\nor if there are some flaky tests,\nthe JUnit plugin&#8217;s simplistic view of test failures may be difficult to work with.</p>\n</div>\n<div class=\"paragraph\">\n<p>No problem, the Jenkins plugin model lets us replace the JUnit\nplugin functionality with similar\nfunctionality from another plugin and Jenkins Pipeline lets us do this in safe\nstepwise fashion where we can test and debug each of our changes.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this article, I will show you how to replace the JUnit plugin with the\nxUnit plugin in Pipeline code to address a few common test reporting scenarios.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"initial-setup\"><a class=\"anchor\" href=\"#initial-setup\"></a>Initial Setup</h3>\n<div class=\"paragraph\">\n<p>I&#8217;m going to use the \"JS-Nightwatch.js\" sample project from my\n<a href=\"/blog/2016/08/29/sauce-pipeline/\">previous post</a> to demonstrate a couple\ncommon scenarios that the xUnit handles better.\nI already have the latest\n<a href=\"https://wiki.jenkins.io/display/JENKINS/JUnit+Plugin\">JUnit plugin</a>\nand\n<a href=\"https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin\">xUnit plugin</a>\ninstalled on my Jenkins server.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ll be keeping my changes in\nlink:<a href=\"https://github.com/bitwiseman/JS-Nightwatch.js\">my fork</a>\nof the \"JS-Nightwatch.js\" sample project on GitHub, under the\n\"<a href=\"https://github.com/bitwiseman/JS-Nightwatch.js/tree/blog/xunit\">blog/xunit</a>\" branch.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s what the Jenkinsfile looked like at the end of that previous post and what\nthe report page looks like after a few runs:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    stage \"Build\"\n    checkout scm\n\n    // Install dependencies\n    sh 'npm install'\n\n    stage \"Test\"\n    // Add sauce credentials\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n        // Start sauce connect\n        sauceconnect(options: '', useGeneratedTunnelIdentifier: false, verboseLogging: false) {\n\n            // List of browser configs we'll be testing against.\n            def platform_configs = [\n                'chrome',\n                'firefox',\n                'ie',\n                'edge'\n            ].join(',')\n\n            // Nightwatch.js supports color ouput, so wrap this step for ansi color\n            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {\n                // Run selenium tests using Nightwatch.js\n                // Ignore error codes. The junit publisher will cover setting build status.\n                sh \"./node_modules/.bin/nightwatch -e ${platform_configs} || true\"\n            }\n\n            junit 'reports/**'\n\n            step([$class: 'SauceOnDemandTestPublisher'])\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-7-console.png\" alt=\"JUnit plugin console output\" width=\"800\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"switching-from-junit-to-xunit\"><a class=\"anchor\" href=\"#switching-from-junit-to-xunit\"></a>Switching from JUnit to xUnit</h3>\n<div class=\"paragraph\">\n<p>I&#8217;ll start by replacing JUnit with xUnit in my pipeline.\nI use the Snippet Generator to create the step with the right parameters.\nThe main downside of using the xUnit plugin is that while it is Pipeline compatible,\nit still uses the more verbose <code>step()</code> syntax and has some very rough edges around that, too.\nI&#8217;ve filed\n<a href=\"https://issues.jenkins.io/browse/JENKINS-37611\">JENKINS-37611</a>\nbut in the meanwhile, we&#8217;ll work with what we have.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">// Original JUnit step\njunit 'reports/**'\n\n// Equivalent xUnit step - generated (reformatted)\nstep([$class: 'XUnitBuilder', testTimeMargin: '3000', thresholdMode: 1,\n    thresholds: [\n        [$class: 'FailedThreshold', failureNewThreshold: '', failureThreshold: '', unstableNewThreshold: '', unstableThreshold: '1'],\n        [$class: 'SkippedThreshold', failureNewThreshold: '', failureThreshold: '', unstableNewThreshold: '', unstableThreshold: '']],\n    tools: [\n        [$class: 'JUnitType', deleteOutputFiles: false, failIfNotNew: false, pattern: 'reports/**', skipNoTestFiles: false, stopProcessingIfError: true]]\n    ])\n\n// Equivalent xUnit step - cleaned\nstep([$class: 'XUnitBuilder',\n    thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],\n    tools: [[$class: 'JUnitType', pattern: 'reports/**']]])</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If I replace the <code>junit</code> step in my Jenkinsfile with that last step above,\nit produces a report and job result identical to the JUnit plugin but using the xUnit plugin.  Easy!</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">node {\n    stage \"Build\"\n    // ... snip ...\n\n    stage \"Test\"\n    // Add sauce credentials\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n        // Start sauce connect\n        sauceconnect(options: '', useGeneratedTunnelIdentifier: false, verboseLogging: false) {\n\n            // ... snip ...\n\n            // junit 'reports/**'\n            step([$class: 'XUnitBuilder',\n                thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],\n                tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\n            // ... snip ...\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-8-summary.png\" alt=\"Test reporting with xUnit\" width=\"800\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-8-console.png\" alt=\"xUnit plugin console output\" width=\"800\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"accept-a-baseline\"><a class=\"anchor\" href=\"#accept-a-baseline\"></a>Accept a Baseline</h3>\n<div class=\"paragraph\">\n<p>Most projects don&#8217;t start off with automated tests passing or even running.\nThey start with a people hacking and prototyping, and eventually they start to write tests.\nAs new tests are written, having tests checked-in, running, and failing can be valuable information.\nWith the xUnit plugin we can accept a baseline of failed cases and drive that number down over time.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ll start by changing the Jenkinsfile to fail jobs only if the number of failures is greater than an expected baseline,\nin this case four failures. When I run the job with this change, the reported numbers remain the same, but the job passes.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">// The rest of the Jenkinsfile is unchanged.\n// Only the xUnit step() call is modified.\nstep([$class: 'XUnitBuilder',\n    thresholds: [[$class: 'FailedThreshold', failureThreshold: '4']],\n    tools: [[$class: 'JUnitType', pattern: 'reports/**']]])</code></pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-9-summary.png\" alt=\"Accept a baseline of failing tests.\" width=\"800\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Next, I can also check that the plugin reports the job as failed if more failures occur.\nSince this is sample code, I&#8217;ll do this by adding another failing test and checking the job\nreports as failed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">tests/guineaPig.js</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-javascript\" data-lang=\"javascript\">// ... snip ...\n\n    'Guinea Pig Assert Title 0 - D': function(client) { /* ... */ },\n\n    'Guinea Pig Assert Title 0 - E': function(client) {\n        client\n            .url('https://saucelabs.com/test/guinea-pig')\n            .waitForElementVisible('body', 1000)\n            //.assert.title('I am a page title - Sauce Labs');\n            .assert.title('I am a page title - Sauce Labs - Cause a Failure');\n    },\n\n    afterEach: function(client, done) { /* ... */ }\n\n// ... snip ...</code></pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-10-summary.png\" alt=\"All tests pass!\" width=\"800\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In a real project, we&#8217;d make fixes over a number of commits bringing the number of failures down and adjusting our baseline.\nSince this is a sample, I&#8217;ll just make all tests pass and set the job failure threshold for failed and skipped cases to zero.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Jenkinsfile</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">// The rest of the Jenkinsfile is unchanged.\n// Only the xUnit step() call is modified.\nstep([$class: 'XUnitBuilder',\n    thresholds: [\n        [$class: 'SkippedThreshold', failureThreshold: '0'],\n        [$class: 'FailedThreshold', failureThreshold: '0']],\n    tools: [[$class: 'JUnitType', pattern: 'reports/**']]])</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">tests/guineaPig.js</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-javascript\" data-lang=\"javascript\">// ... snip ...\n\n    'Guinea Pig Assert Title 0 - D': function(client) { /* ... */ },\n\n    'Guinea Pig Assert Title 0 - E': function(client) {\n        client\n            .url('https://saucelabs.com/test/guinea-pig')\n            .waitForElementVisible('body', 1000)\n            .assert.title('I am a page title - Sauce Labs');\n    },\n\n    afterEach: function(client, done) { /* ... */ }\n\n// ... snip ...</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">tests/guineaPig_1.js</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-javascript\" data-lang=\"javascript\">// ... snip ...\n\n    'Guinea Pig Assert Title 1 - A': function(client) {\n        client\n            .url('https://saucelabs.com/test/guinea-pig')\n            .waitForElementVisible('body', 1000)\n            .assert.title('I am a page title - Sauce Labs');\n    },\n\n// ... snip ...</code></pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-12-summary.png\" alt=\"All tests pass!\" width=\"800\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"allow-for-flakiness\"><a class=\"anchor\" href=\"#allow-for-flakiness\"></a>Allow for Flakiness</h3>\n<div class=\"paragraph\">\n<p>We&#8217;ve all known the frustration of having one flaky test that fails once every ten jobs.\nYou want to keep it active so you can working isolating the source of the problem,\nbut you also don&#8217;t want to destablize your CI pipeline or reject commits that are actually okay.\nYou could move the test to a separate job that runs the \"flaky\" tests,\nbut in my experience that just leads to a job that is always in a failed state\nand a pile of flaky tests no one looks at.</p>\n</div>\n<div class=\"paragraph\">\n<p>With the xUnit plugin, we can keep the this flaky test in main test suite but allow\nthe our job to still pass.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ll start by adding a sample flaky test.  After a few runs, we can see the test\nfails intermittently and causes the job to fail too.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">tests/guineaPigFlaky.js</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-javascript\" data-lang=\"javascript\">// New test file: tests/guineaPigFlaky.js\nvar https = require('https');\nvar SauceLabs = require(\"saucelabs\");\n\nmodule.exports = {\n\n    '@tags': ['guineaPig'],\n\n    'Guinea Pig Flaky Assert Title 0': function(client) {\n        var expectedTitle = 'I am a page title - Sauce Labs';\n        // Fail every fifth minute\n        if (Math.floor(Date.now() / (1000 * 60)) % 5 === 0) {\n            expectedTitle += \" - Cause failure\";\n        }\n\n        client\n            .url('https://saucelabs.com/test/guinea-pig')\n            .waitForElementVisible('body', 1000)\n            .assert.title(expectedTitle);\n    }\n\n    afterEach: function(client, done) {\n        client.customSauceEnd();\n\n        setTimeout(function() {\n            done();\n        }, 1000);\n\n    }\n\n};</code></pre>\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-17-summary.png\" alt=\"The pain of flaky tests failing the build\" width=\"800\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>I can almost hear my teammates screaming in frustration just looking at this report.\nTo allow specific tests to be unstable but not others,\nI&#8217;m going to add a guard \"suite completed\" test to the suites that should be stable,\nand keep flaky test on it&#8217;s own.\nThen I&#8217;ll tell xUnit to allow for a number of failed tests, but no skipped ones.\nIf any test fails other than the ones I allow to be flaky,\nit will also result in one or more skipped tests and will fail the build.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">// The rest of the Jenkinsfile is unchanged.\n// Only the xUnit step() call is modified.\nstep([$class: 'XUnitBuilder',\n    thresholds: [\n        [$class: 'SkippedThreshold', failureThreshold: '0'],\n        // Allow for a significant number of failures\n        // Keeping this threshold so that overwhelming failures are guaranteed\n        //     to still fail the build\n        [$class: 'FailedThreshold', failureThreshold: '10']],\n    tools: [[$class: 'JUnitType', pattern: 'reports/**']]])</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">tests/guineaPig.js</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-javascript\" data-lang=\"javascript\">// ... snip ...\n\n    'Guinea Pig Assert Title 0 - E': function(client) { /* ... */ },\n\n    'Guinea Pig Assert Title 0 - Suite Completed': function(client) {\n      // No assertion needed\n    },\n\n    afterEach: function(client, done) { /* ... */ }\n\n// ... snip ...</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">tests/guineaPig_1.js</div>\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-javascript\" data-lang=\"javascript\">// ... snip ...\n\n    'Guinea Pig Assert Title 1 - E': function(client) { /* ... */ },\n\n    'Guinea Pig Assert Title 1 - Suite Completed': function(client) {\n      // No assertion needed\n    },\n\n    afterEach: function(client, done) { /* ... */ }\n\n// ... snip ...</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After a few more runs, you can see the flaky test is still being flaky,\nbut it is no longer failing the build.  Meanwhile, if another test fails,\nit will cause the \"suite completed\" test to be skipped, failing the job.\nIf this were a real project, the test owner could instrument and eventually fix\nthe test.  When they were confident they had stabilized the test the could add\na \"suite completed\" test after it to enforce it passing without changes to other\ntests or framework.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-19-summary.png\" alt=\"Flaky tests don&#8217;t have to fail the build\" width=\"800\">\n</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2016-10-27/job-18-report.png\" alt=\"Results from flaky test\" width=\"800\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h3>\n<div class=\"paragraph\">\n<p>This post has shown how to migrate from the JUnit plugin to the\nxUnit plugin on an existing project in Jenkins pipeline.  It also covered how to\nuse the features of xUnit plugin to get more meaningful and effective Jenkins\nreporting behavior.</p>\n</div>\n<div class=\"paragraph\">\n<p>What I didn&#8217;t show was how many other formats xUnit supports - from CCPUnit to MSTest.  You can\nalso write your own XSL for result formats not on the known/supported list.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin\">xUnit plugin</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/bitwiseman/JS-Nightwatch.js\">bitwiseman/JS-Nightwatch.js</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/saucelabs-sample-test-frameworks\">saucelabs-sample-test-frameworks</a></p>\n</li>\n</ul>\n</div>\n</div>","id":"dcf580a2-8de4-526e-8237-399ee53b3b39","title":"xUnit and Pipeline","date":"2016-10-31T00:00:00.000Z","slug":"/blog/2016/10/31/xunit-reporting/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},"pageContext":{"next":"/blog/2016/11/11/monthly-jam-recap-october/","previous":"/blog/2016/10/18/jenkins-world-2016-videos/","id":"dcf580a2-8de4-526e-8237-399ee53b3b39"}},
    "staticQueryHashes": ["1271460761","3649515864"]}