{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/12/19/declarative-pipeline-beta/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>Last week we released version 0.7.1 of the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Pipeline+Model+Definition+Plugin\"><em>Pipeline-Model-Defintion</em></a>\nplugin and wanted to crown it as the official Beta version of the Declarative\nPipeline syntax. Although it has been available in the update center\n<a href=\"/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/\">since August</a>,\nwe continue to solidify the syntax. We feel this release is getting\nvery close to the final version and should not change much before 1.0. However,\nit is still a Beta so further tweaks are possible.</p>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-caution\" title=\"Caution\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>A release (0.8.0) is planned for early January 2017 which will finalize the\nsyntax with the following changes:\n<a href=\"https://issues.jenkins.io/browse/JENKINS-40524\">JENKINS-40524</a>,\n<a href=\"https://issues.jenkins.io/browse/JENKINS-40370\">JENKINS-40370</a>,\n<a href=\"https://issues.jenkins.io/browse/JENKINS-40462\">JENKINS-40462</a>,\n<a href=\"https://issues.jenkins.io/browse/JENKINS-40337\">JENKINS-40337</a></p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect1\">\n<h2 id=\"what-is-declarative-pipeline\"><a class=\"anchor\" href=\"#what-is-declarative-pipeline\"></a>What is Declarative Pipeline?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>All the way back at Jenkins World in September, Andrew Bayer presented a\n<a href=\"https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines\">sneak peak</a>\nof a new syntax for constructing Pipelines. We are calling this new syntax\nDeclarative Pipeline to differentiate it from the existing Scripted Pipeline\nsyntax that has always been a part of Pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>After listening to many Jenkins users over the last year we felt that, while\nPipeline Script provides tremendous power, flexibility, and extensibility, the\nlearning curve for Scripted Pipeline was steep for users new to either Jenkins\nor Pipeline. Beginning users wanting to take advantage of all the features\nprovided by Pipeline and Jenkinsfiles were required to learn Scripted Pipeline\nor remain limited to the functionality provided by Freestyle jobs.</p>\n</div>\n<div class=\"paragraph\">\n<p>Declarative Pipeline does not replace Scripted Pipeline but extends Pipeline it\nwith a pre-defined structure to let users focus entirely on the <code>steps</code>\nrequired at each <code>stage</code> without needing to worry about scripting every aspect\nof the pipeline. Granular flow-control is extremely powerful and Scripted\nPipeline syntax will always be part of Pipeline but it&#8217;s not for everyone.</p>\n</div>\n<div class=\"paragraph\">\n<p>Declarative Pipeline enables all users to connect simple, declarative blocks\nthat define agents (including Docker), post actions, environment\nsettings, credentials and all stages that make up the pipeline. Best of all,\nbecause this Declarative syntax is part of Pipeline, all build steps and build\nwrappers available in Plugins or loaded from Shared Libraries are also\navailable as <code>steps</code> in Declarative.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"example\"><a class=\"anchor\" href=\"#example\"></a>Example</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Below is an example of a pipeline in Declarative syntax. You can also switch the view to show the same pipeline in Scripted syntax.\n The Declarative syntax has a more straightforward structure that is easier to grok by users not versed in Groovy.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"nowrap\">// Declarative //\npipeline {\n  agent  label:'has-docker', dockerfile: true\n  environment {\n    GIT_COMMITTER_NAME = \"jenkins\"\n    GIT_COMMITTER_EMAIL = \"jenkins@jenkins.io\"\n  }\n  stages {\n    stage(\"Build\") {\n      steps {\n        sh 'mvn clean install -Dmaven.test.failure.ignore=true'\n      }\n    }\n    stage(\"Archive\"){\n      steps {\n        archive \"*/target/**/*\"\n        junit '*/target/surefire-reports/*.xml'\n      }\n    }\n  }\n  post {\n    always {\n      deleteDir()\n    }\n    success {\n      mail to:\"me@example.com\", subject:\"SUCCESS: ${currentBuild.fullDisplayName}\", body: \"Yay, we passed.\"\n    }\n    failure {\n      mail to:\"me@example.com\", subject:\"FAILURE: ${currentBuild.fullDisplayName}\", body: \"Boo, we failed.\"\n    }\n  }\n}\n\n// Script //\nwithEnv([\"GIT_COMMITTER_NAME = jenkins\",\"GIT_COMMITTER_EMAIL = jenkins@jenkins.io\"]) {\n  node('has-docker') {\n    try {\n      checkout scm // checks out Dockerfile and source code\n      def myImage = docker.build 'my-environment:snapshot'\n      myImage.inside {\n        stage('Build') {\n          sh 'mvn clean install -Dmaven.test.failure.ignore=true'\n        }\n        stage('Archive') {\n          archive \"*/target/**/*\"\n          junit '*/target/surefire-reports/*.xml'\n        }\n      }\n      if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n        mail to:\"me@example.com\", subject:\"SUCCESS: ${currentBuild.fullDisplayName}\", body: \"Yay, we passed.\"\n      }\n    }\n    catch (exc) {\n      mail to:\"me@example.com\", subject:\"FAILURE: ${currentBuild.fullDisplayName}\", body: \"Boo, we failed.\"\n    }\n    finally {\n      deleteDir()\n    }\n  }\n}</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"how-can-you-help\"><a class=\"anchor\" href=\"#how-can-you-help\"></a>How can you help?</h2>\n<div class=\"sectionbody\">\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Install the lastest version of the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Pipeline+Model+Definition+Plugin\"><em>Pipeline-Model-Defintion</em></a> plugin.</p>\n</li>\n<li>\n<p>Read the documentation:\n<a href=\"https://github.com/jenkinsci/pipeline-model-definition-plugin/wiki/getting%20started\">Getting Started</a> and\n<a href=\"https://github.com/jenkinsci/pipeline-model-definition-plugin/blob/master/SYNTAX.md\">Syntax overview</a>.\n(These documents will be incorporated into the Jenkins.io documentation.)</p>\n</li>\n<li>\n<p>Convert some of your existing Pipeline scripts into Declarative</p>\n</li>\n<li>\n<p>Log any issues or enhancements you have\n<a href=\"https://issues.jenkins.io/browse/JENKINS-40493\">here</a>\nfor the syntax, the execution, or the documentation.</p>\n</li>\n<li>\n<p>Ask questions. You can send questions to the\n<a href=\"mailto:jenkinsci-users@googlegroups.com\">users mailing list</a>\nor visit the <code>#jenkins</code> channel on IRC.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"how-will-this-work-with-blue-ocean\"><a class=\"anchor\" href=\"#how-will-this-work-with-blue-ocean\"></a>How will this work with Blue Ocean?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Blue Ocean is all about Pipelines in Jenkins. Running, displaying, and soon,\ncreating Pipelines.  Blue Ocean will be able to run and display Pipelines\nwritten in this new syntax just like any other Pipeline works today. However,\nbecause Declarative Pipeline includes a pre-defined structure, or model, it is\nnow possible to create and edit pipelines with a GUI editor.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/blueocean/pipeline-editor.png\" alt=\"Pipeline Editor\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Although we plan to launch 1.0 of Declarative Pipeline before Blue Ocean 1.0 is\nofficially available, we expect to have a working Beta of the Editor available\nto play with. The combination of a simple syntax and an intuitive editor\nshould make creating Jenkins Pipelines a breeze.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"happy-holidays\"><a class=\"anchor\" href=\"#happy-holidays\"></a>Happy Holidays</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I hope everyone has a great end of the year and a Happy New Year. With\nDeclarative Pipeline and\n<a href=\"/projects/blueocean\">Blue Ocean</a>\nwe expect great things for Jenkins in 2017!</p>\n</div>\n</div>\n</div>","id":"584ac2c5-5d3d-5e1c-bcbe-5ef1ef71e42e","title":"Announcing the beta of Declarative Pipeline Syntax","date":"2016-12-19T00:00:00.000Z","slug":"/blog/2016/12/19/declarative-pipeline-beta/","links":{"discourse":""},"authors":[{"avatar":null,"blog":null,"github":"HRMPW","html":"","id":"hrmpw","irc":null,"linkedin":null,"name":"Patrick Wolf","slug":"/blog/authors/hrmpw","twitter":"hrmpw"}]}},"pageContext":{"id":"584ac2c5-5d3d-5e1c-bcbe-5ef1ef71e42e"}},
    "staticQueryHashes": ["1271460761","3649515864"]}