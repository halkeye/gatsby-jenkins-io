{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/04/07/pipeline-for-runs-on-hardware/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>In addition to Jenkins development, during last 8 years I&#8217;ve been involved into continuous integration for hardware and embedded projects.\nAt JUC2015/London\n<a href=\"https://www.cloudbees.com/jenkins/juc-2015/presentations/JUC-2015-Europe-Jenkins-Based-CI-for-Nenashev.pdf\">I have conducted a talk</a> about common automation challenges in the area.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this blog post I would like to concentrate on <a href=\"/doc/pipeline/\">Pipeline</a> (formerly known as Workflow), which is a new ecosystem in Jenkins that allows implementing jobs in a domain specific language.\nIt is in the suggested plugins list in the upcoming <a href=\"/2.0/\">Jenkins 2.0 release</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The first time I tried Pipeline two and half years ago, it unfortunately did not work for my use-cases at all.\nI was very disappointed but tried it again a year later.\nThis time, the plugin had become much more stable and useful.\nIt had also attracted more contributors and started evolving more rapidly with the development of plugins extending the Pipeline ecosystem.</p>\n</div>\n<div class=\"paragraph\">\n<p>Currently, Pipeline a powerful tool available for Jenkins users to implement a variety of software delivery pipelines in code.\nI would like to highlight several Pipeline features which may be interesting to Jenkins users working specifically with embedded and hardware projects.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\"></a>Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In Embedded projects it&#8217;s frequently required to run tests on specific hardware peripherals: development boards, prototypes, etc.\nIt may be required for both software and hardware areas, and especially for products involving both worlds.\nCI and CD methodologies require continuous integration and system testing, and Jenkins comes to help here.\nJenkins is an automation framework, which can be adjusted to reliably work with hardware attached to its nodes.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"area-challenges\"><a class=\"anchor\" href=\"#area-challenges\"></a>Area challenges</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Generally, any peripheral hardware device can be attached to a Jenkins node.\nSince Jenkins nodes require Java only, almost every development machine can be attached.\nBelow you can find a common connection scheme:</p>\n</div>\n<div class=\"imageblock text-center\">\n<div class=\"content\">\n<img src=\"/images/post-images/pipeline-as-code-for-hardware/connectBoard.png\" alt=\"Connecting the external device\" width=\"550\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After the connection, Jenkins jobs could invoke common EDA tools via command-line interfaces.\nIt can be easily done by a <em>Execute shell</em> build steps in free-style projects.\nSuch testing scheme is commonly affected by the following issues:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Nodes with peripherals are being shared across several projects.\nJenkins must ensure the correctness of access (e.g. by throttling the access).</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>In a single Freestyle project builds utilize the node for a long period. If you synthesize the item before the run, much of the peripheral utilization file may be wasted.</p>\n</li>\n<li>\n<p>The issue can be solved by one of concurrency management plugins:\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Throttle+Concurrent+Builds+Plugin\">Throttle Concurrent Builds</a>, <a href=\"https://wiki.jenkins.io/display/JENKINS/Lockable+Resources+Plugin\">Lockable Resources</a>\n or\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Exclusion-Plugin\">Exclusions</a>.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>Test parallelization on multiple nodes requires using of multiple projects or\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Matrix+Project+Plugin\">Matrix configurations</a>, so it causes job chaining again.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>These build chains can be created via\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Parameterized+Trigger+Plugin\">Parameterized Trigger</a> and\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Copy+Artifact+Plugin\">Copy Artifacts</a>, but it complicates job management and build history investigation.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>Hardware infrastructure is usually flaky.\nIf it fails during the build due to any reason, it&#8217;s hard to diagnose the issue and re-run the project if the issue comes from hardware.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Build+Failure+Analyzer\">Build Failure Analyzer</a> allows to identify the root cause of a build failure (e.g. by build log parsing).</p>\n</li>\n<li>\n<p><a href=\"https://wiki.jenkins.io/display/JENKINS/Conditional+BuildStep+Plugin\">Conditional Build Step</a> and\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Flexible+Publish+Plugin\">Flexible Publish</a> plugins allow altering the build flow according to the analysis results.</p>\n</li>\n<li>\n<p>Combination of the plugins above is possible, but it makes job configurations extremely large.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>Tests on hardware peripherals may take much time.\nIf an infrastructure fails, we may have to restart the run from scratch.\nSo the builds should be robust against infrastructure issues including network failures and Jenkins controller restarts.</p>\n</li>\n<li>\n<p>Tests on hardware should be reproducible, so the environment and input parameters should be controlled well.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Jenkins supports\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Workspace+Cleanup+Plugin\">cleaning workspaces</a>, so it can get rid of temporary files generated by previous runs.</p>\n</li>\n<li>\n<p>Jenkins provides support of agents connected via containers (e.g.\n  <a href=\"https://wiki.jenkins.io/display/JENKINS/Docker+Plugin\">Docker</a>) or VMs, which allow creating clean environments for every new run.\nIt&#8217;s important for 3rd-party tools, which may modify files outside the workspace: user home directory, temporary files, etc.</p>\n</li>\n<li>\n<p>These environments still need to be connected to hardware peripherals, which may be a serious obstacle for Jenkins admins</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The classic automation approaches in Jenkins are based on Free-style and Multi-configuration project types.\nLinks to various articles on this topic are collected on the\n<a href=\"/solutions/embedded/\">HW/Embedded Solution page</a>Embedded on the Jenkins website.\nTests automation on hardware peripherals has been covered in several publications by Robert Martin, Steve Harris, JL Gray, Gordon McGregor, Martin dâ€™Anjou, and Sarah Woodall.\nThere is also a top-level overview of classic approaches made by me at JUC2015/London (a bit outdated now).</p>\n</div>\n<div class=\"paragraph\">\n<p>On the other hand, there is no previous publications, which would address <a href=\"/doc/pipeline/\">Pipeline</a> usage for the Embedded area.\nIn this post I want to address this use-case.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"pipeline-as-code-for-test-runs-on-hardware\"><a class=\"anchor\" href=\"#pipeline-as-code-for-test-runs-on-hardware\"></a>Pipeline as Code for test runs on hardware</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Pipeline as Code is an approach for describing complex automation flows in software lifecycles: build, delivery, deployment, etc.\nIt is being advertised in Continuous Delivery and DevOps methodologies.</p>\n</div>\n<div class=\"paragraph\">\n<p>In Jenkins there are two most popular plugins:\n<a href=\"/doc/pipeline/\">Pipeline</a> and <a href=\"https://wiki.jenkins.io/display/JENKINS/Job+DSL+Plugin\">Job DSL</a>.\nJobDSL Plugin internally generates common freestyle jobs according to the script, so it&#8217;s functionality is similar to the classic approaches.\nPipeline is fundamentally different, because it provides a new engine controlling flows independently from particular nodes and workspaces.\nSo it provides a higher job description level, which was not available in Jenkins before.</p>\n</div>\n<div class=\"paragraph\">\n<p>Below you can find an example of Pipeline scripts, which runs tests on FPGA board. The id of this board comes from build parameters (<em>fpgaId</em>). In this script we also presume that all nodes have pre-installed tools (Xilinx ISE in this case).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">// Run on node having my_fpga label\nnode(\"linux &amp;&amp; ml509\") {\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  sh \"make all\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>But such scenario could be also implemented in a Free-style project.\nWhat would we get from Pipeline plugin?</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"getting-added-value-from-pipeline-as-code\"><a class=\"anchor\" href=\"#getting-added-value-from-pipeline-as-code\"></a>Getting added-value from Pipeline as code</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Pipeline provides much added-value features for hardware-based tests.\nI would like to highlight the following advantages:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Robustness against restarts of Jenkins controller.</p>\n</li>\n<li>\n<p>Robustness against network disconnects. <code>sh()</code> steps are based on the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Durable+Task+Plugin\">Durable Task plugin</a>, so Jenkins can safely continue the execution flow once the node reconnects to the controller.</p>\n</li>\n<li>\n<p>It&#8217;s possible to run tasks on multiple nodes without creating complex flows based on job triggers and copy artifact steps, etc. It can be achieved via combination of <code>parallel()</code> and <code>node()</code> steps.</p>\n</li>\n<li>\n<p>Ability to store the shared logic in standalone Pipeline libraries</p>\n</li>\n<li>\n<p>etc.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>First two advantages allow to improve the robustness of Jenkins nodes against infrastructure failures.\nIt is critical for long-running tests on hardware.</p>\n</div>\n<div class=\"paragraph\">\n<p>Last two advantages address the flexibility of Pipeline flows.\nThere are also plugins for freestyle projects, but they are not flexible enough.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"utilizing-pipeline-features\"><a class=\"anchor\" href=\"#utilizing-pipeline-features\"></a>Utilizing Pipeline features</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The sample Pipeline script above is very simple.\nWe would like to get some added value from Jenkins.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"general-improvements\"><a class=\"anchor\" href=\"#general-improvements\"></a>General improvements</h3>\n<div class=\"paragraph\">\n<p>Let&#8217;s enhance the script by using several features being provided by pipeline in order to get visualization of stages, report publishing and build notifications.</p>\n</div>\n<div class=\"paragraph\">\n<p>We also want to minimize the time being spent on the node with the attached FPGA board.\nSo we will split the bitfile generation and further runs to two different nodes in this case: a general purpose linux node, and the node with the hardware attached.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find the resulting Pipeline script below:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">// Synthesize on any node\ndef imageId=\"\"\nnode(\"linux\") {\n  stage \"Prepare environment\"\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  // Construct the bitfile image ID from commit ID\n  sh 'git rev-parse HEAD &gt; GIT_COMMIT'\n  imageId= \"myprj-${fpgaId}-\" + readFile('GIT_COMMIT').take(6)\n\n  stage \"Synthesize project\"\n  sh \"make FPGA_TYPE=$fpgaId synthesize_for_fpga\"\n  /* We archive the bitfile before running the test, so it won't be lost it if something happens with the FPGA run stage. */\n  archive \"target/image_${fpgaId}.bit\"\n  stash includes: \"target/image_${fpgaId}.bit\", name: 'bitfile'\n}\n\n/* Run on a node with 'my_fpga' label.\nIn this example it means that the Jenkins node contains the attacked FPGA of such type.*/\nnode (\"linux &amp;&amp; $fpgaId\") {\n  stage \"Blast bitfile\"\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  def artifact='target/image_'+fpgaId+'.bit'\n  echo \"Using ${artifact}\"\n  unstash 'bitfile'\n  sh \"make FPGA_TYPE=$fpgaId impact\"\n\n  /* We run automatic tests.\n  Then we report test results from the generated JUnit report. */\n  stage \"Auto Tests\"\n  sh \"make FPGA_TYPE=$fpgaId tests\"\n  sh \"perl scripts/convertToJunit.pl --from=target/test-results/* --to=target/report_${fpgaId}.xml --classPrefix=\\\"myprj-${fpgaId}.\\\"\"\n  junit \"target/report_${fpgaId}.xml\"\n\n  stage \"Finalization\"\n  sh \"make FPGA_TYPE=$fpgaId flush_fpga\"\n  hipchatSend(\"${imageId} testing has been completed\")\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As you may see, the pipeline script mostly consists of various calls of command-line tools via the <code>sh()</code> command.\nAll EDA tools provide great CLIs, so we do not need special plugins in order to invoke common operations from Jenkins.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\nMakefile above is a sample stuff for demo purposes.\nIt implements a set of unrelated routines merged into a single file without dependency declarations.\nNever write such makefiles.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>It is possible to continue expanding the pipeline in such way.\n<a href=\"https://github.com/jenkinsci/pipeline-examples\">Pipeline Examples</a>\ncontain examples for common cases: build parallelization, code sharing between pipelines, error handling, etc.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"lessons-learned\"><a class=\"anchor\" href=\"#lessons-learned\"></a>Lessons learned</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>During last 2 years I&#8217;ve been using Pipeline for Hardware test automation several times.\nThe first attempts were not very successful, but the ecosystem has been evolving rapidly.\nI feel Pipeline has become a really powerful tool, but there are several missing features.\nI would like to mention the following ones:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Shared resource management across different pipelines</strong>.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Runs of a single Pipeline job can be synchronized using the <code>concurrency</code> parameter of the <code>stage()</code> step</p>\n</li>\n<li>\n<p>It can be done by the incoming Pipeline integration in the\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Lockable+Resources+Plugin\">Lockable Resources plugin</a>\n(<a href=\"https://issues.jenkins.io/browse/JENKINS-30269\">JENKINS-30269</a>).</p>\n</li>\n<li>\n<p>Another case is integration with\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Throttle+Concurrent+Builds+Plugin\">Throttle Concurrent Builds plugin</a>, which is an effective engine for limiting the license utilization in automation infrastructures\n(<a href=\"https://issues.jenkins.io/browse/JENKINS-31801\">JENKINS-31801</a>).</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><strong>Better support of CLI tools</strong>.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>EDA tools frequently need a complex environment, which should be deployed on nodes somehow.</p>\n</li>\n<li>\n<p>Integration with\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Custom+Tools+Plugin\">Custom Tools Plugin</a> seems to be the best option, especially in the case of multiple tool versions\n(<a href=\"https://issues.jenkins.io/browse/JENKINS-30680\">JENKINS-30680</a>).</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><strong>Pipeline package manager</strong> (<a href=\"https://issues.jenkins.io/browse/JENKINS-34186\">JENKINS-34186</a>)</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Since there is almost no plugins for EDA tools in Jenkins, developers need to implement similar tasks at multiple jobs.</p>\n</li>\n<li>\n<p>A common approach is to keep the shared \"functions\" in libraries.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkinsci/workflow-cps-global-lib-plugin\">Pipeline Global Library</a> and\n<a href=\"https://github.com/jenkinsci/workflow-remote-loader-plugin\">Pipeline Remote Loader</a> can be used, but they do not provide features like dependency management.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><strong>Pipeline debugger</strong> (<a href=\"https://issues.jenkins.io/browse/JENKINS-34185\">JENKINS-34185</a>)</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Hardware test runs are very slow, so it is difficult to troubleshoot and fix issues in the Pipeline code if you have to run every build from scratch.</p>\n</li>\n<li>\n<p>There are several features in Pipeline, which simplify the development, but we still need an IDE-alike implementation for complex scripts.</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusions\"><a class=\"anchor\" href=\"#conclusions\"></a>Conclusions</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Jenkins is a powerful <strong>automation framework</strong>, which can be used in many areas.\nEven though Jenkins has no dedicated plugins for test runs on hardware, it provides many general-purpose \"building blocks\", which allow implementing almost any flow.\nThat&#8217;s why Jenkins is so popular in the hardware and embedded areas.</p>\n</div>\n<div class=\"paragraph\">\n<p>Pipeline as code can greatly simplify the implementation of complex flows in Jenkins.\nIt continues to evolve and extend support of use-cases.\nif you&#8217;re developing embedded projects, consider Pipeline as a durable, extensible and versatile means of implementing your automation.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"whats-next\"><a class=\"anchor\" href=\"#whats-next\"></a>What&#8217;s next?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Jenkins automation server dominates in the HW/Embedded area, but unfortunately there is not so much experience sharing for these use-cases.\nSo Jenkins community encourages everybody to share the experience in this area by writing docs and articles for Jenkins website and other resources.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is just a a first blog post on this topic.\nI am planning to provide more examples of Pipeline usage for Embedded and Hardware tests in the future posts.\nThe next post will be about concurrency and shared resource management in Pipelines.</p>\n</div>\n<div class=\"paragraph\">\n<p>I am also going to talk about running tests on hardware at the\n<a href=\"https://www.eventbrite.com/e/accelerating-automotive-innovation-with-continuous-integration-delivery-tickets-20809772590\">upcoming Automotive event</a> in Stuttgart on April 26th.\nThis event is being held by\n<a href=\"https://www.cloudbees.com/\">CloudBees</a>, but there will be several talks addressing Jenkins open-source as well.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to share your experience about Jenkins usage in Hardware/Embedded areas, consider submitting a talk for the\n<a href=\"https://jenkins-cfp.herokuapp.com/events/jenkins-world-2016\">Jenkins World conference</a> or join/organize a\n<a href=\"https://wiki.jenkins.io/display/JENKINS/Jenkins+Area+Meetup\">Jenkins Area Meetup</a> in your city.\nThere is also a\n<a href=\"https://www.meetup.com/Jenkins-online-meetup/\">Jenkins Online Meetup</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"links\"><a class=\"anchor\" href=\"#links\"></a>Links</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Related articles and events:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"/solutions/embedded/\">HW/Embedded Solution page</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cloudbees.com/jenkins/juc-2015/presentations/JUC-2015-Europe-Jenkins-Based-CI-for-Nenashev.pdf\">Jenkins-Based CI for Heterogeneous Hardware/Software Projects</a></p>\n</li>\n<li>\n<p><a href=\"https://www.eventbrite.com/e/accelerating-automotive-innovation-with-continuous-integration-delivery-tickets-20809772590\">Accelerating Automotive Innovation with Continuous Integration &amp; Delivery</a> - meetup in Stuttgart</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Pipeline:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"/solutions/pipeline\">Pipeline page</a></p>\n</li>\n<li>\n<p><a href=\"https://speakerdeck.com/onenashev/spb-jenkins-meetup-number-1-jenkins-2-dot-0-i-pipeline-as-code-eng\">Jenkins 2.0 and Pipeline as code overview</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkinsci/workflow-plugin/blob/master/TUTORIAL.md\">Pipeline Tutorial</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkinsci/pipeline-examples\">Pipeline Examples</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","id":"bb46e899-10f9-583c-862c-a664e9eb81b4","title":"Automating test runs on hardware with Pipeline as Code","date":"2016-04-07T00:00:00.000Z","slug":"/blog/2016/04/07/pipeline-for-runs-on-hardware/","links":{"discourse":""},"authors":[]}},"pageContext":{"next":"/blog/2016/04/11/gsoc2016-mentors-call/","previous":"/blog/2016/04/07/jenkins-community-survey-results-blog/","id":"bb46e899-10f9-583c-862c-a664e9eb81b4"}},
    "staticQueryHashes": ["1271460761","3649515864"]}