{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/04/21/dsl-plugins/",
    "result": {"data":{"blog":{"html":"<div class=\"paragraph\">\n<p>In this post I will show how you can make your own DSL extensions and distribute\nthem as a plugin, using <a href=\"/doc/pipeline\">Pipeline</a> Script.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"a-quick-refresher\"><a class=\"anchor\" href=\"#a-quick-refresher\"></a>A quick refresher</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Pipeline has a well kept secret: the ability to add your own DSL\nelements. Pipeline is itself a DSL, but you can extend it.</p>\n</div>\n<div class=\"paragraph\">\n<p>There are 2 main reasons I can think you may want to do this:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>You want to reduce boilerplate by encapsulating common snippets/things you do\nin one DSL statement.</p>\n</li>\n<li>\n<p>You want to provide a DSL that provides a prescriptive way that your builds\nwork - uniform across your organisations Jenkinsfiles.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>A DSL could look as simple as</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">acmeBuild {\n    script = \"./bin/ci\"\n    environment = \"nginx\"\n    team = \"evil-devs\"\n    deployBranch = \"production\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This could be the entirety of your <code>Jenkinsfile</code>!</p>\n</div>\n<div class=\"paragraph\">\n<p>In this \"simple\" example, it could actually be doing a multi stage build with\nretries, in a specified docker container, that deploys only from the production\nbranch.  Detailed notifications are sent to the right team on important events\n(as defined by your org).</p>\n</div>\n<div class=\"paragraph\">\n<p>Traditionally this is done via the\n<a href=\"https://github.com/jenkinsci/workflow-cps-global-lib-plugin/blob/master/README.md#pipeline-global-library\">global\nlibrary</a>.  You take a snippet of DSL you want to want to make into a DSL, and\ndrop it in the git repo that is baked into Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>A great trivial\n<a href=\"https://github.com/jenkinsci/workflow-cps-global-lib-plugin/blob/master/README.md#define-more-structured-dsl\">example</a>\nis this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">jenkinsPlugin {\n    name = 'git'\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Which is enabled by git pushing the following into <code>vars/jenkinsPlugin.groovy</code></p>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"></i>\n</td>\n<td class=\"content\">\nThe name of the file is the name of the DSL expression you use in the <code>Jenkinsfile</code>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">def call(body) {\n    def config = [:]\n    body.resolveStrategy = Closure.DELEGATE_FIRST\n    body.delegate = config\n    body()\n\n    // This is where the magic happens - put your pipeline snippets in here, get variables from config.\n    node {\n        git url: \"https://github.com/jenkinsci/${config.name}-plugin.git\"\n        sh \"mvn install\"\n        mail to: \"...\", subject: \"${config.name} plugin build\", body: \"...\"\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can imagine many more pipelines, or even archetypes/templates of pipelines\nyou could do in this way, providing a really easy <code>Jenkinsfile</code> syntax for your\nusers.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"making-it-a-plugin\"><a class=\"anchor\" href=\"#making-it-a-plugin\"></a>Making it a plugin</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Using the global DSL library is a handy thing if you have a single Jenkins, or\nwant to keep the DSLs local to a Jenkins instance.  But what if you want to\ndistribute it around your org, or, perhaps it is general purpose enough you want\nto share it with the world?</p>\n</div>\n<div class=\"paragraph\">\n<p>Well this is possible, by wrapping it in a plugin. You use the same pipeline\nsnippet tricks you use in the global lib, but put it in the dsl directory of a\nplugin.</p>\n</div>\n<div class=\"paragraph\">\n<p>My <a href=\"https://github.com/jenkinsci/simple-build-for-pipeline-plugin\">simple\nbuild plugin</a> shows how it is done.  To make your own plugin:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Create a new plugin project, either fork the simple build one, or add a\ndependency to it in your <code>pom.xml</code> / <code>build.gradle</code> file</p>\n</li>\n<li>\n<p>Put your dsl in the resources directory in a similar fashion to\n<a href=\"https://github.com/jenkinsci/simple-build-for-pipeline-plugin/blob/master/src/main/resources/dsl/simpleBuild.groovy\">this</a>\n(note the \"package dsl\" declaration at the top)</p>\n</li>\n<li>\n<p>Create the equivalent extension that just points to the DSL by name like\n<a href=\"https://github.com/jenkinsci/simple-build-for-pipeline-plugin/blob/master/src/main/java/org/jenkinsci/plugins/simplebuild/SimpleBuildDSL.java\">this</a>\n  This is mostly \"boiler plate\" but it tells Jenkins there is a <code>GlobalVariable</code> extension available when Pipelines run.</p>\n</li>\n<li>\n<p>Deploy it to an Jenkins Update Center to share with your org, or everyone!</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>The advantage of delivering this DSL as a plugin is that it has a version (you\ncan also put tests in there), and distributable just like any other plugin.</p>\n</div>\n<div class=\"paragraph\">\n<p>For the more advanced, <a href=\"https://github.com/abayer\">Andrew Bayer</a> has a Simple\nTravis Runner plugin that\n<a href=\"https://github.com/jenkinsci/simple-travis-runner-plugin\">interprets and runs\ntravis.yml files</a> which is also implemented in pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>So, approximately, you can build plugins for pipeline that extend pipeline, in\npipeline script (with a teeny bit of boiler plate).</p>\n</div>\n<div class=\"paragraph\">\n<p>Enjoy!</p>\n</div>\n</div>\n</div>","id":"d9ce8340-eedf-5dba-874d-c9eba3f8e717","title":"Making your own DSL with plugins, written in Pipeline script","date":"2016-04-21T00:00:00.000Z","slug":"/blog/2016/04/21/dsl-plugins/","links":{"discourse":""},"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale","twitter":"michaelneale"}]}},"pageContext":{"next":"/blog/2016/04/22/possible-infra-compromise/","previous":"/blog/2016/04/15/the-need-for-pipeline/","id":"d9ce8340-eedf-5dba-874d-c9eba3f8e717"}},
    "staticQueryHashes": ["1271460761","3649515864"]}