{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2016/04/11/run-your-api-tests-continuously-with-jenkins-and-dhc/",
    "result": {"data":{"blog":{"html":"<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis is a guest post by <a href=\"https://twitter.com/glaforge\">Guillaume Laforge</a>.\nWell known for his contribution to the <a href=\"http://www.groovy-lang.org/\">Apache Groovy</a> project,\nGuillaume is also the \"Product Ninja and Advocate\" of <a href=\"https://restlet.com/\">Restlet</a>,\na company focusing on Web APIs:\nwith <a href=\"https://restlet.com/products/dhc/\">DHC</a> (an API testing client),\n<a href=\"https://restlet.com/products/restlet-studio/\">Restlet Studio</a> (an API designer),\n<a href=\"https://restlet.com/products/apispark/\">APISpark</a> (an API platform in the cloud),\nand the <a href=\"https://restlet.com/projects/restlet-framework/\">Restlet Framework</a>\nopen source project for developing APIs.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Modern mobile apps, single-page web sites and applications, are more and more relying on Web APIs,\nas the nexus of the interaction between the frontend and the backend services.\nWeb APIs are also central to third-party integration, when you want to share your services with others,\nor when you need to consume existing APIs to build your own solution on top of their shoulders.</p>\n</div>\n<div class=\"paragraph\">\n<p>With APIs being a key element of your architecture and big picture,\nit&#8217;s obviously important to assess that this API is functioning the way it should, thanks to proper testing.\nYour framework of choice, regardless of the technology stack or programming language used,\nwill hopefully offer some facilities for testing your code,\nwhether in the form of unit tests, or ideally with integration tests.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"coding-web-api-tests\"><a class=\"anchor\" href=\"#coding-web-api-tests\"></a>Coding Web API tests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>From a code perspective, as I said, most languages and frameworks provide approaches to testing APIs built with them.\nThere&#8217;s one I wanted to highlight in particular, which is one developed with a DSL approach (Domain-Specific Language),\nusing the <a href=\"http://groovy-lang.org\">Apache Groovy</a> programming language, it&#8217;s\n<a href=\"https://github.com/Codearte/accurest/wiki/3.-Contract-DSL\">AccuREST</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>To get started, you can have a look at the <a href=\"https://github.com/Codearte/accurest/wiki/1.-Introduction\">introduction</a>,\nand the <a href=\"https://github.com/Codearte/accurest/wiki/2.-Usage\">usage</a> guide.\nIf you use the <a href=\"https://github.com/Codearte/accurest/wiki/3.-Contract-DSL\">contract DSL</a>,\nyou&#8217;ll be able to write highly readable examples of requests you want to issue against your API,\nand the assertions that you expect to be true when getting the response from that call.\nHere&#8217;s a concrete example from the documentation:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-groovy\" data-lang=\"groovy\">GroovyDsl.make {\n    request {\n        method 'POST'\n        urlPath('/users') {\n            queryParameters {\n                parameter 'limit': 100\n                parameter 'offset': containing(\"1\")\n                parameter 'filter': \"email\"\n            }\n        }\n        headers {\n            header 'Content-Type': 'application/json'\n        }\n        body '''{ \"login\" : \"john\", \"name\": \"John The Contract\" }'''\n    }\n    response {\n        status 200\n        headers {\n            header 'Location': '/users/john'\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Notice that the response is expected to return a status code 200 OK, and a Location header pointing at <code>/users/john</code>.\nIndeed, a very readable way to express the requests and responses!</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"tooling-to-test-your-apis\"><a class=\"anchor\" href=\"#tooling-to-test-your-apis\"></a>Tooling to test your APIs</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>From a tooling perspective, there are some interesting tools that can be used to test Web APIs,\nlike <a href=\"https://luckymarmot.com/paw\">Paw</a> (on Macs),\n<a href=\"https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=en-US\">Advanced REST client</a>,\n<a href=\"https://www.getpostman.com/\">Postman</a> or\n<a href=\"https://insomnia.rest/\">Insomnia</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>But in this article, I&#8217;ll offer a quick look at <a href=\"https://restlet.com/products/dhc/\">DHC</a>,\na handy visual tool, that you can use both manually to craft your tests and assertions,\nand whose test scenarios you can export and integrate in your build and continuous integration pipeline,\nthanks to <a href=\"https://maven.apache.org/\">Maven</a> and Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>At the end of this post, you should be able to see the following reporting in your Jenkins dashboard,\nwhen visualising the resulting API test execution:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><a class=\"image\" href=\"/images/post-images/dhc/dhc-5-jenkins-report-big.png\"><img src=\"/images/post-images/dhc/dhc-5-jenkins-report.png\" alt=\"Export a scenario\"></a></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"introducing-dhc\"><a class=\"anchor\" href=\"#introducing-dhc\"></a>Introducing DHC</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>DHC is a Chrome extension, that you can\n<a href=\"https://chrome.google.com/webstore/detail/dhc-resthttp-api-client/aejoelaoggembcahagimdiliamlcdmfm\">install from the Chrome Web Store</a>,\nin your Chrome browser. There&#8217;s also an <a href=\"https://dhc.restlet.com/\">online service</a> available, with some limitations.\nFor the purpose of this article, we&#8217;ll use the Chrome extension.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><a class=\"image\" href=\"/images/post-images/dhc/dhc-1-interface-big.png\"><img src=\"/images/post-images/dhc/dhc-1-interface.png\" alt=\"DHC interface\"></a></span></p>\n</div>\n<div class=\"paragraph\">\n<p>In the main area, you can create your request, define the URL to call, specify the various request headers or params,\nchose the method you want to use, and then, you can click the send button to issue the request.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the left pane, that&#8217;s where you&#8217;ll be able to see your request history, create and save your project in the cloud,\nor also set context variables.</p>\n</div>\n<div class=\"paragraph\">\n<p>The latter is important when testing your Web API, as you&#8217;ll be able to insert variables like for example\n<code>{localhost}</code> for testing locally on your machine or <code>{staging}</code> and <code>{prod}</code> to run your tests in different environments.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the bottom pane, you have access to actual raw HTTP exchange, as well as the assertions pane.</p>\n</div>\n<div class=\"paragraph\">\n<p>Again, a very important pane to look at! With assertions, you&#8217;ll be able to ensure that your Web API works as expected.\nFor instance, you can check the status code of the call, check the payload contains a certain element,\nby using JSON Path or XPath to go through the JSON or XML payload respectively.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><a class=\"image\" href=\"/images/post-images/dhc/dhc-2-assertions-big.png\"><img src=\"/images/post-images/dhc/dhc-2-assertions.png\" alt=\"DHC interface\"></a></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Beyond assertions, what&#8217;s also interesting is that you can chain requests together.\nA call request can depend on the outcome of a previous request!\nFor example, in a new request, you could pass a query parameter whose value would be the value of some element\nof the JSON payload of a previously executed request.\nAnd by combining assertions, linked requests and context variables together, you can create full-blown test scenarios,\nthat you can then save in the cloud, but also export as a JSON file.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><a class=\"image\" href=\"/images/post-images/dhc/dhc-4-scenario-big.png\"><img src=\"/images/post-images/dhc/dhc-4-scenario.png\" alt=\"Running a test scenario\"></a></span></p>\n</div>\n<div class=\"paragraph\">\n<p>To export that test scenario, you can click on the little export icon in the bottom left hand corner,\nand you&#8217;ll be able to select exactly what you want to export:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><a class=\"image\" href=\"/images/post-images/dhc/dhc-3-export-big.png\"><img src=\"/images/post-images/dhc/dhc-3-export.png\" alt=\"Export a scenario\"></a></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"running-your-web-api-tests-with-maven\"><a class=\"anchor\" href=\"#running-your-web-api-tests-with-maven\"></a>Running your Web API tests with Maven</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now things become even more interesting, as we&#8217;ll proceed to using Maven and Jenkins!\nAs the saying goes, there&#8217;s a Maven plugin for that! For running those Web API tests in your build!\nEven if your Web API is developed in another technology than Java, you can still create a small Maven build\njust for your Web API tests.\nAnd the icing on the cake, when you configure Jenkins to run this build, as the plugin outputs JUnit-friendly test reports,\nyou&#8217;ll be able to see the details of your successful and failed tests, just like you would see JUnit&#8217;s!</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s sketch your Maven POM:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight nowrap\"><code class=\"language-xml\" data-lang=\"xml\">&lt;project xmlns=\"https://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"https://maven.apache.org/POM/4.0.0\n                        https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n  &lt;groupId&gt;com.example&lt;/groupId&gt;\n  &lt;artifactId&gt;my-first-api-test&lt;/artifactId&gt;\n  &lt;version&gt;1.2.3&lt;/version&gt;\n\n  &lt;build&gt;\n    &lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;com.restlet.dhc&lt;/groupId&gt;\n        &lt;artifactId&gt;dhc-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;1.1&lt;/version&gt;\n        &lt;executions&gt;\n         &lt;execution&gt;\n            &lt;phase&gt;test&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;test&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n              &lt;file&gt;companies-scenario.json&lt;/file&gt;\n            &lt;/configuration&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n    &lt;/plugins&gt;\n  &lt;/build&gt;\n\n  &lt;pluginRepositories&gt;\n    &lt;pluginRepository&gt;\n      &lt;id&gt;restlet-maven&lt;/id&gt;\n      &lt;name&gt;Restlet public Maven repository Release Repository&lt;/name&gt;\n      &lt;url&gt;https://maven.restlet.com&lt;/url&gt;\n    &lt;/pluginRepository&gt;\n  &lt;/pluginRepositories&gt;\n&lt;/project&gt;</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"visualizing-web-api-test-executions-in-jenkins\"><a class=\"anchor\" href=\"#visualizing-web-api-test-executions-in-jenkins\"></a>Visualizing Web API test executions in Jenkins</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once you&#8217;ve configured your Jenkins server to launch the <code>test</code> goal of this Maven project,\nyou&#8217;ll be able to see nice test reports for your Web API scenarios, like in the screenshot in introduction of this article!</p>\n</div>\n<div class=\"paragraph\">\n<p>Next, you can easily run your Web API tests when developers commit changes to the API,\nor schedule regular builds with Jenkins to monitor an online Web API.</p>\n</div>\n<div class=\"paragraph\">\n<p>For more information, be sure to read the tutorial on\n<a href=\"https://restlet.com/blog/2016/02/03/testing-web-apis-using-dhc-by-restlet/\">testing Web APIs with DHC</a>.\nThere are also some more resources like a\n<a href=\"https://restlet.com/blog/2016/02/19/screencast-testing-apis-with-dhc-by-restlet/\">screencast</a>,\nas well as the\n<a href=\"https://restlet.com/technical-resources/dhc/guide\">user guide</a>, if you want to learn more.\nAnd above all, happy testing!</p>\n</div>\n</div>\n</div>","id":"71b50dae-de34-5505-957d-a9c0f8d10044","title":"Run Your API Tests Continuously with Jenkins and DHC","date":"2016-04-11T00:00:00.000Z","slug":"/blog/2016/04/11/run-your-api-tests-continuously-with-jenkins-and-dhc/","links":{"discourse":""},"authors":[{"avatar":null,"blog":"https://glaforge.appspot.com/","github":"glaforge","html":"","id":"glaforge","irc":null,"linkedin":null,"name":"Guillaume Laforge","slug":"/blog/authors/glaforge/","twitter":"glaforge"}]}},"pageContext":{"id":"71b50dae-de34-5505-957d-a9c0f8d10044"}},
    "staticQueryHashes": ["1271460761","3649515864"]}