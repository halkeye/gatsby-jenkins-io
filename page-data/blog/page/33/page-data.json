{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/33",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-01-17T00:00:00.000Z","id":"b1792073-44e9-5774-86e8-6786aeba1b03","slug":"/blog/2018/01/17/jenkins-world-cfp-open/","strippedHtml":"Happy 2018! The Jenkins World train is ready to take off once again. As usual, the sign of festivities looming begins with the Call for Papers.  Those who attended Jenkins World 2017 know that Jenkins World 2018 is coming back to San Francisco. But what they did not know is that Jenkins World will also be coming to Europe. You read that right, Jenkins World is taking place in two locations in 2018:\n\nJenkins World USA | San Francisco | September 16 - 19, 2018\n\nJenkins World Europe | October - date and location TBA\n\nTo encourage open collaboration and stimulate discussions that will help advance Jenkins adoption and drive it forward, we invite Jenkins users, developers and industry experts to submit a speaking proposal to Jenkins World San Francisco and or Europe.  Submissions for both locations are being accepted now and will close on March 18, 2018 @ 11:59PM Pacific.\n\nWhere do I go to submit my proposal?\n\nSubmissions for both Jenkins World USA and Europe are accepted at:\n\nJenkins World USA\n\nJenkins World Europe\n\nCan I make proposal(s) to both conferences?\n\nYes, you can! Once you’ve created an account on the CFP website you will be given the option to make submission(s) to one conference or both conferences.\n\nWhen is the deadline Jenkins World USA?\n\nSunday March 18, 2018 @ 11:59PM Pacific\n\nWhen is the deadline for Jenkins World Europe?\n\nSunday March 18, 2018 @ 11:59PM Pacific\n\nImportant Dates:\n\nCFP Opens: January 17, 2018\n\nCFP Closes: March 18, 2018 @ 11:59pm Pacific\n\nCFP Notifications: April\n\nAgenda Announcement: April\n\nEvent Dates:\n\nJenkins World USA | San Francisco | September 16 - 19, 2018\n\nJenkins World Europe | October - exact date TBA","title":"Jenkins World 2018: Call for Papers is Open","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2018-01-13T00:00:00.000Z","id":"b30f609a-7e4a-56ef-93e3-f8629da662cd","slug":"/blog/2018/01/13/jep-200/","strippedHtml":"There is a newer version of the announcement for Jenkins administrators.\nPlease see this blogpost.\n\nOverview\n\nJEP-200 has been integrated into Jenkins weekly builds\nand (if all goes well) will be a part of the next LTS line.\nIn a nutshell, this change is a security hardening measure\nto be less permissive about deserializing Java classes defined in the Java Platform or libraries bundled with Jenkins.\nFor several years now, Jenkins has specifically blacklisted certain classes and packages according to known or suspected exploits;\nnow it will reject all classes not explicitly mentioned in a whitelist, or defined in Jenkins core or plugins.\n\nFor Jenkins administrators\n\nBefore upgrade\n\nBack up your Jenkins instance prior to upgrade so you have any easy way of rolling back.\nIf you are running any of the plugins listed in\nPlugins affected by fix for JEP-200,\nupdate them after taking the backup but before upgrading Jenkins core.\n\nIf you have a way of testing the upgrade in an isolated environment before applying it to production,\ndo so now.\n\nUsing backups and a staging server is good advice before any upgrade but especially this one,\nwith a relatively high risk of regression.\n\nAfter upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nIf you do encounter a java.lang.SecurityException: Rejected: some.pkg.and.ClassName in the Jenkins UI or logs,\nyou may have found a case where an unusual plugin, or an unusual usage mode of a common plugin,\nviolates the existing whitelist.\nThis will be visible in the Jenkins system log as a message from jenkins.security.ClassFilterImpl like the following:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nwhere the link would direct you here.\n\nIf you find such a case, please report it in the Jenkins issue tracker, under the appropriate plugin component.\nLink it to JENKINS-47736 and add the JEP-200 label.\nIf at all possible, include complete steps to reproduce the problem from scratch.\nJenkins developers will strive to evaluate the reason for the violation and offer a fix in the form of a core and/or plugin update.\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nSimply make note of any class name(s) mentioned in such log messages,\nand run Jenkins with this startup option (details will depend on your installation method):\n\n-Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName\n\nFor plugin developers\n\nTesting plugins against Jenkins 2.102 and above\n\nAs a plugin developer encountering this kind of error,\nyour first task is to ensure that it is reproducible in a functional ( JenkinsRule) test\nwhen running Jenkins 2.102 or newer to reproduce the error.\n\nmvn test -Djenkins.version=2.102 -Denforcer.skip=true\n\nThe above assumes you are using a recent 2.x or 3.x parent Plugin POM.\nFor certain cases you may need to use Plugin Compat Tester (PCT)\nto run tests against Jenkins core versions newer than your baseline.\n\nRunning PCT against the latest Jenkins core:\n\njava -jar pct-cli.jar -reportFile $(pwd)/out/pct-report.xml \\\n    -workDirectory $(pwd)/work -skipTestCache true -mvn $(which mvn) \\\n    -includePlugins ${ARTIFACT_ID} -localCheckoutDir ${YOUR_PLUGIN_REPO}\n\nYou may need to run tests using an agent or force saves of plugin settings.\n\nFor maven plugins you can also specify custom Jenkins versions in Jenkinsfile to run tests against JEP-200:\n\nbuildPlugin(jenkinsVersions: [null, '2.102'])\n\n(again picking whatever version you need to test against)\nso that the test is included during CI builds, even while your minimum core baseline predates JEP-200.\n\nIf your plugins are built with Gradle, your mileage may vary.\n\nMaking plugins compatible with Jenkins 2.102 or above\n\nIf you discover a compatibility issue in your plugin,\nyou then have several choices for fixing the problem:\n\nIdeally, simplify your code so that the mentioned class is not deserialized via Jenkins Remoting or XStream to begin with:\n\nIf the problem occurred when receiving a response from an agent, change your Callable (or FileCallable) to return a plainer type.\n\nIf the problem occurred when saving an XML file (such as a config.xml or build.xml), use a plainer type in non- transient fields in your persistable plugin classes.\n\nIf the class(es) are defined in the Java Platform or some library bundled in Jenkins core, propose a pull request adding it to core/src/main/resources/jenkins/security/whitelisted-classes.txt in jenkinsci/jenkins.\n\nIf the class(es) are defined in a third-party library bundled in your plugin, create a resource file META-INF/hudson.remoting.ClassFilter listing them. ( example)\n\nYou may also do this for Java or Jenkins core library classes, as a hotfix until your core baseline includes the whitelist entry proposed above.\n\nIf the class(es) are defined in a JAR you build and then bundle in your plugin’s *.jpi, add a Jenkins-ClassFilter-Whitelisted: true manifest entry. This whitelists every class in the JAR. ( example)","title":"JEP-200: Remoting / XStream whitelist integrated into Jenkins core","tags":["core","security","remoting","upgrade"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick","twitter":"tyvole"}]}},{"node":{"date":"2018-01-08T00:00:00.000Z","id":"775a7cf1-5a4d-58b6-b98a-0d5ac2e2af67","slug":"/blog/2018/01/08/moving-from-buddybuild-for-android/","strippedHtml":"Last week, buddybuild — a hosted continuous integration service focused on mobile apps — announced that it had been acquired by Apple, and consequently its complete Android offering, along with its free tier for iOS users, will be discontinued at the beginning of March.\n\nThis was a fairly undesirable way to start 2018 for buddybuild’s Android users and, with less than two months to find an alternative, many took to Twitter to simultaneously congratulate buddybuild on their acquisition, and commiserate with others who have to find a new way to build and test their app.\n\nWhile Jenkins is usually deployed as a self-hosted solution (with over 150k installs), rather than a hosted service like buddybuild, we thought this would be a good time to highlight — thanks to the rich plugin ecosystem of Jenkins — some of the possibilities offered to Android developers by Jenkins.\n\nCommon workflows\n\nAndroid projects are fundamentally no different from how other types of software development projects might make use of a Continuous Integration & Continuous Delivery system (CI/CD) such as Jenkins: Android developers will collaborate using a source control management system (SCM) such as Git or Mercurial; they will create Pull Requests, which should be automatically verified; they expect to get feedback on test failures and code quality (e.g. via email or Slack); and they should be able to easily deploy new versions of their app to beta testers or end users.\n\nTo this end, Jenkins lets you define your build and deployment pipelines in a structured and auditable fashion (via Jenkinsfile), supports a multitude of SCMs, while the multibranch Pipeline feature automatically creates new Jenkins jobs for every new Pull Request in your repository, and cleans them up as branches get merged.  The Blue Ocean user interface ties these features together in a clean, modern UI.\n\nBuilding Android Apps\n\nTo build an Android app, you need the Java development tools (JDK), which Jenkins can automatically install for you, plus the Android SDK, which you can also install on individual build agents using a tool installer, or you can use a Docker container with the Android SDK Tools preinstalled, for example.\n\nThen, you can use your SCM plugin of choice to fetch your source code, and build the app using the Android Gradle Plugin via the Gradle Wrapper — in most cases this is as simple as running./gradlew assembleDebug.\n\nOnce your app has been built and packaged into a.apk file, you can use the archiveArtifacts build step, storing the APK, enabling colleagues to download APKs directly from Jenkins, so that they can try out the latest build.\n\nTesting Android Apps\n\nThe Android SDK supports two types of test: unit tests, which run on the JVM, and instrumentation tests, which have to run on an Android device or emulator.  Both types of test can be executed using Jenkins and, since the Android Gradle Plugin writes the test results to disk in JUnit XML format, the JUnit Plugin for Jenkins can be used to parse the results, enabling you see a test report, and to be notified of test failures.\n\nCompiling and executing the unit tests for your app is as simple as adding another build step which runs./gradlew testDebugUnitTest.\n\nSimilarly, instrumentation tests can be compiled and executed via the connectedDebugAndroidTest task in Gradle.  However, before you do this, you should ensure that an Android device is connected to your Jenkins build agent, or you can make use of the Android Emulator Plugin to automatically download, create, and start an emulator for you during a build.  There are also plugins for cloud testing services such as AWS Device Farm.\n\nOnce you have finished executing the tests, you can use the junit step to analyse the results: junit '**/TEST-*.xml'.\n\nStatic Analysis\n\nSimilar to other Java or Kotlin projects, you can scan your codebase using static analysis tools like FindBugs or Checkstyle.  Once again, Jenkins has analysis plugins which can parse the output of these tools, and present you with the results and trend graphs, or optionally flag the build as unstable or failed if too many problems have been detected.\n\nThe Android SDK provides a further useful static analysis tool called Lint.  The output of this tool can be parsed by the Warnings Next Generation Plugin, which will analyse the issues found, and provide you with a detailed report within Jenkins.  This functionality was demonstrated by the Android Tools Team at the Google I/O conference a few years back.\n\nSecurely signing and deploying Android apps\n\nIn order to distribute an Android app, it needs to be signed with a private key, which you should keep safe (losing it means you won’t be able to publish updates to your app!), and as secure as possible.\n\nInstead of developers having to keep the signing keystore on their development machines, you can securely store the keystore and/or its passphrase on Jenkins using the Credentials Plugin.  This avoids having to hardcode the passphrase into your build.gradle, or have it otherwise checked into your SCM.\n\nThe Credentials Plugin allows you to store secrets in Jenkins — which will be stored encrypted on disk when not in use — and those secrets can temporarily be made available during a build, either as a file in the build workspace, or exposed as an environment variable.\n\nYou can use such environment variables in a signingConfig block within your build.gradle, or you can make use of the Android Signing Plugin to sign your APK for you.\n\nOnce you have your production-ready APK built and signed, you can automatically upload it to Google Play using the Google Play Android Publisher plugin.  The benefit of using this plugin is that it supports multiple APK upload, expansion files, uploading of ProGuard mapping files, promotion of builds from alpha, to beta, to production — and once again, your Google Play credentials are securely stored on Jenkins thanks to integration with the Credentials Plugin.\n\nSample Pipeline\n\nHere’s a straightforward example of a Jenkinsfile defining a pipeline to build, test, and optionally deploy an Android app, from a multibranch Pipeline job.\nIt requires the Pipeline, JUnit, Android Lint, Google Play Android Publisher, and Mailer plugins to be installed.\n\nJenkinsfile\n\npipeline {\n  agent {\n    // Run on a build agent where we have the Android SDK installed\n    label 'android'\n  }\n  options {\n    // Stop the build early in case of compile or test failures\n    skipStagesAfterUnstable()\n  }\n  stages {\n    stage('Compile') {\n      steps {\n        // Compile the app and its dependencies\n        sh './gradlew compileDebugSources'\n      }\n    }\n    stage('Unit test') {\n      steps {\n        // Compile and run the unit tests for the app and its dependencies\n        sh './gradlew testDebugUnitTest'\n\n        // Analyse the test results and update the build result as appropriate\n        junit '**/TEST-*.xml'\n      }\n    }\n    stage('Build APK') {\n      steps {\n        // Finish building and packaging the APK\n        sh './gradlew assembleDebug'\n\n        // Archive the APKs so that they can be downloaded from Jenkins\n        archiveArtifacts '**/*.apk'\n      }\n    }\n    stage('Static analysis') {\n      steps {\n        // Run Lint and analyse the results\n        sh './gradlew lintDebug'\n        androidLint pattern: '**/lint-results-*.xml'\n      }\n    }\n    stage('Deploy') {\n      when {\n        // Only execute this stage when building from the `beta` branch\n        branch 'beta'\n      }\n      environment {\n        // Assuming a file credential has been added to Jenkins, with the ID 'my-app-signing-keystore',\n        // this will export an environment variable during the build, pointing to the absolute path of\n        // the stored Android keystore file.  When the build ends, the temporarily file will be removed.\n        SIGNING_KEYSTORE = credentials('my-app-signing-keystore')\n\n        // Similarly, the value of this variable will be a password stored by the Credentials Plugin\n        SIGNING_KEY_PASSWORD = credentials('my-app-signing-password')\n      }\n      steps {\n        // Build the app in release mode, and sign the APK using the environment variables\n        sh './gradlew assembleRelease'\n\n        // Archive the APKs so that they can be downloaded from Jenkins\n        archiveArtifacts '**/*.apk'\n\n        // Upload the APK to Google Play\n        androidApkUpload googleCredentialsId: 'Google Play', apkFilesPattern: '**/*-release.apk', trackName: 'beta'\n      }\n      post {\n        success {\n          // Notify if the upload succeeded\n          mail to: 'beta-testers@example.com', subject: 'New build available!', body: 'Check it out!'\n        }\n      }\n    }\n  }\n  post {\n    failure {\n      // Notify developer team of the failure\n      mail to: 'android-devs@example.com', subject: 'Oops!', body: \"Build ${env.BUILD_NUMBER} failed; ${env.BUILD_URL}\"\n    }\n  }\n}\n\nNot just for Android\n\nWhile buddybuild concentrated on Android and iOS apps, thanks to the distributed build agent architecture of Jenkins, you can automate any type of project.\n\nFor example, you can expand the capabilities of Jenkins by adding macOS (or Windows, Linux, BSD…) agents; you can dynamically spin up agents on AWS EC2 instances, Microsoft Azure VMs, or Azure Container Instances; you can create agents using VMware, and so on.\n\nConclusion\n\nThousands of Jenkins instances are already using the various Android-related plugins, and Pipeline along with the Blue Ocean User Interface make using Jenkins simpler than it’s ever been.\n\nGive Jenkins a try for building your Android projects, check out the tutorials, and get in touch via the users' mailing list, or IRC.\n\nFinally, as with Jenkins itself, all plugins distributed are open-source, so feel free to contribute!","title":"Moving from buddybuild to Jenkins for Android Developers","tags":["android","plugins"],"authors":[{"avatar":null,"blog":"https://chris.orr.me.uk/","github":"orrc","html":"<div class=\"paragraph\">\n<p>Chris has been hanging around the Jenkins project since 2008, working on\nplugins, helping out folk on IRC, and speaking to people at conferences about\nJenkins.  He maintains several Android-related plugins, and contributes to a few\nothers.</p>\n</div>","id":"orrc","irc":null,"linkedin":null,"name":"Christopher Orr","slug":"/blog/authors/orrc","twitter":"orrc"}]}},{"node":{"date":"2018-01-06T00:00:00.000Z","id":"13c78108-0ad3-594f-90c8-5073ecaa09cc","slug":"/blog/2018/01/06/gsoc2018-call-for-mentors/","strippedHtml":"This year the Jenkins project is interested in participating in\nGoogle Summer of Code (GSoC).\nAs in 2016/2017, we are looking for mentors.\nSo yes, we are looking for you :)\n\nWhat is GSoC?\n\nGSoC is an annual international program which encourages\ncollege-aged students to participate with open source projects during the summer\nbreak between classes.\n\nStudents accepted into the program receive a stipend,\npaid by Google, to work on well-defined projects to improve or enhance the Jenkins\nproject.\nIn exchange, numerous Jenkins community members volunteer as mentors\nfor students to help integrate them into the open source community and succeed\nin completing their summer projects.\n\nWhat do mentors get?\n\nA student who works full-time in the area of your interest for several months\n\nJoint projects with Jenkins experts, lots of fun and ability to study something together\n\nLimited-edition of swags from Google and Jenkins project\n\nMaybe: Participation in GSoC Mentor Summit and other GSoC events/meetups\n\nConditions\n\nMentors are expected to…​\n\nBe passionate about Jenkins\n\nLead the project in the area of their interest\n\nActively participate in the project during student selection, community bonding and coding phases (March - August)\n\nWork in teams of 2+ mentors per 1 each student\n\nDedicate a consistent and significant amount of time, especially during the coding phase ( ~5 hours per week in a team of two mentors)\n\nMentorship does NOT require strong expertise in Jenkins plugin development.\nThe main objective is to guide students and to get them involved into the Jenkins community.\nGSoC org admins will help to find advisors if a special expertise is needed.\n\nDisclaimer: We cannot guarantee that the Jenkins organization gets accepted to GSoC.\nEven if it gets accepted, we may need to select projects depending on student applications\nand the number of allocated project slots.\n\nTimeline\n\nDec 2017 - started collecting project ideas\n\nJan 17 - Status review at the Jenkins Governance Meeting.\nOutcome: decision whether we apply to GSoC in 2018.\n\nJan 21 - Application to GSoC (deadline - Jan 23)\n\nFeb 12 - List of accepted mentoring organizations published\n\nMar 05 - Deadline for project idea proposals\n\nNext - GSoC Timeline\n\nHow to apply?\n\nIf you are interested in proposing a project or joining an existing one, please respond to\nthis thread\nin the Jenkins Developer mailing list.\nWe aggregate/review proposals in\nthis document\nwhere you just need to describe the idea and introduce yourself.\n\nPlease propose new project ideas for discussion until March 05.\nYou can join an existing project at any time, including community bonding and coding periods.\n\nProject requirements\n\nGSoC is about code (though it may and likely should include some documentation and testing work)\n\nProjects should be about Jenkins (plugins, core, infrastructure, integrations, etc.)\n\nProjects should be potentially doable by a student in 3-4 months\n\nYou can find more information about requirements and practices in the\nGSoC Mentor Guide.\n\nLinks\n\nJenkins GSoC subproject page\n\nInformation for mentors\n\nGoogle Summer of Code page\n\nGSoC Mentor Guide\n\nGSoC Timeline","title":"Google Summer Of Code 2018: Call for mentors","tags":["gsoc","gsoc2018","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-01-03T00:00:00.000Z","id":"51d9d519-6e28-5a4e-8b38-13a807cb063a","slug":"/blog/2018/01/03/fosdem-2018/","strippedHtml":"FOSDEM 2018 is a free event for software developers to meet, share ideas and collaborate.\nIt is an annual event that brings open source contributors from around the world for two days of presentations, discussions, and learning.\n\nJenkins will be well-represented at FOSDEM 2018.\n\nHappy Hour before FOSDEM\n\nWe’ll have a happy hour Friday evening before FOSDEM at Cafe Le Roy d’Espagne.\nSee the meetup page for details.\n\nJenkins table at FOSDEM\n\nA Jenkins table will be staffed by volunteers at FOSDEM to answer questions, discuss topics, and help users.\nSee the meetup page for details.\n\nPresentations at FOSDEM\n\nAutomated Linux Containers deployment for fun and profit by David Negreira\n\nAdvanced testing in action on a Java project by Vincent Massol\n\nDeployment vs Provisioning vs Orchestration vs Configuration Management by Peter Souter\n\nJenkins Hackfest after FOSDEM\n\nA Jenkins Hackfest will be held the day after FOSDEM 2018.\nThose who would like to join us for the hackfest 5 Feb 2018 should register for the meetup.\n\nMeals, snacks, and beverages will be provided for the hackfest.  Come join us, and let’s write some code!\n\nQuestions? feel free to contact Alyssa Tong or Mark Waite.","title":"FOSDEM 2018!","tags":["community","event"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2017-12-31T00:00:00.000Z","id":"983f4785-b11e-5d96-85e5-31c4a4070c62","slug":"/blog/2017/12/31/new-year/","strippedHtml":"Jenkins project congratulates all users and contributors with the New Year!\nLet’s take a look at some changes this year.\n\nHighlights\n\nWe released major features like BlueOcean\nand Declarative Pipeline\n\nThese features offer a new user experience in Jenkins Web UI, powered by Jenkins Pipeline.\n\nIn Jenkins 2.54 we updated the Java minimal requirement to Java 8 ( announcement).\n\nPlugin CI has been moved to our Jenkins-on-Jenkins instance.\nAll plugins are being built by Jenkins Pipeline with a special pipeline library\n\nWe adopted the Jenkins Enhancement Proposal (JEP) process for major changes in Jenkins.\nThere are already JEPs under review:\n\nJEP-2: Criteria for selecting \"Suggested Plugins\"\n\nJEP-200: Switch Remoting/XStream blacklist to a whitelist\n\nJEP-201: Jenkins Configuration as Code\n\nSome stats\n\nIn 2017 we had 60 weekly and 13 LTS releases with 305 fixes/enhancements only in the core.\nNext week Jenkins is going to hit the 2.100 version, and the core changed greatly since the 2.0 release in April 2016.\nJenkins Security was one of the hottest areas this year, there were 7 security advisories for the core and 15 - for plugins.\nFor comparison, in 2016 there were only 6 security releases in total.\n\nThere were 2605 plugin releases, and 215 NEW plugins have been hosted in the Update Center.\nIn particular Jenkins ecosystem has greatly expanded into the Cloud space\nby offering dozens of new plugins (e.g. for Azure and Kubernetes).\nWe also got many new plugins providing integrations with various Development and DevOps tools.\n\nOther subprojects and Jenkins components also got major updates.\nFor example,\nJenkins Remoting got 15 releases with stability improvements.\nStapler Framework also got 6 releases.\n\nKeep updating, Jenkins 2 is not only about Pipeline as Code!\n\nEvents\n\nThis year we got many new Jenkins Area Meetups.\nCurrently there are 77 meetups with more than 20,000 members in total ( full map).\nMore than 100 meetups have been organized around the globe.\n\nThere were also several Jenkins-focused conferences including the following ones:\n\nJenkins World in San-Francisco\n\nJenkins User Conferences in Israel and Shanghai\n\nDays Of Jenkins in Gothenburg and Oslo\n\nJenkins Community Day in Paris\n\nJenkins Days in Amsterdam\n\nCloudBees | Jenkins Automotive and Embedded Day in Stuttgart\n\nWhat’s next?\n\nNext year we will have traditional contributor meeting at FOSDEM\nand at Jenkins World 2018.\nIf you are interested in Jenkins, stop by at our community booths and join the contributor summits/hackathons.\nWe also want to participate in Google Summer of Code 2018,\nand currently we are looking for mentors.\n\nStay tuned, there is much more to come next year!","title":"Happy New Year!","tags":["community","new-year-blogpost"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2017-12-15T00:00:00.000Z","id":"c2ac3d30-6b1c-5338-a437-133b5ebc730e","slug":"/blog/2017/12/15/auto-convert-freestyle-jenkins-jobs-to-coded-pipeline/","strippedHtml":"This is a guest post by Sanil Pillai, Director of Labs & Strategic Insights, Infostretch\n\nInfostretch has created a\nplugin for teams\nupgrading from Freestyle Jobs to Pipelines as code with Jenkins Pipeline.\nThis new plugin streamlines the process and accelerates\npipeline on-boarding for any new set of applications. Previously, when\nupgrading to Jenkins Pipeline, converting Freestyle Jobs required developers\nto drill down on each one of those hundreds (or thousands!)  of jobs to understand\ntools, configurations, URLs, parameters, and more before rewriting them in\nPipeline syntax. This process is very manual,\nerror-prone, lengthy, and not cost-effective. Beyond saving time, the new\nplugin also assures adherence to proper coding standards and separates complex\nbusiness logic and standards declaration from execution flow.\n\nKey features:\n\nConvert single freestyle job to pipeline\n\nConvert chain of freestyle jobs to single pipeline\n\nWorks with both Jenkins and CloudBees Jenkins Enterprise\n\nPlugin can be customized to support any Freestyle plugin and an\norganization’s Pipeline Shared Library,\nor Groovy coding standards.\n\nWorks with CloudBees' Role-based Access Control to help the new Pipelines\ncomply with existing security policies.\n\nDirect migration of properties such as \"Build with Parameters\" to newly\ncreated Pipelines.\n\nDirect migration of Agent on which job is to be run with support for multiple agent labels across different downstream jobs\n\nEnvironment properties: JDK, NodeJS\n\nSupports Git SCM.\n\nBuild steps: Maven, Ant, Shell, Batch, and Ansible Playbook.\n\nPost build actions: artifact archiver, simple mailer, TestNG reports, JUnit reports, checkstyle publisher\n\nNow, let’s take a look at how to get started:\n\nClick on a link at Root level or Folder level or Job level.\n\nSelect the job from the drop-down list that is the beginning point of the\n\"chain\". If job level link is clicked, this drop-down list will not be visible.\n\nProvide the new pipeline job name. If this is not specified, the plugin will\nattempt to create a new pipeline job with the naming convention of\n\"oldname-pipeline\".\n\nCheck \"Recursively convert downstream jobs if any?\" if you wish to have all the\ndownstream jobs converted into this new pipeline. The plugin will write all the\nlogic of current and downstream jobs into a single pipeline.\n\nCheck \"Commit Jenkinsfile?\" if you would like the plugin to create a\nJenkinsfile and commit it back to the SCM. The plugin will commit the\nJenkinsfile at the root of the SCM repository it finds in the first job\n(selected in step 1 above). It will attempt to commit to this repo using the\ncredentials it finds in the first job.\n\nDo note that the plugin will checkout the repo in to a temporary workspace on\nthe controller (JENKINS_HOME/plugins/convert-to-    pipeline/ws). Once the\nconversion is complete and Jenkinsfile is committed back to the repo, the\nworkspace will be deleted.\n\nClick \"Convert\" to convert the Freestyle job configurations to a single\nscripted pipeline job. Once the conversion is complete and the new job is\ncreated, you will be redirected to the newly created pipeline job.\n\nThat’s it!\n\nTo learn more about plugin usage, customization and to see a demo\nclick here\nto watch the webinar replay on-demand.","title":"Auto-Convert Freestyle Jobs to Jenkins Pipeline","tags":["pipeline","freestyle"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Director of Labs &amp; Strategic Insights, Infostretch</p>\n</div>","id":"spillai","irc":null,"linkedin":null,"name":"Sanil Pillai","slug":"/blog/authors/spillai","twitter":null}]}},{"node":{"date":"2017-12-14T00:00:00.000Z","id":"46206425-c22d-532b-b23f-d107881ab35a","slug":"/blog/2017/12/14/security-update/","strippedHtml":"We just released security updates to Jenkins, versions 2.95 and 2.89.2, that fix two security vulnerabilities.\nFor an overview of what was fixed, see the security advisory.\n\nWe usually announce core security updates well in advance on the jenkinsci-advisories mailing list, to give Jenkins administrators time to schedule a maintenance.\nAdditionally, we try to align security updates with the regular LTS schedule.\nWe have chosen not to do so in this case for two reasons:\n\nThe random failure to set up Jenkins is very noticeable, and given that we’ve seen automated exploits for unprotected Jenkins instances in the past we consider it important to fix that issue as soon as possible, so that users setting up new instances of Jenkins can be confident they won’t start up insecurely.\n\nThe CSRF issue appears to only affect instances for a very short (seconds at most, if at all) time period immediately after startup, so administrators could apply the fix during the next scheduled Jenkins downtime, rather than immediately.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":256,"numPages":100,"currentPage":33}},
    "staticQueryHashes": ["3649515864"]}