{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/33",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-02-22T00:00:00.000Z","id":"d0c104fc-7582-5b71-ae72-ad7781b4796d","slug":"/blog/2018/02/22/cheetah/","strippedHtml":"Table of Contents\n\nIntroducing \"Project Cheetah\"\nYes, but what does it DO?\nHow Do I Set Speed/Durability Settings?\n\n1. Globally, you can choose a global default durability setting:\n2. Each Pipeline can get a custom Durability Setting:\n3. Multibranch Projects can use a new BranchProperty to customize the Durability Setting.\n\nWill Performance-Optimized Mode Help Me?\nOther Goodies\nHow Did You Do It?\nWhat Next?\n\nSince it launched, Pipeline has had a bit of a Dr. Jekyll and Mr. Hyde performance problem.  In certain circumstances, Pipeline can turn from a mild-mannered CI/CD assistant into a monster.  It will happily eat storage read/write capacity like popcorn without caring about the other concerns of our friendly butler.  When combined with other additional factors, this can result in real-world stability problems.  For example, combining slow storage with a spike in running Pipelines has brought down production Jenkins at more than one organization.  Similarly, users see issues if a busy controller gets hit with an extra source of stress; past culprits have been heavy automated (ab)use of Jenkins APIs, now-solved user lookup bugs, backup jobs, and plugins run crazy that load excessive numbers of builds.  Symptoms ranged from visible slowdowns in the UI to unresponsive jobs and \"hung\" controllers.\n\nNow I’m not saying this to scare people or to criticize the technology we’ve built. Implementing Pipeline scalability best practices coupled with SSD storage keeps Jenkins in a happy place.  We just need context on the weaknesses to see why it’s important to address them.\n\nIntroducing \"Project Cheetah\"\n\nToday we’re announcing the first major results of \"Project Cheetah\", our long-running effort to address these challenges and improve Pipeline scalability.  More broadly, Cheetah aims to help in 3 places:\n\nSmall-scale containers: Pipeline needs to run leanly in resource-constrained containers, to enable easy scale-out without consuming excessive resources on shared container hosts.\n\nEnterprise systems: Pipeline needs to effectively serve high-scale Jenkins instances that are central to many large companies.\n\nGeneral case: run Pipelines a bit more quickly on average, and allow users to get much-stronger performance in worst-case scenarios.\n\nThese changes are implemented across many of the Pipeline plugins.\n\nYes, but what does it DO?\n\nProject Cheetah offers several things, but the most important is Durability Settings for all Pipelines, and especially the Performance-Optimized setting.  This setting avoids several potentially unexpected performance \"surprises\" that may strike users.  In the general case, it greatly reduces the disk IO needs for Pipeline.  How much?  Below is a graph of storage utilization with legacy Pipeline versions (think early 2017) and with the latest version using the Performance-Optimized mode.  These are tested on an AWS instance backed by an EBS volume provisioned with 300 IOPs.\n\nBefore and After:\n\nAs you can see, storage utilization goes down by a lot.  While the exact number will vary, across the benchmark testcases this results in Pipeline throughput of 2x to 6x the previous before becoming IO-bound. This also increases stability of Jenkins controllers because they will tolerate unexpected load.\n\nThis comes with a major drop in CPU IOWait as well:\n\nAnd of course the rate at which data is written to disk and number of writes/s is also reduced:\n\nFor enterprise users, timing stats often show 10-20% of normal builds is serializing the Program and writing the record of steps run (\"FlowNodes\") - the performance optimized durability setting will cut this to almost nothing (for standard pipelines, 1/100 or less) - so builds will complete faster, especially complex ones.\n\nPlease see the Pipeline Scalability documentation for deeper information on the new Durability Settings, how to use them, and which plugin versions are required to gain these features.\n\nAlso, users may see a reduction in hung Pipelines because new test utilities made it possible to identify and correct a variety of bugs.\n\nHow Do I Set Speed/Durability Settings?\n\nThere are 3 ways to configure the durability setting:\n\n1. Globally, you can choose a global default durability setting:\n\nUnder \"Manage Jenkins\" > \"Configure System\", labelled \"Pipeline Speed/Durability Settings\".  You can override these with the more specific settings below.\n\n2. Each Pipeline can get a custom Durability Setting:\n\nThis is one of the job properties located at the top of the job configuration, labelled \"Custom Pipeline Speed/Durability Level.\" This overrides the global setting. Or, use a \"properties\" step - the setting will apply to the NEXT run after the step is executed (same result).\n\n// Script //\nproperties([durabilityHint('PERFORMANCE_OPTIMIZED')])\n// Declarative //\npipeline {\n    agent any\n    stages {\n        stage('Example') {\n            steps {\n                echo 'Hello World'\n            }\n        }\n    }\n    options {\n        durabilityHint('PERFORMANCE_OPTIMIZED')\n    }\n}\n\n3. Multibranch Projects can use a new BranchProperty to customize the Durability Setting.\n\nUnder the SCM you can configure a custom Branch Property Strategy and add a property for Custom Pipeline Speed/Durability Level.  This overrides the global Durability Setting and will apply to each branch at the next run.  You can also use a \"properties\" step to override the setting, but remember that you may have to run the step again to undo this.\n\nDurability settings will take effect with the next applicable Pipeline run, not immediately.  The setting will be displayed in the log.\n\nThere is a slight durability trade-off for using the Performance-Optimized mode — the appropriate section of the Pipeline Scalability documentation has the specifics.\nFor most uses we do not expect this to be important, but there are a few specific cases where users may wish to use a slower/higher-durability setting. The Best Practices are documented.\n\nWe recommend using Performance-Optimized by default, but because it does represent a slight behavioral change the initial \"Cheetah\" plugin releases defaults to maintain previous behavior. We expect to switch this default in the future with appropriate notice once people have a chance to get used to the new settings.\n\nWill Performance-Optimized Mode Help Me?\n\nYes, if your Jenkins instance uses NFS, magnetic storage, runs many Pipelines at once, or shows high iowait (above 5%)\n\nYes, if you are running Pipelines with many steps (more than several hundred).\n\nYes, if your Pipeline stores large files or complex data to variables in the script, keeps that variable in scope for future use, and then runs steps.  This sounds oddly specific but happens more than you’d expect.\n\nFor example: readFile step with a large XML/JSON file, or using configuration information from parsing such a file with One of the Utility Steps.\n\nAnother common pattern is a \"summary\" object containing data from many branches (logs, results, or statistics). Often this is visible because you’ll be adding to it often via an add/append or Map.put() operations.\n\nLarge arrays of data or Maps of configuration information are another common example of this situation.\n\nNo, if your Pipelines spend almost all their time waiting for a few shell/batch steps to finish.  This ISN’T a magic \"go fast\" button for everything!\n\nNo, if Pipelines are writing massive amounts of data to logs (logging is unchanged).\n\nNo, if you are not using Pipelines, or your system is loaded down by other factors.\n\nNo, if you don’t enable higher-performance modes for pipelines.  See above for how!\n\nOther Goodies\n\nUsers can now set an optional job property so that individual Pipelines fail cleanly rather than resuming upon restarting the controller.  This is useful for niche cases where some Pipelines are considered disposable and users would value a clean restart over Pipeline durability.\n\nWe’ve reduced classloading and reflection quite significantly, which improves scaling and reduces CPU use:\n\nScript Security (as of version 1.41) has gotten optimizations to reduce the performance overhead of Sandbox mode and eliminate lock contention so Pipeline multithreads better.\n\nPipeline Step data uses up less space on disk (regardless of the durability setting) - this should be 30% smaller.  Assume it’s a few MB per 1000 steps - but for every build after the change.\n\nEven in the low-performance/high-durability modes, some redundant writes have been removed, which decreases the number of writes by 10-20%.\n\nHow Did You Do It?\n\nThat’s probably material for another blog post or Jenkins World talk.\n\nThe short answer is: first we built a tool to simulate a full production environment and provide detailed metrics collection at scale.  Then we profiled Jenkins to identify bottlenecks and attacked them.  Rinse and repeat.\n\nWhat Next?\n\nThe next big change, which I’m calling Cheetah Part 2 is to address Pipeline’s logging. For every Step run, Pipeline writes one or more small log files. These log files are then copied into the build log content, but are retained to make it possible to easily fetch logs for each step.\n\nThis copying process means every log line is written twice, greatly reducing performance, and writing to many small files is orders of magnitude slower than appending to one big log file.\n\nWe’re going to remove this duplication and data fragmentation and use a more efficient mechanism to find per-step logs. This should further improve the ability to run Pipelines on NFS mounts and hard-drive-backed storage, and should significantly improve performance at scale.\n\nBesides this, there’s a variety of different tactical improvements to improve scaling behavior and reduce resource needs.\n\nThe Project Cheetah work doesn’t free users to completely ignore Pipeline scaling best practices and previous suggestions.  Nor does it eliminate the need for efficient GC settings.  But this and other enhancements from the last year can significantly improve the storage situation for most users and reduce the penalties for worst-case behaviors.  When you add all the pieces together, the result is a faster, leaner, more reliable Pipeline experience.","title":"Project Cheetah - Faster, Leaner Pipeline That Can Keep Up With Demand","tags":["pipeline","performance","scalability"],"authors":[{"avatar":null,"blog":null,"github":"svanoort","html":"","id":"svanoort","irc":null,"linkedin":null,"name":"Sam Van Oort","slug":"/blog/authors/svanoort","twitter":null}]}},{"node":{"date":"2018-02-19T00:00:00.000Z","id":"d1b0a235-d051-5787-9aab-f43b8d0a68ca","slug":"/blog/2018/02/19/gsoc2018-announcement/","strippedHtml":"We are happy to announce that Jenkins project has been accepted to\nGoogle Summer of Code 2018.\nThis year we invite students and mentors to join the Jenkins community and work together\non various initiatives: core, plugins, development tools and infrastructure.\n\nOur mentors have already created some project ideas.\nFor example, you are welcome to work on the new Configuration-as-Code initiative or\nto help creating standard API for Code Coverage plugins.\nIf you like test automation, there is a proposal to\nJenkins Acceptance Test Harness.\nOver the next weeks we plan to extend this list by new even more project ideas.\n\nAll information about the Jenkins GSoC is available on its subproject page.\n\nI am a student. How do I apply?\n\nSee Information for students for application guidelines.\n\nFirst step is to join discussions in the mailing lists in order to introduce yourself, establish connections with the community and potential mentors.\nThe application period starts on March 12 and ends on March 27, but don’t let it misguide you!\nUse time before application to discuss project ideas/proposals with mentors and to process their feedback.\nTo create a better proposal, we also recommend to study Jenkins and to do some contributions in the area of your project proposal.\n\nNot satisfied by the current project ideas?\nYou can propose your own idea\nin the developer mailing list.\n\nI want to be a mentor. Is it too late?\n\nIt’s not!\nIf you are passionate about open-source and Jenkins, we invite you to join the mentors team.\nYou can either propose a new project idea or join an existing one.\nSee Call for Mentors and Information for mentors for details.\n\nThis year mentorship does NOT require strong expertise in Jenkins development.\nThe objective is to guide students and to get involved into the Jenkins community.\nGSoC org admins will help to find advisers if special expertise is required.\n\nImportant dates\n\nMar 05 - deadline for new GSoC project idea proposals\n\nMar 12 - student application period starts\n\nMar 27 - deadline for student applications\n\nApr 23 - accepted projects announced, community bonding starts\n\nMay 14 - coding period starts\n\nAug 06 - end of the coding period\n\nSee the GSoC Timeline for more info.\nIn the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).\n\nP.S: I am going to create a special GSoC 2018 edition of swags for mentors and students. Do not miss them ;)","title":"Jenkins is accepted to Google Summer Of Code 2018, join us!","tags":["gsoc","gsoc2018","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-02-14T00:00:00.000Z","id":"8d50238b-953c-57e4-a3dd-876a612b6d80","slug":"/blog/2018/02/14/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.107 and 2.89.4, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nWhile the severity score works out as medium for all the vulnerabilities, we strongly recommend that anyone operating publicly accessible Jenkins instances update as soon as possible, as their secrets on disk might be at risk by SECURITY-705.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and member of the <a href=\"/security/#team\">Jenkins security team</a>.\nHe was the inaugural Jenkins security officer from 2015 to 2021.\nHe sometimes contributes to developer documentation and project infrastructure in his spare time.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-02-05T00:00:00.000Z","id":"47e0963b-eba2-5a4e-9d92-1ffe57e02833","slug":"/blog/2018/02/05/security-updates/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities.\n\nAndroid Lint\n\nCCM\n\nCredentials Binding\n\nJUnit\n\nPipeline: Supporting APIs\n\nFor an overview of these security fixes, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and member of the <a href=\"/security/#team\">Jenkins security team</a>.\nHe was the inaugural Jenkins security officer from 2015 to 2021.\nHe sometimes contributes to developer documentation and project infrastructure in his spare time.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-01-26T00:00:00.000Z","id":"722f0200-64bd-58bf-8505-41094f0be2dd","slug":"/blog/2018/01/26/fosdem-hackaton/","strippedHtml":"On the first weekend in February, numerous free and open source developers from around the\nworld will travel to Brussels, Belgium, for arguably the largest event of its kind:\nFOSDEM.\nAmong the thousands of hackers in attendance will be a number of Jenkins contributors.\n\nOn the Monday after FOSDEM,\nyou are invited to join a group of those contributors for a full day of hacking on Jenkins.\nFolks of all experience levels are welcome;\nthere will be sessions for everyone from seasoned hackers to new contributors.\n\nAll-day Jenkins Hackfest\n\nThe Hackfest will start at 9:30am on Monday with general introductions and gathering of potential topics/projects.\nBring suggestions for topics that interest you, or just come and choose from the topics others suggest.\nThere will be plenty of topics from which to choose.\nAll the topic suggestions will all be added to a backlog and we will identify and cluster around popular topics.\nThen we’ll divide into smaller groups and work on individual topics in timeboxed sessions.\n\nMeals, snacks, and beverages will be provided throughout the day, wrapping up with dinner around 5pm.\n\nSomething for everyone\n\nHackfests like this one are a great opportunity for contributors of all levels to get invovled, learn from each other, and\nwork together on interesting and high impact areas of the project.\n\nSome long-time contributors already know what areas they’ll work on and are looking for people interested in joining them.\nMark Waite (maintainer of the Jenkins Git and Git Client plugins) and Christian Halstrick (SAP) will be spending the day improving the way Git client plugin uses JGit.\nR. Tyler Croy (Jenkins community concierge) and Olivier Vernin (Jenkins infrastructure engineer) will work on infrastructure improvements.\n\nOthers contributors, such as Jesse Glick and Andrew Bayer\n(recipients of the  \" A Small Matter of Programming\" award), will arrive without a set plan.\nThey will, of course, have some topics to propose, so you might get a chance to work with them.\nOr if you have an area you’d like to work on, they and many other experts will be on hand for discussion and code review.\n\nThis is also a great opportunity for new contributors to join the project.\nBaptiste Mathus, long time contributor and all-around nice guy, will host a \"New Contributor Hackergarten\" covering the basics of contributing to Jenkins and submitting fixes via GitHub Pull requests.\nEven those with minimal coding experience can contribute by improving documentation and making typo fixes via this same process.\n\nFun!\n\nMore than anything else, Hackfests like this are great fun.\nNo matter what your level of exerience, there will be plenty to do and great people with whom to do it.\nReserve a space by\njoining the meetup here.\nThen bring your own laptop and passion for improving Jenkins.\n\nDetails\n\nDate : Monday, February 5, 2018\n\nTime : 9:30 AM to 5:00 PM\n\nLocation : BeCentral sprl/bvba\nCantersteen 12\n1000 Brussel\nBelgium\nRoom: Studio C (1st floor)\n\nRSVP Required\n\nMeals, snacks, and beverages will be provided.\nBring your own computer.\n\nAsk for \"Jenkins\" at the front desk if you get lost.","title":"You are invited to the Post-FOSDEM 2018 Jenkins Hackfest","tags":["fosdem","event"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2018-01-21T00:00:00.000Z","id":"4b83704c-93fe-50dd-86b2-f971dac01a43","slug":"/blog/2018/01/21/overhaul-of-manage-jenkins-page/","strippedHtml":"Overview\n\nRecently some UI improvements around the Manage Jenkins page have been introduced. The visual changes are very subtle but behind them, there are interesting benefits.\n\nSome of the goals that we have tried to achieve:\n\nApplying a semantic HTML\n\nRemoving the tag usage for implementing layouts and content structures. Read this article if you want to know reasons and/or arguments.\n\nSmall re-styling focused on spacing, margins, composition, etc..\n\nAccessibility\n\nIn order to provide a quick overview of the visual changes, let’s take a look at these screenshots.\n\nSystem tray with administrative messages (before)\n\nSystem tray with administrative messages (after)\n\nManage Jenkins page (before)\n\nManage Jenkins page (after)\n\nInformation about how this change can affect the current implementations of Administrative Monitors can be found in the following section\n\nFor core developers\n\nLet’s use a real example for showing how this proposal works.\n\nThis is the original UI implementation of HudsonHomeDiskUsageMonitor.java :\n\n${%blurb(app.rootDir)}\n\nAnd this is the proposed change:\n\n${%blurb(app.rootDir)}\n\nSome highlights:\n\nNo more ad hoc UI compositions\n\nNo more custom CSS classes when Jenkins project is already using Bootstrap for many different things\n\nBased on Bootstrap Alert\n\nAll administrative monitors defined in Jenkins core have been adapted as part of this proposal.\n\nFor plugin developers\n\nNo changes are really needed, but we do recommend you to adapt your plugins to this proposal so Jenkins users have a better user experience.\n\nTaking into account that you want to keep backward compatibility, you will need some changes.\n\nIn your implementation of Administrative Monitor, add this helper method:\n\n/**\n * This method can be removed when the baseline is updated to 2.103\n *\n * @return If this version of the plugin is running on a Jenkins version where JENKINS-43786 is included.\n */\n @Restricted(DoNotUse.class)\n public boolean isTheNewDesignAvailable() {\n    if (Jenkins.getVersion().isNewerThan(new VersionNumber(\"2.103\"))) {\n        return true;\n    }\n    return false;\n}\n\nIn your view (a.k.a. Jelly file or Groovy file):\n\nSSH Host Key Verifiers are not configured for all SSH agents on this Jenkins instance. This could leave these agents open to man-in-the-middle attacks. Update your agent configuration to resolve this.\n\nSSH Host Key Verifiers are not configured for all SSH agents on this Jenkins instance. This could leave these agents open to man-in-the-middle attacks. Update your agent configuration to resolve this.\n\nIf you don’t want to keep a strict backward compatibility, the impact is minimal. In fact, you can see an example on GitHub Plugin.\n\nSome helpful references:\n\nJIRA issue where the proposal was tracked\n\nPull Request with the change in Jenkins core. You can find several screenshots\n\nPull Request for adapting SSH Agent Plugin\n\nDo not hesitate to ping me if you decide to adapt your Administrative Monitors.","title":"Overhaul of Manage Jenkins page","tags":["jenkins","ui","restyling","upgrade"],"authors":[{"avatar":null,"blog":null,"github":"recena","html":"","id":"recena","irc":null,"linkedin":null,"name":"Manuel Recena","slug":"/blog/authors/recena","twitter":null}]}},{"node":{"date":"2018-01-17T00:00:00.000Z","id":"b1792073-44e9-5774-86e8-6786aeba1b03","slug":"/blog/2018/01/17/jenkins-world-cfp-open/","strippedHtml":"Happy 2018! The Jenkins World train is ready to take off once again. As usual, the sign of festivities looming begins with the Call for Papers.  Those who attended Jenkins World 2017 know that Jenkins World 2018 is coming back to San Francisco. But what they did not know is that Jenkins World will also be coming to Europe. You read that right, Jenkins World is taking place in two locations in 2018:\n\nJenkins World USA | San Francisco | September 16 - 19, 2018\n\nJenkins World Europe | October - date and location TBA\n\nTo encourage open collaboration and stimulate discussions that will help advance Jenkins adoption and drive it forward, we invite Jenkins users, developers and industry experts to submit a speaking proposal to Jenkins World San Francisco and or Europe.  Submissions for both locations are being accepted now and will close on March 18, 2018 @ 11:59PM Pacific.\n\nWhere do I go to submit my proposal?\n\nSubmissions for both Jenkins World USA and Europe are accepted at:\n\nJenkins World USA\n\nJenkins World Europe\n\nCan I make proposal(s) to both conferences?\n\nYes, you can! Once you’ve created an account on the CFP website you will be given the option to make submission(s) to one conference or both conferences.\n\nWhen is the deadline Jenkins World USA?\n\nSunday March 18, 2018 @ 11:59PM Pacific\n\nWhen is the deadline for Jenkins World Europe?\n\nSunday March 18, 2018 @ 11:59PM Pacific\n\nImportant Dates:\n\nCFP Opens: January 17, 2018\n\nCFP Closes: March 18, 2018 @ 11:59pm Pacific\n\nCFP Notifications: April\n\nAgenda Announcement: April\n\nEvent Dates:\n\nJenkins World USA | San Francisco | September 16 - 19, 2018\n\nJenkins World Europe | October - exact date TBA","title":"Jenkins World 2018: Call for Papers is Open","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2018-01-13T00:00:00.000Z","id":"b30f609a-7e4a-56ef-93e3-f8629da662cd","slug":"/blog/2018/01/13/jep-200/","strippedHtml":"There is a newer version of the announcement for Jenkins administrators.\nPlease see this blogpost.\n\nOverview\n\nJEP-200 has been integrated into Jenkins weekly builds\nand (if all goes well) will be a part of the next LTS line.\nIn a nutshell, this change is a security hardening measure\nto be less permissive about deserializing Java classes defined in the Java Platform or libraries bundled with Jenkins.\nFor several years now, Jenkins has specifically blacklisted certain classes and packages according to known or suspected exploits;\nnow it will reject all classes not explicitly mentioned in a whitelist, or defined in Jenkins core or plugins.\n\nFor Jenkins administrators\n\nBefore upgrade\n\nBack up your Jenkins instance prior to upgrade so you have any easy way of rolling back.\nIf you are running any of the plugins listed in\nPlugins affected by fix for JEP-200,\nupdate them after taking the backup but before upgrading Jenkins core.\n\nIf you have a way of testing the upgrade in an isolated environment before applying it to production,\ndo so now.\n\nUsing backups and a staging server is good advice before any upgrade but especially this one,\nwith a relatively high risk of regression.\n\nAfter upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nIf you do encounter a java.lang.SecurityException: Rejected: some.pkg.and.ClassName in the Jenkins UI or logs,\nyou may have found a case where an unusual plugin, or an unusual usage mode of a common plugin,\nviolates the existing whitelist.\nThis will be visible in the Jenkins system log as a message from jenkins.security.ClassFilterImpl like the following:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nwhere the link would direct you here.\n\nIf you find such a case, please report it in the Jenkins issue tracker, under the appropriate plugin component.\nLink it to JENKINS-47736 and add the JEP-200 label.\nIf at all possible, include complete steps to reproduce the problem from scratch.\nJenkins developers will strive to evaluate the reason for the violation and offer a fix in the form of a core and/or plugin update.\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nSimply make note of any class name(s) mentioned in such log messages,\nand run Jenkins with this startup option (details will depend on your installation method):\n\n-Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName\n\nFor plugin developers\n\nTesting plugins against Jenkins 2.102 and above\n\nAs a plugin developer encountering this kind of error,\nyour first task is to ensure that it is reproducible in a functional ( JenkinsRule) test\nwhen running Jenkins 2.102 or newer to reproduce the error.\n\nmvn test -Djenkins.version=2.102 -Denforcer.skip=true\n\nThe above assumes you are using a recent 2.x or 3.x parent Plugin POM.\nFor certain cases you may need to use Plugin Compat Tester (PCT)\nto run tests against Jenkins core versions newer than your baseline.\n\nRunning PCT against the latest Jenkins core:\n\njava -jar pct-cli.jar -reportFile $(pwd)/out/pct-report.xml \\\n    -workDirectory $(pwd)/work -skipTestCache true -mvn $(which mvn) \\\n    -includePlugins ${ARTIFACT_ID} -localCheckoutDir ${YOUR_PLUGIN_REPO}\n\nYou may need to run tests using an agent or force saves of plugin settings.\n\nFor maven plugins you can also specify custom Jenkins versions in Jenkinsfile to run tests against JEP-200:\n\nbuildPlugin(jenkinsVersions: [null, '2.102'])\n\n(again picking whatever version you need to test against)\nso that the test is included during CI builds, even while your minimum core baseline predates JEP-200.\n\nIf your plugins are built with Gradle, your mileage may vary.\n\nMaking plugins compatible with Jenkins 2.102 or above\n\nIf you discover a compatibility issue in your plugin,\nyou then have several choices for fixing the problem:\n\nIdeally, simplify your code so that the mentioned class is not deserialized via Jenkins Remoting or XStream to begin with:\n\nIf the problem occurred when receiving a response from an agent, change your Callable (or FileCallable) to return a plainer type.\n\nIf the problem occurred when saving an XML file (such as a config.xml or build.xml), use a plainer type in non- transient fields in your persistable plugin classes.\n\nIf the class(es) are defined in the Java Platform or some library bundled in Jenkins core, propose a pull request adding it to core/src/main/resources/jenkins/security/whitelisted-classes.txt in jenkinsci/jenkins.\n\nIf the class(es) are defined in a third-party library bundled in your plugin, create a resource file META-INF/hudson.remoting.ClassFilter listing them. ( example)\n\nYou may also do this for Java or Jenkins core library classes, as a hotfix until your core baseline includes the whitelist entry proposed above.\n\nIf the class(es) are defined in a JAR you build and then bundle in your plugin’s *.jpi, add a Jenkins-ClassFilter-Whitelisted: true manifest entry. This whitelists every class in the JAR. ( example)","title":"JEP-200: Remoting / XStream whitelist integrated into Jenkins core","tags":["core","security","remoting","upgrade"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick","twitter":"tyvole"}]}}]}},"pageContext":{"limit":8,"skip":256,"numPages":101,"currentPage":33}},
    "staticQueryHashes": ["3649515864"]}