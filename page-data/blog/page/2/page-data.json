{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-08-19T00:00:00.000Z","id":"3ba26599-8e1c-5bd0-9892-7a79594d049c","slug":"/blog/2021/08/19/git-credentials-binding-work-report/","strippedHtml":"Abstract\n\nThis project implemented two new credential bindings to perform authenticated operations using command line git in Jenkins pipeline and freestyle jobs.\n\nThe two credential bindings are gitSshPrivateKey and gitUsernamePassword.\n\nImplementation\n\nType\n\nFeature\n\nLocation\n\nThe gitUsernamePassword binding is implemented in Jenkins git plugin v4.8.0.\nThe gitSshPrivateKey binding is implemented in a pull request to the Jenkins git plugin\n\nDependencies\n\nCredentials Binding Plugin -\nIt is used to bind Git specific environment variables with shell scripts/commands which perform git authentication on behalf of the user, without their interaction with the command-line.\n\nBouncy Castle API Plugin -\nProvides an API to do common tasks like PEM/PKCS#8 Encoding/Decoding and ensuring its stability among Bouncy Castle API versions.\n\nSSH Server Plugin -\nProvides an API to perform tasks like OpenSSH private key encoding and decoding.\n\nPhase 1: Git Username Password Binding (gitUsernamePassword)\n\nDeliverables\n\nSupport git authentication over the HTTP protocol\n\nUse the GIT_ASKPASS environment variable to provide user credentials to command line git\n\nSupport different\n\nOS environments : CentOS 7, CentOS 8, Debian 9, Debian 10, FreeBSD 12, OpenBSD 6.9, openSUSE 15.2, Ubuntu 18.04, Ubuntu 20.04, Ubuntu 21.04, and Windows 10.\n\nProcessors : amd64, arm32, arm64, and s390x.\n\nAuthentication support for command line git only, not JGit or JGit Apache.\n\nCheck for specific git versions\n\nSetting git specific environment variables based on OS type\n\nAutomated test coverage more than 90%\n\nResources\n\nPull Requests\n\nAdd Git Credentials binding for Username and Password\n\nCheck the least command line git version required\n\nGit username password binding doc update in git-plugin\n\ngitUsernamePassword binding explanation\n\nWebinar slides\n\nGit username password binding released blog post\n\nPhase 1 demo and presentation:\n\nPhase 2: Git SSH Private Key Binding (gitSshPrivateKey)\n\nDeliverables\n\nTo support git authentication over the SSH protocol\n\nSupports:\n\nPrivate Key Formats\n\nOpenSSH\n\nPEM\n\nPKCS#8\n\nEncryption algorithms\n\nRSA\n\nDSA\n\nECDSA\n\nED25519\n\nOS environments : CentOS 7, CentOS 8, Debian 9, Debian 10, FreeBSD 12, OpenBSD 6.9, openSUSE 15.3, Ubuntu 18.04, Ubuntu 20.04, Ubuntu 21.04, and Windows 10.\n\nProcessors : amd64, arm32, arm64, and s390x.\n\nAuthentication support for command line git only, not JGit or JGit Apache.\n\nUse git specific environment variables depending upon the minimum git version\n\nGIT_SSH_COMMAND - If the version is greater than 2.3, provides ssh command including the necessary options.\n\nSSH_ASKPASS - If the version is less than 2.3, an executable script is attached to the variable.\n\nSetting variables based on the OS type\n\nResources\n\nPull Requests\n\nAdd Git Credentials binding for SSH Private Key\n\nLast GSOC-2021 noted commit\n\nScope change of getSSHExecutable method\n\ngitSshPrivateKey binding explanation\n\nWebinar Slides\n\nFinal phase demo and presentation\n\nAchievements\n\nThe git credential bindings which are available through the git plugin automate the git authentication process for a user effortlessly\n\nThe gitUsernamePassword and gitSshPrivateKey binding provides git authentication support for Pipeline and Freestyle Project users in various OS environments on different processors\n\nThe gitUsernamePassword binding has been released and is readily available from git plugin v4.8.0 and above\n\nThe gitSshPrivateKey binding provides support for OpenSSH format which is default for OpenSSH v7.8 and above\n\nFuture Work\n\nSSH private key binding pull request merge and release\n\nUnexpected complications from Jenkins class loader required extra effort and investigation, including an experiment shading a dependency into the git plugin\nWe intentionally chose to avoid the complication and risk of shading the dependency\nIf the SSH library use requires shading, then we may need to use maven modules in the git plugin","title":"Git Credentials Binding for sh, bat, powershell","tags":["git","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"arpoch","html":"<div class=\"paragraph\">\n<p>Harshit Chopra is an open source enthusiast from India.</p>\n</div>","id":"arpoch","irc":null,"linkedin":"harshit-chopra-275269178","name":"Harshit Chopra","slug":"blog/author/arpoch","twitter":"Harshit14413301"}]}},{"node":{"date":"2021-08-17T00:00:00.000Z","id":"d629c3ce-afaa-5437-9120-457244788553","slug":"/blog/2021/08/17/docker-images-use-jdk-11-by-default/","strippedHtml":"The Jenkins project provides Docker images for controllers, inbound agents, outbound agents, and more.\nBeginning with Jenkins 2.307 released August 17, 2021 and Jenkins 2.303.1 released August 25, 2021, the Docker images provided by the Jenkins project will use Java 11 instead of Java 8.\n\nControllers use Java 11 by default\n\nIf you are running one of the Jenkins Docker controller images that does not include a JDK version in its label, the Java runtime will switch from Java 8 to Java 11 with the upgrade.\n\nFor example:\n\nJenkins 2.306 running as jenkins/jenkins:latest uses Java 8.\nWhen Jenkins 2.307 or later is run with jenkins/jenkins:latest, it will use Java 11\n\nJenkins 2.289.3 running as jenkins/jenkins:lts uses Java 8.\nWhen Jenkins 2.303.1 or later is run with jenkins/jenkins:lts, it will use Java 11\n\nThe Docker image tags affected by this upgrade include:\n\nalpine\n\ncentos7\n\nlatest\n\nlts\n\nslim\n\nUsers that need to remain with Java 8 may use a different Docker image tag to run with Java 8.\n\nJenkins 2.306 running as jenkins/jenkins:latest uses Java 8.\nWhen Jenkins 2.307 or later is run with jenkins/jenkins:latest-jdk8, it will use Java 8\n\nJenkins 2.289.3 running as jenkins/jenkins:lts uses Java 8.\nWhen Jenkins 2.303.1 or later is run with jenkins/jenkins:lts-jdk8, it will use Java 8\n\nAgents use Java 11 by default\n\nDuring the next 1-2 weeks (Aug 17, 2021 - Aug 31, 2021), the Jenkins agent images will be updated to use Java 11 instead of Java 8.\n\nFor example:\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.9-1 uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.10-1 it will use Java 11.\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:latest uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:latest after the agent change, it will use Java 11.\n\nUsers that need to remain with Java 8 may use a different Docker image tag to run with Java 8.\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.9-1 uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.10-1-jdk8 it will also use Java 8.\n\nDocker tag updates stopped\n\nThe Jenkins project will no longer update the Docker images that are based on CentOS 8.\nThe CentOS project has changed direction to track just ahead of a Red Hat Enterprise Linux release rather than tracking after a release.\nThey are no longer publishing updates for CentOS 8 Docker images.\n\nUsers running Jenkins 2.306 or earlier with the jenkins/jenkins:centos tag will need to switch to use a different tag.\nThey may consider using:\n\njenkins/jenkins:almalinux\n\njenkins/jenkins:rhel-ubi8-jdk11\n\nUsers running Jenkins 2.289.3 or earlier with the jenkins/jenkins:centos tag will need to switch to use a different tag\n\nThey may consider using:\n\njenkins/jenkins:lts-almalinux\n\njenkins/jenkins:lts-rhel-ubi8-jdk11\n\nWindow 1809 Docker images stopped\n\nThe Windows Docker images have published versions based on both the 1809 feature release and the Windows Server long term support channel (\"LTSC\").\nWindows support for the 1809 images will no longer be published because Microsoft has ended mainstream support for the 1809 images.\nUsers should switch to use the Jenkins images based on the \"LTSC\" channel.","title":"Docker images use Java 11 by default","tags":["java","platform","docker"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"blog/author/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":null},"blog":null,"github":"dheerajodha","html":"<div class=\"paragraph\">\n<p>Dheeraj is a Computer Science Engineering student (senior) at Vivekanand Institute of Technology, University of Mumbai. He started his journey of contributing to Jenkins in March 2021. His tiny contributions revolve around the <a href=\"https://github.com/jenkinsci/custom-distribution-service\">Custom Distribution Service for Jenkins Project</a>. He also likes to contribute to the JCasC project and documentation to help the developers.</p>\n</div>","id":"dheerajodha","irc":null,"linkedin":"dheeraj-singh-jodha","name":"Dheeraj Singh Jodha","slug":"blog/author/dheerajodha","twitter":null}]}},{"node":{"date":"2021-08-02T00:00:00.000Z","id":"4b818957-350e-52f3-a687-d86ebc43405d","slug":"/blog/2021/08/02/cloudevents-plugin-phase-I/","strippedHtml":"The What, Why and How of Interoperability\n\nWith workloads and teams becoming more diverse and complex, there is an increasing need to automate various tasks in the CI/CD ecosystem of an application as a way to decrease complexity that can come with CI/CD.\n\nA more diverse team working across different aspects of the application requires a diverse suite of CI/CD tools too, to test and deliver to a wide range of users. More often than not, we need these tools to work together and exchange data to form an effective CI/CD pipeline. However, chaining multiple services together can very easily increase complexity.\n\nHow? Each of these services use a different \"language\" to communicate and represent the entity(an event) which occured inside that service. In order for another service to understand this \"language\", the service might need to develop customized clients and agents which specialize in understanding, traversing and taking-actions based on what was transmitted to it by the first service.\n\nOne can think of it as a translator who specializes in a language called ABC, and each service who wants to communicate with the service who uses ABC will have to employ this translator, or perhaps get another trained translator. And there is no guarantee that this translator will also help communicate with other services speaking a completely different language.\n\nWe can see how easily that can grow in cost and maintenance. A preferred way is to have a common language each of these services use and understand as a way to communicate amongst each other. This way, an event which is emitted using this common language will be available to any of the interested receiver without that receiver needing a special agent. This way of communication which uses a common/standard language also creates a way for agnostic communication where the sender or the receiver are sending and receiving data without creating a tight coupling between the two.\n\nCloudEvents specification is enabling that loosely-coupled, event-driven communication between services by enforcing a common language which defines how an event should be emitted and transferred between systems.\n\nCloudEvents and Jenkins\n\nA specification for describing event data in a common way\n\nConsistency\n\nConsistent across tools and services.\n\nAccessibility\n\nCommon event format means common libraries, tooling, and infrastructure for delivering event data across environments can be used to develop with CloudEvents.\n\nPortability\n\nEasily port event-data across tools, truly leveraging event-driven architecture.\n\nThe CloudEvents plugin for Jenkins is developed as an effort to make interoperability between Jenkins and CI/CD tools much easier. The CloudEvents plugin for Jenkins is a GSoC project, and with the help from an amazing team of mentors, this project is aimed at enhancing event-driven interoperability between cloud-native CI/CD tools, making it easier for developers to include Jenkins in their CI/CD pipelines.\n\nWith this plugin, Jenkins can send and receive CloudEvents-compliant events to and from a wide variety of CI/CD tools using CloudEvents as their event format. This plugin makes chaining Jenkins with multiple tools like Tekton, Keptn, Knative and more, very easy.\n\nGSoC Phase 1 - CloudEvents Plugin\n\nUsing CloudEvents plugin for Jenkins\n\nThis plugin allows Jenkins to be configured as a source and sink, which can emit and consume CloudEvents from a range of tools simultaneously.\n\nJenkins as a Source\n\nConfiguring Jenkins as a Source enables Jenkins to send CloudEvents to a CloudEvents sink. For Phase-I of this project, there is support for HTTP Sinks, however CloudEvents supports various protocol bindings. Moving forward, there will also be support for other protocol bindings supported by CloudEvents.\n\nTo use Jenkins as a Source, the following configuration is needed:\n\nClick on Manage Jenkins in the Root-Actions menu on the left.\n\nInside the Manage Jenkins UI, search for Configure System under System Configuration.\n\nIn the Configure System UI, scroll down to the CloudEvents plugin section, and this is where all the plugin configuration will be present. Here, you will have to enter the following information:\n\nSink Type (For now, HTTP Protocol Binding for CloudEvent and HTTP Sink is supported.)\n\nSink URL (URL of the Sink where you want the cloudevents sent.)\n\nEvents you want sent to the CloudEvents sink URL.\n\nStep 1: Manage Jenkins\n\nStep 2: Configure System\n\nStep 3: Configure CloudEvents Sink\n\nWith Jenkins as a Source configured, Jenkins will send a POST request to the configured sink right as the selected event occurs inside Jenkins. Each event has a different payload specific to the type of the event emitted.\n\nEvent Types, Payload and Metadata\n\nCloudEvents emitted by Jenkins follow the Binary-structure supported by CloudEvents, where the CloudEvents metadata is present inside the header, and the event-data is serialized as JSON, and present under request-body. This is the HTTP Protocol Binding for CloudEvents. Each protocol binding for CloudEvents follows a definition specific to the binding protocol.\n\nFor now, the following Jenkins events are supported in the CloudEvents Plugin-Jenkins as a Source:\n\nQueue Events\n\nQueue Entered Waiting\n\nQueue Left\n\nBuild Events\n\nJob Started\n\nJob Completed\n\nJob Finalized\n\nJob Failed\n\nJob Events\n\nJob Created\n\nJob Updated\n\nNode Events\n\nNode Online\n\nNode Offline\n\nFollowing is a table of the queue-entered waiting cloudevents metadata:\n\nEvent Metadata Headers Key\nEvent Metadata Headers Value\n\nce-specversion\n1.0\n\nce-type\norg.jenkinsci.queue.entered_waiting\n\nce-source\njob/test\n\nce-id\n123-456-789\n\nAll of these fields will be present inside the HTTP-request headers since the CloudEvents format used here is the Binary structure.\n\nHere’s also an example of event payload for the queue-entered event:\n\n{\n  \"ciUrl\": \"http://3.101.116.80/\",\n  \"displayName\": \"test2\",\n  \"entryTime\": 1626611053609,\n  \"exitTime\": null,\n  \"startedBy\": \"shruti chaturvedi\",\n  \"jenkinsQueueId\": 25,\n  \"status\": \"ENTERED_WAITING\",\n  \"duration\": 0,\n  \"queueCauses\": [\n    {\n    \"reasonForWaiting\": \"In the quiet period. Expires in 0 ms\",\n    \"type\": \"entered_waiting\"\n    }\n  ]\n}\n\nTry the Plugin\n\nThe plugin will soon be releasing as the CloudEvents Plugin under https://plugins.jenkins.io/!!\n\nHere’s the GitHub Repo of the Plugin: CloudEvents Plugin GitHub Repo\n\nDemo\n\nHere is a video of the CloudEvents plugin with SockEye demoed at CDF GSoC Midterm Demos. SockEye is an open-source tool which is designed as a way to visulaize cloudevents which are sent from a sink. In this demo, we will take a look at how Jenkins installed in a multi-node K8s environment work with the CloudEvents plugin as a Source, sending events over HTTP to the SockEye sink.\n\nNext Steps\n\nJenkins as a Sink to allow Jenkins to trigger various actions as cloudevents are received from other tools.\n\nEnabling filtering on CloudEvents metadata to only act upon a certain kind of events recieved.\n\nSupport for other protocol bindings in CloudEvents.\n\nFeedback\n\nWe would absolutely love to hear your suggestions and feedback. This will help us understand the various use-cases for the plugin, and iterate to support a variety of bindings and formats.\n\nFeel free to log an issue at the CloudEvents Plugin GitHub repository. We are on CDF slack under gsoc-2021-jenkins-cloudevents-plugin. You can also start a discussion on community.jenkins.io. I also love emails! Drop me one on: shrutichaturvedi16.sc@gmail.com","title":"CloudEvents Plugin for Jenkins: Interoperability between Jenkins and other CI/CD Tools","tags":["gsoc","gsoc2021","cloudevents","interoperability","cloud-native"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"ShrutiC-git","html":"<div class=\"paragraph\">\n<p>Shruti Chaturvedi is the <strong>Founding Engineer</strong> for Klara, a startup to revolutionalize the shopping experience for beauty products.\nShe is an <strong>Oracle Certified Cloud Practitioner</strong>, and is developing solutions on Cloud where CI/CD is her primary focus. She has worked with Jenkins as a User, and is very excited to contribute to Jenkins and be a part of the community.</p>\n</div>","id":"ShrutiC-git","irc":null,"linkedin":null,"name":"Shruti Chaturvedi","slug":"blog/author/shrutic-git","twitter":"shruti_tech"}]}},{"node":{"date":"2021-07-31T00:00:00.000Z","id":"eb573050-2c0c-527f-ab2c-3da89d375c1d","slug":"/blog/2021/07/31/remoting-monitoring-phase-1/","strippedHtml":"Goal\n\nThe goal of this project:\n\ncollect telemetry data(metrics, traces, logs) of remoting module with\nOpenTelemetry.\n\nsend the telemetry data to OpenTelemetry Protocol endpoint\n\nWhich OpenTelemetry endpoint to use and how to visualize the data are up to\nusers.\n\nOpenTelemetry\n\nAn observability framework for cloud-native software\n\nOpenTelemetry is a collection of tools, APIs, and SDKs.\nYou can use it to instrument, generate, collect, and export telemetry\ndata(metrics, logs, and traces) for analysis in order to understand your\nsoftware’s performance and behavior.\n\nPhase 1 summary\n\nUser survey\n\nOur team conducted a user survey to understand the pain point regarding Jenkins\nremoting.\n\nFig 1. What agent type/plugins do you use?\n\nFig 1 shows what types of agent users use, and 17 unique respondents out of\n28 use docker for agent. So I’m planning to publish a docker image to\ndemonstrate how we can build Docker image with our monitoring feature.\n\nThis survey and investigation of JIRA tickets of past two years also tell me five\ncommon causes of agent unavailability.\n\nConfiguration mistakes\n\nJenkins agent settings, e.g. misuse of \"tunnel connection through\" option.\n\nPlatform settings, e.g. invalid port setting of Kubernetes' helm template.\n\nNetwork settings, e.g. Load balancer misconfiguration.\n\nUncontrolled shutdown of nodes for downscaling.\n\nTimeout during provisioning a new node.\n\nFirewall, antivirus software or other network component kill the connection\n\nLack of hardware resources, e.g. memory, temp space, etc…​\n\nWe also heard valuable user voice in the survey.\n\nWhat areas would you like to see better in Jenkins monitoring?\n\nI have created a bunch of adhoc monitoring jobs to check on the agent’s health\nand send e-mail. Would be nice to have this consolidated.\n\nHaving archive of nodes with the access to their logs/events would have been\nnice.\n\nI hope that implementing these feature with OpenTelemetry, which is expected to\nbecome the industry standard for observability, will bring great monitoring\nexperience to Jenkins community.\n\nProof of Concept\n\nHow to deliver the monitoring program to agents\n\n1. Sending monitoring program to the agent over remoting\n\nIn my first implementation, I prepared a Jenkins plugin and send the\nmonitoring program from Jenkins controller. However, this approach have\nfollowing disadvantages.\n\nWe cannot collect telemetry data before the initial connection.\nWe are likely to encounter a problem while provisioning a new node,\nso it’s important to observe agents' telemetry data from the beginning.\n\nSome agent restarters (e.g. UnixSlaveRestarter)\nrestart agent completely when reconnecting. It means that the agent lost\nmonitoring program every time the connection closed, and we cannot collect\ntelemetry data after the connection is lost before a new connection is\nestablished.\n\nSo we decided to take the next approach.\n\n2. Install monitoring engine when provisioning a new agent\n\nIn this approach, user will download the monitoring program called monitoring\nengine, which is a JAR file, and place it in the agent node when provisioning.\n\nHow to instrument remoting to produce remoting trace\n\nAdd instrumentation extension point to remoting\n\nPull Request: https://github.com/jenkinsci/remoting/pull/471\n\nThis approach makes the agent launch command more complicated,\nand we have to overcome this problem.\n\nCurrent State\n\nMetrics\n\nWe currently support the following metrics and planning to support more.\n\nmetrics\nunit\nlabel\nkey\ndescription\n\nsystem.cpu.load\n1\n\nSystem CPU load. See com.sun.management.OperatingSystemMXBean.getSystemCpuLoad\n\nsystem.cpu.load.average.1m\n\nSystem CPU load average 1 minute See java.lang.management.OperatingSystemMXBean.getSystemLoadAverage\n\nsystem.memory.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize\n\nsystem.memory.utilization\n1\n\nSystem memory utilization,\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize.\nReport 0% if no physical memory is discovered by the JVM.\n\nsystem.paging.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\n\nsystem.paging.utilization\n1\n\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\nReport 0% if no swap memory is discovered by the JVM.\n\nprocess.cpu.load\n%\n\nProcess CPU load. See com.sun.management.OperatingSystemMXBean.getProcessCpuLoad.\n\nprocess.cpu.time\nns\n\nProcess CPU time. See com.sun.management.OperatingSystemMXBean.getProcessCpuTime.\n\nruntime.jvm.memory.area\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\narea\nheap, non_heap\n\nruntime.jvm.memory.pool\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\npool\nPS Eden Space, G1 Old Gen…​\n\nruntime.jvm.gc.time\nms\ngc\nG1 Young Generation, G1 Old Generation, …​\nsee GarbageCollectorMXBean\n\nruntime.jvm.gc.count\n1\ngc\nG1 Young Generation, G1 Old Generation, …​\nsee GarbageCollectorMXBean\n\nTraces\n\nWe tried several approaches to instrument remoting module, but good approach is not established yet.\n\nHere is a draft documentation of the spans to collect. Google Doc\n\nLogs\n\nComing soon!\n\nMetric and span demo visualization\n\nOur team created a demo example with Docker compose and visualized the metrics and spans.\n\nClick to open in new tab\n\nGoogle Summer of Code Midterm Demo\n\nOur project demo starts with 8:20\n\nNext Step\n\nLog support\n\nAlpha release!","title":"Remoting Monitoring with OpenTelemetry - Coding Phase 1","tags":["gsoc","gsoc2021","remoting","open-telemetry"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"Aki-7","html":"<div class=\"paragraph\">\n<p>GSoC 2021 student (Jenkins Remoting Monitoring). Akihiro is a student in the Department of information and communication engineering at the University of Tokyo.</p>\n</div>","id":"aki-7","irc":null,"linkedin":null,"name":"Akihiro Kiuchi","slug":"blog/author/aki-7","twitter":null}]}},{"node":{"date":"2021-07-30T00:00:00.000Z","id":"ec28a413-ce25-5776-ac1c-84b03c9452d9","slug":"/blog/2021/07/30/introducing-conventional-commits-plugin-for-jenkins/","strippedHtml":"The conventional commits plugin is a Google Summer of Code project.\nSpecial thanks to the mentors Gareth Evans, Kristin Whetstone, Olivier Vernin and Allan Burdajewicz.\n\nWhat are Conventional Commits\n\nAccording to the official website, conventonal commits are, \"A specification for adding human and machine readable meaning to commit messages.\"\n\nConventional commits are a lightweight convention on top of commit messages.\n\nThe following table shows major structural elements offered by the conventional commits convention.\n\nStructural Element\nExample\n\nChore\nchore: improve logging\n\nFix\nfix: minor bug fix\n\nFeat\nfeat: add a new feature\n\nBreaking Change\nBREAKING CHANGE: reimplement\n\nWhy Conventional Commits\n\nAs the CI/CD world is moving more towards complete automation and minimal human interaction, the ability to fully automate a release is desired.\nConventional Commits enable the use of automated systems on top of commit messages.\nThese systems can \"truly\" automate a release with almost no human interaction.\n\nThe convention dovetails with semantic versioning.\nLet’s take an example, a maven project is currently versioned at 1.2.0.\nThe following table shows how conventional commits would bump the version depending on the type of the commit.\n\nCommit Message\nVersion Bump\nSemVer Equivalent\n\nchore: improve logging\n1.2.0 → 1.2.0\nNo version bump\n\nfix: minor bug fix\n1.2.0 → 1.2.1\nIncrement in the patch version\n\nfeat: add a new feature\n1.2.0 → 1.3.0\nIncrement in the minor version\n\nBREAKING CHANGE: reimplement\n1.2.0 → 2.0.0\nIncrement in the major version\n\nThe Conventional Commits Plugin\n\nThe conventional commits plugin is a Jenkins plugin to programatically determine the next semantic version of a git repository using:\n\nLast tagged version\n\nCommit message log\n\nCurrent version of the project\n\nHow it works?\n\nThe plugin will read the commit messages from the latest tag or the current version of the project till the latest commit.\nUsing this information it will determine what would be the next semantic Version for that particular project.\n\nSupported Project Types?\n\nCurrently the plugin can read the current version from various configuration files of the following project types:\n\nProject Type\nConfiguration File(s) Read\n\nMaven\npom.xml\n\nGradle\nbuild.gradle\n\nMake\nMakefile\n\nPython\nsetup.py\nsetup.cfg\npyproject.toml\n\nHelm\nCharts.yml\n\nNode (NPM)\npackage.json\n\nHow to request a project type support?\n\nPlease feel free to open an issue on the GitHub repository of the plugin.\n\nHow to use the plugin\n\nRecommended way of using the plugin is to add a step in a Jenkins Pipeline Project.\n\nnextVersion() is the pipeline step to be used.\n\nFor example:\n\npipeline {\n    agent any\n\n    environment {\n        NEXT_VERSION = nextVersion()\n    }\n\n    stages {\n        stage('Hello') {\n            steps {\n                echo \"next version = ${NEXT_VERSION}\"\n            }\n        }\n    }\n}\n\nTip: The pipeline step can also be generated with the help of the Snippet Generator.\nPlease select \"nextVersion\" in the Sample Step drop down and then click on \"Generate Pipeline Snippet\"\n\nThe plugin is released on every feature using JEP-229.\n\nThe plugin is available to download from the plugins site.\n\nDemo\n\nYou can watch the plugin in action in a demo presented at the GSoC Midterm Presentations\n\nNext Steps\n\nSupport for pre-release information. Example: 1.0.0-alpha, 1.0.0-beta, etc\n\nSupport for build metadata. Example: 1.0.0-beta+exp.sha.5114f85\n\nOptionally writing the calcuated \"Next Version\" into the project’s configuration file. Example: pom.xml for a maven project, setup.py for python.\n\nFeedback\n\nWe would love to hear your feedback & suggestions for the plugin.\n\nPlease reach out on the plugin’s GitHub repository, the Gitter channel or start a discussion on community.jenkins.io.","title":"Introducing the Conventional Commits Plugin for Jenkins","tags":["gsoc","gsoc2021","conventionalcommits","plugin"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"adi10hero","html":"<div class=\"paragraph\">\n<p>Aditya is a curiosity driven individual striving to find ingenious solutions to real-world problems. He is an open-source enthusiast and a life long learner.</p>\n</div>","id":"adi10hero","irc":null,"linkedin":null,"name":"Aditya Srivastava","slug":"blog/author/adi10hero","twitter":"adi10hero"}]}},{"node":{"date":"2021-07-27T00:00:00.000Z","id":"65407863-9614-55a2-b325-2efe99f2c375","slug":"/blog/2021/07/27/git-credentials-binding-phase-1/","strippedHtml":"Google Summer of Code 2021 is implementing git credentials binding for sh, bat, and powershell .\nGit credentials binding is one of the most requested features for Jenkins Pipeline (see jira:JENKINS-28335[]).\n\nThe project involves extending the Credentials Binding Plugin to create custom bindings for two types of credentials essential to establish a remote connection with a git repository\n\nUsername/Password\n\nSSH Private Key\n\nWhy use git credentials binding?\n\nMany operations in a Jenkins Pipeline or Freestyle job can benefit from authenticated access to git repositories.\nAuthenticated access to a git repository allows a Jenkins job to\n\napply a tag and push the tag\n\nmerge a commit and push the merge\n\nupdate submodules from private repositories\n\nretrieve large files with git LFS\n\nThe git credentials username / password binding included in git plugin 4.8.0 allows Pipeline and Freestyle jobs to use command line git from sh, bat, and powershell for authenticated access to git repositories.\n\nHow to use git credentials binding?\n\nThe binding is accessible using the withCredentials Pipeline step.\nIt requires two parameters:\n\ncredentialsId\n\nReference id provided by creating a Username/Password type credential in the Jenkins configuration. To understand how to configure credentials in a Jenkins environment: Using Credentials\n\ngitToolName\n\nName of the git installation in the machine running the Jenkins instance\n(Check Global Tool Configuration section in Jenkins UI)\n\nNote: In case a user is not aware of the git tool installation of the particular machine, the default git installation will be chosen.\n\nExamples\n\nThe withCredentials wrapper allows declarative and scripted Pipeline jobs to perform authenticated command line git operations with sh , bat , and powershell tasks.\n\nShell example\n\nwithCredentials([gitUsernamePassword(credentialsId: 'my-credentials-id', gitToolName: 'git-tool')]) {\n  sh 'git fetch --all'\n}\n\nBatch example\n\nwithCredentials([gitUsernamePassword(credentialsId: 'my-credentials-id', gitToolName: 'git-tool')]) {\n  bat 'git submodule update --init --recursive'\n}\n\nPowershell example\n\nwithCredentials([gitUsernamePassword(credentialsId: 'my-credentials-id', gitToolName: 'git-tool')]) {\n  powershell 'git push'\n}\n\nThe Pipeline Syntax Snippet Generator is a good way to explore the syntax of the withCredentials step and the git username / password credentials binding.\n\nLimitations\n\nThe git credentials username / password binding has been tested on command line git versions 1.8.3 through 2.32.0.\nIt has been tested on CentOS 7, CentOS 8, Debian 9, Debian 10, FreeBSD 12, OpenBSD 6.9, openSUSE 15.2, Ubuntu 18.04, Ubuntu 20.04, Ubuntu 21.04, and Windows 10.\nProcessor testing has included amd64, arm32, arm64, and s390x.\n\nThe binding does not support private key credentials.\nThe binding is not supported on command line git versions prior to 1.8.3.\n\nWhat’s next?\n\nPrivate key credentials support is coming soon.","title":"Git username / password credentials binding","tags":["git"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"blog/author/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":null},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"blog/author/rishabhbudhouliya","twitter":null}]}},{"node":{"date":"2021-07-16T00:00:00.000Z","id":"79c95b8e-55ea-534e-81a0-7d12215795cd","slug":"/blog/2021/07/16/gsoc-midterm-presentation/","strippedHtml":"Congratulations to all GSoC students who have made it through the first half of the GSoC 2021 coding phase!\n\nThis year, the Jenkins project has been participating in GSoC as part of the Continuous Delivery Foundation’s GSoC org.\nTo celebrate our GSoC students and the fantastic work they have been doing, the CDF is hosting an online meetup where students will present their work.\nStudents will be showcasing what they have learned and accomplished thus far in GSoC, demoing their work, and discussing their goals and plans for the second coding phase.\n\nThe CDF Google Summer of Code Midterm Demos will be held online on July 20th, 13:00 UTC - 15:00 UTC.\n\nSign up here: Meetup Event\n\nSpeakers\n\nAkihiro Kiuchi - Jenkins Remoting Monitoring\n\nAkihiro is a student in the Department of information and communication engineering at the University of Tokyo.\nHe is improving the monitoring experience of Jenkins Remoting during Google Summer of Code 2021.\n\nAffiliation: The University of Tokyo and Jenkins project\n\nGitHub: Aki-7\n\nTitle: Jenkins Remoting Monitoring with OpenTelemetry\n\nIn this talk, he will discuss the problems in maintaining Jenkins agents and how to support Jenkins admins in troubleshooting them.\nAs one of the solutions, he will introduce the new Remoting monitoring with OpenTelemetry plugin that collects Jenkins Remoting monitoring data and troubleshooting data using OpenTelemetry.\nWhat kind of data the plugin will collect and how we will be able to visualize them using available open-source monitoring tools will be demonstrated.\n\nShruti Chaturvedi - CloudEvents Plugin for Jenkins\n\nShruti is an undergrad student of Computer Science at Kalamazoo College.\nShe is developing a CloudEvents integration for Jenkins, allowing other CloudEvents-compliant CI/CD tools to communicate easily.\nShruti is also the Founding Engineer of a California-based startup, MeetKlara, where she is building serverless solutions and advocating for developing CI/CD pipelines using open-source tools.\n\nAffiliation: Kalamazoo College and Jenkins project\n\nGitHub: ShrutiC-git\n\nLinkedIn: Shruti Chaturvedi\n\nTitle: CloudEvents Plugin for Jenkins: Moving Towards Interoperability\n\nIn this talk, we will look at interoperability as an essential element in building workloads across several services.\nWe will also talk about how CloudEvents solves one of the biggest challenges in achieving interoperability between systems: lack of normalization/standardization.\nWithout any standard definition, in order to achieve interoperability, services have to develop adapters specific to a particular system.\nThat, however, is complex because services are always changing the way data/events are emitted.\nCloudEvents solves this problem by defining a standard format for events, which can be emitted/consumed agnostically, thereby achieving indirect interoperability.\nShruti will demonstrate the workings of CloudEvents Plugin for Jenkins; she will walk us through how Jenkins can be configured as a source and a sink, emitting and consuming CloudEvents-compliant events in a platform-independent manner.\n\nDaniel Ko - try.spinnaker.io\n\nDaniel is studying computer science at the University of Wisconsin - Madison.\nHe is developing a public Spinnaker sandbox environment for Google Summer of Code 2021.\n\nAffiliation: University of Wisconsin - Madison and Spinnaker project\n\nGitHub: ko28\n\nTitle: try.spinnaker.io:  Explore Spinnaker in a Sandbox Environment!\n\nThe talk will go through a brief explanation of Spinnaker and the challenges that users face during the installation process.\nHe will discuss the infrastructure of this project and how a public multi tenant spinnaker instance will be managed and installed.\nWe will end with a demo of the site so far and the various features implemented, including Github authentication, K8s manifest deployment, AWS Load Balancer Controller to expose deployments, private ECR registry and the blocking of all public images, and auto resource cleanup.\n\nAditya Srivastava - Conventional Commits Plugin for Jenkins\n\nAditya is a curiosity driven individual striving to find ingenious solutions to real-world problems.\nHe is an open-source enthusiast and a lifelong learner.\nAditya is also the Co-Founder and Maintainer of an Open Source Organization - Auto-DL, where he’s leading the development of a Deep Learning Platform as a Service application.\n\nAffiliation: V.E.S.I.T & Jenkins project\n\nGitHub: ADI10HERO\n\nLinkedIn: Aditya S.\n\nTitle: Conventional Commits Plugin for Jenkins\n\nIn this talk, we’ll start with what are conventional commits and why they are needed.\nThen we’ll see what the jenkins plugin, \"Conventional Commits\" is and what goal it is trying to achieve.\nA demo of how the plugin can be used/integrated in the current workflow will be shown.\nFinally, we’ll talk about the next steps in plugin development followed by the QnA.\n\nHarshit Chopra - Git credentials binding for sh, bat, and powershell\n\nHarshit Chopra is a recent graduate and is currently working on a Jenkins project which brings the authentication support for cli git commands in a pipeline job and freestyle project.\n\nAffiliation: Punjab University & Jenkins Project\n\nGitHub: link: arpoch\n\nLinkedIn: Harshit Chopra\n\nWebsite\n\nTitle: Git credentials binding for sh, bat, and powershell\n\nIn this talk, he will give an overview of the project and will move on further explaining what problems are being faced, a bit about the workaround that are being used to tackle the problems,\nwhat makes the authentication support so important, why a feature and not a plugin in itself, accomplishments achieved and work done during the coding phase 1, will talk about the implementation of the feature, demonstration of git authentication support over HTTP protocol.\n\nPulkit Sharma - Security Validator for Jenkins Kubernetes Operator\n\nPulkit is a student at Indian Institute of Technology,BHU,Varanasi.\nHe is working on a GSoC Project under Jenkins where he aims to add a security validator to the Jenkins Kubernetes Operator.\n\nAffiliation: Indian Institute of Technology, BHU and Jenkins Project.\n\nGitHub: sharmapulkit04\n\nTitle: Security Validator for Jenkins Kubernetes Operator\n\nIn this talk, we will discuss why we need a security validator for the Jenkins Kubernetes Operator and how we are going to implement it via admission webhooks.\nWe will have a look at how we are going to implement the validation webhook, the validation logic being used and what tools we are using to achieve it.\nPulkit will showcase his progress and will discuss his future plans for phase 2 and beyond as well.","title":"GSoC CDF Meetup: Google Summer of Code Midterm Demos","tags":["gsoc","gsoc2021","events","community"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"MarckK","html":"<div class=\"paragraph\">\n<p>Kara works with the open source community at CloudBees.\nShe is co-chair of the Continuous Delivery Foundation’s Interoperability SIG and a mentor and org admin for Outreachy and Google Summer of Code.\nAs a board director of codebar.io, Kara works to increase diversity in the tech industry.\nShe is passionate about making technology accessible and building welcoming tech communities.</p>\n</div>","id":"marckk","irc":null,"linkedin":"karadelamarck","name":"Kara de la Marck","slug":"blog/author/marckk","twitter":"KaraMarck"}]}},{"node":{"date":"2021-06-21T00:00:00.000Z","id":"7b4a4572-df50-5808-b8c2-57dd18827c92","slug":"/blog/2021/06/21/student-luminy-project-security/","strippedHtml":"Context\n\nJenkins is a CI/CD solution and as such, it is critical that the open source plugins that constitute an integral part of it don’t expose the systems they are used on to any security risks and vulnerabilities.\nIt is in that context that we worked as an audit/code review team to track and report such flaws and problematic practices.\n\nWe worked in collaboration with Jenkins Security team member Wadeck Follonier, as part of an end-of-study project during our last year of the Master’s Degree - Reliability and IT Security in the university of Aix-Marseille.\n\nProject Goals\n\nThe main goal of this project was to allow us to discover and work on diverse security vulnerabilities in the context of a widely-used software solution, and in order to achieve that we had to separate the project in multiple other goals:\n\nLearning about some of the most common vulnerabilities and the form in which they can be found on a Jenkins Instance and its plugins.\n\nPerforming code review and technical audit on the application, and compiling our results as part of a security team.\n\nReporting our findings to the Jenkins team and the plugin maintainers, while sometimes helping the latter to correct these vulnerabilities.\n\nKnowledge Sharing\n\nAt the beginning of the project, we set up communication channels with our mentor through Slack and Google Meets, and agreed to schedule weekly sessions with him.\nThe goal of these sessions was both to teach us more about the functionalities of Jenkins and the types of vulnerabilities we would encounter, and to allow us to ask more specific questions regarding our findings.\n\nThanks to our mentor developing a mock plugin compiling a variety of classic vulnerabilities and several of their implementations, including server side request forgery ( SSRF), cross site scripting ( XSS), and XML external entity ( XXE) attacks, we have been able to learn through practice.\nIt allowed us to analyze the context of the code and the different ways the Jelly framework can be used to display information, expanding our payload options and giving us a clearer view of the patterns to look for during our code reviews.\n\nWe have also had the opportunity to learn about the process used to report the vulnerabilities to the maintainers through Jira issues, and some ways we could correct them or provide steps to do so.\n\nSearching and compiling\n\nAt first, we decided to work as a pretty loose team, with each member working on a different plugin and regrouping our findings to confirm or reject them, while staying in constant contact to ask each other questions.\nThis allowed us to broaden the scope of our searches, and is the reason why we have been able to find a larger number of vulnerabilities, in plugins that differed widely in popularity, than we would have working together from the start.\n\nWe used a single file to compile the plugins we audited and our findings, making it easier for our mentor to review them and give us feedback.\nPinpointing the specific portion of code causing the issue and providing reproduction steps as clear as we could proved useful for the reporting process, thus making the approval and correction faster.\n\nDuring the last third of this project, we began to work together on bigger plugins, in order to have more points of view reflecting on the same problem.\nWith different analyses, we were able to come up with new payloads, and sometimes with new vulnerabilities where we only found one separately.\n\nReporting and correcting the vulnerabilities\n\nAll of the reporting was done through Jira issues, which allows the Jenkins team to centralize and triage the vulnerabilities.\nOnce we provided the necessary information, along with the reproduction steps we had, a member of the Jenkins security team contacted the plugin maintainer and guided them through the next steps of the process, with hope that they would answer.\n\nWe have also tried to make the maintainers' job easier, working on some fixes.\nTo achieve this, we delved not only into the functionalities of the vulnerable plugins, but also into some mitigation processes that we found either in the Jenkins documentation,  or with the help of our mentor.\n\nEach one of our modifications has been tested locally, in order to assess whether the vulnerability was still present, and whether no function had been altered.\nHowever, some of the plugins we audited demanded more complex fixes, due to their intrinsic logic, or the thought process of their developer, which led to us being unable to provide a clear fix.\n\nConsidering this, the fixes we have been able to bring into light were only suggestions to the maintainers, for them to use as inspiration or template, in order not to interfere with the plugin logic.\n\nConclusion\n\nThrough this project, we have been able to work as a team, delving into some of the different issues that security engineers are bound to face, and the ways they have at their disposal to mitigate them.\nThis has allowed us to complement our studies with a more practical aspect, that we couldn’t have had otherwise, and to transition into the companies we are now interns in.\nThis experience has strongly encouraged us to improve in and document ourselves on this branch of cybersecurity, which will have a significant impact on our professional future.\n\nUseful links\n\nJenkins - 2021/03/30 Security Advisory - 5 from us\n\nJenkins - 2021/05/11 Security Advisory - 4 from us\n\nJenkins - 2021/05/25 Security Advisory - 3 from us\n\nJenkins - 2021/06/16 Security Advisory - 1 from us\n\nJenkins - 2021/06/18 Security Advisory - 1 from us\n\nMessage from the mentor\n\nI didn’t expect to have four students with a so deep desire to learn new things, new tricks.\nTheir curiosity helped them to find numerous vulnerabilities that already led to 14 published CVEs.\nThe experience was great and I wish them all the best for their professional career and their never ending quest for knowledge.\n\nIf you are student, intern, or just someone really interested in security and Jenkins in particularly, please reach out to us to see if there is a possibility to organize something together.\nMailing list: jenkinsci-cert@googlegroups.com","title":"Four students and their master project in Jenkins security","tags":["plugins","security","jenkins"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Justin is a cybersecurity engineer who participated in a hands on project related to Jenkins security during his last year of master.</p>\n</div>","id":"jphilip","irc":null,"linkedin":"justin-philip-amu","name":"Justin Philip","slug":"blog/author/jphilip","twitter":null},{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Kevin is a cybersecurity engineer who participated in a hands on project related to Jenkins security during his last year of master.</p>\n</div>","id":"kguerroudj","irc":null,"linkedin":"kevin-guerroudj","name":"Kevin Guerroudj","slug":"blog/author/kguerroudj","twitter":null},{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Quentin is a cybersecurity engineer who participated in a hands on project related to Jenkins security during his last year of master.</p>\n</div>","id":"qparra","irc":null,"linkedin":null,"name":"Quentin Parra","slug":"blog/author/qparra","twitter":null},{"avatar":null,"blog":null,"github":null,"html":"<div class=\"paragraph\">\n<p>Marc is a cybersecurity engineer who participated in a hands on project related to Jenkins security during his last year of master.</p>\n</div>","id":"mheyries","irc":null,"linkedin":null,"name":"Marc Heyries","slug":"blog/author/mheyries","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":8,"numPages":100,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}