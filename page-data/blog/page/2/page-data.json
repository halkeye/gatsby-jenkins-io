{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-09-20T00:00:00.000Z","id":"4a603f29-d1fa-5828-bebd-39a9d9b5c6b1","slug":"/blog/2021/09/20/election-period-opened/","strippedHtml":"Dear all,\n\nTime flies and the Jenkins elections period is here.\n\nThis year, two board seats and all officer positions are up for election.\nThanks, Oleg Nenashev and Ullrich Hafner who led the Jenkins project as board members for the last two years.\nThanks, Tim Jacomb, Daniel Beck, Mark Waite for your dedication as officers over the past year.\n\nWe already had two successful editions in a row. I want us to continue on that path.\nThis is a tremendous opportunity for community members to influence the direction of the project for the next two years.\nTo make this year’s election even better, we slightly modified the process by leveraging our new community platform aka community.jenkins.io.\n\nTo participate in the election, we ask every Jenkins community member to have an account on community.jenkins.io.\nYou can either reuse your Github account or create a new discourse account specific to community.jenkins.io.\nThe second requirement is to be able to showcase at least one contribution done before the first of September 2021.\nAs mentioned on jenkins.io.io/participate, they are many different ways to contribute to Jenkins and for many of them, it’s very difficult to measure.\nTherefore we’ll trust participants and will not require that they provide evidence of contribution as part of their voter registration. We reserve the right to ban the specific account from the election process if we identify abuse.\nThe election works in three stages:\n\nIdentify voters and nominees\n\nVoting period\n\nAnnounce results\n\nVoters\n\nTo invite participants to vote, we need a list of email’s addresses that we would share with the Condorcet Internet Voting Service.\nTherefore we ask every community member who matches the requirements to join the group election-voter on community.jenkins.io.\nThe group will be open for joining during the registration period after we’ll close registration during the voting period.\nWe’ll use emails from the “election-voter” group members.\n\nNominees\n\nDuring the same period, we invite every community member to nominate candidates by sending a message to the group election-committee mentioning the position and the motivation.\nOn the 31 of October, the nomination period will end. We’ll notify all the nominees and get confirmation that they are interested in running as a candidate.\nThe list of candidates will be announced on the 7th of November.\n\nEverybody can nominate candidates.\n\nThis year we are looking for nominees for the following positions:\n\nBoard members\n\nDocumentation Officer\n\nEvents Officer\n\nInfrastructure Officer\n\nRelease Officer\n\nSecurity Officer\n\nMore information about the different roles can be found on jenkins.io/project/team-leads.\n\nElection\n\nOn the 7th of November, once voters and candidates are identified, we’ll invite everybody by email to vote using civs.cs.cornell.edu.\nAt this stage of the election, nobody will be allowed to register.\nVoting deadline is the 30th of November.\n\nResult\n\nAs soon as we have the election results, we’ll publish them.\nElected members will begin their official roles on the 3rd of December 2021.\n\nKey Dates\n\nSep 20: Nomination and voter registration begin\n\nOct 31: Nomination deadline\n\nNov 07: Candidates announced, Registration deadline, voting start\n\nNov 30: Voting deadline\n\nDec 03: Results announced\n\nKey Information:\n\nEverybody can suggest candidates by sending a private message to the group election-committee.\n\nVoters register for the election by joining the public group election-voter.\n\nEmail participants will be shared with Condorcet Voting System to send voting invitations.\n\nNobody can register for the election once we send invitations to Condorcet Voting System.\n\nOnce the election is over, every member of the group\"election-voter\" will get a badge on https://community.jenkins.io as a “2021 Election Participant”.\n\nOnce the election is over, every nominee will get the badge “2021 Election Nominee”.\n\nCheers,","title":"Jenkins Election 2021","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak","twitter":"0lblak"}]}},{"node":{"date":"2021-09-04T00:00:00.000Z","id":"38e8b09f-3f33-59fc-a9a2-2d18aa09a4fe","slug":"/blog/2021/09/04/wiki-attacked/","strippedHtml":"Earlier this week the Jenkins infrastructure team identified a successful attack against our deprecated Confluence service.\nWe responded immediately by taking the affected server offline while we investigated the potential impact.\nAt this time we have no reason to believe that any Jenkins releases, plugins, or source code have been affected.\n\nThus far in our investigation, we have learned that the Confluence CVE-2021-26084 exploit was used to install what we believe was a Monero miner in the container running the service.\nFrom there an attacker would not be able to access much of our other infrastructure.\nConfluence did integrate with our integrated identity system which also powers Jira, Artifactory, and numerous other services.\n\nThe trust and security in Jenkins core and plugin releases is our highest priority.\nWe do not have any indication that developer credentials were exfiltrated during the attack.\nAt the moment we cannot assert otherwise and are therefore assuming the worst.\nWe are taking actions to prevent releases at this time until we re-establish a chain of trust with our developer community.\nWe have reset passwords for all accounts in our integrated identity system.\nWe are improving the password reset system as part of this effort.\n\nAt this time, the Jenkins infrastructure team has permanently disabled the Confluence service, rotated privileged credentials, and taken proactive measures to further reduce the scope of access across our infrastructure.\nWe are working closely with our colleagues at the Linux Foundation and the Continuous Delivery Foundation to ensure that infrastructure which is not directly managed by the Jenkins project is also scrutinized.\n\nIn October 2019 we made the Confluence server read-only effectively deprecating it for day-to-day use within the project.\nAt that time, we began migrating documentation and changelogs from the wiki to GitHub repositories.\nThat migration has been ongoing, with hundreds of plugins and many other documentation pages moved from the wiki to GitHub repositories.\n\nWe are grateful for those of you who followed our responsible disclosure procedure and reached out to us about this vulnerability affecting the Jenkins project.\n\nWe will continue to take proactive measures to improve the security of our infrastructure and encourage you to follow us on Twitter for further updates.","title":"Jenkins project Confluence instance attacked","tags":["infrastructure","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2021-08-28T00:00:00.000Z","id":"1191945b-e68d-5ab5-8c0e-ef54d9699ba9","slug":"/blog/2021/08/28/conventional-commits-plugin-project-report/","strippedHtml":"This blog post is part 2 of the Introducing the Conventional Commits Plugin blog.\n\nThe goal of this blog is to showcase the work done during the Google Summer of Code 2021 coding phases.\n\nPlease refer the part 1 of the blog for a detailed description of the plugin.\n\nAbstract\n\nThe project/plugin aims to fully automate a release process.\n\nThe plugin tries to achieve this goal by automatically determining the next semantic version based on commit messages.\n\nThere were 2 coding phases in the GSoC 2021.\nI call the first phase - \"Read\" and the 2nd phase - \"Write\", let’s see why.\n\nPhase 1: Read\n\nIn this phase, the \"read\" aspect of the plugin was enhanced.\nThe plugin supported multiple project types (Maven, Gradle, NPM, Helm, Python, Make) and was able to read current version information from the configuration files of the supported project types.\n\nDeliverables\n\nSupport multiline comments\n\nSupport reading the current version from a maven pom.xml\n\nSupport reading the current version from a build.gradle\n\nSupport reading the current version from a Makefile\n\nSupport reading the current version from a package.json\n\nSupport reading the current version from a helm Chart.yaml\n\nResources\n\nList of related issues\n\nPhase 1 Demo and Presentation:\n\nPhase 2: Write\n\nIn this phase, some work was done in extending the \"write\" aspect of the plugin.\nA provision (optional parameter) to write back the calculated next semantic version to the configuration files of projects was added to the plugin.\nAlong with that, the plugin now can append \"Pre-Release\" and \"Build Metadata\" information to the calculated semantic version.\n\nDeliverables\n\nAdd prerelease information to the calculated/new version\n\nAdd build metadata to the calculated/new version\n\nWrite next version in pom.xml\n\nWrite next version in package.json\n\nHandle version mismatch between config file and latest tag\n\nResources\n\nLink to related Issues\n\nUsing optional parameters in the Conventional Commits Plugin\n\nPhase 2 Presentation\n\nNext Steps\n\nWrite back version for Python project.\n\nWrite back version for Gradle project.\n\nHandle remote workspaces\n\nFeedback\n\nWe would love to hear your feedback & suggestions for the plugin.\n\nPlease reach out on the plugin’s GitHub repository, the Gitter channel or start a discussion on community.jenkins.io.","title":"Work report for the Conventional Commits Plugin for Jenkins","tags":["gsoc","gsoc2021","conventionalcommits","plugin"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#688898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png","srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/ff5a3/adi10hero.png 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b18f9/adi10hero.png 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b9e30/adi10hero.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8ba60/adi10hero.webp 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/a9ea7/adi10hero.webp 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8c23b/adi10hero.webp 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/fc98a/adi10hero.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":131}}},"blog":null,"github":"adi10hero","html":"<div class=\"paragraph\">\n<p>Aditya is a curiosity driven individual striving to find ingenious solutions to real-world problems. He is an open-source enthusiast and a life long learner.</p>\n</div>","id":"adi10hero","irc":null,"linkedin":null,"name":"Aditya Srivastava","slug":"/blog/authors/adi10hero","twitter":"adi10hero"}]}},{"node":{"date":"2021-08-23T00:00:00.000Z","id":"b598f8c2-ebc7-5a4d-9b91-8a9ea0e5e989","slug":"/blog/2021/08/23/jenkins-operator-security-work-report/","strippedHtml":"Background\n\nJenkins custom resources on a Kubernetes cluster are deployed using declarative YAML configuration files; hence some of the plugins declared in these files may contain security warnings.\nSo there is no way for the user to know other than manually checking for each on the site.\nThis project aims to add an extra step of validation before creating/updating a new Jenkins Custom Resource.\n\nDeliverables\n\nThis project aims to add a validating admission webhook to the Jenkins Operator for Kubernetes to detect potential security vulnerabilities in the plugins before the object is created.\n\nDependencies\n\nWebhooks communicate to the API server over HTTPS and use TLS. Thus, Jetstack/cert-manager is used to provision TLS certificates and establish connection between Kubernetes API and webhook.\n\nImplementaion\n\nOperator-SDK takes care of creating a new webhook and appending it to the manager and creating handlers.\nTls certificates are managed using cert-manager.\n\nValidation Logic:\n\nProposed Implementations: Iterate through the list of plugins to be installed and fetch warnings for each plugin from the plugin center API and check if the version of that plugin has any of those warnings.\n\nCaveats: Webhooks add latency to an API request, hence they should evaluate as quickly as possible thus having max allowed timeout of 30s. In the earlier approach I was fetching the security warnings from the plugin site API in the validator interface itself, and since network operations are slow, it was causing a timeout in the case of validating a larger number of plugins or when the Internet connection was not good.\n\nUpdated Implementaion: Instead of fetching information for each plugin, the information about all the plugins is downloaded and cached at the start of the operator and updated periodically, thus eliminating network calls and finishing validation in less than a second.\n\nEvaluation Phase 1:\n\nScaffoled a new validation webhook\n\nAdded manifests for ValidatingWebhookConfiguration, certificates and volumes, and updated Makefile\n\nImplemented the validator interface\n\nUpdated helm charts\n\nEvaluation Phase 2:\n\nReimplemented the validator interface.\n\nAdded unit tests for internal functions\n\nAdded e2e tests along with helm tests\n\nUpdated helm charts\n\nResources\n\nPull Requests\n\nAdded validation webhook,manifests,and updated Makefile\n\nImplemented validation logic,added tests and updated helm charts\n\nPhase 1 demo\n\nUser Guide\n\nThe webhook feature is completely optional for the user. It can be easily deployed using Helm Chart by setting webhook.enabled in values.yaml and in the Operator command line flag.\n\nwebhook.enabled=true\n\nTo enable security validation in the jenkins custom resource set\n\njenkins.ValidateSecurityWarnings=true\n\nNote: The webhook takes some time to get up and running, also when helm renders the template, the validating webhook configuration is applied last, hence if the user wants to deploy the Jenkins Custom Resource with validation turned on, he needs to wait for some time. After the webhook is up and running the user can deploy the Jenkins Custom Resource using helm or kubectl\n\nFuture work\n\nImplementing a post-install hook in the helm charts that checks whether the webhook is up and running.\n\nAdding validation for required core version of plugin and core version of Jenkins.\n\nMigrating other validation logic from controller to the webhook.\n\nAdding validation for the dependencies of the plugins.","title":"Security Validator for Jenkins Operator for Kubernetes","tags":["gsoc21","kubernetes","security","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#a88848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/67151/sharmapulkit04.jpg","srcSet":"/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/ede19/sharmapulkit04.jpg 32w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/bc20c/sharmapulkit04.jpg 64w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/67151/sharmapulkit04.jpg 128w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/f76df/sharmapulkit04.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/8ba60/sharmapulkit04.webp 32w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/a9ea7/sharmapulkit04.webp 64w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/8c23b/sharmapulkit04.webp 128w,\n/gatsby-jenkins-io/static/a0f57d401b1a73bd732b30a1dfa27287/fc98a/sharmapulkit04.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":131}}},"blog":null,"github":"sharmapulkit04","html":"<div class=\"paragraph\">\n<p>A Student at the Indian Institute of Technology(BHU) Varanasi, Pulkit is currently working on a GSoC Project under Jenkins where he aims to add a security validator to the Jenkins Kubernetes Operator.</p>\n</div>","id":"sharmapulkit04","irc":null,"linkedin":null,"name":"Pulkit Sharma","slug":"/blog/authors/sharmapulkit04","twitter":"anarchist_04"}]}},{"node":{"date":"2021-08-19T00:00:00.000Z","id":"3ba26599-8e1c-5bd0-9892-7a79594d049c","slug":"/blog/2021/08/19/git-credentials-binding-work-report/","strippedHtml":"Abstract\n\nThis project implemented two new credential bindings to perform authenticated operations using command line git in Jenkins pipeline and freestyle jobs.\n\nThe two credential bindings are gitSshPrivateKey and gitUsernamePassword.\n\nImplementation\n\nType\n\nFeature\n\nLocation\n\nThe gitUsernamePassword binding is implemented in Jenkins git plugin v4.8.0.\nThe gitSshPrivateKey binding is implemented in a pull request to the Jenkins git plugin\n\nDependencies\n\nCredentials Binding Plugin -\nIt is used to bind Git specific environment variables with shell scripts/commands which perform git authentication on behalf of the user, without their interaction with the command-line.\n\nBouncy Castle API Plugin -\nProvides an API to do common tasks like PEM/PKCS#8 Encoding/Decoding and ensuring its stability among Bouncy Castle API versions.\n\nSSH Server Plugin -\nProvides an API to perform tasks like OpenSSH private key encoding and decoding.\n\nPhase 1: Git Username Password Binding (gitUsernamePassword)\n\nDeliverables\n\nSupport git authentication over the HTTP protocol\n\nUse the GIT_ASKPASS environment variable to provide user credentials to command line git\n\nSupport different\n\nOS environments : CentOS 7, CentOS 8, Debian 9, Debian 10, FreeBSD 12, OpenBSD 6.9, openSUSE 15.2, Ubuntu 18.04, Ubuntu 20.04, Ubuntu 21.04, and Windows 10.\n\nProcessors : amd64, arm32, arm64, and s390x.\n\nAuthentication support for command line git only, not JGit or JGit Apache.\n\nCheck for specific git versions\n\nSetting git specific environment variables based on OS type\n\nAutomated test coverage more than 90%\n\nResources\n\nPull Requests\n\nAdd Git Credentials binding for Username and Password\n\nCheck the least command line git version required\n\nGit username password binding doc update in git-plugin\n\ngitUsernamePassword binding explanation\n\nWebinar slides\n\nGit username password binding released blog post\n\nPhase 1 demo and presentation:\n\nPhase 2: Git SSH Private Key Binding (gitSshPrivateKey)\n\nDeliverables\n\nTo support git authentication over the SSH protocol\n\nSupports:\n\nPrivate Key Formats\n\nOpenSSH\n\nPEM\n\nPKCS#8\n\nEncryption algorithms\n\nRSA\n\nDSA\n\nECDSA\n\nED25519\n\nOS environments : CentOS 7, CentOS 8, Debian 9, Debian 10, FreeBSD 12, OpenBSD 6.9, openSUSE 15.3, Ubuntu 18.04, Ubuntu 20.04, Ubuntu 21.04, and Windows 10.\n\nProcessors : amd64, arm32, arm64, and s390x.\n\nAuthentication support for command line git only, not JGit or JGit Apache.\n\nUse git specific environment variables depending upon the minimum git version\n\nGIT_SSH_COMMAND - If the version is greater than 2.3, provides ssh command including the necessary options.\n\nSSH_ASKPASS - If the version is less than 2.3, an executable script is attached to the variable.\n\nSetting variables based on the OS type\n\nResources\n\nPull Requests\n\nAdd Git Credentials binding for SSH Private Key\n\nLast GSOC-2021 noted commit\n\nScope change of getSSHExecutable method\n\ngitSshPrivateKey binding explanation\n\nWebinar Slides\n\nFinal phase demo and presentation\n\nAchievements\n\nThe git credential bindings which are available through the git plugin automate the git authentication process for a user effortlessly\n\nThe gitUsernamePassword and gitSshPrivateKey binding provides git authentication support for Pipeline and Freestyle Project users in various OS environments on different processors\n\nThe gitUsernamePassword binding has been released and is readily available from git plugin v4.8.0 and above\n\nThe gitSshPrivateKey binding provides support for OpenSSH format which is default for OpenSSH v7.8 and above\n\nFuture Work\n\nSSH private key binding pull request merge and release\n\nUnexpected complications from Jenkins class loader required extra effort and investigation, including an experiment shading a dependency into the git plugin\nWe intentionally chose to avoid the complication and risk of shading the dependency\nIf the SSH library use requires shading, then we may need to use maven modules in the git plugin","title":"Git Credentials Binding for sh, bat, powershell","tags":["git","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"arpoch","html":"<div class=\"paragraph\">\n<p>Harshit Chopra is an open source enthusiast from India.</p>\n</div>","id":"arpoch","irc":null,"linkedin":"harshit-chopra-275269178","name":"Harshit Chopra","slug":"/blog/authors/arpoch","twitter":"Harshit14413301"}]}},{"node":{"date":"2021-08-17T00:00:00.000Z","id":"d629c3ce-afaa-5437-9120-457244788553","slug":"/blog/2021/08/17/docker-images-use-jdk-11-by-default/","strippedHtml":"The Jenkins project provides Docker images for controllers, inbound agents, outbound agents, and more.\nBeginning with Jenkins 2.307 released August 17, 2021 and Jenkins 2.303.1 released August 25, 2021, the Docker images provided by the Jenkins project will use Java 11 instead of Java 8.\n\nControllers use Java 11 by default\n\nIf you are running one of the Jenkins Docker controller images that does not include a JDK version in its label, the Java runtime will switch from Java 8 to Java 11 with the upgrade.\n\nFor example:\n\nJenkins 2.306 running as jenkins/jenkins:latest uses Java 8.\nWhen Jenkins 2.307 or later is run with jenkins/jenkins:latest, it will use Java 11\n\nJenkins 2.289.3 running as jenkins/jenkins:lts uses Java 8.\nWhen Jenkins 2.303.1 or later is run with jenkins/jenkins:lts, it will use Java 11\n\nThe Docker image tags affected by this upgrade include:\n\nalpine\n\ncentos7\n\nlatest\n\nlts\n\nslim\n\nUsers that need to remain with Java 8 may use a different Docker image tag to run with Java 8.\n\nJenkins 2.306 running as jenkins/jenkins:latest uses Java 8.\nWhen Jenkins 2.307 or later is run with jenkins/jenkins:latest-jdk8, it will use Java 8\n\nJenkins 2.289.3 running as jenkins/jenkins:lts uses Java 8.\nWhen Jenkins 2.303.1 or later is run with jenkins/jenkins:lts-jdk8, it will use Java 8\n\nAgents use Java 11 by default\n\nDuring the next 1-2 weeks (Aug 17, 2021 - Aug 31, 2021), the Jenkins agent images will be updated to use Java 11 instead of Java 8.\n\nFor example:\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.9-1 uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.10-1 it will use Java 11.\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:latest uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:latest after the agent change, it will use Java 11.\n\nUsers that need to remain with Java 8 may use a different Docker image tag to run with Java 8.\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.9-1 uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.10-1-jdk8 it will also use Java 8.\n\nDocker tag updates stopped\n\nThe Jenkins project will no longer update the Docker images that are based on CentOS 8.\nThe CentOS project has changed direction to track just ahead of a Red Hat Enterprise Linux release rather than tracking after a release.\nThey are no longer publishing updates for CentOS 8 Docker images.\n\nUsers running Jenkins 2.306 or earlier with the jenkins/jenkins:centos tag will need to switch to use a different tag.\nThey may consider using:\n\njenkins/jenkins:almalinux\n\njenkins/jenkins:rhel-ubi8-jdk11\n\nUsers running Jenkins 2.289.3 or earlier with the jenkins/jenkins:centos tag will need to switch to use a different tag\n\nThey may consider using:\n\njenkins/jenkins:lts-almalinux\n\njenkins/jenkins:lts-rhel-ubi8-jdk11\n\nWindow 1809 Docker images stopped\n\nThe Windows Docker images have published versions based on both the 1809 feature release and the Windows Server long term support channel (\"LTSC\").\nWindows support for the 1809 images will no longer be published because Microsoft has ended mainstream support for the 1809 images.\nUsers should switch to use the Jenkins images based on the \"LTSC\" channel.","title":"Docker images use Java 11 by default","tags":["java","platform","docker"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#586868","images":{"fallback":{"src":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/55658/dheerajodha.jpg","srcSet":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/3af71/dheerajodha.jpg 32w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/226ae/dheerajodha.jpg 64w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/55658/dheerajodha.jpg 128w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/3dc24/dheerajodha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/bf13b/dheerajodha.webp 32w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/12101/dheerajodha.webp 64w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/e9db2/dheerajodha.webp 128w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/6fafe/dheerajodha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":145}}},"blog":null,"github":"dheerajodha","html":"<div class=\"paragraph\">\n<p>Dheeraj is a Computer Science Engineering student (senior) at Vivekanand Institute of Technology, University of Mumbai. He started his journey of contributing to Jenkins in March 2021. His tiny contributions revolve around the <a href=\"https://github.com/jenkinsci/custom-distribution-service\">Custom Distribution Service for Jenkins Project</a>. He also likes to contribute to the JCasC project and documentation to help the developers.</p>\n</div>","id":"dheerajodha","irc":null,"linkedin":"dheeraj-singh-jodha","name":"Dheeraj Singh Jodha","slug":"/blog/authors/dheerajodha","twitter":null}]}},{"node":{"date":"2021-08-02T00:00:00.000Z","id":"4b818957-350e-52f3-a687-d86ebc43405d","slug":"/blog/2021/08/02/cloudevents-plugin-phase-I/","strippedHtml":"The What, Why and How of Interoperability\n\nWith workloads and teams becoming more diverse and complex, there is an increasing need to automate various tasks in the CI/CD ecosystem of an application as a way to decrease complexity that can come with CI/CD.\n\nA more diverse team working across different aspects of the application requires a diverse suite of CI/CD tools too, to test and deliver to a wide range of users. More often than not, we need these tools to work together and exchange data to form an effective CI/CD pipeline. However, chaining multiple services together can very easily increase complexity.\n\nHow? Each of these services use a different \"language\" to communicate and represent the entity(an event) which occured inside that service. In order for another service to understand this \"language\", the service might need to develop customized clients and agents which specialize in understanding, traversing and taking-actions based on what was transmitted to it by the first service.\n\nOne can think of it as a translator who specializes in a language called ABC, and each service who wants to communicate with the service who uses ABC will have to employ this translator, or perhaps get another trained translator. And there is no guarantee that this translator will also help communicate with other services speaking a completely different language.\n\nWe can see how easily that can grow in cost and maintenance. A preferred way is to have a common language each of these services use and understand as a way to communicate amongst each other. This way, an event which is emitted using this common language will be available to any of the interested receiver without that receiver needing a special agent. This way of communication which uses a common/standard language also creates a way for agnostic communication where the sender or the receiver are sending and receiving data without creating a tight coupling between the two.\n\nCloudEvents specification is enabling that loosely-coupled, event-driven communication between services by enforcing a common language which defines how an event should be emitted and transferred between systems.\n\nCloudEvents and Jenkins\n\nA specification for describing event data in a common way\n\nConsistency\n\nConsistent across tools and services.\n\nAccessibility\n\nCommon event format means common libraries, tooling, and infrastructure for delivering event data across environments can be used to develop with CloudEvents.\n\nPortability\n\nEasily port event-data across tools, truly leveraging event-driven architecture.\n\nThe CloudEvents plugin for Jenkins is developed as an effort to make interoperability between Jenkins and CI/CD tools much easier. The CloudEvents plugin for Jenkins is a GSoC project, and with the help from an amazing team of mentors, this project is aimed at enhancing event-driven interoperability between cloud-native CI/CD tools, making it easier for developers to include Jenkins in their CI/CD pipelines.\n\nWith this plugin, Jenkins can send and receive CloudEvents-compliant events to and from a wide variety of CI/CD tools using CloudEvents as their event format. This plugin makes chaining Jenkins with multiple tools like Tekton, Keptn, Knative and more, very easy.\n\nGSoC Phase 1 - CloudEvents Plugin\n\nUsing CloudEvents plugin for Jenkins\n\nThis plugin allows Jenkins to be configured as a source and sink, which can emit and consume CloudEvents from a range of tools simultaneously.\n\nJenkins as a Source\n\nConfiguring Jenkins as a Source enables Jenkins to send CloudEvents to a CloudEvents sink. For Phase-I of this project, there is support for HTTP Sinks, however CloudEvents supports various protocol bindings. Moving forward, there will also be support for other protocol bindings supported by CloudEvents.\n\nTo use Jenkins as a Source, the following configuration is needed:\n\nClick on Manage Jenkins in the Root-Actions menu on the left.\n\nInside the Manage Jenkins UI, search for Configure System under System Configuration.\n\nIn the Configure System UI, scroll down to the CloudEvents plugin section, and this is where all the plugin configuration will be present. Here, you will have to enter the following information:\n\nSink Type (For now, HTTP Protocol Binding for CloudEvent and HTTP Sink is supported.)\n\nSink URL (URL of the Sink where you want the cloudevents sent.)\n\nEvents you want sent to the CloudEvents sink URL.\n\nStep 1: Manage Jenkins\n\nStep 2: Configure System\n\nStep 3: Configure CloudEvents Sink\n\nWith Jenkins as a Source configured, Jenkins will send a POST request to the configured sink right as the selected event occurs inside Jenkins. Each event has a different payload specific to the type of the event emitted.\n\nEvent Types, Payload and Metadata\n\nCloudEvents emitted by Jenkins follow the Binary-structure supported by CloudEvents, where the CloudEvents metadata is present inside the header, and the event-data is serialized as JSON, and present under request-body. This is the HTTP Protocol Binding for CloudEvents. Each protocol binding for CloudEvents follows a definition specific to the binding protocol.\n\nFor now, the following Jenkins events are supported in the CloudEvents Plugin-Jenkins as a Source:\n\nQueue Events\n\nQueue Entered Waiting\n\nQueue Left\n\nBuild Events\n\nJob Started\n\nJob Completed\n\nJob Finalized\n\nJob Failed\n\nJob Events\n\nJob Created\n\nJob Updated\n\nNode Events\n\nNode Online\n\nNode Offline\n\nFollowing is a table of the queue-entered waiting cloudevents metadata:\n\nEvent Metadata Headers Key\nEvent Metadata Headers Value\n\nce-specversion\n1.0\n\nce-type\norg.jenkinsci.queue.entered_waiting\n\nce-source\njob/test\n\nce-id\n123-456-789\n\nAll of these fields will be present inside the HTTP-request headers since the CloudEvents format used here is the Binary structure.\n\nHere’s also an example of event payload for the queue-entered event:\n\n{\n  \"ciUrl\": \"http://3.101.116.80/\",\n  \"displayName\": \"test2\",\n  \"entryTime\": 1626611053609,\n  \"exitTime\": null,\n  \"startedBy\": \"shruti chaturvedi\",\n  \"jenkinsQueueId\": 25,\n  \"status\": \"ENTERED_WAITING\",\n  \"duration\": 0,\n  \"queueCauses\": [\n    {\n    \"reasonForWaiting\": \"In the quiet period. Expires in 0 ms\",\n    \"type\": \"entered_waiting\"\n    }\n  ]\n}\n\nTry the Plugin\n\nThe plugin will soon be releasing as the CloudEvents Plugin under https://plugins.jenkins.io/!!\n\nHere’s the GitHub Repo of the Plugin: CloudEvents Plugin GitHub Repo\n\nDemo\n\nHere is a video of the CloudEvents plugin with SockEye demoed at CDF GSoC Midterm Demos. SockEye is an open-source tool which is designed as a way to visulaize cloudevents which are sent from a sink. In this demo, we will take a look at how Jenkins installed in a multi-node K8s environment work with the CloudEvents plugin as a Source, sending events over HTTP to the SockEye sink.\n\nNext Steps\n\nJenkins as a Sink to allow Jenkins to trigger various actions as cloudevents are received from other tools.\n\nEnabling filtering on CloudEvents metadata to only act upon a certain kind of events recieved.\n\nSupport for other protocol bindings in CloudEvents.\n\nFeedback\n\nWe would absolutely love to hear your suggestions and feedback. This will help us understand the various use-cases for the plugin, and iterate to support a variety of bindings and formats.\n\nFeel free to log an issue at the CloudEvents Plugin GitHub repository. We are on CDF slack under gsoc-2021-jenkins-cloudevents-plugin. You can also start a discussion on community.jenkins.io. I also love emails! Drop me one on: shrutichaturvedi16.sc@gmail.com","title":"CloudEvents Plugin for Jenkins: Interoperability between Jenkins and other CI/CD Tools","tags":["gsoc","gsoc2021","cloudevents","interoperability","cloud-native"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/bf8e1/ShrutiC-git.png","srcSet":"/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/914ee/ShrutiC-git.png 32w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/1c9ce/ShrutiC-git.png 64w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/bf8e1/ShrutiC-git.png 128w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/acb7c/ShrutiC-git.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/ef6ff/ShrutiC-git.webp 32w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/8257c/ShrutiC-git.webp 64w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/6766a/ShrutiC-git.webp 128w,\n/gatsby-jenkins-io/static/02bce5237e5a6152567788b0da82ce8e/22bfc/ShrutiC-git.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"ShrutiC-git","html":"<div class=\"paragraph\">\n<p>Shruti Chaturvedi is the <strong>Founding Engineer</strong> for Klara, a startup to revolutionalize the shopping experience for beauty products.\nShe is an <strong>Oracle Certified Cloud Practitioner</strong>, and is developing solutions on Cloud where CI/CD is her primary focus. She has worked with Jenkins as a User, and is very excited to contribute to Jenkins and be a part of the community.</p>\n</div>","id":"ShrutiC-git","irc":null,"linkedin":null,"name":"Shruti Chaturvedi","slug":"/blog/authors/shrutic-git","twitter":"shruti_tech"}]}},{"node":{"date":"2021-07-31T00:00:00.000Z","id":"eb573050-2c0c-527f-ab2c-3da89d375c1d","slug":"/blog/2021/07/31/remoting-monitoring-phase-1/","strippedHtml":"Goal\n\nThe goal of this project:\n\ncollect telemetry data(metrics, traces, logs) of remoting module with\nOpenTelemetry.\n\nsend the telemetry data to OpenTelemetry Protocol endpoint\n\nWhich OpenTelemetry endpoint to use and how to visualize the data are up to\nusers.\n\nOpenTelemetry\n\nAn observability framework for cloud-native software\n\nOpenTelemetry is a collection of tools, APIs, and SDKs.\nYou can use it to instrument, generate, collect, and export telemetry\ndata(metrics, logs, and traces) for analysis in order to understand your\nsoftware’s performance and behavior.\n\nPhase 1 summary\n\nUser survey\n\nOur team conducted a user survey to understand the pain point regarding Jenkins\nremoting.\n\nFig 1. What agent type/plugins do you use?\n\nFig 1 shows what types of agent users use, and 17 unique respondents out of\n28 use docker for agent. So I’m planning to publish a docker image to\ndemonstrate how we can build Docker image with our monitoring feature.\n\nThis survey and investigation of JIRA tickets of past two years also tell me five\ncommon causes of agent unavailability.\n\nConfiguration mistakes\n\nJenkins agent settings, e.g. misuse of \"tunnel connection through\" option.\n\nPlatform settings, e.g. invalid port setting of Kubernetes' helm template.\n\nNetwork settings, e.g. Load balancer misconfiguration.\n\nUncontrolled shutdown of nodes for downscaling.\n\nTimeout during provisioning a new node.\n\nFirewall, antivirus software or other network component kill the connection\n\nLack of hardware resources, e.g. memory, temp space, etc…​\n\nWe also heard valuable user voice in the survey.\n\nWhat areas would you like to see better in Jenkins monitoring?\n\nI have created a bunch of adhoc monitoring jobs to check on the agent’s health\nand send e-mail. Would be nice to have this consolidated.\n\nHaving archive of nodes with the access to their logs/events would have been\nnice.\n\nI hope that implementing these feature with OpenTelemetry, which is expected to\nbecome the industry standard for observability, will bring great monitoring\nexperience to Jenkins community.\n\nProof of Concept\n\nHow to deliver the monitoring program to agents\n\n1. Sending monitoring program to the agent over remoting\n\nIn my first implementation, I prepared a Jenkins plugin and send the\nmonitoring program from Jenkins controller. However, this approach have\nfollowing disadvantages.\n\nWe cannot collect telemetry data before the initial connection.\nWe are likely to encounter a problem while provisioning a new node,\nso it’s important to observe agents' telemetry data from the beginning.\n\nSome agent restarters (e.g. UnixSlaveRestarter)\nrestart agent completely when reconnecting. It means that the agent lost\nmonitoring program every time the connection closed, and we cannot collect\ntelemetry data after the connection is lost before a new connection is\nestablished.\n\nSo we decided to take the next approach.\n\n2. Install monitoring engine when provisioning a new agent\n\nIn this approach, user will download the monitoring program called monitoring\nengine, which is a JAR file, and place it in the agent node when provisioning.\n\nHow to instrument remoting to produce remoting trace\n\nAdd instrumentation extension point to remoting\n\nPull Request: https://github.com/jenkinsci/remoting/pull/471\n\nThis approach makes the agent launch command more complicated,\nand we have to overcome this problem.\n\nCurrent State\n\nMetrics\n\nWe currently support the following metrics and planning to support more.\n\nmetrics\nunit\nlabel\nkey\ndescription\n\nsystem.cpu.load\n1\n\nSystem CPU load. See com.sun.management.OperatingSystemMXBean.getSystemCpuLoad\n\nsystem.cpu.load.average.1m\n\nSystem CPU load average 1 minute See java.lang.management.OperatingSystemMXBean.getSystemLoadAverage\n\nsystem.memory.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize\n\nsystem.memory.utilization\n1\n\nSystem memory utilization,\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize.\nReport 0% if no physical memory is discovered by the JVM.\n\nsystem.paging.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\n\nsystem.paging.utilization\n1\n\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\nReport 0% if no swap memory is discovered by the JVM.\n\nprocess.cpu.load\n%\n\nProcess CPU load. See com.sun.management.OperatingSystemMXBean.getProcessCpuLoad.\n\nprocess.cpu.time\nns\n\nProcess CPU time. See com.sun.management.OperatingSystemMXBean.getProcessCpuTime.\n\nruntime.jvm.memory.area\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\narea\nheap, non_heap\n\nruntime.jvm.memory.pool\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\npool\nPS Eden Space, G1 Old Gen…​\n\nruntime.jvm.gc.time\nms\ngc\nG1 Young Generation, G1 Old Generation, …​\nsee GarbageCollectorMXBean\n\nruntime.jvm.gc.count\n1\ngc\nG1 Young Generation, G1 Old Generation, …​\nsee GarbageCollectorMXBean\n\nTraces\n\nWe tried several approaches to instrument remoting module, but good approach is not established yet.\n\nHere is a draft documentation of the spans to collect. Google Doc\n\nLogs\n\nComing soon!\n\nMetric and span demo visualization\n\nOur team created a demo example with Docker compose and visualized the metrics and spans.\n\nClick to open in new tab\n\nGoogle Summer of Code Midterm Demo\n\nOur project demo starts with 8:20\n\nNext Step\n\nLog support\n\nAlpha release!","title":"Remoting Monitoring with OpenTelemetry - Coding Phase 1","tags":["gsoc","gsoc2021","remoting","open-telemetry"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/19e71/aki-7.jpg","srcSet":"/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/77b35/aki-7.jpg 32w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/d4a57/aki-7.jpg 64w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/19e71/aki-7.jpg 128w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/68974/aki-7.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/ef6ff/aki-7.webp 32w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/8257c/aki-7.webp 64w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/6766a/aki-7.webp 128w,\n/gatsby-jenkins-io/static/8bf008a55844a4f101632d5a2e142493/22bfc/aki-7.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"Aki-7","html":"<div class=\"paragraph\">\n<p>GSoC 2021 student (Jenkins Remoting Monitoring). Akihiro is a student in the Department of information and communication engineering at the University of Tokyo.</p>\n</div>","id":"aki-7","irc":null,"linkedin":null,"name":"Akihiro Kiuchi","slug":"/blog/authors/aki-7","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":8,"numPages":100,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}