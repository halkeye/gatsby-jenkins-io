{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/63",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2015-07-24T00:00:00.000Z","id":"d17bd5cd-f3ec-583a-89df-90a6e0487eca","slug":"/blog/2015/07/24/juc-u-s-east-slides-and-video-are-now-available-online/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/dc_0.jpg[image,width=200,height=149] +\n\n+\n+\n\nSlides and video from JUC U.S. East are now available online!\n\n+\n+\n\nIf you attended the conference, THANK YOU, and I’m sure you had fun, learned a lot and met many people from the Jenkins community. Now you can revisit your favorite talks or \"attend\" the ones that you missed.\n\n+\n+\n\nIf you were unable to attend JUC U.S. East, you now have the slides and video so you can \"attend\" anyways! If you like what you see and would like to attend a JUC this year, there is ONE date left in the 2015 Jenkins User Conference World Tour: JUC U.S. West is September 2-3 in Santa Clara, CA. Register here.","title":"JUC U.S. East slides and video are now available online","tags":["general","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman","twitter":null}]}},{"node":{"date":"2015-07-24T00:00:00.000Z","id":"ac93e6b7-9b76-5920-aaf0-2f9502b20694","slug":"/blog/2015/07/24/integrating-kubernetes-and-jenkins/","strippedHtml":"Kubernetes is an open-source project by Google that provides a platform for managing Docker containers as a cluster. In their own words:\n\nKubernetes is an open source orchestration system for Docker containers. It handles scheduling onto nodes in a compute cluster and actively manages workloads to ensure that their state matches the users declared intentions. Using the concepts of \"labels\" and \"pods\", it groups the containers which make up an application into logical units for easy management and discovery.\n\nKubernetes-related services by Google are the Google Container Engine, a Kubernetes-powered platform for hosting and managing Docker containers, and the Google Container Registry, a private Docker image registry.\n\nSeveral new Jenkins plugins allow you to make use of Kubernetes and these services:\n\nThe Google Cloud Registry Auth Plugin allows users to authenticate with the Google Cloud Registry so they can push/pull images. This allows you to use the Google Cloud Registry with existing Docker-related plugins, like Docker build step plugin or CloudBees Docker Custom Build Environment Plugin.\n\nThe Kubernetes Plugin implements a cloud provider for Jenkins, and can create agents based on Docker images on-demand on your Kubernetes cluster or the Google Cloud Platform.\n\nWatch Kohsuke demoing Jenkins/Kubernetes integration at OSCON earlier this week.\n\nFor a more in-depth look at how you can use Kubernetes with Jenkins, check out these posts on the CloudBees blog by Tracy Kennedy:\n\nOrchestrating deployments with Jenkins Workflow and Kubernetes\n\nOn-demand Jenkins agents with Kubernetes and the Google Container Engine\n\nClustering Jenkins with Kubernetes in the Google Container Engine","title":"Integrating Kubernetes and Jenkins","tags":["general","plugins","video"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2015-07-23T00:00:00.000Z","id":"25450ef4-5dcb-526d-be18-46e6ffec9304","slug":"/blog/2015/07/23/office-hours-are-back/","strippedHtml":"After several months of inactivity, office hours, the bi-weekly meeting of Jenkins users and developers to learn more about Jenkins, are back.\n\nI’ll host the first session next Wednesday at 11 am PDT. This session will be about Stapler, focusing on what Jenkins plugin authors need to know about it, e.g. request routing, form submission handling, or how Jelly/Groovy views work.\n\nWhile this is going to be a developer-focused session, future session topics will also have Jenkins users as target audience.\n\nFor general information on office hours, and how to join, see the wiki.","title":"Office hours are back","tags":["general","meta","news"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2015-07-15T00:00:00.000Z","id":"a188685e-dcce-5f7f-85b9-9acf0cbfe59b","slug":"/blog/2015/07/15/advancing-the-jenkins-gui-configuring-items-in-jenkins/","strippedHtml":"https://youtu.be/1Qn4jEwAeGc\n\nAbove is the screencast associated with this blog post\n\nIf you have ever used Jenkins you are familiar with what I am about to described, wading your way through job configuration page, looking for the settings that are important, and, depending on your plugin use, wondering where all these other setting came from and what they do.\n\n+\nDepending on how long you have used Jenkins, your negative opinion of this experience may vary. If you are a long-time user, you might even view the configuration page with that same reassuring nostalgia seeing a Facebook post from your ugly room mate induces. ‘Yup,he is still ugly and backwards, but we had some good times, back then.’ If you are a newer Jenkins user, it may well send you off to search the web for a viable alternative tool. +\n\n+\nThe good news is that CloudBees, in cooperation with the greater Jenkins community, is looking to make some long overdue progress sorting through this user interaction in a way that is both approachable to new users and amenable to existing users who have grown comfortable with a great tool and a ‘stalwart friend’ in a world of otherwise clunky world of IT tools. ( that really is the swiss army knife of build automation.) +\n\n+\n\nIf you happen to have had the opportunity to have attended any of the recent Jenkins User Conferences in Washington, DC, or London, you may have seen Tom and my presentation, which served as our initial introduction of this effort to the Jenkins Community. In this article and the associated video, I will be focusing specifically on the Create and Configuration screens in Jenkins, discussing some of the larger proposed changes, providing some context for the changes and examining their possible repercussions on existing plugins and future plugin development.\n\n+\n+\n\nHistory of Jenkins\n\n+\n\n+\nFor newer Jenkins users, I have found the following visual a helpful guide to understanding the history of Jenkins and how its graphical user interfaces has evolved:\n\n+\n +\nimage:/sites/default/files/images/history-jenkins_590.jpg[Jenkins timeline: a long history] +\n\n+\nThe first thing to notice here, is that Jenkins has been around for a long time and in a lot of ways is really fundamental to the art of creating software. Back in 2005, the then Hudson project was using pretty much the same cave chalk as everyone else. 6 years later, the code and community underwent its most substantial transformation to date, as Jenkins emerged as the dominant fork of the Hudson project. If you look closely, you will see the GUI reflected that transformation by….. changing the picture of the butler. In recent times, the interface has taken a few additional steps forward, most notably by moving to a responsive CSS driven layout from its table based origin, but the pace of these changes has been very much akin to the pace of evolution. Slow. +\n\n+\nIn our next phase of graphic interface development, however, Tom and I are looking to be a little more directed in our efforts and push the GUI toward a blend of strategic and tactical advancements that will help Jenkins take advantage of some of the advances in web design and browser technologies that have happened over the last 10 years. Our first major push will be in the job creation and configuration tasks. +\n\n+\n\nCreating and Configuring\n\n+\n\n[image]\n\n+\n\n+\n\n+\n\nIn addition to a bit of a refresh of the look of these forms, this new effort focuses on the importance of dividing information and presentation into clear categories that ideally are meaningful to both new and veteran users of Jenkins alike.\n\n+\n+\n\nIn some cases, Jenkins has these categories already in the GUI, but misses the mark in clarification and emphasis. In other cases, additional categorizing concepts will need to be added. Compare the above screens to the existing screens.\n\n+\n\n[image]\n\n+\n\n[image]\n\n+\n\nThe first thing you are likely to notice when comparing these two sets of screens is that in the existing screens, there is very little in the way of visual markers segmenting the form input choices on either the item type selection screens (fig 4 vs 2) or the configuration pages (fig 5 vs 3). Adding each new plugin progressively aggravates the situation, and consequently, as your Jenkins installation grows in sophistication and robustness, the average users ability to find the fundamental configuration settings in the sea of ad-hoc options diminishes. While adding functionality typically adds some amount of additional complexity to a UI, by giving each configuration option a visually distinguishable space in the form, the challenge can be greatly diminished and the pattern of creating an ever growing scrolling of toilet paper list of form elements can be avoided.\n\n+\n\nFor figures 2 and 4, you might also notice that I have chosen Jenkins instances that already have several plugins installed as the basis for my example screens. You might rightly argue that for a basic install, there are not a lot of item types to create, so categorizing them adds a needless layer of complexity. Fair enough. It is my belief, though, that our software can be smart enough to count the item types available for creation and count the number within each category and handle the categorization as necessary. Counting and sorting is something that computers do incredibly well and is not the sort of thing busy people need to be overly burdened with.\n\n+\n\nIn addition to the code being intelligent about when to present grouping categories to the user, The screen interaction can be similarly intelligent in how it enables the user to selectively show and hide the categories of interest. The following screenshot shows the configuration page focused in on CVS a particular option configuration in the source code management section of the configuration page. It, in turn, has its own sub settings for additional modules and locations (see fig 6).\n\n+\n\n[image]\n\n+\n\n…​and wait for it…​ …​for comparison, here is today’s CVS settings page…​\n\n+\n\n[image]\n\n+\n\nDespite some serious indentation, the existing page offers significantly less clarity about which settings pertain specifically to CVS instead of other aspects of a Jenkins job.\n\n+\n\n[image]\n\n+\n\nIdentifying which settings go with which segment becomes all the more confusing when sub-sections can be re-ordered. To show you what I mean and fit the screen on a single printed page, I am needing to muck with the aspect ratio of today’s screen.\n\n+\n\nThe image on the left (fig 7) shows a 2 step build process, each with sub parameters.\n\n+\n\nThere are some fascinating looking red delete buttons in here, I hope I know exactly what part of the build step I am about to blow away…​. Did I mention these segments can be re-ordered? Care to guess which form inputs will move with which steps?\n\n+\n\n[image]\n\n+\n\nBy contrast, the above screen shows the same 2 build steps with the same parameters. We still have our friend, Mr. Red Delete button, but now it is a good bit clearer who will get blown away.\nAlso, it is considerably clearer which block will be reordered, should I choose to do so.\n\n+\n\nWhat about plugins?\n\n+\n\nIf you are a long-time Jenkins user, you may have a guess as to why some of these changes have been slow in coming, and if you are a plugin developer, you definitely know. These input controls have a lot of extension points in them that allow plugins to influence the content of this configuration screen. As a result, how plugins will respond to even the most minor layout changes is somewhat of a mystery. Further, the GUI control elements that make up the form are available to plugin authors to embed as they see fit in their own GUI elements. As a consequence, we have some serious compatibility issues ahead. These challenges are not at all trivial.\n\n+\n\nFortunately, however, I believe with some careful manipulation and diligent testing we can overcome these challenges. The first set of changes are likely to revolve around a file called “hudson-behavior.js”. This file does most of the Jenkins client-side UI magic. If there is data to be bound to a control, this is the file that is likely to handle it. The difficulty with this file stems from two factors, its age (it is written following Yahoo UI framework patterns which have since been abandoned by Yahoo and the rest of the industry), and a presumption that the page layout will be governed by a single giant HTML table (likely due to the table renaissance happening around the same time, thanks to the emergence of GWT). Regardless of this bit of history trivia, these two issues combine to make changes to the HTML DOM structure of any Jenkins page problematic. Methods such as “findFollowingTR” assume a very rigid parent-child element positioning based on page layout rather than on the logical relationship between the data elements. The good news here is that despite some of their unfortunate names, can be refactored to both find the relevant element based on today’s table structure as well as a future logical nesting of related elements. With that change in place, Jenkins will continue to function as it always has and a future configuration DOM structure can share the same infrastructure.\n\n+\n\n+\nThe second step here will be finding efficient ways to integrate more modern Javascript libraries, such as JQuery and Bootstrap into the Jenkins GUI. We will want these libraries to be easier and cleaner for plugin authors to access than PrototypeJS and Yahoo UI are today. Likely this will involve using a Browserify/Requirejs like pattern to control script inclusion in page to avoid naming conflicts, excessively file attachment and global space pollution.\n\n+\n\nThe final step would then be to begin amending, replacing and augmenting the Jelly based form control set, and thus, transforming the look and behavior of the Jenkins UI. As always, Jenkins is an open community, and we at CloudBees view that as a cherished cornerstone of our own corporate culture. Thus, at every phase of this undertaking we are eager to solicit feedback from and encourage participation by you the members of the community. Feel free to comment directly on this article. Additionally, I am maintaining and active thread on the Jenkins Developer group ( https://groups.google.com/forum/#!topic/jenkinsci-dev/6BdWZt35dTQ). I am looking forward to hearing from you.","title":"Advancing the Jenkins GUI: Configuring Items in Jenkins","tags":["video","screencast","juc","core","releases","feedback","development","just for fun","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"gusreiber","html":"","id":"gusreiber","irc":null,"linkedin":null,"name":"Gus Reiber","slug":"/blog/authors/gusreiber","twitter":null}]}},{"node":{"date":"2015-07-14T00:00:00.000Z","id":"05213c44-844d-51ea-b951-aeb37606e84b","slug":"/blog/2015/07/14/juseppe-a-custom-update-site-for-jenkins/","strippedHtml":"This is a guest post by Kirill Merkushev at Yandex. I met him at JUC Europe where he showed me the project he was working on: Juseppe. It looked really interesting, so I asked him to write this guest post.\n\nWhen you write your first custom Jenkins plugin for internal use, it’s easy enough to deploy it on one or maybe two Jenkins instances. You can save it on your local drive and upload the HPI file via the Jenkins Plugin Manager as needed. It’s easy to do this for a few releases. But as your experience grows, the number of plugins and their releases grows as well. The plugins directory on your local drive soon looks like a garbage dump, and it’s difficult to find that most recent version of any plugin. And if you have a lot of Jenkins instances coordinating updates of your plugins may cause a lot of pain.\n\nA similar situation is when you contribute a much-needed patch to an existing plugin, but you don’t have the time to wait until your pull request is be merged and a new release is cut. Or you may need to patch a plugin in ways not suitable for distribution, and decide to effectively fork the plugin for use on your Jenkins instances. How are you going to do this?\n\nA solution avoiding the problems from these situations is to set up your own update site to serve your private plugin builds. Juseppe allows you to do this quickly and easily.\n\nWhat is Juseppe?\n\nJuseppe is an acronym for Jenkins Update Site Embedded for Plugin Publishing Easily. Juseppe can help you set up a Jenkins update site in just a few minutes.\n\nFeatures\n\nGenerates signed update-center.json and release-history.json\n\nWorks with HPI files directly (stored in one folder), no need to set up a Maven repository\n\nWatches for changes in the plugin folder and regenerates JSON files when changes are detected\n\nServes generated files and plugin files with built-in Jetty web server\n\nCan be run in a \"generate-only\" mode when you want to use a different web server for these files.\n\nHow can I get Juseppe?\n\nIt ships as a Docker container, or can be built from source. Visit the GitHub project page to learn more. The complete user guide is available in the GitHub project wiki.","title":"Juseppe, a custom update site for Jenkins","tags":["general","guest post"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2015-07-09T00:00:00.000Z","id":"10658ee5-476b-5fc3-aa1e-ac4d61fb01b5","slug":"/blog/2015/07/09/jenkins-user-event-scandinavia-2015/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/jues_0.png[image,width=270,height=181] +\n\n+\n+\n\nFor the 4th consecutive year the Jenkins CI community is gathering in Scandinavia. JUES inspires both current as well as soon-to-be Jenkins users to network and harness inspiration from peers and experts on best practice and implementation of Continuous Integration, Continuous Delivery, and agile development with Jenkins.\n\n+\n+\n\nAs always we’ll precede the JUES conference with a Code Camp on the day before. The Code Camp is a full day community event where developers learn from fellow developers on coding and plugin enhancement, all delivered back to the community.\n\n+\n+\n\nWe welcome you and other leading Jenkins developers, QA, DevOps, and operations personnel to this years Scandinavian Jenkins CI festival hoping to continuously support the growth of the Jenkins Open Source community.\n\n+\n+\n\nREGISTER FOR JUES HERE","title":"Jenkins User Event Scandinavia 2015","tags":["general"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman","twitter":null}]}},{"node":{"date":"2015-06-22T00:00:00.000Z","id":"0d6ef858-0d8a-57e0-9351-e15f94b7e563","slug":"/blog/2015/06/22/new-wiki-url-requirement-for-plugins/","strippedHtml":"Let’s say you’re browsing the 'Available' tab in the Jenkins plugin manager for interesting-looking plugins. How do you learn more about them, preferably without installing them on your production instance? You click the plugin’s name, which usually links to the plugin’s wiki page, of course!\n\nUnfortunately, it’s possible for plugins to be published without a wiki page, or any other documentation aside from what’s provided in the plugin itself. This is really unfortunate, as users rely on wiki pages and similar documentation to learn more about a plugin before installing or upgrading it, like its features, limitations, or recent changes. Additionally, plugin wiki pages have a special section at the top that provides an automatically generated technical overview of the plugin, such as dependencies to other plugins, the minimum compatible Jenkins version, a list of developers, and links to the source code repository and issue tracker component. Everyone learning about or using a plugin benefits from a plugin wiki page and luckily, almost all plugins have one!\n\nTo ensure that every plugin has at least a basic wiki page with some documentation, we decided to only publish plugins in the Jenkins update center that have and link to a wiki page. To keep the impact to a minimum, we’re implementing this plan in several stages.\n\nThe first stage went live on June 1: All existing plugins that don’t have a (valid) wiki link got a wiki link assigned by the update center (a so-called 'override'), either to an existing wiki page if there was one, or a generic\"This plugin has no documentation\" wiki page otherwise. This ensures that no currently existing plugins get dropped from the update center at this point. Of course, new plugins that don’t provide a wiki URL and don’t have an override URL will not show up at all.\n\nThe second stage will be enabled later this year: We’re planning to remove all the overrides mentioned above. At this point, plugins may get removed from the update center if they still don’t specify a wiki URL. Of course this isn’t our goal, and we’ll try to work with plugin authors to prevent this from happening.\n\nSo what can you do? Check the current overrides list to see whether the plugins you care about are affected, and if so, see the landing page in the wiki to learn what you can do. If you have any questions about this process not covered by the wiki, ask us on the Jenkins developers mailing list.","title":"New Wiki URL Requirement for Plugins","tags":["general","meta","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2015-06-16T00:00:00.000Z","id":"bb00962d-9ecc-5482-aaa6-1cfbbc15c783","slug":"/blog/2015/06/16/juc-speaker-blog-series-martin-hobson-juc-u-s-east/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Jenkins_Butler_0.png[image,width=114,height=128] +\n\n+\n+\n\nI’ve been using Jenkins for some time now as the build server for the various projects that are assigned to our four-person software development team, but recently I had exposure to how things were done in a much larger team, and I came away with a better understanding of the kinds of demands that are placed on a build pipeline in these environments. It was quite an education – while the CI pipelines that I administer in our small team might require a handful of virtual machines in our corporate cloud, the pipeline in this team supported over one hundred developers and required several hundred VM instances at any given time.\n\n+\n+\n\nWhen operating at this scale, efficiency does become important, as the Amazon cloud charges add up and become significant at this level. Using some relatively simple techniques, I was able to gain insight into what actually happened in the more complex build jobs and learned just how these VM instances were utilized. These build jobs configured over a dozen virtual machines each, and understanding the startup and execution flows was critical to making changes and improving efficiencies. I will be discussing how to instrument and analyze these complex builds in my Lightning Talk:\"Visualizing VM Provisioning with Jenkins and Google Charts” and hope to see you all there!\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/01-02-1615-hobson_0.jpg[image,width=152,height=182] +\n\n+\n+\n\nThis post is by Martin Hobson, Senior Software Developer at Agilex Technologies. If you have your ticket to JUC U.S. East, you can attend his lightning talk\"Visualizing VM Provisioning with Jenkins and Google Charts\" on Day 1.\n\n+\n+\n\nJUC IS HERE! JUC U.S. East will begin with registration at 7AM, Thursday June 18. The two day conference is sure to be a blast! If you have not registered, you can still get a ticket! Check out the agenda for JUC U.S. East here and find the link to register.\n\n+\n+\n+\n+\n\nThank you to our sponsors for the 2015 Jenkins User Conference World Tour:\n\n+\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/sponsors-06032015-02_0.png[image,width=598,height=579] +","title":"JUC Speaker Blog Series: Martin Hobson, JUC U.S. East","tags":["general"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":496,"numPages":100,"currentPage":63}},
    "staticQueryHashes": ["3649515864"]}