{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/39",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2017-04-27T00:00:00.000Z","id":"c3440bc5-c7e2-5c2b-b6e6-f923222e2902","slug":"/blog/2017/04/27/colombia/","strippedHtml":"The Jenkins project has learned that a company is trying to register \"Jenkins\" as a trademark in Colombia. This is alarming for us, and we are trying to oppose it. In order to do this effectively, we need to hear from Colombian users of Jenkins.\n\nFigure 1. South American visitors to jenkins.io for 2017\n\nThe Jenkins project owns a trademark \"Jenkins\" in the U.S., through a non-profit entity SPI Inc. According to experts on the subject citing the \"Washington Convention\", our trademark registration in the U.S. does give us some strength in the argument to oppose this. To successfully mount this argument however, we need to be able to show that Jenkins has significant usage and awareness in Colombia. Users, installations, meetups, conference talks, anything of that nature will help.\n\nThose of you with the project for a long time might recall that the name \"Jenkins\" was born because of a trademark issue with Oracle. So we are particularly sensitive to the issue is trademarks. We want to make sure the same tragedy won’t happen again.\n\nIf you know anything about the usage and the name recognition of Jenkins in Colombia, please let us know by submitting the information here . We know that Jenkins is popular in Colombia, because our website traffic shows that Colombian Jenkins users are the third most frequent visitors to jenkins.io in South America after Brazil and Argentina.\n\nThis information will be only shared with the Jenkins project board and those involved in the defense, and for the sole purpose of defending the trademark and nothing more.\n\nPlease help us spread the word. Thanks!\n\nEl proyecto Jenkins se ha enterado de que una compañía está intentando registrar \"Jenkins\" como marca registrada en Colombia. Esto es alarmante y estamos tratando de oponernos. Para hacerlo de manera efectiva, necesitamos escuchar a los usuarios colombianos de Jenkins.\n\nEl proyecto Jenkins posee una marca registrada \"Jenkins\" en los Estados Unidos, a través de una entidad sin ánimo de lucro SPI Inc. Según los expertos en la materia citando la \"Convención de Washington\", nuestro registro de marca en los EE.UU. nos da algo de fuerza para oponernos. Sin embargo, para argumentar con éxito, tenemos que ser capaces de demostrar que Jenkins tiene un uso significativo y es conocido en Colombia. Usuarios, instalaciones, encuentros, conferencias, cualquier cosa de ese tipo ayudará.\n\nAquellos que llevan mucho tiempo con el proyecto pueden recordar que el nombre \"Jenkins\" nació debido a un problema de marca con Oracle. Por lo tanto, estamos especialmente sensibles al tema de las marcas registradas. Queremos asegurarnos de que el mismo problema no vuelva a ocurrir.\n\nSi sabe algo sobre el uso y el reconocimiento del nombre Jenkins en Colombia, por favor háganoslo saber enviando la información aquí . Sabemos que Jenkins es popular en Colombia, porque nuestro sitio web de tráfico muestra que los usuarios colombianos de Jenkins son los terceros visitantes más frecuentes a jenkins.io en América del Sur después de Brasil y Argentina.\n\nEsta información sólo se compartirá con el comité de proyecto de Jenkins y los involucrados en la defensa, y con el único propósito de defender la marca y nada más.\n\nPor favor, ayúdenos a difundir la palabra. ¡Gracias!","title":"Calling for Colombian Jenkins users!","tags":["feedback","general"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2017-04-26T00:00:00.000Z","id":"d81f1582-c3e8-5662-bd12-92e53401c9f2","slug":"/blog/2017/04/26/security-advisory/","strippedHtml":"We just released security updates to Jenkins, versions 2.57 and 2.46.2, that fix several security vulnerabilities, including a critical one.\n\nThat critical vulnerability is an unauthenticated remote code execution via the remoting-based CLI.\nWhen I announced the fix for the previous vulnerability of this kind, I announced our plans to revisit the design of the CLI that enabled this class of vulnerabilities.\n\nSince Jenkins 2.54, we now have a new CLI implementation that isn’t based on remoting, and deprecated its remoting mode.\nDespite it being a major feature, we decided to backport it to 2.46.2, so LTS users can also disable the unsafe remoting mode while retaining almost all of the CLI’s existing functionality.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\nI recommend you read these documents, especially if you’re using the CLI with Jenkins LTS, as there are possible side effects of these fixes.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Important security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-04-20T00:00:00.000Z","id":"1824bec7-be57-5f54-a27b-537ad8ff5a34","slug":"/blog/2017/04/20/secure-jenkins-on-azure/","strippedHtml":"This is a guest post by Claudiu Guiman and Eric Jizba,\nSoftware Engineers in the Azure DevOps team at Microsoft. If you have any questions, please email us at azdevopspub@microsoft.com.\n\nOne of the most frequently asked questions for managing a Jenkins instance is\n\"How do I make it secure?\" Like any other web application, these issues must be\nsolved:\n\nHow do I securely pass secrets between the browser and the server?\n\nHow do I hide certain parts from unauthorized users and show other parts to anonymous users?\n\nThis blog post details how to securely connect to a Jenkins instance and how to\nsetup a read-only public dashboard.  We’ll cover topics like: setting up a\nreverse proxy, blocking inbound requests to certain URLs and ports, enabling\nproject-based authorization, and making the Jenkins agents accessible through\nthe JNLP protocol.\n\nDeploy Jenkins\n\nThe simplest way to deploy a secure Jenkins instance is by using the Azure Marketplace offer. If you have an existing Jenkins instance or want to setup your instance manually, follow the steps below.\n\nSecurely log in to Jenkins\n\nAfter you’ve deployed your new virtual machine with a hosted Jenkins instance, you will notice that by default the instance listens on port 8080 using 'HTTP'. If you want to set up 'HTTPS' communication, you will need to provide an SSL certificate. Unfortunately, most certificate authorities are not cheap and other free services like Let’s Encrypt have a very small quota (about 20 certificates per week for the entire 'azure.com' subdomain). The only other option is to use a self-signed certificate, but then users must explicitly verify and mark your certificate as trusted, which is not recommended.\n\nIf you do not setup 'HTTPS' communication, the best way to make sure the sign-in credentials are not leaked due to a Man-in-the-middle attack is to only log in using SSH tunneling.\nAn SSH tunnel is an encrypted tunnel created through an SSH protocol connection, which can be used to transfer unencrypted traffic over an unsecured network. Simply run this command:\n\nLinux or Mac\n\nssh -L 8080:localhost:8080 @\n\nWindows ( using PuTTY)\n\nputty.exe -ssh -L 8080:localhost:8080 @\n\nThis command will open an SSH connection to your remote host and bind remote port 8080 to listen to requests coming from your local machine. Navigate to http://localhost:8080 on your local machine to view your Jenkins dashboard and you’ll be able to log in securely.\n\nSetup a reverse proxy\n\nNow that you can securely log in to your Jenkins instance, you should prevent people from accidentally authenticating through the public (unsecured) interface. To achieve this, you can setup a reverse proxy on the Jenkins hosting machine that will listen on a different port (80 is the best candidate) and redirect only certain requests to port 8080.\n\nSpecifically, it is recommended to block the login and the CLI requests. Some CLI versions fall back to unsecure HTTP connections if they have problems establishing the secured connection. In most cases, users don’t need the CLI and it should be enabled on an as-needed basis.\n\nInstall Nginx:\n\nsudo apt-get update\nsudo apt-get install nginx\n\nOpen the Nginx config file:\n\nsudo nano /etc/nginx/sites-enabled/default\n\nModify the file to configure Nginx to work as a reverse proxy (you’ll need to update):\n\nserver {\n    listen 80;\n    server_name;\n    # Uncomment the line bellow to change the default 403 error page\n    # error_page 403 /secure-jenkins;\n    location / {\n        proxy_set_header        Host \\$host:\\$server_port;\n        proxy_set_header        X-Real-IP \\$remote_addr;\n        proxy_set_header        X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto \\$scheme;\n        proxy_pass              http://localhost:8080;\n        proxy_redirect          http://localhost:8080 http://;\n        proxy_read_timeout      90;\n    }\n    #block requests to /cli\n    location /cli {\n        deny all;\n    }\n    #block requests to /login\n    location ~ /login* {\n        deny all;\n    }\n    # Uncomment the lines bellow to redirect /secure-jenkins\n    #location /secure-jenkins {\n    #  alias /usr/share/nginx/secure-jenkins;\n    #}\n}\n\nThe first section tells the Nginx server to listen to any requests that come from port 80. It also contains a commented redirect of the 403 error to a custom location (we’ll get back to this later).\n\nlisten 80;\n    server_name;\n    # error_page 403 /secure-jenkins;\n\nThe next section describes the reverse proxy configuration. This tells the Nginx server to take all incoming requests and proxy them to the Jenkins instance that is listening to port 8080 on the local network interface.\n\nlocation / {\n        proxy_set_header        Host \\$host:\\$server_port;\n        proxy_set_header        X-Real-IP \\$remote_addr;\n        proxy_set_header        X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto \\$scheme;\n        proxy_pass              http://localhost:8080;\n        proxy_redirect          http://localhost:8080 http://;\n        proxy_read_timeout      90;\n    }\n\nThe last section filters out specific URLs (login, cli) and denies access to them.\n\nlocation /cli {\n        deny all;\n    }\n    location ~ /login* {\n        deny all;\n    }\n\nRestart Nginx:\n\nsudo service nginx restart\n\nGo to http:// and verify you can access your Jenkins instance.\n\nVerify clicking 'login' returns a '403 Forbidden' page. If you want to customize that page, update the Nginx configuration and remove the comments around /secure-jenkins. This will redirect all 403 errors to the file /usr/share/nginx/secure-jenkins. You can add any content to that file, for example:\n\nsudo mkdir /usr/share/nginx/secure-jenkins\necho \"Access denied! Use SSH tunneling to log in to your Jenkins instance!\" | sudo tee /usr/share/nginx/secure-jenkins/index.html\n\nIf restart fails or you cannot access your instance, check the error log: cat /var/log/nginx/error.log\n\nSecure your Jenkins dashboard\n\nIf you go to http:// :8080 you’ll notice you can still\nbypass the reverse proxy and access the Jenkins instance directly through an\nunsecure channel. You can easily block all inbound requests on port 8080 on\nAzure with a\nNetwork\nSecurity Group (NSG).\n\nCreate the NSG and add it to your existing network interface or to the subnet your Azure Virtual Machine is bound to.\n\nAdd 2 inbound security rules:\n\nAllow requests to port 22 so you can SSH into the machine.\n\nAllow requests to port 80 so the reverse proxy can be reached\n\nBy default, all other external traffic will be blocked\n\nNavigate to http:// :8080 and verify you cannot connect.\n\nIf you don’t want to deploy an Azure Network Security Group, you can block port 8080 using the Uncomplicated Firewall (ufw)\n\nConfigure read-only access to your dashboard\n\nAfter installing Jenkins, the default security strategy is 'Logged-in users can do anything'. If you want to allow read-only access to anonymous users, you need to set up Matrix-based security. In this example, we’ll set up a project-based authorization matrix, so that you can make certain projects private and others public.\n\nInstall the Matrix Authorization Strategy Plugin and restart Jenkins.\n\nGo to http://localhost:8080/configureSecurity/ ('Configure Global Security' page under 'Manage Jenkins') and select 'Project-base Matrix Authorization Strategy' from the 'Authorization' options.\n\nAs an example, you can grant read-only access to anonymous users (Overall/Read, Job/Discover and Job/Read should be enough) and grant all logged in users full access in a  group called 'authenticated':\n\nConnect JNLP-based agents\n\nSince your Jenkins instance is only accessible through the reverse proxy on port 80, any Jenkins agents that use the JNLP protocol will not be able to register to the controller anymore. To overcome this problem, all agents must be in the same virtual network as the Jenkins controller and must connect using their private IP (by default, the NSG allows all internal traffic).\n\nMake sure that the Jenkins virtual machine will always be assigned the same private IP by going to the Azure Portal, opening the Network Interface of your virtual machine, opening 'IP configuration', and clicking on the configuration.\n\nMake sure the Private IP has a static assignment and restart the virtual machine if necessary.\n\nCopy the static IP Address and go to http://localhost:8080/configure ('Configure System' page under 'Manage Jenkins') and update the 'Jenkins URL' to point to that private IP ( https://10.0.0.5:8080/ in this example)\n\nNow agents can communicate through JNLP. If you want to streamline the process,\nyou can use the\nAzure VM Agents plugin,\nwhich automatically deploys agents in the same virtual network\nand connects them to the controller.","title":"Securing a Jenkins instance on Azure","tags":["azure","cloud"],"authors":[{"avatar":null,"blog":null,"github":"clguimanMSFT","html":"","id":"clguiman","irc":null,"linkedin":null,"name":"Claudiu Guiman","slug":"/blog/authors/clguiman","twitter":null}]}},{"node":{"date":"2017-04-18T00:00:00.000Z","id":"714ef576-2af6-5d69-a880-a3280836f4e4","slug":"/blog/2017/04/18/continuousdelivery-devops-sonarqube/","strippedHtml":"This is a guest post by Michael Hüttermann. Michael is an expert\nin Continuous Delivery, DevOps and SCM/ALM. More information about him at huettermann.net, or\nfollow him on Twitter: @huettermann.\n\nContinuous Delivery and DevOps are well known and widely spread practices nowadays. It is commonly accepted that it\nis crucial to form great teams and define shared goals first and then choose and integrate the tools fitting best to\ngiven tasks. Often it is a mashup of lightweight tools, which are integrated to build up Continuous Delivery pipelines\nand underpin DevOps initiatives. In this blog post, we zoom in to an important part of the overall pipeline, that is the discipline\noften called Continuous Inspection, which comprises inspecting code and injecting a quality gate on that, and show how artifacts can\nbe uploaded after the quality gate was met. DevOps enabler tools covered are Jenkins, SonarQube, and Artifactory.\n\nThe Use Case\n\nYou already know that quality cannot be injected after the fact, rather it should be part of the process and product from the very beginning.\nAs a commonly used good practice, it is strongly recommended to inspect the code and make findings visible, as soon as possible.\nFor that SonarQube is a great choice. But SonarQube is not just running on any isolated\nisland, it is integrated in a Delivery Pipeline. As part of the pipeline, the code is inspected, and only if the code is fine according to defined\nrequirements, in other words: it meets the quality gates, the built artifacts are uploaded to the binary repository manager.\n\nLet’s consider the following scenario. One of the busy developers has to fix code, and checks in changes to the central\nversion control system. The day was long and the night short, and against all team commitments the developer\ndid not check the quality of the code in the local sandbox. Luckily, there is the build engine Jenkins\nwhich serves as a single point of truth, implementing the Delivery Pipeline with its native pipeline features, and as a handy coincidence\nSonarQube has support for Jenkins pipeline.\n\nThe change triggers a new run of the pipeline. Oh no! The build pipeline broke, and the change is not further processed.\nIn the following image you see that a defined quality gate was missed. The visualizing is done with Jenkins Blue Ocean.\n\nSonarQube inspection\n\nWhat is the underlying issue? We can open the SonarQube web application and drill down to the finding. In the Java code, obviously a string literal is not placed on the right side.\n\nDuring a team meeting it was decided to define this to be a Blocker, and SonarQube was configured accordingly. Furthermore, a SonarQube quality gate was created to break any build, if a blocker was identified. Let’s now quickly look into the code.\nYes, SonarQube is right, there is the issue with the following code snippet.\n\nWe do not want to discuss in detail all used tools, and also covering the complete Jenkins build job would be out of scope.\nBut the interesting extract here in regard of the inspection is the following stage defined in Jenkins pipeline DSL:\n\nconfig.xml: SonarQube inspection\n\nstage('SonarQube analysis') { (1)\nwithSonarQubeEnv('Sonar') { (2)\nsh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar ' + (3)\n'-f all/pom.xml ' +\n          '-Dsonar.projectKey=com.huettermann:all:master ' +\n          '-Dsonar.login=$SONAR_UN ' +\n          '-Dsonar.password=$SONAR_PW ' +\n          '-Dsonar.language=java ' +\n          '-Dsonar.sources=. ' +\n          '-Dsonar.tests=. ' +\n          '-Dsonar.test.inclusions=**/*Test*/** ' +\n          '-Dsonar.exclusions=**/*Test*/**'\n        }\n    }\n\n1\nThe dedicated stage for running the SonarQube analysis.\n\n2\nAllow to select the SonarQube server you want to interact with.\n\n3\nRunning and configuring the scanner, many options available, check the docs.\n\nMany options are available to integrate and configure SonarQube. Please consult the documentation for alternatives. Same applies to the other covered tools.\n\nSonarQube Quality Gate\n\nAs part of a Jenkins pipeline stage, SonarQube is configured to run and inspect the code. But this is just the first part,\nbecause we now also want to add the quality gate in order to break the build. The next stage is covering exactly that, see\nnext snippet. The pipeline is paused until the quality gate is computed, specifically the waitForQualityGate step will pause the\npipeline until SonarQube analysis is completed and returns the quality gate status. In case a quality gate was missed, the build breaks.\n\nconfig.xml: SonarQube Quality Gate\n\nstage(\"SonarQube Quality Gate\") { (1)\ntimeout(time: 1, unit: 'HOURS') { (2)\ndef qg = waitForQualityGate() (3)\nif (qg.status != 'OK') {\n             error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n           }\n        }\n    }\n\n1\nThe defined quality gate stage.\n\n2\nA timeout to define when to proceed without waiting for any results for ever.\n\n3\nHere we wait for the OK. Underlying implementation is done with SonarQube’s webhooks feature.\n\nThis blog post is an appetizer, and scripts are excerpts. For more information, please consult the respective documentation, or a good book, or the great community, or ask your local expert.\n\nSince they all work in a wonderful Agile team, the next available colleague just promptly fixes the issue. After checking in\nthe fixed code, the build pipeline runs again.\n\nThe pipeline was processed successfully, including the SonarQube quality gate, and as the final step, the packaged and tested artifact was\ndeployed to Artifactory. There are a couple of different flexible ways how to upload the artifacts,\nthe one we use here is using an upload spec to actually collect and upload the artifact which was built at the very beginning of the pipeline.\nAlso meta information are published to Artifactory, since it is the context which matters and thus we can add valuable labels to the artifact for further processing.\n\nconfig.xml: Upload to Artifactory\n\nstage ('Distribute binaries') { (1)\ndef SERVER_ID = '4711' (2)\ndef server = Artifactory.server SERVER_ID\n    def uploadSpec = (3)\"\"\"\n    {\n    \"files\": [\n        {\n            \"pattern\": \"all/target/all-(*).war\",\n            \"target\": \"libs-snapshots-local/com/huettermann/web/{1}/\"\n        }\n      ]\n    }\n    \"\"\"\n    def buildInfo = Artifactory.newBuildInfo() (4)\nbuildInfo.env.capture = true (5)\nbuildInfo=server.upload(uploadSpec) (6)\nserver.publishBuildInfo(buildInfo) (7)\n}\n\n1\nThe stage responsible for uploading the binary.\n\n2\nThe server can be defined Jenkins wide, or as part of the build step, as done here.\n\n3\nIn the upload spec, in JSON format, we define what to deploy to which target, in a fine-grained way.\n\n4\nThe build info contains meta information attached to the artifact.\n\n5\nWe want to capture environmental data.\n\n6\nUpload of artifact, according to upload spec.\n\n7\nBuild info are published as well.\n\nNow let’s see check that the binary was deployed to Artifactory, successfully. As part of the context information, also a reference to the\nproducing Jenkins build job is available for better traceability.\n\nSummary\n\nIn this blog post, we’ve discovered tips and tricks to integrate Jenkins with SonarQube, how to define\nJenkins stages with the Jenkins pipeline DSL, how those stages are visualized with Jenkins Blue Ocean, and how the artifact\nwas deployed to our binary repository manager Artifactory.\nNow I wish you a lot of further fun with your great tools of choice to implement your Continuous Delivery pipelines.\n\nReferences\n\nJenkins 2\n\nSonarqube\n\nSonarqube Jenkins plugin\n\nArtifactory\n\nJenkins Artifactory plugin\n\n'DevOps for Developers', Apress, 2012\n\n'Agile ALM', Manning, 2011","title":"Delivery Pipelines, with Jenkins 2, SonarQube, and Artifactory","tags":["quality","sonarqube","jenkins","artifactory"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg","srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/534e5/michaelhuettermann.jpg 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/99887/michaelhuettermann.jpg 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/76fd4/michaelhuettermann.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/59a6b/michaelhuettermann.webp 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/cbb78/michaelhuettermann.webp 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/96250/michaelhuettermann.webp 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/50511/michaelhuettermann.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}}},"blog":"http://huettermann.net","github":"michaelhuettermann","html":"<div class=\"paragraph\">\n<p>Michael is expert in Continuous Delivery, DevOps and SCM/ALM supporting enterprises in implementing DevOps.\nMichael is Jenkins Ambassador.</p>\n</div>","id":"michaelhuettermann","irc":null,"linkedin":null,"name":"Michael Hüttermann","slug":"/blog/authors/michaelhuettermann","twitter":"huettermann"}]}},{"node":{"date":"2017-04-12T00:00:00.000Z","id":"00912854-e420-592f-b78c-f52234cabf9a","slug":"/blog/2017/04/12/jenkinsworld-agenda-announced/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nI am excited to announce the agenda for\nJenkins World 2017. This\nyear’s event promises to have something for everyone - whether you are a\nnovice, intermediate, or advanced user…​you are covered.  Jenkins World 2017\nconsists of 6 tracks, 60+ Jenkins and DevOps sessions, 40+ industry speakers,\n16+ training and workshops.\n\nHere is a sneak peek at Jenkins World 2017:\n\nShow 'n Tell\n\nIt’s all about that demo. These sessions are technically advanced with some code sharing, heavy on demos and just a tad bit of slides.\n\nPlugin Development for Pipeline\n\nExtending Blue Ocean\n\nHow to Use Jenkins Less: How and Why You Can Minimize Your Jenkins Footprint\n\nJenkins Pipeline on your Local Box to Reduce Cycle Time\n\nWar Stories\n\nThese are first-hand Jenkins experience and lessons learned. These stories will inspire your innovative solutions.\n\nPipelines At Scale: How Big, How Fast, How Many?\n\nJenkinsPipelineUnit: Test Your Continuous Delivery Pipeline\n\nCodifying the Build and Release Process with a Jenkins Pipeline Shared Library\n\nJumping on the Continuous Delivery Bandwagon: From 100+ FreeStyle Jobs to Pipeline(s) - Tactics, Pitfalls and Woes\n\nTrainings and Workshops\n\n(additional fees apply to certain trainings/workshops)\n\nIntroduction to Jenkins\n\nIntroduction to Plugin Development\n\nLet’s Build a Jenkins Pipeline!\n\nFundamentals of Jenkins and Docker\n\nThe Jenkins World agenda is packed\nwith even more sessions, it will be a very informational event.\n\nConvince your Boss\n\nWe know that attending Jenkins World needs little convincing but just in case\nyou need a little help to justify your attendance, we’ve created a\nJustify your Trip\ndocument to help speed up the process.\n\nRegister for Jenkins World\n2017 with the code JWATONG for a 20% discount off your pass.\n\nHope to see you there!","title":"Jenkins World 2017 Agenda is Live!","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2017-04-12T00:00:00.000Z","id":"de6a7833-33e4-5a1b-8942-62eba9d0e88e","slug":"/blog/2017/04/12/welcome-to-blue-ocean-dashboard/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI used the Blue Ocean Activity View to track the state of branches and\nPull Requests in one project.\nIn this video, I’ll use the Blue Ocean Dashboard get a personalized view of the\nareas that of my project that are most important to me,\nand also to monitor multiple projects.\nPlease Enjoy!","title":"Getting Started with the Blue Ocean Dashboard","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-11T00:00:00.000Z","id":"a9284a81-2902-5a91-9618-c11ceca70747","slug":"/blog/2017/04/11/new-cli/","strippedHtml":"In response to the zero-day vulnerability we fixed in November, I wrote the following:\n\nMoving forward, the Jenkins security team is revisiting the design of the Jenkins CLI over the coming weeks to prevent this class of vulnerability in the future.\nIf you are interested in participating in that discussion, please join in on the jenkinsci-dev@ mailing list.\n\nIn early February, several project contributors met after FOSDEM for a one day hackathon.\nI looked into the feasibility of a purely SSH-based CLI.\nWhile I considered the experiment to be a success, it was far from ready to be used in a production environment.\n\nA few weeks later, long-time contributor and Jenkins security team member Jesse Glick took over, and published a detailed proposal for a new, simple CLI protocol without remoting.\n\nIn just a month, he implemented his proposal, and I’m very happy to announce that this new implementation of the Jenkins CLI has now made it into 2.54!\n\nExisting jenkins-cli.jar clients should continue working as before, unless an administrator disables the remoting connection mode in Configure Global Security.\nThat said, we recommend you download the new jenkins-cli.jar in Jenkins, and use its new -http mode.\nWith few (now deprecated) exceptions, CLI commands work like before.\nThis will allow you to disable the remoting mode for the CLI on the Jenkins controller to prevent similar vulnerabilities in the future.\n\nSSH-based CLI use should be unaffected by this change.\nNote that new Jenkins instances now start with the SSH server port disabled, and the configuration option for that was moved into Configure Global Security.\n\nYou can learn all about the CLI and its new behavior in the Jenkins handbook.","title":"New, safer CLI in 2.54","tags":["plugins","security","remoting"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-04-11T00:00:00.000Z","id":"9d6e30d7-7295-5fb0-b863-4e1db0a6fa14","slug":"/blog/2017/04/11/welcome-to-blue-ocean-pipeline-activity/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI showed how easy it is to create and edit Declarative Pipelines using the Blue Ocean Visual Pipeline Editor.\nIn this video, I’ll use the Blue Ocean Activity View to track the\nstate of branches and Pull Requests in one project.\nBlue Ocean makes it so much easier to find the logs I need to triage failures.\n\nPlease Enjoy!  In my\nnext video,\nI’ll switch from looking at a single project to monitoring multiple projects with\nthe Blue Ocean Dashboard.","title":"Getting Started with Blue Ocean's Activity View","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}}]}},"pageContext":{"limit":8,"skip":304,"numPages":100,"currentPage":39}},
    "staticQueryHashes": ["3649515864"]}