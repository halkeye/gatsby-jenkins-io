{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/20",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-05-09T00:00:00.000Z","id":"38964a5b-f559-5f17-9f39-7c96117907bb","slug":"/blog/2019/05/09/chinese-localization/","strippedHtml":"Since 2017, I started to do some contributions to the Jenkins community. As a beginner, translation might be\nthe easiest way to help the project. You don’t need to understand the whole context, even to create a ticket in the\nissue tracker system. Improvement of localization usually is minor. But some problems occurred soon,\nthere isn’t a native speaker of Chinese that could review my PRs. So, sometimes my PRs\nare delayed from being merged into master.\n\nSome contributors told me that I can start a thread at the mailing list. Normally, discussing at the mailing list\nis the open source community way. We got a lot of ideas for the localization from there. As a result,\nwe achieved some goals that I’d like to share here.\n\nJEP-216\n\nPreviously, language localization files were distributed in core and in each plugin.\nFor this proposal, each language has a single localization plugin, such as Chinese Localization plugin.\nFinally, Localization Support Plugin and\nChinese Localization plugin are able to support\nall types of localization resource files. From the plugins website,\nyou can see that there are already 13 000 installations.\nWe removed all Chinese localization files at the PR-4008.\n\nI really appreciate Daniel Beck for helping me to add localization support,\nLiam Newman helping me to review JEP-216, and many other community members.\n\nChinese Localization SIG\n\nWe believe that this SIG could help to improve Jenkins experience for Chinese users and gather more contributors\nfrom China. This SIG is responsible for maintaining the Chinese Jenkins website,\npromoting the Jenkins community in China in the social media with WeChat account. We publish translated blog\narticles, Jenkins release notes, JAM or other events at the WeChat account. For now, there are 1800 followers that can\nread our news from the last half a year.\n\nEspecially, I want to say thanks to Wang Donghui, Zhai Zhijun, and other contributors. They did a lot of contributions.\nI wish I could see more and more folks join us.","title":"A Big Step of the Chinese Localization","tags":["general","community","localization","chinese"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#989898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg","srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/77b35/linuxsuren.jpg 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/d4a57/linuxsuren.jpg 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/68974/linuxsuren.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/ef6ff/linuxsuren.webp 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/8257c/linuxsuren.webp 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/6766a/linuxsuren.webp 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/22bfc/linuxsuren.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"LinuxSuRen","html":"<div class=\"paragraph\">\n<p>Rick is a big fan of Jenkins, also as a contributor leading the Jenkins China community.</p>\n</div>","id":"linuxsuren","irc":null,"linkedin":"linuxsuren","name":"赵晓杰(Rick)","slug":"/blog/authors/linuxsuren","twitter":"LinuxSuRen"}]}},{"node":{"date":"2019-05-09T00:00:00.000Z","id":"8e971fb0-7d4b-559d-a327-05b99fb4739e","slug":"/blog/2019/05/09/templating-engine/","strippedHtml":"Implementing DevSecOps practices at the enterprise scale is challenging. With multiple programming languages, automated testing frameworks, and security compliance tools being used by different applications within your organization, it becomes difficult to build and maintain pipelines for each team.\n\nMost pipelines are going to follow the same generic workflow regardless of which specific tech stack is employed by an application.  The Templating Engine Plugin (abbreviated as JTE for Jenkins Templating Engine) allows you to capture this efficiency by creating tool-agnostic, templated workflows to be reused by every team.\n\nAs technology consultants with clients in both the public and private sectors, at Booz Allen we found ourselves building DevSecOps pipelines from scratch for every new project.  Through developing the Jenkins Templating Engine, we’ve seen pipeline development decrease from months to days now that we can reuse tool integrations while bringing a new level of governance to Jenkins pipelines.\n\nPipeline Templating\n\nOrganizations benefit from letting application developers focus on what they do best: building applications. Supporting this means building a centralized DevOps team responsible for maintaining platform infrastructure and creating CI/CD pipelines utilized by development teams.\n\nWith the rise of microservice-based architectures, a centralized DevOps teams can support many different development teams simultaneously; all of whom may be leveraging different programming languages and automated testing tools.\n\nWhile the tools may differ between development teams, the workflow is often the same: unit test, static code analysis, build and publish an artifact, deploy it, and then perform different types of testing against the deployed application.\n\nThe Templating Engine Plugin allows you to remove the Jenkinsfile from each repository by defining a common workflow for teams to inherit.  Instead of an entire pipeline definition in each repository, teams supply a configuration file specifying which tools to use for the workflow.\n\nJTE in Action\n\nLet’s walk through a bare bones example to demonstrate the reusability of templates:\n\nExample Pipeline Template:\n\nunit_test()\nbuild()\nstatic_code_analysis()\n\nTemplates leverage Steps contributed by Libraries to outline a workflow teams must implement.  While a template does get executed just like any other Jenkinsfile (meaning that the standard scripted and declarative syntax is supported), the goal of a template should be to read like plain English and avoid any technical implementation.\n\nLeveraging templates in this way lets you separate the business logic (what should happen when) of your pipeline from the\ntechnical implementation (what’s actually going to happen).  The result of this is a CI/CD pipeline that’s proven to be\nsignificantly easier to manage when supporting multiple teams simultaneously.\n\nThe steps outlined by this template ( unit_test, build, and static_code_analysis) have been named generically on purpose. This way teams can specify different libraries to use while sharing the same pipeline.\n\nImplementing the Template\n\nImplementing a shareable pipeline with the Templating Engine requires a few key components:\n\nPipeline Template : Outline the workflow to be performed\n\nLibraries : Provide technical implementations of the steps of the workflow\n\nConfiguration Files : Specify which libraries to use and their configuration\n\nStep 1: Create a Pipeline Configuration Repository\n\nA Pipeline Configuration Repository is used to store common configurations and pipeline templates inherited by teams.\n\nThis example Pipeline Configuration Repository will later be configured as part of a Governance Tier : the mechanism in JTE that allows you to build hierarchical configurations representing your organization.\n\nA Governance Tier holds three things:\n\nPipeline Templates\n\nA list of Library Sources\n\nThe tier’s configuration file ( pipeline_config.groovy)\n\nThe pipeline templates and the configuration file for a Governance Tier are stored in the pipeline configuration repository.\n\nWhen configuring the Governance Tier in Jenkins, you will provide a source code management location for a repository that contains the above components as well as the base directory where these artifacts can be found.\n\nStep 2: Create the Pipeline Template\n\nNext, we’ll create a Jenkinsfile for the Governance Tier.  In JTE, the Jenkinsfile is the default pipeline template that an execution will use.\n\nJenkinsfile\n\nunit_test()\nbuild()\nstatic_code_analysis()\n\nStep 3: Create the Libraries\n\nThe Templating Engine Plugin has implemented a version of Jenkins Shared Libraries to enhance the reusability of libraries.  A library is a root directory within a source code repository that has been configured as a Library Source on a Governance Tier.\n\nIn our example, the pipeline template needs to perform unit testing, package an artifact, and run static code analysis.\n\nLet’s assume that we have some teams using gradle and some teams using maven to build and test their application but they will both use SonarQube to perform static code analysis.\n\nIn this scenario, we should create gradle, maven, and sonarqube libraries.\n\n|- gradle/\n  \\-- build.groovy\n  \\-- unit_test.groovy\n|- maven/\n  \\-- build.groovy\n  \\-- unit_test.groovy\n|- sonarqube/\n  \\-- static_code_analysis.groovy\n\nStep 4: Implement the Steps\n\nImplementing a library step is exactly the same as just writing regular global variables as part of the default Jenkins Shared Libraries.\n\nFor the purposes of this demonstration, we will just have each step print out the step name and contributing library.\n\ngradle/build.groovy\n\nvoid call(){\n    println \"gradle: build()\"\n}\n\nRead more about Library Development within JTE.\n\nStep 5: Create the Configuration Files\n\nThe configuration file for JTE is named pipeline_config.groovy.\n\nIn the Governance Tier we’ll create a configuration file specifying common configurations between the applications. In this case, both applications are using the sonarqube library:\n\npipeline_config.groovy\n\nlibraries{\n  merge = true // allow individual apps to contribute additional libraries\n  sonarqube\n}\n\nNext, we’ll create two more repositories representing the maven and gradle applications. Within those repositories all we’ll need is an application-specific pipeline_config.groovy file.\n\nThese repositories both contain an application pipeline_config.groovy configuration file.\n\nmaven app: pipeline_config.groovy\n\nlibraries{\n    maven\n}\n\ngradle app: pipeline_config.groovy\n\nlibraries{\n    gradle\n}\n\nStep 6: Configure the Governance Tier in Jenkins\n\nNow that we have a Pipeline Configuration Repository and a Library Source Repository, we can configure a Governance Tier in Jenkins:\n\nThis configuration shown in the image above can be found under Manage Jenkins >> Configure System\n\nThrough the Templating Engine, you can create a pipeline governance hierarchy matching your organization’s taxonomy by representing this structure via Folders in Jenkins.\n\nStep 7: Create a Multibranch Pipeline for Both Applications\n\nWhen creating Multibranch Pipeline Projects for each app, the Templating Engine plugin supplies a new Project Recognizer\ncalled Jenkins Templating Engine.  This sets the project to use the Templating Engine framework for all branches within the\nrepository.\n\nYou can also set the Jenkins Templating Engine project recognizer for a GitHub Organization project, enabling you to easily share the same pipeline across an entire Github Organization!\n\nStep 8: Run the Pipelines\n\nThat’s it!  Now, both applications will leverage the exact same pipeline template while having the flexibility to select which\ntools should be used during each phase of the workflow.\n\nBelow is sample output from the console log from both applications pipeline runs:\n\nGradle:\n\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-gradle.git\n[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git\n[JTE] Loading Library gradle from git https://github.com/steven-terrana/example-jte-libraries.git\n...\n[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration\n[JTE][Step - gradle/unit_test]\n[Pipeline] echo\ngradle: unit_test()\n[JTE][Step - gradle/build]\n[Pipeline] echo\ngradle: build()\n[JTE][Step - sonarqube/static_code_analysis]\n[Pipeline] echo\nsonarqube: static_code_analysis()\n[Pipeline] End of Pipeline\n\nMaven:\n\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-maven.git\n[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git\n[JTE] Loading Library maven from git https://github.com/steven-terrana/example-jte-libraries.git\n...\n[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration\n[JTE][Step - maven/unit_test]\n[Pipeline] echo\nmaven: unit_test()\n[JTE][Step - maven/build]\n[Pipeline] echo\nmaven: build()\n[JTE][Step - sonarqube/static_code_analysis]\n[Pipeline] echo\nsonarqube: static_code_analysis()\n[Pipeline] End of Pipeline\n\nBenefits of the Templating Engine\n\nApply Organizational Governance\n\nLeveraging the Templating Engine Plugin will allow you to define enterprise-scale, approved\nworkflows that can be used by teams regardless of what tools are being used.  This top-down\napproach makes scaling and enforcing DevSecOps principles significantly easier within your organization.\n\nOptimize Code Reuse\n\nThere’s really no need for every team in your organization to figure out how to do the same things over\nand over again.  At Booz Allen, we have seen pipeline development time decrease from months to days as\nwe have continuously reused and expanded upon our Templating Engine library portfolio as part of our Solutions\nDelivery Platform.\n\nSimplify Pipeline Maintainability\n\nOften DevOps engineers find themselves building and supporting pipelines for multiple development teams at\nthe same time.  By decoupling the workflow from the technical implementation and consolidating the pipeline\ndefinition to a centralized location, the Templating Engine plugin allows DevOps engineers to scale much faster.\n\nGet Involved!\n\nThe Templating Engine Plugin has been open sourced and made available in the Jenkins Update Center.\n\nWe always appreciate feedback and contributions! If you have an interesting use case or would like to ask questions, try the templating-engine-plugin on Gitter.\n\nAdvanced Features\n\nConfiguration File Conditional Inheritance\n\nExternalize Library Configurations\n\nAspect Oriented LifeCycle Hooks\n\nMultiple Pipeline Templates\n\nDefault Step Implementation\n\nConfiguration File DSL Sandboxing\n\nMore Resources\n\nFor this Demonstration\n\nPipeline Configuration Repository\n\nSample Libraries\n\nSample Maven Repository\n\nSample Gradle Repository\n\nAdditional Resources\n\nTemplating Engine Documentation\n\nSource Code\n\nBooz Allen’s SDP Pipeline Libraries\n\nBooz Allen Hamilton","title":"Introducing the Jenkins Templating Engine!","tags":["general","pipeline","plugin","pipeline-authoring"],"authors":[{"avatar":null,"blog":null,"github":"steven-terrana","html":"","id":"steven-terrana","irc":null,"linkedin":null,"name":"Steven Terrana","slug":"/blog/authors/steven-terrana","twitter":null}]}},{"node":{"date":"2019-05-05T00:00:00.000Z","id":"7783e32b-2866-5124-b6e5-a89740fbfd19","slug":"/blog/2019/05/05/telemetry-success/","strippedHtml":"Half a year ago we delivered a security fix for Jenkins that had the potential to break the entire Jenkins UI.\nWe needed to change how Jenkins, through the Stapler web framework, handled HTTP requests, tightening the rules around what requests would be processed by Jenkins.\nIn the six months since, we didn’t receive notable reports of problems resulting from this change, and it’s thanks to the telemetry we gathered beforehand.\n\nThe Problem\n\nJenkins uses the Stapler web framework for HTTP request handling.\nStapler’s basic premise is that it uses reflective access to code elements matching its naming conventions.\nFor example, any public method whose name starts with get, and that has a String, int, long, or no argument can be invoked this way on objects that are reachable through these means.\nAs these naming conventions closely match common code patterns in Java, accessing crafted URLs could invoke methods never intended to be invoked this way.\n\nA simple example of that is a URL every Jenkins user would be familiar with: /job/jobname.\nThis ends up invoking a method called #getJob(String), with the argument being\"jobname\", on the root application object, and having it handle the rest of the URL, if any.\nOf course, this is a URL intended to be accessed this way.\nHow about invoking Object#getClass(), followed by Class#getClassLoader(), by accessing the URL /class/classLoader?\nWhile this particular chain would not result in a useful response, this doesn’t change that the methods were invoked.\nWe identified a number of URLs that could be abused to access otherwise inaccessible jobs, or even invoke internal methods in the web application server to invalidate all sessions.\nThe security advisory provides an overview of the issues we’d identified by then.\n\nThe Idea\n\nTo solve this problem inherent in the Stapler framework’s design, we defined rules that restrict invocation beyond what would be allowed by Stapler.\nFor example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.\nOtherwise, the type wouldn’t be aware of Stapler, and couldn’t produce a meaningful response anyway.\n\nThis meant that getters just declaring Object (or List, Map, etc.) would no longer be allowed by default.\nIt was clear to the developers working on this problem that we needed the ability to be able to override the default rules for specific getters.\nBut allowing plugin developers to adapt their plugins after we published the fix wasn’t going to cut it;\nJenkins needed to ship with a comprehensive default whitelist for methods known to not conform to the new rules, so that updating would not result in problems for users.\n\nThe Solution\n\nWhile there is tooling like Plugin Compatibility Tester and Acceptance Test Harness, many Jenkins plugins do not have comprehensive tests of their UI — the Jenkins UI is fairly stable after all.\nWe did not expect to have sufficient test coverage to deliver a change like this with confidence.\nThe only way we would be able to build such a comprehensive whitelist would be to add telemetry to Jenkins.\n\nWhile Jenkins instances periodically report usage statistics to the Jenkins project, the information included is very bare bones and mostly useful to know the number of installations, the popularity of plugins, and the general size of Jenkins instances through number and types of jobs and agents.\nWe also didn’t want to just collect data without a clear goal, so we set ourselves some limitations — collect as little data as possible, no personally identifiable information, have a specific purpose for each kind of information we would collect, and define an end date for the collection in advance.\nWe defined all of this in JEP-214, created the Uplink service that would receive submissions, and added the basic client framework to Jenkins.\nThe implementation is fairly basic — we just submit an arbitrary JSON object with some added metadata to a service.\nThis system would inform tweaks to a security fix we were anxious to get out, after all.\n\nStarting in mid October for weekly releases, and early November for LTS, tens of thousands of Jenkins instances would submit Stapler request dispatch telemetry daily, and we would keep identifying code incompatible with the new rules and amending the fix.\nUltimately, the whitelist would include a few dozen entries, preventing serious regressions in popular plugins like Credentials Plugin, JUnit Plugin, or the Pipeline plugins suite, down to Google Health Check Plugin, a plugin with just 80 installations when we published the fix.\n\nLearning what requests would result in problems also allowed us to write better developer documentation — we already knew what code patterns would break, and how popular each of them was in the plugin ecosystem.\n\nThe Overhaul\n\nI wrote above:\n\nFor example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.\n\nWhile this was true for the fix during most of development, it isn’t how the fix that we published actually works.\nAbout a month before the intended release date, internal design/code review feedback criticized the complicated and time-consuming implementation that at the time required scanning the class path of Jenkins and all plugins and looking for related resources, and suggested a different approach.\n\nSo we tried to require that the declared type or any of its ancestors be annotated with the new annotation @StaplerAccessibleType, annotated a bunch of types in Jenkins itself ( ModelObject being the obvious first choice), and ran our scripts that check to see whether Stapler would be allowed to dispatch methods identified in telemetry.\nWe’d long since automated the daily update of dispatch telemetry processing, so it was a simple matter of changing which Jenkins build we were working with.\n\nAfter a few iterations of adding the annotation to more classes, the results were very positive: Very few additional types needed whitelisting, while many more were no longer (unnecessarily) allowed to be dispatched to.\nThis experiment, late during development, ended up being essentially the fix we delivered.\nWe didn’t need to perform costly scanning of the class path on startup — we didn’t need to scan the class path at all — , and the rules governing request dispatch in Stapler, while different from before, are still pretty easy to understand and independent of how components are packaged.\n\nThe Outcome\n\nAs usual when delivering a fix we expect could result in regressions in plugins, we created a wiki page that users could report problems on.\nRight now, there’s one entry on that wiki page.\nIt is one we were aware of well before release, decided against whitelisting it, and the affected, undocumented feature in Git Plugin ended up being removed.\nThe situation in our issue tracker is only slightly worse, with two apparently minor issues having been reported in Jira.\n\nWithout telemetry, delivering a fix like this one would have been difficult to begin with.\nTinkering with the implementation just a few weeks before release and having any confidence in the result?\nNot causing any significant regressions?\nI think this would simply be impossible.","title":"First successful use of Jenkins telemetry","tags":["core","security","telemetry"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and member of the <a href=\"/security/#team\">Jenkins security team</a>.\nHe was the inaugural Jenkins security officer from 2015 to 2021.\nHe sometimes contributes to developer documentation and project infrastructure in his spare time.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2019-04-03T00:00:00.000Z","id":"1e16c395-d668-5169-973c-ecab9af0f1b0","slug":"/blog/2019/04/03/security-advisory/","strippedHtml":"Today we published a security advisory that mostly informs about issues in Jenkins plugins that have no fixes.\nWhat’s going on?\n\nThe Jenkins security team triages incoming reports both to Jira and our non-public mailing list.\nOnce we’ve determined it is a plugin not maintained by any Jenkins security team members, we try to inform the plugin maintainer about the issue, offering our help in developing, reviewing, and publishing any fixes.\nSometimes the affected plugin is unmaintained, or maintainers don’t respond in a timely manner to the notifications or the followup emails we send.\n\nIn such cases, we publish security advisories informing users about these issues, even if there’s no new release with a fix.\nDoing so allows administrators to make an informed decision about the continued use of plugins with unresolved security vulnerabilities.\nToday’s advisory is overwhelmingly such an advisory.\n\nSee a plugin you love on this list and want to help out? Learn about adopting plugins.","title":"Security spring cleaning","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and member of the <a href=\"/security/#team\">Jenkins security team</a>.\nHe was the inaugural Jenkins security officer from 2015 to 2021.\nHe sometimes contributes to developer documentation and project infrastructure in his spare time.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2019-03-29T00:00:00.000Z","id":"994d7fe1-0a77-5a87-a6ff-1ab920df5676","slug":"/blog/2019/03/29/becoming-contributor-intro/","strippedHtml":"As a software engineer, for many years I have used open source software (frameworks, libraries, tools…​) in the\ndifferent companies I have worked at. However, I had never been able to engage in an open-source project as a\ncontributor, until now.\n\nSince I made my first—​ridiculously simple—​commit into Jenkins, six months ago (in September, 2018), I have been\nattempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,\nchallenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often\ndifficult to know where to start and also difficult to come up with a plan to keep moving forward and contributing\nregularly, and in more meaningful ways over time.\n\nWhen it comes to the Jenkins project, I have encountered challenges that others trying to get into the community are\nlikely to encounter. For that reason, I have decided to go ahead and share my journey of becoming a more engaged Jenkins\ncontributor.\n\nI plan to publish roughly 1 post per month, describing this journey. I will attempt to start contributing to the pieces\nthat are easier to start with, transitioning towards more complex contributions over time.\n\nWhere to start\n\njenkins.io\n\nTo become a Jenkins contributor, the most obvious place to start looking at is jenkins.io. In the\ntop navbar there is a Community dropdown, with several links to different sections. The first entry,\nOverview, takes us to the “Participate and contribute” section.\n\nIn this section we get lots of information about the many ways in which we can engage with the Jenkins project and\ncommunity. Even though the intention is to display all the possible options, allowing the reader to choose, it can feel\na bit overwhelming.\n\nThe page is divided into two columns, the column on the left shows the different options to participate, while the\ncolumn on the right shows the different options to contribute.\n\nSuggestions to Participate\n\nIn the left column of the “Participate and contribute” page, there are several ideas on how to engage with the community,\nranging from communicating to reviewing changes or providing feedback.\n\nOne of the pieces that got me confused at first in this area were the communication channels. There are many different\nchannels for communication. There are several mailing lists and there are also IRC\nand Gitter channels.\n\nDuring my first attempts to get involved, I subscribed to many of the mailing lists and several IRC and Gitter channels,\nbut I quickly noticed that there is significant communication going on; and that most threads in the most active lists\nand channels are specific to issues users or developers have. So, unless your goal is to support other users right away\n(if you are an experienced Jenkins user already it might be the case) or you plan to ask questions that you already\nhave in mind, I would advise against spending too much time on this at first.\n\nEven though it is great to see how the community members support each other, the amount of communication might be\noverwhelming for a newcomer, and if you are also trying to contribute to the project (either with translations,\ndocumentation or code), following these conversations might not be the best way to start.\n\nSuggestions to Contribute\n\nIn the right column of the “Participate and contribute” page there are several ideas on how to contribute, mostly\ngrouped into: writing code, translating, documenting and testing.\n\nIn following posts, I will be going through all of these types of contributions, as well as through some of the\nsuggestions to participate, which include reviewing Pull Requests (PRs) or providing feedback (either reporting new\nissues or replicating cases other users have already described, providing additional information to help the maintainer\nreproduce and fix them).\n\nMy first contribution in this journey\n\nWhen looking at the “Participate and contribute” page, I noticed a couple of things in that page that I could help\nimprove. And I was actually planning to pick one of those as the first example of a contribution for this post. But\nwhen I was reading the contributing guidelines of the repository, I found an even easier contribution I could make,\nwhich I thought would be a great example to illustrate how simple it could be to start contributing. So I decided to go\nahead with it.\n\nThe website repository\n\nIn the ”Document” section there is a link to the\ncontributing guidelines of the jenkins.io repository.\nThe CONTRIBUTING file is a common file present in the root folder of most open-source-project repositories.\n\nFollowing the link to that file, I reached the jenkins.io repository, which is the one that contains the sources for\nthe corresponding website—​which also includes this blog. And, in fact, the contributing file was the first file I\nwanted to review, in order to learn more about how to contribute to the website.\n\nFound a broken link\n\nWhen reading the contributing file, I learned about the Awestruct static site generator, which is the tool used to\ntransform the AsciiDoc source files in the repo into a website. However, when I clicked the link to learn more about it, I noticed it was broken. The domain had expired.\n\nWhy not fix it?\n\nThis was the opportunity I chose to show other newcomers how easy it can be to start contributing.\n\nForking the repository\n\nThe first step, as usual, would be to fork the repository and clone it to my machine.\n\nApplying the change\n\nThe next step would be to apply the change to the corresponding file. To do so, I created a new branch\n“alternative-awestruct-link” and applied the change there:\n\nMaking sure everything builds correctly and tests pass\n\nEven though in this case my contribution was not to the actual website, but to the contributing guidelines (and for\nthat reason was unlikely to break anything), it is a best practice to get used to the regular process every\ncontribution should follow, making sure everything builds correctly after any change.\n\nAs stated in the contributing guidelines themselves, in order to build this repository we just have to run the default\n“make” target, in the root of the repository.\n\nOnce the command execution finishes, if everything looks good, we are ready to go to the next step: creating the PR.\n\nCreating the PR\n\nOnce my change had been committed and pushed to my repository, I just had to create the PR. We have an easy way to do so\nby just clicking the link that we get in our git logs once the push is completed, although we can create the PR directly\nthrough the GitHub UI, if we prefer so; or even use “hub”, the GitHub CLI, to do it.\n\nIn this case, I just clicked the link, which took me to the PR creation page on GitHub. Once there, I added a\ndescription and created the PR.\n\nWhen a PR to this repository is created, we notice there are some checks that start running. Jenkins repositories are\nconfigured to notify the “Jenkins on Jenkins”, which runs the corresponding CI pipelines for\neach repository, as described in the corresponding Jenkinsfile.\n\nOnce the checks are completed, we can see the result in the PR:\n\nAnd if we want to see the details of the execution, we can follow the “Show all checks” link:\n\nPR Review\n\nNow that the PR has been created and all automated checks are passing, we only have to wait for peer code reviews.\n\nOnce someone approves the PR and it is later merged, your contribution is integrated into the master branch of the\nrepository, becoming part of the next release.\n\nI have contributed!\n\nThis contribution I made is a trivial one, with very little complexity and it might not be the most interesting one if\nyou are trying to contribute code to the Jenkins project itself.\n\nHowever, for me, as the contributor, it was a great way to get familiar with the repository, its contributing\nguidelines, the technology behind the jenkins.io website; and, above anything else, to start “losing the fear” of\ncontributing to an open source project like Jenkins.\n\nSo, if you are in the same position I was, do not hesitate. Go ahead and find your own first contribution. Every little\ncounts!","title":"The journey of becoming a Jenkins contributor: Introduction","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg","srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/3af71/romenrg.jpg 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/1e7bb/romenrg.jpg 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/7b60f/romenrg.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/bf13b/romenrg.webp 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/9edd6/romenrg.webp 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/f5f75/romenrg.webp 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff962/romenrg.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/authors/romenrg","twitter":"romenrg"}]}},{"node":{"date":"2019-03-28T00:00:00.000Z","id":"3add1f77-2dd4-5731-912e-279ff12aa081","slug":"/blog/2019/03/28/outreachy-review/","strippedHtml":"Over the past three months, I have been mentoring two Outreachy interns, David and Latha, with my co-mentor, Jeff Thompson.\nOur project was to introduce a standardized way for creating an audit log of Jenkins and plugins using Apache Log4j Audit.\nWhile this type of feature is addressed by other existing plugins, there is no unifying way for plugins to contribute their own actions.\nThis project provided ample opportunities for each of our interns to experience the community processes for starting a new Jenkins plugin, contributing changes to Jenkins itself in order to support more audit event types, using CICD principles, and developing a Jenkins Enhancement Proposal to begin the standardization process of audit logging throughout the ecosystem.\n\nDuring this internship, David and Latha contributed several aspects of the project, much of which lays the foundation for easily instrumenting more subsystems and plugins with audit logs.\nA template log4j2.xml file is used for allowing more complex logging output configurations with a configuration UI.\n\nNew APIs have been introduced in Jenkins to allow for more authentication-related events to be audited by the plugin.\nAudit events have been defined for a few authorization scenarios and some build events.\nFor example, here is a snippet of audit log output for a build execution in the JSON layout:\n\n{\n  \"thread\" : \"Executor #0 for master : executing test #1\",\n  \"level\" : \"OFF\",\n  \"loggerName\" : \"AuditLogger\",\n  \"marker\" : {\n    \"name\" : \"Audit\",\n    \"parents\" : [ {\n      \"name\" : \"EVENT\"\n    } ]\n  },\n  \"message\" : \"Audit [buildStart buildNumber=\\\"1\\\" cause=\\\"[Started by user anonymous]\\\" projectName=\\\"test\\\" timestamp=\\\"Mon Mar 25 13:48:09 CDT 2019\\\" userId=\\\"SYSTEM\\\"]\",\n  \"endOfBatch\" : false,\n  \"loggerFqcn\" : \"org.apache.logging.log4j.audit.AuditLogger\",\n  \"instant\" : {\n    \"epochSecond\" : 1553539689,\n    \"nanoOfSecond\" : 810000000\n  },\n  \"contextMap\" : { },\n  \"threadId\" : 54,\n  \"threadPriority\" : 5\n}\n{\n  \"thread\" : \"Executor #0 for master : executing test #1\",\n  \"level\" : \"OFF\",\n  \"loggerName\" : \"AuditLogger\",\n  \"marker\" : {\n    \"name\" : \"Audit\",\n    \"parents\" : [ {\n      \"name\" : \"EVENT\"\n    } ]\n  },\n  \"message\" : \"Audit [buildFinish buildNumber=\\\"1\\\" cause=\\\"[Started by user anonymous]\\\" projectName=\\\"test\\\" timestamp=\\\"Mon Mar 25 13:48:10 CDT 2019\\\" userId=\\\"SYSTEM\\\"]\",\n  \"endOfBatch\" : false,\n  \"loggerFqcn\" : \"org.apache.logging.log4j.audit.AuditLogger\",\n  \"instant\" : {\n    \"epochSecond\" : 1553539690,\n    \"nanoOfSecond\" : 155000000\n  },\n  \"contextMap\" : { },\n  \"threadId\" : 54,\n  \"threadPriority\" : 5\n}\n\nBest of all, this project has helped instill important software engineering values such as automated testing and continuous delivery.\n\nAs we conclude this round, we look forward to participating in the next Outreachy internship to continue this project and grow the community.\nFor more information about the next round, check out the Outreachy website.","title":"Outreachy 2018-2019 In Review","tags":["outreachy"],"authors":[{"avatar":null,"blog":"https://musigma.blog/","github":"jvz","html":"<div class=\"paragraph\">\n<p>Mathematician, software engineer, and free software evangelist.\nWorks for CloudBees on the <a href=\"https://jenkins.io/security/\">Jenkins Security Team</a> along with other Jenkins community work since 2018.\nPMC Chair of the <a href=\"https://logging.apache.org/\">Apache Logging Services project</a> and Secretary for the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.</p>\n</div>","id":"jvz","irc":null,"linkedin":null,"name":"Matt Sicker","slug":"/blog/authors/jvz","twitter":"jvz"}]}},{"node":{"date":"2019-03-12T00:00:00.000Z","id":"8eccd6b4-7a2d-5929-8547-14557b2a4ad8","slug":"/blog/2019/03/12/cdf-launch/","strippedHtml":"Today Linux Foundation, along with CloudBees, Google, and a number of other companies, launched a new open-source software foundation called Continuous Delivery Foundation (CDF.) The CDF believes in the power of Continuous Delivery, and it aims to foster and sustain the ecosystem of open-source, vendor neutral projects.\n\nJenkins contributors have decided that our project should join this new foundation. This discussion happened over a period of time, with a relatively succinct summary of the motivation comes from here.\n\nNow, as a user, what does this mean?\n\nFirst, there will be no big disruption/discontinuity. The same people are still here, no URL is changing, releases will come out like they’ve always been. We will make the decisions the same way as we’ve been making, and pull requests land the same way. Changes will happen continuously over the period of time.\n\nThis is yet another testament to the maturity and the importance of the Jenkins project in this space. With a quarter million Jenkins running around the globe, it’s truly rocking the world of software development from IoT to games, cloud native webapps to machine learning projects. It makes Jenkins such an obvious, safe choice for anyone seeking open heterogeneous DevOps strategy.\n\nThe CDF creates a level playing field that is well-understood to organized contributors, which further, translate into more contributors, hence resulting in a better Jenkins, faster. Over the past years, the Jenkins project has been steadily growing more structures that provide this clarity, and this is the newest step on this trajectory.\n\nAny serious dev teams are combining multiple tools and services to cover the whole software development spectrum. A lot of work gets reinvented in those teams to integrate those tools together. Jenkins will be working more closely with other projects under the umbrella of the CDF, which would result in better aligned software with less overlap.\n\nOur users are practitioners trying to improve the software development process in their organizations. They get that CI/CD/automation which unlocks the productivity that their organizations need, but that’s not always obvious to their organizations as a whole. So our users often struggle to get the necessary support. The CDF will advocate for the practice of Continuous Delivery, and because it’s not coming from a vendor or a project, it will reach the people who can lend that support.\n\nSo I hope you can see why we are so excited about this!\n\nIn fact, for us, this is an idea that we’ve been cooking for close to two years. I don’t think I’m exaggerating much to say the whole idea of the CDF started from the Jenkins project.\n\nA lot of people have done so much work behind the scene to make this happen. But a few people played such instrumental roles that I have to personally thank them namely, Chris Aniszczyk for his patience and persistence, R. Tyler Croy for cooking and evolving the idea, and Tracy Miranda for bringing this idea into a reality.","title":"Jenkins is joining the Continuous Delivery Foundation","tags":["cdf","general","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2019-03-11T00:00:00.000Z","id":"c9f62da3-bfb4-5c14-b822-339fc3c213da","slug":"/blog/2019/03/11/let-s-celebrate-java-11-support/","strippedHtml":"This is a joint blog post prepared by the Java 11 Support Team: Adrien Lecharpentier, Ashton Treadway, Baptiste Mathus, Jenn Briden, Kevin Earls, María Isabel Vilacides, Mark Waite, Ramón León and Oleg Nenashev.\n\nWe have worked hard for this and it’s now here.\nWe are thrilled to announce full support for Java 11 in Jenkins starting from Jenkins 2.164 (released on Feb 10, 2019) and LTS 2.164.1 (ETA: March 14th).\nThis means you can now run your Jenkins controllers and agents with a Java 11 JVM.\n\nStarting in June 2018, many events were organized to improve Jenkins code base and add Java 11 support.\nBeyond these events, Core/Plugins maintainers and many other contributors have worked hard to make sure they discover and solve as many issues as possible related to Java 11 support.\n\nThe effort to support Java 11 led to the creation of the JEP-211: Java 10+ support in Jenkins.\nIt also spurred the creation of the Platform Special Interest Group to coordinate the Java 11 work and other platform support efforts.\n\nCelebration\n\nWe’d like to take a moment to thank everyone involved in these tasks: code contributors, issue reporters, testers, event planners and attendees and all those in the community who have generously lent their time and support to this effort.\nThank you all!\n\nHere are some of the contributors who helped with this task (alphabetical order):\n\nAlex Earl,\nAlyssa Tong,\nAshton Treadway,\nBaptiste Mathus,\nCarlos Sanchez,\nDaniel Beck,\nDavid Aldrich,\nDenis Digtyar,\nDevin Nusbaum,\nEmeric Vernat,\nEvaristo Gutierrez,\nGavin Mogan,\nGianpaolo Macario,\nIsabel Vilacides,\nJames Howe,\nJeff Pearce,\nJeff Thompson,\nJenn Briden,\nJesse Glick,\nJonah Graham,\nKevin Earls,\nKsenia Nenasheva,\nKohsuke Kawaguchi,\nLiam Newman,\nMandy Chung,\nMark Waite,\nNicolas De Loof,\nOleg Nenashev,\nOliver Gondža,\nOlivier Lamy,\nOlivier Vernin,\nParker Ennis,\nPaul Sandoz,\nRamón León,\nSam Van Oort,\nTobias Getrost,\nTracy Miranda,\nUlli Hafner,\nVincent Latombe,\nWadeck Follonier\n\n(We are deeply sorry if we missed anyone in this list.)\n\nGuidelines\n\nIn order to keep it simple, here is how you can start Jenkins on Java 11 using the Docker image.\nYou can select a Java 11 based image by suffixing the tag of the image with -jdk11.\nIf you are upgrading an existing instance please read the Upgrading Jenkins Java version from 8 to 11 page before upgrading.\n\nSo you can run Jenkins on Java 11 with:\n\ndocker run -p 50000:50000 -p 8080:8080 jenkins/jenkins:2.164-jdk11\n\nHowever, and as always, you can still start Jenkins with other methods.\nPlease see the more detailed documentation at Running Jenkins on Java 11.\n\nDeveloper guidelines\n\nFor developers involved in Jenkins development, you can find details on developing and testing Jenkins to run on Java 11 on the Java 11 Developer Guidelines.\n\nThis resource regroups the modifications which might need to be done in order to validate the compatibility of plugins for Java 11.\n\nWhat’s next\n\nEven though this is a big achievement, we still have work to do.\n\nOur first priority is adding Java 11 support to JenkinsFile Runner project.\nFrom there, we will move on to port Java 11 support to the Jenkins X project and the Evergreen project.\n\nSo, even if this is a big deal to us, this is not the end of the story.\nIt is a major step that will benefit users, developers, and members of the Jenkins community.\n\nReference links\n\nRunning Jenkins on Java 11\n\nhttps://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues\n\nhttps://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines\n\njep:211[Java 11 support in Jenkins]","title":"Let's celebrate Java 11 Support on Jenkins","tags":["core","developer","java11","community","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/19e71/alecharp.jpg","srcSet":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/77b35/alecharp.jpg 32w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/d4a57/alecharp.jpg 64w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/19e71/alecharp.jpg 128w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/68974/alecharp.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/ef6ff/alecharp.webp 32w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/8257c/alecharp.webp 64w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/6766a/alecharp.webp 128w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/22bfc/alecharp.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://alecharp.fr","github":"alecharp","html":"<div class=\"paragraph\">\n<p>Adrien is a Jenkins user and plugins developer since 2009 and maintains several plugins.\nCurrently, Adrien works at <a href=\"https://www.cloudbees.com\">CloudBees</a> as a software engineer, involved in open-source code development.</p>\n</div>","id":"alecharp","irc":null,"linkedin":null,"name":"Adrien Lecharpentier","slug":"/blog/authors/alecharp","twitter":"alecharp"}]}}]}},"pageContext":{"limit":8,"skip":152,"numPages":101,"currentPage":20}},
    "staticQueryHashes": ["3649515864"]}