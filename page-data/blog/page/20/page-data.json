{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/20",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-03-11T00:00:00.000Z","id":"c9f62da3-bfb4-5c14-b822-339fc3c213da","slug":"/blog/2019/03/11/let-s-celebrate-java-11-support/","strippedHtml":"This is a joint blog post prepared by the Java 11 Support Team: Adrien Lecharpentier, Ashton Treadway, Baptiste Mathus, Jenn Briden, Kevin Earls, María Isabel Vilacides, Mark Waite, Ramón León and Oleg Nenashev.\n\nWe have worked hard for this and it’s now here.\nWe are thrilled to announce full support for Java 11 in Jenkins starting from Jenkins 2.164 (released on Feb 10, 2019) and LTS 2.164.1 (ETA: March 14th).\nThis means you can now run your Jenkins controllers and agents with a Java 11 JVM.\n\nStarting in June 2018, many events were organized to improve Jenkins code base and add Java 11 support.\nBeyond these events, Core/Plugins maintainers and many other contributors have worked hard to make sure they discover and solve as many issues as possible related to Java 11 support.\n\nThe effort to support Java 11 led to the creation of the JEP-211: Java 10+ support in Jenkins.\nIt also spurred the creation of the Platform Special Interest Group to coordinate the Java 11 work and other platform support efforts.\n\nCelebration\n\nWe’d like to take a moment to thank everyone involved in these tasks: code contributors, issue reporters, testers, event planners and attendees and all those in the community who have generously lent their time and support to this effort.\nThank you all!\n\nHere are some of the contributors who helped with this task (alphabetical order):\n\nAlex Earl,\nAlyssa Tong,\nAshton Treadway,\nBaptiste Mathus,\nCarlos Sanchez,\nDaniel Beck,\nDavid Aldrich,\nDenis Digtyar,\nDevin Nusbaum,\nEmeric Vernat,\nEvaristo Gutierrez,\nGavin Mogan,\nGianpaolo Macario,\nIsabel Vilacides,\nJames Howe,\nJeff Pearce,\nJeff Thompson,\nJenn Briden,\nJesse Glick,\nJonah Graham,\nKevin Earls,\nKsenia Nenasheva,\nKohsuke Kawaguchi,\nLiam Newman,\nMandy Chung,\nMark Waite,\nNicolas De Loof,\nOleg Nenashev,\nOliver Gondža,\nOlivier Lamy,\nOlivier Vernin,\nParker Ennis,\nPaul Sandoz,\nRamón León,\nSam Van Oort,\nTobias Getrost,\nTracy Miranda,\nUlli Hafner,\nVincent Latombe,\nWadeck Follonier\n\n(We are deeply sorry if we missed anyone in this list.)\n\nGuidelines\n\nIn order to keep it simple, here is how you can start Jenkins on Java 11 using the Docker image.\nYou can select a Java 11 based image by suffixing the tag of the image with -jdk11.\nIf you are upgrading an existing instance please read the Upgrading Jenkins Java version from 8 to 11 page before upgrading.\n\nSo you can run Jenkins on Java 11 with:\n\ndocker run -p 50000:50000 -p 8080:8080 jenkins/jenkins:2.164-jdk11\n\nHowever, and as always, you can still start Jenkins with other methods.\nPlease see the more detailed documentation at Running Jenkins on Java 11.\n\nDeveloper guidelines\n\nFor developers involved in Jenkins development, you can find details on developing and testing Jenkins to run on Java 11 on the Java 11 Developer Guidelines.\n\nThis resource regroups the modifications which might need to be done in order to validate the compatibility of plugins for Java 11.\n\nWhat’s next\n\nEven though this is a big achievement, we still have work to do.\n\nOur first priority is adding Java 11 support to JenkinsFile Runner project.\nFrom there, we will move on to port Java 11 support to the Jenkins X project and the Evergreen project.\n\nSo, even if this is a big deal to us, this is not the end of the story.\nIt is a major step that will benefit users, developers, and members of the Jenkins community.\n\nReference links\n\nRunning Jenkins on Java 11\n\nhttps://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues\n\nhttps://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines\n\njep:211[Java 11 support in Jenkins]","title":"Let's celebrate Java 11 Support on Jenkins","tags":["core","developer","java11","community","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/19e71/alecharp.jpg","srcSet":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/77b35/alecharp.jpg 32w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/d4a57/alecharp.jpg 64w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/19e71/alecharp.jpg 128w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/68974/alecharp.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/ef6ff/alecharp.webp 32w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/8257c/alecharp.webp 64w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/6766a/alecharp.webp 128w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/22bfc/alecharp.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://alecharp.fr","github":"alecharp","html":"<div class=\"paragraph\">\n<p>Adrien is a Jenkins user and plugins developer since 2009 and maintains several plugins.\nCurrently, Adrien works at <a href=\"https://www.cloudbees.com\">CloudBees</a> as a software engineer, involved in open-source code development.</p>\n</div>","id":"alecharp","irc":null,"linkedin":null,"name":"Adrien Lecharpentier","slug":"/blog/authors/alecharp","twitter":"alecharp"}]}},{"node":{"date":"2019-03-04T00:00:00.000Z","id":"d85f9019-be6e-5fed-9a43-5cc4d0781ec3","slug":"/blog/2019/03/04/gsoc2019-announcement/","strippedHtml":"On behalf of the Jenkins GSoC org team,\nI am happy to announce that the Jenkins project has been accepted to\nGoogle Summer of Code 2019.\nThis year we invite students and mentors to join the Jenkins community and work together\non enhancing the Jenkins ecosystem.\n\nJust to provide some numbers, this is the biggest GSoC ever, 206 organizations will participate in GSoC this year.\nAnd it will be hopefully the biggest year for Jenkins as well.\nWe have 25 project ideas\nand more than 30 potential mentors (and counting!).\nIt is already more than in 2016 and 2018 combined.\nThere are many plugins, SIGs and sub-projects which have already joined GSoC this year.\nAnd we have already received messages and first contributions from dozens of students, yey!\n\nWhat’s next?\nGSoC is officially announced, and please expect more students to contact projects in our\nGitter channels and mailing lists.\nMany communications will also happen in SIG and sub-project channels.\nWe will be working hard in order to help students to find interesting projects, to explore the area,\nand to prepare their project proposals before the deadline on April 9th.\nThen we will process the applications, select projects and assign mentor teams.\n\nAll information about the Jenkins GSoC is available on its sub-project page.\n\nI am a student. How do I apply?\n\nSee the Information for students page for full application guidelines.\n\nWe encourage interested students to reach out to the Jenkins community early and to start exploring project ideas.\nAll project ideas have chats and mailing lists referenced on their pages.\nWe will be also organizing office hours for students,\nand you can use these meetings to meet org admins and mentors and to ask questions.\nAlso, join our Gitter channel and the\nmailing list\nto receive information about such incoming events in the project.\n\nThe application period starts on March 25th, but you can prepare now!\nUse the time before the application period to discuss and improve your project proposals.\nWe also recommend that you become familiar with Jenkins and start exploring your proposal areas.\nProject ideas include quick-start guidelines and reference newbie-friendly issues\nwhich may help with initial study.\nIf you do not see anything interesting,\nyou can propose your own project idea\nor check out ideas proposed by other organizations\nparticipating in GSoC.\n\nI want to be a mentor. Is it too late?\n\nIt’s not!\nWe are looking for more project ideas and for Jenkins contributors/users\nwho are passionate about Jenkins and want to mentor students.\nNo hardcore experience required, mentors can study the project internals together with students and technical advisors.\nWe are especially interested in ideas beyond the Java stack, and in ideas focusing new technologies and areas\n(e.g. Kubernetes, IoT, Python, Go, whatever).\n\nYou can either propose a new project idea or join an existing one.\nSee the Call for Mentors post\nand Information for mentors for details.\nIf you want to propose a new project,\nplease do so by March 11th so that students have time to explore them and to prepare their proposals.\n\nThis year mentorship does NOT require strong expertise in Jenkins development.\nThe objective is to guide students and to get involved into the Jenkins community.\nGSoC org admins will help to find advisers if special expertise is required.\n\nImportant dates\n\nMar 11 - deadline for new GSoC project idea proposals\n\nApr 09 - deadline for student applications\n\nMay 06 - accepted projects announced, teams start community bonding and coding\n\nAug 26 - coding period ends\n\nSep 03 - Results announced\n\nSee the GSoC Timeline for more info.\nIn the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).","title":"Jenkins is accepted to Google Summer Of Code 2019!","tags":["gsoc","gsoc2019","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2019-03-01T00:00:00.000Z","id":"3a32be4f-441e-5dd8-a3ed-bf3e1d6e4048","slug":"/blog/2019/03/01/devops-world-jenkins-world-cfp-open/","strippedHtml":"The DevOps World | Jenkins World shuttle is ready for lift off once again. As usual, the sign of festivities looming begins with the Call for Speakers.\nThose who attended DevOps World | Jenkins World 2018 know that DevOps World | Jenkins World 2019 is coming back to San Francisco, and adding a stop in  Europe - Lisbon, Portugal.\n\nJenkins World USA | San Francisco | August 12 - 15, 2019\n\nJenkins World Europe | Lisbon | December 2 - 5, 2019*\n\nTo encourage open collaboration and stimulate discussions that will help advance Jenkins adoption and drive it forward, we invite Jenkins users, developers and industry experts to submit a speaking proposal to DevOps World | Jenkins World San Francisco and or Lisbon.\nSubmissions for both locations are being accepted now.\nThe submission deadline for San Francisco, CA has been extended through March 24, 2019, @ 11:59 PM Pacific and the submission deadline for Lisbon, Portugal is June 9, 2019, @ 11:59 PM Pacific.\n\nThe below Q&A will help you breeze through the submission process.\n\nWhere do I go to submit my proposal?\n\nSubmissions for both DevOps World | Jenkins World USA and Europe are accepted at:\n\nJenkins World USA\n\nJenkins World Europe\n\nCan I make proposal(s) to both conferences?\n\nYes, you can! Once you’ve created an account on the CFP website you will be given the option to make submission(s) to one conference or both conferences.\n\nWhen is the deadline for DevOps World | Jenkins World USA?\n\nSaturday March 24, 2019 @ 11:59PM Pacific\n\nWhen is the deadline for DevOps World | Jenkins World Europe?\n\nTuesday, June 9, 2019, @ 11:59 PM Pacific\n\nSan Francisco Important Dates:\n\nJanuary 9, 2019: Call for papers opens\n\nMarch 24, 2019: Call for papers closes\n\nApril 12, 2019: Submission decisions sent\n\nMay 1, 2019: Agenda published - San Francisco, CA\n\nMay 6, 2019: Speaker tasklist is sent out\n\nAugust 12-15, 2019: DevOps World | Jenkins World 2019 San Francisco\n\n*Due to the deadline extensions for DevOps World | Jenkins World 2019 San Francisco any talks submitted after March 10th will be subject to the important dates below:\n\nJanuary 9, 2019: Call for papers opens\n\nMarch 24, 2019: Call for papers closes\n\nWeek of April 1, 2019: Submission decisions sent\n\nWeek of April 29, 2019: Agenda published - San Francisco, CA\n\nMay 6, 2019: Speaker tasklist is sent out\n\nAugust 12-15, 2019: DevOps World | Jenkins World 2019 San Francisco\n\nLisbon Important Dates:\n\nJanuary 9, 2019: Call for papers opens\n\nJune 9, 2019: Call for papers closes\n\nJuly 19, 2019: Submission decisions sent\n\nAugust 19, 2019: Agenda published\n\nAugust 23, 2019: Speaker tasklist is sent out\n\nDecember 2-5, 2019: DevOps World | Jenkins World 2019 Lisbon, Portugal\n\n*All Dates Are Subject To Change.\n\nWe look forward to receiving your inspiring stories!","title":"DevOps World - Jenkins World 2019: Call for Papers is Open","tags":["event","jenkinsworld"],"authors":[{"avatar":null,"blog":null,"github":"svanalstine","html":"","id":"svanalstine","irc":null,"linkedin":null,"name":"Skylar VanAlstine","slug":"/blog/authors/svanalstine","twitter":null}]}},{"node":{"date":"2019-02-28T00:00:00.000Z","id":"9905a0f3-35a6-5676-b4b5-b69b913d1b36","slug":"/blog/2019/02/28/serverless-jenkins/","strippedHtml":"My job is to work on a Jenkins pipeline specific to SAP S/4HANA extensions running on SAP Cloud Platform.\nSee the original blog post here.\n\nJenkins is a powerful tool for automation, and we heavily rely on the codified pipeline syntax introduced in Jenkins 2.\n\nWith regards to operations, we minimized the need for care with the cx-server life-cycle management greatly.\nStill, you need to run that Jenkins server.\nThis means you’ll need to update the server and plugins (simplified by our life-cycle management), and scale as the number of builds grows.\nUser administration and backups are also required in a productive setup.\n\nIs this really required, or is there an alternative approach?\n\nIn this blog post, I’ll introduce a prototype I did to get rid of that long running pet Jenkins instance.\nRather, we’ll have cattle Jenkins instances, created and destroyed on demand.\n“Serverless” Jenkins in the sense that we don’t have to provision the server for Jenkins to run.\n\nThe setup described in this post is highly experimental. I encourage you to try this out in a demo project, but be very cautious until further notice to use this on productive code. In this proof of concept, I’ll use a public GitHub repository and the free open-source offering by TravisCI. This setup is not suitable for commercial software.\n\nThe pets vs cattle metaphor describes how approaches in managing servers differ.\nWhile you care for pets and treat them when they are unwell, cattle can be easily replaced.\nYour traditional Jenkins server is a pet because it is often configured manually, and replacing it is a major effort.\nFor more background on this metaphor, click here.\n\nBefore we’re getting into the technical details, let’s discuss why we would want to try this out in the first place.\nRunning Jenkins on arbitrary CI/CD services, such as TravisCI seems very odd on first sight.\nOn such services you’ll usually invoke your build tools like Maven or npm in a small script, and that will do your build.\nBut in the enterprise world, both inside SAP and in the community, Jenkins has a huge market share.\nThere are many shared libraries for Jenkins, providing pre-made build steps which would be expensive to re-implement for other platforms.\nAdditionally, SAP S/4HANA Cloud SDK Pipeline is a ready to use pipeline based on Jenkins where you as the developer of an SAP S/4HANA extension application do not need to write and maintain the pipeline yourself.\nThis means reduced costs and effort for you, while the quality of your application improves, for example due to the many cloud qualities which are checked out of the box.\n\nLet me show you an experiment to see if we can get the best of both worlds.\nThe goal is to get all the quality checks and the continuous delivery that the SAP S/4HANA Cloud SDK Pipeline provides us, without the need for a pet Jenkins server.\n\nHow do we do that? The Jenkins project has a project called Jenkinsfile runner.\nIt is a command line tool that basically boots up a stripped-down Jenkins instance, creates and runs a single job, and throws away that instance once the job is done. As you might guess, there is some overhead in that process.\nThis will add about 20 seconds to each build, which I found to be surprisingly fast, considering the usual startup time of a Jenkins server.\nFor convenient consumption, we have packaged Jenkinsfile runner as a Docker image which includes the Jenkins plugins that are required for SAP S/4HANA Cloud SDK Pipeline.\n\nWe also utilize the quite new Configuration as Code plugin for Jenkins, which allows to codify the Jenkins configuration as YAML files.\nAs you will see in a minute, both Jenkinsfile runner and Configuration as Code are a perfect match.\n\nIf you want to follow along, feel free to use our provided Address Manager example application.\nYou may fork the repository, or create your own repository and activate it on TravisCI.\n\nBased on the existing Address Manager, let’s add a small.travis.yml file to instruct the build:\n\nlanguage: minimal\nservices:\n- docker\nscript: docker run -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:/workspace -v /tmp -e CASC_JENKINS_CONFIG=/workspace/jenkins.yml -e CF_PW -e ERP_PW -e BRANCH_NAME=$TRAVIS_BRANCH ppiper/jenkinsfile-runner\n\nThe script line has quite a few things going on, let’s see what is there.\n\nWe run a Docker container based on the ppiper/jenkinsfile-runner image.\nWe need to mount the Docker socket, so that our container can spawn sibling containers for tooling such as Maven or the CloudFoundry CLI.\nWe also need to mount the current directory (root of our project) to /workspace, and tell the Jenkins Configuration as Code Plugin where to find the configuration file.\nWe’ll come to that file in a minute. Also be sure to pass your secret variables here.\nTravis will mask them, so they are not in plain text in your build log.\nTake note to change the names of the variables according to your requirements.\nYou might wonder that we need a BRANCH_NAME environment variable.\nThis is required for the Pipeline to check if you’re working on the “productive branch”, where a productive deployment to SAP Cloud Platform is supposed to happen.\nIf you omit passing this variable, the pipeline will still run but never in the productive mode, and hence not deploy to SAP Cloud Platform.\n\nYou might need some secrets in the build, for example in integration tests or for deployment to SAP Cloud Platform.\nYou can make use of the travis command line tool to encrypt them on your local machine as documented here.\nTake care that this might add your secret in plain text to the shell history on your machine.\n\ntravis encrypt CF_PW=supersecret --add\ntravis encrypt ERP_PW=alsosupersecret --add\n\nThis command will add a line to your.travis.yml file with the encrypted secret value.\nBe sure to commit this change.\nAlso take note of the name of your variable, which must match the environment parameter, and your Jenkins configuration.\nYou should be aware of this TravisCI document on secrets.\n\nWe’ll also need to add a jenkins.yml file to our project.\nHere we need to configure two shared libraries which are required for the SAP S/4HANA Cloud SDK Pipeline, and the credentials that are required for our pipeline.\nBe sure not to put your secrets in plain text in here, but use the variables you used before via the travis cli tool.\nTravisCI will decrypt the password on the fly for you.\n\njenkins:\n  numExecutors: 10\nunclassified:\n  globallibraries:\n    libraries:\n    - defaultVersion: \"master\"\n      name: \"s4sdk-pipeline-library\"\n      retriever:\n        modernSCM:\n          scm:\n            git:\n              remote: \"https://github.com/SAP/cloud-s4-sdk-pipeline-lib.git\"\n    - defaultVersion: \"master\"\n      name: \"piper-library-os\"\n      retriever:\n        modernSCM:\n          scm:\n            git:\n              remote: \"https://github.com/SAP/jenkins-library.git\"\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"MY-ERP\"\n              username: MY_USER\n              password: ${ERP_PW}\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"cf\"\n              username: P12344223\n              password: ${CF_PW}\n\nYou might add more configuration to this file as you need it.\n\nCommit both files to your repo and push.\nIf the travis build works, you’ll see the build integration on GitHub.\n\nOn travis, you can follow the progress of your build live, and get the full text log of your Jenkins build.\nIf all went well, you will be greeted with a green build after a few minutes.\n\nCongratulations. You’re running a serverless Jenkins build with all the qualities checked by the SAP S/4HANA Cloud SDK Pipeline, without hosting your own Jenkins instance.\n\nKeep in mind this is a proof of concept at this point.\nThe serverless Jenkins ecosystem is currently evolving, and neither Jenkinsfile runner, nor Configuration as Code are in a mature state as of February 2019.\nOne downside of this approach is that we lose the Jenkins user interface, so we can’t see our pipeline in blue ocean, and we don’t get the nice build summary.\nWe can get the whole log output from TravisCI, so this can be mitigated, but this is arguable not the best user experience.\n\nBut on the contrary, we don’t have to care for our pet Jenkins, we don’t need to update plugins or backup the configuration or build logs.","title":"Run your Jenkins pipeline without operating a Jenkins instance","tags":["jenkins","serverless"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/79d32/fwilhe.jpg","srcSet":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/b8799/fwilhe.jpg 32w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/8532e/fwilhe.jpg 64w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/79d32/fwilhe.jpg 128w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/97a5e/fwilhe.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/c9eb6/fwilhe.webp 32w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/3ea93/fwilhe.webp 64w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/bf8fb/fwilhe.webp 128w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/e7a87/fwilhe.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":125}}},"blog":null,"github":"fwilhe","html":"<div class=\"paragraph\">\n<p>Software Developer working on CI/CD at SAP Innovation Center in Potsdam. I am employed by SAP, but thoughts here are my own.\n---</p>\n</div>","id":"fwilhe","irc":null,"linkedin":null,"name":"Florian Wilhelm","slug":"/blog/authors/fwilhe","twitter":"fwilhe"}]}},{"node":{"date":"2019-02-26T00:00:00.000Z","id":"c5e445a3-8d1e-5054-be35-b27be24516a0","slug":"/blog/2019/02/26/jenkins-alexa-voice-controlled-cicd/","strippedHtml":"Integrating Jenkins with Alexa to launch your pipelines and obtain results\nabout your deployments through voice is easier than you think.  Learn how Alexa\nChampion, Kesha Williams', latest side project teaches Alexa to deploy code to\nthe cloud.\n\nAlexa (named after the ancient library of Alexandria) is Amazon’s Artificial\nIntelligence (AI) powered intelligent voice assistant that runs in the cloud.\nSoftware engineers make Alexa smarter by creating apps, called skills.  From\nthe time that I developed my first Alexa skill, I dreamed of deploying my Java\nprojects to the cloud via voice.  For me, telling Alexa to deploy my code is\nthe ultimate level of cool!  I recently made my dream a reality when I devoted\na weekend to developing my newest Alexa skill, DevOps Pal.  In this blog, I\nwill show you how I developed DevOps Pal and hopefully inspire you to build\nyour own version.\n\nWhy Choose Voice to Deploy Code\n\nVoice-first technology is revolutionizing how we interact with technology because the interaction is simple, frictionless, and time-saving.\nFor me, voice is an easier way to control Jenkins and retrieve results about my deployments without having to touch a keyboard.\nIn this use case, voice is another access point for data and is a way to further automate the process of building, testing, and deploying a Java project to the cloud, improving efficiency.\n\nContinuous Integration and Continuous Delivery (CI/CD)\n\nIf you’re working with DevOps, you understand the need for Continuous Integration and Continuous Delivery (CI/CD) to automate the software delivery pipeline in a reproducible way.\nCI/CD is the practice of continuously building, testing, and deploying code once it’s committed to version control.\nDevOps and CI/CD provides software engineering teams with confidence in the code being pushed to production and shorter development lifecycles, which in the end produces happier users, clients, and customers.\n\nDevOps Pal Overview\n\nDevOps Pal is a private Alexa for Business skill that is used to kick off a Jenkins pipeline job.\nAlexa for Business was the perfect way for me to distribute DevOps Pal since I have the ability to enable the skill on an organization-by-organization basis, which gives me complete control over who has access.\nOnce DevOps Pal invokes the job, the pipeline status displays in real-time via the Blue Ocean Pipeline Run Details View Page.\n\nDevOps Pal Architecture\n\nI used several components and tools to create DevOps Pal. Let’s review the architecture in detail.\n\nThe flow begins by saying, \"Alexa, open DevOps Pal and deploy my code\", to the Echo device.\n\nThe Echo device listens for the wake word (e.g. Alexa, Echo, Computer, or Amazon), which employs deep learning technology running on the device to recognize the wake word the user has chosen.\nOnce the wake word is detected, what I say is recorded and sent to the Alexa Voice Service (AVS), which uses speech to text and natural language understanding (NLU) to identify my intent.\nMy intent is sent to DevOps Pal; the skill acts accordingly by kicking off the Jenkins job and sending a response back using text-to-speech synthesis (TTS), which makes the response natural sounding.\n\nLet’s explore each component in more detail:\n\nAlexa Voice Service (AVS) - I often refer to the Alexa Voice Service as the \"Alexa brain that runs in the cloud\". The AVS is a suite of services built around a voice-controlled AI assistant. The AVS is flexible enough to allow third parties to add intelligent voice control to any connected product that has a microphone and speaker, so Alexa is not limited to just Echo devices.\n\nAlexa Skills Kit (ASK) - ASK is the \"SDK\" (Software Development Kit) that allows developers to build custom skills for Alexa.\n\nAlexa Developer Portal - An Alexa skill includes a voice user interface, or VUI, to understand user intents, and a back-end cloud service to process intents by telling Alexa how to respond. The VUI and the integration with the back-end service is setup and configured through the Alexa Developer Portal.\n\nAWS Lambda - A chunk of code that runs in the cloud. Developers can run their code without having to provision or manage servers. Applications created with AWS Lambda are considered to be serverless. Lambda supports several popular languages like Python, Java, Node.js, Go, C#, etc.\n\nGitHub - A version control system for the Java project source code.\n\nJenkins on EC2 - I use Jenkins to build, test, and deploy my Java Application Programming Interface (API). Elastic Cloud Computer (EC2) is the virtual server where Jenkins is installed. Jenkins works alongside several other tools:\n\nMaven - A build automation tool for Java projects.\n\nJunit - A testing framework for Java projects.\n\nAWS Command Line Interface (CLI) - This is a command line tool that allows developers to access their Amazon Web Services (AWS) account.\n\nBlue Ocean - This is a plugin for Jenkins that provides an easy to use interface to create and monitor Jenkins pipelines.\n\nAWS Elastic Beanstalk - This is an orchestration service that allows developers to deploy and manage web applications in the AWS cloud.\n\nPostman - This is an HTTP client for testing APIs and web services.\n\nVoice Interaction Model\n\nThe Voice User Interface (VUI) describes the overall conversational flow and is setup via the Alexa Developer Console.\n\nA few important components of the VUI are the Invocation Name (how users launch your skill) and the Intents (phrases a user says to \"talk to\" or interact with your skill).\n\nSpecifically, the \"DeployCodeIntent\" is invoked when a user says one of several phrases (e.g. run jenkins pipeline, run jenkins job, deploy the code, deploy code, or deploy ) or a variation of the phrase like, \"deploy my code\".\n\nThe endpoint is the destination where the skill requests are sent for fulfillment.\nIn this case, the backend logic is an AWS Lambda authored in Python.\nThe business logic in the Python Lambda uses the Jenkins remote access API to trigger the job remotely.\nThe format of the URL to trigger the job is jenkins_url/job/job_name/build.\nThe API call uses BASIC authentication and a Jenkins Crumb passed in the HTTP request header for CSRF protection.\nAlternatively, since Jenkins 2.96, you can use an API token instead of a Jenkins Crumb and password to authenticate your API call.\n\nJenkins Job\n\nThe Jenkins job, 'alexa-cicd', is the job invoked from DevOps Pal.\nAlthough, the Jenkins Classic User Interface (UI) is functional, I prefer the Blue Ocean interface because it rethinks the user experience of Jenkins by making it visually intuitive.\nBlue Ocean is easily enabled via a plugin and leaves the option to continue using the Jenkins Classic UI should you so choose.\n\nAfter Alexa kicks off the 'alexa-cicd' job, I navigate to the Pipeline Run Details View Page, which allows me to watch the job status in realtime.\nThis job has four stages: Initialize, Build, Test, and Deploy.\nThe final stage, Deploy, uses the AWS Command Line Interface (CLI) on the Jenkins server to copy the artifact to Amazon Simple Storage Service (S3) and create a new Elastic Beanstalk application version based on the artifact located on S3.\n\nCool Features to Add\n\nThe ability to deploy code with voice is just the beginning.\nThere are several cool features that can easily be added:\n\nDevOps Pal can be updated to prompt the user for the specific Jenkins pipeline job name. This adds a level of flexibility that will really empower DevOps teams.\n\nAlexa Notifications can be integrated with DevOps Pal to send a notification to the Echo device when the Jenkins job is finished or when it fails. If the job fails, more information about where the job failed and exactly why will be provided. This will prove useful for long running jobs or for getting timely updates regarding the job status.\n\nDevOps Pal can be updated to answer direct questions about the real-time status of a specific job.\n\nWant to Learn More\n\nI hope you’ve enjoyed learning more about the architecture of DevOps Pal and deploying code to the cloud using Jenkins and voice.\nFor more detailed steps, I’ve collaborated with Cloud Academy to author a course, AWS Alexa for CI/CD on the subject.","title":"Jenkins + Alexa: Say Hello to Voice Controlled CI/CD","tags":["jenkins","alexa"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/f84e8/keshawilliams.jpg","srcSet":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/5c08a/keshawilliams.jpg 32w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/4a6e8/keshawilliams.jpg 64w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/f84e8/keshawilliams.jpg 128w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/d158b/keshawilliams.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/ad81f/keshawilliams.webp 32w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/10333/keshawilliams.webp 64w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/ba2bd/keshawilliams.webp 128w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/b679b/keshawilliams.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":179}}},"blog":"http://www.kesha.tech/","github":"ProfessorKesha","html":"<div class=\"paragraph\">\n<p>Kesha Williams is an award-winning software engineering manager at Chick-fil-A with over 20 years' experience.\nShe has trained and mentored thousands of software developers in the US, Europe, and Asia while teaching at the university level.\nShe routinely leads innovation teams in proving out emerging technologies and shares her learnings at conferences across the globe.\nShe has published several Alexa skills, was featured during Amazon&#8217;s \"Alexa Women of Voice\" campaign, and recently named an Alexa Champion.\nIn her spare time, she leads the Georgia chapter of Technovation and mentors women in tech.</p>\n</div>","id":"keshawilliams","irc":null,"linkedin":null,"name":"Kesha Williams","slug":"/blog/authors/keshawilliams","twitter":"keshawillz"}]}},{"node":{"date":"2019-02-21T00:00:00.000Z","id":"ee6f71b5-7195-56bb-8a9e-87e021747a53","slug":"/blog/2019/02/21/credentials-masking/","strippedHtml":"In the Jenkins project, we ask that people report security issues to our private issue tracker.\nThis allows us to review issues and prepare fixes in private, often resulting in better, safer security fixes.\n\nAs a side effect of that, we also learn about common misconceptions and usability problems related to security in Jenkins.\nThis post is intended to address one of those:\nThe goal and limitations of credentials masking.\n\nThe Problem\n\nOne very common example of that is the role of credentials masking in Jenkins, typically involving a pipeline snippet that looks like this:\n\n// Scripted //\nwithCredentials([usernamePassword(credentialsId: 'topSecretCredentials', passwordVariable: 'PWD', usernameVariable: 'USR')])\n  sh './deploy.sh' // requires PWD and USR to be set\n}\n// Declarative //\n\nCredentials that are in scope are made available to the pipeline without limitation.\nTo prevent accidental exposure in the build log, credentials are masked from regular output, so an invocation of env (Linux) or set (Windows), or programs printing their environment or parameters would not reveal them in the build log to users who would not otherwise have access to the credentials.\n\nThe misconception here is that Jenkins will prevent other, perhaps deliberate ways to reveal the password.\nSome examples:\n\n// Scripted //\nwithCredentials([usernamePassword(credentialsId: 'topSecretCredentials', passwordVariable: 'PWD', usernameVariable: 'USR')])\n  sh 'echo $PWD | base64' // will print e.g. dDBwczNjcjN0Cg= which is trivially converted back to the top secret password\n}\n// Declarative //\n\n// Scripted //\nwithCredentials([usernamePassword(credentialsId: 'topSecretCredentials', passwordVariable: 'PWD', usernameVariable: 'USR')])\n  sh 'echo $PWD > myfile'\n  archiveArtifacts 'myfile' // then browse archived artifacts from the Jenkins UI\n}\n// Declarative //\n\nBoth of these snippets circumvent credentials masking in the build log, and show that people with control over the build script can use credentials in ways not necessarily intended or approved by admins.\n\nObviously these are just the most straightforward examples illustrating the problem.\nOthers could involve the proc file system, sending it to an HTTP server in response to a 401 authentication challenge, embedding it in the (otherwise legitimate) build result, etc.\n\nIt would be great if Jenkins could allow the flexible use of credentials with no risk of exposing them through straightforward build script modifications, but realistically, it is impossible for Jenkins to police use of the credential by a build script without the support of a very specific environment setup (e.g. restrictive network configuration).\n\nIt should also be noted that credentials aren’t just at risk from users able to control the pipeline, typically by editing the Jenkinsfile.\nActual build scripts invoked by pipelines, either shell scripts as in the example above, or more standard build tools such as Maven (controlled by pom.xml) are just as much of a risk if they are run inside a withCredentials block, or executing on the same agent as another block that passed such credentials.\n\nDisclosure of secrets can also happen inadvertently:\nJenkins will prevent exact matches of the password or other secret to appear in the log file.\nConsider that the secret may contain shell metacharacters that bash +x would escape by adding a \\ before those characters.\nThe sequence of characters to be printed is no longer identical to the secret, so would not be masked.\n\nThe Solution\n\nCredentials can be defined in different scopes:\nCredentials defined on the root Jenkins store (the default) will be available to all jobs on the instance.\nThe only exception are credentials with System scope, intended for the global configuration only, for example, to connect to agents.\nCredentials defined in a folder are only available within that folder (transitively, i.e. also in folders inside this folder).\n\nThis allows defining sensitive credentials, such as deployment credentials, on specific folders whose contents only users trusted with those credentials are allowed to configure:\nDirectly in Jenkins using Matrix Authorization Plugin and by limiting write access to repositories defining pipelines as code.\n\nPipelines inside this folder can use the (e.g. deployment) credentials without limitation, while they’re inaccessible to pipelines outside the folder.\nThose would need to use the build step or similar approaches to invoke the pipelines inside the folder to deploy their output.\n\nCaveats\n\nWhile the previous section outlines a solution to the problem of restricting access to credentials, care needs to be taken so that credentials are not captured anyway.\nFor example, a deployment pipeline that allows its users to define where to deploy to as a build parameter might still be used to send credentials to a maliciously set up host to capture them.\nA blog post explaining the design of some Jenkins project infrastructure discusses some of these concerns around trust.\n\nIt should also be noted that credential domains are a UI hint only — defining a credential to only be valid for github.com does not actually prevent its use elsewhere.","title":"Limitations of Credentials Masking","tags":["security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2019-02-17T00:00:00.000Z","id":"a79ea93c-0082-5a4a-a338-9fde01ae88b1","slug":"/blog/2019/02/17/remoting-cli-removed/","strippedHtml":"Close to two years ago, we announced in\nNew, safer CLI in 2.54\nthat the traditional “Remoting” operation mode of the Jenkins command-line interface\nwas being deprecated for a variety of reasons, especially its very poor security record.\nToday in Jenkins 2.165 support for this mode is finally being removed altogether,\nin both the server and bundled jenkins-cli.jar client.\nThe projected June 5th LTS release will reflect this removal,\nat which point the Jenkins project will no longer maintain this feature\nnor investigate security vulnerabilities in it.\n\nThis change makes the code in Jenkins core related to the CLI considerably simpler and more maintainable.\n(There are still two transports —HTTP(S) and SSH—but they have similar capabilities and behavior.)\nIt also reduces the “attack surface” the Jenkins security team must consider.\nAmong other issues, a compromised server could freely attack a developer’s laptop if -remoting were used.\n\nThe\n2.46.x upgrade guide\nalready urged administrators to disable Remoting mode on the server.\nThose Jenkins users who rely on the CLI for remote scripting (as opposed to the HTTP(S) REST APIs)\nwould be affected only if they were still using the -remoting CLI flag,\nsince the default has long been to use HTTP(S) mode.\n\nMost CLI features have long worked fine without -remoting,\nin some cases using slightly different syntax such as requiring shell redirects to access local files.\nAs part of this change, some CLI commands, options, and option types in Jenkins core have been removed, other than -remoting itself:\n\nThe login and logout commands, and the --username and --password options.\n\nThe -p option to select a proxy. (The CLI in default -http mode accesses Jenkins no differently than any other HTTP client.)\n\nThe install-tool, set-build-parameter, and set-build-result commands relied on a fundamentally insecure idiom that is no longer supportable.\n\nCommand options or arguments which took either a local file or = for standard input/output (e.g., install-plugin, build -p, support) now only accept the latter.\n\nSome features of relatively little-used plugins will no longer work, such as:\n\nDistFork\n\nRemote Terminal Access\n\nBuild Env Propagator","title":"Remoting-based CLI removed from Jenkins","tags":["core","security","remoting"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick","twitter":"tyvole"}]}},{"node":{"date":"2019-02-06T00:00:00.000Z","id":"ed5dfb33-f5e6-565b-a671-f4ae47d2c691","slug":"/blog/2019/02/06/ssh-steps-for-jenkins-pipeline/","strippedHtml":"Pipeline-as-code or defining the deployment pipeline through code rather than manual job creation through UI, provides tremendous benefits for teams automating builds and deployment infrastructure across their environments.\n\nSource of image: https://jenkins.io/doc/book/pipeline/\n\nJenkins Pipelines\n\nJenkins is a well-known open source continuous integration and continuous deployment automation tool. With the latest 2.0 release, Jenkins introduced the Pipeline plugin that implements Pipeline-as-code. This plugin lets you define delivery pipelines using concise scripts which deal elegantly with jobs involving persistence and asynchrony.\n\nThe Pipeline-as-code’s script is also known as a Jenkinsfile.\n\nJenkinsfiles uses a domain specific language syntax based on the Groovy programming language. They are persistent files which can be checked in and version-controlled along with the rest of their project source code. This file can contain the complete set of encoded steps (steps, nodes, and stages) necessary to define the entire application life-cycle, becoming the intersecting point between development and operations.\n\nMissing piece of the puzzle\n\nOne of the most common steps defined in a basic pipeline job is the Deploy step. The deployment stage encompasses everything from publishing build artifacts to pushing code into pre-production and production environments. This deployment stage usually involves both development and operations teams logging onto various remote nodes to run commands and/or scripts to deploy code and configuration. While there are a couple of existing ssh plugins for Jenkins, they currently don’t support the functionality such as logging into nodes for pipelines. Thus, there was a need for a plugin that supports these steps.\n\nIntroducing SSH Steps\n\nRecently, our team at Cerner started working on a project to automate deployments through Jenkins pipelines to help facilitate running commands on over one thousand nodes. We looked at several options including existing plugins, internal shared Jenkins libraries, and others. In the end, we felt it was best to create and open source a plugin to fill this gap so that it can be used across Cerner and beyond.\n\nThe initial version of this new plugin SSH Steps supports the following:\n\nsshCommand : Executes the given command on a remote node.\n\nsshScript : Executes the given shell script on a remote node.\n\nsshGet : Gets a file/directory from the remote node to current workspace.\n\nsshPut : Puts a file/directory from the current workspace to remote node.\n\nsshRemove : Removes a file/directory from the remote node.\n\nUsage\n\nBelow is a simple demonstration on how to use above steps. More documentation can be found on GitHub.\n\ndef remote = [:]\nremote.name = \"node\"\nremote.host = \"node.abc.com\"\nremote.allowAnyHosts = true\n\nnode {\n    withCredentials([usernamePassword(credentialsId: 'sshUserAcct', passwordVariable: 'password', usernameVariable: 'userName')]) {\n        remote.user = userName\n        remote.password = password\n\n        stage(\"SSH Steps Rocks!\") {\n            writeFile file: 'test.sh', text: 'ls'\n            sshCommand remote: remote, command: 'for i in {1..5}; do echo -n \\\"Loop \\$i \\\"; date ; sleep 1; done'\n            sshScript remote: remote, script: 'test.sh'\n            sshPut remote: remote, from: 'test.sh', into: '.'\n            sshGet remote: remote, from: 'test.sh', into: 'test_new.sh', override: true\n            sshRemove remote: remote, path: 'test.sh'\n        }\n    }\n}\n\nConfiguring via YAML\n\nAt Cerner, we always strive to have simple configuration files for CI/CD pipelines whenever possible. With that in mind, my team built a wrapper on top of these steps from this plugin. After some design and analysis, we came up with the following YAML structure to run commands across various remote groups:\n\nconfig:\n  credentials_id: sshUserAcct\n\nremote_groups:\n  r_group_1:\n    - name: node01\n      host: node01.abc.net\n    - name: node02\n      host: node02.abc.net\n  r_group_2:\n    - name: node03\n      host: node03.abc.net\n\ncommand_groups:\n  c_group_1:\n    - commands:\n        - 'ls -lrt'\n        - 'whoami'\n    - scripts:\n        - 'test.sh'\n  c_group_2:\n    - gets:\n        - from: 'test.sh'\n          to: 'test_new.sh'\n    - puts:\n        - from: 'test.sh'\n          to: '.'\n    - removes:\n        - 'test.sh'\n\nsteps:\n  deploy:\n    - remote_groups:\n        - r_group_1\n      command_groups:\n        - c_group_1\n    - remote_groups:\n        - r_group_2\n      command_groups:\n        - c_group_2\n\nThe above example runs commands from c_group_1 on remote nodes within r_group_1 in parallel before it moves on to the next group using sshUserAcct (from the Jenkins Credentials store) to logon to nodes.\n\nShared Pipeline Library\n\nWe have created a shared pipeline library that contains a sshDeploy step to support the above mentioned YAML syntax. Below is the code snippet for the sshDeploy step from the library. The full version can be found here on Github.\n\n#!/usr/bin/groovy\ndef call(String yamlName) {\n    def yaml = readYaml file: yamlName\n    withCredentials([usernamePassword(credentialsId: yaml.config.credentials_id, passwordVariable: 'password', usernameVariable: 'userName')]) {\n        yaml.steps.each { stageName, step ->\n            step.each {\n                def remoteGroups = [:]\n                def allRemotes = []\n                it.remote_groups.each {\n                    remoteGroups[it] = yaml.remotes.\"$it\"\n                }\n\n                def commandGroups = [:]\n                it.command_groups.each {\n                    commandGroups[it] = yaml.commands.\"$it\"\n                }\n                def isSudo = false\n                remoteGroups.each { remoteGroupName, remotes ->\n                    allRemotes += remotes.collect { remote ->\n                        if(!remote.name)\n                            remote.name = remote.host\n                        remote.user = userName\n                        remote.password = password\n                        remote.allowAnyHosts = true\n                        remote.groupName = remoteGroupName\n                        remote\n                    }\n                }\n                if(allRemotes) {\n                    if(allRemotes.size() > 1) {\n                        def stepsForParallel = allRemotes.collectEntries { remote ->\n                            [\"${remote.groupName}-${remote.name}\" : transformIntoStep(stageName, remote.groupName, remote, commandGroups)]\n                        }\n                        stage(stageName) {\n                            parallel stepsForParallel\n                        }\n                    } else {\n                        def remote = allRemotes.first()\n                        stage(stageName + \"\\n\" + remote.groupName + \"-\" + remote.name) {\n                            transformIntoStep(stageName, remote.groupName, remote, commandGroups).call()\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nBy using the step (as described in the snippet above) from this shared pipeline library, a Jenkinsfile can be reduced to:\n\n@Library('ssh_deploy') _\n\nnode {\n  checkout scm\n  sshDeploy('dev/deploy.yml');\n}\n\nAn example execution of the above pipeline code in Blue Ocean looks like this:\n\nWrapping up\n\nSteps from the SSH Steps Plugin are deliberately generic enough that they can be used for various other use-cases as well, not just for deploying code. Using SSH Steps has significantly reduced the time we spend on deployments and has given us the possibility of easily scaling our deployment workflows to various environments.\n\nHelp us make this plugin better by contributing. Whether it is adding or suggesting a new feature, bug fixes, or simply improving documentation, contributions are always welcome.","title":"SSH Steps for Jenkins Pipeline","tags":["pipeline","plugins","ssh","steps"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/19e71/nrayapati.jpg","srcSet":"/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/77b35/nrayapati.jpg 32w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/d4a57/nrayapati.jpg 64w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/19e71/nrayapati.jpg 128w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/68974/nrayapati.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/ef6ff/nrayapati.webp 32w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/8257c/nrayapati.webp 64w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/6766a/nrayapati.webp 128w,\n/gatsby-jenkins-io/static/4aea26279158324c14a34104f2df9d81/22bfc/nrayapati.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"nrayapati","html":"<div class=\"paragraph\">\n<p>Software Architect at <a href=\"https://www.cerner.com/\">Cerner Corporation</a>. Passionate about Agile, DevOps &amp; Continuous Delivery, and all things Automation.\nOSS Contributor, he is maintaining couple of Jenkins plugins since past several years. <a href=\"https://plugins.jenkins.io/ssh-steps\">SSH Steps</a> - <a href=\"https://plugins.jenkins.io/jira-steps\">JIRA Steps</a> - <a href=\"https://plugins.jenkins.io/hubot-steps\">Hubot Steps</a></p>\n</div>","id":"nrayapati","irc":null,"linkedin":null,"name":"Naresh Rayapati","slug":"/blog/authors/nrayapati","twitter":"nrayapati"}]}}]}},"pageContext":{"limit":8,"skip":152,"numPages":100,"currentPage":20}},
    "staticQueryHashes": ["3649515864"]}