{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/15",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-10-21T00:00:00.000Z","id":"60f2a970-8226-5d65-b557-42bea62a60be","slug":"/blog/2019/10/21/thinking-about-jenkins-security/","strippedHtml":"This is a speaker blogpost for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal\n\nCome join us at DevOps World | Jenkins World 2019 for \" Thinking about Jenkins Security \", a talk about securing your Jenkins server.\nWe’ll review the layers that secure Jenkins and describe techniques that you can use to protect your Jenkins server.\n\nTopics will include:\n\nThe secure by default configuration that Jenkins provides\n\nRisks associated with reducing default security settings\n\nAuthentication and authorization alternatives\n\nUsing \" least privilege\" principles\n\nJenkins credentials and trusted access to resources\n\nSoftware updates and Jenkins project security notices\n\nWe’ll intermix descriptions of good practices with some security horror stories.\nThe horror stories remind us of our mistakes; we will discuss how to detect them and how to prevent them.\n\nCome join us for the presentation in Lisbon!\n\nSlides","title":"Thinking About Jenkins Security - DevOps World | Jenkins World 2019","tags":["jenkins world","jenkinsworld","devopsworld2019","security"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"blog/author/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":null},"blog":null,"github":"wadeck","html":"<div class=\"paragraph\">\n<p>Wadeck is a member of the <a href=\"/security/#team\">Jenkins security team</a>, working on fixes and improvements to Jenkins security.\nHe likes to provide solutions that are both useful and easy to use.</p>\n</div>","id":"wadeck","irc":null,"linkedin":null,"name":"Wadeck Follonier","slug":"blog/author/wadeck","twitter":null},{"avatar":{"childImageSharp":null},"blog":null,"github":"stackscribe","html":"<div class=\"paragraph\">\n<p>Meg is an experienced technical writer and training author with career experience at Bell Labs, SCO, Trend Micro, and CloudBees.</p>\n</div>","id":"stackscribe","irc":null,"linkedin":null,"name":"Meg McRoberts","slug":"blog/author/stackscribe","twitter":null}]}},{"node":{"date":"2019-10-08T00:00:00.000Z","id":"1aef3427-db0e-553e-8196-ae1a3516d783","slug":"/blog/2019/10/08/google-summer-of-code-mentor-and-org-admin-perspective/","strippedHtml":"I was fortunate enough to participate in the Google Summer of Code 2019 as a mentor and org admin. This was great\nand I wanted to share in hopes of encouraging more people to join.\nYou can learn more about the Google Summer of Code here: https://jenkins.io/projects/gsoc/\n\nCommunity Bonding\n\nThe first phase of the project is the community bonding phase. This is where the student and other mentors come together\nto lay out the plan for the project. It is important to set expectations and ensure that the student is well aware of\nwhat will take place and also made to feel welcome.\n\nParichay Barpanda was the student and he was super awesome from the get go. The project he was working on was the Gitlab\nBranch Source Plugin. More can be found here: jenkinsci/gitlab-branch-source-plugin\n\nFrom the mentor side it was myself and Justin Harringa. Justin was just amazing throughout this project and I seriously\ncould not have done this without him. He was encouraging, empathetic and just all around great. I would gladly serve\nwith him again.\n\nWe laid out our plan and guidance and got to work.\n\nFirst Evaluations\n\nThe first evaluation was quickly upon us and Parichay was ready!\nThe work he put in was nothing shy of amazing. We did our 1st demo and he really rocked it. A video of that demo can be\nfound on : Youtube\n\nSecond Evaluations\n\nThere was not much time to rest before we realized that phase II end was upon us but Parichay was ready. Again, he\nnailed it.\n\nThat demo can be found here\n\nMentors Submit Final Evaluations\n\nWe had our final evaluation and at this point Parichay was seasoned. He was getting issues assigned to him, working on\nlittle bug fixes and setting his roadmap for features. He absolutely blew Justin and I away.\n\nParichay’s final evaluation demo can be seen here\n\nAt the conclusion of the final demo’s, Justin and I met and went over Parichay’s final evaluation. At this point we had\nmet twice a week for several months, we have reviewed code daily, we had community involvement and most of all we had\nseen Parichay grow into a seasoned software developer.\n\nJustin and I were without a doubt passing Parichay on his entire body of work. I am actually tearing up typing this\nbecause I am so proud of Parichay.\n\nOrg Admin\n\nBeing an org admin for the 2019 Google Summer of Code project for the Jenkins organization was truly rewarding and couldn’t\nhave been accomplished without the help from Oleg Nenashev, Martin d’Anjou, Jeff Pearce and Lloyd Chang.\n\nAs an org admin we handled issues with mentors, community members and disagreements involving work. These items were only\na few and as a team we handled them accordingly.\n\nWe regularly met to discuss and plan. Coordinating and dealing with a project like Google Summer of Code is no small feat\nbut this team made it super easy and I am so thankful for them and all that I learned.\n\nClosing\n\nIn looking back at this experience I am so grateful for the opportunity I was given. This was such a rewarding experience\nto not only be able to mentor but also be an org admin. Not only will I be back next year (we are already in the\nplanning stages) but I highly encourage people reading this to consider joining. You will not be disappointed.\n\nI am so thankful for all the students, mentors and fellow org admins. Your dedication to open source is so valued. You\nshowed and continue to show what this project is all about, and that is being welcoming, open and transparent. Helping\npeople grow as individuals while learning skills is what I love about this community.\n\nThank you to everyone and I hope your futures are bright!","title":"Google Summer of Code Mentor and Org Admin Perspective","tags":["gsoc","gsoc2019","jenkins","community","events","mentor"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"blog/author/markyjackson-taulia","twitter":"markyjackson5"}]}},{"node":{"date":"2019-10-08T00:00:00.000Z","id":"a535bdaf-c81a-500c-8263-825803a1797a","slug":"/blog/2019/10/08/jcasc-phase1-blog/","strippedHtml":"Community Bridge Introduction\n\nCommunity Bridge is an initiative by the Linux Foundation to accelerate the adoption, innovation and sustainability of open source projects. I came across this initiative in a blog post. I had been contributing to Jenkins at the time and decided to have a chat with Oleg Nenashev and Tracy Miranda regarding the possibility of a project under the Community Bridge initiative. Fortunately for me JCasC ( Jenkins Configuration as Code) had the mentors as well as the project idea in place to start a project. After a few regular meetings we ironed out the details of the programme and on August 7th I began with my journey!\n\nJCasC Developer Tools — JSON Schema\n\nJSON files when submitted to a server undergo a validation to determine whether the values and the format are correct and that they conform to a well defined schema, this schema is known as a JSON Schema. A YAML file can also be validated using a JSON Schema.\nThe main premise of JCasC is to load YAML files written by developers into the Jenkins instance. An example of a JCasC YAML file is:\n\n---\njenkins:\n systemMessage: “Hello World”\n numExecutors:2\n ---\n\nThe above YAML configuration will configure Jenkins to display a message Hello world with the number of executors set to two. In order to validate the YAML we have a schema. This schema is written using jelly files (Executable XML files) and currently it is not a valid schema. The first phase of the project is based around rewriting the schema generation to java and developing a better test framework for it, because currently the schema is not testable.\n\nPhase 1 — JCasC Dev Tools\n\nThe first week I got into studying how the schema was generated.With the support of two of my awesome mentors Tim Jacomb and Joseph Peterson\nI finally got an understanding of the current schema.\nSo JCasC has a set of configurators for describing a YAML file.\nThey are:\na) Base Configurators\nb) Hetero Describable Configurators\nc) Data Bound Configurators\nThese configurators together successfully describe a YAML file.\nWe proceeded to generate the schema with the help of individual description of each of these configurators.\nThe JSON Schema has a set of components, consider the above yaml file as an example:\n\n---\n{\n  \"jenkins\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"systemMessage\": {\n        \"type\": \"string\"\n      },\n      \"numExecutors\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n---\n\nSo here Jenkins is the base configurator and it has a set of attributes viz systemMessage and numExecutors, so our schema needs to be able to describe a set of attributes for every field in the schema. Some of the fields that our JSON Schema uses to describe the YAML are:\n\n1) type : String, int, Boolean etc.\n\n2) properties : A set of fields describing the part field.\n\n3) id: Unique Identifier for the field\nThus the above schema successfully verifies the YAML configuration.\n\nJAVA Rewrite\n\nWe used JSON Objects to build components of the schema.The basic flow that is followed to generate the schema is as follows:\n\na) Iterate through the Base Configurators.\n\nb) Iterate over the list of Base Configurator.Attributes and add each attribute to the schema.\n\nc) Iterate over the HeteroDescribable Configurators and add each configurator to the schema along with its required properties.\n\nThe set of PR’s Resolved during Phase 1 are as follows:\n\na) Basic Schema\n\nb) Schema Doc Page\n\nc) Test Framework\n\nd) Nested Schema\n\nThat is all from me guys, I am currently preparing for phase 2 and working towards fixing any pending issues of Phase 1. Thanks for reading.\n\nPhase 2 Goals:\n\nWe would primarily target VSCode integration in phase 2 with the aim of:\n\na)Validation of JCasC YAML files with the schema\n\nb)Autocompletion\n\nc)Integration with a live Jenkins instance.\n\nContributions\n\nWe would love to get feedback from you on the stuff we are working on. Contributions to the project would be highly appreciated.\n\na) Gitter Chat\n\nb) Github Repository\n\nc) Project Introduction","title":"JCasC Community Bridge Dev Tools - Phase 1","tags":["community-bridge","JCasC","VSCode","community"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"blog/author/sladyn98","twitter":"SladynN"}]}},{"node":{"date":"2019-10-01T00:00:00.000Z","id":"352e9ec4-8e30-52da-98d7-ee02d21defd4","slug":"/blog/2019/10/01/hacktoberfest/","strippedHtml":"Once again, Hacktoberfest is back!\nDuring this October event, everyone can support open-source by contributing changes, and can earn limited edition swag.\nWe invite you to contribute to Jenkins, regardless of your experience and background.\nYou can write code, improve documentation and design, localize Jenkins or create new artwork.\nAny GitHub pull request counts!\n\nQuick start\n\nSign-up to Hacktoberfest on the event website.\n\nJoin our Gitter channel.\n\nEverything is set, just start creating pull-requests!\n\nThis year Hacktoberfest does not require labeling pull requests,\nbut please mention Hacktoberfest in your pull requests for faster reviews\n(see FAQ: Marking Pull requests)\n\nSee the details below.\n\nHow to contribute?\n\nThere are many ways to\ncontribute to Jenkins.\nIt is not just about code, any pull request in GitHub counts towards the Hacktoberfest goal.\n\nCode - Contribute to the code or automated tests.\nWe have components written in Java, JavasScript, Groovy, Go, Ruby and other languages.\n\nWrite - Improve documentation, write blogposts, create tutorials or solution pages\n\nLocalize - Help us to Localize Jenkins to other languages\n\nDesign - artwork and UI improvements also count!\n\nOrganize - Organize a local meetup for Jenkins & Hacktoberfest (see our event kit)\n\nSpread the word - Share your accomplishments in social media using the #hacktoberfest and #jenkinsci hashtags\n(or CC @jenkinsci in Twitter).\n\nWhere to contribute?\n\nThe Jenkins project is spread across multiple organizations on GitHub (jenkinsci, jenkins-infra, jenkins-zh).\nYou are welcome to contribute to any repository in any of these organizations,\nor to any other Jenkins-related repository on GitHub.\nIf you adopt Jenkins in your own open-source projects (e.g. Jenkins Pipeline or Configuration as Code),\nit counts as well! Some useful queries:\n\nJenkins JIRA issues suggested for Hacktoberfest\n\nGitHub issues suggested for Hacktoberfest\n\nNewbie-friendly issues in Jenkins JIRA\n\nGood first issues on GitHub\n\nFeatured projects. If you are a newcomer contributor, we have prepared a list of projects/components where you will get a warm welcome.\nAll these projects have newbie-friendly tasks, contributing guidelines, and active maintainers\nwho have committed to assist contributors and to quickly review pull requests.\nThe list of featured projects will be updated during the event,\nand we will make sure to create more newbie-friendly tasks if needed.\n\nIf you wonder about Jenkins X, it also part of Hacktoberfest this year!\nThey offer various topics, including hacking Jenkins X or improving its documentation.\nSee this blogpost for the announcement and links.\n\nHow to get help?\n\nIf you are stuck or have any question,\nsee our Hacktoberfest FAQ page for the common questions.\nIf it does not help, please reach out to us in our Gitter chat.\n\nAny meetups this year?\n\nThere are many events being organized by open-source communities.\nYou can join one of these events.\nWe invite to join the Jenkins Online Meetups on Oct 03\n ( APAC/EMEA - 7AM UTC,\nEMEA/Americas - 2PM UTC).\n\nThere will be also area meetups in Munich, Beijing, St. Petersburg and other cities.\nYou can find the full list here.\n\nUseful links\n\nHacktoberfest website\n\nHacktoberfest in Jenkins\n\nOur Gitter channel\n\nFrequently asked questions\n\nContributing to Jenkins\n\nHave a great hacking time!","title":"Hacktoberfest 2019. Contribute to Jenkins!","tags":["hacktoberfest","event","community","newcomer","outreach-programs"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2019-09-25T00:00:00.000Z","id":"784a72e9-875d-5a7a-aeb6-857a36385db1","slug":"/blog/2019/09/25/board-elections/","strippedHtml":"This is a repost of the original announcement made by Kohsuke Kawaguchi in the Jenkins Developer mailing list.\nMinor changes were applied to reflect the posting date and to provide more links.\n\nNominations for the 2019 Jenkins Board elections open for three governing board positions and five officer positions, namely: Security, Events, Release, Infrastructure and Documentation.\n\nThe terms of office for these positions are:\n\nOfficer positions (1 year): November 4, 2019 to November 3, 2020\n\nGoverning board members (2 years): November 4, 2019 to November 3, 2021\n\nTo nominate someone, simply send an email to jenkinsci-board@googlegroups.com with their name and position you nominate them for.\nPlease share any information on why you are making the nomination.\nSelf nominations are also welcome.\n\nThe board positions and officer roles are an essential part of Jenkins' community governance and well-being.\nI highly encourage everyone to consider participating.\n\nKey dates\n\nOct 04, 2019: Nominations close\n\nOct 08, 2019: List of nominees posted to mailing list\n\nOct 11, 2019: Nominees’ personal statements made available\n\nOct 14, 2019: Voting begins\n\nOct 27, 2019: Voting closes at 5pm Pacific Time\n\nNov 04, 2019: New representatives announced\n\nReferences\n\nJenkins Governance Board\n\nJenkins Board Election Process\n\nJenkins Officers\n\nAnnouncement in the developer mailing list\n\n2019 elections proposal in the developer mailing list","title":"2019 Jenkins Board and Officer elections. Nominations are open!","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2019-09-23T00:00:00.000Z","id":"c729ed47-ed8f-594c-a5e9-e523cff8ffd2","slug":"/blog/2019/09/23/outreachy-audit-log-release/","strippedHtml":"Thanks to our Outreachy interns over the past year, I’m proud to announce the initial release of the Audit Log plugin for Jenkins.\nThis plugin is the first major project completed related to Outreachy, and I’d like to give a brief overview of the functionality that was developed for this release.\nThe primary goal of this plugin is to introduce an audit trail of various Jenkins events using structured logging and related audit logging standards.\nInitially, this plugin covers audit events related to core Jenkins concepts like user accounts, jobs, builds, nodes, and credentials usage.\nMore specifically, this tracks:\n\nUser login and logout events\n\nCredentials usage\n\nUser creation (when using the Jenkins user database as a security realm)\n\nUser password updates (ditto)\n\nStarts and ends of builds\n\nCreation/modification/deletion/copying of items (which correspond to projects, pipelines, folders, etc.)\n\nCreation/modification/deletion of nodes.\n\nThis plugin defines and exports standardized log event classes and schemas corresponding to these events.\nOther plugins can add audit-log as a dependency to define their own audit events using Apache Log4j Audit and its catalog editor; then they can use the Maven plugin for generating the audit event classes for use in the plugin.\n\nThe other major feature of this plugin is configuring where to output these audit logs.\nBy default, audit logs will be written in HTML files (rotated once per day) to $JENKINS_HOME/logs/html/audit.html which are viewable through the \"Audit Logs\" root action link.\nIn the system settings, a section for audit logging is added where the main audit log output can be configured.\nThis can initially be configured to output via either a JSON log file in $JENKINS_HOME/logs/audit.log by default or to a syslog server using RFC5424 encoding.\n\nOverall, this experience has been rather interesting.\nBesides having an opportunity to mentor new contributors, Outreachy has helped open my eyes to the struggles that developers from around the world are dealing with which can be improved upon to help expand our communities.\nFor example, many countries do not have reliable internet or electricity, so the use of synchronous videoconferencing and other heavyweight, synchronous processes common to more corporate-style development are inadequate in this international context.\nThis doesn’t even begin to account for the difference in timezones which is not always an issue, though both problems are addressable by using asynchronous communication methods like chat and email.\nThis notion of asynchronous communication is an important aspect of the Apache Way, for example, which emphasises processes that allow for vendor neutral communities to form and thrive around a project.\n\nThis mentoring project was valuable to myself as well.\nAs a software engineer myself, project management is not my specialty, so this gave me a great opportunity to develop my own PM skills and technical leadership.\nMy own typical discovery process for feature development involves experimenting directly with the code to see what features make sense to prioritize and which would take a vast effort to implement.\nChanging my own discovery process to avoid implementing the features myself was difficult to adjust to, though I did defer any of my own feature contributions to this plugin until after the initial release.\nIn order to appropriately scope the project, I still had to spend a bit of time reading through the Jenkins codebase to determine which tasks could be implemented simply (e.g., good newbie-friendly issues), which tasks might require changes to Jenkins itself (previously discovered to take too long for these relatively short Outreachy rounds), and which tasks would require intimate familiarity with Jenkins and would likely be infeasible for new developers to Jenkins.\nThanks to the work done in discovery and delivery, I’ve also identified potential features for Log4j itself which could be used in future versions of this plugin.\n\nOverall, I think we did a good job of balancing the scope of this project without spending too much time in any specific area.\nThe first release of this plugin is now available in the Jenkins Update Center.\nIn the future, I hope to learn more about developing Jenkins UI components so that we can create a more dynamic and Jenkins-like configuration page for choosing where logs are output.\nWhile I don’t intend on using this plugin for further Outreachy rounds, I do hope to see more interest in it over time as the more security-conscious users out there discover this new plugin.","title":"Audit Log Plugin for Jenkins Releases 1.0","tags":["outreachy","logging","security","plugin","community"],"authors":[{"avatar":null,"blog":"https://musigma.blog/","github":"jvz","html":"<div class=\"paragraph\">\n<p>Mathematician, software engineer, and free software evangelist.\nWorks for CloudBees on the <a href=\"https://jenkins.io/security/\">Jenkins Security Team</a> along with other Jenkins community work since 2018.\nPMC Chair of the <a href=\"https://logging.apache.org/\">Apache Logging Services project</a> and Secretary for the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.</p>\n</div>","id":"jvz","irc":null,"linkedin":null,"name":"Matt Sicker","slug":"blog/author/jvz","twitter":"jvz"}]}},{"node":{"date":"2019-09-10T00:00:00.000Z","id":"d5e0f766-e02d-50ec-a790-2201ba4d74b9","slug":"/blog/2019/09/10/introducing-the-jira-software-plugin-for-jenkins/","strippedHtml":"According to a recent survey we conducted, software & IT teams on average use 4+ tools to move code from development to customer-facing production. As a result, teams struggle with keeping the status of work updated and understanding the overall health of their delivery pipeline.\n\nTo solve this problem, I am excited to announce that we built an official Jenkins plugin for Jira Software Cloud. The plugin automatically associates build and deployment information from Jenkins with relevant Jira issues and exposes key information about your pipeline across Jira issues, boards and via JQL. This means you can use Jira Software to automatically update and track issues through your complete development pipeline, from backlog to release.\n\nI hope this plugin adds value to you and your team. If you are interested in contributing or forking this plug-in you can head over to our project on the Jenkins GitHub repo to get started.\n\nBetter collaboration between teams\n\nThis new information view is so powerful because historically it was dispersed across multiple tools only accessible to a few members of your team. Now anyone involved in the software delivery process can self-serve this information. For example, product managers, QA, and support teams can view which features have been deployed to customers and which are still waiting in staging environments.\n\nWith better information sharing between tools in your delivery stack, you can also improve cross-collaboration between teams. Teams such as QA and operations can collaborate in the software teams next sprint. For example, you can use build information in Jira Software to create a workflow between QA and developers and create a rapid feedback loop for testing at any point in your development process.\n\nUse Jira’s Querying Language for advanced views\n\nIn addition to building better ways to collaborate, these integrations also give your team deeper insight into the development pipeline from within Jira Software. You can now create powerful views into your delivery pipeline with JQL queries across multiple connected tools. For example, you can write a custom JQL query to report all Jira issues that have been deployed to production but still have an open PR.\n\ndeploymentEnvironmentType ~ “production“ AND development[pullrequests].open\n\nGet started\n\nIn Jira Software Cloud\n\nCreate OAuth credentials in Jira for Jenkins\n\nNavigate to Jira home > Jira settings > Apps.\n\nSelect OAuth credentials.\n\nSelect Create credentials.\n\nEnter the following details:\n\nApp name - Jenkins\n\nApp logo - A URL to the Jenkins logo, which will be used as an icon in the list of credentials. Eg: https://jenkins.yourcompany.com/logo.png\n\nServer base URL - The URL to your Jenkins server. Eg: https://jenkins.yourcompany.com\n\nIn Jenkins\n\nInstall the Jenkins plugin\n\nLogin to your Jenkins server and navigate to the Plugin Manager.\n\nSelect the 'Available' tab and search for 'Atlassian Jira Software Cloud' as the plugin name then install it.\n\nThe open-source plugin is hosted in the Jenkins GitHub account. You can check it out here.\n\nSet up Jenkins credentials\n\nIn Jenkins, go to Manage Jenkins > Configure System screen and scroll to the Jira Software Cloud integration section.\n\nSelect Add Jira Cloud Site > Jira Cloud Site. The Site name, ClientID, and Secret fields display.\n\nEnter the following details:\n\nSite name: The URL for your Jira Cloud site, for example yourcompany.atlassian.net.\n\nClient ID: Copy from OAuth credentials screen (Client ID column).\n\nSecret: Select Add > Jenkins.\n\nFor Kind, select Secret text.\n\nFor Secret, copy from OAuth credentials screen (Secret column).\n\nFor Description, provide a helpful description\n\nSelect Test settings to make sure your credentials are valid for your Jira site.\n\nHow to use the plugin\n\nTo start using the integration:\n\nGo into a specific pipeline in Jenkins ( Note: Your pipeline must be a 'Multibranch Pipeline' ).\n\nFrom the left-hand menu, select Pipeline Syntax.\n\nIn the Snippet Generator, select jiraSendDeploymentInfo or jiraSendBuildInfo from the dropdown list of Sample Steps and fill in the relevant details.\n\nSelect Generate Pipeline Script and copy/paste the output into your Jenkinsfile on the relevant Repository you are using. This will be used to notify Jira when you run that pipeline on that repo.\n\nFor sending build information\n\nThis is an example snippet of a very simple ‘build’ stage set up in a Jenkinsfile. After the pipeline is run, it will post the build information to your Jira Cloud site by looking at the branch name. If there is a Jira issue key (e.g. “TEST-123”) in the branch name, it will send the data over to Jira.\n\nJenkinsfile example\n\npipeline {\n     agent any\n     stages {\n         stage('Build') {\n             steps {\n                 echo 'Building...'\n             }\n             post {\n                 always {\n                     jiraSendBuildInfo site: 'example.atlassian.net'\n                 }\n             }\n         }\n     }\n }\n\nFor sending deployment information\n\nThis is an example snippet of two stages that run on any change to the staging or master branch. Again, we use a post step to send deployment data to Jira and the relevant issues. Here, the environmentId, environmentName, and environmentType need to be set to whatever you want to appear in Jira.\n\nJenkinsfile example\n\npipeline {\n     agent any\n     stages {\n         stage('Deploy - Staging') {\n             when {\n                 branch 'master'\n             }\n             steps {\n                 echo 'Deploying to Staging from master...'\n             }\n             post {\n                 always {\n                     jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-stg-1', environmentName: 'us-stg-1', environmentType: 'staging'\n                 }\n             }\n         }\n         stage('Deploy - Production') {\n            when {\n                branch 'master'\n            }\n            steps {\n                echo 'Deploying to Production from master...'\n            }\n            post {\n                always {\n                    jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-prod-1', environmentName: 'us-prod-1', environmentType: 'production'\n                }\n            }\n         }\n     }\n }\n\nThe entire Jenkinsfile may look something like this. This is only meant to represent an example of what the Jira snippets could look like within a stage or step.\n\nJenkinsfile example\n\npipeline {\n     agent any\n     stages {\n         stage('Build') {\n             steps {\n                 echo 'Building...'\n             }\n             post {\n                 always {\n                     jiraSendBuildInfo site: 'example.atlassian.net'\n                 }\n             }\n         }\n         stage('Deploy - Staging') {\n             when {\n                 branch 'master'\n             }\n             steps {\n                 echo 'Deploying to Staging from master...'\n             }\n             post {\n                 always {\n                     jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-stg-1', environmentName: 'us-stg-1', environmentType: 'staging'\n                 }\n             }\n         }\n         stage('Deploy - Production') {\n            when {\n                branch 'master'\n            }\n            steps {\n                echo 'Deploying to Production from master...'\n            }\n            post {\n                always {\n                    jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-prod-1', environmentName: 'us-prod-1', environmentType: 'production'\n                }\n            }\n         }\n     }\n }\n\nQuestions or feedback?\n\nIf you have any questions, please contact Atlassian support and they will route it to the correct team to help you.","title":"Introducing the Jira Software plugin for Jenkins","tags":["jira","plugin","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"rafalmyslek","html":"","id":"rafalmyslek","irc":null,"linkedin":null,"name":"Rafal Myslek","slug":"blog/author/rafalmyslek","twitter":null}]}},{"node":{"date":"2019-08-30T00:00:00.000Z","id":"ddc369d5-a5e4-57f5-8fb7-5ebe49126b06","slug":"/blog/2019/08/30/jenkins-cli/","strippedHtml":"As a developer, I usually use Jenkins like this:\n\nFind a job which is related with my current work\n\nTrigger that job\n\nCheck the output of the build log\n\nSometimes, I might need to check the update center. Maybe a new plugin is needed, or I need to update an existing plugin.\nOr, I want to upload a plugin from my computer. For all these cases, I just don’t need a UI or even a browser.\nI like to use a CLI to complete most of my tasks. For example, I use kubectl to manage my Kubernetes cluster,\nto create or modify the kubernetes resources. So, I start to think, 'Why not use a CLI to manage my Jenkins?'.\n\nWhy create a new one?\n\nFirst, I almost forgot about the existing Jenkins CLI, written in Java. Let me introduce how to use that one.\n\nVisit Jenkins page from http://localhost:8080/jenkins/cli/ . You’ll see a command like java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ help. So, a jar file needs to be download.\nWe can use this command to complete this task wget http://localhost:8080/jenkins/jnlpJars/jenkins-cli.jar .\n\nNow you can see that this is not a Linux-style CLI. Please consider some points below:\n\nThe users must have a JRE. This is not convenient for developers who don’t use Java.\n\nThe CLI is too wordy. We always need to type java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ as the initial command.\n\nCannot install it by some popular package manager, like brew or yum.\n\nOf course, the Java CLI client is more native with Jenkins. But I’d like to use this more easily.\nSo I decided to create a new CLI tool which would be written in Go and which would natively run on modern platforms.\n\nThat’s the story of creating jcli.\n\nFeatures\n\nEasy to maintain config file for jcli\n\nMultiple Jenkins support\n\nPlugins management (list, search, install, upload)\n\nJob management (search, build, log)\n\nOpen your Jenkins with a browser\n\nRestart your Jenkins\n\nConnection with proxy support\n\nHow to get it?\n\nYou can clone jcli from the jenkins-cli repo. For now, we support\nthese three most popular OS platforms: MacOS, Linux, and Windows.\n\nMacOS\n\nYou can use brew to install jcli.\n\nbrew tap jenkins-zh/jcli\nbrew install jcli\n\nLinux\n\nIt’s very simple to install jcli into your Linux OS. Just need to execute a command line at below:\n\ncurl -L https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-linux-amd64.tar.gz|tar xzv\nsudo mv jcli /usr/local/bin/\n\nWindows\n\nYou can find the latest version by clicking here. Then download the tar file, cp the uncompressed jcli directory into your system path.\n\nHow to get started?\n\nIt’s very simple to use this. Once you get jcli on your computer, use this command to generate a sample configuration:\n\n$ jcli config generate\ncurrent: yourServer\njenkins_servers:\n- name: yourServer\n  url: http://localhost:8080/jenkins\n  username: admin\n  token: 111e3a2f0231198855dceaff96f20540a9\n  proxy: \"\"\n  proxyAuth: \"\"\n# Goto 'http://localhost:8080/jenkins/me/configure', then you can generate your token.\n\nIn most cases, you should modify three fields which are url, username and token. OK, I believe you’re ready. Please check whether you install the github plugin in your Jenkins:\n\njcli plugin list --filter name=github\n\nThat’s the end. It’s still in very early development stage. Any contribution is welcome.","title":"Managing Jenkins with jcli","tags":["general","jcli","cli","tools"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"LinuxSuRen","html":"<div class=\"paragraph\">\n<p>Rick is a big fan of Jenkins, also as a contributor leading the Jenkins China community.</p>\n</div>","id":"linuxsuren","irc":null,"linkedin":"linuxsuren","name":"赵晓杰(Rick)","slug":"blog/author/linuxsuren","twitter":"LinuxSuRen"}]}}]}},"pageContext":{"limit":8,"skip":112,"numPages":100,"currentPage":15}},
    "staticQueryHashes": ["3649515864"]}