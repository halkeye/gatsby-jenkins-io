{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/36",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2017-08-17T00:00:00.000Z","id":"9f425a12-2f6e-51cd-8c44-5ddce8f1bcb3","slug":"/blog/2017/08/17/speaker-blog-blazemeter/","strippedHtml":"This is a guest post by Guy Salton, Sr. Professional Services Engineer for\nCA BlazeMeter.\n\nJenkins\nPipeline is an important Jenkins feature for creating and managing a project\nin Jenkins. This is opposed to the traditional way of creating a Jenkins\nproject by using the Jenkins GUI. When running your open-source load test,\nJenkins Pipeline enables resilience, execution control, advanced logic and\nVersion Control management.  This blog post will explain how to run any\nopen-source load test with Jenkins Pipeline, through Taurus.\n\nTaurus is an open source test automation framework\nthat enables running and analyzing tests from 9 open source load and functional\ntesting tools: JMeter,\nSelenium, Gatling, The Grinder, Locust, Tsung, Siege, Apache Bench, and PBench.\nTest results can be analyzed in Taurus. For advanced analyses or running tests\nin the cloud, Taurus integrates with\nBlazeMeter.\n\nGuy will be\npresenting\nmore on this topic at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.\n\nGetting started with Taurus\n\nInstall Taurus.\n\nCreate the following Taurus configuration in YAML. Learn more about YAML in Taurus from\nthis tutorial.\n\n## execution:\n- concurrency: 100\n  hold-for: 10m\n  ramp-up: 120s\n  scenario: Thread Group\nscenarios:\n  Thread Group:\n    requests:\n    - label: blazedemo\n      method: GET\n      url: http://blazedemo.com/\n\nThis script runs 100 concurrent users, holds the load for 10 minutes, the\nramp-up is 120 seconds and the thread group runs one GET request to\nblazedemo.com.\n\nYou can specify an executor by adding executor: to the\nscript. Otherwise, the default executor will be JMeter. In the background,\nTaurus will create an artifact directory with a jmx file (or a Scala file if\nyou run Gatling, a Python file if you are running Selenium, etc.).\n\nOpen a terminal and run: bzt.yml\n\nView the test results:\n\nIf you want to conduct an in-depth analysis of your test results, run your\ntests on BlazeMeter. You will be able to monitor KPIs through advanced and\ncolorful reports, evaluate system health over time, and run your tests from\nmultiple geo-locations.\n\nRun the following command from the terminal:\n\nbzt.yml -report\n\nIntegrate Taurus With Pipeline\n\nTo run Taurus through Pipeline, you can also go\nstraight to Jenkins after creating your Taurus script.\n\nOpen Jenkins → New Item → Fill in an item name → Click on ‘Pipeline’\n\nNow create a Pipeline script. You can include all parts of\nyour CI/CD process in this script: Commit, Build, Unit Test, Performance Test,\netc., by creating different stages.\n\nThis Pipeline has three stages: The first is called “build”. In this example it\nis empty, but you can add commands that will build your code. The second,\ncalled “Performance Tests”, creates a folder called “Taurus-Repo” and runs the\nTaurus script that we created. At the same time (note the “parallel” command),\nthere is a “sleep” command for 60 seconds. Obviously it makes no sense to put\nthose two commands together, this is just to show you the option of running 2\ncommands in parallel. The third stage called “Deploy” is also empty in this\nexample. This is where you could deploy your new version.\n\nnode {\n   stage('Build') {\n      // Run the Taurus build\n   }\n   stage('Performance Tests') {\n    parallel(\n        BlazeMeterTest: {\n            dir ('Taurus-Repo') {\n                sh 'bzt.yml -report'\n            }\n        },\n        Analysis: {\n            sleep 60\n        })\n   }\n\n   stage(‘Deploy’) {\n   }\n}\n\nNote that you can either add the Pipeline inline, or choose the “Pipeline\nscript from SCM” option and add the URL to the script on GitHub (in this case\nyou need to upload a Jenkinsfile to GitHub). With \"Pipeline from SCM\",\nwhenever you need to update the tests, you can just add new commits to the\nJenkinsfile.\n\nSave the Pipeline\n\nClick on ‘Build Now’ to run the Pipeline\n\nClick on the new Build that is running now (build #6 in this example).\n\nClick on ‘Console Output’ to see the test results:\n\nIn the Console Output you can see the test results and also the link to the report in BlazeMeter.\n\nThat’s it! Jenkins Pipeline is now running open-source load testing tools via Taurus.\n\nCome to\nmy\nfree hands-on workshop “Learn to Release Faster by Load Testing With Jenkins”\nat Jenkins World 2017 on Tuesday August 29th from 1-5pm.  You will learn how to\ntest continuously with Jenkins, JMeter, BlazeMeter and Taurus, including how to\nrun JMeter with Jenkins, run the BlazeMeter plugin for Jenkins and how to use\nopen-source Taurus.\n\nTo learn more about BlazeMeter,\nclick here.","title":"Running load tests in Jenkins Pipeline with Taurus","tags":["event","jenkinsworld"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman","twitter":null}]}},{"node":{"date":"2017-08-11T00:00:00.000Z","id":"4d1723b9-7ca9-59e6-a301-6c0e75388381","slug":"/blog/2017/08/11/remoting-update/","strippedHtml":"Updated on Jan 10, 2019: The deprecated protocols were removed in Remoting 3.40+ and Jenkins 2.214+.\nSee jira:JENKINS-60381[Remove old, deprecated Remoting protocols] for more information and links.\n\nThere are upcoming changes in Jenkins \"core\" which may require extra steps\nwhen upgrading Jenkins.  If you use configuration management for Jenkins\nagents, please read this announcement carefully.\n\nIf you have ever seen messages like \"Channel is already closed\" or \"Remote call failed\" in your build logs,\nyou have already met Jenkins Remoting.\n\nRemoting is an agent executable and a library implementing the communication layer between Jenkins controllers and their agents (including communication protocols, distributed calls and classloading).\nIt is also used in several other cases: Maven Integration Plugin, Remoting-based CLI, etc.\n\nIn order to make it clear what’s changing in Jenkins Remoting, I have documented the various components on\nthe Remoting’s sub-project page, and will try to publish regular updates about the status of\nRemoting to this site and the developer mailing list.\n\nIn this post I would like to provide an update on the Remoting roadmap and to announce two major incoming changes: deprecation of old protocols and upgrade to Java 8.\nBoth changes will take place in one of the next Weekly releases.\nETA is Jenkins 2.75 on Aug 20, 2017.\n\nBelow are details on the incoming changes and compatibility notes.\n\nOld Remoting Protocols Deprecation\n\nIt has been almost one year since the release of JNLP4-connect protocol in Remoting 3.0.\nThis protocol has been enabled by default since 2.46.x, and so far it demonstrates good stability being compared to JNLP2 and JNLP3 protocols.\n\nAt the governance meeting\nwe decided to disable old Remoting protocols (JNLP/JNLP2 + CLI1) in new installations by default.\nThere are 3 reasons for it:\n\nMaintenance of multiple protocols takes a lot of extra effort.\nThe JNL2 NIO engine is complex and barely diagnosable.\n\nThere are known issues in JNLP2 connection management (see the protocol’s Errata). In many cases update to JNLP4 was a resolution\n\nJNLP1/JNLP2/CLI1 are unencrypted, and it is not something Jenkins users may expect in 2017\n\nIt is tracked as JENKINS-45841 in Jenkins JIRA.\n\nHow?\n\nWhen Jenkins is started in the new installation mode with enabled Installation Wizard, old protocols will be disabled\n\nJenkins shows an administrative warning when obsolete protocols are enabled\n\nCompatibility notes\n\nOlder instances won’t be affected by the disabling of the older JNLP1/JNLP2 protocols, which will still be enabled for them.\nNewly created instances which skip, or disable, the Setup Wizard will not be affected either.\n\n\"New\" Jenkins instances installed via setup wizard may be affected in edge cases. For example:\n\nAgents with Remoting older than 3.0 will be unable to connect.\n\nMitigation: Before updating make sure Remoting is not bundled custom Docker images, AMIs, etc.\n\nSwarm Plugin: old versions of Swarm Client (before 3.3) will be unable to connect to Jenkins, because Remoting 2.x is bundled\n\nMitigation : Update Swarm Client\n\nVery old jenkins-cli.jar without CLI2 support will be unable to connect.\n\nMitigation : Do not use Remoting-based CLI on new instances (see this blogpost)\n\nUpgrade to Java 8\n\nStarting with version 2.54, Jenkins requires Java 8 to run\n( announcement blog post).\nThis version is also required for Jenkins LTS 2.60.1.\n\nRemoting continued to support Java 7 for a while for backporting purposes,\nbut it will be also upgraded to Java 8 in the Remoting 3.11 release.\nThis Rremoting version is expected to be available in Jenkins 2.75 (ETA: Aug 20, 2017).\nThis change is tracked as JENKINS-43985.\n\nCompatibility notes\n\nThe update does not cause compatibility issues in common use-cases.\nHowever, there may be issues in custom Jenkins core builds and packaging.\nThere are several examples below.\n\nJenkins instances with built-in Remoting versions will NOT be affected, Java 8 is already required there\n\nUsers of community-provided Docker packages ( docker-agent,\ndocker-inbound-agent) will NOT be affected,\nJava 8 is already required there\n\nCustom Jenkins WAR file builds targeting Java 7 may fail to build/run if they bundle Remoting 3.11 or later\n\nCustom Jenkins agent instances (manually installed hosts, VM snapshots, Docker packages, AMIs, etc.) may fail if they download the latest Remoting version and use Java 7\n\nJava 9 support\n\nAs with Jenkins core, Java 9 not supported and not tested in Remoting.\nIt may work in some configurations, but it is not guaranteed.\n\nAs a consequence, it is not recommended to run Remoting with Java 9 right now.\nIt is also not recommended to use Maven Integration Plugin to run builds on Java 9.\n\nWhat’s next?\n\nThere are some ongoing activities in the Remoting sub-project:\n\nStability and Diagnosability improvements\n( JENKINS-38833)\n\nWhy? When it comes to Remoting issues, it is really hard to diagnose them\n\nRecently I have published some slides about preventing and diagnosing issues, but I want the behavior to be more stable by default\n\nThis Epic lists my plans about Remoting issues and papercuts I would like to fix this year\n\nRemoting Work Directories\n( JENKINS-44108)\n\nFor a long time logging was disabled by default in Java Web Start (JNLP) and SSH agents, because Remoting had no option to determine where to store such data before connecting to the controller\n\nThe new Remoting Work Directory feature (since Remoting 3.8) offers such storage, which is also used for storing JAR caches and for checking workspace writeability before accepting builds.\n\nThis Epic is about enabling Remoting work directories by default in common Agent launcher types.\n\nRemoting Upgradeability\n( JENKINS-44099)\n\nRight now Remoting is not being upgraded automatically on JNLP agents, it is supported only for Windows service agents starting from Jenkins 2.50\n\nOn the Jenkins controller side it is required to upgrade the Jenkins core in order to pick Remoting fixes.\n\nThis Epic aims simplifying the upgrade procedure for most common cases.\n\nIf you are interested in contributing to these tasks, or others in the Remoting\nsub-project, please feel free to reach out via the issue tracker or\n#jenkins IRC channel.\n\nIf you are coming to Jenkins World, you can also find me at the \"Ask the Experts\" booth there.\nSee more info about Ask the Experts here.\n\nUseful links\n\nRemoting Sub-Project on Jenkins website\n\nRemoting Release Notes\n\nRemoting documentation on GitHub\n\nMy slides about Remoting issues troubleshooting","title":"Remoting Update. Protocols deprecation, Java 8 requirement and plans","tags":["remoting","agents","upgrade","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2017-08-10T00:00:00.000Z","id":"7a11360a-42a4-5d64-8401-89a9e4f35904","slug":"/blog/2017/08/10/kubernetes-with-pipeline-acs/","strippedHtml":"This is a guest post by Pui Chee Chen,\nProduct Manager at Microsoft working on\nAzure\nDevOps open source integrations.\n\nRecently, we improved the Azure Credential plugin by\nadding a custom binding for Azure Credentials which allows you to use an\nAzure\nservice principal (the analog to a service or system account) via  the\nCredentials Binding plugin. This means it’s now trivial to run Azure CLI\ncommands from a Jenkins Pipeline. We also recently published the first version\nof the Azure App Service plugin which makes it very\neasy to deploy\nAzure Web\nApps directly from Jenkins Pipeline. While we’ll have\nmuch more to discuss in our Jenkins World presentation on\nAzure\nDevOps open source integrations, in this blog post I wanted to share some good\nsnippets of what is possible today with Jenkins Pipeline and Azure.\n\nFirst, a simple example using the Azure CLI to list resources in the\nsubscription:\n\n// Scripted //\nnode {\n    /* .. snip .. */\n    stage('Deploy') {\n        withCredentials([azureServicePrincipal('principal-credentials-id')]) {\n            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'\n            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'\n            sh 'az resource list'\n        }\n    }\n}\n// Declarative //\n\nazureServicePrincipal() cannot be used in Declarative Pipeline until\nJENKINS-46103 is\nresolved.\n\nOnce a Pipeline can interact with Azure, there are countless ways one could\nimplement continuous delivery with Jenkins and Azure. From a deploying a simple\nwebapp with the\nAzure\nApp Service plugin and the azureWebAppPublish step, or a more advanced\ncontainer-based delivery pipeline to deliver new containers to\nKubernetes\nvia Azure Container Service.\n\nWith the Docker Pipeline plugin and a little bit of\nextra scripting, a Jenkins Pipeline can also build and publish a Docker\ncontainer to an\nAzure\nContainer Registry :\n\n// Scripted //\nimport groovy.json.JsonSlurper\n\nnode {\n    def container\n    def acrSettings\n\n    withCredentials([azureServicePrincipal('principal-credentials-id')]) {\n        stage('Prepare Environment') {\n            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'\n            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'\n            acrSettings = new JsonSlurper().parseText(\n                                            sh(script: \"az acs show -o json -n my-acr\", returnStdout: true))\n        }\n\n        stage('Build') {\n            container = docker.build(\"${acrSettings.loginServer}/my-app:${env.BUILD_ID}\")\n        }\n\n        stage('Publish') {\n            /* https://issues.jenkins.io/browse/JENKINS-46108 */\n            sh \"docker login -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} ${acrSettings.loginServer}\"\n            container.push()\n        }\n\n        stage('Deploy') {\n            echo 'Orchestrating a new deployment with kubectl is a simple exercise left to the reader ;)'\n        }\n    }\n}\n// Declarative //\n\nIf you have been following our\nAzure Blog, you may\nhave noticed we have shipped a lot of updates to provide better support for\nAzure on Jenkins, and vice versa, such as:\n\nHosted Jenkins. New\nSolution\nTemplate in Azure Marketplace lets you spin up a\nJenkins Controller on Azure in minutes. Not only is it easy and fast, the solution\ntemplate gives you option to scale up by selecting the VM disk type and size.\nAnd guess what? You can even select the Jenkins release type you want to use -\nLTS, weekly build or Azure verified - all under your control.\n\nContinuous integration experience. In the latest version of our\nAzure VM Agents plugin, we improved the user\nexperience and added the option to let you to select Managed Disk for disk\ntype (which is currently used extensively on\nci.jenknis.io. You no longer need to worry about\nexceeding the number of VMs on your subscription.\n\nContinuous deployment experience. Now, if\nAzure CLI is not your cup of tea, we released our first plugin to provide\ncontinuous deployment support to Azure App Service. The plugin supports all\nlanguages Azure App Service supports. We even have a walkthrough\nhere in the\nbrand new Jenkins Hub where you can find all Jenkins on Azure resources.\n\nPipeline readiness. Also, all Azure plugins are and will be pipeline ready.\nHave you been leveraging our\nAzure Storage plugin in your Pipeline?\n\nSo, what’s next? We have a big surprise in store at Jenkins World! :)\n\nWe are serious about supporting open source and the open source community.\nBe sure to catch our talk on\nAzure\nDevOps open source integrations.\nSee you at\nJenkins World 2017!\n\nJoin the Azure DevOps team at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"CI/CD with Jenkins Pipeline and Azure","tags":["plugins","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2017-08-08T00:00:00.000Z","id":"2e385886-1033-5881-ab06-b060d5568108","slug":"/blog/2017/08/08/introducing-jenkins-minute/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nThere are less than three weeks left until\nJenkins World 2017.\nLike last year, I’ll be at the\n\" Ask the Experts\"\nbooth to answer questions about all things Jenkins.\nIn preparation, I’ve started a continuing series of quick tutorial videos that answer\nsome of the most common questions I’ve seen asked in the community forums.\nThese  are by no means exhaustive - they’re basic answers, which we can build upon.\nEach video give a takes a simple example, shows how to create a working solution,\nand includes links in the description to related Jenkins documentation pages.\n\nI hope you find them useful.  Look for more of them coming soon!\n\nLiam will be at the\n\" Ask the Experts\"\nbooth at\nJenkins World in August.\nRegister with the code JWFOSS for a 30% discount off your pass.\n\nCreating Your First Pipeline in Blue Ocean\n\nUsing a Dockerfile with Jenkins Pipeline\n\nAdding Parameters to Jenkins Pipeline\n\nRecording Test Results and Archiving Artifacts","title":"Introducing the Jenkins Minute video series","tags":["blueocean","docker","jenkins-minute","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-08-07T00:00:00.000Z","id":"30508a44-0d3c-579b-8b31-b92e43b9e1f2","slug":"/blog/2017/08/07/intro-to-plugin-development/","strippedHtml":"This is a guest post by Mark Waite, who maintains\nthe git plugin,\nthe git client plugin,\nand is a technical evangelist for CloudBees, Inc.\n\nWhile developing the \" Intro to Plugin Development\"\nworkshop for Jenkins World 2017, I was impressed by the many Jenkins plugin development videos, tutorials, and guides.\nHere are some of my favorite plugin development topics and links.\n\nPlugin tutorial videos\n\nJenkins Online Meetup Plugin Development Part 1 - Basics - Steven Christou and Jesse Glick\n\nJenkins Online Meetup Plugin Development Part 2 - Web UI - Daniel Beck and Tom Fennelly\n\nWriting your third plugin - Justin Ryan\n\nJenkins Hackathon session at TNG Technology Consulting - Kohsuke Kawaguchi\n\nPlugin tutorial pages\n\nTutorial on jenkins.io\n\nInstall a Java Development kit, for example AdoptOpenJDK 8 or 11\n\nInstall the latest maven release\n\nInstall your IDE (I like Netbeans, has the Jenkins/Stapler plugin to make plugin creation as easy as menu:File[New Project > Maven > Jenkins Plugin])\n\nMore details\n\nMany of the Jenkins plugin development topics have dedicated pages of their own, including user interface, plugin testing, and javadoc.\n\nUser interface\n\nUI samples plugin (bars, boxes, buttons, lists, notification, and syntax highlighting)\n\nUnderstanding Jelly Tags from the Jenkins wiki\n\nForm Validation from the Jenkins wiki\n\nJelly Form Controls from the Jenkins wiki\n\nJelly Tag Library Reference from jenkins.io\n\nDataBoundConstructor in Basic Guide to Jelly usage\n\nDataBoundSetter in google groups\n\nTesting a plugin\n\nUnit test from the Jenkins wiki\n\nJenkins test objects like JenkinsRule and the WithoutJenkins annotation\n\nDataBoundConstructor in Basic Guide to Jelly usage\n\nDataBoundSetter in google groups\n\nJava unit testing tools like Hamcrest and AssertJ (and JenkinsMatchers)\n\nJava unit testing rules like TemporaryFolder, Timeout, and DisableOnDebug\n\nJava unit testing classes like Assume and Parameterized\n\nJava unit testing mock frameworks like mockito and powermock\n\nJavadoc\n\nJenkins core javadoc\n\nJenkins plugins javadoc\n\nExtension Points\n\nList of Jenkins core extension points and all Jenkins extension points\n\nCustom build steps\n\nAdding a custom build step\n\nActions\n\nJenkins Action and its subtypes\n\nMark will be presenting\nIntro to Plugin Development\nat\nJenkins World in August.\nRegister with the code JWFOSS for a 30% discount off your pass.","title":"Plugin Development Tutorials, Videos, and More","tags":["plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2017-08-07T00:00:00.000Z","id":"7ba8b0b9-e907-55d4-a2a2-ca447df4c528","slug":"/blog/2017/08/07/security-advisory/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities, including multiple high severity ones.\n\nWe strongly recommend updating the following plugins as soon as possible:\n\nBlue Ocean\n\nPipeline: Groovy Plugin\n\nScript Security Plugin\n\nLess severe security updates have been released for these plugins:\n\nConfig File Provider Plugin\n\nDatadog Plugin\n\nDeploy to container Plugin\n\nDRY Plugin\n\nPipeline: Input Step Plugin\n\nStatic Analysis Utilities Plugin\n\nAdditionally, the OWASP Dependency-Check Plugin recently also received a security update.\n\nFor an overview of what was fixed, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Important security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-08-03T00:00:00.000Z","id":"1ddf93ad-21ef-5f16-9fd5-7a69d3fb97d3","slug":"/blog/2017/08/03/jenkinsworld-ask-the-experts/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nThere are less than four weeks left until Jenkins World 2017. As usual, Jenkins\nWorld would not be complete without the Jenkins projects' \"Ask the Experts\". If\nyou are new to Jenkins World, the Jenkins project booth will be located on the\nexpo floor where contributors to the project hang out, share demos, and\nhelp users via the \"Ask the Experts\" program. I hope you will be pleasantly\nsurprised at the amount of 1-on-1 learning to be had in the booth!\n\nWe have a great list of experts who have volunteered to help staff the booth,\nincluding many frequent contributors, JAM organizers, and board members:\n\nDaniel Beck - Core, security, Jenkins supporting infra and developer supporting infra, project processes and governance\n\nSteven Christou - Plugins\n\nR. Tyler Croy - Pipeline, Docker,  governance\n\nNicolas De Loof - Docker\n\nJames Dumay - Blue Ocean, Pipeline, Jenkins future\n\nDamien Duportal - Docker, Infra/Virtualization, Provisioning Systems (ansible,chef, etc.), Pipeline\n\nTom Fennelly - Blue Ocean, general frontend stuff, general Jenkins stuff\n\nJesse Glick - Core, Pipeline, security, Jenkins dev infra, Mercurial, …\n\nMichael Hutterman - DevOps\n\nBaptiste Mathus - Governance, infra, Pipeline, HOSTING\n\nMichael Neale - Docker, Blue Ocean\n\nOleg Nenashev - Jenkins core, Jenkins administration, remoting\n\nLiam Newman - Pipeline, Jenkins 2\n\nJames Nord - Maven, plugins\n\nSam Van Oort - Pipeline, performance/scalability, Linux, Docker\n\nChris Orr -  Android development, Jenkins dev infra\n\nCarlos Sanchez - Docker, Mesos, Kubernetes\n\nBobby Sandell - Gerrit, Declarative Pipeline, core\n\nThorsten Scherler - Blue Ocean, front-end\n\nEric Smalling - Docker, config management (Puppet, some Ansible), VMware solutions, running Jenkins at large scale and general enterprise SDLC\n\nOlivier Vernin - Infra, Docker\n\nMark Waite - Git, Git plugin, Git client plugin\n\nOwen Mehegan - GitLab plugin\n\nDon’t have questions? Stop by anyways to say ‘hello’ and pick up some stickers.\n\nIf you are an active member of the Jenkins community and/or a contributor,\nconsider taking part in the \"Ask the Experts\" program. It’s a great opportunity\nto bond with other contributors and talk with fellow Jenkins users.\n\nJoin the Jenkins project at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Ask the Experts at Jenkins World 2017","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2017-07-27T00:00:00.000Z","id":"92796c2d-9e8b-530e-82dd-441263269c06","slug":"/blog/2017/07/27/standardizing-builds-with-shared-libraries/","strippedHtml":"This is a guest post by Alvin Huang, DevOps Engineer at\nFireEye.\n\nAs a security company, FireEye relentlessly protects our customers from cyber attacks. To act\nquickly on intelligence and expertise learned, the feedback loop from the front lines to features\nand capabilities in software must be small. Jenkins helps us achieve this by allowing us to build,\ntest, and deploy to our hardware and software platforms faster, so we can stop the bad guys\nbefore they reach our customers.\n\nMore capabilities and functionalities in our product offerings means more applications and\nsystems, which means more software builds and jobs in Jenkins. Within the FaaS (FireEye as a\nService) organization, the tens of Jenkins jobs that were manageable manually in the web GUI\nquickly grew to hundreds of jobs that required more automation. Along the way, we outgrew\nour old legacy datacenter and were tasked with migrating 150+ Freestyle jobs on an old 1.x\nJenkins instance to a newer 2.x instance in the new datacenter in 60 days.\n\nCopying Freestyle job XML configuration files to the new server would leave\ntechnical debt.  Using Freestyle job templates would be better but for\ncomplicated jobs that require multiple templates, this would still create large\ndependency chains that would be hard to trace in the log output. Finally,\ndevelopers were not excited about having to replicate global changes, such as\nadd an email recipient when a new member joins the team, across tens of jobs\nmanually or using the\nConfiguration\nSlicer. We needed a way to migrate the jobs in a timely fashion while getting\nrid of as much technical debt as possible.\n\nJenkins Pipeline to the rescue! In 2.0, Jenkins added the capability to create pipelines as first-\nclass entities. At FireEye, we leveraged many of the features available in pipeline to aid in the\nmigration process including the ability to:\n\ncreate Pipeline as Code in a Jenkinsfile stored in SCM\n\ncreate Jenkins projects automatically when new branches or repos get added with a Jenkinsfile\n\ncontinue jobs after the Jenkins controller or build agent crashes\n\nand most importantly, build a Pipeline\nShared Library that keeps projects\nDRY and\nallows new applications to be on boarded into Jenkins within seconds\n\nHowever, Jenkins Pipeline came with a DSL that our users would have to learn to translate their\nFreestyle jobs to pipeline jobs. This would be a significant undertaking across multiple teams\njust to create Jenkins jobs. Instead, the DevOps team identified similarities across all the\nFreestyle jobs that we were migrating, learned the Jenkins DSL to become SMEs for the\norganization, and built a shared library of functions and wrappers that saved each Dev/QA\nengineer hours of time.\n\nBelow is an example function we created to promote builds in Artifactory:\n\nvars/promoteBuild.groovy\n\ndef call(source_repo, target_repo, build_name, build_number) {\n    stage('Promote to Production repo') {\n        milestone label: 'promote to production'\n        input 'Promote this build to Production?'\n\n        node {\n            Artifactory.server(getArtifactoryServerID()).promote([\n                'buildName'   : build_name,\n                'buildNumber' : build_number,\n                'targetRepo'  : target_repo,\n                'sourceRepo'  : source_repo,\n                'copy'        : true,\n            ])\n    }\n}\n\ndef call(source_repo, target_repo) {\n    buildInfo = getBuildInfo()\n\n    call(source_repo, target_repo, buildInfo.name, buildInfo.number)\n}\n\nRather than learning the Jenkins DSL and looking up how the Artifactory Plugin worked in\nPipeline, users could easily call this function and pass it parameters to do the promotion work\nfor them. In the Shared Library, we can also create build wrappers of opinionated workflows,\nthat encompasses multiple functions, based on a set of parameters defined in the Jenkinsfile.\nIn addition to migrating the jobs, we also had to migrate the build agents. No one knew the\nexact list of packages, versions, and build tools installed on each build server, so rebuilding\nthem would be extremely difficult. Rather than copying the VMs or trying to figure out what\npackages were on the build agents, we opted to use Docker to build containers with all\ndependencies needed for an application.\n\nI hope you will join me at my Jenkins World session:\nCodifying the Build and Release Process with a Jenkins\nPipeline Shared Library, as I deep dive into the inner workings of our Shared\nPipeline Library and explore how we integrated Docker into our CI/CD pipeline.\nCome see how we can turn a Jenkinsfile with just a set of parameters like this:\n\nJenkinsfile\n\nstandardBuild {\n    machine          = 'docker'\n    dev_branch       = 'develop'\n    release_branch   = 'master'\n    artifact_apttern = '*.rpm'\n    html_pattern     = [keepAll: true, reportDir: '.', reportFiles: 'output.html', reportName: 'OutputReport']\n    dev_repo         = 'pipeline-examples-dev'\n    prod_repo        = 'pipeline-examples-prod'\n    pr_script        = 'make prs'\n    dev_script       = 'make dev'\n    release_script   = 'make release'\n}\n\nand a Dockerfile like this:\n\nDockerfile\n\nFROM faas/el7-python:base\n\nRUN yum install -y python-virtualenv \\\n        rpm-build && \\\n        yum clean all\n\nInto a full Jenkins Pipeline like this:\n\nAs we look ahead at FireEye, I will explore how the Shared Library sets us up for easier future\nmigrations of other tools such as Puppet, JIRA, and Artifactory, and easier integration with new\ntools like Openshift. I will also cover our strategies for deployments and plans to move to\nDeclarative Pipeline.\n\nAlvin will be\npresenting\nmore on this topic at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Codifying the Build and Release Process with a Pipeline Shared Library","tags":["event","JenkinsWorld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}}]}},"pageContext":{"limit":8,"skip":280,"numPages":100,"currentPage":36}},
    "staticQueryHashes": ["3649515864"]}