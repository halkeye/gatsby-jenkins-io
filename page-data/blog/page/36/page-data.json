{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/36",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2017-09-27T00:00:00.000Z","id":"5b2d3ef5-84a4-5c1d-9c5a-91281a16952a","slug":"/blog/2017/09/27/sept-jenkins-online-meetup/","strippedHtml":"At Jenkins World last month, we continued the tradition of \"lunch-time demos\"\nin the Jenkins project’s booth which we started in 2016.  We invited a number\nof Jenkins contributors to present brief 10-15 minute demos on something they\nwere working on, or considered themselves experts in. Continuing the\npost-Jenkins World tradition, we also just hosted a \"Jenkins Online Meetup\"\nfeaturing a selection of those lunch-time demos.\n\nI would like to thank Alyssa Tong for organizing this online meetup, Liam Newman for acting as the host, and our speakers:\n\nOleg Nenashev\n\nMichael Hüttermann\n\nThorsten Scherler\n\nStephen Donner\n\nMark Waite\n\nKeith Zantow\n\nBelow are some links from the sample projects demonstrated and the direct links\nto each session.\n\nDeveloping Pipeline Libraries Locally\n\nVideo link\n\nIf you have ever tried developing Pipeline Libraries, you may have noticed how\nlong it takes to deploy a new version to server to discover just another syntax\nerror. I will show how to edit and test Pipeline libraries locally before\ncommitting to the repository (with Configuration-as-Code and Docker).\n\nSlides\n\nSource Code\n\nDemo container\n\nDelivery Pipelines with Jenkins\n\nVideo link\n\nShowing off how to set up holistic Delivery Pipelines with the DevOps enabler tool Jenkins.\n\nDemo application\n\nPimp my Blue Ocean\n\nVideo link\n\nHow to customize Blue Ocean, where I create a custom plugin and extending Blue\nOcean with custom theme and custom components.\n\nPresentation and demo code\n\nDeliver Blue Ocean Components at the Speed of Light\n\nVideo link\n\nUsing storybook.js.org for Blue Ocean frontend to speed up the delivery process\n- validate with PM and designer the UX. Showing how quickly you develop your\ncomponents.\n\nPresentation and demo code\n\nMozilla’s Declarative + Shared Libraries Setup\n\nVideo link\n\nHow Mozilla is using Declarative Pipelines and shared libraries together.\n\nGoogle Doc with links\n\nShared Library source code\n\nDocumentation for the shared library\n\nSee also the #fx-test IRC channel on irc.mozilla.org\n\nGit Tips and Tricks\n\nVideo link\n\nLatest capabilities in the git plugin, like large file support, reference\nrepositories and some reminders of existing tips that can reduce server load,\ndecrease job time, and decrease disc use.\n\nVisual Pipeline Creation in Blue Ocean\n\nVideo link\n\nWe will show how to use Blue Ocean to build a real-world continuous delivery\npipeline using the visual pipeline editor. We will coordinate multiple\ncomponents of a web application across test and production environments,\nsimulating a modern development and deployment workflow.","title":"Pipeline and Blue Ocean Demos from Jenkins World","tags":["jam","jenkinsonlinemeetup","jenkinsworld","events"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2017-09-25T00:00:00.000Z","id":"ec7b8ed5-f69c-5e84-9b65-735961d0c5cf","slug":"/blog/2017/09/25/declarative-1.2-released/","strippedHtml":"After a few months of work on its key features, I’m happy to announce the\n1.2 release of\nDeclarative Pipeline!\nOn behalf of the contributors developing Pipeline, I thought it would be\nhelpful to discuss three of the key changes.\n\nParallel Stages\n\nFirst, we’ve added syntax support for parallel stages. In earlier versions of\nDeclarative Pipeline, the only way to run chunks of Pipeline code in parallel\nwas to use the parallel step inside the steps block for a stage, like this:\n\n/* .. snip .. */\nstage('run-parallel-branches') {\n  steps {\n    parallel(\n      a: {\n        echo \"This is branch a\"\n      },\n      b: {\n        echo \"This is branch b\"\n      }\n    )\n  }\n}\n/* .. snip .. */\n\nWhile this works, it doesn’t integrate well with the rest of the Declarative\nPipeline syntax. For example, to run each parallel branch on a different agent,\nyou need to use a node step, and if you do that, the output of the parallel\nbranch won’t be available for post directives (at a stage or pipeline\nlevel). Basically the old parallel step required you to use Scripted Pipeline\nwithin a Declarative Pipeline.\n\nBut now with Declarative Pipeline 1.2, we’ve introduced a true Declarative\nsyntax for running stages in parallel:\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('Run Tests') {\n            parallel {\n                stage('Test On Windows') {\n                    agent {\n                        label \"windows\"\n                    }\n                    steps {\n                        bat \"run-tests.bat\"\n                    }\n                    post {\n                        always {\n                            junit \"**/TEST-*.xml\"\n                        }\n                    }\n                }\n                stage('Test On Linux') {\n                    agent {\n                        label \"linux\"\n                    }\n                    steps {\n                        sh \"run-tests.sh\"\n                    }\n                    post {\n                        always {\n                            junit \"**/TEST-*.xml\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nYou can now specify either steps or parallel for a stage, and within\nparallel, you can specify a list of stage directives to run in parallel,\nwith all the configuration you’re used to for a stage in Declarative\nPipeline. We think this will be really useful for cross-platform builds and\ntesting, as an example. Support for parallel stages will be in the\nsoon-to-be-released Blue Ocean Pipeline Editor 1.3 as well.\n\nYou can find more documentation on parallel stages in the\nUser Handbook.\n\nDefining Declarative Pipelines in Shared Libraries\n\nUntil the 1.2 release, Declarative Pipelines did not officially support\ndefining your pipeline blocks in a shared library. Some of you may have tried\nthat out and found that it could work in some cases, but since it was never an\nofficially supported feature, it was vulnerable to breaking due to necessary\nchanges for the supported use cases of Declarative. But with 1.2, we’ve added\nofficial support for defining pipeline blocks in src/.groovy files in your\nshared libraries. Within your src/.groovy file’s call method, you can\ncall pipeline { …​ }, or possibly different pipeline { …​ } blocks\ndepending on if conditions and the like. Note that only one pipeline { …​ }\nblock can actually be executed per run - you’ll get an error if a second one\ntries to execute!\n\nMajor Improvements to Parsing and Environment Variables\n\nHopefully, you’ll never actually care about this change, but we’re very happy\nabout it nonetheless. The original approach used for actually taking the\npipeline { …​ } block and executing its contents was designed almost two\nyears ago, and wasn’t very well suited to how you all are actually using\nDeclarative Pipelines. In our attempts to work around some of those limitations,\nwe made the parsing logic even more complicated and fragile, resulting in an\nimpressive\nnumber of bugs, mainly relating to inconsistencies and bad behavior with\nenvironment variables.\n\nIn Declarative 1.2, we’ve replaced the runtime parsing logic completely with a\nfar more robust system, which also happens to fix most of those bugs at the\nsame time! While not every issue has been resolved, you may find that you can\nuse environment variables in more places, escaping is more consistent,\nWindows paths are no longer handled incorrectly, and a lot more. Again, we’re\nhoping you’ve never had the misfortune to run into any of these bugs, but if\nyou have, well, they’re fixed now, and it’s going to be a lot easier for us to\nfix any future issues that may arise relating to environment variables, when\nexpressions, and more. Also, the parsing at the very beginning of your build\nmay be about 0.5 seconds faster. =)\n\nMore to Come!\n\nWhile we don’t have any concrete plans for what will be going into Declarative\nPipelines 1.3, rest assured that we’ve got some great new features in mind, as\nwell as our continuing dedication to fixing the bugs you encounter and report.\nSo please do keep opening tickets for\nissues and feature requests. Thanks!","title":"Parallel stages with Declarative Pipeline 1.2","tags":["pipeline","declarative"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"<div class=\"paragraph\">\n<p>Andrew was a core committer to Hudson and the author of numerous plugins.</p>\n</div>","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer","twitter":"abayer"}]}},{"node":{"date":"2017-09-08T00:00:00.000Z","id":"529abe58-b0d2-5d12-931f-675712ff69a6","slug":"/blog/2017/09/08/enumerators-in-pipeline/","strippedHtml":"While at Jenkins World, Kohsuke Kawaguchi\npresented two long-time Jenkins contributors with a\n\" Small Matter of Programming\"\naward: Andrew Bayer and\nJesse Glick. \"Small Matter of Programming\"\nbeing:\n\na phrase used to ironically indicate that a suggested feature or design change\nwould in fact require a great deal of effort; it often implies that the person\nproposing the feature underestimates its cost.\n\n— Wikipedia\n\nIn this context the \"Small Matter\" relates to Jenkins\nPipeline and a very simple snippet of Scripted Pipeline:\n\n[1, 2, 3].each { println it }\n\nFor a long time in Scripted Pipeline, this simply did not work as users would\nexpect it. Originally filed as\nJENKINS-26481 in 2015,\nit became one of the most voted for, and watched, tickets in the entire issue\ntracker until it was ultimately fixed earlier this year.\n\nAt least some closures are executed only once inside of Groovy CPS DSL scripts\nmanaged by the workflow plugin.\n\n— Original bug description by Daniel Tschan\n\nAt a high level, what has been confusing for many users is that Scripted\nPipeline looks like a Groovy, it quacks like a Groovy, but it’s not exactly\nGroovy. Rather, there’s an custom Groovy interpreter\n( CPS) that executes the\nScripted Pipeline in a manner which provides the durability/resumability that\ndefines Jenkins Pipeline.\n\nWithout diving into too much detail, refer to the pull requests linked to\nJENKINS-26481 for that, the code snippet above was particularly challenging to\nrectify inside the Pipeline execution layer. As one of the chief architects for\nJenkins Pipeline, Jesse made a number of changes around the problem in 2016,\nbut it wasn’t until early 2017 when Andrew, working on Declarative Pipeline,\nstarted to identify a number of areas of improvement in CPS and provided\nmultiple patches and test cases.\n\nAs luck would have it, combining two of the sharpest minds in the Jenkins\nproject resulted in the \"Small Matter of Programming\" being finished, and\nreleased in May of this year with Pipeline: Groovy 2.33.\n\nPlease join me in congratulating, and thanking, Andrew and Jesse for their\ndiligent and hard work smashing one of the most despised bugs in Jenkins\nhistory :).","title":"Closure on enumerators in Pipeline","tags":["pipeline","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2017-08-29T00:00:00.000Z","id":"76ba3f00-38ff-54a3-ba40-edf86486b934","slug":"/blog/2017/08/29/2017-community-survey/","strippedHtml":"This is a guest post by Brian\nDawson on behalf of CloudBees, where he works as a DevOps Evangelist\nresponsible for developing and sharing continuous delivery and DevOps best\npractices. He also serves as the CloudBees Product Marketing Manager for\nJenkins.\n\nOnce again it’s that time of year when CloudBees sponsors the\nJenkins Community Survey to\nassist the community with gathering objective insights into how jenkins is\nbeing used and what users would like to see in the Jenkins project.\n\nYour personal information (name, email address and company) will NOT be used by CloudBees for\nsales or marketing.\n\nAs an added incentive to take the survey, CloudBees will enter participants\ninto a drawing for a free pass to Jenkins World 2018 (1st prize) and a $100\nAmazon Gift Card (2nd prize). The survey will close at the end of September, so\nclick the link at the end of the blog post to get started!\n\nAll participants will be able to access reports summarizing survey results. If\nyou’re curious about what insights your input will provide, see the results of\nlast year’s 2016 survey:\n\n2016 Community Survey Results\n\nYour feedback helps capture a bigger picture of\ncommunity trends and needs. There are laws that govern prize giveaways and\neligibility; CloudBees has compiled all those fancy\nterms and conditions here.\n\nPlease take the survey and let your voice be heard - it will take less than 10\nminutes.\n\nTake me to the survey","title":"Take the 2017 Jenkins Survey!","tags":["jenkins"],"authors":[{"avatar":null,"blog":null,"github":"bvdawson","html":"<div class=\"paragraph\">\n<p>DevOps dude at CloudBees.\nJenkins Marketing Manager.\nTools geek.</p>\n</div>","id":"bvdawson","irc":null,"linkedin":null,"name":"Brian Dawson","slug":"/blog/authors/bvdawson","twitter":"brianvdawson"}]}},{"node":{"date":"2017-08-23T00:00:00.000Z","id":"0c1904a1-e132-560b-8136-e14e375e783c","slug":"/blog/2017/08/23/pull-requests-and-more/","strippedHtml":"This is a guest post by Mark Waite, who maintains\nthe git plugin,\nthe git client plugin,\nand is a technical evangelist for CloudBees, Inc.\n\nThe Jenkins project booth at Jenkins World 2017\nwill include the \"Pull Requests Corner\", recruiting new Jenkins contributors.\nWe think there are many people who will attend the conference without realizing how easy it is\nto help the Jenkins project, and how much the help is appreciated.\n\nMeet us in the \"Pull Requests Corner\" and we’ll help you find a way to help Jenkins.\nHere are some areas where we can use your help.\nMost of them do not require coding, and do not require a large time commitment.\n\nOne Minute Feedback on Your Version\n\nThe Jenkins changelog pages ( LTS and weekly) gather user experiences with specific Jenkins versions.\nYou can help other Jenkins users by clicking one of the weather icons in the LTS changelog (or the weekly changelog) for the release you’re using.\nChangelog feedback from weekly releases helps the release team select the long term support version.\nChangelog feedback from LTS releases helps other users prepare to upgrade.\n\nIt takes less than a minute, and helps the community (which will ultimately help you).\n\nFive Minutes to Answer a Question\n\nIn five minutes or less, you can help other Jenkins users.\n\nFor example:\n\nAnswer a question on the #jenkins channel of internet relay chat (IRC)\n\nAnswer a question on the Jenkins users mailing list\n\nAnswer a question on stackoverflow jenkins, jenkins plugins, or jenkins pipeline\n\nAnswer a question on reddit\n\nTen Minutes to Learn and Share\n\nIf you have ten minutes, you can learn something new and share what you learned.\n\nRead a Jenkins community blog post and tweet it with the hashtag #jenkinsci\n\nRead a devops.com blog post and share it on LinkedIn\n\nRead a CloudBees blog post and test drive an idea from it\n\nFind another Jenkins blog and share it (I recently discovered Matt Bajor’s ci/cd life blog)\n\nFifteen Minutes for Pipeline\n\nLiam Newman has created the \" Jenkins Minute\" video series.\nThey are brief video segments focusing on specific Jenkins functionality.\nChoose a video, watch it, and share what you learned on social media.\n\nTwenty Minutes for a Bug\n\nThe Jenkins bug tracker contains thousands of bugs.\nReviewing, duplicating, and clarifying bug reports takes time.\nWhen maintainers are reviewing, duplicating, and clarifying bug reports, they are not fixing bugs, and they are not adding new capabilities.\n\nYou can help maintainers by reviewing and duplicating a bug report that matters to you.\nA comment on a bug report is especially helpful when it confirms you’ve been able to duplicate the bug.\nIt is even more helpful if your verification includes the steps you took and how they differ from the original report.\n\nA bug report which has been duplicated, and includes clear instructions, is much more likely to receive maintainer attention.\nHelp yourself and others by duplicating bugs that matter to you.\n\nThirty Minutes for Documentation\n\nThe Jenkins documentation includes\nuser documentation ( guided tour and handbook) and\ndeveloper documentation ( tutorial, how-to guides, and reference).\nYou can help the documentation by describing something important to you clearly and completely.\n\nRefer to the instructions for documentation contributors to see how easy it is to help.\n\nForty Five Minutes for Translation\n\nIf English is not your native language, you can help with Jenkins localization.\nJenkins is used worldwide, and many users will benefit from translations.\nConsidering the rapid and continuing evolution of Jenkins, it is no surprise that there is plenty to translate.\nRefer to the internationalization guide for instructions to help you contribute translations.\n\nSixty Minutes for a Meetup\n\nLocal groups around the world meet often for Jenkins presentations, discussions, and demonstrations.\nOrganizing a Jenkins Area Meetup will introduce you to other users, and will let you explore new ways to benefit from Jenkins.\nThe team at jenkinsci-jam@googlegroups.com is ready to support your JAM with stickers, t-shirts, and more.\n\nWeek or More - Adopt a Plugin\n\nThe Jenkins plugin ecosystem covers a wide range of areas.\nJenkins plugin maintainers come from many different backgrounds, with many different interests.\nOften, a plugin maintainer may find that they want to do something different on the project, or they may leave the project.\nWhen a plugin maintainer is no longer able to maintain a plugin, they can place it for adoption.\n\nPlugins placed for adoption range from very specific use cases (node stalker plugin) to very general use cases (Subversion plugin).\n\nMaintaining an orphan plugin is a great way to contribute to the project.\nFollow the instructions to \" Adopt a Plugin\".\n\nSee You There!\n\nAll those techniques (and more) are available on the Jenkins participate page.\n\nLook for the \"Jenkins Needs You\" poster at Jenkins World, and come talk\nto us about the ways you can learn new things, address your concerns,\nand help Jenkins.\n\nJoin the Jenkins project at\nJenkins World on August 30-31,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins Needs You - Pull Request Corner at Jenkins World 2017","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2017-08-21T00:00:00.000Z","id":"9b298e59-a84f-5cc2-aaac-496458bd8435","slug":"/blog/2017/08/21/jenkins-world-demos/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nJenkins World 2017 is a week\naway. Like last year, we are bringing back the lunch-time demos in the Jenkins\nproject’s booth.\nThese are quick 15 minute How-to demos by Jenkins\nexperts.\nThese demos will not be live streamed, nor recorded, so come early to get the\nfront row seat, we are expecting a large crowd!\n\nWednesday, August 30th\n\nTime\nSession\nDetails\nPresenter\n\n12:15 - 12:30\nDelivery Pipelines with Jenkins\nHow to set up holistic Delivery Pipelines with the DevOps enabler tool Jenkins.\nMichael Hutterman\n\n12:30 - 12:45\nDeveloping Pipeline Libraries Locally\nIf you have ever tried developing Pipeline Libraries, you may have noticed how long it takes to deploy a new version to server to discover just another syntax error. I will show how to edit and test Pipeline libraries locally before committing to the repository (with Configuration-as-Code and Docker).\nOleg Nenashev\n\n12:45 - 13:00\nSecuring a Jenkins Instance\nA set of minimum steps every Jenkins Admin should follow so his public-facing Jenkins instance doesn’t turn into a Bitcoin mine.\nClaudiu Guiman\n\n13:00 - 13:15\nGit Tips and Tricks\nLatest capabilities in the git plugin, like large file support, reference repositories and some reminders of existing tips that can reduce server load, decrease job time, and decrease disc use.\nMark Waite\n\n13:15 - 13:30\nDelivery Pipelines with Jenkins 2\nHow to promote Java EE and Docker binaries toward production.\nMichael Hutterman\n\n13:30 - 13:45\nDelivery Pipelines, with Jenkins 2, SonarQube, and Artifactory\nThe nuts and bolts of setting up a scalable, high-end delivery pipeline.\nMichael Hutterman\n\n13:45 - 14:00\nVisual Pipeline Creation in Blue Ocean\nWe will show how to use Blue Ocean to build a real-world continuous delivery pipeline using the visual pipeline editor. We will coordinate multiple components of a web application across test and production environments, simulating a modern development and deployment workflow.\nKeith Zantow\n\nThursday, August 31st\n\nTime\nSession\nDetails\nPresenter\n\n12:30 - 12:45\nDocker Based Build Executor Agents\nHow using Docker based build agents can simplify your Jenkins management duties.\nEric Smalling\n\n12:45 - 13:00\nPimp my Blue Ocean\nHow to customize Blue Ocean, where I create a custom plugin and extending Blue Ocean with custom theme and custom components.\nThorsten Scherler\n\n13:00 - 13:15\nDeliver Blue Ocean Components at the Speed of Light\nUsing storybook.js.org for Blue Ocean frontend to speed up the delivery process - validate with PM and designer the UX. Showing how quickly you develop your components.\nThorsten Scherler\n\n13:15 - 13:30\nMozilla’s Declarative + Shared Libraries Setup\nHow Mozilla is using Declarative Pipelines and shared libraries together.\nStephen Donner\n\nJoin the Jenkins project at\nJenkins World on August 30-31,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Demos at Jenkins World 2017","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2017-08-18T00:00:00.000Z","id":"e2e86b67-d732-51e3-9127-44de5e51de0e","slug":"/blog/2017/08/18/declarative-pipelines-at-jenkinsworld/","strippedHtml":"This is a guest post by Andrew Bayer, who is\none of the authors of the\nDeclarative Pipeline plugin,\nand is a software engineer on the Pipeline team at\nCloudBees, Inc.\n\nA year ago at Jenkins World 2016, we unveiled Declarative Pipeline, a\nstructured way to define your Pipeline. It’s been a great year for Declarative\nand Pipeline in general, with the release of Declarative Pipeline 1.0 in\nFebruary, multiple releases since then, the introduction of\ndocumentation on Pipeline at jenkins.io,\nwith a focus on Declarative, and more. Given everything that’s happened over\nthe last year, we thought it’d be good to let you all know what you can expect\nto see and hear about Declarative Pipeline at this year’s Jenkins World.\n\nFirst, on Thursday, August 31, I’ll be giving a talk on Declarative Pipeline\nwith Robert Sandell, one of my coworkers\nhere at CloudBees and another author of Declarative Pipeline. We’ll be\ncovering what’s happened with Declarative over the last year, new features\nadded since the 1.0 release, such as the libraries directive and more when\nconditions, what’s planned for the upcoming 1.2 release (which is planned for\nshortly after Jenkins World!), including parallel stage s, and what’s on the\nroadmap for the future. In addition, we’ll be demoing some of the features in\n1.2, and providing some pointers on best practices for writing your Declarative\nPipeline.\n\nAlso on Thursday, Stephen Donner from Mozilla\nwill be giving a demo showing Mozilla’s usage of Declarative Pipeline and\nshared libraries at the Community Booth - Mozilla has been doing great work\nwith Declarative, and I’m excited to see their usage in more detail and hear\nStephen talk about their experience!\n\nIn addition, Robert, Stephen, and myself will all be at Jenkins World both days\nof the main sessions, and Robert and myself will also be at the\nContributor Summit\non Tuesday. We’d love to hear your thoughts on Declarative and will be happy to\nanswer any questions that we can. Looking forward to seeing you all!\n\nAndrew Bayer and Robert Sandell will be talking about the latest on\nDeclarative Pipeline in Jenkins\nat Jenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Declarative Pipeline at Jenkins World","tags":["plugins","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"<div class=\"paragraph\">\n<p>Andrew was a core committer to Hudson and the author of numerous plugins.</p>\n</div>","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer","twitter":"abayer"}]}},{"node":{"date":"2017-08-17T00:00:00.000Z","id":"9f425a12-2f6e-51cd-8c44-5ddce8f1bcb3","slug":"/blog/2017/08/17/speaker-blog-blazemeter/","strippedHtml":"This is a guest post by Guy Salton, Sr. Professional Services Engineer for\nCA BlazeMeter.\n\nJenkins\nPipeline is an important Jenkins feature for creating and managing a project\nin Jenkins. This is opposed to the traditional way of creating a Jenkins\nproject by using the Jenkins GUI. When running your open-source load test,\nJenkins Pipeline enables resilience, execution control, advanced logic and\nVersion Control management.  This blog post will explain how to run any\nopen-source load test with Jenkins Pipeline, through Taurus.\n\nTaurus is an open source test automation framework\nthat enables running and analyzing tests from 9 open source load and functional\ntesting tools: JMeter,\nSelenium, Gatling, The Grinder, Locust, Tsung, Siege, Apache Bench, and PBench.\nTest results can be analyzed in Taurus. For advanced analyses or running tests\nin the cloud, Taurus integrates with\nBlazeMeter.\n\nGuy will be\npresenting\nmore on this topic at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.\n\nGetting started with Taurus\n\nInstall Taurus.\n\nCreate the following Taurus configuration in YAML. Learn more about YAML in Taurus from\nthis tutorial.\n\n## execution:\n- concurrency: 100\n  hold-for: 10m\n  ramp-up: 120s\n  scenario: Thread Group\nscenarios:\n  Thread Group:\n    requests:\n    - label: blazedemo\n      method: GET\n      url: http://blazedemo.com/\n\nThis script runs 100 concurrent users, holds the load for 10 minutes, the\nramp-up is 120 seconds and the thread group runs one GET request to\nblazedemo.com.\n\nYou can specify an executor by adding executor: to the\nscript. Otherwise, the default executor will be JMeter. In the background,\nTaurus will create an artifact directory with a jmx file (or a Scala file if\nyou run Gatling, a Python file if you are running Selenium, etc.).\n\nOpen a terminal and run: bzt.yml\n\nView the test results:\n\nIf you want to conduct an in-depth analysis of your test results, run your\ntests on BlazeMeter. You will be able to monitor KPIs through advanced and\ncolorful reports, evaluate system health over time, and run your tests from\nmultiple geo-locations.\n\nRun the following command from the terminal:\n\nbzt.yml -report\n\nIntegrate Taurus With Pipeline\n\nTo run Taurus through Pipeline, you can also go\nstraight to Jenkins after creating your Taurus script.\n\nOpen Jenkins → New Item → Fill in an item name → Click on ‘Pipeline’\n\nNow create a Pipeline script. You can include all parts of\nyour CI/CD process in this script: Commit, Build, Unit Test, Performance Test,\netc., by creating different stages.\n\nThis Pipeline has three stages: The first is called “build”. In this example it\nis empty, but you can add commands that will build your code. The second,\ncalled “Performance Tests”, creates a folder called “Taurus-Repo” and runs the\nTaurus script that we created. At the same time (note the “parallel” command),\nthere is a “sleep” command for 60 seconds. Obviously it makes no sense to put\nthose two commands together, this is just to show you the option of running 2\ncommands in parallel. The third stage called “Deploy” is also empty in this\nexample. This is where you could deploy your new version.\n\nnode {\n   stage('Build') {\n      // Run the Taurus build\n   }\n   stage('Performance Tests') {\n    parallel(\n        BlazeMeterTest: {\n            dir ('Taurus-Repo') {\n                sh 'bzt.yml -report'\n            }\n        },\n        Analysis: {\n            sleep 60\n        })\n   }\n\n   stage(‘Deploy’) {\n   }\n}\n\nNote that you can either add the Pipeline inline, or choose the “Pipeline\nscript from SCM” option and add the URL to the script on GitHub (in this case\nyou need to upload a Jenkinsfile to GitHub). With \"Pipeline from SCM\",\nwhenever you need to update the tests, you can just add new commits to the\nJenkinsfile.\n\nSave the Pipeline\n\nClick on ‘Build Now’ to run the Pipeline\n\nClick on the new Build that is running now (build #6 in this example).\n\nClick on ‘Console Output’ to see the test results:\n\nIn the Console Output you can see the test results and also the link to the report in BlazeMeter.\n\nThat’s it! Jenkins Pipeline is now running open-source load testing tools via Taurus.\n\nCome to\nmy\nfree hands-on workshop “Learn to Release Faster by Load Testing With Jenkins”\nat Jenkins World 2017 on Tuesday August 29th from 1-5pm.  You will learn how to\ntest continuously with Jenkins, JMeter, BlazeMeter and Taurus, including how to\nrun JMeter with Jenkins, run the BlazeMeter plugin for Jenkins and how to use\nopen-source Taurus.\n\nTo learn more about BlazeMeter,\nclick here.","title":"Running load tests in Jenkins Pipeline with Taurus","tags":["event","jenkinsworld"],"authors":[{"avatar":null,"blog":null,"github":null,"html":"","id":"hinman","irc":null,"linkedin":null,"name":"Hannah Inman","slug":"/blog/authors/hinman","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":280,"numPages":101,"currentPage":36}},
    "staticQueryHashes": ["3649515864"]}