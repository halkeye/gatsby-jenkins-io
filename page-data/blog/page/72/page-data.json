{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/72",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2014-04-16T00:00:00.000Z","id":"0ec96a9f-b23f-50d8-805d-75b5682f95aa","slug":"/blog/2014/04/16/active-directory-plugin-improvements/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Active_Directory[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Active-directory.svg/170px-Active-directory.svg.png[image] +\n] +\n\n+\n+\n\n+\nOne of the few plugins that I still personally maintain is https://wiki.jenkins.io/display/JENKINS/Active+Directory+plugin[Active Directory plugin]. In the past few months, I've been making steady improvements in this plugin, thanks to various inputs and bug reports given to me from the ClodBees customers. +\n +\n\n+\nOne of the recent fixes was to get https://issues.jenkins.io/browse/JENKINS-9258[the \"remember me\" feature] finally working for Active Directory. This requires a relatively new Jenkins 1.556, but it eliminates the need to having to constantly type the password in. +\n +\n\n+\nThen I've rebumped the version of https://github.com/kohsuke/com4j[COM4J], which was https://issues.jenkins.io/browse/JENKINS-16429[causing a thread leak] when Jenkins runs on Windows. If you are running a Windows deployment with lots of active users, this probably would have contributed to the instability of Jenkins. +\n +\n\n+\nAnd then lastly, a small but crucial improvement was made to the way we search group membership, so that we can avoid recursively searching AD. This should result in a significant speed improvement when you are logging into Jenkins through AD. +\n +\n\n+\nThe latest version of the plugin as of writing is 1.37. I hope you'll have a chance to update the plugin soon. +","title":"Active Directory plugin improvements","tags":["development","plugins"],"authors":[]}},{"node":{"date":"2014-04-15T00:00:00.000Z","id":"8fb1b33c-49ca-5f6f-aac3-ef146ba885e2","slug":"/blog/2014/04/15/upcoming-jenkins-office-hours-acceptance-test-harness/","strippedHtml":"+\nimage:https://clsdf.com/wp-content/uploads/2011/06/tumblr_lkzltkxTmF1qersu1.gif[image] +\n\n+\n\n+\nOne of the new efforts in Jenkins this year is https://github.com/jenkinsci/acceptance-test-harness[the acceptance test harness] for Jenkins. +\n +\n\n+\nWe will be doing the Jenkins office hours next week to go over this and sync up and coordinate between people in the community that are trying to work on this. +\n +\n\n+\nIt'll be *April 23rd 11am PT* (https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Governance+Meeting&iso=20140423T11&p1=224&ah=1&sort=1[see what this time is in your time zone]) on Google Hangout at https://jenkins-ci.org/hangout. If you are intereste in hacking Jenkins or if you are a large user of Jenkins who have acceptance tests, we are looking forward to seeing you there. +\n +\n\n+\nFor those of you who haven't looked, this test harness allows you to write blackbox tests of Jenkins and its plugins. It was originally used to test LTS releases, but over the time, it acquired a number of features, such as ...: +\n +\n\nDocker support for launching complex fixtures to test Jenkins with.\n\nPluggability to launch Jenkins under test (JUT) in many different environments\n\nPluggability to provision Jenkins and agents from EC2 to test large deployments\n\nChoice of cucumber or JUnit to write test scripts\n\n+\n+\n\n+\nWe are working on porting over existing test cases, but we'd like to work with users to move their acceptance tests on top of this same harness. The idea is to pool those test cases in the community so that we can test Jenkins and its plugins as we develop them. For this to work, we want tests to have lots of metadata (such as what plugins it touches), and for the harness to have sufficient modularity that different people can run the same scenario against different deployments, including existing instance. +","title":"Upcoming Jenkins Office Hours: Acceptance Test Harness","tags":["general","meetup","news"],"authors":[]}},{"node":{"date":"2014-04-11T00:00:00.000Z","id":"51a8aab6-f27e-5e2b-a18b-4861c3f85998","slug":"/blog/2014/04/11/infoq-ci-survey-2014/","strippedHtml":"+\nInfoQ has been https://www.infoq.com/research/ci-server[running a CI server survey] for more than a month now, and here is the current result: +\n +\n\n+\nhttps://www.infoq.com/research/ci-server[ +\nimage:https://jenkins-ci.org/sites/default/files/images/infoq.preview.png[image] +\n] +\n\n+\n+\n\n+\nJenkins has gotten more than 70% of the votes, once again proving the wide adoption among developers. If you are one of those who picked Cruise Control into the \"considering\" section, I'd encourage you to look around a bit more. +\n +\n\n+\nYou can still https://www.infoq.com/research/ci-server[vote from their website or leave comments if you want]. +\n +\n\n+\nBy the way, the design of two axes make no sense to me; for example, I'd order the adoption axis to \"considering -> migrating to -> using now -> moving away from\", and the circle seems to imply two axes are somehow interchangeable, when it should probably be just in a checkerboard to indicate those are independent axes.","title":"InfoQ CI survey 2014","tags":["general","feedback","just for fun"],"authors":[]}},{"node":{"date":"2014-04-11T00:00:00.000Z","id":"a05eb16d-08fa-5675-ae96-e0b6498905ff","slug":"/blog/2014/04/11/jenkins-1-532-3-lts-is-released/","strippedHtml":"+\nThe final LTS release of the 1.532.x line is out today. You can download it from http://mirrors.jenkins-ci.org/[the usual location]. Changelog is https://jenkins-ci.org/changelog-stable[here]. +\n +\n\n+\nStarting with the next 1.554.x LTS, the release model will https://wiki.jenkins.io/display/JENKINS/LTS+Release+Line[switch to the train model], where we commit to dates and get whatever we can ship by that date. +\n +\n\n+\nYou can see https://jenkins-ci.org/content/event-calendar[the scheduled dates in our event calendar]. Backporting window for 1.554.1 is almost closing, so if you want to have your favorite issues nominated for it, please see https://wiki.jenkins.io/display/JENKINS/LTS+Release+Line[the process] in the Wiki and hurry!","title":"Jenkins 1.532.3 LTS is released","tags":["development","core","releases","lts"],"authors":[]}},{"node":{"date":"2014-04-09T00:00:00.000Z","id":"541f26ae-79be-5b99-9931-1a1e249be540","slug":"/blog/2014/04/09/more-scalable-slaves/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Nio[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Nikko_Toshogu_Nio_M3043.jpg/160px-Nikko_Toshogu_Nio_M3043.jpg[image] +\n] +\n\nNio\n\n+\n\n+\n+\n\n+\nhttps://en.wikipedia.org/wiki/New_I/O[NIO]-based https://wiki.jenkins.io/display/JENKINS/Distributed+builds#Distributedbuilds-LaunchslaveagentviaJavaWebStart[Java Web Start (JNLP) agent handling] is coming to 1.560. This will help you run a large number of JNLP agents more efficiently. A connected JNLP agent used to occupy one thread on the controller, but now it occupies none. Combined with the earlier change that eliminated threads from idle executors, now you can connect thousands of agents. +\n +\n\n+\nAll you have to do is to use the latest `+agent.jar+` from Jenkins 1.560. No other changes are necessary on users' part. +\n +\n\n+\nA bulk of this is implemented in https://github.com/jenkinsci/remoting[remoting 2.38], and a good part of it was implemented about a year ago on the airplane on the way to Europe. +\n +\n\n+\nWe plan to make CLI connections take advantages of this too, which helps those who use that a lot. That's not in 1.560, but hopefully it'll be in the near future. This change also paves a way for multi-participant bus-topology communication, which I think would be an useful building block for https://github.com/jenkinsci/master-to-master-api-plugin/[the work-in-progress controller-to-controller API].","title":"More scalable agents","tags":["development","core","news"],"authors":[]}},{"node":{"date":"2014-04-04T00:00:00.000Z","id":"1b4b4540-c205-5a24-bbcd-53c64d62a457","slug":"/blog/2014/04/04/maven-job-type-performance-improvements-in-maven-plugin-2-2/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Grumman_F-14_Tomcat[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/US_Navy_040925-N-0295M-030_An_F-14D_Tomcat_conducts_a_high_speed_flyby_during_the_tactical_air_power_demonstration_at_the_2004_Naval_Air_Station_Oceana_Air_Show.jpg/300px-thumbnail.jpg[image]] +\n\n+\n+\n\n+\nI recently had an opportunity to visit a big Jenkins user on site, and one of the things they've told me is that building projects in the Maven job type is substantially slower than doing the same with the freestyle project type. +\n +\n\n+\nThis is partly expected, because this job type does more for you. For example, it automatically archives your build artifacts, fingerprints all the relevant information, and so on. These are good things, and naturally, it cost time. +\n +\n\n+\nBut the slow down they are seeing was substantial, and this is a complaint I've heard from others as well. So I started looking into it. +\n +\n\n+\nWith a help of https://linux.die.net/man/8/tc[artificial delay] induced to my network interface and several custom scripts to probe into the running processes, I was able to understand what was going on and make some good improvements. +\n +\n\n+\nFirst, in Maven plugin 2.0, we've made a change in the way we archive artifacts from Maven. Previously, the artifacts were copied between the controller and the Maven JVM, and for a reason I'll mention later, this was very slow, especially in a network that has a large latency. With Maven plugin 2.0 and onward, artifacts are archived between the controller and the agent JVM. +\n +\n\n+\nThe second problem that I discovered was that the spy program we put inside Maven is causing excessive amount of unnecessary classloading. Some classes have static initializers that too eagerly refer to other classes, which in turn brings in other classes, and so on. Despite https://jenkins-ci.org/content/faster-slave-classloading[the jar file caching that we do], these classloading still sometimes requires precious roundtrips to the controller, which costs in the order of 10s of ms. I was able to make various changes in Jenkins core to cut this down, and these fixes will land in Jenkins 1.559 (ETA is April 14th.) The classloading overhead is independent of the size of your Maven build, so this improvement is more for people who have lots of small Maven builds, like https://ci.jenkins.io/[Jenkins building Jenkins plugins]. +\n +\n\n+\nNow, on to the biggest fruit of this investigation I was able to discover and fix. Imagine the Maven JVM has a lot of data to send to the controller, say you are archiving test reports or code coverage report. A good implementation would send these data as fast as possible to the controller, paying respect to the limit of flow control to avoid overwhelming the controller. +\n +\n\n+\nIt turns out that the way we set up this communication channel was far from optimal. Instead of having the Maven JVM push data with flow control, we were relying on the controller to pull data. That is, controller has to send out a request to the agent to fetch the next batch of data (8KB), then once it receives that data, it sends out another request to fetch the next batch of data, and so on. If your network latency is 10ms, this scheme only lets us send 500KB/sec, even if you have a gigabit ethernet. No wonder it was so slow! +\n +\n\n+\nThis fix is in in Maven plugin 2.2. See https://issues.jenkins.io/browse/JENKINS-22354[JENKINS-22354] if you want to know more about the actual diffs and such. +\n +\nUnfortunately, none of these are available for those who are on 1.532.x LTS, but http://meetings.jenkins-ci.org/jenkins/2014/jenkins.2014-04-02-18.02.html[the next 1.554.1 LTS] will be able to run the newer Maven 2.2 plugin. So the help is on the way! +\n +","title":"Maven job type performance improvements in Maven plugin 2.2","tags":["development","plugins","releases"],"authors":[]}},{"node":{"date":"2014-04-01T00:00:00.000Z","id":"5310f9d3-4ee4-5c01-b1d2-55f71e342385","slug":"/blog/2014/04/01/your-java-web-start-slaves-will-be-always-clean/","strippedHtml":"+ +\n\n+\n+\n\n+\nIf you have agents that connect through https://wiki.jenkins.io/display/JENKINS/Distributed+builds#Distributedbuilds-LaunchslaveagentviaJavaWebStart[Java Web Start] (such as https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallSlaveasaWindowsservice%28require.NET2.0framework%29[agents installed as Windows services]), we have a good news for you. +\n +\n\n+\nIn case of a connection loss, this type of agents has been designed to automatically attempt to reconnect to the controller. This makes sense because you want these agents to remain online all the time, even if your janitor trips over the ethernet cable. Unfortunately, it also means that over the time, these agents accumulate gunk, such as mutated static states, any left-over threads or memory leaks, or https://issues.jenkins.io/browse/JENKINS-20913[native libraries that are loaded into JVM]. +\n +\n\n+\nTo prevent that, a better approach is to https://issues.jenkins.io/browse/JENKINS-19055[restart the agent JVM (JENKINS-19055)] and have the new JVM reconnect, instead of having the same JVM reconnect. That would ensure that the agent always stays clean. I've planned to make this change for a while now, and I'm happy to report that this change is finally landing to the upcoming 1.559. +\n +\n\n+\nRestarting JVM is easy on Unix, where I could just https://man7.org/linux/man-pages/man3/exec.3.html[exec(3)] to itself. We've been doing this for ages on controllers, for example when you update a plugin and tell Jenkins to restart. +\n +\n\n+\nThe hard part is to do this for Windows, where the most of the time was spent. I had to improve https://github.com/kohsuke/winsw[windows service wrapper] to support self-restarting services, which turned out to be trickier because Windows service control manager doesn't provide \"restart\" as an atomic operation. It also kills not just the service process itself but all the processes in the group. So I had to double-fork the service wrapper into a separate process group just to restart a service from within itself. +\n +\n\n+\nIn any case, the end result is that if https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallSlaveasaWindowsservice%28require.NET2.0framework%29[you have installed a service through GUI], be it on Windows, Unix, or OS X, agents will restart themselves every time it gets disconnected from the controller. +\n +\n\n+\nI've also taken the opportunity to make `+jenkins-slave.exe+` on the agent self-updating. Every time it connects to the controller, it gets the latest version from the controller. +\n +\n\n+\nIf you have installed Web Start agents as services, make sure to update the local copy of `+agent.jar+` on these agents to 2.37 or later. This \"restart on reconnect\" feature only kicks in when you are running this very recent version of `+agent.jar+`. And yes, we realize it'd be nice for `+agent.jar+` to update itself, which is tracked as https://issues.jenkins.io/browse/JENKINS-22454[JENKINS-22454]. But that's a work for another day. +\n +","title":"Your Java Web Start slaves will be always clean","tags":["development","core"],"authors":[]}},{"node":{"date":"2014-03-21T00:00:00.000Z","id":"9dfcdd00-24d6-5a91-b965-88e536161260","slug":"/blog/2014/03/21/call-for-sponsors-2014-jenkins-user-conferences/","strippedHtml":"Jenkins User Conference (JUC) season is upon us! It’s a busy year for the Butler — he’s hosting conferences all over and looking for sponsors to help:\n\nBoston — June 18\n\nBerlin — June 25\n\nHerzelia, Israel — July 16\n\nBay Area (California) — October (date TBD)\n\nMr. Jenkins and the JUC Organizing Committee want to invite you and your company to sponsor a JUC this year. Show your support for the Jenkins community and help keep costs low for attendees*. The funds go to are put to good use: conferences are two full tracks. Lunch, light breakfast, coffee and a coveted Jenkins t-shirt are also included.\n\nSponsors get all sorts of thanks from the Jenkins community:\n\nYour logo on the conference t-shirt and all other conference communication (emails, website, signage, etc.)\n\nA blog featuring sponsors\n\nFree passes\n\nSilver and Gold sponsors get a table to talk to folks and hand out swag\n\nGold sponsors get either a speaking slot, happy hour sponsorship or a dedicated room for demos\n\nAnd more, but most especially, you get to support JenkinsCI. Just let us know if you’re interested to get the details. We’d love to have you join us. Friendly reminder: We are looking for speakers for all four cities. Call for Papers ends March 30 for Boston, Berlin and Israel. Submit your abstract now and come share your expertise with the Jenkins community. We hope to see you at a JUC this year! Lisa, Alyssa and the JUC Organizing Committee *PS - Registration just opened for Boston and early-bird tickets are only $59.","title":"Call for Sponsors: 2014 Jenkins User Conferences","tags":["general","core","news","jenkinsci","juc"],"authors":[]}}]}},"pageContext":{"limit":8,"skip":568,"numPages":100,"currentPage":72}},
    "staticQueryHashes": ["3649515864"]}