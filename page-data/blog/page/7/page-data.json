{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/7",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-12-04T00:00:00.000Z","id":"7f63955e-c485-543c-8e96-4de3b98e74a9","slug":"/blog/2020/12/04/gsod-project-report/","strippedHtml":"Jenkins is the world’s leading open-source automation server used by companies large and small around the globe to implement continuous integration and continuous delivery.\nKubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.\nKubernetes is compatible with the majority of CI/CD tools which allow developers to run tests, deploy builds in Kubernetes and update applications with no downtime.\nOne of the most popular CI/CD tools now is Jenkins thereby making Jenkins on Kubernetes a popular theme for Jenkins users.\n\nDuring the Google Season Of Docs program, I worked with the Jenkins organization on the project - Document Jenkins on Kubernetes.\nThe original proposal for this project can be found here.\n\nProject Goals\n\nAfter my proposal was accepted by the Jenkins organization, my mentors and I agreed on the expectations for the Google Season of Docs project.\nThe goal of this project was to create a new Kubernetes Volume which would describe the concepts, techniques, and choices for Kubernetes users running Jenkins thereby providing the following advantages:\n\nImprove the user experience of Jenkins on Kubernetes users by giving them a one-stop-shop for information on Jenkins on Kubernetes.\n\nMake it easy to track, update and maintain information on Jenkins on Kubernetes\n\nReference the existing community documentation for Jenkins on K8s (plugins and tools/integrations).\n\nHow to guides, tutorials and explanations of concepts and techniques in Jenkins on Kubernetes.\n\nJust-In-Time documentation which means that rather than documenting every feature comprehensively, we produce and release documentation in bits but continuously based on popular questions, feedback and area of interests gathered from the community and users.\n\nCommunity Bonding: Planning the solution\n\nFind below an outline of my activities during the community bonding phase:\n\nSetting up communication channels: meetings, mailings, chats: My mentors and I agreed on the right time and channel for communication due to time difference.\nWe agreed to meet twice weekly, on Mondays and Thursdays at 7:00 PM GMT +1 and use Jenkins documentation gitter channel for other communications.\n\nContacting Stakeholders and onboarding contributors: The project was  announced on social media and different Jenkins channels.\nI wrote a blog post to announce the project and created a project page on Jenkins.io.\n\nKnowledge transfer: I and my mentors planned knowledge sharing sessions and fixed tentative dates based on the availability of the trainers.\nMy mentors also shared useful resources to help me prepare for the project.\n\nGetting permissions: I and my mentors agreed I didn’t need any special permissions from the beginning, however, this topic was left open for discussion if the need arose later on in the project.\n\nPre-planning of the project: I refined my goals and set expectations with my mentor and also learned more about the community(Jenkins).\nI also had to ensure that the proposed documentation structure I drafted was in line with the goals of the organization so my mentors vetted it and we finalized on the proposed sections that I was supposed to work on.\n\nDocumentation Development Phase\n\nKnowledge Sharing Sessions\n\nDuring the development phase, my mentors hosted two knowledge sharing sessions:\n\nKatacoda and Helm by Marky Jackson\n\nSee the slides\n\nHelm by Torsten Walter\n\nSee the slides\n\nThese sessions gave me an in-depth understanding of concepts and tools needed for the project.\n\nJenkins on Kubernetes Documentation Skeleton\n\nAt the application phase, I drafted a structure describing the proposed Jenkins on Kubernetes section.\nMy intention was to use it as a guide during the implementation phase of the project, but when the development phase kicked off, my mentors and I thought of a better approach to creating a new Jenkins on Kubernetes section which was to add the Jenkins on Kubernetes contents to existing related sections for easier navigation and better user experience.\nAn example of this approach would be creating the Installing Jenkins on Kubernetes section under the Installing Jenkins section rather than putting it under an entirely new section.\nWith this new approach, I was assigned a task to create a skeleton with all the proposed Jenkins on Kubernetes sections on Jenkins.io and mark these sections as\nWork In Progress (WIP).\nThe Plan was to use this skeleton as a guide throughout the GSOD Project.\nThe Jenkins on Kubernetes skeleton PR can be found here.\n\nDocumenting Jenkins on Kubernetes\n\nWhile working on this project, I had to do a lot of research and test all the documented steps locally before pushing the documentation out for review.\nI also made sure to use updated terms and terminologies where necessary like Controller instead of Master and Agents instead of Slave.\n\nDuring the documentation phase, I was able to work on documenting Installing Jenkins on Kubernetes with three sections Helm, Set of Yaml files and Jenkins Operator.\nI also worked on creating a directory for Jenkins on kubernetes sample files in Jenkins.io repository, documenting Scaling Jenkins on Kubernetes and Jenkins on AWS which is still in progress.\n\nWork Done\n\nPull Requests : All the pull requests I submitted to Jenkins.io documentation can be found here.\nThis spreadsheet contains links to the published documentation on Jenkins.io.\nThe spreadsheet also highlights the initial proposed tasks and the status of each of them.\n\nIf you would like to contribute to the Jenkins on Kubernetes documentation, you can check out pending tasks here and reach out in the Jenkins documentation gitter channel.\n\nChallenges\n\nUsing a Windows computer was a bit of a challenge for me.\nTo run Jenkins.io locally, the project uses GNU/Make and Docker in order to generate the fully statically generated jenkins.io web site.\nThe key tool for converting source code into the site is the Awestruct static site generator, which is downloaded automatically as part of the build process.\nTo achieve this, I needed to have GNU/Make and Docker available on my machine.\nDocker was not a problem, but to achieve the latter, I needed to use Windows Subsystem for Linux (WSL).\nWSL had two versions WSL1 and WSL2. Using WSL2 would have been much more convenient, but my version of windows wasn’t compatible with WSL2 as it required Version 1903 or higher, with Build 18362 or higher for x64 systems.\nWith this obstacle, I had to stick to making WSL1 work but I still couldn’t get this to work, a series of issues came up which I was able to pass through with the help of my mentors until I got stuck at permission issues.\nI raised the issue with my mentor and after looking through the issue with me and trying to solve it to no avail, he suggested setting up an Ubuntu VM in Hyper-V.\nThis article helped me achieve this and that solved my problem.\n\nWhat did I learn?\n\nI learned a lot more about the Jenkins project, Kubernetes, helm package manager, Jenkins Operator and much more.\nThis project also gave me the opportunity to work with cloud providers like AWS which was totally new to me and also learn from field experts through knowledge sharing sessions and weekly meetings with my mentors and org admin.\nMy technical writing skill and communication skill have definitely become better and I owe it to this project.\n\nOverall, contributing to the Jenkins.io project is an amazing experience for me.\nI have been using Jenkins, and the fact that I was able to contribute to the organization and collaborate with the community is an honor.","title":"GSOD Project Report: Document Jenkins on Kubernetes","tags":["kubernetes","helm","documentation","gsod","gsod2020"],"authors":[{"avatar":null,"blog":null,"github":"zaycodes","html":"<div class=\"paragraph\">\n<p>Zainab is a software developer and technical writer who is passionate about contributing to open source, improving technical documentation and advocating for gender diversity in open source collaboration. She started contributing to Jenkins documentation during the technical writer exploration phase for <a href=\"https://developers.google.com/season-of-docs\">Google Season of Docs</a> 2020, and is currently working on <a href=\"/sigs/docs/#jenkins-on-kubernetes\">Documentation for Jenkins on Kubernetes</a>.</p>\n</div>","id":"zaycodes","irc":null,"linkedin":"zaycodes","name":"Zainab Abubakar","slug":"/blog/authors/zaycodes","twitter":"zaycodes"}]}},{"node":{"date":"2020-12-03T00:00:00.000Z","id":"2b02956c-1094-559a-9408-ef0c76b5fdb1","slug":"/blog/2020/12/03/election-results/","strippedHtml":"The Jenkins community has recently completed the 2020 elections.\nOn behalf of the Jenkins community and the elections committee,\nwe congratulate all newly elected board members and officers!\nWe also thank all candidates and voters who participated this year.\n\nElection results:\n\nGavin Mogan and Marky Jackson will join\nKohsuke Kawaguchi, Ullrich Hafner and Oleg Nenashev\non the Jenkins Governance Board\n\nTim Jacomb was elected as Release Officer\n\nMarky Jackson will become the new Events Officer (uncontested)\n\nOlivier Vernin will continue in the role of Infrastructure Officer for another term (uncontested)\n\nDaniel Beck will continue in the role of Security Officer for another term (uncontested)\n\nMark Waite will continue in the role of Documentation Officer for another term (uncontested)\n\nThe board positions and officer roles are an essential part of Jenkins' community governance and well-being,\nand we are excited to see contributors taking these roles.\nIf you are interested to learn more, please see the blog post below.\n\nGovernance Board election details\n\nThis year we had nine candidates participating in Jenkins Governance Board elections:\nAndrey Falko, Ewelina Wilkosz, Frederic Gurr, Gavin Mogan, Justin Harringa,\nMark Waite, Marky Jackson, Steven Terrana, and Zhao Xiaojie (Rick).\nAll of them are awesome community leaders who actively contribute to the Jenkins project and\nrepresent its users.\nIt would be an honor to have them on the Jenkins board.\nRegardless of the election results, we appreciate their participation and the time they invested in these elections.\n\nThis year we were electing 2 governance board members.\nWe were using the Condorcet Internet Voting Service that allows voters to rank their choices rather than just picking their one favorite choice.\nYou can find full voting results here :\n\nMark Waite  (Condorcet winner: wins contests with all other choices)\n\nMarky Jackson loses to Mark Waite by 48–12\n\nGavin Mogan loses to Mark Waite by 51–10, loses to Marky Jackson by 31–20\n\nEwelina Wilkosz  loses to Mark Waite by 48–14, loses to Gavin Mogan by 29–28\n\nJustin Harringa  loses to Mark Waite by 51–11, loses to Ewelina Wilkosz by 35–16\n\nSteven Terrana  loses to Mark Waite by 47–16, loses to Justin Harringa by 20–19\n\nZhao Xiaojie (Rick)  loses to Mark Waite by 57–5, loses to Steven Terrana by 25–24\n\nFrederic Gurr  loses to Mark Waite by 52–10, loses to Zhao Xiaojie (Rick) by 25–24\n\nAndrey Falko  loses to Mark Waite by 56–6, loses to Frederic Gurr by 26–13\n\nAlthough Mark Waite came first in the voting results,\nbeing on the board would violate the Corporate Involvement clause which states that\n\"the number of board members affiliated with one company must be less than 50%\".\nMark will continue to be Documentation officer.\nRegardless of his official role, Mark has been leading many initiatives and helping a lot with various aspects of the community governance.\n\nCongratulations to Marky and Gavin, and thanks to all candidates!\nAll new board members are elected for a 2-year term unless they decide to step down earlier.\nThe estimated end of the term for them is December 02, 2022.\nWe would also like to thank Alex Earl and R. Tyler Croy who step down from the Jenkins Governance Board this year.\nThanks to them for all contributions and for continued community leadership.\n\nStatement from Marky Jackson:\n\nIt is a tremendous honor to be elected to this roles. I am so humbled.\nBeing part of this community is a fantastic opportunity that I have had. It has given me so many joys. Whether helping to foster community collaboration, working on the roadmap, leading various SIG’s or helping meetups or conferences, this community has given me so much.\nMy goals are bridging the Jenkins project with other interoperability projects, defining the roadmap, achieving roadmap goals, continuing to help meetups thrive, and our conferences focus on the community. I want to ensure we are transparent in our goals and how we achieved them. I want to continue to build up a welcoming community that holds diversity and inclusion at the forefront.\nI look forward to working with the other members of the Governance Board to continue to deliver on the incredible things this project is known for.\n\n— Marky Jackson, Jenkins Governance Board Member and Events Officer\n\nStatement from Gavin Mogan:\n\nGavin here. I’m still in shock that I got voted in for the Jenkins board.\nIt felt like yesterday I just got started helping people randomly on IRC. This is truly exciting.\nI plan to continue to help out as much as I can wherever I can, just in a bit more official capacity.\nThis is truly exciting. I have no firm plans or agenda, just keep pushing advocacy and getting people to help each other in a positive and safe way.\nMy specialities lie in outside of Jenkins core, whether it be working on the plugin site, or hanging out on IRC, Gitter and Reddit helping out where I can.\n\n— Gavin Mogan, Jenkins Governance Board Member\n\nOfficer election details\n\nAll 5 officer positions were up for election this year.\nThese roles have a 1-year term, with the estimated end of term on Dec 02, 2021.\nAfter the initial review of nominations and confirmations with potential candidates,\n4 officer positions were uncontested:\n\nOlivier Vernin - Infrastructure officer.\n\nMarky Jackson - Events officer.\nMarky inherits this role from Alyssa Tong\nwho decided to step down from the officer role and to focus on the Jenkins community marketing,\nincluding Jenkins Is The Way and many other initiatives started by Alyssa.\n\nMark Waite - Documentation officer.\n\nDaniel Beck - Security officer.\n\nThanks to all Jenkins officers for their continued leadership!\nOfficers take responsibility for many day-to-day processes in the Jenkins community and lead the contributor teams working on them.\nIt requires significant time commitment, and it is not taken for granted.\n\nRelease Officer election results\n\nTim Jacomb won the biggest support as a Release officer ( voting results).\nTim will replace in this role Oliver Gondža\nwho has been leading the Release Team and the release processes since 2016 when the role was officially introduced.\n\nTim Jacomb (Condorcet winner: wins contests with all other choices)\n\nBaptiste Mathus  loses to Tim Jacomb by 40–23\n\nVictor Martinez  loses to Tim Jacomb by 38–25, loses to Baptiste Mathus by 32–31\n\nHere is a statement from Tim Jacomb:\n\nI’m excited for the year ahead, let’s see where we can take the Jenkins release area in the future.\nAs a Release Officer I would like to increase automation, ease onboarding of new contributors to the release team,\nand ensure that responsibilities rotate among people so that I wouldn’t be a bottleneck for any task.\n\n— Tim Jacomb, Jenkins Release Officer\n\nThanks to Alyssa Tong and Oliver Gondža for their long-time service as Jenkins officers!\nWe are looking to continue working with them in the Jenkins community.\nAnd congratulations to Tim Jacomb and Marky Jackson for joining the team!\n\nStatistics\n\nThis year we had 92 registered voters and around 65 actual votes.\nIt is significantly lower than in the 2019 elections when we had almost 350 voters.\nIt can be partially explained by the change of the communication process.\nThis year we decided to not use the previous voter registration system,\nand we relied on the user and developer mailing lists instead of sending messages to the entire LDAP user database.\nThis is definitely something we need to review at the retrospective.\n\nWhat’s next for the board?\n\nThe last year was awesome for the Jenkins project governance.\nWith help of many contributors and with the renewed board,\nwe have been able to facilitate many initiatives in the Jenkins project,\nfor example hosting contributor summits,\npublishing the public roadmap,\nCode of Conduct update,\nterminology changes,\nand graduation in the Continuous Delivery Foundation.\nThere is a lot more work to do to grow the community and to ensure the long term sustainability of the project.\n\nIn short term, our key priority is to organize knowledge and permission transfers to the new board members and officers so that they can be effective in their new roles.\nThe board will also focus on maintaining the Jenkins governance processes\n(meetings, budget approvals, funding, etc.) and defining the next steps and priorities.\n\nThere are many longer-term initiatives the board could facilitate:\nlong-anticipated features and architecture changes,\nchanging the Jenkins Enhancement Proposal process,\ncreating better communication channels with Jenkins users,\nand onboarding of new contributors and maintainers.\nSuch initiatives are instrumental for the evolution of the Jenkins project.\nThe ideas will be discussed in mailing lists and during governance meetings.\nIf you would like to share your vision and ideas about what’s needed in the project,\nit is definitely a great time to contribute!\n\nFeedback\n\nJenkins project plans to conduct elections every year.\nWe will appreciate and welcome any feedback regarding the election process so that we can improve the process.\nWe have started a Retrospective document for these elections.\nEveryone can suggest changes in this document, and we will integrate them.\nThere will be also a public retrospective review at the next Advocacy and Outreach SIG meeting on Dec 17.\n\nIf you have any private feedback you would like to share,\nplease send an email to the Jenkins Board.\nIf you would like to raise any issues about the election process,\nplease contact one of the elected Governance Board members.\n\nReferences\n\nJenkins Governance Board\n\nJenkins Board Election Process\n\nJenkins Officers\n\n2020 election announcement\n\n2020 election candidates\n\nRetrospective document","title":"2020 Jenkins Board and Officer Elections Results","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix","twitter":"alexcearl"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/authors/uhafner","twitter":null}]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"4a81cf3c-4ca0-511f-9197-d77a776ede34","slug":"/blog/2020/11/10/spring-xstream/","strippedHtml":"Cleaning up technical debt is a perennial topic among Jenkins core developers,\nand one of the most visible issues is the use of obsolete and/or forked third-party libraries.\nIn a world where Dependabot is offering updates to libraries released just hours before,\nit is unpleasant to be working with dependencies that are many years old.\nSince large organizations in particular are unhappy to install software using obsolete or nonstandard versions,\nmy employer (CloudBees) gave its blessing for me to spend some time cleaning up some of the worst offenders.\n\nThe toughest nut to crack was the Acegi Security library used for authentication,\nwhich has long since been replaced by Spring Security\n(and Jenkins was also bundling a long-outdated version of some Spring Framework dependencies).\njep:227[] tracks the complicated task of updating to Spring Security\nwithout breaking the numerous plugins that interact with authentication,\nespecially those offering a Security Realm.\n\nAnother longstanding problem was the XStream library which Jenkins uses to read and write XML configuration files.\nThis had been forked long ago by what was then the Hudson project and a few fixes applied.\nUnfortunately, some of those fixes were rejected upstream as invalid (representing unsupported usage patterns),\nand the fork fell behind the upstream version.\njep:228[] describes the impact of switching to the upstream library in a more standard usage mode,\nincluding fixes to a smaller number of plugins which would otherwise be incompatible.\n\nNow that the Jenkins 2.266 weekly release includes both updates,\nit is important for both Jenkins administrators and plugin maintainers to check for actual or potential incompatibilities.\nThere are two tables listing the impact of these changes on plugins:\n\nSpring Security compatibility\n\nXStream compatibility\n\nIf you use Jenkins then it is a good idea before upgrading to take a look at these tables\nto see if you are running any plugins considered incompatible.\nIf so, try not to rely on that plugin, or find out if there is an active maintainer who could help.\nFor entries marked unknown, it would be appreciated if you could do a sanity check after upgrading\nand offer a pull request to the table page (click Edit this file) with a more informative status.\n\nIf you find a regression in a plugin, please file a bug report in Jira and link to it from the table.\nAlso please add a JEP-227 or JEP-228 label as appropriate, for ease of tracking:\n\nOpen JEP-227 issues\n\nOpen JEP-228 issues\n\nIt is a good idea to update all your plugins before upgrading Jenkins core.\nIn the case of the Spring Security update, some security realm plugins including LDAP and Active Directory must be updated in advance.\n(You can safely run the new plugin versions on Jenkins releases prior to this change.)\nOtherwise, you risk being unable to log in to Jenkins—and thus unable to update those plugins from the GUI!\nThe LDAP plugin additionally has a new version available only after the core upgrade, but there is no rush in switching to that.\n\nIf you maintain a Jenkins plugin then please check whether it is marked anything less than compatible.\nIn some cases, there are already pull requests awaiting merge.\nIn other cases, some minor aspects of the source code have been identified that could be edited to improve compatibility.\n\nWe expect to see a bit of disruption from these changes\nbut hope that in the long run they will save time for core and plugin developers\nand lead to a more secure and stable tool.\nPlease reach out on the developers’ list with any questions or suggestions.","title":"Spring and XStream updates (breaking changes!)","tags":["jenkins","core","developer"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick","twitter":"tyvole"}]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"a4d05a2d-a0a0-5795-a164-1b18cbfae9a3","slug":"/blog/2020/11/10/major-changes-in-weekly-releases/","strippedHtml":"Recently we have selected Jenkins 2.263 as a new baseline for the LTS release line, with ETA in December 2020.\nIt allows delivering significant and in some cases breaking changes which have been previously on hold.\nBeginning with the Jenkins 2.264 release on October 27, 2020, we’ve entered a period where the Jenkins weekly releases will include more significant changes than usual.\nThat period of more significant changes is expected to continue for a month or more.\nAs you may have seen from the release community ratings, there might be regressions and instabilities during this period.\n\nWe’re excited for the changes.\nThey help to improve user experience and to address the technical debt accumulated in the Jenkins core.\nWe invite Jenkins users to evaluate those changes and provide feedback.\nThis is an especially valuable time for users and administrators to test the weekly releases and report issues with them,\nespecially on Jenkins test environments.\nIn the Jenkins project we have invested a lot in test coverage for the main functionality,\nbut in many cases we rely on user feedback for exotic plugins and environments not yet covered by our test automation.\n\nThe most notable changes include:\n\nConfiguration UI - Tables to Divs\n\nCore - Spring Security replaces Acegi Security\n\nCore - XStream unfork\n\nUI - JQuery upgrade\n\nConfiguration UI - Tables to Divs\n\nJenkins 2.264 is the first weekly release to include the \"Tables to Divs migration\" user interface work of Josh Soref, Tim Jacomb, and Felix Queiruga.\nIt is a significant step to improve forms in the Jenkins user interface (configuration pages, build parameters, etc.), especially for users on narrow devices like tablets and phones.\n\nA better user interface\n\nThe transition from using HTML table tags to using HTML div tags provides a more attractive user interface for all users and a much better experience for users on narrower devices.\nBefore the conversion from table tags to div tags, the\"Manage Jenkins\" page looked like this in a 1024x768 window:\n\nAfter the conversion, the\"Manage Jenkins\" page now looks like this:\n\nThe user interface improvements from the transition are a nice step forward for Jenkins.\nHowever, because the user interface improvements require changes in plugins, we need your help.\n\nWe need users to test the latest weekly Jenkins releases with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\nPlease add the tables-to-divs-regression label to the issues.\nThe tables-to-divs-regression label makes it easier to find issues related to the tables to divs transition.\n\nPlugin developers\n\nSeveral plugins have already been identified that may need changes.\nSee the Jira epic for plugins that are likely to need changes for the new user interface layout.\nThe list of open tables-to-divs-regression issues can also be used to see plugins that need changes.\n\nIf you can assist with plugin testing and code changes, select one of the plugins from that epic, test it, and propose a pull request to help with this user interface transition.\nIf you’re not comfortable proposing a pull request, describe the problems you see in a bug report.\n\nA tables to divs migration guide is available.\nIt describes areas that typically need to be changed as part of the migration from tables to divs.\nIt also includes detailed examples that allow the plugin to continue supporting older Jenkins versions with table layouts and use div layouts for newer Jenkins versions.\n\nCore - Spring Security replaces Acegi Security\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the Spring Security libraries from the Acegi security libraries that Jesse Glick has proposed and developed through jep:227[Jenkins Enhancement Proposal 227].\n\nThis upgrade replaces the Acegi Security library with the current release of the Spring Security library.\nDetails of the change are described in jep:227[] and in the pull request.\n\nWe need users to test the latest Jenkins weekly releases with their plugins and watch for issues related to authentication.\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the Spring Security compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the Spring Security upgrade.\n\nCore - XStream unfork\n\nJenkins has been using a fork of the XStream serialization library to read and write XML files.\nThe XStream library was forked over 10 years ago and had a few fixes applied to it.\nUnfortunately, at that time the fixes were rejected by the upstream maintainers of XStream (unsupported patterns of API use) and the fork fell behind the upstream version.\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the upstream version of the XStream library that Jesse Glick has proposed and developed through jep:228[Jenkins Enhancement Proposal 228].\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the XStream compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the XStream upgrade.\n\nUI - JQuery upgrade\n\nJenkins uses a 1.x version of the jQuery user interface library for some of its components.\nFelix Queiruga has started the work to update that library to a current jQuery version.\n\nIt will arrive in a future Jenkins weekly release.\nWhen it arrives, it will be noted in the Jenkins weekly changelog.\n\nWhen the jQuery update arrives, We will need users to test the Jenkins weekly release with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\n\nCall to test\n\nThis is a great time to help the Jenkins project by testing the weekly releases.\nWe encourage you to test the user interface and the interactions that are most important to you.\nIf you find an issue, please report the issue so that others can benefit from your discovery.","title":"Jenkins 2.264+: Major changes in the weekly release line","tags":["jenkins","core","testing","ui"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-11-05T00:00:00.000Z","id":"048474b0-1674-5ecc-b72f-376e9c14e52a","slug":"/blog/2020/11/05/installing-jenkins-on-kubernetes/","strippedHtml":"We are super excited to announce that the Document Jenkins on Kubernetes Project recently merged its first PR into Jenkins.io.\nThis PR adds a new Kubernetes section to the existing Installing Jenkins chapter of Jenkins.io.\n\nThis new section describes two options to install/run Jenkins on Kubernetes, how to setup a minikube cluster on which to run your Jenkins deployment and finally a bonus segment that explains some Post-installation setups such as unlocking Jenkins, customizing Jenkins with plugins and creating your first administrator user.\n\nThe first installation option covered in this section is helm a package manager for Kubernetes whose package format is called a chart. The helm section covers the prerequisites for installing Jenkins on Kubernetes using Helm, installing and configuring helm, creating a persistent volume and service account, and finally, Installing Jenkins.\n\nThe second option describes how to install Jenkins using a set of yaml files.\nThis section explains how to create a Jenkins deployment file, Deploy Jenkins, grant access to jenkins service, and finally access your Jenkins dashboard after installation.\n\nSplitting the Installing Jenkins Chapter\n\nThe addition of the Kubernetes section highlighted a long-standing challenge with the Installing Jenkins chapter.\nIt was too long and contained too many topics, making it difficult and unpleasant for\nmost users to navigate.\nTo top the icing on the cake and further improve the experience on Jenkins documentation users, another PR was merged into Jenkins.io to split the Installing Jenkins chapter into smaller chapters for better separation of concerns and easy navigation. This PR also redirects bookmarks that linked to the previous locations like https://www.jenkins.io/doc/book/installing/#debianubuntu using Javascript.\n\nThe image above is a snapshot of what the Installing Jenkins chapter looked like before the PR.\nAll sections of this chapter such as docker, Kubernetes and others were lumped up on the same page making it too long with so much information thereby making it difficult to navigate or even find information on this page.\n\nThis snapshot shows what the Installing Jenkins chapter looks like after the PR.\nWith this chapter split into smaller sections, it’s neater, clearer and most importantly easier to navigate to the section of interest without having to scroll through so much information that’s not necessarily needed.\n\nTesting, Participating and Contributing\n\nThe Jenkins Community invites the general public to try out these documentation updates and give feedback to help us further improve the documentation.\nIf you have any feedback, suggestions, or would like to contribute to the Jenkins on Kubernetes project,  drop a message indicating your interest in the Jenkins documentation Gitter channel.\nYou can also find the Google season of docs office hour notes and recordings for Jenkins on Kubernetes here.\nGSOD office hours take place twice a week on Mondays and Thursdays between 6 pm GMT+1 and 7 pm GMT+1, if you would like to be part of these meetings, you can indicate interest in the Jenkins Documentation Gitter channel and we would be happy to have you.\n\nAdditional Resources\n\nInstalling Jenkins on Kubernetes PR\n\nSplitting Installing Jenkins Chapter PR\n\nDocument Jenkins on Kubernetes Project\n\nGSoD Proposal\n\nGSoD Office Hours Notes\n\nGoogle Season of Docs - Startup\n\nGoogle Season of Docs on jenkins.io\n\nDocs SIG for Google Season of Docs startup ( video)","title":"Document Jenkins on Kubernetes: Installing Jenkins on Kubernetes Documentation Release","tags":["kubernetes","helm","documentation","gsod","gsod2020"],"authors":[{"avatar":null,"blog":null,"github":"zaycodes","html":"<div class=\"paragraph\">\n<p>Zainab is a software developer and technical writer who is passionate about contributing to open source, improving technical documentation and advocating for gender diversity in open source collaboration. She started contributing to Jenkins documentation during the technical writer exploration phase for <a href=\"https://developers.google.com/season-of-docs\">Google Season of Docs</a> 2020, and is currently working on <a href=\"/sigs/docs/#jenkins-on-kubernetes\">Documentation for Jenkins on Kubernetes</a>.</p>\n</div>","id":"zaycodes","irc":null,"linkedin":"zaycodes","name":"Zainab Abubakar","slug":"/blog/authors/zaycodes","twitter":"zaycodes"}]}},{"node":{"date":"2020-11-04T00:00:00.000Z","id":"507874d6-f29d-5e57-82cd-0383757359fc","slug":"/blog/2020/11/04/codeql/","strippedHtml":"A little over a month ago, GitHub announced the general availability of its code scanning solution.\nIt’s based on CodeQL, which makes it pretty easy to write queries for it and run them using the CodeQL GitHub action, CodeQL command line tools, or on lgtm.com.\n\nMany of the security vulnerabilities discovered in Jenkins plugins are fairly similar to each other, and unfortunately they’re usually specific to Jenkins, which means existing generic tools would not be able to discover them.\nSo I decided to write CodeQL queries for Jenkins-specific issues and invited maintainers to sign their plugins up for a \"private beta\" of code scanning for these issues.\n\nToday’s security advisory is the first one that includes findings discovered through that initiative.\nAll these issues were discovered with assistance by this tooling:\n\nSECURITY-2101 in AWS Global Configuration Plugin,\n\nSECURITY-2102 and SECURITY-2103 in Kubernetes Plugin,\n\nSECURITY-2104 and SECURITY-2115 in Mercurial Plugin,\n\nSECURITY-2110 in Azure Key Vault Plugin, and\n\nSECURITY-2126 in Active Directory Plugin\n\nWhile there were of course also false positives we had to review and mark as ignored, the integration with the GitHub UI made this pretty straightforward.\nOverall I’m very happy with the results so far, especially considering how new this initiative is.\n\nInterested in making the plugin you are maintaining more secure?\nSign up now by filing an INFRA issue in the github component and list the plugin repositories you’d like to have scanned.","title":"First results from using GitHub CodeQL to discover security vulnerabilities in Jenkins plugins","tags":["jenkins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and member of the <a href=\"/security/#team\">Jenkins security team</a>.\nHe was the inaugural Jenkins security officer from 2015 to 2021.\nHe sometimes contributes to developer documentation and project infrastructure in his spare time.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2020-10-28T00:00:00.000Z","id":"9b07c9a0-6617-5760-a321-56da263f62d5","slug":"/blog/2020/10/28/election-candidates/","strippedHtml":"Jenkins 2020 Elections are over, thanks to all participants!\nPlease see the results announcement.\n\nAs you probably know, in a few weeks we will have the Jenkins 2020 elections.\nWe will be electing two governance board members and five officers,\nnamely: Security, Events, Release, Infrastructure, and Documentation.\nAfter the announcement on Sep 24,\nwe have been accepting nominations from community members.\n\nAfter the processing and confirmations with potential candidates,\nthe Jenkins 2020 Elections committee is happy to announce the candidates for the Jenkins Governance Board and Officer roles:\n\nGovernance Board candidates: Andrey Falko, Ewelina Wilkosz, Frederic Gurr, Gavin Mogan, Justin Harringa, Mark Waite, Marky Jackson, Steven Terrana, Zhao Xiaojie (Rick)\n\nRelease officer: Baptiste Mathus, Tim Jacomb, Victor Martinez\n\nSecurity officer: Daniel Beck (uncontested)\n\nEvents officer: Marky Jackson (uncontested)\n\nInfrastructure Officer: Olivier Vernin (uncontested)\n\nDocumentation officer: Mark Waite (uncontested)\n\nWe encourage all community members to support the candidates and to participate in the elections!\n\nKey dates\n\nNov 10 - Voting begins. Condorcet Internet Voting Service will be used for voting.\n\nNov 24 - Voting sign-up is over.\n\nNov 27 - Voting ends, 11PM UTC.\n\nDec 03 - Election results are announced and take effect.\n\nSigning up for voting\n\nAny Jenkins individual contributor is eligible to vote in the election\nif there was a contribution made before September 01, 2020.\nContribution does not mean a code contribution,\nall contributions count:\ndocumentation patches,\ncode reviews,\nsubstantial issue reports,\nissues and mailing list responses,\nsocial media posts,\ntesting,\netc.\nSuch a contribution should be public.\n\nYou can register to vote in one of two ways:\n\nFill out this Google Form.\nThis way requires logging into your Google Account to verify authenticity.\n\nSend an email to jenkins-2020-elections@googlegroups.com.\nYou will need to provide the information specified here.\n\nOnce sign-up is over, the election committee will process the form submissions and prepare a list of the registered voters.\nIn the case of rejection, one of the election committee members will send a rejection email.\nEvery individual contributor is expected to vote only once.\n\nCandidates\n\nBelow you can find statements, affiliations and profile links provided by the candidates.\n\nMinimum copy-editing was applied to the content by the Jenkins 2020 Elections Committee.\nCandidates are sorted by the first name.\n\nGovernance Board\n\nAndrey Falko\n\nI have been a Jenkins user and administrator on and off since around 2010.\nIn 2016, I got into evangelism by organizing a\nJenkins Area Meetup in San Francisco.\nI spoke at Jenkins World 2017\nand again at\nJenkins World 2018.\nJustin Harringa and I wrote and open sourced the Config Driven Pipeline Plugin.\nFor two years running, I’ve been a mentor for two Google Summer of Code projects:\nExternal Fingerprint Storage Project and\nRemoting over Apache Kafka with Kubernetes features.\n\nWith this nomination, I hope to continue helping strengthen and\nprogress the community further. As a member of the governance board,\nI’ll bring a fresh perspective by asking questions, providing feedback,\nand finding opportunities for others to contribute.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Stripe\n\nEwelina Wilkosz\n\nAs a consultant I support my customers with their Jenkins issues since the beginning of 2017.\nAnd almost from the start it was some kind of \"as code\" approach.\nThe experience I gained during that time resulted in getting myself involved in the development of Configuration as Code Plugin for Jenkins.\nI consider becoming a part of Jenkins Community one of the most valuable experiences in my career so far.\nI appreciate how much I have learned and how welcoming the community is.\n\nI am not a very active contributor these days, at least when it comes to code, but what I have to offer is rather extensive experience\nwith Jenkins end users - from small, single instance setups to environments with hundreds of controllers run in a different way on different operating systems.\nEvery day I see challenges those users go through, I know what issues they are facing and which features they consider valuable or missing.\nAs a Jenkins Governance Board Member I can represent those users.\n\nThanks to my involvement in Configuration as Code Plugin development\nI had a chance to deliver a number of public presentations\nwhere I focused on the benefits of the solution and tried to make it easier for newcomers to try it.\nHere are a few examples of my activities related to Jenkins Configuration as Code:\nblogpost,\ncdCON presentation,\npodcast recording.\nSo my focus is not only on representing users but also on educating them, and educating myself,\nso I actually know what they need and why.\n\nProfile links:\nGitHub,\nLinkedIn,\nTwitter\n\nAffiliations: Eficode (former Praqma)\n\nFrederic Gurr\n\nI started to use Jenkins back in 2008, when it still had a different name.\nIn 2011 I started to contribute and created my first little plugin called\nextra-columns.\nSince then, using and administering Jenkins servers has become a major part of my work life,\nwhile getting involved with the Jenkins community\nkickstarted my interest and involvement with open source software and communities.\n\nI’ve been working as a release engineer at the Eclipse Foundation since 2016,\nsupporting 250+ Jenkins instances for various open source projects.\nI’d be honored to bring a user and admin oriented perspective to the Governance Board and help\nshape the future of Jenkins.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: Eclipse Foundation\n\nGavin Mogan\n\nI got started with Jenkins early on when I was just getting started with testing.\nI knew there had to be a way to run the tests automatically and report on them back to people.\nI started hacking my own tools before I came across Jenkins (then Hudson) and was hooked ever since.\nOver the years I’ve managed to install and configure Jenkins at various jobs,\nand even was employed making internal and external plugins and integrations.\nYou’ll often find me on the Jenkins IRC and Gitter channels as well as the subreddit giving a hand to people who are stuck.\nI also try to get involved with Jenkins Infrastructure projects as much as I can.\nI currently maintain the plugin site, plugin site API, Jenkins Wiki exporter, and a bunch of other minor projects.\nI also help run Vancouver’s chapter of Nodeschool.\n\nIf elected, I would like to address improving commercial support avenues.\nRight now it’s a lot of people flailing in isolation.\nI would like to not only improve things so people can find easier ways to get help,\nbut also encourage more users to help others, and push for a\ncentralized source of companies providing commercial support.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: Digital Ocean, Nodeschool Vancouver\n\nJustin Harringa\n\nThe nomination is quite an honor for me.\nI have been a Hudson/Jenkins user since around 2009/2010 when\nI started working through driving continuous integration in a corporate environment at John Deere.\nAs time went on, I began contributing some small fixes to plugins such as the Job DSL Plugin, OpenID Plugin, and the Workflow Job Plugin.\nEventually, I ended up helping maintain Salesforce’s Chatter plugin and then open sourcing plugins such as the Config-Driven Pipeline Plugin with Andrey Falko.\nMore recently, I have also had the extreme pleasure of mentoring in 2 Jenkins projects for Google Summer of Code\n(Multi-branch Pipeline support for Gitlab in 2019 and Git Plugin Performance Improvements in 2020).\n\nI have learned so much from working with Jenkins and I would love to give back to the project further.\nHaving introduced Jenkins at both small and large companies,\nI would love to help contribute to the direction of the project through the Roadmap/SIGs/JEPs and encourage others to also contribute / improve Jenkins.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn\n\nAffiliations: Salesforce, Spinnaker SIG for Azure\n\nMark Waite\n\nI’m a Jenkins contributor, a member of the Jenkins core team,\none of the leaders of the Platform Special Interest Group,\nand leader of the Documentation Special Interest Group.\nI’ve served as the Jenkins Documentation Officer since 2019.\nI was a mentor for Google Season of Code 2020 and am one of the maintainers of the Git plugin for Jenkins.\n\nIf elected and allowed to serve on the Jenkins Board, I’ll work to increase community involvement and community development.\nI’m deeply interested in tooling and environments that support the Jenkins project,\nincluding the Jenkins CI environments, issue tracker, artifact repository, and source code repositories.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: CloudBees\n\nMarky Jackson\n\nI have been involved in the Jenkins project for many years.\nI started out as a plugin maintainer, SIG member and general helper.\nI moved to a SIG lead, speakers and Google Summer of Code and Docs org admin and mentor.\nMy current goals are to help continue the work of the public roadmap as well and gain most community members by continuing to be a champion of the community.\n\nFor me, being on the Jenkins Board is another opportunity to improve upon the great work\nwe have all done as well as work toward branching out our efforts to have more women, people of color and LGBTQIA members.\nI would be honored to have this opportunity.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: Equinix Metal, Continuous Delivery Foundation, Kubernetes, Ortelius\n\nSteven Terrana\n\nI have been a Jenkins user since 2017 and contributor since 2018.\nI am the primary maintainer of the Jenkins Templating Engine,\na plugin that allows users to create truly templated Jenkins pipelines that can be shared across teams.\nThrough that work, I’ve had the great pleasure of helping to organize the Pipeline Authoring Special Interest Group,\ncontributing to the Jenkins Pipeline documentation, and contributing bug fixes to various plugins\n(including the pipeline plugin and workflow-cps library).\n\nAs a Continuous Delivery Foundation Ambassador,\nI’ve enjoyed doing what I can to advance the community’s approach to CI/CD and simplifying DevSecOps adoption within large organizations.\nIt would be a privilege to serve on the Jenkins Governance Board and offer my support wherever I can.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Booz Allen Hamilton, Continuous Delivery Foundation\n\nZhao Xiaojie (Rick)\n\nThree years ago I joined the Jenkins community.\nI learned a lot during the process of contributing.\nI even became a Jenkins hero in my city.\nThe most exciting thing I want to do is help more new users of Jenkins get started, and let more contributors feel comfortable.\nI always love to host a JAM no matter if it’s online or offline.\n\nPlans: improve the experience of using Jenkins in different\ncountries; reorganize the knowledge of Jenkins, for example the tutorial\nby text or video format; help other SIG leaders to organize meetings.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: N/A\n\nRelease Officer\n\nBaptiste Mathus\n\nI have been using and contributing to Jenkins for so long that it is difficult for me to check when it started exactly.\nMy first pull-request to Jenkins was in 2011 and I had started to use it long before it.\nThroughout the years, I have contributed to various areas:\ncreated our local Jenkins Area Meetup with Michaël Pailloncy,\nhelped users and developers on our mailing lists and IRC channels,\ncontributed to the Jenkins infrastructure, the website,\nprocessing plugins hosting requests, worked full time on Jenkins Evergreen,\nand I am still present today.\n\nFor all these reasons, it would be an honor to serve as the Release Officer for the Jenkins Project.\n\nProfile links:\nGitHub,\nTwitter,\nJenkins Blog\n\nAffiliations: CloudBees\n\nTim Jacomb\n\nI have been a user of Jenkins for the last 8 years and a regular contributor since 2018.\nI began with maintaining the Slack plugin and over the last couple of years I have since expanded that to many more plugins and the Jenkins core.\nThese are some of the components I maintain when I have time: Slack, Azure Key Vault, Junit,\nmost of the Database plugins, Dark theme, Plugin installation manager, Jenkins Helm chart, Configuration as code plugin.\nI am also a member of the Jenkins infrastructure team,\nand I was involved in the release automation project and the mirrors modernisation effort,\nalong with the day to day support helping people regain access to accounts etc.\n\nAs a Release Officer I would like to increase automation,\nease onboarding of new contributors to the release team, and ensure that\nresponsibilities rotate among people so that I wouldn’t be a bottleneck for any task.\n\nProfile links:\nGitHub,\nJenkins Blog\n\nAffiliations: Kainos\n\nVictor Martinez\n\nI have been involved in the Jenkins project since 2011 by different means, as a user, as an administrator, as a contributor\n(bug reporting, plugin development, documentation, hackfest),\nbeing active in the different Jenkins forums such as the Jenkins-dev and Jenkins-user mailing lists,\nworking with the jenkins-infra shared library and so on.\nI’m also an advocate for the Jenkins project through some presentations anytime that I had the opportunity such as\nDevOps World 2020 and\nJenkins World 2017.\n\nI’ve been happily nominated for the Release officer role which matches not just my area of professional expertise that\nI’ve been doing for the last 14 years in different roles for different companies but also that’s an area of personal interest\nwhere I’d like to spend time with the Jenkins community to understand, document and automate the process\nin a way we can keep the project sustainable for a long term as it’s today,\nit’s not just about what I can bring for the community but also about growing together.\n\nIf elected as a Release officer I would aim to focus on the following areas:\nproceed with the existing responsibilities for this role;\ndocument and automate the release process;\nbeing an enabler for the Continuous Delivery not just for the plugins but also for the core.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Elastic\n\nSecurity Officer - uncontested\n\nDaniel Beck\n\nI’ve been a Jenkins user since 2011, contributor since 2013, and core maintainer since 2014.\nIn 2015, I took on the scheduling and authoring of security advisories and have been doing that ever since,\nworking with reporters, maintainers, and the Jenkins security team to deliver security fixes.\nBeyond that, I regularly contribute to Jenkins and project infrastructure.\n\nSince I’ve started in the Security Officer role, we’ve made significant\nimprovements:\nPlugins no longer allow ordinary users to run arbitrary scripts (no sandbox!) as a regular feature. I introduced fine-grained permission management\nfor our GitHub repositories and\nthe Maven repository hosting our releases.\nWarnings directly in Jenkins inform admins when an installed component has known security issues (and their UX was improved earlier this year).\nThe Jenkins project is now a CVE Numbers Authority,\nto ensure timely and high-quality information in the CVE vulnerability database.\nWorking with Tyler, I added telemetry to Jenkins,\nwhich allowed us to deliver multiple large-scale security fixes with\nminimal impact.\nMore recently, I’ve started writing code scanning rules for common problems in Jenkins and\ninvited maintainers to sign their plugins up,\nwhich is something I hope to properly publish and roll out more widely soon.\n\nProfile links:\nGitHub\nJenkins Blog\n\nAffiliations: CloudBees\n\nEvents Officer - uncontested\n\nMarky Jackson\n\nI have been a part of the Jenkins community for some time, and I have received the utmost joy in volunteering.\nI have been extremely fortunate to have played a lead role in the Outreach & Advocacy SIG, the pipeline-Authoring SIG,\nand, most recently, the Cloud-Native SIG.\nI have taken part in many meetups, org admin, and mentor in the GSoC & GSoD.\nFinally, At DevOps World 2020, I received Jenkins most valuable advocate at DevOps World.\nI have experience advocating in other communities as well:\nKubernetes Release Manager Associate, Kubernetes Mentoring Lead, Ortelius Community Manager.\n\nJenkins is the most widely used Continuous Integration tool around,\nand I want to continue to promote that by focusing on the following areas: meetups; conference presentation from the Jenkins community;\nnew user outreach and onboarding; cross-community collaboration (e.g., Kubernetes community);\nworking with the Continuous Delivery Foundation on interoperability; focusing on SIG events.\n\nMy roots are open-source, and I am so proud to be a part of the Jenkins community.\nYou can read more about my journey in open-source here.\nYou can also see some of my presentations here and\nhere.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: OpsMx, Continuous Delivery Foundation, Kubernetes, Ortelius, Spinnaker\n\nInfrastructure Officer - uncontested\n\nOlivier Vernin\n\nI have been actively contributing to the Jenkins project for the past four years with contributions across many areas,\nand infrastructure is one of my favorite topics.\nOver my previous mandate as a Jenkins infrastructure officer, I focused on improving contribution experience,\nand let community members opportunities to take ownership of the different services.\nI worked on various sponsoring initiatives to make the Jenkins infrastructure more sustainable.\nWe provided a new environment for releasing Jenkins core (and one plugin!), and also many more things.\n\nFor the coming year, It is hard to make commitments on what it will look like as we have things we know,\nlike services that need some attention (“ci.jenkins.io/) and the things we don’t know yet.\nAnyway, It’s important to me to have a transparent project where everybody could read, learn, participate,\nand understand how the Jenkins project manages infrastructure and I want to continue down that path.\n\nProfile links:\nGitHub,\nTwitter,\nJenkins Blog\n\nAffiliations: CloudBees\n\nDocumentation Officer - uncontested\n\nMark Waite\n\nI’m a Jenkins contributor, a member of the Jenkins core team, one of the leaders of the Platform Special Interest Group,\nand leader of the Documentation Special Interest Group.\nI’ve served as the Jenkins Documentation Officer since 2019.\nI was a mentor for Google Season of Code 2020 and am one of the maintainers of the Git plugin for Jenkins.\n\nIf elected and allowed to serve as Documentation Officer,\nI’ll continue efforts to invite more contributors through regular Documentation Office Hours and outreach programs like Google Season of Docs, CommunityBridge, Outreachy, and Jenkins Hackfests.\nI’ll work to assure an inviting and welcoming environment for contributors.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: CloudBees\n\nMore information\n\nJenkins 2020 elections announcement\n\nJenkins Governance Board and Jenkins Officers\n\nJenkins Board and Officer Election Process\n\n2019 election results\n\nElections coordination in the mailing list","title":"2020 Elections: Governance Board and Officer candidates","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-10-21T00:00:00.000Z","id":"7c9b1586-7a87-5fd5-8543-1a27aa94a68f","slug":"/blog/2020/10/21/a-sustainable-pattern-with-shared-library/","strippedHtml":"Table of Contents\n\nContext\nThe Problems\nThe Solution\n\nShared Library\nDuplication\nDocumentation\nScalability\nInstallation Agnostic\nFeature Toggling\n\nThis post will describe how I use a shared library in Jenkins. Typically when using multibranch pipeline.\n\nIf possible (if not forced to) I implement the pipelines without multibranch. I previously wrote about how I do that with my Generic Webhook Trigger Plugin in a previous post. But this will be my second choice, If I am not allowed to remove the Jenkinsfile :s from the repositories entirely.\n\nContext\n\nWithin an organization, you typically have a few different kinds of repositories. Each repository versioning one application. You may use different techniques for different kinds of applications. The Jenkins organization on GitHub is an example with 2300 repositories.\n\nThe Problems\n\nLarge Jenkinsfiles in every repository containing duplicated code. It seems common that the Jenkinsfile :s in every repository contains much more than just the things that are unique for that repository. The shared libraries feature may not be used, or it is used but not with an optimal pattern.\n\nInstallation specific Jenkinsfile:s that only work with one specific Jenkins installation. Sometimes I see multiple Jenkinsfile :s, one for each purpose or Jenkins installation.\n\nNo documentation and/or no natural place to write documentation.\n\nDevelopment is slow. Adding new features to repositories is a time consuming task. I want to be able to push features to 1000+ repositories without having to update their Jenkinsfile :s.\n\nNo flexible way of doing feature toggling. When maintaining a large number of repositories it is sometimes nice to introduce a feature to a subset of those repositories. If that works well, the feature is introduced to all repositories.\n\nThe Solution\n\nMy solution is a pattern that is inspired by how the Jenkins organization on GitHub does it with its buildPlugin(). But it is not exactly the same.\n\nShared Library\n\nHere is how I organize my shared libraries.\n\nJenkinsfile\n\nI put this in the Jenkinsfile :s:\n\nbuildRepo()\n\nDefault Configuration\n\nI provide a default configuration that any repository will get, if no other configuration is given in buildRepo().\n\nI create a vars/getConfig.groovy with:\n\ndef call(givenConfig = [:]) {\n  def defaultConfig = [\n    /**\n      * The Jenkins node, or label, that will be allocated for this build.\n      */\n    \"jenkinsNode\": \"BUILD\",\n    /**\n      * All config specific to NPM repo type.\n      */\n    \"npm\": [\n      /**\n        * Whether or not to run Cypress tests, if there are any.\n        */\n      \"cypress\": true\n    ],\n    \"maven\": [\n      /**\n        * Whether or not to run integration tests, if there are any.\n        */\n      \"integTest\": true\n    ]\n  ]\n  // https://e.printstacktrace.blog/how-to-merge-two-maps-in-groovy/\n  def effectiveConfig merge(defaultConfig, givenConfig)\n  println \"Configuration is documented here: https://whereverYouHos/getConfig.groovy\"\n  println \"Default config: \" + defaultConfig\n  println \"Given config: \" + givenConfig\n  println \"Effective config: \" + effectiveConfig\n  return effectiveConfig\n}\n\nBuild Plan\n\nI construct a build plan as early as possible. Taking decisions on what will be done in this build. So that the rest of the code becomes more streamlined.\n\nI try to rely as much as possible on conventions. I may provide configuration that lets users turn off features, but they are otherwise turned on if they are detected.\n\nI create a vars/getBuildPlan.groovy with:\n\ndef call(effectiveConfig = [:]) {\n  def derivedBuildPlan = [\n    \"repoType\": \"NOT DETECTED\"\n    \"npm\": [],\n    \"maven\": []\n  ]\n\n  node {\n    deleteDir()\n    checkout([$class: 'GitSCM',\n      branches: [[name: '*/branchName']],\n      extensions: [\n          [$class: 'SparseCheckoutPaths',\n            sparseCheckoutPaths:\n            [[$class:'SparseCheckoutPath', path:'package.json,pom.xml']]\n          ]\n      ],\n      userRemoteConfigs: [[credentialsId: 'someID',\n      url: 'git@link.git']]\n    ])\n\n    if (fileExists('package.json')) {\n      def packageJSON = readJSON file: 'package.json'\n      derivedBuildPlan.repoType = \"NPM\"\n      derivedBuildPlan.npm.cypress = effectiveConfig.npm.cypress && packageJSON.devDependencies.cypress\n      derivedBuildPlan.npm.eslint = packageJSON.devDependencies.eslint\n      derivedBuildPlan.npm.tslint = packageJSON.devDependencies.tslint\n    } else if (fileExists('pom.xml')) {\n      derivedBuildPlan.repoType = \"MAVEN\"\n      derivedBuildPlan.maven.integTest = effectiveConfig.maven.integTest && fileExists('src/integtest')\n    } else {\n      throw RuntimeException('Unable to detect repoType')\n    }\n\n    println \"Build plan: \" + derivedBuildPlan\n    deleteDir()\n  }\n  return derivedBuildPlan\n}\n\nPublic API\n\nThis is the public API, this is what I want the users of this library to actually invoke.\n\nI implement a buildRepo() method that will use that default configuration. It can also be called with a subset of the default configuration to tweak it.\n\nI create a vars/buildRepo.groovy with:\n\ndef call(givenConfig = [:]) {\n  def effectiveConfig = getConfig(givenConfig)\n  def buildPlan = getBuildPlan(effectiveConfig)\n\n  if (effectiveConfig.repoType == 'MAVEN')\n    buildRepoMaven(buildPlan);\n  } else if (effectiveConfig.repoType == 'NPM')\n    buildRepoNpm(buildPlan);\n  }\n}\n\nA user can get all the default behavior with:\n\nbuildRepo()\n\nA user can also choose not to run Cypress, even if it exists in the repository:\n\nbuildRepo([\n  \"npm\": [\n    \"cypress\": false\n  ]\n])\n\nSupporting Methods\n\nThis is usually much more complex, but I put some code here just to have a complete implementation.\n\nI create a vars/buildRepoNpm.groovy with:\n\ndef call(buildPlan = [:]) {\n  node(buildPlan.jenkinsNode) {\n    stage(\"Install\") {\n      sh \"npm install\"\n    }\n    stage(\"Build\") {\n      sh \"npm run build\"\n    }\n    if (buildPlan.npm.tslint) {\n      stage(\"TSlint\") {\n        sh \"npm run tslint\"\n      }\n    }\n    if (buildPlan.npm.eslint) {\n      stage(\"ESlint\") {\n        sh \"npm run eslint\"\n      }\n    }\n    if (buildPlan.npm.cypress) {\n      stage(\"Cypress\") {\n        sh \"npm run e2e:cypress\"\n      }\n    }\n  }\n}\n\nI create a vars/buildRepoMaven.groovy with:\n\ndef call(buildPlan = [:]) {\n  node(buildPlan.jenkinsNode) {\n    if (buildPlan.maven.integTest) {\n      stage(\"Verify\") {\n        sh \"mvn verify\"\n      }\n    } else {\n      stage(\"Package\") {\n        sh \"mvn package\"\n      }\n    }\n  }\n}\n\nDuplication\n\nThe Jenkinsfile :s are kept extremely small. It is only when they, for some reason, diverge from the default config that they need to be changed.\n\nDocumentation\n\nThere is one single point where documentation is written, the getConfig.groovy -file. It can be referred to whenever someone asks for documentation.\n\nScalability\n\nThis is a highly scalable pattern. Both with regards to performance and maintainability in code.\n\nIt scales in performance because the Jenkinsfile :s can be used by any Jenkins installation. So that you can scale by adding several completely separate Jenkins installations, not only nodes.\n\nIt scales in code because it adds just a tiny Jenkinsfile to repositories. It relies on conventions instead, like the existence of attributes in package.json and location of integration tests in src/integtest.\n\nInstallation Agnostic\n\nThe Jenkinsfile :s does not point at any implementation of this API. It just invokes it and it is up to the Jenkins installation to implement it, with a shared libraries.\n\nIt can even be used by something that is not Jenkins. Perhaps you decide to do something in a Docker container, you can still parse the Jenkinsfile with Groovy or (with some magic) with any language.\n\nFeature Toggling\n\nThe shared library can do feature toggling by:\n\nLetting some feature be enabled by default for every repository with name starting with x.\n\nOr, adding some default config saying\"feature-x-enabled\": false, while some repos change their Jenkinsfile :s to buildRepo([\"feature-x-enabled\": true]).\n\nWhenever the feature feels stable, it can be enabled for everyone by changing only the shared library.","title":"A sustainable pattern with shared library","tags":["pipeline","scalability","sharedlibrary","infrastructure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#98a8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg","srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/77b35/tomasbjerre.jpg 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/d4a57/tomasbjerre.jpg 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/68974/tomasbjerre.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/ef6ff/tomasbjerre.webp 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/8257c/tomasbjerre.webp 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/6766a/tomasbjerre.webp 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/22bfc/tomasbjerre.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://bjurr.com/","github":"tomasbjerre","html":"<div class=\"paragraph\">\n<p>Tomas Bjerre is an experienced fullstack software developer. Been working full time since 2010 after graduating with a masters degree in computer science from Lund University (Faculty of Engineering, LTH). Is currently working full time and maintaining a bunch of Jenkins plugins on his spare time.</p>\n</div>","id":"tomasbjerre","irc":null,"linkedin":"tomasbjerre","name":"Tomas Bjerre","slug":"/blog/authors/tomasbjerre","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":48,"numPages":101,"currentPage":7}},
    "staticQueryHashes": ["3649515864"]}