{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/7",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-11-04T00:00:00.000Z","id":"507874d6-f29d-5e57-82cd-0383757359fc","slug":"/blog/2020/11/04/codeql/","strippedHtml":"A little over a month ago, GitHub announced the general availability of its code scanning solution.\nIt’s based on CodeQL, which makes it pretty easy to write queries for it and run them using the CodeQL GitHub action, CodeQL command line tools, or on lgtm.com.\n\nMany of the security vulnerabilities discovered in Jenkins plugins are fairly similar to each other, and unfortunately they’re usually specific to Jenkins, which means existing generic tools would not be able to discover them.\nSo I decided to write CodeQL queries for Jenkins-specific issues and invited maintainers to sign their plugins up for a \"private beta\" of code scanning for these issues.\n\nToday’s security advisory is the first one that includes findings discovered through that initiative.\nAll these issues were discovered with assistance by this tooling:\n\nSECURITY-2101 in AWS Global Configuration Plugin,\n\nSECURITY-2102 and SECURITY-2103 in Kubernetes Plugin,\n\nSECURITY-2104 and SECURITY-2115 in Mercurial Plugin,\n\nSECURITY-2110 in Azure Key Vault Plugin, and\n\nSECURITY-2126 in Active Directory Plugin\n\nWhile there were of course also false positives we had to review and mark as ignored, the integration with the GitHub UI made this pretty straightforward.\nOverall I’m very happy with the results so far, especially considering how new this initiative is.\n\nInterested in making the plugin you are maintaining more secure?\nSign up now by filing an INFRA issue in the github component and list the plugin repositories you’d like to have scanned.","title":"First results from using GitHub CodeQL to discover security vulnerabilities in Jenkins plugins","tags":["jenkins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2020-10-28T00:00:00.000Z","id":"9b07c9a0-6617-5760-a321-56da263f62d5","slug":"/blog/2020/10/28/election-candidates/","strippedHtml":"Jenkins 2020 Elections are over, thanks to all participants!\nPlease see the results announcement.\n\nAs you probably know, in a few weeks we will have the Jenkins 2020 elections.\nWe will be electing two governance board members and five officers,\nnamely: Security, Events, Release, Infrastructure, and Documentation.\nAfter the announcement on Sep 24,\nwe have been accepting nominations from community members.\n\nAfter the processing and confirmations with potential candidates,\nthe Jenkins 2020 Elections committee is happy to announce the candidates for the Jenkins Governance Board and Officer roles:\n\nGovernance Board candidates: Andrey Falko, Ewelina Wilkosz, Frederic Gurr, Gavin Mogan, Justin Harringa, Mark Waite, Marky Jackson, Steven Terrana, Zhao Xiaojie (Rick)\n\nRelease officer: Baptiste Mathus, Tim Jacomb, Victor Martinez\n\nSecurity officer: Daniel Beck (uncontested)\n\nEvents officer: Marky Jackson (uncontested)\n\nInfrastructure Officer: Olivier Vernin (uncontested)\n\nDocumentation officer: Mark Waite (uncontested)\n\nWe encourage all community members to support the candidates and to participate in the elections!\n\nKey dates\n\nNov 10 - Voting begins. Condorcet Internet Voting Service will be used for voting.\n\nNov 24 - Voting sign-up is over.\n\nNov 27 - Voting ends, 11PM UTC.\n\nDec 03 - Election results are announced and take effect.\n\nSigning up for voting\n\nAny Jenkins individual contributor is eligible to vote in the election\nif there was a contribution made before September 01, 2020.\nContribution does not mean a code contribution,\nall contributions count:\ndocumentation patches,\ncode reviews,\nsubstantial issue reports,\nissues and mailing list responses,\nsocial media posts,\ntesting,\netc.\nSuch a contribution should be public.\n\nYou can register to vote in one of two ways:\n\nFill out this Google Form.\nThis way requires logging into your Google Account to verify authenticity.\n\nSend an email to jenkins-2020-elections@googlegroups.com.\nYou will need to provide the information specified here.\n\nOnce sign-up is over, the election committee will process the form submissions and prepare a list of the registered voters.\nIn the case of rejection, one of the election committee members will send a rejection email.\nEvery individual contributor is expected to vote only once.\n\nCandidates\n\nBelow you can find statements, affiliations and profile links provided by the candidates.\n\nMinimum copy-editing was applied to the content by the Jenkins 2020 Elections Committee.\nCandidates are sorted by the first name.\n\nGovernance Board\n\nAndrey Falko\n\nI have been a Jenkins user and administrator on and off since around 2010.\nIn 2016, I got into evangelism by organizing a\nJenkins Area Meetup in San Francisco.\nI spoke at Jenkins World 2017\nand again at\nJenkins World 2018.\nJustin Harringa and I wrote and open sourced the Config Driven Pipeline Plugin.\nFor two years running, I’ve been a mentor for two Google Summer of Code projects:\nExternal Fingerprint Storage Project and\nRemoting over Apache Kafka with Kubernetes features.\n\nWith this nomination, I hope to continue helping strengthen and\nprogress the community further. As a member of the governance board,\nI’ll bring a fresh perspective by asking questions, providing feedback,\nand finding opportunities for others to contribute.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Stripe\n\nEwelina Wilkosz\n\nAs a consultant I support my customers with their Jenkins issues since the beginning of 2017.\nAnd almost from the start it was some kind of \"as code\" approach.\nThe experience I gained during that time resulted in getting myself involved in the development of Configuration as Code Plugin for Jenkins.\nI consider becoming a part of Jenkins Community one of the most valuable experiences in my career so far.\nI appreciate how much I have learned and how welcoming the community is.\n\nI am not a very active contributor these days, at least when it comes to code, but what I have to offer is rather extensive experience\nwith Jenkins end users - from small, single instance setups to environments with hundreds of controllers run in a different way on different operating systems.\nEvery day I see challenges those users go through, I know what issues they are facing and which features they consider valuable or missing.\nAs a Jenkins Governance Board Member I can represent those users.\n\nThanks to my involvement in Configuration as Code Plugin development\nI had a chance to deliver a number of public presentations\nwhere I focused on the benefits of the solution and tried to make it easier for newcomers to try it.\nHere are a few examples of my activities related to Jenkins Configuration as Code:\nblogpost,\ncdCON presentation,\npodcast recording.\nSo my focus is not only on representing users but also on educating them, and educating myself,\nso I actually know what they need and why.\n\nProfile links:\nGitHub,\nLinkedIn,\nTwitter\n\nAffiliations: Eficode (former Praqma)\n\nFrederic Gurr\n\nI started to use Jenkins back in 2008, when it still had a different name.\nIn 2011 I started to contribute and created my first little plugin called\nextra-columns.\nSince then, using and administering Jenkins servers has become a major part of my work life,\nwhile getting involved with the Jenkins community\nkickstarted my interest and involvement with open source software and communities.\n\nI’ve been working as a release engineer at the Eclipse Foundation since 2016,\nsupporting 250+ Jenkins instances for various open source projects.\nI’d be honored to bring a user and admin oriented perspective to the Governance Board and help\nshape the future of Jenkins.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: Eclipse Foundation\n\nGavin Mogan\n\nI got started with Jenkins early on when I was just getting started with testing.\nI knew there had to be a way to run the tests automatically and report on them back to people.\nI started hacking my own tools before I came across Jenkins (then Hudson) and was hooked ever since.\nOver the years I’ve managed to install and configure Jenkins at various jobs,\nand even was employed making internal and external plugins and integrations.\nYou’ll often find me on the Jenkins IRC and Gitter channels as well as the subreddit giving a hand to people who are stuck.\nI also try to get involved with Jenkins Infrastructure projects as much as I can.\nI currently maintain the plugin site, plugin site API, Jenkins Wiki exporter, and a bunch of other minor projects.\nI also help run Vancouver’s chapter of Nodeschool.\n\nIf elected, I would like to address improving commercial support avenues.\nRight now it’s a lot of people flailing in isolation.\nI would like to not only improve things so people can find easier ways to get help,\nbut also encourage more users to help others, and push for a\ncentralized source of companies providing commercial support.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: Digital Ocean, Nodeschool Vancouver\n\nJustin Harringa\n\nThe nomination is quite an honor for me.\nI have been a Hudson/Jenkins user since around 2009/2010 when\nI started working through driving continuous integration in a corporate environment at John Deere.\nAs time went on, I began contributing some small fixes to plugins such as the Job DSL Plugin, OpenID Plugin, and the Workflow Job Plugin.\nEventually, I ended up helping maintain Salesforce’s Chatter plugin and then open sourcing plugins such as the Config-Driven Pipeline Plugin with Andrey Falko.\nMore recently, I have also had the extreme pleasure of mentoring in 2 Jenkins projects for Google Summer of Code\n(Multi-branch Pipeline support for Gitlab in 2019 and Git Plugin Performance Improvements in 2020).\n\nI have learned so much from working with Jenkins and I would love to give back to the project further.\nHaving introduced Jenkins at both small and large companies,\nI would love to help contribute to the direction of the project through the Roadmap/SIGs/JEPs and encourage others to also contribute / improve Jenkins.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn\n\nAffiliations: Salesforce, Spinnaker SIG for Azure\n\nMark Waite\n\nI’m a Jenkins contributor, a member of the Jenkins core team,\none of the leaders of the Platform Special Interest Group,\nand leader of the Documentation Special Interest Group.\nI’ve served as the Jenkins Documentation Officer since 2019.\nI was a mentor for Google Season of Code 2020 and am one of the maintainers of the Git plugin for Jenkins.\n\nIf elected and allowed to serve on the Jenkins Board, I’ll work to increase community involvement and community development.\nI’m deeply interested in tooling and environments that support the Jenkins project,\nincluding the Jenkins CI environments, issue tracker, artifact repository, and source code repositories.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: CloudBees\n\nMarky Jackson\n\nI have been involved in the Jenkins project for many years.\nI started out as a plugin maintainer, SIG member and general helper.\nI moved to a SIG lead, speakers and Google Summer of Code and Docs org admin and mentor.\nMy current goals are to help continue the work of the public roadmap as well and gain most community members by continuing to be a champion of the community.\n\nFor me, being on the Jenkins Board is another opportunity to improve upon the great work\nwe have all done as well as work toward branching out our efforts to have more women, people of color and LGBTQIA members.\nI would be honored to have this opportunity.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: Equinix Metal, Continuous Delivery Foundation, Kubernetes, Ortelius\n\nSteven Terrana\n\nI have been a Jenkins user since 2017 and contributor since 2018.\nI am the primary maintainer of the Jenkins Templating Engine,\na plugin that allows users to create truly templated Jenkins pipelines that can be shared across teams.\nThrough that work, I’ve had the great pleasure of helping to organize the Pipeline Authoring Special Interest Group,\ncontributing to the Jenkins Pipeline documentation, and contributing bug fixes to various plugins\n(including the pipeline plugin and workflow-cps library).\n\nAs a Continuous Delivery Foundation Ambassador,\nI’ve enjoyed doing what I can to advance the community’s approach to CI/CD and simplifying DevSecOps adoption within large organizations.\nIt would be a privilege to serve on the Jenkins Governance Board and offer my support wherever I can.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Booz Allen Hamilton, Continuous Delivery Foundation\n\nZhao Xiaojie (Rick)\n\nThree years ago I joined the Jenkins community.\nI learned a lot during the process of contributing.\nI even became a Jenkins hero in my city.\nThe most exciting thing I want to do is help more new users of Jenkins get started, and let more contributors feel comfortable.\nI always love to host a JAM no matter if it’s online or offline.\n\nPlans: improve the experience of using Jenkins in different\ncountries; reorganize the knowledge of Jenkins, for example the tutorial\nby text or video format; help other SIG leaders to organize meetings.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: N/A\n\nRelease Officer\n\nBaptiste Mathus\n\nI have been using and contributing to Jenkins for so long that it is difficult for me to check when it started exactly.\nMy first pull-request to Jenkins was in 2011 and I had started to use it long before it.\nThroughout the years, I have contributed to various areas:\ncreated our local Jenkins Area Meetup with Michaël Pailloncy,\nhelped users and developers on our mailing lists and IRC channels,\ncontributed to the Jenkins infrastructure, the website,\nprocessing plugins hosting requests, worked full time on Jenkins Evergreen,\nand I am still present today.\n\nFor all these reasons, it would be an honor to serve as the Release Officer for the Jenkins Project.\n\nProfile links:\nGitHub,\nTwitter,\nJenkins Blog\n\nAffiliations: CloudBees\n\nTim Jacomb\n\nI have been a user of Jenkins for the last 8 years and a regular contributor since 2018.\nI began with maintaining the Slack plugin and over the last couple of years I have since expanded that to many more plugins and the Jenkins core.\nThese are some of the components I maintain when I have time: Slack, Azure Key Vault, Junit,\nmost of the Database plugins, Dark theme, Plugin installation manager, Jenkins Helm chart, Configuration as code plugin.\nI am also a member of the Jenkins infrastructure team,\nand I was involved in the release automation project and the mirrors modernisation effort,\nalong with the day to day support helping people regain access to accounts etc.\n\nAs a Release Officer I would like to increase automation,\nease onboarding of new contributors to the release team, and ensure that\nresponsibilities rotate among people so that I wouldn’t be a bottleneck for any task.\n\nProfile links:\nGitHub,\nJenkins Blog\n\nAffiliations: Kainos\n\nVictor Martinez\n\nI have been involved in the Jenkins project since 2011 by different means, as a user, as an administrator, as a contributor\n(bug reporting, plugin development, documentation, hackfest),\nbeing active in the different Jenkins forums such as the Jenkins-dev and Jenkins-user mailing lists,\nworking with the jenkins-infra shared library and so on.\nI’m also an advocate for the Jenkins project through some presentations anytime that I had the opportunity such as\nDevOps World 2020 and\nJenkins World 2017.\n\nI’ve been happily nominated for the Release officer role which matches not just my area of professional expertise that\nI’ve been doing for the last 14 years in different roles for different companies but also that’s an area of personal interest\nwhere I’d like to spend time with the Jenkins community to understand, document and automate the process\nin a way we can keep the project sustainable for a long term as it’s today,\nit’s not just about what I can bring for the community but also about growing together.\n\nIf elected as a Release officer I would aim to focus on the following areas:\nproceed with the existing responsibilities for this role;\ndocument and automate the release process;\nbeing an enabler for the Continuous Delivery not just for the plugins but also for the core.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Elastic\n\nSecurity Officer - uncontested\n\nDaniel Beck\n\nI’ve been a Jenkins user since 2011, contributor since 2013, and core maintainer since 2014.\nIn 2015, I took on the scheduling and authoring of security advisories and have been doing that ever since,\nworking with reporters, maintainers, and the Jenkins security team to deliver security fixes.\nBeyond that, I regularly contribute to Jenkins and project infrastructure.\n\nSince I’ve started in the Security Officer role, we’ve made significant\nimprovements:\nPlugins no longer allow ordinary users to run arbitrary scripts (no sandbox!) as a regular feature. I introduced fine-grained permission management\nfor our GitHub repositories and\nthe Maven repository hosting our releases.\nWarnings directly in Jenkins inform admins when an installed component has known security issues (and their UX was improved earlier this year).\nThe Jenkins project is now a CVE Numbers Authority,\nto ensure timely and high-quality information in the CVE vulnerability database.\nWorking with Tyler, I added telemetry to Jenkins,\nwhich allowed us to deliver multiple large-scale security fixes with\nminimal impact.\nMore recently, I’ve started writing code scanning rules for common problems in Jenkins and\ninvited maintainers to sign their plugins up,\nwhich is something I hope to properly publish and roll out more widely soon.\n\nProfile links:\nGitHub\nJenkins Blog\n\nAffiliations: CloudBees\n\nEvents Officer - uncontested\n\nMarky Jackson\n\nI have been a part of the Jenkins community for some time, and I have received the utmost joy in volunteering.\nI have been extremely fortunate to have played a lead role in the Outreach & Advocacy SIG, the pipeline-Authoring SIG,\nand, most recently, the Cloud-Native SIG.\nI have taken part in many meetups, org admin, and mentor in the GSoC & GSoD.\nFinally, At DevOps World 2020, I received Jenkins most valuable advocate at DevOps World.\nI have experience advocating in other communities as well:\nKubernetes Release Manager Associate, Kubernetes Mentoring Lead, Ortelius Community Manager.\n\nJenkins is the most widely used Continuous Integration tool around,\nand I want to continue to promote that by focusing on the following areas: meetups; conference presentation from the Jenkins community;\nnew user outreach and onboarding; cross-community collaboration (e.g., Kubernetes community);\nworking with the Continuous Delivery Foundation on interoperability; focusing on SIG events.\n\nMy roots are open-source, and I am so proud to be a part of the Jenkins community.\nYou can read more about my journey in open-source here.\nYou can also see some of my presentations here and\nhere.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: OpsMx, Continuous Delivery Foundation, Kubernetes, Ortelius, Spinnaker\n\nInfrastructure Officer - uncontested\n\nOlivier Vernin\n\nI have been actively contributing to the Jenkins project for the past four years with contributions across many areas,\nand infrastructure is one of my favorite topics.\nOver my previous mandate as a Jenkins infrastructure officer, I focused on improving contribution experience,\nand let community members opportunities to take ownership of the different services.\nI worked on various sponsoring initiatives to make the Jenkins infrastructure more sustainable.\nWe provided a new environment for releasing Jenkins core (and one plugin!), and also many more things.\n\nFor the coming year, It is hard to make commitments on what it will look like as we have things we know,\nlike services that need some attention (“ci.jenkins.io/) and the things we don’t know yet.\nAnyway, It’s important to me to have a transparent project where everybody could read, learn, participate,\nand understand how the Jenkins project manages infrastructure and I want to continue down that path.\n\nProfile links:\nGitHub,\nTwitter,\nJenkins Blog\n\nAffiliations: CloudBees\n\nDocumentation Officer - uncontested\n\nMark Waite\n\nI’m a Jenkins contributor, a member of the Jenkins core team, one of the leaders of the Platform Special Interest Group,\nand leader of the Documentation Special Interest Group.\nI’ve served as the Jenkins Documentation Officer since 2019.\nI was a mentor for Google Season of Code 2020 and am one of the maintainers of the Git plugin for Jenkins.\n\nIf elected and allowed to serve as Documentation Officer,\nI’ll continue efforts to invite more contributors through regular Documentation Office Hours and outreach programs like Google Season of Docs, CommunityBridge, Outreachy, and Jenkins Hackfests.\nI’ll work to assure an inviting and welcoming environment for contributors.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: CloudBees\n\nMore information\n\nJenkins 2020 elections announcement\n\nJenkins Governance Board and Jenkins Officers\n\nJenkins Board and Officer Election Process\n\n2019 election results\n\nElections coordination in the mailing list","title":"2020 Elections: Governance Board and Officer candidates","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-10-21T00:00:00.000Z","id":"7c9b1586-7a87-5fd5-8543-1a27aa94a68f","slug":"/blog/2020/10/21/a-sustainable-pattern-with-shared-library/","strippedHtml":"Table of Contents\n\nContext\nThe Problems\nThe Solution\n\nShared Library\nDuplication\nDocumentation\nScalability\nInstallation Agnostic\nFeature Toggling\n\nThis post will describe how I use a shared library in Jenkins. Typically when using multibranch pipeline.\n\nIf possible (if not forced to) I implement the pipelines without multibranch. I previously wrote about how I do that with my Generic Webhook Trigger Plugin in a previous post. But this will be my second choice, If I am not allowed to remove the Jenkinsfile :s from the repositories entirely.\n\nContext\n\nWithin an organization, you typically have a few different kinds of repositories. Each repository versioning one application. You may use different techniques for different kinds of applications. The Jenkins organization on GitHub is an example with 2300 repositories.\n\nThe Problems\n\nLarge Jenkinsfiles in every repository containing duplicated code. It seems common that the Jenkinsfile :s in every repository contains much more than just the things that are unique for that repository. The shared libraries feature may not be used, or it is used but not with an optimal pattern.\n\nInstallation specific Jenkinsfile:s that only work with one specific Jenkins installation. Sometimes I see multiple Jenkinsfile :s, one for each purpose or Jenkins installation.\n\nNo documentation and/or no natural place to write documentation.\n\nDevelopment is slow. Adding new features to repositories is a time consuming task. I want to be able to push features to 1000+ repositories without having to update their Jenkinsfile :s.\n\nNo flexible way of doing feature toggling. When maintaining a large number of repositories it is sometimes nice to introduce a feature to a subset of those repositories. If that works well, the feature is introduced to all repositories.\n\nThe Solution\n\nMy solution is a pattern that is inspired by how the Jenkins organization on GitHub does it with its buildPlugin(). But it is not exactly the same.\n\nShared Library\n\nHere is how I organize my shared libraries.\n\nJenkinsfile\n\nI put this in the Jenkinsfile :s:\n\nbuildRepo()\n\nDefault Configuration\n\nI provide a default configuration that any repository will get, if no other configuration is given in buildRepo().\n\nI create a vars/getConfig.groovy with:\n\ndef call(givenConfig = [:]) {\n  def defaultConfig = [\n    /**\n      * The Jenkins node, or label, that will be allocated for this build.\n      */\n    \"jenkinsNode\": \"BUILD\",\n    /**\n      * All config specific to NPM repo type.\n      */\n    \"npm\": [\n      /**\n        * Whether or not to run Cypress tests, if there are any.\n        */\n      \"cypress\": true\n    ],\n    \"maven\": [\n      /**\n        * Whether or not to run integration tests, if there are any.\n        */\n      \"integTest\": true\n    ]\n  ]\n  // https://e.printstacktrace.blog/how-to-merge-two-maps-in-groovy/\n  def effectiveConfig merge(defaultConfig, givenConfig)\n  println \"Configuration is documented here: https://whereverYouHos/getConfig.groovy\"\n  println \"Default config: \" + defaultConfig\n  println \"Given config: \" + givenConfig\n  println \"Effective config: \" + effectiveConfig\n  return effectiveConfig\n}\n\nBuild Plan\n\nI construct a build plan as early as possible. Taking decisions on what will be done in this build. So that the rest of the code becomes more streamlined.\n\nI try to rely as much as possible on conventions. I may provide configuration that lets users turn off features, but they are otherwise turned on if they are detected.\n\nI create a vars/getBuildPlan.groovy with:\n\ndef call(effectiveConfig = [:]) {\n  def derivedBuildPlan = [\n    \"repoType\": \"NOT DETECTED\"\n    \"npm\": [],\n    \"maven\": []\n  ]\n\n  node {\n    deleteDir()\n    checkout([$class: 'GitSCM',\n      branches: [[name: '*/branchName']],\n      extensions: [\n          [$class: 'SparseCheckoutPaths',\n            sparseCheckoutPaths:\n            [[$class:'SparseCheckoutPath', path:'package.json,pom.xml']]\n          ]\n      ],\n      userRemoteConfigs: [[credentialsId: 'someID',\n      url: 'git@link.git']]\n    ])\n\n    if (fileExists('package.json')) {\n      def packageJSON = readJSON file: 'package.json'\n      derivedBuildPlan.repoType = \"NPM\"\n      derivedBuildPlan.npm.cypress = effectiveConfig.npm.cypress && packageJSON.devDependencies.cypress\n      derivedBuildPlan.npm.eslint = packageJSON.devDependencies.eslint\n      derivedBuildPlan.npm.tslint = packageJSON.devDependencies.tslint\n    } else if (fileExists('pom.xml')) {\n      derivedBuildPlan.repoType = \"MAVEN\"\n      derivedBuildPlan.maven.integTest = effectiveConfig.maven.integTest && fileExists('src/integtest')\n    } else {\n      throw RuntimeException('Unable to detect repoType')\n    }\n\n    println \"Build plan: \" + derivedBuildPlan\n    deleteDir()\n  }\n  return derivedBuildPlan\n}\n\nPublic API\n\nThis is the public API, this is what I want the users of this library to actually invoke.\n\nI implement a buildRepo() method that will use that default configuration. It can also be called with a subset of the default configuration to tweak it.\n\nI create a vars/buildRepo.groovy with:\n\ndef call(givenConfig = [:]) {\n  def effectiveConfig = getConfig(givenConfig)\n  def buildPlan = getBuildPlan(effectiveConfig)\n\n  if (effectiveConfig.repoType == 'MAVEN')\n    buildRepoMaven(buildPlan);\n  } else if (effectiveConfig.repoType == 'NPM')\n    buildRepoNpm(buildPlan);\n  }\n}\n\nA user can get all the default behavior with:\n\nbuildRepo()\n\nA user can also choose not to run Cypress, even if it exists in the repository:\n\nbuildRepo([\n  \"npm\": [\n    \"cypress\": false\n  ]\n])\n\nSupporting Methods\n\nThis is usually much more complex, but I put some code here just to have a complete implementation.\n\nI create a vars/buildRepoNpm.groovy with:\n\ndef call(buildPlan = [:]) {\n  node(buildPlan.jenkinsNode) {\n    stage(\"Install\") {\n      sh \"npm install\"\n    }\n    stage(\"Build\") {\n      sh \"npm run build\"\n    }\n    if (buildPlan.npm.tslint) {\n      stage(\"TSlint\") {\n        sh \"npm run tslint\"\n      }\n    }\n    if (buildPlan.npm.eslint) {\n      stage(\"ESlint\") {\n        sh \"npm run eslint\"\n      }\n    }\n    if (buildPlan.npm.cypress) {\n      stage(\"Cypress\") {\n        sh \"npm run e2e:cypress\"\n      }\n    }\n  }\n}\n\nI create a vars/buildRepoMaven.groovy with:\n\ndef call(buildPlan = [:]) {\n  node(buildPlan.jenkinsNode) {\n    if (buildPlan.maven.integTest) {\n      stage(\"Verify\") {\n        sh \"mvn verify\"\n      }\n    } else {\n      stage(\"Package\") {\n        sh \"mvn package\"\n      }\n    }\n  }\n}\n\nDuplication\n\nThe Jenkinsfile :s are kept extremely small. It is only when they, for some reason, diverge from the default config that they need to be changed.\n\nDocumentation\n\nThere is one single point where documentation is written, the getConfig.groovy -file. It can be referred to whenever someone asks for documentation.\n\nScalability\n\nThis is a highly scalable pattern. Both with regards to performance and maintainability in code.\n\nIt scales in performance because the Jenkinsfile :s can be used by any Jenkins installation. So that you can scale by adding several completely separate Jenkins installations, not only nodes.\n\nIt scales in code because it adds just a tiny Jenkinsfile to repositories. It relies on conventions instead, like the existence of attributes in package.json and location of integration tests in src/integtest.\n\nInstallation Agnostic\n\nThe Jenkinsfile :s does not point at any implementation of this API. It just invokes it and it is up to the Jenkins installation to implement it, with a shared libraries.\n\nIt can even be used by something that is not Jenkins. Perhaps you decide to do something in a Docker container, you can still parse the Jenkinsfile with Groovy or (with some magic) with any language.\n\nFeature Toggling\n\nThe shared library can do feature toggling by:\n\nLetting some feature be enabled by default for every repository with name starting with x.\n\nOr, adding some default config saying\"feature-x-enabled\": false, while some repos change their Jenkinsfile :s to buildRepo([\"feature-x-enabled\": true]).\n\nWhenever the feature feels stable, it can be enabled for everyone by changing only the shared library.","title":"A sustainable pattern with shared library","tags":["pipeline","scalability","sharedlibrary","infrastructure"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#98a8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg","srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/77b35/tomasbjerre.jpg 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/d4a57/tomasbjerre.jpg 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/19e71/tomasbjerre.jpg 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/68974/tomasbjerre.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/ef6ff/tomasbjerre.webp 32w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/8257c/tomasbjerre.webp 64w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/6766a/tomasbjerre.webp 128w,\n/gatsby-jenkins-io/static/b56c7aed67e544184e7807e4f2d189f6/22bfc/tomasbjerre.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://bjurr.com/","github":"tomasbjerre","html":"<div class=\"paragraph\">\n<p>Tomas Bjerre is an experienced fullstack software developer. Been working full time since 2010 after graduating with a masters degree in computer science from Lund University (Faculty of Engineering, LTH). Is currently working full time and maintaining a bunch of Jenkins plugins on his spare time.</p>\n</div>","id":"tomasbjerre","irc":null,"linkedin":"tomasbjerre","name":"Tomas Bjerre","slug":"/blog/authors/tomasbjerre","twitter":null}]}},{"node":{"date":"2020-10-20T00:00:00.000Z","id":"2f05be94-85ad-5b81-b393-4fd50549545d","slug":"/blog/2020/10/20/Cross-Industry-DevOps-3-Firms-Get-It-Right-with-Jenkins/","strippedHtml":"Some months ago, we took a significant step in helping the Jenkins community share their stories of how they improved workflows, sped up testing, and saw better quality results after implementing Jenkins into their software development processes.\n\nBy the end of the year, we’ll have over 50 Jenkins user stories published with many more in the pipeline. We invite you to explore them all but wanted to share three inspiring examples highlighting how various organizations approach — and implement — Jenkins in the workplace. Enjoy!\n\nStory 1: Jenkins is the way to tackle any challenge\n\nEnterprise-wide CI/CD solution caters to the complex problems that project teams face each day, as told by Jenkins user Mark Baumann:\n\n“Our development teams work in a wide range of projects and domains. We have a very diverse tooling landscape since the projects work with all kinds of different software tools. Of course, projects in the embedded domain will have different toolsets than those working in the automotive domain.\n\nEach project team created its own CI Toolchain, which caused a lot of work for the developers and the IT department. Each project needed to set up their own virtual machine, install and manage their own CI Server, Version Management, and whatever they needed. Creating such a toolchain could easily take up weeks until it was running because there was no standard solution and each team had to start from scratch.”\n\nDiscover how ITK-Engineering GmbH developed a company-wide, common, internal CI/CD toolchain and increased the number of builds for each project and how nearly all departments are now practicing CI/CD. The full Jenkins / ITK Engineering story is here!\n\nStory 2: Jenkins is the way to add spicy flavors to agency processes\n\nA creative agency start-up simplifies the build, test, and deploy steps, allowing the small team to focus more on the deliverables and less on the process. As told by Jenkins user Erik Woitschig:\n\n“It was quite a challenge to streamline and combine all the services to build an artifact to deploy. Because of our micro service-oriented and distributed architecture, the most challenging part of rethinking our build, test, and deploy process was to figure out how best to sync the deployment of all services. We also had to retest builds properly to go live or initiate a rollback.\n\nWith Jenkins and some pipelines, it was relatively simple to create a local and distributed artifact of our application to quickly share and deploy across the team, locally and globally.”\n\nBecause Jenkins is simple to install and easy to maintain, Muzkat has increased productivity far beyond that of a 3-person team. Read on to learn how this bootstrapped Berlin-based agency is making a go of it with Jenkins. The full Jenkins / Muzkat story is here!\n\nStory 3: Jenkins is the way to focus on your code\n\nAs demands for the Wright Medical’s services grew, they required an agile DevOps environment that would grow and scale along with the tech team, as told by Jenkins user Christophe Carpentier:\n\n“What was critical to our success was the stability of Jenkins and a significant number of reliable plugins! We could take a few plugins, set up our workflow, and add GitLab and SonarQube integration without ever stopping or losing data in over a year. We found that all of the problems we encountered were our own, and that is why it was critical to make Jenkins an essential part of our workflow.\n\nWith this implementation, Jenkins allows more than would be manually possible. It flawlessly updates our staging environments, blocks commits based on the SonarQube analysis, and provides us with near-instant feedback on merge requests.”\n\nLearn how Wright Medical supports a growing dev team by switching to an agile DevOps process that allows for automatic daily releases — versus weekly manual builds. Best of all, it’s letting the developers focus on building great code rather than infrastructure. The full Jenkins / Wright Medical story is here!\n\nWhat are you building?\n\nHope you enjoy these Jenkins user stories. You’ll find that “Jenkins Is The Way” website is a global showcase of how developers and engineers build, deploy, and automate great stuff with Jenkins. If you want to share your story, we’ll send you a free Jenkins Is The Way T-Shirt in return. Hope to hear from you soon!","title":"Cross-Industry DevOps: 3 Firms Get It Right with Jenkins","tags":["jenkinsistheway","Jenkinsuserstories"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2020-09-25T00:00:00.000Z","id":"0691e7e4-2e97-54ec-ab3c-e0f175b8a679","slug":"/blog/2020/09/25/document-jenkins-on-kubernetes-introduction/","strippedHtml":"I’m thrilled to announce that I will be participating in Google Season of Docs (GSoD)\n2020 with the Jenkins project. I started contributing to Jenkins documentation during the technical writer\nexploration phase for Google Season of Docs 2020 and I must say, my journey so far\nhas been nothing short of amazing majorly because of the supportive community behind this project.\nI chose the Jenkins project because I understood this project from a user point of view as I had been exposed to setting up, configuring,\nand using Jenkins to automate CI/CD processes. I piqued interest in two of Jenkins project ideas,\nPlugin documentation migration and update and Document Jenkins on Kubernetes, submitted proposals for these two projects and to my utmost joy, the latter was selected.\n\nIn this article, I’m going to be explaining what my selected project is about and why this project is important to the Jenkins community and its users.\n\nIntroduction\n\nKubernetes is a platform-agnostic container orchestration tool created by Google and heavily supported\nby the open-source community as a project of the Cloud Native Computing Foundation.\nIt allows you to use container instances and manage them for scaling and fault tolerance.\nIt also handles a wide range of management activities that would otherwise require separate solutions or custom code,\nincluding request routing, container discovery, health checks, and rolling updates.\n\nKubernetes is compatible with the majority of CI/CD tools which allow developers to run tests,\ndeploy builds in Kubernetes and update applications with no downtime.\nOne of the most popular CI/CD tools now is Jenkins for the following reasons:\n\nIt is open-source and free.\n\nit is user-friendly, easy to install and does not require additional installations or components.\n\nJenkins is also quite easy to configure, modify and extend.\n\nIt deploys code and generates test reports.\n\nIt also boasts a rich plugin ecosystem. The extensive pool of plugins makes Jenkins flexible and allows building, deploying and automating across various platforms.\n\nJenkins can be configured according to the requirements for continuous integrations and continuous delivery.\n\nJenkins is available for all platforms and different operating systems, whether it is OS X, Windows or Linux.\n\nMost of the integration work is automated. Hence fewer integration issues. This saves both time and money over the lifespan of a project.\n\nThe following reasons have made Jenkins on Kubernetes a popular theme for Jenkins users, however,\nthere’s currently no central location for documentation describing Jenkins on Kubernetes,\nthereby making it difficult for Jenkins on Kubernetes users to navigate and find information.\nThis project would create a new Kubernetes Volume on Jenkins.io which would describe the concepts,\ntechniques, and choices for Kubernetes users running Jenkins.\n\nCurrent State\n\nThere are a lot of presentations and articles about running Jenkins on Kubernetes, however,\nthere’s no central location for describing Jenkins on Kubernetes. This makes it difficult for:\n\nJenkins on Kubernetes users to navigate and find information\n\nTrack, update and maintain information on Jenkins on Kubernetes\n\nProject Improvements\n\nTo solve the existing issue with Jenkins on Kubernetes documentation,\na new Kubernetes volume will be created on Jenkins.io.\nThis Volume is going to aggregate user guides, information on cloud providers and demos on Jenkins on Kubernetes.\nYou can find the proposed contents for the new volume here.\nFeel free to comment on any suggestions you might have in the proposed content doc.\n\nThis project will also provide the following advantages:\n\nImprove the user experience of Jenkins on Kubernetes users by giving them a one-stop-shop for information on Jenkins on Kubernetes.\n\nMake it easy to track, update and maintain information on Jenkins on Kubernetes using the Solutions page\n\nReference the existing community documentation for Jenkins on K8s (plugins and tools/integrations).\n\nHow to guides, tutorials and explanations of concepts and techniques in Jenkins on Kubernetes.\n\nJust-In-Time documentation which means that rather than documenting every feature comprehensively,\nwe will produce and release documentation in bits but continuously based on popular questions,\nfeedback and area of interests gathered from the community and users.\n\nProject Timeline\n\nFind below a summary of the project timeline.\n\nCommunity bonding ( August 17 - September 13 )\n\nSet up a communication channel and time (due to time difference).\n\nRefine my goals and set expectations on both sides.\n\nLearn more about the community and Jenkins.\n\nGather and thoroughly study existing resources that will be useful and helpful to the project.\n\nPre-planning of the project\n\nContacting Stakeholders and onboarding contributors\n\nDocumentation Period\n\nThis period is going to be focused on creating contents which include user guides,\ntutorials, demos, etc. for Jenkins on Kubernetes.\nSome of the topics to be covered include Installing Jenkins on Kubernetes,\nAdministering Jenkins on Kubernetes, Cloud providers and much more.\n\nDocumentation Timeline\n\n1st Month (September - October)\n\nSome basic prerequisites for installing jenkins on kubernetes include docker, a kubernetes cluster, and optionally Helm or the Jenkins Operator for Kubernetes.\n\nHelm is a package manager which automates the process of installing, configuring, upgrading, and removing complex Kubernetes application. A Helm chart defines several Kubernetes resources as a set. Helm can make deployments easier and repeatable because all resources for an application are deployed by running one command.\n\nHelm has two elements, a client (helm) and a server (Tiller). The server element runs inside a Kubernetes cluster and manages the installation of charts. With Helm, configuration settings are kept in values.yaml file separate from the manifest formats. The configuration values can be changed according to application need without touching the rest of the manifest.\n\nOn the other hand, the Jenkins operator is a Kubernetes native operator which fully manages Jenkins on Kubernetes. It is easy to install with just a few manifests and allows users to configure and manage Jenkins on Kubernetes. To run jenkins-operator, you need to have a running Kubernetes cluster and kubectl installed.\n\nThe Jenkins Operator provides out of the box:\n\nIntegration with Kubernetes — preconfigured kubernetes-plugin for provisioning dynamic Jenkins Slaves as Pods\n\nPipelines as Code — declarative way to version your pipelines in VCS\n\nExtensibility via Groovy scripts or Configuration as Code plugin-customize your Jenkins, configure OAuth authorization and more\n\nSecurity and Hardening — an initial security hardening of Jenkins instance via Groovy scripts to prevent security vulnerabilities\n\nIn the first month, the focus will be on documenting an introductory section.\nThis section will include but is not limited to Setting up Kubernetes cluster, Installing Jenkins on Kubernetes, exploring the various approaches by which this can be achieved such as using helm package manager or the Jenkins Operator as explained above and Administering Jenkins on Kubernetes.\n\n2nd Month (October - November)\n\nIn the second month, the focus will be on documenting how to setup up CI/CD pipelines using Jenkins and Kubernetes on different cloud providers.\nSome of the cloud providers we will be looking at include but are not limited to:\n\nAmazon Web Service (AWS)\n\nAzure Kubernetes Service\n\nGoogle Cloud\n\n3rd Month (November - December)\n\nIn the final month, the focus will be on creating demos and tutorials,\nsubmitting project report, evaluation of mentors and finally,\npublishing a report of my experience as a participant in Season of Docs.\n\nConclusion\n\nJenkins community is actively working towards improving its documentation to create a better\nexperience for Jenkins users and invites technical writers to join the community and contribute to the Jenkins on Kubernetes project.\n\nTo contribute to the Jenkins on Kubernetes project, simply join the Jenkins documentation Gitter channel and drop a message,\nyou can also find the Google season of docs office hour notes and recordings for Jenkins on Kubernetes here.\nGSOD office hours take place twice a week on Mondays and Thursdays between 6pm GMT+1 and 7pm GMT+1,\nif you would like to be part of these meetings, you can indicate interest in the Jenkins Documentation\nGitter channel and we would be happy to have you.\n\nIf you are also a newcomer and would like to contribute to Jenkins, documentation is a great place to contribute.\nA lot of small patches can be done from the GitHub web interface even without cloning repositories locally.\nYou can find some good first issues to get started with here.\n\nFind more information on contributing to Jenkins documentation here.\nIf you have further questions about the Jenkins on Kubernetes project or contributing to Jenkins,\nyou can reach out on the Jenkins documentation Gitter channel.\n\nAdditional Resources\n\nGSoD Proposal\n\nGSoD Office Hours Notes\n\nGoogle Season of Docs - Startup\n\nGoogle Season of Docs on jenkins.io\n\nDocs SIG for Google Season of Docs startup ( video)","title":"Documenting Jenkins on Kubernetes Introduction","tags":["kubernetes","documentation","gsod","gsod2020"],"authors":[{"avatar":null,"blog":null,"github":"zaycodes","html":"<div class=\"paragraph\">\n<p>Zainab is a software developer and technical writer who is passionate about contributing to open source, improving technical documentation and advocating for gender diversity in open source collaboration. She started contributing to Jenkins documentation during the technical writer exploration phase for <a href=\"https://developers.google.com/season-of-docs\">Google Season of Docs</a> 2020, and is currently working on <a href=\"/sigs/docs/#jenkins-on-kubernetes\">Documentation for Jenkins on Kubernetes</a>.</p>\n</div>","id":"zaycodes","irc":null,"linkedin":"zaycodes","name":"Zainab Abubakar","slug":"/blog/authors/zaycodes","twitter":"zaycodes"}]}},{"node":{"date":"2020-09-24T00:00:00.000Z","id":"ce6df408-6cd5-5276-88d1-f05a7d26b213","slug":"/blog/2020/09/24/board-elections/","strippedHtml":"Jenkins 2020 Elections are over, thanks to all participants!\nPlease see the results announcement.\n\nWe are happy to announce the 2020 elections in the Jenkins project!\nNominations are open for two governance board and for all five officer positions,\nnamely: Security, Events, Release, Infrastructure, and Documentation.\nThe board positions and officer roles are an essential part of Jenkins' community governance and well-being.\nWe invite Jenkins contributors and community members to sign-up for elections and to nominate contributors for the elected roles.\nDeadline for nominations is Oct 15, voter registration ends on Nov 02.\n\nThese are the second elections held by the Jenkins project.\nDuring the 2019 elections, we elected 3 board members and 5 officers.\nYou can find the voting results here.\nThis year, we decided to make a few changes in the election process based on the 2019 elections feedback.\n\nKey dates\n\nSep 24 - Nominations open, voting sign-up begins.\n\nOct 15 - Board and officer nominations deadline.\n\nOct 26 (or later) - List of candidates is published, including personal statements.\n\nNov 10 - Voting begins. Condorcet Internet Voting Service will be used for voting.\n\nNov 24 - Voting sign-up is over.\n\nNov 27 - Voting ends, 11PM UTC.\n\nDec 03 - Election results are announced and take effect.\n\nSigning up for voting\n\nAny Jenkins individual contributor is eligible to vote in the election\nif there was a contribution made before September 01, 2020.\nContribution does not mean a code contribution,\nall contributions count:\ndocumentation patches,\ncode reviews,\nsubstantial issue reports,\nissues and mailing list responses,\nsocial media posts,\ntesting,\netc.\nSuch a contribution should be public.\n\nYou can register to vote in one of two ways:\n\nFill out this Google Form.\nThis way requires logging into your Google Account to verify authenticity.\n\nSend an email to jenkins-2020-elections@googlegroups.com.\nYou will need to provide the information specified here.\n\nDuring the registration period, the election committee will process the form submissions and prepare a list of the registered voters.\nIn the case of rejection, one of the election committee members will send a rejection email.\nEvery individual contributor is expected to vote only once.\n\nDeadline for the voter registration is November 24.\n\nNominating contributors\n\nSuggestions from the community members are highly valued,\nand the board welcomes additional nominations.\nIf you feel that a particular person is well suited to help guide Jenkins, please submit a name and the reason for your nomination to jenkinsci-board@googlegroups.com.\nSelf nominations are also welcome.\n\nDeadline for nominations is October 15.\n\nTerms\n\nThe terms of office for these elected positions are:\n\nOfficer positions (1 year): December 03, 2020 to December 2, 2021\n\nGoverning board member (2 years): December 03, 2020 to December 2, 2022\n\nElections committee\n\nThe 2020 elections are coordinated by the Jenkins Governance Board members who are not up for re-election this year:\nAlex Earl,\nUllrich Hafner, and\nOleg Nenashev.\nThese contributors are responsible for managing the process,\npreparing the nominee list for elections,\nforming and verifying the voter list,\nprocessing the votes,\nand announcing the results.\n\nYou can contact the election committee via jenkins-2020-elections@googlegroups.com.\nPlease use this email for any queries and feedback regarding the elections.\n\nReferences\n\nJenkins Governance Board and Jenkins Officers\n\nJenkins Board and Officer Election Process\n\n2019 election results\n\nElections coordination in the mailing list","title":"2020 Jenkins Board and Officer elections. Nominations and voter registration are open!","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-09-19T00:00:00.000Z","id":"1be8a810-e566-5f46-aae8-affa7e1b8407","slug":"/blog/2020/09/19/jenkins-at-devops-world-2020/","strippedHtml":"The annual DevOps World, formerly known as DevOps World | Jenkins World is next week - Sept 22-24, with workshops on Sept 25. Just like other events this year, DevOps World pivoted to a virtual event but that doesn’t mean there is a shortage of sessions or networking opportunities. There will be over 50 Jenkins/open source sessions and opportunities to virtually connect with over 20,000+ attendees on the event platform. Below are just a few sessions, the full agenda can be found HERE :\n\nJenkins: Where It Is and Where It is Going\n\nDate: Tuesday, September 22, 7:00 a.m.-7:30 a.m (PDT)\n\nSpeaker: Oleg Nenashev\n\nJenkins keeps evolving to address demands from its users and contributors: configuration as code, better support of cloud-native technologies, etc. Recently, we have introduced a public roadmap for the project, and there are many key initiatives in development and preview phases. This session will cover the current state of Jenkins and what’s next for the project.\n\nManaging DevSecOps Pipelines at Scale with Jenkins Templating Engine\n\nDate: Tuesday, September 22, 11:30 a.m.-12:00 p.m. (PDT)\n\nSpeaker: Steven Terrana\n\nAre you currently helping build or maintain a Jenkins pipeline for more than one application or team? Are you tired of copying and pasting Jenkinsfiles and tweaking them to fit each team’s specific needs? This session will feature a live demonstration of getting up and running with the Jenkins Templating Engine (JTE). Attendees will learn how to stop creating bespoke pipelines on a per-application basis and, instead, create tool-agnostic pipeline templates that multiple teams can inherit - regardless of tech stack.\n\neBay’s Journey Building CI at Scale\n\nDate: Tuesday, September 22, 12:30 p.m.-1:00 p.m.(PDT)\n\nSpeakers: Ravi Kiran Rao Bukka & Vasumathy Seenuvasan\n\nA scalable CI platform with 6,000+ Jenkins instances serving around 43,000 builds per day on multi-cluster Kubernetes. A system built with metrics, key resource tuning, remediation’s and security in place. Join this session to hear from eBay on their journey of best practices and learnings about open source.\n\nMachine Learning Plugins for Data Science in Jenkins\n\nDate: Wednesday, September 23, 11:00 a.m.-11:15 a.m.(PDT)\n\nSpeaker: Loghi Perinpanayagam\n\nMachine Learning has evolved rapidly in the software industry for recent years. Jenkins CI/CD can be a good practice to deliver a high reliable product in the end. We have done an initial startup on this plugin that can be used to build Jupyter Notebooks, Python files and JSON files in Zeppelin format. In addition, the build wrappers could be used to convert Jupyter Notebooks to Python/JSON and/or copy the files to the workspace for more actions.  This Machine Learning plugin will endeavor to satisfy the data science community together with the help of other plugins. Success of this plugin will definitely serve much benefits to the community and Jenkins.\n\nJenkins UI Gets a Makeover\n\nDate: Thursday, September 24, 7:30 a.m.-8:00 a.m.(PDT)\n\nSpeakers: Felix Queiruga & Jeremy Hartley\n\nAn overview of the Jenkins UI overhaul. We are taking an iterative approach to gradually refresh the Jenkins UI. This approach will make Jenkins look fresh and modern, without changing the way users are accustomed to working with Jenkins or require plugins to be rewritten to render properly in the new Jenkins UI. Join this session to learn the changes we’ve made and how you can help to improve the Jenkins UI.\n\nThe event is free to everyone and recordings will be available on-demand. Registration is required to access the on-demand recordings. And don’t forget to visit the CDF booth in the expo hall for one on one Q&A’s with Jenkins experts.","title":"Jenkins at DevOps World 2020","tags":["events","conference","cicd","talks","workshops"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2020-09-12T00:00:00.000Z","id":"a3ff4762-962b-5dfe-9279-693999cbe8b8","slug":"/blog/2020/09/12/new-jenkins-release-observations/","strippedHtml":"This article describes our observations during Windows testing of the Jenkins 2.249.1 release candidate.\n\nUpgrade testing\n\nJenkins 2.249.1 is a new long term support release with user interface improvements and changes in Windows support.\nIt is the first long term support release to drop support for Microsoft.NET framework 2.0.\nThe end of support for Microsoft.NET framework 2.0 was announced in the Windows Support Updates blog post.\nThe Windows support upgrade guidelines describe major things to consider when upgrading Jenkins controllers and agents on Windows.\n\nAs part of our preparation for the release, we tested several configurations.\nThis article describes our experiences with those configurations.\n\nUpgrade approaches\n\nWe tested controller and agent upgrades from Jenkins 2.235.x to 2.249.1-rc on Windows.\nThe tests included:\n\n32 bit Windows MSI\n\n64 bit Windows MSI\n\nWAR (file) on Windows\n\nUpgrade process\n\nOur upgrade process included:\n\nInstall a previous version of Jenkins controller on Windows\n\nInstall a previous version of Jenkins agent on Windows and configure it as a service\n\nUpgrade Jenkins controller from \"Manage Jenkins\"\n\nRestart the Jenkins Windows service for the controller\n\nUpgrade the Jenkins agent on Windows with the latest agent.jar\n\nRestart the Jenkins Windows service for the agent\n\nTesting results\n\nWe successfully tested\n\nRestarting Windows service for controller ( JENKINS-63198)\n\nRestarting Windows service for agents ( JENKINS-63223)\n\nWe confirmed that we can continue our Level 1 support policy for Jenkins 2.249.1.\n\n32 bit Windows MSI\n\nPrior to Jenkins 2.235.3, the Jenkins LTS Windows installer was provided as a 32 bit MSI and included a bundled Java 8 runtime environment.\nThe Jenkins agent can be downloaded and run through Java web start using the bundled Java 8 runtime environment.\nThe agent can also be configured to run as a service using the bundled Java 8 runtime environment.\n\nJenkins controller\n\nJenkins 2.235.1 installs JRE 8u144 for 32 bit Windows.\nThe installer configures the Jenkins controller to run as the SYSTEM user.\n\nRefer to the Windows Installer Updates blog post for details of the controller installation process with the 32 bit MSI.\n\nJenkins agent\n\nJenkins agents on Windows are often configured to \"Launch agent by connecting it to the master\".\nThe Jenkins agent configuration correctly warns that the controller must open the TCP port for inbound agents in the \"Configure Global Security\" page.\nIt is easiest to allow Jenkins to choose the port (a \"Random\" port).\nJenkins selects a random available port number and shares that port number with agents during their initial connection to the Jenkins http port.\n\nConfigure the agent\n\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\n\nDownload the agent\n\nThe agent starts the first time by clicking the \"Launch\" button on the agent configuration page (only available with Java 8).\nThat downloads the \"slave-agent.jnlp\" file from the web browser.\n\nStart the agent\n\nThe downloaded file needs to be opened from a command prompt using the javaws command that is included with the bundled JRE:\n\nC:\\> \"C:\\Program Files (x86)\\Jenkins\\jre\\bin\\javaws.exe\" -wait slave-agent.jnlp\n\nThe javaws program has been removed from  the most recent releases of Java 8 and from Java 11.\nRefer to [Jenkins agent and icedtea] for a technique that can help users of the most recent releases of Java 8.\n\nJava web start (javaws.exe) prompts for permission to run the program with this dialog:\n\nInstall the agent as a service\n\nThe agent runs and displays a window on the desktop with a single menu entry, \"Install as a service\".\n\nWhen the \"Install as a service\" menu item is clicked, the agent is adjusted to run as a Windows service using the SYSTEM account.\n\nUpgrade the controller\n\nThe Jenkins controller on Windows can be upgraded to Jenkins 2.249.1 from the \"Manage Jenkins\" page.\nThe upgrade process downloads the new jenkins.war file, saves the current version in case of later downgrade, and offers to restart.\n\nUpgrade the agent\n\nThe Jenkins inbound agent is not upgraded automatically.\nThe agent administrator downloads the most recent agent.jar from their Jenkins controller, stops the running agent, and replaces the installed agent.jar with the downloaded version.\nThe agent service will reconnect to the Jenkins controller after the administrator restarts it.\n\n64 bit Windows MSI\n\nBeginning with Jenkins 2.235.3, the Jenkins LTS Windows installer is a 64 bit MSI.\nIt runs Jenkins with the 64 bit JDK (Java 8 or Java 11) selected by the user.\n\nJenkins controller\n\nJenkins 2.235.3 was installed using AdoptOpenJDK Java 8u262 in one test.\nIt was installed using AdoptOpenJDK Java 11.0.8 in another test.\nIn both cases, the installer configured the Jenkins controller to run with the Windows service account we had previously configured.\n\nRefer to the Windows Installer Updates blog post for details of the controller installation process with the 64 bit MSI.\n\nJenkins agent\n\nJenkins agents on Windows are often configured to \"Launch agent by connecting it to the master\".\nThe Jenkins agent configuration correctly warns that the controller must open the TCP port for inbound agents in the \"Configure Global Security\" page.\nIt is easiest to allow Jenkins to choose the port (a \"Random\" port).\nJenkins selects a random available port number and shares that port number with agents during their initial connection to the Jenkins http port.\n\nConfigure the agent\n\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\n\nDownload the agent\n\nThe agent was started the first time by clicking the \"Launch\" button on the agent configuration page (only available with Java 8).\nThat downloads the \"slave-agent.jnlp\" file from the web browser.\n\nStart the agent with IcedTea-Web\n\nRecent versions of Java 8 and all versions of Java 11 have removed the javaws command.\nJenkins agents for Java 8 can still be started with the javaws command, but it needs to be downloaded separately from the JVM.\nWe open \"slave-agent.jnlp\" from a command prompt using the javaws command that is available from AdoptOpenJDK IcedTea :\n\nC:\\> C:\\icedtea-web-1.8.3.win.bin\\icedtea-web-image\\bin\\javaws.exe -wait slave-agent.jnlp\n\nJava web start (javaws.exe) prompts for permission to run the program with this dialog:\n\nInstall the agent as a service\n\nThe agent runs and displays a window on the desktop with a single menu entry, \"Install as a service\".\n\nWhen the \"Install as a service\" menu item is clicked, the agent is installed and configured to run as a Windows service using the SYSTEM account.\n\nUpgrading the controller\n\nThe Jenkins controller on Windows was upgraded to Jenkins 2.249.1 from the \"Manage Jenkins\" page.\nThe upgrade process downloads the new jenkins.war file, saves the current version in case of later downgrade, and offers to restart.\n\nUpgrading the agent\n\nThe Jenkins inbound agent is not upgraded automatically or from a Jenkins user interface.\nThe agent administrator downloads the most recent agent.jar from their Jenkins controller and replaces the installed agent.jar with the downloaded version.\n\nWAR (file) on Windows\n\nJenkins allows users to run the Jenkins web archive (WAR) file from a command line and then install it as a service from within Jenkins.\nThis installation technique uses the Jenkins WAR file but does not use a Windows MSI package.\nThe Jenkins WAR file includes the necessary components to install and configure Jenkins as a service.\n\nInstall controller as a service\n\nWhen the Jenkins war file is started from a Windows command prompt, \"Manage Jenkins\" includes \"Install as a service\".\nAn administrator selects that entry and Jenkins will configure itself to run as a service/\nThe installer configures the Jenkins controller to run as the SYSTEM user.\n\nJenkins agent\n\nJenkins agents on Windows are often configured to \"Launch agent by connecting it to the master\".\nThe Jenkins agent configuration correctly warns that the controller must open the TCP port for inbound agents in the \"Configure Global Security\" page.\nIt is easiest to allow Jenkins to choose the port (a \"Random\" port).\nJenkins selects a random available port number and shares that port number with agents during their initial connection to the Jenkins http port.\n\nConfigure the agent\n\nAfter opening the Jenkins TCP port for inbound agents, we configured a new agent from the \"Nodes\" menu\nThis created an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\n\nDownload the agent\n\nThe agent was started the first time by clicking the \"Launch\" button on the agent configuration page (only available with Java 8).\nThat downloads the \"slave-agent.jnlp\" file from the web browser.\n\nStart the agent with IcedTea-Web\n\nRecent versions of Java 8 and all versions of Java 11 have removed the javaws command.\nJenkins agents for Java 8 can still be started with the javaws command, but it needs to be downloaded separately from the JVM.\nOpen \"slave-agent.jnlp\" from a command prompt using the javaws command that is available from AdoptOpenJDK IcedTea-Web :\n\nC:\\> C:\\icedtea-web-1.8.3.win.bin\\icedtea-web-image\\bin\\javaws.exe -wait slave-agent.jnlp\n\nJava web start (javaws.exe) prompts for permission to run the program with this dialog:\n\nInstall the agent as a service\n\nThe agent runs and displays a window on the desktop with a single menu entry, \"Install as a service\".\n\nWhen the \"Install as a service\" menu item is clicked, the agent is installed and configured to run as a Windows service using the SYSTEM account.\n\nConclusion\n\nJenkins controller installation is best done with the new 64 bit MSI package.\nPrevious controller installations can be upgraded to the most recent Jenkins release from within Jenkins.\n\nJenkins inbound agent installation is more complicated now that the javaws.exe program is not included in the JDK.\nThe AdoptOpenJDK IcedTea-Web project allows administrators to install and configure Jenkins inbound agents with most of the ease that was available in prior Java releases.","title":"Testing Jenkins 2.249.1 on Windows","tags":["windows","platform-sig","installers","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg","srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/534e5/vsilverman.jpg 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/99887/vsilverman.jpg 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/76fd4/vsilverman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/59a6b/vsilverman.webp 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/cbb78/vsilverman.webp 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/96250/vsilverman.webp 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/50511/vsilverman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}}},"blog":null,"github":"vsilverman","html":"<div class=\"paragraph\">\n<p>Vlad is an active user of Jenkins and at the beginning of 2020 he also started actively contributing to the Jenkins project. He resides in Silicon Valley and for 10+ years had been involved in building/testing business processes for large enterprises and mid-size companies.</p>\n</div>","id":"vsilverman","irc":null,"linkedin":null,"name":"Vlad Silverman","slug":"/blog/authors/vsilverman","twitter":"vsilverman"}]}}]}},"pageContext":{"limit":8,"skip":48,"numPages":100,"currentPage":7}},
    "staticQueryHashes": ["3649515864"]}