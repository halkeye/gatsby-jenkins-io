{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/54",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2016-04-07T00:00:00.000Z","id":"dc2d5625-7a35-5883-9c50-152fda1c584a","slug":"/blog/2016/04/07/jenkins-community-survey-results-blog/","strippedHtml":"This is a guest post by Brian\nDawson at CloudBees, where he works as a DevOps Evangelist responsible for\ndeveloping and sharing continuous delivery and DevOps best practices. He also\nserves as the CloudBees Product Marketing Manager for Jenkins.\n\nLast fall CloudBees asked attendees at the Jenkins User Conference – US West\n(JUC), and other in the Jenkins community to take a survey.  Almost 250 people\ndid – and thanks to their input, we have results which provided interesting\ninsights into how Jenkins is being used.\n\nBack in 2012, at the time of the last community survey, 83% of respondents felt\nthat Jenkins was mission-critical. By 2015, the percentage saying that\nJenkins was mission-critical was 92%. Additionally, echoing the\nimportance of Jenkins, 89% of respondents said their use of Jenkins had\nincreased over the last year, while 11% said it had stayed the same. 0%\nsaid that it had decreased.\n\nThe trend in the industry over the last couple of years has been to adopt\ncontinuous delivery (CD), thus pushing automation further down the pipeline –\nfrom development all the way into production.  Jenkins being an automation\nengine applicable to any phase of the software delivery lifecycle, is readily\nsupporting this trend. Jenkins' extensible architecture and unparalleled plugin\necosystem enables integration with and orchestration of practically any tool in\nany phase of software delivery.\n\nThe trend towards adoption of CD is clearly reflected amongst the community: 59%\nof respondents are using Jenkins for continuous integration (CI), but an\nadditional 30% have extended CI into CD and are manually deploying code to\nproduction.  Finally, 11% are practicing continuous deployment – they have\nextended CI to CD and are deploying code automatically into production.\n\nAnother trend tied to the adoption of CD and DevOps is the frequent deployment\nof incremental releases to production. 26% of those respondents using continuous\ndelivery practices are deploying code at least once per day.  Another 37% are\ndeploying code at least once per week.\n\nIn keeping with the move to CD, 30% of survey takers are already using the\nrelatively new Pipeline plugin to automate their\nsoftware delivery pipelines.  Of those not using the Pipeline plugin, 79% plan\nto adopt it in the next 12 months.\n\nSurvey respondents are also using Jenkins for many different activities.  97% of\nsurvey takers use it for \"build\" – no surprise, since that is where Jenkins got\nits start - but 58% now also use it for their deployment.\n\nWhen the 2012 community survey was conducted, container technology was not as\nwell understood as it is today,  and many didn’t know what a “Docker” was. A\nshort four years later, 96% of survey respondents who use Linux containers are\nusing Docker.  Container technology has seen impressive adoption and arguably is\nrevolutionizing the way application infrastructure is delivered.  When coupled\nwith Jenkins as an automation engine, containers help accelerate software\ndelivery by providing rapid access to lightweight environments.  The Jenkins\ncommunity has recognized and embraced the power of containers by\nproviding plugins for Docker and Kubernetes.\n\nThe Jenkins improvements which survey respondents desired the most were\nquality/timely bug fixes, a better UI and more documentation/examples.\nInterestingly, Jenkins 2.0 - which is just about to officially launch,\nprovides UI improvements and the new Jenkins.io website\nprovides improved, centralized documentation.\n\nFinally, the respondents favorite Star Wars character was R2-D2, followed by\nObi-Wan and Darth Vader. Yoda and Han Solo also got a fair amount of votes. The\nvotes for Jar-Jar Binks and Jabba the Hutt left us puzzled. Notably, BB-8 had a\nwrite-in vote despite the fact the new Star Wars movie hadn’t been released yet.\n\nAs to where the community is headed, our prediction is that by the next Jenkins Community Survey:\n\nMore Jenkins users will have transitioned from just continuous\nintegration to continuous delivery with some evening practicing continuous\ndeployment\n\nPipeline plugin adoption and improvements will continue, leading to\npipeline-as-code becoming an essential solution for automating the software\n(and infrastructure) delivery process\n\nThere will be a significant increase in use of the Docker plugin to support\nelastic Jenkins infrastructure and continuous delivery of containers using\nsoftware development best practices\n\nBB-8 will be the next favorite Star Wars character! <3</p>\n\nSee you at Jenkins World, September 13-15, in Santa Clara, California!\nRegister now for the largest Jenkins event on the planet in 2016 – and get the Early Bird discount. The Call for Papers is still open – so submit a talk and share your knowledge with the community about Jenkins.\n\n2015 Community Survey Results (PDF)\n\nState of Jenkins Infographic (PDF)","title":"Jenkins Community Survey Results","tags":["continuousdelivery","pipeline","docker"],"authors":[{"avatar":null,"blog":null,"github":"bvdawson","html":"<div class=\"paragraph\">\n<p>DevOps dude at CloudBees.\nJenkins Marketing Manager.\nTools geek.</p>\n</div>","id":"bvdawson","irc":null,"linkedin":null,"name":"Brian Dawson","slug":"/blog/authors/bvdawson","twitter":"brianvdawson"}]}},{"node":{"date":"2016-04-07T00:00:00.000Z","id":"bb46e899-10f9-583c-862c-a664e9eb81b4","slug":"/blog/2016/04/07/pipeline-for-runs-on-hardware/","strippedHtml":"In addition to Jenkins development, during last 8 years I’ve been involved into continuous integration for hardware and embedded projects.\nAt JUC2015/London\nI have conducted a talk about common automation challenges in the area.\n\nIn this blog post I would like to concentrate on Pipeline (formerly known as Workflow), which is a new ecosystem in Jenkins that allows implementing jobs in a domain specific language.\nIt is in the suggested plugins list in the upcoming Jenkins 2.0 release.\n\nThe first time I tried Pipeline two and half years ago, it unfortunately did not work for my use-cases at all.\nI was very disappointed but tried it again a year later.\nThis time, the plugin had become much more stable and useful.\nIt had also attracted more contributors and started evolving more rapidly with the development of plugins extending the Pipeline ecosystem.\n\nCurrently, Pipeline a powerful tool available for Jenkins users to implement a variety of software delivery pipelines in code.\nI would like to highlight several Pipeline features which may be interesting to Jenkins users working specifically with embedded and hardware projects.\n\nIntroduction\n\nIn Embedded projects it’s frequently required to run tests on specific hardware peripherals: development boards, prototypes, etc.\nIt may be required for both software and hardware areas, and especially for products involving both worlds.\nCI and CD methodologies require continuous integration and system testing, and Jenkins comes to help here.\nJenkins is an automation framework, which can be adjusted to reliably work with hardware attached to its nodes.\n\nArea challenges\n\nGenerally, any peripheral hardware device can be attached to a Jenkins node.\nSince Jenkins nodes require Java only, almost every development machine can be attached.\nBelow you can find a common connection scheme:\n\nAfter the connection, Jenkins jobs could invoke common EDA tools via command-line interfaces.\nIt can be easily done by a Execute shell build steps in free-style projects.\nSuch testing scheme is commonly affected by the following issues:\n\nNodes with peripherals are being shared across several projects.\nJenkins must ensure the correctness of access (e.g. by throttling the access).\n\nIn a single Freestyle project builds utilize the node for a long period. If you synthesize the item before the run, much of the peripheral utilization file may be wasted.\n\nThe issue can be solved by one of concurrency management plugins:\nThrottle Concurrent Builds, Lockable Resources\nor\nExclusions.\n\nTest parallelization on multiple nodes requires using of multiple projects or\nMatrix configurations, so it causes job chaining again.\n\nThese build chains can be created via\nParameterized Trigger and\nCopy Artifacts, but it complicates job management and build history investigation.\n\nHardware infrastructure is usually flaky.\nIf it fails during the build due to any reason, it’s hard to diagnose the issue and re-run the project if the issue comes from hardware.\n\nBuild Failure Analyzer allows to identify the root cause of a build failure (e.g. by build log parsing).\n\nConditional Build Step and\nFlexible Publish plugins allow altering the build flow according to the analysis results.\n\nCombination of the plugins above is possible, but it makes job configurations extremely large.\n\nTests on hardware peripherals may take much time.\nIf an infrastructure fails, we may have to restart the run from scratch.\nSo the builds should be robust against infrastructure issues including network failures and Jenkins controller restarts.\n\nTests on hardware should be reproducible, so the environment and input parameters should be controlled well.\n\nJenkins supports\ncleaning workspaces, so it can get rid of temporary files generated by previous runs.\n\nJenkins provides support of agents connected via containers (e.g.\nDocker) or VMs, which allow creating clean environments for every new run.\nIt’s important for 3rd-party tools, which may modify files outside the workspace: user home directory, temporary files, etc.\n\nThese environments still need to be connected to hardware peripherals, which may be a serious obstacle for Jenkins admins\n\nThe classic automation approaches in Jenkins are based on Free-style and Multi-configuration project types.\nLinks to various articles on this topic are collected on the\nHW/Embedded Solution page Embedded on the Jenkins website.\nTests automation on hardware peripherals has been covered in several publications by Robert Martin, Steve Harris, JL Gray, Gordon McGregor, Martin d’Anjou, and Sarah Woodall.\nThere is also a top-level overview of classic approaches made by me at JUC2015/London (a bit outdated now).\n\nOn the other hand, there is no previous publications, which would address Pipeline usage for the Embedded area.\nIn this post I want to address this use-case.\n\nPipeline as Code for test runs on hardware\n\nPipeline as Code is an approach for describing complex automation flows in software lifecycles: build, delivery, deployment, etc.\nIt is being advertised in Continuous Delivery and DevOps methodologies.\n\nIn Jenkins there are two most popular plugins:\nPipeline and Job DSL.\nJobDSL Plugin internally generates common freestyle jobs according to the script, so it’s functionality is similar to the classic approaches.\nPipeline is fundamentally different, because it provides a new engine controlling flows independently from particular nodes and workspaces.\nSo it provides a higher job description level, which was not available in Jenkins before.\n\nBelow you can find an example of Pipeline scripts, which runs tests on FPGA board. The id of this board comes from build parameters ( fpgaId). In this script we also presume that all nodes have pre-installed tools (Xilinx ISE in this case).\n\n// Run on node having my_fpga label\nnode(\"linux && ml509\") {\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  sh \"make all\"\n}\n\nBut such scenario could be also implemented in a Free-style project.\nWhat would we get from Pipeline plugin?\n\nGetting added-value from Pipeline as code\n\nPipeline provides much added-value features for hardware-based tests.\nI would like to highlight the following advantages:\n\nRobustness against restarts of Jenkins controller.\n\nRobustness against network disconnects. sh() steps are based on the\nDurable Task plugin, so Jenkins can safely continue the execution flow once the node reconnects to the controller.\n\nIt’s possible to run tasks on multiple nodes without creating complex flows based on job triggers and copy artifact steps, etc. It can be achieved via combination of parallel() and node() steps.\n\nAbility to store the shared logic in standalone Pipeline libraries\n\netc.\n\nFirst two advantages allow to improve the robustness of Jenkins nodes against infrastructure failures.\nIt is critical for long-running tests on hardware.\n\nLast two advantages address the flexibility of Pipeline flows.\nThere are also plugins for freestyle projects, but they are not flexible enough.\n\nUtilizing Pipeline features\n\nThe sample Pipeline script above is very simple.\nWe would like to get some added value from Jenkins.\n\nGeneral improvements\n\nLet’s enhance the script by using several features being provided by pipeline in order to get visualization of stages, report publishing and build notifications.\n\nWe also want to minimize the time being spent on the node with the attached FPGA board.\nSo we will split the bitfile generation and further runs to two different nodes in this case: a general purpose linux node, and the node with the hardware attached.\n\nYou can find the resulting Pipeline script below:\n\n// Synthesize on any node\ndef imageId=\"\"\nnode(\"linux\") {\n  stage \"Prepare environment\"\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  // Construct the bitfile image ID from commit ID\n  sh 'git rev-parse HEAD > GIT_COMMIT'\n  imageId= \"myprj-${fpgaId}-\" + readFile('GIT_COMMIT').take(6)\n\n  stage \"Synthesize project\"\n  sh \"make FPGA_TYPE=$fpgaId synthesize_for_fpga\"\n  /* We archive the bitfile before running the test, so it won't be lost it if something happens with the FPGA run stage. */\n  archive \"target/image_${fpgaId}.bit\"\n  stash includes: \"target/image_${fpgaId}.bit\", name: 'bitfile'\n}\n\n/* Run on a node with 'my_fpga' label.\nIn this example it means that the Jenkins node contains the attacked FPGA of such type.*/\nnode (\"linux && $fpgaId\") {\n  stage \"Blast bitfile\"\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  def artifact='target/image_'+fpgaId+'.bit'\n  echo \"Using ${artifact}\"\n  unstash 'bitfile'\n  sh \"make FPGA_TYPE=$fpgaId impact\"\n\n  /* We run automatic tests.\n  Then we report test results from the generated JUnit report. */\n  stage \"Auto Tests\"\n  sh \"make FPGA_TYPE=$fpgaId tests\"\n  sh \"perl scripts/convertToJunit.pl --from=target/test-results/* --to=target/report_${fpgaId}.xml --classPrefix=\\\"myprj-${fpgaId}.\\\"\"\n  junit \"target/report_${fpgaId}.xml\"\n\n  stage \"Finalization\"\n  sh \"make FPGA_TYPE=$fpgaId flush_fpga\"\n  hipchatSend(\"${imageId} testing has been completed\")\n}\n\nAs you may see, the pipeline script mostly consists of various calls of command-line tools via the sh() command.\nAll EDA tools provide great CLIs, so we do not need special plugins in order to invoke common operations from Jenkins.\n\nMakefile above is a sample stuff for demo purposes.\nIt implements a set of unrelated routines merged into a single file without dependency declarations.\nNever write such makefiles.\n\nIt is possible to continue expanding the pipeline in such way.\nPipeline Examples\ncontain examples for common cases: build parallelization, code sharing between pipelines, error handling, etc.\n\nLessons learned\n\nDuring last 2 years I’ve been using Pipeline for Hardware test automation several times.\nThe first attempts were not very successful, but the ecosystem has been evolving rapidly.\nI feel Pipeline has become a really powerful tool, but there are several missing features.\nI would like to mention the following ones:\n\nShared resource management across different pipelines.\n\nRuns of a single Pipeline job can be synchronized using the concurrency parameter of the stage() step\n\nIt can be done by the incoming Pipeline integration in the\nLockable Resources plugin\n( JENKINS-30269).\n\nAnother case is integration with\nThrottle Concurrent Builds plugin, which is an effective engine for limiting the license utilization in automation infrastructures\n( JENKINS-31801).\n\nBetter support of CLI tools.\n\nEDA tools frequently need a complex environment, which should be deployed on nodes somehow.\n\nIntegration with\nCustom Tools Plugin seems to be the best option, especially in the case of multiple tool versions\n( JENKINS-30680).\n\nPipeline package manager ( JENKINS-34186)\n\nSince there is almost no plugins for EDA tools in Jenkins, developers need to implement similar tasks at multiple jobs.\n\nA common approach is to keep the shared \"functions\" in libraries.\n\nPipeline Global Library and\nPipeline Remote Loader can be used, but they do not provide features like dependency management.\n\nPipeline debugger ( JENKINS-34185)\n\nHardware test runs are very slow, so it is difficult to troubleshoot and fix issues in the Pipeline code if you have to run every build from scratch.\n\nThere are several features in Pipeline, which simplify the development, but we still need an IDE-alike implementation for complex scripts.\n\nConclusions\n\nJenkins is a powerful automation framework, which can be used in many areas.\nEven though Jenkins has no dedicated plugins for test runs on hardware, it provides many general-purpose \"building blocks\", which allow implementing almost any flow.\nThat’s why Jenkins is so popular in the hardware and embedded areas.\n\nPipeline as code can greatly simplify the implementation of complex flows in Jenkins.\nIt continues to evolve and extend support of use-cases.\nif you’re developing embedded projects, consider Pipeline as a durable, extensible and versatile means of implementing your automation.\n\nWhat’s next?\n\nJenkins automation server dominates in the HW/Embedded area, but unfortunately there is not so much experience sharing for these use-cases.\nSo Jenkins community encourages everybody to share the experience in this area by writing docs and articles for Jenkins website and other resources.\n\nThis is just a a first blog post on this topic.\nI am planning to provide more examples of Pipeline usage for Embedded and Hardware tests in the future posts.\nThe next post will be about concurrency and shared resource management in Pipelines.\n\nI am also going to talk about running tests on hardware at the\nupcoming Automotive event in Stuttgart on April 26th.\nThis event is being held by\nCloudBees, but there will be several talks addressing Jenkins open-source as well.\n\nIf you want to share your experience about Jenkins usage in Hardware/Embedded areas, consider submitting a talk for the\nJenkins World conference or join/organize a\nJenkins Area Meetup in your city.\nThere is also a\nJenkins Online Meetup.\n\nLinks\n\nRelated articles and events:\n\nHW/Embedded Solution page\n\nJenkins-Based CI for Heterogeneous Hardware/Software Projects\n\nAccelerating Automotive Innovation with Continuous Integration & Delivery - meetup in Stuttgart\n\nPipeline:\n\nPipeline page\n\nJenkins 2.0 and Pipeline as code overview\n\nPipeline Tutorial\n\nPipeline Examples","title":"Automating test runs on hardware with Pipeline as Code","tags":["jenkins2","pipeline","embedded"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-04-01T00:00:00.000Z","id":"b8091c97-4904-5c1c-adbb-76e6349003ab","slug":"/blog/2016/04/01/march-2016-jam-st-petersburg/","strippedHtml":"On March 10th we have conducted the second Jenkins meetup in Saint Petersburg,\nRussia.  The meetup topic was\"Jenkins and Continuous Delivery\".  We had 3\ntalks addressing various aspects of Jenkins usage in this area.\n\nTalks\n\nIntroduction slides [ru]\n\nJenkins 2.0 and Pipeline-as-Code\n\nSpeaker: Oleg Nenashev, CloudBees\n\nPresentation (en)\n\nPresentation (ru)\n\nContinuous Delivery for Documentation\n\nSpeaker: Stanislav Ovchar, Motorola Solutions\n\nPresentation (ru)\n\nContinuous Delivery with Jenkins at ZeroTurnaround\n\nSpeaker: Sergei Egorov, ZeroTurnaround\n\nPresentation (en)\n\nWe also had a long Jenkins afterparty. Starting from the next meetup we hope to\nmake this part more official.\n\nLinks\n\nSt. Petersburg Meetup page (follow the events here)\n\nEvent page on the Yandex.Events portal\n\nSt. Petersburg Meetup Twitter\n\nJenkins RU Twitter\n\nJenkins RU Gitter Chat\n\nAcknowledgments\n\nThe event has been organized with the help from\nYandex and\nCloudBees.\n\nMore Jenkins meetups\n\nIf you want to organize a Jenkins meetup in St. Petersburg or to be a speaker\nthere, please contact us via the\nMeetup\ndiscussions page\n\nRegarding other areas, check out where\nJenkins Area Meetups (JAMs) are\nlocated in the world.\n\nDon’t see a JAM in your area?  Why not start your own,\nfind out\nhow.","title":"March 2016 St. Petersburg Jenkins Meetup Report","tags":["jam","jenkins_ru","jenkins2"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-03-30T00:00:00.000Z","id":"60d21d4e-c1c0-54bb-9f04-5c3d3f2cce7a","slug":"/blog/2016/03/30/usage-statistics-privacy-advisory/","strippedHtml":"A bug was introduced in Jenkins versions 1.645 and 1.642.2 which caused Jenkins\nto send\nanonymous\nusage statistics, even if the administrator opted-out of reporting usage data\nin the Jenkins web UI.\n\nIf you are running one of the affected versions, the best/easiest solution is\nto upgrade. The bug does not affect Jenkins 1.653 or newer, or Jenkins LTS\n1.642.4 or newer.\n\nIf you cannot upgrade, it is possible to immediately disable submission of\nusage statistics by running the following script in \"Manage Jenkins » Script Console\":\n\nhudson.model.UsageStatistics.DISABLED = true\n\nThis will immediately disable usage data submission until you restart Jenkins.\nTo make this permanent, change your Jenkins startup script so it passes a\nsystem property to the java process:\n\njava -Dhudson.model.UsageStatistics.disabled=true -jar …/jenkins.war\n\nFor information how to do this when using one of the installers/packages, see the\ninstaller/package documentation here.\n\nTo verify that usage stats submission is disabled, run the following script in\n\"Manage Jenkins » Script Console\" and confirm the result is true:\n\nprintln hudson.model.UsageStatistics.DISABLED\n\nWe have much more information about the issue and our usage statistics process\nin\nour wiki.\n\nWhile we do not consider this a security advisory, if you are a Jenkins\nadministrator we highly recommend subscribing to our\njenkinsci-advisories@\nmailing list.","title":"Important notice regarding usage statistics","tags":["general"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2016-03-24T00:00:00.000Z","id":"9efc9db9-9325-5046-a1fb-6db8d9a413f3","slug":"/blog/2016/03/24/jenkins-2-beta-released/","strippedHtml":"We released the Jenkins 2.0 beta earlier today. Download it here and try it!\n\nBesides a number of bug fixes and minor improvements, the following changes are new since the last alpha preview release:\n\nRedesigned \"New Item\" page\n\nWe redesigned the \"New Item\" page. Item types now have icons to be more visually distinctive.\n\nAdditionally, item types can now define a category they belong to (such as \"Project\" or \"Folder\"). Once the complexity of the \"New Item\" page reaches a certain threshold, the item types will be grouped into categories to be easier to find. However, for now, it’s unlikely that you will see these categories, as support for this mechanism will need to be added in plugins. This is a new API in core, and we invite plugin developers to support it to make Jenkins easier to use for users with a large number of item types. It doesn’t even require raising the minimum supported Jenkins version.\n\nSeparate configuration page for tools\n\nThe length and complexity of the Configure Jenkins page once a few dozen plugins are installed made it unnecessarily difficult to use. To improve that we’re moving the tools configuration (Git, Maven, Gradle, Ant, etc.) out of that page, into the new Global Tools Configuration.\n\nUpgrade notice and plugin installer\n\nThe Pipeline plugin suite is a big part of Jenkins 2. Over the past few weeks, open-source plugins adding support for visualization (Pipeline Stage View), automatic GitHub project creation (GitHub Branch Source Plugin) and Bitbucket project creation (Bitbucket Branch Source Plugin) have been released. However, when upgrading from Jenkins 1.x, users weren’t even given any information on these features.\n\nTo address this, users upgrading from Jenkins 1.x will now be shown a banner when they first log into Jenkins as administrator, offering them to install the suite of Pipeline plugins.","title":"Jenkins 2.0 beta released","tags":["jenkins2"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2016-03-21T00:00:00.000Z","id":"6ddd387e-8f0e-561b-ac0d-a975fc5eb865","slug":"/blog/2016/03/21/vjam/","strippedHtml":"Over the past few months, I’m happy to say, the number of\nJenkins Area Meetups (JAMs) has grown\ntremendously! The excitement around JAMs has gotten us thinking about something\nlarger, something more globally focused. That led us to create\nvJAM, an online Jenkins Area\nMeetup, where we can share what we’re learning together. The effort will be\nspear-headed by long time Jenkins contributor, R. Tyler Croy.\n\nThe key goals for the Virtual Jenkins Area Meetup are:\n\nConnect the global Jenkins user and developer community.\n\nHelp spread the latest and greatest best practices.\n\nSupport other JAMs by offering\nanother, broader, audience for speakers and organizers\n\nvJAM, originally inspired by Virtual JUG, will\nsupplement local JAMs but nothing virtual can replace the value of talking with\nother Jenkins users over pizza and drinks.\n\nWe’re currently working on the agenda for the first vJAM, which will be posted\nto this Meetup group, so be\nsure to sign up if you’re interested in participating!\n\nIf you’re interested in creating your own local Jenkins Area Meetup, read\nthis page\nfor more details.","title":"vJAM: Virtual Jenkins Area Meetup","tags":["jam"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2016-03-18T00:00:00.000Z","id":"3e2a9396-1e25-5178-bbab-b2a05550c81a","slug":"/blog/2016/03/18/jenkins-20-test-fest/","strippedHtml":"The beta release of Jenkins 2.0 is rapidly approaching! The development team is working hard to find and squash as many bugs as possible, but do you know what would make that effort even more successful? You! A big part of Jenkins’s power lies in its extensive flexibility, but that flexibility poses challenges to testing. In short, it’s difficult for the core team to test in all the myriad environments and with all the different workflows that Jenkins users have. To give just one example, users of Jenkins on Windows often uncover Windows-specific issues that are missed during development.\n\nThat’s where you come in! The Jenkins team has organized a Test Fest to take place all day on Monday, March 21st, wherever you are. We encourage you to download the lastest alpha release of Jenkins 2.0, start it up, and configure it in the way you would your production Jenkins installation. Try out your usual workflows, install those plugins you just can’t live without, and let us know about any issues you encounter. You can file them in the Jenkins JIRA, with the label '2.0,' or you can discuss them with us in the #jenkins-testfest IRC channel on the Freenode IRC network (connect to irc.freenode.org). We encourage you to hang out with us on IRC regardless; it’ll be an all-day party!\n\nYou can also find the list of the discovered Jenkins 2.0 issues using this link.\n\nThanks in advance for joining us, and for supporting Jenkins!","title":"Jenkins 2.0 community test fest!","tags":["jenkins2"],"authors":[{"avatar":null,"blog":null,"github":"omehegan","html":"<div class=\"paragraph\">\n<p>Owen has been using and administering Jenkins for software companies since 2009 (when it was known as Hudson). He can play the guitar, he knows Morse code, and he has sometimes been known to rebuild two-stroke engines successfully on the first try.</p>\n</div>","id":"omehegan","irc":null,"linkedin":null,"name":"Owen Mehegan","slug":"/blog/authors/omehegan","twitter":"literatesavant"}]}},{"node":{"date":"2016-03-15T00:00:00.000Z","id":"e4799557-0475-5632-9141-cbf1a6b0bd10","slug":"/blog/2016/03/15/jenkins-certification/","strippedHtml":"This is a guest post by Francois\nDechery, he works at CloudBees managing Customer Engagement/Support, Consulting\nand Training. He is also leading the Jenkins Certification program at CloudBees\nwhich has been discussed in some of our previous ( 1,\n2,\n3)\ngovernance\nmeetings.\n\nIn the IT world, namely in software, \"certification\" is used in many different\nways and for many different purposes. From very simple and light certifications\nto very heavy and complex ones. In the \"light\" category you can usually be\ncertified on the basis of a short quiz at the end of an online training. At the\nother end of the spectrum, certifications are based on a proctored\nmultiple-choice questionnaire-based exam and/or hands-on labs. In some\nindustries, certifications are even more demanding. For instance, to become a\nCertified Public Accountant in the US, you have to pass a standard examination\nand, on top of this, each state/jurisdiction has its own set of education and\nexperience requirements that individuals must meet.\n\nCreating the Jenkins certification\n\nWhen we started our internal discussions at CloudBees regarding a certification\nprogram for Jenkins, we were aware of this broad set of certification\ndefinitions. Therefore, our first goal was to define what type of certification\nwe wanted to develop and for what purpose. We quickly agreed on the fact that it\nshould be a professional-grade certification, whose purpose would be to provide\na professional standard for the Jenkins ecosystem, benefiting both individuals\nand organizations, thanks to a common, respected and well-known body of\nknowledge and practice. \"Professional\" means that you have the expected level of\nskills and experience in order to leverage them in a professional environment,\nfor example in enterprise projects or as a consultant.\n\nMany members of the CloudBees team have firsthand experience with certification\nprograms developed in other IT ecosystems such as telecoms (Cisco),\ninfrastructure (Microsoft, Red Hat) or business applications (SAP), to name a\nfew. This was definitely the type of professional certification we wanted to\nbring to Jenkins. We knew it would represent a substantial investment but we\nalso knew that the whole Jenkins ecosystem would benefit. Whether at the overall\ncommunity or individual level, as well as IT organizations, system integrators\nor recruiting firms looking for qualified Jenkins personnel.\n\nI have had the privilege to supervise the creation and implementation of the\nJenkins Certification Program\nat CloudBees. The program is comprised of two certifications: \"Certified Jenkins\nEngineer\" (CJE) for Jenkins certification, and Certified CloudBees Jenkins\nPlatform Engineer (CCJPE) for certification on the CloudBees Jenkins Platform.\n\nWe started by creating a Certification Advisory Board whose members are:\nKohsuke Kawaguchi, Jenkins creator and CTO at\nCloudBees; Harpreet Singh, VP Products at\nCloudBees; Oliver Gondža, initially\nrepresenting the Jenkins community; Jason Shawn,\nsenior director DevOps at Ellucian, representing the CloudBees customer\nconstituency; and Jose Alvarez,\nmanaging director at Zivra, representing the CloudBees partner ecosystem.\n\nThis dedicated group helped us first to create the certification blueprint which\ndefines the main sections of the exam and their relative importance in the\noverall scoring. This blueprint also provides the high-level table of contents\nof the certification\nstudy guides.\nThey also helped to define the Jenkins Engineer profile that the certification\nassesses.\n\nWith this blueprint in hand, we put together a team of 40 Jenkins subject-matter\nexperts (SMEs), mostly from CloudBees with a few from partners. Together they\nworked for several months on the creation of hundreds of exam questions, doing\niterative peer reviews, filtering out any irrelevant or ambiguous questions and\nnarrowing down the pool of questions to the best questions for each section.\nAll this, plus a thorough analysis and balancing exercise to make sure the level\nof difficulty was evenly distributed across each section of the exam.\n\nThe big lesson from the exam creation experience is that creating a\nprofessional-grade exam is hard! And it requires very specific experience. In\nshort, being a subject-matter expert is definitely not enough and we’re glad to\nhave collaborated with Prometric 's\ncertification specialists who guided us through this process. The result is\ndefinitely worth the effort. Either of the two certifications offered within the\nJenkins Certification Program are truly what we would consider\n\"professional-grade certifications.\"\n\nWhat does certification get you?\n\nGetting certified means being recognized for your skills and experience as a\nJenkins professional. However, like any exam-based recognition, its actual value\ndepends on three criteria: the level of difficulty of the exam, its quality and\nits integrity.\n\nAs far as difficulty is concerned, it is clear that not everyone will pass and\nthat is expected from a professional-grade certification, as mentioned earlier.\nWe have definitely created an exam that is demanding. It does not only measure\nyour theoretical knowledge of Jenkins but also your hands-on practical\nexperience. To ensure its quality, we have applied best-industry practices\nregarding the exam’s creation and review process, working with certification\nspecialists. It includes the weighing of questions, the distribution of easy,\nmedium and difficult ones, the removal of any ambiguous wording, as well as\nalpha and beta final test procedures, in order to only keep the most appropriate\nquestions. We are also putting in place a formal maintenance process to capture\nany \"bug\" in the exam and adapt the questions to Jenkins evolutions over time.\nLast but not least, we ensure the exam’s integrity by working with Prometric\nfor the administration of exams. Tests are taken in fully secured and proctored\ntest rooms, without any access to any human or electronic resource and\nwithout any doubt about who takes the test. Thanks to Prometric’s hundreds\nof test centers around the world, this integrity is ensured in any location.\n\nBeyond this external recognition, getting certified is also a process that lets\nyou take a step back from your day-to-day practice of Jenkins and assess your\nskills and knowledge. You start this reassessment process by reading the Study\nGuides for the certifications. Then, by taking the test itself, you can identify\nyour strengths and weaknesses in a very practical way. In short, a certification\ngives you a measurable goal to achieve.\n\nClick here for more\ninformation on the Jenkins Certification Program by CloudBees.","title":"Introducing Jenkins Certification","tags":["certification"],"authors":[{"avatar":null,"blog":null,"github":"fdechery","html":"","id":"fdechery","irc":null,"linkedin":null,"name":"Francois Dechery","slug":"/blog/authors/fdechery","twitter":"francoisdechery"}]}}]}},"pageContext":{"limit":8,"skip":424,"numPages":100,"currentPage":54}},
    "staticQueryHashes": ["3649515864"]}