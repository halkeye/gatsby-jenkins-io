{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/16",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-08-26T00:00:00.000Z","id":"ec0ca077-b2d0-53a4-8b1d-2ecb784b35fd","slug":"/blog/2019/08/26/role-strategy-performance/","strippedHtml":"The task for my Google Summer of Code program was to improve the performance\nof the Role Strategy Plugin. The performance issues for Role Strategy Plugin\nhad been reported multiple times on Jenkins JIRA. With a large number of roles\nand with complex regular expressions, a large slow-down was visible on the Web UI.\nEven before GSoC started, there were a number of patches which tried to improve\nperformance of the plugin (by Deepansh Nagaria\nand others).\n\nAt the time, there was no way to reliably measure improvements in performance.\nTherefore, we started by creating a\nframework\nfor running micro-benchmarks on Jenkins Plugins. Benchmarks using the framework\nwere added to the Role Strategy Plugin find performance\ncritical parts of the plugins and to measure the improvements of a change.\nThis blog post summarizes the changes that were made and performance improvements\nmeasured.\n\nCaching matching roles\n\nA couple of major changes were made to the Role Strategy Plugin to improve its\nperformance. First, we started collection of roles that matched a given\nproject name. The Role Strategy plugin before version 2.12 used to run over\nregular expressions for every role that it had for every permission checking\nrequest it got. Storing this produced set of roles in the memory provides us\nlarge improvements in performance and avoids repeated matching of project names\nwith regular expressions. For keeping the plugin working securely, we invalidate\nthe cache whenever any update is made to the roles.\n\nAfter this change, we were able to observe performance improvements of up to\n3300%. These improvements were visualized using\nJMH Visualizer.\n\nMore information is available at pull request on GitHub:\nhttps://github.com/jenkinsci/role-strategy-plugin/pull/81\n\nCalculating Implying Permisions when plugin is loaded\n\nJenkins' permission model allows one permissions to imply other permissions.\nWhen a permission check is made, we need to check if the user has any of\npermissions that would imply this permisison. For every permission checking\nrequest that that the Role Strategy, it used to calculate all the implying\npermissions. To avoid this, we now calculate and store implying permissions\nfor every permission in the Jenkins system when the plugin gets loaded.\n\nAfter both of these changes, we were able to experience improvements of up to\n10000%. The benchmark results show it better:\n\nMore information about this change can be found at the GitHub pull request:\nhttps://github.com/jenkinsci/role-strategy-plugin/pull/83\n\nBoth of these changes were integrated into the Role Strategy Plugin and the\nimprovements can be experienced starting with version\n2.13.\n\nBonus: Configuration-as-Code export now works for Role Strategy\n\nWith Configuration-as-Code plugin version\n1.24\nand above, export of your configuration as YAML now works!\n\nAs an alternative to\nRole Strategy Plugin, I also created the brand new Folder Authorization Plugin.\nYou can check out the blog post for\nmore information about the plugin.\n\nLinks and Feedback\n\nI would love to hear your comments and suggestions. Please feel free to reach\nout to me through either the\nRole Strategy Plugin Gitter chat or through\nJenkins Developer Mailing list.\n\nPresentation slides for final evaluation of GSoC\n\nThe Folder Authorization Plugin\n\nDemo for the final evaluations","title":"Performance Improvements to Role Strategy Plugin","tags":["plugins","security","performance","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"AbhyudayaSharma","html":"<div class=\"paragraph\">\n<p>Abhyudaya is a Computer Science student at Shiv Nadar University, India.\nHe is participating in Google Summer of Code 2019 to improve the performance\nof the <a href=\"https://github.com/jenkinsci/role-strategy-plugin\">Role Strategy Plugin</a>.</p>\n</div>","id":"abhyudayasharma","irc":null,"linkedin":null,"name":"Abhyudaya Sharma","slug":"blog/author/abhyudayasharma","twitter":null}]}},{"node":{"date":"2019-08-25T00:00:00.000Z","id":"d12bee04-3e3b-5a23-9775-d800d9abf794","slug":"/blog/2019/08/25/jenkinsworld-contrib-summit-ask-the-expert-booth/","strippedHtml":"Jenkins turns 15 years old!\nJenkins World brings together DevOps thought leaders, IT executives, continuous delivery practitioners and the Jenkins\ncommunity and ecosystem in one global event, providing attendees with the opportunity to learn, explore, network\nface-to-face and help shape the next evolution of Jenkins development and solutions for DevOps.\n\nThere is also the Jenkins Contributor Summit in San Francisco. The Jenkins Contributor Summit is the place where\ncurrent and future contributors get together to discuss, learn and collaborate on the latest and greatest efforts within\nJenkins project. The morning portion of the summit is a mix of presentations by the core contributors. The\npresentations highlight what each effort is about and what community members can do to help. In the\nafternoon breakout sessions with  Birds of a Feather tables for in-depth discussion, and collaboration with sub-project\ncontributors.\n\nI feel very honored to have been a part of this.\n\nDay 1\n\nDay one started with the contributor summit. This was a chance for everyone to get together and talk about\ncontributions and put faces to names. Most people I had only met via video chat or on gitter so I was super excited.\nWe gathered to hear about the start of the Jenkins open source landscape.\n\nNext up was the BoF/Unconference. I was leading these sessions and I felt they went really well.\nWe had fellow org admins Martin d’Anjou and Jeff Pearce give a talk about Google Summer of Code projects.\n\nGoogle Summer of Code student Natasha Stopa presented her project, Plugin Installation Manager Library/CLI Tool. This is\na super cool project and very well received in the community.\n\nWe closed out the session with a presentation from Steven Terrana from Booz Allen Hamilton and the awesome Jenkins\nTemplating Engine. If you have not had a chance to try this, please make sure you do at https://github.com/boozallen/jenkins-templating-engine.\n\nMain Expo Hall\n\nDay two and onward saw me and other Jenkins org admins in the Ask the Expert booth for the Jenkins community.\n\nThis was a really cool experience and gave me a chance to hear about things the community is working on and help with\nissues they are facing.\nThere were a range of questions from Jenkins X to many of the plugins I maintain such and the Jenkins Prometheus and the\nSysdig Secure Scanning plugins.\nThere were also a lot of Kubernetes questions. There is a lot of marketing data regarding the increased usage of\nKubernetes but I was seriously surprised by the massive interest in Jenkins on Kubernetes.\nOf course there were opportunities for selfie requests.\n\nLunch time demos got underway and we had a busy schedule.\nFirst up was the awesome Mark Waite to talk about the\nGit plugin. A lot of people use git in\nJenkins.\nThank you so much for all that you do Mark.\n\nJenkins org admin Martin d’Anjou was next on deck to talk about the Google Summer of Code. So amazing to think that the\nGoogle Summer of Code is also in its 15th year like Jenkins!\n\nNatasha Stopa is a Google Summer of Code student and she presented her project Plugin Installation Manager Library/CLI Tool.\nNatasha really put a lot of hard work in to this plugin and it was really awesome to see the turn out and support during\nher presentation.\n\nFinally there was me. I presented the Sysdig Secure Scanning Jenkins plugin which I am a maintainer of. I thank everyone who attended\n\nRight after the lunch time demos I also oversaw the Jenkins open space. This was an opportunity for the community to talk\nabout items and let them flow organically. I really enjoyed this session and felt it was also well received.\n\nWe closed out the day and the event with a picture of some of the Jenkins org admins and Google Summer of Code students.\nMissing from this photos are fellow org admins, Lloyd Chang and Oleg Nenashev\n\nClosing\n\nThis was an amazing experience. Huge thanks to CloudBees, the Jenkins community, Google Summer of Code, Tracy Miranda,\nAlyssa Tong and my employer Sysdig.\n\nTo think Jenkins is 15 years old is amazing! There has been so much accomplished and the future is so bright. I am so\nthankful for the opportunity to serve and be a part of the open source community.\nHere’s to 15 more years all!\n\nIf you are interested in joining any one of the Jenkins open source special interest groups, look here. We can use your\nhelp: https://jenkins.io/sigs/\n\nIf you are interested in joining the Summer of Code, look here: https://jenkins.io/projects/gsoc/\nIf you want to chat with us, find us here: https://jenkins.io/chat/\nOr if you want to email us, reach out at: https://jenkins.io/mailing-lists/\n\nSome photos outtakes:","title":"Jenkins World Contributor Summit and Ask the Expert booth","tags":["jenkinsworld","devopsworld2019","gsoc","gsoc2019","community","opensource","events","contributorsummit","asktheexpert"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"blog/author/markyjackson-taulia","twitter":"markyjackson5"}]}},{"node":{"date":"2019-08-23T00:00:00.000Z","id":"67f9da03-2668-58bd-93f3-3bf494bb5192","slug":"/blog/2019/08/23/introduce-react-plugin-template/","strippedHtml":"The template’s main repo is at\nReact Plugin Template\n\nThis template is part of the project Working Hours UI Improvement during\nGoogle Summer of Code 2019, which improved the UI of Working Hours Plugin using this pattern to develop Jenkins plugins with React. The Working Hours Plugin repository can be found at Working Hours Plugin.\n\nOverview\n\nDeveloping plugin for Jenkins has always been easy to do with its Jelly based UI render system, but Jelly seems to be pretty heavy when we want to use more modernized frameworks like React, or if we need to make the plugin UI more customized. This is what this template is built for.\n\nAnd with React integrated, development of Jenkins plugin is more modernized, developer can now use tons of React libraries, the way to use libraries is now tinier and safer with webpack, in short, coding with Jenkins plugin can be much easier.\n\nFeatures\n\nFeature\nSummary\n\nReact Integrated\nReact is integrated, you can take full control of the UI\n\nUsing Iframe\nUsing iframe can create a new javascript env, we can get rid of some side effects of some polyfills which was added globally.(such as Prototype.js)\n\nMaven Lifecycle\nnpm commands are integrated into Maven lifecycle with help of Frontend Maven Plugin\n\nWebpack\nWebpack helps us reduce the size of the bundle, also avoids pollution on the global namespace.\n\nJenkins Crumb attached\nCrumb is attached to Axios client, now you can send requests in the way you used to do in React.\n\nExpress as devserver\nYou can run your react app in a standalone page so you can develop in webpack hot reload mode, also with webpack proxy, the standalone app is still accessible to the jenkins dev server.\n\nAxios as http client\nAxios hugely simplify the way to make requests.\n\nScreenshots\n\nExample Plugin UI\n\nManagement Link\n\nGetting Started\n\nClone the repo:\n\ngit clone https://github.com/jenkinsci/react-plugin-template.git\ncd react-plugin-template\n\nInstall the Maven dependencies and node modules.\n\nmvn install -DskipTests\n\nRun standalone React app with hot reload\n\nnpm run start\n\nRun plugin\n\nmvn hpi:run -Dskip.npm -f pom.xml\n\nSend HTTP requests\n\nAs Crumb Issuer is default enabled in Jenkins and each ajax request is required to contain a Jenkins Crumb in request header, so be sure to use the axiosInstance which is already set up with Jenkins Crumb and exported at src/main/react/app/api.js.\n\nexport const apiGetData = () => {\n  return axiosInstance.post(\"/data\");\n};\n\nOr if you want to use your own http client, remember to add the Jenkins Crumb to your request’s header, the Crumb’s key and content could be found at src/main/react/app/utils/urlConfig.js, then you can set the header like below.\n\nconst headers = {};\nconst crumbHeaderName = UrlConfig.getCrumbHeaderName();\n\nif (crumbHeaderName) {\n  headers[crumbHeaderName] = UrlConfig.getCrumbToken();\n}\n\nWrite your own request handler\n\nNow you can customize your request pattern as you want, also we need to write a handler.\n\nJenkins is using stapler to preprocess the requests, so if you need a request handler. For example and also in this template, you can use an Action class to create a sub-url, and then a StaplerProxy to proxy the request like a router. More info about handlers can be found in the Stapler Reference.\n\nExample handler\n\nManagementLink would get the request and then hand it off to the PluginUI\n\n@Extension\npublic class PluginManagementLink extends ManagementLink implements StaplerProxy {\n\n    PluginUI webapp;\n\n    public Object getTarget() {\n        return webapp;\n    }\n\n    public String getUrlName() {\n        return \"react-plugin-template\";\n    }\n}\n\nPluginUI, stapler would then find methods in the target class, in this case, it finds doDynamic, then we can choose the next handler by return the methods result, in this case, getTodos or setTodos, and PluginUI just function like a url router.\n\npublic class PluginUI{\n    public HttpResponse doDynamic(StaplerRequest request) {\n        ...\n\n        List params = getRequestParams(request);\n\n        switch (params.get(0)) {\n        case \"get-todos\":\n            return getTodos();\n        case \"set-todos\":\n            return setTodos(request);\n        }\n        ...\n    }\n}\n\nData Persistence\n\nYou can save your data with a descriptor\n\n@Extension\npublic class PluginConfig extends Descriptor implements Describable\n\nAnd after each time you change data, call save() to persist them.\n\npublic void setTodos(\n            @CheckForNull List value) {\n        this.todos = value;\n        save();\n    }\n\nAnd in your handler, you can get the config class by calling\n\nconfig = ExtensionList.lookup(PluginConfig.class).get(0);\n\nCustomize your plugin\n\nBe sure to modify all the occurrence of react-template\n\nAt org/jenkinsci/plugins/reactplugintemplate/PluginUI/index.jelly, change the iframe’s id and its source url.\n\nAt src/main/react/app/utils/urlConfig.js change\n\nAt src/main/react/server/config.js, change the proxy route.\n\nAt src/main/react/package.json, change the start script’s BASE_URL\n\nAt pom.xml, change the artifactId\n\nAt org/jenkinsci/plugins/reactplugintemplate/PluginManagementLink.java, change names.\n\nAlso use the same value to modify the occurrence in src\\main\\react\\app\\utils\\urlConfig.js.\n\nCustomize a page for your plugin\n\nA management Link is recommended, which would get your plugin a standalone page, along with a entry button in the /manage system manage page.\n\nHow does this template work?\n\nThis template is putting a webpack project inside a Maven project, and this template is just chaining the build result by copy the webpack output to the plugin’s webapp folder to make it accessible from the iframe, then Jelly render the iframe and the client gets the Plugin UI.\n\nWhy iframe?\n\nOver time, Jenkins has added a lot of various javascript libraries to every regular page, which now causes problems for using modern Javascript tooling and as such, we decided to inline the new react based pages in their own sandbox which prevents collisions with other libraries, and maybe the iframe is a good sandbox case.\n\nLinks\n\nGithub: React Plugin Template\n\nGithub: Working Hours Plugin","title":"Introduce React Plugin Template","tags":["react","plugins","template","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"ShenJack","html":"<div class=\"paragraph\">\n<p>Shen is a student from Beijing Forestry University. One of the students accepted to GSoC 2019.</p>\n</div>","id":"jackshen","irc":null,"linkedin":null,"name":"Jack Shen","slug":"blog/author/jackshen","twitter":null}]}},{"node":{"date":"2019-08-23T00:00:00.000Z","id":"eddbf0dc-37bf-5f4d-8a6e-0bef8711db73","slug":"/blog/2019/08/23/introducing-gitlab-branch-source-plugin/","strippedHtml":"The GitLab Branch Source Plugin has come out of its beta stage and has been released to the Jenkins update center. It allows you to create job based on GitLab user or group or subgroup project(s). You can either:\n\nImport a single project’s branches as jobs from a GitLab user/group/subgroup (Multibranch Pipeline Job)\n\nImport all or a subset of projects as jobs from a GitLab user/group/subgroup (GitLab Group Job or GitLab Folder Organization)\n\nThe GitLab Group project scans the projects, importing the pipeline jobs it identifies based on the criteria provided. After a project is imported, Jenkins immediately runs the jobs based on the Jenkinsfile pipeline script and notifies the status to GitLab Pipeline Status. This plugin unlike other Branch Source Plugins provides GitLab server configuration which can be configured in Configure System. Jenkins Configuration as Code (JCasC) can also be used to configure the server. To learn more about server configuration see my previous blog post.\n\nRequirements\n\nJenkins - 2.176.2 (LTS)\n\nGitLab - v11.0+\n\nCreating a Job\n\nTo create a Multibranch Pipeline Job (with GitLab branch source) or GitLab Group Job, you must have GitLab Personal Access Token added to the server configuration. The credentials is used to fetch meta data of the project(s) and to set up hooks on GitLab Server. If the token has admin access you can also set up System Hooks while Web Hooks can be set up from any user token.\n\nCreate a Multibranch Pipeline Job\n\nGo to Jenkins > New Item > Multibranch Pipeline > Add Source > GitLab Project\n\nServer - Select your desired GitLab server from the dropdown, needs to be configured before creating this job.\n\nCheckout Credentials - Add credentials of type SSHPrivateKey or Username/Password if there are any private projects to be built by the plugin. If all projects are public then no checkout credentials required. Checkout credential is different from the credential (of type GitLab Personal Access Token) setup in GitLab server config.\n\nOwner - Can be a user, group or subgroup. Depending on this the Projects field is populated.\n\nProjects - Select the project you want to build from the dropdown.\n\nBehaviours - These traits are very powerful tool to configure the build logic and post build logic. We have defined new traits. You can see all the information in repository documentation.\n\nSave and wait for the branches indexing. You are free to navigate from here, the job progress is displayed to the left hand side.\n\nAfter the indexing, the imported project listed all the branches, merge requests and tags as jobs.\n\nOn visiting each job, you will find some action items on the left hand side:\n\nYou can trigger the job manually by selecting Build Now.\n\nYou can visiting the particular branch/merge request/tag on your GitLab Server by selecting the corresponding button.\n\nCreate a GitLab Group Job Type\n\nGo to Jenkins > New Item > GitLab Group\n\nYou can notice the configuration is very similar to Multibranch Pipeline Job with only Projects field missing. You can add all the projects inside your Owner i.e. User/Group/Subgroup. The form validation will check with your GitLab server if the owner is valid. You can add Discover subgroup project trait which allows you to discover this child projects of all subgroups inside a Group or Subgroup but this trait is not applicable to User. While indexing, web hook is created in each project. GitLab Api doesn’t support creation of Group web hooks so this plugin doesn’t support that feature which is only available in GitLab EE.\n\nYou can now explore your imported projects, configuring different settings on each of those folders if needed.\n\nGitLab Pipeline Status Notification\n\nGitLab is notified about build status from the point of queuing of jobs.\n\nSuccess - the job was successful\n\nFailure - the job failed and the merge request is not ready to be merged\n\nError - something unexpected happened; example: the job was aborted in Jenkins\n\nPending - the job is waiting in the build queue\n\nOn GitLab Pipeline status are hyperlinks to the corresponding Jenkins job build. To see the Pipeline Stages and the console output you will be required to visit your Jenkins server. We also planned to notify the pipeline stages to GitLab but it came with some drawbacks which has been addressed so far but there is future plan to add it as trait.\n\nYou can also skip notifying GitLab about the pipeline status by selecting Skip pipeline status notifications from the traits list.\n\nMerge Requests\n\nImplementing support for Merge Requests for the projects was challenging. First, MRs are of 2 types i.e. Origin branches and Forked Project branches so there had to be different implementation for each head. Second, MRs from forks can be from untrusted sources, so a new strategy Trust Members was implemented which allows CI to build MRs only from trusted users who have accesslevel of Developer / Maintainer / Owner.\n\nThird, MRs from forks do not support pipeline status notification due to GitLab issue, see this. You can add a trait Log Build Status as Comment on GitLab that allows you to add a sudo user (leave empty if you want owner user) to comment on the commit/tag/mrs the build result. To add a sudo user your token must have admin access. By default only failure/error are logged as comment but you can also enable logging of success build by ticking the checkbox.\n\nSometimes, Merge Requests fail due to external errors so you want to trigger rebuild of mr by commenting jenkins rebuild. To enable this trigger add the trait Trigger build on merge request comment. The comment body can be changed in the trait. For security reasons, commentor should have Developer / Maintainer / Owner accesslevel in the project.\n\nHooks\n\nWeb hooks are automatically created on your projects if configured to do so in server configuration. Web hooks are ensured to pass through a CSRF filter. Jenkins listens to web hooks on the path /gitlab-webhook/post. On GitLab web hooks are triggered on the following events:\n\nPush Event - when a commit or branch is pushed\n\nTag Event - when a new tag is created\n\nMerge Request Event - when a merge request is created/updated\n\nNote Event - when a comment is made on a merge request\n\nYou can also set up System Hooks on your GitLab server if your token has admin access. System hooks are triggered when new projects are created, Jenkins triggers a rescan of the new project based on the configuration and sets up web hook on it. Jenkins listens to system hooks on the path /gitlab-systemhook/post. On GitLab system hooks are triigered on Repository Update Events.\n\nYou can also use Override Hook Management mode trait to override the default hook management and choose if you want to use a different context (say Item) or disable it altogether.\n\nJob DSL and JCasC\n\nYou can use Job DSL to create jobs. Here’s an example of Job DSL script:\n\norganizationFolder('GitLab Organization Folder') {\n    description(\"GitLab org folder created with Job DSL\")\n    displayName('My Project')\n    // \"Projects\"\n    organizations {\n        gitLabSCMNavigator {\n            projectOwner(\"baymac\")\n            credentialsId(\"i<3GitLab\")\n            serverName(\"gitlab-3214\")\n            // \"Traits\" (\"Behaviours\" in the GUI) that are \"declarative-compatible\"\n            traits {\n                subGroupProjectDiscoveryTrait() // discover projects inside subgroups\n                gitLabBranchDiscovery {\n                    strategyId(3) // discover all branches\n                }\n                originMergeRequestDiscoveryTrait {\n                    strategyId(1) // discover MRs and merge them with target branch\n                }\n                gitLabTagDiscovery() // discover tags\n            }\n        }\n    }\n    // \"Traits\" (\"Behaviours\" in the GUI) that are NOT \"declarative-compatible\"\n    // For some 'traits, we need to configure this stuff by hand until JobDSL handles it\n    // https://issues.jenkins.io/browse/JENKINS-45504\n    configure {\n        def traits = it / navigators / 'io.jenkins.plugins.gitlabbranchsource.GitLabSCMNavigator' / traits\n        traits\n\nYou can also use JCasC to directly create job from a Job DSL script. For example see the plugin repository.\n\nHow to talk to us about bugs or new features?\n\nThis project uses Jenkins JIRA to track issues. You can file issues under gitlab-branch-source-plugin component.\n\nSend your mail in the Developer Mailing list.\n\nJoin our Gitter channel.\n\nFuture work\n\nActively maintain GitLab Branch Source Plugin and take feedbacks from users to improve the plugin’s user experience.\n\nExtend support for GitLab Pipeline to Blueocean.\n\nResources\n\nGitLab API Plugin\n\nGitLab API Plugin Wiki\n\nGitLab Branch Source Plugin\n\nProject Summary\n\nGitHub Branch Source Plugin Release\n\nThank you Jenkins and Google Summer of Code :)","title":"Introducing new GitLab Branch Source Plugin","tags":["gitlab","plugins","pipeline","multibranch","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"blog/author/baymac","twitter":"baymac04"}]}},{"node":{"date":"2019-08-22T00:00:00.000Z","id":"9628d1b5-66f4-59a3-9d83-6daecb429bb8","slug":"/blog/2019/08/22/devops-world/","strippedHtml":"Last week I had the privilege of attending DevOps World - Jenkins World in San\nFrancisco to present my Google Summer of Code project for plugin management. It was\nan amazing experience getting to meet people from all over world who are trying\nto make the development and release process easier and more efficient. I enjoyed\nlearning more about industry tools, processes, and standards, and meeting CI/CD\nexperts and contributors in the open source community.\n\nBelow is a summary of my experience. Thank you to the Jenkins project and CloudBees for making\n my trip and attendance possible!\n\nDay 1\n\nMonday was the Continuous Delivery Contributor Summit, which focused on projects\nunder the CDF umbrella.  After checking in and grabbing my badge, I was able to\nmeet up with some of the Google Summer of Code org admins. It was great\nbeing able to actually meet them in person after talking to them over video\nconferencing and chats all summer!\n\nTracy Miranda started the summit out by introducing the Continuous Delivery Foundation,\nwhich aims to provide a vendor neutral home to help and sustain open source projects\nfocusing on all aspects of continuous delivery.  Currently, Jenkins, Tekton, Spinnaker,\nand JenkinsX have joined the foundation.  Project updates were given for Jenkins,\nTekton, and JenkinsX.  In the afternoon, attendees split into different groups for\nunconference sessions.  I presented my project to the Jenkins group.  Afterwards,\nthere was free time to chat with other attendees about my project and the other Jenkins\nprojects. Lastly, lightning talks were given before everyone headed to the contributor\nappreciation event to grab some food and drinks.\n\nDay 2\n\nI attended the Jenkins Pipeline Fundamentals Short Course in the morning. Even\nthough I’m working on a project for Jenkins, there’s still a lot I don’t know so\nI just wanted to try to learn more.\n\nA lot of the afternoon sessions filled up, so I spent the afternoon trying to meet\nother people at the conference, before heading to the keynote. The keynote\ntalked more about the CDF and some of the backstory behind its origin.  This year is also a big anniversary for Jenkins - it has now been\naround for 15 years.\n\nAfter the keynote, I checked out a Women in Tech mixer and\nthe opening of the exibition hall. Probably my favorite swag I picked up was the\n\"Will Code for Beer\" stickers and a bottle of hot sauce.\n\nDay 3\n\nThe morning began with another keynote. Shawn Ahmed of CloudBees talked about the\nchallenges of visibility into bottlenecks of the development process and Rajeev Mahajan\ndiscussed how HSBC tackled DevOps.  The rest of the day I attended different sessions\non container tooling, implementing CI/CD in a cloud native environment, running\nJenkins on Jenkins, and database DevOps.\n\nAfter the sessions finished, I wandered\naround the expo until it closed, then joined some of the other conference attendees\nto have some fun at a ping pong bar nearby.\n\nDay 4\n\nThe final and last day of the conference was probably my favorite.  The morning\nkeynote revealed that Zhao Xiaojie had won an award for his work on Jenkins advocacy,\nsome other DevOps award panelists talked about their approaches to different challenges,\nthen David Stanke gave an enjoyable presentation about cloud native CI/CD. I was\nable to present my summer project and attend a few more sessions, including one\nabout DevOps at scale, and another about use cases for machine learning in CI/CD pipelines.\n\nThe last keynote given by James Governor was a thoughtful look into the current and\nfuture states of tech. How does tech look like it will scale in the coming years\nin the U.S. and across the world? How can we make tech more inclusive and accessible?\nWhat can we do to minimize our environmental footprint?  In particular, his points\non welcoming people from a non-traditional computer science background resonated with\nme since I’m currently undergoing my own career transition to tech.\n\nAfter the conference ended, I said goodbye to the remaining GSoC org admins before\nmeeting an old friend for dinner and bringing along some new friends I met at the\nconference.  I spent the remaining part of the night singing karaoke with\nthem before heading out of San Francisco the next morning.\n\nThanks again to everyone who supported me and encouraged me leading up to and during\nmy presentation, patiently answered my questions as I tried to gather more context\nabout CI/CD tools and practices, and made my first DevOps conference so enjoyable!","title":"My DevOps World - Jenkins World 2019 Experience","tags":["pluginmanagement","devopsworld2019","gsoc","gsoc2019","community","events"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"stopalopa","html":"<div class=\"paragraph\">\n<p>Natasha is a Master&#8217;s student at Penn State University. She was accepted to Google Summer of Code 2019 for a project on creating <a href=\"https://jenkins.io/projects/gsoc/2019/plugin-installation-manager-tool-cli/\">a plugin management tool</a>.\nIn her spare time she enjoys spending time outdoors, listening to podcasts and cuddling with her cat.</p>\n</div>","id":"stopalopa","irc":null,"linkedin":null,"name":"Natasha Stopa","slug":"blog/author/stopalopa","twitter":"stopamine"}]}},{"node":{"date":"2019-08-19T00:00:00.000Z","id":"a8a6f50d-13d8-5ff0-b148-cd0ef7696ecf","slug":"/blog/2019/08/19/remoting-kafka-kubernetes-release-2.0/","strippedHtml":"I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. After a successful Phase 1, finally the 2.0 version of the plugin has been released. The 2.0 version provides seamless integration with Kubernetes environment.\n\n2.0 version features\n\nStart a simple Apache Kafka server in Kubernetes.\n\nDynamically provision Remoting Kafka Agent in Kubernetes.\n\nHelm chart to bootstrap the whole system in Kubernetes.\n\nStart a simple Apache Kafka server in Kubernetes\n\nUse of the plugin requires that users have a configured Apache Zookeeper and Apache Kafka server, which could be intimidating for people who just want to try out the plugin. Now, users can start a simple, single-node Apache Kafka server in Kubernetes environment with just one button click.\n\nOn the Global Configuration page, users can input Kubernetes server information and credentials. When users click Start Kafka on Kubernetes button, Jenkins will create a Kubernetes client from the information and then apply Apache Zookeeper and Apache Kafka YAML specification files from resources. After downloading images and creating containers, it will automatically update Apache Zookeeper and Apache Kafka URLs into respective fields.\n\nDynamically provision Remoting Kafka Agent in Kubernetes\n\nWith previous version, users have to manually add/remove nodes so it is hard to scale builds quickly. Kubernetes plugin allows us to dynamically provision agents in Kubernetes but it is designed for JNLP agent. With this new version, Remoting Kafka agent can also be provisioned automatically in Kubernetes environment.\n\nUsers can find the new feature in Cloud section in /configure. Here users could input Kubernetes connection parameters and desired Remoting Kafka agent properties including labels. When new build with matching labels gets started and there are no free nodes, Cloud will automatically provision Remoting Kafka agent pod in Kubernetes to run the build.\n\nHelm Chart\n\nHelm chart for Remoting over Apache Kafka plugin is based on stable/jenkins chart and incubator/kafka chart. You can follow the instruction here to install a demo ready-to-use Helm release. Your kubectl get all should look like this:\n\nNAME                                READY   STATUS    RESTARTS   AGE\npod/demo-jenkins-64dbd87987-bmndf   1/1     Running   0          2m21s\npod/demo-kafka-0                    1/1     Running   0          2m21s\npod/demo-zookeeper-0                1/1     Running   0          2m21s\n\nNAME                              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\nservice/demo-jenkins              NodePort    10.108.238.56 8080:30386/TCP               2m21s\nservice/demo-jenkins-agent        ClusterIP   10.98.85.184 50000/TCP                    2m21s\nservice/demo-kafka                ClusterIP   10.109.231.58 9092/TCP                     2m21s\nservice/demo-kafka-headless       ClusterIP   None 9092/TCP                     2m21s\nservice/demo-zookeeper            ClusterIP   10.103.2.231 2181/TCP                     2m21s\nservice/demo-zookeeper-headless   ClusterIP   None 2181/TCP,3888/TCP,2888/TCP   2m21s\n\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/demo-jenkins   1/1     1            1           2m21s\n\nNAME                                      DESIRED   CURRENT   READY   AGE\nreplicaset.apps/demo-jenkins-64dbd87987   1         1         1       2m21s\n\nNAME                              READY   AGE\nstatefulset.apps/demo-kafka       1/1     2m21s\nstatefulset.apps/demo-zookeeper   1/1     2m21s\n\nHow to Contribute\n\nYou are welcome to try out the plugin and integrate it into your current setup. If you find out any bug or if you would like to request new feature, you can create ticket at JIRA. If you would like to contribute code directly, you can create pull requests in the GitHub page below.\n\nLinks\n\nPhase 2 Demo Video\n\nPhase 2 Presentation Slides\n\nPhase 1 Blog Post\n\nPhase 1 Demo Video\n\nPhase 1 Presentation Slides\n\nRemoting over Apache Kafka plugin source code\n\nProject Page\n\nGitter Channel","title":"Remoting over Apache Kafka 2.0: Built-in Kubernetes support","tags":["remoting","kafka","kubernetes","helm","plugin","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"longngn","html":"<div class=\"paragraph\">\n<p>Long is a Software Engineering student at FPT University, Vietnam. He started to contribute for Jenkins from Google Summer of Code 2019 for the project <a href=\"https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/\">Remoting over Apache Kafka with Kubernetes features</a></p>\n</div>","id":"longnguyen","irc":null,"linkedin":null,"name":"Long Nguyen","slug":"blog/author/longnguyen","twitter":null}]}},{"node":{"date":"2019-08-16T00:00:00.000Z","id":"765c4285-c91b-5554-af65-6b25fe8433c3","slug":"/blog/2019/08/16/folder-auth-plugin/","strippedHtml":"During my Google Summer of Code Project,\nI have created the brand new Folder Auth Plugin for easily\nmanaging permissions to projects organized in folders from the Folders plugin.\nThis new plugin is designed for fast permission checks with easy-to-manage roles.\nThe 1.0 version of the plugin has just been released and can be downloaded\nfrom your Jenkins' Update center.\n\nThis plugin was inspired by the Role Strategy Plugin\nand brings about performance improvements and makes managing roles much easier.\nThe plugin was developed to overcome performance limitations of the Role Strategy\nplugin on a large number of roles. At the same time, the plugin addresses one\nof the most popular ways of organizing projects in Jenkins, through folders.\nThe plugin also has a new UI with more improvements to come in the future.\n\nThe plugin supports three types of roles which are applicable at different places\nin Jenkins.\n\nGlobal Roles: applicable everywhere in Jenkins\n\nAgent Roles: restrict permissions for multiple agents connected to your instance\n\nFolder Roles: applicable to multiple jobs organized inside folders\n\nPerformance Improvements over Role Strategy Plugin\n\nThis plugin, unlike the Role Strategy plugin, does not use regular expressions\nfor finding matching projects and agents giving us performance improvements\nand makes administrators' lives easier. To reduce the number of roles required\nto be managed, permissions given to a folder through a folder role get inherited\nto all of its children. This is useful for giving access to multiple projects\nthrough a single role. Similarly, an agent role can be applied to multiple agents\nand assigned to multiple users.\n\nThis plugin is designed to outperform Role Strategy Plugin in permission\nchecks. The improvements were measured using the\nmicro-benchmark framework\nI had created during the first phase of my GSoC project.\nBenchmarks for identical configurations for both plugin show that the\npermissions check are up to 934x faster for 500 global roles when compared to\nthe global roles from the Role Strategy 2.13, which in itself contains several\nperformance improvements. Comparing folder roles with Role Strategy’s project\nroles, a permission check for access to a job almost 15x faster for 250 projects\norganized in two-level deep folders on an instance with 150 users. You can see\nthe benchmarks and the result comparisons\nhere.\n\nJenkins Configuration as Code Support\n\nThe plugin supports Jenkins Configuration-as-Code so you can configure permissions\nwithout going through the Web UI. A YAML configuration looks like this:\n\njenkins:\n  authorizationStrategy:\n    folderBased:\n      globalRoles:\n        - name: \"admin\"\n          permissions:\n            - id: \"hudson.model.Hudson.Administer\"\n              # ...\n          sids:\n            - \"admin\"\n        - name: \"read\"\n          permissions:\n            - id: \"hudson.model.Hudson.Read\"\n          sids:\n            - \"user1\"\n      folderRoles:\n        - folders:\n            - \"root\"\n          name: \"viewRoot\"\n          permissions:\n            - id: \"hudson.model.Item.Read\"\n          sids:\n            - \"user1\"\n      agentRoles:\n        - agents:\n            - \"agent1\"\n          name: \"agentRole1\"\n          permissions:\n            - id: \"hudson.model.Computer.Configure\"\n            - id: \"hudson.model.Computer.Disconnect\"\n          sids:\n            - \"user1\"\n\nREST APIs with Swagger support\n\nThe plugin provides REST APIs for managing roles with OpenAPI specifications\nthrough Swagger.json. You can check out the Swagger API on\nSwaggerHub.\nSwaggerHub provides stubs in multiple languages which can be downloaded and\nused to interact with the plugin. You can also see some sample requests from\nthe command line using curl.\n\nWhat’s next\n\nIn the (not-too-distant) future, I would like to work on improving the UI and\nmake the plugin easier to work with. I would also like to work on improving the\nAPIs, documentation and more optimizations for improving the plugin’s performance.\n\nLinks and Feedback\n\nI would love to hear your comments and suggestions. Please feel free to reach\nout to me through either the\nRole Strategy Plugin Gitter chat or through\nJenkins Developer Mailing list.\n\nPresentation slides for second phase evaluations\n\nDocumentation for the Folder Auth Plugin\n\nDemo of the Folder Authorization plugin","title":"Introducing new Folder Authorization Plugin","tags":["plugins","security","performance","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"AbhyudayaSharma","html":"<div class=\"paragraph\">\n<p>Abhyudaya is a Computer Science student at Shiv Nadar University, India.\nHe is participating in Google Summer of Code 2019 to improve the performance\nof the <a href=\"https://github.com/jenkinsci/role-strategy-plugin\">Role Strategy Plugin</a>.</p>\n</div>","id":"abhyudayasharma","irc":null,"linkedin":null,"name":"Abhyudaya Sharma","slug":"blog/author/abhyudayasharma","twitter":null}]}},{"node":{"date":"2019-07-30T00:00:00.000Z","id":"9f72bb8f-5b81-55ef-8ffc-f58fb42841f2","slug":"/blog/2019/07/30/plugin-management-tool-phase2-updates/","strippedHtml":"At end of the first GSoC phase, I\nannounced\nthe first alpha release of the CLI tool and library that will help centralize\nplugin management and make plugin tooling easier.\n\nPhase 2 has mainly been focused on improving upon the initial CLI and library written\nin Coding Phase 1. In particular, we’ve been focusing on getting the tool ready to\nincorporate into the Jenkins Docker Image to replace the\ninstall-plugins.sh bash script\nto download plugins.  This work included parsing improvements so that blank lines and comments in the\nplugins.txt file are filtered out, allowing update centers and the plugin download\ndirectory to be set via environment variables or CLI Options, creating Windows\ncompatible defaults, and fixing a bug in which dependencies for specific\nplugin versions were not always getting resolved correctly.\n\nIn parallel to getting the tool ready for Jenkins Docker integration, Phase 2 saw\nthe addition of several new features.\n\nYaml Input\n\nIn addition to specifying the plugins they want to download via the --plugins\nCLI option or through a .txt file, users can now use a Jenkins yaml file with a\nplugins root element.\n\nSay goodbye to the days of specifying incremental\nplugins like incrementals;org.jenkins-ci.plugins.workflow;2.20-rc530.b4f7f7869384 -\n  you can enter the artifactId, groupId, and version to specify an incremental plugin.\n\nMaking the Download Process More Transparent\n\nPreviously, the plugin download process was not very transparent to users - it was\ndifficult to know the final set of plugins that would be downloaded after pulling in\nall the dependencies.  Instead of determing the set of plugins that will be downloaded\nat the time of download, users now have the option to see the full set of plugins\nand their versions that will be downloaded in advance. With the --list CLI\noption, users can see all currently downloaded and bundled plugins, the set of all\nplugins that will be downloaded, and the effective plugin set - the set of all\nplugins that are already downloaded or will be downloaded.\n\nViewing Information About plugins\n\nNow that you know which plugins will be downloaded, wouldn’t it be nice to know\nif these are the latest versions or if any of the versions you want to install have\nsecurity warnings?  You can do that now too.\n\nNext Steps and Additional Information\n\nThe updates mentioned in this blog will be released soon so you can try them out.\nThe focus of Phase 3 will be to continue to iterate upon and improve the library\nand CLI. We hope to release a first version and submit a pull request to Jenkins Docker soon.\nThanks to everyone who has already tried it out and given feedback! I will also be\npresenting my work at DevOps World\nin San Francisco in a few weeks.  You can use the code PREVIEW for a discounted registration\n($799 instead of $1,499).\n\nFeel free to reach out through\nthe Plugin Installation Manager CLI Tool Gitter chat or through\nthe Jenkins Developer Mailing list. I would love to get your questions, comments, and feedback!\nWe have meetings Tuesdays and Thursdays at 6PM UTC.\n\nPhase 2 Presentation Slides\n\nPhase 2 Recorded Demo\n\nJira Issue Search\n\nRepository","title":"Plugin Management Library and CLI Tool Phase 2 GSoC Updates","tags":["plugins","pluginmanagement","platform-sig","cli","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"stopalopa","html":"<div class=\"paragraph\">\n<p>Natasha is a Master&#8217;s student at Penn State University. She was accepted to Google Summer of Code 2019 for a project on creating <a href=\"https://jenkins.io/projects/gsoc/2019/plugin-installation-manager-tool-cli/\">a plugin management tool</a>.\nIn her spare time she enjoys spending time outdoors, listening to podcasts and cuddling with her cat.</p>\n</div>","id":"stopalopa","irc":null,"linkedin":null,"name":"Natasha Stopa","slug":"blog/author/stopalopa","twitter":"stopamine"}]}}]}},"pageContext":{"limit":8,"skip":120,"numPages":100,"currentPage":16}},
    "staticQueryHashes": ["3649515864"]}