{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/26",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-08-17T00:00:00.000Z","id":"003e40e9-a1b3-5859-a18a-60017d86c651","slug":"/blog/2018/08/17/speaker-blog-brent-laster/","strippedHtml":"More and more today, continuous delivery (CD) pipelines are making use of containers.\nIn many implementations, the primary workflow/orchestration tool for CD pipelines is Jenkins.\nAnd the primary container orchestration tool is Docker.\nTogether these two applications provide a powerful, yet simple to understand and use, model for leveraging containers in your CD pipeline.\n\nWhen creating a pipeline script in Jenkins, there are multiple ways to incorporate Docker into your CD pipeline.\nThey include:\n\nManually running a predefined Docker image as a separate Jenkins agent\n\nAutomatically provisioning a Docker image, when needed, as a part of a “cloud” configuration\n\nReferencing a “docker” global variable that can be invoked via the Jenkins DSL\n\nCalling the Docker executable directly via a shell call in the Jenkins DSL\n\nFor this article, we’ll focus on the third item in this list given that it provides the most flexibility and convenience for Docker use in the pipeline.\nMore details on the other three can be found in the upcoming “Continuous Delivery and Containerization” workshop at Jenkins World/DevOps World 2018.\n\nFirst, we’ll provide some background on a couple of terms for those who may not be familiar with Jenkins 2.\nIf you already are familiar with it, feel free to skip ahead to the Global Variables section.\n\nBackground\n\nWhen we talk about Jenkins here, we’re referring to “Jenkins 2” - a name we use to generally refer to the 2.0 and beyond versions of Jenkins.\nJenkins 2 offers a powerful evolution of Jenkins over prior versions.\nIn particular, it provides full integration for “pipeline-as-code” (PAC).\nPAC refers to being able to write your pipeline in a scripting language, much like source code for any program.\nThe code you write becomes the program that defines your pipeline.\nIt is also the code that gets executed when your pipeline is initiated.\nListing 1 shows a simple example pipeline.\nNotice that this is very different from the classic way of creating pipelines in Jenkins.\nHere you are writing code - rather than the more traditional approaches, such as filling in web forms to configure a Freestyle job.\n\n// Scripted Pipeline //\nnode('worker') {\n    stage('Source') { // Get code\n        // Get code from our git repository\n        git 'git@diyvb2:/home/git/repositories/workshop.git'\n    }\n    stage('Compile') { // Compile and do unit testing\n        // Run gradle to execute compile and unit testing\n        sh \"gradle clean compileJava test\"\n    }\n}\n// Declarative //\n\nListing 1: Example Jenkins 2 pipeline\n\nThe language that we write the Jenkins pipeline code in is a Domain-Specific Language (DSL).\nYou can think of it as the “programming language” for Jenkins pipelines.\nThere are two variants of it.\nThe style we saw in figure 1 is called “scripted syntax”.\nIt is a mixture of elements from the Groovy programming language and special Jenkins “steps”.\nThe Jenkins steps are provided by the plugins that are installed in the current system.\nA built-in tool called the Snippet Generator provides a wizard interface to allow users to pick the step and options they want.\nThen, the user can click on a button to have Jenkins automatically generate the correct DSL code in the large text box (figure 1).\nThe DSL code can be copied from there and pasted into the pipeline script.\n\nFigure 1. The Snippet Generator\n\nA second type of syntax is called “declarative syntax.”  We won’t go into detail on it here.\nBut it is a much more structured syntax that focuses on having users declare what they want in a pipeline, rather than writing the logic to make it happen.\n\nGlobal Variables\n\nIn addition to the steps that are provided by plugins, additional functionality for pipelines can be provided by global variables.\nThe simplest way to think of a global variable is as an object with methods that can be invoked on it.\nSeveral of these are built in to Jenkins, such as the Docker global variable.\nOthers can be created by users as part of the structure of a shared source code repository called a “shared pipeline library.”\n\nTo get a list of the global variables that are currently available to your Jenkins instance, you can go to the Snippet Generator screen.\nImmediately below the box for the generated pipeline script is a section titled Global Variables.\nThere, within the small print, is a link to get to the actual section (figure 2).\n\nFigure 2. Link to Global Variables Reference section.\n\nClicking on that link takes us to a list of currently available Global Variables.\nIf you have the Docker Pipeline Plugin installed, you will see one at the top for Docker. (Figure 3).\n\nFigure 3. Docker global variable specifics.\n\nBroadly, the docker global variable includes methods that can be applied to the Docker application, Docker images, and Docker containers.\n\nWe’ll focus first on a couple of the Docker image methods as shown in figure 4.\n\nFigure 4. Key methods for getting a Docker image.\n\nThere are multiple ways you can use these methods to create a new image.\nListing 2 shows a basic example of assigning and pulling an image using the image method.\n\nmyImage = docker.image(\"bclaster/jenkins-node:1.0\")\nmyImage.pull()\n\nListing 2: Assigning a image to a variable and pulling it down.\n\nThis can also be done in a single statement as shown in listing 3.\n\ndocker.image(\"bclaster/jenkins-node:1.0\").pull()\n\nListing 3: Shorthand version of previous call.\n\nYou can also download a Dockerfile and build an image based on it.(See listing 4.)\n\nnode() {\n    def myImg\n    stage (\"Build image\") {\n        // download the dockerfile to build from\n        git 'git@diyvb:repos/dockerResources.git'\n\n        // build our docker image\n        myImg = docker.build 'my-image:snapshot'\n    }\n}\n\nListing 4: Pipeline code to download a Dockerfile and build an image from it.\n\nFigure 5 shows the actual output from running that “Build image” stage.\nNote that the docker.build step was translated into an actual Docker build command.\n\nFigure 5. Actual Docker output from running the download and build\n\nThe Inside Command\n\nAnother powerful method available for the Docker global variable is the inside method.\nWhen executed, this method will do the following:\n\nGet an agent and a workspace to execute on\n\nIf the Docker image is not already present, pull it down\n\nStart the container with that image\n\nMount the workspace from Jenkins\n\nExecute the build steps\n\nMounting the workspace means that the Jenkins workspace will appear as a volume inside the container.\nAnd it will have the same file path.\nSo, things running in the container will have direct access to the same location.\nHowever, this can only be done if the container is running on the same underlying system - such that it can directly access the path.\n\nIn terms of executing the build steps, the inside method acts as a scoping method.\nThis means that the environment it sets up is in effect for any statement that happens within its scope (within the block under it bounded by {}).\nThe practical application here is that any pipeline “sh” steps (a call to the shell to execute something) are automatically run in the container.\nBehind the scenes, this is done by wrapping the calls with “docker exec”.\n\nWhen executed, the calls with the global variable are translated (by Jenkins) into actual Docker call invocations.\nListing 5 shows an example of using this in a script, along with the output from the first invocation of the “inside” method.\nYou can see in the output the docker commands that are generated from the inside method call.\n\nstage (\"Get Source\") {\n        // run a command to get the source code download\n        myImg.inside('-v /home/git/repos:/home/git/repos') {\n            sh \"rm -rf gradle-greetings\"\n            sh \"git clone --branch test /home/git/repos/gradle-greetings.git\"\n        }\n    }\n    stage (\"Run Build\") {\n        myImg.inside() {\n            sh \"cd gradle-greetings && gradle -g /tmp clean build -x test\"\n        }\n    }\n\nListing 5: Example inside method usage.\n\nFigure 6. Example inside method Docker command output.\n\nOnce completed, the inside step will stop the container,\nget rid of the storage, and create a record that this image was used for the build.\nThat record facilitates image traceability, updates, etc.\n\nAs you can see, the combination of using the Docker “global variable” and its “inside” method provide a simple and powerful way to spin up and work with containers in your pipeline.\nIn addition, since you are not having to make the direct Docker calls, you can invoke steps like sh within the scope of the inside method, and have them executed by Docker transparently.\n\nAs we mentioned, this is only one of several ways you can interact with Docker in your pipeline code.\nTo learn about the other methods and get hands-on practice, join me at DevOps World/Jenkins World in San Francisco or Nice for the workshop\n\" Creating a Deployment Pipeline with Jenkins 2\".\nHope to see you there!\n\nJoin the Jenkins project at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Using the Docker Global Variable in Your Jenkins Pipeline","tags":["event","jenkinsworld","jenkinsworld2018","pipeline","docker"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/19e71/brentlaster.jpg","srcSet":"/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/77b35/brentlaster.jpg 32w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/d4a57/brentlaster.jpg 64w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/19e71/brentlaster.jpg 128w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/68974/brentlaster.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/ef6ff/brentlaster.webp 32w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/8257c/brentlaster.webp 64w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/6766a/brentlaster.webp 128w,\n/gatsby-jenkins-io/static/04c1d7e712c641c082c7193fa99be1e5/22bfc/brentlaster.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"brentlaster","html":"<div class=\"paragraph\">\n<p>Brent Laster is a Senior Manager in the Research and Development division at SAS in Cary, North Carolina. He manages several groups involved with release engineering processes, best practices, and tooling. He also serves as a resource for the use of open-source technologies and conducts internal training classes in technologies such as Git, Gerrit, Gradle, and Jenkins, both in the U.S. and abroad.</p>\n</div>\n<div class=\"paragraph\">\n<p>Brent Laster is the author of \"Professional Git\"\n(a comprehensive guide to Git for users ranging from beginners to advanced)\nand \"Jenkins 2 – Up and Running:  Evolve Your Pipeline for Next-Generation Automation\".</p>\n</div>","id":"brentlaster","irc":null,"linkedin":null,"name":"Brent Laster","slug":"/blog/authors/brentlaster","twitter":"brentclaster"}]}},{"node":{"date":"2018-08-16T00:00:00.000Z","id":"8a951bf4-62b1-5a68-b1e8-22376e509229","slug":"/blog/2018/08/16/dwjw-2018-is-almost-here/","strippedHtml":"DevOps World | Jenkins World 2018 in San Francisco is only a month away.\nIt is shaping up to be a great event including the Contributor Summit,\nthe \"Ask the Experts\" desk at the Jenkin booth, several days of training and certifications,\nand tons of informative presentation and demos.\n\nTo give you a taste of what you’ll see this year at DevOps World | Jenkins World 2018,\nwe’ve lined up a series of guest blog posts by a number of this years speakers,\nstarting in the next week with posts from Tracy Miranda, Brent Laster, and Nicholas De Loof.\nFor now, let’s take a look at last year’s keynote from Kohsuke Kawaguchi.\n\nStay tuned!\n\nJoin the Jenkins project at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"DevOps World | Jenkins World 2018 is Almost Here","tags":["event","jenkinsworld","jenkinsworld2018"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2018-08-15T00:00:00.000Z","id":"09b0e766-f69d-5d93-bda5-3729f028d501","slug":"/blog/2018/08/15/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.138 and 2.121.3, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Jenkins 2.121.3 and 2.138 security updates","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-08-14T00:00:00.000Z","id":"2fa297fb-b9d2-5c87-846c-6ac7d68adea3","slug":"/blog/2018/08/14/simple-pull-request-plugin-final-evaluation/","strippedHtml":"About me\n\nI am Abhishek Gautam, 3rd year student from Visvesvaraya National Institute of\ntechnology, India, Nagpur. I was a member of ACM Chapter and Google student developer club of my\ncollege. I am passionate about automation.\n\nProject Summary\n\nThis is a GSoC 2018 project.\n\nThis project aims to develop a pull request Job Plugin. Users should be able to\nconfigure job type using YAML file placed in root directory of the\nGit repository being the subject of the pull request. The plugin should interact with various\nplatforms like Bitbucket, Github, Gitlab, etc whenever a pull request is created or updated.\n\nPlugin detects the presence of certain types of reports at conventional locations,\nand publish them automatically. If the reports are not present at their respective conventional\nlocation, the location of the report can be configured in the YAML file.\n\nMy mentors are\nOleg Nenashev (Org Admin),\nMartin d’Anjou,\nKristin Whetstone,\nJeff Knurek\n\nProject Repository\n\nProject repository\n\nCode changes\n\nAll the pull requests made can be found here\n\nList of major pull requests.\n\nPhase 1\n\nPR-5 : Git wrappers like clone, pull, checkout,\npullChangesOfPullrequest, merge, deleteBranch and merge added.\n\nPR-6 : Yaml to Declarative Pipeline code generation.\n\nPlease see Phase 1 blog post\n\nPhase 2\n\nPR-11 : Implemented StepConfigurator\nusing Jenkins configuration as code plugin.\n\nPR-19 : Unit tests created for agent and yaml to pipeline generation.\n\nPlease see Phase 2 blog post\n\nPhase 3\n\nPR-25 : Declarative pipeline code generator code\nexported to extensions for extensibility and support of custom sections\n\nJenkinsfile.yaml example\n\nDocumentation of Jenkinsfile.yaml and yaml format can be found here\n\nTasks completed in Coding Phase 3\n\nAdd unit tests, JenkinsRule tests JENKINS-52495\n\nRefactor snippet generator to extensions ( JENKINS-52491)\n\nPlugin overview (Present in README.md)\n\nFuture tasks\n\nPhase 3 Jira Epic\n\nRelease 1.0 ( JENKINS-52519)\n\nSupport the “when” Declarative Pipeline directive ( JENKINS-52520)\n\nNice2have: Support hierarchical report types ( JENKINS-52521)\n\nAcceptance Test Harness tests JENKINS-52496\n\nAutomatic Workspace Cleanup when PR is closed ( JENKINS-51897)\n\nTest Multi-Branch Pipeline features support:\n\nSupport for webhooks ( JENKINS-51941)\n\nCheck if trusted people have approved a pull request and start build accordingly ( JENKINS-52517)\n\nFinalize documentation ( JENKINS-52518)\n\nTest the integration with various platforms Bitbucket, Gitlab, Github.\n\nPhase 3 evaluation presentation video\n\nVideo: Link to video evaluation\n\nPhase 3 evaluation presentation slides\n\nLink to presentation slides\n\nMy GSoC experience\n\nStudent applications started on March 12 16:00 UTC and ended on March 27 16:00 UTC. Application period allowed me to explore\nmany new technology and platforms that are making peoples life easy.\n\nBefore starting of the application\nperiod I did not know anything about Jenkins. I found Jenkins organisation on the GSoC organisations page\nand came to know that I is a CI/CD platform that is used automate various things related to software development. I studied\nabout Jenkins online and went through the problem statements provided by some mentors.\n\nI decided that to work on Simple Pull-Request Job Plugin project.\nThen I wrote a draft proposal for this project and received many comments to refactor the proposal and enhance its quality from the mentors,\nthen finally I submitted my final proposal to Google.\n\nI was able to complete most of the tasks decided in Phase 1 and 2. After Phase 2 I was not able to give time to the project because\nof the placement season in the my college. I modified the code so that other plugin developers can contribute to it by Jenkins extensions.\n\nAll the mentors made themselves available for most of the weekly calls and provided many valuable suggestions during the\nentire period of GSoC. Sometimes I was not able to communicate effectively. As communication is the key while working remotely, mentors\nsuggested to communicate more thorough gitter chat.\n\nMy overall experience of GSoC was good and all the mentors helped me as they can all times. This project allowed me to explore\nJenkins and the services offered by it. I am allowed to work on the project after GSoC ends (This is a good thing).\n\nHow to reach me\n\nEmail: gautamabhishek46@gmail.com\n\nGitter room: https://gitter.im/Jenkinsci/simple-pull-request-job-plugin\n\nReferences\n\nProject repository\n\nProject page\n\nGitter chat\n\nBug Tracker\n\nDemo Repository","title":"alpha-3 release Pipeline as YAML (Simple pull request plugin)","tags":["gsoc2018","plugin","pipeline","yaml"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg","srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/77b35/abhishek_gautam.jpg 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/d4a57/abhishek_gautam.jpg 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/68974/abhishek_gautam.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/ef6ff/abhishek_gautam.webp 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/8257c/abhishek_gautam.webp 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/6766a/abhishek_gautam.webp 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/22bfc/abhishek_gautam.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"gautamabhishek46","html":"<div class=\"paragraph\">\n<p>Abhishek is a 3rd year Computer Science student from Visvesvaraya National\nInstitute of Technology, Nagpur, India. He has done some website projects for\nhis college technical festival. He is also a regular competitive programmer\n(abhishekg1128 at codechef). He has done two internships as a Game Programmer\nas well. He was a member of ACM Chapter and Google student developer club of his\ncollege. His interest in automation motivated his participation in the Jenkins\nGSOC 2018 program.</p>\n</div>","id":"abhishek_gautam","irc":"abhishekg","linkedin":null,"name":"Abhishek Gautam","slug":"/blog/authors/abhishek_gautam","twitter":null}]}},{"node":{"date":"2018-08-06T00:00:00.000Z","id":"e7cd7824-744d-512b-9ee1-51257e0c567a","slug":"/blog/2018/08/06/serverless-cicd-jenkins/","strippedHtml":"Everyone is talking about serverless.\n\nAs with any new hyped-technology the term 'serverless' is often overloaded with different meanings.\nSometimes serverless is oversimplified to mean function-as-a-service(faas).\nBut there is more to it than that.\nAlso, not many people are talking about doing CI/CD with serverless,\neven though where there is code there still in need of continuous integration and continuous delivery.\nSo I was excited to hear about this talk by\nAnubhav Mishra on\nBuilding a CI/CD Pipeline for Serverless Applications.\n\nIn the talk Anubhav proposes a new definition for serverless:\n\n\"\"\nServerless is a technology pattern that provides services and concepts to minimize operational overhead that comes with managing servers.\nIt is a powerful abstraction when used can result in an increased focus on business value.\n\"\"\n\nThe talk then goes on to demo Jenkins on AWS Fargate (a platform for running containers without managing servers or clusters).\nThe main focus is on increased elasticity/scaling.\n\nThe advantages of this approach are:\n\nNo nodes/servers to manage\n\nLaunch 10,000+ builds/containers in seconds\n\nNo cost for idle time\n\nThe real headline is the cost saving, which is 2 orders of magnitude better with serverless.\nA cost comparison is done based on 1 vCPU & 2GB memory:\n\nWith Jenkins on Fargate: 100 builds * 5 mins = $0.633/month\n\nWith Jenkins on EC2 Instances: ~50/month\n\nThis huge potential cost saving is one of the things that makes serverless incredibly compelling.\nNot to mention you don’t have to think much upfront about scaling the system.\n\nBut there are drawbacks with this approach, noted as:\n\nCold starts - slower boot times for clients\n\nLarge container images (~1G)\n\nNo root access\n\nEphemeral storage (default)\n\nThis is an area where Jenkins can continue to evolve to make the most of serverless architectures.\nI highly recommend you check out the\nslides for yourself.\nThe best part is that, in the true spirit of open source, Anubvha shared the code\nhere.\nSo you can give it a try yourself and build your own serverless CI/CD pipeline with Jenkins.","title":"Building a Serverless CI/CD Pipeline with Jenkins","tags":["serverless","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}}},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda","twitter":"tracymiranda"}]}},{"node":{"date":"2018-07-30T00:00:00.000Z","id":"3f5d0df0-bf7b-55f9-bbfe-fd861133015d","slug":"/blog/2018/07/30/introducing-cloud-native-sig/","strippedHtml":"On large-scale Jenkins instances controller disk and network I/O become bottlenecks in particular cases.\nBuild logging and artifact storage were one for the most intensive I/O consumers,\nhence it would be great to somehow redirect them to an external storage.\nBack in 2016 there were active discussions about such Pluggable Storage for Jenkins.\nAt that point we created several prototypes, but then other work took precedence.\nThere was still a high demand in Pluggable Storage for large-scale instances,\nand these stories also become a major obstacle for cloud native Jenkins setups.\n\nI am happy to say that the Pluggable Storage discussions are back online.\nYou may have seen changes in the Core for Artifact Storage\n( JEP-202)\nand a new Artifact Manager for S3 plugin.\nWe have also created a number of JEPs for External Logging\nand created a new Cloud Native Special Interest Group (SIG)\nto offer a venue for discussing changes and to keep them as open as possible.\n\nTomorrow Jesse Glick and I will be\npresenting the current External Logging designs at the\nCloud Native SIG online meeting,\nyou can find more info about the meeting here.\nI decided that it is a good time to write about the new SIG.\nIn this blogpost I will try to provide my vision of the SIG and its purpose.\nI will also summarize the current status of the activities in the group.\n\nWhat are Special Interest Groups?\n\nIf you follow the developer mailing list,\nyou may have seen the discussion about introducing SIGs\nin the Jenkins project.\nThe SIG model has been proposed by\nR. Tyler Croy,\nand it largely follows the successful\nKubernetes SIG model.\nThe objective of these SIGs is to make the community more transparent to contributors\nand to offer venues for specific discussions.\nThe idea of SIGs and how to create them is documented in\nJEP-4.\nJEP-4 is still in Draft state, but a few SIGs have been already created using that process:\nPlatform SIG, GSoC SIG and, finally,\nCloud Native SIG.\n\nSIGs are a big opportunity to the Jenkins project,\noffering a new way to onboard contributors who are interested only in particular aspects of Jenkins.\nWith SIGs they can subscribe to particular topics without\nfollowing the entire Developer mailing list which can become pretty buzzy nowadays.\nIt also offers company contributors a clear way how to join community and participate in specific areas.\nThis is great for larger projects which cannot be done by a single contributor.\nLike JEPs, SIGs help focus and coordinate efforts.\n\nAnd, back to major efforts…​\nLack of resources among core contributors was one of the reasons\nwhy we did not deliver on Pluggable Storage stories back in 2016.\nI believe that SIGs can help fix that in Jenkins,\nmaking it easier to find groups with the same interests and\nreach out to them in order to organize activity.\nRegular meetings are also helpful to get such efforts moving.\n\nPoints above are the main reasons why I joined the Cloud Native SIG.\nSimilarly, that’s why I decided to create a Platform SIG\nto deliver on major efforts like Java 10+ support in Jenkins.\nI hope that more SIGs get created soon so that contributors could focus on areas of their interest.\n\nCloud Native SIG\n\nIn the original proposal Carlos Sanchez,\nthe Cloud Native SIG chair, has described the purpose of the SIG well.\nThere has been great progress this year in cloud-native-minded projects like Jenkins X and Jenkins Evergreen,\nbut the current Jenkins architecture does not offer particular\nfeatures which could be utilized there:\nPluggable Storage, High Availability, etc.\nThere are ways to achieve it using Jenkins plugins and some infrastructure tweaks,\nbut it is far from the out-of-the-box experience.\nIt complicates Jenkins management and slows down development of new cloud-native solutions for Jenkins.\n\nSo, what do I expect from the SIG?\n\nDefine roadmap towards Cloud-Native Jenkins architecture\nwhich will help the project to stay relevant for Cloud Native installations\n\nProvide a venue for discussion of critical Jenkins architecture changes\n\nAct as a steering committee for Jenkins Enhancement Proposals in the area of\nCloud-Native solutions\n\nFinally, coordinate efforts between contributors and get new\ncontributors onboard\n\nWhat’s next in the SIG?\n\nThe SIG agenda is largely defined by the SIG participants.\nIf you are interested to discuss particular topics,\njust propose them in the SIG mailing list.\nAs the current SIG page describes,\nthere are several areas defined as initial topics:\nArtifact Storage,\nLog Storage,\nConfiguration Storage\n\nAll these topics are related to the Pluggable Storage Area,\nand the end goal for them is to ensure that all data is externalized\nso that replication becomes possible.\nIn addition to the mentioned data types,\ndiscussed at the Jenkins World 2016 summit,\nwe will need to externalize other data types:\nItem and Run storage,\nFingerprints,\nTest and coverage results,\netc.\nThere is some foundation work being done for that.\nFor example, Shenyu Zheng is working on a\nCode Coverage API plugin\nwhich would allow to unify the code coverage storage formats in Jenkins.\n\nOnce the Pluggable Storage stories are done the next steps are true High Availability, rolling or canary upgrades and zero downtime.\nAt that point other foundation stories like Remoting over Kafka\nby Pham Vu Tuan\nmight be integrated into the Cloud Native architecture to make Jenkins more robust against outages within the cluster.\nIt will take some time to get to this state, but it can be done incrementally.\n\nLet me briefly summarize current state of the 3 focuses listed in the Cloud Native SIG.\n\nArtifact Storage\n\nThere are many existing plugins allowing to upload and download artifacts from external storage\n(e.g. S3, Artifactory, Publish over SFTP, etc., etc.),\nbut there are no plugins which can do it transparently without using\nnew steps.\nIn many cases the artifacts also get uploaded through the controller,\nand it increases load on the system.\nIt would be great if there was a layer which would allow storing artifacts externally\nwhen using common steps like Archive Artifacts.\n\nArtifact storage work was started this spring by Jesse Glick, Carlos Sanchez and\nIvan Fernandez Calvo\nbefore the Cloud Native SIG was actually founded.\nCurrent state:\n\nJEP-202 \"External Artifact Storage\"\nhas been proposed in the Jenkins community.\nThis JEP defines API changes in the Jenkins core which are needed to\nsupport External artifact managers\n\nJenkins Pipeline has been updated to support external artifact storages\nfor archive / unarchive and stash / unstash\n\nNew Artifact Manager for S3 plugin\nreference implementation of the new API.\nThe plugin is available in main Jenkins update centers\n\nA number of plugins has been updated in order to support\nexternal artifact storage\n\nThe Artifact Manager API is available in Jenkins LTS starting from 2.121.1,\nso it is possible to create new implementations using the provided API and\nexisting implementations.\nThis new feature is fully backward compatible with the default Filesystem-based storage,\nbut there are known issues for plugins explicitly relying on artifact locations in JENKINS_HOME\n(you can find a list of such plugins\nhere).\nIt will take a while to get all plugins supported,\nbut the new API in the core should allow migrating plugins.\n\nI hope we will revisit the External Artifact Storage at the SIG meetings at some point.\nIt would be a good opportunity to do a retrospective and to understand how to improve the process\nin SIG.\n\nLog storage\n\nLog storage is a separate big story.\nBack in 2016 External logging was one of the key Pluggable Storage stories we defined at the contributor summit.\nWe created an EPIC for the story ( JENKINS-38313)\nand after that created a number of prototypes together with\nXing Yan and Jesse Glick.\nOne of these prototypes for Pipeline has recently been updated and published\nhere.\n\nJesse Glick and Carlos Sanchez\nare returning to this story and plan to discuss it within the Cloud Native SIG.\nThere are a number of Jenkins Enhancement proposals which have been submitted recently:\n\njep:207[] -\nExternal Build Logging support in the Jenkins Core\n\njep:210[] -\nExternal log storage for Pipeline\n\njep:212[] -\nExternal Logging API Plugin\n\njep:206[] -\nUse UTF-8 for Pipeline build logs\n\nIn the linked documents you can find references to current reference implementations.\nSo far we have a working prototype for the new design.\nThere are still many bits to fix before the final release,\nbut the designs are ready for review and feedback.\n\nThis Tuesday (Jul 31) we are going to have a SIG meeting in order to present the current state and to discuss the proposed designs and JEPs.\nThe meeting will happen at 3PM UTC.\nYou can watch the broadcast using this link.\nParticipant link will be posted in the SIGs Gitter channel 10 minutes before the meeting.\n\nConfiguration storage\n\nThis is one of the future stories we would like to consider.\nAlthough configurations are not big, externalizing them is a critical task\nfor getting highly-available or disposable Jenkins controllers.\nThere are many ways to store configurations in Jenkins,\nbut 95% of cases are covered by the XmlFile layer which\nserializes objects to disk and reads them using the XStream library.\nExternalizing these XmlFile s would be a great step forward.\n\nThere are several prototypes for externalizing configurations,\ne.g. in DotCI.\nThere are also other implementations which could be upstreamed to the Jenkins core:\n\nAlex Nordlund has recently proposed a\npull request\nto Jenkins Core, which should make the XML Storage pluggable\n\nJames Strachan has implemented similar engine\nfor Kubernetes in the kubeify prototype\n\nI also did some experiments with externalizing XML Storages back in 2016\n\nThe next steps for this story would be to aggregate implementations into a single JEP.\nI have it in my queue, and I hope to write up a design once we get more clarity on the External logging stories.\n\nConclusions\n\nSpecial Interest Groups are a new format for collaboration and disucssion in the Jenkins community.\nAlthough we have had some work groups before (Infrastructure, Configuration-as-Code, etc.),\nintroduction of SIGs sets a new bar in terms of the project transparency and consistency.\nMajor architecture changes in Jenkins are needed to ensure its future in the new environments,\nand SIGs will help to boost visibility and participation around these changes.\n\nIf you want to know more about the Cloud Native SIG,\nall resources are listed on the SIG’s page on jenkins.io.\nIf you want to participate in the SIG’s activities, just do the following:\n\nSubscribe to the mailing list\n\nJoin our Gitter channel\n\nJoin our public meetings\n\nI am also working on organizing a face-to-face Cloud Native SIG meeting at the\nJenkins Contributor Summit,\nwhich will happen on September 17 during\nDevOps World | Jenkins World in San Francisco.\nIf you come to DevOps World | Jenkins World,\nplease feel free to join us at the contributor summit or to meet us at the community booth.\nTogether with Jesse and Carlos we are also going to present some bits of our work at the\nA Cloud Native Jenkins talk.\n\nStay tuned for more updates and demos on the Cloud-Native Jenkins fronts!","title":"Introducing Jenkins Cloud Native SIG","tags":["community","sig","cloud-native","cloud-native-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-07-25T00:00:00.000Z","id":"f66d8201-21f2-5fce-ba34-d032e061e6fe","slug":"/blog/2018/07/25/contributor-summit/","strippedHtml":"The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.\nThis summit will be on Monday, September 17th 2018 in San Francisco, just before DevOps World | Jenkins World.\nThe summit brings together community members to learn, meet and help shape the future of Jenkins.\nIn the Jenkins commmunity we value all types and sizes of contributions and love to welcome new participants.\nRegister here.\n\nTopics\n\nThere are plenty of exciting developments happening in the Jenkins community.\nThe summit will feature a 'State of the Project' update including updates from the Jenkins officers.\nWe will also have updates on the 'Big 5' projects in active development:\n\nJenkins Evergreen\n\nJenkins X\n\nConfiguration as Code\n\nJenkins Pipeline\n\nCloud Native Jenkins Architecture\n\nPlus we will feature a Google Summer of Code update, and more!\n\nAgenda\n\nThe agenda is shaping up well and here is the outline so far.\n\n9:00am Kickoff & Welcome with coffee/pastries\n\n10:00am Project Updates\n\n12:00pm Lunch\n\n1.00pm BoF/Unconference\n\n3.00pm Break\n\n3.30pm Ignite Talks\n\n5.00pm Wrap-up\n\n6.00pm Contributor Dinner\n\nThe BoF (birds-of-a-feather) session will be an opportunity for in depth discussions, hacking or learning more about any of the big 5.\nBring your laptop, come prepared with questions and ideas, and be ready for some hacking too if you want.\nJoin in, hear the latest and get involved in any project during the BoF sessions.\nIf you want to share anything there will be an opportunity to do a 5-min ignite talk at the end.\nAttending is free, and no DevOps World | Jenkins World ticket is needed, but RSVP if you are going to attend to help us plan.\nSee you there!","title":"Join us at the Jenkins Contributor Summit San Francisco, Monday 17 September 2018","tags":["community","events","jenkins-world"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}}},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda","twitter":"tracymiranda"}]}},{"node":{"date":"2018-07-23T00:00:00.000Z","id":"bc08dba7-169b-5284-bbaa-6f3d64408472","slug":"/blog/2018/07/23/javadoc-service-improvements/","strippedHtml":"Jenkins infrastructure is continuously improving.\nThe latest service to get some attention and major improvement is the Jenkins javadoc.\n\nThere were a number of issues affecting that service:\n\nIrregular updates -\nDevelopers wouldn’t find the latest java documentation because of inadequate update frequence.\n\nBroken HTTPS support -\nwhen users would go to the Javadoc site they would get an unsafe site warning and then an incorrect redirection.\n\nObsolete content - Javadoc was not cleaned up correctly and plenty of obsolete pages remained which confused end users.\n\nAs Jenkins services\nmigrate to Azure infrastructure,\nsomething that needed to be done was to move the javadoc service there as a standalone service.\nI took the same approach as jenkins.io, putting data on an azure file storage, using a nginx proxy in front of it and running on kubernetes.\nThis approach brings multiple benefits:\n\nWe store static files on an azure file storage which brings data reliability, redundancy, etc.\n\nWe use Kubernetes Ingress to configure HTTP/HTTPS endpoint\n\nWe use Kubernetes Service to provide load balancing\n\nWe use Kubernetes deployment to deploy default nginx containers with azure file storage volume.\n\nHTTP/HTTPS workflow\n\n+----------------------+     goes on     +------------------------------+\n  |  Jenkins Developer   |---------------->+  https://javadoc.jenkins.io  |\n  +----------------------+                 +------------------------------+\n                                                                      |\n  +-------------------------------------------------------------------|---------+\n  | Kubernetes Cluster:                                               |         |\n  |                                                                   |         |\n  | +---------------------+     +-------------------+     +-----------v------+  |\n  | | Deployment: Javadoc |     | Service: javadoc  <-----| Ingress: javadoc |  |\n  + +---------------------+     +-------------------+     +------------------+  |\n  |                                           |                                 |\n  |                          -----------------+                                 |\n  |                          |                |                                 |\n  |                          |                |                                 |\n  | +------------------------v--+    +--------v------------------+              |\n  | | Pod: javadoc              |    | Pod: javadoc              |              |\n  | | container: \"nginx:alpine\" |    | container: \"nginx:alpine\" |              |\n  | | +-----------------------+ |    | +-----------------------+ |              |\n  | | | Volume:               | |    | | Volume:               | |              |\n  | | | /usr/share/nginx/html | |    | | /usr/share/nginx/html | |              |\n  | | +-------------------+---+ |    | +----+------------------+ |              |\n  | +---------------------|-----+    +------|--------------------+              |\n  |                       |                 |                                   |\n  +-----------------------|-----------------|-----------------------------------+\n                          |                 |\n                          |                 |\n                       +--+-----------------+-----------+\n                       |   Azure File Storage: javadoc  |\n                       +--------------------------------+\n\nThe javadoc static files are now generated by a Jenkins\njob regularly and then published from a trusted jenkins instance.\nWe only update what has changed and remove obsolete documents.\nMore information can be find\nhere\n\nThe next thing in continuously improving is also to look at the user experience of the javadoc to make it easier to discover javadoc for other components or versions.\n( Help Needed)\n\nThese changes all go towards improving the developer experience for those using javadocs and making life easier for core and plugin developers.\nSee the new and improved javadoc service here\nJenkins Javadoc.","title":"Jenkins Javadoc: Service Improvements","tags":["javadoc","azure","infrastructure","kubernetes"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak","twitter":"0lblak"}]}}]}},"pageContext":{"limit":8,"skip":200,"numPages":100,"currentPage":26}},
    "staticQueryHashes": ["3649515864"]}