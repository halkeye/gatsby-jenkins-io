{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/31",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-04-11T00:00:00.000Z","id":"ed222945-0b4b-5227-9e90-64450f40170f","slug":"/blog/2018/04/11/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.116 and 2.107.2, that fix two security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-04-10T00:00:00.000Z","id":"de012828-154d-5d83-8b81-e1199eaa8685","slug":"/blog/2018/04/10/opinionated-cd-jenkins-x/","strippedHtml":"I\nrecently wrote\nabout how all the cloud platforms are all in Kubernetes and so are developers.\nIt is an exciting time, but the problem for many is that this is\na huge blank sheet of paper for how to build and deploy applications.\nA white space, a void, a limitless canvas of possibilities.\nInsert metaphors here.\n\nThe problem, as you may guess, is that few people really like or are able to start with a blank canvas.\nI know I prefer to start with something working and iterate towards a solution,\nor be given some rails to stay on (again with the metaphors).\n\nThat’s where the Jenkins X project comes in.\nJenkins X is a Kubernetes-native continuous integration and continuous delivery platform\nfor developing cloud native applications that was recently introduced as a\nJenkins Enhancement Proposal,\nsponsored by James Strachan.\n\nThere is a lot to take in but at it’s heart,\nthis is an open source opinionated way to do continuous delivery with Kubernetes,\nnatively, without necessarily having to learn all the things I talked about in my last blog post.\nI shall attempt to explain what this is all about and why it matters to developers.\nAs someone said on the jenkins-dev mailing list\n“We have the two glued together with baling wire and twine” -\nJenkins X aims to simplify how to work with continuous delivery and Kubernetes.\n\nFirst and most importantly, let’s see the logo:\n\nYou can see the nautical theme leaking through (and Kubernetes).\nWhilst it is called Jenkins X, it is about quite a lot more than Jenkins.\n\nJenkins X makes decisions for you\n\nJenkins X presents itself to you initially as a handy sleek command line\n(a native binary you can install called jx - the debate is on as to how pronounce it).\nLet’s take a tour (sail?):\n\njx import my-app\n\nIf you have an existing project, this will detect what type of project it is, build a pipeline for you (and a bunch of Kubernetes things, like Helm Charts), add it to your project and set it up in GitHub, WebHooks and all, build the project (run the pipeline) and deploy a version to a “staging” environment.\n\nIf it looks ok, you can promote it to production:\n\njx promote --env production --version 1.0.1 my-app\n\nIf something went wrong in production, you can roll back an app to any version (the version numbers are made for you):\n\njx promote --env production --version 1.0.0 my-app\n> jx get apps # list versions\n\nAn environment is a well-established concept for web developers using\ncontinuous delivery: out of the box Jenkins X makes three of them for you\n(dev, staging and production), but you can make as many as you like.\nEnvironments have rules around how things are promoted into them\n(and they also have their own extensible pipelines,\nbut you can just use them as-is to start).\n\nYou can also create a Spring Boot microservice app:\n\njx create spring\n\nAnswer a few questions and it will set everything up for you.\n\nAny changes you make to your app automatically are built,\nand if the build looks good, they go through to the staging environment.\nWebHooks are setup for you (if you are using GitHub) to smooth this over.\n\nFor those looking at starting from pre-made apps, there are \"quickstarts\":\n\njx create quickstart\n\nThey are based on a growing set of starter apps, in a variety of languages and tech stacks.\n\nReview apps for your changes: Each pull request is built/tested,\nand a “review app” is made available in a temporary environment.\nThat means each proposed change, before it goes to the default branch (master),\nhas an environment made (temporary) that it can be tried out in.\nIn GitHub, this shows up as a comment in the pull request:\n\nProject type detection\n\nAs you can see, so far there is no editing or manual creation of pipelines,\nor scripting or setup, just importing or creating your app and go.\nThis is powered by\nDraft “packs”\n(a handy project that came out of Azure).\n What you end up with is a Jenkinsfile in your project repository.\n You may want to edit it one day, or you may be happy with it as is!\n Jenkins is famous for being un-opinionated in what you do,\n but Jenkins X has strong opinions (but you can extend and customise).\n\nimage::/images/jenkins-x/draft-logo.png[Draft Logo, width=300]\n\nDeploying or promoting to environments\n\nDeploying happens via pipelines behind the scenes -\nwhen a change is pushed, or a version promoted.\nYou don’t need to directly interact with Kubernetes if you don’t need to.\nA tool called Helm does the heavy lifting:\nHelm is used to package and perform installations and upgrade for your apps.\n\nThere is a little more magic going on here with environments, which you don’t see at first.\nEach environment, for a team, is represented by a Git repository behind the scenes.\nConfiguration as code is a well-established best practice these days,\nso why not use it to track deployments and initiate deployments.\nI also mentioned in my previous post how declarative Kubernetes is:\nit is perfect for keeping all config in a repository, of the desired system state.\n\nEach promotion is actually a pull request to a per-environment repository.\nThis repository is made and managed for you (and kept outside of the\nmain application code repository), you don’t have to look at it,\nbut you can extend things there should you need to.\nSpecific environment repositories may have different access rules,\nor be controlled by a different team (perhaps even deploy to a different cluster).\nSome have coined the term for this as “GitOps.”\nI first came across this concept on a\nWeaveWorks blog.\n\nI’ll try and explain this one with a diagram:\n\nThe pipeline is actually split in the middle.\nOn the left is the more familiar continuous integration pipeline.\nThis works on pull requests, pre-release version of things\nand is all about testing(automated and manual review).\nThe source of truth for this is the configuration in the\napplications repository: branches, pull requests and so on.\n\nThe right-hand side is the continuous delivery pipeline.\nThis kicks in when the application is ready to be updated with a new release.\nThis is the “GitOps” repo behind the scenes that controls the state of things in Kubernetes.\nA promotion on this side is a pull request, and then a merge,\nfrom the staging repository to the production repository.\n\nInstalling Jenkins X\n\nThe jx command line has a jx install command that installs it into a Kubernetes cluster.\n\nThe best experience initially is using Google’s excellent GKE service:\n\njx create cluster gke\n\nThis will ask a few questions, and go and set it all up for you in a\ncluster set aside for Jenkins X (recommended).\nJenkins X runs entirely as services on top of a Kubernetes cluster.\n\njx install\n\nIs designed to work with a Kubernetes cluster (if it already exists,\nrecommendation is to have a cluster put aside for Jenkins X if possible).\nAmazon EKS support is coming (mostly it is around testing),\nthat service is in beta/early access so it is still a work in progress,\nas is Microsoft Azures excellent AKS service.\n\nSo where is Jenkins?\n\nGood question, thanks for asking. Well, it is behind the scenes.\nAs you have seen, there was no direct interaction with Jenkins,\nbut it is there, running the pipelines for continuous integration and\ncontinuous delivery of the respective repositories, and orchestrating things with Kubernetes.\n\nIf you run jx get pipelines you can see URLs to the various pipelines\nthat have been setup for you are part of interacting with Jenkins X.\n\nBy the way,\nJames Strachan has written an extensive blog on jenkins.io\nthat really explores the Jenkins X project in-depth.\nOnce you finish reading this blog, take a stroll on over there and read James'.\nHe also provides several ways you can get involved in the project.\n\nWhat else can I do with the command line?\n\nLots, the jx command line has built in help:\n\njx open\n\nopen apps, services or pipelines in your browser\n\njx activity\n\nexplains how things got to where they are, a history\n\njx get environments\n\nlist environments\n\njx get apps\n\nshow the state of applications, what versions are in what environments.\n\nWhat’s next\n\nThere is a whole lot more to this, and lots more moving parts and services\nthat are set up for you that are very useful, but it is best to head over\nto jenkins-x.io and have a look.\n\nThis project is obviously in early stages (it is stll a Draft JEP after all) and there is lots happening.\nCheck out the Jenkins X community\nif you want to chat on slack, IRC, issues or email.\nAlso, read the\nJenkins Enhancement Proposal doc.","title":"Opinionated Kubernetes and Jenkins X","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale","twitter":"michaelneale"}]}},{"node":{"date":"2018-04-09T00:00:00.000Z","id":"3494cf73-5468-5673-9163-ca20378f0110","slug":"/blog/2018/04/09/whats-in-declarative/","strippedHtml":"Last week we released the latest version of Declarative Pipelines, version\n1.2.8. With that out, we thought now would be a good time to introduce you to\nthe new features and options that have been added to Declarative since the\nbeginning of 2018. These are all available now in the Update Center, with\nversion 1.2.8.\n\nDeclarative Directive Generator\n\nThis is something we’re really happy about - if you go to the \"Pipeline Syntax\"\nlink from your Pipeline’s page in Jenkins, you’ll see a couple new links on the\nleft, including \"Declarative Directive Generator\". The Directive Generator is\nmuch like the Snippet Generator that’s been in Pipeline for a couple years now,\nbut where the Snippet Generator is just for filling out a form for a step and\ngenerating the Pipeline code that configuration maps to, the Directive\nGenerator is built to help you write your Declarative Pipeline directives, like\nagent, options, stage, and more!\n\nThis is the first release to include the Directive Generator, and it’s\ndefinitely going to see more polish going forward, but we think it should be\nquite helpful for you already. We’ll be putting up another blog post looking at\nthe Directive Generator in more detail in the near future.\n\nNew when conditions\n\nWe’ve added a number of new when conditions, providing you more control over\nwhether your stages get executed.\n\nequals - Compares two values - strings, variables, numbers, booleans - and\nreturns true if they’re equal. I’m honestly not sure how we missed adding\nthis earlier! You can do \"not equals\" comparisons using the not { equals …​\n} combination too.\n\nchangeRequest - In its simplest form, this will return true if this\nPipeline is building a change request, such as a GitHub pull request. You can\nalso do more detailed checks against the change request, allowing you to ask\n\"is this a change request against the master branch?\" and much more.\n\nbuildingTag - A simple condition that just checks if the Pipeline is\nrunning against a tag in SCM, rather than a branch or a specific commit\nreference.\n\ntag - A more detailed equivalent of buildingTag, allowing you to check\nagainst the tag name itself.\n\nIn addition, we’ve added a new option to when : beforeAgent. This allows you\nto specify that the when conditions should be evaluated before entering the\nagent for the stage, rather than the normal behavior of evaluating when\nconditions after entering the agent. When beforeAgent true is specified,\nyou will not have access to the agent’s workspace, but you can avoid\nunnecessary SCM checkouts and waiting for a valid `agent to be available. This\ncan speed up your Pipeline’s execution in some cases.\n\nNew post conditions\n\nThe changed condition has always been a bit confusing, and to be\nhonest, it wasn’t our best work. changed will fire any time the current run’s\nstatus is different than the previous run’s status - whether the current run is\nhealthier than the previous one, or the other way around. That’s…​not actually\nvery useful. So now we’ve added two new post conditions that should provide\nyou with a lot more value than changed has.\n\nfixed - This will check to see if the current run is successful, and if the\nprevious run was either failed or unstable.\n\nregression - This will check to see if the current run’s status is worse\nthan the previous run’s status. So if the previous run was successful, and\nthe current run is unstable, this will fire and its block of steps will\nexecute. It will also run if the previous run was unstable, and the current\nrun is a failure, etc.\n\nNew options\n\nThe options directive in Declarative can contain a number of different kinds\nof configuration: traditional Jenkins job properties, like buildDiscarder,\nwrapper steps to execute the entire Pipeline within, like timeout, and\nDeclarative-specific options that can switch from some default behaviors of\nDeclarative execution. We’ve added two new Declarative-specific options in the\nlast few releases.\n\ncheckoutToSubdirectory - Allows you to override the location that the\nautomatic SCM checkout will use. Using checkoutToSubdirectory(\"foo\"), your\nPipeline will checkout your repository to\"$WORKSPACE/foo\", rather than the\ndefault of\"$WORKSPACE\".\n\nnewContainerPerStage - If you’re using a top-level docker or dockerfile\nagent, and want to ensure that each of your stages run in a fresh container\nof the same image, you can use this option. Any stage without its own\nagent specified will run in a new container using the image you’ve\nspecified or built, on the same computer and with access to the same\nworkspace.\n\nStage options\n\nSometimes, you may only want to disable automatic checkout of your repository,\nusing the skipDefaultCheckout(true) option, for one specific stage in your\nPipeline. Or perhaps you want to have a timeout that covers an entire\nstage, including time spent waiting for a valid agent, post condition\nexecution, or the new input directive for stages (see further down for more\ndetails on that!). To make those things possible, we’ve added a new options\ndirection to stage. You can use a subset of the top-level options content\nin a stage’s `options - wrapper steps, and Declarative-specific options that\nare marked as legal in a stage.\n\nInput\n\nYou’ve always been able to run the input step inside a stage’s `steps\nblock, but we’ve found that approach can lose out on some of the value that the\ninput step provides.\n\nTo help with that, we’ve added a new input directive\nto stage, with the same parameters as the input step. When you use the\nstage input directive rather than using the step directly, any parameters\nyou’ve specified for the input will be made available in the stage’s\nenvironment, meaning you can reference parameters from the `input in when\nconditions, or in environment variables.\n\n// Declarative //\npipeline {\n    agent none\n    stages {\n        stage('Example') {\n            input {\n                message \"Should we continue?\"\n                ok \"Yes, we should.\"\n                submitter \"alice,bob\"\n                parameters {\n                    string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')\n                }\n            }\n            agent any\n            steps {\n                echo \"Hello, ${PERSON}, nice to meet you.\"\n            }\n        }\n    }\n}\n// Script //\n\nAlso, the input directive is evaluated before you enter any agent specified\non this stage, so if you are using a top-level agent none and each stage\nhas its own agent specified, you can avoid consuming an executor while\nwaiting for the input to be submitted.\n\nLastly, you can use timeout in the stage options, as\nmentioned above, to time-out the input if too much time has passed without a\nresponse.\n\nI hope you find these new features and options for Declarative Pipelines\nhelpful, and I look forward to the rest of 2018 as we continue to invest and\nimprove in Jenkins Pipeline!","title":"The new things arriving in Declarative Pipeline!","tags":["pipeline","declarative"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"<div class=\"paragraph\">\n<p>Andrew was a core committer to Hudson and the author of numerous plugins.</p>\n</div>","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/authors/abayer","twitter":"abayer"}]}},{"node":{"date":"2018-04-06T00:00:00.000Z","id":"f074f9a0-3eb3-5f51-9a32-4b65a80079ce","slug":"/blog/2018/04/06/jenkins-essentials/","strippedHtml":"Jenkins Essentials has been renamed to Jenkins Evergreen since this was written.\n\nIn his presentation at the 2017 Jenkins World Contributor Summit,\nKohsuke\nchallenged us to continue the work started with Jenkins 2 of making Jenkins\neasier to install and easier to use. \"A user should be successful with Jenkins\nin under five minutes and five clicks.\" At that same Contributor Summit, a few\nof us discussed the idea of a distribution which had \"batteries\nincluded\", which\nAndrew\nproudly named \"Jenkins Essentials.\" At the time I was certainly not as excited\nabout the project as I am now, I thought to myself \"we built a Setup Wizard in\nJenkins 2, nobody needs a Setup Wizard++.\"\n\nAs Kohsuke and I continued to discuss the idea, more and more ideas came up.\nTowards the end of 2017 the picture became much clearer: Jenkins Essentials\nwould be a comprehensive, low-maintenance distribution to help new and\nexisting users be successful with Jenkins, without needing to be Jenkins\nexperts. This will of course not replace the existing distribution of Jenkins core and\nits plugins, which allow many of us large amounts of flexibility, but rather it\nwill make Jenkins easier for users who don’t want to \"build it themselves.\"\n\nThe more I thought about it, the more excited about the idea I became: Jenkins\nEssentials could open the door to new improvements and features in Jenkins\nwhich had been left in the \"idea and design\" phase going back almost two\nyears! Really, I checked, some of the concepts adopted into the design of\nJenkins Essentials were first conceived of in early 2016!\n\nKohsuke briefly discussed the project in\nhis previous blog post\nbut in post I wanted to expand on what Jenkins Essentials is, and our\nprogress has been in its development.\n\nWhat’s in Jenkins Essentials\n\nA few months ago I prepared\nthis presentation\nfor the\nFOSDEM 2018\nJenkins Contributor Summit, which outlines the following \"pillars\" or Jenkins\nEssentials, which are also described in\nJEP-300 :\n\nAutomatically Updated Distribution\n\nAutomatic Sane Defaults\n\nConnected\n\nObvious Path to User Success\n\nAutomatically Updated Distribution\n\nIn order to provide an easier-to-use and easier-to-manage Jenkins environment,\nJenkins Essentials will be distributed as an automatically self-updating\ndistribution, containing Jenkins core and a version-locked set of plugins\nconsidered \"essential.\" Rather than attempting to mirror the existing Weekly\nand LTS release lines for core, plus some plugin version matrix, Jenkins\nEssentials will update in a manner similar to Google Chrome.\n\nThis automatically updating distribution will mean that Jenkins Essentials will\nrequire significantly less overhead to manage, receiving improvements and bug\nfixes without any user involvement. From the user perspective, their Jenkins\nwill appear to automatically improve over time.\n\nThere is really interesting work being pioneered by\nBaptiste Mathus\nwith\nJEP-302\nto ensure that these automatic upgrades can be performed safely.\n\nAutomatic Sane Defaults\n\nProviding a core along with \"essential\" plugins is a good first step to helping\nJenkins users successfully automate their CI/CD workloads, but requires\nadditional \"smoothing\" over some of the numerous options and configurations\nplugins. Jenkins Essentials will perform some amount of \"automatic\nenvironment-based self-configuration.\"\n\nFor example, clicking a \"Launch Stack\" button from the Download\npage would launch an AWS-flavored Jenkins Essentials which, out of the box\nattempts to set up AWS-specific configuration with S3 and EC2 services.\n\nConnected\n\nIn order to provide a more seamless experience for end-users, and ensure that\nJenkins project developers receive useful error and usage telemetry to drive\nfurther improvements in Jenkins, Jenkins Essentials must necessarily be viewed\nas a \" Connected\" application. This means some yet-to-be-specified number of\nserver-side applications to coordinate updates, receive and process telemetry,\nbroker 3rd-party service authentications, relay webhooks, etc.\n\nObvious Path to User Success\n\nThe final pillar in Jenkins Essentials, is to ensure that Jenkins provides an\nobvious path for a user to configure and use it successfully. This largely\nentails in-application documentation, examples, and disabling legacy\nfunctionality within the application. All with the end goal of preventing users\nfrom inadvertently choosing legacy, or poorly supported, options when\nconfiguring their CI/CD workloads.\n\nProgress thus far\n\nSuffice it to say, Jenkins Essentials is a hugely ambitious project! We have\nbeen making steady progress however, as you can see in the\njenkins-infra/evergreen\nrepository on GitHub. We have been adamantly following the\nJenkins Enhancement Proposal\nprocess, and have been making sure our designs and implementations are clear as\nwe build them. Thus far we’ve written designs and implemented:\n\nJEP-300: Jenkins Essentials\n\nJEP-301: Evergreen packaging for Jenkins Essentials\n\nJEP-302: Evergreen snapshotting data safety system\n\nJEP-303: Evergreen Client Registration and Authentication\n\nJEP-304: Essentials Client Error Telemetry Logging\n\nUnfortunately we don’t yet have the first parts of the Automatically Updated Distribution working,\nwhich means you cannot download Jenkins Essentials today and get started with\nit. We’re still building the Jenkins-side and server-side components necessary\nto make the full feedback loop operate, without which we would not be able to\nsafely deliver new upgrades to Jenkins Essentials installations.\n\nIf you’re interested in getting involved, you can check out our\nGitter channel\nor our\nJira issues board.\n\nJenkins Essentials is just one major initiative going on in the Jenkins project\nthis year, so I hope you’re as excited as I am for the future of Jenkins!","title":"Jenkins Essentials: five minutes, five clicks","tags":["evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2018-03-20T00:00:00.000Z","id":"62b57ba0-b3a6-537c-a4d3-5430fc151996","slug":"/blog/2018/03/20/evolving-mission-of-jenkins/","strippedHtml":"Lately, perhaps subtle but exciting changes are starting to happen in the Jenkins project.\n\nThe past few weeks have seen the birth of two new initiatives in Jenkins:\nJenkins Essentials and\nJenkins X.  Each is\nexciting in its own right, and I encourage interested parties to take a look at\ntheir goals and missions and participate in them.  But in this post, I want to\ndiscuss why together these two dots form an important arc, which actually\nstarted in the introduction of Jenkins 2 and continued with Blue Ocean.\n\nIn Jenkins 2, we changed Jenkins so that it starts with richer functionality\nand more sensible security setup, among other things.  This was the first step\nin a new direction for Jenkins.  We changed our focus from “we’ll write plugins\nand you figure out the rest” to “we’ll write plugins, we’ll assemble them, and\nwe’ll help you be more productive.”\n\nBlue Ocean was another step on this journey.  We focused on important\ncontinuous delivery use cases in Jenkins, and aimed to provide a great\nuser-experience for those use cases.  Aside from obvious productivity boost for\nusers, it also decidedly blended together feature areas that are internally\nprovided by a whole bunch of different plugins, but users see much less seam\nbetween them.\n\nJenkins Essentials, which R Tyler Croy proposed in\nrecent weeks, is another step forward.  That project aims to take an even\nbigger responsibility in keeping people’s Jenkins instances up and running.\nLike Blue Ocean, Jenkins Essentials focuses on delivering a comprehensive\nJenkins user experience rather than a collection of unrelated plugins which\nusers have to figure out how to wire together.  It also creates an exciting\nvehicle for contributors, in which we can develop and deliver features quite\ndifferently, and more rapidly, than how we deliver them today.\n\nJenkins X, which was proposed by James Strachan a\nfew weeks after Jenkins Essentials, is the latest point on this same arc.\nJenkins X brings a different aspect to building a solution — it focuses on a\nspecific vertical area, namely Kubernetes application development, and\ndrastically simplifies the software development in that domain by bringing\ntogether Jenkins, a whole bunch of plugins, and an opinionated best practice of\nhow one should use Kubernetes.\n\nCollectively, the arc that these efforts form aims to solve the most important\nand consistent concerns for Jenkins users — ease of use, plugin complexity,\nfear of upgrade, etc.\n\nIn the early days of Jenkins, it was up to each and every Jenkins admin to find\nthe right way to assemble pieces into a solution for their organizations, but\nthis hard work remained largely private.  Now, these newer projects are\nbringing this back into the community.  They are making Jenkins more valuable\nto existing users, and more approachable and useful to a whole new set of users\nwho are not currently using Jenkins.\n\nFrom that perspective, I hope more projects like them will follow, pushing us\nbeyond “just writing plugins”, taking even bigger steps to make users\nproductive.  This is a little bit like how I watched Eclipse evolve from just a\nJava IDE to an umbrella of projects.\n\nExciting times!","title":"Evolving Mission of Jenkins","tags":["jenkins-x","evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2018-03-19T00:00:00.000Z","id":"13be0610-c1c9-59de-ab77-d3fdaf0d1add","slug":"/blog/2018/03/19/introducing-jenkins-x/","strippedHtml":"We are excited to share and invite the community to join us on a project we’ve been thinking about over the last few months called Jenkins X which extends the Jenkins ecosystem to solve the problem of automating CI/CD in the cloud.\n\nBackground\n\nThe last few years have seen massive changes in the software industry:\n\nuse of immutable container images for distributing software which are smaller, easier to work with and lead to cheaper infrastructure costs than VMs alone (approx 20% less on average)\n\nKubernetes has become the defacto way of installing, upgrading, operating and managing containers at scale on any public or hybrid cloud\n\n2018 is the year all the major public clouds, operating system vendors and PaaS offerings support Kubernetes natively\n\nwe now have an open source industry standard for distributing, installing and managing applications on any cloud!\n\nincreased adoption of microservices and cloud native applications leading to massive increase in the number of components which require CI/CD along with increased release frequency\n\nimprovements in DevOps practices coming from the community such as the State of DevOps Report which show the approach of high performing teams\n\nincreasingly many businesses now realise that to compete you have to deliver value quickly via software\n\nteams need to become high performing if the business is to succeed\n\nAll of this adds up to an increased demand for teams to have a solution for cloud native CI/CD with lots of automation!\n\nIntroducing Jenkins X\n\nJenkins X is a project which rethinks how developers should interact with CI/CD in the cloud with a focus on making development teams productive through automation, tooling and DevOps best practices.\n\nJenkins X is open source and we invite you to give us feedback and to contribute to the project.\n\nWhats the big deal?\n\nFor many years Jenkins has been capable of doing pretty much anything in the CI/CD space; the challenge has always been figuring out how to get the right plugins, configuration and code to work together in your Jenkinsfile.\n\nFor me the big deal about Jenkins X is as a developer you can type one command jx create or jx import and get your source code, git repository and application created, automatically built and deployed to Kubernetes on each Pull Request or git push with full CI/CD complete with Environments and Promotion via GitOps!\n\nDevelopers and teams don’t have to spend time figuring out how to package software as docker images, create the Kubernetes YAML to run their application on kubernetes, create Preview environments or even learn how to implement CI/CD pipelines with declarative pipeline-as-code Jenkinsfiles. It’s all automated for you out of the box! So you can focus instead on delivering value!\n\nAt the same time, Jenkins X doesn’t hide anything. If you do want to hack the Dockerfile, Jenkinsfile or Helm charts for your apps or their environments then go right ahead - those are all available versioned in git with the rest of your source code with full CI/CD on it all. GitOps FTW!\n\nJenkins X automates CI/CD and DevOps best practices for you - so you can become a faster performing team! Let your butler do more work for you!\n\nDemo\n\nHere’s a demonstration of Jenkins X running on GKE:\n\nYou can check out more demos here.\n\nJenkins X Features\n\nNow lets walk through the features of Jenkins X that we showed in the demo:\n\nAutomated CI/CD Pipelines\n\nCreate new Spring Boot projects, new quickstarts or import existing source code quickly into Jenkins X via the jx command line tool and:\n\nget a Pipeline automatically setup for you that implements best practice CI/CD features:\n\ncreates a Jenkinsfile for defining the CI/CD pipelines through declarative pipeline-as-code\n\ncreates a Dockerfile for packaging the application up as an immutable container image (for applications which generate images)\n\ncreates a Helm chart for deploying and running your application on Kubernetes\n\nensures your code is in a git repository (e.g. GitHub) with the necessary webhooks to trigger the Jenkins CI/CD pipelines on push events\n\ntriggers the first release pipeline to promote your application to your teams Staging Environment\n\nThen on each Pull Request:\n\na CI pipeline is triggered to build your application and run all the tests ensuring you keep the master branch in a ready to release state\n\nyour Pull Request is deployed to a Preview Environment (more on this later)\n\nWhen a Pull Request is merged to the master branch the Release pipeline is triggered to create a new release:\n\na new semantic version number is generated\n\nthe source code is modified for the new version (e.g. pom.xml files get their elements modified) and then tagged in git\n\nnew versioned artifacts are published including:\n\ndocker image, helm chart and any language specific artifacts (e.g. pom.xml and jar files for Java, npm packages for node or binaries for go etc)\n\nthe new version is promoted to Environments (more on this later)\n\nEnvironment Promotion via GitOps\n\nIn Jenkins X each team gets their own environments. The default environments are Staging and Production but teams can create as many environments as they wish and call them whatever they prefer.\n\nAn Environment is a place to deploy code and each Environment maps to a separate namespace in Kubernetes so they are isolated from each other and can be managed independently.\n\nWe use something called GitOps to manage environments and perform promotion. This means that:\n\nEach environment gets its own git repository to store all the environment specific configuration together with a list of all the applications and their version and configuration.\n\nPromotion of new versions of applications to an environment results in:\n\na Pull Request is created for the configuration change that triggers the CI pipeline tests on the Environment along with code review and approval\n\nonce the Pull Request is merged the release pipeline for the environment which updates the applications running in that environment by applying the helm chart metadata from the git repository.\n\nEnvironments can be configured to either promote automatically as part of a release pipeline or they can use manual promotion.\n\nThe defaults today are for the Staging environment to use automatic promotion; so all merges to master are automatically promoted to Staging. Then the Production environment is configured to use manual promotion; so you choose when do promote.\n\nHowever it is easy to change the  configuration of how many environments you need and how they are configured via the jx create environment and jx edit environment commands\n\nPreview Environments\n\nJenkins X lets you create Preview Environments for Pull Requests. Typically this happens automatically in the Pull Request Pipelines when a Pull Request is submitted but you can also perform this manually yourself via the jx preview command.\n\nThe following happens when a Preview Environment is created:\n\na new Environment of kind Preview is created along with a kubernetes namespace which show up the jx get environments command along with the jx environment and jx namespace commands so you can see which preview environments are active and switch into them to look around\n\nthe Pull Request is built as a preview docker image and chart and deployed into the preview environment\n\na comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application. So in one click your team members can try out the preview!\n\nThis is particularly useful if you are working on a web application or REST endpoint; it lets your team interact with the running Pull Request to help folks approve changes.\n\nFeedback\n\nIf the commit comments reference issues (e.g. via the text fixes #123) then Jenkins X pipelines will generate release notes like those of the jx releases.\n\nAlso, as the version associated with those new commits is promoted to Staging or Production, you will get automated comments on each fixed issue that the issue is now available for review in the corresponding environment along with a link to the release notes and a link to the app running in that environment. e.g.\n\nGetting started\n\nHopefully you now want to give Jenkins X a try. One of the great features of Jenkins is that it’s super easy to get started: install Java, download a war and run via java -jar jenkins.war.\n\nWith Jenkins X we’ve tried to follow a similarly simple experience. One complication is that Jenkins X has more moving pieces than a single JVM; it also needs a Kubernetes cluster :)\n\nFirst you need to download and install the jx command line tool so its on your PATH.\n\nThen you need to run a single command to create a new Kubernetes cluster and install Jenkins X (in this example, on GKE).\n\njx create cluster gke\n\nToday we support creating Kubernetes clusters and installing Jenkins X on Amazon (AWS), Google (GKE), Microsoft Azure, and even locally using minikube.\nWe plan to support AWS EKS soon.\n\nAt the time of this writing the easiest cloud to get started with is Google’s GKE so we recommend you start there unless you already use AWS or Azure. Amazon and Microsoft are working hard to make Kubernetes clusters as easy to create and manage as they are on GKE.\n\nAll the public clouds have a free tier so you should be able to spin up a Kubernetes cluster and install Jenkins X for a few hours then tear it down and it should be cheaper than a cup of coffee (probably free!). Just remember to tear down the cluster when you are done!\n\nHere’s a demo of creating a kuberentes cluster and installing Jenkins X :\n\nIf you really don’t want to use the public cloud, you can install Jenkins X on an existing kubernetes cluster (if it has RBAC enabled!). Or, if you can install and run minikube, then you should be able to install Jenkins X on it as well.\n\nRelationship between Jenkins and Jenkins X\n\nJenkins is the core CI/CD engine within Jenkins X. So Jenkins X is built on the massive shoulders of Jenkins and its awesome community.\n\nWe are proposing Jenkins X as a sub project within the Jenkins foundation as Jenkins X has a different focus: automating CI/CD for the cloud using Jenkins plus other open source tools like Kubernetes, Helm, Git, Nexus/Artifactory etc.\n\nOver time we are hoping Jenkins X can help drive some changes in Jenkins itself to become more cloud native, which will benefit the wider Jenkins community in addition to Jenkins X.\n\nPlease join us!\n\nSo I hope the above has given you a feel for the vision of where we are heading with Jenkins X and to show where we are today. The project is still very young, we have lots to do and we are looking for more input on where to go next and what to focus on. We’re also working on high level roadmap.\n\nTo make Jenkins X a success we’d love you to get involved, try it out and give us feedback in the community! We love contributions whether its email, chat, issues or even better Pull Requests ;).\n\nIf you’re thinking of contributing here’s some ideas:\n\nGive us feedback. What could we improve? Anything you don’t like or you think is missing?\n\nHelp improve the documentation so its more clear how to get started and use Jenkins X\n\nAdd your own quickstarts so the Jenkins X community can easily bootstrap new projects using your quickstart. If you work on an open source project is there a good quickstart we could add to Jenkins X?\n\nIf you’d like to contribute to the code then try browse the current issues.\n\nwe have marked issues help wanted or good first issue to save you hunting around too much\n\nin particular we would love help on getting Jenkins X working well on windows or the integrations with cloud services, git providers and issues trackers\n\nfor more long term goals we’ve the roadmap\n\nwe could always use more test cases and to improve test coverage!\n\nTo help get faster feedback we are using Jenkins X as the CI/CD platform to develop Jenkins X itself. For example Jenkins X creates all the releases and release notes. We’ll talk more about UpdateBot in a future blog post but you can see all the automated pull requests generated in the various Jenkins X pipelines via UpdateBot pushing version changes from upstream dependencies into downstream repositories.\n\nNote that the Jenkins community tends to use IRC for chat and the Kubernetes community uses Slack, so Jenkins X has rooms for both IRC and slack depending on which chat technology you prefer - as the Jenkins X community will be working closely with both the Jenkins community and the various Kubernetes communities (Kubernetes, Helm, Skaffold, Istio et al).\n\nOne of the most rewarding things about open source is being able to learn from others in the community. So I’m hoping that even if you are not yet ready to use Kubernetes in your day job or are not yet interested in automating your Continuous Delivery - that you’ll at least consider taking a look at Jenkins X, if for no other reason than to help you learn more about all these new ideas, technologies and approaches!\n\nThanks for listening and I’m looking forward to seeing you in the community.\n\nLinks\n\nJenkins X JEP proposal\n\nJenkins X website\n\nGetting Started Guide\n\nDemos","title":"Introducing Jenkins X: a CI/CD solution for modern cloud applications on Kubernetes","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg","srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/77b35/jstrachan.jpg 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/d4a57/jstrachan.jpg 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/68974/jstrachan.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/ef6ff/jstrachan.webp 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/8257c/jstrachan.webp 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/6766a/jstrachan.webp 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/22bfc/jstrachan.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"jstrachan","html":"<div class=\"paragraph\">\n<p>James is a long time open source contributor, created the Groovy programming language and Apache Camel integration framework.\nFor the past few years he&#8217;s been working on CI/CD with Kubernetes.</p>\n</div>","id":"jstrachan","irc":null,"linkedin":null,"name":"James Strachan","slug":"/blog/authors/jstrachan","twitter":"jstrachan"}]}},{"node":{"date":"2018-03-19T00:00:00.000Z","id":"38e42feb-38b4-5fe4-a4e2-04f6086cd0bc","slug":"/blog/2018/03/19/password-audit/","strippedHtml":"Last year, news of compromised passwords being used for accounts able to distribute NPM packages made the rounds.\n\nTheir system looks similar to how publishing of plugins works in the Jenkins project:\n\nAccounts are protected by passwords chosen by users.\n\nIndividual contributors have permission to release the components they maintain.\n\nThe components they release are used by millions of developers around the world to deliver their software.\n\nIn other words, weak passwords are a problem for us just as much as for NPM, and what happened to them could happen to us.\n\nTo address this problem, the Jenkins security and infra teams have recently collaborated on a password audit.\nThe audit covered all accounts with permissions to upload plugins and components, and on accounts with other levels of privileged infrastructure access.\nWe ran brute force tools on salted password hashes of those accounts looking for \"weak\" passwords — passwords present in a set of publicly available password lists we chose for this audit.\n\nWe checked the password of every qualifying account for every unsafe password rather than trying to match them to any previous password leaks' email/password pairs.\nUsers with weak account passwords were notified via email a few weeks ago and were asked to change their password to something stronger.\n\nWe performed the same checks over the previous weekend, but this time we only checked the passwords of accounts whose passwords were deemed weak during our first check.\nWe then invalidated the password of any account whose password was still not considered \"strong\" (i.e. their password was unchanged or had been changed to another weak password).\nUsers of those accounts will need to request a password reset before signing in again.\n\nWe plan to implement further safeguards, including improving the account management app at https://accounts.jenkins.io to reject weak passwords.\nIf you’re interested in helping the security team make Jenkins more secure, let us know on the jenkinsci-dev mailing list, or request to join the security team.","title":"Jenkins community account password audit","tags":["security","community"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-03-15T00:00:00.000Z","id":"f1ff4387-7033-572c-9fef-b871cfb88ad0","slug":"/blog/2018/03/15/jep-200-lts/","strippedHtml":"This is a post about a major change in Jenkins, which is available starting\nfrom Jenkins 2.102 and Jenkins LTS 2.107.1.\nThis is a change with a serious risk of regressions in plugins.\nIf you are a Jenkins administrator, please read this blogpost and\nupgrade guidelines\nBEFORE upgrading.\n\nI would like to provide some heads-up about the\nJEP-200 change,\nwhich is included into the new Jenkins LTS 2.107.x baseline.\n\nBackground\n\nFor many years Jenkins used to specifically blacklist certain classes and packages according to known or suspected exploits.\nThis approach has been proven unsustainable due to the risk of deserialization attacks via unknown classes\nfrom 3rd-party components, after the\nSECURITY-429/CVE-2017-1000353 fix in 2.46.2\nit was decided to replace blacklists by more restrictive whitelists.\nIn October 2017 Jesse Glick proposed a Jenkins Enhancement Proposal,\nwhich finally got accepted as JEP-200.\n\nThe change implies a risk of regressions in plugins serializing non-whitelisted Java-internal and 3rd-party classes,\nand that’s why it is so important to follow the upgrade guidelines for this release.\n\nCurrent state\n\nJEP-200 was first integrated in Jenkins 2.102 (released in January 2018), and it has got a lot of testing since that.\nSee this blogpost for the original announcement.\n\nOver the last two months we received more than 75 issues from users of Jenkins weekly releases.\nAll these issues have been triaged, and we have released most of the fixes.\nMore than 50 plugins were fixed in total, and many more plugins were updated in order to enable compatibility testing.\nA significant part of the discovered regressions were caused by real defects which were causing performance and stability\nissues in plugins.\nThanks a lot to all the Jenkins contributors and plugin maintainers who helped deliver timely changes for this effort!\n\nOver last 6 weeks Jenkins weekly releases had positive community ratings,\nthe overall JEP-200 adoption reached ~12% of all Jenkins installations on March 01.\nAll major plugins have been also tested directly or verified in the wild on weekly releases.\nSo we are confident that the change is ready to be released in LTS.\n\nOn the other hand, we continue to receive JEP-200 regression reports.\nThey are mostly caused by niche plugins which are not widely used in weekly releases,\nand unfortunately not all fixes have been released yet (see the Wiki page for up-to-date info).\nWe anticipate more regressions to be reported after the LTS release and broader adoption.\n\nIn order to simplify the upgrade to the new LTS baseline,\nI have prepared some helpful materials together with Liam Newman\nand Jesse Glick.\nBelow you can find the embedded slide deck and video, or scroll down to see the key information\nin the text form.\n\nVideo:\n\nFor Jenkins administrators\n\nUpgrading to a core with JEP-200 requires a special update procedure, which is described below.\n\nUpgrading Jenkins\n\nJEP-200 is not the only major change in 2.107.1, please read\nthe full upgrade guide carefully\n\nIf you have a way of testing the upgrade before applying it to production, do it\n\nBack up your instance so you have any easy way of rolling back\n\nUpdate all affected plugins.\nSee this Wiki page for the list of affected plugins,\nfix statuses and workarounds\n\nApply workarounds for non-released patches if needed (see below)\n\nUpdate to the new version of the Jenkins core\n\nUsing backups and staging servers is good advice before any upgrade but especially this one,\ngiven the relatively high risk of regression.\nDue to the nature of the changes, some plugins may refuse to load after the upgrade and cause your Jenkins service to fail to start.\n\nAfter the upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nStill, it is highly advised to monitor your system after the upgrade, especially the following:\n\nJenkins System log (especially during the startup)\n\nJob/Build logs\n\nIf you do encounter a log message referencing the https://jenkins.io/redirect/class-filter/ URL,\nmost likely it is a JEP-200 regression.\nExample:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nIf you see this kind of message, we highly recommend reporting it so that it can be investigated and probably fixed quickly.\n\nReporting JEP-200 issues\n\nStarting from May 01, JEP-200 issues are triaged by plugin and core maintainers.\nJEP-200 maintainers are available for code reviews if needed,\nbut they will not be reviewing cases in JIRA and searching for miscategorized issues on a daily basis.\nIf you experience new JEP-200 regressions, please follow the guidelines below.\n\nPlease report any issues you encounter matching the above pattern in the\nJenkins issue tracker, under the appropriate plugin component.\nBefore reporting please check whether this issue has already been reported.\n\nAdd the JEP-200 label\n\nInclude the stacktrace you see in the log\n\nIf possible, include complete steps to reproduce the problem from scratch\n\nYou can find examples of previously reported issues using this query.\n\nJenkins developers will evaluate issues and strive to offer a fix in the form of a core and/or plugin update.\nRight after the feature release there was be a special team triaging the reports.\nStarting from May 01 the issues will be triaged by plugin and core maintainers.\nSee JEP-200 Maintenance plan for more info.\n\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nApplying workarounds\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nNote the class name(s) mentioned in the JEP-200 log messages,\nand run Jenkins with the hudson.remoting.ClassFilter startup option, e.g.:\n\njava -Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName -jar jenkins.war ...\n\nThis workaround process may require several iterations, because classes whitelisted in the workaround may also\ninclude fields with types requiring whitelisting.\n\nFor plugin developers\n\nIf you are a plugin developer, please see the original JEP-200 announcement.\nThat blog post provides guidelines for testing and fixing plugin compatibility after the JEP-200 changes.\nThe presentation above also provides some information about what needs to be tested.","title":"Security hardening: Jenkins LTS 2.107.1 switches XStream / Remoting blacklists to whitelists (JEP-200)","tags":["core","security","remoting","upgrade"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"limit":8,"skip":240,"numPages":100,"currentPage":31}},
    "staticQueryHashes": ["3649515864"]}