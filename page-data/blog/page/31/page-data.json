{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/31",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-03-20T00:00:00.000Z","id":"62b57ba0-b3a6-537c-a4d3-5430fc151996","slug":"/blog/2018/03/20/evolving-mission-of-jenkins/","strippedHtml":"Lately, perhaps subtle but exciting changes are starting to happen in the Jenkins project.\n\nThe past few weeks have seen the birth of two new initiatives in Jenkins:\nJenkins Essentials and\nJenkins X.  Each is\nexciting in its own right, and I encourage interested parties to take a look at\ntheir goals and missions and participate in them.  But in this post, I want to\ndiscuss why together these two dots form an important arc, which actually\nstarted in the introduction of Jenkins 2 and continued with Blue Ocean.\n\nIn Jenkins 2, we changed Jenkins so that it starts with richer functionality\nand more sensible security setup, among other things.  This was the first step\nin a new direction for Jenkins.  We changed our focus from “we’ll write plugins\nand you figure out the rest” to “we’ll write plugins, we’ll assemble them, and\nwe’ll help you be more productive.”\n\nBlue Ocean was another step on this journey.  We focused on important\ncontinuous delivery use cases in Jenkins, and aimed to provide a great\nuser-experience for those use cases.  Aside from obvious productivity boost for\nusers, it also decidedly blended together feature areas that are internally\nprovided by a whole bunch of different plugins, but users see much less seam\nbetween them.\n\nJenkins Essentials, which R Tyler Croy proposed in\nrecent weeks, is another step forward.  That project aims to take an even\nbigger responsibility in keeping people’s Jenkins instances up and running.\nLike Blue Ocean, Jenkins Essentials focuses on delivering a comprehensive\nJenkins user experience rather than a collection of unrelated plugins which\nusers have to figure out how to wire together.  It also creates an exciting\nvehicle for contributors, in which we can develop and deliver features quite\ndifferently, and more rapidly, than how we deliver them today.\n\nJenkins X, which was proposed by James Strachan a\nfew weeks after Jenkins Essentials, is the latest point on this same arc.\nJenkins X brings a different aspect to building a solution — it focuses on a\nspecific vertical area, namely Kubernetes application development, and\ndrastically simplifies the software development in that domain by bringing\ntogether Jenkins, a whole bunch of plugins, and an opinionated best practice of\nhow one should use Kubernetes.\n\nCollectively, the arc that these efforts form aims to solve the most important\nand consistent concerns for Jenkins users — ease of use, plugin complexity,\nfear of upgrade, etc.\n\nIn the early days of Jenkins, it was up to each and every Jenkins admin to find\nthe right way to assemble pieces into a solution for their organizations, but\nthis hard work remained largely private.  Now, these newer projects are\nbringing this back into the community.  They are making Jenkins more valuable\nto existing users, and more approachable and useful to a whole new set of users\nwho are not currently using Jenkins.\n\nFrom that perspective, I hope more projects like them will follow, pushing us\nbeyond “just writing plugins”, taking even bigger steps to make users\nproductive.  This is a little bit like how I watched Eclipse evolve from just a\nJava IDE to an umbrella of projects.\n\nExciting times!","title":"Evolving Mission of Jenkins","tags":["jenkins-x","evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}},"publicURL":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/kohsuke.jpeg"},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2018-03-19T00:00:00.000Z","id":"38e42feb-38b4-5fe4-a4e2-04f6086cd0bc","slug":"/blog/2018/03/19/password-audit/","strippedHtml":"Last year, news of compromised passwords being used for accounts able to distribute NPM packages made the rounds.\n\nTheir system looks similar to how publishing of plugins works in the Jenkins project:\n\nAccounts are protected by passwords chosen by users.\n\nIndividual contributors have permission to release the components they maintain.\n\nThe components they release are used by millions of developers around the world to deliver their software.\n\nIn other words, weak passwords are a problem for us just as much as for NPM, and what happened to them could happen to us.\n\nTo address this problem, the Jenkins security and infra teams have recently collaborated on a password audit.\nThe audit covered all accounts with permissions to upload plugins and components, and on accounts with other levels of privileged infrastructure access.\nWe ran brute force tools on salted password hashes of those accounts looking for \"weak\" passwords — passwords present in a set of publicly available password lists we chose for this audit.\n\nWe checked the password of every qualifying account for every unsafe password rather than trying to match them to any previous password leaks' email/password pairs.\nUsers with weak account passwords were notified via email a few weeks ago and were asked to change their password to something stronger.\n\nWe performed the same checks over the previous weekend, but this time we only checked the passwords of accounts whose passwords were deemed weak during our first check.\nWe then invalidated the password of any account whose password was still not considered \"strong\" (i.e. their password was unchanged or had been changed to another weak password).\nUsers of those accounts will need to request a password reset before signing in again.\n\nWe plan to implement further safeguards, including improving the account management app at https://accounts.jenkins.io to reject weak passwords.\nIf you’re interested in helping the security team make Jenkins more secure, let us know on the jenkinsci-dev mailing list, or request to join the security team.","title":"Jenkins community account password audit","tags":["security","community"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-03-19T00:00:00.000Z","id":"13be0610-c1c9-59de-ab77-d3fdaf0d1add","slug":"/blog/2018/03/19/introducing-jenkins-x/","strippedHtml":"We are excited to share and invite the community to join us on a project we’ve been thinking about over the last few months called Jenkins X which extends the Jenkins ecosystem to solve the problem of automating CI/CD in the cloud.\n\nBackground\n\nThe last few years have seen massive changes in the software industry:\n\nuse of immutable container images for distributing software which are smaller, easier to work with and lead to cheaper infrastructure costs than VMs alone (approx 20% less on average)\n\nKubernetes has become the defacto way of installing, upgrading, operating and managing containers at scale on any public or hybrid cloud\n\n2018 is the year all the major public clouds, operating system vendors and PaaS offerings support Kubernetes natively\n\nwe now have an open source industry standard for distributing, installing and managing applications on any cloud!\n\nincreased adoption of microservices and cloud native applications leading to massive increase in the number of components which require CI/CD along with increased release frequency\n\nimprovements in DevOps practices coming from the community such as the State of DevOps Report which show the approach of high performing teams\n\nincreasingly many businesses now realise that to compete you have to deliver value quickly via software\n\nteams need to become high performing if the business is to succeed\n\nAll of this adds up to an increased demand for teams to have a solution for cloud native CI/CD with lots of automation!\n\nIntroducing Jenkins X\n\nJenkins X is a project which rethinks how developers should interact with CI/CD in the cloud with a focus on making development teams productive through automation, tooling and DevOps best practices.\n\nJenkins X is open source and we invite you to give us feedback and to contribute to the project.\n\nWhats the big deal?\n\nFor many years Jenkins has been capable of doing pretty much anything in the CI/CD space; the challenge has always been figuring out how to get the right plugins, configuration and code to work together in your Jenkinsfile.\n\nFor me the big deal about Jenkins X is as a developer you can type one command jx create or jx import and get your source code, git repository and application created, automatically built and deployed to Kubernetes on each Pull Request or git push with full CI/CD complete with Environments and Promotion via GitOps!\n\nDevelopers and teams don’t have to spend time figuring out how to package software as docker images, create the Kubernetes YAML to run their application on kubernetes, create Preview environments or even learn how to implement CI/CD pipelines with declarative pipeline-as-code Jenkinsfiles. It’s all automated for you out of the box! So you can focus instead on delivering value!\n\nAt the same time, Jenkins X doesn’t hide anything. If you do want to hack the Dockerfile, Jenkinsfile or Helm charts for your apps or their environments then go right ahead - those are all available versioned in git with the rest of your source code with full CI/CD on it all. GitOps FTW!\n\nJenkins X automates CI/CD and DevOps best practices for you - so you can become a faster performing team! Let your butler do more work for you!\n\nDemo\n\nHere’s a demonstration of Jenkins X running on GKE:\n\nYou can check out more demos here.\n\nJenkins X Features\n\nNow lets walk through the features of Jenkins X that we showed in the demo:\n\nAutomated CI/CD Pipelines\n\nCreate new Spring Boot projects, new quickstarts or import existing source code quickly into Jenkins X via the jx command line tool and:\n\nget a Pipeline automatically setup for you that implements best practice CI/CD features:\n\ncreates a Jenkinsfile for defining the CI/CD pipelines through declarative pipeline-as-code\n\ncreates a Dockerfile for packaging the application up as an immutable container image (for applications which generate images)\n\ncreates a Helm chart for deploying and running your application on Kubernetes\n\nensures your code is in a git repository (e.g. GitHub) with the necessary webhooks to trigger the Jenkins CI/CD pipelines on push events\n\ntriggers the first release pipeline to promote your application to your teams Staging Environment\n\nThen on each Pull Request:\n\na CI pipeline is triggered to build your application and run all the tests ensuring you keep the master branch in a ready to release state\n\nyour Pull Request is deployed to a Preview Environment (more on this later)\n\nWhen a Pull Request is merged to the master branch the Release pipeline is triggered to create a new release:\n\na new semantic version number is generated\n\nthe source code is modified for the new version (e.g. pom.xml files get their elements modified) and then tagged in git\n\nnew versioned artifacts are published including:\n\ndocker image, helm chart and any language specific artifacts (e.g. pom.xml and jar files for Java, npm packages for node or binaries for go etc)\n\nthe new version is promoted to Environments (more on this later)\n\nEnvironment Promotion via GitOps\n\nIn Jenkins X each team gets their own environments. The default environments are Staging and Production but teams can create as many environments as they wish and call them whatever they prefer.\n\nAn Environment is a place to deploy code and each Environment maps to a separate namespace in Kubernetes so they are isolated from each other and can be managed independently.\n\nWe use something called GitOps to manage environments and perform promotion. This means that:\n\nEach environment gets its own git repository to store all the environment specific configuration together with a list of all the applications and their version and configuration.\n\nPromotion of new versions of applications to an environment results in:\n\na Pull Request is created for the configuration change that triggers the CI pipeline tests on the Environment along with code review and approval\n\nonce the Pull Request is merged the release pipeline for the environment which updates the applications running in that environment by applying the helm chart metadata from the git repository.\n\nEnvironments can be configured to either promote automatically as part of a release pipeline or they can use manual promotion.\n\nThe defaults today are for the Staging environment to use automatic promotion; so all merges to master are automatically promoted to Staging. Then the Production environment is configured to use manual promotion; so you choose when do promote.\n\nHowever it is easy to change the  configuration of how many environments you need and how they are configured via the jx create environment and jx edit environment commands\n\nPreview Environments\n\nJenkins X lets you create Preview Environments for Pull Requests. Typically this happens automatically in the Pull Request Pipelines when a Pull Request is submitted but you can also perform this manually yourself via the jx preview command.\n\nThe following happens when a Preview Environment is created:\n\na new Environment of kind Preview is created along with a kubernetes namespace which show up the jx get environments command along with the jx environment and jx namespace commands so you can see which preview environments are active and switch into them to look around\n\nthe Pull Request is built as a preview docker image and chart and deployed into the preview environment\n\na comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application. So in one click your team members can try out the preview!\n\nThis is particularly useful if you are working on a web application or REST endpoint; it lets your team interact with the running Pull Request to help folks approve changes.\n\nFeedback\n\nIf the commit comments reference issues (e.g. via the text fixes #123) then Jenkins X pipelines will generate release notes like those of the jx releases.\n\nAlso, as the version associated with those new commits is promoted to Staging or Production, you will get automated comments on each fixed issue that the issue is now available for review in the corresponding environment along with a link to the release notes and a link to the app running in that environment. e.g.\n\nGetting started\n\nHopefully you now want to give Jenkins X a try. One of the great features of Jenkins is that it’s super easy to get started: install Java, download a war and run via java -jar jenkins.war.\n\nWith Jenkins X we’ve tried to follow a similarly simple experience. One complication is that Jenkins X has more moving pieces than a single JVM; it also needs a Kubernetes cluster :)\n\nFirst you need to download and install the jx command line tool so its on your PATH.\n\nThen you need to run a single command to create a new Kubernetes cluster and install Jenkins X (in this example, on GKE).\n\njx create cluster gke\n\nToday we support creating Kubernetes clusters and installing Jenkins X on Amazon (AWS), Google (GKE), Microsoft Azure, and even locally using minikube.\nWe plan to support AWS EKS soon.\n\nAt the time of this writing the easiest cloud to get started with is Google’s GKE so we recommend you start there unless you already use AWS or Azure. Amazon and Microsoft are working hard to make Kubernetes clusters as easy to create and manage as they are on GKE.\n\nAll the public clouds have a free tier so you should be able to spin up a Kubernetes cluster and install Jenkins X for a few hours then tear it down and it should be cheaper than a cup of coffee (probably free!). Just remember to tear down the cluster when you are done!\n\nHere’s a demo of creating a kuberentes cluster and installing Jenkins X :\n\nIf you really don’t want to use the public cloud, you can install Jenkins X on an existing kubernetes cluster (if it has RBAC enabled!). Or, if you can install and run minikube, then you should be able to install Jenkins X on it as well.\n\nRelationship between Jenkins and Jenkins X\n\nJenkins is the core CI/CD engine within Jenkins X. So Jenkins X is built on the massive shoulders of Jenkins and its awesome community.\n\nWe are proposing Jenkins X as a sub project within the Jenkins foundation as Jenkins X has a different focus: automating CI/CD for the cloud using Jenkins plus other open source tools like Kubernetes, Helm, Git, Nexus/Artifactory etc.\n\nOver time we are hoping Jenkins X can help drive some changes in Jenkins itself to become more cloud native, which will benefit the wider Jenkins community in addition to Jenkins X.\n\nPlease join us!\n\nSo I hope the above has given you a feel for the vision of where we are heading with Jenkins X and to show where we are today. The project is still very young, we have lots to do and we are looking for more input on where to go next and what to focus on. We’re also working on high level roadmap.\n\nTo make Jenkins X a success we’d love you to get involved, try it out and give us feedback in the community! We love contributions whether its email, chat, issues or even better Pull Requests ;).\n\nIf you’re thinking of contributing here’s some ideas:\n\nGive us feedback. What could we improve? Anything you don’t like or you think is missing?\n\nHelp improve the documentation so its more clear how to get started and use Jenkins X\n\nAdd your own quickstarts so the Jenkins X community can easily bootstrap new projects using your quickstart. If you work on an open source project is there a good quickstart we could add to Jenkins X?\n\nIf you’d like to contribute to the code then try browse the current issues.\n\nwe have marked issues help wanted or good first issue to save you hunting around too much\n\nin particular we would love help on getting Jenkins X working well on windows or the integrations with cloud services, git providers and issues trackers\n\nfor more long term goals we’ve the roadmap\n\nwe could always use more test cases and to improve test coverage!\n\nTo help get faster feedback we are using Jenkins X as the CI/CD platform to develop Jenkins X itself. For example Jenkins X creates all the releases and release notes. We’ll talk more about UpdateBot in a future blog post but you can see all the automated pull requests generated in the various Jenkins X pipelines via UpdateBot pushing version changes from upstream dependencies into downstream repositories.\n\nNote that the Jenkins community tends to use IRC for chat and the Kubernetes community uses Slack, so Jenkins X has rooms for both IRC and slack depending on which chat technology you prefer - as the Jenkins X community will be working closely with both the Jenkins community and the various Kubernetes communities (Kubernetes, Helm, Skaffold, Istio et al).\n\nOne of the most rewarding things about open source is being able to learn from others in the community. So I’m hoping that even if you are not yet ready to use Kubernetes in your day job or are not yet interested in automating your Continuous Delivery - that you’ll at least consider taking a look at Jenkins X, if for no other reason than to help you learn more about all these new ideas, technologies and approaches!\n\nThanks for listening and I’m looking forward to seeing you in the community.\n\nLinks\n\nJenkins X JEP proposal\n\nJenkins X website\n\nGetting Started Guide\n\nDemos","title":"Introducing Jenkins X: a CI/CD solution for modern cloud applications on Kubernetes","tags":["jenkins-x","kubernetes","pipeline"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg","srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/77b35/jstrachan.jpg 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/d4a57/jstrachan.jpg 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/19e71/jstrachan.jpg 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/68974/jstrachan.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/ef6ff/jstrachan.webp 32w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/8257c/jstrachan.webp 64w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/6766a/jstrachan.webp 128w,\n/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/22bfc/jstrachan.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/70241374c0e6a5665fafbc121c330d3c/jstrachan.jpeg"},"blog":null,"github":"jstrachan","html":"<div class=\"paragraph\">\n<p>James is a long time open source contributor, created the Groovy programming language and Apache Camel integration framework.\nFor the past few years he&#8217;s been working on CI/CD with Kubernetes.</p>\n</div>","id":"jstrachan","irc":null,"linkedin":null,"name":"James Strachan","slug":"/blog/authors/jstrachan","twitter":"jstrachan"}]}},{"node":{"date":"2018-03-15T00:00:00.000Z","id":"f1ff4387-7033-572c-9fef-b871cfb88ad0","slug":"/blog/2018/03/15/jep-200-lts/","strippedHtml":"This is a post about a major change in Jenkins, which is available starting\nfrom Jenkins 2.102 and Jenkins LTS 2.107.1.\nThis is a change with a serious risk of regressions in plugins.\nIf you are a Jenkins administrator, please read this blogpost and\nupgrade guidelines\nBEFORE upgrading.\n\nI would like to provide some heads-up about the\nJEP-200 change,\nwhich is included into the new Jenkins LTS 2.107.x baseline.\n\nBackground\n\nFor many years Jenkins used to specifically blacklist certain classes and packages according to known or suspected exploits.\nThis approach has been proven unsustainable due to the risk of deserialization attacks via unknown classes\nfrom 3rd-party components, after the\nSECURITY-429/CVE-2017-1000353 fix in 2.46.2\nit was decided to replace blacklists by more restrictive whitelists.\nIn October 2017 Jesse Glick proposed a Jenkins Enhancement Proposal,\nwhich finally got accepted as JEP-200.\n\nThe change implies a risk of regressions in plugins serializing non-whitelisted Java-internal and 3rd-party classes,\nand that’s why it is so important to follow the upgrade guidelines for this release.\n\nCurrent state\n\nJEP-200 was first integrated in Jenkins 2.102 (released in January 2018), and it has got a lot of testing since that.\nSee this blogpost for the original announcement.\n\nOver the last two months we received more than 75 issues from users of Jenkins weekly releases.\nAll these issues have been triaged, and we have released most of the fixes.\nMore than 50 plugins were fixed in total, and many more plugins were updated in order to enable compatibility testing.\nA significant part of the discovered regressions were caused by real defects which were causing performance and stability\nissues in plugins.\nThanks a lot to all the Jenkins contributors and plugin maintainers who helped deliver timely changes for this effort!\n\nOver last 6 weeks Jenkins weekly releases had positive community ratings,\nthe overall JEP-200 adoption reached ~12% of all Jenkins installations on March 01.\nAll major plugins have been also tested directly or verified in the wild on weekly releases.\nSo we are confident that the change is ready to be released in LTS.\n\nOn the other hand, we continue to receive JEP-200 regression reports.\nThey are mostly caused by niche plugins which are not widely used in weekly releases,\nand unfortunately not all fixes have been released yet (see the Wiki page for up-to-date info).\nWe anticipate more regressions to be reported after the LTS release and broader adoption.\n\nIn order to simplify the upgrade to the new LTS baseline,\nI have prepared some helpful materials together with Liam Newman\nand Jesse Glick.\nBelow you can find the embedded slide deck and video, or scroll down to see the key information\nin the text form.\n\nVideo:\n\nFor Jenkins administrators\n\nUpgrading to a core with JEP-200 requires a special update procedure, which is described below.\n\nUpgrading Jenkins\n\nJEP-200 is not the only major change in 2.107.1, please read\nthe full upgrade guide carefully\n\nIf you have a way of testing the upgrade before applying it to production, do it\n\nBack up your instance so you have any easy way of rolling back\n\nUpdate all affected plugins.\nSee this Wiki page for the list of affected plugins,\nfix statuses and workarounds\n\nApply workarounds for non-released patches if needed (see below)\n\nUpdate to the new version of the Jenkins core\n\nUsing backups and staging servers is good advice before any upgrade but especially this one,\ngiven the relatively high risk of regression.\nDue to the nature of the changes, some plugins may refuse to load after the upgrade and cause your Jenkins service to fail to start.\n\nAfter the upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nStill, it is highly advised to monitor your system after the upgrade, especially the following:\n\nJenkins System log (especially during the startup)\n\nJob/Build logs\n\nIf you do encounter a log message referencing the https://jenkins.io/redirect/class-filter/ URL,\nmost likely it is a JEP-200 regression.\nExample:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nIf you see this kind of message, we highly recommend reporting it so that it can be investigated and probably fixed quickly.\n\nReporting JEP-200 issues\n\nStarting from May 01, JEP-200 issues are triaged by plugin and core maintainers.\nJEP-200 maintainers are available for code reviews if needed,\nbut they will not be reviewing cases in JIRA and searching for miscategorized issues on a daily basis.\nIf you experience new JEP-200 regressions, please follow the guidelines below.\n\nPlease report any issues you encounter matching the above pattern in the\nJenkins issue tracker, under the appropriate plugin component.\nBefore reporting please check whether this issue has already been reported.\n\nAdd the JEP-200 label\n\nInclude the stacktrace you see in the log\n\nIf possible, include complete steps to reproduce the problem from scratch\n\nYou can find examples of previously reported issues using this query.\n\nJenkins developers will evaluate issues and strive to offer a fix in the form of a core and/or plugin update.\nRight after the feature release there was be a special team triaging the reports.\nStarting from May 01 the issues will be triaged by plugin and core maintainers.\nSee JEP-200 Maintenance plan for more info.\n\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nApplying workarounds\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nNote the class name(s) mentioned in the JEP-200 log messages,\nand run Jenkins with the hudson.remoting.ClassFilter startup option, e.g.:\n\njava -Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName -jar jenkins.war ...\n\nThis workaround process may require several iterations, because classes whitelisted in the workaround may also\ninclude fields with types requiring whitelisting.\n\nFor plugin developers\n\nIf you are a plugin developer, please see the original JEP-200 announcement.\nThat blog post provides guidelines for testing and fixing plugin compatibility after the JEP-200 changes.\nThe presentation above also provides some information about what needs to be tested.","title":"Security hardening: Jenkins LTS 2.107.1 switches XStream / Remoting blacklists to whitelists (JEP-200)","tags":["core","security","remoting","upgrade"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-03-12T00:00:00.000Z","id":"b9886e8d-a501-5b7a-8e2a-2ba26132ecae","slug":"/blog/2018/03/12/browser-usage/","strippedHtml":"Over the last year, several efforts were done on jenkins.io like\nsecurity advisories or documentation\nand I wanted to understand the impact it had on its traffic.\n\nI had a look to the Google Analytics account used for jenkins.io and it was\ninteresting to discover which browsers are used by Jenkins visitors and how\nthis compares with other websites. So I decided to analyze one year of data\nfrom January 2017 to January 2018. Then I selected\nstatcounter\nas an external data source in order to compare results from jenkins.io.\n\nFirst, let’s talk about numbers:\n\nDuring that period, 3,496,245 users across the world visited this website.\n\nThis is a growth of 52.69% visitors compared to the year before.\n\n92.28% of them used a desktop, 6.63% were on mobile and only 1.10% on a tablet.\n\nTable 1. Browser Usage\n\nBrowser\nPercentage\n\nChrome\n69.82%\n\nFirefox\n14.75%\n\nSafari\n6.44%\n\nIE\n5.84%\n\nEdge\n1.59%\n\nWe clearly see that 91% of Jenkins.io visitors only use three browsers. Chrome\nis by far the leader followed by Firefox and Safari.\n\nObviously those numbers taken alone don’t mean anything, so let’s try to put\nthem in perspective with another data source.\n\nNetscape 4.8 was still used by 15 visitors over the year.\n\n6 visitors used their Nintendo DS.\n\nStatCounter\n\nLet’s now compare our previous results with the same time period from\nstatcounter who argues to collect data from\n2million websites.  Statcounter allow us to display browsers stats based on 4\ndifferent categories, 'All platform', 'Desktop', 'Tablet' or 'Mobile'. + For\nthis comparison, I am interested by 'All platform' and of course 'Desktop' as\n92.28% of Jenkins.io visitors use a desktop.\n\nTable 2. Browser Market Share Across All Platforms\n\nBrowser\nPercentage\n\nChrome\n54.13%\n\nSafari\n14.50%\n\nUC Browser\n8.25%\n\nFirefox\n6.15%\n\nIE\n3.89%\n\nExcepted Chrome who still leads the ranking with \"only\" 54%, all the others\nactors are totally shuffled.  Safari moved to the 2nd place with 14.50% 'UC\nBrowser' appeared in the top 3 with 8.25% where only 0.10% of Jenkins.io\nvisitors were using UC browser.  Firefox moved to the 4th places with only\n6.15%.  It’s interesting how this \"All platform\" browser market share from\nstatcounter doesn’t reflect Jenkins.io visitors' habits.\n( Source )\n\nNow at a first glance, results look more similar to the Jenkins.io visitors;\nexcepted for Chrome and Firefox which shed some percentages in favor of\nInternet Explorer and Edge.  This promotes IE to the 3rd place with 8.86% of\nusage, and downgrade Safari to the 4th place with 6,44%.  Compared to\nJenkins.io results, Edge is still at the 5th position.  It’s very interesting\nto see how this ranking is so different from the \"All platform\" one but follows\nthe same pattern coming from Jenkins.io visitors.  This highlights how browser\nchoices are strongly influenced by the platform used and contrary to a general\ntrend,\nJenkins.io visitors remain desktop users.  This absence of mobile users\nprobably explains why some browsers are so under represented within Jenkins\nvisitors.\n( Source )\n\nTable 3. Browser Market Share on the Desktop\n\nBrowser\nUsage\n\nChrome\n63.59%\n\nFirefox\n13.75%\n\nIE\n8.86%\n\nSafari\n5.50%\n\nEdge\n4.35%\n\nConclusion\n\nThese observations should be carefully interpreted as it may be overestimated or underestimated (depending on various factors)  and doesn’t take into consideration local specificities.\n\nJenkins.io visitors are a majority of desktop users.\nThey are aligned with the world trends when we talk about desktop browsers however only a minority of them come from a mobile.\nThis is probably because jenkins.io is not (yet) mobile friendly and obsiously this would be a nice improvement to have.\n\nAll contributions are welcomed and especially for mobile user experience.","title":"Browser Market Share on jenkins.io","tags":["stats"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png","srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/914ee/olblak.png 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/1c9ce/olblak.png 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/bf8e1/olblak.png 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/acb7c/olblak.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/ef6ff/olblak.webp 32w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/8257c/olblak.webp 64w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/6766a/olblak.webp 128w,\n/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/22bfc/olblak.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/f6d731c7e61ff5c7f0ddc7f2b8a6671e/olblak.png"},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"/blog/authors/olblak","twitter":"0lblak"}]}},{"node":{"date":"2018-03-05T00:00:00.000Z","id":"47f0fe41-917d-5d9c-a643-b28ab9b12877","slug":"/blog/2018/03/05/jenkins-world-talk-proposal-tips/","strippedHtml":"You’ve marked your calendar to alert you weeks in advance of the CFP deadline.\nYou’ve spent your nights and weekends to skillfully craft your abstract and you\nare convinced this is THE one.  You confidently clicked the 'submit' button\nonly to find out weeks later you’ve received an automated declined email. On\ntop of feeling disappointed, you probably wondered why your proposal was turned\ndown.\n\nAs Jenkins World CFP\nis still open, we hope to demystify the selection process by offering a few\ntips to help increase the chance of your proposal getting accepted.\n\nTip 1: Make your title concise and attention-grabbing\n\nThere’s only a few seconds to make an impression with your proposal. Your title\nand abstract should be succinct and attention grabbing. Think about what makes\nyour Jenkins proposal exceptional over others. What value will it bring to\nattendees?\n\nTip 2: Know your audience\n\nJenkins World audiences want to learn and adopt the newest development\npractices, process, languages and frameworks. They are highly technical and are\ninterested in deep technical talks that are original and offers valuable\ninformation.\n\nTip 3: Transformational user stories\n\nShare your unique Jenkins project experiences, challenges, strategies, lessons\nlearned, and outcome. What can you share with your audience that will\nfacilitate knowledge transfer and development of new and innovative techniques?\n\nTip 4: Topic should be relevant and applicable\n\nConsider how to make the topic more broadly applicable to the attendees, such\nas with a hands-on demo explaining the concept. By showcasing innovative\nmethods that draw out relevant and compelling knowledge to the audience,\neverybody is likely to more thoroughly absord the content of the talk. Also,\nwho doesn’t love a cool demo?\n\nTip 5: Got Tips & Tricks?\n\nJenkins is used tons of different ways.  Sharing novel approaches, tips, or\ntricks for increased efficiency and proficiency with Jenkins is almost always\nwell received!\n\nImportant Dates:\n\nCFP Closes: March 18, 2018 @ 11:59pm Pacific\n\nCFP Notifications: April\n\nAgenda Announcement: April\n\nEvent Dates:\n\nJenkins World USA | San Francisco | September 16 - 19, 2018\n\nJenkins World Europe | Nice, France | October 23 - 25, 2018\n\nRegister for Jenkins World\n2018 with the code JWATONG for a 20% discount off your pass.\n\nGood Luck!","title":"5 tips for improving your Jenkins World 2018 talk proposals","tags":["jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}},"publicURL":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/alyssat.jpg"},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2018-02-22T00:00:00.000Z","id":"d0c104fc-7582-5b71-ae72-ad7781b4796d","slug":"/blog/2018/02/22/cheetah/","strippedHtml":"Table of Contents\n\nIntroducing \"Project Cheetah\"\nYes, but what does it DO?\nHow Do I Set Speed/Durability Settings?\n\n1. Globally, you can choose a global default durability setting:\n2. Each Pipeline can get a custom Durability Setting:\n3. Multibranch Projects can use a new BranchProperty to customize the Durability Setting.\n\nWill Performance-Optimized Mode Help Me?\nOther Goodies\nHow Did You Do It?\nWhat Next?\n\nSince it launched, Pipeline has had a bit of a Dr. Jekyll and Mr. Hyde performance problem.  In certain circumstances, Pipeline can turn from a mild-mannered CI/CD assistant into a monster.  It will happily eat storage read/write capacity like popcorn without caring about the other concerns of our friendly butler.  When combined with other additional factors, this can result in real-world stability problems.  For example, combining slow storage with a spike in running Pipelines has brought down production Jenkins at more than one organization.  Similarly, users see issues if a busy controller gets hit with an extra source of stress; past culprits have been heavy automated (ab)use of Jenkins APIs, now-solved user lookup bugs, backup jobs, and plugins run crazy that load excessive numbers of builds.  Symptoms ranged from visible slowdowns in the UI to unresponsive jobs and \"hung\" controllers.\n\nNow I’m not saying this to scare people or to criticize the technology we’ve built. Implementing Pipeline scalability best practices coupled with SSD storage keeps Jenkins in a happy place.  We just need context on the weaknesses to see why it’s important to address them.\n\nIntroducing \"Project Cheetah\"\n\nToday we’re announcing the first major results of \"Project Cheetah\", our long-running effort to address these challenges and improve Pipeline scalability.  More broadly, Cheetah aims to help in 3 places:\n\nSmall-scale containers: Pipeline needs to run leanly in resource-constrained containers, to enable easy scale-out without consuming excessive resources on shared container hosts.\n\nEnterprise systems: Pipeline needs to effectively serve high-scale Jenkins instances that are central to many large companies.\n\nGeneral case: run Pipelines a bit more quickly on average, and allow users to get much-stronger performance in worst-case scenarios.\n\nThese changes are implemented across many of the Pipeline plugins.\n\nYes, but what does it DO?\n\nProject Cheetah offers several things, but the most important is Durability Settings for all Pipelines, and especially the Performance-Optimized setting.  This setting avoids several potentially unexpected performance \"surprises\" that may strike users.  In the general case, it greatly reduces the disk IO needs for Pipeline.  How much?  Below is a graph of storage utilization with legacy Pipeline versions (think early 2017) and with the latest version using the Performance-Optimized mode.  These are tested on an AWS instance backed by an EBS volume provisioned with 300 IOPs.\n\nBefore and After:\n\nAs you can see, storage utilization goes down by a lot.  While the exact number will vary, across the benchmark testcases this results in Pipeline throughput of 2x to 6x the previous before becoming IO-bound. This also increases stability of Jenkins controllers because they will tolerate unexpected load.\n\nThis comes with a major drop in CPU IOWait as well:\n\nAnd of course the rate at which data is written to disk and number of writes/s is also reduced:\n\nFor enterprise users, timing stats often show 10-20% of normal builds is serializing the Program and writing the record of steps run (\"FlowNodes\") - the performance optimized durability setting will cut this to almost nothing (for standard pipelines, 1/100 or less) - so builds will complete faster, especially complex ones.\n\nPlease see the Pipeline Scalability documentation for deeper information on the new Durability Settings, how to use them, and which plugin versions are required to gain these features.\n\nAlso, users may see a reduction in hung Pipelines because new test utilities made it possible to identify and correct a variety of bugs.\n\nHow Do I Set Speed/Durability Settings?\n\nThere are 3 ways to configure the durability setting:\n\n1. Globally, you can choose a global default durability setting:\n\nUnder \"Manage Jenkins\" > \"Configure System\", labelled \"Pipeline Speed/Durability Settings\".  You can override these with the more specific settings below.\n\n2. Each Pipeline can get a custom Durability Setting:\n\nThis is one of the job properties located at the top of the job configuration, labelled \"Custom Pipeline Speed/Durability Level.\" This overrides the global setting. Or, use a \"properties\" step - the setting will apply to the NEXT run after the step is executed (same result).\n\n// Script //\nproperties([durabilityHint('PERFORMANCE_OPTIMIZED')])\n// Declarative //\npipeline {\n    agent any\n    stages {\n        stage('Example') {\n            steps {\n                echo 'Hello World'\n            }\n        }\n    }\n    options {\n        durabilityHint('PERFORMANCE_OPTIMIZED')\n    }\n}\n\n3. Multibranch Projects can use a new BranchProperty to customize the Durability Setting.\n\nUnder the SCM you can configure a custom Branch Property Strategy and add a property for Custom Pipeline Speed/Durability Level.  This overrides the global Durability Setting and will apply to each branch at the next run.  You can also use a \"properties\" step to override the setting, but remember that you may have to run the step again to undo this.\n\nDurability settings will take effect with the next applicable Pipeline run, not immediately.  The setting will be displayed in the log.\n\nThere is a slight durability trade-off for using the Performance-Optimized mode — the appropriate section of the Pipeline Scalability documentation has the specifics.\nFor most uses we do not expect this to be important, but there are a few specific cases where users may wish to use a slower/higher-durability setting. The Best Practices are documented.\n\nWe recommend using Performance-Optimized by default, but because it does represent a slight behavioral change the initial \"Cheetah\" plugin releases defaults to maintain previous behavior. We expect to switch this default in the future with appropriate notice once people have a chance to get used to the new settings.\n\nWill Performance-Optimized Mode Help Me?\n\nYes, if your Jenkins instance uses NFS, magnetic storage, runs many Pipelines at once, or shows high iowait (above 5%)\n\nYes, if you are running Pipelines with many steps (more than several hundred).\n\nYes, if your Pipeline stores large files or complex data to variables in the script, keeps that variable in scope for future use, and then runs steps.  This sounds oddly specific but happens more than you’d expect.\n\nFor example: readFile step with a large XML/JSON file, or using configuration information from parsing such a file with One of the Utility Steps.\n\nAnother common pattern is a \"summary\" object containing data from many branches (logs, results, or statistics). Often this is visible because you’ll be adding to it often via an add/append or Map.put() operations.\n\nLarge arrays of data or Maps of configuration information are another common example of this situation.\n\nNo, if your Pipelines spend almost all their time waiting for a few shell/batch steps to finish.  This ISN’T a magic \"go fast\" button for everything!\n\nNo, if Pipelines are writing massive amounts of data to logs (logging is unchanged).\n\nNo, if you are not using Pipelines, or your system is loaded down by other factors.\n\nNo, if you don’t enable higher-performance modes for pipelines.  See above for how!\n\nOther Goodies\n\nUsers can now set an optional job property so that individual Pipelines fail cleanly rather than resuming upon restarting the controller.  This is useful for niche cases where some Pipelines are considered disposable and users would value a clean restart over Pipeline durability.\n\nWe’ve reduced classloading and reflection quite significantly, which improves scaling and reduces CPU use:\n\nScript Security (as of version 1.41) has gotten optimizations to reduce the performance overhead of Sandbox mode and eliminate lock contention so Pipeline multithreads better.\n\nPipeline Step data uses up less space on disk (regardless of the durability setting) - this should be 30% smaller.  Assume it’s a few MB per 1000 steps - but for every build after the change.\n\nEven in the low-performance/high-durability modes, some redundant writes have been removed, which decreases the number of writes by 10-20%.\n\nHow Did You Do It?\n\nThat’s probably material for another blog post or Jenkins World talk.\n\nThe short answer is: first we built a tool to simulate a full production environment and provide detailed metrics collection at scale.  Then we profiled Jenkins to identify bottlenecks and attacked them.  Rinse and repeat.\n\nWhat Next?\n\nThe next big change, which I’m calling Cheetah Part 2 is to address Pipeline’s logging. For every Step run, Pipeline writes one or more small log files. These log files are then copied into the build log content, but are retained to make it possible to easily fetch logs for each step.\n\nThis copying process means every log line is written twice, greatly reducing performance, and writing to many small files is orders of magnitude slower than appending to one big log file.\n\nWe’re going to remove this duplication and data fragmentation and use a more efficient mechanism to find per-step logs. This should further improve the ability to run Pipelines on NFS mounts and hard-drive-backed storage, and should significantly improve performance at scale.\n\nBesides this, there’s a variety of different tactical improvements to improve scaling behavior and reduce resource needs.\n\nThe Project Cheetah work doesn’t free users to completely ignore Pipeline scaling best practices and previous suggestions.  Nor does it eliminate the need for efficient GC settings.  But this and other enhancements from the last year can significantly improve the storage situation for most users and reduce the penalties for worst-case behaviors.  When you add all the pieces together, the result is a faster, leaner, more reliable Pipeline experience.","title":"Project Cheetah - Faster, Leaner Pipeline That Can Keep Up With Demand","tags":["pipeline","performance","scalability"],"authors":[{"avatar":null,"blog":null,"github":"svanoort","html":"","id":"svanoort","irc":null,"linkedin":null,"name":"Sam Van Oort","slug":"/blog/authors/svanoort","twitter":null}]}},{"node":{"date":"2018-02-19T00:00:00.000Z","id":"d1b0a235-d051-5787-9aab-f43b8d0a68ca","slug":"/blog/2018/02/19/gsoc2018-announcement/","strippedHtml":"We are happy to announce that Jenkins project has been accepted to\nGoogle Summer of Code 2018.\nThis year we invite students and mentors to join the Jenkins community and work together\non various initiatives: core, plugins, development tools and infrastructure.\n\nOur mentors have already created some project ideas.\nFor example, you are welcome to work on the new Configuration-as-Code initiative or\nto help creating standard API for Code Coverage plugins.\nIf you like test automation, there is a proposal to\nJenkins Acceptance Test Harness.\nOver the next weeks we plan to extend this list by new even more project ideas.\n\nAll information about the Jenkins GSoC is available on its subproject page.\n\nI am a student. How do I apply?\n\nSee Information for students for application guidelines.\n\nFirst step is to join discussions in the mailing lists in order to introduce yourself, establish connections with the community and potential mentors.\nThe application period starts on March 12 and ends on March 27, but don’t let it misguide you!\nUse time before application to discuss project ideas/proposals with mentors and to process their feedback.\nTo create a better proposal, we also recommend to study Jenkins and to do some contributions in the area of your project proposal.\n\nNot satisfied by the current project ideas?\nYou can propose your own idea\nin the developer mailing list.\n\nI want to be a mentor. Is it too late?\n\nIt’s not!\nIf you are passionate about open-source and Jenkins, we invite you to join the mentors team.\nYou can either propose a new project idea or join an existing one.\nSee Call for Mentors and Information for mentors for details.\n\nThis year mentorship does NOT require strong expertise in Jenkins development.\nThe objective is to guide students and to get involved into the Jenkins community.\nGSoC org admins will help to find advisers if special expertise is required.\n\nImportant dates\n\nMar 05 - deadline for new GSoC project idea proposals\n\nMar 12 - student application period starts\n\nMar 27 - deadline for student applications\n\nApr 23 - accepted projects announced, community bonding starts\n\nMay 14 - coding period starts\n\nAug 06 - end of the coding period\n\nSee the GSoC Timeline for more info.\nIn the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).\n\nP.S: I am going to create a special GSoC 2018 edition of swags for mentors and students. Do not miss them ;)","title":"Jenkins is accepted to Google Summer Of Code 2018, join us!","tags":["gsoc","gsoc2018","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"limit":8,"skip":240,"numPages":100,"currentPage":31}},
    "staticQueryHashes": ["3649515864"]}