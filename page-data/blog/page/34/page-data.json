{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/34",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2017-11-27T00:00:00.000Z","id":"fd21dbc6-9b4b-5092-b232-0feabaf928ce","slug":"/blog/2017/11/27/tutorials-in-the-jenkins-user-documentation/","strippedHtml":"Regular perusers of the Jenkins User Documentation may have noticed\nthe presence of the Tutorials part (between the Guided Tour and User\nHandbook) that appeared in the last couple of months and gradually began to get\npopulated with much of my recent work, writing Jenkins tutorials.\n\nMy name’s Giles and I’ve been a technical writer in the software development\nfield for several years now. I’ve always been passionate about technical writing\nand more recently, the technologies that go into developing written content and\nautomating its generation - like Jenkins! I was a former Atlassian and recently\njoined CloudBees as a Senior Technical Writer, working remotely from the \"Sydney\nOffice\", with my current focus on the Jenkins User Documentation.\n\nWhy tutorials?\n\nMy exposure to Jenkins and its usage over the years has been patchy at best.\nDuring this time, however, I’ve had some degree of experience as a user of\nvarious continuous delivery (CD) tools like Jenkins and am reasonably familiar\nwith the advantages these tools can offer software development teams.\n\nI’ve also found that while many software developers are familiar with the\nbroader concept of \"developer operations\" (or simply \"devops\"), fewer seem\nfamiliar with the concepts of CD and related tools to facilitate devops within\norganizations.\n\nThe CD process is based on the fundamental flow of building the application\ntesting it delivering it, where typically:\n\nThe building part involves compiling the application and/or ensuring all\nnecessary libraries and dependencies are in place for the application to run\nas intended.\n\nThe testing part involves testing the built application with automated tests\nto ensure that changes implemented by developers function as expected.\n\nThe delivering part involves packaging or presenting the application in a\nway that can be delivered to customers or other users for any kind of purpose.\n\nNow, as one of the major contributors to the Jenkins User Documentation (and\nfaced with a reasonably steep learning curve), it quickly became apparent about\nthe lack of accessible documentation to hand-hold people relatively new to\nJenkins through this CD process. I couldn’t find anything in the Jenkins User\nDocumentation to demonstrate how Jenkins implements this process on a simple\napp that delivers an end result.\n\nWith the guidance and assistance of helpful colleagues, I therefore decided to\nembark on creating a series of Jenkins tutorials to help fill these\ndocumentation and knowledge gaps. These tutorials are based on Daniele Procida’s\ndescription of how tutorials should be presented in his blog post\n\" What nobody tells you about\ndocumentation\").\n\nIntroductory tutorials\n\nThe first set of tutorials on the Tutorials overview page\ndemonstrate how to implement this fundamental CD process in Jenkins on a simple\napplication for a given technology stack.\n\nSo far, there’s one for\nJava with Maven and another\nfor Node.js and\nReact with npm. Another for Python will be added to this list in the near\nfuture.\n\nThese tutorials define your application’s entire CD process (i.e. your Pipeline)\nin a Jenkinsfile, whose Groovy-like Declarative Pipeline syntax is checked in\nto your Git source repository. Managing your Pipeline with your application’s\nsource code like this forms the fundamentals of \"Pipeline as code\".\n\nThe Introductory tutorials also cover how to use some powerful features of\nJenkins, like Blue Ocean,\nwhich makes it easy to connect to an existing cloud, web or locally hosted Git\nrepository and create your Pipeline with limited knowledge of Pipeline syntax.\n\nAdvanced tutorials\n\nAlso soon to be released will be the first Advanced tutorial on building\nmultibranch Pipelines in Jenkins. This tutorial takes the \"Pipeline as code\"\nconcept to a new level, where a single Jenkinsfile (defining the entire CD\nprocess across all branches of your application’s Git repository) consists of\nmultiple stages which are selectively executed based on the branch that Jenkins\nis building.\n\nAdditional tutorials that demonstrate more advanced features of Jenkins and how\nto manage your Pipelines with greater sophistication and flexibility will be\nadded to this section in future.\n\nSumming up\n\nYou can access all currently available tutorials from the\nTutorials overview page in the Jenkins User Documentation.\nIt’s worthwhile checking that page from time to time as it’ll be updated\nwhenever a new tutorial is published.\n\nAlso, if you have any suggestions for tutorials or other content you’d like to\nsee in the documentation, please post your suggestions in the\nJenkins\nDocumentation Google Group, which you can also post (and reply) to by emailing\njenkinsci-docs@googlegroups.com.\n\nThe Sydney Office team meeting at Carriageworks - from left to right, Giles\nGaskell, Nicholae Pascu, Michael Neale and James Dumay","title":"Introducing Tutorials in the Jenkins User Documentation","tags":["tutorial","blueocean","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"gilesgas","html":"","id":"gilesgas","irc":null,"linkedin":null,"name":"Giles Gaskell","slug":"/blog/authors/gilesgas","twitter":"giles_gas"}]}},{"node":{"date":"2017-11-08T00:00:00.000Z","id":"c98aa373-9dff-5895-b312-e24c5459a752","slug":"/blog/2017/11/08/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.89 and 2.73.3, that fix two low-severity security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-10-25T00:00:00.000Z","id":"f4347bb8-badf-50f9-9eac-6e1f13095802","slug":"/blog/2017/10/25/jenkins-user-conference-china/","strippedHtml":"This is a guest post by Forest Jing, who runs\nthe Shanghai Jenkins Area Meetup\n\nI am excited to announce the inaugural\nJenkins User Conference China\nwill be taking place on November 19, 2017 in Shanghai, China.\nThe theme of JUC China is “Jenkins Driven CD and DevOps”.\nMuch like in the US, CD and DevOps are big topics of interest in China.\nWe are honored to have Kohsuke Kawaguchi join us as one of the keynote speakers at this inaugural Jenkins event.\nWe will also have sessions from many of China’s big named companies like Baidu, Tencet, Pinterest, Ctrip, Huawei, Microsoft, and more.\nBelow are some highlights of the event.\n\nSunday Nov 19th Agenda\n\nMorning keynote sessions\n\nThere will be 4 keynote speeches:\n\nKohsuke Kawaguchi, creator of Jenkins will introduce Jenkins Past, Present & Future.\n\nLe Zhang, a very famous DevOps and CD expert will show pipeline driven CD and DevOps.\n\nEngineering Director from Huawei will show the CD and DevOps practice in Huawei.\n\nXu Zheng from Pinterest will present Run Jenkins infrastructure as service in Kubernetes.\n\nIn the Afternoon, we have set up 3 tracks\n\nCD & DevOps user stories from Microsoft, Tencent, Ctrip and JinDong - all are big companies in China.\n\nEnterprise Jenkins experience the use of Jenkins as an enterprise tool not only for teams.\n\nWorkshop to lead engineers to practice CloudBees Jenkins and open source Jenkins features.\n\nIf you’re in the neighborhood, we sincerely\ninvite you to join us\nat Jenkins User Conference China.\n\nFollow us on Twitter @china_juc","title":"Jenkins User Conference China","tags":["event","Jenkins User Conference"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2017-10-23T00:00:00.000Z","id":"63d03f70-f7b3-5e9a-a99f-0bee483fb790","slug":"/blog/2017/10/23/security-updates/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities.\n\nActive Choices (uno-choice)\n\nBuild-Publisher\n\nDependency Graph Viewer\n\nglobal-build-stats\n\nAdditionally, the Multijob Plugin also received a security update several weeks ago.\n\nFor an overview of these security fixes, see the security advisory.\n\nActive Choices Plugin distribution had been suspended since April due to its mandatory dependency on the suspended Scriptler Plugin.\nThat dependency has been made optional, so Active Choices can be used without having Scriptler installed.\nThis means we are able to resume distribution of Active Choices Plugin again.\nIt should be available on update sites later today.\n\nWe also announced a medium severity security vulnerability in SCP publisher plugin that does not have a fix at this time.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-10-16T00:00:00.000Z","id":"ed573977-fd4e-5ac4-bfe6-8917b3809243","slug":"/blog/2017/10/16/jenkins-world-session-videos-are-available/","strippedHtml":"This is a guest post by Alyssa Tong, who runs\nthe Jenkins Area Meetup program and is also responsible for\nMarketing & Community Programs at CloudBees, Inc.\n\nJenkins World 2017 keynotes and breakout session videos are now available HERE. Photos from the conference can be seen HERE.\n\nSave the date for Jenkins World 2018 :\n\nConference dates are September 16-19, 2018 in San Francisco.\n\nRegistration will open on October 16, 2017.\n\nCall for Papers will open on December 1, 2017.","title":"Jenkins World 2017 Session Videos are Available","tags":["event","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2017-10-11T00:00:00.000Z","id":"3b2aeb32-59cd-5469-815d-78144c195889","slug":"/blog/2017/10/11/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.84 and 2.73.2, that fix several security vulnerabilities.\nAdditionally, we published a new release of Swarm Plugin whose client contains a security fix, and Maven Plugin 3.0 was recently released to resolve a security issue.\nUsers of Swarm Plugin and Maven Plugin should update these to their respective newest versions.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nWe also published information about a vulnerability in Speaks! Plugin.\nThere is no fix available and we recommend it be uninstalled.\nIts distribution has been suspended.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Important security updates for Jenkins core and plugins","tags":["core","security","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-10-06T00:00:00.000Z","id":"7d593bd4-902a-54dd-abb6-7db358ec7152","slug":"/blog/2017/10/06/hacktoberfest/","strippedHtml":"Once again it’s October in our calendars.\nIt means that the regular Hacktoberfest event is back!\nDuring this one-month hackathon you can support open source and earn a limited edition T-shirt.\nJenkins project offers an opportunity to participate in the project\nand to get reviews and help from Jenkins contributors.\n\nHow do I sign up?\n\nSign-up to Hacktoberfest on the event website.\n\nEverything is set, just start coding!\n\nWhat can I do?\n\nThere are lots of ways to contribute to Jenkins during Hacktoberfest.\nYou can…​\n\nWrite code\n\nImprove documentation,\nwrite blogposts\n\nAutomate Tests\n\nTranslate and internationalize components\n\nDesign - artwork and UI improvements also count!\n\nSee the Contribute and Participate page for for information.\n\nWhere can I contribute?\n\nThe project is located in several organizations in GitHub.\nCore and plugins are located in the jenkinsci org,\ninfrastructure - in jenkins-infra.\nYou can contribute to any component within these organizations.\n\nFor example, you could contribute to the following components:\n\nJenkins Core\n( contributing)\n\nProject Website\n( contributing)\n\nPackaging (\nDocker,\nnative packages)\n\nPlugins ( existing plugins,\nplugin tutorial)\n\nYou can also create\nnew Jenkins plugins and get them\nhosted\nin the organization.\n\nWhat can I do?\n\nOur issue tracker contains lots of issues you could work on.\nIf you are new to Jenkins,\nyou could start by fixing some easier issues.\nIn the issue tracker we mark such issues with the newbie-friendly label\n( search query).\nYou can also submit your own issue and propose a fix.\n\nHow do I label issues and pull requests?\n\nHacktoberfest project requires issues and/or pull requests to be labeled with the hacktoberfest label.\nYou may have no permissions to set labels on your own, but do not worry!\nJust mention @jenkinsci/hacktoberfest or @jenkins-infra/hacktoberfest in the repository,\nand we will set the labels for you.\n\nHow do I get reviews?\n\nAll examples above are being monitored by the Jenkins contributors,\nand you will likely get a review within few days.\nReviews in other repositories and plugins may take longer.\nIn the case of delays, ping @jenkinsci/code-reviewers in your pull request\nor send a message to the mailing list.\n\nWhere can I find info?\n\nJenkins project contains lots of materials about contributing to the project.\nHere are some entry links:\n\nParticipate and Contribute\n\nPlugin Development Tutorials\n\nDeveloper Documentation\n\nNeed help?\n\nYou can reach out to us using IRC Channels\nand the Jenkins Developer Mailing List.\nIn the case of mailing lists it is recommended to mention Hacktoberfest\nin the email subject.","title":"Hacktoberfest. Contribute to Jenkins!","tags":["hacktoberfest","event","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2017-10-02T00:00:00.000Z","id":"3c59e404-8125-5869-a3c8-98dd83976f14","slug":"/blog/2017/10/02/pipeline-templates-with-shared-libraries/","strippedHtml":"This is a guest post by Philip Stroh, Software Architect at\nTimoCom.\n\nWhen building multiple microservices - e.g. with Spring Boot - the integration\nand delivery pipelines of your services will most likely be very similar.\nSurely, you don’t want to copy-and-paste Pipeline code from one Jenkinsfile\nto another if you develop a new service or if there are adaptions in your\ndelivery process. Instead you would like to define something like a pipeline\n\"template\" that can be applied easily to all of your services.\n\nThe requirement for a common pipeline that can be used in multiple projects does not only emerge in microservice architectures. It’s valid for all areas where applications are\nbuilt on a similar technology stack or deployed in a standardized way (e.g. pre-packages as containers).\n\nIn this blog post I’d like to outline the possibility to create such a pipeline \"template\" using Jenkins Shared Libraries. If\nyou’re not yet familiar with Shared Libraries I’d recommend having a look at\nthe documentation.\n\nThe following code shows a (simplified) integration and delivery Pipeline for a\nSpring Boot application in declarative syntax.\n\nJenkinsFile\n\npipeline {\n    agent any\n    environment {\n        branch = 'master'\n        scmUrl = 'ssh://git@myScmServer.com/repos/myRepo.git'\n        serverPort = '8080'\n        developmentServer = 'dev-myproject.mycompany.com'\n        stagingServer = 'staging-myproject.mycompany.com'\n        productionServer = 'production-myproject.mycompany.com'\n    }\n    stages {\n        stage('checkout git') {\n            steps {\n                git branch: branch, credentialsId: 'GitCredentials', url: scmUrl\n            }\n        }\n\n        stage('build') {\n            steps {\n                sh 'mvn clean package -DskipTests=true'\n            }\n        }\n\n        stage ('test') {\n            steps {\n                parallel (\n                    \"unit tests\": { sh 'mvn test' },\n                    \"integration tests\": { sh 'mvn integration-test' }\n                )\n            }\n        }\n\n        stage('deploy development'){\n            steps {\n                deploy(developmentServer, serverPort)\n            }\n        }\n\n        stage('deploy staging'){\n            steps {\n                deploy(stagingServer, serverPort)\n            }\n        }\n\n        stage('deploy production'){\n            steps {\n                deploy(productionServer, serverPort)\n            }\n        }\n    }\n    post {\n        failure {\n            mail to: 'team@example.com', subject: 'Pipeline failed', body: \"${env.BUILD_URL}\"\n        }\n    }\n}\n\nThis Pipeline builds the application, runs unit as well as integration tests and deploys the application to\nseveral environments. It uses a global variable \"deploy\" that is provided within a Shared Library. The deploy method\ncopies the JAR-File to a remote server and starts the application. Through the handy REST endpoints of Spring Boot\nActuator a previous version of the application is stopped beforehand. Afterwards the deployment is verified via the\nhealth status monitor of the application.\n\nvars/deploy.groovy\n\ndef call(def server, def port) {\n    httpRequest httpMode: 'POST', url: \"http://${server}:${port}/shutdown\", validResponseCodes: '200,408'\n    sshagent(['RemoteCredentials']) {\n        sh \"scp target/*.jar root@${server}:/opt/jenkins-demo.jar\"\n        sh \"ssh root@${server} nohup java -Dserver.port=${port} -jar /opt/jenkins-demo.jar &\"\n    }\n    retry (3) {\n        sleep 5\n        httpRequest url:\"http://${server}:${port}/health\", validResponseCodes: '200', validResponseContent: '\"status\":\"UP\"'\n    }\n}\n\nThe common approach to reuse pipeline code is to put methods like \"deploy\" into\na Shared Library. If we now start developing the next application of the same\nfashion we can use this method for deployments as well. But often there are\neven more similarities within projects of one company. E.g. applications are\nbuilt, tested and deployed in the same way into the same environments\n(development, staging and production). In this case it is possible to define\nthe whole Pipeline as a global variable within a Shared Library. The next code\nsnippet defines a Pipeline \"template\" for all of our Spring Boot applications.\n\nvars/myDeliveryPipeline.groovy\n\ndef call(Map pipelineParams) {\n\n    pipeline {\n        agent any\n        stages {\n            stage('checkout git') {\n                steps {\n                    git branch: pipelineParams.branch, credentialsId: 'GitCredentials', url: pipelineParams.scmUrl\n                }\n            }\n\n            stage('build') {\n                steps {\n                    sh 'mvn clean package -DskipTests=true'\n                }\n            }\n\n            stage ('test') {\n                steps {\n                    parallel (\n                        \"unit tests\": { sh 'mvn test' },\n                        \"integration tests\": { sh 'mvn integration-test' }\n                    )\n                }\n            }\n\n            stage('deploy developmentServer'){\n                steps {\n                    deploy(pipelineParams.developmentServer, pipelineParams.serverPort)\n                }\n            }\n\n            stage('deploy staging'){\n                steps {\n                    deploy(pipelineParams.stagingServer, pipelineParams.serverPort)\n                }\n            }\n\n            stage('deploy production'){\n                steps {\n                    deploy(pipelineParams.productionServer, pipelineParams.serverPort)\n                }\n            }\n        }\n        post {\n            failure {\n                mail to: pipelineParams.email, subject: 'Pipeline failed', body: \"${env.BUILD_URL}\"\n            }\n        }\n    }\n}\n\nNow we can setup the Pipeline of one of our applications with the following method call:\n\nJenkinsfile\n\nmyDeliveryPipeline(branch: 'master', scmUrl: 'ssh://git@myScmServer.com/repos/myRepo.git',\n                   email: 'team@example.com', serverPort: '8080',\n                   developmentServer: 'dev-myproject.mycompany.com',\n                   stagingServer: 'staging-myproject.mycompany.com',\n                   productionServer: 'production-myproject.mycompany.com')\n\nThe Shared library documentation mentions the ability to encapsulate\nsimilarities between several Pipelines with a global variable. It shows how we\ncan enhance our template approach and build a higher-level DSL step:\n\nvars/myDeliveryPipeline.groovy\n\ndef call(body) {\n    // evaluate the body block, and collect configuration into the object\n    def pipelineParams= [:]\n    body.resolveStrategy = Closure.DELEGATE_FIRST\n    body.delegate = pipelineParams\n    body()\n\n    pipeline {\n        // our complete declarative pipeline can go in here\n        ...\n    }\n}\n\nNow we can even use our own DSL-step to set up the integration and deployment Pipeline of our project:\n\nJenkinsfile\n\nmyDeliveryPipeline {\n    branch = 'master'\n    scmUrl = 'ssh://git@myScmServer.com/repos/myRepo.git'\n    email = 'team@example.com'\n    serverPort = '8080'\n    developmentServer = 'dev-myproject.mycompany.com'\n    stagingServer = 'staging-myproject.mycompany.com'\n    productionServer = 'production-myproject.mycompany.com'\n}\n\nThe blog post showed how a common Pipeline template can be developed using the\nShared Library functionality in Jenkins. The approach allows to create a\nstandard Pipeline that can be reused by applications that are built in a\nsimilar way.\n\nIt works for Declarative and Scripted Pipelines as well. For declarative\npipelines the ability to define a Pipeline block in a Shared Library is\nofficial supported since version 1.2 (see the recent blog post on\nDeclarative Pipeline 1.2).","title":"Share a standard Pipeline across multiple projects with Shared Libraries","tags":["pipeline","declarative","microservices"],"authors":[{"avatar":null,"blog":null,"github":"pstrh","html":"","id":"pstrh","irc":null,"linkedin":null,"name":"Philip Stroh","slug":"/blog/authors/pstrh","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":264,"numPages":100,"currentPage":34}},
    "staticQueryHashes": ["3649515864"]}