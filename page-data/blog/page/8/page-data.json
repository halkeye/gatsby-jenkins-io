{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/8",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-09-10T00:00:00.000Z","id":"a847810a-0c71-5703-bb4a-557bea75dea1","slug":"/blog/2020/09/10/jenkins-continuous-evolution-cdcon/","strippedHtml":"The Jenkins project has been around for over fifteen years and is the defacto platform for CI/CD. One of the reasons it continues to be so ubiquitous is that Jenkins constantly evolves and offers flexibility to integrate other tools that work well for your solution.\n\nAt CDCon, on October 7-8, there are two particular Jenkins talks that will focus on new directions that the Jenkins platform is evolving too and getting better and better for users.\n\nHeard of JCasC and Not Sure Where to Start? Let me Help You!\n\nConfiguration as code is a best practice for your CI/CD setup as it makes the complex process of setting up Jenkins simpler and more reproducible. Jenkins Configuration as Code (JCasc) enables Jenkins users to define the whole configuration as a simple, plain text YAML syntax. With JCasc, setting up a new Jenkins controller is easier than ever before. To get started with JCasC some initial effort is required. This talk walks you through a basic setup for easily spinning up new Jenkins instances.\n\nOctober 7 at 2:20 PM PST\nSpeaker: Ewelina Wilkosz, Eficode\n\nEwelina W is passionate about making sure that her customers' software is being built, tested and released in the best possible way. And, most importantly, that software developers don’t hate the process. Ewelina has been involved in Jenkins Configuration as Code plugin development from the very beginning. This is a must-see talk where Ewelina will also share some tips and tricks. The talk will feature using Docker, Jenkins and GitHub Actions as a quick way to build… Jenkins!\n\nBridging the Gap with Tekton-client-plugin for Jenkins\n\nTekton provides Kubernetes-native CI/CD building blocks. It enables users to take full advantage of cloud-native features around scalability and high availability. Jenkins flexibility enables integration with Tekton. This talk showcases the new tekton-client-plugin for Jenkins that enables Jenkins to interact with Tekton pipelines on a Kubernetes cluster. Tekton and Jenkins are both CDF projects and this talk highlights the first steps towards better Tekton and Jenkins interoperability, a key goal of the CD Foundation.\n\nOctober 7 at 11:40 AM PST\nSpeaker: Vibhav Bobade, Red Hat\n\nRegister for CDCon\n\nBoth these talks showcase the ultimate flexibility and power of the Jenkins platform and how it continues to evolve to meet the challenges of modern-day CI/CD. Don’t miss out; register for CDCon to attend.\n\nCDCon has pledged to donate 100% of the proceeds received from CDCon 2020 registration to charitable causes: Black Girls Code, Women Who Code and the CDF Diversity Fund. Registrants indicate which charitable fund they want their 25 USD registration fees to go to during registration. If you can’t afford the registration cost, please apply for the diversity scholarship.","title":"Learn more about Jenkins' continuous evolution at CDCon","tags":["cdcon","talks","jcasc","cicd","tekton"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/4ea1f/cdfoundation.jpg","srcSet":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/b8799/cdfoundation.jpg 32w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/c15a4/cdfoundation.jpg 64w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/4ea1f/cdfoundation.jpg 128w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/d4baf/cdfoundation.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/c9eb6/cdfoundation.webp 32w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/5f6e9/cdfoundation.webp 64w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/b881c/cdfoundation.webp 128w,\n/gatsby-jenkins-io/static/afc7435059ce92f0d58e1a8086d9e05d/3f20b/cdfoundation.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":122}}},"blog":"https://cd.foundation/news/blog/","github":"cdfoundation","html":"<div class=\"paragraph\">\n<p>The Continuous Delivery Foundation (CDF) serves as the vendor-neutral home of many of the fastest-growing projects for continuous delivery, including Jenkins, Jenkins X, Spinnaker, and Tekton.\nCDF supports DevOps practitioners with an open model, training, industry guidelines, and a portability focus.</p>\n</div>","id":"cdfoundation","irc":null,"linkedin":null,"name":"Continuous Delivery Foundation","slug":"/blog/authors/cdfoundation","twitter":"cdeliveryfdn"}]}},{"node":{"date":"2020-08-31T00:00:00.000Z","id":"43eb825a-3d18-5e4f-a85a-0f03ad89902f","slug":"/blog/2020/08/31/custom-distribution-service/","strippedHtml":"Hello everyone,\n\nThis is the final blog post for the Custom Distribution Service project during the Google Summer of Code timeline.\nI have mixed feelings since we are almost near the finish line for one of the most amazing open source programs out there.\nHowever, it is time to wrap things up for this project and achieve a state where the project can be built upon and extended further.\nThis phase has been super busy with respect to the bug fixes, testing and getting the project hosted, so let us get straight into the phase 3 updates.\n\nFixes and Code quality assurance\n\nSet Jenkinsfile agent to linux\n\nWe realised that the build was failing on windows and that there was not really a use-case\nfor running it on windows for right now. Maybe it could be on a future roadmap. Therefore, we\ndecided to shift the testing to only linux agents with respect to running the tests on the jenkins\nserver.\n\nPull Request #116\n\nBackend port error message\n\nSpring boot has a default message on the port:8080 and therefore we wanted to change\nit to a custom message on the backend. So the major takeaway here is that we needed to\nimplement the Error Controller interface and include a custom message in it.\nThis was technical debt from the last phase and was completed and merged during this phase.\n\nPull Request #92\n\nPMD Analysis\n\nIn order to enhance the quality of the code, the PMD source code analyser was applied to the project.\nIt helped me catch tons of errors. When the initial PMD check was run and we found approximately 162 PMD errors. We realised some of them were not relevant and some of them could be fixed later.\n\nPull Request #102\n\nFindbugs Analysis\n\nAnother tool to improve code quality that we included in this phase was findbugs.\nIt did catch around 5-10 bugs in my code which I immediately resolved. Most of them were\naround the Closeable HTTP Request and an easy fix was the try with resources.\n\nPull Request #118\n\nJacoco Code Coverage\n\nWe needed to make sure most of the code we write had proper coverage for all branches and\nlines. Therefore we decided to include a JaCoco Code Coverage reporter that helped us find the\nuncovered lines and areas we need to improve coverage on.\n\nPull Request #103\n\nRemove JCasC generation\n\nWhile developing the service we quickly realised that the generation of the war package broke if we\nincluded a configuration as code section but did not provide a path to the corresponding required yml\nfile. Therefore we took a decision to remove the casc section all together. Maybe it will comeback in\na future patch\n\nPull Request link: #127\n\nIssue link: #65\n\nMinor Fixes\n\nLogging Fix: #99\n\nDocs Fix : link: #120\n\nUpdate Center Dump Fix : link: #125\n\nClass Path Fix: link: #126\n\nRelease Drafter Addition: link: #136\n\nFront end\n\nCommunity Config Navigation link\n\nThere was no community configuration link present for navigation which was added here.\n Now it is easier to navigate to the community page from the home page itself.\n\nPull Request #100\n\nDocker updates\n\nBuild everything with Docker\n\nThis was one of the major changes this phase with respect to making the service very easy to spin up locally, this change will greatly help community adoption since it eliminates the tools one needs to install locally. Initially the process was to run maven locally, generate all of the files and then copy all of its contents into the container. However, with this change we are going to generate all of the files inside the docker container itself. Allowing the user to just run a couple of commands to get the service up and running.\n\nSo some of the major changes we did with respect to the dockerfile was:\n\na) Copy all of the configuration files and pom.xml into the container.\n\nb) Run the command mvn clean package inside the container which generates the jar.\n\nc) Run the jar inside the container.\n\nPull Request #104\n\nHosting updates\n\nThis process was supposed to be a future roadmap, however the infra team approved and was super helpful\nin making this process as smooth as possible. Thanks to Gavin, Tim and Oblak for making this possible.\nHere is the google group dicussion\n\nThe project has now been hosted here as a preview. It still needs\nsome fixes to be fully functional.\n\nInfra Docker PR #131\n\nInfra Project Addition PR link: #393\n\nTesting Updates\n\nUnit test the services\n\nWith respect to community hosting and adoption, testing of the service one of the most important and major milestones for this phase was to test the majority of the code and we have completed the testing with flying colors. All of the services have been completely unit tested, which is a major accomplishment.\nFor the testing of the service we decided to go with wiremock which can be used to mock external services. Kezhi’s comment helped us to understand what we needed to do since he had done something quite similar in his Github Checks API project.\n\nSo we basically wiremocked the update-center url and made sure we were getting\nthe accurate response with appropriate control flow logic tested.\n\nwireMockRule.stubFor(get(urlPathMatching(\"/getUpdateCenter\"))\n                .willReturn(aResponse()\n                        .withStatus(200)\n                        .withHeader(\"Content-Type\", \"application/json\")\n                        .withBody(updateCenterBody)));\n\nPull Request #105\n\nAdd Update Center controller tests\n\nAnother major testing change involved testing the controllers. For this we decided to use the wiremock library in java to mock the server response when the controllers were invoked.\n\nFor example: If I have a controller that serves in an api called /api/plugin/getPluginList\nwiremock can be used to stub out its response when the system is under test. So we use something like this to test it out.\n\nwhen(updateService.downloadUpdateCenterJSON()).thenReturn(util.convertPayloadToJSON(dummyUpdateBody))\n\nWhen the particular controller is called the underlying service is mocked and it returns a response according to the one provided by us. To find more details the PR is here.\n\nPull Request #106\n\nAdd Packager Controller Tests\n\nAlong with the update center controller tests another controller that needed to be tested was the\npackager controller. Also we needed to make sure that all the branches for the controllers were properly tested. Additional details can be found in the PR below.\n\nPull Request #133\n\nDocker Compose Tests\n\nOne problem that we faced the entire phase was the docker containers. We regularly found out that due to\nsome changes in the codebase the docker container build sometimes broke, or even sometimes the inner api’s seemed to malfunction. In order to counteract that we decided to come up with some tests locally.\nSo what I did was basically introduce a set of bash scripts that would do the following:\n\na) Build the container using the docker-compose command.\n\nb) Run the container.\n\nc) Test the api’s using the exposed port.\n\nd) Teardown the running containers.\n\nPull Request #131\n\nUser Documentation\n\nWe also included a user docs guide so that it makes it super easy to get started with the service.\n\nPull Request #145\n\nFuture Roadmap\n\nThis has been a super exciting project to work on and I can definitely see this project being built\nupon and extended in the future.\n\nI would like to talk about some of the features that are left to come in and can be taken up in\na future roadmap discussion\n\na) JCasC Support :\n\nDescription: Support the generation of a Jenkins Configuration as Code file asking the user interactively for the plugins they select what would be the configuration they would want eg: If the user selects the slack plugin we need to ask him questions like what is the slack channel? what is the token? etc, and on the basis of this generate a casc file. This feature was initially planned to go into the service but we realised this is a project in its own capacity.\n\nb) Auto Pull Request Creation :\n\nDescription: Allow users to create a configuration file and immediately open a pull request on github\nwithout leaving the user interface. This was originally planned using a github bot and we started the work on it. But we were in doubt if the service would be hosted or not and therefore put the development on hold.\nYou can find the pull requests here:\n\nGithub Controller #72\n\nPull Request Creation Functions #66\n\nc) Synergy with Image Controller\n\nDescription: This feature requires some planning, some of the questions we can ask are:\n\na) Can we generate the images (i.e Image Controller).\nb) Can we have the service as a multipurpose generator ?\n\nStatistics\n\nThis phase has been the busiest of all phases and it has involved a lot of work, more than I had\ninitially expected in the phase. Although lines\nof code added is not an indication of work done, however 800 lines of Code added is a real personal milestone for me.\n\nPull Requests Opened\n26\n\nLines of Code Added\n1096\n\nLines of Docs Added\n200\n\nOther links\n\nGitter Channel Link\nGSoC Proposal\nDesign Document\nDaily Notes","title":"Custom Distribution Service : Phase 3 Blogpost","tags":["service","distribution","cloud-native","gsoc","gsoc2020","packaging","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/authors/sladyn98","twitter":"SladynN"}]}},{"node":{"date":"2020-08-31T00:00:00.000Z","id":"6bac69c5-68d0-5291-8064-51a2296a084b","slug":"/blog/2020/08/31/github-checks-api-plugin-coding-phase-3/","strippedHtml":"This blog post is about our phase 3 progress on GitHub Checks API Project, you can find our previous blog posts for phase 1 and phase 2.\n\nAt the end of this summer, the GSoC journey for GitHub Checks API Project comes to an end as well.\nIn this blog post, I’ll show you our works during the last month:\n\nPipeline Support\n\nRerun Request Support\n\nGit SCM Support\n\nDocumentation\n\nAll the above features will be available in our planned 1.0.0 version of Checks API Plugin and GitHub Checks Plugin.\n\nCoding Phase 3 Demo\n\nPipeline Support\n\nThe pipeline support allows users to directly publish checks in their pipeline script without depending on any other consumers.\n\nThe check in the above screenshot is published by script:\n\npublishChecks name: 'pipeline check', title: 'pipeline ', summary: '# A pipeline check example',\n        text: \"## This check is published through the pipeline script\",\n        detailsURL: 'https://ci.jenkins.io'\n\nIf you want to publish checks to GitHub, please install the GitHub implementation and refer to the GitHub API documentation for the requirements for each field. A default value (build link) for detailsURL will be provided automatically.\n\nThis feature can be useful when many stages exist in your pipeline script and each takes a long time: you can publish a check for each stage to keep track of the build.\n\nRerun Request Support\n\nThe rerun request allows GitHub users to rerun the failed builds. When a build failed (which leads to a failed check), a Re-run button will be added automatically by GitHub.\n\nBy clicking the Re-run button, Jenkins will reschedule a build for the last commit of this branch.\n\nSince all checks of a commit are produced by a single build, you don’t have to rerun all failed checks, just rerun any one of the failed check will refresh all checks.\n\nGit SCM Support\n\nThanks to Ullrich 's great help, the GitHub Checks Plugin now supports Git SCM.\nThis means now you can publish checks for your freestyle project or any other projects that use Git SCM.\n\nDocument\n\nConsumers Guide and Implementation Guide are now available.\nAs a Jenkins developer, you can now start consuming our API or even providing an implementation for other SCM platforms beside GitHub.\n\nAcknowledgment\n\nThe whole GitHub Checks API project is started as a Google Summer of Code project. Much appreciate my mentors ( Tim and Ullrich) for their great help during the whole summer. Also huge thanks to the Jenkins GSoC SIG and the whole community for the technique support and resources.\n\nResources\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nProject Page\n\nGitter Channel","title":"GitHub Checks API Plugin Project - Coding Phase 3","tags":["github","api","plugins","developer","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg","srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/77b35/XiongKezhi.jpg 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/d4a57/XiongKezhi.jpg 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/68974/XiongKezhi.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/ef6ff/XiongKezhi.webp 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/8257c/XiongKezhi.webp 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/6766a/XiongKezhi.webp 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/22bfc/XiongKezhi.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"XiongKezhi","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 Student. Kezhi is an open source enthusiast who enjoys sharing ideas with other developers. He started contributing to Jenkins in March 2020. Currently, he is working on <a href=\"https://github.com/XiongKezhi/checks-api-plugin\">GitHub Checks API Plugin</a>.</p>\n</div>","id":"XiongKezhi","irc":null,"linkedin":"kezhi-xiong-44234a188","name":"Kezhi Xiong","slug":"/blog/authors/xiongkezhi","twitter":"AugustX_"}]}},{"node":{"date":"2020-08-29T00:00:00.000Z","id":"a6cfa2b5-a75a-5920-892a-2548994c1318","slug":"/blog/2020/08/29/git-performance-improvement-phase3/","strippedHtml":"Since the beginning of the project, the core value which drove its progress was \"To enhance the user experience for running Jenkins jobs by reducing the overall execution time\".\n\nTo achieve this goal, we laid out a path:\n\nCompare the two existing git implementations i.e CliGitAPIImpl and JGitAPIImpl using performance benchmarking\n\nUse the results to create a feature which would improve the overall performance of git plugin\n\nAlso, fix existing user reported performance issues\n\nLet’s take a journey to understand how we’ve built the new features. If you’d like to skip the journey part, you can directly go to the [major performance improvements] section and the [minor performance section] to see what we’ve done!\n\nJourney to release\n\nThe project started with deciding to choose a git operation and then trying to compare the performance of that operation by using command line git and then with JGit.\n\nStage 1: Benchmark results with git fetch\n\nThe performance of git fetch (average execution time/op) is strongly correlated to the size of a repository\n\nThere exists an inflection point on the scale of repository size after which the nature of JGit performance changes (it starts to degrade)\n\nAfter running multiple benchmarks, it is safe to say that for a large sized repository command line git would be a better choice of implementation.\n\nWe can use this insight to implement a feature which avoids JGit with large repositories.\n\nStage 2: Comparing platforms\n\nThe project was also concerned that there might be important differences between operating systems.\nFor example, what if command line Git for Windows performed very differently than command line Git on Linux or FreeBSD?\nBenchmarks were run to compare fetch performance on several platforms.\n\nRunning git fetch operation for a 400 MiB sized repository on:\n\nAMD64 Microsoft Winders\n\nAMD64 FreeBSD\n\nIBM PowerPC 64 LE Ubuntu 18\n\nIBM System 390 Ubuntu 18\n\nThe result of running this experiment is given below:\n\nThe difference in performance between git and JGit remains constant across all platforms.\n\nBenchmark results on one platform are applicable to all platforms.\n\nStage 3: Performance of git fetch and repository structure\n\nThe area of the circle enclosing each parameter signifies the strength of the positive correlation between the performance of a git fetch operation and that parameter. From the diagram:\n\nSize of the aggregated objects is the dominant player in determining the execution time for a git fetch\n\nNumber of branches and Number of tags play a similar role but are strongly overshadowed by size of repository\n\nNumber of commits has a negligible effect on the performance of running git fetch\n\nAfter running these experiments from Stage-1 to Stage-3, we developed a solution called the GitToolChooser which is explained in the next stage\n\nStage 4: Faster checkout with Git tool chooser\n\nThis feature takes the responsibility of choosing the optimal implementation from the user and hands it to the plugin. It takes the decision of recommending an implementation on the basis of the size of the repository. Here is how it works.\n\nThe image above depicts the performance enhancements we have performed over the course of the GSoC project. These improvements have enabled the checkout step to be finished within half of what it used to take earlier in some cases.\n\nLet’s talk about performance improvements in two parts.\n\nMajor performance improvements\n\nBuilding Tensorflow (~800 MiB) using a Jenkins pipeline, there is over 50% reduction in overall time spent in completing a job!\nThe result is consistent multiple platforms.\n\nThe reason for such a decrease is the fact that JGit degrades in performance when we are talking about large sized repositories. Since the GitToolChooser is aware of this fact, it chooses to recommend command line git instead which saves the user some time.\n\nMinor performance improvements\n\nNote: Enable JGit before using the new performance features to let GitToolChooser work with more options → Here’s how\n\nBuilding the git plugin (~ 20 MiB) using a Jenkins pipeline, there is a drop of a second across all platforms when performance enhancement is enabled. Also, eliminating a redundant fetch reduces unnecessary load on git servers.\n\nThe reason for this change is the fact that JGit performs better than command line git for small sized repositories (<50MiB) as an already warmed up JVM favors the native Java implementation.\n\nReleases\n\nGit Plugin 4.4.0\n\nAdd GitToolChooser\n\nRemove redundant fetch\n\nGit Client Plugin 3.4.0\n\nAdd support to communicate compatibility of JGit with certain additional SCM behaviors\n\nThe road ahead\n\nSupport from other branch source plugins\n\nPlugins like the GitHub Branch Source Plugin or GitLab Branch Source Plugin need to extend an extension point provided by the git plugin to facilitate the exchange of information related to size of a remote repository hosted by the particular git provider\n\nJENKINS-63519 : GitToolChooser predicts the wrong implementation\n\nAddition of this feature to GitSCMSource\n\nDetection of lock related delays accessing the cache directories present on the controller\n\nThis issue was reported by the plugin maintainer Mark Waite, there is a need to reproduce the issue first and then find a possible solution.\n\nReaching out\n\nFeel free to reach out to us for any questions or feedback on the project’s\nGitter Channel or the\nJenkins Developer Mailing list.\nReport an issue at Jenkins Jira.\n\nUseful Links\n\nPhase 1 Blog: https://www.jenkins.io/blog/2020/07/09/git-performance-improvement-phase1/\n\nPhase 2 Blog: https://www.jenkins.io/blog/2020/07/29/git-performance-improvement-phase2/\n\nProject Page: https://www.jenkins.io/projects/gsoc/2020/projects/git-plugin-performance/\n\nDemonstration","title":"Git Plugin Performance Improvement: Final Phase and Release","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/authors/rishabhbudhouliya","twitter":null}]}},{"node":{"date":"2020-08-27T00:00:00.000Z","id":"c3c50d8e-f813-526e-9f03-e29284122a65","slug":"/blog/2020/08/27/machine-learning-plugin-coding-phase3/","strippedHtml":"Good to see you all again !\n\nThis is my final blog post about coding phase 3 in Jenkins Machine Learning Plugin for GSoC 2020.\nBeing at the end of GSoC 2020, we had to finish all the pending issues and testing before a stable release in the main repository. Throughout this program, there were lots of learning and hard work will make this plugin valuable to the Data Science and Jenkins community.\n\nSummary\n\nWith combining all of the work in phase 1, 2 and 3, initial version of Machine learning plugin( 1.0 ) was successfully released in Jenkins plugin repository.\nAn interesting feature which allows users to connect to their existing programming language kernels more than connecting to only IPython kernel was introduced in this phase. It can be selected in multiple steps with different kernel.\nImages and graphs produced by Jupyter notebooks will be saved in user preferred folder in the workspace that can be used for reporting/analytic purposes later. Hoping this blog summarizes the Machine Learning’s features and future contributions. Thank you for your interest and support !!!\n\nMain features of Machine Learning plugin\n\nExecute Jupyter notebooks directly\n\nRun different language scripts using multiple build steps\n\nConvert Jupyter Notebooks to Python\n\nConfigure Jupyter kernels( IPython, IRKernel, IJulia etc) properties\n\nSupport to execute Notebooks/scripts on Agent\n\nExtract graph/map/images from the code\n\nEach build step can be associated with a machine learning task\n\nSupport for Windows and Linux\n\nFuture improvements\n\nImproving performance of the plugin\n\nTry to implement jira:JENKINS-63377[]\n\nSupport parameterized definitions in Notebooks jira:JENKINS-63478[]\n\nIncreasing testing code coverage\n\nMultiple language kernel support\n\nIf there are existing kernels in the system, user will be able to configure in the global configurations in order to apply in the builder/step configuration.\n\nSome popular interactive kernels\n\nIPython for python\n\nIRKernel for R\n\nIJulia for Julia\n\nIJavascript for javascript\n\nMore kernels and installation guides are found here. https://github.com/jupyter/jupyter/wiki/Jupyter-kernels\n\nDump images and graphs\n\nText output will be displayed in the console log. At the same time images/graphs/heat maps and HTMLs will be saved in the workspace. An action is shown in the left panel to display images in realtime. Due to the Content Security Policy of jenkins, some HTMLs which contain harmful javascript may not render in jenkins UI.\n\nFixed bugs\n\nThere were more bugs identified and fixed with many interactive testings. Setting the working directory of kernels was a big issue while getting datasets/files by script. Zeppelin process launcher was bypassed to fix this issue.\n\nPatch version released\n\nA major bug which was created while setting the process working directory had patched in the v1.0.1. The latest release is more stable now.\n\nAcknowledgement\n\nMachine Learning plugin had been developed under GSoC 2020 program. A huge thanks to Bruno P. Kinoshita, Marky Jackson, Shivay Lamba, Ioannis Moutsatsos and Org admins for this wonderful experience.\nI would be grateful for contributing this plugin continuously and more in Jenkins.\n\nResources\n\nCommunity Bonding blog post\n\nPhase 1 blog post\n\nPhase 2 blog post\n\nGithub\n\nProject page\n\nPlugin page\n\nDesign document","title":"Machine Learning Plugin project - Coding Phase 3 blog post","tags":["machinelearning","datascience","jupyter","plugins","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg","srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/9b030/loghijiaha.jpg 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/f38b5/loghijiaha.jpg 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/bcd2b/loghijiaha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/ceea6/loghijiaha.webp 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/45b82/loghijiaha.webp 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/933cd/loghijiaha.webp 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/6c13d/loghijiaha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":158}}},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"/blog/authors/loghijiaha","twitter":"loghi5"}]}},{"node":{"date":"2020-08-27T00:00:00.000Z","id":"ab88123c-a9df-5bf7-97c3-bc6cd5656a55","slug":"/blog/2020/08/27/winsw-yaml-support/","strippedHtml":"Hello, world! GSoC 2020 Phase 3 has ended now and it was a great period for the Jenkins Windows Services - YAML Configuration Support project.\nIn this blog post, I will announce the updates during the GSoC 2020 - Phase 2 and Phase 3. If you are not already aware of this project,\nI would recommend reading this blog post which was published after GSoC 2020 - Phase 1.\n\nProject Scope\n\nWindows Service Wrapper - YAML configuration support\n\nYAML schema validation\n\nNew CLI\n\nXML Schema validation\n\nYAML Configuration Support\n\nUnder WinSW - YAML configurations support, these tasks will be done.\n\nYAML to Object mapping\n\nAt the moment YAML object mapping is finished and merged.\nYou can find all the implementations in this Pull Request.\n\nExtend WinSW to support both XML and YAML\n\nThis task is already done and merged. Find the implementation in this Pull Request.\n\nYAML Configuration support for Extensions\n\nAt the moment there are 2 internal plugins in WinSW. RunAwayProcessKiller and SharedDirectoryMapper.\nWe allow users to provide configurations for those plugins in the same XML and YAML configuration file which is used to configure WinSW. This task is merged as well.\nPull Request\n\nYAML schema validation\n\nUsers can validate YAML configuration file against JSON schema file.\nUsers can use YAML utility tool from Visual Studio market place to validate YAML config file against JSON schema.\n\nKey updates in Phase 2 and Phase 3\n\nYAML Configuration structure\n\nEnvironment variables\n\nNow users can provide environment variables as a sequence of dictionaries that contains name and value for environment variables.\n\nTimeStamp values\n\nUsers can specify timestamp values in the same manner used in XML (e.g. 10 ms, 5 sec, 3 min)\n\nYAML configuration document was published. YAML Configuration Specification\n\nExtend the WinSW to support both XML and YAML\n\nYAML support for extensions\n\nYAML schema validation against JSON schema\n\nSample YAML Configuration File\n\nid: jenkins\nname: Jenkins\ndescription: This service runs Jenkins automation server.\nenv:\n    - name: JENKINS_HOME\n      value: '%LocalAppData%\\Jenkins.jenkins'\n    - name: LM_LICENSE_FILE\n      value: host1;host2\nexecutable: java\narguments: >-\n    -Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"E:\\Winsw Test\\yml6\\jenkins.war\" --httpPort=8081\nlog:\n    mode: rotate\nonFailure:\n    - action: restart\n      delay: 10 sec\n    - action: reboot\n      delay: 1 hour\nextensions:\n    - id: killOnStartup\n      enabled: yes\n      classname: WinSW.Plugins.RunawayProcessKiller.RunawayProcessKillerExtension\n      settings:\n            pidfile: '%BASE%\\pid.txt'\n            stopTimeOut: 5000\n            StoprootFirst: false\n    - id: mapNetworDirs\n      enabled: yes\n      classname: WinSW.Plugins.SharedDirectoryMapper.SharedDirectoryMapper\n      settings:\n            mapping:\n                - enabled: false\n                  label: N\n                  uncpath: \\\\UNC\n                - enabled: false\n                  label: M\n                  uncpath: \\\\UNC2\n\nNew CLI\n\nLet me explain in brief, why we need a new CLI.\nIn WinSW, we will keep both XML and YAML configuration support.\nBut according to the current implementation, the user can’t specify the configurations file explicitly.\nAlso, we want to let the user skip the schema validation as well.\nSo We decided to move into new CLI which is more structured with commands and options.\nPlease read my previous blog post to learn more about commands and options in the new CLI.\n\nKey updates in Phase 2 and Phase 3\n\nRemove the /redirect command\n\ntestwait command was removed and add the wait option to the test command.\n\nstopwait command was removed and add the wait option to the stop command.\n\nHow to try\n\nUser can configure the Windows Service Wrapper by both XML and YAML configuration files using the following steps.\n\nCreate the configuration file (XML or YAML).\n\nSave it with the same name as the Windows Service Wrapper executable name.\n\nPlace the configuration file inside the directory(or in a parent directory), where the Windows Service Wrapper executable is located.\n\nIf there are both XML and YAML configuraiton files, Windows Service Wrapper will be configured by the XML configuration file.\n\nGSoC 2020 Phase 2 Demo\n\nGSoC 2020 Phase 3 Demo\n\nFuture Works\n\nXML Schema validation\n\nXML configuration file will be validated with the XSD file.\nI have started working on this feature and you can find the implementation in this Pull Request.\n\nYAML Configuration validate on startup\n\nHow to contribute\n\nYou can find the GitHub repository in this link.\nIssues and Pull requests are always welcome. Also, you can communicate with us in the WinSW Gitter channel,\nwhich is a great way to get in touch and there are project sync up meetings every Tuesday at 13:30 UTC on the Gitter channel.\n\nSome useful links\n\nPresentation Slides\n\nProject Page\n\nProject Repository\n\nFeature preview\n\nGitter Channel\n\nYamlDotNet library\n\nCommand Line Parser library","title":"Jenkins Windows Services: YAML Configuration Support - GSoC Project Results","tags":["winsw","windows","jenkins","gsoc","gsoc2020","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"buddhikac96","html":"","id":"buddhikac96","irc":null,"linkedin":null,"name":"Buddhika Chathuranga","slug":"/blog/authors/buddhikac96","twitter":null}]}},{"node":{"date":"2020-08-25T00:00:00.000Z","id":"7a744457-8457-529e-9c68-1e00d5e790df","slug":"/blog/2020/08/25/external-fingerprint-storage-phase-3/","strippedHtml":"The final phase for the External Fingerprint Storage\nProject has come to an end and to finish off, we release one more fingerprint storage plugin:\nthe PostgreSQL Fingerprint Storage Plugin!\n\nThis post highlights the progress made during phase-3.\nTo understand what the project is about and the past progress, please refer to the\nphase-1 post and the\nphase-2 post.\n\nIntroducing the PostgreSQL Fingerprint Storage Plugin\n\nWhy PostgreSQL?\n\nThere were several reasons why it made sense to build another reference implementation, especially backed by PostgreSQL.\n\nRedis is a key-value storage, and hence stores the fingerprints as blobs.\nThe PostgreSQL plugin defines a relational structure for fingerprints.\nThis offers a more powerful way to query the database for fingerprint information.\nFingerprint facets can store extra information inside the fingerprints, which cannot be queried in Redis directly.\nPostgreSQL plugin allows powerful (indexing) and efficient querying strategies which can even query the facet metadata.\n\nAnother reason for building this plugin was to provide a basis for other relational database plugins to be built.\nIt also validates the flexibility and design of our external fingerprint storage API.\n\nSince PostgreSQL is a traditional disk storage database, it is more suitable for systems storing a massive number of\nfingerprints.\n\nAmong relational databases, PostgreSQL is quite popular, has extensive support, and is open-source.\nWe expect the new implementation to drive more adoption, and prove to be beneficial to the community.\n\nInstallation:\n\nThe plugin can be installed using the\nexperimental update center.\nFollow along the following steps after running Jenkins to download and install the plugin:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nGo to Advanced tab\n\nConfigure the Update Site URL as: https://updates.jenkins.io/experimental/update-center.json\n\nClick on Submit, and then press the Check Now button.\n\nGo to Available tab.\n\nSearch for PostgreSQL Fingerprint Storage Plugin and check the box along it.\n\nClick on Install without restart\n\nThe plugin should now be installed on the system.\n\nUsage\n\nOnce the plugin has been installed, you can configure the PostgreSQL server details by following the steps below:\n\nSelect Manage Jenkins\n\nSelect Configure System\n\nScroll to the section Fingerprints and choose PostgreSQL Fingerprint Storage in the dropdown for\nFingerprint Storage Engine.\n\nConfigure the following parameters to connect to your PostgreSQL instance:\n\nHost - Enter hostname where PostgreSQL is running\n\nPort - Specify the port on which PostgreSQL is running\n\nSSL - Click if SSL is enabled\n\nDatabase Name - Specify the database name inside the PostgreSQL instance to be used. Please note that the database\nwill not be created by the plugin, the user has to create the database.\n\nConnection Timeout - Set the connection timeout duration in seconds.\n\nSocket Timeout - Set the socket timeout duration in seconds.\n\nCredentials - Configure authentication using username and password to the PostgreSQL instance.\n\nUse the Test PostgreSQL Connection button to verify that the details are correct and Jenkins is able to connect to\nthe PostgreSQL instance.\n\n[IMPORTANT] When configuring the plugin for the first time, it is highly important to press the Perform PostgreSQL\nSchema Initialization button. It will automatically perform schema initialization and create the necessary indexes.\nThe button can also be used in the case the database is wiped out and schema needs to be recreated.\n\nPress the Save button.\n\nNow, all the fingerprints produced by this Jenkins instance should be saved in the configured PostgreSQL instance!\n\nQuerying the Fingerprint Database\n\nDue to the relational structure defined by PostgreSQL, it allows users/developers to query the fingerprint data which\nwas not possible using the Redis fingerprint storage plugin.\n\nThe fingerprint storage can act as a consolidated storage for multiple Jenkins instances.\nFor example, to search for a fingerprint id across Jenkins instances using the file name, the following query could be\nused:\n\nSELECT fingerprint_id FROM fingerprint.fingerprint\nWHERE filename = 'random_file';\n\nA sample query is provided which can be tweaked depending on the parameters to be searched:\n\nSELECT * FROM fingerprint.fingerprint\nWHERE fingerprint_id = 'random_id'\n        AND instance_id = 'random_jenkins_instance_id'\n        AND filename = 'random_file'\n        AND original_job_name = 'random_job'\n        AND original_job_build_number = 'random_build_number'\n        AND timestamp BETWEEN '2019-12-01 23:59:59'::timestamp AND now()::timestamp\n\nThe facets are stored in the database as jsonb.\nPostgreSQL offers support to query jsonb.\nThis is especially useful for querying the information stored inside fingerprint facets.\nAs an example, the Docker Traceability Plugin stores information like the name of Docker images inside these\nfacets.\nThese can be queried across Jenkins instances like so:\n\n>'imageName' = 'random_container';\n\nAt the moment these queries require working knowledge of the database.\nIn future, these queries can be abstracted away by plugins and the features made available to users directly inside\nJenkins.\n\nDemo\n\nExternal Fingerprint Storage Demo\n\nSlide deck\n\nReleases 🚀\n\nWe released the 0.1-alpha-1 version for the\nPostgreSQL Fingerprint Storage Plugin.\nPlease refer to the\n\nchangelog for more information.\n\nRedis Fingerprint Storage Plugin 1.0-rc-3 was also\nreleased.\nThe\n\nchangelog provides more details.\n\nA few API changes made in the Jenkins core were released in Jenkins-2.253.\nIt mainly includes exposing fingerprint range set serialization methods for plugins.\n\nFuture Directions\n\nThe relational structure of the plugin allows some performance improvements that can be made when implementing\ncleanup, as well as improving the performance of Fingerprint#add(String job, int buildNumber).\nThese designs were discussed and are a scope of future improvement.\n\nThe current external fingerprint storage API supports configuring multiple Jenkins instances to a single storage.\nThis opens up the possibility of developing traceability plugins which can track fingerprints across Jenkins instances.\n\nPlease consider reaching out to us if you feel any of the use cases would benefit you, or if you would like to share\nsome new use cases.\n\nAcknowledgements\n\nThe PostgreSQL Fingerprint Storage Plugin and the Redis Fingerprint Storage plugin are maintained by the\nGoogle Summer of Code (GSoC) Team for External\nFingerprint Storage for Jenkins.\nSpecial thanks to Oleg Nenashev,\nAndrey Falko, Mike Cirioli,\nTim Jacomb, and the entire Jenkins community for all the contribution to this project.\n\nAs we wrap up, we would like to point out that there are plenty of future directions and use cases for the externalized\nfingerprint storage, as mentioned in the previous section, and we welcome everybody to contribute.\n\nReaching Out\n\nFeel free to reach out to us for any questions, feedback, etc. on the project’s\nGitter Channel or the\nJenkins Developer Mailing list.\nWe use Jenkins Jira to track issues.\nFeel free to file issues under either the postgresql-fingerprint-storage-plugin or the\nredis-fingerprint-storage-plugin component depending on the plugin.\n\nOther Links\n\nPhase 1 Post\n\nPhase 2 Post\n\nPostgreSQL Fingerprint Storage Plugin\n\nRedis Fingerprint Storage Plugin\n\njep:226[]\n\nGitter Channel\n\nProject Page","title":"External Fingerprint Storage Phase-3 Update: Introducing the PostgreSQL Fingerprint Storage Plugin","tags":["plugins","fingerprint","cloud-native","external-storage","developer","PostgreSQL","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg","srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/77b35/stellargo.jpg 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/d4a57/stellargo.jpg 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/ef6ff/stellargo.webp 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/8257c/stellargo.webp 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/6766a/stellargo.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://medium.com/@sumitsarinofficial","github":"stellargo","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 student. Sumit is an engineering student (senior) at Netaji Subhas Institute of Technology, University of Delhi. He started his journey of contributing to Jenkins in December 2019. His tiny contribution revolved around the Jenkins Fingerprint engine. He is currently working on building <a href=\"https://www.jenkins.io/projects/gsoc/2020/projects/external-fingerprint-storage\">External Fingerprint Storage for Jenkins</a>.</p>\n</div>","id":"stellargo","irc":null,"linkedin":"sumit-sarin","name":"Sumit Sarin","slug":"/blog/authors/stellargo","twitter":null}]}},{"node":{"date":"2020-08-12T00:00:00.000Z","id":"52309c34-03ae-57ce-b801-39141f4c3b3c","slug":"/blog/2020/08/12/windows-installers-upgrade/","strippedHtml":"This article describes the transition from the old Jenkins Windows installer 2.235.2 (32 bit) to the new Jenkins Windows installer 2.235.3 (64 bit)\n\nLet’s take a look how Jenkins installation on Windows happened before release of this upgrade.\n\nStep 1\n\nIt’s evident that branding information is not present here.\n\nStep 2\n\nJenkins would be installed into the 32 bit programs directory along with a 32 bit Java 8 runtime environment.\n\nStep 3\n\nThere was no option to select the user that would run the Jenkins service or the network port that would be used.\n\nIssues\n\nThe previous installer had issues that needed to be resolved:\n\nOnly supported 32-bit installations\n\nBundled an outdated Java 8 runtime environment\n\nNo support for Java 11\n\nNo port selection during installation\n\nNo choice of account for the Jenkins service\n\nThe Program Files (x86) directory was used for the Jenkins home directory\n\nRoad Forward\n\nThe new Jenkins Windows Installer resolves those issues\n\nSupports 64 bit installations and drops 32 bit support\n\nSupports 64 bit Java 8 and 64 bit Java 11\n\nPort selection and validation from the installer\n\nService account selection and validation from the installer\n\nProgram is installed in Program Files with Jenkins home directory in %AppData% of the selected service account\n\nThe JENKINS_HOME directory is placed in the LocalAppData directory for the user that the service will run as, this aligns with modern Windows file system layouts\n\nThe installer has been updated with branding to make it look nicer and provide a better user experience\n\nScreenshots\n\nYou may see below the sequence of screenshots for the new installer:\n\nStep 1\n\nWe can see now the Jenkins logo as a prominent part of the installer UI.\n\nStep 2\n\nJenkins installs by default in the 64 bit programs folder rather than in the 32 bit folder.\nNow the Jenkins logo and name are in the header during entire process of installation.\n\nStep 3\n\nNow the installer allows both specifying and testing the credentials by validating that the account has LogonAsService rights.\n\nStep 4\n\nNow the installer also allows specifying the port that Jenkins should run on and will not continue until a valid port is entered and tested.\n\nStep 5\n\nNow instead of bundling a JRE, the installer searches for a compatible JRE on the system (in the current search no JRE was installed).\nIn case you would like to use a different JRE from the one found by the installer, you can browse and specify it.\nOnly Java 8 and Java 11 runtimes are supported.\nIn case the selected JRE is found to be version 11 the installer will automatically add the necessary arguments and additional jar files for running under Java 11.\n\nStep 6\n\nAll of the items that users can enter in the installer should be overridable on the command line for automated deployment as well. The full list of properties that can be overridden will be available soon.\n\nNext Steps\n\nWindows users have alternatives for their existing Jenkins installations:\n\nUpgrade from inside Jenkins\n\nThe \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.\nUpgrade from inside Jenkins will continue to use the current Java version.\nUpgrade from inside Jenkins will continue to use the current installation location.\n\nUpgrade with the new Jenkins MSI installer\n\nIf you run the new Jenkins MSI installer on your Jenkins that was installed with the old Jenkins MSI installer, it will prompt for a new port and a service account.\n\nStop and disable the existing Jenkins service from the Windows Service Manager\n\nRun the new installer to create the new installation with desired settings\n\nStop the newly installed Jenkins service\n\nCopy existing Jenkins configuration files to the new Jenkins home directory\n\nStart the newly installed Jenkins service\n\nAfter the new Jenkins MSI installer has run, the \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.","title":"Windows Installer Upgrades","tags":["windows","platform-sig","installers","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg","srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/534e5/vsilverman.jpg 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/99887/vsilverman.jpg 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/76fd4/vsilverman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/59a6b/vsilverman.webp 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/cbb78/vsilverman.webp 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/96250/vsilverman.webp 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/50511/vsilverman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}}},"blog":null,"github":"vsilverman","html":"<div class=\"paragraph\">\n<p>Vlad is an active user of Jenkins and at the beginning of 2020 he also started actively contributing to the Jenkins project. He resides in Silicon Valley and for 10+ years had been involved in building/testing business processes for large enterprises and mid-size companies.</p>\n</div>","id":"vsilverman","irc":null,"linkedin":null,"name":"Vlad Silverman","slug":"/blog/authors/vsilverman","twitter":"vsilverman"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix","twitter":"alexcearl"}]}}]}},"pageContext":{"limit":8,"skip":56,"numPages":100,"currentPage":8}},
    "staticQueryHashes": ["3649515864"]}