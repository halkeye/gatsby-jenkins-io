{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/8",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-08-27T00:00:00.000Z","id":"ab88123c-a9df-5bf7-97c3-bc6cd5656a55","slug":"/blog/2020/08/27/winsw-yaml-support/","strippedHtml":"Hello, world! GSoC 2020 Phase 3 has ended now and it was a great period for thw Jenkins Windows Services - YAML Configuration Support project.\nIn this blog post, I will announce the updates during the GSoC 2020 - Phase 2 and Phase 3. If you are not already aware of this project,\nI would recommend reading this blog post which was published after GSoC 2020 - Phase 1.\n\nProject Scope\n\nWindows Service Wrapper - YAML configuration support\n\nYAML schema validation\n\nNew CLI\n\nXML Schema validation\n\nYAML Configuration Support\n\nUnder WinSW - YAML configurations support, these tasks will be done.\n\nYAML to Object mapping\n\nAt the moment YAML object mapping is finished and merged.\nYou can find all the implementations in this Pull Request.\n\nExtend WinSW to support both XML and YAML\n\nThis task is already done and merged. Find the implementation in this Pull Request.\n\nYAML Configuration support for Extensions\n\nAt the moment there are 2 internal plugins in WinSW. RunAwayProcessKiller and SharedDirectoryMapper.\nWe allow users to provide configurations for those plugins in the same XML and YAML configuration file which is used to configure WinSW. This task is merged as well.\nPull Request\n\nYAML schema validation\n\nUsers can validate YAML configuration file against JSON schema file.\nUsers can use YAML utility tool from Visual Studio market place to validate YAML config file against JSON schema.\n\nKey updates in Phase 2 and Phase 3\n\nYAML Configuration structure\n\nEnvironment variables\n\nNow users can provide environment variables as a sequence of dictionaries that contains name and value for environment variables.\n\nTimeStamp values\n\nUsers can specify timestamp values in the same manner used in XML (e.g. 10 ms, 5 sec, 3 min)\n\nYAML configuration document was published. YAML Configuration Specification\n\nExtend the WinSW to support both XML and YAML\n\nYAML support for extensions\n\nYAML schema validation against JSON schema\n\nSample YAML Configuration File\n\nid: jenkins\nname: Jenkins\ndescription: This service runs Jenkins automation server.\nenv:\n    - name: JENKINS_HOME\n      value: '%LocalAppData%\\Jenkins.jenkins'\n    - name: LM_LICENSE_FILE\n      value: host1;host2\nexecutable: java\narguments: >-\n    -Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"E:\\Winsw Test\\yml6\\jenkins.war\" --httpPort=8081\nlog:\n    mode: rotate\nonFailure:\n    - action: restart\n      delay: 10 sec\n    - action: reboot\n      delay: 1 hour\nextensions:\n    - id: killOnStartup\n      enabled: yes\n      classname: WinSW.Plugins.RunawayProcessKiller.RunawayProcessKillerExtension\n      settings:\n            pidfile: '%BASE%\\pid.txt'\n            stopTimeOut: 5000\n            StoprootFirst: false\n    - id: mapNetworDirs\n      enabled: yes\n      classname: WinSW.Plugins.SharedDirectoryMapper.SharedDirectoryMapper\n      settings:\n            mapping:\n                - enabled: false\n                  label: N\n                  uncpath: \\\\UNC\n                - enabled: false\n                  label: M\n                  uncpath: \\\\UNC2\n\nNew CLI\n\nLet me explain in brief, why we need a new CLI.\nIn WinSW, we will keep both XML and YAML configuration support.\nBut according to the current implementation, the user canâ€™t specify the configurations file explicitly.\nAlso, we want to let the user skip the schema validation as well.\nSo We decided to move into new CLI which is more structured with commands and options.\nPlease read my previous blog post to learn more about commands and options in the new CLI.\n\nKey updates in Phase 2 and Phase 3\n\nRemove the /redirect command\n\ntestwait command was removed and add the wait option to the test command.\n\nstopwait command was removed and add the wait option to the stop command.\n\nHow to try\n\nUser can configure the Windows Service Wrapper by both XML and YAML configuration files using the following steps.\n\nCreate the configuration file (XML or YAML).\n\nSave it with the same name as the Windows Service Wrapper executable name.\n\nPlace the configuration file inside the directory(or in a parent directory), where the Windows Service Wrapper executable is located.\n\nIf there are both XML and YAML configuraiton files, Windows Service Wrapper will be configured by the XML configuration file.\n\nGSoC 2020 Phase 2 Demo\n\nGSoC 2020 Phase 3 Demo\n\nFuture Works\n\nXML Schema validation\n\nXML configuration file will be validated with the XSD file.\nI have started working on this feature and you can find the implementation in this Pull Request.\n\nYAML Configuration validate on startup\n\nHow to contribute\n\nYou can find the GitHub repository in this link.\nIssues and Pull requests are always welcome. Also, you can communicate with us in the WinSW Gitter channel,\nwhich is a great way to get in touch and there are project sync up meetings every Tuesday at 13:30 UTC on the Gitter channel.\n\nSome useful links\n\nPresentation Slides\n\nProject Page\n\nProject Repository\n\nFeature preview\n\nGitter Channel\n\nYamlDotNet library\n\nCommand Line Parser library","title":"Jenkins Windows Services: YAML Configuration Support - GSoC Project Results","tags":["winsw","windows","jenkins","gsoc","gsoc2020","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"buddhikac96","html":"","id":"buddhikac96","irc":null,"linkedin":null,"name":"Buddhika Chathuranga","slug":"/blog/author/buddhikac96","twitter":null}]}},{"node":{"date":"2020-08-25T00:00:00.000Z","id":"7a744457-8457-529e-9c68-1e00d5e790df","slug":"/blog/2020/08/25/external-fingerprint-storage-phase-3/","strippedHtml":"The final phase for the External Fingerprint Storage\nProject has come to an end and to finish off, we release one more fingerprint storage plugin:\nthe PostgreSQL Fingerprint Storage Plugin!\n\nThis post highlights the progress made during phase-3.\nTo understand what the project is about and the past progress, please refer to the\nphase-1 post and the\nphase-2 post.\n\nIntroducing the PostgreSQL Fingerprint Storage Plugin\n\nWhy PostgreSQL?\n\nThere were several reasons why it made sense to build another reference implementation, especially backed by PostgreSQL.\n\nRedis is a key-value storage, and hence stores the fingerprints as blobs.\nThe PostgreSQL plugin defines a relational structure for fingerprints.\nThis offers a more powerful way to query the database for fingerprint information.\nFingerprint facets can store extra information inside the fingerprints, which cannot be queried in Redis directly.\nPostgreSQL plugin allows powerful (indexing) and efficient querying strategies which can even query the facet metadata.\n\nAnother reason for building this plugin was to provide a basis for other relational database plugins to be built.\nIt also validates the flexibility and design of our external fingerprint storage API.\n\nSince PostgreSQL is a traditional disk storage database, it is more suitable for systems storing a massive number of\nfingerprints.\n\nAmong relational databases, PostgreSQL is quite popular, has extensive support, and is open-source.\nWe expect the new implementation to drive more adoption, and prove to be beneficial to the community.\n\nInstallation:\n\nThe plugin can be installed using the\nexperimental update center.\nFollow along the following steps after running Jenkins to download and install the plugin:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nGo to Advanced tab\n\nConfigure the Update Site URL as: https://updates.jenkins.io/experimental/update-center.json\n\nClick on Submit, and then press the Check Now button.\n\nGo to Available tab.\n\nSearch for PostgreSQL Fingerprint Storage Plugin and check the box along it.\n\nClick on Install without restart\n\nThe plugin should now be installed on the system.\n\nUsage\n\nOnce the plugin has been installed, you can configure the PostgreSQL server details by following the steps below:\n\nSelect Manage Jenkins\n\nSelect Configure System\n\nScroll to the section Fingerprints and choose PostgreSQL Fingerprint Storage in the dropdown for\nFingerprint Storage Engine.\n\nConfigure the following parameters to connect to your PostgreSQL instance:\n\nHost - Enter hostname where PostgreSQL is running\n\nPort - Specify the port on which PostgreSQL is running\n\nSSL - Click if SSL is enabled\n\nDatabase Name - Specify the database name inside the PostgreSQL instance to be used. Please note that the database\nwill not be created by the plugin, the user has to create the database.\n\nConnection Timeout - Set the connection timeout duration in seconds.\n\nSocket Timeout - Set the socket timeout duration in seconds.\n\nCredentials - Configure authentication using username and password to the PostgreSQL instance.\n\nUse the Test PostgreSQL Connection button to verify that the details are correct and Jenkins is able to connect to\nthe PostgreSQL instance.\n\n[IMPORTANT] When configuring the plugin for the first time, it is highly important to press the Perform PostgreSQL\nSchema Initialization button. It will automatically perform schema initialization and create the necessary indexes.\nThe button can also be used in the case the database is wiped out and schema needs to be recreated.\n\nPress the Save button.\n\nNow, all the fingerprints produced by this Jenkins instance should be saved in the configured PostgreSQL instance!\n\nQuerying the Fingerprint Database\n\nDue to the relational structure defined by PostgreSQL, it allows users/developers to query the fingerprint data which\nwas not possible using the Redis fingerprint storage plugin.\n\nThe fingerprint storage can act as a consolidated storage for multiple Jenkins instances.\nFor example, to search for a fingerprint id across Jenkins instances using the file name, the following query could be\nused:\n\nSELECT fingerprint_id FROM fingerprint.fingerprint\nWHERE filename = 'random_file';\n\nA sample query is provided which can be tweaked depending on the parameters to be searched:\n\nSELECT * FROM fingerprint.fingerprint\nWHERE fingerprint_id = 'random_id'\n        AND instance_id = 'random_jenkins_instance_id'\n        AND filename = 'random_file'\n        AND original_job_name = 'random_job'\n        AND original_job_build_number = 'random_build_number'\n        AND timestamp BETWEEN '2019-12-01 23:59:59'::timestamp AND now()::timestamp\n\nThe facets are stored in the database as jsonb.\nPostgreSQL offers support to query jsonb.\nThis is especially useful for querying the information stored inside fingerprint facets.\nAs an example, the Docker Traceability Plugin stores information like the name of Docker images inside these\nfacets.\nThese can be queried across Jenkins instances like so:\n\n>'imageName' = 'random_container';\n\nAt the moment these queries require working knowledge of the database.\nIn future, these queries can be abstracted away by plugins and the features made available to users directly inside\nJenkins.\n\nDemo\n\nExternal Fingerprint Storage Demo\n\nSlide deck\n\nReleases ðŸš€\n\nWe released the 0.1-alpha-1 version for the\nPostgreSQL Fingerprint Storage Plugin.\nPlease refer to the\n\nchangelog for more information.\n\nRedis Fingerprint Storage Plugin 1.0-rc-3 was also\nreleased.\nThe\n\nchangelog provides more details.\n\nA few API changes made in the Jenkins core were released in Jenkins-2.253.\nIt mainly includes exposing fingerprint range set serialization methods for plugins.\n\nFuture Directions\n\nThe relational structure of the plugin allows some performance improvements that can be made when implementing\ncleanup, as well as improving the performance of Fingerprint#add(String job, int buildNumber).\nThese designs were discussed and are a scope of future improvement.\n\nThe current external fingerprint storage API supports configuring multiple Jenkins instances to a single storage.\nThis opens up the possibility of developing traceability plugins which can track fingerprints across Jenkins instances.\n\nPlease consider reaching out to us if you feel any of the use cases would benefit you, or if you would like to share\nsome new use cases.\n\nAcknowledgements\n\nThe PostgreSQL Fingerprint Storage Plugin and the Redis Fingerprint Storage plugin are maintained by the\nGoogle Summer of Code (GSoC) Team for External\nFingerprint Storage for Jenkins.\nSpecial thanks to Oleg Nenashev,\nAndrey Falko, Mike Cirioli,\nTim Jacomb, and the entire Jenkins community for all the contribution to this project.\n\nAs we wrap up, we would like to point out that there are plenty of future directions and use cases for the externalized\nfingerprint storage, as mentioned in the previous section, and we welcome everybody to contribute.\n\nReaching Out\n\nFeel free to reach out to us for any questions, feedback, etc. on the projectâ€™s\nGitter Channel or the\nJenkins Developer Mailing list.\nWe use Jenkins Jira to track issues.\nFeel free to file issues under either the postgresql-fingerprint-storage-plugin or the\nredis-fingerprint-storage-plugin component depending on the plugin.\n\nOther Links\n\nPhase 1 Post\n\nPhase 2 Post\n\nPostgreSQL Fingerprint Storage Plugin\n\nRedis Fingerprint Storage Plugin\n\njep:226[]\n\nGitter Channel\n\nProject Page","title":"External Fingerprint Storage Phase-3 Update: Introducing the PostgreSQL Fingerprint Storage Plugin","tags":["plugins","fingerprint","cloud-native","external-storage","developer","PostgreSQL","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg","srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/77b35/stellargo.jpg 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/d4a57/stellargo.jpg 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/ef6ff/stellargo.webp 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/8257c/stellargo.webp 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/6766a/stellargo.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://medium.com/@sumitsarinofficial","github":"stellargo","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 student. Sumit is an engineering student (senior) at Netaji Subhas Institute of Technology, University of Delhi. He started his journey of contributing to Jenkins in December 2019. His tiny contribution revolved around the Jenkins Fingerprint engine. He is currently working on building <a href=\"https://www.jenkins.io/projects/gsoc/2020/projects/external-fingerprint-storage\">External Fingerprint Storage for Jenkins</a>.</p>\n</div>","id":"stellargo","irc":null,"linkedin":"sumit-sarin","name":"Sumit Sarin","slug":"/blog/author/stellargo","twitter":null}]}},{"node":{"date":"2020-08-12T00:00:00.000Z","id":"52309c34-03ae-57ce-b801-39141f4c3b3c","slug":"/blog/2020/08/12/windows-installers-upgrade/","strippedHtml":"This article describes the transition from the old Jenkins Windows installer 2.235.2 (32 bit) to the new Jenkins Windows installer 2.235.3 (64 bit)\n\nLetâ€™s take a look how Jenkins installation on Windows happened before release of this upgrade.\n\nStep 1\n\nItâ€™s evident that branding information is not present here.\n\nStep 2\n\nJenkins would be installed into the 32 bit programs directory along with a 32 bit Java 8 runtime environment.\n\nStep 3\n\nThere was no option to select the user that would run the Jenkins service or the network port that would be used.\n\nIssues\n\nThe previous installer had issues that needed to be resolved:\n\nOnly supported 32-bit installations\n\nBundled an outdated Java 8 runtime environment\n\nNo support for Java 11\n\nNo port selection during installation\n\nNo choice of account for the Jenkins service\n\nThe Program Files (x86) directory was used for the Jenkins home directory\n\nRoad Forward\n\nThe new Jenkins Windows Installer resolves those issues\n\nSupports 64 bit installations and drops 32 bit support\n\nSupports 64 bit Java 8 and 64 bit Java 11\n\nPort selection and validation from the installer\n\nService account selection and validation from the installer\n\nProgram is installed in Program Files with Jenkins home directory in %AppData% of the selected service account\n\nThe JENKINS_HOME directory is placed in the LocalAppData directory for the user that the service will run as, this aligns with modern Windows file system layouts\n\nThe installer has been updated with branding to make it look nicer and provide a better user experience\n\nScreenshots\n\nYou may see below the sequence of screenshots for the new installer:\n\nStep 1\n\nWe can see now the Jenkins logo as a prominent part of the installer UI.\n\nStep 2\n\nJenkins installs by default in the 64 bit programs folder rather than in the 32 bit folder.\nNow the Jenkins logo and name are in the header during entire process of installation.\n\nStep 3\n\nNow the installer allows both specifying and testing the credentials by validating that the account has LogonAsService rights.\n\nStep 4\n\nNow the installer also allows specifying the port that Jenkins should run on and will not continue until a valid port is entered and tested.\n\nStep 5\n\nNow instead of bundling a JRE, the installer searches for a compatible JRE on the system (in the current search no JRE was installed).\nIn case you would like to use a different JRE from the one found by the installer, you can browse and specify it.\nOnly Java 8 and Java 11 runtimes are supported.\nIn case the selected JRE is found to be version 11 the installer will automatically add the necessary arguments and additional jar files for running under Java 11.\n\nStep 6\n\nAll of the items that users can enter in the installer should be overridable on the command line for automated deployment as well. The full list of properties that can be overridden will be available soon.\n\nNext Steps\n\nWindows users have alternatives for their existing Jenkins installations:\n\nUpgrade from inside Jenkins\n\nThe \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.\nUpgrade from inside Jenkins will continue to use the current Java version.\nUpgrade from inside Jenkins will continue to use the current installation location.\n\nUpgrade with the new Jenkins MSI installer\n\nIf you run the new Jenkins MSI installer on your Jenkins that was installed with the old Jenkins MSI installer, it will prompt for a new port and a service account.\n\nStop and disable the existing Jenkins service from the Windows Service Manager\n\nRun the new installer to create the new installation with desired settings\n\nStop the newly installed Jenkins service\n\nCopy existing Jenkins configuration files to the new Jenkins home directory\n\nStart the newly installed Jenkins service\n\nAfter the new Jenkins MSI installer has run, the \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.","title":"Windows Installer Upgrades","tags":["windows","platform-sig","installers","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg","srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/534e5/vsilverman.jpg 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/99887/vsilverman.jpg 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/76fd4/vsilverman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/59a6b/vsilverman.webp 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/cbb78/vsilverman.webp 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/96250/vsilverman.webp 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/50511/vsilverman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}}},"blog":null,"github":"vsilverman","html":"<div class=\"paragraph\">\n<p>Vlad is an active user of Jenkins and at the beginning of 2020 he also started actively contributing to the Jenkins project. He resides in Silicon Valley and for 10+ years had been involved in building/testing business processes for large enterprises and mid-size companies.</p>\n</div>","id":"vsilverman","irc":null,"linkedin":null,"name":"Vlad Silverman","slug":"/blog/author/vsilverman","twitter":"vsilverman"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/author/slide_o_mix","twitter":"alexcearl"}]}},{"node":{"date":"2020-08-09T00:00:00.000Z","id":"babe2cb7-b1f3-538d-a0da-40bd4f32b839","slug":"/blog/2020/08/09/custom-distribution-service-phase-2/","strippedHtml":"Hello everyone,\nIt is time to wrap up another successfull phase for the custom distribution service project,\nand we have incorporated most of the features that we had planned at the start of the phase.\nIt has been an immense learning curve for me and the entire team.\n\nTo understand what the project is about and the past progress, please refer to the phase one blogpost\nhere.\n\nFront-End\n\nFilters for Plugins\n\nIn the previous phase we implemented the ability to add plugins to the configuration,\nand the ability to search these plugins via a search bar.\nSometimes though we would like to filter these plugins based on their usage,\npopularity, stars etc. Hence we have added a certain set of filters to these plugins.\nWe support only four major filters for now. They are:\n\nTitle\n\nMost installed\n\nRelevance\n\nTrending\n\nFilter implementation\n\nThe major heavy lifting is done by the plugin api which takes in the necessary parameters\nand returns the relevant plugins in the form of a json object,\nhere is an example of the api call url: const url = https://plugins.jenkins.io/api/plugins?$params .\n\nFor details, see:\n\nFeature request #9\n\nPull Request #76\n\nCommunity Configurations\n\nOne major deliverable for the project was the ability for users to share the configurations developed by them, so that they can be used widely within the community.\nFor example we see quite a lot of jenkins configurations involve being run on AWS and kubernetes and so on. Therefore it would be really good for the community to have a place to find and run\nthese configurations right out of the box.\n\nDesign Decision\n\nThe major design decision taken here was whether to include the configurations inside\nthe repository or to have them in a completely new repository.\nLet us talk about both these approaches.\n\nHaving the configurations in the current repository:\n\nThis allows us to have all of the relevant configurations inside the repository itself,\nand so users would not have to go fetch this in different repositories.\nWe could have issues with the release cycle and dependencies since,\nit would have to happen along with the custom distribution service project releases.\n\nHaving the configurations in a different repository:\n\nThis allows us to manage all of the configurations and the relevant dependencies separately and easily,\nthus avoiding any release conflict with the current repository.\nHowever it would be a bit difficult if users were to not find this repository.\n\nDecision : We still cannot quite agree on what is the best method so for now,\nI have included the url from which the community configurations are picked up as a\nconfiguration variable in the.env file which can be configured later and\ntherefore it can be up to the user to configure. Another advantage of having it configurable,\nis that the user can decide to load configurations which are private to his organization as well.\n\nFor details, see:\n\nIssue #6161\n\nPull Request #73\n\nBack-End\n\nWar Generation\n\nThe ability to generate and download war files has finally been achieved,\nthe reason this feature took so long to complete is because we had some difficulty\nin implementing the war generation and its tests. However this has been completed\nand can now be tested successfully.\n\nThings to take care while generating war files\n\nIn its current state the war generation cannot include casc.yml or groovy files\nif they are included in the configuration they would have to be added externally.\nThere is an issue opened here.\nThe war file generation would yell at you if you tried to build a war file with a jcasc file configuration.\n\nFor details, see:\n\nIssue #60\n\nPull Request #68\n\nPull Request Creation\n\nThis feature was included in the design document that I created after my GSoC selection.\nIt involves the ability to create pull requests via the front-end of the service.\nThe User Story behind this feature was that If I want to share a configuration with the community and I do not quite know how to use github or I do not want to do it via the terminal.\nThis feature includes creation of a bot that handles the creation of pull requests in the repository.\nThis bot would have to be installed by the jenkins organization in this repository and the bot would handle the rest.\n\nFor details, see:\n\nIssue #59\n\nPull Request #72\n\nDisclaimer:\n\nThis feature has however been put on the back-burner for now because\nwe are focusing on getting the project to be self hosted and therefore\nwould like to implement this once we have a clear path for the project to be hosted by the jenkins-infra team.If you would like to participate in the discussion here are the links for the pull requests,\nPR 1 and link: PR 2, or you can even jump in our gitter channel.\n\nIf you have been following my posts,\nI mentioned in my second week blog post that pulling in the json file consisting of more than\n1600 plugins took a bit more time that my liking.\nWe managed to solve that issue using a caching mechanism,\nso now the files are pulled in the first time you start the service and downloaded in a temporary folder. The next time you want to view the plugin cards they are pulled in directly from the temp directory bam ! thereby reducing time.\n\nFor details see Pull Request #90\n\nFixes and improvements\n\nPort 8080\n\nPort 8080 now does have a message instead of a whitelabel error message which is present\nby default in the spring-boot tomcat server setup.\nTurns out it requires overriding a particular class, and inserting a custom message\n\nFor details, see:\n\nPull Request #92\n\nWar Generation\n\nTill now while you were generating the war file,\nif something went wrong during genration the service would not complain it would just swallow the error and throw back a corrupted war file,\nhowever now we have added an error support feature\nthat will alert you when something goes wrong, the error is not very informative as of now,\nbut we are working on making it more informative in the future.\n\nFor details, see:\n\nWar generation error handling #91\n\nAdd Github controller and jwt helper #66\n\nDockerfile\n\nOne of the major milestones of this phase was to have a project that can be self hosted,\nneedless to say we needed the dockerfile i.e docker-compose.yml to spin the project with a few commands.\nThe major issue we faced here was that there was a bit of a problem making the two containers talk to each other. Let me give you a little bit of context here.\nOur docker-compose is constructed using two separate dockerfiles one for the backend of the service and the other for the front-end.\nThe backend makes api calls to the front-end via the proxy url i.e localhost:8080.\nWe now had to change this since the network bridge between the two containers spoke to each other via the backend-server name i.e app-server.\nTo brige that gap we have this PR that ensured that the docker compose works flawlessly.\n\nFor details, see:\n\nPull Request #82\n\nHowever there is a minor draw-back of the above approach was now the entire\nproject just relied on the docker compose and could not run using the simple\ncombination of npm and maven since the proxy was different.\nIn order to fix this I decided to follow a multiple environment approach,\nwhere we have multiple environment files that pick up the correct proxy and insert it at build time,\nto elaborate further we have two environment files,\n(using the env-cmd library ).env and the docker.env and we insert,\nthe correct file depending on how you want to build the project.\nFor instance if you want to run it using the dockerfile the command that is run under the hood is something along these linesâ€‰â€” npm --env-cmd -f docker.env start scripts.\n\nFor details, see:\n\nPull Request #88\n\nOther links\n\nGitter Channel Link\nGSoC Proposal\nDesign Document\nDaily Notes\nDemo","title":"Custom Distribution Service : Phase 2 Blogpost","tags":["service","distribution","cloud-native","gsoc","gsoc2020","packaging","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/author/sladyn98","twitter":"SladynN"}]}},{"node":{"date":"2020-08-04T00:00:00.000Z","id":"784b9495-ce55-533e-bf33-ddb9b2de1fea","slug":"/blog/2020/08/04/cdf-graduation/","strippedHtml":"We are happy to announce that the Jenkins project has achieved the graduated status in\nthe Continuous Delivery Foundation (CDF).\nThis status is officially effective Aug 03, 2020.\nJenkins is the first project to graduate in the CD Foundation.\nThanks to all contributors who made our graduation possible!\n\nIn this article, we will discuss what the CD Foundation membership and graduation mean to the Jenkins community.\nWe will also talk about what changed in Jenkins as a part of the graduation,\nand what are the future steps for the project.\n\nTo know more about the Jenkins graduation,\nsee also the announcement on the CD Foundation website.\nAlso see the special edition of the CD Foundation Newsletter for Jenkins user success stories and some surprise content.\nThe press release is available here.\n\nHow does CDF membership help us?\n\nAbout 18 months ago, Jenkins became one of the CDF founding projects, along with Jenkins X, Spinnaker and Tekton.\nA new foundation was formed to provide a vendor-neutral home for open source projects used for Continuous Delivery and Continuous Integration.\nSpecial interest groups were started to foster collaboration between projects and end user companies,\nmost notably:\nInteroperability,\nMLOps and\nSecurity SIGs.\nAlso, a Community Ambassador role was created to organize local meetups and to provide public-facing community representatives.\nMany former Jenkins Ambassadors and other contributors are now CDF Ambassadors, and they promote Jenkins and other projects there.\n\nThanks to this membership we addressed key project infrastructure needs.\nStarting from Jan 2020, CDF covers a significant part of the infrastructure costs\nincluding our services and CI/CD instances running on Microsoft Azure.\nThe CD Foundation provided us with legal assistance required to get code signing keys for the Jenkins project.\nThanks to that, we were able to switch to a new Jenkins Release Infrastructure.\nThe foundation sponsors the Zoom account we use for Jenkins Online Meetups and community meetings.\nIn the future we will continue to review ways of reducing maintenance overhead by switching some of our self-hosted services to equivalents provided by the Linux Foundation to CDF members.\n\nAnother important CDF membership benefit is community outreach and marketing.\nIt helped us to establish connections with other CI/CD projects and end user companies.\nThrough the foundation we have access to the DevStats service\nthat provides community contribution statistics and helps us track trends and discover areas for improvement.\nOn the marketing side, the foundation organizes webinars, podcasts and newsletters.\nJenkins is regularly represented there.\nThe CD Foundation also runs the meetup.com professional account which is used by local Jenkins communities for\nCI/CD and Jenkins Area Meetups.\nLast but not least, the Jenkins community is also represented at virtual conferences where CDF has a booth.\nAll of that helps to grow Jenkins visibility and to highlight new features and initiatives in the project.\n\nWhy did we graduate?\n\nThe Jenkins project has a long history of open governance which is a key part of todayâ€™s project success.\nStarting from 2011, the project has introduced the governance meeting which are open to anyone.\nMost of the discussions and decision making happen publicly in the mailing lists.\nIn 2015 we introduced teams, sub-projects and officer roles.\nIn 2017 we introduced the Jenkins Enhancement Proposal process which helped us to make the key architecture and governance decisions more open and transparent to the community and the Jenkins users.\nIn 2018 we introduced special interest groups that focus on community needs.\nIn 2019 we have expanded the Jenkins governance board\nso that it got more bandwidth to facilitate initiatives in the project.\n\nSince the Jenkins project inception 15 years ago, it has been steadily growing.\nNow it has millions of users and thousands of contributors.\nIn 2019 it has seen 5,433 contributors from 111 countries and 272 companies,\n67 core and 2,654 plugin releases,\n45,484 commits, 7,000+ pull requests.\nIn 2020 Q2 the project has seen 21% growth in pull requests numbers compared to 2019 Q2, bots excluded.\n\nOne may say that the Jenkins project already has everything needed to succeed.\nIt is a result of continuous work by many community members,\nand this work will never end as long as the project remains active.\nLike in any other industry, the CI/CD ecosystem changes every day and sets new expectations from the automation tools in this domain.\nJust as the tools evolve, open source communities need to evolve so that they can address expectations, and onboard more users and contributors.\nThe CDF graduation process helped us to discover opportunities for improvement,\nand address them.\nWe reviewed the project processes and compared them with the Graduated Project criteria defined in the CDF project lifecycle.\nBased on this review, we made changes in our processes and documentation.\nIt should improve the experience of Jenkins users,\nand help to make the Jenkins community more welcoming to existing and newcomer contributors.\n\nWhat changed for the project?\n\nBelow you can find a few key changes we have applied during the graduation process:\n\nPublic roadmap\n\nWe introduced a new public roadmap for the Jenkins project.\nThis roadmap aggregates key initiatives in all community areas: features, infrastructure, documentation, community, etc.\nIt makes the project more transparent to all Jenkins users and adopters,\nand at the same time helps potential contributors find the hot areas and opportunities for contribution.\nThe roadmap is driven by the Jenkins community and it has a fully public process documented in jep:14[].\n\nMore details about the public roadmap are coming next week, stay tuned for a separate blogpost.\nOn July 10th we had an online contributor meetup about the roadmap\nand you can find more information in its materials\n( slides, video recording).\n\nUser Documentation\n\nJenkins Weekly Release line is now documented on our website ( here).\nWe have also reworked the downloads page and added guidelines explaining how to verify downloads.\n\nA new list of Jenkins adopters was introduced on jenkins.io.\nThis list highlights Jenkins users and references their case studies and success stories,\nincluding ones submitted through the Jenkins Is The Way portal.\nPlease do not hesitate to add your company there!\n\nCommunity\n\nWe passed the Core Infrastructure Initiative (CII) certification.\nThis certification helps us to verify compliance with open source best practices\nand to make adjustments in the project (see the bullets below).\nIt also provides Jenkins users and adopters with a public summary about compliance with each best practice.\nDetails are on the Jenkins core page.\n\nJenkins Code of Conduct was updated\nto the new version of Contributor Covenant.\nIn particular, it sets best practices of behavior in the community, and expands definitions of unacceptable behavior.\n\nThe default Jenkins contributing template was updated to cover more common cases for plugin contributors.\nThis page provides links to the Participate and Contribute guidelines hosted on our website,\nand helps potential contributors to easily access the documentation.\n\nThe Jenkins Core maintainer guide was updated to include maintenance and issues triage guidelines.\nIt should help us to deliver quality releases and to timely triage and address issues reported by Jenkins users.\n\nWhatâ€™s next?\n\nIt an honor to be the first project to reach the graduated stage in the Continuous Delivery Foundation,\nbut it is also a great responsibility for the project.\nAs a project, we plan to continue participating in the CDF activities and to work with other projects and end users to maintain the Jenkins' leader role in the CI/CD space.\n\nWe encourage everyone to join the project and participate in evolving the Jenkins project and driving its roadmap.\nIt does not necessarily mean committing code or documentation patches;\nuser feedback is also very important to the project.\nIf you are interested to contribute or to share your feedback,\nplease contact us in the Jenkins community channels ( mailing lists, chats)!\n\nAcknowledgements\n\nCDF graduation work was a major effort in the Jenkins community.\nCongratulations and thanks to the dozens of contributors who made our graduation possible.\nI would like to thank\nAlex Earl,\nAlyssa Tong,\nDan Lorenc,\nDaniel Beck,\nJeff Thompson,\nMarky Jackson,\nMark Waite,\nOlivier Vernin,\nTim Jacomb,\nTracy Miranda,\nUllrich Hafner,\nWadeck Follonier,\nand all other contributors who helped with reviews and provided their feedback!\n\nAlso thanks to the Continuous Delivery Foundation marketing team (Jacqueline Salinas, Jesse Casman and Roxanne Joncas) for their work on promoting the Jenkins project and, specifically, its graduation.\n\nAbout the Continuous Delivery Foundation\n\nThe Continuous Delivery Foundation (CDF) serves as the vendor-neutral home of many of the fastest-growing projects for continuous delivery, including Jenkins, Jenkins X, Tekton, and Spinnaker,\nas well as fosters collaboration between the industryâ€™s top developers, end users and vendors to further continuous delivery best practices.\nThe CDF is part of the Linux Foundation, a nonprofit organization.\nFor more information about the foundation, please visit its website.\n\nMore information\n\nTo know more about the Jenkins graduation in the Continuous Delivery Foundation,\nsee the announcement on the CD Foundation website.\nAlso see the special edition of the CD Foundation Newsletter for Jenkins user success stories and some surprise content.\nThe press release is available here.","title":"Jenkins graduates in the Continuous Delivery Foundation","tags":["announcement","cdf","general","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-08-03T00:00:00.000Z","id":"1a966f1b-f29c-510f-943e-ff264acdf7dd","slug":"/blog/2020/08/03/github-checks-api-plugin-coding-phase-2/","strippedHtml":"Another great coding phase for GitHub Checks API Project ends!\nIn this phase, we focused on consuming the checks API in two widely used plugins:\n\nWarnings NG Plugin\n\nCode Coverage API Plugin\n\nBesides the external usage, we have also split the general checks API from its GitHub implementation and released both of the plugins:\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nCoding Phase 2 Demo [starts from 25:20]\n\nWarning Checks\n\nThe newly released Warnings NG plugin 8.4.0 will use checks API to publish different check runs for different static analysis tools.\nWithout leaving GitHub, users are now able to see the analysis report they interested in.\n\nOn GitHubâ€™s conversation tab for each PR, users will see summaries for those checks like the screenshot above. The summaries will include:\n\nThe status that indicates the quality gate\n\nThe name of the analysis tool used\n\nA short message that indicates statistics of new and total issues\n\nMore fine-grained statistics can be found in the Details page.\n\nAnother practical feature is the annotation for specific lines of code. Users can now review the code alone with the annotations.\n\nTry It\n\nIn Wanings NG plugin 8.4.0, the warning checks is set as a default feature only for GitHub.\nFor other SCM platforms, a NullPublisher will be used which does nothing.\nTherefore, you can get those checks for your own GitHub project just in a few steps:\n\nUpdate Warnings NG plugin to 8.4.0\n\nInstall GitHub Checks plugin on your Jenkins instance\n\nFollow the GitHub app authentication guide to configure the credentials for the multi-branch project or GitHub organization project you are going to use\n\nUse warnings-ng plugin in your Jenkinsfile for the project you configured in the last step, e.g.\n\nnode {\n    stage ('Checkout') {\n        checkout scm\n    }\n\n    stage ('Build and Static Analysis') {\n        sh 'mvn -V -e clean verify -Dmaven.test.failure.ignore'\n\n        recordIssues tools: [java(), javaDoc()], aggregatingResults: 'true', id: 'java', name: 'Java'\n        recordIssues tool: errorProne(), healthy: 1, unhealthy: 20\n        recordIssues tools: [checkStyle(pattern: 'target/checkstyle-result.xml'),\n            spotBugs(pattern: 'target/spotbugsXml.xml'),\n            pmdParser(pattern: 'target/pmd.xml'),\n            cpd(pattern: 'target/cpd.xml')],\n            qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]\n    }\n}\n\nFor more about the pipeline usage of warnings-ng plugin, please see the official documentation.\n\nHowever, if you donâ€™t want to publish the warnings to GitHub, you can either uninstall the GitHub Checks plugin or disable it by adding skipPublishingChecks: true.\n\nrecordIssues enabledForFailure: true, tools: [java(), javaDoc()], skipPublishingChecks: true\n\nCoverage Checks\n\nThe coverage checks are achieved by consuming the API in Code Coverage API plugin.\nFirst, in the conversation tab of a PR, users will be able to see the summary about the coverage difference compared to previous builds.\n\nThe Details page will contain some other things:\n\nLinks to the reference build, including the target branch build from the master branch and the last successful build from this branch\n\nCoverage healthy score (the default value is 100% if the threshold is not configured)\n\nCoverages and trends of different types in table format\n\nThe pull request for this feature will soon be merged and will be included in the next release of Coverage Checks API plugin. After that, you can use it by adding the below section to your pipeline script:\n\nnode {\n    stage ('Checkout') {\n        checkout scm\n    }\n\n    stage ('Line and Branch Coverage') {\n        publishCoverage adapters: [jacoco('**/*/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_ALL_BUILD')\n    }\n}\n\nLike the warning checks, you can also disable the coverage checks by setting the field skipPublishingChecks, e.g.\n\npublishCoverage adapters: [jacoco('**/*/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_ALL_BUILD'), skipPublishingChecks: true\n\nNext Phase\n\nIn the next phase, we will turn our attention back to Checks API Plugin and GitHub Checks Plugin and add the following features in future versions:\n\nPipeline Support\n\nUsers can publish checks directly in a pipeline script without requiring a consumer plugin that supports the checks.\n\nRe-run Request\n\nUsers can re-run Jenkins build through Checks API.\n\nLastly, it is exciting to inform that we are currently making the checks feature available on ci.jenkins.io for all plugins hosted in the jenkinsci GitHub organization, please see INFRA-2694 for more details.\n\nResources\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nProject Page\n\nGitter Channel","title":"GitHub Checks API Plugin Project - Coding Phase 2","tags":["github","api","plugins","developer","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg","srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/77b35/XiongKezhi.jpg 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/d4a57/XiongKezhi.jpg 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/68974/XiongKezhi.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/ef6ff/XiongKezhi.webp 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/8257c/XiongKezhi.webp 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/6766a/XiongKezhi.webp 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/22bfc/XiongKezhi.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"XiongKezhi","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 Student. Kezhi is an open source enthusiast who enjoys sharing ideas with other developers. He started contributing to Jenkins in March 2020. Currently, he is working on <a href=\"https://github.com/XiongKezhi/checks-api-plugin\">GitHub Checks API Plugin</a>.</p>\n</div>","id":"XiongKezhi","irc":null,"linkedin":"kezhi-xiong-44234a188","name":"Kezhi Xiong","slug":"/blog/author/xiongkezhi","twitter":"AugustX_"}]}},{"node":{"date":"2020-07-29T00:00:00.000Z","id":"84676949-9b05-55b1-b843-435c0ff0696d","slug":"/blog/2020/07/29/git-performance-improvement-phase2/","strippedHtml":"The second phase of the Git Plugin Performance Improvement project has been great in terms of the progress we have achieved in implementing performance improvement insights\nderived from the phase one JMH micro-benchmark experiments.\n\nWhat weâ€™ve learned so far in this project is that a git fetch is highly correlated to the size of the remote repository. In order to make fetch improvements in this plugin, our task was to find the difference in performance for the two available git implementations in the Git Plugin, git and JGit.\n\nOur major finding was that git performs much better than JGit when it comes to a large sized repository (>100 MiB). Interestingly, JGit performs better than git when size of the repository is less than 100 MiB.\n\nIn this phase, we were successful in coding this derived knowledge from the benchmarks into a new functionality called the\nGitToolChooser.\n\nGitToolChooser\n\nThis class aims to add the functionality of recommending a git implementation on the basis of the size of a repository which has a strong correlation to the performance of git fetch (from performance Benchmarks).\n\nIt utilizes two heuristics to calculate the size:\n\nUsing cached .git dir from multibranch projects to estimate the size of a repository\n\nProviding an extension point which, upon implementation, can use REST APIs exposed by git service providers like Github, GitLab, etc to fetch the size of the remote repository.\n\nWill it optimize your Jenkins instance?\nThat requires one of the following:\n\nyou have a multibranch project in your Jenkins instance, the plugin can use that to recommend the optimal git implementation\n\nyou have a branch Source Plugin installed in the Jenkins instance, the particular branch source plugin will recommend a git implementation using REST APIs provided by GitHub or GitLab respectively.\n\nThe architecture and code for this class is at: PR-931\n\nNote : This functionality is an upcoming feature in the subsequent Git Plugin release.\n\nJMH benchmarks in multiple environments\n\nThe benchmarks were being executed on Linux and macOS machines frequently but there was a need to check if the results gained from those benchmarks would hold true across more platforms to ensure that the solution (GitToolChooser) is generally platform-agnostic.\n\nTo test this hypothesis, we performed an experiment:\n\nRunning git fetch operation for a 400 MiB sized repository on:\n\nWindows\n\nFreeBSD 12\n\nppc64le\n\ns390x\n\nThe result of running this experiment is given below:\n\nObservations:\n\nppc64le and s390x are able to run the operation in almost half the time it takes for the Windows or FreeBSD 12 machine. This behavior may be attributed to the increased computational power of those machines.\n\nThe difference in performance between git and JGit remains constant across all platforms which is a positive sign for the GitToolChooser as its recommendation would be consistent across multiple devices and operating systems.\n\nRelease Plan ðŸš€\n\nJENKINS-49757 - Avoid double fetch from Git checkout step\nThis issue was fixed in phase one, avoids the second fetch in redundant cases.\nIt will be shipped with some benchmarks on the change in performance due to the removal of the second fetch.\n\nPR-574\n\nPR-904\n\nGitToolChooser\n\nPR-931\nThis pull request is under review, will be shipped in one of the subsequent Git Plugin releases.\n\nCurrent Challenges with GitToolChooser\n\nImplement the extension point to support GitHub Branch Source Plugin, Gitlab Branch Source Plugin and Gitea Plugin.\n\nThe current version of JGit doesnâ€™t support LFS checkout and sparse checkout, need to make sure that the recommendation doesnâ€™t break existing use cases.\n\nFuture Work\n\nIn phase three, we wish to:\n\nRelease a new version of the Git and Git Client Plugin with the features developed during the project\n\nContinue to explore more areas for performance improvement\n\nAdd a new git operation: git clone (Stretch Goal)\n\nReaching Out\n\nFeel free to reach out to us for any questions or feedback on the projectâ€™s Gitter Channel or the Jenkins\nDeveloper Mailing list.\n\nProject Page\n\nPhase 1 Blog Post","title":"Git Plugin Performance Improvement Phase-2 Progress","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/author/rishabhbudhouliya","twitter":null}]}},{"node":{"date":"2020-07-27T00:00:00.000Z","id":"28af9b14-9cf1-5cb2-94df-b2869b9e73fc","slug":"/blog/2020/07/27/custom-distribution-service/","strippedHtml":"Hello,\nAfter an eventful community bonding period we finally entered into the coding phase. This blog post will summarize the work done till the midterm of the coding phases i.e. week 6. If some of the topics here require a more detailed explanation, I will write a separate blog post. These blogs posts will not have a very defined format but would cover all of the user stories or features implemented.\n\nProject Summary\n\nThe main idea behind the project is to build a customizable jenkins distribution service that could be used to build tailor-made jenkins distributions. The service would provide users with a simple interface to select the configurations they want to build the instance with eg: plugins, authorization matrices etc. Furthermore it would include a section for sharing community created distros so that users can find and download already built jenkins war/configuration files to use out of the box.\n\nQuick review\n\nPull Requests Opened\n38\n\nGithub Issues completed\n36\n\nDetails\n\nI have written separate blog posts for every week in GSoC and the intricate details for each of them can be found at their respective blog pages. I am including a summary for every phase supported with the respective links.\n\nCommunity Bonding\n\nThis year GSoC had a longer community bonding than any of the previous editions due to the Coronavirus pandemic and therefore this gave me a lot of time to explore, so I spent it by building a prototype for my project. I realised some of the blockages I might face early on, and therefore it gave me more clarity in terms of how I can proceed. I also spent this time preparing a design document which you can find here.\n\nCommunity Bonding Blog\n\nWeek 1\n\nIn week one, I spent time getting used to the tech stack I would be using, I was pretty familiar with Spring Boot but React was something I was going to be using for the first time, so I spent time studying more about it. I also got the project page ready, the issues I was going to tackle and the milestones that I had to achieve before the evaluation. I also spent a bit of time setting up the home page and a bit of front-end components.\n\nWeek 1 Blog\n\nWeek 2\n\nOnce we were done with the initial setup, it was time to work on the core of the project.\nIn the second week, I worked on generating the package configuration and the plugin list dummy display page setup.\nI also ran into issues with the Jenkinsfile so the majority of time was spent fixing it.\nFinally I managed to get around those problems.\nYou can read more about it in the Week 2 Blog post.\n\nWeek 2 Blog\n\nWeek 3\n\nThe last week was spent cleaning up most of the code and getting the remaining milestones in. This was probably the hardest part of phase 1 because it involved connecting the front and back end of the project.You can read more about it here.\n\nWeek 3\n\nMidterm Update\n\nThe second phase has been going on for the past 3 weeks and we have already accomplished a majority of the deliverables including community configurations, war downloading and filtering of plugins. More details about the mid term report can be found here.\n\nMidterm Update\n\nGetting the Code\n\nThe Custom Distribution Service was created from scratch during GSoC and can be found here on Github.\n\nOther links\n\nGSoC Proposal\nDesign Document\nDaily Notes\nDemo\n\nFeedback channel\n\nGitter Channel Link.","title":"Custom Distribution Service : Midterm Summary","tags":["service","distribution","cloud-native","gsoc","gsoc2020","packaging","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/author/sladyn98","twitter":"SladynN"}]}}]}},"pageContext":{"limit":8,"skip":56,"numPages":100,"currentPage":8}},
    "staticQueryHashes": ["3649515864"]}