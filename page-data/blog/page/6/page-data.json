{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/6",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-11-10T00:00:00.000Z","id":"a4d05a2d-a0a0-5795-a164-1b18cbfae9a3","slug":"/blog/2020/11/10/major-changes-in-weekly-releases/","strippedHtml":"Recently we have selected Jenkins 2.263 as a new baseline for the LTS release line, with ETA in December 2020.\nIt allows delivering significant and in some cases breaking changes which have been previously on hold.\nBeginning with the Jenkins 2.264 release on October 27, 2020, we’ve entered a period where the Jenkins weekly releases will include more significant changes than usual.\nThat period of more significant changes is expected to continue for a month or more.\nAs you may have seen from the release community ratings, there might be regressions and instabilities during this period.\n\nWe’re excited for the changes.\nThey help to improve user experience and to address the technical debt accumulated in the Jenkins core.\nWe invite Jenkins users to evaluate those changes and provide feedback.\nThis is an especially valuable time for users and administrators to test the weekly releases and report issues with them,\nespecially on Jenkins test environments.\nIn the Jenkins project we have invested a lot in test coverage for the main functionality,\nbut in many cases we rely on user feedback for exotic plugins and environments not yet covered by our test automation.\n\nThe most notable changes include:\n\nConfiguration UI - Tables to Divs\n\nCore - Spring Security replaces Acegi Security\n\nCore - XStream unfork\n\nUI - JQuery upgrade\n\nConfiguration UI - Tables to Divs\n\nJenkins 2.264 is the first weekly release to include the \"Tables to Divs migration\" user interface work of Josh Soref, Tim Jacomb, and Felix Queiruga.\nIt is a significant step to improve forms in the Jenkins user interface (configuration pages, build parameters, etc.), especially for users on narrow devices like tablets and phones.\n\nA better user interface\n\nThe transition from using HTML table tags to using HTML div tags provides a more attractive user interface for all users and a much better experience for users on narrower devices.\nBefore the conversion from table tags to div tags, the\"Manage Jenkins\" page looked like this in a 1024x768 window:\n\nAfter the conversion, the\"Manage Jenkins\" page now looks like this:\n\nThe user interface improvements from the transition are a nice step forward for Jenkins.\nHowever, because the user interface improvements require changes in plugins, we need your help.\n\nWe need users to test the latest weekly Jenkins releases with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\nPlease add the tables-to-divs-regression label to the issues.\nThe tables-to-divs-regression label makes it easier to find issues related to the tables to divs transition.\n\nPlugin developers\n\nSeveral plugins have already been identified that may need changes.\nSee the Jira epic for plugins that are likely to need changes for the new user interface layout.\nThe list of open tables-to-divs-regression issues can also be used to see plugins that need changes.\n\nIf you can assist with plugin testing and code changes, select one of the plugins from that epic, test it, and propose a pull request to help with this user interface transition.\nIf you’re not comfortable proposing a pull request, describe the problems you see in a bug report.\n\nA tables to divs migration guide is available.\nIt describes areas that typically need to be changed as part of the migration from tables to divs.\nIt also includes detailed examples that allow the plugin to continue supporting older Jenkins versions with table layouts and use div layouts for newer Jenkins versions.\n\nCore - Spring Security replaces Acegi Security\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the Spring Security libraries from the Acegi security libraries that Jesse Glick has proposed and developed through jep:227[Jenkins Enhancement Proposal 227].\n\nThis upgrade replaces the Acegi Security library with the current release of the Spring Security library.\nDetails of the change are described in jep:227[] and in the pull request.\n\nWe need users to test the latest Jenkins weekly releases with their plugins and watch for issues related to authentication.\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the Spring Security compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the Spring Security upgrade.\n\nCore - XStream unfork\n\nJenkins has been using a fork of the XStream serialization library to read and write XML files.\nThe XStream library was forked over 10 years ago and had a few fixes applied to it.\nUnfortunately, at that time the fixes were rejected by the upstream maintainers of XStream (unsupported patterns of API use) and the fork fell behind the upstream version.\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the upstream version of the XStream library that Jesse Glick has proposed and developed through jep:228[Jenkins Enhancement Proposal 228].\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the XStream compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the XStream upgrade.\n\nUI - JQuery upgrade\n\nJenkins uses a 1.x version of the jQuery user interface library for some of its components.\nFelix Queiruga has started the work to update that library to a current jQuery version.\n\nIt will arrive in a future Jenkins weekly release.\nWhen it arrives, it will be noted in the Jenkins weekly changelog.\n\nWhen the jQuery update arrives, We will need users to test the Jenkins weekly release with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\n\nCall to test\n\nThis is a great time to help the Jenkins project by testing the weekly releases.\nWe encourage you to test the user interface and the interactions that are most important to you.\nIf you find an issue, please report the issue so that others can benefit from your discovery.","title":"Jenkins 2.264+: Major changes in the weekly release line","tags":["jenkins","core","testing","ui"],"authors":[]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"4a81cf3c-4ca0-511f-9197-d77a776ede34","slug":"/blog/2020/11/10/spring-xstream/","strippedHtml":"Cleaning up technical debt is a perennial topic among Jenkins core developers,\nand one of the most visible issues is the use of obsolete and/or forked third-party libraries.\nIn a world where Dependabot is offering updates to libraries released just hours before,\nit is unpleasant to be working with dependencies that are many years old.\nSince large organizations in particular are unhappy to install software using obsolete or nonstandard versions,\nmy employer (CloudBees) gave its blessing for me to spend some time cleaning up some of the worst offenders.\n\nThe toughest nut to crack was the Acegi Security library used for authentication,\nwhich has long since been replaced by Spring Security\n(and Jenkins was also bundling a long-outdated version of some Spring Framework dependencies).\njep:227[] tracks the complicated task of updating to Spring Security\nwithout breaking the numerous plugins that interact with authentication,\nespecially those offering a Security Realm.\n\nAnother longstanding problem was the XStream library which Jenkins uses to read and write XML configuration files.\nThis had been forked long ago by what was then the Hudson project and a few fixes applied.\nUnfortunately, some of those fixes were rejected upstream as invalid (representing unsupported usage patterns),\nand the fork fell behind the upstream version.\njep:228[] describes the impact of switching to the upstream library in a more standard usage mode,\nincluding fixes to a smaller number of plugins which would otherwise be incompatible.\n\nNow that the Jenkins 2.266 weekly release includes both updates,\nit is important for both Jenkins administrators and plugin maintainers to check for actual or potential incompatibilities.\nThere are two tables listing the impact of these changes on plugins:\n\nSpring Security compatibility\n\nXStream compatibility\n\nIf you use Jenkins then it is a good idea before upgrading to take a look at these tables\nto see if you are running any plugins considered incompatible.\nIf so, try not to rely on that plugin, or find out if there is an active maintainer who could help.\nFor entries marked unknown, it would be appreciated if you could do a sanity check after upgrading\nand offer a pull request to the table page (click Edit this file) with a more informative status.\n\nIf you find a regression in a plugin, please file a bug report in Jira and link to it from the table.\nAlso please add a JEP-227 or JEP-228 label as appropriate, for ease of tracking:\n\nOpen JEP-227 issues\n\nOpen JEP-228 issues\n\nIt is a good idea to update all your plugins before upgrading Jenkins core.\nIn the case of the Spring Security update, some security realm plugins including LDAP and Active Directory must be updated in advance.\n(You can safely run the new plugin versions on Jenkins releases prior to this change.)\nOtherwise, you risk being unable to log in to Jenkins—and thus unable to update those plugins from the GUI!\nThe LDAP plugin additionally has a new version available only after the core upgrade, but there is no rush in switching to that.\n\nIf you maintain a Jenkins plugin then please check whether it is marked anything less than compatible.\nIn some cases, there are already pull requests awaiting merge.\nIn other cases, some minor aspects of the source code have been identified that could be edited to improve compatibility.\n\nWe expect to see a bit of disruption from these changes\nbut hope that in the long run they will save time for core and plugin developers\nand lead to a more secure and stable tool.\nPlease reach out on the developers’ list with any questions or suggestions.","title":"Spring and XStream updates (breaking changes!)","tags":["jenkins","core","developer"],"authors":[]}},{"node":{"date":"2020-11-05T00:00:00.000Z","id":"048474b0-1674-5ecc-b72f-376e9c14e52a","slug":"/blog/2020/11/05/installing-jenkins-on-kubernetes/","strippedHtml":"We are super excited to announce that the Document Jenkins on Kubernetes Project recently merged its first PR into Jenkins.io.\nThis PR adds a new Kubernetes section to the existing Installing Jenkins chapter of Jenkins.io.\n\nThis new section describes two options to install/run Jenkins on Kubernetes, how to setup a minikube cluster on which to run your Jenkins deployment and finally a bonus segment that explains some Post-installation setups such as unlocking Jenkins, customizing Jenkins with plugins and creating your first administrator user.\n\nThe first installation option covered in this section is helm a package manager for Kubernetes whose package format is called a chart. The helm section covers the prerequisites for installing Jenkins on Kubernetes using Helm, installing and configuring helm, creating a persistent volume and service account, and finally, Installing Jenkins.\n\nThe second option describes how to install Jenkins using a set of yaml files.\nThis section explains how to create a Jenkins deployment file, Deploy Jenkins, grant access to jenkins service, and finally access your Jenkins dashboard after installation.\n\nSplitting the Installing Jenkins Chapter\n\nThe addition of the Kubernetes section highlighted a long-standing challenge with the Installing Jenkins chapter.\nIt was too long and contained too many topics, making it difficult and unpleasant for\nmost users to navigate.\nTo top the icing on the cake and further improve the experience on Jenkins documentation users, another PR was merged into Jenkins.io to split the Installing Jenkins chapter into smaller chapters for better separation of concerns and easy navigation. This PR also redirects bookmarks that linked to the previous locations like https://www.jenkins.io/doc/book/installing/#debianubuntu using Javascript.\n\nThe image above is a snapshot of what the Installing Jenkins chapter looked like before the PR.\nAll sections of this chapter such as docker, Kubernetes and others were lumped up on the same page making it too long with so much information thereby making it difficult to navigate or even find information on this page.\n\nThis snapshot shows what the Installing Jenkins chapter looks like after the PR.\nWith this chapter split into smaller sections, it’s neater, clearer and most importantly easier to navigate to the section of interest without having to scroll through so much information that’s not necessarily needed.\n\nTesting, Participating and Contributing\n\nThe Jenkins Community invites the general public to try out these documentation updates and give feedback to help us further improve the documentation.\nIf you have any feedback, suggestions, or would like to contribute to the Jenkins on Kubernetes project,  drop a message indicating your interest in the Jenkins documentation Gitter channel.\nYou can also find the Google season of docs office hour notes and recordings for Jenkins on Kubernetes here.\nGSOD office hours take place twice a week on Mondays and Thursdays between 6 pm GMT+1 and 7 pm GMT+1, if you would like to be part of these meetings, you can indicate interest in the Jenkins Documentation Gitter channel and we would be happy to have you.\n\nAdditional Resources\n\nInstalling Jenkins on Kubernetes PR\n\nSplitting Installing Jenkins Chapter PR\n\nDocument Jenkins on Kubernetes Project\n\nGSoD Proposal\n\nGSoD Office Hours Notes\n\nGoogle Season of Docs - Startup\n\nGoogle Season of Docs on jenkins.io\n\nDocs SIG for Google Season of Docs startup ( video)","title":"Document Jenkins on Kubernetes: Installing Jenkins on Kubernetes Documentation Release","tags":["kubernetes","helm","documentation","gsod","gsod2020"],"authors":[]}},{"node":{"date":"2020-11-04T00:00:00.000Z","id":"507874d6-f29d-5e57-82cd-0383757359fc","slug":"/blog/2020/11/04/codeql/","strippedHtml":"A little over a month ago, GitHub announced the general availability of its code scanning solution.\nIt’s based on CodeQL, which makes it pretty easy to write queries for it and run them using the CodeQL GitHub action, CodeQL command line tools, or on lgtm.com.\n\nMany of the security vulnerabilities discovered in Jenkins plugins are fairly similar to each other, and unfortunately they’re usually specific to Jenkins, which means existing generic tools would not be able to discover them.\nSo I decided to write CodeQL queries for Jenkins-specific issues and invited maintainers to sign their plugins up for a \"private beta\" of code scanning for these issues.\n\nToday’s security advisory is the first one that includes findings discovered through that initiative.\nAll these issues were discovered with assistance by this tooling:\n\nSECURITY-2101 in AWS Global Configuration Plugin,\n\nSECURITY-2102 and SECURITY-2103 in Kubernetes Plugin,\n\nSECURITY-2104 and SECURITY-2115 in Mercurial Plugin,\n\nSECURITY-2110 in Azure Key Vault Plugin, and\n\nSECURITY-2126 in Active Directory Plugin\n\nWhile there were of course also false positives we had to review and mark as ignored, the integration with the GitHub UI made this pretty straightforward.\nOverall I’m very happy with the results so far, especially considering how new this initiative is.\n\nInterested in making the plugin you are maintaining more secure?\nSign up now by filing an INFRA issue in the github component and list the plugin repositories you’d like to have scanned.","title":"First results from using GitHub CodeQL to discover security vulnerabilities in Jenkins plugins","tags":["jenkins","security"],"authors":[]}},{"node":{"date":"2020-10-28T00:00:00.000Z","id":"9b07c9a0-6617-5760-a321-56da263f62d5","slug":"/blog/2020/10/28/election-candidates/","strippedHtml":"Jenkins 2020 Elections are over, thanks to all participants!\nPlease see the results announcement.\n\nAs you probably know, in a few weeks we will have the Jenkins 2020 elections.\nWe will be electing two governance board members and five officers,\nnamely: Security, Events, Release, Infrastructure, and Documentation.\nAfter the announcement on Sep 24,\nwe have been accepting nominations from community members.\n\nAfter the processing and confirmations with potential candidates,\nthe Jenkins 2020 Elections committee is happy to announce the candidates for the Jenkins Governance Board and Officer roles:\n\nGovernance Board candidates: Andrey Falko, Ewelina Wilkosz, Frederic Gurr, Gavin Mogan, Justin Harringa, Mark Waite, Marky Jackson, Steven Terrana, Zhao Xiaojie (Rick)\n\nRelease officer: Baptiste Mathus, Tim Jacomb, Victor Martinez\n\nSecurity officer: Daniel Beck (uncontested)\n\nEvents officer: Marky Jackson (uncontested)\n\nInfrastructure Officer: Olivier Vernin (uncontested)\n\nDocumentation officer: Mark Waite (uncontested)\n\nWe encourage all community members to support the candidates and to participate in the elections!\n\nKey dates\n\nNov 10 - Voting begins. Condorcet Internet Voting Service will be used for voting.\n\nNov 24 - Voting sign-up is over.\n\nNov 27 - Voting ends, 11PM UTC.\n\nDec 03 - Election results are announced and take effect.\n\nSigning up for voting\n\nAny Jenkins individual contributor is eligible to vote in the election\nif there was a contribution made before September 01, 2020.\nContribution does not mean a code contribution,\nall contributions count:\ndocumentation patches,\ncode reviews,\nsubstantial issue reports,\nissues and mailing list responses,\nsocial media posts,\ntesting,\netc.\nSuch a contribution should be public.\n\nYou can register to vote in one of two ways:\n\nFill out this Google Form.\nThis way requires logging into your Google Account to verify authenticity.\n\nSend an email to jenkins-2020-elections@googlegroups.com.\nYou will need to provide the information specified here.\n\nOnce sign-up is over, the election committee will process the form submissions and prepare a list of the registered voters.\nIn the case of rejection, one of the election committee members will send a rejection email.\nEvery individual contributor is expected to vote only once.\n\nCandidates\n\nBelow you can find statements, affiliations and profile links provided by the candidates.\n\nMinimum copy-editing was applied to the content by the Jenkins 2020 Elections Committee.\nCandidates are sorted by the first name.\n\nGovernance Board\n\nAndrey Falko\n\nI have been a Jenkins user and administrator on and off since around 2010.\nIn 2016, I got into evangelism by organizing a\nJenkins Area Meetup in San Francisco.\nI spoke at Jenkins World 2017\nand again at\nJenkins World 2018.\nJustin Harringa and I wrote and open sourced the Config Driven Pipeline Plugin.\nFor two years running, I’ve been a mentor for two Google Summer of Code projects:\nExternal Fingerprint Storage Project and\nRemoting over Apache Kafka with Kubernetes features.\n\nWith this nomination, I hope to continue helping strengthen and\nprogress the community further. As a member of the governance board,\nI’ll bring a fresh perspective by asking questions, providing feedback,\nand finding opportunities for others to contribute.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Stripe\n\nEwelina Wilkosz\n\nAs a consultant I support my customers with their Jenkins issues since the beginning of 2017.\nAnd almost from the start it was some kind of \"as code\" approach.\nThe experience I gained during that time resulted in getting myself involved in the development of Configuration as Code Plugin for Jenkins.\nI consider becoming a part of Jenkins Community one of the most valuable experiences in my career so far.\nI appreciate how much I have learned and how welcoming the community is.\n\nI am not a very active contributor these days, at least when it comes to code, but what I have to offer is rather extensive experience\nwith Jenkins end users - from small, single instance setups to environments with hundreds of controllers run in a different way on different operating systems.\nEvery day I see challenges those users go through, I know what issues they are facing and which features they consider valuable or missing.\nAs a Jenkins Governance Board Member I can represent those users.\n\nThanks to my involvement in Configuration as Code Plugin development\nI had a chance to deliver a number of public presentations\nwhere I focused on the benefits of the solution and tried to make it easier for newcomers to try it.\nHere are a few examples of my activities related to Jenkins Configuration as Code:\nblogpost,\ncdCON presentation,\npodcast recording.\nSo my focus is not only on representing users but also on educating them, and educating myself,\nso I actually know what they need and why.\n\nProfile links:\nGitHub,\nLinkedIn,\nTwitter\n\nAffiliations: Eficode (former Praqma)\n\nFrederic Gurr\n\nI started to use Jenkins back in 2008, when it still had a different name.\nIn 2011 I started to contribute and created my first little plugin called\nextra-columns.\nSince then, using and administering Jenkins servers has become a major part of my work life,\nwhile getting involved with the Jenkins community\nkickstarted my interest and involvement with open source software and communities.\n\nI’ve been working as a release engineer at the Eclipse Foundation since 2016,\nsupporting 250+ Jenkins instances for various open source projects.\nI’d be honored to bring a user and admin oriented perspective to the Governance Board and help\nshape the future of Jenkins.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: Eclipse Foundation\n\nGavin Mogan\n\nI got started with Jenkins early on when I was just getting started with testing.\nI knew there had to be a way to run the tests automatically and report on them back to people.\nI started hacking my own tools before I came across Jenkins (then Hudson) and was hooked ever since.\nOver the years I’ve managed to install and configure Jenkins at various jobs,\nand even was employed making internal and external plugins and integrations.\nYou’ll often find me on the Jenkins IRC and Gitter channels as well as the subreddit giving a hand to people who are stuck.\nI also try to get involved with Jenkins Infrastructure projects as much as I can.\nI currently maintain the plugin site, plugin site API, Jenkins Wiki exporter, and a bunch of other minor projects.\nI also help run Vancouver’s chapter of Nodeschool.\n\nIf elected, I would like to address improving commercial support avenues.\nRight now it’s a lot of people flailing in isolation.\nI would like to not only improve things so people can find easier ways to get help,\nbut also encourage more users to help others, and push for a\ncentralized source of companies providing commercial support.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: Digital Ocean, Nodeschool Vancouver\n\nJustin Harringa\n\nThe nomination is quite an honor for me.\nI have been a Hudson/Jenkins user since around 2009/2010 when\nI started working through driving continuous integration in a corporate environment at John Deere.\nAs time went on, I began contributing some small fixes to plugins such as the Job DSL Plugin, OpenID Plugin, and the Workflow Job Plugin.\nEventually, I ended up helping maintain Salesforce’s Chatter plugin and then open sourcing plugins such as the Config-Driven Pipeline Plugin with Andrey Falko.\nMore recently, I have also had the extreme pleasure of mentoring in 2 Jenkins projects for Google Summer of Code\n(Multi-branch Pipeline support for Gitlab in 2019 and Git Plugin Performance Improvements in 2020).\n\nI have learned so much from working with Jenkins and I would love to give back to the project further.\nHaving introduced Jenkins at both small and large companies,\nI would love to help contribute to the direction of the project through the Roadmap/SIGs/JEPs and encourage others to also contribute / improve Jenkins.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn\n\nAffiliations: Salesforce, Spinnaker SIG for Azure\n\nMark Waite\n\nI’m a Jenkins contributor, a member of the Jenkins core team,\none of the leaders of the Platform Special Interest Group,\nand leader of the Documentation Special Interest Group.\nI’ve served as the Jenkins Documentation Officer since 2019.\nI was a mentor for Google Season of Code 2020 and am one of the maintainers of the Git plugin for Jenkins.\n\nIf elected and allowed to serve on the Jenkins Board, I’ll work to increase community involvement and community development.\nI’m deeply interested in tooling and environments that support the Jenkins project,\nincluding the Jenkins CI environments, issue tracker, artifact repository, and source code repositories.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: CloudBees\n\nMarky Jackson\n\nI have been involved in the Jenkins project for many years.\nI started out as a plugin maintainer, SIG member and general helper.\nI moved to a SIG lead, speakers and Google Summer of Code and Docs org admin and mentor.\nMy current goals are to help continue the work of the public roadmap as well and gain most community members by continuing to be a champion of the community.\n\nFor me, being on the Jenkins Board is another opportunity to improve upon the great work\nwe have all done as well as work toward branching out our efforts to have more women, people of color and LGBTQIA members.\nI would be honored to have this opportunity.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: Equinix Metal, Continuous Delivery Foundation, Kubernetes, Ortelius\n\nSteven Terrana\n\nI have been a Jenkins user since 2017 and contributor since 2018.\nI am the primary maintainer of the Jenkins Templating Engine,\na plugin that allows users to create truly templated Jenkins pipelines that can be shared across teams.\nThrough that work, I’ve had the great pleasure of helping to organize the Pipeline Authoring Special Interest Group,\ncontributing to the Jenkins Pipeline documentation, and contributing bug fixes to various plugins\n(including the pipeline plugin and workflow-cps library).\n\nAs a Continuous Delivery Foundation Ambassador,\nI’ve enjoyed doing what I can to advance the community’s approach to CI/CD and simplifying DevSecOps adoption within large organizations.\nIt would be a privilege to serve on the Jenkins Governance Board and offer my support wherever I can.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Booz Allen Hamilton, Continuous Delivery Foundation\n\nZhao Xiaojie (Rick)\n\nThree years ago I joined the Jenkins community.\nI learned a lot during the process of contributing.\nI even became a Jenkins hero in my city.\nThe most exciting thing I want to do is help more new users of Jenkins get started, and let more contributors feel comfortable.\nI always love to host a JAM no matter if it’s online or offline.\n\nPlans: improve the experience of using Jenkins in different\ncountries; reorganize the knowledge of Jenkins, for example the tutorial\nby text or video format; help other SIG leaders to organize meetings.\n\nProfile links:\nGitHub,\nTwitter\n\nAffiliations: N/A\n\nRelease Officer\n\nBaptiste Mathus\n\nI have been using and contributing to Jenkins for so long that it is difficult for me to check when it started exactly.\nMy first pull-request to Jenkins was in 2011 and I had started to use it long before it.\nThroughout the years, I have contributed to various areas:\ncreated our local Jenkins Area Meetup with Michaël Pailloncy,\nhelped users and developers on our mailing lists and IRC channels,\ncontributed to the Jenkins infrastructure, the website,\nprocessing plugins hosting requests, worked full time on Jenkins Evergreen,\nand I am still present today.\n\nFor all these reasons, it would be an honor to serve as the Release Officer for the Jenkins Project.\n\nProfile links:\nGitHub,\nTwitter,\nJenkins Blog\n\nAffiliations: CloudBees\n\nTim Jacomb\n\nI have been a user of Jenkins for the last 8 years and a regular contributor since 2018.\nI began with maintaining the Slack plugin and over the last couple of years I have since expanded that to many more plugins and the Jenkins core.\nThese are some of the components I maintain when I have time: Slack, Azure Key Vault, Junit,\nmost of the Database plugins, Dark theme, Plugin installation manager, Jenkins Helm chart, Configuration as code plugin.\nI am also a member of the Jenkins infrastructure team,\nand I was involved in the release automation project and the mirrors modernisation effort,\nalong with the day to day support helping people regain access to accounts etc.\n\nAs a Release Officer I would like to increase automation,\nease onboarding of new contributors to the release team, and ensure that\nresponsibilities rotate among people so that I wouldn’t be a bottleneck for any task.\n\nProfile links:\nGitHub,\nJenkins Blog\n\nAffiliations: Kainos\n\nVictor Martinez\n\nI have been involved in the Jenkins project since 2011 by different means, as a user, as an administrator, as a contributor\n(bug reporting, plugin development, documentation, hackfest),\nbeing active in the different Jenkins forums such as the Jenkins-dev and Jenkins-user mailing lists,\nworking with the jenkins-infra shared library and so on.\nI’m also an advocate for the Jenkins project through some presentations anytime that I had the opportunity such as\nDevOps World 2020 and\nJenkins World 2017.\n\nI’ve been happily nominated for the Release officer role which matches not just my area of professional expertise that\nI’ve been doing for the last 14 years in different roles for different companies but also that’s an area of personal interest\nwhere I’d like to spend time with the Jenkins community to understand, document and automate the process\nin a way we can keep the project sustainable for a long term as it’s today,\nit’s not just about what I can bring for the community but also about growing together.\n\nIf elected as a Release officer I would aim to focus on the following areas:\nproceed with the existing responsibilities for this role;\ndocument and automate the release process;\nbeing an enabler for the Continuous Delivery not just for the plugins but also for the core.\n\nProfile links:\nGitHub,\nLinkedIn\n\nAffiliations: Elastic\n\nSecurity Officer - uncontested\n\nDaniel Beck\n\nI’ve been a Jenkins user since 2011, contributor since 2013, and core maintainer since 2014.\nIn 2015, I took on the scheduling and authoring of security advisories and have been doing that ever since,\nworking with reporters, maintainers, and the Jenkins security team to deliver security fixes.\nBeyond that, I regularly contribute to Jenkins and project infrastructure.\n\nSince I’ve started in the Security Officer role, we’ve made significant\nimprovements:\nPlugins no longer allow ordinary users to run arbitrary scripts (no sandbox!) as a regular feature. I introduced fine-grained permission management\nfor our GitHub repositories and\nthe Maven repository hosting our releases.\nWarnings directly in Jenkins inform admins when an installed component has known security issues (and their UX was improved earlier this year).\nThe Jenkins project is now a CVE Numbers Authority,\nto ensure timely and high-quality information in the CVE vulnerability database.\nWorking with Tyler, I added telemetry to Jenkins,\nwhich allowed us to deliver multiple large-scale security fixes with\nminimal impact.\nMore recently, I’ve started writing code scanning rules for common problems in Jenkins and\ninvited maintainers to sign their plugins up,\nwhich is something I hope to properly publish and roll out more widely soon.\n\nProfile links:\nGitHub\nJenkins Blog\n\nAffiliations: CloudBees\n\nEvents Officer - uncontested\n\nMarky Jackson\n\nI have been a part of the Jenkins community for some time, and I have received the utmost joy in volunteering.\nI have been extremely fortunate to have played a lead role in the Outreach & Advocacy SIG, the pipeline-Authoring SIG,\nand, most recently, the Cloud-Native SIG.\nI have taken part in many meetups, org admin, and mentor in the GSoC & GSoD.\nFinally, At DevOps World 2020, I received Jenkins most valuable advocate at DevOps World.\nI have experience advocating in other communities as well:\nKubernetes Release Manager Associate, Kubernetes Mentoring Lead, Ortelius Community Manager.\n\nJenkins is the most widely used Continuous Integration tool around,\nand I want to continue to promote that by focusing on the following areas: meetups; conference presentation from the Jenkins community;\nnew user outreach and onboarding; cross-community collaboration (e.g., Kubernetes community);\nworking with the Continuous Delivery Foundation on interoperability; focusing on SIG events.\n\nMy roots are open-source, and I am so proud to be a part of the Jenkins community.\nYou can read more about my journey in open-source here.\nYou can also see some of my presentations here and\nhere.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: OpsMx, Continuous Delivery Foundation, Kubernetes, Ortelius, Spinnaker\n\nInfrastructure Officer - uncontested\n\nOlivier Vernin\n\nI have been actively contributing to the Jenkins project for the past four years with contributions across many areas,\nand infrastructure is one of my favorite topics.\nOver my previous mandate as a Jenkins infrastructure officer, I focused on improving contribution experience,\nand let community members opportunities to take ownership of the different services.\nI worked on various sponsoring initiatives to make the Jenkins infrastructure more sustainable.\nWe provided a new environment for releasing Jenkins core (and one plugin!), and also many more things.\n\nFor the coming year, It is hard to make commitments on what it will look like as we have things we know,\nlike services that need some attention (“ci.jenkins.io/) and the things we don’t know yet.\nAnyway, It’s important to me to have a transparent project where everybody could read, learn, participate,\nand understand how the Jenkins project manages infrastructure and I want to continue down that path.\n\nProfile links:\nGitHub,\nTwitter,\nJenkins Blog\n\nAffiliations: CloudBees\n\nDocumentation Officer - uncontested\n\nMark Waite\n\nI’m a Jenkins contributor, a member of the Jenkins core team, one of the leaders of the Platform Special Interest Group,\nand leader of the Documentation Special Interest Group.\nI’ve served as the Jenkins Documentation Officer since 2019.\nI was a mentor for Google Season of Code 2020 and am one of the maintainers of the Git plugin for Jenkins.\n\nIf elected and allowed to serve as Documentation Officer,\nI’ll continue efforts to invite more contributors through regular Documentation Office Hours and outreach programs like Google Season of Docs, CommunityBridge, Outreachy, and Jenkins Hackfests.\nI’ll work to assure an inviting and welcoming environment for contributors.\n\nProfile links:\nGitHub,\nTwitter,\nLinkedIn,\nJenkins Blog\n\nAffiliations: CloudBees\n\nMore information\n\nJenkins 2020 elections announcement\n\nJenkins Governance Board and Jenkins Officers\n\nJenkins Board and Officer Election Process\n\n2019 election results\n\nElections coordination in the mailing list","title":"2020 Elections: Governance Board and Officer candidates","tags":["community","governance","governance-board","elections"],"authors":[]}},{"node":{"date":"2020-10-21T00:00:00.000Z","id":"7c9b1586-7a87-5fd5-8543-1a27aa94a68f","slug":"/blog/2020/10/21/a-sustainable-pattern-with-shared-library/","strippedHtml":"Table of Contents\n\nContext\nThe Problems\nThe Solution\n\nShared Library\nDuplication\nDocumentation\nScalability\nInstallation Agnostic\nFeature Toggling\n\nThis post will describe how I use a shared library in Jenkins. Typically when using multibranch pipeline.\n\nIf possible (if not forced to) I implement the pipelines without multibranch. I previously wrote about how I do that with my Generic Webhook Trigger Plugin in a previous post. But this will be my second choice, If I am not allowed to remove the Jenkinsfile :s from the repositories entirely.\n\nContext\n\nWithin an organization, you typically have a few different kinds of repositories. Each repository versioning one application. You may use different techniques for different kinds of applications. The Jenkins organization on GitHub is an example with 2300 repositories.\n\nThe Problems\n\nLarge Jenkinsfiles in every repository containing duplicated code. It seems common that the Jenkinsfile :s in every repository contains much more than just the things that are unique for that repository. The shared libraries feature may not be used, or it is used but not with an optimal pattern.\n\nInstallation specific Jenkinsfile:s that only work with one specific Jenkins installation. Sometimes I see multiple Jenkinsfile :s, one for each purpose or Jenkins installation.\n\nNo documentation and/or no natural place to write documentation.\n\nDevelopment is slow. Adding new features to repositories is a time consuming task. I want to be able to push features to 1000+ repositories without having to update their Jenkinsfile :s.\n\nNo flexible way of doing feature toggling. When maintaining a large number of repositories it is sometimes nice to introduce a feature to a subset of those repositories. If that works well, the feature is introduced to all repositories.\n\nThe Solution\n\nMy solution is a pattern that is inspired by how the Jenkins organization on GitHub does it with its buildPlugin(). But it is not exactly the same.\n\nShared Library\n\nHere is how I organize my shared libraries.\n\nJenkinsfile\n\nI put this in the Jenkinsfile :s:\n\nbuildRepo()\n\nDefault Configuration\n\nI provide a default configuration that any repository will get, if no other configuration is given in buildRepo().\n\nI create a vars/getConfig.groovy with:\n\ndef call(givenConfig = [:]) {\n  def defaultConfig = [\n    /**\n      * The Jenkins node, or label, that will be allocated for this build.\n      */\n    \"jenkinsNode\": \"BUILD\",\n    /**\n      * All config specific to NPM repo type.\n      */\n    \"npm\": [\n      /**\n        * Whether or not to run Cypress tests, if there are any.\n        */\n      \"cypress\": true\n    ],\n    \"maven\": [\n      /**\n        * Whether or not to run integration tests, if there are any.\n        */\n      \"integTest\": true\n    ]\n  ]\n  // https://e.printstacktrace.blog/how-to-merge-two-maps-in-groovy/\n  def effectiveConfig merge(defaultConfig, givenConfig)\n  println \"Configuration is documented here: https://whereverYouHos/getConfig.groovy\"\n  println \"Default config: \" + defaultConfig\n  println \"Given config: \" + givenConfig\n  println \"Effective config: \" + effectiveConfig\n  return effectiveConfig\n}\n\nBuild Plan\n\nI construct a build plan as early as possible. Taking decisions on what will be done in this build. So that the rest of the code becomes more streamlined.\n\nI try to rely as much as possible on conventions. I may provide configuration that lets users turn off features, but they are otherwise turned on if they are detected.\n\nI create a vars/getBuildPlan.groovy with:\n\ndef call(effectiveConfig = [:]) {\n  def derivedBuildPlan = [\n    \"repoType\": \"NOT DETECTED\"\n    \"npm\": [],\n    \"maven\": []\n  ]\n\n  node {\n    deleteDir()\n    checkout([$class: 'GitSCM',\n      branches: [[name: '*/branchName']],\n      extensions: [\n          [$class: 'SparseCheckoutPaths',\n            sparseCheckoutPaths:\n            [[$class:'SparseCheckoutPath', path:'package.json,pom.xml']]\n          ]\n      ],\n      userRemoteConfigs: [[credentialsId: 'someID',\n      url: 'git@link.git']]\n    ])\n\n    if (fileExists('package.json')) {\n      def packageJSON = readJSON file: 'package.json'\n      derivedBuildPlan.repoType = \"NPM\"\n      derivedBuildPlan.npm.cypress = effectiveConfig.npm.cypress && packageJSON.devDependencies.cypress\n      derivedBuildPlan.npm.eslint = packageJSON.devDependencies.eslint\n      derivedBuildPlan.npm.tslint = packageJSON.devDependencies.tslint\n    } else if (fileExists('pom.xml')) {\n      derivedBuildPlan.repoType = \"MAVEN\"\n      derivedBuildPlan.maven.integTest = effectiveConfig.maven.integTest && fileExists('src/integtest')\n    } else {\n      throw RuntimeException('Unable to detect repoType')\n    }\n\n    println \"Build plan: \" + derivedBuildPlan\n    deleteDir()\n  }\n  return derivedBuildPlan\n}\n\nPublic API\n\nThis is the public API, this is what I want the users of this library to actually invoke.\n\nI implement a buildRepo() method that will use that default configuration. It can also be called with a subset of the default configuration to tweak it.\n\nI create a vars/buildRepo.groovy with:\n\ndef call(givenConfig = [:]) {\n  def effectiveConfig = getConfig(givenConfig)\n  def buildPlan = getBuildPlan(effectiveConfig)\n\n  if (effectiveConfig.repoType == 'MAVEN')\n    buildRepoMaven(buildPlan);\n  } else if (effectiveConfig.repoType == 'NPM')\n    buildRepoNpm(buildPlan);\n  }\n}\n\nA user can get all the default behavior with:\n\nbuildRepo()\n\nA user can also choose not to run Cypress, even if it exists in the repository:\n\nbuildRepo([\n  \"npm\": [\n    \"cypress\": false\n  ]\n])\n\nSupporting Methods\n\nThis is usually much more complex, but I put some code here just to have a complete implementation.\n\nI create a vars/buildRepoNpm.groovy with:\n\ndef call(buildPlan = [:]) {\n  node(buildPlan.jenkinsNode) {\n    stage(\"Install\") {\n      sh \"npm install\"\n    }\n    stage(\"Build\") {\n      sh \"npm run build\"\n    }\n    if (buildPlan.npm.tslint) {\n      stage(\"TSlint\") {\n        sh \"npm run tslint\"\n      }\n    }\n    if (buildPlan.npm.eslint) {\n      stage(\"ESlint\") {\n        sh \"npm run eslint\"\n      }\n    }\n    if (buildPlan.npm.cypress) {\n      stage(\"Cypress\") {\n        sh \"npm run e2e:cypress\"\n      }\n    }\n  }\n}\n\nI create a vars/buildRepoMaven.groovy with:\n\ndef call(buildPlan = [:]) {\n  node(buildPlan.jenkinsNode) {\n    if (buildPlan.maven.integTest) {\n      stage(\"Verify\") {\n        sh \"mvn verify\"\n      }\n    } else {\n      stage(\"Package\") {\n        sh \"mvn package\"\n      }\n    }\n  }\n}\n\nDuplication\n\nThe Jenkinsfile :s are kept extremely small. It is only when they, for some reason, diverge from the default config that they need to be changed.\n\nDocumentation\n\nThere is one single point where documentation is written, the getConfig.groovy -file. It can be referred to whenever someone asks for documentation.\n\nScalability\n\nThis is a highly scalable pattern. Both with regards to performance and maintainability in code.\n\nIt scales in performance because the Jenkinsfile :s can be used by any Jenkins installation. So that you can scale by adding several completely separate Jenkins installations, not only nodes.\n\nIt scales in code because it adds just a tiny Jenkinsfile to repositories. It relies on conventions instead, like the existence of attributes in package.json and location of integration tests in src/integtest.\n\nInstallation Agnostic\n\nThe Jenkinsfile :s does not point at any implementation of this API. It just invokes it and it is up to the Jenkins installation to implement it, with a shared libraries.\n\nIt can even be used by something that is not Jenkins. Perhaps you decide to do something in a Docker container, you can still parse the Jenkinsfile with Groovy or (with some magic) with any language.\n\nFeature Toggling\n\nThe shared library can do feature toggling by:\n\nLetting some feature be enabled by default for every repository with name starting with x.\n\nOr, adding some default config saying\"feature-x-enabled\": false, while some repos change their Jenkinsfile :s to buildRepo([\"feature-x-enabled\": true]).\n\nWhenever the feature feels stable, it can be enabled for everyone by changing only the shared library.","title":"A sustainable pattern with shared library","tags":["pipeline","scalability","sharedlibrary","infrastructure"],"authors":[]}},{"node":{"date":"2020-10-20T00:00:00.000Z","id":"2f05be94-85ad-5b81-b393-4fd50549545d","slug":"/blog/2020/10/20/Cross-Industry-DevOps-3-Firms-Get-It-Right-with-Jenkins/","strippedHtml":"Some months ago, we took a significant step in helping the Jenkins community share their stories of how they improved workflows, sped up testing, and saw better quality results after implementing Jenkins into their software development processes.\n\nBy the end of the year, we’ll have over 50 Jenkins user stories published with many more in the pipeline. We invite you to explore them all but wanted to share three inspiring examples highlighting how various organizations approach — and implement — Jenkins in the workplace. Enjoy!\n\nStory 1: Jenkins is the way to tackle any challenge\n\nEnterprise-wide CI/CD solution caters to the complex problems that project teams face each day, as told by Jenkins user Mark Baumann:\n\n“Our development teams work in a wide range of projects and domains. We have a very diverse tooling landscape since the projects work with all kinds of different software tools. Of course, projects in the embedded domain will have different toolsets than those working in the automotive domain.\n\nEach project team created its own CI Toolchain, which caused a lot of work for the developers and the IT department. Each project needed to set up their own virtual machine, install and manage their own CI Server, Version Management, and whatever they needed. Creating such a toolchain could easily take up weeks until it was running because there was no standard solution and each team had to start from scratch.”\n\nDiscover how ITK-Engineering GmbH developed a company-wide, common, internal CI/CD toolchain and increased the number of builds for each project and how nearly all departments are now practicing CI/CD. The full Jenkins / ITK Engineering story is here!\n\nStory 2: Jenkins is the way to add spicy flavors to agency processes\n\nA creative agency start-up simplifies the build, test, and deploy steps, allowing the small team to focus more on the deliverables and less on the process. As told by Jenkins user Erik Woitschig:\n\n“It was quite a challenge to streamline and combine all the services to build an artifact to deploy. Because of our micro service-oriented and distributed architecture, the most challenging part of rethinking our build, test, and deploy process was to figure out how best to sync the deployment of all services. We also had to retest builds properly to go live or initiate a rollback.\n\nWith Jenkins and some pipelines, it was relatively simple to create a local and distributed artifact of our application to quickly share and deploy across the team, locally and globally.”\n\nBecause Jenkins is simple to install and easy to maintain, Muzkat has increased productivity far beyond that of a 3-person team. Read on to learn how this bootstrapped Berlin-based agency is making a go of it with Jenkins. The full Jenkins / Muzkat story is here!\n\nStory 3: Jenkins is the way to focus on your code\n\nAs demands for the Wright Medical’s services grew, they required an agile DevOps environment that would grow and scale along with the tech team, as told by Jenkins user Christophe Carpentier:\n\n“What was critical to our success was the stability of Jenkins and a significant number of reliable plugins! We could take a few plugins, set up our workflow, and add GitLab and SonarQube integration without ever stopping or losing data in over a year. We found that all of the problems we encountered were our own, and that is why it was critical to make Jenkins an essential part of our workflow.\n\nWith this implementation, Jenkins allows more than would be manually possible. It flawlessly updates our staging environments, blocks commits based on the SonarQube analysis, and provides us with near-instant feedback on merge requests.”\n\nLearn how Wright Medical supports a growing dev team by switching to an agile DevOps process that allows for automatic daily releases — versus weekly manual builds. Best of all, it’s letting the developers focus on building great code rather than infrastructure. The full Jenkins / Wright Medical story is here!\n\nWhat are you building?\n\nHope you enjoy these Jenkins user stories. You’ll find that “Jenkins Is The Way” website is a global showcase of how developers and engineers build, deploy, and automate great stuff with Jenkins. If you want to share your story, we’ll send you a free Jenkins Is The Way T-Shirt in return. Hope to hear from you soon!","title":"Cross-Industry DevOps: 3 Firms Get It Right with Jenkins","tags":["jenkinsistheway","Jenkinsuserstories"],"authors":[]}},{"node":{"date":"2020-09-25T00:00:00.000Z","id":"0691e7e4-2e97-54ec-ab3c-e0f175b8a679","slug":"/blog/2020/09/25/document-jenkins-on-kubernetes-introduction/","strippedHtml":"I’m thrilled to announce that I will be participating in Google Season of Docs (GSoD)\n2020 with the Jenkins project. I started contributing to Jenkins documentation during the technical writer\nexploration phase for Google Season of Docs 2020 and I must say, my journey so far\nhas been nothing short of amazing majorly because of the supportive community behind this project.\nI chose the Jenkins project because I understood this project from a user point of view as I had been exposed to setting up, configuring,\nand using Jenkins to automate CI/CD processes. I piqued interest in two of Jenkins project ideas,\nPlugin documentation migration and update and Document Jenkins on Kubernetes, submitted proposals for these two projects and to my utmost joy, the latter was selected.\n\nIn this article, I’m going to be explaining what my selected project is about and why this project is important to the Jenkins community and its users.\n\nIntroduction\n\nKubernetes is a platform-agnostic container orchestration tool created by Google and heavily supported\nby the open-source community as a project of the Cloud Native Computing Foundation.\nIt allows you to use container instances and manage them for scaling and fault tolerance.\nIt also handles a wide range of management activities that would otherwise require separate solutions or custom code,\nincluding request routing, container discovery, health checks, and rolling updates.\n\nKubernetes is compatible with the majority of CI/CD tools which allow developers to run tests,\ndeploy builds in Kubernetes and update applications with no downtime.\nOne of the most popular CI/CD tools now is Jenkins for the following reasons:\n\nIt is open-source and free.\n\nit is user-friendly, easy to install and does not require additional installations or components.\n\nJenkins is also quite easy to configure, modify and extend.\n\nIt deploys code and generates test reports.\n\nIt also boasts a rich plugin ecosystem. The extensive pool of plugins makes Jenkins flexible and allows building, deploying and automating across various platforms.\n\nJenkins can be configured according to the requirements for continuous integrations and continuous delivery.\n\nJenkins is available for all platforms and different operating systems, whether it is OS X, Windows or Linux.\n\nMost of the integration work is automated. Hence fewer integration issues. This saves both time and money over the lifespan of a project.\n\nThe following reasons have made Jenkins on Kubernetes a popular theme for Jenkins users, however,\nthere’s currently no central location for documentation describing Jenkins on Kubernetes,\nthereby making it difficult for Jenkins on Kubernetes users to navigate and find information.\nThis project would create a new Kubernetes Volume on Jenkins.io which would describe the concepts,\ntechniques, and choices for Kubernetes users running Jenkins.\n\nCurrent State\n\nThere are a lot of presentations and articles about running Jenkins on Kubernetes, however,\nthere’s no central location for describing Jenkins on Kubernetes. This makes it difficult for:\n\nJenkins on Kubernetes users to navigate and find information\n\nTrack, update and maintain information on Jenkins on Kubernetes\n\nProject Improvements\n\nTo solve the existing issue with Jenkins on Kubernetes documentation,\na new Kubernetes volume will be created on Jenkins.io.\nThis Volume is going to aggregate user guides, information on cloud providers and demos on Jenkins on Kubernetes.\nYou can find the proposed contents for the new volume here.\nFeel free to comment on any suggestions you might have in the proposed content doc.\n\nThis project will also provide the following advantages:\n\nImprove the user experience of Jenkins on Kubernetes users by giving them a one-stop-shop for information on Jenkins on Kubernetes.\n\nMake it easy to track, update and maintain information on Jenkins on Kubernetes using the Solutions page\n\nReference the existing community documentation for Jenkins on K8s (plugins and tools/integrations).\n\nHow to guides, tutorials and explanations of concepts and techniques in Jenkins on Kubernetes.\n\nJust-In-Time documentation which means that rather than documenting every feature comprehensively,\nwe will produce and release documentation in bits but continuously based on popular questions,\nfeedback and area of interests gathered from the community and users.\n\nProject Timeline\n\nFind below a summary of the project timeline.\n\nCommunity bonding ( August 17 - September 13 )\n\nSet up a communication channel and time (due to time difference).\n\nRefine my goals and set expectations on both sides.\n\nLearn more about the community and Jenkins.\n\nGather and thoroughly study existing resources that will be useful and helpful to the project.\n\nPre-planning of the project\n\nContacting Stakeholders and onboarding contributors\n\nDocumentation Period\n\nThis period is going to be focused on creating contents which include user guides,\ntutorials, demos, etc. for Jenkins on Kubernetes.\nSome of the topics to be covered include Installing Jenkins on Kubernetes,\nAdministering Jenkins on Kubernetes, Cloud providers and much more.\n\nDocumentation Timeline\n\n1st Month (September - October)\n\nSome basic prerequisites for installing jenkins on kubernetes include docker, a kubernetes cluster, and optionally Helm or the Jenkins Operator for Kubernetes.\n\nHelm is a package manager which automates the process of installing, configuring, upgrading, and removing complex Kubernetes application. A Helm chart defines several Kubernetes resources as a set. Helm can make deployments easier and repeatable because all resources for an application are deployed by running one command.\n\nHelm has two elements, a client (helm) and a server (Tiller). The server element runs inside a Kubernetes cluster and manages the installation of charts. With Helm, configuration settings are kept in values.yaml file separate from the manifest formats. The configuration values can be changed according to application need without touching the rest of the manifest.\n\nOn the other hand, the Jenkins operator is a Kubernetes native operator which fully manages Jenkins on Kubernetes. It is easy to install with just a few manifests and allows users to configure and manage Jenkins on Kubernetes. To run jenkins-operator, you need to have a running Kubernetes cluster and kubectl installed.\n\nThe Jenkins Operator provides out of the box:\n\nIntegration with Kubernetes — preconfigured kubernetes-plugin for provisioning dynamic Jenkins Slaves as Pods\n\nPipelines as Code — declarative way to version your pipelines in VCS\n\nExtensibility via Groovy scripts or Configuration as Code plugin-customize your Jenkins, configure OAuth authorization and more\n\nSecurity and Hardening — an initial security hardening of Jenkins instance via Groovy scripts to prevent security vulnerabilities\n\nIn the first month, the focus will be on documenting an introductory section.\nThis section will include but is not limited to Setting up Kubernetes cluster, Installing Jenkins on Kubernetes, exploring the various approaches by which this can be achieved such as using helm package manager or the Jenkins Operator as explained above and Administering Jenkins on Kubernetes.\n\n2nd Month (October - November)\n\nIn the second month, the focus will be on documenting how to setup up CI/CD pipelines using Jenkins and Kubernetes on different cloud providers.\nSome of the cloud providers we will be looking at include but are not limited to:\n\nAmazon Web Service (AWS)\n\nAzure Kubernetes Service\n\nGoogle Cloud\n\n3rd Month (November - December)\n\nIn the final month, the focus will be on creating demos and tutorials,\nsubmitting project report, evaluation of mentors and finally,\npublishing a report of my experience as a participant in Season of Docs.\n\nConclusion\n\nJenkins community is actively working towards improving its documentation to create a better\nexperience for Jenkins users and invites technical writers to join the community and contribute to the Jenkins on Kubernetes project.\n\nTo contribute to the Jenkins on Kubernetes project, simply join the Jenkins documentation Gitter channel and drop a message,\nyou can also find the Google season of docs office hour notes and recordings for Jenkins on Kubernetes here.\nGSOD office hours take place twice a week on Mondays and Thursdays between 6pm GMT+1 and 7pm GMT+1,\nif you would like to be part of these meetings, you can indicate interest in the Jenkins Documentation\nGitter channel and we would be happy to have you.\n\nIf you are also a newcomer and would like to contribute to Jenkins, documentation is a great place to contribute.\nA lot of small patches can be done from the GitHub web interface even without cloning repositories locally.\nYou can find some good first issues to get started with here.\n\nFind more information on contributing to Jenkins documentation here.\nIf you have further questions about the Jenkins on Kubernetes project or contributing to Jenkins,\nyou can reach out on the Jenkins documentation Gitter channel.\n\nAdditional Resources\n\nGSoD Proposal\n\nGSoD Office Hours Notes\n\nGoogle Season of Docs - Startup\n\nGoogle Season of Docs on jenkins.io\n\nDocs SIG for Google Season of Docs startup ( video)","title":"Documenting Jenkins on Kubernetes Introduction","tags":["kubernetes","documentation","gsod","gsod2020"],"authors":[]}}]}},"pageContext":{"limit":8,"skip":40,"numPages":100,"currentPage":6}},
    "staticQueryHashes": ["3649515864"]}