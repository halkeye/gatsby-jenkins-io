{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/14",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-11-25T00:00:00.000Z","id":"726986a7-4dcd-5c99-8b23-e199566c8eea","slug":"/blog/2019/11/25/macos-native-installer-deprecation/","strippedHtml":"In addition to WAR files and Docker images, the Jenkins project provides native installers for each weekly and LTS release.\nThere are installers available for Linux distributions, Windows, macOS and other operating systems.\nThere are also installers provided by third parties.\nYou can find the list of these installers on the Downloads page.\n\nIn this blog post, we announce the upcoming deprecation of the macOS native installer.\nWe will review the replacement options and the rollout plan.\n\nWhy?\n\nMaintaining installers is a significant maintenance effort for the project\nbecause installers require testing and, sometimes, specific platforms and environments for packaging.\nWhen installers lose relevance for the majority of the Jenkins audience, we remove them or handover maintenance to third parties on other areas.\nFor macOS, there are currently two types of packages: native installers with GUI for desktop versions and Homebrew packages.\nSince Homebrew is now a defacto standard package manager for macOS users, from the Jenkins standpoint it made sense to deprecate the native installers.\n\nWhy now?\nThere is ongoing work on automating Jenkins Core releases within the Jenkins infrastructure.\nLong story short, we are moving Jenkins release pipelines to Kubernetes on Microsoft Azure.\nThis environment does not offer macOS machines that are needed to produce native installers.\nIf you are interested to know more, there will be a How Jenkins Builds and Delivers Jenkins in the Cloud talk presented by Olivier Vernin at DevOps World | Jenkins World 2019 Europe in Lisbon (use the JWFOSS code for a 30% discount!).\n\nWe could have used an external service for building macOS installers,\nbut it would have added an additional point of failure and implementation/maintenance overhead.\nSo we discussed it in the developer mailing list and agreed that it is better to just deprecate and then remove the packages.\n\nReplacing native installers\n\nIn the case of macOS, there are two main alternatives available: managing the service manually or migrating to Homebrew packages.\nBefore doing a migration, we highly recommend backing up your instance.\n\nManaging Jenkins with WAR file on macOS\n\nIf your Jenkins instance was previously set up with a native installer,\nto update Jenkins it will be enough to replace the jenkins.war file in the installation directory and restart the instance.\nThe services will keep running as it was configured before the migration.\nThe default installation directory is /Applications/Jenkins/jenkins.war\n\nManaging Jenkins with Homebrew\n\nInstalling Jenkins with Homebrew is a way to go for those who want to install Jenkins using a package manager.\nThere are two Homebrew formulas for Jenkins: jenkins for Weekly releases and jenkins-lts for LTS ones.\nThese packages are supported by a third party (Homebrew community),\nand they may be not as frequently updated as packages supported by the Jenkins project directly.\n\nBefore doing a migration from macOS Native installers to HomeBrew, please make sure to backup your Jenkins instance.\nThere are no automatic migration tools available, and the installation may corrupt your JENKINS_HOME or service configuration files in edge cases.\n\nIf you switch to Homebrew, you will need to properly migrate the JENKINS_HOME data to the new location.\nWe do not provide an official migration guide, but it is possible to find some guidelines on the Web.\n\nSample commands:\n\nInstall the latest Weekly version: brew install jenkins\n\nInstall a specific Weekly version: brew install jenkins@YOUR_VERSION\n\nStart the Jenkins service: brew services start jenkins\n\nRestart the Jenkins service: brew services restart jenkins\n\nUpdate the Jenkins version: brew upgrade jenkins\n\nFor more information see the documentation for Homebrew packages on the macOS Download pages.\n\nRollout plan\n\nmacOS native packaging is considered as deprecated starting from Jenkins 2.206 and Jenkins LTS 2.204.1\n\nFor Jenkins Weekly macOS native packaging will be removed with the switch to the new Jenkins release flow.\nThe exact date is to be determined.\n\nAfter the change, there will be no macOS native installers produced for new Jenkins Weekly releases\n\nReleases for previous versions will be available in this archive\n\nFor Jenkins LTS macOS will be removed with the switch to the new Jenkins release flow in the LTS baseline.\nThis change will happen only after the deployment of the new release flow in Jenkins Weekly.\n\nAfter the switch, there will be no macOS native installers produced for new Jenkins LTS releases\n\nReleases for previous versions will be available in this archive\n\nSee the discussion on the developer mailing list for more information.\n\nQuestions and feedback\n\nIf you have any questions or want to provide feedback, please use the developer mailing list thread mentioned above Platform SIG channels (chat, google group).\nAny feedback will be much appreciated because we plan more installer/ and platform deprecations in the future.","title":"Jenkins macOS native installer deprecation","tags":["announcement","deprecation","macos","platform-sig","platforms"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2019-11-22T00:00:00.000Z","id":"add1d65a-e5d3-5a51-85db-aba3b7ead937","slug":"/blog/2019/11/22/jenkins-health-advisor-by-cloudbees/","strippedHtml":"Managing any software presents its own unique challenges. Jenkins controllers are no exception. For example,\n\nHow do you keep a finger on the pulse of everything going on in your Jenkins environment? Are you looking at every new defect opened in the issue tracker?\n\nHow do you make sure that your controllers or agents don’t silently fail? Are you monitoring its logs? All of its internal components? If something does go wrong, how do you fix it??\n\nHow do you avoid the infamous “angry Jenkins” logo?\n\nThat’s why we created Jenkins Health Advisor by CloudBees.\n\nHere at CloudBees, we have years of experience supporting our customers who are using Jenkins, including our proprietary products build on top of Jenkins like CloudBees Core.\nAs a result, our support team is made up of automation experts with Jenkins knowledge you can’t get anywhere else.\n\nAutomated health checks started when our support engineers created a platform so they could write rules to detect known issues on support bundles provided by our customers, and redirect them to the required knowledge source to diagnose and resolve the issue.\n\nAfter years of internal usage we decided to share this service with the community and we are pleased to introduce a new free  (as in beer) service available to every Jenkins user : Jenkins Health Advisor by CloudBees .\n\nJenkins Health Advisor by CloudBees automatically analyzes your Jenkins environment, proactively identifies potential issues and advises you of solutions with detailed email reports.\n\nJenkins Health Advisor by CloudBees can detect a large range of issues from simple configuration issues to security and best practices concerns - all critical elements of Jenkins implementations.\nGetting started is done in 3 steps, and within 24 hours you will receive your first report.\n\nWe hope that you will appreciate this service and it will help you to keep your controllers healthy.\n\nTake a few minutes to read our documentation, discover the service and don’t hesitate to contact us on the Jenkins community channels ( Gitter, jenkinsci-users@googlegroups.com, …​).\n\nDon’t miss also the opportunity to meet our support team on the \"Ask the experts\" booth at DevOps World | Jenkins World 2019.\n\nUseful links:\n\nPlugin Documentation\n\nJenkins Plugin Site\n\nCloudBees Jenkins Support","title":"Jenkins Health Advisor by CloudBees is here!","tags":["jenkins","health","healthcheck","stability"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://aheritier.net","github":"aheritier","html":"<div class=\"paragraph\">\n<p>Specialised in <a href=\"https://www.linkedin.com/in/aheritier\">software development and process automation</a>, he has been contributing for many years to various open source projects such as <a href=\"https://jenkins.io\">Jenkins</a>, <a href=\"https://maven.apache.org\">Apache Maven</a> and to various communities around Java and DevOps.\nMember of <a href=\"https://lescastcodeurs.com\">Les Cast Codeurs</a> podcast (a french podcast dedicated to IT in general and Java ecosystem), he regularly speaks at various conferences, users groups and participates in the organisation of <a href=\"https://devoxx.fr/what-is-devoxx-france\">Devoxx France</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In 2015, he joined <a href=\"http://www.cloudbees.com\">CloudBees, Inc.</a>, where he is now managing the Support Tooling development activity.</p>\n</div>","id":"aheritier","irc":null,"linkedin":null,"name":"Arnaud Héritier","slug":"blog/author/aheritier","twitter":"aheritier"}]}},{"node":{"date":"2019-11-22T00:00:00.000Z","id":"e5f5bc1a-7d2f-5807-8b41-7478e232a4f1","slug":"/blog/2019/11/22/welcome-to-the-matrix/","strippedHtml":"I often find myself needing to run the same actions on a bunch of different configurations.\nUp to now, that meant I had to make multiple copies of the same stages in my pipelines.\nWhen I needed to make changes, I had to make the same changes in multiple places throughout my pipeline.\nMaintaining even a small number of configuration was difficult for larger pipelines.\n\nDeclarative Pipeline 1.5.0-beta1 (now available from the\nJenkins Experimental Update site) adds a new matrix section that lets me specify a list stages once and then run that same list in parallel on multiple configurations.\nLet’s take a look!\n\nSingle configuration pipeline\n\nI’ll start with a simple pipeline with build and test stages.\nI’m using echo steps as placeholders for my build and test actions.\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            agent any\n            stages {\n                stage('Build') {\n                    steps {\n                        echo 'Do Build'\n                    }\n                }\n                stage('Test') {\n                    steps {\n                        echo 'Do Test'\n                    }\n                }\n            }\n        }\n    }\n}\n\nPipeline for multiple platforms and browsers\n\nI’d like to run my build and tests on a combination of platforms and browsers.\nThe new matrix directive lets me specify a set of axes.\nEach axis has a name and a list of one or more values.\nWhen the pipeline is run, Jenkins will take those and run my stages on all possible combinations of values from each axis.\nAll cells in a matrix run in parallel (limited only by the number of available agents).\nStages within each cell are run sequentially.\n\nMy matrix has two axes: PLATFORM and BROWSER.\nI have three values for PLATFORM and four values for BROWSER resulting in my stages being run with twelve different combinations.\nI’ve changed my echo steps to use the axis values for each cell.\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent any\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nLog output (truncated)\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'edge') (hide)\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'edge')\n...\nDo Build for linux - safari\nDo Build for linux - firefox\nDo Build for windows - firefox\nDo Test for linux - firefox\nDo Build for mac - firefox\nDo Build for linux - chrome\nDo Test for windows - firefox\n...\n\nExcluding invalid combinations\n\nNow that I have my basic matrix created, I’ve noticed that I have some invalid combinations.\nMicrosoft Edge only runs on Windows and there isn’t a Linux version of Safari.\n\nI can remove invalid cells from my matrix using exclude directives. Each exclude has one or more axis directives with name and values.\nThe axis directives inside an exclude generate a set of combinations (similar to generating the matrix cells).\nThe matrix cells that match all the values from an exclude combination are removed from the matrix.\nIf I have more than one exclude directive, each are evaluated separately to remove cells.\n\nWhen dealing with a long lists of values to exclude, I can use notValues instead of values to specify axis values we don’t want excluded.\nYes, that’s a double negative, so it can get a little confusing.\nI try to use it only when I really need it.\n\nIn my sample pipeline below, I specifically exclude the linux, safari combination and I also exclude any platform that is not windows with the edge browser.\n\nThis pipeline uses two axes but there is no limit on the number of axis directives.\n\nAlso, in this pipeline each exclude specifies values for both axes, but that is not required.\nIf we wanted to run only \"linux\" cells, we could use the following exclude :\n\nexclude {\n    axis {\n        name 'PLATFORM'\n        notValues 'linux'\n    }\n}\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent any\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                excludes {\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            values 'linux'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'safari'\n                        }\n                    }\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            notValues 'windows'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'edge'\n                        }\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nLog output (truncated)\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n...\nDo Build for linux - firefox\n...\n\nControlling cell behavior at runtime\n\nInside the matrix directive I can also add \"per-cell\" directives.\nThese are the same directives that I would add to a stage and they let me control the behavior of each cell in the matrix.\nThese directives can use the axis values from their cell as part of their inputs, allowing me to customize the behavior of each cell to match its axis values.\n\nOn my Jenkins server I have configured agents with labels that match the OS for each agent (\"linux-agent\", \"windows-agent\", and \"mac-agent\").\nTo run each cell in my matrix on the appropriate operating system, I configure the label for that cell using Groovy string templating.\n\nmatrix {\n    axes { ... }\n    excludes { ... }\n    agent {\n        label \"${PLATFORM}-agent\"\n    }\n    stages { ... }\n    // ...\n}\n\nOccasionally I run my pipeline manually from the Jenkins Web UI.\nWhen I do that, I’d like to be able to select just one platform to run.\nThe axis and exclude directives define the static set of cells that make up the matrix.\nThat set of combinations is generated before the start of the run, before any parameters are processed.\nWhat this means is that I can’t add or remove cells from a matrix after the job has started.\n\nThe \"per-cell\" directives, on the other hand, are evaluated at runtime.\nI can use the \"per-cell\" when directive inside matrix to control which cells in the matrix are executed.\nI’ll add a choice parameter with the list of platforms, and add conditions to the when directive, which will either let all platforms execute, or only execute cells that match my selected platform.\n\npipeline {\n    parameters {\n        choice(name: 'PLATFORM_FILTER', choices: ['all', 'linux', 'windows', 'mac'], description: 'Run on specific platform')\n    }\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent {\n                    label \"${PLATFORM}-agent\"\n                }\n                when { anyOf {\n                    expression { params.PLATFORM_FILTER == 'all' }\n                    expression { params.PLATFORM_FILTER == env.PLATFORM }\n                } }\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                excludes {\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            values 'linux'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'safari'\n                        }\n                    }\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            notValues 'windows'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'edge'\n                        }\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nIf I run this Pipeline from the Jenkins UI and set the PLATFORM_FILTER parameter to mac, I’ll get something like the output below:\n\nLog output (truncated - PLATFORM_FILTER = 'mac' )\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n...\nStage \"Matrix - OS = 'linux', BROWSER = 'chrome'\" skipped due to when conditional\nStage \"Matrix - OS = 'linux', BROWSER = 'firefox'\" skipped due to when conditional\n...\nDo Build for mac - firefox\nDo Build for mac - chrome\nDo Build for mac - safari\n...\nStage \"Matrix - OS = 'windows', BROWSER = 'chrome'\" skipped due to when conditional\nStage \"Matrix - OS = 'windows', BROWSER = 'edge'\" skipped due to when conditional\n...\nDo Test for mac - safari\nDo Test for mac - firefox\nDo Test for mac - chrome\n\nCome join me at DevOps World | Jenkins World 2019 for \" Declarative Pipeline 2019: Tips, Tricks and What’s Next \".\nI’ll go over what’s been added to Pipeline in the last year (including matrix) and discuss ideas about where pipeline should go next.\n\nConclusion\n\nIn this blog post, we’ve looked at how to use the matrix directive to make concise but powerful declarative pipelines.\nAn equivalent pipeline created without matrix would easily be several times larger, and much harder to understand and maintain.\n\nMatrix is now available from the experimental update center.\nIt will be released to the main update center as soon as we’re done putting the finishing touches on the documentation and online help.\n\nLinks\n\nJenkins Experimental Update Center\n\nUsing the Jenkins Experimental Update Center","title":"Welcome to the Matrix","tags":["pipeline","plugins","declarative","matrix"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2019-11-08T00:00:00.000Z","id":"476c260c-b24d-5dc6-acfa-3ff9c0c413c1","slug":"/blog/2019/11/08/board-elections/","strippedHtml":"The Jenkins community is conducting the 2019 elections for Board and Officer positions.\nThe call for nominations has concluded.\nWe received many nominations.\nBased on the people who are willing to accept their nomination and the uncontested officer positions, we will have 3 votes:\n\nA vote to elect 3 board members\n\nA vote to elect the Jenkins security officer\n\nA vote to elect the Jenkins events officer\n\nCandidates\n\nEach candidate has provided a statement to help guide voters on why they should vote for the candidate.\nRefer to the candidate statements for more details.\nThe candidates running for a board position are:\n\nAlex Earl\n\nOliver Gondza\n\nUllrich Hafner\n\nOleg Nenashev\n\nMark Waite\n\nZhao Xiaojie (a.k.a. Rick to many of you)\n\nThe candidates running for Security Officer are:\n\nDaniel Beck\n\nWadeck Follonier\n\nThe candidates running for Events Officer are:\n\nAlyssa Tong\n\nZhao Xiaojie (a.k.a. Rick to many of you)\n\nVoter Registration\n\nThis is the first time in a while that we are running a Jenkins election; we are learning as we go.\nJenkins elections aim to be very inclusive.\nWe do not restrict elections to just code committers.\nAnyone who has a Jenkins account registered before September 1, 2019 is eligible to vote.\nJenkins, being the successful project it is, has  approximately 100 000 accounts that meet that criteria.\nAs a result we are contacting eligible voters and requesting that they explicitly ‘opt-in’ to participate in the voting.\n\nIf you meet the criteria, you will receive an email at your registered jenkins.io email address.\nIt will be from elections@jenkins.io with the title ‘ 2019 Jenkins Election - Invitation to Participate ’.\nThe email will provide election details and will include an \" I want to participate\" button.\n\nVoter Confirmation\n\nOnce you click on the link, you should see a confirmation screen as follows:\n\nIf you do not receive the email by November 14, 2019 or if you have any problems voting, please comment on the Jenkins Election 2019 Jira issue.\n\nVoting\n\nThe voting will officially open on November 11, 2019.\nCandidates will receive an email from the Condorcet internet voting sent by Kohsuke Kawaguchi.\nOne email will be sent for each vote (so 3 in total: 1 for board, 1 for event officer and 1 for security officer).\nThe vote will ask to rank the candidates using a screen like this:\n\nElection Dates\n\nHere is a summary of the key election dates:\n\nDate\nEvent\n\nNow\nVoter registration ongoing\n\nNov 11, 2019\nVoting begins\n\nNov 17, 2019\nVoter registration closes\n\nNov 24, 2019\nVoting closes a 5:00 PM Pacific Time\n\nDec 3, 2019\nNew representatives announced\n\nElection results will be posted to the Jenkins developer mailing list, followed by an announcement blog post on jenkins.io.\n\nIf there are any delays to the proposed dates we will aim to communicate that as soon as we can.\nThank you very much for all the candidates showing the Jenkins spirit of service to their community.\nWe encourage everyone to register to vote and participate in the Jenkins community.\n\nUncontested Officer Positions\n\nWhen an officer position has only one candidate that is willing to accept the nomination, there is no reason to vote on that position.\nThe individual becomes an officer as the sole candidate for the position.\n\nUncontested officers include:\n\nName\nRole\n\nOlivier Vernin\nInfrastructure Officer\n\nOliver Gondza\nRelease Officer\n\nMark Waite\nDocumentation Officer\n\nReferences\n\nJenkins Governance Board\n\nJenkins Board Election Process\n\nJenkins Officers\n\nAnnouncement in the developer mailing list\n\n2019 elections proposal in the developer mailing list","title":"2019 Jenkins Board and Officer Elections Update","tags":["community","governance","governance-board","elections"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"blog/author/tracymiranda","twitter":"tracymiranda"}]}},{"node":{"date":"2019-11-04T00:00:00.000Z","id":"d7cd86a9-cbed-5942-90a0-dd192dcd3459","slug":"/blog/2019/11/04/speaker-blog-how-to-build-the-top-mobile-game/","strippedHtml":"Context\n\nYou have been tasked with managing the Jenkins instance for the highest grossing mobile\ngame in the world. You learn that this involves helping the game studio iterate their work\nagainst eight different target platforms, each with their SDK, on four different main pipelines,\nplus a lot of extra auxiliary jobs. And, of course, the studio wants all of this to go smoothly, in\norder to maintain a good pace of features and bugfixes for every release - a release happening\nevery two weeks. Hitting hundreds of millions of players worldwide.\n\nHow are you going to make sure that the environment stays correctly configured, with the\nright versions of the required software; helping the studio maintain stability and scalability of\ntheir pipelines; ensuring operability of the Jenkins instance; improving the speed of the builds\nmonth after month?\n\nIt’s OK to sweat. You are going to need some help!\n\nThis is just a regular day in the office for a build engineer working at King. Facing a very\nbroad problem, with high quality standards and even higher stakes. Thankfully, we are not\nalone. We have access to a lot of tools - either open source tools, tools developed by the\nstudios or tools developed by our stellar build infrastructure team in Barcelona - to help carry\nus all the way to the publish line. We put all of these tools together, and by their powers\ncombined, we provide fast, easily operable workflows for the studios, cutting minutes here\nand there, ensuring the features a smooth sail from dev, to master, to release.\n\nI will explain all of the tricks we use at King to speed builds up, and to make Jenkins operation\neasier for our studios on December 4, 2019, at DevOps World | Jenkins\nWorld Lisbon.\nUse JWFOSS for 30% discount on registration!\nFor now, let’s take a look at some of them.\n\nWhere do we start?\n\nWe use on-premises elastic infrastructure, spawning machines from certain templates\nwhenever they are needed. This means that for every build, we are getting a fresh\nenvironment - no intermediate artifacts leftover or anything of the sort, which is good. That\nalso means that we need to clone our repositories and compile everything every time, which is\nbad. However, we have solutions for these two problems.\n\nWe make full use of linkclones/snapshots when spawning a VM. Every night we run a\nbootstrapper that will power on the base image and perform whatever operations we decide on\nit, before turning it back into a template and re-creating the snapshot. In the case of Candy\nCrush, we update our caches, and this helps us cut some time off of git clone and compilation.\nWe call this bootstrapper “cacheo”. It looks more or less like this:\n\nCacheo\n\n1. Start elastic agent template image\n2. Connect it to Jenkins\n3. Perform cleanup\n4. Trigger git reference cache jobs\n5. Trigger all the builds you want cached\n6. Turn off template image, delete the agent and recreate the linked clone snapshot\n\nEvery studio can specify on which templates will cacheo run, and what will it do in each of them.\nMaybe you want to make sure your Android license is on point. Or download some\npackages from artifactory. Perhaps pre-load your gradle dependencies. Whatever it is, cacheo\ndoes it for you and updates your base images every night.\n\nOne of the most common uses is to pre-fill a local git cache, and when doing so, the\nimprovement is very visible, especially on Windows:\n\nLinux\nMacOS\nWindows\n\nNFS\n2 min 11s\n2min 34s\n8min 32s\n\nLocal\n1 min 20s\n1min 35s\n3min 49s\n\nDifference\n39% faster\n39% faster\n55% faster\n\nThis means, speeding up source code fetching by 55% on Windows, on average. That is a LOT!!\n\nBut what about actual compilation?\n\nAll of our major games use the same engine; we bring this code in by means of submodules. This means\nthere is a big bunch of shared code that needs to be compiled and linked whenever we build the game.\nAnd it’s not rare that this shared code is bigger than the actual game code!\nThankfully, the engine team lent us a hand, and they developed a way to package the compiled shared code.\nNormally, the game code lives alongside a specific version of the shared code, which doesn’t get updated too frequently.\nSometimes once a month, sometimes to grab a hotfix. This translates to us potentially compiling the\nexact same shared code for quite some time, every time we build the game. Thanks to these\nprebuilt artifacts, we are able to skip a huge part of the compilation, at the cost of a simple artifactory download.\n\nCacheo\n\nif generate_prebuilt_libs:\n    compile_project()\n\n    generate_empty_cmakelists()\n\n    for dependency in dependencies:\n        merge_compiled_dependency_into_metalib(dependency)\n        write_dependency_to_generated_cmakelists_as_alias_for_metalib(dependency)\n\nelif use_prebuilt_libs:\n    add_generated_cmakelists_with_metalib_as_dependency()\n\n    compile_project()\n\nThanks to these prebuilt libraries, we are able to skip a big chunk of the compilation,\nand it builds up really quickly! Iterative work on several branches, as long as they have\nthe same engine version, gets sped up in noticeable ways.\nThere are, however, specific cases when we do choose to build the shared code regardless, such as\nwhen we build release candidates for instance.\n\nJust so you get an idea, times on this table are on average:\n\niOS\nWindows\n\nNo prebuilts\n20min 17s\n40min 30s\n\nPrebuilts\n10min 2s\n23min 20s\n\nDifference\n51% faster\n43% faster\n\nI just don’t want to have to deal with bureaucracy\n\nOperating Jenkins can be quite complicated. Talk about “Tell me\nsomething I don’t know”, right? And with so many moving pieces (elastic\ninfrastructure, plugins, dirty workspaces), it might not be easy for\neveryone to run specific maintenance tasks. We have a lot of small\npipelines, created by the build infrastructure group, that we can use to\ndiagnose and work around certain errors, as well as gather useful\ninformation that might be otherwise difficult to find. These pipelines\ndo things like printing all the installed plugins, deleting offline\non-demand agents, cleaning disconnected VMs from vSphere, or re-run\npuppet in a specific Jenkins instance. And any user can run these jobs,\nthere is no need to be an admin. This allows the team to unblock\nthemselves if they need to by using these jobs. Here’s one that I\nparticularly like. How many times have you modified a pipeline and, when\ntrying to run it, the first thing that happens is that Jenkins says that\nit needs approval?\n\nScript Approval\n\nimport org.jenkinsci.plugins.scriptsecurity.scripts.*\n\n@NonCPS\n\n// Disclaimer - this can have serious security consequences\n// Be mindful when you run this!\n\ndef call() {\n    sa = ScriptApproval.get()\n    toApproveScripts = sa.getPendingScripts().collect()\n    println (\"toApproveScripts: \" + toApproveScripts)\n    toApproveScripts.each {pending ->\n        sa.get().approveScript(pending.getHash())\n\tprintln (\"approvedScripts: \" + pending.getHash())\n\t}\n    sa.save()\n}\n\nThe best part? All our Jenkins instances include these jobs, by default, so\nno one misses out on the fun.","title":"How to build the top mobile game for every platform imaginable","tags":["jenkinsworld","jenkinsworld2019","mobile-game"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"Napo2k","html":"<div class=\"paragraph\">\n<p>Nacho is a Build Engineer with several years of experience in the videogame industry, and has worked in both AAA projects as well as free-to-play and mobile.\nCurrently, Nacho works at King Stockholm, taking care of Jenkins operations for Candy Crush Saga and Candy Crush Soda Saga.</p>\n</div>","id":"ignacio_fernandez","irc":null,"linkedin":"ignaciofernandezpuerta","name":"Ignacio 'Nacho' Fernández","slug":"blog/author/ignacio_fernandez","twitter":"@napo2k"}]}},{"node":{"date":"2019-11-01T00:00:00.000Z","id":"09c19419-deb1-5016-ab06-4383186a37e4","slug":"/blog/2019/11/01/devops-world-jenkins-world-san-francisco-in-living-colors/","strippedHtml":"DevOps World | Jenkins World San Francisco was August 12 - 15, 2019.\nThe event was delivered in vivid colors starting with flowing banners hung from street lamp posts to the big screens in breakout rooms, to the expo hall.\nThe energy and enthusiasm in the Moscone convention center made the colors even more vibrant, thanks to the people attending the conference.\n\nHere’s a recap of the conference in pictures:\n\nDevOps World | Jenkins World 2019 - San Francisco\n\nKeynote - Evolution of the Continuous Delivery Foundation\n\nTracy Miranda opened the keynote explaining the evolution of the Continuous Delivery Foundation.\n\nKeynote - Evolution of the Continuous Delivery Foundation\n\nInfluencers, Creators, and Members\n\nThe influencers, creators, and members of the CD Foundation: Tracy Miranda (far left),\nAndy Glover (Netflix), Tara Hernandez (Google), Chris Aniszczyk (Linux Foundation), Dave Stanke (Google), Kohsuke Kawaguchi (Jenkins creator), Jayne Groll (DevOps Institute), James Strachan (Jenkins X creator).\n“We want to help set Jenkins up for success, into the next decade”, Tyler Croy (not in picture).\n\nInfluencers, Creators, and Members of the Continuous Delivery Foundation\n\nContributor Summit\n\nThe inaugural Continuous Delivery Foundation Contributor Summit and it was a full house!\n\nContinous Delivery Foudnation Contributor Summit\n\n15 Years of Jenkins\n\nA remarkable milestone for the Jenkins project, a celebration of Jenkins turning 15…​cake included!\n\nFifteen Years of Jenkins\n\nBee Diverse Luncheon\n\nInteractive and engaging luncheon celebrating diversity\n\nBee Diverse Luncheon Entrance\n\nBee Diverse Luncheon Leading Voices\n\nBee Diverse Luncheon Group Discussions\n\nJenkins Contributors and Experts\n\nJenkins contributors and experts on hand to educate and share lightning talks and provide one on one Jenkins support.\n\nJenkins Lightning Talks\n\nJenkins Experts Answering Questions\n\nJenkins Experts Discussing and Helping\n\nJenkins Experts Gathered\n\nDevOps Superheroes\n\nEven though the conference offered endless learning and networking possibilities, and major milestones worth celebrating,  I felt the true highlight of the conference was the celebration of each individual, “You”.\n“You” are the super hero, the driving force behind the incredible innovations to advance technology to where it is today.\nHere’s celebrating the super heros in all of YOU!\n\nDevOps Superheroes\n\nSuperheroes and the Wookie\n\nFour Superheroes\n\nKohsuke Kawaguchi - Founding Superhero\n\nA DevOps League of Superheroes\n\nCrowd of Superheroes\n\nThis party will be coming to Lisbon, Portugal on December 3-5, 2019.\nWe hope to see our EU Jenkins fans at DevOps World | Jenkins World Lisbon.\nUse JWFOSS for a 30% discount off your pass.\n\nHope to see you in Lisbon!","title":"DevOps World | Jenkins World San Francisco in Living Colors","tags":["events","devopsworld2019","jenkinsworld"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"blog/author/alyssat","twitter":null}]}},{"node":{"date":"2019-10-24T00:00:00.000Z","id":"63c960fe-cb12-5cdb-8985-10457666b67d","slug":"/blog/2019/10/24/jenkins-performance-avoiding-pitfalls/","strippedHtml":"This is a speaker blogpost for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal\n\nWith Halloween upon us, there’s no better time to discuss Jenkinstein!\nAre you suffering from Jenkins performance issues?\nAre users complaining about a slow UI or even scarier, is Jenkins going down frequently?\n\nCome join me at DevOps World | Jenkins World 2019 for \" Jenkins Performance: Avoiding Pitfalls, Diagnosing Issues, and Scaling for Growth \", a talk about JVM administration and best practices from the front lines of supporting thousands of Jenkins installations worldwide.\nDuring this talk we’ll cover how to prevent your Jenkins instance from becoming a Jenkinstein!\n\nTopics we will be discussing:\n\nJVM administration best practices\n\nHorizontal scaling\n\nAnalyzing thread dumps, GC logs, and heap dumps\n\nReal world data showing 3500% performance increases\n\nGarbage collection\n\nWe’ll be discussing how you can forecast for growth, and baseline using key performance indicators like application throughput and latency, by analyzing spooky data like Garbage Collection logs!\n\nCome join me for the presentation in Lisbon! There will be candy!\n\nSlides","title":"Jenkins Performance: Avoiding Pitfalls, Diagnosing Issues, and Scaling for Growth - DevOps World | Jenkins World 2019","tags":["jenkins world","jenkinsworld","devopsworld2019","performance"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"ryansmith303","html":"<div class=\"paragraph\">\n<p>Ryan Smith is a Certified CloudBees Jenkins Platform Engineer, and currently works as a Senior Developer Support Engineer for CloudBees. Ryan currently leads the performance and stability team within the support organization, and spends his days evangelizing enterprise Java deployment best practices. He resides in Grand Junction, Colorado, USA and would love to discuss JVM garbage collection over a cocktail with you.</p>\n</div>","id":"ryansmith303","irc":null,"linkedin":null,"name":"Ryan Smith","slug":"blog/author/ryansmith303","twitter":null}]}},{"node":{"date":"2019-10-21T00:00:00.000Z","id":"b2fe0751-2a13-5720-ba79-3c07e09417b5","slug":"/blog/2019/10/21/plugin-docs-on-github/","strippedHtml":"In September 2019 we announced\nsupport of GitHub as a source of documentation for the Jenkins Plugin Site.\nThanks to Zbynek Konecny and Olivier Vernin and other contributors,\nnow it is possible to store plugin documentation right inside plugin repositories instead of Jenkins Wiki which was historically difficult to maintain for plugin maintainers and for the Jenkins infrastructure team.\n\nThis blogpost may be interesting to plugin maintainers and to those who want to contribute to the Jenkins documentation.\nI will describe how to migrate plugin documentation to GitHub and to get pages like this one:\n\nWhy?\n\nBy using plugin GitHub repositories for documentation,\nplugin maintainers can follow the Documentation-as-code approach and make documentation changes a part of the pull requests so that documentation follow-ups do not get forgotten.\nIt also gives an opportunity to review the documentation changes and to add documentation contributor recognition, especially if the story is combined with Release Drafter.\n\nUnfortunately, before September 2019 usage of GitHub documentation was causing some issues.\nFirst of all, many plugin maintainers have already moved their documentation to GitHub, and it caused fragmentation of the documentation (Wiki, GitHub, jenkins.io).\nTo address it, plugin maintainers still had to maintain stub Wiki pages with redirects,\nand users had to spend some time to find out where the real documentation is located.\nBy supporting GitHub as a documentation source, we allow maintainers to phase out the plugin Wiki pages while improving the user experience.\n\nAnd there are even more pressing reasons to do the migration now…​\nIf you are subscribed to the developer mailing list,\nyou may have also seen an announcement by R. Tyler Croy about Jenkins Wiki stability issues\nand making it read-only as a temporary measure to stabilize the instance\n( mailing list thread).\nAlthough the functionality has been partially restored afterwards,\nthere is a consensus in the Infrastructure team that we should gradually move to alternate solutions.\n\nExamples\n\nSince the announcement in September, more than 50 plugins were moved from Wiki to GitHub.\nFew examples:\n\nConfiguration as Code Plugin\n\nMailer Plugin\n\nGradle Plugin\n\nRole Strategy Plugin\n\nHow to enable GitHub documentation for your plugin?\n\nConvert documentation from Wiki to GitHub Asciidoc or Markdown format if you have not done it yet.\n\nIt can be easily done in a semi-automatic way using Jenkins Wiki Exporter\n\nSee the guidelines\nhere.\n\nChange the field in pom.xml so that it points to GitHub\n( guide).\n Examples of valid links:\n\nhttps://github.com/jenkinsci/mailer-plugin - plugin site will use GitHub REST API to extract README\n\nhttps://github.com/jenkinsci/ssh-credentials-plugin/blob/master/doc/README.md - extraction of a plugin page from a custom location\n\nOptional: Add badges to the page to improve look&feel and to provide quick links for users.\nThere are standard badges for changelogs, chats, plugin site, and installation numbers.\n\nExample for Markdown\n\nExample for Asciidoc\n\nRelease the new plugin version\n\nWait a few hours till the change propagates.\nAfter that, the Jenkins Plugin Site will show the new documentation from GitHub.\n\nWhat’s next?\n\nThe story is tracked as jira:WEBSITE-406[] which is a part of the wider subproject for using GitHub as a source of data for the Jenkins plugin site and update managers (jira:WEBSITE-637[]).\nLater steps include support showing changelogs from GitHub releases, pulling plugin tags from GitHub, showing plugin logos, and using Repository Permission Updater as a source of the maintainer information.\n\nHow to contribute?\n\nOctober is a great time to contribute!\nPlugin documentation is one of the featured projects for Hacktoberfest,\nand we will welcome all contributions to the documentation and to the codebase.\n\nContributing to Documentation\n\nWe are looking for contributors who are interested to improve plugin documentation and to help us with migration from Wiki to GitHub.\nFor dozens of plugins the documentation is already in GitHub,\nand you are welcome to submit pull requests against any repository.\n\nMigrating documentation:\n\nMigrating plugin documentation from Wiki to GitHub\n\nMoving documentation from Jenkins Wiki to jenkins.io\n\njira:JENKINS-59467[Template issue for plugin docs migration]\n\nNewbie-friendly documentation tasks\n\nIf you have any questions about contributing to the documentation,\nplease see this page or reach out to us in the Docs SIG Gitter chat.\n\nCode contributions\n\nWould you like to write some code in Java or JavaScript?\nOr would you like to work on CSS styles and improve Jenkins design?\nIn such case you are welcome to contribute to the Jenkins Plugin Site.\nIt is our own plugin marketplace implementation, and we invite contributions to this area.\nThe plugin site is really easy to develop.\n\njira:WEBSITE-637[] - EPIC for Plugin site and GitHub integrations\n\njenkins-infra/plugin-site - Frontend (JavaScript, React, XSS, YARN)\n\njenkins-infra/plugin-site-api - Plugin site API and Docker packaging (Java, Maven, Docker)\n\nUseful links\n\nPlugin Documentation\n\nJenkins Plugin Site\n\nJenkins Wiki Exporter tool","title":"Plugin Documentation-as-Code: Moving docs to GitHub","tags":["hacktoberfest","developer","documentation","wiki","contributors"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"limit":8,"skip":104,"numPages":100,"currentPage":14}},
    "staticQueryHashes": ["3649515864"]}