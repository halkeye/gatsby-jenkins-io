{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/9",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-08-03T00:00:00.000Z","id":"1a966f1b-f29c-510f-943e-ff264acdf7dd","slug":"/blog/2020/08/03/github-checks-api-plugin-coding-phase-2/","strippedHtml":"Another great coding phase for GitHub Checks API Project ends!\nIn this phase, we focused on consuming the checks API in two widely used plugins:\n\nWarnings NG Plugin\n\nCode Coverage API Plugin\n\nBesides the external usage, we have also split the general checks API from its GitHub implementation and released both of the plugins:\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nCoding Phase 2 Demo [starts from 25:20]\n\nWarning Checks\n\nThe newly released Warnings NG plugin 8.4.0 will use checks API to publish different check runs for different static analysis tools.\nWithout leaving GitHub, users are now able to see the analysis report they interested in.\n\nOn GitHub’s conversation tab for each PR, users will see summaries for those checks like the screenshot above. The summaries will include:\n\nThe status that indicates the quality gate\n\nThe name of the analysis tool used\n\nA short message that indicates statistics of new and total issues\n\nMore fine-grained statistics can be found in the Details page.\n\nAnother practical feature is the annotation for specific lines of code. Users can now review the code alone with the annotations.\n\nTry It\n\nIn Wanings NG plugin 8.4.0, the warning checks is set as a default feature only for GitHub.\nFor other SCM platforms, a NullPublisher will be used which does nothing.\nTherefore, you can get those checks for your own GitHub project just in a few steps:\n\nUpdate Warnings NG plugin to 8.4.0\n\nInstall GitHub Checks plugin on your Jenkins instance\n\nFollow the GitHub app authentication guide to configure the credentials for the multi-branch project or GitHub organization project you are going to use\n\nUse warnings-ng plugin in your Jenkinsfile for the project you configured in the last step, e.g.\n\nnode {\n    stage ('Checkout') {\n        checkout scm\n    }\n\n    stage ('Build and Static Analysis') {\n        sh 'mvn -V -e clean verify -Dmaven.test.failure.ignore'\n\n        recordIssues tools: [java(), javaDoc()], aggregatingResults: 'true', id: 'java', name: 'Java'\n        recordIssues tool: errorProne(), healthy: 1, unhealthy: 20\n        recordIssues tools: [checkStyle(pattern: 'target/checkstyle-result.xml'),\n            spotBugs(pattern: 'target/spotbugsXml.xml'),\n            pmdParser(pattern: 'target/pmd.xml'),\n            cpd(pattern: 'target/cpd.xml')],\n            qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]\n    }\n}\n\nFor more about the pipeline usage of warnings-ng plugin, please see the official documentation.\n\nHowever, if you don’t want to publish the warnings to GitHub, you can either uninstall the GitHub Checks plugin or disable it by adding skipPublishingChecks: true.\n\nrecordIssues enabledForFailure: true, tools: [java(), javaDoc()], skipPublishingChecks: true\n\nCoverage Checks\n\nThe coverage checks are achieved by consuming the API in Code Coverage API plugin.\nFirst, in the conversation tab of a PR, users will be able to see the summary about the coverage difference compared to previous builds.\n\nThe Details page will contain some other things:\n\nLinks to the reference build, including the target branch build from the master branch and the last successful build from this branch\n\nCoverage healthy score (the default value is 100% if the threshold is not configured)\n\nCoverages and trends of different types in table format\n\nThe pull request for this feature will soon be merged and will be included in the next release of Coverage Checks API plugin. After that, you can use it by adding the below section to your pipeline script:\n\nnode {\n    stage ('Checkout') {\n        checkout scm\n    }\n\n    stage ('Line and Branch Coverage') {\n        publishCoverage adapters: [jacoco('**/*/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_ALL_BUILD')\n    }\n}\n\nLike the warning checks, you can also disable the coverage checks by setting the field skipPublishingChecks, e.g.\n\npublishCoverage adapters: [jacoco('**/*/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_ALL_BUILD'), skipPublishingChecks: true\n\nNext Phase\n\nIn the next phase, we will turn our attention back to Checks API Plugin and GitHub Checks Plugin and add the following features in future versions:\n\nPipeline Support\n\nUsers can publish checks directly in a pipeline script without requiring a consumer plugin that supports the checks.\n\nRe-run Request\n\nUsers can re-run Jenkins build through Checks API.\n\nLastly, it is exciting to inform that we are currently making the checks feature available on ci.jenkins.io for all plugins hosted in the jenkinsci GitHub organization, please see INFRA-2694 for more details.\n\nResources\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nProject Page\n\nGitter Channel","title":"GitHub Checks API Plugin Project - Coding Phase 2","tags":["github","api","plugins","developer","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg","srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/77b35/XiongKezhi.jpg 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/d4a57/XiongKezhi.jpg 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/19e71/XiongKezhi.jpg 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/68974/XiongKezhi.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/ef6ff/XiongKezhi.webp 32w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/8257c/XiongKezhi.webp 64w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/6766a/XiongKezhi.webp 128w,\n/gatsby-jenkins-io/static/bedf23c1062bf01bb5bdcdd5aea7730e/22bfc/XiongKezhi.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"XiongKezhi","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 Student. Kezhi is an open source enthusiast who enjoys sharing ideas with other developers. He started contributing to Jenkins in March 2020. Currently, he is working on <a href=\"https://github.com/XiongKezhi/checks-api-plugin\">GitHub Checks API Plugin</a>.</p>\n</div>","id":"XiongKezhi","irc":null,"linkedin":"kezhi-xiong-44234a188","name":"Kezhi Xiong","slug":"/blog/authors/xiongkezhi","twitter":"AugustX_"}]}},{"node":{"date":"2020-07-29T00:00:00.000Z","id":"84676949-9b05-55b1-b843-435c0ff0696d","slug":"/blog/2020/07/29/git-performance-improvement-phase2/","strippedHtml":"The second phase of the Git Plugin Performance Improvement project has been great in terms of the progress we have achieved in implementing performance improvement insights\nderived from the phase one JMH micro-benchmark experiments.\n\nWhat we’ve learned so far in this project is that a git fetch is highly correlated to the size of the remote repository. In order to make fetch improvements in this plugin, our task was to find the difference in performance for the two available git implementations in the Git Plugin, git and JGit.\n\nOur major finding was that git performs much better than JGit when it comes to a large sized repository (>100 MiB). Interestingly, JGit performs better than git when size of the repository is less than 100 MiB.\n\nIn this phase, we were successful in coding this derived knowledge from the benchmarks into a new functionality called the\nGitToolChooser.\n\nGitToolChooser\n\nThis class aims to add the functionality of recommending a git implementation on the basis of the size of a repository which has a strong correlation to the performance of git fetch (from performance Benchmarks).\n\nIt utilizes two heuristics to calculate the size:\n\nUsing cached .git dir from multibranch projects to estimate the size of a repository\n\nProviding an extension point which, upon implementation, can use REST APIs exposed by git service providers like Github, GitLab, etc to fetch the size of the remote repository.\n\nWill it optimize your Jenkins instance?\nThat requires one of the following:\n\nyou have a multibranch project in your Jenkins instance, the plugin can use that to recommend the optimal git implementation\n\nyou have a branch Source Plugin installed in the Jenkins instance, the particular branch source plugin will recommend a git implementation using REST APIs provided by GitHub or GitLab respectively.\n\nThe architecture and code for this class is at: PR-931\n\nNote : This functionality is an upcoming feature in the subsequent Git Plugin release.\n\nJMH benchmarks in multiple environments\n\nThe benchmarks were being executed on Linux and macOS machines frequently but there was a need to check if the results gained from those benchmarks would hold true across more platforms to ensure that the solution (GitToolChooser) is generally platform-agnostic.\n\nTo test this hypothesis, we performed an experiment:\n\nRunning git fetch operation for a 400 MiB sized repository on:\n\nWindows\n\nFreeBSD 12\n\nppc64le\n\ns390x\n\nThe result of running this experiment is given below:\n\nObservations:\n\nppc64le and s390x are able to run the operation in almost half the time it takes for the Windows or FreeBSD 12 machine. This behavior may be attributed to the increased computational power of those machines.\n\nThe difference in performance between git and JGit remains constant across all platforms which is a positive sign for the GitToolChooser as its recommendation would be consistent across multiple devices and operating systems.\n\nRelease Plan 🚀\n\nJENKINS-49757 - Avoid double fetch from Git checkout step\nThis issue was fixed in phase one, avoids the second fetch in redundant cases.\nIt will be shipped with some benchmarks on the change in performance due to the removal of the second fetch.\n\nPR-574\n\nPR-904\n\nGitToolChooser\n\nPR-931\nThis pull request is under review, will be shipped in one of the subsequent Git Plugin releases.\n\nCurrent Challenges with GitToolChooser\n\nImplement the extension point to support GitHub Branch Source Plugin, Gitlab Branch Source Plugin and Gitea Plugin.\n\nThe current version of JGit doesn’t support LFS checkout and sparse checkout, need to make sure that the recommendation doesn’t break existing use cases.\n\nFuture Work\n\nIn phase three, we wish to:\n\nRelease a new version of the Git and Git Client Plugin with the features developed during the project\n\nContinue to explore more areas for performance improvement\n\nAdd a new git operation: git clone (Stretch Goal)\n\nReaching Out\n\nFeel free to reach out to us for any questions or feedback on the project’s Gitter Channel or the Jenkins\nDeveloper Mailing list.\n\nProject Page\n\nPhase 1 Blog Post","title":"Git Plugin Performance Improvement Phase-2 Progress","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#685848","images":{"fallback":{"src":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg","srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/77b35/rishabhbudhouliya.jpg 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/d4a57/rishabhbudhouliya.jpg 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/19e71/rishabhbudhouliya.jpg 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/68974/rishabhbudhouliya.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/ef6ff/rishabhbudhouliya.webp 32w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/8257c/rishabhbudhouliya.webp 64w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/6766a/rishabhbudhouliya.webp 128w,\n/gatsby-jenkins-io/static/32fa8462b37abd3e057f4b70f0558972/22bfc/rishabhbudhouliya.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rishabhBudhouliya","html":"<div class=\"paragraph\">\n<p>GSoC 2020 student under the Jenkins project (Git Plugin Performance Improvements).\nAspiring to be better at Software Development and participate more in the open source\ncommunity.</p>\n</div>","id":"rishabhbudhouliya","irc":null,"linkedin":null,"name":"Rishabh Budhouliya","slug":"/blog/authors/rishabhbudhouliya","twitter":null}]}},{"node":{"date":"2020-07-27T00:00:00.000Z","id":"28af9b14-9cf1-5cb2-94df-b2869b9e73fc","slug":"/blog/2020/07/27/custom-distribution-service/","strippedHtml":"Hello,\nAfter an eventful community bonding period we finally entered into the coding phase. This blog post will summarize the work done till the midterm of the coding phases i.e. week 6. If some of the topics here require a more detailed explanation, I will write a separate blog post. These blogs posts will not have a very defined format but would cover all of the user stories or features implemented.\n\nProject Summary\n\nThe main idea behind the project is to build a customizable jenkins distribution service that could be used to build tailor-made jenkins distributions. The service would provide users with a simple interface to select the configurations they want to build the instance with eg: plugins, authorization matrices etc. Furthermore it would include a section for sharing community created distros so that users can find and download already built jenkins war/configuration files to use out of the box.\n\nQuick review\n\nPull Requests Opened\n38\n\nGithub Issues completed\n36\n\nDetails\n\nI have written separate blog posts for every week in GSoC and the intricate details for each of them can be found at their respective blog pages. I am including a summary for every phase supported with the respective links.\n\nCommunity Bonding\n\nThis year GSoC had a longer community bonding than any of the previous editions due to the Coronavirus pandemic and therefore this gave me a lot of time to explore, so I spent it by building a prototype for my project. I realised some of the blockages I might face early on, and therefore it gave me more clarity in terms of how I can proceed. I also spent this time preparing a design document which you can find here.\n\nCommunity Bonding Blog\n\nWeek 1\n\nIn week one, I spent time getting used to the tech stack I would be using, I was pretty familiar with Spring Boot but React was something I was going to be using for the first time, so I spent time studying more about it. I also got the project page ready, the issues I was going to tackle and the milestones that I had to achieve before the evaluation. I also spent a bit of time setting up the home page and a bit of front-end components.\n\nWeek 1 Blog\n\nWeek 2\n\nOnce we were done with the initial setup, it was time to work on the core of the project.\nIn the second week, I worked on generating the package configuration and the plugin list dummy display page setup.\nI also ran into issues with the Jenkinsfile so the majority of time was spent fixing it.\nFinally I managed to get around those problems.\nYou can read more about it in the Week 2 Blog post.\n\nWeek 2 Blog\n\nWeek 3\n\nThe last week was spent cleaning up most of the code and getting the remaining milestones in. This was probably the hardest part of phase 1 because it involved connecting the front and back end of the project.You can read more about it here.\n\nWeek 3\n\nMidterm Update\n\nThe second phase has been going on for the past 3 weeks and we have already accomplished a majority of the deliverables including community configurations, war downloading and filtering of plugins. More details about the mid term report can be found here.\n\nMidterm Update\n\nGetting the Code\n\nThe Custom Distribution Service was created from scratch during GSoC and can be found here on Github.\n\nOther links\n\nGSoC Proposal\nDesign Document\nDaily Notes\nDemo\n\nFeedback channel\n\nGitter Channel Link.","title":"Custom Distribution Service : Midterm Summary","tags":["service","distribution","cloud-native","gsoc","gsoc2020","packaging","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/authors/sladyn98","twitter":"SladynN"}]}},{"node":{"date":"2020-07-27T00:00:00.000Z","id":"0b676e9e-8bca-5401-ad70-50c30452b445","slug":"/blog/2020/07/27/machine-learning-plugin-coding-phase2/","strippedHtml":"Welcome back folks!\n\nThis blog post is about my coding phase 2 in Jenkins Machine Learning Plugin for this GSoC 2020.\nAfter successfully passing the evaluation and demo in the phase 1, our team went ahead for facing the challenges in phase 2.\n\nSummary\n\nThis phase of coding was well spent by documentation and by fixing many bugs.\nAs the main feature of connecting to an IPython Kernel is done in phase 1, we were able to focus on fixing minor/major bugs and documenting for the users.\nAccording to the JENKINS-62927 issue, a Docker agent was built to facilitate users without concerning plugin dependencies in python.\nIn the act of deprecation of Python 2, we ported our plugin to support Python 3.\nWe have tested our plugin in Conda, venv and Windows environments.\nMachine learning plugin has successfully passed the end to end test. A feature for a code editor is needed for further discussion/analysis as we have done a simple editor that may be useful in other ways in the future. PR#35\n\nMain features of Machine Learning plugin\n\nRun Jupyter notebook, (Zeppelin) JSON and Python files\n\nRun Python code directly\n\nConvert Jupyter Notebooks to Python and JSON\n\nConfigure IPython kernel properties\n\nSupport to execute Notebooks/Python on Agent\n\nSupport for Windows and Linux\n\nUpcoming features\n\nExtract graph/map/images from the code\n\nSave artifacts according to the step name\n\nGenerate reports for corresponding build\n\nFuture improvements\n\nUsage of JupyterRestClient\n\nSupport for multiple language kernels\n\nNote : There is no commitment on future improvements during GSoC period\n\nDocker agent\n\nThe following Dockerfile can be used to build the Docker container as an agent for the Machine Learning plugin. This docker agent can be used to run  notebooks or python scripts.\n\nDockerfile\n\nFROM jenkins/agent:latest\n\nMAINTAINER Loghi\n\nUSER root\n\nRUN apt update && apt install --no-install-recommends python3 -y \\\n    python3-pip \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.txt /requirements.txt\n\nRUN pip3 install --upgrade pip setuptools && \\\n    pip3 install --no-cache-dir -r /requirements.txt && \\\n    ln -sf /usr/bin/python3 /usr/bin/python && \\\n    ln -sf /usr/bin/pip3 /usr/bin/pip\n\nUSER jenkins\n\nPorted to Python 3\n\nAs discussed in the previous meeting, we concluded that the plugin should support Python 3 as Python 2.7+ has been deprecated since the beginning of 2020. Pull request for docker agent should be also ported to Python 3 support.\n\nJupyter Rest Client API\n\nThe Jupyter Notebook server API seemed to be promising that it can be also used to run notebooks and codes. There were 3 api implementations that were merged in the master. But we had to focus on what was proposed in the design document and had to finish all must-have issues/works. Jupyter REST client was left for future implementation. It is also a good start to contribute to the plugin from the community.\n\nFixed bugs for running in agent\n\nThere were a few bugs related to the file path of notebooks while building a job. The major problem was caused by the python dependencies needed to connect to a IPython kernel. All issues/bugs were fixed before the timeline given.\n\nR support as a future improvement\n\nThis is what we tried to give a glimpse of knowledge that this plugin can be extended for multi language support in the future. There was a conclusion that the kernel should be selected dynamically using extension of the script file(like eval_model.rb or train_model.r), instead of scripting the same code for each kernel.\n\nDocumentation and End to End testing\n\nA well explained documentation was published in the repository. A guided tutorial to run a notebook checked out from a git repo in an agent was included in the docs page. Mentors helped to test our plugin in both Linux and Windows.\n\nCode editor with rebuild feature\n\nCode editor was filtered as a nice to have feature in the design document. After grabbing the idea of Jenkinsfile replay editor, I could do the same for the code. At the same time, when we are getting the source code from git, it is not an elegant way of editing code in the original code. After the discussion, we had to leave the PR open that may have use cases in the future if needed.\n\nJenkins LTS update\n\nThe plugin has been updated to support Jenkins LTS 2.204.1 as 2.164.3 had some problems with installing pipeline supported API/plugin\n\nInstallation for experimental version\n\nEnable the experimental update center\n\nSearch for Machine Learning Plugin and check the box along it.\n\nClick on Install without restart\n\nThe plugin should now be installed on your system.\n\nResources\n\nCommunity Bonding blog post\n\nPhase 1 blog post\n\nGithub\n\nProject page\n\nDesign document","title":"Machine Learning Plugin project - Coding Phase 2 blog post","tags":["machinelearning","datascience","plugins","communitybonding","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg","srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/9b030/loghijiaha.jpg 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/f38b5/loghijiaha.jpg 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/63ad2/loghijiaha.jpg 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/bcd2b/loghijiaha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/ceea6/loghijiaha.webp 32w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/45b82/loghijiaha.webp 64w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/933cd/loghijiaha.webp 128w,\n/gatsby-jenkins-io/static/75c9c309d675728b2e2735d64a019887/6c13d/loghijiaha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":158}}},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"/blog/authors/loghijiaha","twitter":"loghi5"}]}},{"node":{"date":"2020-07-27T00:00:00.000Z","id":"eff5a9fc-561f-50a6-8a43-4e2faffe72ae","slug":"/blog/2020/07/27/repository-signing-keys-changing/","strippedHtml":"The Jenkins core release automation project has been delivering Jenkins weekly releases since Jenkins 2.232, April 16, 2020.\nThe Linux repositories that deliver the weekly release were updated with new GPG keys with the release of Jenkins 2.232.\n\nBeginning with Jenkins LTS release 2.235.3, stable repositories will be signed with the same GPG keys that sign the weekly repositories.\nAdministrators of Linux systems must install the new signing keys on their Linux servers before installing Jenkins 2.235.3.\n\nDebian/Ubuntu\n\nUpdate Debian compatible operating systems (Debian, Ubuntu, Linux Mint Debian Edition, etc.) with the command:\n\nDebian/Ubuntu\n\n# wget -qO - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n\nRed Hat/CentOS\n\nUpdate Red Hat compatible operating systems (Red Hat Enterprise Linux, CentOS, Fedora, Oracle Linux, Scientific Linux, etc.) with the command:\n\nRed Hat/CentOS\n\n# rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n\nFrequently Asked Questions\n\nWhat if I don’t update the repository signing key?\n\nUpdates will be blocked by the operating system package manager (apt, yum, dnf) on operating systems that have not installed the new repository signing key.\nSample messages from the operating system may look like:\n\nDebian/Ubuntu\n\nReading package lists... Done\nW: GPG error: https://pkg.jenkins.io/debian-stable binary/ Release:\n    The following signatures couldn't be verified because the public key is not available:\n        NO_PUBKEY FCEF32E745F2C3D5\nE: The repository 'https://pkg.jenkins.io/debian-stable binary/ Release' is not signed.\nN: Updating from such a repository can't be done securely, and is therefore disabled by default.\nN: See apt-secure(8) manpage for repository creation and user configuration details.\n\nRed Hat/CentOS\n\nDownloading packages:\nwarning: /var/cache/yum/x86_64/7/jenkins/packages/jenkins-2.235.3-1.1.noarch.rpm:\n    Header V4 RSA/SHA512 Signature, key ID 45f2c3d5: NOKEY\nPublic key for jenkins-2.235.3-1.1.noarch.rpm is not installed\n\nWhy is the repository signing key being updated?\n\nThe original repository GPG signing key is owned by Kohsuke Kawaguchi.\nRather than require that Kohsuke disclose his personal GPG signing key, the core release automation project has used a new repository signing key.\nThe updated GPG repository signing key is used in the weekly repositories and the stable repositories.\n\nWhich operating systems are affected?\n\nOperating systems that use Debian package management (apt) and operating systems that use Red Hat package management (yum and dnf) need the new repository signing key.\n\nOther operating systems like Windows, macOS, FreeBSD, OpenBSD, Solaris, and OpenIndiana are not affected.\n\nAre there other signing changes?\n\nYes, there are other signing changes, though they do not need specific action from users.\n\nThe jenkins.war file is signed with a new code signing certificate.\nThe new code signing certificate has been used on weekly releases since April 2020.","title":"Jenkins 2.235.3: New Linux Repository Signing Keys","tags":["announcement","linux","platform"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-07-24T00:00:00.000Z","id":"4bb5ba32-d613-5603-8d83-2dabce9481fa","slug":"/blog/2020/07/24/external-fingerprint-storage-phase-2/","strippedHtml":"As another great phase for the\nExternal Fingerprint Storage Project\ncomes to an end, we summarise the work done during this phase in this blog post.\nIt was an exciting and fruitful journey, just like the previous phase, and offered some great learning experience.\n\nTo understand what the project is about and the past progress, please refer to the\nphase 1 blog post.\n\nNew Stories Completed\n\nWe targeted four stories in this phase, namely fingerprint cleanup, fingerprint migration, refactoring the current\nimplementation to use descriptors, and improved testing of the Redis Fingerprint Storage Plugin.\nWe explain these stories in detail below.\n\nFingerprint Cleanup\n\nhttps://github.com/jenkinsci/jenkins/pull/4817\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/23\n\nThis story involved extending the FingerprintStorage API to allow external storage plugins to perform and configure\ntheir own fingerprint cleanup strategies.\nWe added the following functionalities to Jenkins core API:\n\nFingerprintStorage#iterateAndCleanupFingerprints(TaskListener taskListener)\n\nThis allows external fingerprint storage implementations to implement their own custom fingerprint cleanup.\nThe method is called periodically by Jenkins core.\n\nFingerprintStorage#cleanFingerprint(Fingerprint fingerprint, TaskListener taskListener)\n\nThis is a reference implementation which can be called by external storage plugins to clean up a fingerprint.\nIt is upto the plugin implementation to decide whether to use this method.\nThey may choose to write a custom implementation.\n\nWe consume these new API functionalities in the\nRedis Fingerprint Storage plugin.\nThe plugin uses cursors to traverse the fingerprints, updating the build information, and deleting the build-less\nfingerprints.\n\nEarlier, fingerprint cleanup was always run periodically and there was no way to turn it off.\nWe also added an option to allow the user to turn off fingerprint cleanup.\n\nThis was done because it may be the case that keeping redundant fingerprints in memory might be cheaper than the\ncleanup operation (especially in the case of external storages, which are cheaper these days).\n\nFingerprint Migration\n\nhttps://github.com/jenkinsci/jenkins/pull/4825\n\nEarlier, there was no support for fingerprints stored in the local storage.\nIn this phase, we introduce migration support for users.\nThe old fingerprints are now migrated to the new configured external storage whenever they are used (lazy migration).\nThis allows gradual migration of old fingerprints from local disk storage to the new external storage.\n\nRefactor FingerprintStorage to use descriptors\n\nhttps://github.com/jenkinsci/jenkins/pull/4834\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/36\n\nEarlier, whenever an external fingerprint storage plugin was installed, it was enabled by default.\nWe refactored the implementation to make use of Descriptor pattern so the fingerprint engine can now be selected\nas a dropdown from the Jenkins configuration page.\nThe dropdown is shown only when multiple fingerprint storage engines are configured on the system.\nRedis Fingerprint Storage Plugin was refactored\nto use this new implementation.\n\nStrengthened testing for the Redis Fingerprint Storage Plugin\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/33\n\nWe introduced new connection tests in the\nRedis Fingerprint Storage Plugin.\nThese tests allow testing of cases like slow connection, breakage of connection to Redis, etc.\nThese were implemented using the Toxiproxy module inside Testcontainers.\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/31\n\nWe introduced test for Configuration-as-code (JCasC) compatibility with the plugin.\nThe documentation for configuring the plugin using JCasC was also added.\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/39\n\nWe introduced a suite of authentication tests, to verify the proper working of the Redis authentication system.\nAuthentication uses the credentials plugin.\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/32\n\nhttps://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/36\n\nWe strengthened our web UI testing to ensure that the configuration page for the plugin works properly as planned.\n\nOther miscellaneous tasks\n\nPlease refer to the Jira Epic for this phase.\n\nReleases 🚀\n\nChanges in the Jenkins core (except migration) were released in Jenkins 2.248.\n\nWe drafted 1.0-rc-1\nrelease for the Redis Fingerprint Storage Plugin\nto deliver the changes.\nThis was an increment from the alpha release\nwe had drafted at the end of the previous phase.\nThe plugin is now available at https://plugins.jenkins.io/redis-fingerprint-storage/!\n\nTrying out the new features!\n\nThe latest release for the plugin can be downloaded from the update center, instructions for which can be\nfound in the README\nof the plugin.\nWe appreciate you trying out the plugin, and welcome any suggestions, feature requests, bug reports, etc.\n\nAcknowledgements\n\nThe Redis Fingerprint Storage plugin is built and maintained by the Google Summer of Code (GSoC) Team for\nExternal Fingerprint Storage for\nJenkins. Special thanks to Oleg Nenashev,\nAndrey Falko, Mike Cirioli,\nTim Jacomb, and the entire Jenkins community for all the contribution to this project.\n\nFuture Work\n\nSome of the topics we aim to tackle in the next phase include a new reference implementation (possibly backed\nby PostgreSQL), tracing, etc.\n\nReaching Out\n\nFeel free to reach out to us for any questions, feedback, etc. on the project’s Gitter Channel or the Jenkins\nDeveloper Mailing list.\nWe use Jenkins Jira to track issues.\nFeel free to file issues under redis-fingerprint-storage-plugin component.\n\nOther Links\n\nRedis Fingerprint Storage Plugin\n\nIssue Tracker for Phase 2\n\njep:226[]\n\nGitter Channel\n\nProject Page\n\nPhase 1 Blog Post","title":"External Fingerprint Storage Phase-2 Updates","tags":["plugins","fingerprint","cloud-native","external-storage","developer","redis","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg","srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/77b35/stellargo.jpg 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/d4a57/stellargo.jpg 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/19e71/stellargo.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/ef6ff/stellargo.webp 32w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/8257c/stellargo.webp 64w,\n/gatsby-jenkins-io/static/57deb704d1eb39e35b9de4a8c22ea56e/6766a/stellargo.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://medium.com/@sumitsarinofficial","github":"stellargo","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 student. Sumit is an engineering student (senior) at Netaji Subhas Institute of Technology, University of Delhi. He started his journey of contributing to Jenkins in December 2019. His tiny contribution revolved around the Jenkins Fingerprint engine. He is currently working on building <a href=\"https://www.jenkins.io/projects/gsoc/2020/projects/external-fingerprint-storage\">External Fingerprint Storage for Jenkins</a>.</p>\n</div>","id":"stellargo","irc":null,"linkedin":"sumit-sarin","name":"Sumit Sarin","slug":"/blog/authors/stellargo","twitter":null}]}},{"node":{"date":"2020-07-23T00:00:00.000Z","id":"fd686e1c-3df7-5236-8624-f2cd50ed3461","slug":"/blog/2020/07/23/windows-support-updates/","strippedHtml":"In this article, I would like to announce the new Windows support policy\nwhich was introduced in the Jenkins project in June 2020.\nThis policy sets an expectation about how we handle issues and patches related to Windows support for the Jenkins server and agents, and how we organize testing of Windows support in the project.\nWe will also talk about .NET Framework 2.0 support removal in Jenkins 2.248,\nand about new Windows service management features and fixes Jenkins users get with this release.\n\nFigure 1. Jenkins on Windows\n\nWhy?\n\nIn theory, Jenkins can run everywhere where you can run Java 8 or Java 11, but, in practice, there are some limitations.\nThe Jenkins core and some plugins contain native code, and hence they rely on operating systems and platforms.\nWe use Java Native Access and Java Native Runtime libraries which provide wide platform support for low-level operations,\nbut there are platform-specific cases not covered by such generic libraries.\nIn the case of Windows platforms we use Windows Service Wrapper (WinSW) and\nWindows Process Management Library (WinP).\nThese libraries depend on particular Windows API versions and, in the case of Windows services, on .NET Framework.\n\nHistorically Jenkins had no documented support policy for Windows,\nand we were accepting patches for all versions which existed since the Hudson inception in 2004.\nIt became a serious obstacle for Windows component maintainers who had to be very conservative about incoming patches so that we could avoid breaking instances running on old platforms.\nLack of testing for older platforms did not help either.\nAnd it is not just about maintenance overhead.\nUsers were impacted as well, because it blocked us from adopting some new Windows features and making Jenkins more stable/maintainable on modern platforms.\n\nNew policy\n\nTo set proper expectations about Windows support,\nin the new policy we defined four support levels.\nSee the Windows support policy page for the actual information about the support levels and the supported platforms.\nThis blogpost captures the support state as of Jul 23, 2020:\n\nLevel 1 - Full Support\n\nWe run automated testing for these platforms, and we intend to timely fix the reported issues.\nThis support level includes 64-bit (amd-64) Windows Server versions with the latest GA update pack,\nand versions used in the official Jenkins server and agent Docker images.\n\nLevel 2 - Supported\n\nWe do not actively test these platforms, but we intend to keep compatibility.\nWe are happy to accept patches.\nThis support level includes 64-bit (amd64) Windows Server and Windows 10 versions generally supported by Microsoft.\n\nLevel 3 - Patches considered\n\nThe platforms are generally expected to work, but they may have limitations and extra requirements.\nWe do not test compatibility, and we may drop support if needed.\nWe will consider patches if they do not put Level 1/2 platforms at risk and if they do not create maintenance overhead.\nThis support level includes non-amd64 platforms like x86 (32-bit) and AArch64 (Arm).\nIt also applies to non-mainstream release lines like Windows Embedded, preview releases, and versions no longer supported by Microsoft.\n\nLevel 4 - Unsupported\n\nThese versions are known to be incompatible or to have severe limitations.\nWe do not support the listed platforms, and we will not accept patches.\nAt the moment this level applies to platforms released before 2008.\n\nWhen the policy was introduced, there were questions raised about platforms listed in the Level 3 support category.\nFirst of all, these platforms are still supported.\nUsers are welcome to run Jenkins on these platforms.\nWe recognize the importance of the platforms listed there, and we intend to keep compatibility with them.\nAt the same time, particular functionality may break there due to the lack of testing when we update Jenkins or upstream dependencies.\nIt may take a while until a fix is submitted by a user or contributor,\nbecause we do not maintain development environments for these platforms.\nBy setting a Level 3 support level, we want to set an explicit expectation about those limitations.\n\nIf you are interested in expanding the official Windows support policy and adding more platforms there,\nwe invite you to participate in quality assurance of Jenkins.\nYou may contribute by expanding test automation for Jenkins,\ncontributing test environments for your platforms,\nor participating in the LTS release candidate testing and reporting results.\nPlease contact us via Platform SIG channels if you are interested.\n\nWindows Service Management changes in Jenkins 2.248\n\nFigure 2. WinSW Logo\n\nAlthough the policy was introduced more than 1 month ago,\nJenkins 2.248 is the first release where the new policy is applied.\nStarting from this release, we won’t support .NET Framework 2.0 for launching the Jenkins server or agents as Windows services.\n .NET Framework 4.0 or above is now required for using the default service management features.\n\nThis release also upgrades Windows Service Wrapper (WinSW) from 2.3.0 to 2.9.0 and replaces the bundled binary from .NET Framework 2.0 to 4.0.\nThere are many improvements and fixes in these versions,\nbig thanks to NextTurn and all other contributors.\nYou can find the full WinSW changelog here,\njust a few highlights important to Jenkins users:\n\nPrompt for permission elevation when administrative access is required.\nNow Jenkins users do not need to run the agent process as Administrator to install the agent as a service from GUI.\n\nEnable TLS 1.1/1.2 in .NET Framework 4.0 packages on Windows 7 and Windows Server 2008 R2.\n\nEnable strong cryptography when running .NET Framework 4.0 binaries on .NET 4.6.\n\nSupport security descriptor string in the Windows service definition.\n\nSupport 'If-Modified-Since' and proxy settings for automatic downloads.\n\nFix Runaway Process Killer extension so that it does not kill wrong processes with the same PID on startup.\n\nFix the default domain name in the serviceaccount parameter (jira:JENKINS-12660[])\n\nFix archiving of old logs in the roll-by-size-time mode.\n\nAs you may see, there are many improvements available with this version,\nand we hope that it will make Windows service installation even more reliable.\nSome of the changes in WinSW also replaced old workarounds in the Jenkins core,\nmaking the code more maintainable.\n\nUse-cases affected by .NET Framework 2.0 support removal\n\nIf you use .NET Framework 2.0 to run the Jenkins Windows services,\nthe following use-cases are likely to be affected:\n\nInstalling the Jenkins server as a Windows service from Web UI.\nThe official MSI Installer supports .NET Framework 2.0 for the moment, but it will be changed in future versions.\n\nInstalling agents as Windows services from GUI.\nThis feature is provided by in Windows Agent Installer Module from the Jenkins core.\n\nInstalling agents over Windows Management Instrumentation (WMI) via the WMI Windows Agents plugin\n\nAuto-updating of Windows service wrappers on agents installed from GUI.\n\nUpgrade guidelines\n\nIf all of your Jenkins server and agent instances already use .NET Framework 4.0 or above,\nthere are no special upgrade steps required.\nPlease enjoy the new features!\n\nIf you run the Jenkins server as a Windows Service with .NET Framework 2.0,\nthis instance will require an upgrade of .NET Framework to version 4.0 or above.\nWe recommend running with .NET Framework 4.6.1 or above,\nbecause this .NET version provides many platform features by default\n(e.g. TLS 1.2 encryption and strong cryptography),\nand Windows Service Wrapper does not have to apply custom workarounds.\n\nIf you want to continue running some of your agents with .NET Framework 2.0,\nthe following extra upgrade steps are required:\n\nDisable auto-upgrade of Windows Service Wrapper on agents by setting the\n-Dorg.jenkinsci.modules.windows_slave_installer.disableAutoUpdate=true flag on the Jenkins server side.\n\nUpgrade agents with .NET Framework 4.0+ by downloading the recent Windows Service Wrapper 2.x\nversion from WinSW GitHub Releases\nand manually replacing the wrapper \".exe\" files in the agent workspaces.\n\nWhat’s next?\n\nWe plan to continue expanding the Windows support in Jenkins,\nincluding providing official Docker images for newer Windows versions.\nFor example, there is already a pull request which will introduce official agent images for Windows Server Core LTSC 2019 and\nfor Windows Server Core and Nano Server 1909.\nWe are also interested to keep expanding test coverage for Windows platforms.\nAny contributions and feedback will be appreciated!\n\nWe also keep working on improving Windows Services.\nBuddhika Chathuranga, a Google Summer of Code 2020 student, is working on support for YAML Configurations in Windows Service Wrapper,\nand on better verification of XML and YAML Configurations.\nSee the details on the project page and in the\nCoding Phase 1 Report.\nIn addition to that, there is ongoing work on a new Windows Service Wrapper 3.0 release which will redesign CLI and introduce a lot more improvements.\nIf you are interested in contributing to Windows Service Wrapper,\nsee the guidelines here.\nWe will also appreciate your feedback on the WinSW Gitter channel.","title":"Jenkins 2.248: Windows Support Updates","tags":["announcement","windows","platform","winsw"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-07-15T00:00:00.000Z","id":"ea6acacc-eca1-580a-a013-eb8a8cacca6c","slug":"/blog/2020/07/15/xss-severity/","strippedHtml":"Eagle-eyed readers of today’s security advisory may already have noticed that we consider the cross-site scripting (XSS) vulnerabilities to be 'High' severity.\nThis is a change from previous security advisories, in which similar vulnerabilities got a 'Medium' score.\n\nWe follow the guidelines of CVSS version 3.0 for the severity we assign to these issues.\nTheir examples for XSS vulnerabilities, as well as XSS vulnerabilities in other software, consider the most severe, immediate impact to be a modification of the HTML output, possibly also the extraction of the session cookie (something Jenkins prevents by declaring it to be HttpOnly).\n\nUnfortunately, this does not adequately model the impact that a successful XSS exploitation in Jenkins can have:\nJenkins administrators can perform far more sensitive actions than e.g. the admins of most content management systems could, as it is designed to allow users to execute code to build, test, and deploy their software.\nSo this kind of vulnerability, that allows attackers to do anything their victims have permission to do, in Jenkins can mean execution of arbitrary code, perhaps via the script console, if the victim has the Overall/Administer permission.\nNone of this requires chaining different actions in an attack, a well-chosen XSS payload will accomplish this.\n\nTherefore, starting today, we score XSS vulnerabilities by the highest immediate impact a successful attack can have, which is a complete system compromise if admins can be attacked.\nFor stored XSS requiring some permissions, like the ability to configure jobs, a typical score would be 8.0.\nReflected XSS, which don’t require any permissions to exploit, will usually score 8.8.","title":"Severity of cross-site scripting vulnerabilities","tags":["security","announcement"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":64,"numPages":100,"currentPage":9}},
    "staticQueryHashes": ["3649515864"]}