{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/10",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-06-30T00:00:00.000Z","id":"9a5f343b-e83f-526e-aab4-05c8c88ea996","slug":"/blog/2020/06/30/machine-learning-plugin-coding-phase1/","strippedHtml":"Welcome back !\n\nThis blog post is briefing my coding phase 1 in Jenkins Machine Learning Plugin for this GSoC 2020.\n\nAfter a fresh introduction of community bonding, On June 1st, coding of GSoC had started officially with phase 1. At this point, every GSoC student should be expected to have a rigid plan with their entire project. With the guidance of mentors I was able to complete a design document and timeline which can be slightly adjustable during the coding. The coding phase was more about coding and discussion.\n\nQuick review\n\nPull Requests\n21\n\nJira Issues\n11\n\nMajor Tasks\n3\n\nCompleted\n3\n\nIn progress\n0\n\nWeek 1\n\nI have to ensure that I have a solid architecture for implementing the core of this plugin such that perhaps I or future community will be able to develop R and Julia kernels for this plugin. Factory method design patterns are suitable when users need different types of products ( Python, R and Julia) without knowing much about the internal infrastructure ( Manager of these interpreters ).\n\nAll the base classes were implemented this week.\n\nDesign the Kernel connectors\n\nInitiate the interpreter\n\nClose the connection\n\nAdd simple tests\n\nUpdate pom.xml\n\nMore than these changes, repo was updated with pull request template and licence header. Readme was extended a little at the end of the week.\n\nIssues and Challenges\n\nGit rebase and squash\n\nTests invokes ipython client in the server failed during the CI build\n\nWeek 2\n\nWith the help of a design document, I had a plan to do the configurations globally and using the Abstract Folder property I could save the configuration and retrieve for the job configuartion. I used to reference some other well developed plugin for the structure of code. That helped me a lot while I was coding. Our first official contributor has popped out his pull request.\n\nForm validations and helper html will be a great help in the user point of view as well as developers. A minor bug was fixed with the guidance of mentors by writing tests with ‘Jenkins WebClient`. Until the end of the week, builder class of the plugin has been implemented with lots of research and discussion. Finally,  Test connection was added to the global configuration page to start the connection and test it. A single issue that blocked me using py4j authentication about zeppelin-python was reported in Jira.\n\nServer Configuration\n\nIssues and challenges\n\nBackend depends on Apache zeppelin-python API to connect IPython\n\nFind relevant extension points to extend the plugin\n\nWeek 3\n\nEarlier in this week, we were trying to merge our IPython builder PR without any memory leaks or bugs that will cause the system to be devastating while running this plugin. Later, this whole week I was implementing a file parser that could copy the necessary files and had the ability to accomplish the file conversion.\n\nSupported file types\n\nPython (.py)\n\nJSON (Zeppelin notebooks format)\n\nIPython builder was able to run Jupyter Notebooks and Zeppelin formatted JSON files at the end of the 3rd week. Minor issues were fixed in the code. We used ANSI color plugin to fix the abnormal view of error messages produced by the ipython kernel.\n\nCopying and converting Jupyter Notebook\n\nIssues and Challenges\n\nPython error messages could not be displayed in rich format\nIf a job is running at user level, but if the python code access file/file path which is not authorized to the user, it returns a permission denied message.\nWhile running on agent, notebook has to be written/copied to agent workspace\nArtifacts should be maintained/reachable from controller after build.\n\nWeek 4\n\nAs all the major tasks has done, the demo preparation and plan for a experimental release was carried during the last week. There were lots of research on how to connect to a existing kernel in remote. Demo and presentation were prepared along the week.\n\nIssues and Challenges\n\nReleasing the first version was bit late\n\nKnowledge transfer\n\nHow to debug the code through IntelliJ\n\nEdit configuration → Add new Configuration → Maven\n\nCommand line → type hpi:run\n\nClick the debug icon on the toolbar or go to Run menu then Debug\n\nHow to setup to test the plugin\n\nSetup JDK 8 and Maven 3.5.*\n\nCreate a directory $ mkdir machine-learning-plugin\n\nCreate a virtual environment $ virtualenv venv\n\nActivate your virtual environment $ source venv/bin/activate\n\nRun $ which python to ensure your python path\n\n$ git clone https://github.com/jenkinsci/machine-learning-plugin.git\n\nRun $ mvn clean install from the machine-learning-plugin directory\n\nRun $ mvn hpi:run to start Jenkins with the plugin\n\nSet up the builder with localhost and other parameters\n\nCreate a job\n\nWrite python code like print(“plugin works”)\n\nBuild the job\n\nIssues and bugs\n\nJENKINS-62528 Issues on Jenkins build in the plugin repository\n\nJENKINS-62621 Global configuration for IPython servers\n\nJENKINS-62649 Implementation of IPython Builder\n\nJENKINS-62711 File parser to copy source files to workspace\n\nJENKINS-62733 Python errors are not displayed properly in console log\n\nJENKINS-62735 Send/Receive necessary files from controller/agent to agent/controller\n\nJENKINS-62593 Improve the documentation\n\nJENKINS-62742 Increase Test coverage\n\nResources and Links\n\nGithub\n\nProject page\n\nDesign document","title":"Machine Learning Plugin project - coding phase 1 blog post","tags":["machinelearning","datascience","plugins","communitybonding","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"blog/author/loghijiaha","twitter":"loghi5"}]}},{"node":{"date":"2020-06-27T00:00:00.000Z","id":"a288c37b-abcd-5bdc-8b5b-012344f2934c","slug":"/blog/2020/06/27/external-fingerprint-storage/","strippedHtml":"Externalizing fingerprint storage for Jenkins is a  Google Summer of Code 2020 project.\nWe are working on building a pluggable storage engine for fingerprints (see jep:226[]).\n\nFile fingerprinting is a way to track which version of a file is being used by a job/build, making dependency tracking easy. The fingerprint engine of Jenkins can track usages of artifacts, credentials, files, etc. within the system. Currently, it does this by maintaining a local XML-based database which leads to dependence on the physical disk of the Jenkins controller.\n\nAllowing fingerprint storage to be moved to external storages decreases the dependence of Jenkins instances on the physical disk space and also allows for tracking the flow of fingerprints across instances of Jenkins connected to the same external storage.\n\nAdvantages of using external storage drivers:\n\nRemove dependence on Jenkins controller disk storage\n\nCan configure pay-as-you-use cloud storages\n\nEasy Backup Management\n\nBetter Reliability and Availability\n\nFingerprints can be tracked across Jenkins instances\n\nAlong with this API, we are also working on a reference implementation in the form of a plugin, powered by Redis.\n\nAs phase 1 of this project comes to an end, this blog post serves as a summary of the progress we made to the entire Jenkins community.\n\nCurrent State\n\nThe new API introduced in Jenkins core is under review. Once merged, it will offer developers to extend it to build external fingerprint storage plugins.\n\nThe Redis Fingerprint Storage Plugin is alpha release ready. We would immensely appreciate any feedback.\n\nExternal Fingerprint Storage Demo\n\nIntroducing the new API for plugin developers\n\nWith PR-4731, we introduce a new fingerprint storage API, allowing configuring custom storage engines.\nWe exposed the following methods in the new FingerprintStorage class:\n\nvoid save()\n\nSaves the given Fingerprint in the storage.\n\nFingerprint load(String id)\n\nReturns the Fingerprint with the given unique ID. The unique ID for a fingerprint is defined by Fingerprint#getHashString().\n\nvoid delete(String id)\n\nDeletes the Fingerprint with the given unique ID.\n\nboolean isReady()\n\nReturns true if there is some data in the fingerprint database corresponding to the particular Jenkins instance.\n\nIntroducing Redis Fingerprint Storage Plugin\n\nRedis Fingerprint Storage Plugin uses the new External Fingerprint Storage API to store the fingerprints in a Redis instance.\n\nInstallation:\n\nThe alpha release (version 0.1-alpha-1) for the plugin was drafted, and can be installed using the experimental update center.\n\nFollow along the following steps after running Jenkins to download and install the plugin:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nGo to Advanced tab\n\nConfigure the Update Site URL as: https://updates.jenkins.io/experimental/update-center.json\n\nClick on Submit, and then press the Check Now button.\n\nGo to Available tab.\n\nSearch for Redis Fingerprint Storage Plugin and check the box along it.\n\nClick on Install without restart\n\nThe plugin should now be installed on your system.\n\nUsage\n\nOnce the plugin has been installed, you can configure the Redis server details by following the steps below:\n\nSelect Manage Jenkins\n\nSelect Configure System\n\nScroll to the section Redis Fingerprint Storage Configuration and fill in the required details:\n\nHost - Enter hostname where Redis is running\n\nPort - Specify the port on which Redis is running\n\nSSL - Click if SSL is enabled\n\nDatabase - Redis supports integer indexed databases, which can be specified here.\n\nConnection Timeout - Set the connection timeout duration in milliseconds.\n\nSocked Timeout - Set the socket timeout duration in milliseconds.\n\nCredentials - Configure authentication using username and password to the Redis instance.\n\nEnabled - Check this to enable the plugin (Note: This is likely to be removed very soon, and will be enabled by default.)\n\nUse the Test Redis Connection to verify that the details are correct and Jenkins is able to connect to the Redis instance.\n\nPress the Save button.\n\nNow, all the fingerprints produced by this Jenkins instance should be saved in the configured Redis server!\n\nFuture Work\n\nSome of the topics we aim to tackle in the next phases include extending the API, fingerprint cleanup, migrations (internal→external, external→internal, external→external), tracing, ORM, implementing the saveable listener, etc.\n\nAcknowledgements\n\nThe Redis Fingerprint Storage plugin is built and maintained by the Google Summer of Code (GSoC) Team for\nExternal Fingerprint Storage for Jenkins.\n\nSpecial thanks to Oleg Nenashev, Andrey Falko, Mike Cirioli, Jesse Glick, and the entire Jenkins community for all the contribution to this project.\n\nReaching Out\n\nFeel free to reach out to us for any questions, feedback, etc. on the project’s Gitter Channel or the Jenkins Developer Mailing list\n\nWe use Jenkins Jira to track issues.\nFeel free to file issues under redis-fingerprint-storage-plugin component.\n\nOther Links\n\nPhase 1 demo\n\nPresentation slides\n\nRedis Fingerprint Storage Plugin\n\nIssue Tracker for Phase 1\n\njep:226[]\n\nGitter Channel\n\nProject Page","title":"External Fingerprint Storage Phase-1 Updates","tags":["plugins","fingerprint","cloud-native","external-storage","developer","redis","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://medium.com/@sumitsarinofficial","github":"stellargo","html":"<div class=\"paragraph\">\n<p>Jenkins Google Summer of Code 2020 student. Sumit is an engineering student (senior) at Netaji Subhas Institute of Technology, University of Delhi. He started his journey of contributing to Jenkins in December 2019. His tiny contribution revolved around the Jenkins Fingerprint engine. He is currently working on building <a href=\"https://www.jenkins.io/projects/gsoc/2020/projects/external-fingerprint-storage\">External Fingerprint Storage for Jenkins</a>.</p>\n</div>","id":"stellargo","irc":null,"linkedin":"sumit-sarin","name":"Sumit Sarin","slug":"blog/author/stellargo","twitter":null}]}},{"node":{"date":"2020-06-26T00:00:00.000Z","id":"1590b5a3-15e6-5bc9-a980-1e26f0ff3deb","slug":"/blog/2020/06/26/ui-ux-hackfest-ui-track/","strippedHtml":"In this article, I would like to share some highlights from the User Interface track of the\nJenkins UI/UX Hackfest we held on May 25..29.\nThis blog post has been slightly delayed by the infrastructure issues we had in the project,\nbut, as for improving the Jenkins UI, it is better late than never.\nKey highlights from the event:\n\nWe delivered a preview of Jenkins read-only configuration.\nDuring the hackfest we discovered and fixed many compatibility issues.\n\nWe created a new Dark Theme for Jenkins.\nWe also improved theming support in the core, and fixed compatibility in many plugins.\n\nWe contributed to the Jenkins UI accessibility, including UX testing and fixing the reported issues.\njira:JENKINS-62437[Configuration UI: Tables to divs migration] testing was the dominant story there.\n\nWe worked on a New Script Security approvals management UI\n\nWe had 54 contributors at the hackfest.\n22 of them have contributed to the user interface track as committers, testers and reviewers:\nTim Jacomb,\nUllrich Hafner,\nRaihaan Shouhell,\nSumit Sarin,\nDaniel Beck,\nRomén Rodríguez-Gil,\nwadeck Follonier,\nRunxia Ye,\nFélix Queiruga,\nAytunc Beken,\nPeter Jonsson,\nAntonio Muniz,\nKseniia Nenasheva,\nSladyn Nuner,\nAbhyudaya Sharma,\nOleg Nenashev,\nNimish Bongale,\nEsther Álvarez Feijoo,\nDenys Digtiar,\nSlavo,\nLiam Newman, and\nGavin Mogan.\nThanks to all contributors!\n\nSee the blog post below to know more about these and other user interface improvements.\n\nRead-only Jenkins Configuration\n\nQuick access:\ndemo,\nfeature preview announcement,\npresentation materials\n\nA read-only view of Jenkins configurations, jobs and agents is important to Jenkins Configuration-as-Code users.\nIt would allow them to access configuration and diagnostics information about their Jenkins instances while having no opportunity to occasionally change it.\nThis story is a part of the Jenkins roadmap,\nand it was featured as an area for contribution during the UI/UX hackfest.\n\nOn May 25th we have released a preview for Read-only Jenkins Configuration.\nRead the announcement by Tim Jacomb in this blogpost.\nDuring the hackfest we kept testing the change and fixing compatibility in the Jenkins plugins,\nincluding the Cloud Stats Plugin, Role Strategy Plugin, Simple Disk Usage Plugin and others.\n\nWe would appreciate feedback and testing from the Jenkins users!\nSee the blogpost for the guidelines.\n\nDark Theme\n\nQuick access:\ndemo,\nproject repository\n\nDark user interface themes are very popular among developers: in IDE, communication tools, etc.\nAnd there is an interest to have one for Jenkins.\nThere were a few of implementations before the hackfest, most notably camalot/jenkins-dark-stylish and a dark version of the Neo2 Theme.\nThese themes were difficult to maintain, and finally they were either removed or abandoned.\nWhat if Jenkins had an official theme?\n\nDuring the event a group of contributors focused on creating a new Dark Theme for Jenkins.\nThis effort included:\n\nPatches to the Jenkins core which simplified development and maintenance of UI themes.\nSupport for CSS variables was added, as well as PostCSS processing which helps to simplify browser compatibility.\n\nDark Theme itself.\n\nUI Testing and compatibility fixes in the core and multiple Jenkins plugins.\n\nDark theme demo with support for the development mode.\n\nYou can try out this theme starting from Jenkins 2.239.\nIt is available as a plugin from the Jenkins Update Center.\nAn example screenshot of the main page:\n\nIf you discover any Dark theme compatibility issues,\nplease report them here.\n\nJenkins Configuration UI Accessibility\n\nQuick access:\ndemo,\nproject page\n\nJenkins Web UI accessibility was one of the suggested topics at the event.\nWe would like to make Jenkins usable by as many people as possible.\nIt includes multiple groups of users: people with disabilities, ones using mobile devices, or those with slow network connections.\nIn general, all Jenkins users would benefit from better navigation and layouts.\nSome of the accessibility improvements we implemented during the event:\n\nAdded aria-labels to username & password input fields\n\nIndicate the language of the page in the footer (not merged yet)\n\nRemove page generation timestamp from the footer\n\nAt the UI/UX hackfest the major focus was on migrating configuration pages from tables to divs\n(jira:JENKINS-62437[]).\nIt will make them more user-friendly on narrow and especially mobile screens.\nThe change will also help users to navigate complex forms with multiple levels of nesting.\nOur progress:\n\nUser Experience testing.\nThanks to the contributors, we discovered several compatibility issues in plugins.\n\nBug fixes in several plugins\n\nA new Dockerized demo which allows to evaluate the change with a set of pre-configured plugins.\n\nHere is an example of a job configuration page using the new layout:\n\nWe will keep working on this change in the coming weeks,\nand we invite Jenkins users and Contributors to help us with testing the change!\nTesting guidelines are available in the jira:JENKINS-62437[] ticket.\n\nNew Script Security approvals management UI\n\nQuick access:\ndemo,\npull request\n\nDuring the hackfest Wadeck Follonier redesigned the script approval interface in the Script Security Plugin.\nThe new UI allows viewing the list of approved scripts, shows the last access timestamp, and allows managing the approvals individually.\nBefore, it was not possible to do it from the Web interface.\nOnce the pull request is released,\nthe feature will become available to Jenkins users.\n\nOther UI improvements\n\nIn addition to the major improvements listed above,\nthere were also many smaller patches in the Jenkins core and various plugins.\nYou can find a full list of contributions to the user interface here,\nsome important improvements:\n\nImproved navigation in the Credentials plugin.\n\nSupport for wide screens in the Autograding plugin.\n\nUI Improvements in the Folder-based Authorization Strategy plugin.\n\nImproved Fingerprint listing in the Jenkins core\n\nContributing\n\nWe invite Jenkins users and contributors to join the effort and to improve the user interface together.\nThe Jenkins project gradually adopts modern frontend stacks (JavaScript, React, Gatsby, Vue.js, etc.) and design methodologies.\nFor example, see the presentation about beautifying the UI of Jenkins reporter plugins by Ullrich Hafner.\nIt is a great opportunity for frontend developers to join the project, share their experiences, experiment with new technologies, and improve the Jenkins user interface and user experience.\nJoin us!\n\nSee this page for more information about contributing to the Jenkins codebase.\nIf you want to know more, join us in the Jenkins User Experience SIG channels.\n\nReferences\n\nYou can find more information about the Hackfest here:\n\nJenkins UI/UX Hackfest Page\n\nUI/UX Hackfest Closing Demos\n\nAll presentations and demos\n\nFull list of contributions to the user interface","title":"UI/UX Hackfest: Jenkins User Interface track highlights","tags":["community","event","ui","outreach-programs","jenkins-is-the-way"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-06-18T00:00:00.000Z","id":"e3d886d7-5e78-54d1-8574-c544fa957395","slug":"/blog/2020/06/18/terminology-update/","strippedHtml":"In 2016, the Jenkins community decided to start removing offensive terminology within the project.\nThe \"slave\" term was deprecated in Jenkins 2.0 and replaced by the \"agent\" term.\nOther terminology was slated for review after the cleanup of the \"slave\" term which was considered as most problematic one.\nIn 2017, the project began tracking areas for correction.\nWork has been done on renaming the SSH build agent plugin as well as gradual removal of offensive naming in services and repositories.\nThis year, a group of core contributors continued addressing this critical work.\n\nThe Advocacy & Outreach SIG met to discuss and prioritize the continued work. The governance board has also met and there will be more information coming regarding removal of offensive terminology.\nLast week we took another step towards removing offensive terminology within the project by updating previous blog posts and removing offensive terminology in old blogs, cleaning up some references in Jenkins built-in documetation and localization, etc.\nThe meeting minutes are available here and a recording of the meeting here\nThere is more work to do. The core team is working to address terms such as \"Master\", \"whitelist\" and \"blacklist\" as well addressing git branching terminology.\n\nWe could use your help\nWe continue to do this much needed work and would like to remind everyone that the Jenkins project is governed by the Code of Conduct.\n\nSincerely,\nMarky Jackson","title":"On Jenkins Terminology Updates","tags":["community","opensource","governance","documentation"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"blog/author/markyjackson-taulia","twitter":"markyjackson5"}]}},{"node":{"date":"2020-06-17T00:00:00.000Z","id":"d04987cd-4df5-5758-b9a2-2f39da9d1862","slug":"/blog/2020/06/17/infra-and-aws-donation/","strippedHtml":"The Jenkins project relies heavily on its infrastructure.\nWe use websites like www.jenkins.io and plugins.jenkins.io, ticketing systems like issues.jenkins.io, CI/CD infrastructure like ci.jenkins.io, and many other services.\nJust to provide some context about the Jenkins infrastructure scale, here are some stats from April 2020:\n\nOver 600 000 people visited www.jenkins.io\n\nOver 250 000 Jenkins servers regularly checked the\nJenkins package server and the\nJenkins update server\n\nOver 43 000 continuous integration jobs ran on ci.jenkins.io\n\nOver 950 plugins ran their continuous integration pipelines on ci.jenkins.io\n\nCountry by country visitors to jenkins.io\n\nThe Jenkins project, as an open source project, is built and maintained by its awesome community.\nLike in any organization, there are specific people who make sure that those services are always up and running.\nEveryone is welcome to participate.\nInfrastructure is no exception, we are always looking for new contributors to the infrastructure!\n\nWhile we can’t share publicly everything like secrets and certificates,\nwe still try to be as transparent as possible so that everybody can understand and improve our infrastructure without having privileged access.\nWhat better way than using Git to manage infrastructure work?\n\nWho said GitOps?\n\nSince the creation of the Jenkins-infra organization on GitHub in March 2008, more than 650 people have contributed to over 80 git repositories.\nThose contributions make the Jenkins community what it is today.\nIf you can’t find something there, it probably means that some help is welcomed.\n\nMore recently, with help from Gavin Mogan, Tim Jacomb, and Alex Earl, big achievements have been possible on many fronts like automating Jenkins releases, refreshing plugins.jenkins.io, adding new agents to ci.jenkins.io, and maintaining our Kubernetes cluster.\nWe thank them for their help and for the infrastructure progress they have enabled.\n\nInfrastructure at Scale\n\nRunning infrastructure at the scale the Jenkins project does is expensive and sometimes quite challenging.\nWe are fortunate enough to be supported by many leading companies that provide us their expertise, their products, and their support.\n\nRecently, Amazon Web Services donated $60 000 to run Jenkins infrastructure on the AWS cloud.\nWe’re so grateful for their donation and for the flexibility it provides.\nWe’re running Linux agents with AMD64 and ARM64 architectures on AWS.\nWe’re using AWS cloud for our Windows agents.\nThe generous infrastructure donation from Amazon Web Services has increased our continuous integration capacity and broadened our platform coverage.\n\nOur Sponsors\n\nMajor sponsors of the Jenkins infrastructure include\nCloudBees,\nOregon State University Open Source Lab,\nContinuous Delivery Foundation,\nRed Hat,\nAmazon Web Services, and\nGitHub.\n\nAdditional sponsors of Jenkins infrastructure services and software include\nAtlassian,\nDatadog,\nFastly,\nIBM.\nJFrog,\nPagerduty,\nRackspace,\nSentry,\nServerion,\nSpinUp,\nTsinghua University, and\nXMission.\n\nEach of these organizations support the Jenkins project in their own way.\nWe thank them for their contributions, their support and for their willingness to help the Jenkins community.\n\nhttps://www.jenkins.io/projects/infrastructure/","title":"Jenkins Infrastructure: Stats, Updates, and AWS sponsorship","tags":["aws","community","infrastructure"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"olblak","html":"<div class=\"paragraph\">\n<p>Olivier is the Jenkins infrastructure officer and Senior Operations Engineer at CloudBees.\nAs a regular contributor to the Jenkins infrastructure projects, he works on a wide range of tasks from services reliability to applications maintenance.</p>\n</div>","id":"olblak","irc":"olblak","linkedin":null,"name":"Olivier Vernin","slug":"blog/author/olblak","twitter":"0lblak"}]}},{"node":{"date":"2020-06-08T00:00:00.000Z","id":"347b5134-2053-52fa-9696-e62715a7ff78","slug":"/blog/2020/06/08/hackfest-docs-results/","strippedHtml":"Documentation is not glamorous, but it is goodness.\n\n— Thomas Otter\n\nJenkins technical documentation is an important part of our project as it is key to using Jenkins well.\nGood documentation guides users and encourages good implementation choices.\nIt is a crucial part of the user experience.\n\nIn the recent Jenkins UI/UX hackfest, documentation was a specific track to improve the Jenkins user experience.\nWe received many improvements from experienced Jenkins contributors and newcomers alike.\nContributors from all around the world submitted pull requests for documentation on installing, managing, administering, and operating Jenkins.\n\nDocumentation migration from Wiki\n\nThe Jenkins Wiki pages have collected 15 years of experience and wisdom for Jenkins users.\nHowever, that experience and wisdom is intermixed with inaccurate, incomplete, and outdated information.\n\nThe Jenkins Wiki migration project identified the 50 most accessed pages on the Jenkins wiki and created GitHub issues to track the migration of those pages to www.jenkins.io.\nThis was our first large scale experiment using GitHub issues for documentation.\nThe results have been overwhelmingly positive.\nHackfest contributors added new sections to many documentation chapters, including:\n\nUsing Jenkins\n\nPipeline\n\nManaging Jenkins\n\nSystem Administration\n\nThe Hackfest closed 19 of the wiki migration issues.\nWork is in progress on an additional 25 wiki migration issues.\nWe’ve made great progress and look forward to even better results in the future.\nNew contributors used the \"good first issue\" label very effectively.\nWe started the Hackfest with most of the 25 \"good first issues\" unassigned and completed the Hackfest with 14 closed and 10 others in progress.\nWe’ll provide more \"good first issues\" as we use the Jenkins Wiki migration to welcome new documentation contributors.\n\nMigrating plugin documentation\n\nPlugin documentation is also in transition.\nSince November 2019, plugins have been moving their documentation into the GitHub repository that hosts the plugin source code.\nThis\"documentation as code\" approach allows plugin maintainers to include documentation improvements in the same pull requests that implement new capabilities.\nIt assures that documentation changes are reviewed by the same maintainers who review and approve new capabilities.\n\nHackfest participants submitted pull requests to migrate plugin documentation to GitHub.\n10 plugin pull requests are in progress from the Hackfest.\n5 plugin pull requests from the Hackfest have been already merged and are awaiting the release of the plugin.\n\nChuck Norris uses documentation as code\n\nIn the spirit of fun and adventure, Oleg Nenashev migrated the \"Chuck Norris plugin\" to GitHub documentation as code in a live Hackfest presentation May 26, 2020.\nLinks to the recording, the plugin migration guide, and the export tool are available from\"Migrating plugins to documentation-as-code\".\n\nDocumentation updates\n\nJenkins works with other technologies to solve automation challenges in many different environments.\nWe describe those environments in our\"Solution Pages\".\nAs part of the Hackfest, we’ve started a series of improvements to the solution pages.\n\nThe Docker solutions page now includes updated videos and a better page layout for easier reading and better navigation.\nOther solution pages will receive similar improvements in the future.\n\nSystem properties\n\nThe global configuration of Jenkins can be modified at startup by defining Java properties.\nSystem properties can change system defaults and can provide compatibility \"escape hatches\" when a new default configuration might be incompatible with existing installations.\n\nDaniel Beck has improved the navigation and user experience of the system properties page as part of the Hackfest.\nIt is now much easier to read and to reference, with embeddable links available with a mouse-over to the right of every property and labels that categorize and classify each property.\n\nPlugin site improvements\n\nDuring the Hackfest, Gavin Mogan has continued his efforts to improve the Jenkins Plugins Site so that users can easily access plugin changelogs and reported issues.\nOnce this pull request is merged, it will greatly improve the experience of those Jenkins users who want to update plugins and look for documentation about what has changed in them and what are the possible issues they might experience.\n\nExample of the incoming UI for the Jira plugin:\n\nWhat’s next?\n\nThere is still much to do in Jenkins documentation and we need your help to do it.\nThere are many ways to participate in the Jenkins project, including documentation.\nSee the contributing guidelines for detailed instructions.\nJoin the documentation chat for personalized help and encouragement.\n\nThe Jenkins project has been also accepted to Google Season of Docs this year.\nThis open-source mentorship program brings together open source and technical writers communities for the benefit of both.\nWe are looking for technical writers who are interested to contribute to the project in September-December 2020.\nIt is a great opportunity to study Documentation-as-code tools and to learn more about contributing to open-source projects.\nYou can find Jenkins project ideas and more information here.","title":"Jenkins User Experience Hackfest Documentation Results","tags":["ux","documentation","community","outreach-programs","jenkins-is-the-way"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"blog/author/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":null},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"blog/author/tracymiranda","twitter":"tracymiranda"}]}},{"node":{"date":"2020-06-03T00:00:00.000Z","id":"d34ea0a7-91c1-5a7d-b78e-94d7cfb9e85b","slug":"/blog/2020/06/03/machine-learning-plugin-community-bonding/","strippedHtml":"Hello everyone !\n\nThis is one of the Jenkins project in GSoC 2020. We are working this new Machine Learning Plugin for this GSoC 2020.\nThis is my story about the community bonding of GSoC 2020. I am happy to share my journey with you.\n\nIntroducing Myself and my Fantastic 4 Mentors\n\nI am Loghi Perinpanayagam from University of Moratuwa. I was selected for GSoC 2020 for Machine Learning Plugin in Jenkins. I am glad to introduce my mentors to this project. I was assigned with four mentors who are really enthusiastic to help me on kicking off this summer of code.\n\nStudent\n\nLoghi Perinpanayagam\n\nMentors\n\nBruno P. Kinoshita\n\nIoannis Moutsatsos\n\nMarky Jackson\n\nShivay Lamba\n\nHow was my preparation last year ?\n\nI learned about this open source program in my second year. But atleast I tried last year on a different organization’s project that was related to Data Visualization Recommendation for Data Science. But the problem was I did not contribute as much as this year and was too late in the application process. As usual Machine learning related projects have a lot of competition compared to other projects. I prepared on learning Data visualization in Machine Learning and existing Models for the recommendation system. Finally I wrote a proposal with the SeqToSeq model without much knowledge on neural networks at that time. And I did not communicate much through the dedicated slack channel.  That may be one of the reasons for the failure. But the main reason was my latency for GSoC 2019.\n\nHow did I hurdle GSoC 2020 ?\n\nSince the time I realized how open source is needed and helpful for the community, I have been passionate about contributing to open source projects. At the instance, I finished my internship in Bangalore, India in 2019, I immediately focused on participating in GSoC. This is my last year (2020) as a student of my BSc Computer Science life, I wanted to get selected this year as a student.\n\nThere was a guidance seminar organized by our department, I got to know that Jenkins had opened their project ideas. That was an extremely impressive beginning of my GSoC 2020 journey. I walked through all the draft and accepted projects in the Jenkins.io page. As I am already interested in Machine Learning and I am familiar with Java, I picked the most impressive idea for me that does not have an initial repo. That means I wanted to use my knowledge to think and research a lot with this project. But I had to contribute and want to know about the infrastructure of Jenkins codebase. Because that makes the selection panel easy to pick up the student for the project.  Then I repeatedly searched to contribute to Jenkins. I found issues that were easy for me to work from the git plugin and git client plugin. I started to contribute some test issues on git plugin and git client plugin. After I got a clear knowledge on how a plugin works in Jenkins, I started working on the POC with the hint provided in the project idea page. Actually, that was fun to code.\n\nMentors have helped many students during the application process. I was able to do a working POC that had a minimum capability to do the task of the project. Finally mentors opened for proposal submission. I hurried to prepare a draft proposal. After I got reviews from mentors, I started to improve the proposal. At the end of the proposal submission, I was able to deliver a good proposal for this project. As I was curious about this plugin, I dug into more on how to integrate Jupyter notebook with this plugin. I published an medium article as a result of my research during the acceptance waiting period.\n\nResults released\n\nThe result was going to be announced on 4th May, I believed in my project proposal and POC and I got selected for this GSoC 2020. Whoa ! That was a goosebumping moment in my entire life. The feeling was like Something I achieved. As a result of my hard work, I deserved that.\nFor example, I spent 7 days continuously making the POC work without any collision between maven artifacts.\n\nCommunity Bonding\n\nAfter the release of results, I was preparing myself for the community bonding. There are lots of interactions happening between me and mentors than before.I had to update my project page and my profile in Jenkins.io. We had our first meeting with lots of excitement and love on 10th of May. Mentors and I introduced ourselves even though we know each other. We discussed the high level view of GSoC and I asked some questions that I had in my mind. As my plugin was a new repository, most of the discussion was related to the repository and its name. I had  to find a name for the new plugin. We had regular conversations about the blogpost and presentations at the end.\n\nIn the second meeting, We discussed the process for hosting a new plugin in Jenkins, tracking issues with JIRA, blog posts and high level road map for the project. And I suggested some interesting plugin names but they were not matching to the goal of the project, mentors told me to try other names which perfectly describe the project. I was advised to read all the research guidelines and plugin naming conventions. We discussed how code reviews will be done and source code management through the git. After this meeting, our meeting has shifted to the official Jenkins Zoom account.\n\nOur third meeting was quite serious about our project planning. I had been preparing my design document for the project with the help of mentors before the meeting day. Hence I got lots of reviews and useful examples for my future work on phase 1. At this point, we decided with the plugin name Machine Learning Plugin which was accepted by all mentors and I created the repo and requested a Jira ticket for the plugin hosting request. We were planning to remind the Jira ticket within the next 3 days. Mentors want me to make sure I updated the Jenkins GSoC page before the community period ends. Lots of discussion carried about the design document that I had been preparing last week before the meeting. Some important points from the meeting notes follows :\n\nDefine features in the design document\n\nDiagrams for the operations\n\nHow plugin works in distributed environment\n\nCode editor library\n\nRequirements for the first Plugin release\n\nBlog post draft document\n\nToDo works for me for next week\n\nTherefore, I had to work hard after this meeting, this made me involved in the project more. I have to put my huge effort to make this opportunity golden. Our team has the willingness to complete this project and will definitely help the Data Science community with this plugin.\nKudos to my team for the amazing work so far!!!\n\nThis was my entire journey until now. Hope you enjoyed it and hope you learned the mistakes I made last year and corrected in this summer.\nThanks for reading, and Stay tuned I will be uploading blog posts for those of you interested.\n\nResources and Links\n\nProject page\n\nDesign document","title":"Machine Learning Plugin project - community bonding blog post","tags":["machinelearning","datascience","plugins","communitybonding","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"blog/author/loghijiaha","twitter":"loghi5"}]}},{"node":{"date":"2020-05-25T00:00:00.000Z","id":"bbaf3958-fe7d-5fd6-a06c-16651d385923","slug":"/blog/2020/05/25/read-only-jenkins-announcement/","strippedHtml":"I’m excited to announce that the 'read-only' Jenkins feature is now available for preview.\nThis feature allows restricting configuration UIs and APIs while providing access to essential Jenkins system configuration, diagnostics, and self-monitoring tools through Web UI.\nSuch mode is critical for instances managed as code, e.g. with Jenkins Configuration-as-Code plugin.\nIt is delivered as a part of the jep:224[Readonly system configuration] effort.\n\nYou will want to use at least Jenkins 2.238 to have all the features mentioned in this post.\n\nRead-only Jenkins currently allows users to have access to:\n\njob configuration\n\nsystem configuration\n\nplugin manager\n\nsystem logs\n\ncloud configuration\n\nagent configuration\n\nagent logs\n\nFor more planned integrations see the jira:JENKINS-12548[] epic.\n\nRead-only Jenkins is split into three permissions:\n\nJob/ExtendedRead - Read-only access to job configurations\n\nexisted since 2009 but the UI didn’t do anything to indicate to the users\nthat they couldn’t edit the job configuration page.\nThis has now been adapted to the new read-only engine.\n\nAgent/ExtendedRead - Read-only access to agent configurations\n\nexisted since 2013 but it was undocumented and only allowed access to API and no UI\n\nUI support added in Jenkins 2.238\n\nOverall/SystemRead - Read-only access to Jenkins system configuration.\nIt is very useful for Jenkins instances managed as code, e.g. with help of the Jenkins Configuration as Code Plugin.\n\nIntroduced in Jenkins 2.222 as a part of jep:224[Readonly system configuration]\n\nYou can selectively grant the permission(s) as you wish.\n\nWhy do I want this?\n\nGiven the rise of the configuration-as-code plugin a lot of Jenkins instances are fully managed as code,\nwhich means that no changes are allowed through the UI.\n\nThe problem with this is you don’t know when new plugin versions are available and in order to see what other configuration options are available to a plugin you currently need the 'Administer' permission.\n\nRead-only access to system administration information allows users who are not administrators to more easily debug build issues.\nFor example, given a 'Jenkins' error message in a build the user can check:\n\nwhich plugins are installed\n\nthe version of the plugin\n\nThis can allow the user to solve their issue themselves and makes it easier for the user to report an issue with a plugin directly to the maintainers.\n\nWhat can I expect\n\nAll built in UI controls have been adapted to clearly distinguish between\nan editable control and a control you don’t have permission to edit:\n\nEditable:\n\nNon editable:\n\nNote: there are other controls such as in the credentials and pipeline plugins that have\nnot been updated yet.\n\nAction buttons, (Such as 'Save' and 'Apply') have been hidden in most cases.\n\nWork will continue on read-only configuration.  Some plugins need support added and certain controls\ncould have some improvements done to render better.\n\nHow can I use it?\n\nThese permissions are currently available in beta and for now disabled by default.\nYou can enable them by installing the Extended read permission plugin v3.2 or above.\n\nThen you will need to add the following permissions to a user / group depending on your use case:\n\nOverall/SystemRead\n\nJob/ExtendedRead\n\nAgent/ExtendedRead\n\nNote: You will need to set the Overall/Read and Job/Read permissions as well.  You might\nwant to consider creating a role containing the required permissions.\n\nHere is an example using the Configuration as Code plugin and the Folder-based Authorization Strategy plugin :\n\njenkins:\n  authorizationStrategy:\n    folderBased:\n      globalRoles:\n        - name: \"admin\"\n          permissions:\n            - id: \"Overall/Administer\"\n          sids:\n            - \"admin\"\n        - name: \"global read\"\n          permissions:\n            - id: \"Agent/ExtendedRead\"\n            - id: \"Overall/SystemRead\"\n            - id: \"Overall/Read\"\n            - id: \"Job/Read\"\n            - id: \"Job/ExtendedRead\"\n          sids:\n            - \"reader\"\n\nI can’t see a configuration that I think should be allowed\n\nMost of Jenkins itself has been updated to support read-only Jenkins, but not very many plugins.\nPlease create an enhancement issue on the plugins issue tracker.\nIf the plugin uses Jira to track issues, then you can add it to the jira:JENKINS-12548[] epic.\n\nHow do I update my plugin to support it\n\nSee the Read only view section of the developer documentation.\n\nWhat’s next\n\nIn this release we introduce a foundation feature which is already supported in all key Jenkins core controls and in some plugins.\nThere are many plugins which contribute to global configurations and diagnostics which still need to be adapted to support the new mode.\nWe will keep working on this feature and its adoption so that the next LTS baseline in September provides a full-fledged user experience for Jenkins admins.\n\nSystem read permission is a featured project in the UI/UX Hackfest\nhappening May 25-29 2020. If you want to get involved please check it out!","title":"Read-only Jenkins Configuration","tags":["system-read","extended-read","configuration-as-code","announcement"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"blog/author/timja","twitter":"Tjaynz"}]}}]}},"pageContext":{"limit":8,"skip":72,"numPages":100,"currentPage":10}},
    "staticQueryHashes": ["3649515864"]}