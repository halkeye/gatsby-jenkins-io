{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/58",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2015-11-03T00:00:00.000Z","id":"4cc5a34e-5325-5e67-98c6-d2ebe230541b","slug":"/blog/2015/11/03/what-jvm-versions-are-running-jenkins/","strippedHtml":"Preceding some of last week’s Jenkins 2.0 discussions, there had been some threads on whether we should move Jenkins to require Java 8. The introduction of Java 8 last year brought performance improvements and highly desirable API changes, which make developing Java-based applications (arguably) much easier than before. The release was followed earlier this year by the end-of-life announcement for Java 7; the writing is on the wall: upgrade to Java 8.\n\nI wanted to answer the question \"does it even make sense to force an upgrade to Java 8?\" There are plenty of technical discussions that we can have in the community on whether or not this is the right approach, but my goal was to try and measure the current Jenkins install base for Java 8 preparedness.\n\nWhile we do not currently (to my knowledge) collect Java runtime versions in our anonymous usage statistics, we do have access logs from our mirror redirector which might provide some insight.\n\nWith some access logs data, I went through the millions of requests made to Jenkins infrastructure in 2015 and started filtering out the user agent which made those requests.\n\nNOTE: This data is totally not scientific and is only meant to provide a coarse insight into what versions of Java access Jenkins web infrastructure.\n\nWhen Jenkins hits the mirror network, it’s not overriding the default user agent from the Java runtime, so many of the user agents for the HTTP request are something like Java/1.7.0_75. This indicates that the request came from a Java Runtime version 1.7.0 (update 75).\n\nLooking at the major JVM versions making (non-unique) requests to Jenkins infrastructure we have:\n\n1.8.0 : 21,278,960\n\n1.7.0 : 27,340,214\n\n1.6.0 : 4,148,833\n\nThis breaks down across various updates as well, which is also particularly interesting to me because many of these Java versions have long since had security advisories posted against them. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/jvm-versions-with-updates.png\n\nAs I mentioned before, this is not a rigorous analysis of the access log data and is also not filtered by unique IP addresses. What I found most interesting though is that the Java 8 upgrade numbers are actually fairly strong, which I didn’t expect. I expect that piece of the pie will continue to grow. Hopefully so much so that we’re able to move over to Java 8 before the end of 2016!","title":"What JVM versions are running Jenkins?","tags":["general","just for fun"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-11-01T00:00:00.000Z","id":"5c931f6f-0e08-5295-b4bb-ee8fc4aaf3b6","slug":"/blog/2015/11/01/adopt-a-plugin/","strippedHtml":"With more than a thousand public plugins in the Jenkins community now, it should come as no surprise that some of them are no longer actively maintained. Plugin authors move on when they change jobs, or lose interest in the plugin, and that’s fine. Plugins are hosted on the Jenkins project infrastructure after all, and when a maintainer moves on, others can continue their work.\n\nThe major problem of course is that it’s often difficult to tell whether a plugin is still maintained (and there’s just not a lot going on), or whether its maintainer has lost interest. Most plugins don’t get released every few weeks, or even every few months, and still do their job just fine.\n\nTo connect plugins that aren’t actively maintained with potential maintainers, we recently implemented the \"Adopt-a-plugin\" initiative: We built a list of plugins that are up for \"adoption\", and display a prominent message on the plugins' wiki pages. Anyone interested in taking over as a plugin maintainer can then contact us, and we’ll set you up.\n\nAre you interested in becoming a plugin maintainer? Maybe one of your favorite plugins isn’t actively maintained right now. Check out the Adopt a Plugin page for more details on this program, and a list of plugins that would benefit from your help.","title":"Adopt a plugin!","tags":["development","meta","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2015-10-30T00:00:00.000Z","id":"4ad0c927-4f88-5a6a-a4fc-a4477db179f3","slug":"/blog/2015/10/30/jenkins-2-0-proposal-improved-out-of-the-box-user-experience/","strippedHtml":"This week we have featured a number of proposals for what we would like to see in \" Jenkins\n2.0\", the vision of which is to make Jenkins users more efficient, productive and happy. We started with some more internally facing changes and have slowly progressed from the \"inside-out\" to today’s topic: improving the out of the box user experience. That is to say, the experience that a brand-new Jenkins user has when getting started with the server.\n\nJust to recap, so far we’ve reviewed:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nPipeline as code front and center\n\nUser experience improvements (part one)\n\nThe subject of today’s proposal is captured in JENKINS-31157 , which, like yesterday’s proposal, contains a few issues linked from it with more details.\n\nAt a high level, the problem aiming to be solved is:\n\nWhen a new user installs Jenkins, they are greeted with the main, empty, dashboard which suggests that they \"create jobs.\" This makes no mention of plugins or the configuration options that are relevant to helping the user make Jenkins match their needs.\n\nIn past and current versions of Jenkins, if you know what you’re looking for it’s relatively easy to move around the interface. If you’ve never used Jenkins before, it can be very challenging to find your way around or even know what it is possible to do with Jenkins.\n\nThe proposed changes aim to address this initial confusion:\n\nInstead of changing the post-install defaults, which may not properly represent the user’s needs, the first-time user experience should help guide the user through configuration and plugin installation quickly so they can use Jenkins for their needs. Effectively it should be as easy as possible for a user to arrive at a good configuration for their usage.\n\nJenkins contributor Tom Fennelly, who has led this discussion on the mailing lists in the past, has posted a good prototype screencast of what some of this might entail:\n\nProviding Feedback\n\nWe’re asking you to read the issues linked from JENKINS-31157 and comment and vote on those issues accordingly.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nThis concludes this week’s blog series highlighting some of the Jenkins 2.0 proposals we felt were important to discuss with the broader Jenkins user audience. Many of these, and other minor proposals, can be found on the Jenkins 2.0 wiki page.","title":"Jenkins 2.0 Proposal: Improved \"Out of the box\" user experience","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-10-29T00:00:00.000Z","id":"adc91b34-7269-5628-87ae-4bc68cb38e9f","slug":"/blog/2015/10/29/jenkins-2-0-proposal-ux-improvements-part-one/","strippedHtml":"We have been featuring a few proposals this week for what \" Jenkins\n2.0\" is going to include. Today we’ll be diving into the most noticeable changes being proposed for Jenkins 2.0: the User Experience (UX) improvements\n\nThus far in this blog series we have reviewed proposals covering:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nPipeline as code front and center\n\nThe UX improvements being proposed aren’t necessarily as uniform as the proposals from earlier in the week but represent a large amount of prototype and exploratory work done by folks like Tom Fennelly, Gus Reiber and a few others. Those following the dev list may have already seen some of these proposals in some of the \"mega threads\" that we have had discussing potential UI/UX improvements previously.\n\nThe improvements proposed for 2.0 can be found under JENKINS-31156 . The most promising proposal under this issue is to update the plugin manager experience.\n\nAnother very important proposal for 2.0 worth mentioning is the proposal to update UI work well on mobile devices.\n\nProviding Feedback\n\nWe’re asking you to read the issues linked from JENKINS-31156 and comment and vote on those issues accordingly.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for tomorrow’s post covering the remainder of the proposed user experience changes!","title":"Jenkins 2.0 Proposal: UX Improvements (Part One)","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-10-28T00:00:00.000Z","id":"f9383f6c-7ac4-510a-ba69-7c342cd84479","slug":"/blog/2015/10/28/jenkins-2-0-proposal-pipeline-as-code-front-and-center/","strippedHtml":"We have been featuring a few proposals this week for what \" Jenkins\n2.0\" is going to include, today we’re discussing my personal favorite, which I believe will have a tremendously positive impact for years to come (not to be too biased!): moving the \"Pipeline as Code\" support in Jenkins to the front and center.\n\nThus far in this blog series we have reviewed proposals covering:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nToday’s proposal comes from project founder Kohsuke Kawaguchi titled \" Pipeline as code front and center \" and represents perhaps the most important and dramatic shift we hope to make in Jenkins 2.0.\n\nThis functionality has existed through the workflow plugin, which we have discussed at various Jenkins events before but if you’re not aware of some of the power behind it, check out this presentation from Jesse Glick :\n\nThe proposal in JENKINS-31152 expands on the problem we aim to address:\n\nThe default interaction model with Jenkins has been very web UI driven, requiring users to manually create jobs, then manually fill in the details through a web browser. This requires large amounts of effort to create and manage jobs to test and build multiple projects and keeps the actual configuration of a job to build/test/deploy a project separate from the actual code being built/tested/deployed. This prevents users from applying their existing CI/CD best practices to the job configurations themselves.\n\nTo address this, Kohsuke is proposing that we :\n\nIntroduce a new subsystem in Jenkins that:\n\nlets you design a whole pipeline, not just a single linear set of tasks\n\nstores the said pipeline configuration as human-editable Jenkinsfile in your SCM\n\nmakes it automatic to set up new pipelines when Jenkinsfile is added\n\ndifferentiates multiple branches in the same repository\n\nThis is the key new feature that positions Jenkins for continuous delivery use cases and other more complex automations of today.\n\nKohsuke’s proposal is largely about bringing together a lot of already existing pieces together to provide a very compelling experience for new and existing users alike. I hope it is clear now why this proposal is so exciting to me.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-31152, which itself have some additional tickets linked under it, and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for a couple more posts covering proposals to improve the Jenkins interface and user experience!","title":"Jenkins 2.0 Proposal: Pipeline as Code front and center","tags":["general","core","pipeline","workflow","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-10-27T00:00:00.000Z","id":"1fbfba77-6c14-503d-b574-e7815dd7c2b5","slug":"/blog/2015/10/27/jenkins-2-0-proposal-split-groovy-out-of-core/","strippedHtml":"As I mentioned in yesterday’s post, there’s been a lot of discussion recently about what \" Jenkins\n2.0\" means. In a recent \"Office Hours\" session, Kohsuke Kawaguchi presented his\nvision for Jenkins 2.0 in a office\nhours session, the slides for\nwhich can be found in this Google\nPresentation.\nRoughly paraphrasing Kohsuke’s vision, 2.0 is primarily about making things\nbetter for the thousands of users out there.\n\nThis week, we’ll be reviewing some key areas of the \"Jenkins 2.0\" proposal.\nAsking you, the user community, to provide feedback on these proposals, going\nfrom Jenkins internals to user interface.\n\nThus far we’ve covered:\n\nIntroducing a policy for API deprecation\n\nToday’s post involves a proposal originally from community member Jesse Glick who has proposed in JENKINS-29068 that Groovy be split out from the \"core\" Jenkins distribution. The linked issue expands on what the problem is here:\n\nCurrently Jenkins embeds a distribution of Groovy into \"core\" for a variety of scripting and management tasks. This version of Groovy is locked into core in such a way that users cannot upgrade Groovy independently from Jenkins itself. If the Jenkins-bundled version were upgraded to a different major version, it may break users' custom scripts as well as plugins that use Groovy due to API changes.\n\nThe proposal is relatively straight-forward and affects the many different users and use-cases for the embedded Groovy scripting support in Jenkins:\n\nFor ease of maintenance and modularity it would be useful to split Jenkins' use of Groovy into a library plugin; different clients could request 1.x and 2.x simultaneously by using different versions of the library, etc.\n\nStuff in core using Groovy that would need to either be put in this library (if infrastructure for other features) or put in another plugin depending on it (if first-class features themselves):\n\nI selected this proposal to feature on this blog, despite its rather technical underpinnings, it will affect core developers, plugin developers, power and casual users alike. I encourage everybody to read through the proposal and its potential impact on the issue tracker.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-29068 and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for the rest of the week as we keep with our theme of going \"from the inside out\" and help us make Jenkins 2.0 great!","title":"Jenkins 2.0 Proposal: Split Groovy out of \"core\"","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-10-25T00:00:00.000Z","id":"78143bf1-03da-5815-8439-43425e0258cc","slug":"/blog/2015/10/25/jenkins-2-0-proposal-introduce-a-policy-for-api-deprecation/","strippedHtml":"Over the past few weeks there has been a vibrant discussion happening on the\njenkinsci-dev@ mailing\nlist as to what \" Jenkins 2.0\" means.  While\nJenkins does not currently adhere to semantic versioning,\nthe change of a major version number does indicate a major milestone for the community.\n\nProject founder, Kohsuke Kawaguchi presented his\nvision for Jenkins 2.0 in a office\nhours session, the slides for\nwhich can be found in this Google\nPresentation.\nRoughly paraphrasing Kohsuke’s vision, 2.0 is primarily about making things\nbetter for the thousands of users out there.\n\nThis week, we’ll be reviewing some key areas of the \"Jenkins 2.0\" proposal.\nAsking you, the user community, to provide feedback on these proposals, going\nfrom Jenkins internals to user interface.\n\nToday’s post involves a proposal to introduce a policy for API\ndeprecation from community members Oliver\nGondža and Daniel\nBeck. Extensibility is the heart of Jenkins, but over the past ten\nyears we’ve not had a proper API deprecation policy other than \"try not to\nbreak plugins, ever.\"\n\nDaniel, expanding more on the problem wrote:\n\nWe have no backward compatibility policy besides \"compatibility matters\".\nWith 1000+ plugins and basically the entire core being available to\nplugins, a lot of difficult or impossible to remove cruft has accumulated over\nthe last ten years. This limits both what can be changed in core, and makes\ndocumentation difficult to use for plugin developers.\n\nThe two have put together a detailed proposal under\nJENKINS-31035 which\nsuggests we:\n\nlimit the availability in APIs (classes, methods, fields, …​) provided by core\nto a number of releases. Depending on the feature, this can range from a few\nmonths, to a few years (e.g. two years being about 100 releases of Jenkins and\neight LTS baselines).\n\n[…​]\n\nI highly encourage you to read the entire proposal on the issue\ntracker, where we are\ntrying to collect feedback/history.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-31035 and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned, and help make Jenkins 2.0 great!","title":"Jenkins 2.0 Proposal: Introduce a policy for API deprecation","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-10-19T00:00:00.000Z","id":"894f996c-0ca5-590a-b0ac-4202ec9b7db2","slug":"/blog/2015/10/19/upcoming-in-office-hours-fosdem-planning-session/","strippedHtml":"For the past several years we’ve been attending FOSDEM, a massive free and open source event in Brussels, Belgium. In preparation for this upcoming FOSDEM (2016) event, we will be hosting an open planning meeting via Google Hangouts during this week’s \" Office Hours.\"\n\nAgenda:\n\nGauge who can participate and at what capacity.\n\nPre-FOSDEM Contributor Summit\n\nAfter-hours meetup/happy hour\n\nPlans for a Jenkins stand (assuming we’re accepted):\n\nWhat demo materials\n\nSchwag\n\nRevised Jenkins Flyer\n\nThe FOSDEM 2016 wiki page is where we will be recording plans and tasks will be added to JIRA. If you cannot join us via the FOSDEM Office Hours Hangout , we will also be watching the #jenkins-community channel on the Freenode network if you cannot participate directly.\n\nPlease join us on this Google Hangout at 11:00 a.m. PDT this Wednesday (Oct 21)","title":"Upcoming in office hours: FOSDEM Planning Session","tags":["general","news","video","office hours"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}}]}},"pageContext":{"limit":8,"skip":456,"numPages":100,"currentPage":58}},
    "staticQueryHashes": ["3649515864"]}