{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/17",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-08-19T00:00:00.000Z","id":"a8a6f50d-13d8-5ff0-b148-cd0ef7696ecf","slug":"/blog/2019/08/19/remoting-kafka-kubernetes-release-2.0/","strippedHtml":"I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. After a successful Phase 1, finally the 2.0 version of the plugin has been released. The 2.0 version provides seamless integration with Kubernetes environment.\n\n2.0 version features\n\nStart a simple Apache Kafka server in Kubernetes.\n\nDynamically provision Remoting Kafka Agent in Kubernetes.\n\nHelm chart to bootstrap the whole system in Kubernetes.\n\nStart a simple Apache Kafka server in Kubernetes\n\nUse of the plugin requires that users have a configured Apache Zookeeper and Apache Kafka server, which could be intimidating for people who just want to try out the plugin. Now, users can start a simple, single-node Apache Kafka server in Kubernetes environment with just one button click.\n\nOn the Global Configuration page, users can input Kubernetes server information and credentials. When users click Start Kafka on Kubernetes button, Jenkins will create a Kubernetes client from the information and then apply Apache Zookeeper and Apache Kafka YAML specification files from resources. After downloading images and creating containers, it will automatically update Apache Zookeeper and Apache Kafka URLs into respective fields.\n\nDynamically provision Remoting Kafka Agent in Kubernetes\n\nWith previous version, users have to manually add/remove nodes so it is hard to scale builds quickly. Kubernetes plugin allows us to dynamically provision agents in Kubernetes but it is designed for JNLP agent. With this new version, Remoting Kafka agent can also be provisioned automatically in Kubernetes environment.\n\nUsers can find the new feature in Cloud section in /configure. Here users could input Kubernetes connection parameters and desired Remoting Kafka agent properties including labels. When new build with matching labels gets started and there are no free nodes, Cloud will automatically provision Remoting Kafka agent pod in Kubernetes to run the build.\n\nHelm Chart\n\nHelm chart for Remoting over Apache Kafka plugin is based on stable/jenkins chart and incubator/kafka chart. You can follow the instruction here to install a demo ready-to-use Helm release. Your kubectl get all should look like this:\n\nNAME                                READY   STATUS    RESTARTS   AGE\npod/demo-jenkins-64dbd87987-bmndf   1/1     Running   0          2m21s\npod/demo-kafka-0                    1/1     Running   0          2m21s\npod/demo-zookeeper-0                1/1     Running   0          2m21s\n\nNAME                              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\nservice/demo-jenkins              NodePort    10.108.238.56 8080:30386/TCP               2m21s\nservice/demo-jenkins-agent        ClusterIP   10.98.85.184 50000/TCP                    2m21s\nservice/demo-kafka                ClusterIP   10.109.231.58 9092/TCP                     2m21s\nservice/demo-kafka-headless       ClusterIP   None 9092/TCP                     2m21s\nservice/demo-zookeeper            ClusterIP   10.103.2.231 2181/TCP                     2m21s\nservice/demo-zookeeper-headless   ClusterIP   None 2181/TCP,3888/TCP,2888/TCP   2m21s\n\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/demo-jenkins   1/1     1            1           2m21s\n\nNAME                                      DESIRED   CURRENT   READY   AGE\nreplicaset.apps/demo-jenkins-64dbd87987   1         1         1       2m21s\n\nNAME                              READY   AGE\nstatefulset.apps/demo-kafka       1/1     2m21s\nstatefulset.apps/demo-zookeeper   1/1     2m21s\n\nHow to Contribute\n\nYou are welcome to try out the plugin and integrate it into your current setup. If you find out any bug or if you would like to request new feature, you can create ticket at JIRA. If you would like to contribute code directly, you can create pull requests in the GitHub page below.\n\nLinks\n\nPhase 2 Demo Video\n\nPhase 2 Presentation Slides\n\nPhase 1 Blog Post\n\nPhase 1 Demo Video\n\nPhase 1 Presentation Slides\n\nRemoting over Apache Kafka plugin source code\n\nProject Page\n\nGitter Channel","title":"Remoting over Apache Kafka 2.0: Built-in Kubernetes support","tags":["remoting","kafka","kubernetes","helm","plugin","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg","srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/77b35/longnguyen.jpg 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/d4a57/longnguyen.jpg 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/68974/longnguyen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/ef6ff/longnguyen.webp 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/8257c/longnguyen.webp 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/6766a/longnguyen.webp 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/22bfc/longnguyen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"longngn","html":"<div class=\"paragraph\">\n<p>Long is a Software Engineering student at FPT University, Vietnam. He started to contribute for Jenkins from Google Summer of Code 2019 for the project <a href=\"https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/\">Remoting over Apache Kafka with Kubernetes features</a></p>\n</div>","id":"longnguyen","irc":null,"linkedin":null,"name":"Long Nguyen","slug":"/blog/authors/longnguyen","twitter":null}]}},{"node":{"date":"2019-08-16T00:00:00.000Z","id":"765c4285-c91b-5554-af65-6b25fe8433c3","slug":"/blog/2019/08/16/folder-auth-plugin/","strippedHtml":"During my Google Summer of Code Project,\nI have created the brand new Folder Auth Plugin for easily\nmanaging permissions to projects organized in folders from the Folders plugin.\nThis new plugin is designed for fast permission checks with easy-to-manage roles.\nThe 1.0 version of the plugin has just been released and can be downloaded\nfrom your Jenkins' Update center.\n\nThis plugin was inspired by the Role Strategy Plugin\nand brings about performance improvements and makes managing roles much easier.\nThe plugin was developed to overcome performance limitations of the Role Strategy\nplugin on a large number of roles. At the same time, the plugin addresses one\nof the most popular ways of organizing projects in Jenkins, through folders.\nThe plugin also has a new UI with more improvements to come in the future.\n\nThe plugin supports three types of roles which are applicable at different places\nin Jenkins.\n\nGlobal Roles: applicable everywhere in Jenkins\n\nAgent Roles: restrict permissions for multiple agents connected to your instance\n\nFolder Roles: applicable to multiple jobs organized inside folders\n\nPerformance Improvements over Role Strategy Plugin\n\nThis plugin, unlike the Role Strategy plugin, does not use regular expressions\nfor finding matching projects and agents giving us performance improvements\nand makes administrators' lives easier. To reduce the number of roles required\nto be managed, permissions given to a folder through a folder role get inherited\nto all of its children. This is useful for giving access to multiple projects\nthrough a single role. Similarly, an agent role can be applied to multiple agents\nand assigned to multiple users.\n\nThis plugin is designed to outperform Role Strategy Plugin in permission\nchecks. The improvements were measured using the\nmicro-benchmark framework\nI had created during the first phase of my GSoC project.\nBenchmarks for identical configurations for both plugin show that the\npermissions check are up to 934x faster for 500 global roles when compared to\nthe global roles from the Role Strategy 2.13, which in itself contains several\nperformance improvements. Comparing folder roles with Role Strategy’s project\nroles, a permission check for access to a job almost 15x faster for 250 projects\norganized in two-level deep folders on an instance with 150 users. You can see\nthe benchmarks and the result comparisons\nhere.\n\nJenkins Configuration as Code Support\n\nThe plugin supports Jenkins Configuration-as-Code so you can configure permissions\nwithout going through the Web UI. A YAML configuration looks like this:\n\njenkins:\n  authorizationStrategy:\n    folderBased:\n      globalRoles:\n        - name: \"admin\"\n          permissions:\n            - id: \"hudson.model.Hudson.Administer\"\n              # ...\n          sids:\n            - \"admin\"\n        - name: \"read\"\n          permissions:\n            - id: \"hudson.model.Hudson.Read\"\n          sids:\n            - \"user1\"\n      folderRoles:\n        - folders:\n            - \"root\"\n          name: \"viewRoot\"\n          permissions:\n            - id: \"hudson.model.Item.Read\"\n          sids:\n            - \"user1\"\n      agentRoles:\n        - agents:\n            - \"agent1\"\n          name: \"agentRole1\"\n          permissions:\n            - id: \"hudson.model.Computer.Configure\"\n            - id: \"hudson.model.Computer.Disconnect\"\n          sids:\n            - \"user1\"\n\nREST APIs with Swagger support\n\nThe plugin provides REST APIs for managing roles with OpenAPI specifications\nthrough Swagger.json. You can check out the Swagger API on\nSwaggerHub.\nSwaggerHub provides stubs in multiple languages which can be downloaded and\nused to interact with the plugin. You can also see some sample requests from\nthe command line using curl.\n\nWhat’s next\n\nIn the (not-too-distant) future, I would like to work on improving the UI and\nmake the plugin easier to work with. I would also like to work on improving the\nAPIs, documentation and more optimizations for improving the plugin’s performance.\n\nLinks and Feedback\n\nI would love to hear your comments and suggestions. Please feel free to reach\nout to me through either the\nRole Strategy Plugin Gitter chat or through\nJenkins Developer Mailing list.\n\nPresentation slides for second phase evaluations\n\nDocumentation for the Folder Auth Plugin\n\nDemo of the Folder Authorization plugin","title":"Introducing new Folder Authorization Plugin","tags":["plugins","security","performance","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg","srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f4523/abhyudayasharma.jpg 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1e7bb/abhyudayasharma.jpg 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/b48b6/abhyudayasharma.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1fd06/abhyudayasharma.webp 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/9edd6/abhyudayasharma.webp 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f5f75/abhyudayasharma.webp 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/05d06/abhyudayasharma.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":null,"github":"AbhyudayaSharma","html":"<div class=\"paragraph\">\n<p>Abhyudaya is a Computer Science student at Shiv Nadar University, India.\nHe is participating in Google Summer of Code 2019 to improve the performance\nof the <a href=\"https://github.com/jenkinsci/role-strategy-plugin\">Role Strategy Plugin</a>.</p>\n</div>","id":"abhyudayasharma","irc":null,"linkedin":null,"name":"Abhyudaya Sharma","slug":"/blog/authors/abhyudayasharma","twitter":null}]}},{"node":{"date":"2019-07-30T00:00:00.000Z","id":"9f72bb8f-5b81-55ef-8ffc-f58fb42841f2","slug":"/blog/2019/07/30/plugin-management-tool-phase2-updates/","strippedHtml":"At end of the first GSoC phase, I\nannounced\nthe first alpha release of the CLI tool and library that will help centralize\nplugin management and make plugin tooling easier.\n\nPhase 2 has mainly been focused on improving upon the initial CLI and library written\nin Coding Phase 1. In particular, we’ve been focusing on getting the tool ready to\nincorporate into the Jenkins Docker Image to replace the\ninstall-plugins.sh bash script\nto download plugins.  This work included parsing improvements so that blank lines and comments in the\nplugins.txt file are filtered out, allowing update centers and the plugin download\ndirectory to be set via environment variables or CLI Options, creating Windows\ncompatible defaults, and fixing a bug in which dependencies for specific\nplugin versions were not always getting resolved correctly.\n\nIn parallel to getting the tool ready for Jenkins Docker integration, Phase 2 saw\nthe addition of several new features.\n\nYaml Input\n\nIn addition to specifying the plugins they want to download via the --plugins\nCLI option or through a .txt file, users can now use a Jenkins yaml file with a\nplugins root element.\n\nSay goodbye to the days of specifying incremental\nplugins like incrementals;org.jenkins-ci.plugins.workflow;2.20-rc530.b4f7f7869384 -\n  you can enter the artifactId, groupId, and version to specify an incremental plugin.\n\nMaking the Download Process More Transparent\n\nPreviously, the plugin download process was not very transparent to users - it was\ndifficult to know the final set of plugins that would be downloaded after pulling in\nall the dependencies.  Instead of determing the set of plugins that will be downloaded\nat the time of download, users now have the option to see the full set of plugins\nand their versions that will be downloaded in advance. With the --list CLI\noption, users can see all currently downloaded and bundled plugins, the set of all\nplugins that will be downloaded, and the effective plugin set - the set of all\nplugins that are already downloaded or will be downloaded.\n\nViewing Information About plugins\n\nNow that you know which plugins will be downloaded, wouldn’t it be nice to know\nif these are the latest versions or if any of the versions you want to install have\nsecurity warnings?  You can do that now too.\n\nNext Steps and Additional Information\n\nThe updates mentioned in this blog will be released soon so you can try them out.\nThe focus of Phase 3 will be to continue to iterate upon and improve the library\nand CLI. We hope to release a first version and submit a pull request to Jenkins Docker soon.\nThanks to everyone who has already tried it out and given feedback! I will also be\npresenting my work at DevOps World\nin San Francisco in a few weeks.  You can use the code PREVIEW for a discounted registration\n($799 instead of $1,499).\n\nFeel free to reach out through\nthe Plugin Installation Manager CLI Tool Gitter chat or through\nthe Jenkins Developer Mailing list. I would love to get your questions, comments, and feedback!\nWe have meetings Tuesdays and Thursdays at 6PM UTC.\n\nPhase 2 Presentation Slides\n\nPhase 2 Recorded Demo\n\nJira Issue Search\n\nRepository","title":"Plugin Management Library and CLI Tool Phase 2 GSoC Updates","tags":["plugins","pluginmanagement","platform-sig","cli","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#280818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg","srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/405b9/stopalopa.jpg 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7b6be/stopalopa.jpg 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/ebcfb/stopalopa.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/0ade5/stopalopa.webp 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/5b0b1/stopalopa.webp 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/96834/stopalopa.webp 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/805f6/stopalopa.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":184}}},"blog":null,"github":"stopalopa","html":"<div class=\"paragraph\">\n<p>Natasha is a Master&#8217;s student at Penn State University. She was accepted to Google Summer of Code 2019 for a project on creating <a href=\"https://jenkins.io/projects/gsoc/2019/plugin-installation-manager-tool-cli/\">a plugin management tool</a>.\nIn her spare time she enjoys spending time outdoors, listening to podcasts and cuddling with her cat.</p>\n</div>","id":"stopalopa","irc":null,"linkedin":null,"name":"Natasha Stopa","slug":"/blog/authors/stopalopa","twitter":"stopamine"}]}},{"node":{"date":"2019-07-25T00:00:00.000Z","id":"c8dcfc2d-fe9b-51ed-b1d8-8da5973e144c","slug":"/blog/2019/07/25/azure-artifact-manager/","strippedHtml":"Jenkins stores all generated artifacts on the controller server filesystem. This presents a couple of challenges especially when you try to run Jenkins in the cloud:\n\nAs the number of artifacts grow, your Jenkins controller will run out of disk space. Eventually, performance can be impacted.\n\nFrequent transfer of files between agents and controller may cause load, CPU or network issues which are always hard to diagnose.\n\nSeveral existing plugins allow you to manage your artifacts externally. To use these plugins, you need to know how they work and perform specific steps in your job’s configuration. And if you are new to Jenkins, you may find it hard to follow existing samples in Jenkins tutorial like Recording tests and artifacts.\n\nSo, if you are running Jenkins in Azure, you can consider automatically managing new artifacts on Azure Storage. The new Azure Artifact Management plugin allows you to store artifacts in Azure blob storage and simplify your existing Jenkins jobs that contain Jenkins general artifacts management steps. This approach will give you all the advantages of a cloud storage, with less effort on your part to maintain your Jenkins instance.\n\nConfiguration\n\nAzure storage account\n\nFirst, you need to have an Azure Storage account. You can skip this section if you already have one. Otherwise, create an Azure storage account for storing your artifacts. Follow this tutorial to quickly create one. Then navigate to Access keys in the Settings section to get the storage account name and one of its keys.\n\nExisting Jenkins instance\n\nFor existing Jenkins instance, make sure you install the Azure Artifact Manager plugin. Then you can go to your Jenkins System Configuration page and locate the Artifact Management for Builds section. Select the Add button to configure an Azure Artifact Storage. Fill in the following parameters:\n\nStorage Type: Azure storage supports several storage types like blob, file, queue etc. This plugin currently supports blob storage only.\n\nStorage Credentials: Credentials used to authenticate with Azure storage. If you do not have an existing Azure storage credential in you Jenkins credential store, click the Add button and choose Microsoft Azure Storage kind to create one.\n\nAzure Container Name: The container under which to keep your artifacts. If the container name does not exist in the blob, this plugin automatically creates one for you when artifacts are uploaded to the blob.\n\nBase Prefix: Prefix added to your artifact paths stored in your container, a forward slash will be parsed as a folder. In the following screenshot, all your artifacts will be stored in the “staging” folder in the container “Jenkins”.\n\nNew Jenkins instance\n\nIf you need to create a new Jenkins controller, follow this tutorial to quickly create an Jenkins instance on Azure. In the Integration Settings section, you can now set up Azure Artifact Manager directly. Note that you can change any of the configuration after your Jenkins instance is created. Azure storage account and credential, in this case, are still prerequisites.\n\nUsage\n\nJenkins Pipeline\n\nHere are a few commonly used artifact related steps in pipeline jobs; all are supported to push artifacts to the Azure Storage blob specified.\n\nYou can use archiveArtifacts step to archive target artifacts into Azure storage. For more details about archiveArtifacts step, see the Jenkins archiveArtifacts setp documentation.\n\nnode {\n  //...\n  stage('Archive') {\n    archiveArtifacts \"pattern\"\n  }\n}\n\nYou can use the unarchive step to retrieve the artifacts from Azure storage. For more details about unarchive step, please see unarchive step documentation.\n\nnode {\n  //...\n  stage('Unarchive') {\n    unarchive mapping: [\"pattern\": '.']\n  }\n}\n\nTo save a set of files so that you can use them later in the same build (generally on another node or workspace), you can use stash step to store files into Azure storage for later use. Stash step documentation can be found here.\n\nnode {\n  //...\n  stash name: 'name', includes: '*'\n}\n\nYou can use unstash step to retrieve the files saved with stash step from Azure storage to the local workspace. Unstash documentation can be found here.\n\nnode {\n  //...\n  unstash 'name'\n}\n\nFreeStyle Job\n\nFor a FreeStyle Jenkins job, you can use Archive the artifacts step in Post-build Actions to upload the target artifacts into Azure storage.\n\nThis Azure Artifact Manager plugin is also compatible with some other popular management plugins, such as the Copy Artifact plugin. You can still use these plugins without changing anything.\n\nTroubleshooting\n\nIf you have any problems or suggestions when using Azure Artifact Manager plugin, you can file a ticket on Jenkins JIRA for the azure-artifact-manager-plugin component.\n\nConclusion\n\nThe Azure Artifact Manager enables a more cloud-native Jenkins. This is the first step in the Cloud Native project. We have a long way to go to get Jenkins to run on cloud environments as a true “Cloud Native” application. We need help and welcome your participation and contributions to make Jenkins better. Please start contributing and/or give us feedback!","title":"Managing Jenkins Artifacts with the Azure Artifact Manager Plugin","tags":["general","azure","plugin"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/19e71/jshen.jpg","srcSet":"/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/77b35/jshen.jpg 32w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/d4a57/jshen.jpg 64w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/19e71/jshen.jpg 128w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/68974/jshen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/ef6ff/jshen.webp 32w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/8257c/jshen.webp 64w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/6766a/jshen.webp 128w,\n/gatsby-jenkins-io/static/5f4c376818aa25b85cee206264e2692f/22bfc/jshen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"gavinfish","html":"<div class=\"paragraph\">\n<p>Software engineer at Microsoft. Focusing on DevOps and cloud native.</p>\n</div>","id":"jshen","irc":null,"linkedin":null,"name":"Jie Shen","slug":"/blog/authors/jshen","twitter":null}]}},{"node":{"date":"2019-07-21T00:00:00.000Z","id":"e7a046ff-9ae1-585e-826a-dc8f41a2ab04","slug":"/blog/2019/07/21/Jenkins-code-coverage-diff-for-pull-request/","strippedHtml":"Hello.\n\nAs you may know, during the last year GSoC Mr. Shenyu Zheng was working on the Jenkins Code Coverage API Plugin. With Mr. Zheng we made a change so the plugin now is able to check the difference in code coverage between pull requests and target branches.\n\nIn lots of projects it is a common practice to track if unit tests code coverage doesn’t decrease. So, with this plugin, you may skip separate services that track code coverage and have this feature right in your favorite CI system.\n\nHow it works\n\nWhen you build a PR in Jenkins, using plugins like Github or Bitbucket Branch Source, that use SCM API Plugin, your PR knows what target branch commit it is based on. (The commit may change because of Discover pull requests from origin strategies). To calculate the diff, when you publish your coverage from PR, it looks for the target branch build for the commit that your PR was based on. If it finds the build on the target branch, it looks for any published code coverage for this target branch build. In case the build has it, the plugin calculates the percentage diff for the line coverage and shows it on the pull request build page. Also, it gives you a link to the target branch build that was used for the comparison.\n\nThat it how it looks like:\n\nDecreased coverage\n\nIncreased coverage\n\nHow to enable code coverage diff for pull requests\n\nTo enable this behavior you need to publish your code coverage with the calculateDiffForChangeRequests flag equals true, like this:\n.Jenkinsfile\n\nnode(...) {\n  ...\n  // Here we are using the istanbulCoberturaAdapter\n  publishCoverage adapters: [istanbulCoberturaAdapter('cobertura-coverage.xml')],\n    sourceFileResolver: sourceFiles('NEVER_STORE'),\n    calculateDiffForChangeRequests: true\n\n  ...\n}\n\nLinks and Feedback\n\nIf you have some questions about this behavior, please ask me in email.\n\nYou are free to contribute to this plugin to make it better for everyone. There are a lot of interesting features that can be added and issues that can be solved. Also, you can write some new plugins for other code coverage formats that use the Code Coverage API plugin as a base.\n\nHere is the repo of the plugin - Code Coverage API Plugin\n\nThank you.","title":"Jenkins code coverage diff in pull requests","tags":["plugins","codecoverage"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/19e71/asavanchuk.jpg","srcSet":"/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/77b35/asavanchuk.jpg 32w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/d4a57/asavanchuk.jpg 64w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/19e71/asavanchuk.jpg 128w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/68974/asavanchuk.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/ef6ff/asavanchuk.webp 32w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/8257c/asavanchuk.webp 64w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/6766a/asavanchuk.webp 128w,\n/gatsby-jenkins-io/static/6ea2a73294a8396d74efba91c53e1bfe/22bfc/asavanchuk.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"tempora-mutantur","html":"<div class=\"paragraph\">\n<p>Software developer from Minsk, Belarus.</p>\n</div>","id":"asavanchuk","irc":null,"linkedin":null,"name":"Aliaksei Savanchuk","slug":"/blog/authors/asavanchuk","twitter":null}]}},{"node":{"date":"2019-07-17T00:00:00.000Z","id":"9f73ac2f-d418-5bf3-8f3c-f90ae712af6e","slug":"/blog/2019/07/17/DevOps-World-Jenkins-World-2019-San-Francisco-Lunch-Demos/","strippedHtml":"If you’re looking for more opportunities to learn Jenkins and Jenkins X during the lunch hours while at DevOps World - Jenkins World 2019 San Francisco , come join us at the Jenkins and Jenkins X Community Booth!\n\nIf you don’t yet have your pass for DevOps World - Jenkins World 2019 San Francisco , and don’t want to miss out on the fun, you can get yours using JWFOSS for a 30% discount.\n\nDuring lunch hours we are scheduling the following demo briefs at the Jenkins and Jenkins X Community Booth:\n\nWednesday  August 14, 2019\n\n12:10 - 12:25pm \tFaster Git Mark Waite\n\nAttendees will learn the techniques they can use with Jenkins to make their systems clone and update git repositories faster and with less disc space.\n\n12:25 - 12:40pm\tObservability in Jenkins X Oscar Medina\n\nIf you are using Jenkins X, you’re already building at rapid pace.  However, most miss the opportunity to gain real insights into their build and release pipeline.  I’ll show you how you can increase observability by activating metric capture and analysis during a containerized application deployment with Jenkins X.  This  entails modifying the declarative Tekton pipelines.\n\n12:40 - 12:55pm\tFrom setup to build status on the command line Martin d’Anjou\n\nUsing bash, groovy, JCasC and the jenkins-rest, we demonstrate how to setup Jenkins from scratch, upload a configuration as code yaml file, create folders and jobs, run a build, and track it to its completion, all from the command line, without ever touching the GUI.\n\n12:55 - 1:10pm\t\tDevOps without Quality: An IT Horror Story\tLaura Keaton\n\nDevOps, the current IT Industry sweetheart, has a dark secret that has victimized organizations on their transformational journey. Investigate two case studies that left development and delivery teams in tatters and how quality engineering solutions could have prevented their disastrous outcomes.\n\n1:10 - 1:25pm\tSecuring Your Jenkins Container Pipeline with Open Source Tools Christian Wiens\n\nDiscuss the security pitfalls of containers and how embedding an open source image scanning and policy based compliance tool like Anchore into your CI/CD pipeline can mitigate this risk.\n\nThursday  August 15, 2019\n\n12:25 - 12:35pm\tResults from the 2019 Jenkins Google Summer of Code Martin d’Anjou\n\nIn 2019, the Jenkins project participated in the Google Summer of Code. This is an annual, international, program which encourages college-aged students to participate in open source projects during the summer break between classes. In 2019, we had dozens of applications and many student projects. In this session, we will showcase the students' projects and talk about what they bring to the Jenkins ecosystem.\n\n12:35 - 12:45pm\t\tPlugin installation CLI Tool Natasha Stopa\n\nThis talk will demo the new plugin installation tool done as part of a Google Summer of Code project. It will show the CLI features and how the library has been incorporated into other areas of Jenkins.\n\n12:45 - 12:55pm\t\tSysdig Secure Jenkins Plugin Marky Jackson\n\nSysdig Secure is a container security platform that brings together docker image scanning and run-time protection to identify vulnerabilities, block threats, enforce compliance, and audit activity across your microservices. The Sysdig Secure Jenkins plugin can be used in a Pipeline job, or added as a build step to a Freestyle job, to automate the process of running an image analysis, evaluating custom policies against images, and performing security scans.\n\n12:55 - 1:10pm\t\tUsing React for plugin UI Jeff Pearce\n\nThe working hours plugin has a date driven UI. During this summer’s Google Summer of Code, our student rewrite the UI in React, so that we could take advantage open source modules such as calendar pickers. I’ll talk about how the student approached the UI, demonstrate the UI and talk about particular challenges we faces.\n\n1:10 - 1:25pm\t\tJenkins GKE Plugin Craig Barber\n\nIn this demo we will showcase the Jenkins GKE plugin, newest addition to GCP’s suite of officially supported plugins. We’ll show how to leverage this plugin to deploy applications built in Jenkins pipelines to multiple clusters running in GKE.\n\nGrab your lunch and join us at the community theater!","title":"DevOps World - Jenkins World 2019 San Francisco: Lunch Time Demos","tags":["event","devopsworldjenkinsworld2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/authors/alyssat","twitter":null}]}},{"node":{"date":"2019-07-15T00:00:00.000Z","id":"41025c8c-be64-5725-9360-c21fc24cca93","slug":"/blog/2019/07/15/pipeline-config-history-plugin/","strippedHtml":"Pipelines are the efficient and modern way how to create jobs in Jenkins.\nTo recognize pipeline changes quickly and easily, we developed the Pipeline Configuration History plugin.\nThis plugin detects changes of pipelines and provides the user an option to view changes between two builds (diffs) of pipeline configurations visibly and traceably.\n\nHow everything started\n\nIt all started 10 years ago — with classical job types (e.g. Freestyle, Maven, etc.).\nEvery once in a while users contacted us because their jobs failed to build overnight.\nWhy did the job fail?\nWas the failure related to a job configuration change?\nThe users' typical answer was: \"We didn’t change anything!\", but is that really true?\nWe thought about this and decided to develop a plugin that helped us solve this problem.\nThis was the idea and the beginning of Job Configuration History.\n\nNow it was possible to view changes of job configurations (like other branches, JDK versions, etc.) and more often the reason for breaking builds were changes of job configurations.\n\nOver the years the plugin got developed and is still under development.\nNew functions were added, that not only view job configurations, but also changes of global and agent configurations.\nIt is also possible to recover old configuration versions.\nToday the plugin has more than 30,000 installations.\nFor many years JobConfigHistory relieves our daily work — with more than 3,000 Jenkins jobs!\nThen there was a new type of job: Pipelines.\n\nPipelines - something new was needed\n\nPipeline jobs are fundamentally different than classical job types .\nWhile classic job types are configured via the Jenkins GUI, Pipeline jobs are configured as code.\nEvery pipeline job indeed gets created via the Jenkins GUI, however that is not necessarily where the pipeline configuration is located.\nPipelines can be configured:\n\nDirectly in the Jenkins job as script.\nThe code gets inserted directly in the job configuration page.\n\nAs Jenkinsfile in the source code management system (SCM): The pipeline configuration is defined in a text file (Jenkinsfile) in the SCM.\nIn the job itself only the path to the repository of the Jenkinsfile is configured.\nDuring the build the Jenkinsfile gets checked out from the SCM and processed.\n\nAs a shared library: A part of the pipeline configuration gets moved to separate files that can be used by several jobs.\nThese files are also saved in the SCM.\nEven so a Jenkinsfile is still needed (or a pipeline script in the job).\n\nWith every save operation of the job configuration, JobConfigHistory creates a copy of the actual job configuration if something has changed.\nThat only works for pipeline jobs if the pipeline configuration is inserted in the job configuration page as script.\nChanges in the Jenkinsfile or the shared libraries are not detected by JobConfigHistory.\nYou have to use the SCM system to view changes of the Jenkinsfile or the shared libraries.\nIt is complex and time intensive to find a correlation between the time of a build and a change to the Jenkinsfile or shared library.\n\nThis new problem is much more than JobConfigHistory.  A new solution was needed to detect pipeline changes and show these changes in Jenkins.\nSo we developed Pipeline Configuration History.\n\nDuring every pipeline run the Jenkinsfile and related shared libraries are saved in the builds directory of the job.\nPipeline Configuration History saves changes of the pipeline files between the last run and the previous run as history events.\nTherefore when a pipeline job ceases to build successfully, you can check if something has changed on any used pipeline file.\nYou can also see the build where changes occurred.\n\nBecause a pipeline configuration can consist of several files where changes could have occurred, only files with changes between two builds are shown in the diff.\nThat makes the whole thing more compact and effective:\n\nBut sometimes you may want to show more than the differences between pipeline files.  You may want to see which pipeline files are in use or the content of those files when they were used.\nSo it’s possible to view all files and their content.\nIf required you can download them as well:\n\nConclusion\n\nWe use Pipeline Configuration History successfully in production. It has helped us from the very first day as we solved problems that occurred due to pipeline configuration changes.\nPipeline Configuration History won’t replace Job Configuration History.\nThe plugins have different use cases.\nMany times small changes on job or pipeline configurations also have big impacts.\nBecause of the correlation in time between changes of job or pipeline configurations and different build behavior, it is now possible to substantially reduce the time and effort to analyze build failures.\nThe Job Configuration History and Pipeline Configuration History plugins let us help our users in consulting and in solving issues.  We resolve problems much faster through easy access to the configuration history of jobs.  These plugins are essential for our daily work.","title":"Introducing the Pipeline Configuration History Plugin","tags":["pipeline","plugins"],"authors":[{"avatar":null,"blog":null,"github":"Jochen-A-Fuerbacher","html":"<div class=\"paragraph\">\n<p>Jochen is a software developer for development infrastructure at 1&amp;1 Telecommunication.\nHe has been working with Jenkins for many years and develops some Jenkins plugins.</p>\n</div>","id":"jochenafuerbacher","irc":null,"linkedin":null,"name":"Jochen A. Fürbacher","slug":"/blog/authors/jochenafuerbacher","twitter":null},{"avatar":null,"blog":null,"github":"stefanbrausch","html":"<div class=\"paragraph\">\n<p>Stefan is a software developer for development infrastructure at 1&amp;1 Telecommunication.\nHe has been working with Jenkins for many years and develops some Jenkins plugins.</p>\n</div>","id":"stefanbrausch","irc":null,"linkedin":null,"name":"Stefan Brausch","slug":"/blog/authors/stefanbrausch","twitter":null},{"avatar":null,"blog":null,"github":"RobinRSchulz","html":"<div class=\"paragraph\">\n<p>Robin is a software developer for development infrastructure at 1&amp;1 Telecommunication.\nHe has been working with Jenkins for many years and develops some Jenkins plugins.</p>\n</div>","id":"robinrschulz","irc":null,"linkedin":null,"name":"Robin Schulz","slug":"/blog/authors/robinrschulz","twitter":null}]}},{"node":{"date":"2019-07-11T00:00:00.000Z","id":"0f6a7c3f-b06c-5c30-a7c4-31c396c5fecf","slug":"/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/","strippedHtml":"I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. This is the first time I have contributed for Jenkins and I am very excited to announce the features that have been done in Phase 1.\n\nProject Introduction\n\nCurrent version of Remoting over Apache Kafka plugin requires users to manually configure the entire system which includes Zookeeper, Kafka and remoting agents. It also doesn’t support dynamic agent provisioning so scalability is harder to achieve. My project aims to solve two problems:\n\nOut-of-the-box solution to provision Apache Kafka cluster.\n\nDynamic agent provisioning in a Kubernetes cluster.\n\nCurrent State\n\nKubernetes connector with credentials supported.\n\nApache Kafka provisioning in Kubernetes feature is fully implemented.\n\nHelm chart is partially implemented.\n\nApache Kafka provisioning in Kubernetes\n\nThis feature is part of 2.0 version so it is not yet released officially. You can try out the feature by using the Experimental Update Center to update to 2.0.0-alpha version or building directly from master branch:\n\ngit clone https://github.com/jenkinsci/remoting-kafka-plugin.git\ncd remoting-kafka-plugin/plugin\nmvn hpi:run\n\nOn the Global Configuration page, users can input Kubernetes server information and credentials. Then they can start Apache Kafka with only one button click.\n\nWhen users click Start Kafka on Kubernetes button, Jenkins will create a Kubernetes client from the information and then apply Zookeeper and Kafka YAML specification files from resources.\n\nHelm Chart\n\nHelm chart for Remoting over Apache Kafka plugin is based on stable/jenkins chart and incubator/kafka chart. As of now, the chart is still a Work in Progress because it is still waiting for Cloud API implementation in Phase 2. However, you can check out the demo chart with a single standalone Remoting Kafka Agent:\n\ngit clone -b demo-helm-phase-1 https://github.com/longngn/remoting-kafka-plugin.git\ncd remoting-kafka-plugin\nK8S_NODE=./helm/jenkins-remoting-kafka/do.sh start\n\nThe command do.sh start will do the following steps:\n\nInstall the chart (with Jenkins and Kafka).\n\nLaunch a Kafka computer on Jenkins controller by applying the following JCasC.\n\njenkins:\n  nodes:\n    - permanent:\n        name: \"test\"\n        remoteFS: \"/home/jenkins\"\n        launcher:\n          kafka: {}\n\nLaunch a single Remoting Kafka Agent pod.\n\nYou can check the chart state by running kubectl, for example:\n\n$ kubectl get all -n demo-helm\nNAME                                    READY   STATUS    RESTARTS   AGE\npod/demo-jenkins-998bcdfd4-tjmjs        2/2     Running   0          6m30s\npod/demo-jenkins-remoting-kafka-agent   1/1     Running   0          4m10s\npod/demo-kafka-0                        1/1     Running   0          6m30s\npod/demo-zookeeper-0                    1/1     Running   0          6m30s\n\nNAME                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE\nservice/demo-0-external           NodePort    10.106.254.187 19092:31090/TCP              6m30s\nservice/demo-jenkins              NodePort    10.101.84.33 8080:31465/TCP               6m31s\nservice/demo-jenkins-agent        ClusterIP   10.97.169.65 50000/TCP                    6m31s\nservice/demo-kafka                ClusterIP   10.106.248.10 9092/TCP                     6m30s\nservice/demo-kafka-headless       ClusterIP   None 9092/TCP                     6m30s\nservice/demo-zookeeper            ClusterIP   10.109.222.63 2181/TCP                     6m30s\nservice/demo-zookeeper-headless   ClusterIP   None 2181/TCP,3888/TCP,2888/TCP   6m31s\n\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/demo-jenkins   1/1     1            1           6m30s\n\nNAME                                     DESIRED   CURRENT   READY   AGE\nreplicaset.apps/demo-jenkins-998bcdfd4   1         1         1       6m30s\n\nNAME                              READY   AGE\nstatefulset.apps/demo-kafka       1/1     6m30s\nstatefulset.apps/demo-zookeeper   1/1     6m30s\n\nNext Phase Plan\n\nImplement Cloud API to provision Remoting Kafka Agent. ( JENKINS-57668)\n\nIntegrate Cloud API implementation with Helm chart. ( JENKINS-58288)\n\nUnit tests and integration tests.\n\nRelease version 2.0 and address feedbacks. ( JENKINS-58289)\n\nLinks\n\nPhase 1 Demo Video\n\nPhase 1 Presentation Slides\n\nRemoting over Apache Kafka plugin\n\nProject Page\n\nGitter Channel","title":"Remoting over Apache Kafka plugin with Kafka launcher in Kubernetes","tags":["remoting","kafka","kubernetes","helm","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg","srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/77b35/longnguyen.jpg 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/d4a57/longnguyen.jpg 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/68974/longnguyen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/ef6ff/longnguyen.webp 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/8257c/longnguyen.webp 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/6766a/longnguyen.webp 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/22bfc/longnguyen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"longngn","html":"<div class=\"paragraph\">\n<p>Long is a Software Engineering student at FPT University, Vietnam. He started to contribute for Jenkins from Google Summer of Code 2019 for the project <a href=\"https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/\">Remoting over Apache Kafka with Kubernetes features</a></p>\n</div>","id":"longnguyen","irc":null,"linkedin":null,"name":"Long Nguyen","slug":"/blog/authors/longnguyen","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":128,"numPages":100,"currentPage":17}},
    "staticQueryHashes": ["3649515864"]}