{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/91",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2010-08-02T00:00:00.000Z","id":"39857c82-9e13-5cee-bbe3-208d7d4e51d5","slug":"/blog/2010/08/02/dogfooding-hudson-were-looking-for-slaves/","strippedHtml":"As you may have noticed, thanks to the link on this and the other pages here at hudson-labs.org, the Hudson development community has recently introduced ci.hudson-labs.org, the official Hudson-on-Hudson instance. We’re currently building Hudson proper, the Hudson core RC branch, individual builds for the various Hudson plugins and Gerrit, as well as various libraries and infrastructure jobs Hudson depends on.\n\nWe’re currently running all those builds on a dedicated Linux agent, generously provided to the Hudson project by Digg, my employer. This has been great - except for the day when I’d just added all the individual plugin jobs for the first time, we haven’t had real problems with capacity. But we are limited in the environments we can run our tests on as a result of only having a Linux agent. We’re currently playing with a temporary Windows agent, but we’d really like to have at least one more permanent Windows agent, and a Mac agent as well, so that we can run Hudson’s core integration tests on those platforms as well. Since this is Hudson we’re talking about, we don’t need the agent to be in any given physical location - we just need it to be running the agent process and talking to our server. If you’re interested in helping us out with this, please contact me at andrew dot bayer at gmail dot com. Thanks!","title":"Dogfooding Hudson - We're Looking for Agents!","tags":["infrastructure","core","meta","jenkinsci"],"authors":[]}},{"node":{"date":"2010-07-28T00:00:00.000Z","id":"a07fba72-78a8-535c-9379-13f2b06ac4db","slug":"/blog/2010/07/28/hosting-your-hudson-plugin-at-github/","strippedHtml":"For as long as Hudson’s had a plugin model and development community, we’ve provided source code and binary hosting through our Subversion repo at java.net. But what if you’re a plugin developer and you don’t want to use Subversion? Well, we have an alternative for your source code: host it with Hudson on GitHub.\n\nTo get this in place, send an email to dev@hudson.dev.java.net (or ask in the IRC channel) asking to get a repository created for your plugin at Github. Make sure to include the name of the plugin and your Github username (and the Github usernames of any other developers who’ll be pushing to your plugin’s repo). If your plugin is already in Github, include the URL for the existing repo so that we can fork it. One of the Hudson admins will create the repository (forking if appropriate) and add the user(s) to the list of users with push access to the Hudson-hosted repositories at Github. Once you hear back from them, you’ll be able to push code to the new repository.\n\nYou will need to make a few changes to your plugin’s POM, as compared to what works for a plugin POM in the java.net Subversion tree.\n\nFirst, add the following to the ++ section:\n\norg.apache.maven.plugins\nmaven-release-plugin\n2.0\n\norg.apache.maven.scm\nmaven-scm-provider-gitexe\n1.3\n\nThis is needed to make sure we’re overriding the parent POM’s SCM provider settings. Next, add the following to the ++ section:\n\norg.jvnet.wagon-svn\nwagon-svn\n1.9\n\nThis is needed because we’re still going to be using wagon-svn to deploy the artifacts in the release process. Lastly, add an ` section, within the ` section of the POM, like the following:\n\nscm:git:git://github.com/hudson/your-plugin-repo.git\nscm:git:git@github.com:hudson/your-plugin-repo.git\nhttps://github.com/hudson/your-plugin-repo\n\nAs with the first section, this is needed to override the default SCM settings in the parent POM. Make sure to change \"your-plugin-repo\" to your actual plugin repository name, of course! It’d also be a good idea to put a link to your Github repo on your plugin’s wiki page at the Hudson wiki, since the default source link will go to Subversion.\n\nNow, with these changes in place, committed and pushed to the master branch in your plugin’s repository, you should be able to run \"mvn release:prepare release:perform\" just as you would if the plugin were hosted in Subversion, with your plugin showing up in the Update Center within a few hours. Be sure that you’ve configured the login information for the java.net Maven repository, as detailed here - this is still needed for plugins hosted at and released from Github, since Hudson’s Maven repository still lives at java.net. If you run into any issues releasing your plugin from Github, first be sure to review the wiki page on plugin hosting, which addresses many of the issues you may encounter when running the Maven release plugin.\n\nIf you’re still stumped, feel free to email the Hudson developer list or ask in the IRC channel for help.","title":"Hosting your Hudson plugin at Github","tags":["development","meta","plugins","tutorial","jenkinsci"],"authors":[]}},{"node":{"date":"2010-07-27T00:00:00.000Z","id":"bd805a6f-8767-5565-9c87-25112f499520","slug":"/blog/2010/07/27/hudson-1-368-released/","strippedHtml":"Regular readers will recognize that I’ve been slacking off quite a bit lately with my release announcements, my apologies. With the release of 1.368 on Sunday, which fixed a few fairly important bugs, I figured I’d dusty off my blogging fedora and give this a shot.\n\nThis release has three bug fixes in it which were causing some issues for some users, particularly those deploying Hudson inside the recently released Tomcat 7.0 (see issue 6738).\n\nHudson users utilizing the JDK auto-installation feature between different platforms may have been affected by issue 6880 which was also fixed in this release.\n\nBringing up the rear is the fix to issue 7004 which detailed a few discrepencies between the /buildWithParameters and the /build remote APIs.\n\nIf you’re not affected by these issues, you may want to wait for the soon-to-be-released 1.369 which has even more juicy bug fixes in it (with a dash of enhancements) to upgrade.\n---\n\nYou can go grab the latest .war file straight from our OSL mirror or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.368 Released!","tags":["general","core","news","releases","jenkinsci"],"authors":[]}},{"node":{"date":"2010-07-22T00:00:00.000Z","id":"08e48751-f7b4-532a-b55b-cdc118c5acc2","slug":"/blog/2010/07/22/continuous-deployment-on-the-new-digg/","strippedHtml":"In my capacity as Build Guy at Digg, I’ve written up a blog post on our new continuous deployment/code review/pre-tested commit workflow. We’re using a combination of Hudson, Git and Gerrit, Selenium and more to make sure that every change going to Digg’s new site has been thoroughly tested.\n\nRead the whole post, with all the juicy details over on Digg’s Technology Blog!","title":"Continuous Deployment on the new Digg","tags":["general","core","guest post","links","plugins","jenkinsci"],"authors":[]}},{"node":{"date":"2010-07-21T00:00:00.000Z","id":"1655158d-bb1f-5d8a-b06c-3ec207baaa4a","slug":"/blog/2010/07/21/hudson-with-selenium-and-sauce-on-demand-videos/","strippedHtml":"A few weeks ago, Kohsuke stopped by the San Francisco Selenium Meetup hosted by Sauce Labs to talk about all things Selenium and Hudson related (with a bit of Sauce in there too).\n\nThe good folks over at Sauce Labs have gotten around to posting some of the videos taken with Kohsuke.\n\nInstead of embed the videos, I wanted to directly link to the post and make sure that you all went over to check out Sauce Labs, they’re up to some interesting things over there.","title":"Hudson with Selenium and Sauce On-Demand Videos","tags":["general","interview","meetup","jenkinsci"],"authors":[]}},{"node":{"date":"2010-07-13T00:00:00.000Z","id":"598e564d-d43d-515d-905f-8cb32ae06cec","slug":"/blog/2010/07/13/monitor-hudson-from-your-android/","strippedHtml":"So you’ve got your fancy Android cell phone and you’re thinking to yourself \"besides feeling smugly superior to iPhone users, what can I do with this thing?\" Perhaps you should be considering using it as a phone but if that’s too boring, check out the new and improved Hudson Mood widget for Android ! The latest release brings support for multiple servers and fancier graphics.\n\nIf you’re interested in installing the widget, search for \"Hudson Mood\" in the Android Market, and be sure to thank Siarhei Dudzin for creating the widget!","title":"Monitor Hudson from your Android","tags":["general","just for fun","releases"],"authors":[]}},{"node":{"date":"2010-07-12T00:00:00.000Z","id":"0a5963d9-2674-5dc0-b82f-023e853d4a5f","slug":"/blog/2010/07/12/updated-chrome-extension/","strippedHtml":"The developer for the Hudson extension for Google Chrome, Sebastian Sanitz, emailed the users@ list today to inform the community of an update to his fantastic extension .\n\nSebastian’s extension monitors ci.hudson-labs.org by default, but the URL and polling interval are both trivial to change. When any of the builds in the configured URL fail, you’ll see a red \"Fail\" indicator, otherwise green \"Ok\".\n\nIf you’re interested in contributing to the plugin, good news! It’s open source! You can find it on GitHub.","title":"Updated Chrome Extension","tags":["general","just for fun","releases"],"authors":[]}},{"node":{"date":"2010-07-08T00:00:00.000Z","id":"2261a8e4-1548-5ee0-99d2-1450dc19da3f","slug":"/blog/2010/07/08/a-python-love-story-virtualenv-and-hudson/","strippedHtml":"Over the past year Hudson has grown tremendously, both within the Java community and outside of it. Partially thanks to ( Titus Brown)'s PyCon 2010 Atlanta coverage of continuous integration for Python (which we’ve covered before), Hudson has made great strides within the Python community as well. In my experience, the majority of Python developers are not using Hudson to build anything, unless they have C extensions, but rather to test their packages, which presents its own set of specific requirements for jobs. Jobs for testing Python code need to be able to reliaby reproduce an environment with the same set of dependencies from one run to the next in order to provide consistent testing. Unlike their Java counterparts, Python developers cannot rely on a powerful system like Maven2 for enumerating build/test targets or defining their project’s dependencies in their jobs; fortunately, w e can have something close: virtualenv and pip. Virtualenv does exactly what you might expect it to, it creates a \"virtual environment\" with custom site-packages directory, and modified python executable. Using virtualenv you can create a staged environment to use for running unit and integration tests. Adding pip alongside that and you have a fantastic Python package manager/installer to use with the virtual environment. Below, I’ve outlined the steps required to use virtualenv and pip to automatically manage a custom environment for your Python jobs.\n\nThe Recipe\n\nFor this recipe to work, you should make sure that your agent machines all have virtualenv and pip installed and accessible from your agent agent’s $PATH. For Mac OS X users, sudo easy_install virtualenv should do the trick, Linux users should be able to run sudo [aptitude/yum/zypper] install python-virtualenv with your respective package manager. You will also need the SetEnv Plugin installed in Hudson.\n\nStep 1\n\nInside of the job’s configuration page ( http;//hudson/job/configure), we need to define an environment variable for the job. Using the SetEnv plugin, define a new $PATH : `PATH=.env/bin:$PATH\n\nWhat this will do is modify the $PATH environment variable for all of the \"Execute shell\" build steps in your job. As you might have guessed, we’re going to install the virtualenv in.env in the workspace root directory.\n\nStep 2\n\nTo set up the virtualenv, you want to add a build step of type \"Execute shell\" and paste the following commands into the text area:\n\nif [ -d \".env\" ]; then\n  echo \"**> virtualenv exists\"\nelse\n  echo \"**> creating virtualenv\"\n  virtualenv .env\nfi\n\nThis will create a virtualenv the first time the job runs on a particular agent, a virtualenv that will persist until the workspace is cleared. Since we’re going to install dependencies in the virtualenv, we want to keep it around between jobs to reduce the amount of network hits to download packages.\n\nStep 3\n\nWith our virtualenv and our $PATH properly set up, the job can now properly install dependencies into its virtualenv, this is where pip shines. A little known feature of pip allows you to define a \"requirements file\" which enumerates the packages to install. In my example project, I defined the following requirements in a file called pip-requires.txt\n\neventlet>=0.9.9\nnose>=0.11.3\nMySQL-python>=1.2.3c1\n\nIn my hypothetical example, I’ll need nose to run my tests, while eventlet and MySQL-python are required for my project to properly run. With the pip-requires.txt file in the root of my source repository, I can add an additional \"Execute shell\" build step that does the following:\n\npip install -r pip-requires.txt\n\nAssuming the $PATH environment variable was properly defined, this will use the virtualenv’s version of pip and it will install the packages defined in pip-requires.txt into the virtualenv! With the dependencies all properly installed in the virtualenv, I can now configure the remainder of my job to build my project and execute the tests. Pretty snazzy if you ask me!","title":"A Python Love Story: Virtualenv and Hudson","tags":["general","guest post","tutorial"],"authors":[]}}]}},"pageContext":{"limit":8,"skip":720,"numPages":100,"currentPage":91}},
    "staticQueryHashes": ["3649515864"]}