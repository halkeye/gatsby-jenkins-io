{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/23",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-12-10T00:00:00.000Z","id":"a9e14a72-e8bc-5d64-8f07-6daa5be4a88f","slug":"/blog/2018/12/10/kubecon-is-here/","strippedHtml":"The time has come - KubeCon + CloudNativeCon North America 2018 has arrived.\nThe conference has completely sold out and the schedule is jam packed with interesting talks.\n\nIf you’re among those with tickets, here are a couple Jenkins related events that might interest you:\n\nOn Wednesday at 3:40pm, Carlos Sanchez will be presenting\nJenkins X: Continuous Delivery for Kubernetes in\nTahoma 3/4 @ TCC.\n\nOn Tuesday at 2:35pm, Jonathan Hess & Loren Trout from\nSAP will discuss how\nMigrating Jenkins to Kubernetes Broke Our Brains in Room 606-609.\n\nI look forward to seeing you there!","title":"KubeCon + CloudNativeCon North America 2018 is Here!","tags":["cloud-native","kubernetes","kubecon"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2018-12-10T00:00:00.000Z","id":"eb4020fb-4167-5e6e-8795-9cfb2603d8a6","slug":"/blog/2018/12/10/outreachy-audit-log-plugin/","strippedHtml":"This year marks the first time the Jenkins project is participating in Outreachy.\nOutreachy is a program similar to Google Summer of Code (GSoC) where interns work on open source projects for a paid stipend.\nThe key difference is that Outreachy reaches out to underrepresented groups and those who face systemic bias or discrimination in the technology industry in their home country.\nOnce I learned about this program, I immediately volunteered to mentor as the concept strongly aligns with my ideals of inclusiveness and community building.\nI’m happy to report that both the Jenkins project,  and my employer CloudBees, have been very supportive of this program.\n\nExpanding on our previous efforts to mentor students in GSoC, this year we’ve joined up with Outreachy to mentor two interns.\nOur interns for this season of Outreachy, Latha Gunasekar and David Olorundare, will be working with me on audit logging support for Jenkins.\nI am excited to welcome both David and Latha, and am looking forward to what they will learn about both professional software engineering and contributing to an open source community.\nStay tuned for blog post entries introducing both people in the near future.\n\nThe audit logging support project forms a new connection between Jenkins and Apache Log4j which offers great opportunities for our interns to learn more about open source governance and meet new people.\nAs a bonus, the project aims to provide the tooling necessary to support advanced observability concerns such as running anomaly detection on authentication events to detect potential intrusion attempts.\nWe will also be authoring a JEP to detail the audit logging API provided by the plugin and how other plugins can define and log their own audit events besides the Jenkins Core ones that come with the plugin.\n\nI’m looking forward to the great work we’ll be doing together, and I hope that we’ll be able to welcome more Outreachy interns in the future!","title":"Outreachy internships to add audit logging support to Jenkins","tags":["community","outreachy","outreachy2018"],"authors":[{"avatar":null,"blog":"https://musigma.blog/","github":"jvz","html":"<div class=\"paragraph\">\n<p>Mathematician, software engineer, and free software evangelist.\nWorks for CloudBees on the <a href=\"https://jenkins.io/security/\">Jenkins Security Team</a> along with other Jenkins community work since 2018.\nPMC Chair of the <a href=\"https://logging.apache.org/\">Apache Logging Services project</a> and Secretary for the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.</p>\n</div>","id":"jvz","irc":null,"linkedin":null,"name":"Matt Sicker","slug":"/blog/authors/jvz","twitter":"jvz"}]}},{"node":{"date":"2018-12-10T00:00:00.000Z","id":"432aab4d-1fb0-5872-b4e3-0530602e2a92","slug":"/blog/2018/12/10/the-official-Docker-image/","strippedHtml":"There are now three different Docker Hub repositories that are or have been used as the \"official\" Jenkins image.\nThis article aims at providing a clarification about which one is the current official one (as of December 2018 :-)).\n\nThe official one\n\ndocker pull jenkins/jenkins\n\ni.e. https://hub.docker.com/r/jenkins/jenkins/ is the right repository to use.\n\nI also documented some time ago on my blog the recommended way to run Jenkins using the official Docker image.\n\nThe deprecated ones\n\njenkins\n\nDeprecated since a long time already.\nA short version of why we stopped using and updating this image is that we never had a way to get our images published without having each time to go through a manual process.\n\njenkinsci/jenkins\n\nDeprecated since a long time too, but for easing transition, we had kept updating both jenkins/jenkins (the right one) and jenkinsci/jenkins together.\nWe stopped updating jenkinsci/jenkins in early December 2018 (cf. INFRA-1934 for details if you are interested)\n\nThanks for reading!","title":"Official Jenkins image to use from Docker Hub","tags":["docker"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}}},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/authors/batmat","twitter":"bmathus"}]}},{"node":{"date":"2018-12-05T00:00:00.000Z","id":"f0b2bc67-df2c-5d35-83cb-1f19d82bdcd8","slug":"/blog/2018/12/05/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.154 and LTS 2.150.1, that fix multiple security vulnerabilities.\nSince 2.150.1 is the first release in the new LTS line, we also released 2.138.4, a security update for the previous LTS line.\nThis allows administrators to install today’s security fixes without having to upgrade to the new LTS line immediately.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes, see our LTS 2.138.4 upgrade guide.\n\nA note on previously released changes related to this fix\n\nIn the Jenkins core security updates released in August and October, we also included security improvements that can be disabled by setting various system properties.\nThose changes are an essential part of the SECURITY-595 fix, so we strongly recommend not disabling them for any reason.\nPreviously published documentation has been updated.","title":"Important security updates for Jenkins","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and member of the <a href=\"/security/#team\">Jenkins security team</a>.\nHe was the inaugural Jenkins security officer from 2015 to 2021.\nHe sometimes contributes to developer documentation and project infrastructure in his spare time.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-11-13T00:00:00.000Z","id":"7987b7c8-a622-559a-9886-2bb78562c4ac","slug":"/blog/2018/11/13/martinda-gsoc-mentor-summit-experience/","strippedHtml":"This year, the Jenkins organization participated in the Google Summer of Code Mentor Summit\nat the Google office in Sunnyvale on Oct 12, 13 and 14, 2018.\nThe GSoC Mentor Summit is where mentors of all organizations participating in the GSoC program are invited each year\nto learn and network with mentors from other organization, and make GSoC a better program.\nThis is the second time Jenkins mentors have participated in the summit, the first time was in 2016.\n\nExceptionally, three Jenkins GSoC mentors were invited to the summit this year.\nNormally only two mentors are invited, but when there are cancellations, Google draws a name at random from the waiting list,\nand the Jenkins organization was lucky enough and sent an extra mentor this year!\nThe mentors participating this year were Oleg Nenashev, Jeff Pearce and Martin d’Anjou.\n\nIt is worth mentioning that the Mentor Summit is not a typical conference where you go\nsit and listen at what speakers have to say, quite the contrary. The Mentor Summit is an unconference\nwhere participants are invited to fill empty time slots with their own topic of discussion.\n\nFriday Oct 12\n\nPre-conference meeting\n\nThe mentors had a short pre-conference meeting to reflect on the Jenkins participation in the 2018 GSoC program,\nand to plan for 2019.\nWe were joined at this meeting by Lloyd Chang, whom we had met at Jenkins World 2018.\nThank you Lloyd for joining us! A few ideas we had for 2019 are:\n\nMove project proposals to individual Google Documents\n\nCreate a template for project proposed by potential mentors and by project champions\n\nCreate an Organization Administrator Guide for future Jenkins GSoC project admins\n\nOther preparations we agreed to work on include a review of the 2018 feedback and the creation\nof an Epic capturing the action items in preparation for 2019.\nWe are also planning on making progress on the GSoC Budget process described in JEP-8.\n\nSummit Starts!\n\nThe summit started by a welcoming dinner at the Google Cafeteria and an evening session\nwhere we were explained how the unconference would work. We proposed a few topics:\ndealing with CPT lost slots, motivating mentors, and Open Source Hardware ASIC/FPGA.\n\nOn thing to say is that everyone at the conference had heard of Jenkins, or was already using Jenkins.\nLots of people came to tell us their Jenkins experience.\n\nI noticed this too - made me feel proud to be part of the Jenkins project.\n\n— Jeff Pearce\nJenkins GSoC mentor in 2018\n\nSaturday Oct 13\n\nThe morning started with a couple of announcements from Google.\nThe first one was that Google is thinking of creating a program called \"Google Season of Docs\" (GSoD for short),\nwhere technical writers would be paired with Open Source Organizations to help them write documentation such as:\n\nHigh-impact tutorials\n\nSet of How-To Guides\n\nContributor’s Guide\n\nDocumentation refactoring\n\nPlain documentation\n\nWe have additional details regarding this in the\nGSoC Mentor Summit Notes\nand we quickly concluded that if this program comes to life, Jenkins should be a participating organization.\n\nThe other announcement made by the GSoC administrators is that GSoC may take a different form in 2020.\nHowever, not much more information has been made available at this time.\nThe program has been operating for 13 years, and in 2020 it will have been 15 years.\n\nThe announcements were followed by a series of morning lightning talks.\nThis is where organizations showcase what their students accomplished during the program.\nThis is when we had a bit of a surprise…​\n\nOleg who had signed up for the evening lightning talks, was watching the talks while casually preparing slides for his evening presentation.\nBut something unusual happened: many talks were shorter than the 3-minute allotted, and suddenly we were ahead of schedule.\nThat’s when Oleg was called to the stage.\nI had no idea whether his slides were ready or not since he had just leaned over to me to say that he wanted to talk about all 3 projects we had this year.\nNot knowing how far he had gotten into refactoring the slides, this was going to be…​ interesting.\nBeing an experienced presenter, Oleg pulled it off brilliantly.\nThe slides were effectively ready (how he managed that I have no idea),\nbut you can see the slides of his lightning talk here:\nJenkins Remoting over Apache Kafka.\n\nThen there were the unconference sessions. Some of the sessions we attended are:\n\nDocumentation\n\nAttracting and retaining mentors (facilitated by Martin)\n\nOrganizing and motivating volunteers and mentors\n\nGetting students from coding/boot camps involved in open source\n\nRetaining students after GSoC\n\nOpen Event management System\n\nGSoC Feedback\n\nWe have notes for all the session in the main document.\nSome sessions were captured in separated documents which are linked from the main document, or from this blog post.\n\nThere were lots of good ideas in those sessions, and we will do what we can next year to implement some of them.\n\nSome organizations have said that the key for student retention\nis to give them responsibilities and tasks after the program is over.\nWe have certainly seen that this year, with one of our students asking for more responsibilities and wanting to know how\nhis plugin project could continue to grow within the Jenkins project (while at the same time help out on another GSoC plugin!).\n\nIn the evening was the second round of lightning talks.\nJeff Pearce presented the Code Coverage API Plugin lightning talk,\n(he was not caught by surprise).\n\nAfter the lightning talks, we were invited to hang out at the cafeteria and on the patio, to exchange stickers,\nnetwork with mentors of other organizations, and enjoy late evening snacks, music and of course the chocolate table!\n\nSunday Oct 14\n\nOn Sunday, the sessions continued. An interesting session was \"Beyond GSoC, What can Google do?\".\nOne person got a big round of applause when he said: \"Cloud credits\". It turns out the GSoC program admins\nhave been trying to get that for us for about 3 years. Google may be big and powerful, but some things\nare hard and remain hard in the corporate world.\n\nAn interesting suggestion was made by Oleg, and it would be to have a program with smaller, shorter term\ncommitments, something that would encourage more granular contributions but would not require a 4-month\nlong commitment. This was noted by the GSoC program admins.\n\nThen we attended a number of sessions:\n\nOpen Hardware ASIC/FPGA (facilitated by Martin)\n\nCommunity Metrics\n\nOutreachy (Jenkins is participating in this program)\n\nFailing a student\n\nBurnout (of mentors and org admins)\n\nThen the day came to an end with some last words by Google thanking all the mentors and volunteers who\nrun this program in their organizations.\n\nReturn trip\n\nI would now like to add a personal note. After the summit, like many others I fly back home,\nso I spend the evening at the SFO international terminal waiting for my late night flight.\nThat is where I get to meet more mentors, as some of us still wear our badges and T-Shirts,\nand also recognize each other from being at the conference.\nAnd funny enough, there are so many geeks at that terminal\nthat we may have recruited, among the passengers, a mentor to another org for next year!\n\nWant a GSoC student to work on your project in 2019?\n\nWe have already started the preparations for GSoC 2019.\nAnd we cannot do this without the participation of the Jenkins community.\nWe are already looking for:\n\nMentors from the Jenkins Special Interest Groups\n\nMentors from any background and any provenance (being a Jenkins developer is NOT required)\n\nProject proposals\n\nStudents and their proposals\n\nLots of people are afraid that mentoring a student will take a lot of their time.\nIf you feel that way, you are not alone. It does take some time. In my case, I spend 5 to 8 hours per week on mentor tasks (more at the start, less at the end).\nTo make it easier on mentors who likely have full time jobs and life commitments, we define different mentor roles:\n\nProject champion co-mentor : this is the mentor who proposes the idea, but may not have all the Jenkins code expertise needed. This mentor works with the student to define the project and acts mostly as a \"customer\" of the project. This mentor usually know enough about coding to comment on pull-requests with regards to the over quality, style and features of the code.\n\nTechnical co-mentor : this is the mentor who knows enough about the Jenkins code to guide the student on coding, and to provide Jenkins specific code reviews on pull-requests, but has limited involvement outside the coding activity of the student.\n\nThere is a third role which is:\n\nSubject Matter Expert : these individuals are not mentors, but we reach out to them 3-4 times during the project for advice and guidance, and sometimes complicated programming challenges.\n\nIf you have questions or are curious about the program,\ncontact us on the GSoC Gitter SIG chat.\n\nWe would like to emphasize that project proposals are not limited to \"big projects\".\nFor example, it is perfectly fine to have a proposal that is a collection of related Jira issues that aim to improve your project,\nor a list of tasks that need to be done for your project.\nWriting documentation is outside the scope of GSoC, but automating\ndocumentation generation, as long as it is mostly about writing code, is within the scope of GSoC.\n\nWe look forward working with the Jenkins community on GSoC 2019!","title":"Google Summer of Code Mentor Summit 2018","tags":["community","events","gsoc","gsoc2018"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#7898d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png","srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/4c2a5/martinda.png 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/8bef2/martinda.png 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/2864c/martinda.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/5abcf/martinda.webp 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/410d2/martinda.webp 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/6f814/martinda.webp 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/ca864/martinda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":136}}},"blog":null,"github":"martinda","html":"<div class=\"paragraph\">\n<p>Martin is a Jenkins community member. He participates since 2016 in the Jenkins GSoC program as a mentor, and more recently as an organization admin.\nHe currrently works in ASIC/FPGA Development Automation, using Jenkins, Gradle, Make, Artifactory, and a million other tools and languages.</p>\n</div>","id":"martinda","irc":"martinda","linkedin":null,"name":"Martin d'Anjou","slug":"/blog/authors/martinda","twitter":"martindanjou14"}]}},{"node":{"date":"2018-11-12T00:00:00.000Z","id":"19ad29c6-3758-5c7b-bc08-31222e0bfca7","slug":"/blog/2018/11/12/inspecting-binaries-with-jenkins/","strippedHtml":"In a past blog post,\nDelivery Pipelines, with Jenkins 2, SonarQube, and Artifactory,\nwe talked about pipelines which result in binaries for development versions, and in\nDelivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production,\nwe examined ways to consistently promote applications toward production. In this blog post, I continue on both by discussing more details on security related quality gates\nand bringing this together with the handling of Docker images.\n\nUse case: Foster security on given, containerized business application\n\nSecurity is an overloaded term with varying meaning in different contexts. For this contribution, I consider security as the sum of rules regarding vulnerabilities\n(Common Vulnerability and Exposure, CVE), in binaries. In a past blog post, we’ve identified SonarQube already, as a very helpful tool to identify flaws\nin source code, particularly concerning reliability (bugs), vulnerabilities (security, e.g. CWE, that is common weakness enumaration, and OWASP, that is the Open Web Application Security Project), and\nmaintainability (code smells). Now it is a good time to add another tool to the chain, that is Twistlock, for inspection binaries for security issues.\nFeatures of Twistlock include\n\nCompliance and vulnerability management, transitively\n\nRuntime defense\n\nCloud-native CI/CD support\n\nBroad coverage of supported artifact types and platforms\n\nAPI, dashboards, and Jenkins integration, with strong configuration options\n\nThe underlying use case can be derived from several real-world security initiatives, in enterprises, based on given containerized applications. In practice, it is not a surprise that after adding such new\nquality gates, you identify historically grown issues. However, there are many good reasons to do so. You don’t need any Word documents to check any governance criteria manually, rather\nexecution and reporting are done automatically and also part of the actions are taken automatically. And above all, of course, your application is quality assured regarding known vulnerability issues, aligned with\nthe DevOps approach: development is interested in quick feedback whether their change would introduce any vulnerabilities, and operations is interested in insights whether and\nhow running applications are affected if a new CVE is discovered.\n\nThe term DevSecOps was coined to explicitely add security concerns to DevOps.\nIn my opinion, security is already inherent part of DevOps.\nThus, there is no strong reason to introduce a new word. Surely, new words are catchy.\nBut they have limits.\nOr have you ever experienced NoDev, the variant of DevOps where features are suddenly falling from the sky and deployed to production automatically?\n\nConceptually, container inspection is now part of the delivery pipeline and Twistlock processing is now triggered once we have produced our Docker images, see below, in order to get\nfast feedback.\n\nSoftware is staged over different environments by configuration, without rebuilding. All changes go through the entire staging process, although defined\nexception routines may be in place, for details see Michael Hüttermann, Agile ALM (Manning, 2012). The staged software consists of all artifacts which\nmake up the release, consistently, including the business application, test cases, build scripts, Chef cookbooks, Dockerfiles, Jenkins files to build all\nthat in a self-contained way, for details see Michael Hüttermann, DevOps for Developers (Apress, 2012).\n\nThis blog post covers sample tools. Please note, that there are also alternative tools available, and the best target architecture is aligned with concrete requirements and given basic\nconditions. Besides that, the sample toolchain is derived from couple of real world success stories, designed and implemented in the field. However, this blog post\nsimplifies and abstracts them in order to stay focussed while discussing the primitives of delivery units. For example, aggregating multiple Docker images with ASCII files, does not change the\nunderlying primitives and their handlings. For more information on all parts of the blog post, please consult the respective documentation, good books or attend fine conferences. Or go to the extremes: talk to your colleagues.\n\nIn our sample process, we produce a web application that is packaged in a Docker image. The produced Docker images are distributed only if the dedicated quality gate passes.\nA quality gate is a stage in the overall pipeline and a sum of defined commitments, often\ncalled requirements, the unit of work must pass. In our case, the quality gate comprises inspection of produced binaries and it fails if vulnerabilities of severity 'critical' are found.\nWe can configure Twistlock according to our requirements. Have a look how we’ve integrated it into our Jenkins pipeline, with focus on detecting vulnerabilities.\n\nJenkinsfile (excerpt): Twistlock inspection triggered\n\nstage('Twistlock: Analysis') { (1)\nString version = readFile('version.properties').trim() (2)\nprintln \"Scanning for version: ${version}\"\n    twistlockScan ca: '', cert: '', compliancePolicy: 'critical', \\\n        dockerAddress: 'unix:///var/run/docker.sock', \\\n        ignoreImageBuildTime: false, key: '', logLevel: 'true', \\\n        policy: 'critical', repository: 'huttermann-docker-local.jfrog.io/michaelhuettermann/alpine-tomcat7', \\ (3)\nrequirePackageUpdate: false, tag: \"$version\", timeout: 10\n}\n\nstage('Twistlock: Publish') { (4)\nString version = readFile('version.properties ').trim()\n    println \"Publishing scan results for version: ${version}\"\n    twistlockPublish ca: '', cert: '', \\\n        dockerAddress: 'unix:///var/run/docker.sock', key: '', \\\n        logLevel: 'true', repository: 'huttermann-docker-local.jfrog.io/michaelhuettermann/alpine-tomcat7', tag: \"$version\", \\\n        timeout: 10\n}\n\n1\nTwistlock inspection as part of the sequence of stages in Jenkinsfile\n\n2\nNailing down the version of the to be inspected image, dynamically\n\n3\nConfiguring analysis including vulnerability severity level\n\n4\nPublishing the inspection results to Twistlock console, that is the dashboard\n\nNow let’s start with the first phase to bring our application in shape again, that is gaining insight about the security related flaws.\n\nPhase 1: Gain insights about security related flaws\n\nAfter we’ve introduced the new quality gate, it failed, see image above. As integration with other tools, Jenkins is the automation engine and does provide helpful context information,\nhowever, those cannot replace features and data the dedicated, triggered tool does offer. Thus, this is the moment to switch to the dedicated tool, that is Twistlock. Opening\nthe dashboard, we can navigate to the Jenkins build jobs, that is the specific run of the build, and the respective results of the Twistlock analysis. What we see now is a list\nof vulnerabilities, and we need to fix those of severity critical in order to pass the quality gate, and get our changes again toward production. The list shows entries of\ntype jar, that is a finding in a binary as part of the Docker image, in our case the WAR file we’ve deployed to a web container (Tomcat), and of type OS, those are issues of the underlying image itself, the\noperating system, either part of the base image, or as a package added/changed in our Dockerfile.\n\nWe can now easily zoom in and examine the vulnerabilities of the Docker layers. This really helps to structure work and identify root causes. Since, typically,\na Docker image extends a Docker base image, the findings in the base image are shown on the top, see next screenshot, grouped by severity.\n\nOther Docker layers were added to the base image, and those can add vulnerabilities too. In our case, the packaged WAR file obviously contains a vulnerability. The next image shows how we examine that finding, while this time\nexpanding the Twistlock wizard (that is the plus sign) to directly see the list of found vulnerabilities.\n\nFinding and visualizing the issues are a very good first step, and we’ve even made those findings actionable, so we now have to take action and address them.\n\nPhase 2: Address the findings\n\nTo address the findings, we need to split our initiative into two parts:\n\nFixing the critical vulnerabilities related to the Docker image (in our case largely the base image)\n\nFixing the critical vulnerabilities related to the embedded deployment unit (in our case the WAR)\n\nLet’s proceed bottom up, first coping with the Docker base image.\n\nThis is an easy example covering multiple scenarios particularly identifying and fixing vulnerabilities in transitive binaries, i.e. binaries contained in\nother binaries, e.g. a Docker image containing a WAR file that in turn contains libraries. To expand this vertical feasibility spike, you can easily add\nmore units of each layer, or add more abstractions, however, the idea can always be nailed down to the primitives, covered in this blog post.\n\nLet’s now have a look at the used Docker image by looking at the used Dockerfile.\n\nDockerfile: The Dockerfile based on Alpine, running OpenJDK 8\n\nFROM openjdk:8-jre-alpine (1)\nLABEL maintainer \"michael@huettermann.net\"\n\n# Domain of your Artifactory. Any other storage and URI download link works, just change the ADD command, see below.\nARG ARTI\nARG VER\n\n# Expose web port\nEXPOSE 8080\n\n# Tomcat Version\nENV TOMCAT_VERSION_MAJOR 9 (2)\nENV TOMCAT_VERSION_FULL  9.0.6\n\n# Download, install, housekeeping\nRUN apk add --update curl &&\\ (3)\napk add bash &&\\\n  #apk add -u libx11 &&\\ (4)\nmkdir /opt &&\\\n  curl -LO ${ARTI}/list/generic-local/apache/org/tomcat/tomcat-${TOMCAT_VERSION_MAJOR}/v${TOMCAT_VERSION_FULL}/bin/apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz &&\\\n  gunzip -c apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz | tar -xf - -C /opt &&\\\n  rm -f apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz &&\\\n  ln -s /opt/apache-tomcat-${TOMCAT_VERSION_FULL} /opt/tomcat &&\\\n  rm -rf /opt/tomcat/webapps/examples /opt/tomcat/webapps/docs &&\\\n  apk del curl &&\\\n  rm -rf /var/cache/apk/*\n\n# Download and deploy the Java EE WAR\nADD http://${ARTI}/list/libs-release-local/com/huettermann/web/${VER}/all-${VER}.war /opt/tomcat/webapps/all.war (5)\n\nRUN chmod 755 /opt/tomcat/webapps/*.war\n\n# Set environment\nENV CATALINA_HOME /opt/tomcat\n\n# Start Tomcat on startup\nCMD ${CATALINA_HOME}/bin/catalina.sh run\n\n1\nBase image ships OpenJDK 8, on Alpine\n\n2\nDefined version of web container\n\n3\nApplying some defined steps to configure Alpine, according to requirements\n\n4\nUpdating package itself would address one vulnerability already\n\n5\nDeploying the application\n\nBy checking available versions of the official OpenJDK Alpine image, we see that there’s a newer version 8u181 which we could use.\nWe can zoom in and study release notes and contents, or we just pragmatically switch the base image to a more recent version. Often it is a good idea\nto upgrade versions regularly, in defined intervals. This leads to the following change in the Dockerfile.\n\nDockerfile (excerpt): The Dockerfile based on Alpine, running OpenJDK 8u181\n\nFROM openjdk:8u181-jre-alpine (1)\nLABEL maintainer \"michael@huettermann.net\"\n\n1\nBase image is now OpenJDK 8u181, on Alpine\n\nThere are more options available to fix the issues, but let’s proceed to the second part, the vulnerabilities in the deployment unit.\n\nBefore we push this change to GitHub, we also address the vulnerability issue in the deployment unit, that is jetty-io. Here we are a bit unsure about\nwhy, in this specific use case, the library is used. To retrieve more information about dependencies, we run a dependency:tree command on our Maven\nbased project. We now see that jetty-io is transitively referenced by org.seleniumhq.selenium:htmlunit-driver. We can surely discuss why this is a compile\ndependency and the libraries are shipped as part of the WAR, but let’s consider this to be given according to requirements, thus we must take special attention now\nto version 2.29.0 of the specific library.\n\nAlso here we can browse release notes and content (particularly how those libs are built themselves), and come to the conclusion to\nswitch from the used version, that is 2.29.0, to a newer version of htmlunit-driver, that is 2.31.1.\n\npom.xml (excerpt): Build file\n\n(1)\n\norg.seleniumhq.selenium\nselenium-java\n3.14.0\n\norg.seleniumhq.selenium (2)\nhtmlunit-driver\n2.31.1\n\njunit\njunit\n4.7\n\n1\nPart of the underlying POM defining dependencies\n\n2\nDefinition of the dependency, causing the vulnerability finding; we use a newer version now\n\nOK, now we are done. We push the changes to GitHub, and our GitHub webhook directly triggers the workflow. This time the quality gate passes, so it\nlooks like our fixes did address the root causes and eliminated those with the configured threshold severity.\n\nFinally, after running through our entire workflow, that is made up of different pipelines, our inspected and quality assured container does successfully\nrun in our production runtime environment, that is on Oracle Cloud.\n\nCrisp, isn’t it?\n\nSummary\n\nThis closes our quick walkthrough of how to inject security related quality gates into a Jenkins based delivery pipeline.\nWe’ve discussed some concepts and how this can look like with sample tools.\nIn the center of our efforts, we used Jenkins, the swiss army knife of automation.\nWe enriched our ecosystem by integrating couple of platforms and tools, above all Twistlock.\nAfter this tasty appetizer you are ready to assess your own delivery pipelines,\nconcepts and tools, and to possibly invest even more attention to security.\n\nReferences\n\n'Agile ALM', Manning, 2011\n\n'DevOps for Developers', Apress, 2012\n\nDocker, the standard to develop and ship set of changes\n\nDocker images, shipping OpenJDK\n\nOracle Cloud Infrastructure, for containers\n\nAlpine Linux\n\nSonarQube, the language/platform agnostic Continuous Inspection tool\n\nTwistlock, the container security platform\n\nSources on GitHub\n\nASCII, commonly used standard to work on primitives, such as Docker (and their aggregations)\n\nCommon Vulnerabilities and Exposures\n\nHolistic pipelines, Live 15-minute Jenkins Demos, Part 1, on YouTube\n\nHolistic pipelines, Live 15-minute Jenkins Demos, Part 2, on YouTube\n\nDelivery Pipelines, with Jenkins 2, SonarQube, and Artifactory\n\nDelivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production","title":"The Silence of the Lambs: Inspecting binaries with Jenkins","tags":["devops","devsecops","security","vulnerabilities","compliance","twistlock"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg","srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/534e5/michaelhuettermann.jpg 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/99887/michaelhuettermann.jpg 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/c09ea/michaelhuettermann.jpg 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/76fd4/michaelhuettermann.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/59a6b/michaelhuettermann.webp 32w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/cbb78/michaelhuettermann.webp 64w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/96250/michaelhuettermann.webp 128w,\n/gatsby-jenkins-io/static/f049e8f2aa656a7f976c387e735fa4a3/50511/michaelhuettermann.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}}},"blog":"http://huettermann.net","github":"michaelhuettermann","html":"<div class=\"paragraph\">\n<p>Michael is expert in Continuous Delivery, DevOps and SCM/ALM supporting enterprises in implementing DevOps.\nMichael is Jenkins Ambassador.</p>\n</div>","id":"michaelhuettermann","irc":null,"linkedin":null,"name":"Michael Hüttermann","slug":"/blog/authors/michaelhuettermann","twitter":"huettermann"}]}},{"node":{"date":"2018-11-07T00:00:00.000Z","id":"f78fd338-8583-5f00-82a2-c7210a261909","slug":"/blog/2018/11/07/Validate-Jenkinsfile/","strippedHtml":"In my daily work I often have to create or modify Jenkinsfiles and more often than I would like, I make mistakes. It is a very tedious workflow when you make a change to your Jenkinsfile, create a commit, push the commit and wait for your Jenkins Server to tell you, that you have missed a bracket.\n\nThe Command-line Pipeline Linter ( https://jenkins.io/doc/book/pipeline/development/) does a great job of reducing the turnaround times when writing a Jenkinsfile, but its usage has its own inconveniences. You need tools like curl or ssh to make a connection to your Jenkins Server and you need to remember the correct command to validate your Jenkinsfile. I still did not like the solution.\n\nAs VS Code is my daily driver, I started to look at writing extensions for it and out of it came a little extension which makes validating Jenkinsfiles just a little bit more comfortable.\n\nWhat the 'Jenkins Pipeline Linter Connector' does is, that it takes the file that you have currently opened, pushes it to your Jenkins Server and displays the validation result in VS Code.\n\n​You can find the extension from within the VS Code extension browser or at the following url: https://marketplace.visualstudio.com/items?itemName=janjoerke.jenkins-pipeline-linter-connector\n\nThe extension adds four settings entries to VS Code which you have to use to configure the Jenkins Server you want to use for validation.\n\njenkins.pipeline.linter.connector.url is the endpoint at which your Jenkins Server expects the POST request, containing your Jenkinsfile which you want to validate. Typically this points to /pipeline-model-converter/validate\" class=\"bare\">http:// /pipeline-model-converter/validate .\n\njenkins.pipeline.linter.connector.user allows you to specify your Jenkins username.\n\njenkins.pipeline.linter.connector.pass allows you to specify your Jenkins password.\n\njenkins.pipeline.linter.connector.crumbUrl has to be specified if your Jenkins Server has CRSF protection enabled. Typically this points to /crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb\" class=\"bare\">http:// /crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb).\n​","title":"Validate your Jenkinsfile from within VS Code","tags":["jenkinsfile","validation","vscode","pipeline","pipeline authoring","development"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#887878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/5236e/janjoerke.jpg","srcSet":"/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/534e5/janjoerke.jpg 32w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/99887/janjoerke.jpg 64w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/5236e/janjoerke.jpg 128w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/76fd4/janjoerke.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/59a6b/janjoerke.webp 32w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/cbb78/janjoerke.webp 64w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/1a93d/janjoerke.webp 128w,\n/gatsby-jenkins-io/static/a8787b55a793681f4a2418b0594f7055/50511/janjoerke.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":170}}},"blog":null,"github":"janjoerke","html":"<div class=\"paragraph\">\n<p>Software Engineer from northern Germany.</p>\n</div>","id":"janjoerke","irc":null,"linkedin":null,"name":"Jan Jörke","slug":"/blog/authors/janjoerke","twitter":"janjoerke"}]}},{"node":{"date":"2018-10-18T00:00:00.000Z","id":"1f156101-c348-5cb5-bc0d-019cb25844c5","slug":"/blog/2018/10/18/contributor-summit-summary/","strippedHtml":"The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.\nThis summit will be on Tuesday, October 23rd 2018 in Nice, France just before Jenkins World.\nWhat should those planning on joining expect at the event?\nEarlier this year in September we had a contributor summit in San Francisco which gave us a pretty good outline of what to expect.\nFirst of all it was one of the biggest contributor summits ever with lots of first-time attendees.\n\nMorning\n\nThere are plenty of exciting developments happening in the Jenkins community, which meant there was a packed program.\nOne of the most anticipated updates was Kohsuke Kawaguchi speaking about Jenkins Shifting Gears.\n\nThere were also updates on the '5 Jenkins Superpower' projects in active development:\n\nJenkins Evergreen\n\nJenkins X\n\nConfiguration as Code\n\nJenkins Pipeline\n\nCloud Native Jenkins\n\nAs ever Jenkins is a community driven by its members so it was also great to get an update on Google Summer of Code.\n\nBirds-of-a-feather (BoF)\n\nAfter a packed morning of updates, it was time for a break and some lunch.\nAfter lunch attendees divided up into groups and gathered around tables for unconference style discussions of specific areas.\nEach table ran differently: some had demos, some did presentations, some hacked on code and others brainstormed ideas.\nThere was definitely alot of energy in the room and huge exchange of ideas.\n\nIgnite Talks & Wrap-up\n\nTo finish off the session we had a set of ignite talks.\nAttendees were invited to volunteer on the day - no easy task given the pressure involved- and many did.\nHats off to Liam Newman, Mandy Hubbard, Eric Smalling, Pui Chee Chan, Martin d’Anjou and Vishal Raina for getting out of their comfort zone and doing talks.\nThere were two surprise ignite talks, one for James Strachan and one for Kohsuke Kawaguchi which were highly entertaining gave the audience lots of laughs.\nSomeone even captured KK’s talk on video.  The sound isn’t great but it was a truly visionary talk:\n\nFinally the event finished with swag presentations and a fun Kahoot quiz to wrap things up.\n\nContributor Appreciation Event\n\nAfter the summit, contributors were invited to join at the after party at Spin.\nSpin was a unique venue in San Francisco where attendees could socialise and also play ping-pong!\nWhile some took it seriously most enjoyed the relaxed way to get to know their fellow contributors.\n\nSee you in Nice\n\nThe event was a lot of fun and the contributor summit in Nice will follow a very similar structure.\nAll levels of contributor are welcome, there will be lots of opportunity for in-depth discussions and you can even do an ignite talk!\nWhile we won’t be repeating the ping pong event there will be something equally unique to follow on from the summit.\n\nAttending is free, and no DevOps World | Jenkins World ticket is needed, but RSVP if you are going to attend to help us plan.\nSee you there!\n\nAs long as you’re in Nice for the Contributor Summit,\njoin Tracy, Kohsuke, and hundreds of other Jenkins users at\nDevOps World - Jenkins World on October 22-25.\nRegister with the code JWFOSS for a 30% discount off your pass.","title":"What to Expect at the Jenkins Contributor Summit","tags":["community","events","jenkins-world"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}}},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda","twitter":"tracymiranda"}]}}]}},"pageContext":{"limit":8,"skip":176,"numPages":101,"currentPage":23}},
    "staticQueryHashes": ["3649515864"]}