{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/23",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-10-14T00:00:00.000Z","id":"c5377da5-1ab5-51ab-994c-510bae06a710","slug":"/blog/2018/10/14/gsoc2018-results/","strippedHtml":"It has been a while since the last blogpost about Google Summer of Code in Jenkins.\nGSoC 2018 has officially finished on August 23, and we had a Jenkins Online Meetup where we had final presentations of the GSoC projects.\nIt is never late to provide more context, so I would like to summarize the results and provide updates of what was happening in Jenkins GSoC Special Interest Group over last 2 months.\nIn this blogpost you can find project status overviews and updates from the Jenkins GSoC SIG.\n\nBut first of all, I would like to thank all our students, their mentors\nand to all other contributors who proposed project ideas, participated in student selection, community bonding and further reviews.\nGoogle Summer of Code is a major effort which would not be possible without active participation of the Jenkins community\n\nSummary\n\nThis year we started preparing for Google Summer of Code in early December.\n14 project ideas and 12 potential mentors we published on our website,\nand we got dozens of students reaching out to us during the application period.\nAfter processing applications, we have selected 4 applications for GSoC.\nUnfortunately one project got cancelled due to student eligibility issues.\n\nSo, we had the following projects:\nCode Coverage API plugin, Remoting over Apache Kafka, and Simple Pull-Request Job Plugin\n(also known as Pipeline as YAML).\nAll these projects have a significant value to the Jenkins community.\nThey were focused on areas which have been discussed in the community for a long time,\nbut which had no progress so far.\nGoogle Summer of Code allowed us to kick-start these projects,\nand to make significant progress there.\nAll projects have been released and made available in the Jenkins community (common or experimental update centers).\n\nIn total there were 9 blogposts about GSoC projects on jenkins.io,\nand also 2 Jenkins Online Meetups.\nGSoC results have been also presented at DevOps World - Jenkins World conference and the contributor summit.\n\nCode Coverage API Plugin\n\nStudent: Shenyu Zheng, Henan University, China\n\nMentors:\nJeff Pearce,\nSteven Christou,\nOleg Nenashev,\nSupun Wanniarachchi\n\nProject page\n\nThere are many code coverage plugins in Jenkins: Cobertura, JaCoCo, Emma, etc., etc.\nThe problem with these plugins is that each of them implements all code coverage features on their own.\nSo you get different feature sets, UIs, CLI commands and REST APIs.\nThe idea of this project was to unify the existing functionality and offer a new API plugin which other plugins could extend.\nIt would help to simplify existing plugin and to create new plugins for coverage tools.\n\nThe project has started really well, and we had the first demo after a week of coding.\nThen Shenyu continued extending the plugin’s functionality over coding periods.\nHere is the list of the key features offered by the plugin:\n\nFlexible data structure for defining and storing coverage metrics within Jenkins\n\nCoverage charts and trends\n\nSource code navigation\n\nREST API for retrieving coverage stats and trends\n\nReport aggregation for parallel steps\n\nExtension points which allow integrating other plugins\n\nIn addition to the Code Coverage API Plugin,\nShenyu added integration to the Cobertura Plugin and also created a new llvm-cov plugin which is expected to be released soon.\n\nAfter GSoC Shenyu continued contributing to the Jenkins project.\nHe works on the Code Coverage API plugin and also participates in the Chinese Localization SIG.\n\nSimple Pull-Request Job Plugin\n\nStudent: Abhishek Gautam, Visvesvaraya National Institute of technology, India\n\nMentors:\nMartin d’Anjou,\nJeff Knurek,\nKristin Whetstone\n\nProject page\n\nThis project focused on introducing a way to\neasily define pull-request build job definitions in YAML.\nThis project has been shaped a lot during the application period and community bonding,\nso that the project fit the existing Jenkins Ecosystem better.\nFinally it was decided to build the new plugin on the top of Pipeline: Multi-Branch Plugin.\nThere was also an idea to offer extra syntax sugar, templating and automatic resolution for common flows,\nso that users need less time to define Pipelines for common use-cases.\n\nThe plugin allows defining Pipeline jobs as YAML being stored in SCM.\nOriginal design presumed a new job type,\nbut during community bonding and Phase 1 prototyping it was decided to build the plugin on the top of the existing Pipeline ecosystem and extension points.\nCurrently the plugin generates Declarative Pipeline code from YAML so that it gets a lot of Pipeline features out-of-the box.\nIn addition to that, Simple Pull Request Job Plugin uses a an engine provided by the Configuration as Code plugin to convert YAML snippets\nto Pipeline step definitions.\n\nThe plugin has been well described by Abhishek in his Pipeline as YAML blogpost in August.\nCurrently it is available in the Experimental Update Center as an alpha version.\nPham Vu Tuan, one of our GSoC students, have also joined the plugin team.\nAt the DevOps World - Jenkins World hackfest we had discussions with the Jenkins Pipeline team,\nand we have a plan towards making this plugin available as an Incubated Pipeline project.\nThe final implementation may change,\nbut in any case the project gave us a working prototype and a lot of information about  obstacles we need to resolve.\n\nRemoting over Apache Kafka\n\nStudent: Pham Vu Tuan, Nanyang Technological University, Singapore\n\nMentors:\nOleg Nenashev,\nSupun Wanniarachchi\n\nProject page\n\nLast but not least, Remoting over Kafka is another challenging project we had.\nTo implement communication between its controllers and agents, Jenkins widely uses home-grown protocol implementations based on TCP\n( JNLP 1..4 protocols).\nThere are some performance and stability implementations,\nand there have been discussions about using an industry-standard message bus or queue.\nPham Vu Tuan proposed to use Apache Kafka for it,\nand after some experiments during community bonding and first coding phase we agreed to go forward with this implementation.\n\nDuring his project Vu Tuan extended Jenkins Core and Remoting to allow implementing an agent communication channel in a plugin.\nThen he has created a new Remoting over Kafka plugin\nwhich is now available in the main Jenkins Update cente.\nOnce the plugin is installed, it is possible to connect to agents over Apache Kafka and execute all types of Jenkins jobs there.\nThere are also official jenkins/remoting-kafka-agent images available on DockerHub.\n\nVu Tuan continued contributing to the Jenkins project after GSoC, currently he maintains the Remoting over Kafka plugin.\nHe visited the DevOps World - Jenkins World US conference in September, presented his GSoC project at the\nJenkins Contributor Summit.\nYou can find his slides here.\nAfter the conference he also participated in the hackfest where he helped to migrate Jenkins' DNS services to Microsoft Azure.\n\nWhat could we do better?\n\nAfter the end of GSoC we had a Retrospective with GSoC students and mentors.\nWe discussed the issues we encountered during the projects,\nand ways to improve the student and mentor experience.\n\nMain takeaways for us:\n\nGSoC projects should be aligned with Jenkins Special Interest Groups (SIGs) or subprojects in order to get a wider list of stakeholders\nProjects should be aligned with SIG priorities when possible\n\nIn addition to GSoC SIG meetings and Jenkins Online Meetups during student evaluation,\nwe should also run regular status updates within SIGs so that there more contributors involved in projects\n\nWe should invest more time into forming mentor teams before the application period starts.\nThis year there were changes in mentor teams after the community bonding started, and it complicated the work\n\nWe should pay more attention to student eligibility.\nThis year we started from 4 projects, but unfortunately one project (EDA plugins for Jenkins) got cancelled due to the visa limitations the student had.\n\nWe should do regular office hours for mentors/students so that it is possible to exchange information between GSoC projects within the organization.\nThis year we cancelled them at the end of phase and relied only on regular project meetings and mailing lists, but this is not enough.\n\nFor me personally the main takeaway is also to reduce direct involvement into the project as a mentor and technical advisor.\nDoing org administration, logistics and mentorship is not good from a bus factor PoV,\nand I believe I was pushing my vision too hard in few cases.\nWill do my best to prevent it next year.\n\nIf you want to share your feedback and ideas,\nplease reach out to us using the GSoC mailing list.\n\nWhat’s next?\n\nIn order to improve GSoC organization in Jenkins,\nwe have have created a GSoC Special Interest Group which will be running non-stop as other SIGs in Jenkins.\nThe objective of the SIG is to organize GSoC, work with potential students/mentors,\nand to help students stay involved in the community after GSoC ends.\nIn this SIG we will have monthly meetings to sync-up on GSoC.\nIf you are interested to contribute, please join the SIG.\n\nAccording to the Retrospective, next year we plan to invest more\ninto communication with mentors.\nWe will also try to tie new project proposals to Jenkins\nSpecial Interest Groups so that the students become a part\nof ongoing coordinated efforts.\nThis weekend Martin d’Anjou, Jeff Pearce and me are participating in the GSoC Mentor summit to share experiences and to study from other GSoC organizations.\nOn October 17 we will have a GSoC SIG meeting to discuss our experience and to discuss next steps.\n\nIn addition to that,\nJenkins Google Summer of Code will be presented at DevOps World - Jenkins World Nice and at the contributor summit.\nIf you plan to visit the conference and you are interested to participate in Google Summer of Code and other community activities,\nplease join us at the contributor summit or stop by at the community booth.\n\nAnd, elephant in the room…​ GSoC 2019.\nOf course we are going to apply, stay tuned for new announcements.\nWe have already started collecting project ideas for the next year.\nIf you are interested to participate as a student or mentor,\nplease reach out to us using the GSoC SIG mailing list.","title":"Jenkins in Google Summer of Code 2018 Results","tags":["community","events","gsoc","gsoc2018"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-10-12T00:00:00.000Z","id":"ea880537-4dfa-5cf5-9dbd-1aa35b08242b","slug":"/blog/2018/10/12/hackathons-in-october/","strippedHtml":"Traditionally there are a lot of events happening in the Jenkins organization in Autumn.\nI would like to share some information about the upcoming hackathons.\n\nOnline Event: Hacktoberfest\n\nAs you probably know, there is an ongoing Hacktoberfest event.\nThe Jenkins project is participating in it and everybody is welcome to contribute to Jenkins as a part of this event.\nThe event lasts from October 01 to October 31,\nand you can can join it at any time.\n\nSee this blogpost for more information about Hacktoberfest in the Jenkins project.\n\nOnsite Hackathons\n\nHacktoberfest is not the only event happening in the Jenkins community this month,\nthere are also a number of upcoming on-site events:\n\nOct 19 - Copenhagen, Denmark\n\nJenkins Configuration as Code hackathon at\nDay of Jenkins [as code ]\n\nRegistration: all conference participants can attend\n\nOct 22 - Nice, France - Hackathon at\nDevOps World - Jenkins World Nice\n\nRSVP here\n\nMake sure to also attend the Jenkins Contributor Summit on Oct 23 ;)\n\nOct 27 - Beijing, China\n\nRSVP here\n\nOct 30 - Neuchatel, Switzerland - Hacktoberfest: Jenkins & Friends event (Swiss Jenkins Area meetup)\n\nRSVP here\n\nAll contributions during these in-person events qualify as\nHacktoberfest contributions as well. :)\nMore events will also be announced later in the year,\ne.g. we traditionally do a hackfest in Brussels after FOSDEM in February.\nFollow our developer mailing lists and social media to receive announcements.","title":"Jenkins Hackathons in October","tags":["events","community","hacktoberfest"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-10-10T00:00:00.000Z","id":"c142077a-cf17-5ac3-a33f-2658b51ec566","slug":"/blog/2018/10/10/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.146 and 2.138.2, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nFurther improvements\n\nIn addition to the security fixes listed in the security advisory, we also applied multiple improvements that make future security vulnerabilities more difficult, or even impossible to exploit.\n\nOne such improvement concerns cross-site scripting vulnerabilities, and comes with a risk of regressions.\n\nJenkins uses a fork of Jelly for the vast majority of the views it renders.\nSince 2011, it includes a feature that lets view authors opt in or out of automatic escaping of variable values for rendering in HTML, and since 2016, the plugin build tooling requires that views explicitly specify whether to apply this automatic escaping.\nDetails are available in the developer documentation.\n\nUntil now, if views do not declare whether to automatically escape, they were rendered without automatic escaping, and developers were expected to explicitly escape every variable reference that was not supposed to contain markup.\nThis has resulted in a number of cross-site scripting (XSS) vulnerabilities, most recently SECURITY-1130 in Job Config History Plugin.\n\nFor that reason, we have decided to enable this automatic escaping by default if plugins do not specify a preference.\nThis can result in problems with some plugins if they need their output to remain unescaped.\nWe expect that those plugins will adapt pretty quickly to this change, as the fix is typically straightforward.\nWe track known affected plugins and their status on the Jenkins wiki.\n\nIn the mean time, users can set the system property org.kohsuke.stapler.jelly.CustomJellyContext.escapeByDefault to false to disable this additional protection.","title":"Important security updates for Jenkins","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-10-09T00:00:00.000Z","id":"5b555e56-ade0-57d9-9cb9-c98ec50c81bf","slug":"/blog/2018/10/09/telemetry/","strippedHtml":"One of the major strengths of Jenkins is its customizability and extensibility.\nWith its plugin ecosystem and long list of (possibly hidden) options, Jenkins can be used for a wide range of use cases.\n\nThe downside of all this flexibility is that, not knowing how people use Jenkins, we mostly rely on issues filed in our bug tracker to know when things go wrong.\nAnd over the years, quite a few things have gone wrong.\nThe worst of these have been security fixes that have had unintended side effects.\nUnlike regular changes, it’s not really feasible to roll back security fixes, so users have sometimes had to choose between security and functionality.\nBut even changes developed in the open, such as the introduction of JEP-200, haven’t gone as smoothly as we hoped.\nWith big changes in the works, it’s more important than ever for us to have a better idea how Jenkins is used, so that we can deliver major changes safely.\n\nJenkins Evergreen solves this to some degree by being always connected to the Jenkins project and reporting back telemetry (mostly errors) allowing us to quickly react and provide fixes.\nBut that project is still pretty new, and its goal of being a more standardized Jenkins does not represent the breadth of configurations of the general user base.\n\nUplink telemetry\n\nSo we recently extended the existing, very limited anonymous usage statistics by adding a simple, extensible telemetry reporting client.\nWe’re calling it Uplink telemetry, based on the name of the service it reports its data to.\nIt made its debut in Jenkins 2.143.\n\nUplink telemetry is designed to collect data in trials, which are defined as:\n\na well defined set of technical data with a specific purpose\n\na start and end date of the collection\n\nDetailed information explaining the scope and purpose of currently active trials is available in the inline help for the usage statistics control in the global configuration.\n\nOf course, opting out of anonymous usage statistics there also disables the submission of Uplink telemetry.\nAnd while Uplink trials report a per-instance UUID to help with collation (e.g. removal of duplicate submissions), that UUID is exclusively used for this purpose, and independent of all other properties of an instance.\nThis prevents us from correlating reported data with specific instances.\nThese measures are in place to strike a balance between the need to understand how Jenkins is used and respecting users' privacy.\n\nImproving Jenkins through real-world data\n\nWe’re already created our first trial.\nJenkins 2.143 includes a trial to gather information about how common it is for instances to use Java system properties to disable (parts of) security fixes.\nWhen we publish a security fix and we’re not completely certain it is safe to apply for everyone, we add another of these options — just in case.\nAs you can imagine, quite a few of these hidden options exist.\nUntil now, user feedback in our issue tracker was the only way we could estimate the need for any of these options.\nWith Uplink, Jenkins will report that information to us.\n\nThe trial is scheduled to run for the next six weeks, enough to hopefully gather this information from a large number of users of both LTS and weekly releases.\nOur hope is that we will be able to remove some of these options entirely, as they might not be needed after all.\nFor others, we might need to consider elevating them to supported features, or finding better solutions obviating the need for them.\n\nIn the future, I will publish of some of what we have learned from the first trial running through Uplink telemetry.\nI look forward to Jenkins continuing to improve with real-world data informing our future decisions.","title":"Improving Jenkins Release Quality using Uplink Telemetry\n","tags":["core"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-10-01T00:00:00.000Z","id":"95e2de7d-ae79-567d-ae41-aa700b9078c9","slug":"/blog/2018/10/01/hacktoberfest/","strippedHtml":"Once again October has arrived.\nThat means the regular Hacktoberfest event is back!\nThis year it will be the fifth installment.\nDuring this one-month hackathon you can support open-source and earn a limited edition swag.\n\nOn behalf of the Jenkins project,\nwe invite you to participate in Hacktoberfest and to work on the project.\nWe welcome all contributors, regardless of their background and Jenkins experience.\n\nQuick start\n\nSign-up to Hacktoberfest on the event website.\n\nEverything is set, just start creating pull-requests!\n\nContributing to Jenkins\n\nThere are many ways to\ncontribute to Jenkins during Hacktoberfest.\nGenerally, any pull requests in GitHub may qualify.\nYou can…​\n\nCode - Contribute to the code or automated tests\n\nJenkins project codebase includes dozens of programming languages,\nmostly Java, Groovy, and JavaScript + Go in Jenkins\n\nYou can also find components in Ruby/Kotlin, and even native components in C/C++\n\nDocument - Improve documentation\n\nBlog - write blogposts about Jenkins\n\nLocalize - Localize Jenkins components\n\nDesign - artwork and UI improvements also count!\n\nOrganize - Organize a local meetup for Jenkins & Hacktoberfest (see below)\n\nSee the Contribute and Participate page for more information.\n\nProjects\n\nThe Jenkins project is spread across  several organizations on GitHub (jenkinsci, jenkins-x, jenkins-infra).\nYou are welcome contribute to any repository in any of those organizations,\nhowever various components in Jenkins have differing review and delivery velocity.\nHere is a list of Jenkins subprojects with maintainers who have committed to delivering quick reviews to Hackathon participants.\n\nProject/component\nIdeas and links\n\nJenkins Core\nThere is always something to improve in Jenkins core itself.\n  You can address various issues, improve the codebase,\n  and add new features there.\nContributing,\nnewbie-friendly issues\n\nJenkins Website\nExtend and improve Jenkins documentation, add your own blogpost.\nContributing guidelines\n\nJenkins X\nTry out the project and create new demos,\n  extend documentation, and create new builders for your toolchains.\nContributing guidelines,\nQuick start,\ncreating custom builders,\nnewbie-friendly issues\n\nJenkins Configuration-as-Code Plugin\nContribute to the fresh new plugin: improve the codebase,\n  add demos and plugin integrations.\nContributing to JCasC\n\nJenkins Evergreen\nTry and improve the recently released Evergreen project -\n  an automatically updating rolling distribution system for Jenkins.\nQuick start,\nnewbie-friendly issues.\n\nJava 11 support (jep:211[])\nContribute to Jenkins core and plugins to enable Java 11 in future releases.\n  You can help to create new packaging, new features, testing flows, or cleanup issues\nIllegal Reflective Access in the code.\nGitter chat,\nnewbie-friendly issues\n\nDocker Packaging\nAdd new features and improvements to Jenkins Docker packaging:\nJenkins controller,\nAgents,\n  and other components.\n\nChinese Localization SIG\nContribute to the new Website and\n  the Simplified Chinese Localization plugin.\n\nJenkins Artwork\nCreate new images and logos for Jenkins area meetups,\nsubprojects, and plugins.\n  You can also contribute new graphics to plugins.\n\nNote that this is not a full list,\nand the list will be extended depending on the interest from maintainers.\nYou are welcome to contribute to existing Jenkins plugins…​\nand even to create new ones.\n\nLocal events\n\nHacktoberfest is an online event,\nbut there are many events being organized by open-source communities.\nYou can join one of these events.\n\nWe also encourage Jenkins Area Meetup organizers to\nrun Jenkins-specific events in October (workshops, hackergartens).\nIf you are not a meetup organizer but want to host a meetup,\nyou can reach out to the organizers via meetup.com resources\n(you can find a JAM here).\nCheck out the Hacktoberfest Event Kit\nfor more info.\n\nFAQ\n\nYou can find Hacktoberfest FAQ here.\nBelow you can find answer to some Jenkins-specific questions.\n\nQ: I am new to Jenkins, how do I start?\n\nIf you are new to Jenkins,\nyou could start by fixing some small and well described issues.\nThere are lists of such newbie-friendly issues, see the links in the table above.\nYou can also submit your own issue and propose a fix.\n\nQ: I want to work on my own plugin, is it fine?\n\nYes, it is fine!\nAny contributions count, your role in a repository does not matter.\nJust make sure you create pull requests instead of direct pushes\n(hint: it’s a best practice if you have a CI configured for your repository).\n\nQ: How to find documentation?\n\nJenkins project contains lots of materials about contributing to the project.\nHere are some links which may help:\n\nParticipate - landing page for newcomer contributors\n\nPlugin Development Tutorials\n\nDeveloper Documentation\n\nGitter channel for Q&A\n\nProjects in the table above also have their own documentation to help newcomers.\n\nQ: How do I get reviews?\n\nAll projects in the list above are monitored by their maintainers,\nand you will likely get a review within few days.\nReviews in other repositories and plugins may take longer.\nIn the case of delays, ping us in the hacktoberfest-help channel in Gitter.\nUnmerged pull-requests also count in Hacktoberfest,\nso merge delays won’t block you from getting prizes.\n\nQ: I am stuck. How do I get help?\n\nFor non-technical questions (process and general direction) use our hacktoberfest-help\nchannel in Gitter.\n\nFor technical questions please use the IRC chat,\nDeveloper mailing lists,\nor the main jenkinsci/jenkins channel.\nMany subprojects also have their own chats.\n\nQ: Does Jenkins project send special swag?\n\nAll participants will get swag from Hacktoberfest organizers if they create at least5 pull requests.\nJenkins project may also distribute some swag to top contributors,\ndepending on the budget and contributions.","title":"Hacktoberfest 2018. Contribute to Jenkins!","tags":["hacktoberfest","event","community","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-09-18T00:00:00.000Z","id":"05f18d70-cabf-59fd-91c1-537a47157934","slug":"/blog/2018/09/18/automatically-upgrading-with-evergreen/","strippedHtml":"When I first wrote about Jenkins\nEvergreen, which was then referred to as \"Jenkins Essentials\", I mentioned a\nnumber of future developments which in the subsequent months have become\nreality. At this year’s DevOps World - Jenkins World in San Francisco, I will\nbe sharing more details on the philosophy behind Jenkins Evergreen, show off\nhow far we have come, and discuss where we’re going with this radical\ndistribution of Jenkins.\n\nAs discussed in my first blog post, and\nJEP-300,\nthe first two pillars of Jenkins Evergreen have been the primary focus of our\nefforts.\n\nAutomatically Updated Distribution\n\nPerhaps unsurprisingly, implementing the mechanisms necessary for safely and\nautomatically updating a Jenkins distribution, which includes core and plugins,\nwas and continues to be a sizable amount of work. In\nBaptiste’s talk\nhe will be speaking about the details which make Evergreen \"go\" whereas\nI will be speaking about why an automatically updating distribution is\nimportant.\n\nAs continuous integration and continuous delivery have become more commonplace,\nand fundamental to modern software engineering, Jenkins tends to live two\ndifferent lifestyles depending on the organization. In some organizations,\nJenkins is managed and deployed methodically with automation tools like Chef,\nPuppet, etc. In many other organizations however, Jenkins is treated much more\nlike an appliance, not unlike the office wireless router. Installed and so\nlong as it continues to do its job, people won’t think about it too much.\n\nJenkins Evergreen’s distribution makes the \"Jenkins as an Appliance\" model much\nbetter for everybody by ensuring the latest feature updates, bug and security\nfixes are always installed in Jenkins.\n\nAdditionally, I believe Evergreen will serve another group we don’t adequately\nserve at the moment: those who want Jenkins to behave much more like a\nservice. We typically don’t consider \"versions\" of GitHub.com, we receive\nincremental updates to the site and realize the benefits of GitHub’s on-going\ndevelopment without ever thinking about an \"upgrade.\"\n\nI believe Jenkins Evergreen can, and will provide that same experience.\n\nAutomatic Sane Defaults\n\nThe really powerful thing about Jenkins as a platform is the broad variety of\npatterns and practices different organizations may adopt. For newer users, or\nusers with common use-cases, that significant amount of flexibility can result\nin a paradox of choice. With Jenkins Evergreen, much of the most common\nconfiguration is automatically configured out of the box.\n\nIncluded is Jenkins Pipeline and Blue Ocean, by default. We also removed some\nlegacy functionalities from Jenkins while we were at it.\n\nWe are also utilizing some of the fantastic\nConfiguration as Code\nwork, which recently had its 1.0 release, to automatically set sane defaults in\nJenkins Evergreen.\n\nStatus Quo\n\nThe effort has made significant strides thus far this year, and we’re really\nexcited for people to start trying out Jenkins Evergreen. As of today,\nJenkins Evergreen\nis ready for early adopters. We do not yet recommend using Jenkins\nEvergreen for a production environment.\n\nIf you’re at DevOps World - Jenkins World in San Francisco please come see\nBaptiste’s talk Wednesday at 3:45pm in Golden Gate Ballroom A. Or\nmy talk at 11:15am in Golden Gate Ballroom B.\n\nIf you can’t join us here in San Francisco, we hope to hear your feedback and thoughts in our\nGitter channel!","title":"Continuously delivering an easy-to-use Jenkins with Evergreen","tags":["jenkinsworld","jenkinsworld2018","evergreen"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2018-09-17T00:00:00.000Z","id":"f2d08709-df38-5689-9363-0cab0bbbd723","slug":"/blog/2018/09/17/jenkins-artwork/","strippedHtml":"Hi all, this is my first blogpost on jenkins.io.\nMy name is Kseniia Nenasheva, I work as a Graphics Designer at CloudBees.\nI have been using Jenkins since 2012 as a QA engineer, and I am happy to contribute to the project.\nI have also submitted some patches to the core and plugins,\nand probably you have seen some Jenkins logos created by me,\nand some of you may even have them on your laptops.\nBy the way, Ron Burgundy is my favorite Jenkins logo.\n\nThis year I am going to DevOps World | Jenkins World in San Francisco.\nDuring the conference I will be working at the Jenkins community booth\nand creating exclusive pictures with conference visitors and one of the Jenkins heroes.\nSo, if you come to our booth and share your Jenkins story, you can get a special picture.\n\nIf you are interested to get a logo for your Jenkins Area Meetup\nor an open-source project (including Jenkins plugins, of course),\nplease also stop by at the booth and share your ideas.\nAfter the conference I will try to implement the most interesting proposals.\n\nYou can also meet me at the contributor summit on September 17.\n\nCome meet Kseniia and other Jenkins contributors at\nJenkins World on September 16-19th in San Francisco and on October 22-25 in Nice.\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins Artwork at the DevOps World | Jenkins World 2018 Community Booth","tags":["jenkinsworld","jenkinsworld2018","artwork","community"],"authors":[{"avatar":null,"blog":null,"github":"ksenia-nenasheva","html":"","id":"ksenia-nenasheva","irc":null,"linkedin":null,"name":"Ksenia Nenasheva","slug":"/blog/authors/ksenia-nenasheva","twitter":null}]}},{"node":{"date":"2018-09-14T00:00:00.000Z","id":"3853be51-02ed-55b0-8b3f-edbfcfe998c7","slug":"/blog/2018/09/14/kubernetes-and-secret-agents/","strippedHtml":"At long last, the way we build and deploy software is finally changing and significantly so.\nThe days of the persnickety, prima donna build machine where monolithic applications were built, tested, and deployed are numbered.\nAnd that is a \"Good Thing (tm)\" - a consequence of how we will meet the transformation goals of our businesses.\nModern applications consist of distributed services, often with multiple microservices that are developed and deployed independent of other services.\nHowever, the only way to build these services with their own dependencies and schedules is to bake in continuous integration and delivery from the beginning.\nAnd as usual, your Jenkins platform is your friend.\n\nBut let’s take a moment and think about that in the context of microservices, especially if you’ve only used Jenkins for monolithic applications.\nYou’ll be creating a greater number of individual Jenkins jobs that each run multiple times a day.\nThis is a significant process change, and it’s important to acknowledge this and change our approach to managing Jenkins to accommodate these changes.\nIt’s well within Jenkins’ capabilities, but you will need to think a little differently, and invest to close those last-mile deployment gaps.\n\nEvolution of my Jenkins Environment\n\nOne of the biggest challenges I’ve faced as a DevOps practitioner is a long and evolving set of options to manage my Jenkins agent infrastructure.\nWith only a few large jobs you don’t really need to worry too much about your agents.\nBut when you’re orchestrating the CI/CD pipelines for dozens or even hundreds of services, optimizing efficiency and minimizing cost becomes important.\nAnd that journey has allowed me to consider and test many different Jenkins build agent architectures over the years.\nThis journey may be familiar to you as well.\n\nThese are the types of Jenkins environments I’ve run over the years.\n\nExecute all the builds on the controller.\nConcentrate all the moving parts on one instance.\n(I call this Hello Jenkins)\n\nCreate a Jenkins EC2 agent with all the required tools for building every service, and then clone it if I need to “scale” Jenkins.\n(I call this the Monster Agent.)\n\nCreate an individual Jenkins EC2 agent for each service I need to build.\n(I call this the Snowflake Agent.)\n\nRun build steps in containers.\nFor example, launching agents in containers using the\nDocker Plugin or using multi-stage Dockerfiles to encapsulate all the logic for building, testing and packaging an application.\nThey are both good first steps in container abstraction and allow you to easily copy artifacts from one container to another.\nOf course, access to a Docker engine is required for either approach, and I’ve managed my Docker host(s) for running Jenkins agents several different ways:\n\nRun the Docker engine inside my Jenkins controller container - Docker in Docker (DinD)\n\nMount the Docker socket of the host on which my Jenkins controller container runs, allowing agents to run as sibling or sidecar containers - Docker outside of Docker (DooD)\n\nConfigure a single external EC2 Docker host for the Jenkins controller to use for launching builds in containers\n\nDynamically launch agents using the EC2 plugin with an AMI that contains the Docker Engine and then run all the steps in a multi-stage Dockerfile\n\nAll these approaches were attempts to get out of the business of curating and managing Jenkins agents and infrastructure, each with their own benefits and drawbacks.\nBut recently I begin working in a new Jenkins environment - Jenkins on Kubernetes.\n\nOnce you’ve come to view Jenkins, build agents and jobs as containerized services, migrating platforms becomes much more straightforward.\nAnd total disclaimer here - I had never used Kubernetes in my life, not even for side projects - when I set out to do this.\nThat said, it was surprisingly simple to create a Kubernetes cluster in Google Cloud Platform’s (GCP) GKE, launch a Jenkins controller using a\nHelm chart and begin running build steps in Jenkins agents running in containers on my new Kubernetes cluster.\n\nLaunch agents in Kubernetes from your pipeline scripts\n\nThe focus of this post and my Jenkins World talk for 2018, is to show you how to configure Jenkins to launch agents in Kubernetes from your pipeline scripts.\nMy examples assume you are launching your agents in the same Kubernetes cluster where your Jenkins controller is running, but there are other options.\nYou’ll begin by installing the\nKubernetes plugin.\nAs a bonus, when I installed Jenkins using the latest stable chart in the default Helm repository, the Kubernetes plugin was automatically installed for me.\n\nOnce you get the Jenkins controller running on your Kubernetes cluster, there are only a few configuration steps required and then you can begin launching ephemeral build agents on Kubernetes.\n\nConfigure the Jenkins controller\n\nYou’ll first need to create a credentials set for the Jenkins controller to access the Kubernetes cluster.\nTo do this, perform the following steps:\n\nIn the Jenkins UI, click the Credentials link in the left-hand navigation pane\n\nClick the arrow next to (global) in the Stores scoped to Jenkins table (you have to hover next to the link to see the arrow)\n\nClick Add Credentials\n\nUnder Kind, specify Kubernetes Service Account\n\nLeave the scope set to Global\n\nClick OK.\n\nThat’s it! This configuration allows the Jenkins controller to use a Kubernetes service account to access the Kubernetes API.\n\nCreate a Cloud Configuration on the Jenkins controller\n\nThe next step is to create a cloud configuration for your K8s cluster.\n(When I use K8s instead of Kubernetes it’s because it is quicker to type, not just for coolness.)\n\nIn the Jenkins UI, go to Manage Jenkins → Configure System\n\nScroll down until you see Cloud settings and click the Add a new cloud box and select kubernetes\n\nThe following parameters must be set:\n\nName : - This defaults to kubernetes\n\nKubernetes URL : https://kubernetes.default - This was automatically configured from the service account.\n\nKubernetes Namespace : default - Unless you are running your controller in another namespace\n\nCredentials :  Select the Kubernetes Service Account credentials you created in the previous step\n\nJenkins URL : http:// :8080\n\nJenkins tunnel : :5555 - This is the port that is used to communicate with an agent\n\nThese were the only parameters I had to set to launch an agent in my K8s cluster.\nYou can certainly modify other parameters to tweak your environment.\n\nNow that you’ve configured your Jenkins controller so that it can access your K8s cluster, it’s time to define some pods.\nA pod is the basic building block of Kubernetes and consists of one or more containers with shared network and storage.\nEach Jenkins agent is launched as a Kubernetes pod.\nIt will always contain the default JNLP container that runs the Jenkins agent jar and any other containers you specify in the pod definition.\nThere are at least two ways to configure pod templates – in the Jenkins UI and in your pipeline script.\n\nConfigure a Pod Template in the Jenkins UI\n\nIn the Jenkins UI, go to Manage Jenkins → Configure Systems\n\nScroll down to the cloud settings you configured in the previous step\n\nClick the Add Pod Template button and select Kubernetes Pod Template\n\nEnter values for the following parameters:\n\nName :\n\nNamespace : default - unless you configured a different namespace in the previous step\n\nLabels : - this will be used to identify the agent pod from your Jenkinsfiles\n\nUsage : Select \" Use this node as much as possible\" if you would like for this pod to be your default node when no node is specified.\nSelect \" Only build jobs with label matching expressions matching this node\" to use this pod only when its label is specified in the pipeline script\n\nThe name of the pod template to inherit from - you can leave this blank.\nIt will be useful once you gain experience with this configuration, but don’t worry about it for now.\n\nContainers : The containers you want to launch inside this pod.\nThis is described in detail below.\n\nEnvVars : The environment variables you would like to inject into your pod at runtime.\nThis is described in detail below.\n\nVolumes :  Any volumes you want to mount inside your pod.\nThis is described further below.\n\nRemember that a pod consists of one or more containers that live and die together.\nThe pod must always include a JNLP container, which is configured by default if you installed the controller using the Helm Chart.\nHowever, you will want to add containers with the tool chains required to build your application.\n\nAdd Your Own Container Template\n\nIn the Jenkins UI, return to the pod template you created in the last step\n\nClick the Add Container button and select Container Template\n\nEnter values in the following fields:\n\nName :\n\nDocker image : any Docker image you’d like\nFor example, if you are building an application written in Go, you can enter 'golang:1.11-alpine3.8'\n\nLabel : Enter any label strings you’d like to use to refer to this container template in your pipeline scripts\n\nAlways pull image : - Select this option if you want the plugin to pull the image each time a pod is created.\n\nYou can leave the default values for the other parameters, but you can see that the plugin gives you fine-grained control over your pod and the individual containers that run within it.\nAny values you might set in your Kubernetes pod configuration can be set via this plugin as well.\nYou can also inject your configuration data by entering raw YAML.\nI encourage you not to get distracted by the sheer number of options you can configure in this plugin.\nYou only have to configure a small subset of them to get a working environment.\n\nYou can click the Add Environment Variable button in the container template to inject environment variables into a specific container.\nYou can click the Add Environment Variable button in the pod template to inject environment variables into all containers in the pod.\nThe following environment variables are automatically injected into the default JNLP container to allow it to connect automatically to the Jenkins controller:\n\nJENKINS_URL : Jenkins web interface url\n\nJENKINS_JNLP_URL : url for the jnlp definition of the specific agent\n\nJENKINS_SECRET : the secret key for authentication\n\nJENKINS_NAME : the name of the Jenkins agent\n\nIf you click the Add Volume button in the pod template, you’ll see several options for adding volumes to your pod.\nI use the Host Path Volume option to mount the docker socket inside the pod.\nI can then run a container with the Docker client installed and use the host Docker socket to build and push Docker images.\n\nAt this point, we’ve created a cloud configuration for our Kubernetes cluster and defined a pod consisting of one or more containers.\nNow, how do we use this to run Jenkins jobs? We simply refer to the pod and containers by label in our Jenkins pipeline script.\nWe use the label we gave to the pod in the node block and the label for the container we wish to use in the container block.\nThe examples in this post use scripted pipeline, but you can achieve the same outcome using the declarative pipeline syntax:\n\nnode('test-pod') {\n    stage('Checkout') {\n        checkout scm\n    }\n    stage('Build'){\n        container('go-agent') {\n            // This is where we build our code.\n        }\n    }\n}\n\nDefining the Pod in the Jenkinsfile\n\nConfiguring a plugin through the UI is perfectly fine in a proof of concept.\nHowever, it does not result in a software-defined infrastructure that can be versioned and stored right alongside your source code.\nLuckily, you can create the entire pod definition directly in your Jenkinsfile.\nIs there anything you can’t do in a Jenkinsfile???\n\nAny of the configuration parameters available in the UI or in the YAML definition can be added to the podTemplate and containerTemplate sections.\nIn the example below, I’ve defined a pod with two container templates.\nThe pod label is used in the node block to signify that we want to spin up an instance of this pod.\nAny steps defined directly inside the node block but not in a container block with be run in the default JNLP container.\n\nThe container block is used to signify that the steps inside the block should be run inside the container with the given label.\nI’ve defined a container template with the label 'golang', which I will use to build the Go executable that I will eventually package into a Docker image.\nIn the volumes definition, I have indicated that I want to mount the Docker socket of the host, but I still need the Docker client to interact with it using the Docker API.\nTherefore, I’ve defined a container template with the label 'docker' which uses an image with the Docker client installed.\n\npodTemplate(\n    name: 'test-pod',\n    label: 'test-pod',\n    containers: [\n        containerTemplate(name: 'golang', image: 'golang:1.9.4-alpine3.7'),\n        containerTemplate(name: 'docker', image:'trion/jenkins-docker-client'),\n    ],\n    volumes: [\n        hostPathVolume(mountPath: '/var/run/docker.sock'),\n        hostPath: '/var/run/docker.sock',\n    ],\n    {\n        //node = the pod label\n        node('test-pod'){\n            //container = the container label\n            stage('Build'){\n                container('golang'){\n                    // This is where we build our code.\n                }\n            }\n            stage('Build Docker Image'){\n                container(‘docker’){\n                    // This is where we build the Docker image\n                }\n            }\n        }\n    })\n\nIn my Docker-based pipeline scripts, I was building Docker images and pushing them to a Docker registry, and it was important to me to replicate that exactly with my new Kubernetes setup.\nOnce I accomplished that, I was ready to build my image using gcloud, the Google Cloud SDK, and push that image to the Google Container Registry in anticipation of deploying to my K8s cluster.\n\nTo do this, I specified a container template using a gcloud image and changed my docker command to a gcloud command.\nIt’s that simple!\n\npodTemplate(\n    name: 'test-pod',\n    label: 'test-pod',\n    containers: [\n        containerTemplate(name: 'golang', image: 'golang:1.9.4-alpine3.7'),\n        containerTemplate(name: 'gcloud', image:'gcr.io/cloud-builders/gcloud'),\n    ],\n    {\n        //node = the pod label\n        node('test-pod'){\n            //container = the container label\n            stage('Build'){\n                container('golang'){\n                    // This is where we build our code.\n                }\n            }\n            stage('Build Docker Image'){\n                container(‘gcloud’){\n                    //This is where we build and push our Docker image.\n                }\n            }\n        }\n    })\n\nStanding up a Jenkins controller on Kubernetes, running ephemeral agents, and building and deploying a sample application only took me a couple of hours.\nI spent another weekend really digging in to better understand the platform.\nYou can be up and running in a matter of days if you are a quick study.\nThere are a wealth of resources available on running Jenkins on Kubernetes, and I hope this blog post helps to further that knowledge.\nEven better, come to\nmy session at Jenkins World and let’s talk in person.\n\nSo, what else do you want to know?\nHit me up on Twitter.\nI might even add your questions to my Jenkins World session.\nI suppose next up is Mesos?\n\nCome meet Mandy and other Jenkins and Kubernetes experts at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins and Kubernetes - Secret Agents in the Clouds","tags":["jenkinsworld","jenkinsworld2018","cloud-native","kubernetes"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#485858","images":{"fallback":{"src":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/19e71/devmandy.jpg","srcSet":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/77b35/devmandy.jpg 32w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/d4a57/devmandy.jpg 64w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/19e71/devmandy.jpg 128w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/68974/devmandy.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/ef6ff/devmandy.webp 32w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/8257c/devmandy.webp 64w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/6766a/devmandy.webp 128w,\n/gatsby-jenkins-io/static/04dee4202a439e0bfaf32d7e1722f2b0/22bfc/devmandy.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"DevMandy","html":"<div class=\"paragraph\">\n<p>Mandy Hubbard has almost 20 years of professional QA experience,\nmost of which has been spent in fast-paced startup environments driving product quality.\nShe is passionate about ensuring quality through process improvements, test automation, following CI/CD best practices and all things DevOps.\nShe is currently a software engineer/QA architect at CS Disco, an innovative startup delivering a cloud-based eDiscovery platform.</p>\n</div>","id":"devmandy","irc":null,"linkedin":null,"name":"Mandy Hubbard","slug":"/blog/authors/devmandy","twitter":"DevMandy"}]}}]}},"pageContext":{"limit":8,"skip":176,"numPages":100,"currentPage":23}},
    "staticQueryHashes": ["3649515864"]}