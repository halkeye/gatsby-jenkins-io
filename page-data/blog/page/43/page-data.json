{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/43",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2017-01-19T00:00:00.000Z","id":"437a3a39-d6ca-5875-b27d-0189cefc4150","slug":"/blog/2017/01/19/converting-conditional-to-pipeline/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nIntroduction\n\nWith all the new developments in\nJenkins Pipeline (and\nDeclarative Pipeline on the horizon),\nit’s easy to forget what we did to create \"pipelines\" before\nPipeline.\nThere are number of plugins, some that have been around since the very beginning,\nthat enable users to create \"pipelines\" in Jenkins.\nFor example, basic job chaining worked well in many cases, and the\nParameterized Trigger plugin\nmade chaining more flexible.\nHowever, creating chained jobs with conditional behavior was\nstill one of the harder things to do in Jenkins.\n\nThe\nConditional BuildStep plugin\nis a powerful tool that has allowed Jenkins users to write Jenkins jobs with complex conditional logic.\nIn this post, we’ll take a look at how we might converting Freestyle jobs that\ninclude conditional build steps to Jenkins Pipeline.\nUnlike Freestyle jobs, implementing conditional operations in Jenkins Pipeline is trivial,\nbut matching the behavior of complex conditional build steps will require a bit more care.\n\nGraphical Programming\n\nThe Conditional BuildStep plugin lets users add conditional logic to Freestyle\njobs from within the Jenkins web UI.  It does this by:\n\nAdding two types of Conditional BuildStep (\"Single\" and \"Multiple\") -\nthese build steps contain one or more other build steps to be run when the configured\ncondition is met\n\nAdding a set of Condition operations -\nthese control whether the Conditional BuildStep execute the contained step(s)\n\nLeveraging the Token Macro facility -\nthese provide values to the Conditions for evaluation\n\nIn the example below, this project will run the shell script step when the value of the\nREQUESTED_ACTION token equals \"greeting\".\n\nHere’s the output when I run this project with REQUESTED_ACTION set to \"greeting\":\n\nRun condition [Strings match] enabling prebuild for step [Execute shell]\nStrings match run condition: string 1=[greeting], string 2=[greeting]\nRun condition [Strings match] enabling perform for step [Execute shell]\n[freestyle-conditional] $ /bin/sh -xe /var/folders/hp/f7yc_mwj2tq1hmbv_5n10v2c0000gn/T/hudson5963233933358491209.sh\n+ echo 'Hello, bitwiseman!'\nHello, bitwiseman!\nFinished: SUCCESS\n\nAnd when I pass the value \"silence\":\n\nRun condition [Strings match] enabling prebuild for step [Execute shell]\nStrings match run condition: string 1=[silence], string 2=[greeting]\nRun condition [Strings match] preventing perform for step [Execute shell]\nFinished: SUCCESS\n\nThis is a simple example but the conditional step can contain any regular build step.\nWhen combined with other plugins, it can control whether to send notifications,\ngather data from other sources, wait for user feedback, or call other projects.\n\nThe Conditional BuildStep plugin does a great job of leveraging strengths of\nthe Jenkins web UI, Freestyle jobs, and UI-based programming,\nbut it is also hampered by their limitations.\nThe Jenkins web UI can be clunky and confusing at times.\nLike the steps in any Freestyle job, these conditional steps are only\nstored and viewable in Jenkins.\nThey are not versioned with other product or build code and can’t be code reviewed.\nLike any number of UI-based programming tools, it has to make trade-offs between clarity\nand flexibility: more options or clearer presentation.\nThere’s only so much space on the screen.\n\nConverting to Pipeline\n\nJenkins Pipeline, on the other hand, enables users to implement their pipeline as code.\nPipeline code can be written directly in the Jenkins Web UI or in any text editor.\nIt is a full-featured programming language,\nwhich gives users access to much broader set of conditional statements\nwithout the restrictions of UI-based programming.\n\nSo, taking the example above, the Pipeline equivalent is:\n\n// Declarative //\npipeline {\n    agent any\n    parameters {\n        choice(\n            choices: ['greeting' , 'silence'],\n            description: '',\n            name: 'REQUESTED_ACTION')\n    }\n\n    stages {\n        stage ('Speak') {\n            when {\n                // Only say hello if a \"greeting\" is requested\n                expression { params.REQUESTED_ACTION == 'greeting' }\n            }\n            steps {\n                echo \"Hello, bitwiseman!\"\n            }\n        }\n    }\n}\n// Script //\nproperties ([\n    parameters ([\n        choice (\n            choices: ['greeting', 'silence'],\n            description: '',\n            name : 'REQUESTED_ACTION')\n    ])\n])\n\nnode {\n    stage ('Speak') {\n        // Only say hello if a \"greeting\" is requested\n        if (params.REQUESTED_ACTION == 'greeting') {\n            echo \"Hello, bitwiseman!\"\n        }\n    }\n}\n\nWhen I run this project with REQUESTED_ACTION set to \"greeting\", here’s the output:\n\n[Pipeline] node\nRunning on osx_mbp in /Users/bitwiseman/jenkins/agents/osx_mbp/workspace/pipeline-conditional\n[Pipeline] {\n[Pipeline] stage\n[Pipeline] { (Speak)\n[Pipeline] echo\nHello, bitwiseman!\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n[Pipeline] // node\n[Pipeline] End of Pipeline\nFinished: SUCCESS\n\nWhen I pass the value \"silence\", the only change is \"Hello, bitwiseman!\" is not printed.\n\nSome might argue that the Pipeline code is a bit harder to understand on first reading.\nOthers would say the UI is just as confusing if not more so.\nEither way, the Pipeline representation is considerably more compact than the Jenkins UI presentation.\nPipeline also lets us add helpful comments, which we can’t do in the Freestyle UI.\nAnd we can easily put this Pipeline in a Jenkinsfile to be code-reviewed, checked-in, and versioned\nalong with the rest of our code.\n\nConditions\n\nThe previous example showed the \"Strings match\" condition and its Pipeline equivalent.\nLet’s look at couple more interesting conditions and their Jenkins Pipeline equivalents.\n\nBoolean condition\n\nYou might think that a boolean condition would be the simplest condition, but it isn’t.\nSince it works with string values from tokens, the Conditional BuildStep plugin offers\na number of ways to indicate true or false.\nTruth is a case insensitive match of one of the following:\n1 (the number one), Y, YES, T, TRUE, ON or RUN.\n\nPipeline can duplicate these, but depending on the scenario we might consider\nwhether a simpler expression would suffice.\n\nPipeline\n\n// Declarative //\nwhen {\n    // case insensitive regular expression for truthy values\n    expression { return token ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }\n}\nsteps {\n    /* step */\n}\n\n// Script //\n// case insensitive regular expression for truthy values\nif (token ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/) {\n    /* step */\n}\n\nLogical \"OR\" of conditions\n\nThis condition wraps other conditions.\nIt takes their results as inputs and performs a logical \"or\" of the results.\nThe AND and NOT conditions do the same, performing their respective operations.\n\nPipeline\n\n// Declarative //\nwhen {\n    // A or B\n    expression { return A || B }\n}\nsteps {\n    /* step */\n}\n\n// Script //\n// A or B\nif (A || B) {\n    /* step */\n}\n\nTokens\n\nTokens can be considerably more work than conditions.\nThere are more of them and they cover a much broader range of behaviors.\nThe previous example showed one of the simpler cases, accessing a build parameter,\nwhere the token has a direct equivalent in Pipeline.\nHowever, many tokens don’t have direct equivalents,\nsome take a parameters (adding to their complexity),\nand some provide information that is simply not exposed in Pipeline yet.\nSo, determining how to migrate tokens needs to be done on case-by-case basis.\n\nLet’s look at a few examples.\n\n\"FILE\" token\n\nExpands to the contents of a file. The file path is relative to the build workspace root.\n\n${FILE,path=\"PATH\"}\n\nThis token maps directly to the readFile step.\nThe only difference is the file path for readFile is relative to the\ncurrent working directory on the agent, but that is the workspace root by default.\nNo problem.\n\nPipeline\n\n// Declarative //\nwhen {\n    expression { return readFile('pom.xml').contains('mycomponent') }\n}\nsteps {\n    /* step */\n}\n\n// Script //\nif (readFile('pom.xml').contains('mycomponent')) {\n    /* step */\n}\n\nGIT_BRANCH\n\nExpands to the name of the branch that was built.\n\nParameters (descriptions omitted): all, fullName.\n\nThis information may or may not be exposed in Pipeline.  If you’re using the\nPipeline Multibranch plugin\nenv.BRANCH_NAME will give similar basic information, but doesn’t offer the parameters.\nThere are also\nseveral\nissues\nfiled around GIT_* tokens in Pipeline.\nUntil they are addressed fully, we can follow the pattern shown in\npipeline-examples,\nexecuting a shell to get the information we need.\n\nPipeline\n\nGIT_BRANCH = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n\nCHANGES_SINCE_LAST_SUCCESS\n\nDisplays the changes since the last successful build.\n\nParameters (descriptions omitted):\nreverse, format, changesFormat, showPaths, pathFormat,\nshowDependencies, dateFormat, regex, replace, default.\n\nNot only is the information provided by this token not exposed in Pipeline,\nthe token has ten optional parameters, including format strings and regular expression\nsearches. There are a number of ways we might get similar information in Pipeline.\nEach have their own particular limitations and ways they differ from the token output.\nThen we’ll need to consider how each of the parameters changes the output.\nIf nothing else, translating this token is clearly beyond the scope of this post.\n\nSlightly More Complex Example\n\nLet’s do one more example that shows some of these conditions and tokens.\nThis time we’ll perform different build steps depending on what branch we’re building.\nWe’ll take two build parameters: BRANCH_PATTERN and FORCE_FULL_BUILD.\nBased on BRANCH_PATTERN, we’ll checkout a repository.\nIf we’re building on the master branch or the user checked FORCE_FULL_BUILD,\nwe’ll call three other builds in parallel\n( full-build-linux, full-build-mac, and full-build-windows),\nwait for them to finish, and report the result.\nIf we’re not building on the master branch and the user did not check FORCE_FULL_BUILD,\nwe’ll print a message saying we skipped the full builds.\n\nFreestyle\n\nHere’s the configuration for Freestyle version.\n(It’s pretty long.  Feel free to skip down to the Pipeline version):\n\nThe Pipeline version of this job determines the GIT_BRANCH branch by\nrunning a shell script that returns the current local branch name.\nThis means that the Pipeline version must checkout to a local branch (not a detached head).\n\nFreestyle version of this job does not require a local branch, GIT_BRANCH is set automatically.\nHowever, to maintain functional parity, the Freestyle version of this job includes\n\"Checkout to Specific Local Branch\" as well.\n\nPipeline\n\nHere’s the equivalent Pipeline:\n\nFreestyle version of this job is not stored in source control.\n\nIn general, the Pipeline version of this job would be stored in source control,\nwould checkout scm, and would run that same repository.\nHowever, to maintain functional parity, the Pipeline version shown does a checkout\nfrom source control but is not stored in that repository.\n\nPipeline\n\n// Script //\nproperties ([\n    parameters ([\n        string (\n            defaultValue: '*',\n            description: '',\n            name : 'BRANCH_PATTERN'),\n        booleanParam (\n            defaultValue: false,\n            description: '',\n            name : 'FORCE_FULL_BUILD')\n    ])\n])\n\nnode {\n    stage ('Prepare') {\n        checkout([$class: 'GitSCM',\n            branches: [[name: \"origin/${BRANCH_PATTERN}\"]],\n            doGenerateSubmoduleConfigurations: false,\n            extensions: [[$class: 'LocalBranch']],\n            submoduleCfg: [],\n            userRemoteConfigs: [[\n                credentialsId: 'bitwiseman_github',\n                url: 'https://github.com/bitwiseman/hermann']]])\n    }\n\n    stage ('Build') {\n        GIT_BRANCH = 'origin/' + sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n        if (GIT_BRANCH == 'origin/master' || params.FORCE_FULL_BUILD) {\n\n            // Freestyle build trigger calls a list of jobs\n            // Pipeline build() step only calls one job\n            // To run all three jobs in parallel, we use \"parallel\" step\n            // https://jenkins.io/doc/pipeline/examples/#jobs-in-parallel\n            parallel (\n                linux: {\n                    build job: 'full-build-linux', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                },\n                mac: {\n                    build job: 'full-build-mac', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                },\n                windows: {\n                    build job: 'full-build-windows', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                },\n                failFast: false)\n\n        } else {\n            echo 'Skipped full build.'\n        }\n    }\n}\n// Declarative //\npipeline {\n    agent any\n    parameters {\n        string (\n            defaultValue: '*',\n            description: '',\n            name : 'BRANCH_PATTERN')\n        booleanParam (\n            defaultValue: false,\n            description: '',\n            name : 'FORCE_FULL_BUILD')\n    }\n\n    stages {\n        stage ('Prepare') {\n            steps {\n                checkout([$class: 'GitSCM',\n                    branches: [[name: \"origin/${BRANCH_PATTERN}\"]],\n                    doGenerateSubmoduleConfigurations: false,\n                    extensions: [[$class: 'LocalBranch']],\n                    submoduleCfg: [],\n                    userRemoteConfigs: [[\n                        credentialsId: 'bitwiseman_github',\n                        url: 'https://github.com/bitwiseman/hermann']]])\n            }\n        }\n\n        stage ('Build') {\n            when {\n                expression {\n                    GIT_BRANCH = 'origin/' + sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n                    return GIT_BRANCH == 'origin/master' || params.FORCE_FULL_BUILD\n                }\n            }\n            steps {\n                // Freestyle build trigger calls a list of jobs\n                // Pipeline build() step only calls one job\n                // To run all three jobs in parallel, we use \"parallel\" step\n                // https://jenkins.io/doc/pipeline/examples/#jobs-in-parallel\n                parallel (\n                    linux: {\n                        build job: 'full-build-linux', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                    },\n                    mac: {\n                        build job: 'full-build-mac', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                    },\n                    windows: {\n                        build job: 'full-build-windows', parameters: [string(name: 'GIT_BRANCH_NAME', value: GIT_BRANCH)]\n                    },\n                    failFast: false)\n            }\n        }\n        stage ('Build Skipped') {\n            when {\n                expression {\n                    GIT_BRANCH = 'origin/' + sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()\n                    return !(GIT_BRANCH == 'origin/master' || params.FORCE_FULL_BUILD)\n                }\n            }\n            steps {\n                echo 'Skipped full build.'\n            }\n        }\n    }\n}\n\nConclusion\n\nAs I said before, the Conditional BuildStep plugin is great.\nIt provides a clear, easy to understand way to add conditional logic to any Freestyle job.\nBefore Pipeline, it was one of the few plugins to do this and it remains one of the most popular plugins.\nNow that we have Pipeline, we can implement conditional logic directly in code.\n\nThis is blog post discussed how to approach converting conditional build steps to Pipeline\nand showed a couple concrete examples.  Overall, I’m pleased with the results so far.\nI found scenarios which could not easily be migrated to Pipeline, but even those\nare only more difficult, rather than impossible.\n\nThe next thing to do is add a section to the\nJenkins Handbook documenting the Pipeline\nequivalent of all of the Conditions and the most commonly used Tokens.\nLook for it soon!\n\nLinks\n\nConditional BuildStep plugin","title":"Converting Conditional Build Steps to Jenkins Pipeline","tags":["pipeline","freestyle","plugins","conditional-build-step","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-01-17T00:00:00.000Z","id":"51dc643a-7195-5ed6-b44d-6081914b07ff","slug":"/blog/2017/01/17/Jenkins-is-upgrading-to-Java-8/","strippedHtml":"In the next few months, Jenkins will require Java 8 as its runtime.\n\nBack in\nlast November,\nwe discussed interesting statistics showing that Jenkins was now running Java 8\non a majority of its running instances.\n\nTimeline\n\nHere is how we plan to roll that baseline upgrade in the next few months.\n\nNow: Announce the intention publicly.\n\nApril, 2017: Drop support for Java 7 in Jenkins weekly.\nWith the current rhythm, that means 2.52 will most likely be the first weekly to require Java 8.\n\nJune 2017: First LTS version requiring Java 8 is published.\nThis should be something around 2.60.1.\n\nIf you are still running Java 7, you will not be able to upgrade to the latest LTS version after some date probably around May 2017.\n\nWhy Upgrade to Java 8\n\nBalancing those numbers with many other criteria:\n\nJava 7 has been now end-of-lifed for 18+ months\n\nPeople are already moving away from Java 7, as show the numbers\n\n52.8% of instances were already running Java 8 back in last November, and now reaching 58% two months later.\n\nIf we only look at Jenkins 2.x, then we reach 72%.\n\nJava 8 runtime is known from the field to be more stable\n\nMany developers have been wanting to be allowed to leverage the improvements that Java 8 provides to the language and platform\n(lambdas, Date/Time API…​ just to name a few).\nBeing also a developer community, we want Jenkins to be appealing to contributors.\n\nIf you have questions or feedback about this announcement, please feel free to post it to the Jenkins developers mailing list.","title":"Jenkins Upgrades To Java 8","tags":["java8","upgrade"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg","srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/ede19/batmat.jpg 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/bc20c/batmat.jpg 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/f1e03/batmat.jpg 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/b691b/batmat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/8ba60/batmat.webp 32w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/a9ea7/batmat.webp 64w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/51559/batmat.webp 128w,\n/gatsby-jenkins-io/static/05e25bcf6699abfce74f0630971e7c78/28f98/batmat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":130}}},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"/blog/author/batmat","twitter":"bmathus"}]}},{"node":{"date":"2017-01-17T00:00:00.000Z","id":"23308d18-32ba-5461-b5aa-74f746e5049f","slug":"/blog/2017/01/17/scm-api-2.0-release/","strippedHtml":"The regressions\ndiscovered after release have now been resolved and this post has been updated with the correct plugin version numbers.\n\nSee this post for more details.\n\nWe are announcing the\nSCM API\n2.0.x and\nBranch API\n2.0.x release lines.\n\nDownstream of this there are also some great improvements to a number of popular plugins including:\n\nGitHub Branch Source\n\nBitBucket branch source\n\nGit\n\nMercurial\n\nPipeline Multibranch\n\nGitHub Organization Folders\n\nThere are some gotcha’s that Jenkins administrators will need to be aware of.\n\nAlways take a backup of your JENKINS_HOME before upgrading any plugins.\n\nWe want to give you the whole story, but the take home message is this:\n\nWhen updating the\nSCM API\nand/or\nBranch API\nplugins to the 2.0.x release lines, if you have any of the\nGitHub Organization Folders,\nGitHub Branch Source\nand/or\nBitBucket branch source\nplugins installed then you must upgrade them all to 2.0.x at the same time or Bad Things™ will happen.\n\n— A Jenkins Administrator\n\nDo NOT upgrade some of these plugins but not others!\nDoing so may cause your jobs to fail to load.\n\nIf you don’t care about the hows and whys, you can just skip down to this section but if you are curious…​ here we go!\n\nThe back-story\n\nWay back in September 2013 we announced the\nLiterate plugin,\nas an experimental new way of modeling branch development in Jenkins.\n\nWhen you are performing an experiment, the recommendation is to do just enough work to let you perform the test.\nHowever, the culture in Jenkins is to always try and produce reusable components that others can use in ways you have not anticipated.\n\nSo when releasing the initial version of the\nLiterate plugin\nwe also separated the Literate specific bits from the SCM specific concepts and multi-branch concepts.\nThese were lower level concepts were organized into the following plugins:\n\nSCM API -\nwhich was intended to be a plugin to hold a next generation API for interacting with source control systems.\n\nBranch API -\nwhich was intended to be a plugin to hold the multi-branch functionality that was abstracted from the usage by the Literate plugin.\n\nIn addition, we released updates to three of the more common SCM plugins which included implementations of the SCM API:\n\nGit plugin\n\nSubversion plugin\n\nMercurial plugin\n\nWhile there was some interest in the Literate plugin, it did not gain much traction - there are only 39 Jenkins instances running the Literate plugin as of December 2016.\n\nIn terms of the reusable components, we had only made a minimal implementation with some limitations:\n\nVery basic event support - events can only trigger a re-scan of the entire repository.\nThis was acceptable at the time because the only three implementations use a local cache of the remote state so re-scanning is quick.\n\nNo implementation of the SCMFileSystem API.\nAs a result it is not possible for plugins like\nPipeline Multibranch\nto get the Jenkinsfile from the remote repository without needing to checkout the repository into a workspace.\n\nNo documentation on how plugin developers are supposed to implement the SCM API\n\nNo documentation on how plugin developers are supposed to consume the SCM API (if they wanted to do something like Branch API but not the same way as Branch API)\n\nNo documentation on how plugin developers are supposed to implement the Branch API to create their own multi-branch project types\n\nNo documentation on for users on how the Branch API based project types are expected to work.\n\nRoll forward to November 2015 and Jenkins Pipeline got a release of the\nPipeline Multibranch.\nIt seems that pairing Pipeline with Branch API style multi-branch is much more successful than Literate - there are close to 60,000 instances running the pipeline multi-branch plugin as of December 2016.\n\nThere also were two new SCM plugins implementing the SCM API:\n\nGitHub Branch Source Plugin\n\nBitBucket Branch Source Plugin\n\nUnlike the previous implementations of the SCM API, however, these plugins do not maintain a local cache of the repository state.\nRather they make queries via the GitHub / BitBucket REST APIs on demand.\n\nThe above design decision exposed one of the initial MVP compromises of the SCM API plugin: very basic event support.\nUnder the SCM API 1.x model, the only event that an SCMSource can signal is something changed, go look at everything again.\nWhen you are accessing an API that only allows 5,000 API calls per hour, performing a full scan of the entire repository just to pick up a change in one branch does not make optimum usage of that 5,000 calls/hour rate limit.\n\nSo we decided that perhaps the SCM API and Branch API plugins have left their Minimum Viability Experiment state and the corresponding limitations should be addressed.\n\nEnter SCM API 2.0.x and Branch API 2.0.x\n\nSo what has changed in the\nSCM API\n2.0.x and\nBranch API\n2.0.x release lines?\nThese plugin releases include:\n\ndocumentation on how plugin developers are supposed to\nimplement the SCM API\n\ndocumentation on how plugin developers are supposed to\nconsume the SCM API\n(if they wanted to do something like Branch API but not the same way as Branch API)\n\ndocumentation on how plugin developers are supposed to\nimplement the Branch API\nto create their own multi-branch project types\n\ngeneric documentation for users on\nhow Branch API based project types are intended to work\n\na full featured\nevent system\nthat allows implementers to provide fine grained notifications to consumers\n\nlots\nand\nlots\nof new automated tests\n\na mock implementation\nof the SCM API to help consumers of the SCM API test their usage.\n\nIn addition, we have upgraded the following plugins to include the new fine-grained event support:\n\nGit Plugin\n\nMercurial Plugin\n\nOk, that was the good news.\nHere is the bad news.\n\nWe found out that the GitHub Branch Source and BitBucket Branch Source plugins had made invalid assumptions about how to implement the SCM API.\nTo be clear, this was not the plugin developers fault: at the time there was no documentation on how to implement the SCM API.\n\nBut fixing the issues that we found means that you have to be careful about which specific combinations of plugin versions you have installed.\n\nSCM API Plugin\n\nTechnically, the 2.0.x line of this plugin is both API and on-disk compatible with plugins compiled against older version lines.\n\nHowever, the 1.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins have hard-coded assumptions about internal implementation of the SCM API that are no longer valid in the 2.0.x line.\n\nIf you upgrade to SCM API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins and you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.\n\nThe solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.\n\nIf you upgrade the SCM API plugin to the 2.0.x line and do not upgrade the Branch API plugin to the 2.0.x line then you will not get any of the benefits of the new version of the SCM API plugin.\n\nBranch API Plugin\n\nThe 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.\nTechnically, the API is compatible with plugins compiled against older version lines.\n\nThe 1.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins have implemented hacks that make assumptions about internal implementation of the Branch API that are no longer valid in the 2.0.x line.\n\nThe Pipeline Multibranch plugin made a few minor invalid assumptions about how to implement a Multibranch project type.\nFor example, if you do not upgrade the Pipeline Multibranch plugin in tandem then you will be unable to manually delete an orphaned item before the orphaned item retention strategy runs, which should be significantly less frequently with the new event support.\n\nIf you upgrade to Branch API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins and you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.\n\nThe solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.\n\nGit Plugin\n\nThe new releases of this plugin are both API and on-disk compatible with plugins compiled against the previous releases.\n\nThe 2.0.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins require that you upgrade your Git Plugin to one of the versions that supports SCM API 2.0.x.\nIn general, the required upgrade will be performed automatically when you upgrade your GitHub Branch Source and BitBucket Branch Source plugins.\n\nMercurial Plugin\n\nThe new release of this plugin is both API and on-disk compatible with plugins compiled against the previous releases.\n\nThe 2.0.x line of the BitBucket Branch Source plugins require that you upgrade your Mercurial Plugin to the 2.0.x line.\nIn general, the required upgrade will be performed automatically when you upgrade your  BitBucket Branch Source plugins.\n\nBitBucket Branch Source Plugin\n\nThe 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.\n\nGitHub Branch Source Plugin\n\nThe 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.\n\nIf you upgrade to GitHub Branch Source 2.0.x and you have the GitHub Organization Folders plugin installed, you must upgrade that plugin to the tombstone release.\n\nGitHub Organization Folders Plugin\n\nThe functionality of this plugin has been migrated to the GitHub Branch Source plugin.\nYou will need to upgrade to the tombstone release in order to ensure all the data has been migrated to the classes in the GitHub Branch Source plugin.\n\nOnce you have upgraded to the tombstone version and all GitHub Organization Folders have had a full scan completed successfully, you can disable and uninstall the GitHub Organization Folders plugin.\nThere will be no more releases of this plugin after the tombstone.\nThe tombstone is only required for data migration.\n\nSummary for busy Jenkins Administrators\n\nUpgrading should make multi-branch projects much better.\nWhen you are ready to upgrade you must ensure that you upgrade all the required plugins.\nIf you miss some, just upgrade them and restart to fix the issue.\n\nFolders Plugin\n\n5.16 5.17 or newer\n\nSCM API Plugin\n\n2.0.1 2.0.2 or newer\n\nBranch API Plugin\n\n2.0.0 2.0.2 or newer\n\nGit Plugin\n\nEither 2.6.2 2.6.4 or newer in the 2.6.x line or 3.0.2 3.0.4 or newer\n\nMercurial Plugin\n\n2.0.0 or newer\n\nGitHub Branch Source Plugin\n\n2.0.0 2.0.1 or newer\n\nBitBucket Branch Source Plugin\n\n2.0.0 2.0.2 or newer\n\nGitHub Organization Folders Plugin\n\n1.6\n\nPipeline Multibranch Plugin\n\n2.10 2.12 or newer\n\nIf you are using the Blue Ocean plugin\n\nBlue Ocean Plugin\n\n1.0.0-b22 or newer\n\nOther plugins that may require updating:\n\nGitHub API Plugin\n\n1.84 or newer\n\nGitHub Plugin\n\n1.25.0 or newer\n\nAfter an upgrade you will see the data migration warning (see the screenshot in JENKINS-41608 for an example) this is normal and expected.\nThe unreadable data will be removed by the next scan / index or can be removed manually using the Discard Unreadable Data button.\nThe warning will disappear on the next restart after the unreadable data has been removed.\n\nSummary for busy Jenkins users\n\nSCM API 2.0.x adds fine-grained event support.\nThis should significantly improve the responsiveness of multi-branch projects.\nThis should significantly reduce your GitHub API rate limit usage.\n\nIf you are using the\nGitHub Branch Source\nor\nGitHub Organization Folders\nplugins then upgrading will significantly reduce the API calls made by Jenkins to GitHub.\n\nIf you are using any of the upgraded SCM plugins (e.g. Git, Mercurial, GitHub Branch Source, BitBucket Branch Source) then upgrading will significantly improve the responsiveness to push event notifications.\n\nSummary for busy SCM plugin developers\n\nYou should read the new\ndocumentation\non how plugin developers are supposed to implement the SCM API\n\nWhere to now dear Literate Plugin\n\nThe persistent reader may be wondering what happens now to the Literate plugin.\n\nFor me, the logical heir of the Literate Plugin is the\nPipeline Model Definition plugin.\nThis new plugin has the advantage of an easy to read pipeline syntax with the extra functionality that I suspect was preventing people from adopting Literate.\n\nThe good news is that the Pipeline Model Definition already has 5000 installations as of December 2016 and I expect up-take to keep on growing.","title":"SCM API turns 2.0 and what that means for you","tags":["development","plugins"],"authors":[{"avatar":null,"blog":null,"github":"stephenc","html":"","id":"stephenc","irc":null,"linkedin":null,"name":"Stephen Connolly","slug":"/blog/author/stephenc","twitter":"connolly_s"}]}},{"node":{"date":"2017-01-13T00:00:00.000Z","id":"3f353648-fd26-5fa2-874d-cbbc20b0fed6","slug":"/blog/2017/01/13/blueocean-dev-log-jan/","strippedHtml":"As we get closer to\nBlue Ocean\n1.0, which is planned for the end of March, I figured it would be great to\nhighlight some of the good stuff that has been going on. It’s been a\nbusy-as-usual week as everyone comes back from vacation.  A couple of new betas\nwent out this week. Of note:\n\ninput to Pipelines is now supported, a much asked for feature (see below)\n\nA new French translation\n\nSome optimisations (especially around reducing number of HTTP calls). We\nhave started using\ngtmetrix.com\nto measure changes on\"dogfood\"\nto get some numbers around optimisations on the web tier.\n\nAnd a grab bag of other great bug fixes.\n\nAlso a bunch of work has been done to support parametrized pipelines, as\nwell as creation of new multibranch pipelines (both are much asked for).\n\nThere is also now an \"official\" Docker image being published to\nDocker Hub. The Pipeline\nbuilding the container is run weekly and will be picking up newly tagged\nreleases of Blue Ocean.\n\nRunning the latest can be as simple as:\n\ndocker run -p 8888:8080 jenkinsci/blueocean:latest\n\nThis is built on the incredibly popular\nofficial \"jenkins\" image\n(10M pulls can’t all be wrong!). The container also has tags available (e.g.\njenkinsci/blueocean:1.0.0-b16) for grabbing a specific released version.\n\nUp next for Blue Ocean development as we march towards 1.0:\n\nSupport for parametrized jobs. For which a bunch of api work has already been\ndone.\n\nCreation of the new Pipeline GUI\n\nPreview release of the Visual Editor for\nDeclarative Pipeline.\n\nThe new header design will be applied\n\nEnjoy!\n\nIf you’re interested in helping to make Blue Ocean a great user experience for\nJenkins, please join the Blue Ocean development team on\nGitter!","title":"Blue Ocean Dev Log: January Week #2","tags":["blueocean"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/author/michaelneale","twitter":"michaelneale"}]}},{"node":{"date":"2017-01-12T00:00:00.000Z","id":"2ff4e12b-c7b0-5650-8366-ce14906b5f15","slug":"/blog/2017/01/12/declarative-pipeline-beta-2/","strippedHtml":"This week, we released the second beta of the new\nDeclarative Pipeline syntax,\navailable in the Update Center now as version 0.8.1 of Pipeline: Model Definition.\nYou can read more about Declarative Pipeline\nin the blog post introducing the first beta\nfrom December, but we wanted to update you all on the syntax changes in the\nsecond beta. These syntax changes are the last compatibility-breaking changes to\nthe syntax before the 1.0 release planned for February, so you can safely start\nusing the 0.8.1 syntax now without needing to change it when 1.0 is released.\n\nA full syntax reference is available on the wiki as well.\n\nSyntax Changes\n\nChanged \"agent\" configuration to block structure\n\nIn order to support more detailed and clear configuration of agents, as well as\nmaking agent syntax more consistent with the rest of the Declarative Pipeline\nsyntax, we’ve moved the agent configuration into blocks. The agent any and\nagent none configurations work the same as previously, but label, docker\nand dockerfile now look like the following:\n\nJust specifying a label is simple.\n\n// Declarative //\nagent {\n    label \"some-label\"\n}\n// Script //\n\nIf you’re just specifying a Docker image, you can use this simple syntax.\n\n// Declarative //\nagent {\n    docker \"ubuntu:16.04\"\n}\n// Script //\n\nWhen you are specifying a label or other arguments, docker looks like this:\n\n// Declarative //\nagent {\n    docker {\n        image \"ubuntu:16.04\"\n        label \"docker-label\"\n        args \"-v /tmp:/tmp -p 8000:8000\"\n    }\n}\n// Script //\n\nWhen you’re building an image from \"Dockerfile\" in your repository and\ndon’t care what node is used or have additional arguments, you can again\nuse a simple syntax.\n\n// Declarative //\nagent {\n    dockerfile true\n}\n// Script //\n\nWhen you’re building an image from a different file, or have a label or other\narguments, use the following syntax:\n\n// Declarative //\nagent {\n    dockerfile {\n        filename \"OtherDockerfile\"\n        label \"docker-label\"\n        args \"-v /tmp:/tmp -p 8000:8000\"\n    }\n}\n// Script //\n\nImproved \"when\" conditions\n\nWe introduced the when section a couple releases ago, but have made some\nchanges to its syntax here in 0.8.1. We wanted to add some simpler ways to\nspecify common conditions, and that required we re-work the syntax accordingly.\n\nBranch\n\nOne of the most common conditions is running a stage only if you’re on a\nspecific branch. You can also use wildcards like \"*/master\".\n\n// Declarative //\nwhen {\n    branch \"master\"\n}\n// Script //\n\nEnvironment\n\nAnother built-in condition is the environment condition, which checks to see\nif a given environment variable is set to a given value.\n\n// Declarative //\nwhen {\n    environment name: \"SOME_ENV_VAR\", value: \"SOME_VALUE\"\n}\n// Script //\n\nExpression\n\nLastly, there’s the expression condition, which resolves an arbitrary\nPipeline expression. If the return value of that expression isn’t false or\nnull, the stage will execute.\n\n// Declarative //\nwhen {\n    expression {\n        echo \"Should I run?\"\n        return \"foo\" == \"bar\"\n    }\n}\n// Script //\n\n\"options\" replaces \"properties\" and \"wrappers\"\n\nWe’ve renamed the properties section to options, due to needing to add new\nDeclarative-specific options and to cut down on confusion. The options section\nis now where you’ll put general Pipeline options like buildDiscarder,\nDeclarative-specific options like skipDefaultCheckout, and block-scoped steps\nthat should wrap the execution of the entire build, like timeout or\ntimestamps.\n\n// Declarative //\n\noptions {\n    buildDiscarder(logRotator(numToKeepStr:'1'))\n    skipDefaultCheckout()\n    timeout(time: 5, unit: 'MINUTES')\n}\n// Script //\n\nHeading towards 1.0!\n\nWhile we may still add more functionality to the Declarative Pipeline syntax,\nwe won’t be making any changes to existing syntax for the 1.0 release. This\nmeans that any pipelines you write against the 0.8.1 syntax will keep working\nfor the foreseeable future without any changes. So if you’re already using\nDeclarative Pipelines, make sure to update your `Jenkinsfile`s after upgrading\nto 0.8.1, and if you haven’t been using Declarative Pipelines yet, install the\nPipeline: Model Definition plugin and\ngive them a try!","title":"Declarative Pipeline Syntax Beta 2 release","tags":["plugins","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"<div class=\"paragraph\">\n<p>Andrew was a core committer to Hudson and the author of numerous plugins.</p>\n</div>","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/author/abayer","twitter":"abayer"}]}},{"node":{"date":"2017-01-11T00:00:00.000Z","id":"b6d5d789-c4f4-5f71-bda6-b5ab5196b7e9","slug":"/blog/2017/01/11/jenkins-world-2017-cfp/","strippedHtml":"The largest Jenkins event, Jenkins\nWorld is coming to San Francisco, California on August 28 - 31, 2017, at the\nMarriott Marquis.  This conference will feature two days of hands-on training,\nworkshops, and certification exams followed by two more days with five tracks\nof technical sessions from Jenkins and DevOps experts from around the world.\n\nInspire your peers and colleagues by sharing your expertise and experience as\none of the Jenkins World speakers.\nThe Call for Papers is open, last\nday for submitted a proposal is March 5th, 2017.\n\nCompared to Jenkins World 2016, what’s new for\n2017?  Two tracks are now dedicated to \"show and tell.\" These sessions are\ntechnically advanced with code sharing, heavy on demos, and only a few slides.\nIf you are like most of us - driven to learn, share, and collaborate…​we’d\nlike to hear from you!\n\nLooking forward to your amazing proposal(s)!\n\nSubmit your proposal here!","title":"Jenkins World 2017 Call for Papers is Open","tags":["event","jenkinsworld","jenkinsworld2017"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg","srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/8d248/alyssat.jpg 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/c004c/alyssat.jpg 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/a55dc/alyssat.jpg 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/9e67b/alyssat.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/22924/alyssat.webp 32w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/89767/alyssat.webp 64w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/40d97/alyssat.webp 128w,\n/gatsby-jenkins-io/static/fee8c4b53c42d9c396735bc2b737ff84/5028e/alyssat.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":166}}},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/author/alyssat","twitter":null}]}},{"node":{"date":"2017-01-10T00:00:00.000Z","id":"ce9069d6-e9c4-5b3e-b147-2b3d3ac2f09d","slug":"/blog/2017/01/10/jenkins-lifx-notifier-plugin/","strippedHtml":"This is a\ncross\npost by Veaceslav Gaidarji, open source\ndeveloper and contributor to the Jenkins and Bitrise projects.\n\nSome time ago I encountered a LIFX smart bulbs.\nThese are the bulbs with a chip inside - 50% bulb, 50% chip. There are mobile\napplications for easy configuration and remote control of the bulb. Nothing\nspecial here, it simply works and is very convenient to have such bulbs in\ndormitory.\n\nBrilliant idea time\n\n99% of ideas which come to our minds either were already implemented by someone\nelse or they are useless.\n\n— Veaceslav Gaidarji\n\nAnd as it always happens, the developer inside me generated an idea which, as\nit always happens, was implemented by someone else already.\n\nThe idea was: to connect a LIFX bulb to Jenkins server and update the color\naccording to a job’s state.\n\nBefore starting to work on such Jenkins plugin, I searched for similar projects\non Google and the first links pointed me to existing\nLIFX notifier plugin\nand a\nblog post\nfrom\nMichael Neale\nwho created the plugin. Michael’s post describes exactly what I had in mind.\n\nAt this point I had 2 options:\n\nforget about building something new and just use the plugin\n\nimprove existing plugin\n\nFirst option is always easy and effortless, but second one is more challenging.\n\nImproving an existing plugin\n\nThe existing LIFX notifier plugin\ndid its job really well and I was able to connect my bulb to Jenkins and test\nit. But it wasn’t complete and had no configurable at all, therefore no\npossibility to change the colors.\n\nFirst, I read Jenkins contribution guidelines, which\nencourage\ndevelopers to improve existing plugins (if any) and not create other versions\nof plugins with similar functionality. Then I contacted the plugin author, Michael Neale,\nvia email and kindly asked for the contributor access in GitHub\nfor the existing plugin version. After a short discussion about my plans on this\nplugin, Michael added me as a contributor to GitHub\nrepo and wished me\ngood luck. Thanks Michael!\n\nI wanted to improve the LIFX notifier plugin to add the ability\ncustomize the colors ( in progress, build success and build failure). This\nis not a hard task actually.\nA 1000+ plugins were\ndeveloped for Jenkins by the hackers like me, which means that I should have no\nproblem to do it as well.\nFortunately for me, I have used some plugins already which had a UI similar to\nthat I had planned to add to the LIFX notifier, such as:\n\nHockeyApp plugin\n\nFabric Beta publisher plugin\n\nDifferent Build notifiers plugins\n\nReviewing the code for these plugins, plus Jenkins\nplugin\ndevelopment documentation, and of course looking over\nJelly components helped\nme to:\n\nBetter understand the Jenkins architecture.\n\nLearn how Jenkins plugins work in general.\n\nLearn how to create the UI components for a plugin.\n\nLearn how to subscribe to Jenkins job state changes using appropriate\nextension points.\n\nIn a few weeks I’ve finished my plugin modifications and added unit tests for\nits major parts.  As a result, the plugin now has a UI configuration section in\nPost-build Actions which is self descriptive:\n\nThe last step was to prepare new plugin version and publish it to the world!\nThe Jenkins\"Hosting\nplugins\" document describes step by step process of how to publish a plugin.\n\nThis includes many steps which should be respected very carefully.\n\nDemo\n\nWhat I’ve learned\n\nIt was my first experience in Jenkins plugins development. I should say that\nsteep learning curve is high enough, and sometimes is really hard to find\nanswers on appearing questions. But in general it’s all about Java, XML,\nMaven and it’s a lot of fun developing Jenkins plugins.\n\nCheck out the LIFX notifier page\nfor more information about the latest releases!\n\nBonus : bitrise.io users, I’ve developed step LIFX notifier for bitrise as well.","title":"Learning plugin development by improving the LIFX notifier plugin","tags":["plugins","lifx"],"authors":[{"avatar":null,"blog":"http://vgaidarji.me","github":"vgaidarji","html":"<div class=\"paragraph\">\n<p>Veaceslav is a software developer with the main focus on Android platform.\nIn his free time, he enjoys working on different open-source projects.</p>\n</div>","id":"vgaidarji","irc":null,"linkedin":null,"name":"Veaceslav Gaidarji","slug":"/blog/author/vgaidarji","twitter":"v_gaidarji"}]}},{"node":{"date":"2017-01-10T00:00:00.000Z","id":"977904eb-252b-582f-a038-4682f4224260","slug":"/blog/2017/01/10/security-warnings/","strippedHtml":"Jenkins 2.40 was released earlier this week, and readers of the\nchangelog\nwill have noticed that it now includes the ability to show security warnings\npublished by the configured update site.  But what does that mean?\n\nIn the past, we’ve notified users about security issues in Jenkins and in\nplugins through various means: Emails to the\njenkinsci-advisories mailing list\n(which I recommend you subscribe to), blog posts, and, recently, emails to the\noss-security mailing list.  But I still wanted to increase the reach of our\nnotifications, to make sure Jenkins admins are informed quickly about possible\nsecurity problems on their instances.  The logical next step was to include\nthese notifications in Jenkins itself, and that feature has been added in\nJenkins 2.40.\n\nToday we enabled the publication of warnings on our update sites: Once Jenkins\n2.40 (or newer) refreshes its cache of update site metadata, it may now inform\nyou that you’re using a vulnerable plugin that should be updated or removed.\nRight now, these aren’t previously unknown warnings, but reference security\nadvisories for plugin vulnerabilies that have been published over the past few\nyears.\n\nWe will of course continue to publish security advisories using the mailing\nlist of the same name, as well other means.\n\nStay safe!","title":"Security warnings in Jenkins","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}}]}},"pageContext":{"limit":8,"skip":336,"numPages":100,"currentPage":43}},
    "staticQueryHashes": ["3649515864"]}