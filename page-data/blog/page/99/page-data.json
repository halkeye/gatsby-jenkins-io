{
    "componentChunkName": "component---src-templates-blog-list-template-js",
    "path": "/blog/page/99",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2010-02-17T00:00:00.000Z","id":"8c069e9b-d471-5bea-86b9-a057759e2c8c","slug":"/blog/2010/02/17/getting-started-building-android-apps-with-hudson/","strippedHtml":"In this post I’ll show a very basic tips on how to compile an Android project using Hudson. Specifically how  I use Hudson to create release versions of my apps.\n\nDebug vs Release\n\nI’m assuming that you are using Eclipse with the ADT plugin. During development you can test your app on the emulator or a device and resources like R.java and aidl files are compiled for you automatically by the plugin. When it’s time to release your app, you’ll need to go through some steps:\n\nYou must sign your app using a certificate\n\nYou must update your AndroidManifest.xml to remove the android:debuggable attribute\n\nReplace your Google Maps API debug key with the one belonging to your release certificate (if you are using a MapView)\n\nGenerate an apk package for the release and test it on a device or emulator\n\nIt would be nice to automate a few of these steps, and this is where Hudson comes in.\n\nAutomated builds: Ant\n\nFor automated builds the Android SDK uses Apache Ant, which Hudson has great support for. To generate a template build.xml you can use the android tool from the SDK using the following command:\n\nandroid create project -n template -t android-7 -p template -k dummy.pkg -a Dummy\n\nThe target is specified as \"android-7\" meaning that we are building for Android 2.1. For apps that use MapView we would use \"Google Inc.:Google APIs:7\". It is a good idea to always target the latest SDK. From this template project we’ll grab the build.properties and the build.xml and copy those to the Android project that we want to build. Edit build.xml and set the project name to your Android project name.\n\nThe local.properties file contains the path to the SDK root and shouldn’t be checked in to version control. For our use we’ll set the properties that are in that file on the Hudson job configuration page.\n\nRunning the build in Hudson\n\nThis part is easy: create a new freestyle job and let it be build with ant. The targets that we want to execute are clean release. Release will compile, package and sign your apk. Now to get this working right, some custom properties should be set (use the Advanced button).\n\nsdk.dir=/Users/hugo/Code/android-sdk-mac\ntarget=Google Inc.:Google APIs:7\nkey.store=certs/rd-release.keystore\nkey.alias=rainydays\nkey.store.password=thisisnotmypassword\nkey.alias.password=thisisnotmypassword\n\nThe sdk.dir should point to the Android SDK root on your Hudson node. In my case I’m running Hudson locally on my machine.  The target property refers to the SDK we want to use as mentioned earlier.  The key. properties are related to signing of the apk. My strategy is to have a separate key store and private key for each application that I develop. I also check that keystore in to SVN. I also archive the -release.apk artifact so that I can download the latest release apk directly from Hudson.  After completing these steps, you should be able to build your Android app with Hudson.\n\nUpdating the AndroidManifest for release\n\n…​But we’re not done yet :) Remember what I said about updating the AndroidManifest.xml? For that we need to edit the build.xml, which by default contains nothing more then a tag to pull in the Android SDK ant target definitions. For my Rainy Days application, I adjusted build.xml like this:\n\n...\n\nRemoving debug attribute from AndroidManifest.xml\n\nSetting release maps key\n\nWhat the above snippet does is removing the android:debuggable attribute from the AndroidManifest.xml and replacing the maps API key in res/layout/maplayout.xml with the correct key for release. The -package-resources target is pulled in from the Android android_rules.xml file.\n\nNow when Hudson builds my app I get a ready to release apk that I can install on my device or emulator, which is pretty nice.\n\nThere is are some issues with this approach however. As you might have noticed:\n\nReplacements are done in the workspace, we are not really building exactly what’s in svn\n\nEach new build should start out fresh for that reason, for example by using the svn revert option.\n\nAdditionally I can not yet tag the release version with the updated files, because the subversion tagging plugin doesn’t support this by design. This could be worked around by adding svn statements in the build.xml however.  For now I don’t really mind as I make minor changes to the resource files, but I’ll be looking at improving this situation.\n\nThings to add: unit testing, coverage…​\n\nOne thing that I’d really like to add is unit testing. This is a little bit more complicated though, since unit tests require a running emulator and a running emulator requires a gui. The Hudson Xvnc plugin could be very helpful here.\n\nThe Android build scripts for test projects already include EMMA output, it shouldn’t be to hard to use the Hudson plugin for that.\n\nWhen Hudson is running on a local machine, the Batch task plugin can automate installing the apk on a device to automate things further.\n\nSummary\n\nBuilding Android applications with Hudson is not that hard, since the builds are based on Ant. By hooking in to the standard Android build targets it’s easy to update files like AndroidManifest.xml which in turn makes sure the release process is controlled and predictable.\nAndroid unit tests depend on the emulator which is a little bit more challenging to set up, but Hudson already has some plugins available to make this easier.\n\nEditor’s Note: Hugo Visser is the developer of Rainy Days and Engine Watch for Android. You can\nfollow him on Twitter and on his blog.","title":"Getting started: Building Android apps with Hudson","tags":["general","guest post","jobs","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-02-16T00:00:00.000Z","id":"d8a54963-98f5-5089-94f4-d01ae20a6094","slug":"/blog/2010/02/16/performance-improvements-in-1-346/","strippedHtml":"From time to time, we get a report of out of memory problems in Hudson. It’s frequent enough that we have a dedicated Wiki page that talks about how to obtain information to help devs work on the problem.\n\nSo the latest thread from David Woon was assumed to be one of those ordinary trouble-shooting sessions, but thanks to Gustaf Lundh, it turned out to be a very interesting exercise.\n\nWhat we discovered was that the profiler I was using ( Your Kit Profiler), was basically eliminating all the weak/soft references from the picture entirely. If we are looking for leaks, this was the right thing, as those references will be cleared before VM chokes with OutOfMemoryError. But because of this elimination, I was completely blind to the wasteful memory usage in Jelly, which are only reachable via soft references.\n\nSo I used Eclipse Memory Analyzer and YJP side by side to look into Jelly’s memory usage, and based on that insight, I was able to substantially improve the memory usage and speed of Jelly.\n\nI monitor my production Hudson deployment with VisualGC, and the result was quite noticable. And I hope you’ll notice that the response from Hudson is also snappier.\n\nAll these changes are a part of the latest 1.346 release.\n\nEditor’s Note: Kohsuke Kawaguchi a senior engineer at Oracle (formerly Sun) and is the founder and author of the Hudson project. To learn more about Kohsuke, you can follow him on Twitter or subscribe to his blog.","title":"Performance improvements in 1.346","tags":["development"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-02-15T00:00:00.000Z","id":"14568d6a-fed2-5300-b85e-0b16bfc36af4","slug":"/blog/2010/02/15/hudson-1-346-released/","strippedHtml":"After some scrambling earlier in the week to get 1.345 out the door, correcting some regressions in 1.344, the Hudson team still rolled out a 1.346 release last Friday, February 12th, 2010. Similar to the past couple releases, 1.346 had a good number of bug fixes, including a a performance fix when dealing with larger build submissions and a substantial revision of the SCM polling code to fix a long-standing issue with the quiet period blocking the build from running ( issue 2180), there were also some additionally memory improvements made to Jelly, the library with which the majority of Hudson’s web interface is rendered, that Kohsuke will detail in a later post.\n\nHere’s the breakdown:\n\nBugs fixed\n\nMaven modules should not be buildable when the parent project is disabled. ( issue 1375)\n\nFixed the broken quiet period implementation when polling interval is shorter than the quiet period. (Changes in SCM impls are needed for this to take effect.) ( issue 2180)\n\nEscape username in URLs in case it contains special characters such as \"#\". ( issue 2610)\n\nFix sidepanel link for People to be visible and show view-specific info when appropriate. ( issue 5443)\n\nImproved HTML rendering, not using closing tags that do not exist in HTML. ( issue 5458)\n\nShow better error message for missing view type selection when creating a view. ( issue 5469)\n\nHudson wasn’t properly streaming a large external build submission, which can result in OOME and unresponsiveness.\n# Enhancements\n\nUse fixed-width font in text area for shell/batch build steps. ( issue 5471)\n\nUse user selected icon size on People page. ( issue 5447)\n\nSpeed/footprint improvement in the HTML rendering.\n\n# Contributors This release of Hudson contained 37 commits from 3 different contributors to \"core\": * kohsuke * mindless * sogabe\nAs usual, you can go grab the [latest .war file]( http://mirrors.jenkins.io/war-stable/latest/jenkins.war) straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade. ---- Updated: Added the \"official\" changelog notes","title":"Hudson 1.346 Released","tags":["development","feedback","just for fun","links"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-02-14T00:00:00.000Z","id":"84b99421-35ba-54b4-ac47-36143a5e7a39","slug":"/blog/2010/02/14/thanks-for-the-help/","strippedHtml":"A great community of developers and users is one of the many things that make Hudson a great tool and a fun project to work with, after launching Continuous Blog as an extensions of that community earlier this week there are some thanks in order to those that helped spread the word about CB and in turn, Hudson. Thanks to:\n\nEverybody on Twitter who retweeted the Continuous Blog launch announcement\n\nJulian Simpson, also known as The Build Doctor for helping spread the word\n\nKevin Farnham for featuring the launch of Continuous Blog on the Java.net home page!\n\nOf course, none of this would be possible without Kohsuke and a large collection of contributors that have made Hudson what it is today.","title":"Thanks for the help!","tags":["core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-02-12T00:00:00.000Z","id":"951ade56-1f15-5d62-baf7-28408a9805fb","slug":"/blog/2010/02/12/this-week-in-plugins/","strippedHtml":"Since this is the first \"This Week in Plugins\" (TWiP), I’m trying a fairly basic format out. I’m debating how much information I want to include in these, while I would like to include details on \"what’s changed\" for each plugin over the course of the week, the means of fetching that information would be incredibly tedious (read: no fun) since there’s not particularly any standard meta-data to be scraped from the wiki. Duplicates have been pruned from the list, meaning the latest release of a plugin is what’s being shown; sorting is also by day of release then alphabetical.\n\nFeb 4th, 2010\n\nCodescanner Plug-in 0.9 released\n\nFeb 5th, 2010\n\nCentralized Job(Re)Action 1.1 released\n\nPerformance Publisher plugin 7.95 released\n\nSelenium Auto Exec Server(AES) plugin 0.3 released\n\nFeb 6th, 2010\n\nMSTest plugin 0.5 released\n\nTextFinder plugin 1.8 released\n\nFeb 7th, 2010\n\nConfiguration Slicing plugin 1.16 released\n\nFeb 8th, 2010\n\nClearCase UCM Baseline Plug-in 1.2 released\n\nJoin plugin 1.8 released\n\nFeb 9th, 2010\n\nDownstream-Ext 1.5 released\n\nGroovy Postbuild 1.1 released\n\nFeb 10th, 2010\n\nBatch task plugin 1.13 released\n\ndisk-usage plugin 0.10 released\n\nJBoss Management Plugin 1.0 released\n\nSidebar Link 1.3 released\n\nslave-status 1.4 released\n\nSLOCCount Plug-in 1.4 released\n\nStarTeam plugin 0.2 released\n\nTemplate Project plugin 1.1 released\n\nTuxDroid Plugin 1.6 released\n\nZentimestamp plugin 1.2 released\n\nFeb 11th, 2010\n\nBackup plugin 1.4 released\n\nPromoted Builds (Simple) 1.2 released\n\nPython Plugin 1.1 released\n\nSubversion Plug-in 1.11 released","title":"This Week in Plugins","tags":["infrastructure","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-02-11T00:00:00.000Z","id":"9dc5f12a-2cfe-53e1-a2b5-4db99283731e","slug":"/blog/2010/02/11/spotlight-on-ita-software/","strippedHtml":"For the first \"User Spotlight\" interview ever on Continuous Blog, I am talking with Matt Girard of\nITA Software, a Boston-based software company that produces travel industry software which is used by many of the major carriers in the U.S. and abroad. When I sent out a message asking for users of Hudson in the corporate space to ping me about doing a \"spotlight\" on them, ITA Software stuck out in particular; they’re hiring a Hudson expert!\n\nThe format for the \"spotlight\" series isn’t entirely nailed down yet so feel free to ask questions in the comments section and I’ll follow-up with Matt after the fact if need be. That said, without further delay, Matt Girard from ITA Software, on Hudson.\n--- Hudson Matt, appreciate you taking the time to answer some questions about Hudson at ITA Software, let’s start with a simple one: How long has ITA been using Hudson?\n\nMatt My pleasure, glad to be a part of the community. We have been using Hudson in some form since early 2008. Predictably our usage has increased over time and now encompasses the majority of our automated build and test infrastructure.\n\nHudson Was continuous integration a part of ITA’s workflow prior to adopting Hudson? If so: what did ITA switch to Hudson from, and why?\n\nMatt Yes, though not to the degree that we have now. Prior to Hudson we were reliant on BuildBot for our automated builds, but we were not doing continuous integration\n across our components until after the transition to Hudson. The easy to understand UI and flexibility were primary features that compelled our switch. I should mention\n that when we decided to switch we also evaluated CruiseControl but Hudson came out on top for our needs.\n\nHudson What kind of projects are you typically using Hudson for? What\nlanguages/build system(s)? What platforms is Hudson performing builds? What kinds of jobs primarily run on ITA’s Hudson cluster?\n\nMatt Our Hudson environments (yes, we have more than one) have been optimized for building C++, Java (all maven based), Lisp (a surprise to some to be sure more about that here), and Python on Linux build agents (Fedora and CentOS).\n\nOur jobs are (loosely) grouped into one of three categories: rpm (we are primarily RedHat based), tests, and tools. The rpm jobs are the actual code builds and individual component unit tests. The test jobs (thank you parameterized trigger plugin!) are part of a larger cross-component integration testing and promotion scheme. The (handful of) tools jobs support us in tasks such as cleaning up stale sandbox database connections.\n\nHudson Given the flexibility of Hudson, it’s safe to say that not everybody is using it in the exact same fashion, is there anything you would consider interesting or noteworthy about the use of Hudson at ITA?\n\nMatt I think that our most interesting usage of Hudson has to be how we have combined parameterized builds with the parameterized trigger plugin in order to do cross-component testing of trunk code. More specifically, we pass a properties file (to us a \"scoreboard\" that tells the jobs what exact revisions of which projects to\n test together) to several jobs and only build a final promotion job if ALL of downstream jobs (with the same scoreboard) passed. In this way we create a hurdle that all of our code must clear before we even consider deploying it anywhere else.\n\nThe next most interesting thing we are doing is using Hudson for continuous deployment of monitoring changes into our staging environment. It’s quite rewarding to watch a check-in makes it’s way through Hudson, into and rpm, and out to a server without a human being involved.\n\nHudson Are there any additional tools ITA has written to better integrate things \"behind the scenes\"?\n\nMatt We evolved what became a very large build script (mostly derived from what we had for BuildBot) that handles all of the nitty-gritty details involved in the building, packaging, and testing of our software. Recently we have been working to refactor this into several smaller build tools each with a more focused purpose. The first of these is designed (largely as a wrapper to rpmbuild) to standardize our package building while leaving the .spec files (with the real specifics) living alongside the code where they belong.\n\nHudson On a scale from 1-10, how important would you rate Hudson for ITA’s\nday-to-day workflow?\n\nMatt ITA is a decent size company and there is plenty of work that goes on that does not involve Hudson in any way. Still since we rely on the building and testing that Hudson does in order to promote new code to production, I would say that we are somewhere around an 8.\n\nI’d like to thank Matt again for being a good sport as the very first in what I hope will be a long line of \"spotlights\" on companies using Hudson to help them work smart, better and faster. If you would like to discuss your company’s use of Hudson for Continuous Blog, you can contact me at tyler at linux.com\n\nEditor’s Note: Matt Girard is the Manager of Build and Integration at ITA Software and a passionate advocate for continuous integration and continuous deployment. He believes that release engineering exists to make developers lives easier — not harder — and can be found posting about such topics on Twitter as @equalize.","title":"Spotlight on: ITA Software","tags":["general","feedback","interview"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-02-10T00:00:00.000Z","id":"bf65fc5d-5128-5381-a704-e7da235ac78d","slug":"/blog/2010/02/10/keeping-your-configuration-and-data-in-subversion/","strippedHtml":"We all know that keeping important files in version control is critical, as it ensures problematic changes can be reverted and can serve as a backup mechanism as well. Code and resources are often kept in version control, but it can be easy to forget your continuous integration (CI) server itself! If a disk were to die or fall victim to a misplaced rm -rf, you could lose all the history and configuration associated with the jobs your CI server manages.\n\nIt’s pretty simple to create a repository, but it isn’t obvious which parts of your $HUDSON_HOME you’ll want to backup. You’ll also want to have some automation so new projects get added to the repository, and deleted ones get removed. Luckily we have a great tool to handle this: Hudson!\n\nWe have a Hudson job which runs nightly, performs the appropriate SVN commands, and checks in. The high-level overview of this job is basically:\n\nAdd any new jobs, users, plugin configurations, et cetera: svn add -q --parents.xml jobs/ /config.xml users/ /config.xml userContent/\n\nRemove anything from SVN that no longer exists (such as a deleted job): svn status | grep '!' | awk '{print $2;}' | xargs -r svn rm\n\nCheck it in! svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\"\nYou’ll want to make sure to use the --non-interactive option for any automated svn operations, as this ensures Subversion won’t hang asking a question but instead fail immediately. You may also need to provide your password with the --password option.\n\nTo make such a Hudson job, create a new job, tie it to the controller (since this is where the configuration files are), set it to build periodically (we use “@midnight”), and add an “Execute shell” build step. Here’s the full script we use, to put into the build step:\n\n# Change into your HUDSON_HOME.\ncd /opt/hudson\n# Add any new conf files, jobs, users, and content.\nsvn add -q --parents *.xml jobs/*/config.xml users/*/config.xml userContent/*\n# Ignore things in the root we don't care about.\necho -e \"warnlogn*.logn*.tmpn*.oldn*.bakn*.jarn*.json\" > myignores\nsvn propset svn:ignore -F myignores . && rm myignores\n# Ignore things in jobs/* we don't care about.\necho -e \"buildsnlast*nnext*n*.txtn*.lognworkspace*ncoberturanjavadocnhtmlreportsnncoverndoclinks\" > myignores\nsvn propset svn:ignore -F myignores jobs/* && rm myignores\n# Remove anything from SVN that no longer exists in Hudson.\nsvn status | grep '!' | awk '{print $2;}' | xargs -r svn rm\n# And finally, check in of course, showing status before and after for logging.\nsvn st && svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\" && svn st\n\nYou’ll notice this does some extra things like set the svn:ignores property to provide a relatively clean svn st which it shows before and after the commit for logging purposes. One thing this job doesn’t do is put the build results of your jobs in version control. Because historical build logs and artifacts will never change and are also potentially large, a periodic (daily or weekly) cp or rsync of the jobs directory will still give you restorability while keeping your repository lean.\n\nNow you can sleep well at night knowing that your CI server is safe and sound. If you are doing a similar thing with Hudson or another CI system, let us know about your solution!\n\nEditor’s Note: Mike Rooney is a Software Engineer at Genius.com, provider of real-time marketing automation software connecting marketing and sales. You can read more posts from Mike and other Geniuses at eng.genius.com","title":"Keeping your configuration and data in Subversion","tags":["development","guest post","jobs","just for fun","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-02-09T00:00:00.000Z","id":"985837f3-6dcc-5a5d-bb91-8dd351a4bd3c","slug":"/blog/2010/02/09/whats-going-on-with-the-hudsons-infrastructure/","strippedHtml":"A lot has changed in the Hudson development and distribution infrastructure since last summer - we’ve made a distinct effort to get the quality of our infrastructure to match the quality of Hudson itself. We owe a special thanks to the wonderful folks over at Atlassian - we’re taking advantage of their generous open source license for our bug tracking ( JIRA), wiki ( Confluence), and source repository browser ( FishEye). Obviously, there’s a lot more we can improve going forward - I’ll have another post up soon, looking at some of the ideas we’re kicking around. But for now, take a look at what we’ve already done, below the fold.\n\nThe Hudson war and plugin downloads have all moved off of the unreliable java.net to our own [hudson-ci.org]( https://hudson-ci.org) with the downloads being powered by the same system used for distributing Java, OpenSolaris, and NetBeans. Downloading Hudson and/or plugins is now easier and more reliable.\n\nWe’ve moved issue tracking from java.net’s system to our own JIRA instance, at [issues.hudson-ci.org]( https://issues.hudson-ci.org). As with moving downloads off java.net, we’ve made reporting and browsing Hudson’s issues much faster, easier and more reliable, while still using the same authentication on the back-end as our Subversion and Maven repositories. We’re still working out some kinks in the system but since we’re running our own issue tracker now, rather than using one we didn’t have control over, we’ve got the flexibility we need to adapt our tools to best serve the developer and user communities.\n\nSpeaking of tools we now run ourselves, we’ve put up our own FishEye instance at [fisheye.hudson-ci.org]( https://fisheye.hudson-ci.org) - until that was in place, we’d been relying on Atlassian’s public FishEye instance, which has many other open source projects' repositories available. Getting our own server up means we don’t have to bug the generous folks over at Atlassian every time the java.net SVN server confuses FishEye into failing to update. It also opens the door for us to use Crucible for code review in the future.\n\nHudson’s moved onto Twitter more and more over the last 6-9 months - we’ve got the always fabulous @hudsonci, tweeting new releases, Hudson-related tweets, and more, as well as the #hudsonci hashtag.\n\nThis may not strictly be infrastructure but it’s worth mentioning that we’ve now got native packages and distribution for Hudson for Ubuntu/Debian, Red Hat/Fedora/CentOS, openSUSE, OpenSolaris/Nevada, and FreeBSD.\n\nThis is all in addition to key parts of our infrastructure that haven’t changed: our official wiki, our user and developer mailing lists, our Subversion repository (and a Git mirror on GitHub) and our IRC channel over on Freenode.\n\nOh, and I hear there’s a blog now too.\n\nEditor’s Note: *Andrew Bayer ( abayer) has been a contributor to Hudson since early 2009, contributing to the ClearCase plugin, Hudson’s core and a small number of other plugins. Andrew also helps Kohsuke with a lot of Hudson’s project infrastructure, most notably the migration from Bugzilla on Java.net to JIRA running at issues.hudson-ci.org *","title":"What's going on with the Hudson's infrastructure","tags":["development","core","feedback","just for fun"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}}]}},"pageContext":{"limit":8,"skip":784,"numPages":100,"currentPage":99}},
    "staticQueryHashes": ["3649515864"]}