{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/security/page/6",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2017-04-11T00:00:00.000Z","id":"a9284a81-2902-5a91-9618-c11ceca70747","slug":"/blog/2017/04/11/new-cli/","strippedHtml":"In response to the zero-day vulnerability we fixed in November, I wrote the following:\n\nMoving forward, the Jenkins security team is revisiting the design of the Jenkins CLI over the coming weeks to prevent this class of vulnerability in the future.\nIf you are interested in participating in that discussion, please join in on the jenkinsci-dev@ mailing list.\n\nIn early February, several project contributors met after FOSDEM for a one day hackathon.\nI looked into the feasibility of a purely SSH-based CLI.\nWhile I considered the experiment to be a success, it was far from ready to be used in a production environment.\n\nA few weeks later, long-time contributor and Jenkins security team member Jesse Glick took over, and published a detailed proposal for a new, simple CLI protocol without remoting.\n\nIn just a month, he implemented his proposal, and I’m very happy to announce that this new implementation of the Jenkins CLI has now made it into 2.54!\n\nExisting jenkins-cli.jar clients should continue working as before, unless an administrator disables the remoting connection mode in Configure Global Security.\nThat said, we recommend you download the new jenkins-cli.jar in Jenkins, and use its new -http mode.\nWith few (now deprecated) exceptions, CLI commands work like before.\nThis will allow you to disable the remoting mode for the CLI on the Jenkins controller to prevent similar vulnerabilities in the future.\n\nSSH-based CLI use should be unaffected by this change.\nNote that new Jenkins instances now start with the SSH server port disabled, and the configuration option for that was moved into Configure Global Security.\n\nYou can learn all about the CLI and its new behavior in the Jenkins handbook.","title":"New, safer CLI in 2.54","tags":["plugins","security","remoting"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-04-10T00:00:00.000Z","id":"2ff77860-9123-5dcf-b79a-b4d987a5169e","slug":"/blog/2017/04/10/security-advisory/","strippedHtml":"These are not security fixes you can apply blindly. We strongly recommend you read this post, as well as the security advisory to understand what the vulnerabilities are, whether and how they affect you, and what to expect when upgrading plugins.\n\nMultiple Jenkins plugins received updates today that fix several security vulnerabilities or other security-related issues:\n\nEmail Extension (Email-ext)\n\nEnvironment Injector (EnvInject)\n\nExtensible Choice Parameter\n\nGroovy\n\nJob DSL\n\nLockable Resources\n\nMatrix Authorization\n\nRole Strategy\n\nWarnings\n\nWe also included some plugins that received security fixes in the past that haven’t been mentioned in a security advisory before:\n\nActive Choices (uno-choice)\n\nExtended Choice Parameter\n\nGroovy Postbuild\n\nGroovy Label Assignment\n\nAdditionally, we included other plugins in the advisory that are not getting updated today, but whose vulnerabilities are similar to those of plugins getting fixed.\nIn total, over 30 plugins are part of the advisory.\n\nWhile there are fixes for other vulnerabilities as well, the majority of the advisory (and the rest of this blog post) is about arbitrary code execution vulnerabilities in Jenkins plugins.\n\nBackground\n\nJenkins administrators have long been able to use the Groovy script console and related functionality to execute arbitrary code in Jenkins for diagnostic or otherwise administrative purposes.\nRather than having to rely on plugins implementing the desired functionality, experienced Jenkins admins were able to run a number of scripts as needed to implement various administrative features.\n\nThis bled over into plugins:\nIt’s just easy for a plugin developer to build on top of Groovy and let the users figure out exactly what they want to do.\nUnfortunately, for a long time, there was no technology in Jenkins to limit what could be done in Groovy scripts, so anywhere Groovy would be executed, arbitrary code could be executed.\n\nWe were treating this as a security issue for the first time in the fix for SECURITY-125, about two years ago, something that first required splitting off the Matrix Project type from core into a plugin, and making use of Script Security Plugin.\n\nUnfortunately, other plugins weren’t integrating with Script Security plugin.\nAnd even diligent administrators who understand the problem of arbitrary code execution via Groovy scripts may not be able to tell whether a given plugin is affected:\nIn some cases, you’d need to dive into the source code to see whether, and how, it uses Groovy in a way that can be exploited by regular users to perform actions they otherwise wouldn’t be allowed to do.\n\nAbout the advisory\n\nBroadly speaking, there are three levels of severity for scripting related vulnerabilities in Jenkins:\n\nThe lowest severity ones are those that confuse Overall/Administer and Overall/Run Scripts permissions.\nThese are irrelevant for most Jenkins instances.\nMore on that later.\n\nThe next level up are vulnerabilities that effectively grant the ability to run arbitrary scripts to users who are able to configure jobs.\nWhile these users aren’t administrators, they have a nontrivial level of permissions, so are somewhat trusted.\nThis is often a difficult configuration to adequately secure, but it’s a supported configuration, and any plugin that undermines the security of this configuration will be treated as having a vulnerability.\n\nThe most severe ones are those that require little or no access to Jenkins to successfully exploit.\nThis typically does require the Overall/Read permission to access certain endpoints, but Pipeline as Code may allow people with SCM commit access to exploit scripting related weaknesses as well.\n\nArbitrary code execution is a serious enough issue that publishing a security advisory for just a few plugins would actually be detrimental to overall security:\nMalicious users would be able to review the fixes we do publish, and try to find other plugins affected by a similar vulnerability.\n\nThe advisory issued today lists all plugins we could find that implement any arbitrary code execution vulnerability (i.e. all three levels described above).\nAs this affects over 30 plugins, many of them not actively maintained, the problem exceeds the capacity of the Jenkins security team to address them all.\n\nFor that reason, the Jenkins security team decided that we would fix as many of the plugins as we can handle, and leaving the others to their maintainers.\n\nHow to proceed\n\nWe strongly advise administrators to review the list of affected plugins in the advisory, and look for any plugins that are installed on their instances.\nIt is very likely there’s at least one plugin installed that is affected by this.\nIf you’re on Jenkins 2.40 or newer, or Jenkins LTS 2.32.2 or newer, a warning will appear that informs you about vulnerable plugins you currently have installed.\n\nOnce you’ve determined which plugins you use are included in the advisory, you need to determine whether it is something that affects your particular setup.\n\nIf the vulnerability confuses Overall/Administer and Overall/Run Scripts, but all administrators of your Jenkins instance are able to run scripts anyway, this vulnerability is not a problem for you.\nThis is the case in the vast majority of Jenkins instances.\nOnly custom setups, typically to allow for hosted Jenkins services, don’t grant Overall/Run Scripts permission to administrators.\n\nIf the vulnerability allows users with the permission to e.g. configure jobs to execute arbitrary code, it is only a problem if there are users that have the lower permission (e.g. Item/Configure) but not the higher ( Overall/Run Scripts).\nSimple authorization strategies like Logged in users can do anything are therefore not affected by this issue.\n\nEven vulnerabilities that require no notable permissions in Jenkins may have prerequisites to be exploitable.\nFor example, Overall/Read access may be required, but only granted to users who are also administrators, or in Pipeline as Code setups, everyone with SCM commit access may also be a Jenkins administrator.\n\nThe above should guide your decision how urgently you should upgrade affected plugins with a fix, or disable affected plugins without a fix.\nRemember that you may decide in the future to reconfigure Jenkins in a way that makes previously irrelevant permission distinctions a huge problem, so it is not a good idea to continue using vulnerable plugin versions indefinitely.\n\nAfter deciding to upgrade a plugin, review the advisory and the plugin documentation for information about the migration.\nThe scripts provided in this GitHub repository may help you in determining whether you’re using affected features.\nIf you’re not using any of the affected features, it’s likely that there won’t be any problems and you can just upgrade.\nIf you are using affected features, you should carefully read the documentation on how the upgrade works: Affected plugin features may effectively be disabled until an administrator approves the scripts in use, potentially resulting in build failures.\n\nDistributing vulnerable plugins\n\nFinally, there’s the issue of distribution:\nThe Jenkins project historically has performed little to no oversight over the plugins that are being published.\nThis is a direct consequence of the governance document, which gives plugin maintainers a lot of control over their plugins.\n\nThat said, in exceptional circumstances, the Jenkins project can, and should, protect its users:\nIf a plugin maintainer were to upload a clearly malicious plugin, we wouldn’t stand by the side and continue distributing it.\nIn the case of plugins with known (unintended) vulnerabilities, this obviously becomes more difficult.\nThis has been discussed in the abstract a while back on the jenkinsci-dev mailing list, and the majority of participants in that discussion agreed that we should suspend distribution of vulnerable plugins if the security team doesn’t have the capacity to address the problem, and the vulnerability would remain unfixed otherwise.\n\nWe decided to temporarily suspend distribution of plugins via the Jenkins project update sites if they allow users with lower privileges (no Overall/Administer) to execute arbitrary code.\nUsers who really need to download these plugins can do so via our Artifactory Maven repository.\nOnce an affected plugin receives a fix, we’d of course resume distribution via the update sites.\n\nPlugins that mistake Overall/Administer and Overall/Run Scripts continue being distributed, albeit with a warning shown to Jenkins administrators, as the setup required for this to make a difference is pretty rare.\n\nUnfortunately, we were unable to adequately inform all plugin maintainers before publication of the advisory, so there are several plugins with fewer than 500 installations that are actively maintained but whose maintainers we didn’t contact prior to this advisory.\nFor that, I am really sorry, and can only ask for understanding from the maintainers of affected plugins.\nThe number of affected plugins and the coordination and review required simply exceeded our capabilities.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Important Scripting-related Security Advisory","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-03-20T00:00:00.000Z","id":"6fbbc66f-434f-5721-89f0-d9f144eac41e","slug":"/blog/2017/03/20/security-updates/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities:\n\nActive Directory\n\nDistributed Fork\n\nEmail Extension (Email-ext)\n\nMailer\n\nSSH Build Agents\n\nFor an overview of what was fixed, see the security advisory.\n\nAdditionally, we also published a security notice for the following plugin and recommend that users disable and uninstall it:\n\nPipeline: Classpath Step\n\nThis plugin is not part of the Pipeline suite of plugins, despite its name. It’s installed on just several hundred instances.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-02-01T00:00:00.000Z","id":"b68e4a15-e617-5570-bc2d-5ff59160e388","slug":"/blog/2017/02/01/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.44 and 2.32.2, that fix a high severity and several medium and low severity issues.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\nI strongly recommend you read these documents, as there are a few possible side effects of these fixes.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2017-01-10T00:00:00.000Z","id":"977904eb-252b-582f-a038-4682f4224260","slug":"/blog/2017/01/10/security-warnings/","strippedHtml":"Jenkins 2.40 was released earlier this week, and readers of the\nchangelog\nwill have noticed that it now includes the ability to show security warnings\npublished by the configured update site.  But what does that mean?\n\nIn the past, we’ve notified users about security issues in Jenkins and in\nplugins through various means: Emails to the\njenkinsci-advisories mailing list\n(which I recommend you subscribe to), blog posts, and, recently, emails to the\noss-security mailing list.  But I still wanted to increase the reach of our\nnotifications, to make sure Jenkins admins are informed quickly about possible\nsecurity problems on their instances.  The logical next step was to include\nthese notifications in Jenkins itself, and that feature has been added in\nJenkins 2.40.\n\nToday we enabled the publication of warnings on our update sites: Once Jenkins\n2.40 (or newer) refreshes its cache of update site metadata, it may now inform\nyou that you’re using a vulnerable plugin that should be updated or removed.\nRight now, these aren’t previously unknown warnings, but reference security\nadvisories for plugin vulnerabilies that have been published over the past few\nyears.\n\nWe will of course continue to publish security advisories using the mailing\nlist of the same name, as well other means.\n\nStay safe!","title":"Security warnings in Jenkins","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2016-11-16T00:00:00.000Z","id":"98cc175a-5e42-541a-a6b0-25f3c783cc80","slug":"/blog/2016/11/16/security-updates-addressing-zero-day/","strippedHtml":"A zero-day vulnerability in Jenkins was published on Friday, November 11.  Last\nweek\nwe provided an immediate mitigation\nand today we are releasing updates to Jenkins which fix the vulnerability. We\nstrongly recommend you update Jenkins to 2.32 (main line) or 2.19.3 (LTS) as\nsoon as possible.\n\nToday’s\nsecurity advisory\ncontains more information on the exploit, affected versions, and fixed\nversions, but in short:\n\nAn unauthenticated remote code execution vulnerability allowed attackers to\ntransfer a serialized Java object to the Jenkins CLI, making Jenkins connect to\nan attacker-controlled LDAP server, which in turn can send a serialized payload\nleading to code execution, bypassing existing protection mechanisms.\n\nMoving forward, the Jenkins security team is revisiting the design of the\nJenkins CLI over the coming weeks to prevent this class of vulnerability in the\nfuture. If you are interested in participating in that discussion, please join\nin on the\njenkinsci-dev@\nmailing list.\n\nThe Jenkins project encourages administrators to subscribe to the\njenkinsci-advisories@\nmailing list to receive future Jenkins security notifications.","title":"Security updates addressing zero day vulnerability","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2016-11-12T00:00:00.000Z","id":"8957e4ed-d485-505d-a0dd-5f3eaa1932fe","slug":"/blog/2016/11/12/addressing-remote-vulnerabilities-in-cli/","strippedHtml":"The Jenkins\nsecurity team\nhas been made aware of a new attack vector for a remote code execution\nvulnerability in the\nJenkins CLI,\naccording to\nthis\nadvisory\nby Daniel Beck:\n\nWe have received a report of a possible unauthenticated remote code execution\nvulnerability in Jenkins (all versions).\n\nWe strongly advise anyone running a Jenkins instance on a public network\ndisable the CLI for now.\n\nAs this uses the same attack vector as SECURITY-218, you can reuse the script\nand instructions published in this repository: https://github.com/jenkinsci-cert/SECURITY-218\n\nWe have since been able to confirm the vulnerability and strongly recommend\nthat everyone follow the instructions in the linked repository.\n\nAs Daniel mentions in the security advisory, the advised mitigation strategy is\nto disable the CLI subsystem via\nthis\nGroovy script.\nIf you are a Jenkins administrator, navigate to the 'Manage Jenkins' page and\nclick on the 'Script Console', which will allow you to run the Groovy script to\nimmediately disable the CLI.\n\nIn order to persist this change across restarts of your Jenkins controller, place\nthe\nGroovy script\nin $JENKINS_HOME/init.groovy.d/cli-shutdown.groovy so that Jenkins executes\nthe script on each boot.\n\nWe are expecting to have a fix implemented, tested and included in an updated\nweekly and LTS release this upcoming Wednesday, November 16th.\n\nFor users who are operating Jenkins on public, or otherwise hostile, networks,\nwe suggest hosting Jenkins behind reverse proxies such as Apache or Nginx.\nThese can help provide an additional layer of security, when used appropriately,\nto cordon off certain URLs such as /cli.\n\nAdditionally, we strongly recommend that all Jenkins administrators subscribe\nto the\njenkinsci-advisories@googlegroups.com\nmailing list to receive future advisories.\n\nThe Jenkins project has a responsible disclosure policy, which we strongly\nencourage anybody who believes they have discovered a potential vulnerability\nto follow. You can learn more about this policy and our processes on our\nsecurity page.","title":"Addressing recently disclosed vulnerabilities in the Jenkins CLI","tags":["security","lts"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/rtyler.jpeg"},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2016-05-11T00:00:00.000Z","id":"31e502bf-b2a2-58e7-aec8-26b504df7584","slug":"/blog/2016/05/11/security-update/","strippedHtml":"We just released security updates to Jenkins that fix a number of low and medium severity issues. For an overview of what was fixed, see the security advisory.\n\nOne of the fixes may well break some of your use cases in Jenkins, at least until plugins have been adapted: SECURITY-170. This change removes parameters that are not defined on a job from the build environment. So, right now, a job could even be unparameterized, and plugins were able to pass parameters anyway. Since build parameters are added to the environment variables of scripts run during a build, parameters such as PATH or DYLD_LIBRARY_PATH can be defined — on jobs which don’t even expect those as build parameters — to change the behavior of builds.\n\nA number of plugins define additional parameters for builds. For example, GitHub Pull Request Builder passes a number of additional parameters describing the pull request. Release Plugin also allows adding several additional parameters to a build that are not considered to be defined in the job as part of this security fix.\n\nPlease see this wiki page for a list of plugins known to be affected by this change.\n\nUntil these plugins have been adapted to work with the new restriction (and advice on that is available further down), you can define the following system properties to work around this limitation, at least for a time:\n\nSet hudson.model.ParametersAction.keepUndefinedParameters to true, e.g. java -Dhudson.model.ParametersAction.keepUndefinedParameters=true -jar jenkins.war to revert to the old behavior of allowing any build parameters. Depending on your environment, this may be unsafe, as it opens you up to attacks as described above.\n\nSet hudson.model.ParametersAction.safeParameters to a comma-separated list of safe parameter names, e.g. java -Dhudson.model.ParametersAction.safeParameters=FOO,BAR_baz,quX -jar jenkins.war.\n\nI realize this change, among a few others that improve the security of Jenkins, may be difficult to adapt for some, but given the valuable secrets typically stored in Jenkins, I’m certain that this is the correct approach. We made sure to release this fix with the options described above, so that this change doesn’t block updating those that rely on this behavior.\n\nDevelopers have several options to adapt to this change:\n\nParametersAction actually stores all parameters, but getParameters() only returns those that are defined on the job. The new method getAllParameters() returns all of them. This can be used, for example by EnvironmentContributor extensions, to add known safe parameters to build environments.\n\nDon’t pass extra arguments, but define a QueueAction for your metadata instead. Those can still be made available to the build environment as needed.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}}]}},"pageContext":{"tag":"security","limit":8,"skip":40,"numPages":7,"currentPage":6}},
    "staticQueryHashes": ["3649515864"]}