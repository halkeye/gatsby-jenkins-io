{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/security/page/4",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-07-02T00:00:00.000Z","id":"0c991121-dfec-5b10-a945-33a402cf3ddd","slug":"/blog/2018/07/02/new-api-token-system/","strippedHtml":"About API tokens\n\nJenkins API tokens are an authentication mechanism that allows a tool (script, application, etc.) to impersonate a user\nwithout providing the actual password for use with the Jenkins API or CLI.\nThis is especially useful when your security realm is based on a central directory, like Active Directory or LDAP,\nand you don’t want to store your password in scripts.\nRecent versions of Jenkins also make it easier to use the remote API when using API tokens to authenticate,\nas no CSRF tokens need to be provided even with CSRF protection enabled.\nAPI tokens are not meant to — and cannot — replace the regular password for the Jenkins UI.\n\nPrevious problems\n\nWe addressed two major problems with the existing API token system in Jenkins 2.129:\n\nFirst, reported in JENKINS-32442,\nuser accounts in Jenkins have an automatically generated API token by default.\nAs these tokens can be used to authenticate as a given user, they increase the attack surface of Jenkins.\n\nThe second problem was reported in JENKINS-32776 :\nThe tokens were previously stored on disk in an encrypted form.\nThis meant that they could be decrypted by unauthorized users by leveraging another security vulnerability,\nor obtained, for example, from improperly secured backups, and used to impersonate other users.\n\nNew approach\n\nThe main objective of this new system is to provide API tokens that are stored in a unidirectional way on the disk,\ni.e. using a hashing algorithm (in this particular case SHA-256).\n\nWhile this means that you will not be able to see the actual API tokens anymore after you’ve created them,\nseveral features were added to mitigate this potential problem:\n\nYou can have multiple active API tokens at the same time.\nIf you don’t remember an API token’s value anymore, just revoke it.\n\nYou can name your tokens to know where they are used (and rename them after creation if desired).\nWe recommend that tokens use a name that indicates where (for example the application, script, or host) where it will be used.\n\nYou can track the usage of your tokens.\nEvery token keeps a record of the number of uses and the date of the last use.\nThis will allow you to better know which tokens are really used and which are no longer actively required.\nJenkins also encourages users to rotate old API tokens by highlighting their creation date in orange after six months, and in red after twelve months.\nThe goal is to remind the user that tokens are more secure when you regenerate them often:\nThe longer a token is around, perhaps passed around in script files and stored on shared drives,\nthe greater the chance it’s going to be accessed by someone not authorized to use it.\n\nFigure 1. Token usage tracking\n\nYou can revoke API tokens.\nWhen you know that you are not using a given token anymore, you can revoke it to reduce the risk of it getting used by unauthorized users.\nSince you can have multiple API tokens, this allows fine-grained control over which scripts, hosts, or applications are allowed to use Jenkins as a given user.\n\nMigrating to new API tokens\n\nTo help administrators migrate their instances progressively, the legacy behavior is still available, while new system is also usable.\n\nOn the user configuration page, the legacy token is highlighted with a warning sign,\nexplaining that users should revoke it and generate a new one (if needed) to increase security.\n\nFigure 2. Legacy token renewal still possible\n\nNew options for administrators\n\nIn order to let administrators control the pace of migration to the new API token system,\nwe added two global configuration options in the \"Configure Global Security\" page in the brand new \"API Token\" section:\n\nAn option to disable the creation of legacy API tokens on user creation.\n\nAn option to disable the recreation of legacy API tokens by users, forcing them to only use the new, unrecoverable API tokens.\n\nBoth options are disabled by default for new installations (the safe default), while they’re enabled when Jenkins is upgraded from before 2.129.\n\nFigure 3. Security Configuration options\n\nFigure 4. Remove legacy token and disable the re-creation\n\nNew administrator warnings\n\nWhen upgrading to Jenkins 2.129, an administrative monitor informs admins about the new options described above, and recommend disabling them.\n\nAnother administrative warnings shows up if at least one user still has a legacy API token.\nIt provides central control over legacy tokens still configured in the Jenkins instance, and allows revoking them all.\n\nFigure 5. Legacy token monitoring page\n\nSummary\n\nJenkins API tokens are now much more flexible: They allow and even encourage better security practices.\nWe recommend you revoke legacy API tokens as soon as you can, and only use the newly introduced API tokens.","title":"Security Hardening: New API token system in Jenkins 2.129+","tags":["community","core","security","upgrade"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/c09ea/wadeck.jpg","srcSet":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/534e5/wadeck.jpg 32w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/99887/wadeck.jpg 64w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/c09ea/wadeck.jpg 128w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/5f0ee/wadeck.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/59a6b/wadeck.webp 32w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/cbb78/wadeck.webp 64w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/96250/wadeck.webp 128w,\n/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/890ef/wadeck.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}},"publicURL":"/gatsby-jenkins-io/static/608b05a5037fd519ec3cc8b218de672d/wadeck.jpg"},"blog":null,"github":"wadeck","html":"<div class=\"paragraph\">\n<p>Wadeck is a member of the <a href=\"/security/#team\">Jenkins security team</a>, working on fixes and improvements to Jenkins security.\nHe likes to provide solutions that are both useful and easy to use.</p>\n</div>","id":"wadeck","irc":null,"linkedin":null,"name":"Wadeck Follonier","slug":"/blog/authors/wadeck","twitter":null}]}},{"node":{"date":"2018-06-20T00:00:00.000Z","id":"c6c81158-09c3-5db5-9f8e-8e8ad25bd805","slug":"/blog/2018/06/20/anchore-image-scanning/","strippedHtml":"(adapted from this blog post by Daniel Nurmi)\n\nAs more and more Jenkins users ship docker containers, it is worth thinking about the security implications of this model, where the variance in software being included by developers has increased dramatically from previous models. Security implications in this context include what makes up the image, but also the components of the app that get bundled into your image. Docker images are increasingly becoming a “unit of deployment”, and if you look at a typical app (especially if it is a microservice), much of the components, libraries, and system are someone else’s code.\n\nAnchore exists to provide technology to act as a last line of defense, verifying the contents of these new deployable units against user specified policies to enforce security and compliance requirements. In this blog you will get a quick tour of this capability, and how to add the open-source Anchore Engine API service into your pipeline to validate that the flow of images you are shipping comply with your specific requirements, from a security point of view.\n\nKey among the fundamental tenets of agile development is the notion of “fail fast, fail often”, which is where CI/CD comes in: A developer commits code into the source code repository, such as git, that automatically triggers Jenkins to perform a build of the application that is then run through automated tests. If these tests fail the developer is notified immediately and can quickly correct the code. This level of automation increases the overall quality of code and speeds development.\n\nWhile some may feel that “fail fast” sounds rather negative (especially regarding security), you could better describe this process as “learn fast” as mistakes are found earlier in the development cycle and can be easily corrected. The increased use of CI/CD platforms such as Jenkins has helped to improve the efficiency of development teams and streamlined the testing process. We can leverage the same CI/CD infrastructure to improve the security of our container deployments.\n\nFor many organizations the last step before deploying an application is for the security team to perform an audit. This may entail scanning the image for vulnerable software components (like outdated packages that contain known security vulnerabilities) and verifying that the applications and OS are correctly configured. They may also check that the organization’s best practices and compliance policies have been correctly implemented.\n\nIn this post we walk through adding security and compliance checking into the CI/CD process so you can “learn fast” and correct any security or compliance issues early in the development cycle. This document will outline the steps to deploy Anchore’s open source security and compliance scanning engine with Jenkins to add analytics, compliance and governance to your CI/CD pipeline.\n\nAnchore has been designed to plug seamlessly into the CI/CD workflow, where a developer commits code into the source code management system, which then triggers Jenkins to start a build that creates a container image. In the typical workflow this container image is then run through automated testing. If an image does not meet your organization’s requirements for security or compliance then it makes little sense to invest the time required to perform automated tests on the image, it would be better to “learn fast” by failing the build and returning the appropriate reports back to the developer to allow the issue to be addressed.\n\nAnchore has published a plugin for Jenkins which, along with Anchore’s open source engine or Enterprise offering, allows container analysis and governance to be added quickly into the CI/CD process.\n\nRequirements\n\nThis guide presumes the following prerequisites have been met:\n\nJenkins 2.x installed and running on a virtual machine or physical server.\n\nAnchore-Engine installed and running, with accessible engine API URL (later referred to as) and credentials (later referred to as and) available - see Anchore Engine overview and installation.\n\nAnchore’s Jenkins plugin can work with single node installations or installations with multiple worker nodes.\n\nStep 1: Install the Anchore plugin\n\nThe Anchore plugin has been published in the Jenkins plugin registry and is available for installation on any Jenkins server. From the main Jenkins menu select Manage Jenkins, then Manage Plugins, select the Available tab, select and install Anchore Container Image Scanner.\n\nStep 2: Configure Anchore Plugin.\n\nOnce the Anchore Container Image Scanner plugin is installed - select Manage Jenkins menu click Configure System, and locate the Anchore Configuration section.  Select and enter the following parameters in this section:\n\nClick Enable Anchore Scanning\n\nSelect Engine Mode\n\nEnter your in the Engine URL text box - for example: http://your-anchore-engine.com:8228/v1\n\nEnter your and in the Engine Username and Engine Password fields, respectively\n\nClick Save\n\nAn example of a filled out configuration section is below, where we’ve used “http://192.168.1.3:8228/v1” as, “admin” as and “foobar” as :\n\nAt this point the Anchore plugin is configured on Jenkins, and is available to be accessed by any project to perform Anchore security and policy checks as part of your container image build pipeline.\n\nStep 3: Add Anchore image scanning to a pipeline build.\n\nIn the Pipeline model the entire build process is defined as code. This code can be created, edited and managed in the same way as any other artifact of your software project, or input via the Jenkins UI.\n\nPipeline builds can be more complex including forks/joins and parallelism. The pipeline is more resilient and can survive the controller node failure and restarts. To add an Anchore scan you need to add a simple code snippet to any existing pipeline code that first builds an image and pushes it to a docker registry. Once the image is available in a registry accessible by your installed Anchore Engine, a pipeline script will instruct the Anchore plugin to:\n\nSend an API call to the Anchore Engine to add the image for analysis\n\nWait for analysis of the image to complete by polling the engine\n\nSend an API call to the Anchore Engine service to perform a policy evaluation\n\nRetrieve the evaluation result and potentially fail the build if the plugin is configured to fail the build on policy evaluation STOP result (by default it will)\n\nProvide a report of the policy evaluation for review\n\nBelow is an example end-to-end script that will make a Dockerfile, use the docker plugin to build and push the a docker container image to dockerhub, perform an Anchore image analysis on the image and the result, and cleanup the built container.  In this example, we’re using a pre-configured docker-exampleuser named dockerhub credential for dockerhub access, and exampleuser/examplerepo:latest as the image to build and push.  These values would need to be changed to reflect your own local settings, or you can use the below example to extract the analyze stage to integrate an anchore scan into any pre-existing pipeline script, any time after a container image is built and is available in a docker registry that your anchore-engine service can access.\n\npipeline {\n    agent any\n    stages {\n        stage('build') {\n            steps {\n                sh'''\n                    echo 'FROM debian:latest’ > Dockerfile\n                    echo ‘CMD [\"/bin/echo\", \"HELLO WORLD....\"]' >> Dockerfile\n                '''\n                script {\n                    docker.withRegistry('https://index.docker.io/v1/', 'docker-exampleuser') {\n                        def image = docker.build('exampleuser/examplerepo:latest')\n                        image.push()\n                    }\n                }\n            }\n        }\n        stage('analyze') {\n            steps {\n                sh 'echo \"docker.io/exampleuser/examplerepo:latest `pwd`/Dockerfile\" > anchore_images'\n                anchore name: 'anchore_images'\n            }\n        }\n        stage('teardown') {\n            steps {\n                sh'''\n                    for i in `cat anchore_images | awk '{print $1}'`;do docker rmi $i; done\n                '''\n            }\n        }\n    }\n}\n\nThis code snippet writes out the anchore_images file that is read by the plugin to determine which image is to be added to Anchore Engine for scanning.\n\nThis code snippet can be crafted by hand or built using the Jenkins UI, for any Pipeline project. In the project configuration, select Pipeline Syntax from the Project.\n\nThis will launch the Snippet Generator where you can enter the available plugin parameters and press the Generate Pipeline Script button which will produce a snippet that you can use as a starting point.\n\nUsing our example from above, next we save the project:\n\nNote that once you are happy with your script, you could also check it into a Jenkinsfile, alongside the source code.\n\nStep 4: Run the build and review the results.\n\nFinally, we run the build, which will generate a report.  In the below screenshots, we’ve scanned the image docker.io/library/debian:latest to demonstrate some example results.  Once the build completes, the final build report will have some links that will take you to a page that describes the result of the Anchore Engine policy evaluation and security scan:\n\nIn this case, since we left the Fail build on policy STOP result as its default (True), the build has failed due to anchore-engine reporting a policy violation.  In order to see the results, click the Anchore Report (STOP) link:\n\nHere, we can see that there is a single policy check that has generated a ‘STOP’ action, which triggered due to a high severity vulnerability being found against a package installed in the image.  If there were only ‘WARN’ or ‘GO‘ check results here, they would also be displayed, but the build would have succeeded.\n\nWith the combination of Jenkins pipeline project capabilities, plus the Anchore scanner plugin, it’s quick and easy to add container image security scanning and policy checking to your Jenkins project.  In this example, we provide the mechanism for adding scanning to a Jenkins pipeline project using a simple policy that is doing an OS package vulnerability scan, but there are many more policy options that can be configured and loaded into Anchore Engine ranging from security checks to your own site-specific best practice checks (software licenses, package whitelist/blacklist, dockerfile checks, and many more).  For more information about the breadth of Anchore policies, you can find information about Anchore Engine configuration and usage here.\n\nFor more information on Jenkins Pipelines and Anchore Engine, check out the following information sources:\n\nhttps://anchore.com/\n\nhttps://anchore.com/opensource/\n\nhttps://github.com/anchore/anchore-engine\n\nhttps://anchore.freshdesk.com/support/home\n\nChat on Anchore open source slack","title":"Securing your Jenkins CI/CD Container Pipeline with Anchore (in under 10 minutes)","tags":["community","developer","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/michaelneale.jpg"},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale","twitter":"michaelneale"}]}},{"node":{"date":"2018-05-09T00:00:00.000Z","id":"60f8a17b-1600-571d-a45d-9012801aa2b7","slug":"/blog/2018/05/09/security-advisory/","strippedHtml":"We just released security updates to Jenkins, versions 2.121 and 2.107.3, that fix multiple security vulnerabilities.\n\nAdditionally, we announce previously published security issues and corresponding fixes in these plugins:\n\nBlack Duck Hub\n\nGroovy Postbuild\n\nGitlab Hook (fix unreleased)\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core and plugins","tags":["core","plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-04-11T00:00:00.000Z","id":"ed222945-0b4b-5227-9e90-64450f40170f","slug":"/blog/2018/04/11/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.116 and 2.107.2, that fix two security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-03-19T00:00:00.000Z","id":"38e42feb-38b4-5fe4-a4e2-04f6086cd0bc","slug":"/blog/2018/03/19/password-audit/","strippedHtml":"Last year, news of compromised passwords being used for accounts able to distribute NPM packages made the rounds.\n\nTheir system looks similar to how publishing of plugins works in the Jenkins project:\n\nAccounts are protected by passwords chosen by users.\n\nIndividual contributors have permission to release the components they maintain.\n\nThe components they release are used by millions of developers around the world to deliver their software.\n\nIn other words, weak passwords are a problem for us just as much as for NPM, and what happened to them could happen to us.\n\nTo address this problem, the Jenkins security and infra teams have recently collaborated on a password audit.\nThe audit covered all accounts with permissions to upload plugins and components, and on accounts with other levels of privileged infrastructure access.\nWe ran brute force tools on salted password hashes of those accounts looking for \"weak\" passwords — passwords present in a set of publicly available password lists we chose for this audit.\n\nWe checked the password of every qualifying account for every unsafe password rather than trying to match them to any previous password leaks' email/password pairs.\nUsers with weak account passwords were notified via email a few weeks ago and were asked to change their password to something stronger.\n\nWe performed the same checks over the previous weekend, but this time we only checked the passwords of accounts whose passwords were deemed weak during our first check.\nWe then invalidated the password of any account whose password was still not considered \"strong\" (i.e. their password was unchanged or had been changed to another weak password).\nUsers of those accounts will need to request a password reset before signing in again.\n\nWe plan to implement further safeguards, including improving the account management app at https://accounts.jenkins.io to reject weak passwords.\nIf you’re interested in helping the security team make Jenkins more secure, let us know on the jenkinsci-dev mailing list, or request to join the security team.","title":"Jenkins community account password audit","tags":["security","community"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-03-15T00:00:00.000Z","id":"f1ff4387-7033-572c-9fef-b871cfb88ad0","slug":"/blog/2018/03/15/jep-200-lts/","strippedHtml":"This is a post about a major change in Jenkins, which is available starting\nfrom Jenkins 2.102 and Jenkins LTS 2.107.1.\nThis is a change with a serious risk of regressions in plugins.\nIf you are a Jenkins administrator, please read this blogpost and\nupgrade guidelines\nBEFORE upgrading.\n\nI would like to provide some heads-up about the\nJEP-200 change,\nwhich is included into the new Jenkins LTS 2.107.x baseline.\n\nBackground\n\nFor many years Jenkins used to specifically blacklist certain classes and packages according to known or suspected exploits.\nThis approach has been proven unsustainable due to the risk of deserialization attacks via unknown classes\nfrom 3rd-party components, after the\nSECURITY-429/CVE-2017-1000353 fix in 2.46.2\nit was decided to replace blacklists by more restrictive whitelists.\nIn October 2017 Jesse Glick proposed a Jenkins Enhancement Proposal,\nwhich finally got accepted as JEP-200.\n\nThe change implies a risk of regressions in plugins serializing non-whitelisted Java-internal and 3rd-party classes,\nand that’s why it is so important to follow the upgrade guidelines for this release.\n\nCurrent state\n\nJEP-200 was first integrated in Jenkins 2.102 (released in January 2018), and it has got a lot of testing since that.\nSee this blogpost for the original announcement.\n\nOver the last two months we received more than 75 issues from users of Jenkins weekly releases.\nAll these issues have been triaged, and we have released most of the fixes.\nMore than 50 plugins were fixed in total, and many more plugins were updated in order to enable compatibility testing.\nA significant part of the discovered regressions were caused by real defects which were causing performance and stability\nissues in plugins.\nThanks a lot to all the Jenkins contributors and plugin maintainers who helped deliver timely changes for this effort!\n\nOver last 6 weeks Jenkins weekly releases had positive community ratings,\nthe overall JEP-200 adoption reached ~12% of all Jenkins installations on March 01.\nAll major plugins have been also tested directly or verified in the wild on weekly releases.\nSo we are confident that the change is ready to be released in LTS.\n\nOn the other hand, we continue to receive JEP-200 regression reports.\nThey are mostly caused by niche plugins which are not widely used in weekly releases,\nand unfortunately not all fixes have been released yet (see the Wiki page for up-to-date info).\nWe anticipate more regressions to be reported after the LTS release and broader adoption.\n\nIn order to simplify the upgrade to the new LTS baseline,\nI have prepared some helpful materials together with Liam Newman\nand Jesse Glick.\nBelow you can find the embedded slide deck and video, or scroll down to see the key information\nin the text form.\n\nVideo:\n\nFor Jenkins administrators\n\nUpgrading to a core with JEP-200 requires a special update procedure, which is described below.\n\nUpgrading Jenkins\n\nJEP-200 is not the only major change in 2.107.1, please read\nthe full upgrade guide carefully\n\nIf you have a way of testing the upgrade before applying it to production, do it\n\nBack up your instance so you have any easy way of rolling back\n\nUpdate all affected plugins.\nSee this Wiki page for the list of affected plugins,\nfix statuses and workarounds\n\nApply workarounds for non-released patches if needed (see below)\n\nUpdate to the new version of the Jenkins core\n\nUsing backups and staging servers is good advice before any upgrade but especially this one,\ngiven the relatively high risk of regression.\nDue to the nature of the changes, some plugins may refuse to load after the upgrade and cause your Jenkins service to fail to start.\n\nAfter the upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nStill, it is highly advised to monitor your system after the upgrade, especially the following:\n\nJenkins System log (especially during the startup)\n\nJob/Build logs\n\nIf you do encounter a log message referencing the https://jenkins.io/redirect/class-filter/ URL,\nmost likely it is a JEP-200 regression.\nExample:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nIf you see this kind of message, we highly recommend reporting it so that it can be investigated and probably fixed quickly.\n\nReporting JEP-200 issues\n\nStarting from May 01, JEP-200 issues are triaged by plugin and core maintainers.\nJEP-200 maintainers are available for code reviews if needed,\nbut they will not be reviewing cases in JIRA and searching for miscategorized issues on a daily basis.\nIf you experience new JEP-200 regressions, please follow the guidelines below.\n\nPlease report any issues you encounter matching the above pattern in the\nJenkins issue tracker, under the appropriate plugin component.\nBefore reporting please check whether this issue has already been reported.\n\nAdd the JEP-200 label\n\nInclude the stacktrace you see in the log\n\nIf possible, include complete steps to reproduce the problem from scratch\n\nYou can find examples of previously reported issues using this query.\n\nJenkins developers will evaluate issues and strive to offer a fix in the form of a core and/or plugin update.\nRight after the feature release there was be a special team triaging the reports.\nStarting from May 01 the issues will be triaged by plugin and core maintainers.\nSee JEP-200 Maintenance plan for more info.\n\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nApplying workarounds\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nNote the class name(s) mentioned in the JEP-200 log messages,\nand run Jenkins with the hudson.remoting.ClassFilter startup option, e.g.:\n\njava -Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName -jar jenkins.war ...\n\nThis workaround process may require several iterations, because classes whitelisted in the workaround may also\ninclude fields with types requiring whitelisting.\n\nFor plugin developers\n\nIf you are a plugin developer, please see the original JEP-200 announcement.\nThat blog post provides guidelines for testing and fixing plugin compatibility after the JEP-200 changes.\nThe presentation above also provides some information about what needs to be tested.","title":"Security hardening: Jenkins LTS 2.107.1 switches XStream / Remoting blacklists to whitelists (JEP-200)","tags":["core","security","remoting","upgrade"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-02-14T00:00:00.000Z","id":"8d50238b-953c-57e4-a3dd-876a612b6d80","slug":"/blog/2018/02/14/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.107 and 2.89.4, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nWhile the severity score works out as medium for all the vulnerabilities, we strongly recommend that anyone operating publicly accessible Jenkins instances update as soon as possible, as their secrets on disk might be at risk by SECURITY-705.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2018-02-05T00:00:00.000Z","id":"47e0963b-eba2-5a4e-9d92-1ffe57e02833","slug":"/blog/2018/02/05/security-updates/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities.\n\nAndroid Lint\n\nCCM\n\nCredentials Binding\n\nJUnit\n\nPipeline: Supporting APIs\n\nFor an overview of these security fixes, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}}]}},"pageContext":{"tag":"security","limit":8,"skip":24,"numPages":7,"currentPage":4}},
    "staticQueryHashes": ["3649515864"]}