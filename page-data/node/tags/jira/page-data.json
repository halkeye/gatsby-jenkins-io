{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/jira",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-12-17T00:00:00.000Z","id":"9753ae32-51e9-5bc8-9342-e525dab1f74c","slug":"/blog/2020/12/17/jira-upgrade-for-the-jenkins-project/","strippedHtml":"The Jenkins project has used Jira to track issues for many years.\nJenkins core, Jenkins modules, Jenkins infrastructure, and many Jenkins plugins manage their issue reports with our Jira server.\n\nJira helps the Jenkins project manage issues and tasks related to over 250 000 Jenkins installations.\nIt tracks bugs, enhancement requests, tasks, and security issues.\nIt is used regularly by users around the world.\n\nWe’re grateful for the long-standing contribution that Atlassian provides by donating the Jira license to the Jenkins project.\nWe’re grateful to the Oregon State University Open Source Lab for their donation of equipment and bandwidth to host the server.\n\nUpgrade Timeline\n\nWe were running Jira 7.13 and had been managing that installation for a few years.\nAtlassian announced that Jira 7.13 would end its support life on November 28, 2020.\nWe needed to upgrade from Jira 7.13 to a more recent version of Jira.\nAs part of our membership in the Continuous Delivery Foundation, a Linux Foundation initiative, we could use their project services team to manage our Jira server.\nWe decided to move from hosting our own Jira server to having the Jira experts at the Linux Foundation host it.\n\nThe upgrade timeline looked like this:\n\nNovember 2019 - Infrastructure team begins discussions about the November 2020 end of support for Jira 7.13\n\nAugust 2020 - First conversations with Linux Foundation to host Jira for the Jenkins project.  Draft of the upgrade plan assembled and shared with the community\n\nSeptember 2020 - Schedule for testing week and final transition week proposed.  Authentication options evaluated and selected\n\nOctober 2020 - Test upgrade performed and tested\n\nNovember 2020 - Final upgrade completed and verified\n\nConfronting the Complications\n\nInitial discussions between the Jenkins infrastructure team and the Linux Foundation identified complications related to authentication and SSL certificates.\nWe planned, negotiated, and tested our assumptions throughout the project.\n\nAuthentication\n\nJira servers at the Linux Foundation typically use Linux Foundation accounts for user access.\nUnfortunately, the Jenkins LDAP database includes over 100,000 users and for many of them, Linux Foundation username doesn’t correspond to Jenkins account username.\nIt was not feasible to transition 100,000 user accounts from the Jenkins LDAP database to the Linux Foundation accounts system and still complete the Jira upgrade before the November 28, 2020 deadline.\n\nThe Linux Foundation Project Services team evaluated authentication alternatives and confirmed that they could use the Jenkins LDAP server.\nUsing the Jenkins LDAP server spared us from two transitions, LDAP and Jira, and kept the project timeline feasible.\n\nSSL Certificates\n\nJira servers at the Linux Foundation use Let’s Encrypt to generate SSL certificates for HTTPS.\nThe Linux Foundation uses the DNS method to obtain SSL certificates.\nUnfortunately, the Jenkins project uses the HTTP method to obtain SSL certificates.\n\nThankfully, Olivier Vernin of the Jenkins project and Anton Baranov of the Linux Foundation found a solution.\nThey created an ACME record in the Jenkins DNS server and pointed the issues.jenkins.io DNS record at the new Linux Foundation Jira server.\n\nBuilding the Prototype\n\nAnton Baranov created a prototype Jira server, restored an older Jenkins Jira backup, and upgraded it to Jira 8.13.\nThat first restore detected that we had not provided the Jira attachments or the Jira avatars.\nThat attachments and avatars added multiple gigabytes to the initial backup data and were vital to complete the update.\n\nTesting the Upgrade\n\nA group of volunteers including Jenkins users, security team members, and infrastructure team members tested the upgrade during the week of October 26, 2020.\nThe tests confirmed that authentication worked as expected and that the Jira prototype was functioning as expected.\n\nWe thank the test team, including:\n\nDaniel Beck\n\nTim Jacomb\n\nOlivier Vernin\n\nMark Waite\n\nThe tests included:\n\nCreating and routing issues\n\nCommenting on issues\n\nViewing dashboards with the expected content\n\nLDAP settings\n\nEmail notification\n\nThe tests detected minor issues that Anton was able to correct in preparation for the final upgrade.\nThe testing team agreed that the tests were successful.\n\nDeploying the Upgrade\n\nOlivier Vernin announced the final upgrade by email to the Jenkins infra list with details of the changes happening during the upgrade.\nMonday, November 9, 2020, the final backup of the existing Jira server was copied into the new Linux Foundation server.\n\nThe final upgrade encountered issues that we had not seen during the initial tests.\nThe \"bumps and bruises\" from the unexpected issues were resolved by Anton Baranov as he used a multi-step upgrade process.\nThe steps included:\n\nRestore the earlier backup to Jira 7.13\n\nRestore the most recent backup\n\nUpgrade to Jira 8.13\n\nInstall avatars, attachments, and other images\n\nUpdate DNS entries to point to the new Jenkins Jira server\n\nLessons from the Upgrade\n\nLessons were related to timing, estimation, and communication.\n\nScheduling the Upgrade\n\nThe test upgrade started the week of October 19, 2020.\nIt took several days longer than originally expected.\nThankfully, we had allowed an extra week between the test upgrade and the production upgrade.\n\nThe originally announced schedule for the final upgrade was intentionally placed in a week that would not include a long term support release.\nThat reduced the risk of disruption if the upgrade took longer than required or failed and we had to roll back.\n\nEstimating the Work\n\nDiscussions with the Jenkins project Jira administrators and the Linux Foundation Jira experts provided very reasonable estimates of time to complete the work.\nWe intentionally allowed additional time between first test and final upgrade.\nWe needed that additional time and used it well as the testing week.\n\nCommunicating the Plan\n\nThe distributed nature of the Jenkins project makes communication challenging for major changes.\nWe communicated plans at various stages but still found occasions where the communication was insufficient.\nIn this case, the adage held true that it is, \"impossible to communicate too much\".\n\nThanks for your patience during the upgrade and thanks to the Linux Foundation for administering the Jenkins Jira server.","title":"Jira upgrade for the Jenkins project","tags":["jenkins","infrastructure","jira"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/author/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2019-09-10T00:00:00.000Z","id":"d5e0f766-e02d-50ec-a790-2201ba4d74b9","slug":"/blog/2019/09/10/introducing-the-jira-software-plugin-for-jenkins/","strippedHtml":"According to a recent survey we conducted, software & IT teams on average use 4+ tools to move code from development to customer-facing production. As a result, teams struggle with keeping the status of work updated and understanding the overall health of their delivery pipeline.\n\nTo solve this problem, I am excited to announce that we built an official Jenkins plugin for Jira Software Cloud. The plugin automatically associates build and deployment information from Jenkins with relevant Jira issues and exposes key information about your pipeline across Jira issues, boards and via JQL. This means you can use Jira Software to automatically update and track issues through your complete development pipeline, from backlog to release.\n\nI hope this plugin adds value to you and your team. If you are interested in contributing or forking this plug-in you can head over to our project on the Jenkins GitHub repo to get started.\n\nBetter collaboration between teams\n\nThis new information view is so powerful because historically it was dispersed across multiple tools only accessible to a few members of your team. Now anyone involved in the software delivery process can self-serve this information. For example, product managers, QA, and support teams can view which features have been deployed to customers and which are still waiting in staging environments.\n\nWith better information sharing between tools in your delivery stack, you can also improve cross-collaboration between teams. Teams such as QA and operations can collaborate in the software teams next sprint. For example, you can use build information in Jira Software to create a workflow between QA and developers and create a rapid feedback loop for testing at any point in your development process.\n\nUse Jira’s Querying Language for advanced views\n\nIn addition to building better ways to collaborate, these integrations also give your team deeper insight into the development pipeline from within Jira Software. You can now create powerful views into your delivery pipeline with JQL queries across multiple connected tools. For example, you can write a custom JQL query to report all Jira issues that have been deployed to production but still have an open PR.\n\ndeploymentEnvironmentType ~ “production“ AND development[pullrequests].open\n\nGet started\n\nIn Jira Software Cloud\n\nCreate OAuth credentials in Jira for Jenkins\n\nNavigate to Jira home > Jira settings > Apps.\n\nSelect OAuth credentials.\n\nSelect Create credentials.\n\nEnter the following details:\n\nApp name - Jenkins\n\nApp logo - A URL to the Jenkins logo, which will be used as an icon in the list of credentials. Eg: https://jenkins.yourcompany.com/logo.png\n\nServer base URL - The URL to your Jenkins server. Eg: https://jenkins.yourcompany.com\n\nIn Jenkins\n\nInstall the Jenkins plugin\n\nLogin to your Jenkins server and navigate to the Plugin Manager.\n\nSelect the 'Available' tab and search for 'Atlassian Jira Software Cloud' as the plugin name then install it.\n\nThe open-source plugin is hosted in the Jenkins GitHub account. You can check it out here.\n\nSet up Jenkins credentials\n\nIn Jenkins, go to Manage Jenkins > Configure System screen and scroll to the Jira Software Cloud integration section.\n\nSelect Add Jira Cloud Site > Jira Cloud Site. The Site name, ClientID, and Secret fields display.\n\nEnter the following details:\n\nSite name: The URL for your Jira Cloud site, for example yourcompany.atlassian.net.\n\nClient ID: Copy from OAuth credentials screen (Client ID column).\n\nSecret: Select Add > Jenkins.\n\nFor Kind, select Secret text.\n\nFor Secret, copy from OAuth credentials screen (Secret column).\n\nFor Description, provide a helpful description\n\nSelect Test settings to make sure your credentials are valid for your Jira site.\n\nHow to use the plugin\n\nTo start using the integration:\n\nGo into a specific pipeline in Jenkins ( Note: Your pipeline must be a 'Multibranch Pipeline' ).\n\nFrom the left-hand menu, select Pipeline Syntax.\n\nIn the Snippet Generator, select jiraSendDeploymentInfo or jiraSendBuildInfo from the dropdown list of Sample Steps and fill in the relevant details.\n\nSelect Generate Pipeline Script and copy/paste the output into your Jenkinsfile on the relevant Repository you are using. This will be used to notify Jira when you run that pipeline on that repo.\n\nFor sending build information\n\nThis is an example snippet of a very simple ‘build’ stage set up in a Jenkinsfile. After the pipeline is run, it will post the build information to your Jira Cloud site by looking at the branch name. If there is a Jira issue key (e.g. “TEST-123”) in the branch name, it will send the data over to Jira.\n\nJenkinsfile example\n\npipeline {\n     agent any\n     stages {\n         stage('Build') {\n             steps {\n                 echo 'Building...'\n             }\n             post {\n                 always {\n                     jiraSendBuildInfo site: 'example.atlassian.net'\n                 }\n             }\n         }\n     }\n }\n\nFor sending deployment information\n\nThis is an example snippet of two stages that run on any change to the staging or master branch. Again, we use a post step to send deployment data to Jira and the relevant issues. Here, the environmentId, environmentName, and environmentType need to be set to whatever you want to appear in Jira.\n\nJenkinsfile example\n\npipeline {\n     agent any\n     stages {\n         stage('Deploy - Staging') {\n             when {\n                 branch 'master'\n             }\n             steps {\n                 echo 'Deploying to Staging from master...'\n             }\n             post {\n                 always {\n                     jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-stg-1', environmentName: 'us-stg-1', environmentType: 'staging'\n                 }\n             }\n         }\n         stage('Deploy - Production') {\n            when {\n                branch 'master'\n            }\n            steps {\n                echo 'Deploying to Production from master...'\n            }\n            post {\n                always {\n                    jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-prod-1', environmentName: 'us-prod-1', environmentType: 'production'\n                }\n            }\n         }\n     }\n }\n\nThe entire Jenkinsfile may look something like this. This is only meant to represent an example of what the Jira snippets could look like within a stage or step.\n\nJenkinsfile example\n\npipeline {\n     agent any\n     stages {\n         stage('Build') {\n             steps {\n                 echo 'Building...'\n             }\n             post {\n                 always {\n                     jiraSendBuildInfo site: 'example.atlassian.net'\n                 }\n             }\n         }\n         stage('Deploy - Staging') {\n             when {\n                 branch 'master'\n             }\n             steps {\n                 echo 'Deploying to Staging from master...'\n             }\n             post {\n                 always {\n                     jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-stg-1', environmentName: 'us-stg-1', environmentType: 'staging'\n                 }\n             }\n         }\n         stage('Deploy - Production') {\n            when {\n                branch 'master'\n            }\n            steps {\n                echo 'Deploying to Production from master...'\n            }\n            post {\n                always {\n                    jiraSendDeploymentInfo site: 'example.atlassian.net', environmentId: 'us-prod-1', environmentName: 'us-prod-1', environmentType: 'production'\n                }\n            }\n         }\n     }\n }\n\nQuestions or feedback?\n\nIf you have any questions, please contact Atlassian support and they will route it to the correct team to help you.","title":"Introducing the Jira Software plugin for Jenkins","tags":["jira","plugin","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"rafalmyslek","html":"","id":"rafalmyslek","irc":null,"linkedin":null,"name":"Rafal Myslek","slug":"/blog/author/rafalmyslek","twitter":null}]}}]}},"pageContext":{"tag":"jira","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}