{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/pluggable-storage",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-10-28T00:00:00.000Z","id":"bb5b6b61-0b2c-523e-9fa6-6f2912642e51","slug":"/blog/2021/10/28/introducing-junit-external-storage/","strippedHtml":"In common CI/CD use-cases a lot of the space is consumed by test reports.\nThis data is stored within JENKINS_HOME,\nand the current storage format requires huge overheads when retrieving statistics and, especially, trends.\nIn order to display trends, each report has to be loaded and then processed in-memory.\n\nThe main purpose of externalising Test Results is to optimize Jenkins performance and storage\nby querying the desired data from external storages.\n\nI’m please to announce that the JUnit Plugin external storage is now available for use.\n\nGetting started\n\nInstall your database vendor specific plugin, you can use the Jenkins plugin site to search for it:\n\nhttps://plugins.jenkins.io/ui/search/?labels=database\n\ne.g. you could install the PostgreSQL Database plugin.\n\nWe currently support PostgreSQL or MySQL, but can support others, just create an issue or send a pull request.\n\nFrom Jenkins UI\n\nNavigate to: Manage Jenkins → Configure System → Junit\n\nIn the dropdown select 'SQL Database'\n\nNow configure your Database connection details.\n\nSearch for 'Global Database' on the same 'Configure System' page.\n\nSelect the database implementation you want to use and click 'Test Connection' to verify Jenkins can connect\n\nClick 'Save'\n\nConfiguration as code\n\nIf you want to configure the plugin via Configuration as Code then see the below sample:\n\nunclassified:\n  globalDatabaseConfiguration:\n    database:\n      postgreSQL:\n        database: \"jenkins\"\n        hostname: \"${DB_HOST_NAME}\"\n        password: \"${DB_PASSWORD}\"\n        username: \"${DB_USERNAME}\"\n        validationQuery: \"SELECT 1\"\n  junitTestResultStorage:\n    storage: \"database\"\n\nUsing the plugin\n\nNow run some builds, here’s an example pipeline configuration to get you started if you’re just trying out the plugin:\n\nnode {\n  writeFile file: 'x.xml', text: '''\n\n'''\n  junit 'x.xml'\n}\n\nYou will see a test result trend appear like below on the builds project page:\n\nIf you check on the controller’s file system you will see no junitResult.xml for new builds.\n\nIf you connect to your database and run:\n\nSELECT * FROM caseresults;\n\nYou will see a number of test results in the database.\n\nWhat happens to existing test results?\n\nExisting test results will stay on disk but will not be loaded.\n\nCurrently there is no migration scripts or plugin functionality to do this, if you need it then please raise an issue.\n\nHow are test results cleaned up\n\nWhen a job or build is deleted the related test results are removed.\n\nThis is expected to be done as part of a 'Build Discarder'.\n\nIf you wish to keep your results longer than this you can disable this feature by enabling:\n\nSkip cleanup of test result on build deletion on the system configuration page.\n\nIf you need more complex cleanup strategies built into the plugin then please raise an issue.\n\nAPI\n\nThe API is defined at:\n\njenkinsdoc:junit:io.jenkins.plugins.junit.storage.JunitTestResultStorage[]\n\njenkinsdoc:junit:io.jenkins.plugins.junit.storage.JunitTestResultStorageDescriptor[]\n\njenkinsdoc:junit:io.jenkins.plugins.junit.storage.TestResultImpl[]\n\nJunitTestResultStorage#load is passed a job name and build which can be used to construct an instance of the external storage implementation.\n\nThis implementation will then act on that job and build except for the optimised calls that act across all builds.\n\nThe API contains the basic methods like getFailCount, getSkipCount, but also APIs that are optimised for retrieving data for the trend graphs on the job page and the test result history page.\n\nThese allow single API calls to be made for what used to be a lot of work for Jenkins to look up before.\n\nFeedback\n\nI would love to hear your feedback & suggestions for this feature.\n\nPlease create an issue at https://github.com/jenkinsci/junit-plugin or provide feedback on https://community.jenkins.io","title":"Introducing external storage for JUnit test results","tags":["cloud-native","pluggable-storage","junit"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja","twitter":"Tjaynz"}]}},{"node":{"date":"2018-09-12T00:00:00.000Z","id":"25b519ed-5da4-5f9a-a173-6ea9a343b90a","slug":"/blog/2018/09/12/speaker-blog-a-cloud-native-jenkins/","strippedHtml":"A few months ago I published a\nblog post about\nCloud Native Special Interest Group (SIG)\nand ongoing projects related to Cloud Native Jenkins.\nNext week we will be presenting at DevOps World | Jenkins World together with Carlos Sanchez and Jesse Glick,\nso I would like to provide a heads up for\nour talk: “A Cloud Native Jenkins”.\n\nIn our talk, we will focus on the following topics: Pluggable Storage,\nour ephemeral Jenkins controllers experiments,\nand tools which may be used to implement single-shot controllers.\n\nPluggable Storage\n\nPluggable storage is one of the major areas we have been working on over the last few months.\nThere are a number of parallel stories which are summarized on\nthis page.\nThere has been significant progress in the areas of artifact storage, build logging and configuration storage.\nA number of Jenkins Enhancement Proposals were submitted and accepted,\nand there are plugin releases and prototypes for these stories.\n\nDuring our talk we will discuss the current status of these stories and future plans.\nIn particular, we will cover the following areas and reference implementations:\n\nStoring all your artifacts transparently, e.g. in a cloud service blob store like AWS S3.\n\nArtifact Manager for S3 Plugin is an implementation we have recently released\n\nProviding credentials from an external location.\n\nKubernetes Credentials Provider is one of the existing implementations for Kubernetes secrets\n\nSending and retrieving the build logs from a cloud service.\n\nWe are working on reference implementations for AWS CloudWatch Logs and\nElasticsearch\n\nStoring configuration data in external storage like Kubernetes Resources and SQL database\n\nStoring test results externally, e.g. in an SQL database or a specialized Test Management System\n\nThere are existing plugins for the areas above, but there is a difference in approach we have taken.\nInstead of creating new custom steps we extend Jenkins architecture in a way that the storage becomes transparent to users.\nFor example, with Artifact Manager for S3 Plugin common Archive Artifacts steps\nwork transparently with Remote storage, as well as Jenkins Pipeline’s stash() / unstash() steps.\n\nThe reference implementations intentionally use different technologies so that we cover more scenarios.\nWe regularly discuss the implementations in the Cloud Native SIG,\nand we would appreciate your feedback.\n\nEphemeral Jenkins controllers research\n\nWant something new?\nSeveral days ago Kohsuke Kawaguchi, the creator of Jenkins, posted the\nJenkins: Shifting Gears article to summarize the plan for Jenkins evolution.\nCloud Native Jenkins is a critical part of this plan, and it is not “just Jenkins X”.\nThere are various architectural changes in Jenkins required to make this vision happen,\nand we plan to work on these changes in the Cloud Native SIG.\n\nIn our presentation, we will talk about our experiment with ephemeral Jenkins and single-shot controllers.\nIn this story we are creating a headless single-shot controller which starts in a container,\nexecutes a Pipeline build and pushes all the results to remote storage so that the container can just be deleted after completion.\nSuch a controller bundles plugins and self-configuration logic using “Configuration as Code”,\nso that it can start executing Pipelines in just a few seconds.\nOnce packaged, it can be invoked from CLI as simply as…​\n\ndocker run --rm -v $PWD/demo/Jenkinsfile:/workspace/Jenkinsfile onenashev/cwp-jenkinsfile-runner-demo\n\nor, in Kubernetes:\n\nkubectl create configmap jenkinsfile --from-file=demo/Jenkinsfile\nkubectl create -f demo/kubernetes.yaml\n\nSuch a single-shot controller could also be made a part of a Cloud Native Jenkins system.\nStandard event handlers like Prow can invoke the builds on webhooks and report results back,\nso that the single-shot controller can be used to build pull requests or to run Continuous Delivery flows.\nExtra agents could also be connected to the controller on-demand, using the Kubernetes plugin or sidecar containers.\n\nTools\n\nIn order to make this experiment possible, we used a toolchain based on\nDocker,\nJenkinsfile Runner,\nConfiguration as Code Plugin (JCasC), and a\nCustom WAR Packager tool which glues all the things together.\n\nCustom WAR Packager is a new tool which takes various configurations (YAML specification defining core version, list of plugins, system properties, Groovy Hooks, JCasC YAMLs)…​\nand then bundles everything as a ready-to-fly WAR file or Docker image.\nStarting from version 1.2, Custom WAR Packager also supports packaging Jenkinsfile Runner images as an experimental feature.\nI will do a separate blogpost about this new tool later,\nbut there is already some documentation a number of demos in the project’s repo.\n\nOur demo\n\nYes, we will have a demo! We will show a single-shot controller running with Pluggable storage implementations for AWS environments (Amazon S3, AWS CloudWatch, EKS, etc.),\nwhich executes Jenkins Pipelines for Maven projects and provisions agents in Kubernetes on-demand.\n\nThe demo has to be published yes, but you can already find a more simple Jenkinsfile Runner demo\nhere.\n\nWant to know more?\n\nThe upcoming DevOps World | Jenkins World conferences\nare heavily packed with talks related to Cloud Native Jenkins,\nincluding war stories and presentations on projects like Jenkins X and Jenkins Evergreen.\nIt is a great chance to get more information about using Jenkins in cloud environments.\n\nIf you are a Jenkins contributor or just want to become a contributor,\nalso join the Contributor Summit (Sep 17 in US and Oct 23 in Nice) or visit the Jenkins community booth in the Exhibition hall.\nAt the Contributor Summit on Sep 17 we will also have a face-to-face Cloud Native SIG meeting.\nFeel free to contribute to the agenda here.\n\nCome meet Carlos, Jesse, Oleg, and other Cloud Native SIG members at\nJenkins World on September 16-19th in San Francisco and on October 22-25 in Nice.\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Speaker blogpost: A Cloud Native Jenkins","tags":["jenkinsworld","jenkinsworld2018","cloud-native","pluggable-storage","jenkinsfile-runner"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"pluggable-storage","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}