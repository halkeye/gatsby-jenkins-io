{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/plugins/page/12",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2014-07-08T00:00:00.000Z","id":"ec480fa0-5d1f-5a81-b4c7-c06613ec897a","slug":"/blog/2014/07/08/workflow-plugin-tutorial-writing-a-step-impl/","strippedHtml":"+\nThe other day I was explaining how to implement a new workflow primitive to https://github.com/vivek[Vivek Pandey], and I captured it as a recording. +\n +\n +\n +\n\n+\nThe recording goes over how to implement the `+Step+` extension point, which is the workflow equivalent of `+BuildStep+` extension point. If you are interested in jumping on the workflow plugin hacking, this might be useful (and don't forget to get in touch with us so that we can help you!) +\n +\n\n+\nimage:https://www.thatvideogameblog.com/wp-content/uploads/2012/11/Link-Dangerous-to-Go-Alone.jpg[image,width=310,height=206] +","title":"Workflow plugin tutorial: writing a Step impl","tags":["development","plugins","screencast","video","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-03T00:00:00.000Z","id":"1ddea8bf-ea84-5464-b0f5-8d852c356b4a","slug":"/blog/2014/07/03/jenkins-office-hours-dotci/","strippedHtml":"+\nSurya walked us through https://github.com/jenkinsci/dotCI[the dotCI source code] yesterday, and a bunch of ideas about how to reuse pieces are discussed. The recording is on YouTube, and https://docs.google.com/document/d/1zXYOz9Zy-CLu2t8PgqIU0jMO8890PRNjPEAvlrx-HW8/edit#[my notes are here]. +\n +","title":"Jenkins Office Hours: dotCi","tags":["general","plugins","screencast","video"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-01T00:00:00.000Z","id":"e53918cc-d157-5758-9dd4-f3ea6a301cf8","slug":"/blog/2014/07/01/jenkins-office-hours-dotci/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/f/fe/Hangouts_Icon.png[image] +\n\n+\n+\n\n+\nTomorrow in Jenkins office hours, Surya Gaddipati will be going over https://github.com/jenkinsci/dotci[DotCi], a package of features that integrates Jenkins closely with GitHub, configuration via .ci.yml file in source tree, built-in Docker support and MongoDB backend. +\n +\n\n+\nI think there's a number of interesting pieces here that could be split into individual plugins for reuse, and possible alignment with existing efforts like https://wiki.jenkins.io/display/JENKINS/Script+Security+Plugin[Script Security plugin] or https://wiki.jenkins.io/display/JENKINS/Literate+Plugin[Literate plugin]. +\n +\n\n+\nTo record the show, https://plus.google.com/events/cmatf87mb6cfo090e063l10709g[this event will be in a different hangout from the usual one], but https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Office+Hours&iso=20140702T11&p1=224&ah=1&sort=1[the time is the same]. Looking forward to seeing you!","title":"Jenkins Office Hours: dotCi","tags":["general","news","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-05-30T00:00:00.000Z","id":"f711b90c-f038-5026-9c5a-4d859d116214","slug":"/blog/2014/05/30/adopt-a-plugin/","strippedHtml":"+\n\n+\n\n+\nToday on IRC, I was asked how someone new to the project can get started working on Jenkins, when s/he has no particular preference or pet-peeve. +\n +\n\n+\nThis is a good question for which the project should have a canned answer ready, so here is one approach — adopt a plugin! +\n +\n\n+\nOften, a Jenkins plugin gets developed by someone to scratch his own itch. That person shares the plugin with the community, and since it does everything he needs, he moves on to work on something else. Then another person starts using that plugin, comes up with an idea for improvement, implements that, and then moves on. Given that we have more than 900 plugins today, there are a plenty of plugins that are currently co-maintained by the community, which could really use a focused loving caregiver. +\n +\n\n+\nSo why don't you adopt a plugin? You can pick up one of those plugins and act as a maintainer. You'll hear appreciation from people who are using that plugin, and most plugins are small and simple enough even for people new to Jenkins. Above all, working on plugins don't require much communication with existing developers and implicit processes, which is often difficult for new people to find out. +\n +\n\n+\nHere's how you can find a plugin to adopt. You can look at https://wiki.jenkins.io/display/JENKINS/Pending+Pull+Requests[repositories that have most pending pull requests]. Plugins with lots of pull requests likely could use some help, so check if anyone is actively working on it and talk to him, or if you don't see much activities from a single person, just go ahead and adopt the plugin. +\n +\n\n+\nhttps://stats.jenkins-ci.org/jenkins-stats/svg/svgs.html[Usage statistics] has `+top-plugins500.svg+` (this is for https://stats.jenkins-ci.org/jenkins-stats/svg/201404-top-plugins500.svg[the last month]). Open that in Firefox, which lets you zoom in. Scroll all the way to the right, and you see popular plugins. Compare that with https://github.com/jenkinsci/[our GitHub repositories], and you can find popular plugins that aren't getting enough love. +\n +\n\n+\nhttps://issues.jenkins.io/browse/JENKINS#selectedTab=com.atlassian.jira.plugin.system.project%3Acomponents-panel[Issue tracker] is also a good place to look for a plugin in need of help. Every plugin has a separate component, so look at bugs and RFEs filed against those, especially with lots of votes. Fix a bug is great, but even just helping with the triage process would be highly appreciated. +\n +\n\n+\nTry adopting a plugin for a while, and when you get the hang of it, let https://groups.google.com/forum/#!forum/jenkinsci-dev[the dev list know]. Update `+pom.xml+` to have your name listed as a maintainer. Come https://jenkins-ci.org/content/chat[join IRC]. That way, we know who you are and how to reach you. +\n +\n\n+\nSee, it's really not that hard. And there's something really satisfying in making things a little better and seeing happy users. Anyway, looking forward to working with you!","title":"Adopt a plugin","tags":["general","jobs","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-16T00:00:00.000Z","id":"0ec96a9f-b23f-50d8-805d-75b5682f95aa","slug":"/blog/2014/04/16/active-directory-plugin-improvements/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Active_Directory[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Active-directory.svg/170px-Active-directory.svg.png[image] +\n] +\n\n+\n+\n\n+\nOne of the few plugins that I still personally maintain is https://wiki.jenkins.io/display/JENKINS/Active+Directory+plugin[Active Directory plugin]. In the past few months, I've been making steady improvements in this plugin, thanks to various inputs and bug reports given to me from the ClodBees customers. +\n +\n\n+\nOne of the recent fixes was to get https://issues.jenkins.io/browse/JENKINS-9258[the \"remember me\" feature] finally working for Active Directory. This requires a relatively new Jenkins 1.556, but it eliminates the need to having to constantly type the password in. +\n +\n\n+\nThen I've rebumped the version of https://github.com/kohsuke/com4j[COM4J], which was https://issues.jenkins.io/browse/JENKINS-16429[causing a thread leak] when Jenkins runs on Windows. If you are running a Windows deployment with lots of active users, this probably would have contributed to the instability of Jenkins. +\n +\n\n+\nAnd then lastly, a small but crucial improvement was made to the way we search group membership, so that we can avoid recursively searching AD. This should result in a significant speed improvement when you are logging into Jenkins through AD. +\n +\n\n+\nThe latest version of the plugin as of writing is 1.37. I hope you'll have a chance to update the plugin soon. +","title":"Active Directory plugin improvements","tags":["development","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-04T00:00:00.000Z","id":"1b4b4540-c205-5a24-bbcd-53c64d62a457","slug":"/blog/2014/04/04/maven-job-type-performance-improvements-in-maven-plugin-2-2/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Grumman_F-14_Tomcat[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/US_Navy_040925-N-0295M-030_An_F-14D_Tomcat_conducts_a_high_speed_flyby_during_the_tactical_air_power_demonstration_at_the_2004_Naval_Air_Station_Oceana_Air_Show.jpg/300px-thumbnail.jpg[image]] +\n\n+\n+\n\n+\nI recently had an opportunity to visit a big Jenkins user on site, and one of the things they've told me is that building projects in the Maven job type is substantially slower than doing the same with the freestyle project type. +\n +\n\n+\nThis is partly expected, because this job type does more for you. For example, it automatically archives your build artifacts, fingerprints all the relevant information, and so on. These are good things, and naturally, it cost time. +\n +\n\n+\nBut the slow down they are seeing was substantial, and this is a complaint I've heard from others as well. So I started looking into it. +\n +\n\n+\nWith a help of https://linux.die.net/man/8/tc[artificial delay] induced to my network interface and several custom scripts to probe into the running processes, I was able to understand what was going on and make some good improvements. +\n +\n\n+\nFirst, in Maven plugin 2.0, we've made a change in the way we archive artifacts from Maven. Previously, the artifacts were copied between the controller and the Maven JVM, and for a reason I'll mention later, this was very slow, especially in a network that has a large latency. With Maven plugin 2.0 and onward, artifacts are archived between the controller and the agent JVM. +\n +\n\n+\nThe second problem that I discovered was that the spy program we put inside Maven is causing excessive amount of unnecessary classloading. Some classes have static initializers that too eagerly refer to other classes, which in turn brings in other classes, and so on. Despite https://jenkins-ci.org/content/faster-slave-classloading[the jar file caching that we do], these classloading still sometimes requires precious roundtrips to the controller, which costs in the order of 10s of ms. I was able to make various changes in Jenkins core to cut this down, and these fixes will land in Jenkins 1.559 (ETA is April 14th.) The classloading overhead is independent of the size of your Maven build, so this improvement is more for people who have lots of small Maven builds, like https://ci.jenkins.io/[Jenkins building Jenkins plugins]. +\n +\n\n+\nNow, on to the biggest fruit of this investigation I was able to discover and fix. Imagine the Maven JVM has a lot of data to send to the controller, say you are archiving test reports or code coverage report. A good implementation would send these data as fast as possible to the controller, paying respect to the limit of flow control to avoid overwhelming the controller. +\n +\n\n+\nIt turns out that the way we set up this communication channel was far from optimal. Instead of having the Maven JVM push data with flow control, we were relying on the controller to pull data. That is, controller has to send out a request to the agent to fetch the next batch of data (8KB), then once it receives that data, it sends out another request to fetch the next batch of data, and so on. If your network latency is 10ms, this scheme only lets us send 500KB/sec, even if you have a gigabit ethernet. No wonder it was so slow! +\n +\n\n+\nThis fix is in in Maven plugin 2.2. See https://issues.jenkins.io/browse/JENKINS-22354[JENKINS-22354] if you want to know more about the actual diffs and such. +\n +\nUnfortunately, none of these are available for those who are on 1.532.x LTS, but http://meetings.jenkins-ci.org/jenkins/2014/jenkins.2014-04-02-18.02.html[the next 1.554.1 LTS] will be able to run the newer Maven 2.2 plugin. So the help is on the way! +\n +","title":"Maven job type performance improvements in Maven plugin 2.2","tags":["development","plugins","releases"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-09-23T00:00:00.000Z","id":"897493a6-04e7-556a-b3c1-fe8522ac41a9","slug":"/blog/2013/09/23/literate-builds-wtf/","strippedHtml":"(This is a guest post by Stephen Connolly)\n\nEvery developer, at some stage, will be handed a project to maintain that somebody else was responsible for. If you are lucky, the developer will not have left the organization yet and you get a brief Knowledge Transfer as the developer packs up their desk before heading on to their new job. If you are unlucky, you don’t even get given the details of where the source code is hiding.\n\nNow begins the detective work, as you try to figure out how to build and release the project, set up Jenkins jobs to build the project and run the tests…​\n\nIt doesn’t have to be this way, you know!\n\nWhat if I told you there was a file sitting at the top level that told you exactly how to build the project and do the important things? You’d be interested, wouldn’t you?\n\nWhen I tell you it’s the README file? “But that’s all lies. Nobody keeps that up to date. Argh!!!”\n\nBut what if Jenkins reads the README file and uses it for the build definition? Now you not only have a CI system ensuring that the build definition is correct, but you have less work to do setting up the job.\n\nWhat if, because the build definition is now in Source Control, you can have Jenkins create jobs for each branch with ease? The joy of cheap branches that modern source control systems such as GIT and Mercurial give us, no longer comes with the pain of having to create Jenkins jobs for each branch (and more pain having to remember to tidy up when the branch is gone.)\n\nThat is the promise delivered by the Literate plugin.\n\nHow does it work?\n\nFirst of all, because Jenkins will be looking at all your branches, you need a way to tell Jenkins which branches it makes sense to try and build. For example, if your project lives on GitHub, you are unlikely to want the gh-pages branch to be treated like a branch of your actual code, and there are going to be branches that have a README file, but not one that Jenkins understands, so we will want to ignore them too.\n\nYou tell Jenkins that a branch is one to build by putting a marker file in the root of the branch. By default the marker file is called.cloudbees.md. If the marker file is present and empty, then the literate job type will assume the build instructions are in README.md. If the marker file is present and has build instructions, then the literate job type will just use those instructions.\n\nIn order to make it easy to provide the instructions, there is rather minimal formatting requirements for a literate description of a project’s build commands.\n\nThe minimal description is just a section with the word build and a verbatim code block in that section. Here is the obligatory minimal “hello world” project description:\n\n# Build\n\n    echo hello world\n\nor if you don’t like indenting you could use the GitHub style triple-back-tick\n\n# Build\n\n```\necho hello world\n```\n\nPart of what makes this a literate style of build description is that you can freely intersperse the description of what and why the commands do with the actual commands, e.g.\n\n# Build\n\nWe will greet the world with our great literate project description\n\n    echo -n \"Hello\"\n\nNow that we have announced our intention to greet some people, we need to qualify exactly who we are greeting\n\n    echo \" world\"\n\nThat was just perfect. Time for a cup of tea\n\nThe first section heading containing the word build identifies the section that is assumed to be the build instructions. (The keyword that is searched for is configurable, but not yet exposed in the literate plugin’s UI). The following is also a valid README.md for printing hello world:\n\nOur super hello world project\n=============================\n\nThis is a project to say hello to the world\n\nHow to build\n------------\n\nYou can build this project by running the following command:\n\n    echo hello world\n\nCredits\n-------\n\nThis project would not have been possible without the existence of Assam loose leaf tea.\n\nNow this is all very well, but what about if you need different instructions for building on Windows versus on Linux, and for that matter how does Jenkins know where we should build this project. Plus Mr Joe Random needs to know what he needs to install on his machine to build it for himself.\n\nThe first section containing the word environment identifies the section that contains the details of the environments to run the build on.\n\nHello world project\n===================\n\nThis is a simple hello world literate project\n\nEnvironment requirements\n------------------------\n\nThe project is built and tested by Jenkins on the following build environments, so it is known that the build instructions work on the following environments:\n\n* `windows`\n* `linux`\n\nHow to build\n------------\n\nThe build instructions are platform dependent:\n\n* On `windows`:\n\n        echo \"hello world\"\n\n* On `linux`:\n\n        echo hello\\ world\n\nWhen Jenkins sees bullet points in the environment section it assumes each bullet point corresponds to an environment to run the build on. Each environment is specified by at least one code snippet which helps define the requirements of the environment. By default Jenkins will look for tool installers with the same name as the labels. If it cannot find any matching tool installers it assumes that the labels are Jenkins agent node labels. (The strategy is plugable, but not yet exposed in the UI of literate builds)\n\nWhen you have multiple environments on which to build and test, you have two choices on your build instructions. You can either:\n\nHave one and only one set of commands that work on all environments; or\n\nHave bullet points that cover all the specified environments.\n\nSo for example, if you are building on the following environments:\n\nwindows, java-1.6, ant-1.7\n\nwindows, java-1.6, ant-1.8\n\nwindows, java-1.7, ant-1.8\n\nlinux, java-1.7, ant-1.7\n\nlinux, java-1.7, ant-1.8\n\nYou need to have bullet points in your build section that can match each of those options, but as long as there is a match for every option you are ok. So for example:\n\nANT version finder\n==================\n\nFinding out the version of ANT on various platforms\n\nEnvironments\n------------\n\nNesting bullet points multiplies out the options\n\n* `windows`\n    * `java-1.6`\n        * `ant-1.6`\n        * `ant-1.7`\n    * `java-1.7`, `ant-1.8`\n* `linux`, `java-1.7`\n    * `ant-1.7`\n    * `ant-1.8`\n\nBuild\n-----\n\nThe first match with the highest number of matches wins, so we want windows to get special treatment:\n\n* `windows`\n\n        call ant.bat -version\n\n* `java-1.7`\n\n        ant -version\n\nWe could have picked `linux` for the above if we wanted, but this matching will have the same effect and better illustrates how matching works.\n\nThat is a mostly complete detail of how the build and environment sections work. In general everything except verbatim code blocks and bullet points with code snippets get ignored.\n\nThere are other sections that the literate project type allows for, these are called “task” sections. We haven’t written the code to support them yet, but the idea is that these will work a bit like basic build promotions with the promoted builds plugin. There will be a UI in Jenkins that lets you kick off any of the task sections that you define as being valid for the job type, in pretty much exactly the same was as the promoted builds plugin works.\n\nAfter that, everything else in the README.md is ignored.\n\nHow do I get the test results into Jenkins?\n\nJenkins is not just about build and test. A lot of the utility in Jenkins comes from the additional reporting plugins that are available for Jenkins. (The build step ones are less relevant with literate style projects because you want to give people consuming the content instructions they can also follow)\n\nSo there is additional metadata about your project that you want to give to Jenkins. We put that metadata into a folder called.jenkins in the root of your source control.\n\nThere are two levels of integration that a Publisher/Notifier can have with the literate project type. The first level is a basic XML description of the plugin configuration. If you have ever looked at the config.xml of a Jenkins job, you will be familiar with this format.\n\nIf we have a Maven project and we want to collect the Unit test results in Jenkins we might have a README.md like this:\n\nMaven project with tests\n========================\n\nEnvironments\n------------\n\n* `java-1.7`, `maven-3.0.5`\n\nBuild\n-----\n\n```\nmvn clean verify\n```\n\nAnd then we create a.jenkins/hudson.tasks.junit.JUnitResultArchiver.xml file with the following:\n\n**/target/surefire-reports/*.xml, **/target/failsafe-reports/*.xml\ntrue\n\nThe literate plugin adds an Action to all Free-style projects that allows exporting these XML configuration snippets in a.zip file for unpacking into your project’s source control. Each publisher/notifier has its own file, so it should be easy to mix and match configuration across different projects and enable/disable specific publishers just by adding/removing each publisher’s file.\n\nThe XML itself can be a bit ugly, so there is a second level integration, where a Publisher/Notifier plugin can implement its own DSL. The literate plugin ships with two such DSLs. One for archiving artifacts and the other for JUnit test results. So the above XML file could be replaced by a.jenkins/junit.lst file with the following contents\n\n**/target/surefire-reports/*.xml\n**/target/failsafe-reports/*.xml\n\nNot everything makes sense in source control though…​\n\nThere are always going to be things that you need to configure in Jenkins. So for example there may be some sources of branches that you don’t trust. A good example would be pull requests on GitHub. We have a concept of branch properties in the literate project type that will allow defining what exactly a trusted branch source should be allowed do and what an untrusted branch source should be allowed do. It does not make sense for that information to be embedded within the untrusted branch itself.\n\nSimilarly coordination between different Jenkins projects is something that does not make sense in source control. The names of those Jenkins projects (and even their existence) is not knowable from source control. It does not make sense to keep that information in source control.\n\nInformation about how to map the description of the build environment in the README.md file to the build environments available to Jenkins does not make sense in source control because your Jenkins node configuration details may change over time.\n\nIn other words, literate projects do not remove the need to configure things in Jenkins. They do however remove a lot of the need, and especially the need to tweak the exact build commands and the location of where build results should be picked up from.\n\nWhat’s not done yet?\n\nHere is a list of some things I want to see for literate builds:\n\nA literate build step so that people can use some of the literate magic in their free-style projects while they migrate them to literate-style\n\nSupport for literate task promotion flows (I think Kohsuke has signed up to help deliver this)\n\nExposing the configuration points such as the marker file name (a global config option as well as per-project override) and the keywords to search for in the README.md (this is mostly UI work)\n\nAdding in some support for other markup languages (I’d really like to see AsciiDoc formatted README parsing, e.g. README.asc)\n\nBranch properties for untrusted builds (to do things like restrict the build execution to one explicit environment, put an elastic build timeout in place, wrap the shell commands in a chroot jail, etc)\n\nBranch properties for build secrets (So that the production and staging branches can get the keys to deploy into their respective environments.\n\nCollapsing the intermediate level in the UI when there is only one build environment.\n\nEliminating the double SCM checkout when the backing SCM supports the SCMFileSystem API so that builds work even faster\n\nReusing the GIT repository cache when using GIT branch sources.\n\nSome nicer integration with GitHub (I have most of this done, but I think it would be irresponsible to release this without having the Untrusted branch properties implemented as otherwise Pull Requests could become a vector for abuse)\n\nFinishing the support for Subversion credentials migration from the legacy credentials storage mechanism to the new Credentials plugin storage mechanism (not strictly literate project related, but Subversion is still a popular SCM and until this gets done we cannot release a version of the Subversion plugin with literate project support)\n\nAdding nice DSLs for all the Publishers and Notifiers\n\nAdding SCM support to all the SCM plugins\n\nAdding branch property support for the Build Wrapper / Build Environment / Job Property plugins where that makes sense.\n\nHaving said all that, the core functionality works right now for GIT/Subversion/Mercurial on Jenkins 1.509+, and it is only by playing with this functionality that you can see how this could change the way you use Jenkins.\n\nHow do I try this out myself\n\nLast week Kohsuke set up a new “Experimental” update center in Jenkins OSS. The reason for this new update center is that we have a lot of (potentially disruptive) changes to many plugins and if we started cutting releases, users may get annoyed if they end up upgrading to these plugins until they have all been better tested.\n\nThe “Experimental” update center includes plugins that have alpha or beta in their version number, while the other update centers now exclude those plugin versions.\n\nSo if you want to play with these plugins you need to change your Jenkins instance’s update center URI to:\n\nhttps://updates.jenkins-ci.org/experimental/update-center.json\n\nI would recommend that you use a test Jenkins instance for playing with.\n\n(WARNING: shameless plug) You could also just fire up a Jenkins in the cloud using CloudBee’s DEV@cloud service and follow these handy instructions to enable access to the experimental plugins:\n\nThe 10 best bug reports on literate builds before the Jenkins User Conference next month will receive a prise from CloudBees, Inc. I was able to get a commitment that the prise would be at least a T-shirt. I am hoping to get some more swag added to the prize pool. CloudBees employees or relatives of CloudBees employees are not eligible for the bug report prise!","title":"Literate builds, WTF?","tags":["development","plugins","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-09-09T00:00:00.000Z","id":"95af2bb9-3830-5c68-9b16-482e5c1e65e7","slug":"/blog/2013/09/09/loader-io-plugin-developer-interview/","strippedHtml":"This is a guest post by Mike Rowan, VP R&D at SendGrid.\n\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/loaderio.png[image,width=150,height=150] +\n\n+\n+\n\n+\n*Q: Tell us a bit about what your service and plugin do. Who is it for? What are the highlights of your plugin?* +\n +\n\n+\nA: https://loader.io[Loader.io] is a simple-to-use cloud-based load testing service. The service is designed for developers and people who need to ensure applications are performing as they should. It allows developers to perform large-scale load tests on demand, which lets them understand the scalability and performance of their applications. We realize Jenkins is the preferred build service for a lot of our users, and we know providing a way for them to implement, measure and improve application performance during the continuous build cycle is important. So we wrote a Jenkins plugin that allows load testing to be brought into the continuous build and deployment process with ease. +\n +\n\n+\nQ: Did you have to convince your boss/lawyers to open-source your plugin? What was the pitch?*\n\n+\nA: No, at SendGrid our focus is always to help make developers’ lives easier, and when we can, we like to provide tools that they can hack on. Since the Jenkins platform is itself an open source project, following the same model to provide our plugin made perfect sense. In addition, we encourage others to build on our work, help improve it and ultimately make it better for everyone using it. +\n +\n\n+\nQ: How did you learn how to write a plugin?\n\n+\n+\n\n+\nA: We use the Jenkins platform ourselves, and we leverage a number of the plugins available. Having access to these and the Jenkins documentation gave us a great head start. It was an easy decision to write the Jenkins plugin for loader.io, and the Jenkins community provided both detailed instructions as well as support when we needed it. +\n +\n\n+\nQ: Any gotchas in the experience of developing a plugin that you want to share?\n\n*\n\n+\nA: The overall process of developing the plugin was straightforward and simple, but we did run into some scope creep in the middle of the dev process. We found that since the platform was so easy to write for, it made us keep adding more and more features. Usually this is good, but in the case of our project, we wanted to provide the most value as quickly as possible. So we scaled back, focused on solid execution for the most important features, and are already preparing to launch a new version with the things we reserved for post v1 availability. +\n +\n +\n\n+\nQ: What is the reaction from users so far?\n\n+\n+\n\n+\nA: The users we’ve spoken with love the plugin. In addition we’ve already gotten great feedback from some community members on “nice to have’s” in the plugin, some of which we’re already working on. +\n +\n\n+\nQ: What tips do you share to those who are interested in writing plugins?\n\n+\n+\n\n+\nA: If you have a service that provides value in the build, deployment and post deployment process, then you should be writing a Jenkins plugin. Two things are important for anyone writing a plugin: 1) be sure the plugin you’re writing is going to provide true value (if you need it yourself this is a good sign), and 2) make sure you understand the scope of the project and deliver core features and value first, then focus on some extra things. Providing a valuable plugin sooner than later will help you identify all the right additional features to include, especially when collecting live community feedback. +\n +\n\n+\nSome of the things we focused on early in the process were to identify the core features, and more importantly to make it very easy for users of Jenkins to install, use and interpret the loader.io plugin and results. We wanted to allow users to leverage our plugin for multiple environments and builds with system and global credentials. To do this, we decided to make use of the Credentials plugin (https://wiki.jenkins.io/display/JENKINS/Credentials+Plugin), which is a heavily-adopted plugin that provides a standardized API for plugins to store and retrieve credentials. This plugin allows our users to add and use different credentials in one single Jenkins environment. In addition, we created a new re-run feature which, when used with continuous build and testing, provides a deep view into the performance of an application over time. Finally, we wanted to bring the same UI experience users have in our environment into Jenkins, which we did by preserving the load test report model and making it function the same in the Jenkins UI. Doing this makes it easy for users to have consistency between the UIs and more easily understand the results regardless of where they’re viewing them. +\n +\n\n+\nIt’s very easy to write a Jenkins plugin - I hope these insights will encourage you to write your own. +\n +\n\n+\nps - We’d love your feedback too. Check out our newly-released https://wiki.jenkins.io/display/JENKINS/loaderio[Jenkins plugin] for loader.io and let us know what you think.","title":"Loader.io plugin developer interview","tags":["development","guest post","interview","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}}]}},"pageContext":{"tag":"plugins","limit":8,"skip":88,"numPages":14,"currentPage":12}},
    "staticQueryHashes": ["3649515864"]}