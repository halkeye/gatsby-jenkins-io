{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/plugins/page/3",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-03-17T00:00:00.000Z","id":"d79e4a42-13d6-5155-8cc3-c8c31c9738ff","slug":"/blog/2020/03/17/ui-plugins/","strippedHtml":"This article has been presented in an recorded online session\nduring the Jenkins 2020 UI/UX Hackfest.\n\nFor Jenkins a large number of plugins are available that visualize the results of a wide variety of build steps. There\nare plugins available to render the test results, the code coverage, the static analysis and so on. All of these plugins\ntypically pick up the build results of a given build step and show them in the user interface. In order to render these\ndetails most of the plugins use static HTML pages, since this type of user interface is the standard visualization in\nJenkins since its inception in 2007.\n\nIn order to improve the look and feel and the user experience of these plugins it makes sense to move forward and\nincorporate some modern Java Script libraries and components. Since development of Blue Ocean has been stopped (see\nJenkins mailing list post)\nplugin authors need to decide on their own, which UI technologies are helpful for that task. However, the universe of\nmodern UI components is so overwhelming that it makes sense to pick up only a small set of components that are proven\nto be useful and compatible with Jenkins underlying web technologies. Moreover, the initial setup of\nincorporating such a new component is quite large so it would be helpful if that work needs to be done only once.\n\nThis guide introduces a few UI components\nthat make sense to be used by all plugin authors in the future to provide a rich user interface for reports in Jenkins.\nIn order to simplify the usage of these libraries in the context of Jenkins as a Java based web application, these\nJava Script libraries and components have been packaged as ordinary Jenkins plugins.\n\nIn the following sections, these new components will be introduced step by step. In order to see how these components\ncan be used a plugin, I demonstrate the new features while enhancing the existing\nForensics Plugin with a new user\ninterface. Since the Warnings Next Generation Plugin also uses these new components, you can see additional examples\nin the documentation of the warnings plugin\nor in our public ci.jenkins.io instance, that\nalready is using these components in the detail views of the warnings plugin.\n\n1. New user interface plugins\n\nThe following UI components are provided as new Jenkins plugins:\n\njquery3-api-plugin :\nProvides jQuery 3 for Jenkins Plugins.\njQuery is — as described on their home page — a fast, small, and feature-rich JavaScript library. It makes things\nlike HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API\nthat works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the\nway that millions of people write JavaScript.\n\nbootstrap4-api-plugin :\nProvides Bootstrap 4 for Jenkins Plugins. Bootstrap is — according to their self-perception — the world’s most popular front-end component library to build responsive, mobile-first projects on the web. It is\nan open source toolkit for developing with HTML, CSS, and JS. Developers can quickly prototype their ideas or\nbuild entire apps with their Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful plugins\nbuilt on jQuery.\n\ndata-tables-api-plugin :\nProvides DataTables for Jenkins Plugins.\nDataTables is a plug-in for the jQuery Javascript library. It is a highly flexible tool, built upon the foundations\nof progressive enhancement, that adds all of these advanced features to any HTML table:\n\nPrevious, next and page navigation\n\nFilter results by text search\n\nSort data by multiple columns at once\n\nDOM, Javascript, Ajax and server-side processing\n\nEasily theme-able\n\nMobile friendly\n\necharts-api-plugin :\nProvides ECharts for Jenkins Plugins. ECharts is an open-sourced\nJavaScript visualization tool to create intuitive, interactive, and highly-customizable charts. It\ncan run fluently on PC and mobile devices and it is compatible with most modern\nWeb Browsers.\n\nfont-awesome-api-plugin :\nProvides Font Awesome for Jenkins Plugins. Font Awesome has vector icons and social logos,\naccording to their self-perception it is the web’s most popular icon set and toolkit. Currently, it contains more than\n1,500 free icons.\n\npopper-api-plugin\nProvides Popper.js for Jenkins Plugins. Popper can\neasily position tooltips, popovers or anything else with just a line of code.\n\nplugin-util-api-plugin : This small plugin provides\nsome helper and base classes to simplify the creation of reporters in Jenkins. This plugin also\nprovides a set of architecture rules that can be included in an architecture test suite of your plugin.\n\n2. Required changes for a plugin POM\n\nIn order to use these plugins you need to add them as dependencies in your plugin pom. You can use the following snippet\nto add them all:\n\npom.xml\n\n[...]\n\n1.0.2\n5.12.0-7\n4.4.1-10\n4.6.0-8\n1.10.20-13\n[...]\n\nio.jenkins.plugins\nplugin-util-api\n${plugin-util-api.version}\n\nio.jenkins.plugins\nfont-awesome-api\n${font-awesome-api.version}\n\nio.jenkins.plugins\nbootstrap4-api\n${bootstrap4-api.version}\n\nio.jenkins.plugins\necharts-api\n${echarts-api.version}\n\nio.jenkins.plugins\ndata-tables-api\n${data-tables-api.version}\n\n[...]\n\n[...]\n\nAlternatively, you have a look at the POM files of the\nWarnings Next Generation Plugin or the\nForensics API Plugin which already use these\nplugins.\n\n3. General structure of a reporter\n\nIn this section I will explain some fundamentals of the design of Jenkins, i.e. the Java model and the associated\nuser interface elements. If you are already familiar on how to implement the corresponding extension points of a\nreporter plugin (see section Extensibility in Jenkins'\ndeveloper guide), then you can skip this section and head directly to Section 3.1.\n\nJenkins organizes projects using the static object model structure shown in Figure 1.\n\nFigure 1. Jenkins design - high level view of the Java model\n\nThe top level items in Jenkins user interface are jobs (at least the top level items\nwe are interested in). Jenkins contains several jobs of different types (Freestyle jobs, Maven Jobs, Pipelines, etc.).\n\nEach of these jobs contains an arbitrary number of builds (or more technically, runs). Each build is identified by its\nunique build number. Jenkins plugins can attach results to these builds, e.g. build artifacts, test results,\nanalysis reports, etc. In order to attach such a result, a plugin technically needs to implement and create an action\nthat stores these results.\n\nThese Java objects are visualized in several different views, which are described in more detail in the following\nsections. The top-level view that shows all available Jobs is shown in Figure 2.\n\nFigure 2. Jenkins view showing all available jobs\n\nPlugins can also contribute UI elements in these views, but this is out of scope of this guide.\n\nEach job has a detail view, where plugins can extend corresponding extension points and provide summary boxes and\ntrend charts. Typically, summary boxes for reporters are not required on the job level, so I describe only trend charts\nin more detail, see section Section 5.5.2.\n\nFigure 3. Jenkins view showing details about a job\n\nEach build has a detail view as well. Here plugins can provide summary boxes similar to the boxes for the job details\nview. Typically, plugins show here only a short summary and provide a link to detailed results, see Figure 4 for\nan example.\n\nFigure 4. Jenkins view showing details about a build\n\nThe last element in the view hierarchy actually is a dedicated view that shows the results of a specific plugin. E.g.,\nthere are views to show the test results, the analysis results, and so on. It is totally up to a given plugin what\nelements should be shown there. In the next few sections I will introduce some new UI components that can be used\nto show the corresponding results in a pleasant way.\n\n3.1. Extending Jenkins object model\n\nSince reporters typically are composed in a similar way, I extended Jenkins' original object model\n(see Figure 1) with some additional elements, so it will be much simpler to create or implement\na new reporter plugin. This new model is shown in Figure 5. The central element is a build action that\nwill store the results of a plugin reporter. This action will be attached to each build and will hold (and persist) the\nresults for a reporter. The detail data of each action will be automatically stored in an additional file, so the\nmemory footprint of Jenkins can be kept small if the details are never requested by users. Additionally, this\naction is also used to simplify the creation of project actions and trend charts, see Section 5.5.2.\n\nFigure 5. Jenkins reporter design - high level view of the model for reporter plugins\n\n4. Git Forensics plugin\n\nThe elements in this tutorial will be all used in the new\nForensics API Plugin (actually the plugin is not new, it is a dependency of the\nWarnings Next Generation Plugin). You can download the plugin content\nand see in more detail how these new components can be used in practice. Or you can change this plugin just to see\nhow these new components can be parametrized.\n\nIf you are using Git as source code management system then this plugin will mine\nthe repository in the style of\nCode as a Crime Scene\n(Adam Tornhill, November 2013) to determine statistics of the contained source code files:\n\ntotal number of commits\n\ntotal number of different authors\n\ncreation time\n\nlast modification time\n\nThe plugin provides a new step (or post build publisher) that starts the repository mining and stores\nthe collected information in a Jenkins action (see Figure 5). Afterwards you get a new\nbuild summary that shows the total number of scanned files (as trend and as build result). From\nhere you can navigate to the details view that shows the scanned files in a table that can be\nsimply sorted and filtered. You also will get some pie charts that show important aspects of the\ncommit history.\n\nPlease note that this functionality of the plugin still is a proof of concept: the performance of this step heavily\ndepends on the size and the number of commits of your Git repository. Currently it scans the whole repository in each\nbuild. In the near future I hope to find a volunteer who is interested in replacing this dumb algorithm with an incremental scanner.\n\n5. Introducing the new  UI components\n\nAs already mentioned in Section 3, a details view is plugin specific. What is shown and how these\nelements are presented is up to the individual plugin author. So in the next sections I provide some examples\nand new concepts that plugins can use as building blocks for their own content.\n\n5.1. Modern icons\n\nJenkins plugins typically do not use icons very frequently. Most plugins provide an icon for the actions and that’s it.\nIf you intend to use icons in other places, plugin authors are left on their own: the recommended Tango icon set is more\nthan 10 years old and too limited nowadays. There are several options available, but the most popular is the\nFont Awesome Icon Set. It provides more than 1500 free icons that follow the same\ndesign guidelines:\n\nFigure 6. Font Awesome icons in Jenkins plugins\n\nIn order to use Font Awesome icons in a plugin you simply need a dependency to the corresponding\nfont-awesome-api-plugin. Then you can use any of the solid icons\nby using the new tag svg-icon in your jelly view:\n\nindex.jelly\n\n[...]\n\n[...]\n\nIf you are generating views using Java code, then you also can use the class SvgTag to generate the\nHTML markup for such an icon.\n\n5.2. Grid layout\n\nJenkins currently includes in all views an old and patched version of Boostrap’s grid system (with 24 columns). This version\nis not compatible with Boostrap 4 or any of the JS libraries that depend on Bootstrap4. In order to use Bootstrap 4\nfeatures we need to replace the Jenkins provided layout.jelly file with a patched version, that does not load\nthe broken grid system. I’m planning to create a PR that fixes the grid in Jenkins core, but that will take some time.\nUntil then you will need to use the provided layout.jelly of the Boostrap4 plugin, see below.\n\nThe first thing to decide is, which elements should be shown on a plugin page and how much space each element\nshould occupy. Typically, all visible components are mapped on the available space using a simple grid.\nIn a Jenkins view we have a fixed header and footer and a navigation bar on the left\n(20 percent of the horizontal space). The rest of a screen can be used by\na details view. In order to simplify the distribution of elements in that remaining space we use\nBootstrap’s grid system.\n\nFigure 7. Jenkins layout with a details view that contains a grid system\n\nThat means, a view is split into 12 columns and and arbitrary number of rows. This grid system is simple to use\n(but complex enough to also support fancy screen layouts) - I won’t go into\ndetails here, please refer to the Bootstrap documentation\nfor details.\n\nFor the forensics detail view we use a simple grid of two rows and two columns. Since the number of columns always is 12\nwe need to create two \"fat\" columns that fill 6 of the standard columns.\nIn order to create such a view in our\nplugin we need to create a view given as a jelly file and a corresponding Java view model object. A view with this layout\nis shown in the following snippet:\n\nindex.jelly\n\n(1)\n\n(2)\n(3)\n\n(4)\n(5)\nContent of column 1 in row 1\n\n(6)\nContent of column 2 in row 1\n\n(7)\n(8)\nContent of row 2\n\n1\nUse a custom layout based on Bootstrap: since Jenkins core contains an old version of Bootstrap,\nwe need to replace the standard layout.jelly file.\n\n2\nImport Bootstrap 4: Importing of JS and CSS components is done using the adjunct concept,\nwhich is the preferred way of referencing static resources within Jenkins' Stapler Web framework.\n\n3\nThe whole view will be placed into a fluid container that fills up the whole screen (100% width).\n\n4\nA new row of the view is specified with class row. The additional class py-3 defines the padding to use for\nthis row, see Bootstrap Spacing for more details.\n\n5\nSince Bootstrap automatically splits up a row into 12 equal sized columns we define here\nthat the first column should occupy 6 of these 12 columns. You can also leave off the detailed numbers, then Bootstrap will\nautomatically distribute the content in the available space. Just be aware that this not what you want in most of the times.\n\n6\nThe second column uses the remaining space, i.e. 6 of the 12 columns.\n\n7\nThe second row uses the same layout as row 1.\n\n8\nThere is only one column for row 1, it will fill the whole available space.\n\nYou can also specify different column layouts for one row, based on the actual visible size of the screen.\nThis helps to improve the layout for larger screens. In the warnings plugin you will find\nan example: on small devices, there is one card visible that shows one pie chart in a carousel. If you are\nopening the same page on a larger device, then two of the pie charts are shown side by side and the carousel is hidden.\n\n5.3. Cards\n\nWhen presenting information of a plugin as a block, typically plain text elements are shown. This will normally result\nin some kind of boring web pages. In order to create a more appealing interface, it makes sense to present such information\nin a card, that has a border, a header, an icon, and so on. In order to create such a\nBootstrap card a small jelly tag has been provided by the new\nBootstrap plugin that simplifies this task for a plugin.\nSuch a card can be easily created in a jelly view in the following way:\n\nContent of the card\n\nIn Figure 8 examples of such cards are shown. The cards in the upper row contain pie charts that show the\ndistribution of the number of authors and commits in the whole repository. The card at the bottom shows the detail\ninformation in a DataTable. The visualization is not limited to charts or tables, you can\nshow any kind of HTML content in there. You can show any icon of your\nplugin in these cards, but it is recommended to use one of the existing Font Awesome icons\nto get a consistent look and feel in Jenkins' plugin ecosystem.\n\nFigure 8. Bootstraps cards in Jenkins plugins\n\nNote that the size of the cards is determined by the grid configuration, see Section 5.2.\n\n5.4. Tables\n\nA common UI element to show plugin details is a table control. Most plugins (and Jenkins core) typically use\nplain HTML tables. However, if the table should show a large number of rows then using a more sophisticated control\nlike DataTables makes more sense. Using this JS based table control provides additional\nfeatures at no cost:\n\nfilter results by text search\n\nprovide pagination of the result set\n\nsort data by multiple columns at once\n\nobtain table rows using Ajax calls\n\nshow and hide columns based on the screen resolution\n\nIn order to use DataTables in a view there are two options, you can either decorate existing\nstatic HTML tables (see Section 5.4.1) or populate the table content using Ajax (see Section 5.4.2).\n\n5.4.1. Tables with static HTML content\n\nThe easiest way of using DataTables is by creating a static HTML table that will be decorated by simply calling the\nconstructor of the datatable. This approach involves no special handling on the Java and Jelly side, so I think it is\nsufficient to follow the example in the DataTables\ndocumentation. Just make sure that after building the table in your Jelly file you need to decorate the table\nwith the following piece of code:\n\n[...]\n\n[...]\n\n[...]\n\n1\nreplace id with the ID of your HTML table element\n\nIn the Forensics plugin no such static table is used so far, but you can have a look at the\ntable that shows fixed warnings\nin the warnings plugin to see how such a table can be decorated.\n\n5.4.2. Tables with dynamic model based content\n\nWhile static HTML tables are easy to implement, they have several limitations. So it makes sense to follow a more\nsophisticated approach. Typically, tables in user interfaces are defined by using a corresponding table (and row) model.\nJava Swing successfully provides such a\ntable model concept since the early days of Java.\nI adapted these concepts for Jenkins and DataTables as well. In order to create a table in a Jenkins view a plugin\nneeds to provide a table model class, that provides the following information:\n\nthe ID of the table (since there might be several tables in the view)\n\nthe model of the columns (i.e., the number, type, and header labels of the columns)\n\nthe content of the table (i.e. the individual row objects)\n\nYou will find an example of such a table in the Forensics plugin: here a table lists\nthe files in your Git repository combined with the corresponding commit statistics (number of authors,\nnumber of commits, last modification, first commit). A screenshot of that table is shown in Figure 9.\n\nFigure 9. Dynamic Table in the Forensics plugin\n\nIn order to create such a table in Jenkins, you need to create a table model class that derives from TableModel.\nIn Figure 10 a diagram of the corresponding classes in the Forensics plugin is shown.\n\nFigure 10. Table model of the Forensics plugin\n\nTable column model\n\nThis first thing a table model class defines is a model of the available columns by creating corresponding\nTableColumn instances. For each column you need to specify a header label and the name of the bean property that\nshould be shown in the corresponding column (the row elements are actually Java beans: each column will\nshow one distinct property of such a bean, see next section). You can\nuse any of the supported column types by simply providing a\nString or Integer based column.\n\nTable rows content\n\nAdditionally, a table model class provides the content of the rows. This getRows() method\nwill be invoked asynchronously using an Ajax call. Typically, this method simply returns a list of Java Bean instances,\nthat provide the properties of each column (see previous section). These objects will be converted automatically\nto an array of JSON objects, the basic data structure required for the DataTables API.\nYou will find a fully working example table model\nimplementation in the Git repository of the forensics plugin in the class\nForensicsTableModel.\n\nIn order to use such a table in your plugin view you need to create the table in the associated\nJelly file using the new table tag:\n\nindex.jelly\n\n[...]\n\n(1)\n[...]\n\n1\nreplace id with the id of your table\n\nThe only parameter you need to provide for the table is the model — it is typically part of the corresponding\nJenkins view model class (this object is referenced with ${it} in the view).\nIn order to connect the corresponding Jenkins view model class with the table, the view model class needs to\nimplement the AsyncTableContentProvider interface. Or even simpler, let your view model class derive from\nDefaultAsyncTableContentProvider. This relationship is required, so that Jenkins can automatically create\nand bind a proxy for the Ajax calls that will automatically fill the table content after the HTML page has been created.\n\nIf we put all those pieces together, we are required to define a model similar to the model of the Forensics plugin,\nthat is shown in Figure 11.\n\nFigure 11. Jenkins reporter design - high level view of the model for reporter plugins\n\nAs already described in Figure 5 the plugin needs to attach a BuildAction to each build. The\nForensics plugin attaches a ForensicBuildAction to the build. This action stores a RepositoryStatistics instance,\nthat contains the repository results for a given build. This action delegates all Stapler requests to a new\nstaplerdoc:org.kohsuke.stapler.StaplerProxy[Stapler proxy instance] so we can keep the\naction clean of user interface code. This ForensicsViewModel class then acts as view model that provides the server\nside model for the corresponding Jelly view given by the file index.jelly.\n\nWhile this approach looks quite complex at a first view, you will see that the actual implementation part\nis quite small. Most of the boilerplate code is already provided by the base classes and you need to implement\nonly a few methods. Using this concept also provides some additional features, that are part of the DataTables plugin:\n\nOrdering of columns is persisted automatically in the browser local storage.\n\nPaging size is persisted automatically in the browser local storage.\n\nThe Ajax calls are actually invoked only if a table will become visible. So if you have\nseveral tables hidden in tabs then the content will be loaded on demand only, reducing the amount of data\nto be transferred.\n\nThere is an option available to provide an additional details row that can be expanded with a + symbol,\nsee warnings plugin table for details.\n\n5.5. Charts\n\nA plugin reporter typically also reports some kind of trend from build to build. Up to now Jenkins core provides only a\nquite limited concept of rendering such trends as trend charts. The\nJFreeChart framework offered by Jenkins core is a server\nside rendering engine that creates charts as static PNG images that will be included on the job and details pages.\nNowadays, several powerful JS based charting libraries are available, that do the same job\n(well actually an even better job) on the client side. That has the advantage that these charts can be customized\non each client without affecting the server performance. Moreover, you get a lot of additional\nfeatures (like zooming, animation, etc.) for free. Additionally, these charting libraries not only support the typical\nbuild trend charts but also a lot of additional charts types that can be used to improve the user experience of\na plugin.\nOne of those charting libraries is ECharts : this library has a powerful API\nand supports literally every chart type one can image of. You can get some impressions of the features on the\nexamples page of the library.\n\nIn order to use these charts one can embed charts that use this library by importing the corresponding JS files and by\ndefining the chart in the corresponding Jelly file. While that already works quite well it\nwill be still somewhat cumbersome to provide the corresponding model for these charts from Jenkins build results. So\nI added a powerful Java API that helps to create the model for these charts on the Java side. This API provides the\nfollowing features:\n\nCreate trend charts based on a collection of build results.\n\nSeparate the chart type from the aggregation in order to simplify unit testing of the chart model.\n\nToggle the type of the X-Axis between build number or build date (with automatic aggregation of results that\nhave been recorded at the same day).\n\nAutomatic conversion of the Java model to the required JSON model for the JS side.\n\nSupport for pie and line charts (more to come soon).\n\nThose charts can be used as trend chart in the project page (see Figure 3) or as information chart in the details\nview of a plugin (see Section 5).\n\n5.5.1. Pie charts\n\nA simple but still informative chart is a pie chart that illustrates numerical proportions of plugin data. In the Forensics\nplugin I am using this chart to show the numerical proportions of the number of authors or commits for the\nsource code files in the Git repository (see Figure 8). In the warnings plugin I use this chart to show the\nnumerical proportions of the new, outstanding, or fixed warnings, see Figure 12.\n\nFigure 12. Pie chart in the Warnings plugin\n\nIn order to include such a chart in your details view, you can use the provided pie-chart tag.\nIn the following snippet you see this tag in action (embedded in a Bootstrap card, see Section 5.3):\n\nindex.jelly\n\n[...]\n<c:pie-chart id=\"authors\" model=\"${it.authorsModel}\" height=\"256\" />\n\n[...]\n\nYou need to provide a unique ID for this chart and the corresponding model value. The model must be the JSON\nrepresentation of a corresponding PieChartModel instance. Such a model can be created with a couple of lines:\n\nViewModel.java\n\n[...]\n    PieChartModel model = new PieChartModel(\"Title\");\n\n    model.add(new PieData(\"Segment 1 name\", 10), Palette.RED);\n    model.add(new PieData(\"Segment 2 name\", 15), Palette.GREEN);\n    model.add(new PieData(\"Segment 3 name\", 20), Palette.YELLOW);\n\n    String json = new JacksonFacade().toJson(model);\n    [...]\n\n5.5.2. Trend charts on the job level view\n\nIn order to show a trend that renders a line chart on the job page (see Figure 3) you need to provide a so called\nfloating box (stored in the file floatingBox.jelly of your job action (see Section 3)).\nThe content of this file is quite simple and contains just a trend-chart tag:\n\nfloatingBox.jelly\n\n<c:trend-chart it=\"${from}\" title=\"${%SCM Files Count Trend}\" enableLinks=\"true\"/>\n\nOn the Java side the model for the chart needs to be provided in the corresponding sub class of JobAction (which is\nthe owner of the floating box). Since the computation of trend charts is quite expensive on the server side as well\n(several builds need to be read from disk and the interesting data points need to be computed) this process has been\nput into a separate background job. Once the computation is done the result is shown via an Ajax call. In order to\nhide these details for plugin authors you should simply derive your JobAction class from the corresponding\nAsyncTrendJobAction class, that already contains the boilerplate code. So your static plugin object model will actually\nbecome a little bit more complex:\n\nFigure 13. Jenkins chart model design\n\nBasically, you need to implement the method LinesChartModel createChartModel() to create the line\nchart. This method is quite simple to implement, since most of the hard work is provided by the library: you will\ninvoke with an iterator of your build actions, starting with the latest build. The iterator advances from build to build\nuntil no more results are available (or the maximum number of builds to consider has been reached). The most important\nthing to implement in your plugin is the way how data points are computed for a given BuildAction. Here is an example of\nsuch a SeriesBuilder implementation in the Forensics Plugin:\n\nFilesCountSeriesBuilder.java\n\npackage io.jenkins.plugins.forensics.miner;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport edu.hm.hafner.echarts.SeriesBuilder;\n\n/**\n * Builds one x-axis point for the series of a line chart showing the number of files in the repository.\n *\n * @author Ullrich Hafner\n */\npublic class FilesCountSeriesBuilder extends SeriesBuilder {\n    static final String TOTALS_KEY = \"total\";\n\n    @Override\n    protected Map computeSeries(final ForensicsBuildAction current) {\n        Map series = new HashMap<>();\n        series.put(TOTALS_KEY, current.getNumberOfFiles());\n        return series;\n    }\n}\n\nYou are not limited to a single line chart. You can show several lines in a single chart, you can show stacked values,\nor even the delta between some values. You can also have a look at the\ncharts of the warnings plugin\nto see some of these features in detail.\n\nFigure 14. Trend chart with several lines in the Warnings plugin\n\nFigure 15. Trend chart with stacked lines in the Warnings plugin","title":"Hands On: Beautify the user interface of Jenkins reporter plugins","tags":["ui","ux","plugins","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/author/uhafner","twitter":null}]}},{"node":{"date":"2020-01-08T00:00:00.000Z","id":"9f6eb48f-3ae6-5fa4-8bc2-bee1eeeed2d0","slug":"/blog/2020/01/08/atlassians-new-bitbucket-server-integration-for-jenkins/","strippedHtml":"We know that for many of our customers Jenkins is incredibly important and its integration with Bitbucket Server is a key part of their development workflow.\nUnfortunately, we also know that integrating Bitbucket Server with Jenkins wasn’t always easy – it may have required multiple plugins and considerable time.\nThat’s why earlier this year we set out to change this.\nWe began building our own integration, and we’re proud to announce that v1.0 is out.\n\nThe new Bitbucket Server integration for Jenkins plugin, which is built and supported by Atlassian, is the easiest way to link Jenkins with Bitbucket Server.\nIt streamlines the entire set-up process, from creating a webhook to trigger builds in Jenkins, to posting build statuses back to Bitbucket Server.\nIt also supports smart mirroring and lets Jenkins clone from mirrors to free up valuable resources on your primary server.\n\nOur plugin is available to install through Jenkins now.\nWatch this video to find out how, or read the BitBucket Server solution page to learn more about it.\n\nOnce you’ve tried it out we’d love to hear any feedback you have.\nTo share it with us, visit https://issues.jenkins.io and create an issue using the component atlassian-bitbucket-server-integration-plugin.","title":"Atlassian's new Bitbucket Server integration for Jenkins","tags":["bitbucket","pipeline","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#888888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/19e71/dkjellin.jpg","srcSet":"/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/77b35/dkjellin.jpg 32w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/d4a57/dkjellin.jpg 64w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/19e71/dkjellin.jpg 128w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/68974/dkjellin.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/ef6ff/dkjellin.webp 32w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/8257c/dkjellin.webp 64w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/6766a/dkjellin.webp 128w,\n/gatsby-jenkins-io/static/6ccab92416b4e5b2a4498ee23e6d735c/22bfc/dkjellin.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"dkjellin","html":"<div class=\"paragraph\">\n<p>Daniel has been with <a href=\"https://www.atlassian.com\">Atlassian</a> over ten years working on a variety of different products. Lately he has led the work to write a new and improved integration between <a href=\"https://www.atlassian.com/software/bitbucket/enterprise/data-center\">Bitbucket Server</a> and Jenkins.</p>\n</div>","id":"dkjellin","irc":null,"linkedin":null,"name":"Daniel Kjellin","slug":"/blog/author/dkjellin","twitter":null}]}},{"node":{"date":"2019-12-10T00:00:00.000Z","id":"ed404ce2-c53c-5f43-ae06-381e9a803bce","slug":"/blog/2019/12/10/introducing-aws-secrets-manager-credentials-provider-plugin/","strippedHtml":"API keys and secrets are difficult to handle safely, and probably something you avoid thinking about. In this post I’ll show how the new AWS Secrets Manager Credentials Provider plugin allows you to marshal your secrets into one place, and use them securely from Jenkins.\n\nWhen CI/CD pipelines moved to the public cloud, credential management did not evolve with them. If you’re in this situation, you may have seen a number of tactical workarounds to keep Jenkins builds talking to the services they depend on. The workarounds range from bad (hardcoding plaintext secrets into Git) to merely painful (wrangling Hiera EYAML), but their common feature is that they tend to make copies of secrets beyond the reach of automation. This increases their attack surface, makes routine key rotation impractical, and makes remediation difficult after a breach.\n\nThe good news is that there is a better way!\n\nAWS Secrets Manager is a comprehensive solution for secure secret storage. You define a secret just once for your whole AWS account, then you give your consumers permission to use the secrets. Secrets Manager lets you manage a secret entry (name and metadata) separately from its value, and it integrates with other AWS services that you already use:\n\nSecret entry management: Manual (Web console, AWS CLI) or with an infrastructure management tool ( Terraform, CloudFormation etc.)\n\nSecret value management: Manual (Web console, AWS CLI) or automatic (secret rotation Lambda function).\n\nAccess control: AWS IAM policies (for both applications and human operators).\n\nSecret encryption: Amazon KMS automatically encrypts the secret value. Use either the account’s default KMS key, or a customer-managed KMS key.\n\nAuditing: AWS CloudTrail and CloudWatch Events.\n\nA couple of teams in my company started to use Secrets Manager from Jenkins jobs by calling the AWS CLI, but this remained a niche approach as it was quite unwieldy. There was clearly an appetite to integrate key developer apps with a centralised secrets store, but production-ready integrations were needed for wider adoption. So this year I created the AWS Secrets Manager Credentials Provider plugin for Jenkins, with help from friends in the Jenkins community, to do exactly that.\n\nThis is how you set it up…​\n\nInstall the plugin from the Jenkins update center.\n\nGive Jenkins read-only access to Secrets Manager with an IAM policy.\n\n(Optional) Configure the plugin, either through the Global Configuration screen or Jenkins Configuration As Code.\n\nThis is how you use it…​\n\nCreate your build secrets in AWS Secrets Manager. (You can start by uploading secrets via the AWS CLI. More sophisticated methods of secret creation are also available.)\n\nView the credentials in the Jenkins UI, to check that Jenkins can see them.\n\nBind the credentials by ID in your Jenkins job.\n\nThe provider supports the following standard Jenkins credential types:\n\nSecret Text\n\nUsername With Password\n\nSSH User Private Key\n\nPKCS#12 Certificate\n\nAnd it has powerful advantages over quick-fix tactical solutions:\n\nYour Jenkins jobs consume the credentials with no knowledge of Secrets Manager, so they stay vendor-independent.\n\nThe provider caches relevant Secrets Manager API calls, for a quicker and more reliable experience.\n\nThe provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Git and SSH Agent plugins.\n\nThe provider records credential usage in the central Jenkins credentials tracking log.\n\nJenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Secrets Manager while consuming other credentials from your existing providers.\n\nAfter the plugin’s first public release, developers at other companies adopted it too. It has had contributions so far from people at Elsevier, GoDaddy, and Northeastern University, as well as the fantastic Jenkins core team. We even got fan mail for our work!\n\nIn enterprise security, \"The important things are always simple. The simple things are always hard. The easy way is always mined.\" ( @thegrugq) It’s easy to buy a shiny ‘next generation' security appliance and drop it into your network. But it’s hard to embed the security fundamentals (like secrets management, OS patching, secure development) across your organisation. This Jenkins plugin is part of the effort [ 1 ] to take one of the persistent hard problems in security, and make it easier for everyone.\n\n1. If you’re on Azure or you run most of your workload on Kubernetes, check out the Azure Credentials Plugin and the Kubernetes Credentials Provider Plugin.","title":"Introducing the AWS Secrets Manager Credentials Provider for Jenkins","tags":["pipeline","plugins","aws","credentials","security"],"authors":[{"avatar":null,"blog":null,"github":"chriskilding","html":"","id":"chriskilding","irc":null,"linkedin":"chriskilding","name":"Chris Kilding","slug":"/blog/author/chriskilding","twitter":null}]}},{"node":{"date":"2019-12-02T00:00:00.000Z","id":"85ad92d1-eb99-59b8-9bbf-3b4f6309d6df","slug":"/blog/2019/12/02/matrix-building-with-scripted-pipeline/","strippedHtml":"Table of Contents\n\nMatrix building with scripted pipeline\nScreenshot of matrix pipeline\nAdding static choices\nAdding dynamic choices\nFull pipeline example with dynamic choices\nBackground: How does it work?\nExposing a shared library pipeline step\nSummary\n\nWith the recent announcement about matrix building you can perform\nMatrix builds\nwith declarative pipeline.  However, if you must use scripted pipeline, then\nI’m going to cover how to matrix build platforms and tools using scripted\npipeline.  The examples in this post are modeled after the declarative pipeline\nmatrix examples.\n\nMatrix building with scripted pipeline\n\nThe following Jenkins scripted pipeline will build combinations across two\nmatrix axes.  However, adding more axes to the matrix is just as easy as adding\nanother entry to the Map matrix_axes.\n\nJenkinsfile\n\n// you can add more axes and this will still work\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\n@NonCPS\nList getMatrixAxes(Map matrix_axes) {\n    List axes = []\n    matrix_axes.each { axis, values ->\n        List axisList = []\n        values.each { value ->\n            axisList << [(axis): value]\n        }\n        axes !(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\n// parallel task map\nMap tasks = [failFast: false]\n\nfor(int i = 0; i\"${k}=${v}\"\n    }\n    // let's say you have diverse agents among Windows, Mac and Linux all of\n    // which have proper labels for their platform and what browsers are\n    // available on those agents.\n    String nodeLabel = \"os:${axis['PLATFORM']} && browser:${axis['BROWSER']}\"\n    tasks[axisEnv.join(', ')] = { ->\n        node(nodeLabel) {\n            withEnv(axisEnv) {\n                stage(\"Build\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n                stage(\"Test\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n            }\n        }\n    }\n}\n\nstage(\"Matrix builds\") {\n    parallel(tasks)\n}\n\nMatrix axes contain the following combinations:\n\n[PLATFORM=linux, BROWSER=firefox]\n[PLATFORM=windows, BROWSER=firefox]\n[PLATFORM=mac, BROWSER=firefox]\n[PLATFORM=linux, BROWSER=chrome]\n[PLATFORM=windows, BROWSER=chrome]\n[PLATFORM=mac, BROWSER=chrome]\n[PLATFORM=windows, BROWSER=safari]\n[PLATFORM=mac, BROWSER=safari]\n[PLATFORM=windows, BROWSER=edge]\n\nIt is worth noting that Jenkins agent labels can contain a colon ( :).  So\nos:linux and browser:firefox are both valid agent labels.  The node\nexpression os:linux && browser:firefox will search for Jenkins agents which\nhave both labels.\n\nScreenshot of matrix pipeline\n\nThe following is a screenshot of the pipeline code above running in a sandbox\nJenkins environment.\n\nAdding static choices\n\nIt is useful for users to be able to customize building matrices when a build\nis triggered.  Adding static choices requires only a few changes to the above\nscript.  Static choices as in we hard code the question and matrix filters.\n\nJenkinsfile\n\n(response['PLATFORM'] == 'all' || response['PLATFORM'] == axis['PLATFORM']) &&\n    (response['BROWSER'] == 'all' || response['BROWSER'] == axis['BROWSER']) &&\n    !(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\nThe pipeline code then renders the following choice dialog.\n\nWhen a user chooses the customized options, the pipeline reacts to the\nrequested options.\n\nAdding dynamic choices\n\nDynamic choices means the choice dialog for users to customize the build is\ngenerated from the Map matrix_axes rather than being something a pipeline\ndeveloper hard codes.\n\nFor user experience (UX), you’ll want your choices to automatically reflect the\nmatrix axis options you have available.  For example, let’s say you want to add\na new dimension for Java to the matrix.\n\n// you can add more axes and this will still work\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    JAVA: ['openjdk8', 'openjdk10', 'openjdk11'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\nTo support dynamic choices, your choice and matrix axis filter needs to be\nupdated to the following.\n\nchoice(\n                choices: ['all'] + options.sort(),\n                description: \"Choose a single ${key.toLowerCase()} or all to run tests.\",\n                name: key)\n        })\n}\n\n// filter the matrix axes since\n// Safari is not available on Linux and\n// Edge is only available on Windows\nList axes = getMatrixAxes(matrix_axes).findAll { axis ->\n    response.every { key, choice ->\n        choice == 'all' || choice == axis[key]\n    } &&\n    !(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\nIt will dynamically generate choices based on available matrix axes and will\nautomatically filter if users customize it.  Here’s an example dialog and\nrendered choice when the pipeline executes.\n\nFull pipeline example with dynamic choices\n\nThe following script is the full pipeline example which contains dynamic\nchoices.\n\n// you can add more axes and this will still work\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n    JAVA: ['openjdk8', 'openjdk10', 'openjdk11'],\n    BROWSER: ['firefox', 'chrome', 'safari', 'edge']\n]\n\n@NonCPS\nList getMatrixAxes(Map matrix_axes) {\n    List axes = []\n    matrix_axes.each { axis, values ->\n        List axisList = []\n        values.each { value ->\n            axisList << [(axis): value]\n        }\n        axes \nchoice(\n                choices: ['all'] + options.sort(),\n                description: \"Choose a single ${key.toLowerCase()} or all to run tests.\",\n                name: key)\n        })\n}\n\n// filter the matrix axes since\n// Safari is not available on Linux and\n// Edge is only available on Windows\nList axes = getMatrixAxes(matrix_axes).findAll { axis ->\n    response.every { key, choice ->\n        choice == 'all' || choice == axis[key]\n    } &&\n    !(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\n// parallel task map\nMap tasks = [failFast: false]\n\nfor(int i = 0; i\"${k}=${v}\"\n    }\n    // let's say you have diverse agents among Windows, Mac and Linux all of\n    // which have proper labels for their platform and what browsers are\n    // available on those agents.\n    String nodeLabel = \"os:${axis['PLATFORM']} && browser:${axis['BROWSER']}\"\n    tasks[axisEnv.join(', ')] = { ->\n        node(nodeLabel) {\n            withEnv(axisEnv) {\n                stage(\"Build\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n                stage(\"Test\") {\n                    echo nodeLabel\n                    sh 'echo Do Build for ${PLATFORM} - ${BROWSER}'\n                }\n            }\n        }\n    }\n}\n\nstage(\"Matrix builds\") {\n    parallel(tasks)\n}\n\nBackground: How does it work?\n\nThe trick is in axes.combinations()*.sum().  Groovy combinations are a quick\nand easy way to perform a\ncartesian product.\n\nHere’s a simpler example of how cartesian product works.  Take two simple lists\nand create combinations.\n\nList a = ['a', 'b', 'c']\nList b = [1, 2, 3]\n\n[a, b].combinations()\n\nThe result of [a, b].combinations() is the following.\n\n[\n    ['a', 1],\n    ['b', 1],\n    ['c', 1],\n    ['a', 2],\n    ['b', 2],\n    ['c', 2],\n    ['a', 3],\n    ['b', 3],\n    ['c', 3]\n]\n\nInstead of a, b, c and 1, 2, 3 let’s do the same example again but instead using matrix maps.\n\nList java = [[java: 8], [java: 10]]\nList os = [[os: 'linux'], [os: 'freebsd']]\n\n[java, os].combinations()\n\nThe result of [java, os].combinations() is the following.\n\n[\n    [ [java:8],  [os:linux]   ],\n    [ [java:10], [os:linux]   ],\n    [ [java:8],  [os:freebsd] ],\n    [ [java:10], [os:freebsd] ]\n]\n\nIn order for us to easily use this as a single map we must add the maps\ntogether to create a single map.  For example, adding\n[java: 8] + [os: 'linux'] will render a single hashmap\n[java: 8, os: 'linux'].  This means we need our list of lists of maps to\nbecome a simple list of maps so that we can use them effectively in pipelines.\n\nTo accomplish this we make use of the\nGroovy spread\noperator ( *. in axes.combinations()*.sum()).\n\nLet’s see the same java / os example again but with the spread operator being\nused.\n\nList java = [[java: 8], [java: 10]]\nList os = [[os: 'linux'], [os: 'freebsd']]\n\n[java, os].combinations()*.sum()\n\nThe result is the following.\n\n[\n    [ java: 8,  os: 'linux'],\n    [ java: 10, os: 'linux'],\n    [ java: 8,  os: 'freebsd'],\n    [ java: 10, os: 'freebsd']\n]\n\nWith the spread operator the end result of a list of maps which we can\neffectively use as matrix axes.  It also allows us to do neat matrix filtering\nwith the findAll {} Groovy List method.\n\nExposing a shared library pipeline step\n\nThe best user experience is to expose the above code as a shared library\npipeline step.  As an example, I have added\nvars/getMatrixAxes.groovy\nto Jervis.  This provides a flexible shared library step which you can copy\ninto your own shared pipeline libraries.\n\nThe step becomes easy to use in the following way with a simple one dimension matrix.\n\nJenkinsfile\n\nMap matrix_axes = [\n    PLATFORM: ['linux', 'windows', 'mac'],\n]\n\nList axes = getMatrixAxes(matrix_axes)\n\n// alternately with a user prompt\n//List axes = getMatrixAxes(matrix_axes, user_prompt: true)\n\nHere’s a more complex example using a two dimensional matrix with filtering.\n\nJenkinsfile\n\n!(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\nAnd again with a three dimensional matrix with filtering and prompting for user\ninput.\n\nJenkinsfile\n\n!(axis['BROWSER'] == 'safari' && axis['PLATFORM'] == 'linux') &&\n    !(axis['BROWSER'] == 'edge' && axis['PLATFORM'] != 'windows')\n}\n\nThe script approval is not necessary for\nShared Libraries.\n\nIf you don’t want to provide a shared step.  In order to expose matrix building\nto end-users, you must allow the following method approval in the script\napproval configuration.\n\nScript approval\n\nstaticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods combinations java.util.Collection\n\nSummary\n\nWe covered how to perform matrix builds using scripted pipeline as well as how\nto prompt users for customizing the matrix build.  Additionally, an example was\nprovided where we exposed getting buildable matrix axes to users as an easy to\nuse Shared Library\nstep via vars/getMatrixAxes.groovy.  Using a shared library step is\ndefinitely the recommended way for admins to support users rather than trying\nto whitelist groovy methods.\n\nJervis shared pipeline library has supported matrix building since 2017 in Jenkins scripted pipelines.\n( see here and\nhere\nfor an example).","title":"Matrix building in scripted pipeline","tags":["matrix","pipeline","plugins","scripted"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8b8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/bf8e1/sgleske.png","srcSet":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/914ee/sgleske.png 32w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/1c9ce/sgleske.png 64w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/bf8e1/sgleske.png 128w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/acb7c/sgleske.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/ef6ff/sgleske.webp 32w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/8257c/sgleske.webp 64w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/6766a/sgleske.webp 128w,\n/gatsby-jenkins-io/static/383551e873ffc7c72da8547e3d05f878/22bfc/sgleske.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"samrocketman","html":"<div class=\"paragraph\">\n<p>A Senior Software Engineer at <a href=\"https://integralads.com/\">Integral Ad\nScience</a>, he develops a Jenkins solution to scale CI/CD onboarding for the\nentire company.  To aide in this cause he has been developing\n<a href=\"https://github.com/samrocketman/jervis/wiki\">Jervis: Jenkins as a service</a>\nwhich strongly focuses on onboarding people and not just technology or projects\ninto Jenkins.  When not at work he enjoys contributing to open source software,\nlike the Jenkins project, solely through volunteer time.</p>\n</div>","id":"sgleske","irc":null,"linkedin":null,"name":"Sam Gleske","slug":"/blog/author/sgleske","twitter":"sag47"}]}},{"node":{"date":"2019-11-22T00:00:00.000Z","id":"e5f5bc1a-7d2f-5807-8b41-7478e232a4f1","slug":"/blog/2019/11/22/welcome-to-the-matrix/","strippedHtml":"I often find myself needing to run the same actions on a bunch of different configurations.\nUp to now, that meant I had to make multiple copies of the same stages in my pipelines.\nWhen I needed to make changes, I had to make the same changes in multiple places throughout my pipeline.\nMaintaining even a small number of configuration was difficult for larger pipelines.\n\nDeclarative Pipeline 1.5.0-beta1 (now available from the\nJenkins Experimental Update site) adds a new matrix section that lets me specify a list stages once and then run that same list in parallel on multiple configurations.\nLet’s take a look!\n\nSingle configuration pipeline\n\nI’ll start with a simple pipeline with build and test stages.\nI’m using echo steps as placeholders for my build and test actions.\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            agent any\n            stages {\n                stage('Build') {\n                    steps {\n                        echo 'Do Build'\n                    }\n                }\n                stage('Test') {\n                    steps {\n                        echo 'Do Test'\n                    }\n                }\n            }\n        }\n    }\n}\n\nPipeline for multiple platforms and browsers\n\nI’d like to run my build and tests on a combination of platforms and browsers.\nThe new matrix directive lets me specify a set of axes.\nEach axis has a name and a list of one or more values.\nWhen the pipeline is run, Jenkins will take those and run my stages on all possible combinations of values from each axis.\nAll cells in a matrix run in parallel (limited only by the number of available agents).\nStages within each cell are run sequentially.\n\nMy matrix has two axes: PLATFORM and BROWSER.\nI have three values for PLATFORM and four values for BROWSER resulting in my stages being run with twelve different combinations.\nI’ve changed my echo steps to use the axis values for each cell.\n\nJenkinsfile\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent any\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nLog output (truncated)\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'edge') (hide)\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'edge')\n...\nDo Build for linux - safari\nDo Build for linux - firefox\nDo Build for windows - firefox\nDo Test for linux - firefox\nDo Build for mac - firefox\nDo Build for linux - chrome\nDo Test for windows - firefox\n...\n\nExcluding invalid combinations\n\nNow that I have my basic matrix created, I’ve noticed that I have some invalid combinations.\nMicrosoft Edge only runs on Windows and there isn’t a Linux version of Safari.\n\nI can remove invalid cells from my matrix using exclude directives. Each exclude has one or more axis directives with name and values.\nThe axis directives inside an exclude generate a set of combinations (similar to generating the matrix cells).\nThe matrix cells that match all the values from an exclude combination are removed from the matrix.\nIf I have more than one exclude directive, each are evaluated separately to remove cells.\n\nWhen dealing with a long lists of values to exclude, I can use notValues instead of values to specify axis values we don’t want excluded.\nYes, that’s a double negative, so it can get a little confusing.\nI try to use it only when I really need it.\n\nIn my sample pipeline below, I specifically exclude the linux, safari combination and I also exclude any platform that is not windows with the edge browser.\n\nThis pipeline uses two axes but there is no limit on the number of axis directives.\n\nAlso, in this pipeline each exclude specifies values for both axes, but that is not required.\nIf we wanted to run only \"linux\" cells, we could use the following exclude :\n\nexclude {\n    axis {\n        name 'PLATFORM'\n        notValues 'linux'\n    }\n}\n\npipeline {\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent any\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                excludes {\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            values 'linux'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'safari'\n                        }\n                    }\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            notValues 'windows'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'edge'\n                        }\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nLog output (truncated)\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n...\nDo Build for linux - firefox\n...\n\nControlling cell behavior at runtime\n\nInside the matrix directive I can also add \"per-cell\" directives.\nThese are the same directives that I would add to a stage and they let me control the behavior of each cell in the matrix.\nThese directives can use the axis values from their cell as part of their inputs, allowing me to customize the behavior of each cell to match its axis values.\n\nOn my Jenkins server I have configured agents with labels that match the OS for each agent (\"linux-agent\", \"windows-agent\", and \"mac-agent\").\nTo run each cell in my matrix on the appropriate operating system, I configure the label for that cell using Groovy string templating.\n\nmatrix {\n    axes { ... }\n    excludes { ... }\n    agent {\n        label \"${PLATFORM}-agent\"\n    }\n    stages { ... }\n    // ...\n}\n\nOccasionally I run my pipeline manually from the Jenkins Web UI.\nWhen I do that, I’d like to be able to select just one platform to run.\nThe axis and exclude directives define the static set of cells that make up the matrix.\nThat set of combinations is generated before the start of the run, before any parameters are processed.\nWhat this means is that I can’t add or remove cells from a matrix after the job has started.\n\nThe \"per-cell\" directives, on the other hand, are evaluated at runtime.\nI can use the \"per-cell\" when directive inside matrix to control which cells in the matrix are executed.\nI’ll add a choice parameter with the list of platforms, and add conditions to the when directive, which will either let all platforms execute, or only execute cells that match my selected platform.\n\npipeline {\n    parameters {\n        choice(name: 'PLATFORM_FILTER', choices: ['all', 'linux', 'windows', 'mac'], description: 'Run on specific platform')\n    }\n    agent none\n    stages {\n        stage('BuildAndTest') {\n            matrix {\n                agent {\n                    label \"${PLATFORM}-agent\"\n                }\n                when { anyOf {\n                    expression { params.PLATFORM_FILTER == 'all' }\n                    expression { params.PLATFORM_FILTER == env.PLATFORM }\n                } }\n                axes {\n                    axis {\n                        name 'PLATFORM'\n                        values 'linux', 'windows', 'mac'\n                    }\n                    axis {\n                        name 'BROWSER'\n                        values 'firefox', 'chrome', 'safari', 'edge'\n                    }\n                }\n                excludes {\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            values 'linux'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'safari'\n                        }\n                    }\n                    exclude {\n                        axis {\n                            name 'PLATFORM'\n                            notValues 'windows'\n                        }\n                        axis {\n                            name 'BROWSER'\n                            values 'edge'\n                        }\n                    }\n                }\n                stages {\n                    stage('Build') {\n                        steps {\n                            echo \"Do Build for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                    stage('Test') {\n                        steps {\n                            echo \"Do Test for ${PLATFORM} - ${BROWSER}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nIf I run this Pipeline from the Jenkins UI and set the PLATFORM_FILTER parameter to mac, I’ll get something like the output below:\n\nLog output (truncated - PLATFORM_FILTER = 'mac' )\n\n...\n[Pipeline] stage\n[Pipeline] { (BuildAndTest)\n[Pipeline] parallel\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'firefox')\n[Pipeline] { (Branch: Matrix - OS = 'linux', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'chrome')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'mac', BROWSER = 'safari')\n[Pipeline] { (Branch: Matrix - OS = 'windows', BROWSER = 'edge')\n...\nStage \"Matrix - OS = 'linux', BROWSER = 'chrome'\" skipped due to when conditional\nStage \"Matrix - OS = 'linux', BROWSER = 'firefox'\" skipped due to when conditional\n...\nDo Build for mac - firefox\nDo Build for mac - chrome\nDo Build for mac - safari\n...\nStage \"Matrix - OS = 'windows', BROWSER = 'chrome'\" skipped due to when conditional\nStage \"Matrix - OS = 'windows', BROWSER = 'edge'\" skipped due to when conditional\n...\nDo Test for mac - safari\nDo Test for mac - firefox\nDo Test for mac - chrome\n\nCome join me at DevOps World | Jenkins World 2019 for \" Declarative Pipeline 2019: Tips, Tricks and What’s Next \".\nI’ll go over what’s been added to Pipeline in the last year (including matrix) and discuss ideas about where pipeline should go next.\n\nConclusion\n\nIn this blog post, we’ve looked at how to use the matrix directive to make concise but powerful declarative pipelines.\nAn equivalent pipeline created without matrix would easily be several times larger, and much harder to understand and maintain.\n\nMatrix is now available from the experimental update center.\nIt will be released to the main update center as soon as we’re done putting the finishing touches on the documentation and online help.\n\nLinks\n\nJenkins Experimental Update Center\n\nUsing the Jenkins Experimental Update Center","title":"Welcome to the Matrix","tags":["pipeline","plugins","declarative","matrix"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2019-08-26T00:00:00.000Z","id":"ec0ca077-b2d0-53a4-8b1d-2ecb784b35fd","slug":"/blog/2019/08/26/role-strategy-performance/","strippedHtml":"The task for my Google Summer of Code program was to improve the performance\nof the Role Strategy Plugin. The performance issues for Role Strategy Plugin\nhad been reported multiple times on Jenkins JIRA. With a large number of roles\nand with complex regular expressions, a large slow-down was visible on the Web UI.\nEven before GSoC started, there were a number of patches which tried to improve\nperformance of the plugin (by Deepansh Nagaria\nand others).\n\nAt the time, there was no way to reliably measure improvements in performance.\nTherefore, we started by creating a\nframework\nfor running micro-benchmarks on Jenkins Plugins. Benchmarks using the framework\nwere added to the Role Strategy Plugin find performance\ncritical parts of the plugins and to measure the improvements of a change.\nThis blog post summarizes the changes that were made and performance improvements\nmeasured.\n\nCaching matching roles\n\nA couple of major changes were made to the Role Strategy Plugin to improve its\nperformance. First, we started collection of roles that matched a given\nproject name. The Role Strategy plugin before version 2.12 used to run over\nregular expressions for every role that it had for every permission checking\nrequest it got. Storing this produced set of roles in the memory provides us\nlarge improvements in performance and avoids repeated matching of project names\nwith regular expressions. For keeping the plugin working securely, we invalidate\nthe cache whenever any update is made to the roles.\n\nAfter this change, we were able to observe performance improvements of up to\n3300%. These improvements were visualized using\nJMH Visualizer.\n\nMore information is available at pull request on GitHub:\nhttps://github.com/jenkinsci/role-strategy-plugin/pull/81\n\nCalculating Implying Permisions when plugin is loaded\n\nJenkins' permission model allows one permissions to imply other permissions.\nWhen a permission check is made, we need to check if the user has any of\npermissions that would imply this permisison. For every permission checking\nrequest that that the Role Strategy, it used to calculate all the implying\npermissions. To avoid this, we now calculate and store implying permissions\nfor every permission in the Jenkins system when the plugin gets loaded.\n\nAfter both of these changes, we were able to experience improvements of up to\n10000%. The benchmark results show it better:\n\nMore information about this change can be found at the GitHub pull request:\nhttps://github.com/jenkinsci/role-strategy-plugin/pull/83\n\nBoth of these changes were integrated into the Role Strategy Plugin and the\nimprovements can be experienced starting with version\n2.13.\n\nBonus: Configuration-as-Code export now works for Role Strategy\n\nWith Configuration-as-Code plugin version\n1.24\nand above, export of your configuration as YAML now works!\n\nAs an alternative to\nRole Strategy Plugin, I also created the brand new Folder Authorization Plugin.\nYou can check out the blog post for\nmore information about the plugin.\n\nLinks and Feedback\n\nI would love to hear your comments and suggestions. Please feel free to reach\nout to me through either the\nRole Strategy Plugin Gitter chat or through\nJenkins Developer Mailing list.\n\nPresentation slides for final evaluation of GSoC\n\nThe Folder Authorization Plugin\n\nDemo for the final evaluations","title":"Performance Improvements to Role Strategy Plugin","tags":["plugins","security","performance","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg","srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f4523/abhyudayasharma.jpg 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1e7bb/abhyudayasharma.jpg 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/b48b6/abhyudayasharma.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1fd06/abhyudayasharma.webp 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/9edd6/abhyudayasharma.webp 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f5f75/abhyudayasharma.webp 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/05d06/abhyudayasharma.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":null,"github":"AbhyudayaSharma","html":"<div class=\"paragraph\">\n<p>Abhyudaya is a Computer Science student at Shiv Nadar University, India.\nHe is participating in Google Summer of Code 2019 to improve the performance\nof the <a href=\"https://github.com/jenkinsci/role-strategy-plugin\">Role Strategy Plugin</a>.</p>\n</div>","id":"abhyudayasharma","irc":null,"linkedin":null,"name":"Abhyudaya Sharma","slug":"/blog/author/abhyudayasharma","twitter":null}]}},{"node":{"date":"2019-08-23T00:00:00.000Z","id":"67f9da03-2668-58bd-93f3-3bf494bb5192","slug":"/blog/2019/08/23/introduce-react-plugin-template/","strippedHtml":"The template’s main repo is at\nReact Plugin Template\n\nThis template is part of the project Working Hours UI Improvement during\nGoogle Summer of Code 2019, which improved the UI of Working Hours Plugin using this pattern to develop Jenkins plugins with React. The Working Hours Plugin repository can be found at Working Hours Plugin.\n\nOverview\n\nDeveloping plugin for Jenkins has always been easy to do with its Jelly based UI render system, but Jelly seems to be pretty heavy when we want to use more modernized frameworks like React, or if we need to make the plugin UI more customized. This is what this template is built for.\n\nAnd with React integrated, development of Jenkins plugin is more modernized, developer can now use tons of React libraries, the way to use libraries is now tinier and safer with webpack, in short, coding with Jenkins plugin can be much easier.\n\nFeatures\n\nFeature\nSummary\n\nReact Integrated\nReact is integrated, you can take full control of the UI\n\nUsing Iframe\nUsing iframe can create a new javascript env, we can get rid of some side effects of some polyfills which was added globally.(such as Prototype.js)\n\nMaven Lifecycle\nnpm commands are integrated into Maven lifecycle with help of Frontend Maven Plugin\n\nWebpack\nWebpack helps us reduce the size of the bundle, also avoids pollution on the global namespace.\n\nJenkins Crumb attached\nCrumb is attached to Axios client, now you can send requests in the way you used to do in React.\n\nExpress as devserver\nYou can run your react app in a standalone page so you can develop in webpack hot reload mode, also with webpack proxy, the standalone app is still accessible to the jenkins dev server.\n\nAxios as http client\nAxios hugely simplify the way to make requests.\n\nScreenshots\n\nExample Plugin UI\n\nManagement Link\n\nGetting Started\n\nClone the repo:\n\ngit clone https://github.com/jenkinsci/react-plugin-template.git\ncd react-plugin-template\n\nInstall the Maven dependencies and node modules.\n\nmvn install -DskipTests\n\nRun standalone React app with hot reload\n\nnpm run start\n\nRun plugin\n\nmvn hpi:run -Dskip.npm -f pom.xml\n\nSend HTTP requests\n\nAs Crumb Issuer is default enabled in Jenkins and each ajax request is required to contain a Jenkins Crumb in request header, so be sure to use the axiosInstance which is already set up with Jenkins Crumb and exported at src/main/react/app/api.js.\n\nexport const apiGetData = () => {\n  return axiosInstance.post(\"/data\");\n};\n\nOr if you want to use your own http client, remember to add the Jenkins Crumb to your request’s header, the Crumb’s key and content could be found at src/main/react/app/utils/urlConfig.js, then you can set the header like below.\n\nconst headers = {};\nconst crumbHeaderName = UrlConfig.getCrumbHeaderName();\n\nif (crumbHeaderName) {\n  headers[crumbHeaderName] = UrlConfig.getCrumbToken();\n}\n\nWrite your own request handler\n\nNow you can customize your request pattern as you want, also we need to write a handler.\n\nJenkins is using stapler to preprocess the requests, so if you need a request handler. For example and also in this template, you can use an Action class to create a sub-url, and then a StaplerProxy to proxy the request like a router. More info about handlers can be found in the Stapler Reference.\n\nExample handler\n\nManagementLink would get the request and then hand it off to the PluginUI\n\n@Extension\npublic class PluginManagementLink extends ManagementLink implements StaplerProxy {\n\n    PluginUI webapp;\n\n    public Object getTarget() {\n        return webapp;\n    }\n\n    public String getUrlName() {\n        return \"react-plugin-template\";\n    }\n}\n\nPluginUI, stapler would then find methods in the target class, in this case, it finds doDynamic, then we can choose the next handler by return the methods result, in this case, getTodos or setTodos, and PluginUI just function like a url router.\n\npublic class PluginUI{\n    public HttpResponse doDynamic(StaplerRequest request) {\n        ...\n\n        List params = getRequestParams(request);\n\n        switch (params.get(0)) {\n        case \"get-todos\":\n            return getTodos();\n        case \"set-todos\":\n            return setTodos(request);\n        }\n        ...\n    }\n}\n\nData Persistence\n\nYou can save your data with a descriptor\n\n@Extension\npublic class PluginConfig extends Descriptor implements Describable\n\nAnd after each time you change data, call save() to persist them.\n\npublic void setTodos(\n            @CheckForNull List value) {\n        this.todos = value;\n        save();\n    }\n\nAnd in your handler, you can get the config class by calling\n\nconfig = ExtensionList.lookup(PluginConfig.class).get(0);\n\nCustomize your plugin\n\nBe sure to modify all the occurrence of react-template\n\nAt org/jenkinsci/plugins/reactplugintemplate/PluginUI/index.jelly, change the iframe’s id and its source url.\n\nAt src/main/react/app/utils/urlConfig.js change\n\nAt src/main/react/server/config.js, change the proxy route.\n\nAt src/main/react/package.json, change the start script’s BASE_URL\n\nAt pom.xml, change the artifactId\n\nAt org/jenkinsci/plugins/reactplugintemplate/PluginManagementLink.java, change names.\n\nAlso use the same value to modify the occurrence in src\\main\\react\\app\\utils\\urlConfig.js.\n\nCustomize a page for your plugin\n\nA management Link is recommended, which would get your plugin a standalone page, along with a entry button in the /manage system manage page.\n\nHow does this template work?\n\nThis template is putting a webpack project inside a Maven project, and this template is just chaining the build result by copy the webpack output to the plugin’s webapp folder to make it accessible from the iframe, then Jelly render the iframe and the client gets the Plugin UI.\n\nWhy iframe?\n\nOver time, Jenkins has added a lot of various javascript libraries to every regular page, which now causes problems for using modern Javascript tooling and as such, we decided to inline the new react based pages in their own sandbox which prevents collisions with other libraries, and maybe the iframe is a good sandbox case.\n\nLinks\n\nGithub: React Plugin Template\n\nGithub: Working Hours Plugin","title":"Introduce React Plugin Template","tags":["react","plugins","template","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ead9a/jackshen.jpg","srcSet":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/77b35/jackshen.jpg 32w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/d4a57/jackshen.jpg 64w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ead9a/jackshen.jpg 128w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/14734/jackshen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ef6ff/jackshen.webp 32w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/8257c/jackshen.webp 64w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/f4bd7/jackshen.webp 128w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/65cd2/jackshen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":129}}},"blog":null,"github":"ShenJack","html":"<div class=\"paragraph\">\n<p>Shen is a student from Beijing Forestry University. One of the students accepted to GSoC 2019.</p>\n</div>","id":"jackshen","irc":null,"linkedin":null,"name":"Jack Shen","slug":"/blog/author/jackshen","twitter":null}]}},{"node":{"date":"2019-08-23T00:00:00.000Z","id":"eddbf0dc-37bf-5f4d-8a6e-0bef8711db73","slug":"/blog/2019/08/23/introducing-gitlab-branch-source-plugin/","strippedHtml":"The GitLab Branch Source Plugin has come out of its beta stage and has been released to the Jenkins update center. It allows you to create job based on GitLab user or group or subgroup project(s). You can either:\n\nImport a single project’s branches as jobs from a GitLab user/group/subgroup (Multibranch Pipeline Job)\n\nImport all or a subset of projects as jobs from a GitLab user/group/subgroup (GitLab Group Job or GitLab Folder Organization)\n\nThe GitLab Group project scans the projects, importing the pipeline jobs it identifies based on the criteria provided. After a project is imported, Jenkins immediately runs the jobs based on the Jenkinsfile pipeline script and notifies the status to GitLab Pipeline Status. This plugin unlike other Branch Source Plugins provides GitLab server configuration which can be configured in Configure System. Jenkins Configuration as Code (JCasC) can also be used to configure the server. To learn more about server configuration see my previous blog post.\n\nRequirements\n\nJenkins - 2.176.2 (LTS)\n\nGitLab - v11.0+\n\nCreating a Job\n\nTo create a Multibranch Pipeline Job (with GitLab branch source) or GitLab Group Job, you must have GitLab Personal Access Token added to the server configuration. The credentials is used to fetch meta data of the project(s) and to set up hooks on GitLab Server. If the token has admin access you can also set up System Hooks while Web Hooks can be set up from any user token.\n\nCreate a Multibranch Pipeline Job\n\nGo to Jenkins > New Item > Multibranch Pipeline > Add Source > GitLab Project\n\nServer - Select your desired GitLab server from the dropdown, needs to be configured before creating this job.\n\nCheckout Credentials - Add credentials of type SSHPrivateKey or Username/Password if there are any private projects to be built by the plugin. If all projects are public then no checkout credentials required. Checkout credential is different from the credential (of type GitLab Personal Access Token) setup in GitLab server config.\n\nOwner - Can be a user, group or subgroup. Depending on this the Projects field is populated.\n\nProjects - Select the project you want to build from the dropdown.\n\nBehaviours - These traits are very powerful tool to configure the build logic and post build logic. We have defined new traits. You can see all the information in repository documentation.\n\nSave and wait for the branches indexing. You are free to navigate from here, the job progress is displayed to the left hand side.\n\nAfter the indexing, the imported project listed all the branches, merge requests and tags as jobs.\n\nOn visiting each job, you will find some action items on the left hand side:\n\nYou can trigger the job manually by selecting Build Now.\n\nYou can visiting the particular branch/merge request/tag on your GitLab Server by selecting the corresponding button.\n\nCreate a GitLab Group Job Type\n\nGo to Jenkins > New Item > GitLab Group\n\nYou can notice the configuration is very similar to Multibranch Pipeline Job with only Projects field missing. You can add all the projects inside your Owner i.e. User/Group/Subgroup. The form validation will check with your GitLab server if the owner is valid. You can add Discover subgroup project trait which allows you to discover this child projects of all subgroups inside a Group or Subgroup but this trait is not applicable to User. While indexing, web hook is created in each project. GitLab Api doesn’t support creation of Group web hooks so this plugin doesn’t support that feature which is only available in GitLab EE.\n\nYou can now explore your imported projects, configuring different settings on each of those folders if needed.\n\nGitLab Pipeline Status Notification\n\nGitLab is notified about build status from the point of queuing of jobs.\n\nSuccess - the job was successful\n\nFailure - the job failed and the merge request is not ready to be merged\n\nError - something unexpected happened; example: the job was aborted in Jenkins\n\nPending - the job is waiting in the build queue\n\nOn GitLab Pipeline status are hyperlinks to the corresponding Jenkins job build. To see the Pipeline Stages and the console output you will be required to visit your Jenkins server. We also planned to notify the pipeline stages to GitLab but it came with some drawbacks which has been addressed so far but there is future plan to add it as trait.\n\nYou can also skip notifying GitLab about the pipeline status by selecting Skip pipeline status notifications from the traits list.\n\nMerge Requests\n\nImplementing support for Merge Requests for the projects was challenging. First, MRs are of 2 types i.e. Origin branches and Forked Project branches so there had to be different implementation for each head. Second, MRs from forks can be from untrusted sources, so a new strategy Trust Members was implemented which allows CI to build MRs only from trusted users who have accesslevel of Developer / Maintainer / Owner.\n\nThird, MRs from forks do not support pipeline status notification due to GitLab issue, see this. You can add a trait Log Build Status as Comment on GitLab that allows you to add a sudo user (leave empty if you want owner user) to comment on the commit/tag/mrs the build result. To add a sudo user your token must have admin access. By default only failure/error are logged as comment but you can also enable logging of success build by ticking the checkbox.\n\nSometimes, Merge Requests fail due to external errors so you want to trigger rebuild of mr by commenting jenkins rebuild. To enable this trigger add the trait Trigger build on merge request comment. The comment body can be changed in the trait. For security reasons, commentor should have Developer / Maintainer / Owner accesslevel in the project.\n\nHooks\n\nWeb hooks are automatically created on your projects if configured to do so in server configuration. Web hooks are ensured to pass through a CSRF filter. Jenkins listens to web hooks on the path /gitlab-webhook/post. On GitLab web hooks are triggered on the following events:\n\nPush Event - when a commit or branch is pushed\n\nTag Event - when a new tag is created\n\nMerge Request Event - when a merge request is created/updated\n\nNote Event - when a comment is made on a merge request\n\nYou can also set up System Hooks on your GitLab server if your token has admin access. System hooks are triggered when new projects are created, Jenkins triggers a rescan of the new project based on the configuration and sets up web hook on it. Jenkins listens to system hooks on the path /gitlab-systemhook/post. On GitLab system hooks are triigered on Repository Update Events.\n\nYou can also use Override Hook Management mode trait to override the default hook management and choose if you want to use a different context (say Item) or disable it altogether.\n\nJob DSL and JCasC\n\nYou can use Job DSL to create jobs. Here’s an example of Job DSL script:\n\norganizationFolder('GitLab Organization Folder') {\n    description(\"GitLab org folder created with Job DSL\")\n    displayName('My Project')\n    // \"Projects\"\n    organizations {\n        gitLabSCMNavigator {\n            projectOwner(\"baymac\")\n            credentialsId(\"i<3GitLab\")\n            serverName(\"gitlab-3214\")\n            // \"Traits\" (\"Behaviours\" in the GUI) that are \"declarative-compatible\"\n            traits {\n                subGroupProjectDiscoveryTrait() // discover projects inside subgroups\n                gitLabBranchDiscovery {\n                    strategyId(3) // discover all branches\n                }\n                originMergeRequestDiscoveryTrait {\n                    strategyId(1) // discover MRs and merge them with target branch\n                }\n                gitLabTagDiscovery() // discover tags\n            }\n        }\n    }\n    // \"Traits\" (\"Behaviours\" in the GUI) that are NOT \"declarative-compatible\"\n    // For some 'traits, we need to configure this stuff by hand until JobDSL handles it\n    // https://issues.jenkins.io/browse/JENKINS-45504\n    configure {\n        def traits = it / navigators / 'io.jenkins.plugins.gitlabbranchsource.GitLabSCMNavigator' / traits\n        traits\n\nYou can also use JCasC to directly create job from a Job DSL script. For example see the plugin repository.\n\nHow to talk to us about bugs or new features?\n\nThis project uses Jenkins JIRA to track issues. You can file issues under gitlab-branch-source-plugin component.\n\nSend your mail in the Developer Mailing list.\n\nJoin our Gitter channel.\n\nFuture work\n\nActively maintain GitLab Branch Source Plugin and take feedbacks from users to improve the plugin’s user experience.\n\nExtend support for GitLab Pipeline to Blueocean.\n\nResources\n\nGitLab API Plugin\n\nGitLab API Plugin Wiki\n\nGitLab Branch Source Plugin\n\nProject Summary\n\nGitHub Branch Source Plugin Release\n\nThank you Jenkins and Google Summer of Code :)","title":"Introducing new GitLab Branch Source Plugin","tags":["gitlab","plugins","pipeline","multibranch","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg","srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/eb017/baymac.jpg 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/ed0e7/baymac.jpg 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/b3c75/baymac.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/bcdad/baymac.webp 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/21187/baymac.webp 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/33025/baymac.webp 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/d386c/baymac.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":192}}},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/author/baymac","twitter":"baymac04"}]}}]}},"pageContext":{"tag":"plugins","limit":8,"skip":16,"numPages":14,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}