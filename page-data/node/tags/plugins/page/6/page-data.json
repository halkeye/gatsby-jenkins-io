{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/plugins/page/6",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-02-05T00:00:00.000Z","id":"47e0963b-eba2-5a4e-9d92-1ffe57e02833","slug":"/blog/2018/02/05/security-updates/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities.\n\nAndroid Lint\n\nCCM\n\nCredentials Binding\n\nJUnit\n\nPipeline: Supporting APIs\n\nFor an overview of these security fixes, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[]}},{"node":{"date":"2018-01-08T00:00:00.000Z","id":"775a7cf1-5a4d-58b6-b98a-0d5ac2e2af67","slug":"/blog/2018/01/08/moving-from-buddybuild-for-android/","strippedHtml":"Last week, buddybuild — a hosted continuous integration service focused on mobile apps — announced that it had been acquired by Apple, and consequently its complete Android offering, along with its free tier for iOS users, will be discontinued at the beginning of March.\n\nThis was a fairly undesirable way to start 2018 for buddybuild’s Android users and, with less than two months to find an alternative, many took to Twitter to simultaneously congratulate buddybuild on their acquisition, and commiserate with others who have to find a new way to build and test their app.\n\nWhile Jenkins is usually deployed as a self-hosted solution (with over 150k installs), rather than a hosted service like buddybuild, we thought this would be a good time to highlight — thanks to the rich plugin ecosystem of Jenkins — some of the possibilities offered to Android developers by Jenkins.\n\nCommon workflows\n\nAndroid projects are fundamentally no different from how other types of software development projects might make use of a Continuous Integration & Continuous Delivery system (CI/CD) such as Jenkins: Android developers will collaborate using a source control management system (SCM) such as Git or Mercurial; they will create Pull Requests, which should be automatically verified; they expect to get feedback on test failures and code quality (e.g. via email or Slack); and they should be able to easily deploy new versions of their app to beta testers or end users.\n\nTo this end, Jenkins lets you define your build and deployment pipelines in a structured and auditable fashion (via Jenkinsfile), supports a multitude of SCMs, while the multibranch Pipeline feature automatically creates new Jenkins jobs for every new Pull Request in your repository, and cleans them up as branches get merged.  The Blue Ocean user interface ties these features together in a clean, modern UI.\n\nBuilding Android Apps\n\nTo build an Android app, you need the Java development tools (JDK), which Jenkins can automatically install for you, plus the Android SDK, which you can also install on individual build agents using a tool installer, or you can use a Docker container with the Android SDK Tools preinstalled, for example.\n\nThen, you can use your SCM plugin of choice to fetch your source code, and build the app using the Android Gradle Plugin via the Gradle Wrapper — in most cases this is as simple as running./gradlew assembleDebug.\n\nOnce your app has been built and packaged into a.apk file, you can use the archiveArtifacts build step, storing the APK, enabling colleagues to download APKs directly from Jenkins, so that they can try out the latest build.\n\nTesting Android Apps\n\nThe Android SDK supports two types of test: unit tests, which run on the JVM, and instrumentation tests, which have to run on an Android device or emulator.  Both types of test can be executed using Jenkins and, since the Android Gradle Plugin writes the test results to disk in JUnit XML format, the JUnit Plugin for Jenkins can be used to parse the results, enabling you see a test report, and to be notified of test failures.\n\nCompiling and executing the unit tests for your app is as simple as adding another build step which runs./gradlew testDebugUnitTest.\n\nSimilarly, instrumentation tests can be compiled and executed via the connectedDebugAndroidTest task in Gradle.  However, before you do this, you should ensure that an Android device is connected to your Jenkins build agent, or you can make use of the Android Emulator Plugin to automatically download, create, and start an emulator for you during a build.  There are also plugins for cloud testing services such as AWS Device Farm.\n\nOnce you have finished executing the tests, you can use the junit step to analyse the results: junit '**/TEST-*.xml'.\n\nStatic Analysis\n\nSimilar to other Java or Kotlin projects, you can scan your codebase using static analysis tools like FindBugs or Checkstyle.  Once again, Jenkins has analysis plugins which can parse the output of these tools, and present you with the results and trend graphs, or optionally flag the build as unstable or failed if too many problems have been detected.\n\nThe Android SDK provides a further useful static analysis tool called Lint.  The output of this tool can be parsed by the Warnings Next Generation Plugin, which will analyse the issues found, and provide you with a detailed report within Jenkins.  This functionality was demonstrated by the Android Tools Team at the Google I/O conference a few years back.\n\nSecurely signing and deploying Android apps\n\nIn order to distribute an Android app, it needs to be signed with a private key, which you should keep safe (losing it means you won’t be able to publish updates to your app!), and as secure as possible.\n\nInstead of developers having to keep the signing keystore on their development machines, you can securely store the keystore and/or its passphrase on Jenkins using the Credentials Plugin.  This avoids having to hardcode the passphrase into your build.gradle, or have it otherwise checked into your SCM.\n\nThe Credentials Plugin allows you to store secrets in Jenkins — which will be stored encrypted on disk when not in use — and those secrets can temporarily be made available during a build, either as a file in the build workspace, or exposed as an environment variable.\n\nYou can use such environment variables in a signingConfig block within your build.gradle, or you can make use of the Android Signing Plugin to sign your APK for you.\n\nOnce you have your production-ready APK built and signed, you can automatically upload it to Google Play using the Google Play Android Publisher plugin.  The benefit of using this plugin is that it supports multiple APK upload, expansion files, uploading of ProGuard mapping files, promotion of builds from alpha, to beta, to production — and once again, your Google Play credentials are securely stored on Jenkins thanks to integration with the Credentials Plugin.\n\nSample Pipeline\n\nHere’s a straightforward example of a Jenkinsfile defining a pipeline to build, test, and optionally deploy an Android app, from a multibranch Pipeline job.\nIt requires the Pipeline, JUnit, Android Lint, Google Play Android Publisher, and Mailer plugins to be installed.\n\nJenkinsfile\n\npipeline {\n  agent {\n    // Run on a build agent where we have the Android SDK installed\n    label 'android'\n  }\n  options {\n    // Stop the build early in case of compile or test failures\n    skipStagesAfterUnstable()\n  }\n  stages {\n    stage('Compile') {\n      steps {\n        // Compile the app and its dependencies\n        sh './gradlew compileDebugSources'\n      }\n    }\n    stage('Unit test') {\n      steps {\n        // Compile and run the unit tests for the app and its dependencies\n        sh './gradlew testDebugUnitTest'\n\n        // Analyse the test results and update the build result as appropriate\n        junit '**/TEST-*.xml'\n      }\n    }\n    stage('Build APK') {\n      steps {\n        // Finish building and packaging the APK\n        sh './gradlew assembleDebug'\n\n        // Archive the APKs so that they can be downloaded from Jenkins\n        archiveArtifacts '**/*.apk'\n      }\n    }\n    stage('Static analysis') {\n      steps {\n        // Run Lint and analyse the results\n        sh './gradlew lintDebug'\n        androidLint pattern: '**/lint-results-*.xml'\n      }\n    }\n    stage('Deploy') {\n      when {\n        // Only execute this stage when building from the `beta` branch\n        branch 'beta'\n      }\n      environment {\n        // Assuming a file credential has been added to Jenkins, with the ID 'my-app-signing-keystore',\n        // this will export an environment variable during the build, pointing to the absolute path of\n        // the stored Android keystore file.  When the build ends, the temporarily file will be removed.\n        SIGNING_KEYSTORE = credentials('my-app-signing-keystore')\n\n        // Similarly, the value of this variable will be a password stored by the Credentials Plugin\n        SIGNING_KEY_PASSWORD = credentials('my-app-signing-password')\n      }\n      steps {\n        // Build the app in release mode, and sign the APK using the environment variables\n        sh './gradlew assembleRelease'\n\n        // Archive the APKs so that they can be downloaded from Jenkins\n        archiveArtifacts '**/*.apk'\n\n        // Upload the APK to Google Play\n        androidApkUpload googleCredentialsId: 'Google Play', apkFilesPattern: '**/*-release.apk', trackName: 'beta'\n      }\n      post {\n        success {\n          // Notify if the upload succeeded\n          mail to: 'beta-testers@example.com', subject: 'New build available!', body: 'Check it out!'\n        }\n      }\n    }\n  }\n  post {\n    failure {\n      // Notify developer team of the failure\n      mail to: 'android-devs@example.com', subject: 'Oops!', body: \"Build ${env.BUILD_NUMBER} failed; ${env.BUILD_URL}\"\n    }\n  }\n}\n\nNot just for Android\n\nWhile buddybuild concentrated on Android and iOS apps, thanks to the distributed build agent architecture of Jenkins, you can automate any type of project.\n\nFor example, you can expand the capabilities of Jenkins by adding macOS (or Windows, Linux, BSD…) agents; you can dynamically spin up agents on AWS EC2 instances, Microsoft Azure VMs, or Azure Container Instances; you can create agents using VMware, and so on.\n\nConclusion\n\nThousands of Jenkins instances are already using the various Android-related plugins, and Pipeline along with the Blue Ocean User Interface make using Jenkins simpler than it’s ever been.\n\nGive Jenkins a try for building your Android projects, check out the tutorials, and get in touch via the users' mailing list, or IRC.\n\nFinally, as with Jenkins itself, all plugins distributed are open-source, so feel free to contribute!","title":"Moving from buddybuild to Jenkins for Android Developers","tags":["android","plugins"],"authors":[]}},{"node":{"date":"2017-10-23T00:00:00.000Z","id":"63d03f70-f7b3-5e9a-a99f-0bee483fb790","slug":"/blog/2017/10/23/security-updates/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities.\n\nActive Choices (uno-choice)\n\nBuild-Publisher\n\nDependency Graph Viewer\n\nglobal-build-stats\n\nAdditionally, the Multijob Plugin also received a security update several weeks ago.\n\nFor an overview of these security fixes, see the security advisory.\n\nActive Choices Plugin distribution had been suspended since April due to its mandatory dependency on the suspended Scriptler Plugin.\nThat dependency has been made optional, so Active Choices can be used without having Scriptler installed.\nThis means we are able to resume distribution of Active Choices Plugin again.\nIt should be available on update sites later today.\n\nWe also announced a medium severity security vulnerability in SCP publisher plugin that does not have a fix at this time.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[]}},{"node":{"date":"2017-10-11T00:00:00.000Z","id":"3b2aeb32-59cd-5469-815d-78144c195889","slug":"/blog/2017/10/11/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.84 and 2.73.2, that fix several security vulnerabilities.\nAdditionally, we published a new release of Swarm Plugin whose client contains a security fix, and Maven Plugin 3.0 was recently released to resolve a security issue.\nUsers of Swarm Plugin and Maven Plugin should update these to their respective newest versions.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nWe also published information about a vulnerability in Speaks! Plugin.\nThere is no fix available and we recommend it be uninstalled.\nIts distribution has been suspended.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Important security updates for Jenkins core and plugins","tags":["core","security","plugins"],"authors":[]}},{"node":{"date":"2017-08-18T00:00:00.000Z","id":"e2e86b67-d732-51e3-9127-44de5e51de0e","slug":"/blog/2017/08/18/declarative-pipelines-at-jenkinsworld/","strippedHtml":"This is a guest post by Andrew Bayer, who is\none of the authors of the\nDeclarative Pipeline plugin,\nand is a software engineer on the Pipeline team at\nCloudBees, Inc.\n\nA year ago at Jenkins World 2016, we unveiled Declarative Pipeline, a\nstructured way to define your Pipeline. It’s been a great year for Declarative\nand Pipeline in general, with the release of Declarative Pipeline 1.0 in\nFebruary, multiple releases since then, the introduction of\ndocumentation on Pipeline at jenkins.io,\nwith a focus on Declarative, and more. Given everything that’s happened over\nthe last year, we thought it’d be good to let you all know what you can expect\nto see and hear about Declarative Pipeline at this year’s Jenkins World.\n\nFirst, on Thursday, August 31, I’ll be giving a talk on Declarative Pipeline\nwith Robert Sandell, one of my coworkers\nhere at CloudBees and another author of Declarative Pipeline. We’ll be\ncovering what’s happened with Declarative over the last year, new features\nadded since the 1.0 release, such as the libraries directive and more when\nconditions, what’s planned for the upcoming 1.2 release (which is planned for\nshortly after Jenkins World!), including parallel stage s, and what’s on the\nroadmap for the future. In addition, we’ll be demoing some of the features in\n1.2, and providing some pointers on best practices for writing your Declarative\nPipeline.\n\nAlso on Thursday, Stephen Donner from Mozilla\nwill be giving a demo showing Mozilla’s usage of Declarative Pipeline and\nshared libraries at the Community Booth - Mozilla has been doing great work\nwith Declarative, and I’m excited to see their usage in more detail and hear\nStephen talk about their experience!\n\nIn addition, Robert, Stephen, and myself will all be at Jenkins World both days\nof the main sessions, and Robert and myself will also be at the\nContributor Summit\non Tuesday. We’d love to hear your thoughts on Declarative and will be happy to\nanswer any questions that we can. Looking forward to seeing you all!\n\nAndrew Bayer and Robert Sandell will be talking about the latest on\nDeclarative Pipeline in Jenkins\nat Jenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Declarative Pipeline at Jenkins World","tags":["plugins","pipeline"],"authors":[]}},{"node":{"date":"2017-08-10T00:00:00.000Z","id":"7a11360a-42a4-5d64-8401-89a9e4f35904","slug":"/blog/2017/08/10/kubernetes-with-pipeline-acs/","strippedHtml":"This is a guest post by Pui Chee Chen,\nProduct Manager at Microsoft working on\nAzure\nDevOps open source integrations.\n\nRecently, we improved the Azure Credential plugin by\nadding a custom binding for Azure Credentials which allows you to use an\nAzure\nservice principal (the analog to a service or system account) via  the\nCredentials Binding plugin. This means it’s now trivial to run Azure CLI\ncommands from a Jenkins Pipeline. We also recently published the first version\nof the Azure App Service plugin which makes it very\neasy to deploy\nAzure Web\nApps directly from Jenkins Pipeline. While we’ll have\nmuch more to discuss in our Jenkins World presentation on\nAzure\nDevOps open source integrations, in this blog post I wanted to share some good\nsnippets of what is possible today with Jenkins Pipeline and Azure.\n\nFirst, a simple example using the Azure CLI to list resources in the\nsubscription:\n\n// Scripted //\nnode {\n    /* .. snip .. */\n    stage('Deploy') {\n        withCredentials([azureServicePrincipal('principal-credentials-id')]) {\n            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'\n            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'\n            sh 'az resource list'\n        }\n    }\n}\n// Declarative //\n\nazureServicePrincipal() cannot be used in Declarative Pipeline until\nJENKINS-46103 is\nresolved.\n\nOnce a Pipeline can interact with Azure, there are countless ways one could\nimplement continuous delivery with Jenkins and Azure. From a deploying a simple\nwebapp with the\nAzure\nApp Service plugin and the azureWebAppPublish step, or a more advanced\ncontainer-based delivery pipeline to deliver new containers to\nKubernetes\nvia Azure Container Service.\n\nWith the Docker Pipeline plugin and a little bit of\nextra scripting, a Jenkins Pipeline can also build and publish a Docker\ncontainer to an\nAzure\nContainer Registry :\n\n// Scripted //\nimport groovy.json.JsonSlurper\n\nnode {\n    def container\n    def acrSettings\n\n    withCredentials([azureServicePrincipal('principal-credentials-id')]) {\n        stage('Prepare Environment') {\n            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'\n            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'\n            acrSettings = new JsonSlurper().parseText(\n                                            sh(script: \"az acs show -o json -n my-acr\", returnStdout: true))\n        }\n\n        stage('Build') {\n            container = docker.build(\"${acrSettings.loginServer}/my-app:${env.BUILD_ID}\")\n        }\n\n        stage('Publish') {\n            /* https://issues.jenkins.io/browse/JENKINS-46108 */\n            sh \"docker login -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} ${acrSettings.loginServer}\"\n            container.push()\n        }\n\n        stage('Deploy') {\n            echo 'Orchestrating a new deployment with kubectl is a simple exercise left to the reader ;)'\n        }\n    }\n}\n// Declarative //\n\nIf you have been following our\nAzure Blog, you may\nhave noticed we have shipped a lot of updates to provide better support for\nAzure on Jenkins, and vice versa, such as:\n\nHosted Jenkins. New\nSolution\nTemplate in Azure Marketplace lets you spin up a\nJenkins Controller on Azure in minutes. Not only is it easy and fast, the solution\ntemplate gives you option to scale up by selecting the VM disk type and size.\nAnd guess what? You can even select the Jenkins release type you want to use -\nLTS, weekly build or Azure verified - all under your control.\n\nContinuous integration experience. In the latest version of our\nAzure VM Agents plugin, we improved the user\nexperience and added the option to let you to select Managed Disk for disk\ntype (which is currently used extensively on\nci.jenknis.io. You no longer need to worry about\nexceeding the number of VMs on your subscription.\n\nContinuous deployment experience. Now, if\nAzure CLI is not your cup of tea, we released our first plugin to provide\ncontinuous deployment support to Azure App Service. The plugin supports all\nlanguages Azure App Service supports. We even have a walkthrough\nhere in the\nbrand new Jenkins Hub where you can find all Jenkins on Azure resources.\n\nPipeline readiness. Also, all Azure plugins are and will be pipeline ready.\nHave you been leveraging our\nAzure Storage plugin in your Pipeline?\n\nSo, what’s next? We have a big surprise in store at Jenkins World! :)\n\nWe are serious about supporting open source and the open source community.\nBe sure to catch our talk on\nAzure\nDevOps open source integrations.\nSee you at\nJenkins World 2017!\n\nJoin the Azure DevOps team at\nJenkins World in August,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"CI/CD with Jenkins Pipeline and Azure","tags":["plugins","kubernetes","pipeline"],"authors":[]}},{"node":{"date":"2017-08-07T00:00:00.000Z","id":"7ba8b0b9-e907-55d4-a2a2-ca447df4c528","slug":"/blog/2017/08/07/security-advisory/","strippedHtml":"Multiple Jenkins plugins received updates today that fix several security vulnerabilities, including multiple high severity ones.\n\nWe strongly recommend updating the following plugins as soon as possible:\n\nBlue Ocean\n\nPipeline: Groovy Plugin\n\nScript Security Plugin\n\nLess severe security updates have been released for these plugins:\n\nConfig File Provider Plugin\n\nDatadog Plugin\n\nDeploy to container Plugin\n\nDRY Plugin\n\nPipeline: Input Step Plugin\n\nStatic Analysis Utilities Plugin\n\nAdditionally, the OWASP Dependency-Check Plugin recently also received a security update.\n\nFor an overview of what was fixed, see the security advisory.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important future notifications related to Jenkins security.","title":"Important security updates for multiple Jenkins plugins","tags":["plugins","security"],"authors":[]}},{"node":{"date":"2017-08-07T00:00:00.000Z","id":"30508a44-0d3c-579b-8b31-b92e43b9e1f2","slug":"/blog/2017/08/07/intro-to-plugin-development/","strippedHtml":"This is a guest post by Mark Waite, who maintains\nthe git plugin,\nthe git client plugin,\nand is a technical evangelist for CloudBees, Inc.\n\nWhile developing the \" Intro to Plugin Development\"\nworkshop for Jenkins World 2017, I was impressed by the many Jenkins plugin development videos, tutorials, and guides.\nHere are some of my favorite plugin development topics and links.\n\nPlugin tutorial videos\n\nJenkins Online Meetup Plugin Development Part 1 - Basics - Steven Christou and Jesse Glick\n\nJenkins Online Meetup Plugin Development Part 2 - Web UI - Daniel Beck and Tom Fennelly\n\nWriting your third plugin - Justin Ryan\n\nJenkins Hackathon session at TNG Technology Consulting - Kohsuke Kawaguchi\n\nPlugin tutorial pages\n\nTutorial on jenkins.io\n\nInstall a Java Development kit, for example AdoptOpenJDK 8 or 11\n\nInstall the latest maven release\n\nInstall your IDE (I like Netbeans, has the Jenkins/Stapler plugin to make plugin creation as easy as menu:File[New Project > Maven > Jenkins Plugin])\n\nMore details\n\nMany of the Jenkins plugin development topics have dedicated pages of their own, including user interface, plugin testing, and javadoc.\n\nUser interface\n\nUI samples plugin (bars, boxes, buttons, lists, notification, and syntax highlighting)\n\nUnderstanding Jelly Tags from the Jenkins wiki\n\nForm Validation from the Jenkins wiki\n\nJelly Form Controls from the Jenkins wiki\n\nJelly Tag Library Reference from jenkins.io\n\nDataBoundConstructor in Basic Guide to Jelly usage\n\nDataBoundSetter in google groups\n\nTesting a plugin\n\nUnit test from the Jenkins wiki\n\nJenkins test objects like JenkinsRule and the WithoutJenkins annotation\n\nDataBoundConstructor in Basic Guide to Jelly usage\n\nDataBoundSetter in google groups\n\nJava unit testing tools like Hamcrest and AssertJ (and JenkinsMatchers)\n\nJava unit testing rules like TemporaryFolder, Timeout, and DisableOnDebug\n\nJava unit testing classes like Assume and Parameterized\n\nJava unit testing mock frameworks like mockito and powermock\n\nJavadoc\n\nJenkins core javadoc\n\nJenkins plugins javadoc\n\nExtension Points\n\nList of Jenkins core extension points and all Jenkins extension points\n\nCustom build steps\n\nAdding a custom build step\n\nActions\n\nJenkins Action and its subtypes\n\nMark will be presenting\nIntro to Plugin Development\nat\nJenkins World in August.\nRegister with the code JWFOSS for a 30% discount off your pass.","title":"Plugin Development Tutorials, Videos, and More","tags":["plugins"],"authors":[]}}]}},"pageContext":{"tag":"plugins","limit":8,"skip":40,"numPages":14,"currentPage":6}},
    "staticQueryHashes": ["3649515864"]}