{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/plugins/page/13",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2013-07-01T00:00:00.000Z","id":"f1db07c0-565b-5067-b0a9-2002cb14ebb5","slug":"/blog/2013/07/01/office-hours-this-week-git-plugin-refactoring/","strippedHtml":"This Wednesday’s Jenkins office hours is all about the Git plugin refactoring that’s going on.\n\nGit plugin is one of the most popular plugins out there, and it’s been around for quite some time. Combine that with the fact that there are so many different ways to use Git, it was inevitable that Git plugin became quite a capable but complex plugin over time. It has more than a dozen options and switches, and it was becoming harder to use and harder to maintain.\n\nAs early as 2010, some of us have already been saying that we should refactor this plugin, but none of us have managed. The good news is, I finally started tackling this problem last month while I was in London, and I’ve made a steadily progress since then and I’m ready for a wider review.\n\nSo we’ll spend this Wednesday going over the changes. I’ll show you how the new version looks, what changes are made internally, and what it’ll enable us in the future.\n\nIf the Git plugin is important to you, and you want to see what’s cooking, please join us in the office hours on Google Hangout.\n\nLooking forward to seeing you!","title":"Office hours this week: Git plugin refactoring","tags":["development","plugins"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-06-21T00:00:00.000Z","id":"24926dd2-b6f9-5057-9f68-59a583212c04","slug":"/blog/2013/06/21/reducing-the-of-threads-in-jenkins-ssh-slaves/","strippedHtml":"+\nAs the usage of Jenkins expands, we started seeing users who run multiple 100s of agents on one controller, and thus it became a lot more important for us to scale well to even larger number of agents. +\n +\n\n+\nWhile I was looking at the thread dump of a large system, I started noticing that there are a large number of threads lying around pumping `+InputStream+` and writing to another `+OutputStream+`. On Linux, each thread occupies 2MB just for its stack size, so if we can eliminate some of them, it'd be a good saving. +\n +\n\n+\nSo this morning, I tackled one source of such waste. +\n +\n\n+\nJenkins has https://wiki.jenkins.io/display/JENKINS/SSH+Slaves+plugin[the ability to launch agent on a remote server via SSH] for the longest time, and to simplify this, we've been using a https://github.com/jenkinsci/trilead-ssh2[pure-Java implementation of SSH client]. +\n +\n\n+\nTo cut the long story short, I was able to eliminate two pump threads per every SSH connection. Furthermore, when it runs on the upcoming Jenkins 1.521, it'll save one more thread per every SSH connection. So if you have 100 agents connected through SSH, this alone saves up 600MB of memory. That's pretty good for a few hours work! +\n +\n\n+\nIf you run a lot of agents, be sure to pick up version 0.27 of https://wiki.jenkins.io/display/JENKINS/SSH+Slaves+plugin[the SSH agents plugin] to take advantages of this! +","title":"Reducing the # of threads in Jenkins: SSH agents","tags":["development","news","plugins","releases"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-12-13T00:00:00.000Z","id":"18a1c49c-f61d-53b6-b0ae-88d9b4ed9f31","slug":"/blog/2012/12/13/office-hours-next-week-metadata-plugin/","strippedHtml":"+\nhttps://wiki.jenkins.io/display/JENKINS/Office+Hours[The last Jenkins office hour of the year] hosts Robert Sandell and Tomas Westling, who will go over https://wiki.jenkins.io/display/JENKINS/Metadata+plugin[newly open-sourced metadata plugin] from Sony Mobile Communications (https://developer.sonymobile.com/2012/11/22/sony-contributes-to-jenkins-software-tool/[more about this story on their website]). This team from Sony Mobile has been known for several other popular plugins, including https://wiki.jenkins.io/display/JENKINS/Gerrit+Trigger[the Gerrit trigger plugin]. And I think this latest batch of plugins will not disappoint! +\n +\n\n+\nAs I understand, this plugin is a https://wiki.jenkins.io/label/JENKINS/plugin-library[library plugin], which is primarily meant to be consumed by other plugins. With help of other plugins using this plugin, it can classify jobs and agents by adding metadata tags to them. This in turn enables more intelligent scheduling, views, access control, and so on. +\n +\n\n+\nPersonally, I'm very interested in integrating https://wiki.jenkins.io/display/JENKINS/iOS+Device+Connector+Plugin[the iOS device connector plugin], so that one could say \"run this job on a Mac where iPad2 is connected\", etc. The other piece is to integrate this with https://wiki.jenkins.io/display/JENKINS/External+Resource+Dispatcher[the external resource dispatcher] so that Jenkins can grant exclusive device access to jobs while they are running so that tests don't end up trying to use the same device. +\n +\n\n+\nIf you are a plugin developer, hopefully this gets you excited. See you https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Office+Hours&iso=20121219T11&p1=283&ah=1[Dec 19th 11am PST]. +","title":"Office hours next week: metadata plugin","tags":["development","core","plugins"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-01-04T00:00:00.000Z","id":"4e4e2b32-5616-5428-a8f3-ee1c68507a51","slug":"/blog/2012/01/04/building-jenkins-plugins-with-gradle/","strippedHtml":"Until now, Jenkins plugins written in Java or Groovy could only be built with Maven, using the maven-hpi-plugin to generate a proper manifest and archive which Jenkins can consume. But starting now, you can also use Gradle!\n\nSee the wiki for information on how you can use Gradle and the new gradle-jpi-plugin to build, test and release your Java or Groovy Jenkins plugin.","title":"Building Jenkins plugins with Gradle","tags":["development","core","meta","plugins","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"<div class=\"paragraph\">\n<p>Andrew was a core committer to Hudson and the author of numerous plugins.</p>\n</div>","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/author/abayer","twitter":"abayer"}]}},{"node":{"date":"2011-11-15T00:00:00.000Z","id":"8cdd0c7d-1028-517e-9890-ce92bab052db","slug":"/blog/2011/11/15/the-beginning-of-a-new-era-ruby-plugins-now-a-reality/","strippedHtml":"It’s not often that I get to use that much hyperbole in a Jenkins blog post, but I think in this case it’s allowable. A journey that started over a year ago by Charles Lowell has reached a new level, thanks to lots of help from Kohsuke along with Hiroshi Nakamura and Jørgen Tjernø.\n\nAs of today, with Jenkins 1.438, you can now download and install Ruby plugins from the update center (the Path Ignore plugin being the first).\n\nWords simply can’t express what a monumental achievement this is for the Jenkins project, both from the technical perspective but also in terms of what this means for the future of the project.\n\nAccording to the languages dashboard on GitHub, Ruby is over two times as popular as Java on the site. I do not intend to start a language popularity contest here, but if we pretend just for a minute that the GitHub ecosystem is all that exists. Can you then imagine how powerful it would be to engage and include a community of open source developers that would be two times the size of the current pool of contributors? That’s tremendous potential!\n\nGreat! Where do I start?\n\nFor those that are curious, the first officially released Ruby plugin for Jenkins is Jørgen’s pathignore-plugin which can be found in the update center. If you’re looking for a reference project, this is currently the most up-to-date plugin.\n\nThere is also a wiki page covering Ruby plugin development , which might be a little out-of-date but covers most of the essentials.\n\nAdditionally you might find the jenkins-prototype-plugin an interesting resource as it is practically a kitchen sink of demo/test Ruby plugin code.\n\nCurrently only a few extension points (BuildStep, Publisher, BuildWrapper) are mapped in a Ruby-friendly manner. Don’t let that scare you though! If you dig around in the jenkins-plugin-runtime you can see how the existing extension points are mapped from Java into Ruby, because Ruby plugins are running under JRuby, if you need to access some Java APIs, you can do so without too much trouble.\n\nThe Thank Yous\n\nGreat efforts like this one don’t just happen without support, which is why I’d like to call out and thank The FrontSide for their wonderful support, helping to cover costs of WebEx for Office Hours and covering Charles' time while he worked with Kohsuke on the internal plumbing needed to make Ruby plugins possible within Jenkins core. If the name \"The FrontSide\" looks familiar to you, that might be because they also created and donated the Jenkins logo!\n\nWe should also thank Lookout, Inc ( full disclosure: Lookout is my employer) and CloudBees for affording some employee time for Jørgen and Kohsuke respectively to work on the project.","title":"The beginning of a new era: Ruby plugins now a reality","tags":["general","core","plugins","jruby"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2011-06-08T00:00:00.000Z","id":"1ca41d43-8c95-5909-9944-7573d0f27283","slug":"/blog/2011/06/08/building-a-software-diamond-with-jenkins/","strippedHtml":"[ Editor’s Note: This is a guest post from Jenkins community member Tom Rini ]\n\nAlternatively: How to make your parallel jobs kick one last job at the end\n\nMany of us have had occasion to think: \" I could make this project build quicker if I could just run parts in parallel and then one final job to wrap it up.\"\n\nWell, good news! Jenkins is here to help!  With the Join Plugin you can do just that.  Over on the confluence page it’s got a number of examples and fancy flow charts.  But the take-away is that if you can describe the flow, you can make it happen.  But you’re saying \"wait, I need to pass information around between the jobs.\"\n\nWe’ve got that one covered for you too with the Parameterized Trigger Plugin.  And here’s the best part, these two can work together!  With both plugins installed you can follow the steps listed in the Build Parameters section of the Join Plugin. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/join_trigger.png\n\nAnd as they say, now you’re cooking with gas!","title":"Building a software diamond with Jenkins","tags":["general","guest post","plugins","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2011-05-12T00:00:00.000Z","id":"a0c76b9b-3d19-504c-99d6-871e82deabe5","slug":"/blog/2011/05/12/ruby-plugins-hack-session-5-12-2011/","strippedHtml":"[ Editor’s Note: For the past few weeks Jenkins community member Charles Lowell has been working with Kohsuke on adding support for building plugins in Ruby. As part of this effort, Charles has been hosting weekly hack sessions via WebEx ]\n\nAs always, last night’s Ruby Plugins hack session was a pleasure. Below is a quick notation of what items were discussed and/or accomplished followed by next steps to be taken my those in attendance.\n\nDiscussion/Accomplished\n\nRuby Plugin project structure and how to bundle into an .hpi file.\n\nReview of the new XSTREAM serialization method\n\nAPI for marking fields as transient\n\nWhat mods, if any, are required to get .hpl to work with Ruby plugin\n\nNext Steps\n\nCharles\n\nto research what can be shared between JRuby ScriptingContainer s\n\nAPI for unmarshaling hooks on serialized ruby objects\n\nChange the name of the repo :)\n\nDocument…​ something!\n\nKohsuke\n\ntest more view functions\n\nadd debug mode outside of hpi:run","title":"Ruby Plugins Hack Session 5/12/2011","tags":["development","core","plugins","ruby"],"authors":[{"avatar":null,"blog":null,"github":"cowboyd","html":"","id":"cowboyd","irc":null,"linkedin":null,"name":"Charles Lowell","slug":"/blog/author/cowboyd","twitter":null}]}},{"node":{"date":"2011-03-03T00:00:00.000Z","id":"926494df-54e9-540e-8d37-ffcb912c1d4c","slug":"/blog/2011/03/03/updated-usage-stats-available/","strippedHtml":"Updated usage statistics are now available at https://jenkins-ci.org/census This data has been scrubbed of distinguishing information as much as possible, filtered for installations we’ve seen at least twice a month with at least one job set up, and split up into monthly JSON files. Starting with August, we only have data on installations of version 1.368 or later - before that, reports go to the old Oracle-owned server, and we aren’t able to retrieve them. So that’s why you’ll see a fairly hefty drop in install count, etc from July to August.\n\nI haven’t had a chance to do any analysis to speak of on the data. I intend to get the plugin usage spreadsheet updated n the next few days, but I wanted to make this data available to you all ASAP. If you come up with any interesting analysis or use of the data, please let us know!","title":"Updated Usage Stats Available!","tags":["general","core","meta","news","plugins","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"<div class=\"paragraph\">\n<p>Andrew was a core committer to Hudson and the author of numerous plugins.</p>\n</div>","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/author/abayer","twitter":"abayer"}]}}]}},"pageContext":{"tag":"plugins","limit":8,"skip":96,"numPages":14,"currentPage":13}},
    "staticQueryHashes": ["3649515864"]}