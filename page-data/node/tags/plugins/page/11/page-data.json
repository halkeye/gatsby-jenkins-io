{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/plugins/page/11",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2015-07-28T00:00:00.000Z","id":"9ec1d79b-4f06-5a53-916d-bcc4f9f5e267","slug":"/blog/2015/07/28/reinforcements-for-the-subversion-plugin/","strippedHtml":"This is a guest post by Manuel Recena Soto (aka recena).\n\nUsers of the plug-in know that it has undergone very important changes in the last two years.\n\nUnfortunately, some of these changes resulted in regressions for some users that weren’t properly addressed in subsequent releases. Many users were therefore forced to keep using an older release of the plugin to keep their instances running.\n\nTo fix this difficult situation I’ve decided to dedicate my spare time to improving the plug-in and attempting to restore the stability that an essential plug-in like this requires.\n\nIn order to do so, me, my colleague Steven Christou and other members of the community have drawn up a plan.\n\nIn the coming weeks we will be focusing our efforts on:\n\nGoing through the Jira tickets\n\nChecking whether they are duplicated\n\nChecking whether they are still relevant\n\nAsking for more information from the people who reported them\n\nEstablishing their priority\n\nReviewing pull requests\n\nInvestigating bug reports and try to reproduce them\n\nFixing serious bugs\n\nRefactoring the plugin to improve its maintainability.\n\nWe’re planning to publish a new 2.5.x bugfix release once a fortnight. We are not considering the inclusion of new features or improvements. The priority now must be to obtain a stable and reliable plug-in, one that will allow us to take things up again in the future with greater security and peace of mind.\n\nInterested in helping? Just send us a message!","title":"Reinforcements for the Subversion Plugin","tags":["development","guest post","plugins"],"authors":[]}},{"node":{"date":"2015-07-24T00:00:00.000Z","id":"ac93e6b7-9b76-5920-aaf0-2f9502b20694","slug":"/blog/2015/07/24/integrating-kubernetes-and-jenkins/","strippedHtml":"Kubernetes is an open-source project by Google that provides a platform for managing Docker containers as a cluster. In their own words:\n\nKubernetes is an open source orchestration system for Docker containers. It handles scheduling onto nodes in a compute cluster and actively manages workloads to ensure that their state matches the users declared intentions. Using the concepts of \"labels\" and \"pods\", it groups the containers which make up an application into logical units for easy management and discovery.\n\nKubernetes-related services by Google are the Google Container Engine, a Kubernetes-powered platform for hosting and managing Docker containers, and the Google Container Registry, a private Docker image registry.\n\nSeveral new Jenkins plugins allow you to make use of Kubernetes and these services:\n\nThe Google Cloud Registry Auth Plugin allows users to authenticate with the Google Cloud Registry so they can push/pull images. This allows you to use the Google Cloud Registry with existing Docker-related plugins, like Docker build step plugin or CloudBees Docker Custom Build Environment Plugin.\n\nThe Kubernetes Plugin implements a cloud provider for Jenkins, and can create agents based on Docker images on-demand on your Kubernetes cluster or the Google Cloud Platform.\n\nWatch Kohsuke demoing Jenkins/Kubernetes integration at OSCON earlier this week.\n\nFor a more in-depth look at how you can use Kubernetes with Jenkins, check out these posts on the CloudBees blog by Tracy Kennedy:\n\nOrchestrating deployments with Jenkins Workflow and Kubernetes\n\nOn-demand Jenkins agents with Kubernetes and the Google Container Engine\n\nClustering Jenkins with Kubernetes in the Google Container Engine","title":"Integrating Kubernetes and Jenkins","tags":["general","plugins","video"],"authors":[]}},{"node":{"date":"2015-06-22T00:00:00.000Z","id":"0d6ef858-0d8a-57e0-9351-e15f94b7e563","slug":"/blog/2015/06/22/new-wiki-url-requirement-for-plugins/","strippedHtml":"Let’s say you’re browsing the 'Available' tab in the Jenkins plugin manager for interesting-looking plugins. How do you learn more about them, preferably without installing them on your production instance? You click the plugin’s name, which usually links to the plugin’s wiki page, of course!\n\nUnfortunately, it’s possible for plugins to be published without a wiki page, or any other documentation aside from what’s provided in the plugin itself. This is really unfortunate, as users rely on wiki pages and similar documentation to learn more about a plugin before installing or upgrading it, like its features, limitations, or recent changes. Additionally, plugin wiki pages have a special section at the top that provides an automatically generated technical overview of the plugin, such as dependencies to other plugins, the minimum compatible Jenkins version, a list of developers, and links to the source code repository and issue tracker component. Everyone learning about or using a plugin benefits from a plugin wiki page and luckily, almost all plugins have one!\n\nTo ensure that every plugin has at least a basic wiki page with some documentation, we decided to only publish plugins in the Jenkins update center that have and link to a wiki page. To keep the impact to a minimum, we’re implementing this plan in several stages.\n\nThe first stage went live on June 1: All existing plugins that don’t have a (valid) wiki link got a wiki link assigned by the update center (a so-called 'override'), either to an existing wiki page if there was one, or a generic\"This plugin has no documentation\" wiki page otherwise. This ensures that no currently existing plugins get dropped from the update center at this point. Of course, new plugins that don’t provide a wiki URL and don’t have an override URL will not show up at all.\n\nThe second stage will be enabled later this year: We’re planning to remove all the overrides mentioned above. At this point, plugins may get removed from the update center if they still don’t specify a wiki URL. Of course this isn’t our goal, and we’ll try to work with plugin authors to prevent this from happening.\n\nSo what can you do? Check the current overrides list to see whether the plugins you care about are affected, and if so, see the landing page in the wiki to learn what you can do. If you have any questions about this process not covered by the wiki, ask us on the Jenkins developers mailing list.","title":"New Wiki URL Requirement for Plugins","tags":["general","meta","plugins"],"authors":[]}},{"node":{"date":"2015-03-06T00:00:00.000Z","id":"903172dd-2b46-5e97-beaa-f5ef62e66756","slug":"/blog/2015/03/06/google-apps-sso-no-longer-supported-in-jenkins-openid-plugin/","strippedHtml":"+\n_This is a guest post from Owen Mehegan (aka autojack)_ +\n +\n\n+\n\n+\nhttps://commons.wikimedia.org/wiki/Sunset[image:https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Sunset_Marina.JPG/320px-Sunset_Marina.JPG[image,width=200]] +\n\n+\n\n+\nIn 2014 Google announced that they will be shutting down their OpenID 2.0 authentication endpoint and replacing it with Google+ Sign-in, a library built on top of OpenID Connect. *The old Google endpoint will shut down on April 20th, 2015!* Accordingly, if you are using the Jenkins OpenID plugin to authenticate users with the ‘Google Apps SSO’ feature (typically when Google hosts your personal or corporate email), you need to upgrade. Ryan Campbell took the initiative to develop the new Google Login plugin which implements the Google+ Sign-in functionality. This is the recommended solution going forward. Follow the steps https://wiki.jenkins.io/display/JENKINS/Google+Login+Plugin[here] to configure it for your site. *Note that you DON’T need to have a Google+ social network account/profile. Any Google account can be used.* +\n +\n\n+\nIf you find yourself locked out of your Jenkins system after the old endpoint is shut down you will need to follow the steps https://wiki.jenkins.io/display/JENKINS/Disable+security[here] to disable Jenkins security temporarily. Then you can connect without authentication and switch to the Google Login plugin. You will probably want to uninstall the old OpenID plugin at that point as well. +\n +\n\nReferences:\n\n+\n\nShutdown announcement from Google\n\nJENKINS-23431, bug tracking this fix\n\nOld OpenID plugin\n\nNew Google Login plugin\n\n+","title":"Google Apps SSO no longer supported in Jenkins OpenID plugin","tags":["development","guest post","plugins"],"authors":[]}},{"node":{"date":"2015-01-27T00:00:00.000Z","id":"7f758f44-fcee-5b27-9f8f-3bdc71029a9f","slug":"/blog/2015/01/27/office-hours-tomorrow-workflow-security-model-and-plugin-compatibility/","strippedHtml":"+\nhttps://plus.google.com/events/c4eagqodepqojlrv7glhc1ctg48[In tomorrow's Jenkins office hours], Jesse Glick will talk about two topics in the workflow plugin that he has been asked about: +\n +\n\nSecurity model: script security, permissions\n\nPlugin compatibility: SimpleBuildStep and friends, custom steps, etc.\n\n+\n+\n\n+\nThe session should be interesting to anyone using workflow or thinking about using workflow. Jesse is one of the top contributors in the community, so it'd be definitely worth your time! +","title":"Office Hours tomorrow: workflow security model & plugin compatibility","tags":["general","news","plugins","screencast","video","pipeline","workflow"],"authors":[]}},{"node":{"date":"2014-12-03T00:00:00.000Z","id":"fadbff98-025d-5ffb-9418-de5aacfe3546","slug":"/blog/2014/12/03/workflow-plugin-is-1-0/","strippedHtml":"Jenkins started with a notion of jobs and builds at heart. One script is one job, and as you repeatedly execute jobs, it creates builds as records. As the use case of Jenkins gets more sophisticated, people started combining jobs to orchestrate ever more complex activities.\n\nA number of plugins have been developed to enable all sorts of different ways to compose jobs, and many are used quite successfully in production. But this resulted in a certain degree of complexity for users to figure out how to assemble these plugins.\n\nSo we felt the need to develop a single unified solution that subsumes all these different ways to orchestrate activities that may span across multiple build agents, code repositories, etc. Various inputs from users as well as other plugin developers played a key role.\n\nThe result of this is the workflow plugin, which is what a number of us, including Jesse Glick an myself, are focused on in the past few months.\n\nThe plugin approaches the problem by defining a DSL for you to describe an execution of a job. Various convenient primitives are available, such as executing shell scripts, checking out the source code, obtaining an executor or a build workspace, etc. All sorts of classic existing plugins contribute their functionalities into this DSL, such as recording test results, fingerprints, or calling into other existing jobs. This allows you to leverage higher-level functionalities and report comprehension capability into a workflow. Similarly, you can leverage the ability of Groovy, the host language of workflow DSL, to define control flows, abstractions, and reuse.\n\nA key feature of a workflow execution is that it’s suspendable. That is, while the workflow is running your script, you can shut down Jenkins or lose a connectivity to a agent. When it comes back, Jenkins will still remember what it was doing, and your workflow script resumes execution as if it was never interrupted. A technique known as the \" continuation-passing style\" execution plays a key role in achieving this.\n\nI’m very happy to report that the workflow plugin is finally 1.0. This version runs on the latest 1.580-based LTS. and we created a docker image for you to play with too. There’s also a JUC presentation that explains this. We are working toward 1.0 release within this year, and in the meantime, the syntax is stable enough to allow you to start designing workflows today.\n\nWe’ve been hearing a lot of good feedbacks and enthusiasm for this new effort. Please let us know what you think.","title":"Workflow plugin is 1.0","tags":["development","plugins","pipeline","workflow"],"authors":[]}},{"node":{"date":"2014-10-06T00:00:00.000Z","id":"6d0461f6-898e-51fd-93b3-8b25ee763309","slug":"/blog/2014/10/06/gradle-fy-your-jenkins-plugin-project/","strippedHtml":"(This is a guest post from Daniel Spilker)\n\nJenkins supports building plugins using Gradle for a while now. Last week a new version of the Gradle JPI plugin has been released to iron out some issues.\n\nThe Gradle JPI plugin enables a 100% groovy plugin development environment with Groovy as primary programming language, Spock for writing tests and Gradle as build system. Have a look at the Job DSL plugin for an example.\n\nAn existing Maven build can be converted to Gradle by using the build.gradle template from the Gradle JPI plugin’s README. For instance, the POM from the Gradle plugin translates to this build.gradle file:\n\nbuildscript {\n    repositories {\n        mavenCentral()\n        maven {\n            url 'https://repo.jenkins-ci.org/releases/'\n        }\n    }\n    dependencies {\n        classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.6.0'\n    }\n}\n\napply plugin: 'jpi'\n\ngroup = 'org.jenkins-ci.plugins'\nversion = '1.25-SNAPSHOT'\n\njenkinsPlugin {\n    coreVersion = '1.480'\n    displayName = 'Jenkins Gradle plugin'\n    url = 'https://wiki.jenkins.io/display/JENKINS/Gradle+Plugin'\n    gitHubUrl = 'https://github.com/jenkinsci/gradle-plugin'\n\n    developers {\n        developer {\n            id 'gbois'\n            name 'Gregory Boissinot'\n            timezone '+1'\n        }\n    }\n}\n\ndependencies {\n    compile 'org.jenkins-ci.lib:dry-run-lib:0.1'\n}\n\nUsage of the Gradle JPI plugin is similar to working with the Maven HPI plugin. Use gradle jpi to build the plugin file. gradle check runs the tests, gradle install copies the plugin into the local Maven repository, gradle uploadArchives deploys the plugin to the Jenkins Maven repository and gradle server starts a Jenkins development server with the plugin installed.\n\nIt is recommended to use Gradle 1.8 because that is the version used to build and test the Gradle JPI plugin.\n\nFor the next release it is planned to do some maintenance like fixing code style issues and adding tests. After that more issues need to be addressed to bring the plugin on par with the Maven HPI plugin, most notably fixing the test dependencies ( JENKINS-17129) and publishing the plugin’s JAR ( JENKINS-25007). Updating Gradle to 2.x and getting the plugin on the Gradle plugin portal is also on the wishlist.","title":"Gradle-fy your Jenkins Plugin Project","tags":["general","guest post","plugins"],"authors":[]}},{"node":{"date":"2014-08-28T00:00:00.000Z","id":"9b8568a6-9659-597e-80e4-a3f253035618","slug":"/blog/2014/08/28/workflow-plugin-code-walk-through/","strippedHtml":"Jesse and I will walk through the source code of the workflow plugin, highlights key abstractions and extension points, and discuss how they are put together.\n\nIf you are interested in developing or retrofitting plugins to work with workflows, I think you’ll find this session interesting.\n\nThe event will be on Google Hangout tomorrow. The time of the day is the same as usual office hours.","title":"Workflow plugin code walk-through","tags":["development","meetup","plugins","screencast","tutorial","pipeline","workflow"],"authors":[]}}]}},"pageContext":{"tag":"plugins","limit":8,"skip":80,"numPages":14,"currentPage":11}},
    "staticQueryHashes": ["3649515864"]}