{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/VSCode",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-02-25T00:00:00.000Z","id":"b35e3ed8-c5a3-59da-9d68-6292f2b2e520","slug":"/blog/2020/02/25/vscode-caseStudy/","strippedHtml":"Configuration-as-code plugin\n\nProblem Statement: Convert the existing schema validation workflow from the current scripting language in the Jenkins Configuration as Code Plugin to a Java based rewrite thereby enhancing its readablity and testability supported by a testing framework for the same. Enhance developer experience by developing a VSCode Plugin to facilitate autocompletion and validation which would help the developer write correct yaml files before application to a Jenkins Instance.\n\nThe Configuration as Code plugin has been designed as an opinionated way to configure Jenkins based on human-readable declarative configuration files. Writing such a file should be feasible without being a Jenkins expert, just translating into code a configuration process one is used to executing in the web UI. The plugin uses a schema to verify the files being applied to the Jenkins instance.\n\nWith the new JSON Schema being enabled developers can now test their yaml file against it. The schema checks the descriptors i.e. configuration that can be applied to a plugin or Jenkins core, the correct type is used and help text is provided in some cases. VSCode allows us to test out the schema right out of the box with some modifications. This project was built as part of the Community Bridge initiative which is a platform created by the Linux Foundation to empower developers — and the individuals and companies who support them — to advance sustainability, security, and diversity in open source technology. You can take a look at the Jenkins Community Bridge Project Page\n\nSteps to Enable the Schema Validation\n\na) The first step includes installing the JCasC Plugin for Visual Studio Code and opening up the extension via the extension list. Shortcut for opening the extension list in VSCode editor using Ctrl + Shift + X.\n\nb) In order to enable validation we need to include it in the workspace settings.\nNavigate to File and then Preference and then Settings. Inside settings search for json and inside settings.json include the following configuration.\n\n{\n\"yaml.schemas\": {\n        \"schema.json\": \"y[a]?ml\"\n    }\n}\n\nYou can specify a glob pattern as the value for schema.json which is the file name for the schema. This would apply the schema to all yaml files. eg:.[y[a]?ml]\n\nc) The following tasks can be done using VSCode:\n\na) Auto completion (Ctrl + Space):\n  Auto completes on all commands.\n\nb) Document Outlining (Ctrl + Shift + O):\nProvides the document outlining of all completed nodes in the file.\n\nd) Create a new file under the work directory called jenkins.yml. For example consider the following contents for the file:\n\njenkins:\n  systemMessage: “Hello World”\n  numExecutors: 2\n\nThe above yaml file is valid according to the schema and vscode should provide you with validation and autocompletion for the same.\n\nScreenshots\n\nWe are holding an online meetup on the 26th February regarding this plugin and how you could use it to validate your YAML configuration files.\nFor any suggestions or dicussions regarding the schema feel free to join our gitter channel.\nIssues can be created on Github.","title":"Validating JCasC configuration files using Visual Studio Code","tags":["community-bridge","JCasC","VSCode","community"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/author/sladyn98","twitter":"SladynN"}]}},{"node":{"date":"2019-10-08T00:00:00.000Z","id":"a535bdaf-c81a-500c-8263-825803a1797a","slug":"/blog/2019/10/08/jcasc-phase1-blog/","strippedHtml":"Community Bridge Introduction\n\nCommunity Bridge is an initiative by the Linux Foundation to accelerate the adoption, innovation and sustainability of open source projects. I came across this initiative in a blog post. I had been contributing to Jenkins at the time and decided to have a chat with Oleg Nenashev and Tracy Miranda regarding the possibility of a project under the Community Bridge initiative. Fortunately for me JCasC ( Jenkins Configuration as Code) had the mentors as well as the project idea in place to start a project. After a few regular meetings we ironed out the details of the programme and on August 7th I began with my journey!\n\nJCasC Developer Tools — JSON Schema\n\nJSON files when submitted to a server undergo a validation to determine whether the values and the format are correct and that they conform to a well defined schema, this schema is known as a JSON Schema. A YAML file can also be validated using a JSON Schema.\nThe main premise of JCasC is to load YAML files written by developers into the Jenkins instance. An example of a JCasC YAML file is:\n\n---\njenkins:\n systemMessage: “Hello World”\n numExecutors:2\n ---\n\nThe above YAML configuration will configure Jenkins to display a message Hello world with the number of executors set to two. In order to validate the YAML we have a schema. This schema is written using jelly files (Executable XML files) and currently it is not a valid schema. The first phase of the project is based around rewriting the schema generation to java and developing a better test framework for it, because currently the schema is not testable.\n\nPhase 1 — JCasC Dev Tools\n\nThe first week I got into studying how the schema was generated.With the support of two of my awesome mentors Tim Jacomb and Joseph Peterson\nI finally got an understanding of the current schema.\nSo JCasC has a set of configurators for describing a YAML file.\nThey are:\na) Base Configurators\nb) Hetero Describable Configurators\nc) Data Bound Configurators\nThese configurators together successfully describe a YAML file.\nWe proceeded to generate the schema with the help of individual description of each of these configurators.\nThe JSON Schema has a set of components, consider the above yaml file as an example:\n\n---\n{\n  \"jenkins\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"systemMessage\": {\n        \"type\": \"string\"\n      },\n      \"numExecutors\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n---\n\nSo here Jenkins is the base configurator and it has a set of attributes viz systemMessage and numExecutors, so our schema needs to be able to describe a set of attributes for every field in the schema. Some of the fields that our JSON Schema uses to describe the YAML are:\n\n1) type : String, int, Boolean etc.\n\n2) properties : A set of fields describing the part field.\n\n3) id: Unique Identifier for the field\nThus the above schema successfully verifies the YAML configuration.\n\nJAVA Rewrite\n\nWe used JSON Objects to build components of the schema.The basic flow that is followed to generate the schema is as follows:\n\na) Iterate through the Base Configurators.\n\nb) Iterate over the list of Base Configurator.Attributes and add each attribute to the schema.\n\nc) Iterate over the HeteroDescribable Configurators and add each configurator to the schema along with its required properties.\n\nThe set of PR’s Resolved during Phase 1 are as follows:\n\na) Basic Schema\n\nb) Schema Doc Page\n\nc) Test Framework\n\nd) Nested Schema\n\nThat is all from me guys, I am currently preparing for phase 2 and working towards fixing any pending issues of Phase 1. Thanks for reading.\n\nPhase 2 Goals:\n\nWe would primarily target VSCode integration in phase 2 with the aim of:\n\na)Validation of JCasC YAML files with the schema\n\nb)Autocompletion\n\nc)Integration with a live Jenkins instance.\n\nContributions\n\nWe would love to get feedback from you on the stuff we are working on. Contributions to the project would be highly appreciated.\n\na) Gitter Chat\n\nb) Github Repository\n\nc) Project Introduction","title":"JCasC Community Bridge Dev Tools - Phase 1","tags":["community-bridge","JCasC","VSCode","community"],"authors":[{"avatar":null,"blog":null,"github":"sladyn98","html":"<div class=\"paragraph\">\n<p>Sladyn is a Computer Science student at Mumbai University, India.\nHe is participating in Community Bridge 2019 to provide development tools to JCasC plugin in the form of IDE integrations, schema architecture improvements and configuration extension points <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code Plugin</a>.</p>\n</div>","id":"sladyn98","irc":null,"linkedin":null,"name":"Sladyn Nunes","slug":"/blog/author/sladyn98","twitter":"SladynN"}]}}]}},"pageContext":{"tag":"VSCode","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}