{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/gsoc/page/7",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-11-13T00:00:00.000Z","id":"7987b7c8-a622-559a-9886-2bb78562c4ac","slug":"/blog/2018/11/13/martinda-gsoc-mentor-summit-experience/","strippedHtml":"This year, the Jenkins organization participated in the Google Summer of Code Mentor Summit\nat the Google office in Sunnyvale on Oct 12, 13 and 14, 2018.\nThe GSoC Mentor Summit is where mentors of all organizations participating in the GSoC program are invited each year\nto learn and network with mentors from other organization, and make GSoC a better program.\nThis is the second time Jenkins mentors have participated in the summit, the first time was in 2016.\n\nExceptionally, three Jenkins GSoC mentors were invited to the summit this year.\nNormally only two mentors are invited, but when there are cancellations, Google draws a name at random from the waiting list,\nand the Jenkins organization was lucky enough and sent an extra mentor this year!\nThe mentors participating this year were Oleg Nenashev, Jeff Pearce and Martin d’Anjou.\n\nIt is worth mentioning that the Mentor Summit is not a typical conference where you go\nsit and listen at what speakers have to say, quite the contrary. The Mentor Summit is an unconference\nwhere participants are invited to fill empty time slots with their own topic of discussion.\n\nFriday Oct 12\n\nPre-conference meeting\n\nThe mentors had a short pre-conference meeting to reflect on the Jenkins participation in the 2018 GSoC program,\nand to plan for 2019.\nWe were joined at this meeting by Lloyd Chang, whom we had met at Jenkins World 2018.\nThank you Lloyd for joining us! A few ideas we had for 2019 are:\n\nMove project proposals to individual Google Documents\n\nCreate a template for project proposed by potential mentors and by project champions\n\nCreate an Organization Administrator Guide for future Jenkins GSoC project admins\n\nOther preparations we agreed to work on include a review of the 2018 feedback and the creation\nof an Epic capturing the action items in preparation for 2019.\nWe are also planning on making progress on the GSoC Budget process described in JEP-8.\n\nSummit Starts!\n\nThe summit started by a welcoming dinner at the Google Cafeteria and an evening session\nwhere we were explained how the unconference would work. We proposed a few topics:\ndealing with CPT lost slots, motivating mentors, and Open Source Hardware ASIC/FPGA.\n\nOn thing to say is that everyone at the conference had heard of Jenkins, or was already using Jenkins.\nLots of people came to tell us their Jenkins experience.\n\nI noticed this too - made me feel proud to be part of the Jenkins project.\n\n— Jeff Pearce\nJenkins GSoC mentor in 2018\n\nSaturday Oct 13\n\nThe morning started with a couple of announcements from Google.\nThe first one was that Google is thinking of creating a program called \"Google Season of Docs\" (GSoD for short),\nwhere technical writers would be paired with Open Source Organizations to help them write documentation such as:\n\nHigh-impact tutorials\n\nSet of How-To Guides\n\nContributor’s Guide\n\nDocumentation refactoring\n\nPlain documentation\n\nWe have additional details regarding this in the\nGSoC Mentor Summit Notes\nand we quickly concluded that if this program comes to life, Jenkins should be a participating organization.\n\nThe other announcement made by the GSoC administrators is that GSoC may take a different form in 2020.\nHowever, not much more information has been made available at this time.\nThe program has been operating for 13 years, and in 2020 it will have been 15 years.\n\nThe announcements were followed by a series of morning lightning talks.\nThis is where organizations showcase what their students accomplished during the program.\nThis is when we had a bit of a surprise…​\n\nOleg who had signed up for the evening lightning talks, was watching the talks while casually preparing slides for his evening presentation.\nBut something unusual happened: many talks were shorter than the 3-minute allotted, and suddenly we were ahead of schedule.\nThat’s when Oleg was called to the stage.\nI had no idea whether his slides were ready or not since he had just leaned over to me to say that he wanted to talk about all 3 projects we had this year.\nNot knowing how far he had gotten into refactoring the slides, this was going to be…​ interesting.\nBeing an experienced presenter, Oleg pulled it off brilliantly.\nThe slides were effectively ready (how he managed that I have no idea),\nbut you can see the slides of his lightning talk here:\nJenkins Remoting over Apache Kafka.\n\nThen there were the unconference sessions. Some of the sessions we attended are:\n\nDocumentation\n\nAttracting and retaining mentors (facilitated by Martin)\n\nOrganizing and motivating volunteers and mentors\n\nGetting students from coding/boot camps involved in open source\n\nRetaining students after GSoC\n\nOpen Event management System\n\nGSoC Feedback\n\nWe have notes for all the session in the main document.\nSome sessions were captured in separated documents which are linked from the main document, or from this blog post.\n\nThere were lots of good ideas in those sessions, and we will do what we can next year to implement some of them.\n\nSome organizations have said that the key for student retention\nis to give them responsibilities and tasks after the program is over.\nWe have certainly seen that this year, with one of our students asking for more responsibilities and wanting to know how\nhis plugin project could continue to grow within the Jenkins project (while at the same time help out on another GSoC plugin!).\n\nIn the evening was the second round of lightning talks.\nJeff Pearce presented the Code Coverage API Plugin lightning talk,\n(he was not caught by surprise).\n\nAfter the lightning talks, we were invited to hang out at the cafeteria and on the patio, to exchange stickers,\nnetwork with mentors of other organizations, and enjoy late evening snacks, music and of course the chocolate table!\n\nSunday Oct 14\n\nOn Sunday, the sessions continued. An interesting session was \"Beyond GSoC, What can Google do?\".\nOne person got a big round of applause when he said: \"Cloud credits\". It turns out the GSoC program admins\nhave been trying to get that for us for about 3 years. Google may be big and powerful, but some things\nare hard and remain hard in the corporate world.\n\nAn interesting suggestion was made by Oleg, and it would be to have a program with smaller, shorter term\ncommitments, something that would encourage more granular contributions but would not require a 4-month\nlong commitment. This was noted by the GSoC program admins.\n\nThen we attended a number of sessions:\n\nOpen Hardware ASIC/FPGA (facilitated by Martin)\n\nCommunity Metrics\n\nOutreachy (Jenkins is participating in this program)\n\nFailing a student\n\nBurnout (of mentors and org admins)\n\nThen the day came to an end with some last words by Google thanking all the mentors and volunteers who\nrun this program in their organizations.\n\nReturn trip\n\nI would now like to add a personal note. After the summit, like many others I fly back home,\nso I spend the evening at the SFO international terminal waiting for my late night flight.\nThat is where I get to meet more mentors, as some of us still wear our badges and T-Shirts,\nand also recognize each other from being at the conference.\nAnd funny enough, there are so many geeks at that terminal\nthat we may have recruited, among the passengers, a mentor to another org for next year!\n\nWant a GSoC student to work on your project in 2019?\n\nWe have already started the preparations for GSoC 2019.\nAnd we cannot do this without the participation of the Jenkins community.\nWe are already looking for:\n\nMentors from the Jenkins Special Interest Groups\n\nMentors from any background and any provenance (being a Jenkins developer is NOT required)\n\nProject proposals\n\nStudents and their proposals\n\nLots of people are afraid that mentoring a student will take a lot of their time.\nIf you feel that way, you are not alone. It does take some time. In my case, I spend 5 to 8 hours per week on mentor tasks (more at the start, less at the end).\nTo make it easier on mentors who likely have full time jobs and life commitments, we define different mentor roles:\n\nProject champion co-mentor : this is the mentor who proposes the idea, but may not have all the Jenkins code expertise needed. This mentor works with the student to define the project and acts mostly as a \"customer\" of the project. This mentor usually know enough about coding to comment on pull-requests with regards to the over quality, style and features of the code.\n\nTechnical co-mentor : this is the mentor who knows enough about the Jenkins code to guide the student on coding, and to provide Jenkins specific code reviews on pull-requests, but has limited involvement outside the coding activity of the student.\n\nThere is a third role which is:\n\nSubject Matter Expert : these individuals are not mentors, but we reach out to them 3-4 times during the project for advice and guidance, and sometimes complicated programming challenges.\n\nIf you have questions or are curious about the program,\ncontact us on the GSoC Gitter SIG chat.\n\nWe would like to emphasize that project proposals are not limited to \"big projects\".\nFor example, it is perfectly fine to have a proposal that is a collection of related Jira issues that aim to improve your project,\nor a list of tasks that need to be done for your project.\nWriting documentation is outside the scope of GSoC, but automating\ndocumentation generation, as long as it is mostly about writing code, is within the scope of GSoC.\n\nWe look forward working with the Jenkins community on GSoC 2019!","title":"Google Summer of Code Mentor Summit 2018","tags":["community","events","gsoc","gsoc2018"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"martinda","html":"<div class=\"paragraph\">\n<p>Martin is a Jenkins community member. He participates since 2016 in the Jenkins GSoC program as a mentor, and more recently as an organization admin.\nHe currrently works in ASIC/FPGA Development Automation, using Jenkins, Gradle, Make, Artifactory, and a million other tools and languages.</p>\n</div>","id":"martinda","irc":"martinda","linkedin":null,"name":"Martin d'Anjou","slug":"/blog/author/martinda","twitter":"martindanjou14"}]}},{"node":{"date":"2018-10-14T00:00:00.000Z","id":"c5377da5-1ab5-51ab-994c-510bae06a710","slug":"/blog/2018/10/14/gsoc2018-results/","strippedHtml":"It has been a while since the last blogpost about Google Summer of Code in Jenkins.\nGSoC 2018 has officially finished on August 23, and we had a Jenkins Online Meetup where we had final presentations of the GSoC projects.\nIt is never late to provide more context, so I would like to summarize the results and provide updates of what was happening in Jenkins GSoC Special Interest Group over last 2 months.\nIn this blogpost you can find project status overviews and updates from the Jenkins GSoC SIG.\n\nBut first of all, I would like to thank all our students, their mentors\nand to all other contributors who proposed project ideas, participated in student selection, community bonding and further reviews.\nGoogle Summer of Code is a major effort which would not be possible without active participation of the Jenkins community\n\nSummary\n\nThis year we started preparing for Google Summer of Code in early December.\n14 project ideas and 12 potential mentors we published on our website,\nand we got dozens of students reaching out to us during the application period.\nAfter processing applications, we have selected 4 applications for GSoC.\nUnfortunately one project got cancelled due to student eligibility issues.\n\nSo, we had the following projects:\nCode Coverage API plugin, Remoting over Apache Kafka, and Simple Pull-Request Job Plugin\n(also known as Pipeline as YAML).\nAll these projects have a significant value to the Jenkins community.\nThey were focused on areas which have been discussed in the community for a long time,\nbut which had no progress so far.\nGoogle Summer of Code allowed us to kick-start these projects,\nand to make significant progress there.\nAll projects have been released and made available in the Jenkins community (common or experimental update centers).\n\nIn total there were 9 blogposts about GSoC projects on jenkins.io,\nand also 2 Jenkins Online Meetups.\nGSoC results have been also presented at DevOps World - Jenkins World conference and the contributor summit.\n\nCode Coverage API Plugin\n\nStudent: Shenyu Zheng, Henan University, China\n\nMentors:\nJeff Pearce,\nSteven Christou,\nOleg Nenashev,\nSupun Wanniarachchi\n\nProject page\n\nThere are many code coverage plugins in Jenkins: Cobertura, JaCoCo, Emma, etc., etc.\nThe problem with these plugins is that each of them implements all code coverage features on their own.\nSo you get different feature sets, UIs, CLI commands and REST APIs.\nThe idea of this project was to unify the existing functionality and offer a new API plugin which other plugins could extend.\nIt would help to simplify existing plugin and to create new plugins for coverage tools.\n\nThe project has started really well, and we had the first demo after a week of coding.\nThen Shenyu continued extending the plugin’s functionality over coding periods.\nHere is the list of the key features offered by the plugin:\n\nFlexible data structure for defining and storing coverage metrics within Jenkins\n\nCoverage charts and trends\n\nSource code navigation\n\nREST API for retrieving coverage stats and trends\n\nReport aggregation for parallel steps\n\nExtension points which allow integrating other plugins\n\nIn addition to the Code Coverage API Plugin,\nShenyu added integration to the Cobertura Plugin and also created a new llvm-cov plugin which is expected to be released soon.\n\nAfter GSoC Shenyu continued contributing to the Jenkins project.\nHe works on the Code Coverage API plugin and also participates in the Chinese Localization SIG.\n\nSimple Pull-Request Job Plugin\n\nStudent: Abhishek Gautam, Visvesvaraya National Institute of technology, India\n\nMentors:\nMartin d’Anjou,\nJeff Knurek,\nKristin Whetstone\n\nProject page\n\nThis project focused on introducing a way to\neasily define pull-request build job definitions in YAML.\nThis project has been shaped a lot during the application period and community bonding,\nso that the project fit the existing Jenkins Ecosystem better.\nFinally it was decided to build the new plugin on the top of Pipeline: Multi-Branch Plugin.\nThere was also an idea to offer extra syntax sugar, templating and automatic resolution for common flows,\nso that users need less time to define Pipelines for common use-cases.\n\nThe plugin allows defining Pipeline jobs as YAML being stored in SCM.\nOriginal design presumed a new job type,\nbut during community bonding and Phase 1 prototyping it was decided to build the plugin on the top of the existing Pipeline ecosystem and extension points.\nCurrently the plugin generates Declarative Pipeline code from YAML so that it gets a lot of Pipeline features out-of-the box.\nIn addition to that, Simple Pull Request Job Plugin uses a an engine provided by the Configuration as Code plugin to convert YAML snippets\nto Pipeline step definitions.\n\nThe plugin has been well described by Abhishek in his Pipeline as YAML blogpost in August.\nCurrently it is available in the Experimental Update Center as an alpha version.\nPham Vu Tuan, one of our GSoC students, have also joined the plugin team.\nAt the DevOps World - Jenkins World hackfest we had discussions with the Jenkins Pipeline team,\nand we have a plan towards making this plugin available as an Incubated Pipeline project.\nThe final implementation may change,\nbut in any case the project gave us a working prototype and a lot of information about  obstacles we need to resolve.\n\nRemoting over Apache Kafka\n\nStudent: Pham Vu Tuan, Nanyang Technological University, Singapore\n\nMentors:\nOleg Nenashev,\nSupun Wanniarachchi\n\nProject page\n\nLast but not least, Remoting over Kafka is another challenging project we had.\nTo implement communication between its controllers and agents, Jenkins widely uses home-grown protocol implementations based on TCP\n( JNLP 1..4 protocols).\nThere are some performance and stability implementations,\nand there have been discussions about using an industry-standard message bus or queue.\nPham Vu Tuan proposed to use Apache Kafka for it,\nand after some experiments during community bonding and first coding phase we agreed to go forward with this implementation.\n\nDuring his project Vu Tuan extended Jenkins Core and Remoting to allow implementing an agent communication channel in a plugin.\nThen he has created a new Remoting over Kafka plugin\nwhich is now available in the main Jenkins Update cente.\nOnce the plugin is installed, it is possible to connect to agents over Apache Kafka and execute all types of Jenkins jobs there.\nThere are also official jenkins/remoting-kafka-agent images available on DockerHub.\n\nVu Tuan continued contributing to the Jenkins project after GSoC, currently he maintains the Remoting over Kafka plugin.\nHe visited the DevOps World - Jenkins World US conference in September, presented his GSoC project at the\nJenkins Contributor Summit.\nYou can find his slides here.\nAfter the conference he also participated in the hackfest where he helped to migrate Jenkins' DNS services to Microsoft Azure.\n\nWhat could we do better?\n\nAfter the end of GSoC we had a Retrospective with GSoC students and mentors.\nWe discussed the issues we encountered during the projects,\nand ways to improve the student and mentor experience.\n\nMain takeaways for us:\n\nGSoC projects should be aligned with Jenkins Special Interest Groups (SIGs) or subprojects in order to get a wider list of stakeholders\nProjects should be aligned with SIG priorities when possible\n\nIn addition to GSoC SIG meetings and Jenkins Online Meetups during student evaluation,\nwe should also run regular status updates within SIGs so that there more contributors involved in projects\n\nWe should invest more time into forming mentor teams before the application period starts.\nThis year there were changes in mentor teams after the community bonding started, and it complicated the work\n\nWe should pay more attention to student eligibility.\nThis year we started from 4 projects, but unfortunately one project (EDA plugins for Jenkins) got cancelled due to the visa limitations the student had.\n\nWe should do regular office hours for mentors/students so that it is possible to exchange information between GSoC projects within the organization.\nThis year we cancelled them at the end of phase and relied only on regular project meetings and mailing lists, but this is not enough.\n\nFor me personally the main takeaway is also to reduce direct involvement into the project as a mentor and technical advisor.\nDoing org administration, logistics and mentorship is not good from a bus factor PoV,\nand I believe I was pushing my vision too hard in few cases.\nWill do my best to prevent it next year.\n\nIf you want to share your feedback and ideas,\nplease reach out to us using the GSoC mailing list.\n\nWhat’s next?\n\nIn order to improve GSoC organization in Jenkins,\nwe have have created a GSoC Special Interest Group which will be running non-stop as other SIGs in Jenkins.\nThe objective of the SIG is to organize GSoC, work with potential students/mentors,\nand to help students stay involved in the community after GSoC ends.\nIn this SIG we will have monthly meetings to sync-up on GSoC.\nIf you are interested to contribute, please join the SIG.\n\nAccording to the Retrospective, next year we plan to invest more\ninto communication with mentors.\nWe will also try to tie new project proposals to Jenkins\nSpecial Interest Groups so that the students become a part\nof ongoing coordinated efforts.\nThis weekend Martin d’Anjou, Jeff Pearce and me are participating in the GSoC Mentor summit to share experiences and to study from other GSoC organizations.\nOn October 17 we will have a GSoC SIG meeting to discuss our experience and to discuss next steps.\n\nIn addition to that,\nJenkins Google Summer of Code will be presented at DevOps World - Jenkins World Nice and at the contributor summit.\nIf you plan to visit the conference and you are interested to participate in Google Summer of Code and other community activities,\nplease join us at the contributor summit or stop by at the community booth.\n\nAnd, elephant in the room…​ GSoC 2019.\nOf course we are going to apply, stay tuned for new announcements.\nWe have already started collecting project ideas for the next year.\nIf you are interested to participate as a student or mentor,\nplease reach out to us using the GSoC SIG mailing list.","title":"Jenkins in Google Summer of Code 2018 Results","tags":["community","events","gsoc","gsoc2018"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-08-17T00:00:00.000Z","id":"e4121dfc-f5a5-57b7-b1e0-733189f8140a","slug":"/blog/2018/08/17/code-coverage-api-plugin-1.0-release/","strippedHtml":"I am happy to announce availability of Code Coverage API. These plugins have been recently released as 1.0, and they are now available in the Jenkins Update Center. In this blogpost I will introduce the features and project structure of Code Coverage API plugin.\n\nMy name is Shenyu Zheng, and I am an undergraduate student in Computer Science and Technology at Henan University from China.\n\nOverview\n\nCode Coverage API plugin is one of GSoC 2018 Jenkins projects.\n\nThere are a lot of plugins which currently implement code coverage; however, they all use similar config, charts, and content. So it would be much better if we could have an API plugin which does the most repeated work for those plugins and offers a unified API which can be consumed by other plugins and external tools.\n\nMy mentors are Steven Christou, Supun Wanniarachchi, Jeff Pearce and Oleg Nenashev.\n\nSupported Coverage Formats\n\nEmbedded\n\nJaCoCo\n\nOther plugins as an Extension of Code Coverage API plugin\n\nCobertura ( Cobertura Plugin)\n\nllvm-cov ( llvm-cov Plugin)\n\nFeatures\n\nModernized coverage chart\n\nCoverage trend\n\nSource code navigation\n\nParallel pipeline support\n\nReports combining\n\nREST API\n\nFailed conditions and flexible threshold setting\n\nOther small features\n\nModernized Coverage Chart\n\nIn the summary chart we can see the coverage summary of current coverage metric.\n\nIn the child summary chart, we can see the coverage summary of each child, also, we can use the range handler to filter item we want to see to reduce the chart size. If we want to see coverage details of the child, we can click the child name to see more information.\n\nCoverage Trend\n\nWe also support coverage trend to show coverage metrics changing between builds.\n\nSource Code Navigation\n\nYou can enable source code navigation by specifying Source File Storing Level to save last build source files (enable source files navigation in current and last build) or save all build source files (enable source files navigation in all builds).\n\nYou can see source file with coverage information on File level coverage page.\n\nParallel Pipeline Support\n\nWe support parallel pipeline. You can call the Code Coverage API plugin in different branches like this:\n\nnode {\n    parallel firstBranch: {\n        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')]\n}, secondBranch: {\n        publishCoverage adapters: [jacocoAdapter('jacoco.xml')]\n    }\n}\n\nReports Combining\n\nYou can add tag on publishCoverage and Code Coverage API plugin will combine reports have same tag\n\nnode {\n    parallel firstBranch: {\n        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], tag: ‘t’\n}, secondBranch: {\n        publishCoverage adapters: [jacocoAdapter('jacoco.xml')], tag: ‘t’\n    }\n}\n\nREST API\n\nWe provide a REST API to retrieve coverage data:\n\nCoverage result:…​/{buildNumber}/coverage/…​/result/api/\\{json|xml\\}\n\nTrend result:…​/{buildNumber}/coverage/…​/trend/api/\\{json|xml\\}\n\nCoverage result of last build:…​/{buildNumber}/coverage/…​/last/result/api/\\{json|xml\\}\n\nTrend result of last build:…​/{buildNumber}/coverage/…​/last/trend/api/\\{json|xml\\}\n\nFailed Conditions and Flexible Threshold Setting\n\nYou can set different failed conditions and threholds to control build result.\n\nIf the thresholds satisfy the failed conditions, it will fail the build.\n\nOther Small Features\n\nWe also have other small features like auto detecting reports, coverage filters, etc. You can find more information about these features in the plugin documentation.\n\nArchitecture\n\nThis API plugin will mainly do these things:\n\nFind coverage reports according to the user’s config.\n\nUse adapters to convert reports into the our standard format.\n\nParse standard format reports, and aggregate them.\n\nShow parsed result in a chart.\n\nSo, we can implement code coverage publishing by simply writing an adapter, and such adapter only needs to do one thing - convert a coverage report into the standard format. The implementation is based on extension points, so new adapters can be created in separate plugins. In order to simplify conversion for XML reports, there is also an abstraction layer which allows creating XSLT-based converters.\n\nThe below diagram show the architecture of Code Coverage API plugin\n\nImplementing a New Coverage Plugin\n\nWe can implement a coverage plugin by implementing CoverageReportAdapter extension point. For example, by using the provided abstract layer, we can implement JaCoCo simple like this:\n\npublic final class JacocoReportAdapter extends JavaXMLCoverageReportAdapter {\n\n    @DataBoundConstructor\n    public JacocoReportAdapter(String path) {\n        super(path);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getXSL() {\n        return \"jacoco-to-standard.xsl\";\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getXSD() {\n        return null;\n    }\n\n    @Symbol(\"jacoco\")\n    @Extension\n    public static final class JacocoReportAdapterDescriptor extends JavaCoverageReportAdapterDescriptor {\n\n        public JacocoReportAdapterDescriptor() {\n            super(JacocoReportAdapter.class);\n        }\n\n        @NonNull\n        @Override\n        public String getDisplayName() {\n            return Messages.JacocoReportAdapter_displayName();\n        }\n    }\n}\n\nAll we need is to extend an abstract layer for XML-based Java report and provide an XSL file to convert the report to our standard format. There are also other extension points which are under development.\n\nIf you want implement a new coverage format that we did not provide abstract layer, you need to register `CoverageElement`s and implement an simple parser. See llvm-cov Plugin to get more details.\n\nFuture Tasks\n\nSupport more coverage tools ( JENKINS-52467, JENKINS-52469 and etc.)\n\nMake the UI extensible ( JENKINS-51738)\n\nImprove performance ( JENKINS-52982)\n\nPhase 3 Presentation Slides\n\nPhase 3 Presentation Video\n\nLinks\n\nJIRA Component\n\nProject Page\n\nProject Repository","title":"Code Coverage API plugin: 1.0 Release","tags":["plugins","gsoc","gsoc2018"],"authors":[{"avatar":null,"blog":null,"github":"cizezsy","html":"<div class=\"paragraph\">\n<p>Shenyu comes from China. He is a third year student now, and his major is\nComputer Science and technology. He has participated in GSoC 2018 for\n<a href=\"https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/\">Code Coverage API Plugin</a></p>\n</div>","id":"shenyu_zheng","irc":"cizezsy","linkedin":null,"name":"Shenyu Zheng","slug":"/blog/author/shenyu_zheng","twitter":null}]}},{"node":{"date":"2018-07-23T00:00:00.000Z","id":"c28896d2-8e68-54bb-a656-dea6d6148131","slug":"/blog/2018/07/23/remoting-kafka-plugin-1.0-release/","strippedHtml":"I am very excited to announce that we have recently released 1.0 version of Remoting Kafka Plugin under Jenkins Plugin. You can check the CHANGELOG to see the features included in this release.\n\nAbout me\n\nMy name is Pham Vu Tuan, I am a final year undergraduate student from Singapore. This is the first time I participate in Google Summer of Code and contribute to an open-source organization.\n\nMentors\n\nI have GSoC mentors who help me in this project Oleg Nenashev and Supun Wanniarachchi. Besides that, I also receive great support from developers in remoting project Devin Nusbaum and Jeff Thompson.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nThis project aims to develop a plugin in order to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins.\n\nBenefits to the community\n\nProvide a new method to connect agent to controller using Kafka besides existing methods such as JNLP or SSH Build Agents plugin.\n\nHelp to resolve the existing issues with the TCP protocol between controller and agent communication in Jenkins.\n\nHelp to resolve traffic prioritization and multi-agent communications issue in Jenkins.\n\nWhy Kafka?\n\nWhen planning for this project, we want to use traditional message queue system such as ActiveMQ or RabbitMQ. However, after some discussion, we decided to have a try with Kafka with more suitable features with this project:\n\nKafka itself is not a queue like ActiveMQ or RabbitMQ, it is a distributed, replicated commit log. This helps to remove message delivery complexity we have in traditional queue system.\n\nWe need to support data streaming as a requirement, and Kafka is good at this aspect, which RabbitMQ is lack of.\n\nKafka is said to have a better scalability and good support from the development community.\n\nArchitecture Overview\n\nThe project consists of multiple components:\n\nKafka Client Library - new command transport implementation, producer and consumer client logic.\n\nRemoting Kafka Plugin - plugin implementation with KafkaGlobalConfiguration, KafkaComputerLauncher and KafkaSecretManager.\n\nRemoting Kafka Agent - A custom JAR agent with remoting JAR packaged together with a custom Engine implementation to setup a communication channel with Kafka. The agent is also packaged as a Docker image in DockerHub.\n\nAll the components are packaged together with Docker Compose.\n\nThe below diagram is the overview of the current architecture:\n\nWith this design, controller is not communicating with agent using direct TCP communication anymore, all the communication commands are transfered with Kafka.\n\nFeatures\n\nThe project is now under the third coding phase and we have some features available in 1.0 release.\n\n1. Kafka Global Configuration with support of credentials plugin to store secrets.\n\n2. Launch agent with Kafka Launcher.\n\n3. Launch agent from CLI using agent JAR with secret provided to ensure security.\n\n4. Run jobs, pipeline using Kafka agent.\n\n5. Kafka communication between controller and agent.\n\nRemoting operations are being executed over Kafka. In the log you may see:\n\nCommand execution (SlaveInstallerFactoryImpl.isWindows())\n\nClassloading (Classloader.fetch())\n\nLog streaming (Pipe.chunk())\n\nHow to run demo\n\nWe have setup a ready-to-fly demo for this plugin. You can try to run a demo of the plugin by following this instruction.\nFeatures in the demo:\n\nDocker Compose starts preconfigured controller and agent instance, they connect automatically using Kafka launcher.\n\nKafka is secured and encrypted with SSL.\n\nThere few demo jobs in the instance so that a user can launch a job on the agent.\n\nKakfa Manager supported in localhost:9000 to support monitoring of Kafka cluster.\n\nPhase 2 Presentation Slides\n\nPhase 2 Presentation Video\n\nLinks\n\nGitHub Repository\n\nWiki\n\nPlugin Site\n\nProject Info\n\nIntroduction Blogpost\n\nPhase 1 Evaluation Slides\n\nPhase 2 Evaluation Slides\n\nPhase 1 Evaluation Video\n\nPhase 2 Evaluation Video","title":"Remoting Kafka Plugin 1.0: A new method to connect agents","tags":["plugins","gsoc","gsoc2018","remoting","kafka"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/author/pvtuan10","twitter":null}]}},{"node":{"date":"2018-07-05T00:00:00.000Z","id":"b1c89781-ce73-5eec-8d31-bf7f51174f63","slug":"/blog/2018/07/05/remoting-over-message-bus-alpha-release/","strippedHtml":"I am happy to announce that we have recently released an alpha version of Remoting Kafka Plugin to the Experimental Update Center. You can check the CHANGELOG to see the features included in this initial release.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nRemoting Kafka Plugin is a plugin developed under Jenkins Google Summer of Code 2018. The plugin is developed to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins. A quick introduction of the project can be found in this introduction blogpost.\n\nHow to use the plugin?\n\nThe instructions to run the plugin in alpha version are written here. Feel free to have a try and let us know your feedback on Gitter or the mailing list.\n\nLinks\n\nAlpha Changelog\n\nIntroduction Blogpost\n\nGitHub Repository\n\nProject Page\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Update: Alpha release of Remoting Kafka Plugin","tags":["plugins","gsoc","gsoc2018","remoting","alpha-release"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/author/pvtuan10","twitter":null}]}},{"node":{"date":"2018-06-18T00:00:00.000Z","id":"88647b04-059d-549e-a712-a9dfe1d2427e","slug":"/blog/2018/06/18/remoting-over-message-bus/","strippedHtml":"About me\n\nMy name is Pham Vu Tuan, I am a final year undergraduate student from Singapore. This is the first time I participate in Google Summer of Code and contribute to an open-source organization. I am very excited to contribute this summer.\n\nMentors\n\nI have GSoC mentors who help me in this project Oleg Nenashev and Supun Wanniarachchi. Besides that, I also receive great support from developers in remoting project Devin Nusbaum and Jeff Thompson.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nThis project aims to develop a plugin in order to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins.\n\nWhy Kafka?\n\nWhen planning for this project, we want to use traditional message queue system such as ActiveMQ or RabbitMQ. However, after some discussion, we decided to have a try with Kafka with more suitable features with this project:\n\nKafka itself is not a queue like ActiveMQ or RabbitMQ, it is a distributed, replicated commit log. This helps to remove message delivery complexity we have in traditional queue system.\n\nWe need to support data streaming as a requirement, and Kafka is good at this aspect, which RabbitMQ is lack of.\n\nKafka is said to have a better scalability and good support from the development community.\n\nCurrent State\n\nThe project is reaching the end of the first phase and here are things we have achieved so far:\n\nSetup project as a set of Docker Compose components: Kafka cluster, Jenkins controller (with plugin) and a custom agent (JAR).\n\nCreate a PoC with new command transport implementation to support Kafka, which involves of command invocation, RMI, classloading and data streaming.\n\nMake neccessary changes in Remoting and Jenkins core to make them extensible for the use of this project.\n\nDecide to use Kafka as a suitable final implementation.\n\nWe planned to release an alpha version of this plugin by the end of this phase, but decided to move this release to the second phase because we need to wait for remoting and core patches to be released.\n\nArchitecture Overview\n\nThe project consists of multiple components:\n\nKafka Client Library - new command transport implementation, producer and consumer client logic.\n\nRemoting Kafka Plugin - plugin implementation with KafkaGlobalConfiguration and KafkaComputerLauncher.\n\nRemoting Kafka Agent - A custom JAR agent with remoting JAR packaged together with a custom Engine implementation to setup a communication channel with Kafka.\n\nAll the components are packaged together with Docker Compose.\n\nThe below diagram is the overview of the current architecture:\n\nWith this design, controller is not communicating with agent using direct TCP communication anymore, all the communication commands are transfered with Kafka.\n\nFeatures\n\n1. Kafka Global Configuration\n\n2. Custom agent start up as a JAR\n\nUser can start running an agent with the following command:\n\n3. Launch agents with Kafka\n\n4. Commands transferred between controller and agent over Kafka\n\nRemoting operations are being executed over Kafka. In the log you may see:\n\nClassloading (Classloader.fetch())\n\nLog streaming (Pipe.chunk())\n\n5. Run jobs with remoting Kafka\n\nIt is possible to run jobs on Agents connected over Kafka\n\nNext Phase Plan\n\nHere are the tasks planned for the next phase:\n\nSupport security for controller-agent connection:\n\nKafka authentication/authorization ( JENKINS-51472, JENKINS-51473).\n\nAgent secrets ( JENKINS-51470).\n\nImprove Kafka producer-consumer model to ensure reliability ( JENKINS-51942).\n\nBug fixing.\n\nRelease alpha version and address feedback ( JENKINS-51713).\n\nHow to run demo\n\nYou can try to run a demo of the plugin by following the instruction.\n\nLinks\n\nGitHub Repository\n\nProject Page\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Intro: Jenkins Remoting over Message Bus/Queue","tags":["plugins","gsoc","gsoc2018","remoting"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/author/pvtuan10","twitter":null}]}},{"node":{"date":"2018-06-15T00:00:00.000Z","id":"099fdcfb-2f30-562a-9c7c-67ed48398003","slug":"/blog/2018/06/15/simple-pull-request-plugin/","strippedHtml":"About me\n\nI am Abhishek Gautam, 3rd year student from Visvesvaraya National Institute of\ntechnology, India, Nagpur. I was a member of ACM Chapter and Google student developer club of my\ncollege. I am passionate about automation.\n\nMentors\n\nOleg Nenashev (Org Admin)\n\nMartin d’Anjou\n\nKristin Whetstone\n\nJeff Knurek\n\nProject Summary\n\nThis is a GSoC 2018 project.\n\nThis project aims to develop a pull request Job Plugin. Users should be able to\nconfigure job type using YAML file placed in root directory of the\nGit repository being the subject of the pull request. The plugin should interact with various\nplatforms like Bitbucket, Github, Gitlab, etc whenever a pull request is created or updated.\n\nPlugin detects the presence of certain types of the report at conventional locations,\nand publish them automatically. If the reports are not present at conventional location,\ncan specify the location using the YAML file.\n\nBenefits to the community\n\nProject administrators will be able to handle builds for pull requests more easily.\n\nBuild specifications for pull request can be written in a concise declarative format.\n\nBuild reports will be automatically published to Github, Bitbucket, etc.\n\nBuild status updates will be sent to git servers automatically.\n\nUsers will not have to deal with pipeline code.\n\nIf there will be no merge conflicts or build failures, the PR can be merged into target branch.\n\nPrior work\n\nTravis YML Plugin :\nDesigned to run .travis.yml as Jenkins pipeline job.\nTravis-CI does not support external pull requests. Jenkins environment\nis different than Travis and does not always make sense to use configurations\ndefined for other environment in Jenkins. Also maintenance of this is slowed\ndown and last commit for this plugin was on 14 Nov 2016.\nClick here to check.\n\nCodeShip Plugin :\nThis plugin is designed to convert codeship \"steps.yaml\" and\n\"services.yaml\" to scripted pipeline code. This plugin has never been released.\n\nJenkins pipeline builder :\nThis is a external non-Java-based tool, which cannot be easily converted to a Jenkins plugin.\n\nDesign\n\nThis plugin will be developed on the top of the MultiBranch Pipeline plugin.\n\nFor now the plugin is bulding branches and Pull request both using Jenkinsfile.yaml,\nbut this plugin is inclined to use for pull requests. This will be fixed in next coding phase.\n\nThis plugin is following below steps for now:\n\nclone target repo\n\ncheckout to target branch\n\nfetch the source branch\n\nmerge source-branch\n\ncall user call user script to build the repo.\n\npush changes of pull request to target branch\n\npublish test reports\n\nPlugin will start above steps if and only if the pull request is\nmergeable, to avoid merge conflicts while merging the source branch to target\nbranch. Pull request’s payload contains information if the pull request changes\nare mergeable or not hence, the pull request is mergebale or not can also be\ndecided by the payload of webhook also.\n\nHow to run the Plugin\n\nSee How to run the demo\nand set credentials, owner and repository on your own and you will be good to go.\n\nExample branch-source configuration.\n\nPhase 1 features\n\nUsers are able to select the Jenkinsfile.yaml file as the source for the Pipeline configuration.\n\nGit Push step\n\nharvest results and reports (and post in the pull request)\n\njunit()\n\nfindbugs()\n\narchiveArtifacts()\n\nBasic interface to parse and get build specifications from YAML file.\n\nThings decided\n\nTo build the plugin on the top of multibranch pipeline plugin. As that plugin has implementation of\n\nNice interface to show different branch and pull requests build separately with use of suitable plugins like Github, Bitbucket.\n\nDetect trusted revisions in a repository.\n\nPublishing of build status to the repository.\n\nConvert the YAML configuration to declarative pipeline.\n\nUser will provide path to the script relative to the root directory of the repository\nwithout extension (.sh or .bat) in the YAML file. The plugin will generate pipeline script to detect the\nplatform and call .sh or .bat script.\n\nExample:\n  Path provided: ./scripts/hello\n  a. On UNIX machine “./scripts/hello.sh” will be called\n  b. On non-UNIX machine “./scripts/hello.bat” will be called.\n\nImplementations till now\n\nA first prototype of the plugin is ready. It supports all features of Multi-Branch Pipeline and offers the following features.\n\nBuild description is defined via YAML file stored within the SCM repo. This plugin\nwill depend on GitHub plugin, Bitbucket plugin, Gitlab plugin if users will be\nusing respective paltfroms for their repositories.\n\nBasic conversion of YAML to Declarative Pipeline: A class YamlToPipeline\nis written which will load the \"Jenkinsfile.yaml\" and make use of PipelineSnippetGenerator class\nto generate Declarative pipeline code.\n\nReporting of results.\n\nPlugin is using Yaml from target branch right now. (Maybe this needs some discussion, example:\nwhat if pull request contains changes in Jenkinsfile.yaml)\n\nGit Push step: To push the changes of pull request to the target branch. This is implemented\nusing git-plugin, PushCommand is used for this from git-plugin. credentialId,\nbranch name and repository url for intracting with Github, Bitbucket, etc\nwill be taken automatically from \"Branch-Source\" (Users have to fill thes\ndetails of branch source in job configuration UI). (You can see\nHow to run the demo)\n\nJenkinsfile.yaml example\n\nFor the phase 1 prototype demonstration, the following yaml file was used.\nNote that this format is subject to change in the next phases of the project,\nas we formalise the yaml format definition.\n\nagent:\n    dockerImage: maven:3.5.3-jdk-8\n    args: -v /tmp:/tmp\n\ntestResultPaths:\n    - target/surefire-reports/*.xml\n\nfindBugs: target/*.xml\n\nstages:\n    - name: First\n      scripts:\n        -   ./scripts/hello\n    - name: Build\n      scripts:\n        -   ./scripts/build\n    - name: Tests\n      scripts:\n        -   ./scripts/test\n\narchiveArtifacts:\n    - Jenkinsfile.yaml\n    - scripts/hello.sh\n\nFrom the yaml file shown above, the plugin generates the following pipeline code:\n\npipeline {\n  agent {\n    docker {\n      image 'maven:3.5.3-jdk-8'\n      args '-v /tmp:/tmp'\n      alwaysPull false\n      reuseNode false\n    }\n  }\n  stages {\n    stage('First') {\n      steps {\n        script {\n          if (isUnix()) {\n            sh './scripts/hello.sh'\n          } else {\n            bat './scripts/hello.bat'\n          }\n        }\n      }\n    }\n    stage('Build') {\n      steps {\n        script {\n          if (isUnix()) {\n            sh './scripts/build.sh'\n          } else {\n            bat './scripts/build.bat'\n          }\n        }pipeline\n      }\n      post {\n        success {\n          archiveArtifacts artifacts: '**/target/*.jar'\n          archiveArtifacts artifacts: 'Jenkinsfile.yaml'\n          archiveArtifacts artifacts: 'scripts/hello.sh'\n        }\n      }\n    }\n    stage('Tests') {\n      steps {\n        script {\n          if (isUnix()) {\n            sh './scripts/test.sh'\n          } else {\n            bat './scripts/test.bat'\n          }\n        }\n      }\n      post {\n        success {\n          junit 'target/surefire-reports/*.xml'\n        }\n        always {\n          findbugs pattern: 'target/*.xml'\n        }\n      }\n    }\n  }\n}\n\nPipeline view in Jenkins instance\n\nCoding Phase 2 plans\n\nDecide a proper YAML format to use for Jenkinsfile.yaml\n\nCreate Step Configurator for SPRP plugin. Jenkins-51637.\nThis will enable users to use Pipeline steps in Jenkinsfile.yaml.\n\nAutomatic indentation generation in the generated Pipeline SnipperGenerator class.\n\nWrite tests for the plugin.\n\nJira Epic\n\nHow to reach me\n\nEmail: gautamabhishek46@gmail.com\n\nGitter room: https://gitter.im/Jenkinsci/simple-pull-request-job-plugin\n\nReferences\n\nInitial proposal of the project\n\nProject repository\n\nProject page\n\nGitter chat\n\nBug Tracker\n\nDemo Repository\n\nPhase 1 Presentation video (June 14, 2018)\n\nPhase 1 Presentation Slides (June 14, 2018)","title":"GSoC Project Intro: Pipeline as YAML","tags":["gsoc2018","gsoc","plugin","pipeline","yaml"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"gautamabhishek46","html":"<div class=\"paragraph\">\n<p>Abhishek is a 3rd year Computer Science student from Visvesvaraya National\nInstitute of Technology, Nagpur, India. He has done some website projects for\nhis college technical festival. He is also a regular competitive programmer\n(abhishekg1128 at codechef). He has done two internships as a Game Programmer\nas well. He was a member of ACM Chapter and Google student developer club of his\ncollege. His interest in automation motivated his participation in the Jenkins\nGSOC 2018 program.</p>\n</div>","id":"abhishek_gautam","irc":"abhishekg","linkedin":null,"name":"Abhishek Gautam","slug":"/blog/author/abhishek_gautam","twitter":null}]}},{"node":{"date":"2018-06-13T00:00:00.000Z","id":"a1c90a56-ed3d-57e4-bd0b-1397798cc5ea","slug":"/blog/2018/06/13/code-coverage-api-plugin/","strippedHtml":"About me\n\nMy name is Shenyu Zheng, and I am an undergraduate student in Computer Science and Technology at Henan University from China.\n\nI am very excited that I can participate in GSoC to work on Code Coverage API plugin with the Jenkins community and to contribute to the open source world. It is my greatest pleasure to write a plugin that many developers will use.\n\nMy mentors are Steven Christou, Supun Wanniarachchi, Jeff Pearce and Oleg Nenashev.\n\nAbstract\n\nThere are a lot of plugins which currently implement code coverage, however, they all use similar config, charts, and content. So it will be much better if we can have an API plugin which does the most repeated work for those plugins and offers a unified APIs which can be consumed by other plugins and external tools.\n\nThis API plugin will mainly do these things:\n\nFind coverage reports according to the user’s config.\n\nUse adapters to convert reports into the our standard format.\n\nParse standard format reports, and aggregate them.\n\nShow parsed result in a chart.\n\nSo, we can implement code coverage publishing by simply writing an adapter, and such adapter only needs to do one thing — convert a coverage report into the standard format. The implementation is based on extension points, so new adapters can be created in separate plugins. In order to simplify conversion for XML reports, there is also an abstraction layer which allows creating XSLT-based converters.\n\nCurrent Progress - Alpha Version\n\nI have developed an alpha version for this plugin. It currently integrates two different coverage tools - Cobertura and Jacoco. Also, it implements many basic functionalities like threshold, auto-detect, trend chart and so on.\n\nConfiguration Page\n\nconfig plugin\n\nWe can input the path pattern for auto detect, so that plugin will automatically find reports and group them using a corresponding converter. That makes config simpler and the user doesn’t need to fully specify the report name. Also, if we want, we can manually specify each coverage report.\n\nWe also have global and per-report threshold configurations, which makes the plugin more flexible than existing plugins (e.g. global threshold for a multi-language project that has several reports).\n\nPipeline Support\n\nIn addition to configuring the Code Coverage API plugin from the UI page, we also have pipeline support.\n\nnode {\n   publishCoverage(autoDetectPath: '**/*.xml', adapters: [jacoco(path: 'jacoco.xml')], globalThresholds: [[thresholdTarget: 'GROUPS', unhealthyThreshold: 20.0, unstableThreshold: 0.0]])\n}\n\nReport Defects\n\nAs we can see in Configuration page, we can set healthy threshold and stable threshold for each metric. The Code Coverage API plugin will report healthy score according to the healthy threshold we set.\n\nthreshold config\n\nresult\n\nAlso, we have a group of options which can fail the build if coverage falls below a particular threshold.\n\nCoverage Result Page\n\nThe coverage result page now has a modernized UI which shows coverage results more clearly.\nThe result page includes three parts - Trend chart, Summary chart, Child Summary chart.\n\nTrend Chart\n\nIn the Trend chart, we can see the coverage trend of the selected coverage metrics.\n\nSummary Chart\n\nIn the summary chart we can see the coverage summary of current coverage metric.\n\nChild Summary Chart\n\nIn the Child summary chart, we can see the coverage summary of each child, also, we can use the range handler to filter item we want to see to reduce the chart size.\n\nBy using those more modernized chart components, we can easily focus on the information we want to know.\n\nExtensibility\n\nWe provide several extension points to make our plugin more extensible and flexible. Also, we have a series of abstract layers to help us implementing these extension points much easier.\n\nCoverageReportAdapter\n\nWe can implement a coverage tool by implementing CoverageReportAdapter extension point. For example, by using the provided abstract layer, we can implement Jacoco simple like this:\n\npublic final class JacocoReportAdapter extends JavaXMLCoverageReportAdapter {\n\n    @DataBoundConstructor\n    public JacocoReportAdapter(String path) {\n        super(path);\n    }\n\n    @Override\n    public String getXSL() {\n        return \"jacoco-to-standard.xsl\";\n    }\n\n    @Override\n    public String getXSD() {\n        return null;\n    }\n\n    @Symbol(\"jacoco\")\n    @Extension\n    public static final class JacocoReportAdapterDescriptor extends CoverageReportAdapterDescriptor {\n\n        public JacocoReportAdapterDescriptor() {\n            super(JacocoReportAdapter.class, \"jacoco\");\n        }\n    }\n}\n\nAll we need is to extend an abstract layer for XML-based Java report and provide an XSL file to convert the report to our Java standard format. There are also other extension points which are under development.\n\nOther Extension points\n\nWe also plan to provide extension points for coverage threshold and report detector. Once it completed, we can have more control over our coverage report process.\n\nNext Phase Plan\n\nThe Alpha version now has many parts which still need to be implemented before the final release. So in next phase, I will mainly do those things.\n\nAPIs which can be used by others\n\nIntegrate Cobertura Plugin with Code Coverage API (JENKINS-51424).\n\nProvide API for getting coverage information. E.g. summary information about coverage (percentages, trends) (JENKINS-51422), (JENKINS-51423).\n\nImplementing abstract layer for other report formats like JSON. (JENKINS-51732).\n\nSupporting converters for non-Java languages. (JENKINS-51924).\n\nSupporting combining reports within a build(e.g. after parallel() execution in Pipeline) (JENKINS-51926).\n\nAdding source code navigation in Coverage Result Page (JENKINS-51988).\n\nRefactoring the configuration page to make it more user-friendly (JENKINS-51927).\n\nHow to Try It Out\n\nAlso, I have released the Alpha version in the Experimental Update Center. If you can give me some of your valuable advice about it, I will very appreciate.\n\nLinks\n\nJIRA Component\n\nProject Page\n\nProject Repository\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Intro: Code Coverage API Plugin","tags":["plugins","gsoc","gsoc2018"],"authors":[{"avatar":null,"blog":null,"github":"cizezsy","html":"<div class=\"paragraph\">\n<p>Shenyu comes from China. He is a third year student now, and his major is\nComputer Science and technology. He has participated in GSoC 2018 for\n<a href=\"https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/\">Code Coverage API Plugin</a></p>\n</div>","id":"shenyu_zheng","irc":"cizezsy","linkedin":null,"name":"Shenyu Zheng","slug":"/blog/author/shenyu_zheng","twitter":null}]}}]}},"pageContext":{"tag":"gsoc","limit":8,"skip":48,"numPages":9,"currentPage":7}},
    "staticQueryHashes": ["3649515864"]}