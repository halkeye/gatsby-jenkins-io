{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/gsoc/page/9",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2016-06-21T00:00:00.000Z","id":"719def0e-69a3-5e1c-b789-b2d19d5834dd","slug":"/blog/2016/06/21/gsoc-midterm-presentations-ann/","strippedHtml":"As you probably know, on this year Jenkins projects participates in\nGoogle Summer of Code 2016.\nYou can find more information about the accepted projects on the GSoC subproject page and in the\nJenkins Developer mailing list.\n\nOn this week GSoC students are going to present their projects as a part of mid-term evaluation,\nwhich covers one month of community bonding and one month of coding.\n\nWe would like to invite Jenkins developers to attend these meetings.\nThere are two additional months of coding ahead for successful students, so any feedback from Jenkins contributors and users will be appreciated.\n\nMeeting #1 - June 23, 7:00 PM UTC - 9:00 PM UTC\n\nSupport Core plugin improvements by Minudika Malshan\n\nIntro blogpost\n\nExternal Workspace Manager by Alex Somai\n\nIntro blogpost\n\nPlugin documentation publishing to jenkins.io by Cynthia Anyango\n\nIntro blogpost\n\nQ&A session\n\nMeeting link\n\nMeeting #2 - June 24, 8AM UTC - 9 AM UTC\n\nJenkins WebUI: Improving Job Creation/Configuration by Samat Davletshin\n\nIntro blogpost\n\nQ&A session\n\nMeeting link\n\nBoth meetings will be conducted and recorded via Hangouts on Air.\nThe recorded sessions will be made public after the meetup.\nThe agenda may change a bit.\n\nLinks\n\nMid-term presentations announcement on Jenkins Developer mailing list\n\nJenkins GSoC 2016 Wiki Page\n\nJenkins project page on the GSoC2016 website","title":"GSoC: Mid-term presentations by students on June 23 and 24","tags":["core","gsoc","plugin","general"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-06-14T00:00:00.000Z","id":"0e5d650b-c2ea-591f-9965-564c0e2df2c3","slug":"/blog/2016/06/14/gsoc-jenkins-support-core-plugin-improvements/","strippedHtml":"About me\n\nI am Minudika Malshan, an undergraduate student in Computer Science and Engineering from University of Moratuwa, Sri Lanka.\n\nAs a person who is passionate in open source software development and seeking for new knowledge and experience, I am willing to give my contribution for this project.\n\nLinkedIn | Twitter\n\nAbstract\n\nThe Support-Core Plugin provides the basic infrastructure for generating \"bundles\" of support information with Jenkins.\nThere are two kinds of bundles.\n\nAutomatic bundles: Bundles which are generated and get saved in $JENKINS_HOME/support once per hour starting 15 seconds after Jenkins starts the plugin.\nThe automatic bundles are retained using an exponential aging strategy. Therefore it’s possible to have a bunch of them over the entire lifetime after the plugin installing the plugin.\n\nOn demand bundles: These bundles are generated from the root \"Support\" action.\n\nHowever current support-core plugin is not much user friendly. The object of this project is to make it more user friendly by adding some features which make a sophisticated environment for the user who use support plugin.\n\nIn this project scope, there are three features and improvements we are going to consider.\n\nEase the bundles management by the administrator ( JENKINS-33090)\n\nAdding an option to anonymize customer labels (strings created by the user such as name of a job, folder, view, agent, and template etc). ( JENKINS-33091)\n\nAllowing user to create an issue and submit a bundle into the OSS tracker using the support-core plugin. ( JENKINS-21670)\n\nArnaud Héritier and Steven Christou are guiding me through the project as my mentors.\n\nTasks and Deliverables\n\nEase the bundles management by the administrator.\n\nUnder this task, the following functions are going to be implemented.\n\nListing bundles stored on the jenkins instance with their details.\n\nAllowing user to download each bundle.\n\nAllowing user to delete each bundle or all bundles.\n\nAllowing user to browse the content of each bundle.\n\nAutomatically purging old bundles.\n\nEnabling user to create an issue and submit a bundle into the OSS tracker\n\nWhen a Jenkins user sees an issue, he/she commonly contacts his support contacts (Jenkins instance admins) and then Jenkins admins troubleshoot the issue.\nThe objective of this task is to implement a feature which enables the user to report an issue to a admin through support core plugin.\n\nWhen creating bundles to attach with the ticket, it is important to protect the privacy of the user who creates the ticket. When considering doing that, anonymizing user created labels (texts) comes to the front.\n\nAdding  an option to anonymize customer labels\n\nThe following functions will be implemented under this taks.\n\nCreating randomized tokens for labels created by users.\n\nProducing a mapping for those labels.\n\nSubstituting encoded labels into all the files included in the support bundle.\n\nWhen creating randomized tokens, it would be much useful and effective if we can create those tokens in a way they make sense to humans. (i.e. readable to humans). For that, I am hoping to use a suitable java library to create human friendly random tokens. One of such libraries is wordnet-random-name.\n\nHowever in order to substitute randomized tokens, all files included in the bundle should be read. This can become inefficient when bundle consists of large number of files.  Therefore it’s important to follow an optimized method for this task.\n\nReferences\n\nInitial proposal of the project\n\nProject repository","title":"GSoC Project Intro: Support Core Plugin Improvements","tags":["core","gsoc","plugin","support-core"],"authors":[{"avatar":null,"blog":null,"github":"minudika","html":"","id":"minudika","irc":null,"linkedin":null,"name":"Minudika Malshan","slug":"/blog/authors/minudika","twitter":"minudika"}]}},{"node":{"date":"2016-06-13T00:00:00.000Z","id":"169b8859-fdce-5c99-a2ba-d10df55f6894","slug":"/blog/2016/06/13/gsoc-usage-stats-analysis/","strippedHtml":"About myself\n\nHello, my name is Payal Priyadarshini.  I am pursing my major in Computer\nScience & Engineering at the Indian Institute of Technology Kharagpur, India.  I\nam very proficient in writing code in Python, C++, Java and currently getting\nfamiliar and hopefully good in Groovy too.\n\nI have internship experiences in renowned institutions like Google and VMware\nwhere I worked with some exciting technologies for example Knowledge Graphs,\nBigTable, SPARQL, RDF in Google. I am a passionate computer science student who\nis always interested in learning and looking for new challenges and\ntechnologies.That’s how I came across to Google Summer of Code where I am\nworking on some exciting data mining problems which you are going to encounter\nbelow in this blog.\n\nProject Overview\n\nJenkins has collected anonymous usage information of more than 100,000\ninstallations which includes set of plugins and their versions etc and also\nrelease history information of the upgrades. This data collection can be used\nfor various data mining experiments. The main goal of this project is to perform\nvarious analysis and studies over the available dataset to discover trends\nin data usage. This project will help us to learn more about the Jenkins\nusage by solving various problems, such as:\n\nPlugin versions installation trends, will let us know about the versions installation behaviour of a given plugin.\n\nSpotting downgrades, which will warn us that something is wrong with the version from which downgrading was performed.\n\nCorrelating what users are saying (community rating) with what users are doing (upgrades/downgrades).\n\nDistribution of cluster size, where clusters represents jobs, nodes count which approximates the size of installation.\n\nFinding set of plugins which are likely to be used together, will setup pillar for plugin recommendation system.\n\nAs a part of the Google Summer of Code 2016, I will be working on the above\nmentioned problems. My mentors for the project are Kohsuke Kawaguchi and Daniel Beck. Some analyses has already been done over this\ndata but those are outdated as charts can be more clearer and interactive. This project aims to improvise existing\nstatistics and generating new ones discussed above.\n\nUse Cases\n\nThis project covers wide-range of the use-cases that has been derived from the\nproblems mentioned above.\n\nUse Case 1: Upgrade/Downgrade Analysis\n\nUnderstanding the trend in upgrades and downgrades have lots of utilities, some\nof them have already been explained earlier which includes measuring the\npopularity, spotting downgrades, giving warning about the wrong versions quickly\netc.\n\nUse Case 1.1: Plugin versions installation trends\n\nHere we are analysing the trend in the different version installations for a\ngiven plugin. This use-case will help us to know about:\n\nTrend in the upgrade to the latest version released for a given plugin.\n\nTrend in the popularity decrement of the previous versions after new version release.\n\nFind the most popular plugin version at any given point of time.\n\nUse Case 1.2: Spotting dowgrades\n\nHere we are interested to know, how many installations are downgraded from any\ngiven version to previously used version. Far fetched goal of this analysis is\nto give warning when something goes wrong with the new version release, which\ncan be sensed using downgrades performed by users. This analysis can be\naccomplished by studying the monotonic property of the version number vs.\ntimestamp graph for a given plugin.\n\nUse Case 1.3: Correlation with the perceived quality of Jenkins release\n\nTo correlate what users are saying to what users are doing, we have community\nratings which tells us about the ratings and reviews of the releases and has\nfollowing parameters:\n\nUsed the release on production site w/o major issues.\n\nDon’t recommend to other.\n\nTried but rolled it back to the previous version.\n\nFirst parameters can be calculated from the Jenkins usage data and third\nparameter is basically spotting downgrades(use case 1.2). But the second\nparameter is basically an expression which is not possible to calculate. This\nanalysis is just to get a subjective idea about the correlation.\n\nUse Case 2: Plugin Recommendation System\n\nThis section involves setting up ground work for the plugin recommendation\nsystem. The idea is to find out the set of plugins which are most likely to be\nused together. Here we will be following both content based filtering as well as\ncollaborative filtering approach.\n\nCollaborative Filtering\n\nThis approach is based upon analysing large amount of information on\ninstallation’s behaviours and activities. We have implicit form of the data\nabout the plugins, that is for every install ids, we know the set of plugins\ninstalled. We can use this information to construct plugin usage graph where\nnodes are the plugins and the edges between them is the number of installations\nin which both plugins are installed together.\n\nContent-based Filtering\n\nThis method is based on a properties or the content of the item for example\nrecommending items that are similar to the those that a user liked in the past\nor examining in the present based upon some properties. Here, we are utilizing\nJenkins\nplugin dependency graph to learn about the properties of a plugin. This graph\ntells us about dependent plugins on a given plugin as well as its dependencies\non others. Here is an example to show, how this graph is use for content based\nfiletring, suppose if a user is using “CloudBees Cloud Connector”, then we can\nrecommend them for “CloudBees Registration Plugin” as both plugins are dependent\non “CloudBees Credentials Plugin”.\n\nAdditional Details\n\nYou may find the complete project proposal along with the detailed design of the\nuse-cases with their implementation details here in the\ndesign\ndocument.\n\nA complete version of the use-case 1: Upgrade & Downgrade Analysis should be\navailable in late June and basic version of plugin recommendation system will be\navailable in late July.\n\nI do appreciate any kind of feedback and suggestions.  You may add comments in\nthe\ndesign\ndoc.  I will be posting updates about the statistics generation status on the\njenkins-dev mailing\nlist and jenkins-infra mailing list.\n\nLinks:\n\nDesign Doc\n\nGoogle Summer of Code\n\nGithub infra-stats\n\nJenkins statistics\n\nJenkins Plugin Dependency Graph\n\nGithub GSoC Jenkins Usage Statistics Analysis","title":"GSoC Project Intro: Usage Statistics Analysis","tags":["usage-statistics","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"payal94","html":"","id":"payal94","irc":null,"linkedin":null,"name":"Payal Priyadarshini","slug":"/blog/authors/payal94","twitter":null}]}},{"node":{"date":"2016-06-01T00:00:00.000Z","id":"2ec37d75-53e9-562c-9bbb-de2a06ecbafd","slug":"/blog/2016/06/01/gsoc-automatic-plugin-documentation/","strippedHtml":"About me\n\nI am Cynthia Anyango from Nairobi, Kenya. I am a second year student at Maseno\nUniversity. I am currently specializing on Ruby on Rails and trying to learn\nPython. I recently started contributing to Open source projects.My major\ncontribution was at Mozilla, where I worked with the QA for Cloud services. I did\nmanual and automated tests for various cloud services. I wrote documentation\ntoo. Above that, I am competent and I am always passionate about what I get my\nhands on.\n\nProject summary\n\nCurrently Jenkins plugin documentation is being stored in Confluence. Sometimes\nthe documentation is scattered and outdated. In order to improve the situation we\nwould like to follow the documentation-as-code approach and to put docs to\nplugin repositories and then publish them on the project website using the\nawestruct engine. The project aims an implementation of a documentation\ncontinuous deployment flow powered by Jenkins and Pipeline Plugin.\n\nThe idea is to automatically pull in the README and other docs from GitHub, show\nchangelogs with versions and releases dates. I will be designing file templates\nthat will contain most of the  docs information that will be required from\nplugin developers. Initially the files will be written in\nAsciiDoc. Plugin developers will get a chance to\nreview the templates. The templates will be prototyped by various plugin\ndevelopers.\n\nThe docs that will be automatically pulled from github and will be published on\nJenkins.io under the Documentation section.\n\nMy mentors are R.Tyler and\nBaptiste Mathus\n\nI hope to achieve this by 25th June when we will be having our mid-term\nevaluations.\n\nI will update more on the progress.\n\nLinks\n\nGsoc Page\n\nJenkins Gsoc Page\n\nMailing List discussion on Jenkins-Developers\n\nMy blog on Medium","title":"GSOC Project Intro: Automatic Plugin Documentation","tags":["gsoc","plugins"],"authors":[{"avatar":null,"blog":null,"github":"anyangocynthia","html":"","id":"cynthia","irc":null,"linkedin":null,"name":"Cynthia Anyango","slug":"/blog/authors/cynthia","twitter":"annyanngo"}]}},{"node":{"date":"2016-05-26T00:00:00.000Z","id":"4a650522-ee39-5465-887f-963c348a9754","slug":"/blog/2016/05/26/gsoc-jenkins-web-ui-project/","strippedHtml":"About me\n\nMy name is Samat Davletshin and I am from HSE University from Moscow, Russia. I\ninterned at Intel and Yandex, and cofounded a startup\nproject where I personally developed front-end and back-end of the website.\n\nI am excited to participate in GSoC with Jenkins this summer as a chanсe to make\na positive change for thousands of users as well as to learn from great mentors.\n\nAbstract\n\nAlthough powerful, Jenkins new job creation and configuration process may be non\nobvious and time consuming. This can be improved by making UI more intuitive,\nconcise, and functional. I plan to achieve this by creating a simpler new job\ncreation, configuration process focused on essential elements, and embedding new\nfunctionality.\n\nMy mentors are Kirill Merkushev and\nMichael Neale\n\nDeliverables\n\nNew job creation\n\nNew job name validation\n\nInitially, job validation was unresponsive, job creation was still allowed with\nan invalid name, and some allowed characters even crashed Jenkins. Happily, two\nof this problems were fixed in recent improvements and I plan add only a real\ntime name check for invalid characters.\n\nPopup window\n\nJenkins has a lot of windows reloads that may time consuming. The creation of\nnew job is a simple process requiring only job name and job type. This way UI\nmay be improved by reducing page reloads and putting new job creation interface\nin a dialog window. Such popup would likely consist of three steps of\nimplementation: rendering a dialog window, receiving JSON with job types,\nsending a POST request to create the job.\n\nConfiguration page\n\nChanging help information\n\nAs reported by some users, it would be useful to have the functionality to\nchange help information. Installation administrators would be able to change the\nhelp info and choose editing rights for other users. That would likely require a\ncreation of extension points and a plugin using them. I also would like to\ninclude the ability to style the help information using markdown as shown above.\n\n[Optional] The functionality is extended to creation of crowd sourced \"wiki like\" documentation\n\nAs in\nlocalization\nplugin the changes are gathered and applied beyond installation of a particular\nuser.\n\nMore intuitive configuration page.\n\nPursuing to solve this  issue\n\nAlthough there are a lot improvements in new configuration page, there is always\na room for improvements. An advanced job still has a very complicated and hard\nto read configuration page. It is still open to discussion, but I may approach\nit by better division of configuration parts such as an accordion based\nnavigation.\n\nHome page\n\n[Optional] Removing \"My Views\" page\n\n\"My Views\" page may unnecessary complicate essential sidepanel navigation. Since\nit contains very small functionality, the functions may be moved to the home\npage and the whole page may be removed. That may be implemented by adding icons\nto \"My Views\" tabs. Additionally, the standard view creation page can create\neither of the types\n\n[Optional] Reducing number of UI elements\n\nThe home page may contain some UI elements that are not essential and rarely\nused. This way elements \"enable auto refresh\", “edit description”, “icon sizes”,\n”legend”, “RSS” may be removed from home page and placed under \"Manage Jenkins\"\nor an upper menu. It is also possible to create new extension points to support\nnew UI elements through plugins.\n\nCredentials store page\n\n[Optional] Grouping credentials and their domains\n\nCredentials page has too many reloads and requires many clicks to get to a\nrequired credentials page. That may be improved by removing the last page and\nshowing credentials under domains.\n\nCurrent progress\n\nBy May 25th I learned about the structure and tools of Jenkins and started\nworking on the first project:\n\nI started with New Job Name validation first. Luckily, in last updates the\nchanges of recena there\nwere implemented all of the changes I proposed except real time check on name\nvalidity. Here I proposed the change which fixes it by\nsending GET request on keyup event in addition to blur.\n\nI also made a New Job Popup with using existing interface.\n\nView the current\npop-up progress\n\nI used Remodal library for popup and put\nthere\nexisting\nNew Job container. Surprisingly, it was fully functional right away. On the GIF\nyou can see that popup receives all job types and then successfully submits the\npost form creating a new job. I think that could be a good first step. Further I\ncan start changing the window itself.\n\nLinks\n\nInitial proposal of the project\n\nThe project discussion on mailing list\n\nJenkins GSoC Page\n\nProject repository","title":"GSoC Project Intro: Improving Job Creation/Configuration","tags":["core","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"samatdav","html":"","id":"samatdav","irc":null,"linkedin":null,"name":"Samat Davletshin","slug":"/blog/authors/samatdav","twitter":null}]}},{"node":{"date":"2016-05-23T00:00:00.000Z","id":"85257451-d116-575c-b893-3c51d7386caa","slug":"/blog/2016/05/23/external-workspace-manager-plugin/","strippedHtml":"About myself\n\nMy name is Alexandru Somai.\nI’m following a major in Software Engineering at the Babes-Bolyai University of Cluj-Napoca, Romania.\nI have more than two years hands-on experience working in Software Development.\n\nI enjoy writing code in Java, Groovy and JavaScript.\nThe technologies and frameworks that I’m most familiar with are: Spring Framework, Spring Security, Hibernate,\nJMS, Web Services, JUnit, TestNG, Mockito.\nAs build tools and continuous integration, I’m using Maven and Jenkins.\nI’m a passionate software developer who is always learning, always looking for new challenges.\nI want to start contributing to the open source community and Google Summer of Code is a starting point for me.\n\nProject summary\n\nCurrently, Jenkins’ build workspace may become very large in size due to the fact that some compilers generate\nvery large volumes of data.\nThe existing plugins that share the workspace across builds are able to do this by copying the files from\none workspace to another, process which is inefficient.\nA solution is to have a Jenkins plugin that is able to manage and reuse the same workspace between multiple builds.\n\nAs part of the Google Summer of Code 2016 I will be working on\nthe External Workspace Manager plugin.\nMy mentors for this project are Oleg Nenashev\nand Martin d’Anjou.\nThis plugin aims to provide an external workspace management system.\nIt should facilitate workspace share and reuse across multiple Jenkins jobs.\nIt should eliminate the need to copy, archive or move files.\nThe plugin will be written for Pipeline jobs.\n\nUsage\n\nPrerequisites\n\nMultiple physical disks accessible from controller.\n\nThe same physical disks must be accessible from Jenkins Nodes (renamed to Agents in Jenkins 2.0).\n\nIn the Jenkins global configuration, define a disk pool (or many) that will contain the physical disks.\n\nIn each Node configuration, define the mounting point from the current node to each physical disk.\n\nThe following diagram gives you an overview of how an External Workspace Manager configuration may look like:\n\nExample one\n\nLet’s assume that we have one Jenkins job. In this job, we want to use the same workspace on multiple Jenkins nodes.\nOur pipeline code may look like this:\n\nstage ('Stage 1. Allocate workspace')\ndef extWorkspace = exwsAllocate id: 'diskpool1'\n\nnode ('linux') {\n    exws (extWorkspace) {\n        stage('Stage 2. Build on the build server')\n        git url: '...'\n        sh 'mvn clean install'\n    }\n}\n\nnode ('test') {\n    exws (extWorkspace) {\n        stage('Stage 3. Run tests on a test machine')\n        sh 'mvn test'\n    }\n}\n\nNote: The stage() steps are optional from the External Workspace Manager plugin perspective.\n\nStage 1. Allocate workspace\n\nThe exwsAllocate step selects a disk from diskpool1\n(default behavior: the disk with the most available size).\nOn that disk, let’s say disk1, it allocates a directory.\nThe computed directory path is: /physicalPathOnDisk/$JOB_NAME/$BUILD_NUMBER.\n\nFor example, Let’s assume that the $JOB_NAME is integration and the $BUILD_NUMBER is 14.\nThen, the resulting path is: /jenkins-project/disk1/integration/14.\n\nStage 2. Build on the build server\n\nAll the nodes labeled linux must have access to the disks defined in the disk pool.\nIn the Jenkins Node configurations we have defined the local paths that are the mounting points to each disk.\n\nThe exws step concatenates the node’s local path with the path returned by the exwsAllocate step.\nIn our case, the node labeled linux has its local path to disk1 defined as: /linux-node/disk1/.\nSo, the complete workspace path is: /linux-node/disk1/jenkins-project/disk1/integration/14.\n\nStage 3. Run tests on a test machine\n\nFurther, we want to run our tests on a different node, but we want to reuse the previously created workspace.\n\nIn the node labeled test we have defined the local path to disk1 as: /test-node/disk1/.\nBy applying the exws step, our tests will be able to run in the same workspace as the build.\nTherefore, the path is: /test-node/disk1/jenkins-project/disk1/integration/14.\n\nExample two\n\nLet’s assume that we have two Jenkins jobs, one called upstream and the other one called downstream.\nIn the upstream job, we clone the repository and build the project, and in the downstream job we run the tests.\nIn the downstream job we don’t want to clone and re-build the project, we need to use the same\nworkspace created in the upstream job.\nWe have to be able to do so without copying the workspace content from one location to another.\n\nThe pipeline code in the upstream job is the following:\n\nstage ('Stage 1. Allocate workspace in the upstream job')\ndef extWorkspace = exwsAllocate id: 'diskpool1'\n\nnode ('linux') {\n    exws (extWorkspace) {\n        stage('Stage 2. Build in the upstream job')\n           git url: '...'\n           sh 'mvn clean install'\n    }\n}\n\nAnd the downstream 's pipeline code is:\n\nstage ('Stage 3. Allocate workspace in the downstream job')\ndef extWorkspace = exwsAllocate id: 'diskpool1', upstream: 'upstream'\n\nnode ('test') {\n    exws (extWorkspace) {\n        stage('Stage 4. Run tests in the downstream job')\n        sh 'mvn test'\n    }\n}\n\nStage 1. Allocate workspace in the upstream job\n\nThe functionality is the same as in example one - stage 1.\nIn our case, the allocated directory on the physical disk is: /jenkins-project/disk1/upstream/14.\n\nStage 2. Build in the upstream job\n\nSame functionality as example one - stage 2.\nThe final workspace path is: /linux-node/disk1/jenkins-project/disk1/upstream/14.\n\nStage 3. Allocate workspace in the downstream job\n\nBy passing the upstream parameter to the exwsAllocate step,\nit selects the most recent stable upstream workspace (default behavior).\nThe workspace path pattern is like this: /physicalPathOnDisk/$UPSTREAM_NAME/$MOST_RECENT_STABLE_BUILD.\nLet’s assume that the last stable build number is 12, then the resulting path is:\n/jenkins-project/disk1/upstream/12.\n\nStage 4. Run tests in the downstream job\n\nThe exws step concatenates the node’s local path with the path returned by the exwsAllocate step in stage 3.\nIn this scenario, the complete path for running tests is: /test-node/disk1/jenkins-project/disk1/upstream/12.\nIt will reuse the workspace defined in the upstream job.\n\nAdditional details\n\nYou may find the complete project proposal, along with the design details, features, more examples and use cases,\nimplementation ideas and milestones in the design document.\nThe plugin repository will be available on GitHub.\n\nA prototype version of the plugin should be available in late June and the releasable version in late August.\nI will be holding plugin functionality demos within the community.\n\nI do appreciate any feedback.\nYou may add comments in the design document.\nIf you are interested to have a verbal conversation, feel free to join our regular meetings on Mondays at\n12:00 PM UTC\non the Jenkins hangout.\nI will be posting updates from time to time about the plugin status on the\nJenkins developers mailing list.\n\nLinks\n\nDesign document\n\nGSoC program\n\nJenkins GSoC Page\n\nProject repository","title":"GSoC Project Intro: External Workspace Manager Plugin","tags":["pipeline","plugins","gsoc"],"authors":[{"avatar":null,"blog":null,"github":"alexsomai","html":"","id":"alexsomai","irc":null,"linkedin":null,"name":"Alexandru Somai","slug":"/blog/authors/alexsomai","twitter":"alex_somai"}]}},{"node":{"date":"2016-04-11T00:00:00.000Z","id":"25d1b7f0-6783-53a9-aec5-f7242e8493d2","slug":"/blog/2016/04/11/gsoc2016-mentors-call/","strippedHtml":"As you probably know, Jenkins project has been accepted to\nGoogle Summer of Code 2016.\n\nDuring last month we were working with students in order to discuss their project ideas and to review their application drafts.\nThanks again to all students and mentors for your hard work during about ten office hours and dozens of other calls/chats!\n\nCurrent status\n\nWe have successfully handled the student application period\n\nWe have received a bunch of good project proposals (mentors cannot disclose the number)\n\nWe have done the preliminary filtering of applications\n\nGSoC mentors and organization admins have prepared the project slot application draft\n\nCurrently we are looking for mentors.\nWe have a minimal required number for the current project slot application plan, but additional expertise would allow us to share the load and to provide more expertise to students.\n\nIf you want to be a mentor:\n\nCheck out mentor requirements here.\n\nCheck out the project ideas\nhere.\n\nStudent application period is finished, so it is too late to propose project ideas for this year\n\nYou can join the mentor team for one of the mentioned projects\n\nHot areas: UI improvements, Fingerprints, External Workspace Manager\n\nContact Google GSoC admins via jenkinsci-gsoc-org@googlegroups.com\n\nLinks\n\nGSoC2016 page on our Wiki\n\nJenkins page on the GSoC2016 website","title":"Google Summer of Code. Call for Mentors","tags":["general","jenkins2","gsoc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-03-03T00:00:00.000Z","id":"ae34a976-673f-5cdd-8e5b-e2fd373cd7c6","slug":"/blog/2016/03/03/gsoc2016-announcement/","strippedHtml":"We are happy to announce that Jenkins project application has been accepted to\nGoogle Summer of Code 2016 (GSoC). Thanks\nto everybody who helped prepare the application and submitted project ideas!\n\nWe would like to invite students to join the Jenkins community and work together\non the ongoing Jenkins 2.0 activities and other medium-term projects.\n\nThe student projects we are primarily interested in would improve the overall\nJenkins user experience in a number of different aspects. This includes user\ninterface changes and stability improvements but also major new features such\nas Pipeline as code.\n\nThe projects we’ve suggested revolve around all parts of the Jenkins project:\ncore, plugins, website and our internal automation infrastructure. More details\non what has been suggested can be found on the\nwiki\nwhich include:\n\nJenkins web interface improvements\n\n\"Update Center 2.0\"\n\nNew generation of the fingerprinting engine\n\nExternal workspace manager\n\nIntegration of Docker plugins with Jenkins 2.0 features\n\nPlugins for Electronic Design Automation and Embedded tools integration\n\nImprovements of the Support plugin\n\nImprovements to Jenkins project infrastructure: core infra, website, plugin documentation and more\n\nIf you are a student:\n\nCheck out the project ideas here.\n\nSelect an interesting project idea or draft your own proposal.\n\nIf you are not familiar with Jenkins, we highly recommend trying it out with one of your previous projects. You can also try available Jenkins features from the project ideas.\n\nIntroduce yourself the community and start your project proposal discussion (see the guidelines here).\n\nJoin us at GSoC office hours. We plan to have two meetings starting on March 7th.\n\nIf you want to be a mentor:\n\nFeel free to team up with other mentors\n\nWe accept extra project proposals from mentors until March 9th.\n\nLinks\n\nJenkins project page on the GSoC2016 website\n\nGSoC2016 page on our wiki\n\nAnnouncement in Twitter","title":"Jenkins joins the Google Summer of Code 2016","tags":["general","jenkins2","gsoc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"gsoc","limit":8,"skip":64,"numPages":9,"currentPage":9}},
    "staticQueryHashes": ["3649515864"]}