{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/tutorial/page/3",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2015-12-03T00:00:00.000Z","id":"51e550d9-2ab9-5be8-be79-96bef6d8ca1a","slug":"/blog/2015/12/03/pipeline-as-code-with-multibranch-workflows-in-jenkins/","strippedHtml":"Note: This is a guest post by Kishore Bhatia. Kishore works for CloudBees, building custom frameworks with Open Source software and helping customers solve engineering problems around continuous delivery and DevOps at scale.\n\nThis year some great new Jenkins features came out of the butler’s goodie bag - amongst them, the most important one being the ability to realize continuous delivery pipeline as code!\nThe features like Workflow Multibranch, pipeline-as-code (with a marker file that Jenkins looks for in your application’s SCM repository/branch, aptly named Jenkinsfile) are the foundations to making Jenkins super intelligent to automagically create workflows (rather, a CI/CD pipeline) to build your code and orchestrate the work required to drive your application from concept to delivery!\n\nOverview\n\nThe Workflow Multibranch feature (provided by the workflow plugin) provides the following key abilities:\n\nAutomatic Workflow (job) creation in Jenkins per new branch in the repo (assuming webhooks are registered from GH to Jenkins).\n\nBuild specific to that child-branch and its unique scm change and build history.\n\nAutomatic job pruning/deletion for branches deleted from the repository, according to the settings.\n\nFlexibility to individually configure branch properties, by overriding the parent properties, if required.\n\nJenkins pipeline-as-code (concept) enables you to maintain your CI/CD workflow logic in the project/application source code repo with no additional configuration to be maintained per branch in Jenkins.\n\nThe Workflow script to build/test/deploy your code is always synchronized with the rest of the source code you are working on.\n\nTo demonstrate the concept here - Let’s use a basic Java Web application project with a Maven pom.xml as shown in the structure below (this is using GitHub as the SCM but you can do this on SVN or Mercurial too).\n\nThis project has a marker file for Jenkins in the repo - Jenkinsfile. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic1.png\n\nSo, what’s a Jenkinsfile? The Jenkinsfile is essentially your Jenkins Workflow, a script, that defines the CI/CD pipeline logic for a project with steps to build/test/deploy etc. captured in various stages.\n\nSo for our sample Java web application, a basic Jenkinsfile could be something like -\n\nnode {\n   // Mark the code checkout 'stage'....\n   stage 'Checkout'\n\n   // Checkout code from repository\n   checkout scm\n\n   // Get the maven tool.\n   // ** NOTE: This 'M3' maven tool must be configured\n   // **       in the global configuration.\n   def mvnHome = tool 'M3'\n\n   // Mark the code build 'stage'....\n   stage 'Build'\n   // Run the maven build\n   sh \"${mvnHome}/bin/mvn clean install\"\n}\n\nJust having this file in the source code repo root would mean that -\n\nJenkins will automatically recognize this branch and create appropriate jobs by itself.\n\nQuick, 1-step code checkout using: “checkout scm” in your workflow\n\nEvery time a new change is pushed to this branch, the branch is built and the commit status gets updated.\n\nWhen the branch is destroyed in the repository, or if Jenkinsfile is removed, the corresponding job gets destroyed from Jenkins automatically ( You can retain these jobs and/or archive the builds for audit/compliance requirements using the retention property - Orphan Item strategy)\n\nthere are various mechanisms to promote reuse of Workflow scripts, such as the Workflow Global Library.\n\nRequired Jenkins configuration\n\nMake sure you’ve the latest Workflow and (v1.11 as of writing this blog) Workflow Multibranch plugins installed on your Jenkins instance image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic2.png\n\nAlso, ensure that other dependencies, like SCM plugins and build tools, are met:\n\nEither SVN/Git/Mercurial (depending on your SCM)\n\nGitHub Branch Source Plugin (optimized to use the GitHub API and improve performance)\n\nMaven build tool\n\nFinally, make sure you’ve created the required Webhook from your SCM (Github in this case) to Jenkins.\nHere’s how to do that:\n\nSetting up GitHub Webhooks in Jenkins\n\nStep-by-step guide to setting up Jenkins for GitHub projects\n\nThen create a new Multibranch Workflow Job with configuration as shown below - mainly selecting the Branch Sources (Git, in this example) and providing the branch/repo URL with credentials.\n\nBranch sources (Git) - https://github.com/kishorebhatia/pipeline-as-code-demo (or a repo where you’ve cloned this source code with Jenkinsfile)\n\nLeave all other properties default and Save. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic3.png\n\nYou’ll observe that Jenkins would perform Branch Indexing on that “cd” job folder and start the workflow for the master branch, with an automatically created new job, named master, under the “cd” folder.\n\nThe workflow does a dummy step for application deploys to the environments in this sequence Staging -> Waits for manual approval -> PROD\n\nNow, let’s create a new branch off of this master branch in your cloned git repo:\n\n$ git branch newBranch (create a newBranch)\n\n$ git checkout newBranch (switches to newBranch)\n\n$ git push --set-upstream origin newBranch (pushes newBranch)\n\nYou’ll observe that your Jenkins instance automatically picks up this newBranch and starts running the workflow (with the Jenkinsfile in this newBranch) to build/test/deploy the code. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic4.png\n\nNext, if you now delete this newBranch ( git branch -D newBranch), Jenkins will automatically remove the orphan Workflow job for newBranch. You can retain these jobs even after the branches are deleted using the Orphaned Item Strategy property in the main \"cd\" job’s configuration.\n\nSo we observed the following benefits of this pipeline-as-code approach:\n\nOverall job definition is a script (Jenkinsfile)\n\nCalls your build tools and scripts for details\n\nThe build script can be versioned alongside project sources\n\nJenkins handles feature/experimental branches automatically\n\nKeep less configuration in $JENKINS_HOME\n\nDockerized Demo environment\n\nYou can also use the following docker image to run this demo with a preconfigured Jenkins environment and the sample job: jenkinsci/workflow-demo (i.e. docker pull jenkinsci/workflow-demo)\n\nThis docker container includes Jenkins with Workflow and Workflow Multibranch plugins, a local git repo with the aforementioned Java web application and Jetty to demonstrate a continuous delivery pipeline of this application deployed and tested across multiple environments in the pipeline with an approval gate before promoting to PROD (like QA, Staging and PROD).\n\nThere’s a \"cd\" job pre-configured as a multibranch Workflow job.\n\nLaunch the docker demo as: docker run -p 8080:8080 -p 8081:8081 -p 9418:9418 -ti jenkinsci/workflow-demo\n\nNow, you can access Jenkins on port 8080 and Jetty on port 8081 from localhost or the IP of your boot2docker/docker-machine environment.\n\nThe demo container has a local git repo so you can clone: git://localhost/repo. When creating new branches, each branch automatically creates a matching subproject in Jenkins and triggers the build for that branch. The workflow:\n\nChecks out source code from the same repository and commit as Jenkinsfile.\n\nBuilds sources via Maven with unit testing.\n\nRuns two parallel integration tests that involve deploying the app to ephemeral server instances, which get thrown away when tests are done (this is done by using auto-deployment of Jetty)\n\nOnce integration tests are successful, the webapp gets to the staging server at localhost:8081/staging (or your docker-machine/boot2docker instance IP)\n\nrequires a human to Manually inspect the staging instance, and when ready, approves the deployment to the production server at http://localhost:8081/production/\n\nReferences\n\nDeveloper blog by jglick introducing multibranch support\n\nworkflow plugin tutorial\n\nworkflow plugin presentations\n\nworkflow plugin demo readme","title":"Pipeline-as-code with Multibranch Workflows in Jenkins","tags":["general","guest post","tutorial","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-08-20T00:00:00.000Z","id":"d1860023-e5b8-5452-a7f4-ba23d5ca66a3","slug":"/blog/2015/08/20/upcoming-office-hour-on-kubernetes/","strippedHtml":"Nicolas De Loof will host an office hour next Wednesday 11 AM PDT on integrating Kubernetes with Jenkins. Kubernetes is an open-source project by Google that provides a platform for managing Docker containers as a cluster.\n\nDuring this session, Nicolas will introduce Kubernetes, explain how it can benefit Jenkins and demonstrate the Kubernetes Plugin.\nThen he will discuss the design of the Kubernetes plugin and plans he has for future improvements.\n\nParticipate in the Hangout on Air or watch live on YouTube.","title":"Upcoming office hour on Kubernetes","tags":["general","plugins","screencast","tutorial","docker"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2015-08-10T00:00:00.000Z","id":"69de0fa0-b2c1-5475-b88a-d08748f38442","slug":"/blog/2015/08/10/upcoming-office-hour-on-workflow/","strippedHtml":"Jesse Glick will host the next office hour this Wednesday, 11 AM PDT on Workflow.\n\nWorkflow has been Jesse’s project for the last year or so. If you don’t know what Workflow is, check out these talks about it from past JUCes:\n\nJune 2014\n\nOctober 2014\n\nJune 2015\n\nThis will be a developer-focused session on integrating with Workflow. He’ll discuss things like how to make sure your plugin can be used as part of workflows, and best practices for extending the workflow DSL. There’s already been a session on Workflow in January, but Jesse hasn’t been idle, and there’s new stuff to share.\n\nParticipate in the Hangout on Air or watch live on YouTube.","title":"Upcoming office hour on Workflow","tags":["development","tutorial","pipeline","workflow"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2014-08-28T00:00:00.000Z","id":"9b8568a6-9659-597e-80e4-a3f253035618","slug":"/blog/2014/08/28/workflow-plugin-code-walk-through/","strippedHtml":"Jesse and I will walk through the source code of the workflow plugin, highlights key abstractions and extension points, and discuss how they are put together.\n\nIf you are interested in developing or retrofitting plugins to work with workflows, I think you’ll find this session interesting.\n\nThe event will be on Google Hangout tomorrow. The time of the day is the same as usual office hours.","title":"Workflow plugin code walk-through","tags":["development","meetup","plugins","screencast","tutorial","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-05-27T00:00:00.000Z","id":"63a8754b-9610-5783-a10e-e6ab1d4d4438","slug":"/blog/2014/05/27/acceptance-test-project-progress-report/","strippedHtml":"+\nOver the past 30 days or so, https://github.com/jenkinsci/acceptance-test-harness/[the acceptance test project] has made a great progress. +\n +\n\n+\nThis project consists of a reusable harness that can be used by plugin developers and users to write functional test cases. These tests can be run against Jenkins instances that are deployed in https://github.com/jenkinsci/acceptance-test-harness/blob/master/docs/CONTROLLER.md[all sorts of different ways], and can interact with https://github.com/jenkinsci/acceptance-test-harness/blob/master/docs/FIXTURES.md[complex real fixtures]. These tests can be also run with specific version of Jenkins core and a combination of plugins. +\n +\n\n+\nThe number of tests have https://jenkins.ci.cloudbees.com/job/core/job/acceptance-test-harness/[steadily increased to above 300]. Several of those are by https://github.com/eidottermihi[Michael Prankl], where he tests https://github.com/jenkinsci/acceptance-test-harness/blob/master/src/test/java/plugins/LdapPluginTest.java[the LDAP plugin with the real OpenLDAP server instance] that runs inside Docker — a kind of test that just wasn't possible before can be now easily written. +\n +\n\n+\nhttps://github.com/jenkinsci/acceptance-test-harness/graphs/contributors[More than a dozen people] have contributed. https://github.com/jenkinsci/acceptance-test-harness/commits/master[A dozen changes are going in every single day], and more are coming — for example, Stephen is working on modularizing this harness and adding new pieces that allow people to do scalability and load testing. That'll be a part of this effort soon. +\n +\n\n+\nIf you are one of the large scale users who are interested in automating some of your Jenkins acceptance testing, please https://groups.google.com/forum/#!forum/jenkinsci-dev[drop us a note at the DEV list] so that we can work together. You can also watch the recording of our last https://wiki.jenkins.io/display/JENKINS/Office+Hours[office hours] where I demoed how you'd develop a test on top of this: +\n +\n +\n +\n\n+\nI think we all agree that this is an important effort/ Looking forward to joining the efforts with more people in the community! +\n +","title":"Acceptance test project progress report","tags":["development","feedback","news","tutorial","lts","video"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-05-19T00:00:00.000Z","id":"eed180da-45db-59c1-a6f0-28b8e0843f8d","slug":"/blog/2014/05/19/jenkins-office-hour-tutorial-on-writing-an-acceptance-test/","strippedHtml":"+\nimage:https://wiki.jenkins.io/download/attachments/57181939/hangout.png?version=1&modificationDate=1361998218000[image,width=200] +\n\n+\n+\n\n+\nThis week I'm going to do an office hour on how to write an acceptance test in https://github.com/jenkinsci/acceptance-test-harness[Jenkins acceptance test harness]. The event is on https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Office+Hours&iso=20140519T11&p1=283&ah=1[Wednesday 11am PT]. +\n +\n\n+\nThis new Selenium-based test harness is full of page objects and other abstractions that let you write blackbox integration tests on Jenkins and its plugins, as well as how they behave under various environments. +\n +\n\n+\nUnlike our regular office hours, https://plus.google.com/u/0/events/cpr7lhq3d544rj5uqid4rin3deg[the event is done through Hangout on air]. But I do want at least several people to join Hangout interactively, not just watch the event in a read-only mode. +\n +\n\n+\nTo join the event interactively (as opposed to read-only), I think you need to https://plus.google.com/hangouts/_/hoaevent/AP36tYeeXozAE_RiZWtTfX-O-sEtxJ3qhu4Asnfy7tZOZf3hs3jX1Q[come here] (but since Hangout URL can change, please check back on this post right before the office hour begins, so that I can post an up-to-date URL.) +","title":"Jenkins Office Hour: Tutorial on writing an acceptance test","tags":["development","screencast","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-12-28T00:00:00.000Z","id":"1c024cc8-c856-5493-a407-dae59c0cc292","slug":"/blog/2011/12/28/adding-diagrams-to-wiki/","strippedHtml":"Thanks to the kindness from Gliffy, we can now add diagrams to Wiki pages, in a way that enables collaborative edits.\n\nSee more info, including a sample diagram in a Wiki page.","title":"Adding diagrams to Wiki","tags":["infrastructure","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-06-08T00:00:00.000Z","id":"1ca41d43-8c95-5909-9944-7573d0f27283","slug":"/blog/2011/06/08/building-a-software-diamond-with-jenkins/","strippedHtml":"[ Editor’s Note: This is a guest post from Jenkins community member Tom Rini ]\n\nAlternatively: How to make your parallel jobs kick one last job at the end\n\nMany of us have had occasion to think: \" I could make this project build quicker if I could just run parts in parallel and then one final job to wrap it up.\"\n\nWell, good news! Jenkins is here to help!  With the Join Plugin you can do just that.  Over on the confluence page it’s got a number of examples and fancy flow charts.  But the take-away is that if you can describe the flow, you can make it happen.  But you’re saying \"wait, I need to pass information around between the jobs.\"\n\nWe’ve got that one covered for you too with the Parameterized Trigger Plugin.  And here’s the best part, these two can work together!  With both plugins installed you can follow the steps listed in the Build Parameters section of the Join Plugin. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/join_trigger.png\n\nAnd as they say, now you’re cooking with gas!","title":"Building a software diamond with Jenkins","tags":["general","guest post","plugins","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}}]}},"pageContext":{"tag":"tutorial","limit":8,"skip":16,"numPages":4,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}