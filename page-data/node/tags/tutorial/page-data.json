{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/tutorial",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-05-20T00:00:00.000Z","id":"95f5c8b2-77be-5e34-b420-2968ceb655ee","slug":"/blog/2021/05/20/configure-plugins-with-jcasc/","strippedHtml":"This blog post is for anyone interested to know how to configure a plugin using the Jenkins Configuration as a Code (JCasC) plugin, more specifically, this blog will guide you to get the YAML equivalent of a plugin’s configuration and use it to do some changes to the plugin without using the Jenkins UI.\n\nIf you’re a beginner at JCasC and want to learn more about it, you can head over to the following resources to understand JCasC better:\n\nJCasC Documentation\n\nOverview of JCasC (Video Presentation)\n\nManage JCasC (DevOps World 2018)\n\nConfiguring your first plugin using JCasC (Video Demo)\n\nOverview\n\nSo, these are the steps we will be following to achieve our aim:\n\nBrief Introduction to jenkins.yaml file\n\nConfigure the plugin on the UI\n\nDownload the Configuration\n\nUpdate JCasC file locally\n\nLoad the jenkins.yaml file on the Jenkins server\n\nVerify the changes on the UI\n\nBrief Introduction to jenkins.yaml file\n\nThe jenkins.yaml file contains the configuration of the Jenkins instance in YAML format.\nThe JCasC plugin refers to this file to configure the Jenkins instance.\n\nThe default location of jenkins.yaml is $JENKINS_HOME/jenkins.yaml, from where it can be fetched into the Jenkins server whenever you apply a new configuration.\n\nDownload your jenkins.yaml file by going to Manage Jenkins Configuration as Code Download Configuration.\n\nMake sure this file is saved at location $JENKINS_HOME/jenkins.yaml.\n\nLet’s change the systemMessage field to:\n\nFigure 1. Updating the jenkins.yaml file\n\nReload the existing configuration to apply the system message change\n\nNow, go back to the Dashboard and you can see the updated System Message on top:\n\nFigure 2. Viewing the changes on Dashboard\n\nThis file will be used later to configure the plugin using JCasC.\n\nConfigure the plugin on the UI\n\nFor this demo, install the View Job Filters plugin.\n\nLet’s create a view by clicking on the New View option on the left side of the Dashboard.\n\nGive it a name (say, “testView”) and set its type to List View, and click on the OK button.\n\nFigure 3. Creating the View\n\nNow click on Add Job Filter to add any kind of filter, so let’s select Build Duration Filter and fill the field with any value (say, \"60\" minutes),\n\nFigure 4. Adding filter to the view\n\nClick on Apply Save.\n\nTo view the full configuration, check out your main jenkins.yaml configuration file, by clicking on Manage Jenkins Configuration as Code View Configuration\n\nGo to the views section in this YAML file to see details related to the view,\n\nFigure 5. Here, details regarding the view (which we just created) is visible\n\nDownload the Configuration\n\nNow that you have successfully configured your plugin by UI, let’s download the configuration by going to Manage Jenkins on the Dashboard, then click on Configuration as Code under \"System Configuration\".\n\nNow click on the Download Configuration button to save the configuration file locally.\n\nFigure 6. Downloading the Configuration\n\nUpdate JCasC file locally\n\nAdd some changes in your downloaded copy of the jenkins.yaml file, to see those changes being automatically reflected on the UI.\n\nFor demo purposes, let’s change the name to “YoutubeDemoView” and set the buildDurationMinutes as \"55\".\n\nFigure 7. Changing the View details locally\n\nSave the file.\n\nLoad the jenkins.yaml file on the Jenkins server\n\nNow to reflect the local changes done in the jenkins.yaml file onto the Jenkins server, click on the Reload existing configuration button.\n\nFigure 8. Applying the New Configuration to the Jenkins instance\n\nVerify the changes on the UI\n\nGo back to the main page by clicking on the Jenkins logo on the top-left side.\n\nAnd you will notice that the name of your view has been changed from \"testView\" to “YoutubeDemoView”,\n\nAnd the field value of Build Duration Filter has been changed from \"60\" to “55”.\n\nThese two are the exact changes that we did locally in our jenkins.yaml file.\n\nFigure 9. Verifying the changes\n\nCongratulations! You’ve successfully configured a plugin (“View Job Filter”) automatically with the help of the “Jenkins Configuration as Code” plugin! You can repeat the same process for other plugins as well.","title":"Configure Plugins with JCasC","tags":["jcasc","tutorial","plugins","yaml"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"dheerajodha","html":"<div class=\"paragraph\">\n<p>Dheeraj is a Computer Science Engineering student (senior) at Vivekanand Institute of Technology, University of Mumbai. He started his journey of contributing to Jenkins in March 2021. His tiny contributions revolve around the <a href=\"https://github.com/jenkinsci/custom-distribution-service\">Custom Distribution Service for Jenkins Project</a>. He also likes to contribute to the JCasC project and documentation to help the developers.</p>\n</div>","id":"dheerajodha","irc":null,"linkedin":"dheeraj-singh-jodha","name":"Dheeraj Singh Jodha","slug":"blog/author/dheerajodha","twitter":null}]}},{"node":{"date":"2017-11-27T00:00:00.000Z","id":"fd21dbc6-9b4b-5092-b232-0feabaf928ce","slug":"/blog/2017/11/27/tutorials-in-the-jenkins-user-documentation/","strippedHtml":"Regular perusers of the Jenkins User Documentation may have noticed\nthe presence of the Tutorials part (between the Guided Tour and User\nHandbook) that appeared in the last couple of months and gradually began to get\npopulated with much of my recent work, writing Jenkins tutorials.\n\nMy name’s Giles and I’ve been a technical writer in the software development\nfield for several years now. I’ve always been passionate about technical writing\nand more recently, the technologies that go into developing written content and\nautomating its generation - like Jenkins! I was a former Atlassian and recently\njoined CloudBees as a Senior Technical Writer, working remotely from the \"Sydney\nOffice\", with my current focus on the Jenkins User Documentation.\n\nWhy tutorials?\n\nMy exposure to Jenkins and its usage over the years has been patchy at best.\nDuring this time, however, I’ve had some degree of experience as a user of\nvarious continuous delivery (CD) tools like Jenkins and am reasonably familiar\nwith the advantages these tools can offer software development teams.\n\nI’ve also found that while many software developers are familiar with the\nbroader concept of \"developer operations\" (or simply \"devops\"), fewer seem\nfamiliar with the concepts of CD and related tools to facilitate devops within\norganizations.\n\nThe CD process is based on the fundamental flow of building the application\ntesting it delivering it, where typically:\n\nThe building part involves compiling the application and/or ensuring all\nnecessary libraries and dependencies are in place for the application to run\nas intended.\n\nThe testing part involves testing the built application with automated tests\nto ensure that changes implemented by developers function as expected.\n\nThe delivering part involves packaging or presenting the application in a\nway that can be delivered to customers or other users for any kind of purpose.\n\nNow, as one of the major contributors to the Jenkins User Documentation (and\nfaced with a reasonably steep learning curve), it quickly became apparent about\nthe lack of accessible documentation to hand-hold people relatively new to\nJenkins through this CD process. I couldn’t find anything in the Jenkins User\nDocumentation to demonstrate how Jenkins implements this process on a simple\napp that delivers an end result.\n\nWith the guidance and assistance of helpful colleagues, I therefore decided to\nembark on creating a series of Jenkins tutorials to help fill these\ndocumentation and knowledge gaps. These tutorials are based on Daniele Procida’s\ndescription of how tutorials should be presented in his blog post\n\" What nobody tells you about\ndocumentation\").\n\nIntroductory tutorials\n\nThe first set of tutorials on the Tutorials overview page\ndemonstrate how to implement this fundamental CD process in Jenkins on a simple\napplication for a given technology stack.\n\nSo far, there’s one for\nJava with Maven and another\nfor Node.js and\nReact with npm. Another for Python will be added to this list in the near\nfuture.\n\nThese tutorials define your application’s entire CD process (i.e. your Pipeline)\nin a Jenkinsfile, whose Groovy-like Declarative Pipeline syntax is checked in\nto your Git source repository. Managing your Pipeline with your application’s\nsource code like this forms the fundamentals of \"Pipeline as code\".\n\nThe Introductory tutorials also cover how to use some powerful features of\nJenkins, like Blue Ocean,\nwhich makes it easy to connect to an existing cloud, web or locally hosted Git\nrepository and create your Pipeline with limited knowledge of Pipeline syntax.\n\nAdvanced tutorials\n\nAlso soon to be released will be the first Advanced tutorial on building\nmultibranch Pipelines in Jenkins. This tutorial takes the \"Pipeline as code\"\nconcept to a new level, where a single Jenkinsfile (defining the entire CD\nprocess across all branches of your application’s Git repository) consists of\nmultiple stages which are selectively executed based on the branch that Jenkins\nis building.\n\nAdditional tutorials that demonstrate more advanced features of Jenkins and how\nto manage your Pipelines with greater sophistication and flexibility will be\nadded to this section in future.\n\nSumming up\n\nYou can access all currently available tutorials from the\nTutorials overview page in the Jenkins User Documentation.\nIt’s worthwhile checking that page from time to time as it’ll be updated\nwhenever a new tutorial is published.\n\nAlso, if you have any suggestions for tutorials or other content you’d like to\nsee in the documentation, please post your suggestions in the\nJenkins\nDocumentation Google Group, which you can also post (and reply) to by emailing\njenkinsci-docs@googlegroups.com.\n\nThe Sydney Office team meeting at Carriageworks - from left to right, Giles\nGaskell, Nicholae Pascu, Michael Neale and James Dumay","title":"Introducing Tutorials in the Jenkins User Documentation","tags":["tutorial","blueocean","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"gilesgas","html":"","id":"gilesgas","irc":null,"linkedin":null,"name":"Giles Gaskell","slug":"blog/author/gilesgas","twitter":"giles_gas"}]}},{"node":{"date":"2017-05-18T00:00:00.000Z","id":"231f2272-acd6-5bb2-beae-e3871de86c48","slug":"/blog/2017/05/18/pipeline-dev-tools/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nI’ve only been working with Pipeline for about a year.\nPipeline in and of itself has been a huge improvement over old-style Jenkins projects.\nAs a developer, it has been so great be able work with Jenkins Pipelines\nusing the same tools I use for writing any other kind of code.\n\nI’ve also found a number of tools that are super helpful specifically\nfor developing pipelines. Some were easy to find like the\nbuilt-in documentation\nand the\nSnippet Generator.\nOthers were not as obvious or were only recently released.\nIn this post, I’ll show how a few of those tools make working with Pipelines\neven better.\n\nThe Blue Ocean Pipeline Editor\n\nThe best way to start this list is with the most recent and coolest\narrival in this space: the Blue Ocean Pipeline Editor.  The editor only works\nwith Declarative Pipelines, but it brings a sleek new user experience to writing\nPipelines.  My recent screencast, released as part of the Blue Ocean Launch,\ngives good sense of how useful the editor is:\n\nCommand-line Pipeline Linter\n\nOne of the neat features of the Blue Ocean Pipeline Editor is that it does basic\nvalidation on our Declarative Pipelines before they are even committed or Run.\nThis feature is based on the\nDeclarative Pipeline Linter\nwhich can be accessed from the command-line even if you don’t have Blue Ocean\ninstalled.\n\nWhen I was working on the\nDeclarative Pipeline: Publishing HTML Reports\nblog post, I was still learning the declarative syntax and I made a lot lot of mistakes.\nGetting quick feedback about the whether my Pipeline was in a sane state made writing that blog much easier.\nI wrote a simple shell script that would run my Jenkinsfile through the Declarative Pipeline Linter.\n\npipelint.sh - Linting via HTTP POST using curl\n\n# curl (REST API)\n# User\nJENKINS_USER=bitwisenote-jenkins1\n\n# Api key from \"/me/configure\" on my Jenkins instance\nJENKINS_USER_KEY=--my secret, get your own--\n\n# Url for my local Jenkins instance.\nJENKINS_URL=http://$JENKINS_USER:$JENKINS_USER_KEY@localhost:32769 (1)\n\n# JENKINS_CRUMB is needed if your Jenkins controller has CRSF protection enabled (which it should)\nJENKINS_CRUMB=`curl \"$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\\\":\\\",//crumb)\"`\ncurl -X POST -H $JENKINS_CRUMB -F \"jenkinsfile=\n\n1\nThis is not secure.  I’m running this locally only.\nSee Jenkins CLI for details on how to do this securely.\n\nWith this script, I was able to find the error in this this Pipeline without\nhaving to take the time to run it in Jenkins: (Can you spot the mistake?)\n\n#!groovy\n\npipeline {\n  agent any\n\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      step {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      echo \"Send notifications for result: ${currentBuild.result}\"\n    }\n  }\n}\n\nWhen I ran my pipelint.sh script on this pipeline it reported this error:\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   3831      0 --:--:-- --:--:-- --:--:--  4181\nErrors encountered validating Jenkinsfile:\nWorkflowScript: 30: Unknown stage section \"step\". Starting with version 0.5, steps in a stage must be in a steps block. @ line 30, column 5.\n       stage ('Test') {\n       ^\n\nWorkflowScript: 30: Nothing to execute within stage \"Test\" @ line 34, column 5.\n       stage ('Test') {\n       ^\n\nDoh. I forgot the \"s\" on steps on line 35. Once I added the \"s\" and ran\npipelint.sh again, I got an all clear.\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   5610      0 --:--:-- --:--:-- --:--:--  5750\nJenkinsfile successfully validated.\n\nThis didn’t mean there weren’t other errors, but for a two second smoke test I’ll take it.\n\nReplay\n\nI love being able to use source control to track changes to my Pipelines\nright alongside the rest of the code in a project.  There are also times,\nwhen prototyping or debugging, that I need to iterate quickly on a series\nof possible Pipeline changes.\nThe Replay feature let’s me do that and see the results,\nwithout committing those changes to source control.\n\nWhen I wanted to take the previous Pipeline from agent any to using Docker via\nthe docker { …​ } directive, I used the Replay feature to test it out:\n\nSelected the previously completed run in the build history\n\nClicked \"Replay\" in the left menu\n\nMade modifications and click \"Run\". In this example, I replaced any with the docker { …​ } directive.\n\nChecked the results of changes looked good.\n\nOnce I worked any bugs out of my Pipeline,\nI used Replay to view the Pipeline for the last run and copy it back to my\nJenkinsfile and create a commit for that change.\n\nConclusion\n\nThis is far from a complete list of the tools out there for working with Pipeline.\nThere are many more and the number is growing.\nFor example, one tool  I just recently heard about and haven’t had a chance to delve into\nis the\nPipeline Unit Testing Framework,\nwhich promises the ability to test Pipelines before running them.\nIt’s been a fun year and I can’t wait to see what the next year holds for Pipeline.\n\nHow do you work with Pipeline?\nDo you have a tool that you feel has greatly improved your development experience\nwith Pipeline?  I’m interested in hear about others Jenkins user’s favorite ways\nof working with Pipeline.  Drop me a line via\nemail or on the\n#jenkins IRC channel.","title":"Pipeline Development Tools","tags":["blueocean","pipeline","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-12T00:00:00.000Z","id":"de6a7833-33e4-5a1b-8942-62eba9d0e88e","slug":"/blog/2017/04/12/welcome-to-blue-ocean-dashboard/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI used the Blue Ocean Activity View to track the state of branches and\nPull Requests in one project.\nIn this video, I’ll use the Blue Ocean Dashboard get a personalized view of the\nareas that of my project that are most important to me,\nand also to monitor multiple projects.\nPlease Enjoy!","title":"Getting Started with the Blue Ocean Dashboard","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-11T00:00:00.000Z","id":"9d6e30d7-7295-5fb0-b863-4e1db0a6fa14","slug":"/blog/2017/04/11/welcome-to-blue-ocean-pipeline-activity/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI showed how easy it is to create and edit Declarative Pipelines using the Blue Ocean Visual Pipeline Editor.\nIn this video, I’ll use the Blue Ocean Activity View to track the\nstate of branches and Pull Requests in one project.\nBlue Ocean makes it so much easier to find the logs I need to triage failures.\n\nPlease Enjoy!  In my\nnext video,\nI’ll switch from looking at a single project to monitoring multiple projects with\nthe Blue Ocean Dashboard.","title":"Getting Started with Blue Ocean's Activity View","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-06T00:00:00.000Z","id":"f6b5f809-47da-5d3d-b7ca-7f843a8917d9","slug":"/blog/2017/04/06/welcome-to-blue-ocean-editor/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI explained how to install Blue Ocean on your local Jenkins instance and switch to using Blue Ocean.\nAs promised, here’s a screencast that picks up where that post left off.\nStarting from a clean Jenkins install, the video below will guide you through\ncreating and running your first Pipeline in Blue Ocean with the Visual Pipeline Editor.\n\nPlease Enjoy! In my next video, I’ll go over the\nBlue Ocean Pipeline Activity View.","title":"Getting Started with Blue Ocean's Visual Pipeline Editor","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-05T00:00:00.000Z","id":"ef0f71cf-7b8f-528c-bdbf-cb7997704db5","slug":"/blog/2017/04/05/welcome-to-blue-ocean/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nWelcome to Blue Ocean 1.0!\n\nIn case you’ve been heads down on other projects\nfor the past 10 months,\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 was released today!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nI’ve been working with it for the past several months, and I can tell you it is amazing.\nI wish all the interactions with Jenkins were as easy as this:\n\n10 minutes to Blue Ocean\n\nBlue Ocean is simple to install and will work on basically any Jenkins 2 instance (version 2.7 or later).\nEven better, it runs side-by-side with the existing Jenkins web UI -\nyou can switch back and forth between them whenever you like.\nThere’s really no risk.\nIf you have a Jenkins instance and a good network connection,\nin 10 minutes you could be using Blue Ocean.\n\nLogin to your Jenkins server\n\nClick Manage Jenkins in the sidebar then Manage Plugins\n\nChoose the Available tab and use the search bar to find Blue Ocean\n\nClick the checkbox in the Install column\n\nClick either Install without restart or Download now and install after\nrestart\n\nAfter you install Blue Ocean, you can start using it\nby clicking on Open Blue Ocean in the navigation bar of the\nJenkins web UI, or you can navigate directly to Blue Ocean by adding\n/blue to your Jenkins URL, for example https://ci.jenkins.io/blue .\n\nIf you have to go back to the \"classic\" Jenkins UI,\nthere’s an \"exit\" icon located at the top of every page in Blue Ocean.\n\nDive in!\n\nThat’s it! You now have a working Blue Ocean installation.\nTake a look around at your Pipelines and activity, or try creating a new Pipeline.\nI think you’ll be pleasantly surprised at how intuitive and helpful Blue Ocean can be.\nBlue Ocean is so cool, I never want to leave it.\nOver the next few days, I’ll be publishing a series of videos,\nshowing some common Jenkins use cases and how Blue Ocean makes them clearer and easier than ever before.\n\nStay Tuned!","title":"Getting Started with Blue Ocean","tags":["blueocean","ux","pipeline","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-02-15T00:00:00.000Z","id":"76a4ff94-6194-5d56-a94c-3287ec832681","slug":"/blog/2017/02/15/declarative-notifications/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nDeclare Your Pipelines!\nDeclarative Pipeline 1.0 is here!\nThis is the third post in a series showing some of the cool features of\nDeclarative Pipeline.\n\nIn the\nprevious post,\nwe converted a Scripted Pipeline to a Declarative Pipeline, adding descriptive stages\nand post sections.  In one of those post blocks, we included a placeholder for\nsending notifications.\n\nIn this blog post, we’ll repeat what I did in\n\" Sending Notifications in Pipeline\nbut this time in Declarative Pipeline.\nFirst we’ll integrate calls to notification services Slack, HipChat, and Email into our Pipeline.\nThen we’ll refactor those calls into a single Step in a Shared Library, which\nwe’ll reuse as needed, keeping our Jenkinsfile concise and understandable.\n\nSetup\n\nThe setup for this post is almost the same as\nmy previous Declarative Pipeline post.\nI’ve used a new branch in\nmy fork of the\nHermann project :\nblog/declarative/notifications .\nI’d already set up a Multibranch Pipeline and pointed it at my repository,\nso the new branch will be picked up and built automatically.\n\nI still have my notification targets (where we’ll send notifications) that I created for the\n\" Sending Notifications in Pipeline\" blog post.\nTake a look at that post to review how I setup the\nSlack,\nHipChat,\nand Email-ext\nplugins to use those channels.\n\nAdding Notifications\n\nWe’ll start from the same Pipeline we had at the end of the previous post.\n\nThis Pipeline works quite well, except it doesn’t print anything at the start of\nthe run, and that final always directive only prints a message to the console log.\nLet’s start by getting the notifications working like we did in the original post.\nWe’ll just copy-and-paste the three notification steps (with different parameters)\nto get the notifications working for started, success, and failure.\n\npipeline {\n  /* ... unchanged ... */\n  stages {\n    stage ('Start') {\n      steps {\n        // send build started notifications\n        slackSend (color: '#FFFF00', message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n        // send to HipChat\n        hipchatSend (color: 'YELLOW', notify: true,\n            message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n          )\n\n        // send to email\n        emailext (\n            subject: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n            body: \"\"\" STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n            recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n          )\n      }\n    }\n    /* ... unchanged ... */\n  }\n  post {\n    success {\n      slackSend (color: '#00FF00', message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n      hipchatSend (color: 'GREEN', notify: true,\n          message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n        )\n\n      emailext (\n          subject: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n          body: \"\"\" SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n          recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n        )\n    }\n\n    failure {\n      slackSend (color: '#FF0000', message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n      hipchatSend (color: 'RED', notify: true,\n          message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n        )\n\n      emailext (\n          subject: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n          body: \"\"\" FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n          recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n        )\n    }\n  }\n}\n\nMoving Notifications to Shared Library\n\nThis new Pipeline works and our Declarative Pipeline sends notifications; however,\nit is extremely ugly. In the original post using Scripted Pipeline,\nI defined a single method that I called at both the start and end of the pipeline.\nI’d like to do that here as well, but Declarative doesn’t support creating methods\nthat are accessible to multiple stages.\nFor this, we’ll need to turn to\nShared Libraries.\n\nShared Libraries, as the name suggests,\nlet Jenkins Pipelines share code instead of copying it to each new project.\nShared Libraries are not specific to Declarative; they were released in their\ncurrent form several months ago and were useful in Scripted Pipeline.\nDue to Declarative Pipeline’s lack of support for defining methods,\nShared Libraries take on a vital role.  They are the only supported way within\nDeclarative Pipeline to define methods or classes that we want to use in more than one stage.\n\nThe lack of support for defining methods that are accessible in multiple stages,\nis a known issue, with at least two JIRA tickets:\nJENKINS-41335 and\nJENKINS-41396.\nFor this series, I chose to stick to using features that are fully supported\nin Declarative Pipeline at this time.\nThe internet has plenty of hacked together solutions that happen to work today,\nbut I wanted to highlight current best practices and dependable solutions.\n\nSetting up a Shared Library\n\nI’ve created a simple shared library repository for this series of posts, called\njenkins-pipeline-shared.\nThe shared library functionality has too many configuration options to cover in one post.\nI’ve chosen to configure this library as a \"Global Pipeline Library,\"\naccessible from any project on my Jenkins controller.\nTo setup a \"Global Pipeline Library,\" I navigated to \"Manage Jenkins\" → \"Configure System\"\nin the Jenkins web UI.\nOnce there, under \"Global Pipeline Libraries\", I added a new library.\nI then set the name to bitwiseman-shared, pointed it at my repository,\nand set the default branch for the library to master,\nbut I’ll override that in my Jenkinsfile.\n\nMoving the Code to the Library\n\nAdding a Step to a library involves creating a file with the name of our Step,\nadding our code to a call() method inside that file,\nand replacing the appropriate code in our Jenkinsfile with the new Step calls.\nLibraries can be set to load \"implicitly,\"\nmaking their default branch automatically available to all Pipelines,\nor they can be loaded manually using a @Library annotation.\nThe branch for implicitly loaded libraries can also be overridden using the @Library annotation.\n\nThe minimal set of dependencies for sendNotifications means we can\nbasically copy-and-paste the code from the original blog post.\nWe’ll check this change into a branch in the library named\nblog/declarative/notifications, the same as my branch in the hermann repository.\nThis will let us make changes on the master branch later without breaking this example.\nWe’ll then use the @Library directive to tell Jenkins to use that branch’s version\nof the library with this Pipeline.\n\nJenkinsfile\n\n// Declarative //\n#!groovy\n@Library('bitwiseman-shared@blog/declarative/notifications') _ (1)\n\npipeline {\n  agent {\n    // Use docker container\n    docker {\n      image 'ruby:2.3'\n    }\n  }\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Start') {\n      steps {\n        // send build started notifications\n        sendNotifications 'STARTED'\n      }\n    }\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      steps {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      sendNotifications currentBuild.result\n    }\n  }\n}\n// Scripted //\n\n1\nThe _ here is intentional.\nJava/Groovy Annotations\nsuch as @Library must be applied to an element.\nThat is often a using statement, but that isn’t needed here so by convention we use an \\_.\n\nvars/sendNotifications.groovy\n\n#!/usr/bin/env groovy\n\n/**\n * Send notifications based on build status string\n */\ndef call(String buildStatus = 'STARTED') {\n  // build status of null means successful\n  buildStatus = buildStatus ?: 'SUCCESS'\n\n  // Default values\n  def colorName = 'RED'\n  def colorCode = '#FF0000'\n  def subject = \"${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\"\n  def summary = \"${subject} (${env.BUILD_URL})\"\n  def details = \"\"\" ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\"\n\n  // Override default values based on build status\n  if (buildStatus == 'STARTED') {\n    color = 'YELLOW'\n    colorCode = '#FFFF00'\n  } else if (buildStatus == 'SUCCESS') {\n    color = 'GREEN'\n    colorCode = '#00FF00'\n  } else {\n    color = 'RED'\n    colorCode = '#FF0000'\n  }\n\n  // Send notifications\n  slackSend (color: colorCode, message: summary)\n\n  hipchatSend (color: color, notify: true, message: summary)\n\n  emailext (\n      to: 'bitwiseman@bitwiseman.com',\n      subject: subject,\n      body: details,\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}\n\nConclusion\n\nIn this post we added notifications to our Declarative Pipeline.\nWe wanted to move our repetitive notification code into a method;\nhowever, Declarative Pipeline prevented us from defining a method in our Jenkinsfile.\nInstead, with the help of the Shared Library feature,\nwe were able to define a sendNotifications Step that we could call from our Jenkinsfile.\nThis maintained the clarity of our Pipeline and will let us easily reuse this Step in other projects.\nI was pleased to see how little the resulting Pipeline differed from where we started.\nThe changes were restricted to the start and end of the file with no reformatting elsewhere.\n\nIn the next post, we’ll cover more about shared libraries and how to\nrun Sauce OnDemand with xUnit Reporting in Declarative Pipeline.\n\nLinks\n\nDeclarative Pipeline plugin\n\nDeclarative Pipeline Syntax Reference\n\nShared Library reference\n\nPipeline source for this post\n\nPipeline Shared Library source for this post","title":"Declarative Pipeline: Notifications and Shared Libraries","tags":["tutorial","pipeline","declarative","plugins","notifications","slack","hipchat","emailext"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"blog/author/lnewman","twitter":"bitwiseman"}]}}]}},"pageContext":{"tag":"tutorial","limit":8,"skip":0,"numPages":4,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}