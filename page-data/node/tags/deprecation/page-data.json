{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/deprecation",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-12-22T00:00:00.000Z","id":"b5ea05db-2402-5186-81ff-44d9013050b0","slug":"/blog/2021/12/22/deprecated-ruby-runtime/","strippedHtml":"10 years ago, the Jenkins ruby-runtime was first released. It was an experiment to let\nplugins be written in ruby but still get integrated into the main\nJava Virtual Machine runtime with help of JRuby.\nA similar extension was made to allow plugins to be written in Python but still integrated into the Java Virtual Machine with Jython.\n\nOver the years though, the experiments are no longer being maintained and the\nplugins that use the non-Java runtimes take a lot of compatibility effort.\nIn addition, the Jenkins ruby runtime does not support Java 11.\nSpecifically, the last few years have been really hard on the Jenkins\ncore developers, as they still have to maintain all the hacks and\nprocesses to keep the non-Java runtimes barely working.\nExamples of the experienced issues include compatibility with jep:200[Switch Remoting/XStream blocklist to a permitlist] where we had to allow many Ruby Runtime classes in the Jenkins core to support serialization of data.\n\nIn 2018 we discussed the future of the Ruby Runtime based plugins.\nThere was a consensus that we want to deprecate and remove the plugins so that Jenkins users do not experience issues .\nDaniel Beck created jep:7[Deprecation of ruby-runtime] for that.\nOver the years, the functionality provided by Ruby plugins has been largely replaced by other implementations,\nand hence we have decided to proceed with the deprecation\n( discussion).\n\nOne month from now, January 22nd, 2022, the default Jenkins update center will stop distributing\nthe Ruby runtime plugin, the plugins that use the Ruby runtime, the Python runtime plugin, and the plugin that uses the Python runtime.\n\nWhat does this mean for you?\n\nIf you are one of the few users who are using the following plugins, there will be no impact on your existing instances. The\nonly change will come for new installs. Suspended plugins will stay\ninstalled, but can not be newly installed without manually downloading\nreleases or using custom update centers.\n\nJenkins plugin management tools and distributions may be affected as well if they use the default update center to download the plugins and/or their metadata.\nIt includes but is not limited to the official Docker images,\nHelm charts,\nJenkinsfile Runner,\nCustom Jenkins WAR Packager,\nand the Plugin Installation Manager CLI Tool.\nNote that all these tools allow custom update sites to be configured if required.\n\nThe lists below provide additional information about the plugins based on the Ruby Runtime and the Python Runtime.\nPlease plan your transition away from these plugins.\nThey will be removed from the official Jenkins update centers on January 22, 2022.\n\nAffected plugins\n\nGitlab Hook\n\nLast released 6 years ago.\nContains multiple security vulnerabilties.\nSuggestion: Use the GitLab plugin and the GitLab Branch Source plugin.\n\nCucumber\n\nLast released 9 years ago.\nSuggestion: Use sh or bat to run cucumber from the command line.\n\npyenv\n\nLast released 7 years ago.\nSuggestion: Use sh or bat to run pyenv from the command line.\n\nRvm\n\nLast released 5 years ago.\nSuggestion: Use sh or bat to run rvm from the command line.\n\nCapitomcat\n\nLast released 7 years ago.\nSuggestion: Install Ruby and Capistrano and use sh or bat to invoke them from the command line.\n\nCommit Message Trigger\n\nLast released 7 years ago.\nSuggestion: Use sh, bat, or other scripts to read git commit messages and conditionally execute Pipeline steps.\n\nGit notes\n\nLast released 10 years ago.\nSuggestion: Use sh, bat, or other scripts to run git to annotate commits.\n\nrbenv\n\nLast released 6 years ago.\nSuggestion: Use sh or bat to run rbenv from the command line.\n\nChef\n\nLast released 6 years ago.\nSuggestion: Use sh or bat to run chef from the command line.\n\nCI Skip\n\nLast released 8 years ago.\nSuggestion: Use the GitHub Commit Skip SCM Behaviour, Bitbucket Commit Skip SCM Behaviour, or SCM Skip to skip builds based on the content of commit messages.\nAlternately, use sh, bat, or other scripts to read git commit messages and conditionally execute Pipeline steps.\n\nInstallShield\n\nLast released 8 years ago.\nSuggestion: Use sh, bat, or other scripts to run InstallShield.\n\nMySQL Job Databases\n\nLast released 7 years ago.\nSuggestion: Use Jenkins Job Database Manager Plugin for MySQL.\n\nPathignore\n\nLast released 10 years ago.\nSuggestion: Use the path ignore features of various plugins or use sh, bat, or other scripts to read git commit messages and conditionally execute Pipeline steps.\n\nPerl\n\nLast released 9 years ago.\nSuggestion: Use sh or bat to run perl from the command line.\n\npry\n\nLast released 10 years ago.\nSuggestion: Use the Jenkins groovy console and its interface from the Jenkins command line interface.\n\nSingle Use Agent\n\nLast released 7 years ago.\nSuggestion: Use cloud agents ( Fargate, Azure Container Instances, Docker, etc.) to allocate agents for a single use and then release them.\n\nTravis YML\n\nLast released 5 years ago.\nSuggestion: Rewrite the travis.yml file as a Jenkinsfile, a Jenkins Templating Engine file, a Pipeline as YAML, or a Jenkins Modular Pipeline Library.\n\nYammer\n\nLast released 8 years ago.\nSuggestion: Use the Yammer REST API to post messages.\n\nDevStack\n\nLast released 9 years ago.\n\nIkachan\n\nLast released 10 years ago.\n\nJenkinspider\n\nLast released 7 years ago.\n\nPerl Smoke Test\n\nLast released 7 years ago.\n\nbuddycloud\n\nLast released 8 years ago.\n\nAcknowledgements\n\nWe would like to thank all contributors and maintainers who contributed to the Ruby Runtime based plugins and the Python Runtime based plugin.\nWe also thank those who participated in development of new plugins replacing the functionality.\nThese contributors helped millions of Jenkins users while the ecosystem was supported over the past 10 years\nand it is not taken for granted.\nNow we need to move on so that we can keep expanding the Jenkins architecture and developers tools.\nWe invite all contributors to participate in this effort and to help us to migrate the plugins to supported JVM-based platforms for plugins.\n\nMy instance is affected, what to do next?\n\nIf you do not use the affected plugins, the recommendation is to remove them.\nOtherwise, it is recommended to start migration out of the plugins to alternatives providing similar functionality.\n\nNot all plugins have alternatives.\nAt the moment the Jenkins core team does not plan to provide a replacement, but any contributions are welcome.\nIf you depend on the functionality,\nwe recommend reaching out to the community in the developer mailing list so that\nyou can coordinate the replacement with other affected users.","title":"Deprecating non-Java plugins","tags":["ruby","plugins","announcement","deprecation"],"authors":[{"avatar":null,"blog":null,"github":"halkeye","html":"<div class=\"paragraph\">\n<p>I got started with Jenkins early on when I was just getting started with testing.\nI knew there had to be a way to run the tests automatically and report on them back to people.\nI started hacking my own tools before I came across Jenkins (then Hudson) and was hooked ever since.\nOver the years I&#8217;ve managed to install and configure Jenkins at various jobs,\nand even was employed making internal and external plugins and integrations.\nYou&#8217;ll often find me on the Jenkins IRC and Gitter channels as well as the subreddit giving a hand to people who are stuck.\nI also try to get involved with Jenkins Infrastructure projects as much as I can.\nI currently maintain the plugin site, plugin site API, Jenkins Wiki exporter, and a bunch of other minor projects.\nI also help run Vancouver&#8217;s chapter of Nodeschool.</p>\n</div>","id":"halkeye","irc":null,"linkedin":null,"name":"Gavin Mogan","slug":"/blog/authors/halkeye","twitter":"halkeye"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2019-11-25T00:00:00.000Z","id":"726986a7-4dcd-5c99-8b23-e199566c8eea","slug":"/blog/2019/11/25/macos-native-installer-deprecation/","strippedHtml":"In addition to WAR files and Docker images, the Jenkins project provides native installers for each weekly and LTS release.\nThere are installers available for Linux distributions, Windows, macOS and other operating systems.\nThere are also installers provided by third parties.\nYou can find the list of these installers on the Downloads page.\n\nIn this blog post, we announce the upcoming deprecation of the macOS native installer.\nWe will review the replacement options and the rollout plan.\n\nWhy?\n\nMaintaining installers is a significant maintenance effort for the project\nbecause installers require testing and, sometimes, specific platforms and environments for packaging.\nWhen installers lose relevance for the majority of the Jenkins audience, we remove them or handover maintenance to third parties on other areas.\nFor macOS, there are currently two types of packages: native installers with GUI for desktop versions and Homebrew packages.\nSince Homebrew is now a defacto standard package manager for macOS users, from the Jenkins standpoint it made sense to deprecate the native installers.\n\nWhy now?\nThere is ongoing work on automating Jenkins Core releases within the Jenkins infrastructure.\nLong story short, we are moving Jenkins release pipelines to Kubernetes on Microsoft Azure.\nThis environment does not offer macOS machines that are needed to produce native installers.\nIf you are interested to know more, there will be a How Jenkins Builds and Delivers Jenkins in the Cloud talk presented by Olivier Vernin at DevOps World | Jenkins World 2019 Europe in Lisbon (use the JWFOSS code for a 30% discount!).\n\nWe could have used an external service for building macOS installers,\nbut it would have added an additional point of failure and implementation/maintenance overhead.\nSo we discussed it in the developer mailing list and agreed that it is better to just deprecate and then remove the packages.\n\nReplacing native installers\n\nIn the case of macOS, there are two main alternatives available: managing the service manually or migrating to Homebrew packages.\nBefore doing a migration, we highly recommend backing up your instance.\n\nManaging Jenkins with WAR file on macOS\n\nIf your Jenkins instance was previously set up with a native installer,\nto update Jenkins it will be enough to replace the jenkins.war file in the installation directory and restart the instance.\nThe services will keep running as it was configured before the migration.\nThe default installation directory is /Applications/Jenkins/jenkins.war\n\nManaging Jenkins with Homebrew\n\nInstalling Jenkins with Homebrew is a way to go for those who want to install Jenkins using a package manager.\nThere are two Homebrew formulas for Jenkins: jenkins for Weekly releases and jenkins-lts for LTS ones.\nThese packages are supported by a third party (Homebrew community),\nand they may be not as frequently updated as packages supported by the Jenkins project directly.\n\nBefore doing a migration from macOS Native installers to HomeBrew, please make sure to backup your Jenkins instance.\nThere are no automatic migration tools available, and the installation may corrupt your JENKINS_HOME or service configuration files in edge cases.\n\nIf you switch to Homebrew, you will need to properly migrate the JENKINS_HOME data to the new location.\nWe do not provide an official migration guide, but it is possible to find some guidelines on the Web.\n\nSample commands:\n\nInstall the latest Weekly version: brew install jenkins\n\nInstall a specific Weekly version: brew install jenkins@YOUR_VERSION\n\nStart the Jenkins service: brew services start jenkins\n\nRestart the Jenkins service: brew services restart jenkins\n\nUpdate the Jenkins version: brew upgrade jenkins\n\nFor more information see the documentation for Homebrew packages on the macOS Download pages.\n\nRollout plan\n\nmacOS native packaging is considered as deprecated starting from Jenkins 2.206 and Jenkins LTS 2.204.1\n\nFor Jenkins Weekly macOS native packaging will be removed with the switch to the new Jenkins release flow.\nThe exact date is to be determined.\n\nAfter the change, there will be no macOS native installers produced for new Jenkins Weekly releases\n\nReleases for previous versions will be available in this archive\n\nFor Jenkins LTS macOS will be removed with the switch to the new Jenkins release flow in the LTS baseline.\nThis change will happen only after the deployment of the new release flow in Jenkins Weekly.\n\nAfter the switch, there will be no macOS native installers produced for new Jenkins LTS releases\n\nReleases for previous versions will be available in this archive\n\nSee the discussion on the developer mailing list for more information.\n\nQuestions and feedback\n\nIf you have any questions or want to provide feedback, please use the developer mailing list thread mentioned above Platform SIG channels (chat, google group).\nAny feedback will be much appreciated because we plan more installer/ and platform deprecations in the future.","title":"Jenkins macOS native installer deprecation","tags":["announcement","deprecation","macos","platform-sig","platforms"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"deprecation","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}