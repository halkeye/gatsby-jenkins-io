{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/blueocean",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-07-05T00:00:00.000Z","id":"c2501d40-c7cb-5ca7-8a4c-4b96a13b434f","slug":"/blog/2019/07/05/jenkins-pipeline-stage-result-visualization-improvements/","strippedHtml":"Some changes have recently been released to give Pipeline authors some new tools to improve Pipeline visualizations in Blue Ocean, in particular to address the highly-voted issue JENKINS-39203, which causes all non-failing stages to be visualized as though they were unstable if the overall build result of the Pipeline was unstable. This issue made it difficult to quickly identify why a build was unstable, and forced users to read through builds logs and the Jenkinsfile to figure out what actually happened.\n\nIn order to fix this issue, we introduced a new Pipeline API that can be used to attach additional result information to individual Pipeline steps. Visualization tools like Blue Ocean use this new API when deciding how a given stage should be displayed. Steps like junit that used to set only the overall build result now additionally use the new API to set step-level result information. We created the new unstable and warnError steps so that Pipeline authors with more complicated use cases can still take advantage of this new API.\n\nThe core fixes for the issue are present in the following plugins, all of which require Jenkins 2.138.4 or newer:\n\nPipeline: API 2.34\n\nPipeline: Basic Steps 2.18 (requires a simultaneous update to Pipeline: Groovy 2.70)\n\nPipeline: Graph Analysis 1.10\n\nPipeline: Declarative 1.3.9\n\nBlue Ocean 1.17.0\n\nHere is a screenshot from Blue Ocean of a Pipeline using the unstable step where only the failing stage is marked as unstable:\n\nExamples\n\nHere are some examples of how to update your Pipelines to use the new improvements:\n\nUse the new warnError step to catch errors and mark the build and stage as unstable. warnError requires a single String parameter, which is a message to log when an error is caught. When warnError catches an error, it logs the message  and the error and sets the build and stage result to unstable. Using it looks like this:\n\nwarnError('Script failed!') {\n  sh('false')\n}\n\nUse the new unstable step to set the build and stage result to unstable. This step can be used as a direct replacement for currentBuild.result = 'UNSTABLE', and may be useful in cases where warnError is not flexible enough. unstable requires a single String parameter, which is a message to log when the step runs. Using it might look like this:\n\ntry {\n  sh('false')\n} catch (ex) {\n  unstable('Script failed!')\n}\n\nJUnit Plugin : Update to version 1.28 or newer to pick up fixes for the junit step so that it correctly marks the stage as unstable.\n\nWarnings Next Generation Plugin : Update to version 5.2.0 or newer to pick up fixes for the publishIssues and recordIssues steps so that they correctly mark the stage as unstable.\n\nOther Plugins : If your Pipeline is marked as unstable by a step in another plugin, please file a new issue with the component set to that plugin (after checking for duplicates), clearly describing which step has the problem and under what circumstances it occurs, and link to the developer section of this post as a reference for how the maintainer might be able to address the problem.\n\nLimitations\n\nIf you do not migrate to the unstable or warnError steps, or update plugins that set the build result to versions that integrate with the new API, then in cases where the build is unstable, Blue Ocean will not show any stages as unstable.\n\nEven after these changes, currentBuild.result continues to refer only to the overall build result. Unfortunately, it was not possible to adapt the currentBuild global variable to make it track step or stage-level results, since it is implemented as a global variable, which means it does not have any step-level context through which it could use the new API.\n\nPipeline Stage View Plugin has not yet been updated to use the new API, so these changes do not affect the visualization it provides.\n\nHistory\n\nJenkins Pipeline steps can complete in one of two ways: successfully, by returning a (possibly null) result, or unsuccessfully, by throwing an exception. When a step fails by throwing an exception, that exception propagates throughout the Pipeline until another step or Groovy code catches it, or it reaches the top level of the Pipeline, which causes the Pipeline itself to fail. Depending on the type of exception thrown, the final result of the Pipeline may be something other than failure (for example in some cases it will be aborted). Because of the way the exception propagates, it is easy for tools like Blue Ocean to identify steps (and therefore stages) which failed due to an exception.\n\nIn order for Pipelines to be able to interact with established Jenkins APIs, it was also necessary for Pipeline builds to have an overall build result that can be modified during the build. Among other things, this allows Pipelines to use build steps and wrappers that were originally written for use in Freestyle projects.\n\nIn some cases, it is desirable for a Pipeline step to be able to complete successfully so that the rest of the Pipeline continues normal execution, but for it to be able to note that some kind of error occurred so that visualizations are able to identify that something went wrong with the step, even though it didn’t fail completely. A good example of this is the junit step. This step looks at specified test results, and if there were any failures, marks the overall build result as unstable. This kind of behavior is problematic for visualization tools like Blue Ocean, because the step completed successfully, and there is no programmatic way to associate the overall build result with the step that ended up setting that result.\n\nLooking at JENKINS-39203 again, we see that there were essentially two options for the visualization. If the overall build result was unstable, either all steps that completed successfully could be shown as unstable, because they may have been the step that caused the build to become unstable, or they could be shown as successful, because we have no way to relate the setting of the build result to a specific step. In the end, the first option was chosen.\n\nTo work around this issue, some users tried to do things like throw exceptions and add try/catch blocks around stages that handle exceptions so that Blue Ocean would be able to use the exceptions to mark step and stage results as desired, and then by catching the exception the Pipeline would be able to continue normal execution. These kinds of workarounds were hard to understand, fragile, and did not work well (if at all) for Declarative Pipelines.\n\nDevelopers\n\nIf you are a developer of a plugin that integrates with Pipeline using a step, and want to take advantage of the new API so that your step can report an non-successful result without throwing an exception, please see this post to the Jenkins Developers mailing list, and respond there if you have any questions.","title":"Jenkins Pipeline Stage Result Visualization Improvements","tags":["pipeline","blueocean"],"authors":[{"avatar":null,"blog":null,"github":"dwnusbaum","html":"<div class=\"paragraph\">\n<p>Devin has worked on various areas of Jenkins for the past two years as a software engineer at CloudBees. He is currently a maintainer of core Jenkins Pipeline plugins and also works on Jenkins X Pipeline.</p>\n</div>","id":"dwnusbaum","irc":null,"linkedin":null,"name":"Devin Nusbaum","slug":"/blog/author/dwnusbaum","twitter":null}]}},{"node":{"date":"2018-04-18T00:00:00.000Z","id":"36cc7fb2-3a58-5fd5-82ce-aa9662b5820b","slug":"/blog/2018/04/18/blueocean-1-5-0/","strippedHtml":"Hello, I am Jenn, the new Product Manager for Blue Ocean and Jenkins\nPipeline at CloudBees. I am based out of the Seattle area and am excited to be\nworking on Jenkins. :D We released version 1.5.0 of the Blue Ocean plugin late last week. If you’re\nusing Blue Ocean, you’ll want to grab this update since it includes many\nimprovements and bug fixes!\n\nNew Features\n\nBlue Ocean now includes a user interface update to show the downstream jobs\nlaunched with the 'build' step\n(link: JENKINS-38339)\n\nWith Blue Ocean 1.5.0, users can now Reorder Steps in the Blue Ocean Pipeline\nEditor simply by dragging and dropping steps to reorder them in the list of\nsteps.\n( JENKINS-38323)\n\nThe \"Artifacts\" tab also now supports pagination, which allows developers to\npaginate through the Artifacts tab. Previously, this list\nwas cut off at 100 entries.\n( JENKINS-43588)\n\nImprovements\n\nWe were able to include two performance improvements in 1.5.0 which reduce the\nDashboard loading time in Blue Ocean:\n\nJENKINS-44995\n\nJENKINS-48868\n\nSupport for viewing output for failed runs with no stages is also included in\nthis release. For developers who have no stages/steps defined in their\npipelines, they can now see the full log output for failed runs. This update\nhelps with Pipeline debugging in Jenkins.\n( JENKINS-48074)\n\nFurther improving the log output for Pipeline Runs, 1.5.0 also improves viewing\nof long log output lines with wrapping.  Previously, a single, long line of\noutput in the log wouldn’t be fully visible in the log window.\n( JENKINS-49036)\n\nFixes\n\nOne notable bug fix we addressed in this release was that input steps in\npost directives would not properly prompt for input. By fixing\nJENKINS-49297\nusers of Declarative Pipeline with Blue Ocean can include input steps in\ntheir post directives.\n\nThe full detailed change log can be viewed on the\nBlue Ocean plugin page\n\nUpdate Your Plugin\n\nPlugin updates in Jenkins are available in the Plugin Manager Update Center. This page includes instructions for using the UI and CLI to update your plugins: https://jenkins.io/doc/book/managing/plugins/.\n\nIf you are using the Blue Ocean UI, click Administration in the page’s header to open Plugin Manager.\n\nInstalling the primary Blue Ocean plugin will update its dependencies as well.\n\nProviding Feedback\n\nChat with us at Gitter: https://gitter.im/jenkinsci/blueocean-plugin\n\nReport issues at https://issues.jenkins.io/","title":"Faster sailing on Blue Ocean 1.5.0","tags":["blueocean"],"authors":[{"avatar":null,"blog":null,"github":"jennbriden","html":"<div class=\"paragraph\">\n<p>Jenn Briden is located in the Seattle area and is the Product Manager for the Blue Ocean plugin and the Jenkins pipeline. She has previously worked at Microsoft and ExtraHop Networks. Jenn likes drinking coffee but hasn&#8217;t ever seen a bigfoot.</p>\n</div>","id":"jennbriden","irc":null,"linkedin":null,"name":"Jenn Briden","slug":"/blog/author/jennbriden","twitter":"jennbriden"}]}},{"node":{"date":"2017-11-27T00:00:00.000Z","id":"fd21dbc6-9b4b-5092-b232-0feabaf928ce","slug":"/blog/2017/11/27/tutorials-in-the-jenkins-user-documentation/","strippedHtml":"Regular perusers of the Jenkins User Documentation may have noticed\nthe presence of the Tutorials part (between the Guided Tour and User\nHandbook) that appeared in the last couple of months and gradually began to get\npopulated with much of my recent work, writing Jenkins tutorials.\n\nMy name’s Giles and I’ve been a technical writer in the software development\nfield for several years now. I’ve always been passionate about technical writing\nand more recently, the technologies that go into developing written content and\nautomating its generation - like Jenkins! I was a former Atlassian and recently\njoined CloudBees as a Senior Technical Writer, working remotely from the \"Sydney\nOffice\", with my current focus on the Jenkins User Documentation.\n\nWhy tutorials?\n\nMy exposure to Jenkins and its usage over the years has been patchy at best.\nDuring this time, however, I’ve had some degree of experience as a user of\nvarious continuous delivery (CD) tools like Jenkins and am reasonably familiar\nwith the advantages these tools can offer software development teams.\n\nI’ve also found that while many software developers are familiar with the\nbroader concept of \"developer operations\" (or simply \"devops\"), fewer seem\nfamiliar with the concepts of CD and related tools to facilitate devops within\norganizations.\n\nThe CD process is based on the fundamental flow of building the application\ntesting it delivering it, where typically:\n\nThe building part involves compiling the application and/or ensuring all\nnecessary libraries and dependencies are in place for the application to run\nas intended.\n\nThe testing part involves testing the built application with automated tests\nto ensure that changes implemented by developers function as expected.\n\nThe delivering part involves packaging or presenting the application in a\nway that can be delivered to customers or other users for any kind of purpose.\n\nNow, as one of the major contributors to the Jenkins User Documentation (and\nfaced with a reasonably steep learning curve), it quickly became apparent about\nthe lack of accessible documentation to hand-hold people relatively new to\nJenkins through this CD process. I couldn’t find anything in the Jenkins User\nDocumentation to demonstrate how Jenkins implements this process on a simple\napp that delivers an end result.\n\nWith the guidance and assistance of helpful colleagues, I therefore decided to\nembark on creating a series of Jenkins tutorials to help fill these\ndocumentation and knowledge gaps. These tutorials are based on Daniele Procida’s\ndescription of how tutorials should be presented in his blog post\n\" What nobody tells you about\ndocumentation\").\n\nIntroductory tutorials\n\nThe first set of tutorials on the Tutorials overview page\ndemonstrate how to implement this fundamental CD process in Jenkins on a simple\napplication for a given technology stack.\n\nSo far, there’s one for\nJava with Maven and another\nfor Node.js and\nReact with npm. Another for Python will be added to this list in the near\nfuture.\n\nThese tutorials define your application’s entire CD process (i.e. your Pipeline)\nin a Jenkinsfile, whose Groovy-like Declarative Pipeline syntax is checked in\nto your Git source repository. Managing your Pipeline with your application’s\nsource code like this forms the fundamentals of \"Pipeline as code\".\n\nThe Introductory tutorials also cover how to use some powerful features of\nJenkins, like Blue Ocean,\nwhich makes it easy to connect to an existing cloud, web or locally hosted Git\nrepository and create your Pipeline with limited knowledge of Pipeline syntax.\n\nAdvanced tutorials\n\nAlso soon to be released will be the first Advanced tutorial on building\nmultibranch Pipelines in Jenkins. This tutorial takes the \"Pipeline as code\"\nconcept to a new level, where a single Jenkinsfile (defining the entire CD\nprocess across all branches of your application’s Git repository) consists of\nmultiple stages which are selectively executed based on the branch that Jenkins\nis building.\n\nAdditional tutorials that demonstrate more advanced features of Jenkins and how\nto manage your Pipelines with greater sophistication and flexibility will be\nadded to this section in future.\n\nSumming up\n\nYou can access all currently available tutorials from the\nTutorials overview page in the Jenkins User Documentation.\nIt’s worthwhile checking that page from time to time as it’ll be updated\nwhenever a new tutorial is published.\n\nAlso, if you have any suggestions for tutorials or other content you’d like to\nsee in the documentation, please post your suggestions in the\nJenkins\nDocumentation Google Group, which you can also post (and reply) to by emailing\njenkinsci-docs@googlegroups.com.\n\nThe Sydney Office team meeting at Carriageworks - from left to right, Giles\nGaskell, Nicholae Pascu, Michael Neale and James Dumay","title":"Introducing Tutorials in the Jenkins User Documentation","tags":["tutorial","blueocean","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"gilesgas","html":"","id":"gilesgas","irc":null,"linkedin":null,"name":"Giles Gaskell","slug":"/blog/author/gilesgas","twitter":"giles_gas"}]}},{"node":{"date":"2017-08-08T00:00:00.000Z","id":"2e385886-1033-5881-ab06-b060d5568108","slug":"/blog/2017/08/08/introducing-jenkins-minute/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nThere are less than three weeks left until\nJenkins World 2017.\nLike last year, I’ll be at the\n\" Ask the Experts\"\nbooth to answer questions about all things Jenkins.\nIn preparation, I’ve started a continuing series of quick tutorial videos that answer\nsome of the most common questions I’ve seen asked in the community forums.\nThese  are by no means exhaustive - they’re basic answers, which we can build upon.\nEach video give a takes a simple example, shows how to create a working solution,\nand includes links in the description to related Jenkins documentation pages.\n\nI hope you find them useful.  Look for more of them coming soon!\n\nLiam will be at the\n\" Ask the Experts\"\nbooth at\nJenkins World in August.\nRegister with the code JWFOSS for a 30% discount off your pass.\n\nCreating Your First Pipeline in Blue Ocean\n\nUsing a Dockerfile with Jenkins Pipeline\n\nAdding Parameters to Jenkins Pipeline\n\nRecording Test Results and Archiving Artifacts","title":"Introducing the Jenkins Minute video series","tags":["blueocean","docker","jenkins-minute","pipeline"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-06-13T00:00:00.000Z","id":"502035e4-b31c-5ecd-8870-ec66f6748d36","slug":"/blog/2017/06/13/blueocean-1-1/","strippedHtml":"The Blue Ocean team are proud to announce the release of Blue Ocean 1.1.\n We’ve shipped a tonne of small improvements, features and bug fixes here that\n will make your day-to-day experience with Blue Ocean even smoother.\n\nToday is also the first time we are promoting\nour Public Roadmap.\nWe recognise that using JIRA can be a bit of a pain to track what we are working\n on at a macro level and the Public Roadmap makes it very easy for anyone to\n find out what we are working on. We’ve got some really cool stuff coming,\n so check back here soon!\n\nIt’s been an insane two months since the launch of Blue Ocean 1.0 and there\n are now officially over 10,000 teams using Blue Ocean  – so here’s a big\n “thank you” to all of you for your support.\n\nNow, lets get to the goods!\n\nFast search\n\nFor those of you who have many pipelines we’ve introduced pipeline fast search\nto the pipeline dashboard. Click the search icon to activate and just start\ntyping what you’re looking for.\n\nTrigger reasons\n\nDifferentiate at a glance between pipeline runs that have been manually\ntriggered and by who, triggered automatically by a commit or triggered by any\nother means.\n\nBlockage reasons\n\nPipelines can be blocked from execution for a variety of reasons, including\nwaiting for executors or other resources to become free. You can see from the\nPipeline Activity, Branch and Result screen why the pipeline is blocked from\nexecution.\n\nHistory jump\n\nDevelopers can quickly jump from the branches tab to the run history for a\nspecific branch. This makes it more convenient to see historical runs for the\nbranch within the Pipeline which improves the your ability to trace down\nproblems.\n\nAnalyse 1,000s of tests\n\nNow you can see more than 100 test results for a Pipeline run. This makes\nBlue Ocean practical for teams who have invested heavily in testing.\nWe’ve also dramatically improved loading times for Pipelines with large\nnumbers of tests so theres no more waiting for the test tab to load.\n\nCustom run names and descriptions\n\nDevelopers authoring Pipeline using the scripted syntax can set a custom name\nand description for Pipeline run. This feature is commonly used to name or\ndescribe a pipeline run that is meaningful in their release management workflow.\n\nFor example, a developer can set the run name to the release version\n1.1 and the description to something meaningful, like Final Release.\n\ncurrentBuild.displayName = '1.1'\ncurrentBuild.description = ‘Final Release’\n\nPerformance\n\nWe’ve been making optimisations for general page speed.\nIn Blue Ocean 1.1, plugin data was automatically sent to browser and we’ve made\na change so that this data is only sent on the request of plugins. The long and\nshort of it is that you shouldn’t notice a thing except those Blue Ocean pages\nzipping faster into your browser.\n\n48+ bug fixes\n\nThere have been a total of 48 bug improvements, with emphasis on how executing\npipelines behave, and we’ve  invested a large amount of time to improve\nautomated test coverage of Blue Ocean to ensure reliability in\nproduction settings.\n\nFor a full list of bug fixes and improvements,\nsee the JIRA.\n\nWhat are you waiting for? Try Blue Ocean 1.1 today","title":"Blue Ocean 1.1 - fast search for pipelines and much more","tags":["blueocean"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/author/i386","twitter":"i386"}]}},{"node":{"date":"2017-05-18T00:00:00.000Z","id":"231f2272-acd6-5bb2-beae-e3871de86c48","slug":"/blog/2017/05/18/pipeline-dev-tools/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nI’ve only been working with Pipeline for about a year.\nPipeline in and of itself has been a huge improvement over old-style Jenkins projects.\nAs a developer, it has been so great be able work with Jenkins Pipelines\nusing the same tools I use for writing any other kind of code.\n\nI’ve also found a number of tools that are super helpful specifically\nfor developing pipelines. Some were easy to find like the\nbuilt-in documentation\nand the\nSnippet Generator.\nOthers were not as obvious or were only recently released.\nIn this post, I’ll show how a few of those tools make working with Pipelines\neven better.\n\nThe Blue Ocean Pipeline Editor\n\nThe best way to start this list is with the most recent and coolest\narrival in this space: the Blue Ocean Pipeline Editor.  The editor only works\nwith Declarative Pipelines, but it brings a sleek new user experience to writing\nPipelines.  My recent screencast, released as part of the Blue Ocean Launch,\ngives good sense of how useful the editor is:\n\nCommand-line Pipeline Linter\n\nOne of the neat features of the Blue Ocean Pipeline Editor is that it does basic\nvalidation on our Declarative Pipelines before they are even committed or Run.\nThis feature is based on the\nDeclarative Pipeline Linter\nwhich can be accessed from the command-line even if you don’t have Blue Ocean\ninstalled.\n\nWhen I was working on the\nDeclarative Pipeline: Publishing HTML Reports\nblog post, I was still learning the declarative syntax and I made a lot lot of mistakes.\nGetting quick feedback about the whether my Pipeline was in a sane state made writing that blog much easier.\nI wrote a simple shell script that would run my Jenkinsfile through the Declarative Pipeline Linter.\n\npipelint.sh - Linting via HTTP POST using curl\n\n# curl (REST API)\n# User\nJENKINS_USER=bitwisenote-jenkins1\n\n# Api key from \"/me/configure\" on my Jenkins instance\nJENKINS_USER_KEY=--my secret, get your own--\n\n# Url for my local Jenkins instance.\nJENKINS_URL=http://$JENKINS_USER:$JENKINS_USER_KEY@localhost:32769 (1)\n\n# JENKINS_CRUMB is needed if your Jenkins controller has CRSF protection enabled (which it should)\nJENKINS_CRUMB=`curl \"$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\\\":\\\",//crumb)\"`\ncurl -X POST -H $JENKINS_CRUMB -F \"jenkinsfile=\n\n1\nThis is not secure.  I’m running this locally only.\nSee Jenkins CLI for details on how to do this securely.\n\nWith this script, I was able to find the error in this this Pipeline without\nhaving to take the time to run it in Jenkins: (Can you spot the mistake?)\n\n#!groovy\n\npipeline {\n  agent any\n\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      step {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      echo \"Send notifications for result: ${currentBuild.result}\"\n    }\n  }\n}\n\nWhen I ran my pipelint.sh script on this pipeline it reported this error:\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   3831      0 --:--:-- --:--:-- --:--:--  4181\nErrors encountered validating Jenkinsfile:\nWorkflowScript: 30: Unknown stage section \"step\". Starting with version 0.5, steps in a stage must be in a steps block. @ line 30, column 5.\n       stage ('Test') {\n       ^\n\nWorkflowScript: 30: Nothing to execute within stage \"Test\" @ line 34, column 5.\n       stage ('Test') {\n       ^\n\nDoh. I forgot the \"s\" on steps on line 35. Once I added the \"s\" and ran\npipelint.sh again, I got an all clear.\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   5610      0 --:--:-- --:--:-- --:--:--  5750\nJenkinsfile successfully validated.\n\nThis didn’t mean there weren’t other errors, but for a two second smoke test I’ll take it.\n\nReplay\n\nI love being able to use source control to track changes to my Pipelines\nright alongside the rest of the code in a project.  There are also times,\nwhen prototyping or debugging, that I need to iterate quickly on a series\nof possible Pipeline changes.\nThe Replay feature let’s me do that and see the results,\nwithout committing those changes to source control.\n\nWhen I wanted to take the previous Pipeline from agent any to using Docker via\nthe docker { …​ } directive, I used the Replay feature to test it out:\n\nSelected the previously completed run in the build history\n\nClicked \"Replay\" in the left menu\n\nMade modifications and click \"Run\". In this example, I replaced any with the docker { …​ } directive.\n\nChecked the results of changes looked good.\n\nOnce I worked any bugs out of my Pipeline,\nI used Replay to view the Pipeline for the last run and copy it back to my\nJenkinsfile and create a commit for that change.\n\nConclusion\n\nThis is far from a complete list of the tools out there for working with Pipeline.\nThere are many more and the number is growing.\nFor example, one tool  I just recently heard about and haven’t had a chance to delve into\nis the\nPipeline Unit Testing Framework,\nwhich promises the ability to test Pipelines before running them.\nIt’s been a fun year and I can’t wait to see what the next year holds for Pipeline.\n\nHow do you work with Pipeline?\nDo you have a tool that you feel has greatly improved your development experience\nwith Pipeline?  I’m interested in hear about others Jenkins user’s favorite ways\nof working with Pipeline.  Drop me a line via\nemail or on the\n#jenkins IRC channel.","title":"Pipeline Development Tools","tags":["blueocean","pipeline","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-12T00:00:00.000Z","id":"de6a7833-33e4-5a1b-8942-62eba9d0e88e","slug":"/blog/2017/04/12/welcome-to-blue-ocean-dashboard/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI used the Blue Ocean Activity View to track the state of branches and\nPull Requests in one project.\nIn this video, I’ll use the Blue Ocean Dashboard get a personalized view of the\nareas that of my project that are most important to me,\nand also to monitor multiple projects.\nPlease Enjoy!","title":"Getting Started with the Blue Ocean Dashboard","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-11T00:00:00.000Z","id":"9d6e30d7-7295-5fb0-b863-4e1db0a6fa14","slug":"/blog/2017/04/11/welcome-to-blue-ocean-pipeline-activity/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI showed how easy it is to create and edit Declarative Pipelines using the Blue Ocean Visual Pipeline Editor.\nIn this video, I’ll use the Blue Ocean Activity View to track the\nstate of branches and Pull Requests in one project.\nBlue Ocean makes it so much easier to find the logs I need to triage failures.\n\nPlease Enjoy!  In my\nnext video,\nI’ll switch from looking at a single project to monitoring multiple projects with\nthe Blue Ocean Dashboard.","title":"Getting Started with Blue Ocean's Activity View","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}}]}},"pageContext":{"tag":"blueocean","limit":8,"skip":0,"numPages":4,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}