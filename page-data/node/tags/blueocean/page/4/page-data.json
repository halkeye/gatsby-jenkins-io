{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/blueocean/page/4",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2016-09-19T00:00:00.000Z","id":"9f1352d7-4bb9-5af7-a7b7-3dab3d29a690","slug":"/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/","strippedHtml":"At Jenkins World on Wednesday 14th of September, the Jenkins project was happy to\nintroduce the beta release of Blue Ocean. Blue Ocean is the new user experience\nfor Jenkins, built from the ground up to take advantage of Jenkins Pipeline.\nIt is an entire rethink of the the way that modern developers will use Jenkins.\n\nBlue Ocean is available today via the Jenkins Update Center for Jenkins users\nrunning 2.7.1 and above.\n\nGet the beta\n\nJust search for BlueOcean beta in the Update Center, install it,\nbrowse to the dashboard, and then click the Try BlueOcean UI button on the dashboard.\n\nWhats included?\n\nBack in April we open sourced Blue Ocean\nand shared our vision with the community. We’re very happy that all the things we showed you then have\nshipped in the beta (software projects run on time?!).\n\nFor a refresher on Blue Ocean, watch this short video:\n\nDeclarative Pipeline\n\nWe have heard from the community about the usability of Jenkins\nPipeline. Much of the feedback we received was to a desire to\nconfigure Pipelines rather than script them, and to make it easy for beginners\nto get started with their first Pipeline.\n\nThis is how Declarative Pipeline was born. We’ve introduced a new method whereby\nyou declare how you want your Pipeline to look rather than using Pipeline Script\n - it’s configuration rather than code.\n\nHere’s a small example of a Declarative Pipeline for nodejs that runs the whole\nPipeline inside a Docker container:\n\n// Declarative //\npipeline {\n  agent docker:'node:6.3'\n  stages {\n    stage('build') {\n      sh 'npm --version'\n      sh 'npm install'\n    }\n    stage ('test') {\n      sh 'npm test'\n    }\n  }\n}\n\n// Script //\nnode('docker') {\n  docker.image('node:6.3').inside {\n    stage('build') {\n      sh 'npm --version'\n      sh 'npm install'\n    }\n\n    stage('test') {\n      sh 'npm test'\n    }\n  }\n}\n\nDocker support in Declarative Pipeline allows you to version your application code,\nJenkins Pipeline configuration, and the environment where your pipeline will run,\nall in a single repository. It’s a crazy powerful combination.\n\nDeclarative Pipeline introduces the postBuild section that makes it\neasy to run things conditionally at the end of your Pipeline without the\ncomplexity of the try…​ catch of Pipeline script.\n\n// Declarative //\npostBuild {\n  always {\n    sh 'echo \"This will always run\"'\n  }\n  success {\n    sh 'echo \"This will run only if successful\"'\n  }\n  failure {\n    sh 'echo \"This will run only if failed\"'\n  }\n  unstable {\n    sh 'echo \"This will run only if the run was marked as unstable\"'\n  }\n  changed {\n    sh 'echo \"This will run only if the state of the Pipeline has changed\"'\n    sh 'echo \"For example, the Pipeline was previously failing but is now successful\"'\n    sh 'echo \"... or the other way around :)\"'\n  }\n}\n\n\n// Script //\nnode('docker') {\n  try {\n    stage('build') {\n      /* .. snip .. */\n    }\n    stage('test') {\n      /* .. snip .. */\n    }\n\n    sh 'echo \"This will run only if successful\"'\n  }\n  catch (exc) {\n    if (currentBuild.result == 'UNSTABLE') {\n      sh 'echo \"This will run only if the run was marked as unstable\"'\n    }\n    if (currentBuild.result == 'FAILURE') {\n      sh 'echo \"This will run only if failed\"'\n    }\n  }\n  finally {\n    sh 'echo \"This will always run\"'\n  }\n}\n\nAnd there is so much more!\n\nIf you have the Blue Ocean beta installed you already have Declarative Pipeline.\nWhile Declarative Pipeline is still alpha at the moment, we do encourage you to\nfollow our getting started guide,\n give us feedback on the Jenkins Users mailing list\nor file bugs against the 'pipeline-model-definition' component in JIRA.\n\nIntroducing the Pipeline Editor\n\nThe Pipeline Editor is a graphical user interface that gives Jenkins users the\nsimplest way yet to get started with creating Pipelines in Jenkins. It will also\nsave a lot of time for intermediate and advanced Jenkins users as a way to author\nPipelines.\n\nWhen you build your Pipeline in the Editor and click the save button, the editor\nwill commit a new Jenkinsfile back to your repository in the form of the new\nDeclarative Pipeline. When you want to edit again, Jenkins will read it from\nyour repository exactly how you saw it previously.\n\nThe Pipeline Editor is a work in progress and should arrive in a beta release soon.\n\nThank you\n\nThanks for reading our news from Jenkins World and be sure to check the blog\nfor regular updates!\n\nI’d also like to thank our amazing community for their feedback and support\nas we change the way software teams around the world use Jenkins. We couldn’t\ndo this without you.","title":"Announcing the Blue Ocean beta, Declarative Pipeline and Pipeline Editor","tags":["blueocean","ux","pipeline","jenkinsworld","jenkinsworld2016"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/author/i386","twitter":"i386"}]}},{"node":{"date":"2016-08-08T00:00:00.000Z","id":"649a2e8e-4f2f-56eb-99f1-8897de882a49","slug":"/blog/2016/08/08/docker-pipeline-environments/","strippedHtml":"This is a guest post by Michael Neale, long time open\nsource developer and contributor to the Blue Ocean\nproject.\n\nIf you are running parts of your pipeline on Linux, possibly the easiest way to\nget a clean reusable environment is to use:\nCloudBees\nDocker Pipeline plugin.\n\nIn this short post I wanted to show how you can avoid installing stuff on the agents, and have per project, or even per branch, customized build environments.\nYour environment, as well as your pipeline is defined and versioned alongside your code.\n\nI wanted to use the Blue Ocean project as an\nexample of a\nproject that uses the CloudBees Docker Pipeline plugin.\n\nEnvironment and Pipeline for JavaScript components\n\nThe Blue Ocean project has a few moving parts, one of\nwhich is called the \"Jenkins Design Language\".  This is a grab bag of re-usable\nCSS, HTML, style rules, icons and JavaScript components (using React.js) that\nprovide the look and feel for Blue Ocean.\n\nJavaScript and Web Development being what it is in 2016, many utilities are\nneed to assemble a web app.  This includes npm and all that it needs, less.js\nto convert Less to CSS, Babel to \"transpile\" versions of JavaScript to other\ntypes of JavaScript (don’t ask) and more.\n\nWe could spend time installling nodejs/npm on the agents, but why not just use\nthe official off the shelf docker image\nfrom Docker Hub?\n\nThe only thing that has to be installed and run on the build agents is the Jenkins agent, and a docker daemon.\n\nA simple pipeline using this approach would be:\n\nnode {\n        stage \"Prepare environment\"\n          checkout scm\n          docker.image('node').inside {\n            stage \"Checkout and build deps\"\n                sh \"npm install\"\n\n            stage \"Test and validate\"\n                sh \"npm install gulp-cli && ./node_modules/.bin/gulp\"\n          }\n}\n\nThis uses the stock \"official\" Node.js image from the Docker Hub, but doesn’t let us customize much about the environment.\n\nCustomising the environment, without installing bits on the agent\n\nBeing the forward looking and lazy person that I am, I didn’t want to have to\ngo and fish around for a Docker image every time a developer wanted something\nspecial installed.\n\nInstead, I put a Dockerfile in the root of the repo, alongside the Jenkinsfile :\n\nThe contents of the Dockerfile can then define the exact environment needed\nto build the project.  Sure enough, shortly after this, someone came along\nsaying they wanted to use Flow from Facebook (A\ntypechecker for JavaScript).  This required an additional native component to\nwork (via apt-get install).\n\nThis was achieved via a\npull\nrequest to both the Jenkinsfile and the Dockerfile at the same time.\n\nSo now our environment is defined by a Dockerfile with the following contents:\n\n# Lets not just use any old version but pick one\nFROM node:5.11.1\n\n# This is needed for flow, and the weirdos that built it in ocaml:\nRUN apt-get update && apt-get install -y libelf1\n\nRUN useradd jenkins --shell /bin/bash --create-home\nUSER jenkins\n\nThe Jenkinsfile pipeline now has the following contents:\n\nnode {\n    stage \"Prepare environment\"\n        checkout scm\n        def environment  = docker.build 'cloudbees-node'\n\n        environment.inside {\n            stage \"Checkout and build deps\"\n                sh \"npm install\"\n\n            stage \"Validate types\"\n                sh \"./node_modules/.bin/flow\"\n\n            stage \"Test and validate\"\n                sh \"npm install gulp-cli && ./node_modules/.bin/gulp\"\n                junit 'reports/**/*.xml'\n        }\n\n    stage \"Cleanup\"\n        deleteDir()\n}\n\nEven hip JavaScript tools can emit that weird XML format that test\nreporters can use, e.g. the junit result archiver.\n\nThe main change is that we have docker.build being called to produce the\nenvironment which is then used.  Running docker build is essentially a\n\"no-op\" if the image has already been built on the agent before.\n\nWhat’s it like to drive?\n\nWell, using Blue Ocean, to build Blue Ocean, yields a pipeline that visually\nlooks like this (a recent run I screen capped):\n\nThis creates a pipeline that developers can tweak on a pull-request basis,\nalong with any changes to the environment needed to support it, without having\nto install any packages on the agent.\n\nWhy not use docker commands directly?\n\nYou could of course just use shell commands to do things with Docker directly,\nhowever, Jenkins Pipeline keeps track of Docker images used in a Dockerfile\nvia the \"Docker Fingerprints\" link (which is good, should that image need to\nchange due to a security patch).\n\nLinks\n\nThe project used as as an example is here\n\nThe pipeline is defined by the Jenkinsfile\n\nThe environment is defined by the Dockerfile\n\nRead more on Docker Pipeline","title":"Don't install software, define your environment with Docker and Pipeline","tags":["pipeline","plugins","blueocean","ux","javascript","nodejs"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/author/michaelneale","twitter":"michaelneale"}]}},{"node":{"date":"2016-07-19T00:00:00.000Z","id":"ce2c6f83-1ed8-521b-a608-5f3680ad5166","slug":"/blog/2016/07/19/blue-ocean-update/","strippedHtml":"The team have been hard at work moving the needle forward on the Blue\nOcean 1.0 features. Many of the features we have been working on have\ncome a long way in the past few months but here’s a few highlights:\n\nGoodbye page refreshes, Hello Real Time updates!\n\nBuilding upon\nTom 's great work on\nServer Sent Events (SSE) both\nCliff and\nTom worked\non making the all the screens in Blue Ocean update without manual\nrefreshes.\n\nSSE is a great technology\nchoice for new web apps as it only pushes out\nevents to the client when things have changed on the server. That means\nthere’s a lot less traffic going between your browser and the Jenkins\nserver when compared to the continuous AJAX polling method that has been\ntypical of Jenkins in the past.\n\nNew Test Reporting UI\n\nKeith has\nbeen working with Vivek to\ndrive out a new set of extension points that allow us to build a new\nrest reporting UI in Blue Ocean. Today this works for JUnit test reports\nbut can be easily extended to work with other kinds of reports.\n\nPipeline logs are split into steps and update live\n\nThorsten and\nJosh have\nbeen hard at work breaking down the log into steps and making the live\nlog tailing follow the pipeline execution - which we’ve lovingly\nnicknamed the “karaoke mode”\n\nPipelines can be triggered from the UI\n\nTom has\nbeen on allowing users to trigger jobs from Blue Ocean, which is one\nless reason to go back to the Classic UI :)\n\nBlue Ocean has been released to the experimental update center\n\nMany of you have asked us questions about how you can try Blue Ocean\ntoday and have resorted to building the plugin yourself or running our\nDocker image.\n\nWe wanted to make the process of trying Blue Ocean in its unfinished\nstate by publishing the plugin to the experimental update center - it’s\navailable today!\n\nSo what is the Experimental Update Center? It is a mechanism for the\nJenkins developer community to share early previews of new plugins with\nthe broader user community. Plugins in this update center are\nexperimental and we strongly advise not running them on production or\nJenkins systems that you rely on for your work.\n\nThat means any plugin in this update center could eat your Jenkins data,\ncause slowdowns, degrade security or have their behavior change at no\nnotice.\n\nYou can learn how to\nactivate\nthe experimental update center on this post.\n\nStay tuned for more updates!","title":"Blue Ocean July development update ","tags":["blueocean","ux","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/author/i386","twitter":"i386"}]}},{"node":{"date":"2016-05-26T00:00:00.000Z","id":"bbd7c8d9-ad20-56ae-b97b-834547d227f7","slug":"/blog/2016/05/26/introducing-blue-ocean/","strippedHtml":"In recent years developers have become rapidly attracted to tools that are not\nonly functional but are designed to fit into their workflow seamlessly and are\na joy to use. This shift represents a higher standard of design and user\nexperience that Jenkins needs to rise to meet.\n\nWe are excited to share and invite the community to join us on a project we’ve\nbeen thinking about over the last few months called Blue Ocean.\n\nBlue Ocean is a project that rethinks the user experience of Jenkins, modelling\nand presenting the process of software delivery by surfacing information that’s\nimportant to development teams with as few clicks as possible, while still\nstaying true to the extensibility that is core to Jenkins.\n\nWhile this project is in the alpha stage of development, the intent is that\nJenkins users can install Blue Ocean side-by-side with the Jenkins Classic UI\nvia a plugin.\n\nNot all the features listed on this blog are complete but we will be hard at\nwork over the next few months preparing Blue Ocean for general use. We intend\nto provide regular updates on this blog as progress is made.\n\nBlue Ocean is open source today\nand we invite you to give us feedback and to contribute to the project.\n\nBlue Ocean will provide development teams:\n\nNew modern user experience\n\nThe UI aims to improve clarity, reduce clutter and navigational depth to make\nthe user experience very concise. A modern visual design gives developers much\nneeded relief throughout their daily usage and screens respond instantly to\nchanges on the server making manual page refreshes a thing of the past.\n\nAdvanced Pipeline visualisations with built-in failure diagnosis\n\nPipelines are visualised on screen along with the\nsteps and logs to allow simplified comprehension of the continuous delivery\npipeline – from the simple to the most sophisticated scenarios.\n\nScrolling through 10,000 line log files is a thing of the past. Blue Ocean\nbreaks down your log per step and calls out where your build failed.\n\nBranch and Pull Request awareness\n\nModern pipelines make use of multiple Git branches, and Blue Ocean is designed\nwith this in mind. Drop a Jenkinsfile into your Git\nrepository that defines your pipeline and Jenkins will automatically discover\nand start automating any  Branches and validating Pull Requests.\n\nJenkins will report the status of your pipeline right inside Github or\nBitbucket on all your commits, branches or pull requests.\n\nPersonalised View\n\nFavourite any pipelines, branches or pull requests and see them appear on your\npersonalised dashboard. Intelligence is being built into the dashboard. Jobs\nthat need your attention, say a Pipeline waiting for approval or a failing job\nthat you have recently changed, appear on the top of the dashboard.\n\nYou can read more about Blue Ocean and its goals on the\nproject page and developers should watch the\nDevelopers list for more information.\n\nFor Jenkins developers and plugin authors:\n\nJenkins Design “Language”\n\nThe Jenkins Design Language (JDL) is a set of standardised React components and\na style guide that help developers create plugins that retain the look and feel\nof Blue Ocean in an effortless way. We will be publishing more on the JDL,\nincluding the style guide and developer documentation, over the next few weeks.\n\nModern JavaScript toolchain\n\nThe Jenkins plugin tool chain has been extended so that developers can use\nES6,\nReact, NPM\nin their plugins without endless yak-shaving. Jenkins\njs-modules are already in use in\nJenkins today, and this builds on this, using the same tooling.\n\nClient side Extension points\n\nClient Side plugins use Jenkins plugin infrastructure. The Blue Ocean libraries\nbuilt on ES6 and React.js provide an extensible client side component model\nthat looks familiar to developers who have built Jenkins plugins before. Client\nside extension points can help isolate failure, so one bad plugin doesn’t take\na whole page down.\n\nServer Sent Events\n\nServer Sent Events\n(SSE) allow plugin developers to tap into changes of state on the server and make\ntheir UI update in real time ( watch this for a\ndemo).\n\nTo make Blue Ocean a success, we’re asking for help and support from Jenkins\ndevelopers and plugin authors. Please join in our Blue Ocean discussions on the\nJenkins Developer\nmailing list and the #jenkins-ux IRC channel on Freenode!\n\nLinks\n\nBlue Ocean project page\n\nBlue Ocean GitHub repository","title":"Introducing Blue Ocean: a new user experience for Jenkins","tags":["blueocean","ux","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/author/i386","twitter":"i386"}]}}]}},"pageContext":{"tag":"blueocean","limit":8,"skip":24,"numPages":4,"currentPage":4}},
    "staticQueryHashes": ["3649515864"]}