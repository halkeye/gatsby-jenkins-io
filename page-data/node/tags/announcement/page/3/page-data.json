{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/announcement/page/3",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-05-06T00:00:00.000Z","id":"4e4838ee-bab2-53c0-b338-e2fa90ee89b2","slug":"/blog/2020/05/06/docker-agent-image-renaming/","strippedHtml":"We would like to announce the renaming of the official Docker images for Jenkins agents.\nIt does not have any immediate impact on Jenkins users, but they are expected to gradually upgrade their instances.\nThis article provides information about the new official names, upgrade procedure, and the support policy for the old images.\nWe will also talk about what’s next for the Docker packaging in Jenkins.\n\nNew image names\n\njenkins/agent is the new name of the old jenkins/slave image,\nstarting from 4.3-2\n\njenkins/inbound-agent is the new name of the jenkins/jnlp-slave image,\nstarting from 4.3-2\n\njenkins/ssh-agent is the new name of the old jenkins/ssh-slave image,\nstarting from 2.0.0\n\nSee the upgrade guidelines below.\n\nWhy?\n\nThe \"slave\" term is widely considered inappropriate in open source communities.\nIt has been officially deprecated in Jenkins 2.0 in 2016, but there are remaining usages in some Jenkins components.\nThe jira:JENKINS-42816[Slave to Agent renaming leftovers] EPIC tracks cleanup of such usages.\nOfficial Docker agent images were a glaring case, it was not easy to fix that with the previous versions of the image release Pipelines on DockerHub.\nIt is great to have the image naming issue finally fixed by this update.\n\nAnother notable change is replacing the JNLP agent term with inbound agent.\nHistorically \"JNLP\" has been used as a name of Remoting protocols.\nJNLP stands for Java Network Launch Protocol which is a part of the Java Web Start.\nJenkins supports Java Web Start mode for agents when running agents on Java 1.8,\nbut our networking protocols are based on TCP and have nothing to do with Java Network Launch Protocol.\nThis name has been very confusing since the beginning\nand became worse with the introduction of WebSocket support in Jenkins 2.217 (jep:222[]).\nDocker agent images support WebSockets, so we decided to change the image name to jenkins/inbound-agent so that it prevents further confusion.\nInbound agent term refers to agent protocols in which the agent initiates the connection to the Jenkins controller through different protocols.\n\nThanks a lot to Alex Earl and krufab for the repository restructuring groundwork which made the renaming possible!\nAlso thanks to Tim Jacomb, Marky Jackson, Mark Waite, Ivan Fernandez Calvo and other contributors for their reviews and testing.\n\nUpgrading and Compatibility Notes\n\nGood news, there are no breaking changes caused by this renaming.\nAll images have been already modified to use the new terminology internally.\nIf you use the recent versions of the previous images,\nyou can just replace the old names with the new ones.\nThese names may be referenced in your Dockerfiles, scripts, and Jenkins configurations.\n\nWe will keep updating the old images on DockerHub for at least 3 months (until August 05, 2020).\nThere will be no new configurations and platforms added to the old images,\nbut all existing ones will remain available (Debian for Java 1.8 and 11, Alpine for Java 1.8, etc.).\nAfter August 05, 2020, the old images will no longer receive updates, but previous versions will remain available to users on DockerHub.\n\nWhat’s next?\n\nWe will continue renaming of the Docker images in Jenkins components which reference old image names.\nThere is also a set of convenience Docker images which include build tools like Maven or Gradle which will be renamed later.\nThe jenkins/ssh-agent image might be renamed again in the future as well;\nsee the ongoing discussion in this developer mailing list thread.\n\nIf you are rather interested in new features in Jenkins Docker packaging,\nstay tuned for future announcements!\nThere are multiple ongoing initiatives which you can find on the public Jenkins roadmap\n(in the draft stage, see jep:14[]).\nSome stories:\n\nGeneral availability of Windows images.\n\nSupport for more platforms (AArch64, IBM s390x, PowerPC).\n\nSwitching to AdoptOpenJDK.\n\nIntroducing multi-platform Docker images.\n\nIf you are interested in any of these projects and would like to contribute,\nplease reach out to the Platform Special Interest Group which coordinates initiatives related to Jenkins in Docker.\n\nRegarding the agent terminology cleanup outside Docker images,\nwe will keep working on this project in the Advocacy & Outreach SIG.\nIf you see the usage of the obsolete \"slave\" term anywhere in the Jenkins organization (Web UI, documentation, etc.),\nplease feel free to submit a pull request or to report an issue in the jira:JENKINS-42816[Slave to Agent renaming leftovers] EPIC.\nThere are \"just\" 3000 occurences left in the jenkinsci GitHub organization, but we will get there.\nAny contributions will be appreciated!","title":"Docker images for agents: New names and What's next","tags":["announcement","docker","platform-sig"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-04-30T00:00:00.000Z","id":"006c2cd0-d626-5a78-bc2f-501e3180dee3","slug":"/blog/2020/04/30/jenkins-is-the-way/","strippedHtml":"One of the things we loved about going to developer conferences was meeting Jenkins users — newbies and old-timers alike — who are excited to talk about their projects and share tips on how to move forward using Jenkins.\nSince the coronavirus pandemic, we’re learning to rely more on new ways to gather, and it’s happening via Jenkins online meetups, GitHub collaborations, and Twitter threads, to name a few.\n\nIt’s a significant change.\nBut what hasn’t changed is the need to share stories about the things users have built, the solutions they’ve developed, and the excellent results they’re getting from some really innovative Jenkins implementations.\nThen we wondered, why isn’t anyone collecting these user stories and sharing them with the Jenkins community.\n\nIntroducing Jenkins is the Way\n\nSo we took the first step to record and archive all the great stuff everyone in our community is building with Jenkins.\nThis way, Jenkins users old and new can come to an archive and search for Jenkins solutions for inspiration.\nWe foresee a vast library of solutions from all around the world, solving a wide array of challenges in every industry imaginable.\nWe decided to call this archive \" Jenkins Is The Way\" and host it at https://JenkinsIsTheWay.io.\n\nTo aggregate all these stories, we built a simple online questionnaire so that Jenkins users can submit their own experience using this leading open source automation server.\nWith so many plugins to support building, deploying, and automating your projects, we expect to see a vast collection of stories.\n\nWe’ve already received a handful, including stories that illustrate how Jenkins Is The Way :\n\nto code your own release pipelines\n\nto cast magic of continuous delivery\n\nto understand and simplify your software lifecycle\n\nto accelerate automation in the cloud\n\nto facilitate day-to-day work\n\nAdd your story. Show your Jenkins pride. Get our T-shirt\n\nBe an inspiration to the Jenkins community by sharing your Jenkins story.\nJust go to this link and fill out the form.\nWe’ll ask you about your project’s goals, the technical challenges you overcame with Jenkins, and the solutions you created.\nIt should take no more than 20-30 minutes to complete.\n\nWe’ll clean it up for clarity and publish it on https://JenkinsIsTheWay.io.\n\nOnce it’s part of our archive, we’ll send you our new 2020 Jenkins Is the Way t-shirt.\n\nAnd since the more, the merrier, please share this blog post with peers and colleagues.\nWe want to hear everyone’s stories about the clever ways Jenkins is used to automate all that we need to do.\n\nThanks and Acknowledgement\n\nSpecial thanks to abConsulting for creating and managing the https://JenkinsIsTheWay.io site and for reviewing, editing, and publishing the submitted stories.\n\nThanks to the Jenkins Advocacy and Outreach SIG for their reviews and feedback.\n\nThanks also to CloudBees for sponsoring the \" Jenkins is the Way\" program.","title":"Call for User Stories - Jenkins is the Way","tags":["announcement","outreach-programs","advocacy-and-outreach","jenkins-is-the-way"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"alyssat","html":"<div class=\"paragraph\">\n<p>Member of the <a href=\"/sigs/advocacy-and-outreach/\">Jenkins Advocacy and Outreach SIG</a>.\nAlyssa drives and manages Jenkins participation in community events and conferences like <a href=\"https://fosdem.org/\">FOSDEM</a>, <a href=\"https://www.socallinuxexpo.org/\">SCaLE</a>, <a href=\"https://events.linuxfoundation.org/cdcon/\">cdCON</a>, and <a href=\"https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2019/\">KubeCon</a>.\nShe is also responsible for Marketing &amp; Community Programs at <a href=\"https://cloudbees.com\">CloudBees, Inc.</a></p>\n</div>","id":"alyssat","irc":null,"linkedin":null,"name":"Alyssa Tong","slug":"/blog/author/alyssat","twitter":null},{"avatar":{"childImageSharp":null},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/author/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-04-16T00:00:00.000Z","id":"c9bdc8f4-e8bc-5080-883f-d67fbd7f7847","slug":"/blog/2020/04/16/github-app-authentication/","strippedHtml":"This blogpost was updated to reflect the general availability of the feature after the release of GitHub Branch Source 2.7.1 on April 26th, 2020.\n\nI’m excited to announce support for authenticating as a GitHub app in Jenkins.\nThis has been a long awaited feature by many users.\nIt has been released in GitHub Branch Source 2.7.1 which is now available in the Jenkins update centers.\n\nAuthenticating as a GitHub app brings many benefits:\n\nLarger rate limits - The rate limit for a GitHub app scales with your organization size,\nwhereas a user based token has a limit of 5000 regardless of how many repositories you have.\n\nUser-independent authentication - Each GitHub app has its own user-independent authentication. No more need for 'bot' users or figuring out who should be the owner of 2FA or OAuth tokens.\n\nImproved security and tighter permissions - GitHub Apps offer much finer-grained permissions compared to a service user and its personal access tokens. This lets the Jenkins GitHub app require a much smaller set of privileges to run properly.\n\nAccess to GitHub Checks API - GitHub Apps can access the the GitHub Checks API to create check runs and check suites from Jenkins jobs and provide detailed feedback on commits as well as code annotation\n\nGetting started\n\nInstall the GitHub Branch Source plugin,\nmake sure the version is 2.7.1 or above.\n\nConfiguring the GitHub Organization Folder\n\nFollow the GitHub App Authentication setup guide.  These instructions are also linked from the plugin’s README on GitHub.\n\nOnce you’ve finished setting it up, Jenkins will validate your credential and you should see your new rate limit.\nHere’s an example on a large org:\n\nHow do I get an API token in my pipeline?\n\nIn addition to usage of GitHub App authentication for Multi-Branch Pipeline, you can also use app authentication directly in your Pipelines.\nYou can access the Bearer token for the GitHub API by just loading a 'Username/Password' credential as usual,\nthe plugin will handle authenticating with GitHub in the background.\n\nThis could be used to call additional GitHub API endpoints from your pipeline, possibly the\ndeployments api or you may wish to implement your own\nchecks api integration until Jenkins supports this out of the box.\n\nNote: the API token you get will only be valid for one hour, don’t get it at the start of the pipeline and assume it will be valid all the way through\n\nExample: Let’s submit a check run to Jenkins from our Pipeline:\n\npipeline {\n  agent any\n\n  stages{\n    stage('Check run') {\n      steps {\n        withCredentials([usernamePassword(credentialsId: 'githubapp-jenkins',\n                                          usernameVariable: 'GITHUB_APP',\n                                          passwordVariable: 'GITHUB_ACCESS_TOKEN')]) {\n            sh '''\n            curl -H \"Content-Type: application/json\" \\\n                 -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n                 -H \"authorization: Bearer ${GITHUB_ACCESS_TOKEN}\" \\\n                 -d '{ \"name\": \"check_run\", \\\n                       \"head_sha\": \"'${GIT_COMMIT}'\", \\\n                       \"status\": \"in_progress\", \\\n                       \"external_id\": \"42\", \\\n                       \"started_at\": \"2020-03-05T11:14:52Z\", \\\n                       \"output\": { \"title\": \"Check run from Jenkins!\", \\\n                                   \"summary\": \"This is a check run which has been generated from Jenkins as GitHub App\", \\\n                                   \"text\": \"...and that is awesome\"}}' https://api.github.com/repos/ / /check-runs\n            '''\n        }\n      }\n    }\n  }\n}\n\nWhat’s next\n\nGitHub Apps authentication in Jenkins is a huge improvement.  Many teams have already started using it and have helped improve it by giving pre-release feedback. There are more improvements on the way.\n\nThere’s a proposed Google Summer of Code project: GitHub Checks API for Jenkins Plugins.\nIt will look at integrating with the Checks API,\nwith a focus on reporting issues found using the warnings-ng plugin\ndirectly onto the GitHub pull requests, along with test results summary on GitHub.\nHopefully it will make the Pipeline example below much simpler for Jenkins users :)\nIf you want to get involved with this, join the GSoC Gitter channel\nand ask how you can help.","title":"GitHub App authentication support released","tags":["github","github-branch-source","pipeline","announcement"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/author/timja","twitter":"Tjaynz"}]}},{"node":{"date":"2020-01-23T00:00:00.000Z","id":"b56c3926-16c3-522f-ae8f-4b714de4beff","slug":"/blog/2020/01/23/a-new-chapter-for-kohsuke/","strippedHtml":"2020 is going to be a year of change for me.\nBy the end of January, I’ll be officially stepping back from Jenkins,\nswitching my role at CloudBees to an advisor,\nand turning attention to my new startup.\nThe rest of this post is to contextualize this transition, because if you haven’t been working closely with me, this might come across as a surprise.\n\nJenkins has been an amazing journey that never stopped giving.\nI have loved it all - especially meeting the users around the world who made Jenkins what it is today.\nAs the creator of the project, at some point I started wondering how to pass the torch to the next leaders, how to get people to step up and drive it forward.\nToday, thanks to CloudBees and the community, there is a new generation of talented and capable leaders who are passionately driving things forward - and it’s been great to see.\nNewly elected board members, Jenkins X folks, just to name a few.\nThese new people bring new culture and new code, and altogether it has created a positive jolt that pushed Jenkins out of a local optimum I talked about.\nThey have all my support and respect.\nIn reality, my involvement with Jenkins lately has already been largely symbolic, a little bit like an emperor of Japan or a queen of the UK.\nThat’s why this announcement has little practical impact on the forward motion of Jenkins.\n\nSeveral years ago, I used to feel like the sky would fall down if I stepped aside.\nSomewhere in 2019, I suddenly noticed that I wasn’t feeling like that at all anymore.\nThe shift was gradual and steady, so I’m not sure exactly when I crossed the threshold, but in 2019 it was clear I was on the other side.\nThat’s how I knew I could finally end this chapter of my life.\n15 years with Jenkins and 9 years with CloudBees.\nThat is a long time.\n\nI hope you will be wondering what is my new chapter.\nI’m launching a new startup, Launchable, with my old time buddy Harpreet Singh.\nI have known him since my days at Sun Microsystems and JavaEE, and he was my partner in crime at CloudBees to build the Jenkins business from scratch.\nHe went to Atlassian running its BitBucket business for a while, but now he and I are back sitting side by side again.\nA number of CloudBees people invested, including Sacha Labourey,\nBob Bickel,\nand John Vrionis.\n\nThrough Jenkins and CloudBees, I was able to push the state of automation forward in software development.\nSuch automation is producing a lot of data, but we are not using that data to improve our lives.\nIt truly is a wasted gold mine.\nLaunchable is working on harnessing that information to improve developer productivity.\nI wrote a separate blog post to discuss more about my thinking.\n\nLastly, even though I’m moving on from CloudBees as a full-time employee, I’m not completely going away.\nI’ll be still in the CloudBees orbit, as an advisor.\nI’m still very much invested both emotionally and financially in CloudBees.\nI’m still a big fan, and I’ll continue to cheer for them, but from the sideline.\nThe same with Jenkins.\nI’m still on the governance board, ensuring the continuity.\nI’m also still on the Technical Oversight Committee of the Continuous Delivery Foundation,\nthough my chairperson term will expire in March.\n\nI’m incredibly grateful for the undeserved opportunity and the privilege given to me during this chapter.\nI was surrounded by wonderful, inspiring, and talented people, from whom I learned a lot.\nI can only hope that I was able to make a positive impact, and give something back in return to them.\nI won’t name names, but you know who you are, and we’ll stay in touch.\n\nThis year is going to be truly exciting for me. To infinity and beyond!!","title":"A new chapter for Kohsuke","tags":["community","governance","announcement"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2019-11-25T00:00:00.000Z","id":"726986a7-4dcd-5c99-8b23-e199566c8eea","slug":"/blog/2019/11/25/macos-native-installer-deprecation/","strippedHtml":"In addition to WAR files and Docker images, the Jenkins project provides native installers for each weekly and LTS release.\nThere are installers available for Linux distributions, Windows, macOS and other operating systems.\nThere are also installers provided by third parties.\nYou can find the list of these installers on the Downloads page.\n\nIn this blog post, we announce the upcoming deprecation of the macOS native installer.\nWe will review the replacement options and the rollout plan.\n\nWhy?\n\nMaintaining installers is a significant maintenance effort for the project\nbecause installers require testing and, sometimes, specific platforms and environments for packaging.\nWhen installers lose relevance for the majority of the Jenkins audience, we remove them or handover maintenance to third parties on other areas.\nFor macOS, there are currently two types of packages: native installers with GUI for desktop versions and Homebrew packages.\nSince Homebrew is now a defacto standard package manager for macOS users, from the Jenkins standpoint it made sense to deprecate the native installers.\n\nWhy now?\nThere is ongoing work on automating Jenkins Core releases within the Jenkins infrastructure.\nLong story short, we are moving Jenkins release pipelines to Kubernetes on Microsoft Azure.\nThis environment does not offer macOS machines that are needed to produce native installers.\nIf you are interested to know more, there will be a How Jenkins Builds and Delivers Jenkins in the Cloud talk presented by Olivier Vernin at DevOps World | Jenkins World 2019 Europe in Lisbon (use the JWFOSS code for a 30% discount!).\n\nWe could have used an external service for building macOS installers,\nbut it would have added an additional point of failure and implementation/maintenance overhead.\nSo we discussed it in the developer mailing list and agreed that it is better to just deprecate and then remove the packages.\n\nReplacing native installers\n\nIn the case of macOS, there are two main alternatives available: managing the service manually or migrating to Homebrew packages.\nBefore doing a migration, we highly recommend backing up your instance.\n\nManaging Jenkins with WAR file on macOS\n\nIf your Jenkins instance was previously set up with a native installer,\nto update Jenkins it will be enough to replace the jenkins.war file in the installation directory and restart the instance.\nThe services will keep running as it was configured before the migration.\nThe default installation directory is /Applications/Jenkins/jenkins.war\n\nManaging Jenkins with Homebrew\n\nInstalling Jenkins with Homebrew is a way to go for those who want to install Jenkins using a package manager.\nThere are two Homebrew formulas for Jenkins: jenkins for Weekly releases and jenkins-lts for LTS ones.\nThese packages are supported by a third party (Homebrew community),\nand they may be not as frequently updated as packages supported by the Jenkins project directly.\n\nBefore doing a migration from macOS Native installers to HomeBrew, please make sure to backup your Jenkins instance.\nThere are no automatic migration tools available, and the installation may corrupt your JENKINS_HOME or service configuration files in edge cases.\n\nIf you switch to Homebrew, you will need to properly migrate the JENKINS_HOME data to the new location.\nWe do not provide an official migration guide, but it is possible to find some guidelines on the Web.\n\nSample commands:\n\nInstall the latest Weekly version: brew install jenkins\n\nInstall a specific Weekly version: brew install jenkins@YOUR_VERSION\n\nStart the Jenkins service: brew services start jenkins\n\nRestart the Jenkins service: brew services restart jenkins\n\nUpdate the Jenkins version: brew upgrade jenkins\n\nFor more information see the documentation for Homebrew packages on the macOS Download pages.\n\nRollout plan\n\nmacOS native packaging is considered as deprecated starting from Jenkins 2.206 and Jenkins LTS 2.204.1\n\nFor Jenkins Weekly macOS native packaging will be removed with the switch to the new Jenkins release flow.\nThe exact date is to be determined.\n\nAfter the change, there will be no macOS native installers produced for new Jenkins Weekly releases\n\nReleases for previous versions will be available in this archive\n\nFor Jenkins LTS macOS will be removed with the switch to the new Jenkins release flow in the LTS baseline.\nThis change will happen only after the deployment of the new release flow in Jenkins Weekly.\n\nAfter the switch, there will be no macOS native installers produced for new Jenkins LTS releases\n\nReleases for previous versions will be available in this archive\n\nSee the discussion on the developer mailing list for more information.\n\nQuestions and feedback\n\nIf you have any questions or want to provide feedback, please use the developer mailing list thread mentioned above Platform SIG channels (chat, google group).\nAny feedback will be much appreciated because we plan more installer/ and platform deprecations in the future.","title":"Jenkins macOS native installer deprecation","tags":["announcement","deprecation","macos","platform-sig","platforms"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"announcement","limit":8,"skip":16,"numPages":3,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}