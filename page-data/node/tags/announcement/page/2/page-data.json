{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/announcement/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-08-12T00:00:00.000Z","id":"52309c34-03ae-57ce-b801-39141f4c3b3c","slug":"/blog/2020/08/12/windows-installers-upgrade/","strippedHtml":"This article describes the transition from the old Jenkins Windows installer 2.235.2 (32 bit) to the new Jenkins Windows installer 2.235.3 (64 bit)\n\nLet’s take a look how Jenkins installation on Windows happened before release of this upgrade.\n\nStep 1\n\nIt’s evident that branding information is not present here.\n\nStep 2\n\nJenkins would be installed into the 32 bit programs directory along with a 32 bit Java 8 runtime environment.\n\nStep 3\n\nThere was no option to select the user that would run the Jenkins service or the network port that would be used.\n\nIssues\n\nThe previous installer had issues that needed to be resolved:\n\nOnly supported 32-bit installations\n\nBundled an outdated Java 8 runtime environment\n\nNo support for Java 11\n\nNo port selection during installation\n\nNo choice of account for the Jenkins service\n\nThe Program Files (x86) directory was used for the Jenkins home directory\n\nRoad Forward\n\nThe new Jenkins Windows Installer resolves those issues\n\nSupports 64 bit installations and drops 32 bit support\n\nSupports 64 bit Java 8 and 64 bit Java 11\n\nPort selection and validation from the installer\n\nService account selection and validation from the installer\n\nProgram is installed in Program Files with Jenkins home directory in %AppData% of the selected service account\n\nThe JENKINS_HOME directory is placed in the LocalAppData directory for the user that the service will run as, this aligns with modern Windows file system layouts\n\nThe installer has been updated with branding to make it look nicer and provide a better user experience\n\nScreenshots\n\nYou may see below the sequence of screenshots for the new installer:\n\nStep 1\n\nWe can see now the Jenkins logo as a prominent part of the installer UI.\n\nStep 2\n\nJenkins installs by default in the 64 bit programs folder rather than in the 32 bit folder.\nNow the Jenkins logo and name are in the header during entire process of installation.\n\nStep 3\n\nNow the installer allows both specifying and testing the credentials by validating that the account has LogonAsService rights.\n\nStep 4\n\nNow the installer also allows specifying the port that Jenkins should run on and will not continue until a valid port is entered and tested.\n\nStep 5\n\nNow instead of bundling a JRE, the installer searches for a compatible JRE on the system (in the current search no JRE was installed).\nIn case you would like to use a different JRE from the one found by the installer, you can browse and specify it.\nOnly Java 8 and Java 11 runtimes are supported.\nIn case the selected JRE is found to be version 11 the installer will automatically add the necessary arguments and additional jar files for running under Java 11.\n\nStep 6\n\nAll of the items that users can enter in the installer should be overridable on the command line for automated deployment as well. The full list of properties that can be overridden will be available soon.\n\nNext Steps\n\nWindows users have alternatives for their existing Jenkins installations:\n\nUpgrade from inside Jenkins\n\nThe \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.\nUpgrade from inside Jenkins will continue to use the current Java version.\nUpgrade from inside Jenkins will continue to use the current installation location.\n\nUpgrade with the new Jenkins MSI installer\n\nIf you run the new Jenkins MSI installer on your Jenkins that was installed with the old Jenkins MSI installer, it will prompt for a new port and a service account.\n\nStop and disable the existing Jenkins service from the Windows Service Manager\n\nRun the new installer to create the new installation with desired settings\n\nStop the newly installed Jenkins service\n\nCopy existing Jenkins configuration files to the new Jenkins home directory\n\nStart the newly installed Jenkins service\n\nAfter the new Jenkins MSI installer has run, the \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.","title":"Windows Installer Upgrades","tags":["windows","platform-sig","installers","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg","srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/534e5/vsilverman.jpg 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/99887/vsilverman.jpg 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/76fd4/vsilverman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/59a6b/vsilverman.webp 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/cbb78/vsilverman.webp 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/96250/vsilverman.webp 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/50511/vsilverman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}}},"blog":null,"github":"vsilverman","html":"<div class=\"paragraph\">\n<p>Vlad is an active user of Jenkins and at the beginning of 2020 he also started actively contributing to the Jenkins project. He resides in Silicon Valley and for 10+ years had been involved in building/testing business processes for large enterprises and mid-size companies.</p>\n</div>","id":"vsilverman","irc":null,"linkedin":null,"name":"Vlad Silverman","slug":"/blog/author/vsilverman","twitter":"vsilverman"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/author/slide_o_mix","twitter":"alexcearl"}]}},{"node":{"date":"2020-08-04T00:00:00.000Z","id":"784b9495-ce55-533e-bf33-ddb9b2de1fea","slug":"/blog/2020/08/04/cdf-graduation/","strippedHtml":"We are happy to announce that the Jenkins project has achieved the graduated status in\nthe Continuous Delivery Foundation (CDF).\nThis status is officially effective Aug 03, 2020.\nJenkins is the first project to graduate in the CD Foundation.\nThanks to all contributors who made our graduation possible!\n\nIn this article, we will discuss what the CD Foundation membership and graduation mean to the Jenkins community.\nWe will also talk about what changed in Jenkins as a part of the graduation,\nand what are the future steps for the project.\n\nTo know more about the Jenkins graduation,\nsee also the announcement on the CD Foundation website.\nAlso see the special edition of the CD Foundation Newsletter for Jenkins user success stories and some surprise content.\nThe press release is available here.\n\nHow does CDF membership help us?\n\nAbout 18 months ago, Jenkins became one of the CDF founding projects, along with Jenkins X, Spinnaker and Tekton.\nA new foundation was formed to provide a vendor-neutral home for open source projects used for Continuous Delivery and Continuous Integration.\nSpecial interest groups were started to foster collaboration between projects and end user companies,\nmost notably:\nInteroperability,\nMLOps and\nSecurity SIGs.\nAlso, a Community Ambassador role was created to organize local meetups and to provide public-facing community representatives.\nMany former Jenkins Ambassadors and other contributors are now CDF Ambassadors, and they promote Jenkins and other projects there.\n\nThanks to this membership we addressed key project infrastructure needs.\nStarting from Jan 2020, CDF covers a significant part of the infrastructure costs\nincluding our services and CI/CD instances running on Microsoft Azure.\nThe CD Foundation provided us with legal assistance required to get code signing keys for the Jenkins project.\nThanks to that, we were able to switch to a new Jenkins Release Infrastructure.\nThe foundation sponsors the Zoom account we use for Jenkins Online Meetups and community meetings.\nIn the future we will continue to review ways of reducing maintenance overhead by switching some of our self-hosted services to equivalents provided by the Linux Foundation to CDF members.\n\nAnother important CDF membership benefit is community outreach and marketing.\nIt helped us to establish connections with other CI/CD projects and end user companies.\nThrough the foundation we have access to the DevStats service\nthat provides community contribution statistics and helps us track trends and discover areas for improvement.\nOn the marketing side, the foundation organizes webinars, podcasts and newsletters.\nJenkins is regularly represented there.\nThe CD Foundation also runs the meetup.com professional account which is used by local Jenkins communities for\nCI/CD and Jenkins Area Meetups.\nLast but not least, the Jenkins community is also represented at virtual conferences where CDF has a booth.\nAll of that helps to grow Jenkins visibility and to highlight new features and initiatives in the project.\n\nWhy did we graduate?\n\nThe Jenkins project has a long history of open governance which is a key part of today’s project success.\nStarting from 2011, the project has introduced the governance meeting which are open to anyone.\nMost of the discussions and decision making happen publicly in the mailing lists.\nIn 2015 we introduced teams, sub-projects and officer roles.\nIn 2017 we introduced the Jenkins Enhancement Proposal process which helped us to make the key architecture and governance decisions more open and transparent to the community and the Jenkins users.\nIn 2018 we introduced special interest groups that focus on community needs.\nIn 2019 we have expanded the Jenkins governance board\nso that it got more bandwidth to facilitate initiatives in the project.\n\nSince the Jenkins project inception 15 years ago, it has been steadily growing.\nNow it has millions of users and thousands of contributors.\nIn 2019 it has seen 5,433 contributors from 111 countries and 272 companies,\n67 core and 2,654 plugin releases,\n45,484 commits, 7,000+ pull requests.\nIn 2020 Q2 the project has seen 21% growth in pull requests numbers compared to 2019 Q2, bots excluded.\n\nOne may say that the Jenkins project already has everything needed to succeed.\nIt is a result of continuous work by many community members,\nand this work will never end as long as the project remains active.\nLike in any other industry, the CI/CD ecosystem changes every day and sets new expectations from the automation tools in this domain.\nJust as the tools evolve, open source communities need to evolve so that they can address expectations, and onboard more users and contributors.\nThe CDF graduation process helped us to discover opportunities for improvement,\nand address them.\nWe reviewed the project processes and compared them with the Graduated Project criteria defined in the CDF project lifecycle.\nBased on this review, we made changes in our processes and documentation.\nIt should improve the experience of Jenkins users,\nand help to make the Jenkins community more welcoming to existing and newcomer contributors.\n\nWhat changed for the project?\n\nBelow you can find a few key changes we have applied during the graduation process:\n\nPublic roadmap\n\nWe introduced a new public roadmap for the Jenkins project.\nThis roadmap aggregates key initiatives in all community areas: features, infrastructure, documentation, community, etc.\nIt makes the project more transparent to all Jenkins users and adopters,\nand at the same time helps potential contributors find the hot areas and opportunities for contribution.\nThe roadmap is driven by the Jenkins community and it has a fully public process documented in jep:14[].\n\nMore details about the public roadmap are coming next week, stay tuned for a separate blogpost.\nOn July 10th we had an online contributor meetup about the roadmap\nand you can find more information in its materials\n( slides, video recording).\n\nUser Documentation\n\nJenkins Weekly Release line is now documented on our website ( here).\nWe have also reworked the downloads page and added guidelines explaining how to verify downloads.\n\nA new list of Jenkins adopters was introduced on jenkins.io.\nThis list highlights Jenkins users and references their case studies and success stories,\nincluding ones submitted through the Jenkins Is The Way portal.\nPlease do not hesitate to add your company there!\n\nCommunity\n\nWe passed the Core Infrastructure Initiative (CII) certification.\nThis certification helps us to verify compliance with open source best practices\nand to make adjustments in the project (see the bullets below).\nIt also provides Jenkins users and adopters with a public summary about compliance with each best practice.\nDetails are on the Jenkins core page.\n\nJenkins Code of Conduct was updated\nto the new version of Contributor Covenant.\nIn particular, it sets best practices of behavior in the community, and expands definitions of unacceptable behavior.\n\nThe default Jenkins contributing template was updated to cover more common cases for plugin contributors.\nThis page provides links to the Participate and Contribute guidelines hosted on our website,\nand helps potential contributors to easily access the documentation.\n\nThe Jenkins Core maintainer guide was updated to include maintenance and issues triage guidelines.\nIt should help us to deliver quality releases and to timely triage and address issues reported by Jenkins users.\n\nWhat’s next?\n\nIt an honor to be the first project to reach the graduated stage in the Continuous Delivery Foundation,\nbut it is also a great responsibility for the project.\nAs a project, we plan to continue participating in the CDF activities and to work with other projects and end users to maintain the Jenkins' leader role in the CI/CD space.\n\nWe encourage everyone to join the project and participate in evolving the Jenkins project and driving its roadmap.\nIt does not necessarily mean committing code or documentation patches;\nuser feedback is also very important to the project.\nIf you are interested to contribute or to share your feedback,\nplease contact us in the Jenkins community channels ( mailing lists, chats)!\n\nAcknowledgements\n\nCDF graduation work was a major effort in the Jenkins community.\nCongratulations and thanks to the dozens of contributors who made our graduation possible.\nI would like to thank\nAlex Earl,\nAlyssa Tong,\nDan Lorenc,\nDaniel Beck,\nJeff Thompson,\nMarky Jackson,\nMark Waite,\nOlivier Vernin,\nTim Jacomb,\nTracy Miranda,\nUllrich Hafner,\nWadeck Follonier,\nand all other contributors who helped with reviews and provided their feedback!\n\nAlso thanks to the Continuous Delivery Foundation marketing team (Jacqueline Salinas, Jesse Casman and Roxanne Joncas) for their work on promoting the Jenkins project and, specifically, its graduation.\n\nAbout the Continuous Delivery Foundation\n\nThe Continuous Delivery Foundation (CDF) serves as the vendor-neutral home of many of the fastest-growing projects for continuous delivery, including Jenkins, Jenkins X, Tekton, and Spinnaker,\nas well as fosters collaboration between the industry’s top developers, end users and vendors to further continuous delivery best practices.\nThe CDF is part of the Linux Foundation, a nonprofit organization.\nFor more information about the foundation, please visit its website.\n\nMore information\n\nTo know more about the Jenkins graduation in the Continuous Delivery Foundation,\nsee the announcement on the CD Foundation website.\nAlso see the special edition of the CD Foundation Newsletter for Jenkins user success stories and some surprise content.\nThe press release is available here.","title":"Jenkins graduates in the Continuous Delivery Foundation","tags":["announcement","cdf","general","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-07-27T00:00:00.000Z","id":"eff5a9fc-561f-50a6-8a43-4e2faffe72ae","slug":"/blog/2020/07/27/repository-signing-keys-changing/","strippedHtml":"The Jenkins core release automation project has been delivering Jenkins weekly releases since Jenkins 2.232, April 16, 2020.\nThe Linux repositories that deliver the weekly release were updated with new GPG keys with the release of Jenkins 2.232.\n\nBeginning with Jenkins LTS release 2.235.3, stable repositories will be signed with the same GPG keys that sign the weekly repositories.\nAdministrators of Linux systems must install the new signing keys on their Linux servers before installing Jenkins 2.235.3.\n\nDebian/Ubuntu\n\nUpdate Debian compatible operating systems (Debian, Ubuntu, Linux Mint Debian Edition, etc.) with the command:\n\nDebian/Ubuntu\n\n# wget -qO - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n\nRed Hat/CentOS\n\nUpdate Red Hat compatible operating systems (Red Hat Enterprise Linux, CentOS, Fedora, Oracle Linux, Scientific Linux, etc.) with the command:\n\nRed Hat/CentOS\n\n# rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n\nFrequently Asked Questions\n\nWhat if I don’t update the repository signing key?\n\nUpdates will be blocked by the operating system package manager (apt, yum, dnf) on operating systems that have not installed the new repository signing key.\nSample messages from the operating system may look like:\n\nDebian/Ubuntu\n\nReading package lists... Done\nW: GPG error: https://pkg.jenkins.io/debian-stable binary/ Release:\n    The following signatures couldn't be verified because the public key is not available:\n        NO_PUBKEY FCEF32E745F2C3D5\nE: The repository 'https://pkg.jenkins.io/debian-stable binary/ Release' is not signed.\nN: Updating from such a repository can't be done securely, and is therefore disabled by default.\nN: See apt-secure(8) manpage for repository creation and user configuration details.\n\nRed Hat/CentOS\n\nDownloading packages:\nwarning: /var/cache/yum/x86_64/7/jenkins/packages/jenkins-2.235.3-1.1.noarch.rpm:\n    Header V4 RSA/SHA512 Signature, key ID 45f2c3d5: NOKEY\nPublic key for jenkins-2.235.3-1.1.noarch.rpm is not installed\n\nWhy is the repository signing key being updated?\n\nThe original repository GPG signing key is owned by Kohsuke Kawaguchi.\nRather than require that Kohsuke disclose his personal GPG signing key, the core release automation project has used a new repository signing key.\nThe updated GPG repository signing key is used in the weekly repositories and the stable repositories.\n\nWhich operating systems are affected?\n\nOperating systems that use Debian package management (apt) and operating systems that use Red Hat package management (yum and dnf) need the new repository signing key.\n\nOther operating systems like Windows, macOS, FreeBSD, OpenBSD, Solaris, and OpenIndiana are not affected.\n\nAre there other signing changes?\n\nYes, there are other signing changes, though they do not need specific action from users.\n\nThe jenkins.war file is signed with a new code signing certificate.\nThe new code signing certificate has been used on weekly releases since April 2020.","title":"Jenkins 2.235.3: New Linux Repository Signing Keys","tags":["announcement","linux","platform"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/author/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-07-23T00:00:00.000Z","id":"fd686e1c-3df7-5236-8624-f2cd50ed3461","slug":"/blog/2020/07/23/windows-support-updates/","strippedHtml":"In this article, I would like to announce the new Windows support policy\nwhich was introduced in the Jenkins project in June 2020.\nThis policy sets an expectation about how we handle issues and patches related to Windows support for the Jenkins server and agents, and how we organize testing of Windows support in the project.\nWe will also talk about .NET Framework 2.0 support removal in Jenkins 2.248,\nand about new Windows service management features and fixes Jenkins users get with this release.\n\nFigure 1. Jenkins on Windows\n\nWhy?\n\nIn theory, Jenkins can run everywhere where you can run Java 8 or Java 11, but, in practice, there are some limitations.\nThe Jenkins core and some plugins contain native code, and hence they rely on operating systems and platforms.\nWe use Java Native Access and Java Native Runtime libraries which provide wide platform support for low-level operations,\nbut there are platform-specific cases not covered by such generic libraries.\nIn the case of Windows platforms we use Windows Service Wrapper (WinSW) and\nWindows Process Management Library (WinP).\nThese libraries depend on particular Windows API versions and, in the case of Windows services, on .NET Framework.\n\nHistorically Jenkins had no documented support policy for Windows,\nand we were accepting patches for all versions which existed since the Hudson inception in 2004.\nIt became a serious obstacle for Windows component maintainers who had to be very conservative about incoming patches so that we could avoid breaking instances running on old platforms.\nLack of testing for older platforms did not help either.\nAnd it is not just about maintenance overhead.\nUsers were impacted as well, because it blocked us from adopting some new Windows features and making Jenkins more stable/maintainable on modern platforms.\n\nNew policy\n\nTo set proper expectations about Windows support,\nin the new policy we defined four support levels.\nSee the Windows support policy page for the actual information about the support levels and the supported platforms.\nThis blogpost captures the support state as of Jul 23, 2020:\n\nLevel 1 - Full Support\n\nWe run automated testing for these platforms, and we intend to timely fix the reported issues.\nThis support level includes 64-bit (amd-64) Windows Server versions with the latest GA update pack,\nand versions used in the official Jenkins server and agent Docker images.\n\nLevel 2 - Supported\n\nWe do not actively test these platforms, but we intend to keep compatibility.\nWe are happy to accept patches.\nThis support level includes 64-bit (amd64) Windows Server and Windows 10 versions generally supported by Microsoft.\n\nLevel 3 - Patches considered\n\nThe platforms are generally expected to work, but they may have limitations and extra requirements.\nWe do not test compatibility, and we may drop support if needed.\nWe will consider patches if they do not put Level 1/2 platforms at risk and if they do not create maintenance overhead.\nThis support level includes non-amd64 platforms like x86 (32-bit) and AArch64 (Arm).\nIt also applies to non-mainstream release lines like Windows Embedded, preview releases, and versions no longer supported by Microsoft.\n\nLevel 4 - Unsupported\n\nThese versions are known to be incompatible or to have severe limitations.\nWe do not support the listed platforms, and we will not accept patches.\nAt the moment this level applies to platforms released before 2008.\n\nWhen the policy was introduced, there were questions raised about platforms listed in the Level 3 support category.\nFirst of all, these platforms are still supported.\nUsers are welcome to run Jenkins on these platforms.\nWe recognize the importance of the platforms listed there, and we intend to keep compatibility with them.\nAt the same time, particular functionality may break there due to the lack of testing when we update Jenkins or upstream dependencies.\nIt may take a while until a fix is submitted by a user or contributor,\nbecause we do not maintain development environments for these platforms.\nBy setting a Level 3 support level, we want to set an explicit expectation about those limitations.\n\nIf you are interested in expanding the official Windows support policy and adding more platforms there,\nwe invite you to participate in quality assurance of Jenkins.\nYou may contribute by expanding test automation for Jenkins,\ncontributing test environments for your platforms,\nor participating in the LTS release candidate testing and reporting results.\nPlease contact us via Platform SIG channels if you are interested.\n\nWindows Service Management changes in Jenkins 2.248\n\nFigure 2. WinSW Logo\n\nAlthough the policy was introduced more than 1 month ago,\nJenkins 2.248 is the first release where the new policy is applied.\nStarting from this release, we won’t support .NET Framework 2.0 for launching the Jenkins server or agents as Windows services.\n .NET Framework 4.0 or above is now required for using the default service management features.\n\nThis release also upgrades Windows Service Wrapper (WinSW) from 2.3.0 to 2.9.0 and replaces the bundled binary from .NET Framework 2.0 to 4.0.\nThere are many improvements and fixes in these versions,\nbig thanks to NextTurn and all other contributors.\nYou can find the full WinSW changelog here,\njust a few highlights important to Jenkins users:\n\nPrompt for permission elevation when administrative access is required.\nNow Jenkins users do not need to run the agent process as Administrator to install the agent as a service from GUI.\n\nEnable TLS 1.1/1.2 in .NET Framework 4.0 packages on Windows 7 and Windows Server 2008 R2.\n\nEnable strong cryptography when running .NET Framework 4.0 binaries on .NET 4.6.\n\nSupport security descriptor string in the Windows service definition.\n\nSupport 'If-Modified-Since' and proxy settings for automatic downloads.\n\nFix Runaway Process Killer extension so that it does not kill wrong processes with the same PID on startup.\n\nFix the default domain name in the serviceaccount parameter (jira:JENKINS-12660[])\n\nFix archiving of old logs in the roll-by-size-time mode.\n\nAs you may see, there are many improvements available with this version,\nand we hope that it will make Windows service installation even more reliable.\nSome of the changes in WinSW also replaced old workarounds in the Jenkins core,\nmaking the code more maintainable.\n\nUse-cases affected by .NET Framework 2.0 support removal\n\nIf you use .NET Framework 2.0 to run the Jenkins Windows services,\nthe following use-cases are likely to be affected:\n\nInstalling the Jenkins server as a Windows service from Web UI.\nThe official MSI Installer supports .NET Framework 2.0 for the moment, but it will be changed in future versions.\n\nInstalling agents as Windows services from GUI.\nThis feature is provided by in Windows Agent Installer Module from the Jenkins core.\n\nInstalling agents over Windows Management Instrumentation (WMI) via the WMI Windows Agents plugin\n\nAuto-updating of Windows service wrappers on agents installed from GUI.\n\nUpgrade guidelines\n\nIf all of your Jenkins server and agent instances already use .NET Framework 4.0 or above,\nthere are no special upgrade steps required.\nPlease enjoy the new features!\n\nIf you run the Jenkins server as a Windows Service with .NET Framework 2.0,\nthis instance will require an upgrade of .NET Framework to version 4.0 or above.\nWe recommend running with .NET Framework 4.6.1 or above,\nbecause this .NET version provides many platform features by default\n(e.g. TLS 1.2 encryption and strong cryptography),\nand Windows Service Wrapper does not have to apply custom workarounds.\n\nIf you want to continue running some of your agents with .NET Framework 2.0,\nthe following extra upgrade steps are required:\n\nDisable auto-upgrade of Windows Service Wrapper on agents by setting the\n-Dorg.jenkinsci.modules.windows_slave_installer.disableAutoUpdate=true flag on the Jenkins server side.\n\nUpgrade agents with .NET Framework 4.0+ by downloading the recent Windows Service Wrapper 2.x\nversion from WinSW GitHub Releases\nand manually replacing the wrapper \".exe\" files in the agent workspaces.\n\nWhat’s next?\n\nWe plan to continue expanding the Windows support in Jenkins,\nincluding providing official Docker images for newer Windows versions.\nFor example, there is already a pull request which will introduce official agent images for Windows Server Core LTSC 2019 and\nfor Windows Server Core and Nano Server 1909.\nWe are also interested to keep expanding test coverage for Windows platforms.\nAny contributions and feedback will be appreciated!\n\nWe also keep working on improving Windows Services.\nBuddhika Chathuranga, a Google Summer of Code 2020 student, is working on support for YAML Configurations in Windows Service Wrapper,\nand on better verification of XML and YAML Configurations.\nSee the details on the project page and in the\nCoding Phase 1 Report.\nIn addition to that, there is ongoing work on a new Windows Service Wrapper 3.0 release which will redesign CLI and introduce a lot more improvements.\nIf you are interested in contributing to Windows Service Wrapper,\nsee the guidelines here.\nWe will also appreciate your feedback on the WinSW Gitter channel.","title":"Jenkins 2.248: Windows Support Updates","tags":["announcement","windows","platform","winsw"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-07-15T00:00:00.000Z","id":"ea6acacc-eca1-580a-a013-eb8a8cacca6c","slug":"/blog/2020/07/15/xss-severity/","strippedHtml":"Eagle-eyed readers of today’s security advisory may already have noticed that we consider the cross-site scripting (XSS) vulnerabilities to be 'High' severity.\nThis is a change from previous security advisories, in which similar vulnerabilities got a 'Medium' score.\n\nWe follow the guidelines of CVSS version 3.0 for the severity we assign to these issues.\nTheir examples for XSS vulnerabilities, as well as XSS vulnerabilities in other software, consider the most severe, immediate impact to be a modification of the HTML output, possibly also the extraction of the session cookie (something Jenkins prevents by declaring it to be HttpOnly).\n\nUnfortunately, this does not adequately model the impact that a successful XSS exploitation in Jenkins can have:\nJenkins administrators can perform far more sensitive actions than e.g. the admins of most content management systems could, as it is designed to allow users to execute code to build, test, and deploy their software.\nSo this kind of vulnerability, that allows attackers to do anything their victims have permission to do, in Jenkins can mean execution of arbitrary code, perhaps via the script console, if the victim has the Overall/Administer permission.\nNone of this requires chaining different actions in an attack, a well-chosen XSS payload will accomplish this.\n\nTherefore, starting today, we score XSS vulnerabilities by the highest immediate impact a successful attack can have, which is a complete system compromise if admins can be attacked.\nFor stored XSS requiring some permissions, like the ability to configure jobs, a typical score would be 8.0.\nReflected XSS, which don’t require any permissions to exploit, will usually score 8.8.","title":"Severity of cross-site scripting vulnerabilities","tags":["security","announcement"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2020-05-25T00:00:00.000Z","id":"bbaf3958-fe7d-5fd6-a06c-16651d385923","slug":"/blog/2020/05/25/read-only-jenkins-announcement/","strippedHtml":"I’m excited to announce that the 'read-only' Jenkins feature is now available for preview.\nThis feature allows restricting configuration UIs and APIs while providing access to essential Jenkins system configuration, diagnostics, and self-monitoring tools through Web UI.\nSuch mode is critical for instances managed as code, e.g. with Jenkins Configuration-as-Code plugin.\nIt is delivered as a part of the jep:224[Readonly system configuration] effort.\n\nYou will want to use at least Jenkins 2.238 to have all the features mentioned in this post.\n\nRead-only Jenkins currently allows users to have access to:\n\njob configuration\n\nsystem configuration\n\nplugin manager\n\nsystem logs\n\ncloud configuration\n\nagent configuration\n\nagent logs\n\nFor more planned integrations see the jira:JENKINS-12548[] epic.\n\nRead-only Jenkins is split into three permissions:\n\nJob/ExtendedRead - Read-only access to job configurations\n\nexisted since 2009 but the UI didn’t do anything to indicate to the users\nthat they couldn’t edit the job configuration page.\nThis has now been adapted to the new read-only engine.\n\nAgent/ExtendedRead - Read-only access to agent configurations\n\nexisted since 2013 but it was undocumented and only allowed access to API and no UI\n\nUI support added in Jenkins 2.238\n\nOverall/SystemRead - Read-only access to Jenkins system configuration.\nIt is very useful for Jenkins instances managed as code, e.g. with help of the Jenkins Configuration as Code Plugin.\n\nIntroduced in Jenkins 2.222 as a part of jep:224[Readonly system configuration]\n\nYou can selectively grant the permission(s) as you wish.\n\nWhy do I want this?\n\nGiven the rise of the configuration-as-code plugin a lot of Jenkins instances are fully managed as code,\nwhich means that no changes are allowed through the UI.\n\nThe problem with this is you don’t know when new plugin versions are available and in order to see what other configuration options are available to a plugin you currently need the 'Administer' permission.\n\nRead-only access to system administration information allows users who are not administrators to more easily debug build issues.\nFor example, given a 'Jenkins' error message in a build the user can check:\n\nwhich plugins are installed\n\nthe version of the plugin\n\nThis can allow the user to solve their issue themselves and makes it easier for the user to report an issue with a plugin directly to the maintainers.\n\nWhat can I expect\n\nAll built in UI controls have been adapted to clearly distinguish between\nan editable control and a control you don’t have permission to edit:\n\nEditable:\n\nNon editable:\n\nNote: there are other controls such as in the credentials and pipeline plugins that have\nnot been updated yet.\n\nAction buttons, (Such as 'Save' and 'Apply') have been hidden in most cases.\n\nWork will continue on read-only configuration.  Some plugins need support added and certain controls\ncould have some improvements done to render better.\n\nHow can I use it?\n\nThese permissions are currently available in beta and for now disabled by default.\nYou can enable them by installing the Extended read permission plugin v3.2 or above.\n\nThen you will need to add the following permissions to a user / group depending on your use case:\n\nOverall/SystemRead\n\nJob/ExtendedRead\n\nAgent/ExtendedRead\n\nNote: You will need to set the Overall/Read and Job/Read permissions as well.  You might\nwant to consider creating a role containing the required permissions.\n\nHere is an example using the Configuration as Code plugin and the Folder-based Authorization Strategy plugin :\n\njenkins:\n  authorizationStrategy:\n    folderBased:\n      globalRoles:\n        - name: \"admin\"\n          permissions:\n            - id: \"Overall/Administer\"\n          sids:\n            - \"admin\"\n        - name: \"global read\"\n          permissions:\n            - id: \"Agent/ExtendedRead\"\n            - id: \"Overall/SystemRead\"\n            - id: \"Overall/Read\"\n            - id: \"Job/Read\"\n            - id: \"Job/ExtendedRead\"\n          sids:\n            - \"reader\"\n\nI can’t see a configuration that I think should be allowed\n\nMost of Jenkins itself has been updated to support read-only Jenkins, but not very many plugins.\nPlease create an enhancement issue on the plugins issue tracker.\nIf the plugin uses Jira to track issues, then you can add it to the jira:JENKINS-12548[] epic.\n\nHow do I update my plugin to support it\n\nSee the Read only view section of the developer documentation.\n\nWhat’s next\n\nIn this release we introduce a foundation feature which is already supported in all key Jenkins core controls and in some plugins.\nThere are many plugins which contribute to global configurations and diagnostics which still need to be adapted to support the new mode.\nWe will keep working on this feature and its adoption so that the next LTS baseline in September provides a full-fledged user experience for Jenkins admins.\n\nSystem read permission is a featured project in the UI/UX Hackfest\nhappening May 25-29 2020. If you want to get involved please check it out!","title":"Read-only Jenkins Configuration","tags":["system-read","extended-read","configuration-as-code","announcement"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/author/timja","twitter":"Tjaynz"}]}},{"node":{"date":"2020-05-12T00:00:00.000Z","id":"96c5da12-e5e0-51af-86a5-d619e4901dae","slug":"/blog/2020/05/12/uiux-hackfest-announcement/","strippedHtml":"This event is over, thanks a lot to all contributors!\nPlease the event page for results.\n\nOn behalf of the Jenkins User Experience, Documentation and Advocacy and Outreach special interest groups,\nwe are happy to announce the online UI/UX hackfest on May 25-29!\nEveryone is welcome to participate, regardless of their Jenkins development experience.\n\nThe goal is to get together and work on improving Jenkins user experience,\nincluding but not limited to user interface and user documentation.\nWe also invite you to share experiences about Jenkins and to participate in UX testing.\nThe event follows the Jenkins is the Way theme and the\nmost active contributors will get special edition swag and prizes!\n\nEvent plan\n\nThis hackfest is NOT a hackathon.\nWe do not expect participants to dedicate all their time during the event timeframe, but hop-in/hop-out as their time allows.\nEverybody can spend as much time as they are willing to dedicate.\nSpending a few days or just a few hours is fine, any contributions matter regardless of their size.\nJenkins development experience is not required,\nwe have newcomer-friendly stories for those who want to start contributing to the project.\nWe will also have a 24/7 jenkinsci/hackfest Gitter chat for Q&A and coordination between contributors.\n\nThere will be 3 main tracks :\n\nUser Interface -\nImprove look&feel and accessibility for Jenkins users,\nwork on new read-only interface for instances managed with configuration as code,\ncreate and update Jenkins themes,\nand many other topics.\nThis track is coordinated by the UX SIG.\n\nUser Documentation -\nImprove and create new user documentation, tutorials and solution pages.\nAlso, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\nThis track is coordinated by the Documentation SIG.\n\nSpread the word -\nWrite user stories for Jenkins Is The Way site and the Jenkins blog,\npost about your Jenkins user experience and new features,\nrecord overview and HOWTO videos, etc.\nThis track is coordinated by the Advocacy and Outreach SIG.\n\nWe are working on publishing project ideas and issues for the listed tracks.\nThe current list can be found on the UI / UX hackfest event page,\nthis list will be finalized by the beginning of the hackfest.\nYou are welcome to propose your own projects within the User Experience theme.\n\nDuring the event, we will organize online meetups and ad-hoc training sessions in different timezones.\nAll these sessions will be recorded and shared on our YouTube channel.\nThere are no mandatory sessions you must attend, you are welcome to join ones remotely or watch the recordings.\nAfter the event we will invite participants to demo their projects at online meetings or recorded sessions.\n\nRegistration\n\nThis event is over, thanks a lot to all contributors!\n\nP.S: Note that the registration form has a question top 3 things we could change in Jenkins to improve your user experience.\nWe would appreciate your response there!\n\nContacts\n\nPlease use the following contacts to contact organizers:\n\nGitter chat\n\nMailing list\n\nResources\n\nEvent Page\n\nRegistration form.\n\nProject ideas (work-in-progress).\nThe full list will be published by the beginning of the event.\n\nFrequently Asked Questions\n\nContributing to Jenkins\n\nCode of Conduct\n\nSwag and Prizes\n\nThanks to our sponsors ( CloudBees, Inc. and Continuous Delivery Foundation),\nwe are happy to offer swag to active contributors!\n\n50 most-active contributors will get an exclusive \"Jenkins Is The Way\" T-shirt and stickers\n\nActive contributors will get Jenkins stickers and socks\n\nWe are working on special prizes for top contributors, to be announced later\n\nAcknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\nCloudBees, Inc. and\nContinuous Delivery Foundation (CDF).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our online meetup platform which we will be using for the event.\n\n.","title":"Join us for online UI/UX hackfest on May 25-29!","tags":["announcement","event","ui","ux","documentation","outreach-programs","advocacy-and-outreach","jenkins-is-the-way","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-05-11T00:00:00.000Z","id":"a9a89ae0-1c8f-5566-81ab-6fdf73b725f7","slug":"/blog/2020/05/11/docker-windows-agents/","strippedHtml":"We would like to announce the availability of official Windows agent images for Docker.\nThese images allow provisioning Jenkins agents with Windows OS on Docker and Kubernetes.\n\nNew images\n\nAll official Docker images for agents now provide nanoserver-1809 and windowsservercore-1809 tags which include Windows images and, at the moment, Java 8 (these are like the latest tag).\nWe also provide tags with explicit Java selection, e.g. jdk8-windowsservercore-1809 or jdk11-nanoserver-1809.\nVersion tags are also available, e.g. jenkins/agent:4.3-4-jdk8-nanoserver-1809.\n\njenkins/agent is a basic agent which bundles the agent.jar for agent ⇐ ⇒ controller communication. This is most useful as a base image for other images.\nWindows images are available starting from version 4.3-4\n\njenkins/inbound-agent is an agent that is based on the jenkins/agent image above. It provides a wrapper script written in PowerShell to help specify the parameters to agent.jar.\nWindows images are available starting from version 4.3-4\n\njenkins/ssh-agent is an image which has OpenSSH installed and should be used with the SSH Build Agents Plugin.\nWindows images are available starting from version 2.1.0\n\nUsing Windows Docker images\n\nTo use the new images, you will need a proper Docker or Kubernetes environment which supports running Windows containers.\nFor Windows desktop users, the easiest way is to use Docker for Windows.\nWindows support in Kubernetes is documented here.\n\njenkins/agent\n\nThe jenkins/agent image is a simple agent with the JDK and the agent.jar (Jenkins Remoting library).\n\nThere are two main use cases for this image:\n\nAs a base image for other Docker images (e.g., FROM jenkins/agent:jdk8-nanoserver-1809 in your Dockerfile). The jenkins/inbound-agent is based on this image.\n\nThis image may also be used to launch an agent using the Launch method of Launch agent via execution of command on the master.  This allows the controller to launch the agent inside the docker container automatically.\n\nTo run the agent for the second use case, you would specify the following command on the Jenkins controller after setting Remote root directory to C:\\Users\\jenkins\\agent :\n\ndocker run -i --rm --name agent --init jenkins/agent:jdk8-windowsservercore-1809 java -jar C:/ProgramData/Jenkins/agent.jar\n\njenkins/inbound-agent\n\nThe inbound-agent Docker image tries to provide a higher level interaction with the agent.jar executable. It provides a PowerShell wrapper script around agent.jar and it is specified as the entrypoint so that you just need to pass in some command line arguments to run the agent. A pull request has been opened which documents these command line parameters and environment variables.\n\nExample:\n\ndocker run jenkins/inbound-agent:windowsservercore-1809 `\n   -Url http://jenkins-server:port `\n   -WorkDir=C:/Users/jenkins/Agent `\n   -Secret `\n   -Name\n\nExample using environment variables:\n\ndocker run -e \"JENKINS_URL=http://jenkins-server:port\" -e \"JENKINS_AGENT_NAME=AGENTNAME\" `\n   jenkins/inbound-agent:windowsservercore-1809 `\n   -WorkDir=C:/Users/jenkins/Agent `\n   -Secret `\n   -Name\n\nThe -Url, -Name and -Secret parameters are required, but can be specified as either command line parameters or environment variables.\n\njenkins/ssh-agent\n\nAs mentioned above the jenkins/ssh-agent docker image is based on SSH communication with the controller, rather than the remoting TCP or WebSocket protocols. The image sets up a jenkins user and the OpenSSH server so that the controller can connect to the agent via SSH. The image expects an SSH public key as a parameter and puts that key into the authorized_keys file for the jenkins user. The private key should be specified in the agent configuration on the controller to allow the controller to connect.\n\nExample:\n\ndocker run jenkins/ssh-agent:jdk8-windowsservercore-1809 \"\"\n\nYou can also pass the public key as an environment variable when using docker run.\n\nExample:\n\ndocker run -e \"JENKINS_AGENT_SSH_PUBKEY=\" jenkins/ssh-agent:jdk8-windowsservercore-1809\n\nYou will then be able to connect this agent using the SSH Build Agents Plugin as \"jenkins\" with the matching private key.\n\nWhat’s next?\n\nWe are considering providing versions based on Windows Server 2019 build 1909 so that Jenkins users can run these images on GKE clusters (see this issue).\n\nWe are also looking into providing multiarch manifests which would allow Windows images to be part of the latest tag.\n\nThere is also an open pull-request to create a Windows based Docker image for a Jenkins controller. There hasn’t been a lot of requests for this, but to make the offerings complete for Windows users, the pull request was created.\n\nFor plans unrelated to Windows, please see the Docker images for agents: New names and What’s next blogpost.","title":"Windows Docker Agent Images: General Availability","tags":["announcement","docker","platform-sig","windows"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/author/slide_o_mix","twitter":"alexcearl"}]}}]}},"pageContext":{"tag":"announcement","limit":8,"skip":8,"numPages":3,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}