{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/jenkins2/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2016-04-11T00:00:00.000Z","id":"25d1b7f0-6783-53a9-aec5-f7242e8493d2","slug":"/blog/2016/04/11/gsoc2016-mentors-call/","strippedHtml":"As you probably know, Jenkins project has been accepted to\nGoogle Summer of Code 2016.\n\nDuring last month we were working with students in order to discuss their project ideas and to review their application drafts.\nThanks again to all students and mentors for your hard work during about ten office hours and dozens of other calls/chats!\n\nCurrent status\n\nWe have successfully handled the student application period\n\nWe have received a bunch of good project proposals (mentors cannot disclose the number)\n\nWe have done the preliminary filtering of applications\n\nGSoC mentors and organization admins have prepared the project slot application draft\n\nCurrently we are looking for mentors.\nWe have a minimal required number for the current project slot application plan, but additional expertise would allow us to share the load and to provide more expertise to students.\n\nIf you want to be a mentor:\n\nCheck out mentor requirements here.\n\nCheck out the project ideas\nhere.\n\nStudent application period is finished, so it is too late to propose project ideas for this year\n\nYou can join the mentor team for one of the mentioned projects\n\nHot areas: UI improvements, Fingerprints, External Workspace Manager\n\nContact Google GSoC admins via jenkinsci-gsoc-org@googlegroups.com\n\nLinks\n\nGSoC2016 page on our Wiki\n\nJenkins page on the GSoC2016 website","title":"Google Summer of Code. Call for Mentors","tags":["general","jenkins2","gsoc"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-04-07T00:00:00.000Z","id":"e79f0919-bcdb-509d-81fc-767eb7210b3a","slug":"/blog/2016/04/07/2.0-release-candidate/","strippedHtml":"Those who fervently watch the\njenkinsci-dev@\nlist, like I do, may have caught Daniel\nBeck 's email today which quietly referenced a significant milestone on the\nroad to 2.0 which has been reached: the first 2.0 release\ncandidate is here!\n\nThe release candidate process, in short, is the final stabilization and testing\nperiod before the final release of Jenkins 2.0. If you have the\ncycles to help test, please download the release candidate and give\nus your feedback as soon as possible!\n\nThe release candidate process also means that changes targeting release after\n2.0 can start landing in the master branch, laying the groundwork 2.1 and\nbeyond.\n\nI pushed the merge to 'master'. So anything targeting 2.1+ can be now proposed\nin pull requests to that branch.\n\nAnything happening on '2.0' branch will be limited to critical fixes for the 2.0\nrelease specifically.\n\n— Daniel Beck\n\nCompared to the\n2.0 beta release, the first\nrelease candidate has a number of fixes for issues discovered in the alpha and beta\nprocess. Most notable perhaps is the stabilization of a system property which\nconfiguration management tools, like Puppet/Chef/Ansible/etc, can use to suppress\nthe user-friendly Getting Started wizard. Since users of those tools\nhave alternative means of ensuring security and correctness of their Jenkins\ninstallations, the out-of-the-box experience can be skipped.\n\nBased on our\nrough\ntimeline this gives us a couple weeks to test the release candidates and get\nready for a big exciting release of 2.0 at the end of April!","title":"Jenkins 2.0 Release Candidate available!","tags":["jenkins2"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2016-04-07T00:00:00.000Z","id":"bb46e899-10f9-583c-862c-a664e9eb81b4","slug":"/blog/2016/04/07/pipeline-for-runs-on-hardware/","strippedHtml":"In addition to Jenkins development, during last 8 years I’ve been involved into continuous integration for hardware and embedded projects.\nAt JUC2015/London\nI have conducted a talk about common automation challenges in the area.\n\nIn this blog post I would like to concentrate on Pipeline (formerly known as Workflow), which is a new ecosystem in Jenkins that allows implementing jobs in a domain specific language.\nIt is in the suggested plugins list in the upcoming Jenkins 2.0 release.\n\nThe first time I tried Pipeline two and half years ago, it unfortunately did not work for my use-cases at all.\nI was very disappointed but tried it again a year later.\nThis time, the plugin had become much more stable and useful.\nIt had also attracted more contributors and started evolving more rapidly with the development of plugins extending the Pipeline ecosystem.\n\nCurrently, Pipeline a powerful tool available for Jenkins users to implement a variety of software delivery pipelines in code.\nI would like to highlight several Pipeline features which may be interesting to Jenkins users working specifically with embedded and hardware projects.\n\nIntroduction\n\nIn Embedded projects it’s frequently required to run tests on specific hardware peripherals: development boards, prototypes, etc.\nIt may be required for both software and hardware areas, and especially for products involving both worlds.\nCI and CD methodologies require continuous integration and system testing, and Jenkins comes to help here.\nJenkins is an automation framework, which can be adjusted to reliably work with hardware attached to its nodes.\n\nArea challenges\n\nGenerally, any peripheral hardware device can be attached to a Jenkins node.\nSince Jenkins nodes require Java only, almost every development machine can be attached.\nBelow you can find a common connection scheme:\n\nAfter the connection, Jenkins jobs could invoke common EDA tools via command-line interfaces.\nIt can be easily done by a Execute shell build steps in free-style projects.\nSuch testing scheme is commonly affected by the following issues:\n\nNodes with peripherals are being shared across several projects.\nJenkins must ensure the correctness of access (e.g. by throttling the access).\n\nIn a single Freestyle project builds utilize the node for a long period. If you synthesize the item before the run, much of the peripheral utilization file may be wasted.\n\nThe issue can be solved by one of concurrency management plugins:\nThrottle Concurrent Builds, Lockable Resources\nor\nExclusions.\n\nTest parallelization on multiple nodes requires using of multiple projects or\nMatrix configurations, so it causes job chaining again.\n\nThese build chains can be created via\nParameterized Trigger and\nCopy Artifacts, but it complicates job management and build history investigation.\n\nHardware infrastructure is usually flaky.\nIf it fails during the build due to any reason, it’s hard to diagnose the issue and re-run the project if the issue comes from hardware.\n\nBuild Failure Analyzer allows to identify the root cause of a build failure (e.g. by build log parsing).\n\nConditional Build Step and\nFlexible Publish plugins allow altering the build flow according to the analysis results.\n\nCombination of the plugins above is possible, but it makes job configurations extremely large.\n\nTests on hardware peripherals may take much time.\nIf an infrastructure fails, we may have to restart the run from scratch.\nSo the builds should be robust against infrastructure issues including network failures and Jenkins controller restarts.\n\nTests on hardware should be reproducible, so the environment and input parameters should be controlled well.\n\nJenkins supports\ncleaning workspaces, so it can get rid of temporary files generated by previous runs.\n\nJenkins provides support of agents connected via containers (e.g.\nDocker) or VMs, which allow creating clean environments for every new run.\nIt’s important for 3rd-party tools, which may modify files outside the workspace: user home directory, temporary files, etc.\n\nThese environments still need to be connected to hardware peripherals, which may be a serious obstacle for Jenkins admins\n\nThe classic automation approaches in Jenkins are based on Free-style and Multi-configuration project types.\nLinks to various articles on this topic are collected on the\nHW/Embedded Solution page Embedded on the Jenkins website.\nTests automation on hardware peripherals has been covered in several publications by Robert Martin, Steve Harris, JL Gray, Gordon McGregor, Martin d’Anjou, and Sarah Woodall.\nThere is also a top-level overview of classic approaches made by me at JUC2015/London (a bit outdated now).\n\nOn the other hand, there is no previous publications, which would address Pipeline usage for the Embedded area.\nIn this post I want to address this use-case.\n\nPipeline as Code for test runs on hardware\n\nPipeline as Code is an approach for describing complex automation flows in software lifecycles: build, delivery, deployment, etc.\nIt is being advertised in Continuous Delivery and DevOps methodologies.\n\nIn Jenkins there are two most popular plugins:\nPipeline and Job DSL.\nJobDSL Plugin internally generates common freestyle jobs according to the script, so it’s functionality is similar to the classic approaches.\nPipeline is fundamentally different, because it provides a new engine controlling flows independently from particular nodes and workspaces.\nSo it provides a higher job description level, which was not available in Jenkins before.\n\nBelow you can find an example of Pipeline scripts, which runs tests on FPGA board. The id of this board comes from build parameters ( fpgaId). In this script we also presume that all nodes have pre-installed tools (Xilinx ISE in this case).\n\n// Run on node having my_fpga label\nnode(\"linux && ml509\") {\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  sh \"make all\"\n}\n\nBut such scenario could be also implemented in a Free-style project.\nWhat would we get from Pipeline plugin?\n\nGetting added-value from Pipeline as code\n\nPipeline provides much added-value features for hardware-based tests.\nI would like to highlight the following advantages:\n\nRobustness against restarts of Jenkins controller.\n\nRobustness against network disconnects. sh() steps are based on the\nDurable Task plugin, so Jenkins can safely continue the execution flow once the node reconnects to the controller.\n\nIt’s possible to run tasks on multiple nodes without creating complex flows based on job triggers and copy artifact steps, etc. It can be achieved via combination of parallel() and node() steps.\n\nAbility to store the shared logic in standalone Pipeline libraries\n\netc.\n\nFirst two advantages allow to improve the robustness of Jenkins nodes against infrastructure failures.\nIt is critical for long-running tests on hardware.\n\nLast two advantages address the flexibility of Pipeline flows.\nThere are also plugins for freestyle projects, but they are not flexible enough.\n\nUtilizing Pipeline features\n\nThe sample Pipeline script above is very simple.\nWe would like to get some added value from Jenkins.\n\nGeneral improvements\n\nLet’s enhance the script by using several features being provided by pipeline in order to get visualization of stages, report publishing and build notifications.\n\nWe also want to minimize the time being spent on the node with the attached FPGA board.\nSo we will split the bitfile generation and further runs to two different nodes in this case: a general purpose linux node, and the node with the hardware attached.\n\nYou can find the resulting Pipeline script below:\n\n// Synthesize on any node\ndef imageId=\"\"\nnode(\"linux\") {\n  stage \"Prepare environment\"\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  // Construct the bitfile image ID from commit ID\n  sh 'git rev-parse HEAD > GIT_COMMIT'\n  imageId= \"myprj-${fpgaId}-\" + readFile('GIT_COMMIT').take(6)\n\n  stage \"Synthesize project\"\n  sh \"make FPGA_TYPE=$fpgaId synthesize_for_fpga\"\n  /* We archive the bitfile before running the test, so it won't be lost it if something happens with the FPGA run stage. */\n  archive \"target/image_${fpgaId}.bit\"\n  stash includes: \"target/image_${fpgaId}.bit\", name: 'bitfile'\n}\n\n/* Run on a node with 'my_fpga' label.\nIn this example it means that the Jenkins node contains the attacked FPGA of such type.*/\nnode (\"linux && $fpgaId\") {\n  stage \"Blast bitfile\"\n  git url:\"https://github.com/oleg-nenashev/pipeline_hw_samples\"\n  def artifact='target/image_'+fpgaId+'.bit'\n  echo \"Using ${artifact}\"\n  unstash 'bitfile'\n  sh \"make FPGA_TYPE=$fpgaId impact\"\n\n  /* We run automatic tests.\n  Then we report test results from the generated JUnit report. */\n  stage \"Auto Tests\"\n  sh \"make FPGA_TYPE=$fpgaId tests\"\n  sh \"perl scripts/convertToJunit.pl --from=target/test-results/* --to=target/report_${fpgaId}.xml --classPrefix=\\\"myprj-${fpgaId}.\\\"\"\n  junit \"target/report_${fpgaId}.xml\"\n\n  stage \"Finalization\"\n  sh \"make FPGA_TYPE=$fpgaId flush_fpga\"\n  hipchatSend(\"${imageId} testing has been completed\")\n}\n\nAs you may see, the pipeline script mostly consists of various calls of command-line tools via the sh() command.\nAll EDA tools provide great CLIs, so we do not need special plugins in order to invoke common operations from Jenkins.\n\nMakefile above is a sample stuff for demo purposes.\nIt implements a set of unrelated routines merged into a single file without dependency declarations.\nNever write such makefiles.\n\nIt is possible to continue expanding the pipeline in such way.\nPipeline Examples\ncontain examples for common cases: build parallelization, code sharing between pipelines, error handling, etc.\n\nLessons learned\n\nDuring last 2 years I’ve been using Pipeline for Hardware test automation several times.\nThe first attempts were not very successful, but the ecosystem has been evolving rapidly.\nI feel Pipeline has become a really powerful tool, but there are several missing features.\nI would like to mention the following ones:\n\nShared resource management across different pipelines.\n\nRuns of a single Pipeline job can be synchronized using the concurrency parameter of the stage() step\n\nIt can be done by the incoming Pipeline integration in the\nLockable Resources plugin\n( JENKINS-30269).\n\nAnother case is integration with\nThrottle Concurrent Builds plugin, which is an effective engine for limiting the license utilization in automation infrastructures\n( JENKINS-31801).\n\nBetter support of CLI tools.\n\nEDA tools frequently need a complex environment, which should be deployed on nodes somehow.\n\nIntegration with\nCustom Tools Plugin seems to be the best option, especially in the case of multiple tool versions\n( JENKINS-30680).\n\nPipeline package manager ( JENKINS-34186)\n\nSince there is almost no plugins for EDA tools in Jenkins, developers need to implement similar tasks at multiple jobs.\n\nA common approach is to keep the shared \"functions\" in libraries.\n\nPipeline Global Library and\nPipeline Remote Loader can be used, but they do not provide features like dependency management.\n\nPipeline debugger ( JENKINS-34185)\n\nHardware test runs are very slow, so it is difficult to troubleshoot and fix issues in the Pipeline code if you have to run every build from scratch.\n\nThere are several features in Pipeline, which simplify the development, but we still need an IDE-alike implementation for complex scripts.\n\nConclusions\n\nJenkins is a powerful automation framework, which can be used in many areas.\nEven though Jenkins has no dedicated plugins for test runs on hardware, it provides many general-purpose \"building blocks\", which allow implementing almost any flow.\nThat’s why Jenkins is so popular in the hardware and embedded areas.\n\nPipeline as code can greatly simplify the implementation of complex flows in Jenkins.\nIt continues to evolve and extend support of use-cases.\nif you’re developing embedded projects, consider Pipeline as a durable, extensible and versatile means of implementing your automation.\n\nWhat’s next?\n\nJenkins automation server dominates in the HW/Embedded area, but unfortunately there is not so much experience sharing for these use-cases.\nSo Jenkins community encourages everybody to share the experience in this area by writing docs and articles for Jenkins website and other resources.\n\nThis is just a a first blog post on this topic.\nI am planning to provide more examples of Pipeline usage for Embedded and Hardware tests in the future posts.\nThe next post will be about concurrency and shared resource management in Pipelines.\n\nI am also going to talk about running tests on hardware at the\nupcoming Automotive event in Stuttgart on April 26th.\nThis event is being held by\nCloudBees, but there will be several talks addressing Jenkins open-source as well.\n\nIf you want to share your experience about Jenkins usage in Hardware/Embedded areas, consider submitting a talk for the\nJenkins World conference or join/organize a\nJenkins Area Meetup in your city.\nThere is also a\nJenkins Online Meetup.\n\nLinks\n\nRelated articles and events:\n\nHW/Embedded Solution page\n\nJenkins-Based CI for Heterogeneous Hardware/Software Projects\n\nAccelerating Automotive Innovation with Continuous Integration & Delivery - meetup in Stuttgart\n\nPipeline:\n\nPipeline page\n\nJenkins 2.0 and Pipeline as code overview\n\nPipeline Tutorial\n\nPipeline Examples","title":"Automating test runs on hardware with Pipeline as Code","tags":["jenkins2","pipeline","embedded"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-04-01T00:00:00.000Z","id":"b8091c97-4904-5c1c-adbb-76e6349003ab","slug":"/blog/2016/04/01/march-2016-jam-st-petersburg/","strippedHtml":"On March 10th we have conducted the second Jenkins meetup in Saint Petersburg,\nRussia.  The meetup topic was\"Jenkins and Continuous Delivery\".  We had 3\ntalks addressing various aspects of Jenkins usage in this area.\n\nTalks\n\nIntroduction slides [ru]\n\nJenkins 2.0 and Pipeline-as-Code\n\nSpeaker: Oleg Nenashev, CloudBees\n\nPresentation (en)\n\nPresentation (ru)\n\nContinuous Delivery for Documentation\n\nSpeaker: Stanislav Ovchar, Motorola Solutions\n\nPresentation (ru)\n\nContinuous Delivery with Jenkins at ZeroTurnaround\n\nSpeaker: Sergei Egorov, ZeroTurnaround\n\nPresentation (en)\n\nWe also had a long Jenkins afterparty. Starting from the next meetup we hope to\nmake this part more official.\n\nLinks\n\nSt. Petersburg Meetup page (follow the events here)\n\nEvent page on the Yandex.Events portal\n\nSt. Petersburg Meetup Twitter\n\nJenkins RU Twitter\n\nJenkins RU Gitter Chat\n\nAcknowledgments\n\nThe event has been organized with the help from\nYandex and\nCloudBees.\n\nMore Jenkins meetups\n\nIf you want to organize a Jenkins meetup in St. Petersburg or to be a speaker\nthere, please contact us via the\nMeetup\ndiscussions page\n\nRegarding other areas, check out where\nJenkins Area Meetups (JAMs) are\nlocated in the world.\n\nDon’t see a JAM in your area?  Why not start your own,\nfind out\nhow.","title":"March 2016 St. Petersburg Jenkins Meetup Report","tags":["jam","jenkins_ru","jenkins2"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2016-03-24T00:00:00.000Z","id":"9efc9db9-9325-5046-a1fb-6db8d9a413f3","slug":"/blog/2016/03/24/jenkins-2-beta-released/","strippedHtml":"We released the Jenkins 2.0 beta earlier today. Download it here and try it!\n\nBesides a number of bug fixes and minor improvements, the following changes are new since the last alpha preview release:\n\nRedesigned \"New Item\" page\n\nWe redesigned the \"New Item\" page. Item types now have icons to be more visually distinctive.\n\nAdditionally, item types can now define a category they belong to (such as \"Project\" or \"Folder\"). Once the complexity of the \"New Item\" page reaches a certain threshold, the item types will be grouped into categories to be easier to find. However, for now, it’s unlikely that you will see these categories, as support for this mechanism will need to be added in plugins. This is a new API in core, and we invite plugin developers to support it to make Jenkins easier to use for users with a large number of item types. It doesn’t even require raising the minimum supported Jenkins version.\n\nSeparate configuration page for tools\n\nThe length and complexity of the Configure Jenkins page once a few dozen plugins are installed made it unnecessarily difficult to use. To improve that we’re moving the tools configuration (Git, Maven, Gradle, Ant, etc.) out of that page, into the new Global Tools Configuration.\n\nUpgrade notice and plugin installer\n\nThe Pipeline plugin suite is a big part of Jenkins 2. Over the past few weeks, open-source plugins adding support for visualization (Pipeline Stage View), automatic GitHub project creation (GitHub Branch Source Plugin) and Bitbucket project creation (Bitbucket Branch Source Plugin) have been released. However, when upgrading from Jenkins 1.x, users weren’t even given any information on these features.\n\nTo address this, users upgrading from Jenkins 1.x will now be shown a banner when they first log into Jenkins as administrator, offering them to install the suite of Pipeline plugins.","title":"Jenkins 2.0 beta released","tags":["jenkins2"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2016-03-18T00:00:00.000Z","id":"3e2a9396-1e25-5178-bbab-b2a05550c81a","slug":"/blog/2016/03/18/jenkins-20-test-fest/","strippedHtml":"The beta release of Jenkins 2.0 is rapidly approaching! The development team is working hard to find and squash as many bugs as possible, but do you know what would make that effort even more successful? You! A big part of Jenkins’s power lies in its extensive flexibility, but that flexibility poses challenges to testing. In short, it’s difficult for the core team to test in all the myriad environments and with all the different workflows that Jenkins users have. To give just one example, users of Jenkins on Windows often uncover Windows-specific issues that are missed during development.\n\nThat’s where you come in! The Jenkins team has organized a Test Fest to take place all day on Monday, March 21st, wherever you are. We encourage you to download the lastest alpha release of Jenkins 2.0, start it up, and configure it in the way you would your production Jenkins installation. Try out your usual workflows, install those plugins you just can’t live without, and let us know about any issues you encounter. You can file them in the Jenkins JIRA, with the label '2.0,' or you can discuss them with us in the #jenkins-testfest IRC channel on the Freenode IRC network (connect to irc.freenode.org). We encourage you to hang out with us on IRC regardless; it’ll be an all-day party!\n\nYou can also find the list of the discovered Jenkins 2.0 issues using this link.\n\nThanks in advance for joining us, and for supporting Jenkins!","title":"Jenkins 2.0 community test fest!","tags":["jenkins2"],"authors":[{"avatar":null,"blog":null,"github":"omehegan","html":"<div class=\"paragraph\">\n<p>Owen has been using and administering Jenkins for software companies since 2009 (when it was known as Hudson). He can play the guitar, he knows Morse code, and he has sometimes been known to rebuild two-stroke engines successfully on the first try.</p>\n</div>","id":"omehegan","irc":null,"linkedin":null,"name":"Owen Mehegan","slug":"/blog/author/omehegan","twitter":"literatesavant"}]}},{"node":{"date":"2016-03-11T00:00:00.000Z","id":"d6d93563-02b9-5e71-a6da-874bfa5517c1","slug":"/blog/2016/03/11/new-jenkins-20-preview/","strippedHtml":"We just published the new Jenkins 2.0-alpha-3 preview build.\n\nWhat’s new?\n\nJenkins is now secure out of the box :\nAdministrators previously had to set up authentication and authorization\nwhile Jenkins was accessible to anyone on the same network.  Now, Jenkins is\nprotected out of the box, so that it is always safe from unauthorized\naccess.\n\nPlugin selection for setup :\nWe refined the plugin selection on the setup dialog.\nYou’ve always wondered why Jenkins does not install the Git Plugin by default?\nNow it does, along with a number of other plugins popular in the Jenkins community.\nWe’re also including more plugins complementing the\nPipeline plugin :\nThe\nPipeline\nStage View plugin lets you quickly see what’s going on in your CD pipeline,\nand the GitHub\nOrganization Folder will automatically scan your GitHub organization for\nrepositories with Pipeline definitions (e.g. Jenkinsfile), and set up jobs for those.\n\nRedesigned job configuration forms :\nThe job configuration form has been redesigned so its structure is visually\nclear when showing complex configuration forms.  Additionally, the tabs on\nthe top of the page show where you are, and can be used to quickly navigate\nbetween the different sections of the configuration form.\n\nDownload now!\n\nGet Jenkins 2.0 alpha 3 now, and tell us what you think:\n\nIf you use Twitter, you can leave us some feedback\non\nTwitter.\n\nOur\njenkinsci-users@\nmailing list is also available for feedback in\nthis\nthread..\n\nAnd of course, since this is a preview release, if you find any issues please\nreport them on our\nIssue Tracker\nto the JENKINS project.\n\nWe have a list of\nknown issues on\nour wiki but if you’re not sure whether you’re experiencing a known issue or\nnot, don’t hesitate to ask!","title":"Jenkins 2.0-alpha-3 Preview Build has been released!","tags":["jenkins2"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2016-03-03T00:00:00.000Z","id":"ae34a976-673f-5cdd-8e5b-e2fd373cd7c6","slug":"/blog/2016/03/03/gsoc2016-announcement/","strippedHtml":"We are happy to announce that Jenkins project application has been accepted to\nGoogle Summer of Code 2016 (GSoC). Thanks\nto everybody who helped prepare the application and submitted project ideas!\n\nWe would like to invite students to join the Jenkins community and work together\non the ongoing Jenkins 2.0 activities and other medium-term projects.\n\nThe student projects we are primarily interested in would improve the overall\nJenkins user experience in a number of different aspects. This includes user\ninterface changes and stability improvements but also major new features such\nas Pipeline as code.\n\nThe projects we’ve suggested revolve around all parts of the Jenkins project:\ncore, plugins, website and our internal automation infrastructure. More details\non what has been suggested can be found on the\nwiki\nwhich include:\n\nJenkins web interface improvements\n\n\"Update Center 2.0\"\n\nNew generation of the fingerprinting engine\n\nExternal workspace manager\n\nIntegration of Docker plugins with Jenkins 2.0 features\n\nPlugins for Electronic Design Automation and Embedded tools integration\n\nImprovements of the Support plugin\n\nImprovements to Jenkins project infrastructure: core infra, website, plugin documentation and more\n\nIf you are a student:\n\nCheck out the project ideas here.\n\nSelect an interesting project idea or draft your own proposal.\n\nIf you are not familiar with Jenkins, we highly recommend trying it out with one of your previous projects. You can also try available Jenkins features from the project ideas.\n\nIntroduce yourself the community and start your project proposal discussion (see the guidelines here).\n\nJoin us at GSoC office hours. We plan to have two meetings starting on March 7th.\n\nIf you want to be a mentor:\n\nFeel free to team up with other mentors\n\nWe accept extra project proposals from mentors until March 9th.\n\nLinks\n\nJenkins project page on the GSoC2016 website\n\nGSoC2016 page on our wiki\n\nAnnouncement in Twitter","title":"Jenkins joins the Google Summer of Code 2016","tags":["general","jenkins2","gsoc"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"jenkins2","limit":8,"skip":8,"numPages":3,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}