{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/gsoc2021",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-09-24T00:00:00.000Z","id":"c605a807-b418-5bf1-9cbc-d6034184f502","slug":"/blog/2021/09/24/gsoc-report/","strippedHtml":"Congratulations to all Google Summer of Code (GSoC) 2021 students!\nOn behalf of the Jenkins org team, we would like to thank all participants: students, mentors, applicants, and dozens of other contributors who participated in GSoC this year.\n\nIn 2021, the Jenkins project participated in GSoC as part of the Continuous Delivery Foundation‚Äôs GSoC mentor organisation.\nWithin the CDF GSoC mentor organisation, we had six students working on projects: five projects focused on Jenkins\nand one project focused on Spinnaker.\nIn GSoC, we focus on projects that solve problems important to end users and community members.\nThis year‚Äôs GSoC projects delivered highly anticipated new features for Jenkins and Spinnaker.\n\nGoogle Summer of Code has been a successful and positive experience for students due to the active participation of the Jenkins community and the wider Continuous Delivery Foundation community.\n\nüéâ All of the CDF GSoC students have successfully completed their projects! üéâ\n\nThis is the second year in a row that all Jenkins GSoC students have reached the final evaluation and successfully passed!\nThis has been an extremely challenging year, and the amount of work and dedication that the students and their mentoring teams\nhave put into GSoC has been phenomenal.\nJenkins, Spinnaker, and the CDF are incredibly grateful to everyone who has contributed to GSoC 2021!\n\n‚òÄÔ∏è GSoC Students and their Projects\n\nPlease see the individual project pages for more details on the projects and work undertaken.\nYou can view student presentations during mid-term demos and final demos\nand students have written numerous blog posts about their work.\n\nShruti Chaturvedi - CloudEvents Plugin for Jenkins\n\nShruti is an undergrad student of Computer Science at Kalamazoo College.\nShe is developing a CloudEvents integration for Jenkins, allowing other CloudEvents-compliant CI/CD tools to communicate easily.\nShruti is also the Founding Engineer of a California-based startup, MeetKlara, where she is building serverless solutions and advocating for developing CI/CD pipelines using open-source tools.\n\nAffiliation: Kalamazoo College and Jenkins project\n\nGitHub: ShrutiC-git\n\nLinkedIn: Shruti Chaturvedi\n\nCloudEvents Plugin for Jenkins\n\nProject page\n\nCompleted project blog post: Jenkins Interoperability with CloudEvents\n\nMid-term blog: CloudEvents Plugin for Jenkins: Interoperability between Jenkins and other CI/CD Tools\n\nFinal demo\n\nMid-term demo\n\nHarshit Chopra - Git credentials binding for sh, bat, and powershell\n\nHarshit Chopra is a recent graduate and is currently working on a Jenkins project which brings the authentication support for cli git commands in a pipeline job and freestyle project.\n\nAffiliation: Punjab University & Jenkins Project\n\nGitHub: link: arpoch\n\nLinkedIn: Harshit Chopra\n\nWebsite\n\nGit credentials binding for sh, bat, and powershell\n\nProject page\n\nMid-term blog: Git Credentials Binding for sh, bat, powershell\n\nFinal demo\n\nMid-term demo\n\nAkihiro Kiuchi - Jenkins Remoting Monitoring\n\nAkihiro is a student in the Department of information and communication engineering at the University of Tokyo.\nHe is improving the monitoring experience of Jenkins Remoting during Google Summer of Code 2021.\n\nAffiliation: The University of Tokyo and Jenkins project\n\nGitHub: Aki-7\n\nJenkins Remoting Monitoring with OpenTelemetry\n\nProject page\n\nMid-term blog: Remoting Monitoring with OpenTelemetry\n\nFinal demo\n\nMid-term demo\n\nDaniel Ko - try.spinnaker.io\n\nDaniel is studying computer science at the University of Wisconsin - Madison.\nHe is developing a public Spinnaker sandbox environment for Google Summer of Code 2021.\n\nAffiliation: University of Wisconsin - Madison and Spinnaker project\n\nGitHub: ko28\n\nLinkedIn: Daniel Ko\n\ntry.spinnaker.io:  Explore Spinnaker in a Sandbox Environment!\n\nProject page\n\nCompleted project blog post: Interview with Daniel Ko ‚Äî Google Summer of Code 2021\n\nFinal demo\n\nMid-term demo\n\nPulkit Sharma - Security Validator for Jenkins Kubernetes Operator\n\nPulkit is a student at Indian Institute of Technology,BHU,Varanasi.\nHe is working on a GSoC Project under Jenkins where he aims to add a security validator to the Jenkins Kubernetes Operator.\n\nAffiliation: Indian Institute of Technology, BHU and Jenkins Project.\n\nGitHub: sharmapulkit04\n\nSecurity Validator for Jenkins Kubernetes Operator\n\nProject page\n\nCompleted project blog post: Security Validator for Jenkins Operator for Kubernetes\n\nFinal demo\n\nMid-term demo\n\nAditya Srivastava - Conventional Commits Plugin for Jenkins\n\nAditya is a curiosity driven individual striving to find ingenious solutions to real-world problems.\nHe is an open-source enthusiast and a lifelong learner.\nAditya is also the Co-Founder and Maintainer of an Open Source Organization - Auto-DL, where he‚Äôs leading the development of a Deep Learning Platform as a Service application.\n\nAffiliation: V.E.S.I.T & Jenkins project\n\nGitHub: ADI10HERO\n\nLinkedIn: Aditya S.\n\nConventional Commits Plugin for Jenkins\n\nProject page\n\nCompleted project blog post: Work report for the Conventional Commits Plugin for Jenkins\n\nMid-term blog: Introducing the Conventional Commits Plugin for Jenkins\n\nFinal demo\n\nMid-term demo\n\nUpcoming Events, September 28-30: DevOps World!\n\nThis year CloudBees, one of the Jenkins corporate sponsors, has invited all students to participate in the DevOps World virtual conference on September 28-30.\nGSoC students will present lighting talks about their projects, attended other conference talks, and join the Continuous Delivery Foundation booth which represents CDF projects at the conference.\nWe look forward to GSoC students' lightning talks during DevOps World!\n\nSwag\n\nAll Google Summer of Code students and mentors receive swag from Google.\nIn addition, this year, CloudBees has sponsored swag for the most active GSoC participants:\nall students, mentors, and many other contributors who participated and helped the projects to succeed.\nThis is the forth year when the Jenkins organization sends extra GSoC swag.\nIn the previous years swag logistics was one of the more challenging tasks for org admins during GSoC,\nand we highly appreciate that the Continuous Delivery Foundation will handle sending out the additional swag.\n\nThanks you Google Open Source, Continuous Delivery Foundation (CDF) and CloudBees!","title":"Congratulations to all Jenkins and CDF Google Summer of Code 2021 participants!","tags":["gsoc","gsoc2021","jenkins","community","events","mentor"],"authors":[]}},{"node":{"date":"2021-08-28T00:00:00.000Z","id":"1191945b-e68d-5ab5-8c0e-ef54d9699ba9","slug":"/blog/2021/08/28/conventional-commits-plugin-project-report/","strippedHtml":"This blog post is part 2 of the Introducing the Conventional Commits Plugin blog.\n\nThe goal of this blog is to showcase the work done during the Google Summer of Code 2021 coding phases.\n\nPlease refer the part 1 of the blog for a detailed description of the plugin.\n\nAbstract\n\nThe project/plugin aims to fully automate a release process.\n\nThe plugin tries to achieve this goal by automatically determining the next semantic version based on commit messages.\n\nThere were 2 coding phases in the GSoC 2021.\nI call the first phase - \"Read\" and the 2nd phase - \"Write\", let‚Äôs see why.\n\nPhase 1: Read\n\nIn this phase, the \"read\" aspect of the plugin was enhanced.\nThe plugin supported multiple project types (Maven, Gradle, NPM, Helm, Python, Make) and was able to read current version information from the configuration files of the supported project types.\n\nDeliverables\n\nSupport multiline comments\n\nSupport reading the current version from a maven pom.xml\n\nSupport reading the current version from a build.gradle\n\nSupport reading the current version from a Makefile\n\nSupport reading the current version from a package.json\n\nSupport reading the current version from a helm Chart.yaml\n\nResources\n\nList of related issues\n\nPhase 1 Demo and Presentation:\n\nPhase 2: Write\n\nIn this phase, some work was done in extending the \"write\" aspect of the plugin.\nA provision (optional parameter) to write back the calculated next semantic version to the configuration files of projects was added to the plugin.\nAlong with that, the plugin now can append \"Pre-Release\" and \"Build Metadata\" information to the calculated semantic version.\n\nDeliverables\n\nAdd prerelease information to the calculated/new version\n\nAdd build metadata to the calculated/new version\n\nWrite next version in pom.xml\n\nWrite next version in package.json\n\nHandle version mismatch between config file and latest tag\n\nResources\n\nLink to related Issues\n\nUsing optional parameters in the Conventional Commits Plugin\n\nPhase 2 Presentation\n\nNext Steps\n\nWrite back version for Python project.\n\nWrite back version for Gradle project.\n\nHandle remote workspaces\n\nFeedback\n\nWe would love to hear your feedback & suggestions for the plugin.\n\nPlease reach out on the plugin‚Äôs GitHub repository, the Gitter channel or start a discussion on community.jenkins.io.","title":"Work report for the Conventional Commits Plugin for Jenkins","tags":["gsoc","gsoc2021","conventionalcommits","plugin"],"authors":[]}},{"node":{"date":"2021-08-02T00:00:00.000Z","id":"4b818957-350e-52f3-a687-d86ebc43405d","slug":"/blog/2021/08/02/cloudevents-plugin-phase-I/","strippedHtml":"The What, Why and How of Interoperability\n\nWith workloads and teams becoming more diverse and complex, there is an increasing need to automate various tasks in the CI/CD ecosystem of an application as a way to decrease complexity that can come with CI/CD.\n\nA more diverse team working across different aspects of the application requires a diverse suite of CI/CD tools too, to test and deliver to a wide range of users. More often than not, we need these tools to work together and exchange data to form an effective CI/CD pipeline. However, chaining multiple services together can very easily increase complexity.\n\nHow? Each of these services use a different \"language\" to communicate and represent the entity(an event) which occured inside that service. In order for another service to understand this \"language\", the service might need to develop customized clients and agents which specialize in understanding, traversing and taking-actions based on what was transmitted to it by the first service.\n\nOne can think of it as a translator who specializes in a language called ABC, and each service who wants to communicate with the service who uses ABC will have to employ this translator, or perhaps get another trained translator. And there is no guarantee that this translator will also help communicate with other services speaking a completely different language.\n\nWe can see how easily that can grow in cost and maintenance. A preferred way is to have a common language each of these services use and understand as a way to communicate amongst each other. This way, an event which is emitted using this common language will be available to any of the interested receiver without that receiver needing a special agent. This way of communication which uses a common/standard language also creates a way for agnostic communication where the sender or the receiver are sending and receiving data without creating a tight coupling between the two.\n\nCloudEvents specification is enabling that loosely-coupled, event-driven communication between services by enforcing a common language which defines how an event should be emitted and transferred between systems.\n\nCloudEvents and Jenkins\n\nA specification for describing event data in a common way\n\nConsistency\n\nConsistent across tools and services.\n\nAccessibility\n\nCommon event format means common libraries, tooling, and infrastructure for delivering event data across environments can be used to develop with CloudEvents.\n\nPortability\n\nEasily port event-data across tools, truly leveraging event-driven architecture.\n\nThe CloudEvents plugin for Jenkins is developed as an effort to make interoperability between Jenkins and CI/CD tools much easier. The CloudEvents plugin for Jenkins is a GSoC project, and with the help from an amazing team of mentors, this project is aimed at enhancing event-driven interoperability between cloud-native CI/CD tools, making it easier for developers to include Jenkins in their CI/CD pipelines.\n\nWith this plugin, Jenkins can send and receive CloudEvents-compliant events to and from a wide variety of CI/CD tools using CloudEvents as their event format. This plugin makes chaining Jenkins with multiple tools like Tekton, Keptn, Knative and more, very easy.\n\nGSoC Phase 1 - CloudEvents Plugin\n\nUsing CloudEvents plugin for Jenkins\n\nThis plugin allows Jenkins to be configured as a source and sink, which can emit and consume CloudEvents from a range of tools simultaneously.\n\nJenkins as a Source\n\nConfiguring Jenkins as a Source enables Jenkins to send CloudEvents to a CloudEvents sink. For Phase-I of this project, there is support for HTTP Sinks, however CloudEvents supports various protocol bindings. Moving forward, there will also be support for other protocol bindings supported by CloudEvents.\n\nTo use Jenkins as a Source, the following configuration is needed:\n\nClick on Manage Jenkins in the Root-Actions menu on the left.\n\nInside the Manage Jenkins UI, search for Configure System under System Configuration.\n\nIn the Configure System UI, scroll down to the CloudEvents plugin section, and this is where all the plugin configuration will be present. Here, you will have to enter the following information:\n\nSink Type (For now, HTTP Protocol Binding for CloudEvent and HTTP Sink is supported.)\n\nSink URL (URL of the Sink where you want the cloudevents sent.)\n\nEvents you want sent to the CloudEvents sink URL.\n\nStep 1: Manage Jenkins\n\nStep 2: Configure System\n\nStep 3: Configure CloudEvents Sink\n\nWith Jenkins as a Source configured, Jenkins will send a POST request to the configured sink right as the selected event occurs inside Jenkins. Each event has a different payload specific to the type of the event emitted.\n\nEvent Types, Payload and Metadata\n\nCloudEvents emitted by Jenkins follow the Binary-structure supported by CloudEvents, where the CloudEvents metadata is present inside the header, and the event-data is serialized as JSON, and present under request-body. This is the HTTP Protocol Binding for CloudEvents. Each protocol binding for CloudEvents follows a definition specific to the binding protocol.\n\nFor now, the following Jenkins events are supported in the CloudEvents Plugin-Jenkins as a Source:\n\nQueue Events\n\nQueue Entered Waiting\n\nQueue Left\n\nBuild Events\n\nJob Started\n\nJob Completed\n\nJob Finalized\n\nJob Failed\n\nJob Events\n\nJob Created\n\nJob Updated\n\nNode Events\n\nNode Online\n\nNode Offline\n\nFollowing is a table of the queue-entered waiting cloudevents metadata:\n\nEvent Metadata Headers Key\nEvent Metadata Headers Value\n\nce-specversion\n1.0\n\nce-type\norg.jenkinsci.queue.entered_waiting\n\nce-source\njob/test\n\nce-id\n123-456-789\n\nAll of these fields will be present inside the HTTP-request headers since the CloudEvents format used here is the Binary structure.\n\nHere‚Äôs also an example of event payload for the queue-entered event:\n\n{\n  \"ciUrl\": \"http://3.101.116.80/\",\n  \"displayName\": \"test2\",\n  \"entryTime\": 1626611053609,\n  \"exitTime\": null,\n  \"startedBy\": \"shruti chaturvedi\",\n  \"jenkinsQueueId\": 25,\n  \"status\": \"ENTERED_WAITING\",\n  \"duration\": 0,\n  \"queueCauses\": [\n    {\n    \"reasonForWaiting\": \"In the quiet period. Expires in 0 ms\",\n    \"type\": \"entered_waiting\"\n    }\n  ]\n}\n\nTry the Plugin\n\nThe plugin will soon be releasing as the CloudEvents Plugin under https://plugins.jenkins.io/!!\n\nHere‚Äôs the GitHub Repo of the Plugin: CloudEvents Plugin GitHub Repo\n\nDemo\n\nHere is a video of the CloudEvents plugin with SockEye demoed at CDF GSoC Midterm Demos. SockEye is an open-source tool which is designed as a way to visulaize cloudevents which are sent from a sink. In this demo, we will take a look at how Jenkins installed in a multi-node K8s environment work with the CloudEvents plugin as a Source, sending events over HTTP to the SockEye sink.\n\nNext Steps\n\nJenkins as a Sink to allow Jenkins to trigger various actions as cloudevents are received from other tools.\n\nEnabling filtering on CloudEvents metadata to only act upon a certain kind of events recieved.\n\nSupport for other protocol bindings in CloudEvents.\n\nFeedback\n\nWe would absolutely love to hear your suggestions and feedback. This will help us understand the various use-cases for the plugin, and iterate to support a variety of bindings and formats.\n\nFeel free to log an issue at the CloudEvents Plugin GitHub repository. We are on CDF slack under gsoc-2021-jenkins-cloudevents-plugin. You can also start a discussion on community.jenkins.io. I also love emails! Drop me one on: shrutichaturvedi16.sc@gmail.com","title":"CloudEvents Plugin for Jenkins: Interoperability between Jenkins and other CI/CD Tools","tags":["gsoc","gsoc2021","cloudevents","interoperability","cloud-native"],"authors":[]}},{"node":{"date":"2021-07-31T00:00:00.000Z","id":"eb573050-2c0c-527f-ab2c-3da89d375c1d","slug":"/blog/2021/07/31/remoting-monitoring-phase-1/","strippedHtml":"Goal\n\nThe goal of this project:\n\ncollect telemetry data(metrics, traces, logs) of remoting module with\nOpenTelemetry.\n\nsend the telemetry data to OpenTelemetry Protocol endpoint\n\nWhich OpenTelemetry endpoint to use and how to visualize the data are up to\nusers.\n\nOpenTelemetry\n\nAn observability framework for cloud-native software\n\nOpenTelemetry is a collection of tools, APIs, and SDKs.\nYou can use it to instrument, generate, collect, and export telemetry\ndata(metrics, logs, and traces) for analysis in order to understand your\nsoftware‚Äôs performance and behavior.\n\nPhase 1 summary\n\nUser survey\n\nOur team conducted a user survey to understand the pain point regarding Jenkins\nremoting.\n\nFig 1. What agent type/plugins do you use?\n\nFig 1 shows what types of agent users use, and 17 unique respondents out of\n28 use docker for agent. So I‚Äôm planning to publish a docker image to\ndemonstrate how we can build Docker image with our monitoring feature.\n\nThis survey and investigation of JIRA tickets of past two years also tell me five\ncommon causes of agent unavailability.\n\nConfiguration mistakes\n\nJenkins agent settings, e.g. misuse of \"tunnel connection through\" option.\n\nPlatform settings, e.g. invalid port setting of Kubernetes' helm template.\n\nNetwork settings, e.g. Load balancer misconfiguration.\n\nUncontrolled shutdown of nodes for downscaling.\n\nTimeout during provisioning a new node.\n\nFirewall, antivirus software or other network component kill the connection\n\nLack of hardware resources, e.g. memory, temp space, etc‚Ä¶‚Äã\n\nWe also heard valuable user voice in the survey.\n\nWhat areas would you like to see better in Jenkins monitoring?\n\nI have created a bunch of adhoc monitoring jobs to check on the agent‚Äôs health\nand send e-mail. Would be nice to have this consolidated.\n\nHaving archive of nodes with the access to their logs/events would have been\nnice.\n\nI hope that implementing these feature with OpenTelemetry, which is expected to\nbecome the industry standard for observability, will bring great monitoring\nexperience to Jenkins community.\n\nProof of Concept\n\nHow to deliver the monitoring program to agents\n\n1. Sending monitoring program to the agent over remoting\n\nIn my first implementation, I prepared a Jenkins plugin and send the\nmonitoring program from Jenkins controller. However, this approach have\nfollowing disadvantages.\n\nWe cannot collect telemetry data before the initial connection.\nWe are likely to encounter a problem while provisioning a new node,\nso it‚Äôs important to observe agents' telemetry data from the beginning.\n\nSome agent restarters (e.g. UnixSlaveRestarter)\nrestart agent completely when reconnecting. It means that the agent lost\nmonitoring program every time the connection closed, and we cannot collect\ntelemetry data after the connection is lost before a new connection is\nestablished.\n\nSo we decided to take the next approach.\n\n2. Install monitoring engine when provisioning a new agent\n\nIn this approach, user will download the monitoring program called monitoring\nengine, which is a JAR file, and place it in the agent node when provisioning.\n\nHow to instrument remoting to produce remoting trace\n\nAdd instrumentation extension point to remoting\n\nPull Request: https://github.com/jenkinsci/remoting/pull/471\n\nThis approach makes the agent launch command more complicated,\nand we have to overcome this problem.\n\nCurrent State\n\nMetrics\n\nWe currently support the following metrics and planning to support more.\n\nmetrics\nunit\nlabel\nkey\ndescription\n\nsystem.cpu.load\n1\n\nSystem CPU load. See com.sun.management.OperatingSystemMXBean.getSystemCpuLoad\n\nsystem.cpu.load.average.1m\n\nSystem CPU load average 1 minute See java.lang.management.OperatingSystemMXBean.getSystemLoadAverage\n\nsystem.memory.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize\n\nsystem.memory.utilization\n1\n\nSystem memory utilization,\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize.\nReport 0% if no physical memory is discovered by the JVM.\n\nsystem.paging.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\n\nsystem.paging.utilization\n1\n\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\nReport 0% if no swap memory is discovered by the JVM.\n\nprocess.cpu.load\n%\n\nProcess CPU load. See com.sun.management.OperatingSystemMXBean.getProcessCpuLoad.\n\nprocess.cpu.time\nns\n\nProcess CPU time. See com.sun.management.OperatingSystemMXBean.getProcessCpuTime.\n\nruntime.jvm.memory.area\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\narea\nheap, non_heap\n\nruntime.jvm.memory.pool\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\npool\nPS Eden Space, G1 Old Gen‚Ä¶‚Äã\n\nruntime.jvm.gc.time\nms\ngc\nG1 Young Generation, G1 Old Generation, ‚Ä¶‚Äã\nsee GarbageCollectorMXBean\n\nruntime.jvm.gc.count\n1\ngc\nG1 Young Generation, G1 Old Generation, ‚Ä¶‚Äã\nsee GarbageCollectorMXBean\n\nTraces\n\nWe tried several approaches to instrument remoting module, but good approach is not established yet.\n\nHere is a draft documentation of the spans to collect. Google Doc\n\nLogs\n\nComing soon!\n\nMetric and span demo visualization\n\nOur team created a demo example with Docker compose and visualized the metrics and spans.\n\nClick to open in new tab\n\nGoogle Summer of Code Midterm Demo\n\nOur project demo starts with 8:20\n\nNext Step\n\nLog support\n\nAlpha release!","title":"Remoting Monitoring with OpenTelemetry - Coding Phase 1","tags":["gsoc","gsoc2021","remoting","open-telemetry"],"authors":[]}},{"node":{"date":"2021-07-30T00:00:00.000Z","id":"ec28a413-ce25-5776-ac1c-84b03c9452d9","slug":"/blog/2021/07/30/introducing-conventional-commits-plugin-for-jenkins/","strippedHtml":"The conventional commits plugin is a Google Summer of Code project.\nSpecial thanks to the mentors Gareth Evans, Kristin Whetstone, Olivier Vernin and Allan Burdajewicz.\n\nWhat are Conventional Commits\n\nAccording to the official website, conventonal commits are, \"A specification for adding human and machine readable meaning to commit messages.\"\n\nConventional commits are a lightweight convention on top of commit messages.\n\nThe following table shows major structural elements offered by the conventional commits convention.\n\nStructural Element\nExample\n\nChore\nchore: improve logging\n\nFix\nfix: minor bug fix\n\nFeat\nfeat: add a new feature\n\nBreaking Change\nBREAKING CHANGE: reimplement\n\nWhy Conventional Commits\n\nAs the CI/CD world is moving more towards complete automation and minimal human interaction, the ability to fully automate a release is desired.\nConventional Commits enable the use of automated systems on top of commit messages.\nThese systems can \"truly\" automate a release with almost no human interaction.\n\nThe convention dovetails with semantic versioning.\nLet‚Äôs take an example, a maven project is currently versioned at 1.2.0.\nThe following table shows how conventional commits would bump the version depending on the type of the commit.\n\nCommit Message\nVersion Bump\nSemVer Equivalent\n\nchore: improve logging\n1.2.0 ‚Üí 1.2.0\nNo version bump\n\nfix: minor bug fix\n1.2.0 ‚Üí 1.2.1\nIncrement in the patch version\n\nfeat: add a new feature\n1.2.0 ‚Üí 1.3.0\nIncrement in the minor version\n\nBREAKING CHANGE: reimplement\n1.2.0 ‚Üí 2.0.0\nIncrement in the major version\n\nThe Conventional Commits Plugin\n\nThe conventional commits plugin is a Jenkins plugin to programatically determine the next semantic version of a git repository using:\n\nLast tagged version\n\nCommit message log\n\nCurrent version of the project\n\nHow it works?\n\nThe plugin will read the commit messages from the latest tag or the current version of the project till the latest commit.\nUsing this information it will determine what would be the next semantic Version for that particular project.\n\nSupported Project Types?\n\nCurrently the plugin can read the current version from various configuration files of the following project types:\n\nProject Type\nConfiguration File(s) Read\n\nMaven\npom.xml\n\nGradle\nbuild.gradle\n\nMake\nMakefile\n\nPython\nsetup.py\nsetup.cfg\npyproject.toml\n\nHelm\nCharts.yml\n\nNode (NPM)\npackage.json\n\nHow to request a project type support?\n\nPlease feel free to open an issue on the GitHub repository of the plugin.\n\nHow to use the plugin\n\nRecommended way of using the plugin is to add a step in a Jenkins Pipeline Project.\n\nnextVersion() is the pipeline step to be used.\n\nFor example:\n\npipeline {\n    agent any\n\n    environment {\n        NEXT_VERSION = nextVersion()\n    }\n\n    stages {\n        stage('Hello') {\n            steps {\n                echo \"next version = ${NEXT_VERSION}\"\n            }\n        }\n    }\n}\n\nTip: The pipeline step can also be generated with the help of the Snippet Generator.\nPlease select \"nextVersion\" in the Sample Step drop down and then click on \"Generate Pipeline Snippet\"\n\nThe plugin is released on every feature using JEP-229.\n\nThe plugin is available to download from the plugins site.\n\nDemo\n\nYou can watch the plugin in action in a demo presented at the GSoC Midterm Presentations\n\nNext Steps\n\nSupport for pre-release information. Example: 1.0.0-alpha, 1.0.0-beta, etc\n\nSupport for build metadata. Example: 1.0.0-beta+exp.sha.5114f85\n\nOptionally writing the calcuated \"Next Version\" into the project‚Äôs configuration file. Example: pom.xml for a maven project, setup.py for python.\n\nFeedback\n\nWe would love to hear your feedback & suggestions for the plugin.\n\nPlease reach out on the plugin‚Äôs GitHub repository, the Gitter channel or start a discussion on community.jenkins.io.","title":"Introducing the Conventional Commits Plugin for Jenkins","tags":["gsoc","gsoc2021","conventionalcommits","plugin"],"authors":[]}},{"node":{"date":"2021-07-16T00:00:00.000Z","id":"79c95b8e-55ea-534e-81a0-7d12215795cd","slug":"/blog/2021/07/16/gsoc-midterm-presentation/","strippedHtml":"Congratulations to all GSoC students who have made it through the first half of the GSoC 2021 coding phase!\n\nThis year, the Jenkins project has been participating in GSoC as part of the Continuous Delivery Foundation‚Äôs GSoC org.\nTo celebrate our GSoC students and the fantastic work they have been doing, the CDF is hosting an online meetup where students will present their work.\nStudents will be showcasing what they have learned and accomplished thus far in GSoC, demoing their work, and discussing their goals and plans for the second coding phase.\n\nThe CDF Google Summer of Code Midterm Demos will be held online on July 20th, 13:00 UTC - 15:00 UTC.\n\nSign up here: Meetup Event\n\nSpeakers\n\nAkihiro Kiuchi - Jenkins Remoting Monitoring\n\nAkihiro is a student in the Department of information and communication engineering at the University of Tokyo.\nHe is improving the monitoring experience of Jenkins Remoting during Google Summer of Code 2021.\n\nAffiliation: The University of Tokyo and Jenkins project\n\nGitHub: Aki-7\n\nTitle: Jenkins Remoting Monitoring with OpenTelemetry\n\nIn this talk, he will discuss the problems in maintaining Jenkins agents and how to support Jenkins admins in troubleshooting them.\nAs one of the solutions, he will introduce the new Remoting monitoring with OpenTelemetry plugin that collects Jenkins Remoting monitoring data and troubleshooting data using OpenTelemetry.\nWhat kind of data the plugin will collect and how we will be able to visualize them using available open-source monitoring tools will be demonstrated.\n\nShruti Chaturvedi - CloudEvents Plugin for Jenkins\n\nShruti is an undergrad student of Computer Science at Kalamazoo College.\nShe is developing a CloudEvents integration for Jenkins, allowing other CloudEvents-compliant CI/CD tools to communicate easily.\nShruti is also the Founding Engineer of a California-based startup, MeetKlara, where she is building serverless solutions and advocating for developing CI/CD pipelines using open-source tools.\n\nAffiliation: Kalamazoo College and Jenkins project\n\nGitHub: ShrutiC-git\n\nLinkedIn: Shruti Chaturvedi\n\nTitle: CloudEvents Plugin for Jenkins: Moving Towards Interoperability\n\nIn this talk, we will look at interoperability as an essential element in building workloads across several services.\nWe will also talk about how CloudEvents solves one of the biggest challenges in achieving interoperability between systems: lack of normalization/standardization.\nWithout any standard definition, in order to achieve interoperability, services have to develop adapters specific to a particular system.\nThat, however, is complex because services are always changing the way data/events are emitted.\nCloudEvents solves this problem by defining a standard format for events, which can be emitted/consumed agnostically, thereby achieving indirect interoperability.\nShruti will demonstrate the workings of CloudEvents Plugin for Jenkins; she will walk us through how Jenkins can be configured as a source and a sink, emitting and consuming CloudEvents-compliant events in a platform-independent manner.\n\nDaniel Ko - try.spinnaker.io\n\nDaniel is studying computer science at the University of Wisconsin - Madison.\nHe is developing a public Spinnaker sandbox environment for Google Summer of Code 2021.\n\nAffiliation: University of Wisconsin - Madison and Spinnaker project\n\nGitHub: ko28\n\nTitle: try.spinnaker.io:  Explore Spinnaker in a Sandbox Environment!\n\nThe talk will go through a brief explanation of Spinnaker and the challenges that users face during the installation process.\nHe will discuss the infrastructure of this project and how a public multi tenant spinnaker instance will be managed and installed.\nWe will end with a demo of the site so far and the various features implemented, including Github authentication, K8s manifest deployment, AWS Load Balancer Controller to expose deployments, private ECR registry and the blocking of all public images, and auto resource cleanup.\n\nAditya Srivastava - Conventional Commits Plugin for Jenkins\n\nAditya is a curiosity driven individual striving to find ingenious solutions to real-world problems.\nHe is an open-source enthusiast and a lifelong learner.\nAditya is also the Co-Founder and Maintainer of an Open Source Organization - Auto-DL, where he‚Äôs leading the development of a Deep Learning Platform as a Service application.\n\nAffiliation: V.E.S.I.T & Jenkins project\n\nGitHub: ADI10HERO\n\nLinkedIn: Aditya S.\n\nTitle: Conventional Commits Plugin for Jenkins\n\nIn this talk, we‚Äôll start with what are conventional commits and why they are needed.\nThen we‚Äôll see what the jenkins plugin, \"Conventional Commits\" is and what goal it is trying to achieve.\nA demo of how the plugin can be used/integrated in the current workflow will be shown.\nFinally, we‚Äôll talk about the next steps in plugin development followed by the QnA.\n\nHarshit Chopra - Git credentials binding for sh, bat, and powershell\n\nHarshit Chopra is a recent graduate and is currently working on a Jenkins project which brings the authentication support for cli git commands in a pipeline job and freestyle project.\n\nAffiliation: Punjab University & Jenkins Project\n\nGitHub: link: arpoch\n\nLinkedIn: Harshit Chopra\n\nWebsite\n\nTitle: Git credentials binding for sh, bat, and powershell\n\nIn this talk, he will give an overview of the project and will move on further explaining what problems are being faced, a bit about the workaround that are being used to tackle the problems,\nwhat makes the authentication support so important, why a feature and not a plugin in itself, accomplishments achieved and work done during the coding phase 1, will talk about the implementation of the feature, demonstration of git authentication support over HTTP protocol.\n\nPulkit Sharma - Security Validator for Jenkins Kubernetes Operator\n\nPulkit is a student at Indian Institute of Technology,BHU,Varanasi.\nHe is working on a GSoC Project under Jenkins where he aims to add a security validator to the Jenkins Kubernetes Operator.\n\nAffiliation: Indian Institute of Technology, BHU and Jenkins Project.\n\nGitHub: sharmapulkit04\n\nTitle: Security Validator for Jenkins Kubernetes Operator\n\nIn this talk, we will discuss why we need a security validator for the Jenkins Kubernetes Operator and how we are going to implement it via admission webhooks.\nWe will have a look at how we are going to implement the validation webhook, the validation logic being used and what tools we are using to achieve it.\nPulkit will showcase his progress and will discuss his future plans for phase 2 and beyond as well.","title":"GSoC CDF Meetup: Google Summer of Code Midterm Demos","tags":["gsoc","gsoc2021","events","community"],"authors":[]}},{"node":{"date":"2021-03-17T00:00:00.000Z","id":"cb66640e-a043-514d-8d9e-460298a6e73d","slug":"/blog/2021/03/17/gsoc2021-announcement/","strippedHtml":"On behalf of the Jenkins GSoC org team,\nI am happy to announce that this year, for the first time, the Jenkins projects will be participating in\nGoogle Summer of Code 2021\nas part of the\nContinuous Delivery Foundation (CDF) GSoC organization.\n\nWe‚Äôre very excited to have the Jenkins project participate in GSoC as part the CDF mentoring organisation along with\nfellow CDF projects such as Ortelius, Screwdriver, Spinnaker, and Tekton. We believe that being part of the CDF\nGSoC org will create an environment for students with even more mentoring channels, potential cross-fertilization of ideas,\nand an even greater community of DevOps practitioners to join!\n\nWhat‚Äôs next?\nGSoC is officially announced, and please expect more students to contact projects in our\nGitter channels and mailing lists.\nMany communications will also happen in SIG and sub-project channels.\nAlso, please join the gsoc channel on the /\">CDF Slack.\nWe will be working hard in order to help students to find interesting projects, to explore the area,\nand to prepare their project proposals before the deadline on April 13th.\nThen we will process the applications, select projects and assign mentor teams.\n\nAll information about the Jenkins GSoC is available on its sub-project page.\n\nI am a student. How do I apply?\n\nSee the Information for students page for full application guidelines.\n\nWe encourage interested students to reach out to the Jenkins community early and to start exploring project ideas.\nAll project ideas have chats and mailing lists referenced on their pages.\nWe will be also organizing office hours for students,\nand you can use these meetings to meet org admins and mentors and to ask questions.\nAlso, join our Gitter channel and the\nmailing list\nto receive information about such incoming events in the project.\n\nThe application period starts on March 29th, but you can prepare now!\nUse the time before the application period to discuss and improve your project proposals.\nWe also recommend that you become familiar with Jenkins and start exploring your proposal areas.\nProject ideas include quick-start guidelines and reference newbie-friendly issues\nwhich may help with initial study.\nIf you do not see anything interesting,\nyou can propose your own project idea\nor check out ideas proposed by other CDF organizations\nparticipating in GSoC.\n\nI want to be a mentor. Is it too late?\n\nIt‚Äôs not!\nWe are looking for more project ideas and for Jenkins contributors/users\nwho are passionate about Jenkins and want to mentor students.\nNo hardcore experience required, mentors can study the project internals together with students and technical advisors.\nWe are especially interested in ideas beyond the Java stack, and in ideas focusing new technologies and areas\n(e.g. Kubernetes, IoT, Python, Go, whatever).\n\nYou can either propose a new project idea or join an existing one.\nSee the Call for Mentors post\nand Information for mentors for details.\nIf you want to propose a new project,\nplease do so as soon as possible so that students have time to explore them and to prepare their proposals.\n\nThis year mentorship does NOT require strong expertise in Jenkins development.\nThe objective is to guide students and to get involved into the Jenkins community.\nGSoC org admins will help to find advisers if special expertise is required.\n\nTestimonials from former Jenkins GSoC participants ‚ù§Ô∏è\n\n\"I participated in Google Summer of Code 2020 in cooperation with the Jenkins organization\nand I work on a project called Windows Service Wrapper, which allows running Jenkins as a service on a Windows machine.\nGSoC was the most wonderful and the most valuable experience I gained during my student life.\nThe whole journey was full of experiences and Jenkins mentors always were there for us.\nI experienced a huge development of my skills while I was working on the project.\nI had many meetings, knowledge sharing sessions, and one pair-coding session with my mentors.\nOne of the best things that I learned is the open-source community and open source mentality.\nIt is not only about taking, but also about giving.\nToday I am maintaining an open-source project which is a simple programming language for kids\nwhich allows them to code in their native language, which will help to learn coding to students in rural areas of my country.\nFinally, Jenkins is a wonderful family and they always were there for us in all the ups and downs.\nI am proud to be a part of the Jenkins community.\"\n\nBuddhika Chathuranga, GSoC 2020 student, Support for YAML Configuration in Windows Service Wrapper\n\n\"My GSoC journey in the Jenkins community starts by a draft proposal full of comments from mentors and ends by two plugins with hundreds of installations.\nAlong with the daily coding review, the weekly meeting and the growth of the project,\nI increased my skills on programming and became a much more eligible engineer.\nWhat is more, the support from the whole Jenkins community leads me to a broader career path.\nI learned how to maintain a project, how to communicate with users and other developers on GitHub.\nMost importantly, the Jenkins community teaches me the principles of the open source world\nand welcomes me to the open source world with all their kind help.\"\n\nKezhi Xiong, GSoC 2020 students, GitHub Checks API project\n\n\"I worked as a Google Summer of Code student with the Jenkins project during the summer of 2019.\nThe project provided me with an excellent opportunity to contribute to the world‚Äôs most popular automation server,\nlearn about building performant and reliable applications, and interact with awesome people around the globe.\nJenkins' ever helpful and extremely knowledgeable community made working on my project a real treat.\nI even got a chance to present my project at DevOps World in Lisbon!\nIf you‚Äôre deciding which organization to work for this year, choose the Jenkins project‚Äâ‚Äî‚Äâyou can‚Äôt have a better GSoC experience than this!\"\n\nAbhyudaya Sharma, GSoC 2019 student, Role Strategy Performance Improvements\n\n\"I participated in Google Summer of Code 2018 with Jenkins as a student developer.\nWorking for Jenkins in GSoC 2018 was one of the best experiences I have ever had.\nDuring 3 months of summer, I learned a lot of new things when working on the open-source project with Jenkins.\nAnother best thing about Jenkins is the people, I received a lot of support from my mentors\nand other developers from the Jenkins community when working on my project.\nAfter GSoC, I also had a chance to go to the Jenkins World Conference in San Francisco\nto meet and connect with my mentors and other people in the Jenkins community.\nOverall, GSoC with Jenkins was a great experience and\nI highly recommend Jenkins as a great community to kickstart your open source journey.\"\n\nPham Vu Tuan, GSoC 2018 student, Remoting over Apache Kafka project\n\nImportant dates for GSoC 2021\n\nApr 13 - deadline for student applications\n\nMay 17 - accepted projects announced, teams start community bonding and coding\n\nAug 16 - coding period ends\n\nAug 31 - Results announced\n\nSee the GSoC Timeline for more info.","title":"Jenkins accepted in Google Summer Of Code 2021!","tags":["gsoc","gsoc2021","events","community"],"authors":[]}},{"node":{"date":"2020-12-16T00:00:00.000Z","id":"c4aebfbd-d38b-5f0a-9232-aed83e29625f","slug":"/blog/2020/12/16/call-for-mentors/","strippedHtml":"Google Summer of Code (GSoC)\nis a program where students are paid a stipend by Google to work on a free open source project.\nStudents work on the project for three months (June to August).\nPrior to the coding phase, there is a month of community bonding, to welcome students to the Jenkins community and acquaint them with the projects processes for communication and collaboration.\nMentors are actively involved with students from March when students start to work on and submit their applications.\n(see the timeline)\n\nWe are looking for project ideas and mentors to participate in GSoC 2021.\nGSoC project ideas are coding projects that university or college students can accomplish in about three months.\nThe coding projects can be new features, plugins, test frameworks, infrastructure, etc.\nAnyone can submit a project idea, but of course we like it even better if you offer to mentor your project idea.\n\nWe accept new project ideas at any time,\nHowever, project ideas need to be finalised before February 19th, 2021 at 7pm UTC,\nwhich is the deadline for the Jenkins organization to apply to the GSoC program.\nPlease send us your project ideas before the beginning of February so they can get a proper review by the GSoC committee and by the community.\n\nHow to submit a project idea\n\nCreate a pull-request with your idea in a.adoc file\nin the project ideas.\nIt is not necessary to submit a Google Doc, but it will still work if you want to do that.\nSee the instructions on submitting ideas which include an.adoc template and some examples.\n\nCurrent list of ideas\n\nWe currently have a list of project ideas for students to browse.\nNote that this list is subject to change.\n\nWhat does mentoring involve?\n\nPotential mentors are invited to read the information for mentors.\nNote that being a GSoC mentor does not require expert knowledge of Jenkins.\nMentors do not work alone. We make sure that every project has at least two mentors.\nGSoC org admins will help to find technical advisers, so you can study together with your students.\n\nMentoring takes about 5 to 8 hours of work per week (more at the start, less at the end).\nMentors provide guidance, coaching, and sometimes a bit of cheerleading.\nThey review student proposals, pull-requests and the students presentations\nat the evaluation phase.\nThey fill in the Google provided evaluation report form at the end of coding periods.\n\nWhat do you get in exchange?\n\nIn return of mentoring, a student works on your project full time for three months.\nThink about the projects that you‚Äôve always wanted to do but never had the time‚Ä¶‚Äã\n\nMentoring is also an opportunity to improve your management and people skills, while giving back to the community.\n\nThere will be a Google Mentor Summit which takes place every year.\nIn 2020, the Mentor Summit was virtual, but in previous years the summit has taken place in person.\n\nSee this post\nabout the 2019 in person Mentor Summit.\n\nGSoC is a fantastic program and the Jenkins project is happy to participate in GSoC again in 2021!\n\nFor any question, you can find the GSoC Org Admins,\nmentors and participants on the GSoC SIG Gitter chat.","title":"Google Summer of Code 2021 call for Project Ideas and Mentors","tags":["gsoc","gsoc2021","community","events","developer"],"authors":[]}}]}},"pageContext":{"tag":"gsoc2021","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}