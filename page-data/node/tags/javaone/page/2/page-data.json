{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/javaone/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2011-08-09T00:00:00.000Z","id":"8822c8eb-082e-58d6-a686-bbb12238308e","slug":"/blog/2011/08/09/jenkins-user-conference-call-for-papers/","strippedHtml":"As we announced yesterday, we are organizing a Jenkins User Conference, and we are delighted to announce its Call for Papers is now open. We are looking forward to receiving amazing proposals from infrastructure experts to novice developers in the Jenkins community. Use your creativity. Share and showcase your unique approach to utilizing Jenkins technology.\n\nWe do not encourage overt marketing pitches. We encourage breakout sessions, work shops, good case studies with transferable, tangible lessons and other topics like:\n\nplug-in development\n\nSpecific Jenkins applications that solve testing/building problems in particular areas: mobility, enterprise/web/cloud applications, and UI testing\n\nBeyond Java (i.e Jenkins w/ PHP, Ruby, etc)\n\nJenkins best practices, lessons learned, case studies, tips and tricks\n\nLightning Talks (10 min)\n\n+\n+\n\n+\n*IMPORTANT:* Submit your proposal as soon as possible to mailto:juc-cfp@cloudbees.com[CFP alias]. Call for Papers closes Sept 1, 2011. +\n +\n\n+\nSessions are 50 min long. In your proposal pls include the following info: +\n +\n\nName\n\nJob Title\n\nEmail\n\ntwiter id\n\nCompany/website\n\nPaper Title\n\nAudience Level (General, Beginner, Intermediate, Advance)\n\nPaper Abstract\n\nYour bio\n\n+","title":"Jenkins User Conference: Call for Papers","tags":["general","meetup","javaone","juc"],"authors":[]}},{"node":{"date":"2011-08-08T00:00:00.000Z","id":"ef5616f3-aaa8-57d6-a7d6-9909177629c6","slug":"/blog/2011/08/08/jenkins-user-conference/","strippedHtml":"We’ve done meetups, we’ve done sessions, we’ve done workshops, now it’s about time we went ahead and did user conference don’t you think?\n\nOur pals over at CloudBees (Harpeet specifically) have taken the initiative in starting to organize just that: a Jenkins User Conference on October 2nd.\n\nIf you have your calendar at the ready, you’ll notice that October 2nd is the Sunday before JavaOne kicks off this year in San Francisco.\n\nThe details are still coming together, but a proposed agenda has already been posted by Harpeet.\n\nAs this is a community event, I’ll be sure to keep the updates coming on this site but you may want to add the CloudBees' Blog to your feed reader just in case (or just follow them on Twitter: @CloudBees).","title":"Jenkins User Conference","tags":["general","meetup","javaone","jenkinsci","juc"],"authors":[]}},{"node":{"date":"2010-09-22T00:00:00.000Z","id":"22fabf35-8e3f-52e8-a2c1-38d84013d85a","slug":"/blog/2010/09/22/javaone-day-two-in-pictures/","strippedHtml":"On the off chance you’ve not seen some of the photos posted to the @hudsonci Twitter stream, here’s some of the photos from day two of JavaOne.","title":"JavaOne: Day Two in Pictures","tags":["general","javaone"],"authors":[]}},{"node":{"date":"2010-09-21T00:00:00.000Z","id":"3ab7a800-aa26-59a5-80dd-c1edbe97712e","slug":"/blog/2010/09/21/javaone-day-one-in-pictures/","strippedHtml":"In case you haven’t been following the frequently updated @hudsonci Twitter stream. Here’s a collection of photos I’ve taken thus far.","title":"JavaOne: Day One in Pictures","tags":["general","javaone"],"authors":[]}},{"node":{"date":"2010-09-21T00:00:00.000Z","id":"bf495998-7e2f-5b4e-9c15-78cff3d20455","slug":"/blog/2010/09/21/live-blog-john-smart-demos-advanced-hudson-usage/","strippedHtml":"Editor’s Note: This is a very rough set of notes from John Ferguson Smart’s presentation at JavaOne 2010. Unlike Kohsuke’s presentation, John spent a lot of time in demos which made live-blogging a bit difficult. image:https://farm5.static.flickr.com/4129/5012383102_cf258075a6.jpg\n\nJohn takes the stage at 9:30, this presentation is totally different from yesterday’s presentation from Kohsuke\n\nTaking Hudson a little further, beyond just scheduling a build job.\n\nWho is not using Hudson, less than 10% raise hands.\n\nFocusing on the more technical/nitty-gritty things with Hudson. Looking at:\n\nCI Basics\n\nNotification strategies\n\nQuality metrics\n\nBuild promotions\n\nAutomated deployment\nWho knows what build promotions? Who uses build promotions? Very few in the audience use build promotions.\n\nWho uses Hudson for automated deployment, a handful raise their hands. Plenty of Tomcat and JBOSS users automating deployment. John going to use Tomcat for the automated deployment demo in this presentation.\n\nJohn mentions he’s authoring the \"Continuous Integration with Hudson\" book, which will be available for download as it comes out.\n\nLet’s talk about Continuous Integration! Summing up what CI is in three words: feedback, visibility and delivery. CI is about snappy feedback. You want feedback in minutes.\n\nVisibility should be associated with continuous integration, getting everybody in the product life cycle into the loop with continuous integration (product people, QA, developers, etc).\n\nWhat makes Hudson so great? (according to John)\n\nEasy to use\n\nPlenty of plugins/the ecosystem around Hudson for extending/integrating Hudson\n\nReporting/coverage features\n\nDistributed builds\n\nFirst demo, the Hudson dashboard (starring the Nested View plugin). Starting with a basic dashboard filled with some unstable and stable builds. Cloudy builds thanks to Cobertura coverage grading.\n\nUsing the Nested View plugin to group views to make the dashboard more useflu for a ton of jobs.\n\nCovering build radiators, not enough of the audience uses radiators. John advocates commandeering big monitors for radiators as part of your \"notification strategy\"\n\nCovering the basic version control integration, John highly recommneds using a \"Repository Browser\". \"The point is, you want one\" John starts improvising with making some changes, pops over to Eclipse and refactors some code, commits and kicks off a build. Navigates to the source changes for the newly broken build in \"Sventon\", his repository browser of choice which was connected to the job\n\nJohn shows the job using Maven integration and deploying artifacts to the Maven repository he’s set up on his local machine.\n\nHudson will automatically keep track of jar files/war files, so enable the \"Discard Old Builds\" checkbox to prevent Hudson from eating all kinds of disk space. Useful to only discard the artifacts for the last X builds instead of the test results/code coverage.\n\nDesktop build notifiers are quite useful, email can tend to get clutter/lost in the mess with everything else coming into your inbox.\n\nTest results integration\n\nGoing into the test results dashboard per-build and the test-result and build time trends for a specific job.\n\nWhy is the build time trend useful? If the build suddenly takes a huge amount of time to run, you’ve likely got performance issues that need fixing.\n\nPublishing HTML reports\n\nStarring the HTML Publisher plugin! Using the plugin to publish HTML reports generated from easyb for publishing acceptance test results for more wide-spread consumption.\n\nBouncing from HTML reports to integrating with Sonar for code quality metrics\n\nBuild Promotion\n\nStarring the Promoted Builds plugin! Covering some similar concepts to Kohsuke’s talk yesterday but literally going into the Hudson configuration and setting it up.\n\nTime is running out, John’s flipping back and forth between the M2 release plugin and his automatic deployment to his local Tomcat environment.\n\nQ&A\n\"Can Hudson be used for other environments\". Yes! Supports a number of build plugins, MSBuild, NAnt, CMake, in addition to the freestyle build. \"Maven 3 support\" Sonatype is apparently working on an integrated version of Hudson with Maven 3, Hudson core planning support \"eventually.\"","title":"Live Blog: John Smart demos advanced Hudson usage","tags":["general","javaone"],"authors":[]}},{"node":{"date":"2010-09-21T00:00:00.000Z","id":"9281e053-66ad-5615-89b5-7ae4aaab3f2c","slug":"/blog/2010/09/21/video-kohsuke-talks-hudson-on-otn/","strippedHtml":"For the uninitiated, \"OTN\" is short for the \"Oracle Technology Network\" where speakers and other persons of interest sit in front of cameras and their words are streamed live to the internets.\n\nAfter his session yesterday, Kohsuke hustled over to OTN headquarters, which look suspiciously like a tent in the middle of Mason St., and gave the following interview/chat.","title":"Video: Kohsuke talks Hudson on OTN","tags":["general","javaone"],"authors":[]}},{"node":{"date":"2010-09-20T00:00:00.000Z","id":"8d4556c0-e0f7-593d-abc1-df6cf712f0a1","slug":"/blog/2010/09/20/live-blog-kohsukes-presentation-at-javaone/","strippedHtml":"Editor’s note: This is a very rough set of notes from Kohsuke Kawaguchi’s presentation at JavaOne 2010.\n\nKohsuke takes the stage, asks \"who uses’s Hudson\" the majority of\naudience raises their hands\n\nDiscussing the great ecosystem using Hudson across the wide-variety of platforms/languages.\n330+ community written plugins. Last year at JavaOne we had 230+ plugins\n\nEclipse Community Survey, Hudson adoption from 9.1% in 2009 to 21.8%\n\nDiscussing Hudson adoption, going over Hudson job postings on indeed.com going up compared to a stagnant Cruise Control.\n\nKohsuke introduces himself and InfraDNA, started Hudson in 2004/2005.\n\nFirst steps to CI, 10,000 foot overview of SCM monitoring/build/testing. Delving into using Hudson\nfor automating everything to get \"more out of your Hudson deployment.\n\n\"Interconnecting Jobs aka Workflows\"\n\nHudson allows for hosting many projects on one Hudson deployment, meaning you need a smaller number of administrators for a larger number of jobs compared to Cruise Control.\n\nBuilding Block #1: Triggering. Using \"upstream\" and \"downstream\" jobs ot interconnect jobs to form a workflow in Hudosn. Triggering is asynchronoys in Hudson, useful for separating builds and multiple test jobs. Splitting the build and test jobs so you build quickly test many tests in parallel.\n\nAvoid recompiling compilation/builds in the \"downstream\" test runs. \"Copy Artifact\" plugin very useful for passing built executables to test jobs.\n\nUpstream/downstream separation also highly useful for separating build and deployment into a continuous workflow.\n\nBuilding Block #2: Join plugin. Fan downstream jobs out and then bring everything back together for final\nsteps.\n\nShows Join plugin configuration screen because \"perhaps the configuration is a little unintuitive\".\n\nBuilding block #3: Fingerprints. Using MD5 checksums from artifacts to learn more about those artifacts in your\nHudson, tying together artifacts from different jobs/builds. Letting Hudson recording these fingerprints of those artifacts in your lifecycle allows Hudson to help you find out where/when those executables came from.\n\nFingerprinting mechanism good for tracking dependencies from third parties, Hudson uses 3rd party fingerprints to compute additional information. Also useful for aggregating reports.\n\nGoing a bit further using the \"build promotion plugin\" to weed out which builds are \"better than others.\" Taking fingerprints from a build job all the way through the life cycle and passing that fingerprint around test/smoke test jobs, if that passes, build passes on to more rigorous testing, only if it’s passed base-level testing. Basic model of promotion maps to a \"confidence level\", 1st level passes compilation, 2nd level passes smoke test, 3rd level passes expensive/time-consuming tests.\n\nOne of the reasons to use promotion in your lifecycle to ensure that artifacts meet a minimum \"confidence level\" so you’re not expending resources running the longer tests )think about a promotion hierarchy)\n\nDemo time!\n\nKohsuke demoing build promotion live with fingerprinting of sample jar files. Creating a \"component-X\" build and a \"test-X\" build. test-X job using the \"Copy Artifact\" plugin to grab artifacts from the component-X build.\n\nDefining the promotion criteria in \"component-X\", \"test-X\" promoted, indicates that certain builds promoted a build.\n\nEnd demo time!\n\nMaven Integration\n\nMaven integration highlights. Going over POM comprehension and simplified configuration due to more information\ngetting inferred from the POMs. Building dependency chains with Maven integration.\n\n\"That’s the basics, let’s talk about advanced integration with Maven\"\n\nParallel-module builds! Letting Hudson builds modules with a single checkbox, meaning wherever possible Hudson will try to build your modules in parallel when possible.\n\nIncremental builds! Only building changed modules in a build run to be more efficient, preventing the need to rebuild the whole project from scratch every time. Hudson’s SCM integration to determine what the mapping between files changed and modules needing to be built.\n\nPrivate Maven repositories! Avoiding artifacts being overwritten by others, telling Hudson to create a Maven repository per-project (at the expense of more bandwidth/disk space needed), helps segregate builds to avoid them stomping on each other.\n\nAfter-the-fact deployment, avoiding deploying modules unless the whole build is successful (all modules properly built). Instead of using mvn deploy, you tell Hudson to deploy to your Maven repository with a single checkbox.\n\nMatrix Project\n\nNo longer alpha! Production-ready!\n\nOften used to build/test across slight variations of build environments such as different platforms for a C++ project. Conceptually it’s like running your build in a for loop.\n\nHudson supports a number of different axes, most popular of which being a \"agent axis\" which allows you to use different labels or specific agents for the build. Hudson also supports arbirtrary text fields as axes to be passed along to the build steps as environment variables.\n\nTouching on \"filtering\" in the matrix project support to remove parts of an axis that you do not need. I.e if you have a \"platform\" and a \"browser\" axes for web testing, you can exclude the \"iexplore\" value of the \"browser\" axis when the \"platform\" axis is \"mac\".\n\nDemo time!\n\nDefining two axes, \"agent\" axis and the \"JDK\" axis to build against different JDK versions on linux, solaris and windows. Excluding \"touchstone builds\" to avoid rebuilding a large number of matrix builds unless a limited subset of the combinations successfully build. Used to avoid spending a lot of time spinning cycles on very obvious errors that the first few builds \"recognize\" immediately.\n\nEnd demo time\n\nDoing Selenium testing on Hudson\n\nUse \"Selenium Grid plugin\" to install Selenium binaries on all agents and prepares them all to talk to each other. Useful for \"overloading\" an existing Hudson cluster as a Selenium cluster.\n\nUsing labels in Hudson to better determine which node has which browser.\n\nSelenium integration is very powerful when combined with the join plugin and the matrix configuration support in Hudson for web testing across a large number of platforms and browsers.\n\nThe Hudson project has invested heavily in getting great cluster support which helps tremendously with Selenium which has invested as heavily in clustering.\n\nHow to you deal with Selenium needing a GUI while Hudson agents are largely headless. Use the Xvnc plugin! On Windows things are bit trickier, easier to let Hudson agent/service \"interact with desktop\" such that it can access dialogs/etc. Failing everything else, configuring Windows for auto-login and then have JNLP agents autostart at login will work for allowing the agent to use the GUI and network resources.\n\nThe rest of the session was dedicated to some good Q&A. Great session by Hudson’s founder.","title":"Live Blog: Kohsuke's Presentation at JavaOne","tags":["general","javaone"],"authors":[]}},{"node":{"date":"2010-09-17T00:00:00.000Z","id":"a42335c7-2fe5-5139-8ffb-89eaf75f357c","slug":"/blog/2010/09/17/javaone-taking-shape/","strippedHtml":"Last night on my way out of San Francisco I stopped by 4th and Howard St to get my first taste of JavaOne/Oracle OpenWorld which was already taking shape at the location. Besides snapping the photo below, I also managed to get yelled out by an old woman wearing a red \"security\" jacket; suffice to say my JavaOne experience is already everything I expected! image:https://farm5.static.flickr.com/4107/4997929716_1675745efe.jpg\n\nUnlike last year’s Oracle OpenWorld, which also shut down this segment of Howard St in San Francisco and took over the adjacent Yerba Buena Gardens, this event will be crammed together with JavaOne.\n\nAt this point I’m not sure what I can expect as far as the JavaOne portion of the event goes, we do have two Hudson related events scheduled:\n\nGetting More Out of Your Hudson - Monday at 10:00 a.m. - Hosted by our very own Kohsuke Kawaguchi, the session will be 60 minutes at Parc 55, Embarcadero.\n\nGetting More from Your CI Server: Taking Hudson to the Next Level - Tuesday at 9:30 a.m. - Hosted by the (in)famous John Smart the session will also be 60 minutes at Parc 55, Cyril Magnin 1.\n\nUnfortunately those were the only specifically-Hudson related tracks I could find, as Andrew Bayer has mentioned before, finding a proper schedule is near impossible. While at JavaOne, I intend on posting updates, pictures and maybe a little scathing commentary (they did give me a blogger pass for some silly reason).\n\nIf you’re going to be at JavaOne, think about coming and talking to me about how you/your company uses Hudson. I might just have stickers!","title":"JavaOne taking shape","tags":["general","javaone"],"authors":[]}}]}},"pageContext":{"tag":"javaone","limit":8,"skip":8,"numPages":3,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}