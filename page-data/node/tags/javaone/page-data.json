{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/javaone",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2014-09-24T00:00:00.000Z","id":"9e4c3d68-4229-57d1-a134-abe463150496","slug":"/blog/2014/09/24/jenkins-in-javaone-2014/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/JavaOne.png[image] +\n\n+\n+\n\n+\nThere'll be several talks that touch Jenkins. The first is from me and Jesse called https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=3387[Next Step in Automation: Elastic Build Environment [CON3387]] Monday 12:30pm. +\n +\n\n+\nThen later Tuesday, there's https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=11237[Building a Continuous Delivery Pipeline with Gradle and Jenkins [CON11237]] from Benjamin Muschko of Gradleware. +\n +\n\n+\nThursday has several Jenkins talks. One is https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=1880[The Deploy Factory: Open Source Tools for Java Deployment [CON1880]] from Bruno Souza (aka the Java Man from Brazil) and Edson Yanaga. In this same time slot, guys from eBay are doing https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=5685[Platform Upgrades as a Service [CON5685]], which discusses how they rely on automation to make platform upgrades painless. Then https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=1844[Mastering Continuous Delivery and DevOps [CON1844]] from Michael Huttermann. +\n +\n\n+\nIn https://www.oracle.com/javaone/exhibit.html[the exhibit area], the Jenkins project doesn't have its own booth (JavaOne is too expensive for that), but I'll be at https://www.oracle.com/us/assets/javaone-14-hilton-exhibits-2023244.pdf[the CloudBees booth], so is Jesse Glick. Find us at the booth for any Jenkins questions or impromptu hacking session, which would really help us as we get distracted from the booth duties that way. Or just drop by to get stickers, pin badges, and other handouts to take for your colleagues. +\n +\n\n+\nAnd finally, https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=2939[Script Bowl 2014: The Battle Rages On [CON2939]] gets an honorable mention because https://twitter.com/agentdero[our own Tyler Croy] is representing JRuby against other scripting languages, including my favorite Groovy. Hmm, who should I root for...","title":"Jenkins in JavaOne 2014","tags":["general","meetup","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2013-09-23T00:00:00.000Z","id":"897493a6-04e7-556a-b3c1-fe8522ac41a9","slug":"/blog/2013/09/23/literate-builds-wtf/","strippedHtml":"(This is a guest post by Stephen Connolly)\n\nEvery developer, at some stage, will be handed a project to maintain that somebody else was responsible for. If you are lucky, the developer will not have left the organization yet and you get a brief Knowledge Transfer as the developer packs up their desk before heading on to their new job. If you are unlucky, you don’t even get given the details of where the source code is hiding.\n\nNow begins the detective work, as you try to figure out how to build and release the project, set up Jenkins jobs to build the project and run the tests…​\n\nIt doesn’t have to be this way, you know!\n\nWhat if I told you there was a file sitting at the top level that told you exactly how to build the project and do the important things? You’d be interested, wouldn’t you?\n\nWhen I tell you it’s the README file? “But that’s all lies. Nobody keeps that up to date. Argh!!!”\n\nBut what if Jenkins reads the README file and uses it for the build definition? Now you not only have a CI system ensuring that the build definition is correct, but you have less work to do setting up the job.\n\nWhat if, because the build definition is now in Source Control, you can have Jenkins create jobs for each branch with ease? The joy of cheap branches that modern source control systems such as GIT and Mercurial give us, no longer comes with the pain of having to create Jenkins jobs for each branch (and more pain having to remember to tidy up when the branch is gone.)\n\nThat is the promise delivered by the Literate plugin.\n\nHow does it work?\n\nFirst of all, because Jenkins will be looking at all your branches, you need a way to tell Jenkins which branches it makes sense to try and build. For example, if your project lives on GitHub, you are unlikely to want the gh-pages branch to be treated like a branch of your actual code, and there are going to be branches that have a README file, but not one that Jenkins understands, so we will want to ignore them too.\n\nYou tell Jenkins that a branch is one to build by putting a marker file in the root of the branch. By default the marker file is called.cloudbees.md. If the marker file is present and empty, then the literate job type will assume the build instructions are in README.md. If the marker file is present and has build instructions, then the literate job type will just use those instructions.\n\nIn order to make it easy to provide the instructions, there is rather minimal formatting requirements for a literate description of a project’s build commands.\n\nThe minimal description is just a section with the word build and a verbatim code block in that section. Here is the obligatory minimal “hello world” project description:\n\n# Build\n\n    echo hello world\n\nor if you don’t like indenting you could use the GitHub style triple-back-tick\n\n# Build\n\n```\necho hello world\n```\n\nPart of what makes this a literate style of build description is that you can freely intersperse the description of what and why the commands do with the actual commands, e.g.\n\n# Build\n\nWe will greet the world with our great literate project description\n\n    echo -n \"Hello\"\n\nNow that we have announced our intention to greet some people, we need to qualify exactly who we are greeting\n\n    echo \" world\"\n\nThat was just perfect. Time for a cup of tea\n\nThe first section heading containing the word build identifies the section that is assumed to be the build instructions. (The keyword that is searched for is configurable, but not yet exposed in the literate plugin’s UI). The following is also a valid README.md for printing hello world:\n\nOur super hello world project\n=============================\n\nThis is a project to say hello to the world\n\nHow to build\n------------\n\nYou can build this project by running the following command:\n\n    echo hello world\n\nCredits\n-------\n\nThis project would not have been possible without the existence of Assam loose leaf tea.\n\nNow this is all very well, but what about if you need different instructions for building on Windows versus on Linux, and for that matter how does Jenkins know where we should build this project. Plus Mr Joe Random needs to know what he needs to install on his machine to build it for himself.\n\nThe first section containing the word environment identifies the section that contains the details of the environments to run the build on.\n\nHello world project\n===================\n\nThis is a simple hello world literate project\n\nEnvironment requirements\n------------------------\n\nThe project is built and tested by Jenkins on the following build environments, so it is known that the build instructions work on the following environments:\n\n* `windows`\n* `linux`\n\nHow to build\n------------\n\nThe build instructions are platform dependent:\n\n* On `windows`:\n\n        echo \"hello world\"\n\n* On `linux`:\n\n        echo hello\\ world\n\nWhen Jenkins sees bullet points in the environment section it assumes each bullet point corresponds to an environment to run the build on. Each environment is specified by at least one code snippet which helps define the requirements of the environment. By default Jenkins will look for tool installers with the same name as the labels. If it cannot find any matching tool installers it assumes that the labels are Jenkins agent node labels. (The strategy is plugable, but not yet exposed in the UI of literate builds)\n\nWhen you have multiple environments on which to build and test, you have two choices on your build instructions. You can either:\n\nHave one and only one set of commands that work on all environments; or\n\nHave bullet points that cover all the specified environments.\n\nSo for example, if you are building on the following environments:\n\nwindows, java-1.6, ant-1.7\n\nwindows, java-1.6, ant-1.8\n\nwindows, java-1.7, ant-1.8\n\nlinux, java-1.7, ant-1.7\n\nlinux, java-1.7, ant-1.8\n\nYou need to have bullet points in your build section that can match each of those options, but as long as there is a match for every option you are ok. So for example:\n\nANT version finder\n==================\n\nFinding out the version of ANT on various platforms\n\nEnvironments\n------------\n\nNesting bullet points multiplies out the options\n\n* `windows`\n    * `java-1.6`\n        * `ant-1.6`\n        * `ant-1.7`\n    * `java-1.7`, `ant-1.8`\n* `linux`, `java-1.7`\n    * `ant-1.7`\n    * `ant-1.8`\n\nBuild\n-----\n\nThe first match with the highest number of matches wins, so we want windows to get special treatment:\n\n* `windows`\n\n        call ant.bat -version\n\n* `java-1.7`\n\n        ant -version\n\nWe could have picked `linux` for the above if we wanted, but this matching will have the same effect and better illustrates how matching works.\n\nThat is a mostly complete detail of how the build and environment sections work. In general everything except verbatim code blocks and bullet points with code snippets get ignored.\n\nThere are other sections that the literate project type allows for, these are called “task” sections. We haven’t written the code to support them yet, but the idea is that these will work a bit like basic build promotions with the promoted builds plugin. There will be a UI in Jenkins that lets you kick off any of the task sections that you define as being valid for the job type, in pretty much exactly the same was as the promoted builds plugin works.\n\nAfter that, everything else in the README.md is ignored.\n\nHow do I get the test results into Jenkins?\n\nJenkins is not just about build and test. A lot of the utility in Jenkins comes from the additional reporting plugins that are available for Jenkins. (The build step ones are less relevant with literate style projects because you want to give people consuming the content instructions they can also follow)\n\nSo there is additional metadata about your project that you want to give to Jenkins. We put that metadata into a folder called.jenkins in the root of your source control.\n\nThere are two levels of integration that a Publisher/Notifier can have with the literate project type. The first level is a basic XML description of the plugin configuration. If you have ever looked at the config.xml of a Jenkins job, you will be familiar with this format.\n\nIf we have a Maven project and we want to collect the Unit test results in Jenkins we might have a README.md like this:\n\nMaven project with tests\n========================\n\nEnvironments\n------------\n\n* `java-1.7`, `maven-3.0.5`\n\nBuild\n-----\n\n```\nmvn clean verify\n```\n\nAnd then we create a.jenkins/hudson.tasks.junit.JUnitResultArchiver.xml file with the following:\n\n**/target/surefire-reports/*.xml, **/target/failsafe-reports/*.xml\ntrue\n\nThe literate plugin adds an Action to all Free-style projects that allows exporting these XML configuration snippets in a.zip file for unpacking into your project’s source control. Each publisher/notifier has its own file, so it should be easy to mix and match configuration across different projects and enable/disable specific publishers just by adding/removing each publisher’s file.\n\nThe XML itself can be a bit ugly, so there is a second level integration, where a Publisher/Notifier plugin can implement its own DSL. The literate plugin ships with two such DSLs. One for archiving artifacts and the other for JUnit test results. So the above XML file could be replaced by a.jenkins/junit.lst file with the following contents\n\n**/target/surefire-reports/*.xml\n**/target/failsafe-reports/*.xml\n\nNot everything makes sense in source control though…​\n\nThere are always going to be things that you need to configure in Jenkins. So for example there may be some sources of branches that you don’t trust. A good example would be pull requests on GitHub. We have a concept of branch properties in the literate project type that will allow defining what exactly a trusted branch source should be allowed do and what an untrusted branch source should be allowed do. It does not make sense for that information to be embedded within the untrusted branch itself.\n\nSimilarly coordination between different Jenkins projects is something that does not make sense in source control. The names of those Jenkins projects (and even their existence) is not knowable from source control. It does not make sense to keep that information in source control.\n\nInformation about how to map the description of the build environment in the README.md file to the build environments available to Jenkins does not make sense in source control because your Jenkins node configuration details may change over time.\n\nIn other words, literate projects do not remove the need to configure things in Jenkins. They do however remove a lot of the need, and especially the need to tweak the exact build commands and the location of where build results should be picked up from.\n\nWhat’s not done yet?\n\nHere is a list of some things I want to see for literate builds:\n\nA literate build step so that people can use some of the literate magic in their free-style projects while they migrate them to literate-style\n\nSupport for literate task promotion flows (I think Kohsuke has signed up to help deliver this)\n\nExposing the configuration points such as the marker file name (a global config option as well as per-project override) and the keywords to search for in the README.md (this is mostly UI work)\n\nAdding in some support for other markup languages (I’d really like to see AsciiDoc formatted README parsing, e.g. README.asc)\n\nBranch properties for untrusted builds (to do things like restrict the build execution to one explicit environment, put an elastic build timeout in place, wrap the shell commands in a chroot jail, etc)\n\nBranch properties for build secrets (So that the production and staging branches can get the keys to deploy into their respective environments.\n\nCollapsing the intermediate level in the UI when there is only one build environment.\n\nEliminating the double SCM checkout when the backing SCM supports the SCMFileSystem API so that builds work even faster\n\nReusing the GIT repository cache when using GIT branch sources.\n\nSome nicer integration with GitHub (I have most of this done, but I think it would be irresponsible to release this without having the Untrusted branch properties implemented as otherwise Pull Requests could become a vector for abuse)\n\nFinishing the support for Subversion credentials migration from the legacy credentials storage mechanism to the new Credentials plugin storage mechanism (not strictly literate project related, but Subversion is still a popular SCM and until this gets done we cannot release a version of the Subversion plugin with literate project support)\n\nAdding nice DSLs for all the Publishers and Notifiers\n\nAdding SCM support to all the SCM plugins\n\nAdding branch property support for the Build Wrapper / Build Environment / Job Property plugins where that makes sense.\n\nHaving said all that, the core functionality works right now for GIT/Subversion/Mercurial on Jenkins 1.509+, and it is only by playing with this functionality that you can see how this could change the way you use Jenkins.\n\nHow do I try this out myself\n\nLast week Kohsuke set up a new “Experimental” update center in Jenkins OSS. The reason for this new update center is that we have a lot of (potentially disruptive) changes to many plugins and if we started cutting releases, users may get annoyed if they end up upgrading to these plugins until they have all been better tested.\n\nThe “Experimental” update center includes plugins that have alpha or beta in their version number, while the other update centers now exclude those plugin versions.\n\nSo if you want to play with these plugins you need to change your Jenkins instance’s update center URI to:\n\nhttps://updates.jenkins-ci.org/experimental/update-center.json\n\nI would recommend that you use a test Jenkins instance for playing with.\n\n(WARNING: shameless plug) You could also just fire up a Jenkins in the cloud using CloudBee’s DEV@cloud service and follow these handy instructions to enable access to the experimental plugins:\n\nThe 10 best bug reports on literate builds before the Jenkins User Conference next month will receive a prise from CloudBees, Inc. I was able to get a commitment that the prise would be at least a T-shirt. I am hoping to get some more swag added to the prize pool. CloudBees employees or relatives of CloudBees employees are not eligible for the bug report prise!","title":"Literate builds, WTF?","tags":["development","plugins","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-09-26T00:00:00.000Z","id":"d53919a7-b69d-556e-baca-2ad3e8d7aedb","slug":"/blog/2012/09/26/jenkins-sessions-at-javaone/","strippedHtml":"It’s the JavaOne season again in San Francisco. This year, there are whopping 6 sessions that discuss Jenkins (including myself, which is the very first session in Monday!) Unfortunately some of them happen in the same time, but I for one am looking forward to seeing the mobile app test talk from Intuit.\n\nCON6256 - Large-Scale Automation with Jenkins (Monday 8:30am, Hilton)\n\nJenkins is the most adopted open source continuous integration server today, and beyond the automated build and test, it is a platform for launching all kinds of automation tasks. As the use of Jenkins grows inside an organization, people are automating complex activities that need to be choreographed—such as deploying an application, running a load test, cleaning up the environment, and then handing over the build to the operation team. Such orchestration of activities is a very useful building block for continuous delivery, a practice promoted in recent years. This session looks at various patterns and plug-ins that deal with this kind of choreography. It also briefly discusses what’s new in recent versions of Jenkins.\n\nCON3648 - Take Your Mobile Applications Tests to the Next Level: Continuous Integration (Monday 1pm, Hilton)\n\nMobile tests today can be automated by popular mobile testing frameworks in Java such as monkeyrunner, Sikuli, and Robotium. However, getting mobile tests running in continuous integration is not widely understood and rarely implemented. Whether you are an experienced mobile developer or tester or new to the mobile field, this session informs you about the complexities of emulators and devices and how you can navigate through each challenge to integrate mobile tests into Jenkins. You will be guided step-by-step through two case studies on how to integrate native Android and iPhone application tests by using monkeyrunner and Sikuli, respectively, into Jenkins. Leave with Java code samples of these automated tests as well as practical knowledge of mobile devices and emulators.\n\nCON2822 - Real-World Strategies for Continuous Delivery with Maven and Jenkins (Tuesday 10am, Hilton)\n\nMaven is close to ubiquitous in the world of enterprise Java, and the Maven dependency ecosystem is the de facto industry standard. However, the traditional Maven build and release strategy, based on snapshot versions and carefully planned releases, is difficult to reconcile with modern continuous delivery practices, where any commit that passes a series of quality-control gateways can qualify as a release. How can teams using the standard Maven release process still leverage the benefits of continuous delivery? This presentation discusses strategies that can be used to implement continuous delivery solutions with Maven and demonstrates one such strategy using Maven, Jenkins, and Git.\n\nCON12570 - Pragmatic Continuous Delivery (Tuesday 10am, Hilton)\n\nWhen you send a package via FedEx, it goes through a tracked, automated process that makes sure the package arrives promptly at the destination. Continuous delivery describes how this process can similarly be made fully automated and transparent, with your commits “fedexed” to production. The focus of continuous delivery is the delivery pipeline. Every commit that enters the pipeline should go through automated integration and testing, and if successful, produce a release candidate. This presentation is based on a demo that uses Jenkins to orchestrate the delivery pipeline; Nexus for long-running and manual workflows; and LiveRebel to make production updates quick, automated, nondisruptive, and reversible.\n\nCON3363 - HTML5 Testing in All Browsers with Java (Tuesday 11:30am, Parc 55)\n\nWould you love to test your HTML5 app in all browsers? The biggest challenge in writing HTML5 applications is that your application must run on many platforms, ranging from old desktop browsers to cutting-edge mobile browsers. Each browser behaves nearly the same, but inconsistencies can lead to major bugs. In this session, JavaOne Rockstar and Java Champion Kevin Nilson shows how you can leverage open source Java tools to test your HTML5 application in all browsers. The presentation shows examples of using tools such as TestSwarm, QUnit, jQuery, Jenkins/Hudson, Oracle VM VirtualBox, GlassFish Server technology, and Sun SPOTs to test your HTML5 application in all browsers.\n\nCON12983 - Java PaaS: The Engine for Delivering Enterprise and Mobile Applications (Wednesday 8:30am, Parc 55)\n\nAttend this demo-filled session that shows you how to use Java platform as a service (PaaS) to deploy complete enterprise applications in the cloud with Eclipse, Jenkins, and MySQL in addition to iOS/Android clients and full end-to-end continuous integration. In a few minutes, you’ll have cloud-based Git/SVN repositories set up with CI builds triggered automatically and your apps, databases, and supporting services up and running live. The presentation also shows how you can add more PaaS services—ALM, Web monitoring and analytics, hosted log management, e-mail integration, enterprise search, cloud DB services, and much more—to your apps right off the bat. Experience the future of Java development!\n\n+\n +\nAnd it looks like the jclouds session will also touch jgroups plugin: +\n +\n\nCON8009 - What’s New in jclouds 1.5 (Monday 10am, Parc 55)\n\njclouds 1.5 is the result of 3.5 years of development by nearly 100 developers interested in portable cloud computing. During this session, you’ll get up-to-date with cloud computing technology developments such as OpenStack. You’ll learn how to use jclouds 1.5 to control private and public infrastructures and storage clouds programmatically. You’ll also see examples of new tools powered by jclouds, including Jenkins and Brooklyn.","title":"Jenkins sessions at JavaOne","tags":["general","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-09-24T00:00:00.000Z","id":"a9d59619-964b-56f6-8905-740dfe1e1ee6","slug":"/blog/2012/09/24/jenkins-project-meeting-in-the-meat-space-call-for-agenda/","strippedHtml":"As you may or may not know, the Jenkins project has a bi-weekly IRC meeting where we discuss and decide on things necessary to keep the project running.\n\nNext Sunday, we’ll bring this project meeting live to Jenkins User Conference San Francisco.\n\nSince this is an unique opportunity to engage people who don’t normally come to these meetings, I’d like to encourage everyone to propose agenda items and add it to the agenda page.\n\nThe Wiki page lists all the past meetings, so you can get a sense of what it is like. But this time, we hope to have a good number of users to the meeting, not just project insiders. So if you have things you’d like to get users feedback on, or if you like project insiders to update you on things, please don’t hesitate to add them.\n\nI still need to work on the logistics, but the plan is to do a cross-over with IRC — I’d like to show the IRC client projected in the room, so that people in the room can see the conversation in IRC, and I’d like either real-time transcribing of voice conversations to IRC and/or live broadcasting of the room.","title":"Jenkins project meeting in the meat space / Call for agenda","tags":["general","feedback","meetup","javaone","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-09-11T00:00:00.000Z","id":"999ede4a-b66d-527b-8c17-1d142d635eee","slug":"/blog/2012/09/11/come-join-the-jenkins-user-conference-san-francisco-on-september-30th/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Golden_Gate_Bridge[image:https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/GoldenGateBridge-001.jpg/250px-GoldenGateBridge-001.jpg[image]] +\n\n+\n+\n\n+\nhttps://www.cloudbees.com/jenkins-user-conference-2012-san-francisco.cb[Jenkins User Conference] is back to San Francisco after a world tour. The conference is on the 30th of this month (Sunday), which makes it back to back with JavaOne, just like the last year. This schedule allows the community people from all over the world to attend and talk, so you see speakers from https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#JevgeniKabanov[different part] of https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#BaruchSadogursky[the world]! +\n +\n\n+\nYou can see https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco.cb[the agenda and the speaker list here], there's a number of speakers from the big/serious users of Jenkins in the bay area, such as https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#JustinRyan[NetFlix], and https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#MaxSpring[Cisco], and https://www.cloudbees.com/jenkins-user-conference-2012-san-francisco-abstracts.cb#JamesBlair[HP]. All of these guys not only just use Jenkins but wrote additional plugins/programs to really tailor Jenkins into fitting their needs, and I think those would be really informative for those who are already using Jenkins, as well as those who are thinking about using Jenkins. +\n +\n\n+\nThis time we also have a couple of talks that discuss how to develop plugins. In JUC Israel, I was pleasantly surprised that a talk on this topic attracted a lot of people! If you are interested in writing a plugin, this would be a great chance to get started. +\n +\n\n+\nWe are also trying to bring https://wiki.jenkins.io/display/JENKINS/Governance+Meeting+Agenda[the Jenkins project meeting], which normally happens in IRC, into the real world in this conference. We are hoping that this would allow those who don't normally come to the meeting to voice their thoughts. If you are interested, feel free to add stuff to the agenda list! +\n +\n\n+\nAnd oh, did you check out who's on the sponsors list this year? +\n +\n\n+\nI hope I convinced you that you must come to this conference — if so, https://juc-san-francisco-september-2012-eorg.eventbrite.com/[please register]. I've been told that right now you can use the promotion code `+JUC-2012SF+` to cut the price in half, so please use it while it still works! +","title":"Come join the Jenkins User Conference San Francisco on September 30th!","tags":["general","meetup","javaone","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2012-07-26T00:00:00.000Z","id":"31159e40-acb9-519d-b304-b05b9bac834a","slug":"/blog/2012/07/26/jenkins-user-conference-san-francisco-call-for-papers/","strippedHtml":"+\nlink:/node/tags/juc[Jenkins User Conference] is touring around the world and coming back to San Francisco for this September, colocated with JavaOne. +\n +\n\n+\nAnd here is https://www.cloudbees.com/forms/jenkins-user-conference-call-papers.cb[the call for papers] — we'd love users and plugin developers to share their experience with others. Please tell us how you combine plugins in an interesting way, how some of the features in Jenkins did or did not work for you, tricks you use to effectively manage Jenkins instances, and so on. +\n +\n\n+\nI personally know many bay area tech companies that depend heavily on Jenkins. Really looking forward to hearing from you!","title":"Jenkins User Conference San Francisco: call for papers","tags":["general","javaone","juc"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-10-17T00:00:00.000Z","id":"0c317256-c4cf-51b3-88ef-d835e47b98b5","slug":"/blog/2011/10/17/andrew-bayer-discusses-jenkins-with-tim-obrien/","strippedHtml":"Recently, Jenkins Interim Governance Board member and core contributor, Andrew Bayer sat down with Tim O’Brien to discuss the Jenkins project.\n\nYou can watch the video on YouTube or via the embed below.","title":"Andrew Bayer discusses Jenkins with Tim O'Brien","tags":["general","interview","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2011-10-05T00:00:00.000Z","id":"0322997d-f592-516b-a936-503036d0c397","slug":"/blog/2011/10/05/ci-dinner-wednesday-at-630/","strippedHtml":"Apologies for the late notice, I think most of us have been pre-occupied with that fantastic Jenkins User Conference. While there are plenty of folks in town for JavaOne, I wanted to host a meetup/dinner at Cafe Chaat here in San Francisco.\n\nIf you’re coming from JavaOne directly, use these directions\n\nIf you’re coming from Oracle OpenWorld, use these directions\n\nKohsuke will be in attendance as will some other Jenkins User Conference speakers, so if you still have left-over questions, I’m sure you can get them answered before the last of the Mango Lassi is finished!\n\nLook forward to seeing you there!","title":"CI Dinner Wednesday at 6:30","tags":["general","just for fun","meetup","javaone"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}}]}},"pageContext":{"tag":"javaone","limit":8,"skip":0,"numPages":3,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}