{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/webapis",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2016-04-11T00:00:00.000Z","id":"71b50dae-de34-5505-957d-a9c0f8d10044","slug":"/blog/2016/04/11/run-your-api-tests-continuously-with-jenkins-and-dhc/","strippedHtml":"This is a guest post by Guillaume Laforge.\nWell known for his contribution to the Apache Groovy project,\nGuillaume is also the \"Product Ninja and Advocate\" of Restlet,\na company focusing on Web APIs:\nwith DHC (an API testing client),\nRestlet Studio (an API designer),\nAPISpark (an API platform in the cloud),\nand the Restlet Framework\nopen source project for developing APIs.\n\nModern mobile apps, single-page web sites and applications, are more and more relying on Web APIs,\nas the nexus of the interaction between the frontend and the backend services.\nWeb APIs are also central to third-party integration, when you want to share your services with others,\nor when you need to consume existing APIs to build your own solution on top of their shoulders.\n\nWith APIs being a key element of your architecture and big picture,\nit’s obviously important to assess that this API is functioning the way it should, thanks to proper testing.\nYour framework of choice, regardless of the technology stack or programming language used,\nwill hopefully offer some facilities for testing your code,\nwhether in the form of unit tests, or ideally with integration tests.\n\nCoding Web API tests\n\nFrom a code perspective, as I said, most languages and frameworks provide approaches to testing APIs built with them.\nThere’s one I wanted to highlight in particular, which is one developed with a DSL approach (Domain-Specific Language),\nusing the Apache Groovy programming language, it’s\nAccuREST.\n\nTo get started, you can have a look at the introduction,\nand the usage guide.\nIf you use the contract DSL,\nyou’ll be able to write highly readable examples of requests you want to issue against your API,\nand the assertions that you expect to be true when getting the response from that call.\nHere’s a concrete example from the documentation:\n\nGroovyDsl.make {\n    request {\n        method 'POST'\n        urlPath('/users') {\n            queryParameters {\n                parameter 'limit': 100\n                parameter 'offset': containing(\"1\")\n                parameter 'filter': \"email\"\n            }\n        }\n        headers {\n            header 'Content-Type': 'application/json'\n        }\n        body '''{ \"login\" : \"john\", \"name\": \"John The Contract\" }'''\n    }\n    response {\n        status 200\n        headers {\n            header 'Location': '/users/john'\n        }\n    }\n}\n\nNotice that the response is expected to return a status code 200 OK, and a Location header pointing at /users/john.\nIndeed, a very readable way to express the requests and responses!\n\nTooling to test your APIs\n\nFrom a tooling perspective, there are some interesting tools that can be used to test Web APIs,\nlike Paw (on Macs),\nAdvanced REST client,\nPostman or\nInsomnia.\n\nBut in this article, I’ll offer a quick look at DHC,\na handy visual tool, that you can use both manually to craft your tests and assertions,\nand whose test scenarios you can export and integrate in your build and continuous integration pipeline,\nthanks to Maven and Jenkins.\n\nAt the end of this post, you should be able to see the following reporting in your Jenkins dashboard,\nwhen visualising the resulting API test execution:\n\nIntroducing DHC\n\nDHC is a Chrome extension, that you can\ninstall from the Chrome Web Store,\nin your Chrome browser. There’s also an online service available, with some limitations.\nFor the purpose of this article, we’ll use the Chrome extension.\n\nIn the main area, you can create your request, define the URL to call, specify the various request headers or params,\nchose the method you want to use, and then, you can click the send button to issue the request.\n\nIn the left pane, that’s where you’ll be able to see your request history, create and save your project in the cloud,\nor also set context variables.\n\nThe latter is important when testing your Web API, as you’ll be able to insert variables like for example\n{localhost} for testing locally on your machine or {staging} and {prod} to run your tests in different environments.\n\nIn the bottom pane, you have access to actual raw HTTP exchange, as well as the assertions pane.\n\nAgain, a very important pane to look at! With assertions, you’ll be able to ensure that your Web API works as expected.\nFor instance, you can check the status code of the call, check the payload contains a certain element,\nby using JSON Path or XPath to go through the JSON or XML payload respectively.\n\nBeyond assertions, what’s also interesting is that you can chain requests together.\nA call request can depend on the outcome of a previous request!\nFor example, in a new request, you could pass a query parameter whose value would be the value of some element\nof the JSON payload of a previously executed request.\nAnd by combining assertions, linked requests and context variables together, you can create full-blown test scenarios,\nthat you can then save in the cloud, but also export as a JSON file.\n\nTo export that test scenario, you can click on the little export icon in the bottom left hand corner,\nand you’ll be able to select exactly what you want to export:\n\nRunning your Web API tests with Maven\n\nNow things become even more interesting, as we’ll proceed to using Maven and Jenkins!\nAs the saying goes, there’s a Maven plugin for that! For running those Web API tests in your build!\nEven if your Web API is developed in another technology than Java, you can still create a small Maven build\njust for your Web API tests.\nAnd the icing on the cake, when you configure Jenkins to run this build, as the plugin outputs JUnit-friendly test reports,\nyou’ll be able to see the details of your successful and failed tests, just like you would see JUnit’s!\n\nLet’s sketch your Maven POM:\n\n4.0.0\n\ncom.example\nmy-first-api-test\n1.2.3\n\ncom.restlet.dhc\ndhc-maven-plugin\n1.1\n\ntest\n\ntest\n\ncompanies-scenario.json\n\nrestlet-maven\nRestlet public Maven repository Release Repository\nhttps://maven.restlet.com\n\nVisualizing Web API test executions in Jenkins\n\nOnce you’ve configured your Jenkins server to launch the test goal of this Maven project,\nyou’ll be able to see nice test reports for your Web API scenarios, like in the screenshot in introduction of this article!\n\nNext, you can easily run your Web API tests when developers commit changes to the API,\nor schedule regular builds with Jenkins to monitor an online Web API.\n\nFor more information, be sure to read the tutorial on\ntesting Web APIs with DHC.\nThere are also some more resources like a\nscreencast,\nas well as the\nuser guide, if you want to learn more.\nAnd above all, happy testing!","title":"Run Your API Tests Continuously with Jenkins and DHC","tags":["development","webapis","testing"],"authors":[{"avatar":null,"blog":"https://glaforge.appspot.com/","github":"glaforge","html":"","id":"glaforge","irc":null,"linkedin":null,"name":"Guillaume Laforge","slug":"/blog/authors/glaforge","twitter":"glaforge"}]}}]}},"pageContext":{"tag":"webapis","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}