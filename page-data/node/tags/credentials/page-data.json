{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/credentials",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-03-30T00:00:00.000Z","id":"479ec095-b427-5e47-95a5-1bca6fbc97c5","slug":"/blog/2020/03/30/azure-key-vault-cred-provider/","strippedHtml":"Azure Key Vault is a product for securely managing keys, secrets and certificates.\n\nI’m happy to announce two new features in the Azure Key Vault plugin:\n\na credential provider to tightly link Jenkins and Azure Key Vault.\n\nhuge thanks to Jie Shen for contributing this\n\nintegration with the configuration-as-code plugin.\n\nThese changes were released in v1.8 but make sure to run the latest version of the plugin, there has been some fixes since then.\n\nSome advantages of using the credential provider rather than your own scripts:\n\nyour Jenkins jobs consume the credentials with no knowledge of Azure Key Vault, so they stay vendor-independent.\n\nthe provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Slack Notifications plugin.\n\ncredential usage is recorded in the central Jenkins credentials tracking log.\n\nJenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Azure Key Vault while consuming other credentials from your existing providers.\n\nNote: Currently only secret text credentials are supported via the credential provider, you can use the configuration-as-code integration to load the secret from Azure Key Vault into the System Credential Provider to work around this limitation.\n\nGetting started\n\nInstall the Azure Key Vault plugin\n\nThen you will need to configure the plugin.\n\nAzure authentication\n\nThere’s two types of authentication you can use 'Microsoft Azure Service Principal' or 'Managed Identities for Azure Resources'\n\nThe easiest one to set this up quickly with is the 'Microsoft Azure Service Principal',\n\n$ az ad sp create-for-rbac --name http://service-principal-name\nCreating a role assignment under the scope of \"/subscriptions/ff251390-d7c3-4d2f-8352-f9c6f0cc8f3b\"\n  Retrying role assignment creation: 1/36\n  Retrying role assignment creation: 2/36\n{\n  \"appId\": \"021b5050-9177-4268-a300-7880f2beede3\",\n  \"displayName\": \"service-principal-name\",\n  \"name\": \"http://service-principal-name\",\n  \"password\": \"d9d0d1ba-d16f-4e85-9b48-81ea45a46448\",\n  \"tenant\": \"7e593e3e-9a1e-4c3d-a26a-b5f71de28463\"\n}\n\nIf this doesn’t work then take a look at the Microsoft documentation for creating a service principal.\n\nNote: for production 'Managed Identities for Azure Resources' is more secure as there’s no password involved and you don’t need to worry about the service principal’s password or certificate expiring.\n\nVault setup\n\nYou need to create a vault and give your service principal access to it:\n\nRESOURCE_GROUP_NAME=my-resource-group\naz group create --location uksouth --name $RESOURCE_GROUP_NAME\n\nVAULT=my-vault # you will need a unique name for the vault\naz keyvault create --resource-group $RESOURCE_GROUP_NAME --name $VAULT\naz keyvault set-policy --resource-group $RESOURCE_GROUP_NAME --name $VAULT \\\n  --secret-permissions get list --spn http://service-principal-name\n\nJenkins credential\n\nThe next step is to configure the credential in Jenkins:\n\nclick 'Credentials'\n\nclick 'System' (it’ll appear below the Credentials link in the side bar)\n\nclick 'Global credentials (unrestricted)'\n\nclick 'Add Credentials'\n\nselect 'Microsoft Azure Service Principal'\n\nfill out the form from the credential created above, appId is 'Client ID', password is 'Client Secret'\n\nclick 'Verify Service Principal', you should see 'Successfully verified the Microsoft Azure Service Principal'.\n\nclick 'Save'\n\nJenkins Azure Key Vault plugin configuration\n\nYou now have a credential you can use to interact with Azure resources from Jenkins, now you need to configure the plugin:\n\ngo back to the Jenkins home page\n\nclick 'Manage Jenkins'\n\nclick 'Configure System'\n\nsearch for 'Azure Key Vault Plugin'\n\nenter your vault url and select your credential\n\nclick 'Save'\n\nStore a secret in Azure Key Vault\n\nFor the step after this you will need a secret, so let’s create one now:\n\n$ az keyvault secret set --vault-name $YOUR_VAULT --name secret-key --value my-super-secret\n\nCreate a pipeline\n\nInstall the Pipeline plugin if you don’t already have it.\n\nFrom the Jenkins home page, click 'New item', and then:\n\nenter a name, i.e. 'key-vault-test'\n\nclick on 'Pipeline'\n\nadd the following to the pipeline definition:\n\n// Declarative //\npipeline {\n  agent any\n  environment {\n    SECRET_KEY = credentials('secret-key')\n  }\n  stages {\n    stage('Foo') {\n      steps {\n        echo SECRET_KEY\n        echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n      }\n    }\n  }\n}\n\n// Scripted //\nwithCredentials([string(credentialsId: 'secret-key', variable: 'SECRET_KEY')]) {\n    echo SECRET_KEY\n    echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n}\n\nYou have now successfully retrieved a credential from Azure Key Vault using native Jenkins credentials integration.\n\nconfiguration-as-code integration\n\nThe Configuration as Code plugin has been designed as an opinionated way to configure Jenkins based on human-readable declarative configuration files. Writing such a file should be easy without being a Jenkins expert.\n\nFor many secrets the credential provider is enough,\nbut when integrating with other plugins you will likely need more than string credentials.\n\nYou can use the configuration-as-code plugin (aka JCasC) to allow integrating with other credential types.\n\nconfigure authentication\n\nAs the JCasC plugin runs during initial startup the Azure Key Vault credential provider needs to be configured before JCasC runs during startup.\n\nThe easiest way to do that is via environment variables set before Jenkins starts up:\n\nexport AZURE_KEYVAULT_URL=https://my.vault.azure.net\nexport AZURE_KEYVAULT_SP_CLIENT_ID=...\nexport AZURE_KEYVAULT_SP_CLIENT_SECRET=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\n\nSee the azure-keyvault documentation for other authentication options.\n\nYou will now be able to refer to Azure Key Vault secret IDs in your jenkins.yaml file:\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n        - usernamePassword:\n            description: \"GitHub\"\n            id: \"jenkins-github\"\n            password: \"${jenkins-github-apikey}\"\n            scope: GLOBAL\n            username: \"jenkinsadmin\"\n\nThanks for reading, send feedback on twitter using the tweet button in the top right, any issues or feature requests use GitHub issues.","title":"Introducing the Azure Key Vault Credentials Provider for Jenkins","tags":["jenkins","pipeline","security","azure","credentials","credential-provider","configuration-as-code"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/author/timja","twitter":"Tjaynz"}]}},{"node":{"date":"2019-12-10T00:00:00.000Z","id":"ed404ce2-c53c-5f43-ae06-381e9a803bce","slug":"/blog/2019/12/10/introducing-aws-secrets-manager-credentials-provider-plugin/","strippedHtml":"API keys and secrets are difficult to handle safely, and probably something you avoid thinking about. In this post I’ll show how the new AWS Secrets Manager Credentials Provider plugin allows you to marshal your secrets into one place, and use them securely from Jenkins.\n\nWhen CI/CD pipelines moved to the public cloud, credential management did not evolve with them. If you’re in this situation, you may have seen a number of tactical workarounds to keep Jenkins builds talking to the services they depend on. The workarounds range from bad (hardcoding plaintext secrets into Git) to merely painful (wrangling Hiera EYAML), but their common feature is that they tend to make copies of secrets beyond the reach of automation. This increases their attack surface, makes routine key rotation impractical, and makes remediation difficult after a breach.\n\nThe good news is that there is a better way!\n\nAWS Secrets Manager is a comprehensive solution for secure secret storage. You define a secret just once for your whole AWS account, then you give your consumers permission to use the secrets. Secrets Manager lets you manage a secret entry (name and metadata) separately from its value, and it integrates with other AWS services that you already use:\n\nSecret entry management: Manual (Web console, AWS CLI) or with an infrastructure management tool ( Terraform, CloudFormation etc.)\n\nSecret value management: Manual (Web console, AWS CLI) or automatic (secret rotation Lambda function).\n\nAccess control: AWS IAM policies (for both applications and human operators).\n\nSecret encryption: Amazon KMS automatically encrypts the secret value. Use either the account’s default KMS key, or a customer-managed KMS key.\n\nAuditing: AWS CloudTrail and CloudWatch Events.\n\nA couple of teams in my company started to use Secrets Manager from Jenkins jobs by calling the AWS CLI, but this remained a niche approach as it was quite unwieldy. There was clearly an appetite to integrate key developer apps with a centralised secrets store, but production-ready integrations were needed for wider adoption. So this year I created the AWS Secrets Manager Credentials Provider plugin for Jenkins, with help from friends in the Jenkins community, to do exactly that.\n\nThis is how you set it up…​\n\nInstall the plugin from the Jenkins update center.\n\nGive Jenkins read-only access to Secrets Manager with an IAM policy.\n\n(Optional) Configure the plugin, either through the Global Configuration screen or Jenkins Configuration As Code.\n\nThis is how you use it…​\n\nCreate your build secrets in AWS Secrets Manager. (You can start by uploading secrets via the AWS CLI. More sophisticated methods of secret creation are also available.)\n\nView the credentials in the Jenkins UI, to check that Jenkins can see them.\n\nBind the credentials by ID in your Jenkins job.\n\nThe provider supports the following standard Jenkins credential types:\n\nSecret Text\n\nUsername With Password\n\nSSH User Private Key\n\nPKCS#12 Certificate\n\nAnd it has powerful advantages over quick-fix tactical solutions:\n\nYour Jenkins jobs consume the credentials with no knowledge of Secrets Manager, so they stay vendor-independent.\n\nThe provider caches relevant Secrets Manager API calls, for a quicker and more reliable experience.\n\nThe provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Git and SSH Agent plugins.\n\nThe provider records credential usage in the central Jenkins credentials tracking log.\n\nJenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Secrets Manager while consuming other credentials from your existing providers.\n\nAfter the plugin’s first public release, developers at other companies adopted it too. It has had contributions so far from people at Elsevier, GoDaddy, and Northeastern University, as well as the fantastic Jenkins core team. We even got fan mail for our work!\n\nIn enterprise security, \"The important things are always simple. The simple things are always hard. The easy way is always mined.\" ( @thegrugq) It’s easy to buy a shiny ‘next generation' security appliance and drop it into your network. But it’s hard to embed the security fundamentals (like secrets management, OS patching, secure development) across your organisation. This Jenkins plugin is part of the effort [ 1 ] to take one of the persistent hard problems in security, and make it easier for everyone.\n\n1. If you’re on Azure or you run most of your workload on Kubernetes, check out the Azure Credentials Plugin and the Kubernetes Credentials Provider Plugin.","title":"Introducing the AWS Secrets Manager Credentials Provider for Jenkins","tags":["pipeline","plugins","aws","credentials","security"],"authors":[{"avatar":null,"blog":null,"github":"chriskilding","html":"","id":"chriskilding","irc":null,"linkedin":"chriskilding","name":"Chris Kilding","slug":"/blog/author/chriskilding","twitter":null}]}},{"node":{"date":"2019-06-29T00:00:00.000Z","id":"7b06e02e-ca3c-5b58-8850-3e214fd8268e","slug":"/blog/2019/06/29/phase-1-multibranch-pipeline-support-for-gitlab/","strippedHtml":"This is one of the Jenkins project in GSoC 2019. We are working on adding support\nfor Multi-branch\nPipeline Jobs and Folder Organisation in GitLab. The plan is to create the following\nplugins:\n\nGitLab API Plugin - Wraps GitLab Java APIs.\n\nGitLab Branch Source Plugin - Contains two packages:\n\nio.jenkins.plugins.gitlabserverconfig - Manages server configuration and web hooks management.\nIdeally should reside inside another plugin with name GitLab Plugin. In future, this package should\nbe moved into a new plugin.\n\nio.jenkins.plugins.gitlabbranchsource - Adds GitLab Branch Source for Multi-branch Pipeline Jobs (including\nMerge Requests) and Folder organisation.\n\nPresent State\n\nFreeStyle Job and Pipeline(Single Branch) Job are fully supported.\n\nMulti-branch Pipeline Job is partially supported (no MRs detection).\n\nGitLab Folder Organisation is not supported.\n\nGoals of this project\n\nImplement a lightweight GitLab Plugin that depends on GitLab API Plugin.\n\nFollow convention of 3 separate plugins i.e. GitLab Plugin, GitLab API Plugin, GitLab Branch Source Plugin.\n\nImplement GitLab Branch Source Plugin with support for Multi-branch Pipeline Jobs.\n\nSupport new Jenkins features such as\nJenkins Code as Configuration (JCasC),\nIncremental Tools.\n\nClear & Efficient design.\n\nSupport new SCM Trait APIs.\n\nSupport Java 8 and above.\n\nBuilding the plugin\n\nNo binaries are available for this plugin as the plugin is in the very early alpha stage, and not ready for the general\npublic quite yet.  If you want to jump in early, you can try building it yourself from source.\n\nInstallation:\n\nCheckout source code to your local machine:\n\ngit clone https://github.com/baymac/gitlab-branch-source-plugin.git\n\ncd gitlab-branch-source-plugin\n\nInstall the plugin:\n\nmvn clean install\n\nmvn clean install -DskipTests # to skip tests\n\nRun the plugin:\n\nmvn hpi:run # runs a Jenkins instance at localhost:8080\n\nmvn hpi:run -Djetty.port= # to run on your desired port number\n\nIf you want to test it with your Jenkins server, after mvn clean install follow these steps in your Jenkins instance:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nSelect Advanced tab\n\nIn Upload Plugin section, select Choose file\n\nSelect $ /target/gitlab-branch-source.hpi\n\nSelect Upload\n\nSelect Install without restart\n\nUsage\n\nAssuming plugin installation has done been already.\n\nSetting up GitLab Server Configuration on Jenkins\n\nOn jenkins, select Manage Jenkins\n\nSelect Configure System\n\nScroll down to find the GitLab section\n\nSelect Add GitLab Server | Select GitLab Server\n\nNow you will now see the GitLab Server Configuration options.\n\nThere are 4 fields that needs to be configured:\n\nName - Plugin automatically generates an unique server name for you. User may want to configure this field\nto suit their needs but should make sure it is sufficiently unique. We recommend to keep it as it is.\n\nServer URL - Contains the URL to your GitLab Server. By default it is set to \"https://gitlab.com\". User can\nmodify it to enter their GitLab Server URL e.g. https://gitlab.gnome.org/, http://gitlab.example.com:7990. etc.\n\nCredentials - Contains a list of credentials entries that are of type GitLab Personal Access Token. When\nno credential has been added it shows \"-none-\". User can add a credential by clicking \"Add\" button.\n\nWeb Hook - This field is a checkbox. If you want the plugin to setup a webhook on your GitLab project(s)\nrelated jobs, check this box. The plugin listens to a URL for the concerned GitLab project(s) and when an event\noccurs in the GitLab Server, the server sends an event trigger to the URL where the web hook is setup. If you\nwant continuous integration (or continuous delivery) on your GitLab project then you may want to automatically\nset it up.\n\nAdding a Personal Access Token Credentials (To automatically generate Personal Access Token see\nnext section):\n\nUser is required to add a GitLab Personal Access Token type credentials entry to securely persist the token\ninside Jenkins.\n\nGenerate a Personal Access Token on your GitLab Server:\n\nSelect profile dropdown menu from top-right corner\n\nSelect Settings\n\nSelect Access Token from left column\n\nEnter a name | Set Scope to api, read_user, read_repository\n\nSelect Create Personal Access Token\n\nCopy the token generated\n\nReturn to Jenkins | Select Add in Credentials field | Select Jenkins\n\nSet Kind to GitLab Personal Access Token\n\nEnter Token\n\nEnter a unique id in ID\n\nEnter a human readable description\n\nSelect Add\n\nTesting connection:\n\nSelect your desired token in the Credentials dropdown\n\nSelect Test Connection\n\nIt should return something like Credentials verified for user\n\nSelect Apply (at the bottom)\n\nGitLab Server is now setup on Jenkins\n\nCreating Personal Access Token within Jenkins\n\nAlternatively, users can generate a GitLab Personal Access Token within Jenkins itself and automatically add the\nGitLab Personal Access Token credentials to Jenkins server credentials.\n\nSelect Advanced at the bottom of GitLab Section\n\nSelect Manage Additional GitLab Actions\n\nSelect Convert login and password to token\n\nSet the GitLab Server URL\n\nThere are 2 options to generate token;\n\nFrom credentials - To select an already persisting Username Password Credentials or add an Username Password\ncredential to persist it.\n\nFrom login and password - If this is a one time thing then you can directly enter you credentials to the text boxes\nand the username/password credential is not persisted.\n\nAfter setting your username/password credential, select Create token credentials.\n\nThe token creator will create a Personal Access Token in your GitLab Server for the given user with the\nrequired scope and also create a credentials for the same inside Jenkins server. You can go back to the GitLab Server\nConfiguration to select the new credentials generated (select \"-none-\" first then new credentials will appear). For\nsecurity reasons this token is not revealed as plain text rather returns an id. It is a 128-bit long UUID-4 string\n(36 characters).\n\nConfiguration as Code\n\nNo need for messing around in the UI. Jenkins Configuration as Code (JCasC) or simply Configuration as Code Plugin\nallows you to configure Jenkins via a yaml file. If you are a first time user, you can learn more about JCasC\nhere.\n\nAdd configuration YAML:\n\nThere are multiple ways to load JCasC yaml file to configure Jenkins:\n\nJCasC by default searches for a file with the name jenkins.yaml in $JENKINS_ROOT.\n\nThe JCasC looks for an environment variable CASC_JENKINS_CONFIG which contains the path\nfor the configuration yaml file.\n\nA path to a folder containing a set of config files e.g. /var/jenkins_home/casc_configs.\n\nA full path to a single file e.g. /var/jenkins_home/casc_configs/jenkins.yaml.\n\nA URL pointing to a file served on the web e.g. /jenkins.yaml\" class=\"bare\">https:// /jenkins.yaml .\n\nYou can also set the configuration yaml path in the UI. Go to /configuration-as-code.\nEnter path or URL to jenkins.yaml and select Apply New Configuration.\n\nAn example of configuring GitLab server via jenkins.yaml :\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - gitlabPersonalAccessToken:\n              scope: SYSTEM\n              id: \"i<3GitLab\"\n              token: \"XfsqZvVtAx5YCph5bq3r\" # gitlab personal access token\n\nunclassified:\n  gitLabServers:\n    servers:\n      - credentialsId: \"i<3GitLab\"\n        manageHooks: true\n        name: \"gitlab.com\"\n        serverUrl: \"https://gitlab.com\"\n\nFor better security, see handling secrets\nsection in JCasC\ndocumentation.\n\nFuture Scope of work\n\nThe second phase of GSoC will be utilized to develop GitLab Branch Source. The new feature is a work in progress, but\nthe codebase is unstable and requires lot of bugfixes. Some features like Multibranch Pipeline Jobs are functioning\nproperly. More about it at the end of second phase.\n\nIssue Tracking\n\nThis project uses Jenkins JIRA to track issues. You can file issues under\ngitlab-branch-source-plugin component.\n\nAcknowledgements\n\nThis plugin is built and maintained by the Google Summer of Code (GSoC) Team for\nMulti-branch Pipeline\nSupport for GitLab. A lot of inspiration was drawn from GitLab Plugin, Gitea Plugin and GitHub Plugin.\n\nOur team consists of: baymac, LinuxSuRen,\nMarky, Joseph,\nJustin, Jeff.\n\nWith support from: Oleg, Greg,\nOwen.\n\nAlso thanks to entire Jenkins community for contributing with technical expertise and inspiration.\n\nLinks\n\nPhase 1 demo\n\nPresentation slides\n\nGitLab API Plugin\n\nGitLab Branch Source Plugin\n\nGitLab API Plugin Wiki\n\nIssue Tracker for Phase 1\n\nBlog","title":"Multi-branch Pipeline Jobs Support for GitLab SCM","tags":["gitlab","plugins","pipeline","credentials","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg","srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/eb017/baymac.jpg 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/ed0e7/baymac.jpg 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/b3c75/baymac.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/bcdad/baymac.webp 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/21187/baymac.webp 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/33025/baymac.webp 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/d386c/baymac.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":192}}},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/author/baymac","twitter":"baymac04"}]}}]}},"pageContext":{"tag":"credentials","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}