{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/template",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-08-23T00:00:00.000Z","id":"67f9da03-2668-58bd-93f3-3bf494bb5192","slug":"/blog/2019/08/23/introduce-react-plugin-template/","strippedHtml":"The template’s main repo is at\nReact Plugin Template\n\nThis template is part of the project Working Hours UI Improvement during\nGoogle Summer of Code 2019, which improved the UI of Working Hours Plugin using this pattern to develop Jenkins plugins with React. The Working Hours Plugin repository can be found at Working Hours Plugin.\n\nOverview\n\nDeveloping plugin for Jenkins has always been easy to do with its Jelly based UI render system, but Jelly seems to be pretty heavy when we want to use more modernized frameworks like React, or if we need to make the plugin UI more customized. This is what this template is built for.\n\nAnd with React integrated, development of Jenkins plugin is more modernized, developer can now use tons of React libraries, the way to use libraries is now tinier and safer with webpack, in short, coding with Jenkins plugin can be much easier.\n\nFeatures\n\nFeature\nSummary\n\nReact Integrated\nReact is integrated, you can take full control of the UI\n\nUsing Iframe\nUsing iframe can create a new javascript env, we can get rid of some side effects of some polyfills which was added globally.(such as Prototype.js)\n\nMaven Lifecycle\nnpm commands are integrated into Maven lifecycle with help of Frontend Maven Plugin\n\nWebpack\nWebpack helps us reduce the size of the bundle, also avoids pollution on the global namespace.\n\nJenkins Crumb attached\nCrumb is attached to Axios client, now you can send requests in the way you used to do in React.\n\nExpress as devserver\nYou can run your react app in a standalone page so you can develop in webpack hot reload mode, also with webpack proxy, the standalone app is still accessible to the jenkins dev server.\n\nAxios as http client\nAxios hugely simplify the way to make requests.\n\nScreenshots\n\nExample Plugin UI\n\nManagement Link\n\nGetting Started\n\nClone the repo:\n\ngit clone https://github.com/jenkinsci/react-plugin-template.git\ncd react-plugin-template\n\nInstall the Maven dependencies and node modules.\n\nmvn install -DskipTests\n\nRun standalone React app with hot reload\n\nnpm run start\n\nRun plugin\n\nmvn hpi:run -Dskip.npm -f pom.xml\n\nSend HTTP requests\n\nAs Crumb Issuer is default enabled in Jenkins and each ajax request is required to contain a Jenkins Crumb in request header, so be sure to use the axiosInstance which is already set up with Jenkins Crumb and exported at src/main/react/app/api.js.\n\nexport const apiGetData = () => {\n  return axiosInstance.post(\"/data\");\n};\n\nOr if you want to use your own http client, remember to add the Jenkins Crumb to your request’s header, the Crumb’s key and content could be found at src/main/react/app/utils/urlConfig.js, then you can set the header like below.\n\nconst headers = {};\nconst crumbHeaderName = UrlConfig.getCrumbHeaderName();\n\nif (crumbHeaderName) {\n  headers[crumbHeaderName] = UrlConfig.getCrumbToken();\n}\n\nWrite your own request handler\n\nNow you can customize your request pattern as you want, also we need to write a handler.\n\nJenkins is using stapler to preprocess the requests, so if you need a request handler. For example and also in this template, you can use an Action class to create a sub-url, and then a StaplerProxy to proxy the request like a router. More info about handlers can be found in the Stapler Reference.\n\nExample handler\n\nManagementLink would get the request and then hand it off to the PluginUI\n\n@Extension\npublic class PluginManagementLink extends ManagementLink implements StaplerProxy {\n\n    PluginUI webapp;\n\n    public Object getTarget() {\n        return webapp;\n    }\n\n    public String getUrlName() {\n        return \"react-plugin-template\";\n    }\n}\n\nPluginUI, stapler would then find methods in the target class, in this case, it finds doDynamic, then we can choose the next handler by return the methods result, in this case, getTodos or setTodos, and PluginUI just function like a url router.\n\npublic class PluginUI{\n    public HttpResponse doDynamic(StaplerRequest request) {\n        ...\n\n        List params = getRequestParams(request);\n\n        switch (params.get(0)) {\n        case \"get-todos\":\n            return getTodos();\n        case \"set-todos\":\n            return setTodos(request);\n        }\n        ...\n    }\n}\n\nData Persistence\n\nYou can save your data with a descriptor\n\n@Extension\npublic class PluginConfig extends Descriptor implements Describable\n\nAnd after each time you change data, call save() to persist them.\n\npublic void setTodos(\n            @CheckForNull List value) {\n        this.todos = value;\n        save();\n    }\n\nAnd in your handler, you can get the config class by calling\n\nconfig = ExtensionList.lookup(PluginConfig.class).get(0);\n\nCustomize your plugin\n\nBe sure to modify all the occurrence of react-template\n\nAt org/jenkinsci/plugins/reactplugintemplate/PluginUI/index.jelly, change the iframe’s id and its source url.\n\nAt src/main/react/app/utils/urlConfig.js change\n\nAt src/main/react/server/config.js, change the proxy route.\n\nAt src/main/react/package.json, change the start script’s BASE_URL\n\nAt pom.xml, change the artifactId\n\nAt org/jenkinsci/plugins/reactplugintemplate/PluginManagementLink.java, change names.\n\nAlso use the same value to modify the occurrence in src\\main\\react\\app\\utils\\urlConfig.js.\n\nCustomize a page for your plugin\n\nA management Link is recommended, which would get your plugin a standalone page, along with a entry button in the /manage system manage page.\n\nHow does this template work?\n\nThis template is putting a webpack project inside a Maven project, and this template is just chaining the build result by copy the webpack output to the plugin’s webapp folder to make it accessible from the iframe, then Jelly render the iframe and the client gets the Plugin UI.\n\nWhy iframe?\n\nOver time, Jenkins has added a lot of various javascript libraries to every regular page, which now causes problems for using modern Javascript tooling and as such, we decided to inline the new react based pages in their own sandbox which prevents collisions with other libraries, and maybe the iframe is a good sandbox case.\n\nLinks\n\nGithub: React Plugin Template\n\nGithub: Working Hours Plugin","title":"Introduce React Plugin Template","tags":["react","plugins","template","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ead9a/jackshen.jpg","srcSet":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/77b35/jackshen.jpg 32w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/d4a57/jackshen.jpg 64w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ead9a/jackshen.jpg 128w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/14734/jackshen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/ef6ff/jackshen.webp 32w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/8257c/jackshen.webp 64w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/f4bd7/jackshen.webp 128w,\n/gatsby-jenkins-io/static/62225dd22671b80390a05776aec4c23b/65cd2/jackshen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":129}}},"blog":null,"github":"ShenJack","html":"<div class=\"paragraph\">\n<p>Shen is a student from Beijing Forestry University. One of the students accepted to GSoC 2019.</p>\n</div>","id":"jackshen","irc":null,"linkedin":null,"name":"Jack Shen","slug":"/blog/authors/jackshen","twitter":null}]}}]}},"pageContext":{"tag":"template","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}