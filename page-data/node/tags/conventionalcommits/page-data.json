{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/conventionalcommits",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-08-28T00:00:00.000Z","id":"1191945b-e68d-5ab5-8c0e-ef54d9699ba9","slug":"/blog/2021/08/28/conventional-commits-plugin-project-report/","strippedHtml":"This blog post is part 2 of the Introducing the Conventional Commits Plugin blog.\n\nThe goal of this blog is to showcase the work done during the Google Summer of Code 2021 coding phases.\n\nPlease refer the part 1 of the blog for a detailed description of the plugin.\n\nAbstract\n\nThe project/plugin aims to fully automate a release process.\n\nThe plugin tries to achieve this goal by automatically determining the next semantic version based on commit messages.\n\nThere were 2 coding phases in the GSoC 2021.\nI call the first phase - \"Read\" and the 2nd phase - \"Write\", let’s see why.\n\nPhase 1: Read\n\nIn this phase, the \"read\" aspect of the plugin was enhanced.\nThe plugin supported multiple project types (Maven, Gradle, NPM, Helm, Python, Make) and was able to read current version information from the configuration files of the supported project types.\n\nDeliverables\n\nSupport multiline comments\n\nSupport reading the current version from a maven pom.xml\n\nSupport reading the current version from a build.gradle\n\nSupport reading the current version from a Makefile\n\nSupport reading the current version from a package.json\n\nSupport reading the current version from a helm Chart.yaml\n\nResources\n\nList of related issues\n\nPhase 1 Demo and Presentation:\n\nPhase 2: Write\n\nIn this phase, some work was done in extending the \"write\" aspect of the plugin.\nA provision (optional parameter) to write back the calculated next semantic version to the configuration files of projects was added to the plugin.\nAlong with that, the plugin now can append \"Pre-Release\" and \"Build Metadata\" information to the calculated semantic version.\n\nDeliverables\n\nAdd prerelease information to the calculated/new version\n\nAdd build metadata to the calculated/new version\n\nWrite next version in pom.xml\n\nWrite next version in package.json\n\nHandle version mismatch between config file and latest tag\n\nResources\n\nLink to related Issues\n\nUsing optional parameters in the Conventional Commits Plugin\n\nPhase 2 Presentation\n\nNext Steps\n\nWrite back version for Python project.\n\nWrite back version for Gradle project.\n\nHandle remote workspaces\n\nFeedback\n\nWe would love to hear your feedback & suggestions for the plugin.\n\nPlease reach out on the plugin’s GitHub repository, the Gitter channel or start a discussion on community.jenkins.io.","title":"Work report for the Conventional Commits Plugin for Jenkins","tags":["gsoc","gsoc2021","conventionalcommits","plugin"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#688898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png","srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/ff5a3/adi10hero.png 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b18f9/adi10hero.png 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b9e30/adi10hero.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8ba60/adi10hero.webp 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/a9ea7/adi10hero.webp 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8c23b/adi10hero.webp 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/fc98a/adi10hero.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":131}}},"blog":null,"github":"adi10hero","html":"<div class=\"paragraph\">\n<p>Aditya is a curiosity driven individual striving to find ingenious solutions to real-world problems. He is an open-source enthusiast and a life long learner.</p>\n</div>","id":"adi10hero","irc":null,"linkedin":null,"name":"Aditya Srivastava","slug":"/blog/author/adi10hero","twitter":"adi10hero"}]}},{"node":{"date":"2021-07-30T00:00:00.000Z","id":"ec28a413-ce25-5776-ac1c-84b03c9452d9","slug":"/blog/2021/07/30/introducing-conventional-commits-plugin-for-jenkins/","strippedHtml":"The conventional commits plugin is a Google Summer of Code project.\nSpecial thanks to the mentors Gareth Evans, Kristin Whetstone, Olivier Vernin and Allan Burdajewicz.\n\nWhat are Conventional Commits\n\nAccording to the official website, conventonal commits are, \"A specification for adding human and machine readable meaning to commit messages.\"\n\nConventional commits are a lightweight convention on top of commit messages.\n\nThe following table shows major structural elements offered by the conventional commits convention.\n\nStructural Element\nExample\n\nChore\nchore: improve logging\n\nFix\nfix: minor bug fix\n\nFeat\nfeat: add a new feature\n\nBreaking Change\nBREAKING CHANGE: reimplement\n\nWhy Conventional Commits\n\nAs the CI/CD world is moving more towards complete automation and minimal human interaction, the ability to fully automate a release is desired.\nConventional Commits enable the use of automated systems on top of commit messages.\nThese systems can \"truly\" automate a release with almost no human interaction.\n\nThe convention dovetails with semantic versioning.\nLet’s take an example, a maven project is currently versioned at 1.2.0.\nThe following table shows how conventional commits would bump the version depending on the type of the commit.\n\nCommit Message\nVersion Bump\nSemVer Equivalent\n\nchore: improve logging\n1.2.0 → 1.2.0\nNo version bump\n\nfix: minor bug fix\n1.2.0 → 1.2.1\nIncrement in the patch version\n\nfeat: add a new feature\n1.2.0 → 1.3.0\nIncrement in the minor version\n\nBREAKING CHANGE: reimplement\n1.2.0 → 2.0.0\nIncrement in the major version\n\nThe Conventional Commits Plugin\n\nThe conventional commits plugin is a Jenkins plugin to programatically determine the next semantic version of a git repository using:\n\nLast tagged version\n\nCommit message log\n\nCurrent version of the project\n\nHow it works?\n\nThe plugin will read the commit messages from the latest tag or the current version of the project till the latest commit.\nUsing this information it will determine what would be the next semantic Version for that particular project.\n\nSupported Project Types?\n\nCurrently the plugin can read the current version from various configuration files of the following project types:\n\nProject Type\nConfiguration File(s) Read\n\nMaven\npom.xml\n\nGradle\nbuild.gradle\n\nMake\nMakefile\n\nPython\nsetup.py\nsetup.cfg\npyproject.toml\n\nHelm\nCharts.yml\n\nNode (NPM)\npackage.json\n\nHow to request a project type support?\n\nPlease feel free to open an issue on the GitHub repository of the plugin.\n\nHow to use the plugin\n\nRecommended way of using the plugin is to add a step in a Jenkins Pipeline Project.\n\nnextVersion() is the pipeline step to be used.\n\nFor example:\n\npipeline {\n    agent any\n\n    environment {\n        NEXT_VERSION = nextVersion()\n    }\n\n    stages {\n        stage('Hello') {\n            steps {\n                echo \"next version = ${NEXT_VERSION}\"\n            }\n        }\n    }\n}\n\nTip: The pipeline step can also be generated with the help of the Snippet Generator.\nPlease select \"nextVersion\" in the Sample Step drop down and then click on \"Generate Pipeline Snippet\"\n\nThe plugin is released on every feature using JEP-229.\n\nThe plugin is available to download from the plugins site.\n\nDemo\n\nYou can watch the plugin in action in a demo presented at the GSoC Midterm Presentations\n\nNext Steps\n\nSupport for pre-release information. Example: 1.0.0-alpha, 1.0.0-beta, etc\n\nSupport for build metadata. Example: 1.0.0-beta+exp.sha.5114f85\n\nOptionally writing the calcuated \"Next Version\" into the project’s configuration file. Example: pom.xml for a maven project, setup.py for python.\n\nFeedback\n\nWe would love to hear your feedback & suggestions for the plugin.\n\nPlease reach out on the plugin’s GitHub repository, the Gitter channel or start a discussion on community.jenkins.io.","title":"Introducing the Conventional Commits Plugin for Jenkins","tags":["gsoc","gsoc2021","conventionalcommits","plugin"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#688898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png","srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/ff5a3/adi10hero.png 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b18f9/adi10hero.png 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/aaccd/adi10hero.png 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/b9e30/adi10hero.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8ba60/adi10hero.webp 32w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/a9ea7/adi10hero.webp 64w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/8c23b/adi10hero.webp 128w,\n/gatsby-jenkins-io/static/fc2f266abaf2a1ff0059fbe0c236d007/fc98a/adi10hero.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":131}}},"blog":null,"github":"adi10hero","html":"<div class=\"paragraph\">\n<p>Aditya is a curiosity driven individual striving to find ingenious solutions to real-world problems. He is an open-source enthusiast and a life long learner.</p>\n</div>","id":"adi10hero","irc":null,"linkedin":null,"name":"Aditya Srivastava","slug":"/blog/author/adi10hero","twitter":"adi10hero"}]}}]}},"pageContext":{"tag":"conventionalcommits","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}