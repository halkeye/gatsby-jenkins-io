{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/windows",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-09-12T00:00:00.000Z","id":"a3ff4762-962b-5dfe-9279-693999cbe8b8","slug":"/blog/2020/09/12/new-jenkins-release-observations/","strippedHtml":"This article describes our observations during Windows testing of the Jenkins 2.249.1 release candidate.\n\nUpgrade testing\n\nJenkins 2.249.1 is a new long term support release with user interface improvements and changes in Windows support.\nIt is the first long term support release to drop support for Microsoft.NET framework 2.0.\nThe end of support for Microsoft.NET framework 2.0 was announced in the Windows Support Updates blog post.\nThe Windows support upgrade guidelines describe major things to consider when upgrading Jenkins controllers and agents on Windows.\n\nAs part of our preparation for the release, we tested several configurations.\nThis article describes our experiences with those configurations.\n\nUpgrade approaches\n\nWe tested controller and agent upgrades from Jenkins 2.235.x to 2.249.1-rc on Windows.\nThe tests included:\n\n32 bit Windows MSI\n\n64 bit Windows MSI\n\nWAR (file) on Windows\n\nUpgrade process\n\nOur upgrade process included:\n\nInstall a previous version of Jenkins controller on Windows\n\nInstall a previous version of Jenkins agent on Windows and configure it as a service\n\nUpgrade Jenkins controller from \"Manage Jenkins\"\n\nRestart the Jenkins Windows service for the controller\n\nUpgrade the Jenkins agent on Windows with the latest agent.jar\n\nRestart the Jenkins Windows service for the agent\n\nTesting results\n\nWe successfully tested\n\nRestarting Windows service for controller ( JENKINS-63198)\n\nRestarting Windows service for agents ( JENKINS-63223)\n\nWe confirmed that we can continue our Level 1 support policy for Jenkins 2.249.1.\n\n32 bit Windows MSI\n\nPrior to Jenkins 2.235.3, the Jenkins LTS Windows installer was provided as a 32 bit MSI and included a bundled Java 8 runtime environment.\nThe Jenkins agent can be downloaded and run through Java web start using the bundled Java 8 runtime environment.\nThe agent can also be configured to run as a service using the bundled Java 8 runtime environment.\n\nJenkins controller\n\nJenkins 2.235.1 installs JRE 8u144 for 32 bit Windows.\nThe installer configures the Jenkins controller to run as the SYSTEM user.\n\nRefer to the Windows Installer Updates blog post for details of the controller installation process with the 32 bit MSI.\n\nJenkins agent\n\nJenkins agents on Windows are often configured to \"Launch agent by connecting it to the master\".\nThe Jenkins agent configuration correctly warns that the controller must open the TCP port for inbound agents in the \"Configure Global Security\" page.\nIt is easiest to allow Jenkins to choose the port (a \"Random\" port).\nJenkins selects a random available port number and shares that port number with agents during their initial connection to the Jenkins http port.\n\nConfigure the agent\n\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\n\nDownload the agent\n\nThe agent starts the first time by clicking the \"Launch\" button on the agent configuration page (only available with Java 8).\nThat downloads the \"slave-agent.jnlp\" file from the web browser.\n\nStart the agent\n\nThe downloaded file needs to be opened from a command prompt using the javaws command that is included with the bundled JRE:\n\nC:\\> \"C:\\Program Files (x86)\\Jenkins\\jre\\bin\\javaws.exe\" -wait slave-agent.jnlp\n\nThe javaws program has been removed from  the most recent releases of Java 8 and from Java 11.\nRefer to [Jenkins agent and icedtea] for a technique that can help users of the most recent releases of Java 8.\n\nJava web start (javaws.exe) prompts for permission to run the program with this dialog:\n\nInstall the agent as a service\n\nThe agent runs and displays a window on the desktop with a single menu entry, \"Install as a service\".\n\nWhen the \"Install as a service\" menu item is clicked, the agent is adjusted to run as a Windows service using the SYSTEM account.\n\nUpgrade the controller\n\nThe Jenkins controller on Windows can be upgraded to Jenkins 2.249.1 from the \"Manage Jenkins\" page.\nThe upgrade process downloads the new jenkins.war file, saves the current version in case of later downgrade, and offers to restart.\n\nUpgrade the agent\n\nThe Jenkins inbound agent is not upgraded automatically.\nThe agent administrator downloads the most recent agent.jar from their Jenkins controller, stops the running agent, and replaces the installed agent.jar with the downloaded version.\nThe agent service will reconnect to the Jenkins controller after the administrator restarts it.\n\n64 bit Windows MSI\n\nBeginning with Jenkins 2.235.3, the Jenkins LTS Windows installer is a 64 bit MSI.\nIt runs Jenkins with the 64 bit JDK (Java 8 or Java 11) selected by the user.\n\nJenkins controller\n\nJenkins 2.235.3 was installed using AdoptOpenJDK Java 8u262 in one test.\nIt was installed using AdoptOpenJDK Java 11.0.8 in another test.\nIn both cases, the installer configured the Jenkins controller to run with the Windows service account we had previously configured.\n\nRefer to the Windows Installer Updates blog post for details of the controller installation process with the 64 bit MSI.\n\nJenkins agent\n\nJenkins agents on Windows are often configured to \"Launch agent by connecting it to the master\".\nThe Jenkins agent configuration correctly warns that the controller must open the TCP port for inbound agents in the \"Configure Global Security\" page.\nIt is easiest to allow Jenkins to choose the port (a \"Random\" port).\nJenkins selects a random available port number and shares that port number with agents during their initial connection to the Jenkins http port.\n\nConfigure the agent\n\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\nOnce the Jenkins TCP port is open for inbound agents, a new agent is configured from the Jenkins \"Nodes\" menu\nThis creates an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\n\nDownload the agent\n\nThe agent was started the first time by clicking the \"Launch\" button on the agent configuration page (only available with Java 8).\nThat downloads the \"slave-agent.jnlp\" file from the web browser.\n\nStart the agent with IcedTea-Web\n\nRecent versions of Java 8 and all versions of Java 11 have removed the javaws command.\nJenkins agents for Java 8 can still be started with the javaws command, but it needs to be downloaded separately from the JVM.\nWe open \"slave-agent.jnlp\" from a command prompt using the javaws command that is available from AdoptOpenJDK IcedTea :\n\nC:\\> C:\\icedtea-web-1.8.3.win.bin\\icedtea-web-image\\bin\\javaws.exe -wait slave-agent.jnlp\n\nJava web start (javaws.exe) prompts for permission to run the program with this dialog:\n\nInstall the agent as a service\n\nThe agent runs and displays a window on the desktop with a single menu entry, \"Install as a service\".\n\nWhen the \"Install as a service\" menu item is clicked, the agent is installed and configured to run as a Windows service using the SYSTEM account.\n\nUpgrading the controller\n\nThe Jenkins controller on Windows was upgraded to Jenkins 2.249.1 from the \"Manage Jenkins\" page.\nThe upgrade process downloads the new jenkins.war file, saves the current version in case of later downgrade, and offers to restart.\n\nUpgrading the agent\n\nThe Jenkins inbound agent is not upgraded automatically or from a Jenkins user interface.\nThe agent administrator downloads the most recent agent.jar from their Jenkins controller and replaces the installed agent.jar with the downloaded version.\n\nWAR (file) on Windows\n\nJenkins allows users to run the Jenkins web archive (WAR) file from a command line and then install it as a service from within Jenkins.\nThis installation technique uses the Jenkins WAR file but does not use a Windows MSI package.\nThe Jenkins WAR file includes the necessary components to install and configure Jenkins as a service.\n\nInstall controller as a service\n\nWhen the Jenkins war file is started from a Windows command prompt, \"Manage Jenkins\" includes \"Install as a service\".\nAn administrator selects that entry and Jenkins will configure itself to run as a service/\nThe installer configures the Jenkins controller to run as the SYSTEM user.\n\nJenkins agent\n\nJenkins agents on Windows are often configured to \"Launch agent by connecting it to the master\".\nThe Jenkins agent configuration correctly warns that the controller must open the TCP port for inbound agents in the \"Configure Global Security\" page.\nIt is easiest to allow Jenkins to choose the port (a \"Random\" port).\nJenkins selects a random available port number and shares that port number with agents during their initial connection to the Jenkins http port.\n\nConfigure the agent\n\nAfter opening the Jenkins TCP port for inbound agents, we configured a new agent from the \"Nodes\" menu\nThis created an \"inbound Jenkins agent\" that uses the Jenkins agent.jar to initiate the connection to the Jenkins controller.\n\nDownload the agent\n\nThe agent was started the first time by clicking the \"Launch\" button on the agent configuration page (only available with Java 8).\nThat downloads the \"slave-agent.jnlp\" file from the web browser.\n\nStart the agent with IcedTea-Web\n\nRecent versions of Java 8 and all versions of Java 11 have removed the javaws command.\nJenkins agents for Java 8 can still be started with the javaws command, but it needs to be downloaded separately from the JVM.\nOpen \"slave-agent.jnlp\" from a command prompt using the javaws command that is available from AdoptOpenJDK IcedTea-Web :\n\nC:\\> C:\\icedtea-web-1.8.3.win.bin\\icedtea-web-image\\bin\\javaws.exe -wait slave-agent.jnlp\n\nJava web start (javaws.exe) prompts for permission to run the program with this dialog:\n\nInstall the agent as a service\n\nThe agent runs and displays a window on the desktop with a single menu entry, \"Install as a service\".\n\nWhen the \"Install as a service\" menu item is clicked, the agent is installed and configured to run as a Windows service using the SYSTEM account.\n\nConclusion\n\nJenkins controller installation is best done with the new 64 bit MSI package.\nPrevious controller installations can be upgraded to the most recent Jenkins release from within Jenkins.\n\nJenkins inbound agent installation is more complicated now that the javaws.exe program is not included in the JDK.\nThe AdoptOpenJDK IcedTea-Web project allows administrators to install and configure Jenkins inbound agents with most of the ease that was available in prior Java releases.","title":"Testing Jenkins 2.249.1 on Windows","tags":["windows","platform-sig","installers","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg","srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/534e5/vsilverman.jpg 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/99887/vsilverman.jpg 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/76fd4/vsilverman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/59a6b/vsilverman.webp 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/cbb78/vsilverman.webp 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/96250/vsilverman.webp 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/50511/vsilverman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}}},"blog":null,"github":"vsilverman","html":"<div class=\"paragraph\">\n<p>Vlad is an active user of Jenkins and at the beginning of 2020 he also started actively contributing to the Jenkins project. He resides in Silicon Valley and for 10+ years had been involved in building/testing business processes for large enterprises and mid-size companies.</p>\n</div>","id":"vsilverman","irc":null,"linkedin":null,"name":"Vlad Silverman","slug":"/blog/authors/vsilverman","twitter":"vsilverman"}]}},{"node":{"date":"2020-08-27T00:00:00.000Z","id":"ab88123c-a9df-5bf7-97c3-bc6cd5656a55","slug":"/blog/2020/08/27/winsw-yaml-support/","strippedHtml":"Hello, world! GSoC 2020 Phase 3 has ended now and it was a great period for thw Jenkins Windows Services - YAML Configuration Support project.\nIn this blog post, I will announce the updates during the GSoC 2020 - Phase 2 and Phase 3. If you are not already aware of this project,\nI would recommend reading this blog post which was published after GSoC 2020 - Phase 1.\n\nProject Scope\n\nWindows Service Wrapper - YAML configuration support\n\nYAML schema validation\n\nNew CLI\n\nXML Schema validation\n\nYAML Configuration Support\n\nUnder WinSW - YAML configurations support, these tasks will be done.\n\nYAML to Object mapping\n\nAt the moment YAML object mapping is finished and merged.\nYou can find all the implementations in this Pull Request.\n\nExtend WinSW to support both XML and YAML\n\nThis task is already done and merged. Find the implementation in this Pull Request.\n\nYAML Configuration support for Extensions\n\nAt the moment there are 2 internal plugins in WinSW. RunAwayProcessKiller and SharedDirectoryMapper.\nWe allow users to provide configurations for those plugins in the same XML and YAML configuration file which is used to configure WinSW. This task is merged as well.\nPull Request\n\nYAML schema validation\n\nUsers can validate YAML configuration file against JSON schema file.\nUsers can use YAML utility tool from Visual Studio market place to validate YAML config file against JSON schema.\n\nKey updates in Phase 2 and Phase 3\n\nYAML Configuration structure\n\nEnvironment variables\n\nNow users can provide environment variables as a sequence of dictionaries that contains name and value for environment variables.\n\nTimeStamp values\n\nUsers can specify timestamp values in the same manner used in XML (e.g. 10 ms, 5 sec, 3 min)\n\nYAML configuration document was published. YAML Configuration Specification\n\nExtend the WinSW to support both XML and YAML\n\nYAML support for extensions\n\nYAML schema validation against JSON schema\n\nSample YAML Configuration File\n\nid: jenkins\nname: Jenkins\ndescription: This service runs Jenkins automation server.\nenv:\n    - name: JENKINS_HOME\n      value: '%LocalAppData%\\Jenkins.jenkins'\n    - name: LM_LICENSE_FILE\n      value: host1;host2\nexecutable: java\narguments: >-\n    -Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"E:\\Winsw Test\\yml6\\jenkins.war\" --httpPort=8081\nlog:\n    mode: rotate\nonFailure:\n    - action: restart\n      delay: 10 sec\n    - action: reboot\n      delay: 1 hour\nextensions:\n    - id: killOnStartup\n      enabled: yes\n      classname: WinSW.Plugins.RunawayProcessKiller.RunawayProcessKillerExtension\n      settings:\n            pidfile: '%BASE%\\pid.txt'\n            stopTimeOut: 5000\n            StoprootFirst: false\n    - id: mapNetworDirs\n      enabled: yes\n      classname: WinSW.Plugins.SharedDirectoryMapper.SharedDirectoryMapper\n      settings:\n            mapping:\n                - enabled: false\n                  label: N\n                  uncpath: \\\\UNC\n                - enabled: false\n                  label: M\n                  uncpath: \\\\UNC2\n\nNew CLI\n\nLet me explain in brief, why we need a new CLI.\nIn WinSW, we will keep both XML and YAML configuration support.\nBut according to the current implementation, the user can’t specify the configurations file explicitly.\nAlso, we want to let the user skip the schema validation as well.\nSo We decided to move into new CLI which is more structured with commands and options.\nPlease read my previous blog post to learn more about commands and options in the new CLI.\n\nKey updates in Phase 2 and Phase 3\n\nRemove the /redirect command\n\ntestwait command was removed and add the wait option to the test command.\n\nstopwait command was removed and add the wait option to the stop command.\n\nHow to try\n\nUser can configure the Windows Service Wrapper by both XML and YAML configuration files using the following steps.\n\nCreate the configuration file (XML or YAML).\n\nSave it with the same name as the Windows Service Wrapper executable name.\n\nPlace the configuration file inside the directory(or in a parent directory), where the Windows Service Wrapper executable is located.\n\nIf there are both XML and YAML configuraiton files, Windows Service Wrapper will be configured by the XML configuration file.\n\nGSoC 2020 Phase 2 Demo\n\nGSoC 2020 Phase 3 Demo\n\nFuture Works\n\nXML Schema validation\n\nXML configuration file will be validated with the XSD file.\nI have started working on this feature and you can find the implementation in this Pull Request.\n\nYAML Configuration validate on startup\n\nHow to contribute\n\nYou can find the GitHub repository in this link.\nIssues and Pull requests are always welcome. Also, you can communicate with us in the WinSW Gitter channel,\nwhich is a great way to get in touch and there are project sync up meetings every Tuesday at 13:30 UTC on the Gitter channel.\n\nSome useful links\n\nPresentation Slides\n\nProject Page\n\nProject Repository\n\nFeature preview\n\nGitter Channel\n\nYamlDotNet library\n\nCommand Line Parser library","title":"Jenkins Windows Services: YAML Configuration Support - GSoC Project Results","tags":["winsw","windows","jenkins","gsoc","gsoc2020","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"buddhikac96","html":"","id":"buddhikac96","irc":null,"linkedin":null,"name":"Buddhika Chathuranga","slug":"/blog/authors/buddhikac96","twitter":null}]}},{"node":{"date":"2020-08-12T00:00:00.000Z","id":"52309c34-03ae-57ce-b801-39141f4c3b3c","slug":"/blog/2020/08/12/windows-installers-upgrade/","strippedHtml":"This article describes the transition from the old Jenkins Windows installer 2.235.2 (32 bit) to the new Jenkins Windows installer 2.235.3 (64 bit)\n\nLet’s take a look how Jenkins installation on Windows happened before release of this upgrade.\n\nStep 1\n\nIt’s evident that branding information is not present here.\n\nStep 2\n\nJenkins would be installed into the 32 bit programs directory along with a 32 bit Java 8 runtime environment.\n\nStep 3\n\nThere was no option to select the user that would run the Jenkins service or the network port that would be used.\n\nIssues\n\nThe previous installer had issues that needed to be resolved:\n\nOnly supported 32-bit installations\n\nBundled an outdated Java 8 runtime environment\n\nNo support for Java 11\n\nNo port selection during installation\n\nNo choice of account for the Jenkins service\n\nThe Program Files (x86) directory was used for the Jenkins home directory\n\nRoad Forward\n\nThe new Jenkins Windows Installer resolves those issues\n\nSupports 64 bit installations and drops 32 bit support\n\nSupports 64 bit Java 8 and 64 bit Java 11\n\nPort selection and validation from the installer\n\nService account selection and validation from the installer\n\nProgram is installed in Program Files with Jenkins home directory in %AppData% of the selected service account\n\nThe JENKINS_HOME directory is placed in the LocalAppData directory for the user that the service will run as, this aligns with modern Windows file system layouts\n\nThe installer has been updated with branding to make it look nicer and provide a better user experience\n\nScreenshots\n\nYou may see below the sequence of screenshots for the new installer:\n\nStep 1\n\nWe can see now the Jenkins logo as a prominent part of the installer UI.\n\nStep 2\n\nJenkins installs by default in the 64 bit programs folder rather than in the 32 bit folder.\nNow the Jenkins logo and name are in the header during entire process of installation.\n\nStep 3\n\nNow the installer allows both specifying and testing the credentials by validating that the account has LogonAsService rights.\n\nStep 4\n\nNow the installer also allows specifying the port that Jenkins should run on and will not continue until a valid port is entered and tested.\n\nStep 5\n\nNow instead of bundling a JRE, the installer searches for a compatible JRE on the system (in the current search no JRE was installed).\nIn case you would like to use a different JRE from the one found by the installer, you can browse and specify it.\nOnly Java 8 and Java 11 runtimes are supported.\nIn case the selected JRE is found to be version 11 the installer will automatically add the necessary arguments and additional jar files for running under Java 11.\n\nStep 6\n\nAll of the items that users can enter in the installer should be overridable on the command line for automated deployment as well. The full list of properties that can be overridden will be available soon.\n\nNext Steps\n\nWindows users have alternatives for their existing Jenkins installations:\n\nUpgrade from inside Jenkins\n\nThe \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.\nUpgrade from inside Jenkins will continue to use the current Java version.\nUpgrade from inside Jenkins will continue to use the current installation location.\n\nUpgrade with the new Jenkins MSI installer\n\nIf you run the new Jenkins MSI installer on your Jenkins that was installed with the old Jenkins MSI installer, it will prompt for a new port and a service account.\n\nStop and disable the existing Jenkins service from the Windows Service Manager\n\nRun the new installer to create the new installation with desired settings\n\nStop the newly installed Jenkins service\n\nCopy existing Jenkins configuration files to the new Jenkins home directory\n\nStart the newly installed Jenkins service\n\nAfter the new Jenkins MSI installer has run, the \"Manage Jenkins\" section of the running Jenkins will continue to include an \"Upgrade\" button for Windows users.\nYou may continue to use that \"Upgrade\" button to update the Jenkins installation on your Windows computer.","title":"Windows Installer Upgrades","tags":["windows","platform-sig","installers","announcement"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg","srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/534e5/vsilverman.jpg 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/99887/vsilverman.jpg 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/c09ea/vsilverman.jpg 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/76fd4/vsilverman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/59a6b/vsilverman.webp 32w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/cbb78/vsilverman.webp 64w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/96250/vsilverman.webp 128w,\n/gatsby-jenkins-io/static/12e9c9639e24d63b0e20a2f8f7f0116d/50511/vsilverman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":171}}},"blog":null,"github":"vsilverman","html":"<div class=\"paragraph\">\n<p>Vlad is an active user of Jenkins and at the beginning of 2020 he also started actively contributing to the Jenkins project. He resides in Silicon Valley and for 10+ years had been involved in building/testing business processes for large enterprises and mid-size companies.</p>\n</div>","id":"vsilverman","irc":null,"linkedin":null,"name":"Vlad Silverman","slug":"/blog/authors/vsilverman","twitter":"vsilverman"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix","twitter":"alexcearl"}]}},{"node":{"date":"2020-07-23T00:00:00.000Z","id":"fd686e1c-3df7-5236-8624-f2cd50ed3461","slug":"/blog/2020/07/23/windows-support-updates/","strippedHtml":"In this article, I would like to announce the new Windows support policy\nwhich was introduced in the Jenkins project in June 2020.\nThis policy sets an expectation about how we handle issues and patches related to Windows support for the Jenkins server and agents, and how we organize testing of Windows support in the project.\nWe will also talk about .NET Framework 2.0 support removal in Jenkins 2.248,\nand about new Windows service management features and fixes Jenkins users get with this release.\n\nFigure 1. Jenkins on Windows\n\nWhy?\n\nIn theory, Jenkins can run everywhere where you can run Java 8 or Java 11, but, in practice, there are some limitations.\nThe Jenkins core and some plugins contain native code, and hence they rely on operating systems and platforms.\nWe use Java Native Access and Java Native Runtime libraries which provide wide platform support for low-level operations,\nbut there are platform-specific cases not covered by such generic libraries.\nIn the case of Windows platforms we use Windows Service Wrapper (WinSW) and\nWindows Process Management Library (WinP).\nThese libraries depend on particular Windows API versions and, in the case of Windows services, on .NET Framework.\n\nHistorically Jenkins had no documented support policy for Windows,\nand we were accepting patches for all versions which existed since the Hudson inception in 2004.\nIt became a serious obstacle for Windows component maintainers who had to be very conservative about incoming patches so that we could avoid breaking instances running on old platforms.\nLack of testing for older platforms did not help either.\nAnd it is not just about maintenance overhead.\nUsers were impacted as well, because it blocked us from adopting some new Windows features and making Jenkins more stable/maintainable on modern platforms.\n\nNew policy\n\nTo set proper expectations about Windows support,\nin the new policy we defined four support levels.\nSee the Windows support policy page for the actual information about the support levels and the supported platforms.\nThis blogpost captures the support state as of Jul 23, 2020:\n\nLevel 1 - Full Support\n\nWe run automated testing for these platforms, and we intend to timely fix the reported issues.\nThis support level includes 64-bit (amd-64) Windows Server versions with the latest GA update pack,\nand versions used in the official Jenkins server and agent Docker images.\n\nLevel 2 - Supported\n\nWe do not actively test these platforms, but we intend to keep compatibility.\nWe are happy to accept patches.\nThis support level includes 64-bit (amd64) Windows Server and Windows 10 versions generally supported by Microsoft.\n\nLevel 3 - Patches considered\n\nThe platforms are generally expected to work, but they may have limitations and extra requirements.\nWe do not test compatibility, and we may drop support if needed.\nWe will consider patches if they do not put Level 1/2 platforms at risk and if they do not create maintenance overhead.\nThis support level includes non-amd64 platforms like x86 (32-bit) and AArch64 (Arm).\nIt also applies to non-mainstream release lines like Windows Embedded, preview releases, and versions no longer supported by Microsoft.\n\nLevel 4 - Unsupported\n\nThese versions are known to be incompatible or to have severe limitations.\nWe do not support the listed platforms, and we will not accept patches.\nAt the moment this level applies to platforms released before 2008.\n\nWhen the policy was introduced, there were questions raised about platforms listed in the Level 3 support category.\nFirst of all, these platforms are still supported.\nUsers are welcome to run Jenkins on these platforms.\nWe recognize the importance of the platforms listed there, and we intend to keep compatibility with them.\nAt the same time, particular functionality may break there due to the lack of testing when we update Jenkins or upstream dependencies.\nIt may take a while until a fix is submitted by a user or contributor,\nbecause we do not maintain development environments for these platforms.\nBy setting a Level 3 support level, we want to set an explicit expectation about those limitations.\n\nIf you are interested in expanding the official Windows support policy and adding more platforms there,\nwe invite you to participate in quality assurance of Jenkins.\nYou may contribute by expanding test automation for Jenkins,\ncontributing test environments for your platforms,\nor participating in the LTS release candidate testing and reporting results.\nPlease contact us via Platform SIG channels if you are interested.\n\nWindows Service Management changes in Jenkins 2.248\n\nFigure 2. WinSW Logo\n\nAlthough the policy was introduced more than 1 month ago,\nJenkins 2.248 is the first release where the new policy is applied.\nStarting from this release, we won’t support .NET Framework 2.0 for launching the Jenkins server or agents as Windows services.\n .NET Framework 4.0 or above is now required for using the default service management features.\n\nThis release also upgrades Windows Service Wrapper (WinSW) from 2.3.0 to 2.9.0 and replaces the bundled binary from .NET Framework 2.0 to 4.0.\nThere are many improvements and fixes in these versions,\nbig thanks to NextTurn and all other contributors.\nYou can find the full WinSW changelog here,\njust a few highlights important to Jenkins users:\n\nPrompt for permission elevation when administrative access is required.\nNow Jenkins users do not need to run the agent process as Administrator to install the agent as a service from GUI.\n\nEnable TLS 1.1/1.2 in .NET Framework 4.0 packages on Windows 7 and Windows Server 2008 R2.\n\nEnable strong cryptography when running .NET Framework 4.0 binaries on .NET 4.6.\n\nSupport security descriptor string in the Windows service definition.\n\nSupport 'If-Modified-Since' and proxy settings for automatic downloads.\n\nFix Runaway Process Killer extension so that it does not kill wrong processes with the same PID on startup.\n\nFix the default domain name in the serviceaccount parameter (jira:JENKINS-12660[])\n\nFix archiving of old logs in the roll-by-size-time mode.\n\nAs you may see, there are many improvements available with this version,\nand we hope that it will make Windows service installation even more reliable.\nSome of the changes in WinSW also replaced old workarounds in the Jenkins core,\nmaking the code more maintainable.\n\nUse-cases affected by .NET Framework 2.0 support removal\n\nIf you use .NET Framework 2.0 to run the Jenkins Windows services,\nthe following use-cases are likely to be affected:\n\nInstalling the Jenkins server as a Windows service from Web UI.\nThe official MSI Installer supports .NET Framework 2.0 for the moment, but it will be changed in future versions.\n\nInstalling agents as Windows services from GUI.\nThis feature is provided by in Windows Agent Installer Module from the Jenkins core.\n\nInstalling agents over Windows Management Instrumentation (WMI) via the WMI Windows Agents plugin\n\nAuto-updating of Windows service wrappers on agents installed from GUI.\n\nUpgrade guidelines\n\nIf all of your Jenkins server and agent instances already use .NET Framework 4.0 or above,\nthere are no special upgrade steps required.\nPlease enjoy the new features!\n\nIf you run the Jenkins server as a Windows Service with .NET Framework 2.0,\nthis instance will require an upgrade of .NET Framework to version 4.0 or above.\nWe recommend running with .NET Framework 4.6.1 or above,\nbecause this .NET version provides many platform features by default\n(e.g. TLS 1.2 encryption and strong cryptography),\nand Windows Service Wrapper does not have to apply custom workarounds.\n\nIf you want to continue running some of your agents with .NET Framework 2.0,\nthe following extra upgrade steps are required:\n\nDisable auto-upgrade of Windows Service Wrapper on agents by setting the\n-Dorg.jenkinsci.modules.windows_slave_installer.disableAutoUpdate=true flag on the Jenkins server side.\n\nUpgrade agents with .NET Framework 4.0+ by downloading the recent Windows Service Wrapper 2.x\nversion from WinSW GitHub Releases\nand manually replacing the wrapper \".exe\" files in the agent workspaces.\n\nWhat’s next?\n\nWe plan to continue expanding the Windows support in Jenkins,\nincluding providing official Docker images for newer Windows versions.\nFor example, there is already a pull request which will introduce official agent images for Windows Server Core LTSC 2019 and\nfor Windows Server Core and Nano Server 1909.\nWe are also interested to keep expanding test coverage for Windows platforms.\nAny contributions and feedback will be appreciated!\n\nWe also keep working on improving Windows Services.\nBuddhika Chathuranga, a Google Summer of Code 2020 student, is working on support for YAML Configurations in Windows Service Wrapper,\nand on better verification of XML and YAML Configurations.\nSee the details on the project page and in the\nCoding Phase 1 Report.\nIn addition to that, there is ongoing work on a new Windows Service Wrapper 3.0 release which will redesign CLI and introduce a lot more improvements.\nIf you are interested in contributing to Windows Service Wrapper,\nsee the guidelines here.\nWe will also appreciate your feedback on the WinSW Gitter channel.","title":"Jenkins 2.248: Windows Support Updates","tags":["announcement","windows","platform","winsw"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-07-08T00:00:00.000Z","id":"e374d21c-96c4-5212-b662-0867a675e5a2","slug":"/blog/2020/07/08/winsw-yaml-support/","strippedHtml":"Hello all, I am Buddhika Chathuranga from Sri Lanka and I am a final year undergraduate at the Faculty of IT, University of Moratuwa. I am participating in GSoC 2020 with Jenkins.\nI am working on the Windows Service Wrapper Project.\nSo the Coding Phase 01 of GSoC 2020 is now over and this blog post describes what I have done so far.\n\nWindows Service Wrapper is an executable, which we can use to run applications as Windows Services on Windows machines, which has almost one million downloads.\nIn Jenkins, we use Windows service wrapper to run Jenkins server and agents as Windows services to gain more robustness.\nThis feature is bundled into Jenkins’s core. Currently, the Windows Service wrapper is configured by an XML file.\nHowever, there is a limited number of configuration checks and there is no XML schema.\n\nXML is not such a human-friendly way to do that. It is quite verbose and not easy to identify the schema without some effort.\nUsually, users misconfigure the service wrapper. This is a sample XML configuration file that we can use to provide configurations to Windows Service Wrapper.\n\nSample XML Configuration File\n\njenkins\nJenkins\nThis service runs Jenkins automation server.\n\nC:\\Program Files\\Java\\jdk1.8.0_201\\bin\\java.exe\n-Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"C:\\Program Files\\Jenkins\\jenkins.war\" --httpPort=8081 --webroot=\"%LocalAppData%\\Jenkinswar\"\nrotate\n\n%LocalAppData%\\Jenkinsjenkins.pid\n10000\nfalse\n\nThe usage of YAML could simplify configuration management in Jenkins, especially when automated and configuration management tools are used.\nSo what we are doing under GSoC - 2020 is to update the Windows Service Wrapper to support YAML configurations.\nAfter finishing this project, users will be able to provide configurations to the Windows Service Wrapper as a YAML file.\n\nThis is a sample YAML configuration file for Windows Service Wrapper and you can see it is less verbose than XML or JSON and much more human friendly.\nUsers can read and edit this without a big effort.\n\nSample YAML Configuration File\n\nid: jenkins\nname: Jenkins\ndescription: This service runs Jenkins automation server.\nenv:\n    _name: JENKINS_HOME\n    _value: '%LocalAppData%\\Jenkins.jenkins'\nexecutable: 'C:\\Program Files\\Java\\jdk1.8.0_201\\bin\\java.exe'\narguments: >-\n    -Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"C:\\Program Files\\Jenkins\\jenkins.war\" --httpPort=8081 --webroot=\"%LocalAppData%\\Jenkinswar\"\nlogmode: rotate\nonfailure:\n    _action: restart\nextensions:\n    -\n        pidfile: '%LocalAppData%\\Jenkinsjenkins.pid'\n        stopTimeout: '10000'\n        stopParentFirst: 'false'\n        _enabled: 'true'\n        _className: winsw.Plugins.RunawayProcessKiller.RunawayProcessKillerExtension\n        _id: killOnStartup\n\nAdvantages of YAML as a configuration file\n\nIt is less verbose and much more human friendly than XML.\n\nSince YAML is not using extra delimiters, it is lightweight.\n\nNowadays YAML has become more popular among configuration management tools.\n\nProject Scope\n\nDuring this project, I will add the following features to Windows Service Wrapper.\n\nYAML Configuration support\n\nYAML Schema validation\n\nNew CLI for the Windows Service Wrapper\n\nSupport for XML Schema validation via XML Schema Definition (XSD)\n\nPhase 01 Updates\n\nIn GSoC - 2020 phase 01, I have done the following updates to the Windows Service Wrapper.\n\nProject Structure overview document. (Published)\n\nYAML configurations support (Not released yet) - Pull Request\n\nNew CLI (Not released yet) - Pull Request\n\nXML Schema validation (Not released yet) - Pull Request\n\nYou can find Phase 01 Demo slides in this link.\n\nBelow you can find more details about the deliverables listed above.\n\nProject Structure overview\n\nThe project structure overview document describes how files and directories are organized in the Windows Service Wrapper project.\nIt will help contributors as well as users, to understand the codebase easily.\nAlso, it helps me a lot to understand the codebase. You can find the document from the given link.\n\nYAML configurations support\n\nAs I explained before, in this project, configurations will be provided as a YAML file.\nI used YamlDotNet library which has more than 2.2k stars on GitHub, to deserialize the YAML file into an Object graph.\nIn this YAML file, users can specify configurations in a more structured way than in XML configuration files.\nAs an example, now users can specify all the log related configurations under the log config.\nUsers can specify all service account related configurations under serviceaccount config etc.\n\nAt the moment, I am working on a design document for YAML configuration support. I will add it to the GitHub Issue once ready\n\nNew CLI\n\nBefore moving into Phase 01 updates, it’s better to explain why we needed a new CLI for Windows Service Wrapper.\nIn the early phases of Windows Service Wrapper, we will keep the XML configuration support as well.\nSo we should allow users to specify the configurations file separately.\nThe current approach is, configurations file should be in the same directory, where Windows Service Wrapper executable exists and the file name of the XML file should be the same as the Windows Service Wrapper executable file name.\nAlso, users should be able to redirect logs if they need to and they should be allowed to elevate command prompt using Windows Service Wrapper.\nAlso, we thought that it’s better to allow users to skip schema validation if they needed. So we decided to move into a new CLI.\n\nAs I explained, after releasing this, users will have options in addition to commands.\nIt will make the WinSW CLI more flexible so that we can easily extend it later. These are the options users are allowed to use.\nThese options are available with all the commands except help and version\n\n--redirect / -r [string]\n\nUsers can specify the redirect path for the logs if needed\n\nNot required | Default value is null\n\n--elevated / -e [boolean]\n\nElevate the command prompt before executing the command\n\nNot required | Default value is false\n\n--configFile / -c [string]\n\nUsers can specify the configurations file as a path\n\nNot Required | Default value is null\n\n--skipConfigValidation / -s [boolean]\n\nUsers can skip schema validation for configurations file if needed\n\nNot required | Default value is true\n\n--help / -h\n\nUser can find what options are available with a particular command with this option\n\nThis option is available with the install command\n\n--profile / -f [boolean]\n\nIf this option is true, then users can provide a service account for installation explicitly.\n\nNot required | Default value is false\n\nWe used commandlineparser/commandline library to parse the command line argument which has more than 2k stars in GitHub. At a glance, the library is compatible with .NET Framework 4.0+, Mono 2.1+ Profile, .NET Standard, and .NET Core.\n\nXML Schema validation\n\nAs I mentioned before, there was no schema validation for XML in Windows Service Wrapper.\nHence, I was working on schema validation for XML. I use XSD to validate XML files. The XSD file will be shipped as an embedded resource with the executable.\nYou can find the XSD file in my pull request.\n\nFuture updates\n\nIn the next phase, for GSoC 2020 the listed deliverables features will be released and the YAML schema validation feature will be added.\nAlso, we hope to publish a design document for the new features, which will help contributors.\n\nHow to contribute\n\nYou can find the GitHub repository in this link. Issues and Pull requests are always welcome.\nAlso, you can communicate with us in the WinSW Gitter channel, which is a great way to get in touch and there are project sync up meetings every Tuesday at 13:30 UTC on the Gitter channel.\n\nSome useful links\n\nProject Page\n\nProject Repository\n\nGitter Channel\n\nYamlDotNet library\n\nCommand Line Parser library","title":"Windows Service Wrapper : YAML Configuration Support - GSoC Phase - 01 Updates","tags":["winsw","windows","jenkins","gsoc","gsoc2020"],"authors":[{"avatar":null,"blog":null,"github":"buddhikac96","html":"","id":"buddhikac96","irc":null,"linkedin":null,"name":"Buddhika Chathuranga","slug":"/blog/authors/buddhikac96","twitter":null}]}},{"node":{"date":"2020-05-11T00:00:00.000Z","id":"a9a89ae0-1c8f-5566-81ab-6fdf73b725f7","slug":"/blog/2020/05/11/docker-windows-agents/","strippedHtml":"We would like to announce the availability of official Windows agent images for Docker.\nThese images allow provisioning Jenkins agents with Windows OS on Docker and Kubernetes.\n\nNew images\n\nAll official Docker images for agents now provide nanoserver-1809 and windowsservercore-1809 tags which include Windows images and, at the moment, Java 8 (these are like the latest tag).\nWe also provide tags with explicit Java selection, e.g. jdk8-windowsservercore-1809 or jdk11-nanoserver-1809.\nVersion tags are also available, e.g. jenkins/agent:4.3-4-jdk8-nanoserver-1809.\n\njenkins/agent is a basic agent which bundles the agent.jar for agent ⇐ ⇒ controller communication. This is most useful as a base image for other images.\nWindows images are available starting from version 4.3-4\n\njenkins/inbound-agent is an agent that is based on the jenkins/agent image above. It provides a wrapper script written in PowerShell to help specify the parameters to agent.jar.\nWindows images are available starting from version 4.3-4\n\njenkins/ssh-agent is an image which has OpenSSH installed and should be used with the SSH Build Agents Plugin.\nWindows images are available starting from version 2.1.0\n\nUsing Windows Docker images\n\nTo use the new images, you will need a proper Docker or Kubernetes environment which supports running Windows containers.\nFor Windows desktop users, the easiest way is to use Docker for Windows.\nWindows support in Kubernetes is documented here.\n\njenkins/agent\n\nThe jenkins/agent image is a simple agent with the JDK and the agent.jar (Jenkins Remoting library).\n\nThere are two main use cases for this image:\n\nAs a base image for other Docker images (e.g., FROM jenkins/agent:jdk8-nanoserver-1809 in your Dockerfile). The jenkins/inbound-agent is based on this image.\n\nThis image may also be used to launch an agent using the Launch method of Launch agent via execution of command on the master.  This allows the controller to launch the agent inside the docker container automatically.\n\nTo run the agent for the second use case, you would specify the following command on the Jenkins controller after setting Remote root directory to C:\\Users\\jenkins\\agent :\n\ndocker run -i --rm --name agent --init jenkins/agent:jdk8-windowsservercore-1809 java -jar C:/ProgramData/Jenkins/agent.jar\n\njenkins/inbound-agent\n\nThe inbound-agent Docker image tries to provide a higher level interaction with the agent.jar executable. It provides a PowerShell wrapper script around agent.jar and it is specified as the entrypoint so that you just need to pass in some command line arguments to run the agent. A pull request has been opened which documents these command line parameters and environment variables.\n\nExample:\n\ndocker run jenkins/inbound-agent:windowsservercore-1809 `\n   -Url http://jenkins-server:port `\n   -WorkDir=C:/Users/jenkins/Agent `\n   -Secret `\n   -Name\n\nExample using environment variables:\n\ndocker run -e \"JENKINS_URL=http://jenkins-server:port\" -e \"JENKINS_AGENT_NAME=AGENTNAME\" `\n   jenkins/inbound-agent:windowsservercore-1809 `\n   -WorkDir=C:/Users/jenkins/Agent `\n   -Secret `\n   -Name\n\nThe -Url, -Name and -Secret parameters are required, but can be specified as either command line parameters or environment variables.\n\njenkins/ssh-agent\n\nAs mentioned above the jenkins/ssh-agent docker image is based on SSH communication with the controller, rather than the remoting TCP or WebSocket protocols. The image sets up a jenkins user and the OpenSSH server so that the controller can connect to the agent via SSH. The image expects an SSH public key as a parameter and puts that key into the authorized_keys file for the jenkins user. The private key should be specified in the agent configuration on the controller to allow the controller to connect.\n\nExample:\n\ndocker run jenkins/ssh-agent:jdk8-windowsservercore-1809 \"\"\n\nYou can also pass the public key as an environment variable when using docker run.\n\nExample:\n\ndocker run -e \"JENKINS_AGENT_SSH_PUBKEY=\" jenkins/ssh-agent:jdk8-windowsservercore-1809\n\nYou will then be able to connect this agent using the SSH Build Agents Plugin as \"jenkins\" with the matching private key.\n\nWhat’s next?\n\nWe are considering providing versions based on Windows Server 2019 build 1909 so that Jenkins users can run these images on GKE clusters (see this issue).\n\nWe are also looking into providing multiarch manifests which would allow Windows images to be part of the latest tag.\n\nThere is also an open pull-request to create a Windows based Docker image for a Jenkins controller. There hasn’t been a lot of requests for this, but to make the offerings complete for Windows users, the pull request was created.\n\nFor plans unrelated to Windows, please see the Docker images for agents: New names and What’s next blogpost.","title":"Windows Docker Agent Images: General Availability","tags":["announcement","docker","platform-sig","windows"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix","twitter":"alexcearl"}]}},{"node":{"date":"2019-02-01T00:00:00.000Z","id":"16256d3b-178f-556d-93f1-d366b7ff53cb","slug":"/blog/2019/02/01/windows-installers/","strippedHtml":"The Windows Installer for Jenkins has been around for many years as a way for users to install a Jenkins controller on Windows as a service.\nSince it’s initial development, it has not received a lot of updates or features, but that is about to change.\n\nFirst, let’s take a look at the current installer experience.\n\nStep 1\n\nThis is the default look and feel for a Windows Installer using the WiX Toolset, not very pretty and doesn’t give\nmuch branding information as to what the installer is for.\n\nStep 2\n\nAgain, not much branding information.\n\nStep 3\n\nThe installer in general does not give many options for installing Jenkins, other than selecting the installation location.\n\nIssues\n\nThe current installer has a few issues that the Platform SIG wanted to fix in a new install experience for users.\n\nThe installer only supports 32-bit installations.\n\nThe user could not select ports or user accounts to run the service on.\n\nThe installer bundled a 32-bit version of the Java runtime instead of using a pre-existing JRE\n\nThe installer did not support the experimental support in Jenkins for Java 11\n\nThe JENKINS_HOME directory was not placed in a good spot for modern Windows\n\nThere is no branding in the installer.\n\nRoad Forward\n\nWith the experimental Jenkins Windows Installer, most of these issues have been resolved!\n\nThe installer will only support 64-bit systems going forward. This is the vast majority of Windows systems these days,\nso this will help more users install Jenkins using the installer package.\n\nThe user is now able to enter user information for the service and select the port that Jenkins will use and verify that the port is available.\n\nThe installer no longer bundles a JRE, but will search for a compatible JRE on the system. If the user wants to use a different JRE, they can specify during install.\n\nThe installer has support for running with a Java 11 JRE, including the components listed on the Java 11 Preview Page.\n\nthe JENKINS_HOME directory is placed in the LocalAppData directory for the user that the service will run as, this aligns with modern Windows file system layouts.\n\nThe installer has been updated with branding to make it look nicer and provide a better user experience.\n\nScreenshots\n\nBelow are screenshots of the new installer sequence:\n\nStep 1\n\nThe Jenkins logo is now a prominent part of the UI for the installer.\n\nStep 2\n\nThe Jenkins logo and name are now in the header during all phases of the installer.\n\nStep 3\n\nThe installer now allows you to specify the username/password for the account to run as and checks that the account has LogonAsService rights.\n\nStep 4\n\nThe installer also allows you to specify the port that Jenkins should run on and will not continue until a valid port is entered and tested.\n\nStep 5\n\nInstead of bundling a JRE, the installer now searches for a compatible JRE on the system (JRE 8 is the current search). If you want to use a different\nJRE on the system than the one found by the installer, you can browse and specify it. Only JRE 8 and JRE 11 runtimes are supported. The installer will\nautomatically add the necessary arguments and additional jar files for running under Java 11 if the selected JRE is found to be version 11.\n\nStep 6\n\nAll of the items that users can enter in the installer should be overridable on the command line for automated deployment as well. The full list of properties that\ncan be overridden will be available soon.\n\nNext Steps\n\nThe new installer is under review by the members of the Platform SIG, but we need people to test the installer and give feedback. If you are interested in testing\nthe new installer, please join the Platform SIG gitter room for more information.\n\nThere are still some things that are being researched and implemented in the new installer (e.g., keeping port and other selections when doing an upgrade), but it is\ngetting close to release.\n\nIn addition to updates to the MSI based Windows installer, the Platform SIG is working on taking over the Chocolatey Jenkins package and\nreleasing a version for each update.","title":"Windows Installer Updates","tags":["windows","platform-sig","installers"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#988878","images":{"fallback":{"src":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg","srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/77b35/slide_o_mix.jpg 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/d4a57/slide_o_mix.jpg 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/19e71/slide_o_mix.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/ef6ff/slide_o_mix.webp 32w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/8257c/slide_o_mix.webp 64w,\n/gatsby-jenkins-io/static/aad9316d8598468ffde48a1a515f07ed/6766a/slide_o_mix.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"slide","html":"<div class=\"paragraph\">\n<p>Alex comes from a .NET background but likes to get his hands dirty in many different languages and frameworks. He currently\ndoes embedded development in a silicon validation group. He is an internal evangelist for Jenkins at his company. Alex\nis a community contributor to Jenkins, working on plugin hosting and maintaining several plugins. He is also involved in\na few SIGS. Alex enjoys working on open source software in his \"free\" time as well as spending time with his family.</p>\n</div>","id":"slide_o_mix","irc":null,"linkedin":null,"name":"Alex Earl","slug":"/blog/authors/slide_o_mix","twitter":"alexcearl"}]}}]}},"pageContext":{"tag":"windows","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}