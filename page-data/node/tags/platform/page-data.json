{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/platform",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-08-17T00:00:00.000Z","id":"d629c3ce-afaa-5437-9120-457244788553","slug":"/blog/2021/08/17/docker-images-use-jdk-11-by-default/","strippedHtml":"The Jenkins project provides Docker images for controllers, inbound agents, outbound agents, and more.\nBeginning with Jenkins 2.307 released August 17, 2021 and Jenkins 2.303.1 released August 25, 2021, the Docker images provided by the Jenkins project will use Java 11 instead of Java 8.\n\nControllers use Java 11 by default\n\nIf you are running one of the Jenkins Docker controller images that does not include a JDK version in its label, the Java runtime will switch from Java 8 to Java 11 with the upgrade.\n\nFor example:\n\nJenkins 2.306 running as jenkins/jenkins:latest uses Java 8.\nWhen Jenkins 2.307 or later is run with jenkins/jenkins:latest, it will use Java 11\n\nJenkins 2.289.3 running as jenkins/jenkins:lts uses Java 8.\nWhen Jenkins 2.303.1 or later is run with jenkins/jenkins:lts, it will use Java 11\n\nThe Docker image tags affected by this upgrade include:\n\nalpine\n\ncentos7\n\nlatest\n\nlts\n\nslim\n\nUsers that need to remain with Java 8 may use a different Docker image tag to run with Java 8.\n\nJenkins 2.306 running as jenkins/jenkins:latest uses Java 8.\nWhen Jenkins 2.307 or later is run with jenkins/jenkins:latest-jdk8, it will use Java 8\n\nJenkins 2.289.3 running as jenkins/jenkins:lts uses Java 8.\nWhen Jenkins 2.303.1 or later is run with jenkins/jenkins:lts-jdk8, it will use Java 8\n\nAgents use Java 11 by default\n\nDuring the next 1-2 weeks (Aug 17, 2021 - Aug 31, 2021), the Jenkins agent images will be updated to use Java 11 instead of Java 8.\n\nFor example:\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.9-1 uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.10-1 it will use Java 11.\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:latest uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:latest after the agent change, it will use Java 11.\n\nUsers that need to remain with Java 8 may use a different Docker image tag to run with Java 8.\n\nRunning a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.9-1 uses Java 8.\nWhen running a Jenkins agent from Docker image jenkins/jenkins-inbound-agents:4.10-1-jdk8 it will also use Java 8.\n\nDocker tag updates stopped\n\nThe Jenkins project will no longer update the Docker images that are based on CentOS 8.\nThe CentOS project has changed direction to track just ahead of a Red Hat Enterprise Linux release rather than tracking after a release.\nThey are no longer publishing updates for CentOS 8 Docker images.\n\nUsers running Jenkins 2.306 or earlier with the jenkins/jenkins:centos tag will need to switch to use a different tag.\nThey may consider using:\n\njenkins/jenkins:almalinux\n\njenkins/jenkins:rhel-ubi8-jdk11\n\nUsers running Jenkins 2.289.3 or earlier with the jenkins/jenkins:centos tag will need to switch to use a different tag\n\nThey may consider using:\n\njenkins/jenkins:lts-almalinux\n\njenkins/jenkins:lts-rhel-ubi8-jdk11\n\nWindow 1809 Docker images stopped\n\nThe Windows Docker images have published versions based on both the 1809 feature release and the Windows Server long term support channel (\"LTSC\").\nWindows support for the 1809 images will no longer be published because Microsoft has ended mainstream support for the 1809 images.\nUsers should switch to use the Jenkins images based on the \"LTSC\" channel.","title":"Docker images use Java 11 by default","tags":["java","platform","docker"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#586868","images":{"fallback":{"src":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/55658/dheerajodha.jpg","srcSet":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/3af71/dheerajodha.jpg 32w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/226ae/dheerajodha.jpg 64w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/55658/dheerajodha.jpg 128w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/3dc24/dheerajodha.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/bf13b/dheerajodha.webp 32w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/12101/dheerajodha.webp 64w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/e9db2/dheerajodha.webp 128w,\n/gatsby-jenkins-io/static/7f342743d9a8f15cb84f0a2630efe0c5/6fafe/dheerajodha.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":145}}},"blog":null,"github":"dheerajodha","html":"<div class=\"paragraph\">\n<p>Dheeraj is a Computer Science Engineering student (senior) at Vivekanand Institute of Technology, University of Mumbai. He started his journey of contributing to Jenkins in March 2021. His tiny contributions revolve around the <a href=\"https://github.com/jenkinsci/custom-distribution-service\">Custom Distribution Service for Jenkins Project</a>. He also likes to contribute to the JCasC project and documentation to help the developers.</p>\n</div>","id":"dheerajodha","irc":null,"linkedin":"dheeraj-singh-jodha","name":"Dheeraj Singh Jodha","slug":"/blog/authors/dheerajodha","twitter":null}]}},{"node":{"date":"2020-07-27T00:00:00.000Z","id":"eff5a9fc-561f-50a6-8a43-4e2faffe72ae","slug":"/blog/2020/07/27/repository-signing-keys-changing/","strippedHtml":"The Jenkins core release automation project has been delivering Jenkins weekly releases since Jenkins 2.232, April 16, 2020.\nThe Linux repositories that deliver the weekly release were updated with new GPG keys with the release of Jenkins 2.232.\n\nBeginning with Jenkins LTS release 2.235.3, stable repositories will be signed with the same GPG keys that sign the weekly repositories.\nAdministrators of Linux systems must install the new signing keys on their Linux servers before installing Jenkins 2.235.3.\n\nDebian/Ubuntu\n\nUpdate Debian compatible operating systems (Debian, Ubuntu, Linux Mint Debian Edition, etc.) with the command:\n\nDebian/Ubuntu\n\n# wget -qO - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n\nRed Hat/CentOS\n\nUpdate Red Hat compatible operating systems (Red Hat Enterprise Linux, CentOS, Fedora, Oracle Linux, Scientific Linux, etc.) with the command:\n\nRed Hat/CentOS\n\n# rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n\nFrequently Asked Questions\n\nWhat if I donâ€™t update the repository signing key?\n\nUpdates will be blocked by the operating system package manager (apt, yum, dnf) on operating systems that have not installed the new repository signing key.\nSample messages from the operating system may look like:\n\nDebian/Ubuntu\n\nReading package lists... Done\nW: GPG error: https://pkg.jenkins.io/debian-stable binary/ Release:\n    The following signatures couldn't be verified because the public key is not available:\n        NO_PUBKEY FCEF32E745F2C3D5\nE: The repository 'https://pkg.jenkins.io/debian-stable binary/ Release' is not signed.\nN: Updating from such a repository can't be done securely, and is therefore disabled by default.\nN: See apt-secure(8) manpage for repository creation and user configuration details.\n\nRed Hat/CentOS\n\nDownloading packages:\nwarning: /var/cache/yum/x86_64/7/jenkins/packages/jenkins-2.235.3-1.1.noarch.rpm:\n    Header V4 RSA/SHA512 Signature, key ID 45f2c3d5: NOKEY\nPublic key for jenkins-2.235.3-1.1.noarch.rpm is not installed\n\nWhy is the repository signing key being updated?\n\nThe original repository GPG signing key is owned by Kohsuke Kawaguchi.\nRather than require that Kohsuke disclose his personal GPG signing key, the core release automation project has used a new repository signing key.\nThe updated GPG repository signing key is used in the weekly repositories and the stable repositories.\n\nWhich operating systems are affected?\n\nOperating systems that use Debian package management (apt) and operating systems that use Red Hat package management (yum and dnf) need the new repository signing key.\n\nOther operating systems like Windows, macOS, FreeBSD, OpenBSD, Solaris, and OpenIndiana are not affected.\n\nAre there other signing changes?\n\nYes, there are other signing changes, though they do not need specific action from users.\n\nThe jenkins.war file is signed with a new code signing certificate.\nThe new code signing certificate has been used on weekly releases since April 2020.","title":"Jenkins 2.235.3: New Linux Repository Signing Keys","tags":["announcement","linux","platform"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-07-23T00:00:00.000Z","id":"fd686e1c-3df7-5236-8624-f2cd50ed3461","slug":"/blog/2020/07/23/windows-support-updates/","strippedHtml":"In this article, I would like to announce the new Windows support policy\nwhich was introduced in the Jenkins project in June 2020.\nThis policy sets an expectation about how we handle issues and patches related to Windows support for the Jenkins server and agents, and how we organize testing of Windows support in the project.\nWe will also talk about .NET Framework 2.0 support removal in Jenkins 2.248,\nand about new Windows service management features and fixes Jenkins users get with this release.\n\nFigure 1. Jenkins on Windows\n\nWhy?\n\nIn theory, Jenkins can run everywhere where you can run Java 8 or Java 11, but, in practice, there are some limitations.\nThe Jenkins core and some plugins contain native code, and hence they rely on operating systems and platforms.\nWe use Java Native Access and Java Native Runtime libraries which provide wide platform support for low-level operations,\nbut there are platform-specific cases not covered by such generic libraries.\nIn the case of Windows platforms we use Windows Service Wrapper (WinSW) and\nWindows Process Management Library (WinP).\nThese libraries depend on particular Windows API versions and, in the case of Windows services, on .NET Framework.\n\nHistorically Jenkins had no documented support policy for Windows,\nand we were accepting patches for all versions which existed since the Hudson inception in 2004.\nIt became a serious obstacle for Windows component maintainers who had to be very conservative about incoming patches so that we could avoid breaking instances running on old platforms.\nLack of testing for older platforms did not help either.\nAnd it is not just about maintenance overhead.\nUsers were impacted as well, because it blocked us from adopting some new Windows features and making Jenkins more stable/maintainable on modern platforms.\n\nNew policy\n\nTo set proper expectations about Windows support,\nin the new policy we defined four support levels.\nSee the Windows support policy page for the actual information about the support levels and the supported platforms.\nThis blogpost captures the support state as of Jul 23, 2020:\n\nLevel 1 - Full Support\n\nWe run automated testing for these platforms, and we intend to timely fix the reported issues.\nThis support level includes 64-bit (amd-64) Windows Server versions with the latest GA update pack,\nand versions used in the official Jenkins server and agent Docker images.\n\nLevel 2 - Supported\n\nWe do not actively test these platforms, but we intend to keep compatibility.\nWe are happy to accept patches.\nThis support level includes 64-bit (amd64) Windows Server and Windows 10 versions generally supported by Microsoft.\n\nLevel 3 - Patches considered\n\nThe platforms are generally expected to work, but they may have limitations and extra requirements.\nWe do not test compatibility, and we may drop support if needed.\nWe will consider patches if they do not put Level 1/2 platforms at risk and if they do not create maintenance overhead.\nThis support level includes non-amd64 platforms like x86 (32-bit) and AArch64 (Arm).\nIt also applies to non-mainstream release lines like Windows Embedded, preview releases, and versions no longer supported by Microsoft.\n\nLevel 4 - Unsupported\n\nThese versions are known to be incompatible or to have severe limitations.\nWe do not support the listed platforms, and we will not accept patches.\nAt the moment this level applies to platforms released before 2008.\n\nWhen the policy was introduced, there were questions raised about platforms listed in the Level 3 support category.\nFirst of all, these platforms are still supported.\nUsers are welcome to run Jenkins on these platforms.\nWe recognize the importance of the platforms listed there, and we intend to keep compatibility with them.\nAt the same time, particular functionality may break there due to the lack of testing when we update Jenkins or upstream dependencies.\nIt may take a while until a fix is submitted by a user or contributor,\nbecause we do not maintain development environments for these platforms.\nBy setting a Level 3 support level, we want to set an explicit expectation about those limitations.\n\nIf you are interested in expanding the official Windows support policy and adding more platforms there,\nwe invite you to participate in quality assurance of Jenkins.\nYou may contribute by expanding test automation for Jenkins,\ncontributing test environments for your platforms,\nor participating in the LTS release candidate testing and reporting results.\nPlease contact us via Platform SIG channels if you are interested.\n\nWindows Service Management changes in Jenkins 2.248\n\nFigure 2. WinSW Logo\n\nAlthough the policy was introduced more than 1 month ago,\nJenkins 2.248 is the first release where the new policy is applied.\nStarting from this release, we wonâ€™t support .NET Framework 2.0 for launching the Jenkins server or agents as Windows services.\n .NET Framework 4.0 or above is now required for using the default service management features.\n\nThis release also upgrades Windows Service Wrapper (WinSW) from 2.3.0 to 2.9.0 and replaces the bundled binary from .NET Framework 2.0 to 4.0.\nThere are many improvements and fixes in these versions,\nbig thanks to NextTurn and all other contributors.\nYou can find the full WinSW changelog here,\njust a few highlights important to Jenkins users:\n\nPrompt for permission elevation when administrative access is required.\nNow Jenkins users do not need to run the agent process as Administrator to install the agent as a service from GUI.\n\nEnable TLS 1.1/1.2 in .NET Framework 4.0 packages on Windows 7 and Windows Server 2008 R2.\n\nEnable strong cryptography when running .NET Framework 4.0 binaries on .NET 4.6.\n\nSupport security descriptor string in the Windows service definition.\n\nSupport 'If-Modified-Since' and proxy settings for automatic downloads.\n\nFix Runaway Process Killer extension so that it does not kill wrong processes with the same PID on startup.\n\nFix the default domain name in the serviceaccount parameter (jira:JENKINS-12660[])\n\nFix archiving of old logs in the roll-by-size-time mode.\n\nAs you may see, there are many improvements available with this version,\nand we hope that it will make Windows service installation even more reliable.\nSome of the changes in WinSW also replaced old workarounds in the Jenkins core,\nmaking the code more maintainable.\n\nUse-cases affected by .NET Framework 2.0 support removal\n\nIf you use .NET Framework 2.0 to run the Jenkins Windows services,\nthe following use-cases are likely to be affected:\n\nInstalling the Jenkins server as a Windows service from Web UI.\nThe official MSI Installer supports .NET Framework 2.0 for the moment, but it will be changed in future versions.\n\nInstalling agents as Windows services from GUI.\nThis feature is provided by in Windows Agent Installer Module from the Jenkins core.\n\nInstalling agents over Windows Management Instrumentation (WMI) via the WMI Windows Agents plugin\n\nAuto-updating of Windows service wrappers on agents installed from GUI.\n\nUpgrade guidelines\n\nIf all of your Jenkins server and agent instances already use .NET Framework 4.0 or above,\nthere are no special upgrade steps required.\nPlease enjoy the new features!\n\nIf you run the Jenkins server as a Windows Service with .NET Framework 2.0,\nthis instance will require an upgrade of .NET Framework to version 4.0 or above.\nWe recommend running with .NET Framework 4.6.1 or above,\nbecause this .NET version provides many platform features by default\n(e.g. TLS 1.2 encryption and strong cryptography),\nand Windows Service Wrapper does not have to apply custom workarounds.\n\nIf you want to continue running some of your agents with .NET Framework 2.0,\nthe following extra upgrade steps are required:\n\nDisable auto-upgrade of Windows Service Wrapper on agents by setting the\n-Dorg.jenkinsci.modules.windows_slave_installer.disableAutoUpdate=true flag on the Jenkins server side.\n\nUpgrade agents with .NET Framework 4.0+ by downloading the recent Windows Service Wrapper 2.x\nversion from WinSW GitHub Releases\nand manually replacing the wrapper \".exe\" files in the agent workspaces.\n\nWhatâ€™s next?\n\nWe plan to continue expanding the Windows support in Jenkins,\nincluding providing official Docker images for newer Windows versions.\nFor example, there is already a pull request which will introduce official agent images for Windows Server Core LTSC 2019 and\nfor Windows Server Core and Nano Server 1909.\nWe are also interested to keep expanding test coverage for Windows platforms.\nAny contributions and feedback will be appreciated!\n\nWe also keep working on improving Windows Services.\nBuddhika Chathuranga, a Google Summer of Code 2020 student, is working on support for YAML Configurations in Windows Service Wrapper,\nand on better verification of XML and YAML Configurations.\nSee the details on the project page and in the\nCoding Phase 1 Report.\nIn addition to that, there is ongoing work on a new Windows Service Wrapper 3.0 release which will redesign CLI and introduce a lot more improvements.\nIf you are interested in contributing to Windows Service Wrapper,\nsee the guidelines here.\nWe will also appreciate your feedback on the WinSW Gitter channel.","title":"Jenkins 2.248: Windows Support Updates","tags":["announcement","windows","platform","winsw"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"platform","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}