{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/helm",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-12-04T00:00:00.000Z","id":"7f63955e-c485-543c-8e96-4de3b98e74a9","slug":"/blog/2020/12/04/gsod-project-report/","strippedHtml":"Jenkins is the world’s leading open-source automation server used by companies large and small around the globe to implement continuous integration and continuous delivery.\nKubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.\nKubernetes is compatible with the majority of CI/CD tools which allow developers to run tests, deploy builds in Kubernetes and update applications with no downtime.\nOne of the most popular CI/CD tools now is Jenkins thereby making Jenkins on Kubernetes a popular theme for Jenkins users.\n\nDuring the Google Season Of Docs program, I worked with the Jenkins organization on the project - Document Jenkins on Kubernetes.\nThe original proposal for this project can be found here.\n\nProject Goals\n\nAfter my proposal was accepted by the Jenkins organization, my mentors and I agreed on the expectations for the Google Season of Docs project.\nThe goal of this project was to create a new Kubernetes Volume which would describe the concepts, techniques, and choices for Kubernetes users running Jenkins thereby providing the following advantages:\n\nImprove the user experience of Jenkins on Kubernetes users by giving them a one-stop-shop for information on Jenkins on Kubernetes.\n\nMake it easy to track, update and maintain information on Jenkins on Kubernetes\n\nReference the existing community documentation for Jenkins on K8s (plugins and tools/integrations).\n\nHow to guides, tutorials and explanations of concepts and techniques in Jenkins on Kubernetes.\n\nJust-In-Time documentation which means that rather than documenting every feature comprehensively, we produce and release documentation in bits but continuously based on popular questions, feedback and area of interests gathered from the community and users.\n\nCommunity Bonding: Planning the solution\n\nFind below an outline of my activities during the community bonding phase:\n\nSetting up communication channels: meetings, mailings, chats: My mentors and I agreed on the right time and channel for communication due to time difference.\nWe agreed to meet twice weekly, on Mondays and Thursdays at 7:00 PM GMT +1 and use Jenkins documentation gitter channel for other communications.\n\nContacting Stakeholders and onboarding contributors: The project was  announced on social media and different Jenkins channels.\nI wrote a blog post to announce the project and created a project page on Jenkins.io.\n\nKnowledge transfer: I and my mentors planned knowledge sharing sessions and fixed tentative dates based on the availability of the trainers.\nMy mentors also shared useful resources to help me prepare for the project.\n\nGetting permissions: I and my mentors agreed I didn’t need any special permissions from the beginning, however, this topic was left open for discussion if the need arose later on in the project.\n\nPre-planning of the project: I refined my goals and set expectations with my mentor and also learned more about the community(Jenkins).\nI also had to ensure that the proposed documentation structure I drafted was in line with the goals of the organization so my mentors vetted it and we finalized on the proposed sections that I was supposed to work on.\n\nDocumentation Development Phase\n\nKnowledge Sharing Sessions\n\nDuring the development phase, my mentors hosted two knowledge sharing sessions:\n\nKatacoda and Helm by Marky Jackson\n\nSee the slides\n\nHelm by Torsten Walter\n\nSee the slides\n\nThese sessions gave me an in-depth understanding of concepts and tools needed for the project.\n\nJenkins on Kubernetes Documentation Skeleton\n\nAt the application phase, I drafted a structure describing the proposed Jenkins on Kubernetes section.\nMy intention was to use it as a guide during the implementation phase of the project, but when the development phase kicked off, my mentors and I thought of a better approach to creating a new Jenkins on Kubernetes section which was to add the Jenkins on Kubernetes contents to existing related sections for easier navigation and better user experience.\nAn example of this approach would be creating the Installing Jenkins on Kubernetes section under the Installing Jenkins section rather than putting it under an entirely new section.\nWith this new approach, I was assigned a task to create a skeleton with all the proposed Jenkins on Kubernetes sections on Jenkins.io and mark these sections as\nWork In Progress (WIP).\nThe Plan was to use this skeleton as a guide throughout the GSOD Project.\nThe Jenkins on Kubernetes skeleton PR can be found here.\n\nDocumenting Jenkins on Kubernetes\n\nWhile working on this project, I had to do a lot of research and test all the documented steps locally before pushing the documentation out for review.\nI also made sure to use updated terms and terminologies where necessary like Controller instead of Master and Agents instead of Slave.\n\nDuring the documentation phase, I was able to work on documenting Installing Jenkins on Kubernetes with three sections Helm, Set of Yaml files and Jenkins Operator.\nI also worked on creating a directory for Jenkins on kubernetes sample files in Jenkins.io repository, documenting Scaling Jenkins on Kubernetes and Jenkins on AWS which is still in progress.\n\nWork Done\n\nPull Requests : All the pull requests I submitted to Jenkins.io documentation can be found here.\nThis spreadsheet contains links to the published documentation on Jenkins.io.\nThe spreadsheet also highlights the initial proposed tasks and the status of each of them.\n\nIf you would like to contribute to the Jenkins on Kubernetes documentation, you can check out pending tasks here and reach out in the Jenkins documentation gitter channel.\n\nChallenges\n\nUsing a Windows computer was a bit of a challenge for me.\nTo run Jenkins.io locally, the project uses GNU/Make and Docker in order to generate the fully statically generated jenkins.io web site.\nThe key tool for converting source code into the site is the Awestruct static site generator, which is downloaded automatically as part of the build process.\nTo achieve this, I needed to have GNU/Make and Docker available on my machine.\nDocker was not a problem, but to achieve the latter, I needed to use Windows Subsystem for Linux (WSL).\nWSL had two versions WSL1 and WSL2. Using WSL2 would have been much more convenient, but my version of windows wasn’t compatible with WSL2 as it required Version 1903 or higher, with Build 18362 or higher for x64 systems.\nWith this obstacle, I had to stick to making WSL1 work but I still couldn’t get this to work, a series of issues came up which I was able to pass through with the help of my mentors until I got stuck at permission issues.\nI raised the issue with my mentor and after looking through the issue with me and trying to solve it to no avail, he suggested setting up an Ubuntu VM in Hyper-V.\nThis article helped me achieve this and that solved my problem.\n\nWhat did I learn?\n\nI learned a lot more about the Jenkins project, Kubernetes, helm package manager, Jenkins Operator and much more.\nThis project also gave me the opportunity to work with cloud providers like AWS which was totally new to me and also learn from field experts through knowledge sharing sessions and weekly meetings with my mentors and org admin.\nMy technical writing skill and communication skill have definitely become better and I owe it to this project.\n\nOverall, contributing to the Jenkins.io project is an amazing experience for me.\nI have been using Jenkins, and the fact that I was able to contribute to the organization and collaborate with the community is an honor.","title":"GSOD Project Report: Document Jenkins on Kubernetes","tags":["kubernetes","helm","documentation","gsod","gsod2020"],"authors":[{"avatar":null,"blog":null,"github":"zaycodes","html":"<div class=\"paragraph\">\n<p>Zainab is a software developer and technical writer who is passionate about contributing to open source, improving technical documentation and advocating for gender diversity in open source collaboration. She started contributing to Jenkins documentation during the technical writer exploration phase for <a href=\"https://developers.google.com/season-of-docs\">Google Season of Docs</a> 2020, and is currently working on <a href=\"/sigs/docs/#jenkins-on-kubernetes\">Documentation for Jenkins on Kubernetes</a>.</p>\n</div>","id":"zaycodes","irc":null,"linkedin":"zaycodes","name":"Zainab Abubakar","slug":"/blog/authors/zaycodes","twitter":"zaycodes"}]}},{"node":{"date":"2020-11-05T00:00:00.000Z","id":"048474b0-1674-5ecc-b72f-376e9c14e52a","slug":"/blog/2020/11/05/installing-jenkins-on-kubernetes/","strippedHtml":"We are super excited to announce that the Document Jenkins on Kubernetes Project recently merged its first PR into Jenkins.io.\nThis PR adds a new Kubernetes section to the existing Installing Jenkins chapter of Jenkins.io.\n\nThis new section describes two options to install/run Jenkins on Kubernetes, how to setup a minikube cluster on which to run your Jenkins deployment and finally a bonus segment that explains some Post-installation setups such as unlocking Jenkins, customizing Jenkins with plugins and creating your first administrator user.\n\nThe first installation option covered in this section is helm a package manager for Kubernetes whose package format is called a chart. The helm section covers the prerequisites for installing Jenkins on Kubernetes using Helm, installing and configuring helm, creating a persistent volume and service account, and finally, Installing Jenkins.\n\nThe second option describes how to install Jenkins using a set of yaml files.\nThis section explains how to create a Jenkins deployment file, Deploy Jenkins, grant access to jenkins service, and finally access your Jenkins dashboard after installation.\n\nSplitting the Installing Jenkins Chapter\n\nThe addition of the Kubernetes section highlighted a long-standing challenge with the Installing Jenkins chapter.\nIt was too long and contained too many topics, making it difficult and unpleasant for\nmost users to navigate.\nTo top the icing on the cake and further improve the experience on Jenkins documentation users, another PR was merged into Jenkins.io to split the Installing Jenkins chapter into smaller chapters for better separation of concerns and easy navigation. This PR also redirects bookmarks that linked to the previous locations like https://www.jenkins.io/doc/book/installing/#debianubuntu using Javascript.\n\nThe image above is a snapshot of what the Installing Jenkins chapter looked like before the PR.\nAll sections of this chapter such as docker, Kubernetes and others were lumped up on the same page making it too long with so much information thereby making it difficult to navigate or even find information on this page.\n\nThis snapshot shows what the Installing Jenkins chapter looks like after the PR.\nWith this chapter split into smaller sections, it’s neater, clearer and most importantly easier to navigate to the section of interest without having to scroll through so much information that’s not necessarily needed.\n\nTesting, Participating and Contributing\n\nThe Jenkins Community invites the general public to try out these documentation updates and give feedback to help us further improve the documentation.\nIf you have any feedback, suggestions, or would like to contribute to the Jenkins on Kubernetes project,  drop a message indicating your interest in the Jenkins documentation Gitter channel.\nYou can also find the Google season of docs office hour notes and recordings for Jenkins on Kubernetes here.\nGSOD office hours take place twice a week on Mondays and Thursdays between 6 pm GMT+1 and 7 pm GMT+1, if you would like to be part of these meetings, you can indicate interest in the Jenkins Documentation Gitter channel and we would be happy to have you.\n\nAdditional Resources\n\nInstalling Jenkins on Kubernetes PR\n\nSplitting Installing Jenkins Chapter PR\n\nDocument Jenkins on Kubernetes Project\n\nGSoD Proposal\n\nGSoD Office Hours Notes\n\nGoogle Season of Docs - Startup\n\nGoogle Season of Docs on jenkins.io\n\nDocs SIG for Google Season of Docs startup ( video)","title":"Document Jenkins on Kubernetes: Installing Jenkins on Kubernetes Documentation Release","tags":["kubernetes","helm","documentation","gsod","gsod2020"],"authors":[{"avatar":null,"blog":null,"github":"zaycodes","html":"<div class=\"paragraph\">\n<p>Zainab is a software developer and technical writer who is passionate about contributing to open source, improving technical documentation and advocating for gender diversity in open source collaboration. She started contributing to Jenkins documentation during the technical writer exploration phase for <a href=\"https://developers.google.com/season-of-docs\">Google Season of Docs</a> 2020, and is currently working on <a href=\"/sigs/docs/#jenkins-on-kubernetes\">Documentation for Jenkins on Kubernetes</a>.</p>\n</div>","id":"zaycodes","irc":null,"linkedin":"zaycodes","name":"Zainab Abubakar","slug":"/blog/authors/zaycodes","twitter":"zaycodes"}]}},{"node":{"date":"2019-08-19T00:00:00.000Z","id":"a8a6f50d-13d8-5ff0-b148-cd0ef7696ecf","slug":"/blog/2019/08/19/remoting-kafka-kubernetes-release-2.0/","strippedHtml":"I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. After a successful Phase 1, finally the 2.0 version of the plugin has been released. The 2.0 version provides seamless integration with Kubernetes environment.\n\n2.0 version features\n\nStart a simple Apache Kafka server in Kubernetes.\n\nDynamically provision Remoting Kafka Agent in Kubernetes.\n\nHelm chart to bootstrap the whole system in Kubernetes.\n\nStart a simple Apache Kafka server in Kubernetes\n\nUse of the plugin requires that users have a configured Apache Zookeeper and Apache Kafka server, which could be intimidating for people who just want to try out the plugin. Now, users can start a simple, single-node Apache Kafka server in Kubernetes environment with just one button click.\n\nOn the Global Configuration page, users can input Kubernetes server information and credentials. When users click Start Kafka on Kubernetes button, Jenkins will create a Kubernetes client from the information and then apply Apache Zookeeper and Apache Kafka YAML specification files from resources. After downloading images and creating containers, it will automatically update Apache Zookeeper and Apache Kafka URLs into respective fields.\n\nDynamically provision Remoting Kafka Agent in Kubernetes\n\nWith previous version, users have to manually add/remove nodes so it is hard to scale builds quickly. Kubernetes plugin allows us to dynamically provision agents in Kubernetes but it is designed for JNLP agent. With this new version, Remoting Kafka agent can also be provisioned automatically in Kubernetes environment.\n\nUsers can find the new feature in Cloud section in /configure. Here users could input Kubernetes connection parameters and desired Remoting Kafka agent properties including labels. When new build with matching labels gets started and there are no free nodes, Cloud will automatically provision Remoting Kafka agent pod in Kubernetes to run the build.\n\nHelm Chart\n\nHelm chart for Remoting over Apache Kafka plugin is based on stable/jenkins chart and incubator/kafka chart. You can follow the instruction here to install a demo ready-to-use Helm release. Your kubectl get all should look like this:\n\nNAME                                READY   STATUS    RESTARTS   AGE\npod/demo-jenkins-64dbd87987-bmndf   1/1     Running   0          2m21s\npod/demo-kafka-0                    1/1     Running   0          2m21s\npod/demo-zookeeper-0                1/1     Running   0          2m21s\n\nNAME                              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\nservice/demo-jenkins              NodePort    10.108.238.56 8080:30386/TCP               2m21s\nservice/demo-jenkins-agent        ClusterIP   10.98.85.184 50000/TCP                    2m21s\nservice/demo-kafka                ClusterIP   10.109.231.58 9092/TCP                     2m21s\nservice/demo-kafka-headless       ClusterIP   None 9092/TCP                     2m21s\nservice/demo-zookeeper            ClusterIP   10.103.2.231 2181/TCP                     2m21s\nservice/demo-zookeeper-headless   ClusterIP   None 2181/TCP,3888/TCP,2888/TCP   2m21s\n\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/demo-jenkins   1/1     1            1           2m21s\n\nNAME                                      DESIRED   CURRENT   READY   AGE\nreplicaset.apps/demo-jenkins-64dbd87987   1         1         1       2m21s\n\nNAME                              READY   AGE\nstatefulset.apps/demo-kafka       1/1     2m21s\nstatefulset.apps/demo-zookeeper   1/1     2m21s\n\nHow to Contribute\n\nYou are welcome to try out the plugin and integrate it into your current setup. If you find out any bug or if you would like to request new feature, you can create ticket at JIRA. If you would like to contribute code directly, you can create pull requests in the GitHub page below.\n\nLinks\n\nPhase 2 Demo Video\n\nPhase 2 Presentation Slides\n\nPhase 1 Blog Post\n\nPhase 1 Demo Video\n\nPhase 1 Presentation Slides\n\nRemoting over Apache Kafka plugin source code\n\nProject Page\n\nGitter Channel","title":"Remoting over Apache Kafka 2.0: Built-in Kubernetes support","tags":["remoting","kafka","kubernetes","helm","plugin","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg","srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/77b35/longnguyen.jpg 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/d4a57/longnguyen.jpg 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/68974/longnguyen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/ef6ff/longnguyen.webp 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/8257c/longnguyen.webp 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/6766a/longnguyen.webp 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/22bfc/longnguyen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/longnguyen.jpg"},"blog":null,"github":"longngn","html":"<div class=\"paragraph\">\n<p>Long is a Software Engineering student at FPT University, Vietnam. He started to contribute for Jenkins from Google Summer of Code 2019 for the project <a href=\"https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/\">Remoting over Apache Kafka with Kubernetes features</a></p>\n</div>","id":"longnguyen","irc":null,"linkedin":null,"name":"Long Nguyen","slug":"/blog/authors/longnguyen","twitter":null}]}},{"node":{"date":"2019-07-11T00:00:00.000Z","id":"0f6a7c3f-b06c-5c30-a7c4-31c396c5fecf","slug":"/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/","strippedHtml":"I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. This is the first time I have contributed for Jenkins and I am very excited to announce the features that have been done in Phase 1.\n\nProject Introduction\n\nCurrent version of Remoting over Apache Kafka plugin requires users to manually configure the entire system which includes Zookeeper, Kafka and remoting agents. It also doesn’t support dynamic agent provisioning so scalability is harder to achieve. My project aims to solve two problems:\n\nOut-of-the-box solution to provision Apache Kafka cluster.\n\nDynamic agent provisioning in a Kubernetes cluster.\n\nCurrent State\n\nKubernetes connector with credentials supported.\n\nApache Kafka provisioning in Kubernetes feature is fully implemented.\n\nHelm chart is partially implemented.\n\nApache Kafka provisioning in Kubernetes\n\nThis feature is part of 2.0 version so it is not yet released officially. You can try out the feature by using the Experimental Update Center to update to 2.0.0-alpha version or building directly from master branch:\n\ngit clone https://github.com/jenkinsci/remoting-kafka-plugin.git\ncd remoting-kafka-plugin/plugin\nmvn hpi:run\n\nOn the Global Configuration page, users can input Kubernetes server information and credentials. Then they can start Apache Kafka with only one button click.\n\nWhen users click Start Kafka on Kubernetes button, Jenkins will create a Kubernetes client from the information and then apply Zookeeper and Kafka YAML specification files from resources.\n\nHelm Chart\n\nHelm chart for Remoting over Apache Kafka plugin is based on stable/jenkins chart and incubator/kafka chart. As of now, the chart is still a Work in Progress because it is still waiting for Cloud API implementation in Phase 2. However, you can check out the demo chart with a single standalone Remoting Kafka Agent:\n\ngit clone -b demo-helm-phase-1 https://github.com/longngn/remoting-kafka-plugin.git\ncd remoting-kafka-plugin\nK8S_NODE=./helm/jenkins-remoting-kafka/do.sh start\n\nThe command do.sh start will do the following steps:\n\nInstall the chart (with Jenkins and Kafka).\n\nLaunch a Kafka computer on Jenkins controller by applying the following JCasC.\n\njenkins:\n  nodes:\n    - permanent:\n        name: \"test\"\n        remoteFS: \"/home/jenkins\"\n        launcher:\n          kafka: {}\n\nLaunch a single Remoting Kafka Agent pod.\n\nYou can check the chart state by running kubectl, for example:\n\n$ kubectl get all -n demo-helm\nNAME                                    READY   STATUS    RESTARTS   AGE\npod/demo-jenkins-998bcdfd4-tjmjs        2/2     Running   0          6m30s\npod/demo-jenkins-remoting-kafka-agent   1/1     Running   0          4m10s\npod/demo-kafka-0                        1/1     Running   0          6m30s\npod/demo-zookeeper-0                    1/1     Running   0          6m30s\n\nNAME                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE\nservice/demo-0-external           NodePort    10.106.254.187 19092:31090/TCP              6m30s\nservice/demo-jenkins              NodePort    10.101.84.33 8080:31465/TCP               6m31s\nservice/demo-jenkins-agent        ClusterIP   10.97.169.65 50000/TCP                    6m31s\nservice/demo-kafka                ClusterIP   10.106.248.10 9092/TCP                     6m30s\nservice/demo-kafka-headless       ClusterIP   None 9092/TCP                     6m30s\nservice/demo-zookeeper            ClusterIP   10.109.222.63 2181/TCP                     6m30s\nservice/demo-zookeeper-headless   ClusterIP   None 2181/TCP,3888/TCP,2888/TCP   6m31s\n\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/demo-jenkins   1/1     1            1           6m30s\n\nNAME                                     DESIRED   CURRENT   READY   AGE\nreplicaset.apps/demo-jenkins-998bcdfd4   1         1         1       6m30s\n\nNAME                              READY   AGE\nstatefulset.apps/demo-kafka       1/1     6m30s\nstatefulset.apps/demo-zookeeper   1/1     6m30s\n\nNext Phase Plan\n\nImplement Cloud API to provision Remoting Kafka Agent. ( JENKINS-57668)\n\nIntegrate Cloud API implementation with Helm chart. ( JENKINS-58288)\n\nUnit tests and integration tests.\n\nRelease version 2.0 and address feedbacks. ( JENKINS-58289)\n\nLinks\n\nPhase 1 Demo Video\n\nPhase 1 Presentation Slides\n\nRemoting over Apache Kafka plugin\n\nProject Page\n\nGitter Channel","title":"Remoting over Apache Kafka plugin with Kafka launcher in Kubernetes","tags":["remoting","kafka","kubernetes","helm","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg","srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/77b35/longnguyen.jpg 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/d4a57/longnguyen.jpg 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/68974/longnguyen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/ef6ff/longnguyen.webp 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/8257c/longnguyen.webp 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/6766a/longnguyen.webp 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/22bfc/longnguyen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/longnguyen.jpg"},"blog":null,"github":"longngn","html":"<div class=\"paragraph\">\n<p>Long is a Software Engineering student at FPT University, Vietnam. He started to contribute for Jenkins from Google Summer of Code 2019 for the project <a href=\"https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/\">Remoting over Apache Kafka with Kubernetes features</a></p>\n</div>","id":"longnguyen","irc":null,"linkedin":null,"name":"Long Nguyen","slug":"/blog/authors/longnguyen","twitter":null}]}}]}},"pageContext":{"tag":"helm","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}