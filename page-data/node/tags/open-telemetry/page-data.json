{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/open-telemetry",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-07-31T00:00:00.000Z","id":"eb573050-2c0c-527f-ab2c-3da89d375c1d","slug":"/blog/2021/07/31/remoting-monitoring-phase-1/","strippedHtml":"Goal\n\nThe goal of this project:\n\ncollect telemetry data(metrics, traces, logs) of remoting module with\nOpenTelemetry.\n\nsend the telemetry data to OpenTelemetry Protocol endpoint\n\nWhich OpenTelemetry endpoint to use and how to visualize the data are up to\nusers.\n\nOpenTelemetry\n\nAn observability framework for cloud-native software\n\nOpenTelemetry is a collection of tools, APIs, and SDKs.\nYou can use it to instrument, generate, collect, and export telemetry\ndata(metrics, logs, and traces) for analysis in order to understand your\nsoftware’s performance and behavior.\n\nPhase 1 summary\n\nUser survey\n\nOur team conducted a user survey to understand the pain point regarding Jenkins\nremoting.\n\nFig 1. What agent type/plugins do you use?\n\nFig 1 shows what types of agent users use, and 17 unique respondents out of\n28 use docker for agent. So I’m planning to publish a docker image to\ndemonstrate how we can build Docker image with our monitoring feature.\n\nThis survey and investigation of JIRA tickets of past two years also tell me five\ncommon causes of agent unavailability.\n\nConfiguration mistakes\n\nJenkins agent settings, e.g. misuse of \"tunnel connection through\" option.\n\nPlatform settings, e.g. invalid port setting of Kubernetes' helm template.\n\nNetwork settings, e.g. Load balancer misconfiguration.\n\nUncontrolled shutdown of nodes for downscaling.\n\nTimeout during provisioning a new node.\n\nFirewall, antivirus software or other network component kill the connection\n\nLack of hardware resources, e.g. memory, temp space, etc…​\n\nWe also heard valuable user voice in the survey.\n\nWhat areas would you like to see better in Jenkins monitoring?\n\nI have created a bunch of adhoc monitoring jobs to check on the agent’s health\nand send e-mail. Would be nice to have this consolidated.\n\nHaving archive of nodes with the access to their logs/events would have been\nnice.\n\nI hope that implementing these feature with OpenTelemetry, which is expected to\nbecome the industry standard for observability, will bring great monitoring\nexperience to Jenkins community.\n\nProof of Concept\n\nHow to deliver the monitoring program to agents\n\n1. Sending monitoring program to the agent over remoting\n\nIn my first implementation, I prepared a Jenkins plugin and send the\nmonitoring program from Jenkins controller. However, this approach have\nfollowing disadvantages.\n\nWe cannot collect telemetry data before the initial connection.\nWe are likely to encounter a problem while provisioning a new node,\nso it’s important to observe agents' telemetry data from the beginning.\n\nSome agent restarters (e.g. UnixSlaveRestarter)\nrestart agent completely when reconnecting. It means that the agent lost\nmonitoring program every time the connection closed, and we cannot collect\ntelemetry data after the connection is lost before a new connection is\nestablished.\n\nSo we decided to take the next approach.\n\n2. Install monitoring engine when provisioning a new agent\n\nIn this approach, user will download the monitoring program called monitoring\nengine, which is a JAR file, and place it in the agent node when provisioning.\n\nHow to instrument remoting to produce remoting trace\n\nAdd instrumentation extension point to remoting\n\nPull Request: https://github.com/jenkinsci/remoting/pull/471\n\nThis approach makes the agent launch command more complicated,\nand we have to overcome this problem.\n\nCurrent State\n\nMetrics\n\nWe currently support the following metrics and planning to support more.\n\nmetrics\nunit\nlabel\nkey\ndescription\n\nsystem.cpu.load\n1\n\nSystem CPU load. See com.sun.management.OperatingSystemMXBean.getSystemCpuLoad\n\nsystem.cpu.load.average.1m\n\nSystem CPU load average 1 minute See java.lang.management.OperatingSystemMXBean.getSystemLoadAverage\n\nsystem.memory.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize\n\nsystem.memory.utilization\n1\n\nSystem memory utilization,\nsee com.sun.management.OperatingSystemMXBean.getTotalPhysicalMemorySize\nand com.sun.management.OperatingSystemMXBean.getFreePhysicalMemorySize.\nReport 0% if no physical memory is discovered by the JVM.\n\nsystem.paging.usage\nbytes\nstate\nused, free\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\n\nsystem.paging.utilization\n1\n\nsee com.sun.management.OperatingSystemMXBean.getFreeSwapSpaceSize\nand com.sun.management.OperatingSystemMXBean.getTotalSwapSpaceSize.\nReport 0% if no swap memory is discovered by the JVM.\n\nprocess.cpu.load\n%\n\nProcess CPU load. See com.sun.management.OperatingSystemMXBean.getProcessCpuLoad.\n\nprocess.cpu.time\nns\n\nProcess CPU time. See com.sun.management.OperatingSystemMXBean.getProcessCpuTime.\n\nruntime.jvm.memory.area\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\narea\nheap, non_heap\n\nruntime.jvm.memory.pool\nbytes\ntype\nused, committed, max\nsee MemoryUsage\n\npool\nPS Eden Space, G1 Old Gen…​\n\nruntime.jvm.gc.time\nms\ngc\nG1 Young Generation, G1 Old Generation, …​\nsee GarbageCollectorMXBean\n\nruntime.jvm.gc.count\n1\ngc\nG1 Young Generation, G1 Old Generation, …​\nsee GarbageCollectorMXBean\n\nTraces\n\nWe tried several approaches to instrument remoting module, but good approach is not established yet.\n\nHere is a draft documentation of the spans to collect. Google Doc\n\nLogs\n\nComing soon!\n\nMetric and span demo visualization\n\nOur team created a demo example with Docker compose and visualized the metrics and spans.\n\nClick to open in new tab\n\nGoogle Summer of Code Midterm Demo\n\nOur project demo starts with 8:20\n\nNext Step\n\nLog support\n\nAlpha release!","title":"Remoting Monitoring with OpenTelemetry - Coding Phase 1","tags":["gsoc","gsoc2021","remoting","open-telemetry"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"Aki-7","html":"<div class=\"paragraph\">\n<p>GSoC 2021 student (Jenkins Remoting Monitoring). Akihiro is a student in the Department of information and communication engineering at the University of Tokyo.</p>\n</div>","id":"aki-7","irc":null,"linkedin":null,"name":"Akihiro Kiuchi","slug":"blog/author/aki-7","twitter":null}]}}]}},"pageContext":{"tag":"open-telemetry","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}