{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/workflow",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2015-12-21T00:00:00.000Z","id":"7ab2189c-9e15-5a58-9230-a1a13f92071b","slug":"/blog/2015/12/21/december-jam-world-tour-toulouse-france/","strippedHtml":"On December 15, the Toulouse\nJAM\nwas co-hosted with the Toulouse\nJUG and Toulouse\nDevOps. Indeed it made sense since Jenkins is\nwritten in Java, makes use of Groovy code in many places (system groovy script,\njob dsl, workflow…​), and it also made sense to co-organize with the local\nDevOps community since Jenkins is also a great tool to enable Continuous\nIntegration, Continuous Delivery and automation in general. There were 103\nRSVPs, with 80 to 90 people in attendance.\n\nThere were 3 talks planned for the evening:\n\nJob DSL\nIntro [fr], by Ghislain Mahieux\n\nVideo recording\n\nWorkflow plugin [fr], by Michaël Pailloncy (co-maintainer of the Build Trigger Badge plugin)\n\nVideo recording\n\nFeedback on almost 10 years of CI and what’s upcoming [fr], demo with Jenkins build scaling with Docker Swarm, by Baptiste Mathus\n\nVideo recording\n\nPhotos can be found here","title":"December JAM World Tour: Toulouse, France","tags":["general","meetup","jenkinsci","pipeline","workflow"],"authors":[]}},{"node":{"date":"2015-12-16T00:00:00.000Z","id":"c4dd7873-a1dc-5a87-918b-4c7455812df3","slug":"/blog/2015/12/16/workflow-best-practices-and-examples-repo-on-github/","strippedHtml":"A lot of people are using the Workflow plugin, but as with any scripting environment, users often have to start from scratch and learn the same lessons and shortcuts that other users have already learned. While there are blog posts from developers and users in various places, and some samples in the Workflow plugin documentation, more examples and tips and tricks are always, always useful. To help with that, we’ve created the workflow-examples repository on GitHub, as a place to store community-developed Workflow scripts that can help new users get started, show how to accomplish some non-trivial goals, and find tips and trick for taking your Workflow pipeline to the next level.\n\nThe repository has four directories:\n\ndocs/ - documentation, guides, and more. Including a Best Practices document. We’d love to see more contributions to that doc, as well as any new ones that would be helpful to Workflow users!\n\nworkflow-examples/ - general Workflow examples, showing how to use a given plugin with Workflow, quirks of the Workflow DSL syntax, and more.\n\nglobal-library-examples/ - examples of how to write code for the Workflow global library.\n\njenkinsfile-examples/ - Sample Jenkinsfiles or other Workflow scripts from SCM .\n\nDuring Hacksgiving some initial content was added, but not everything is covered yet, which is why I’m posting this - more is needed. We’d love to see your tips, examples, gotchas and more. If you’ve got Workflow scripts you’d like to contribute, please read the README and send a pull request. Thanks!","title":"Workflow Best Practices and Examples repo on GitHub","tags":["general","jenkinsci","pipeline","workflow"],"authors":[]}},{"node":{"date":"2015-12-03T00:00:00.000Z","id":"51e550d9-2ab9-5be8-be79-96bef6d8ca1a","slug":"/blog/2015/12/03/pipeline-as-code-with-multibranch-workflows-in-jenkins/","strippedHtml":"Note: This is a guest post by Kishore Bhatia. Kishore works for CloudBees, building custom frameworks with Open Source software and helping customers solve engineering problems around continuous delivery and DevOps at scale.\n\nThis year some great new Jenkins features came out of the butler’s goodie bag - amongst them, the most important one being the ability to realize continuous delivery pipeline as code!\nThe features like Workflow Multibranch, pipeline-as-code (with a marker file that Jenkins looks for in your application’s SCM repository/branch, aptly named Jenkinsfile) are the foundations to making Jenkins super intelligent to automagically create workflows (rather, a CI/CD pipeline) to build your code and orchestrate the work required to drive your application from concept to delivery!\n\nOverview\n\nThe Workflow Multibranch feature (provided by the workflow plugin) provides the following key abilities:\n\nAutomatic Workflow (job) creation in Jenkins per new branch in the repo (assuming webhooks are registered from GH to Jenkins).\n\nBuild specific to that child-branch and its unique scm change and build history.\n\nAutomatic job pruning/deletion for branches deleted from the repository, according to the settings.\n\nFlexibility to individually configure branch properties, by overriding the parent properties, if required.\n\nJenkins pipeline-as-code (concept) enables you to maintain your CI/CD workflow logic in the project/application source code repo with no additional configuration to be maintained per branch in Jenkins.\n\nThe Workflow script to build/test/deploy your code is always synchronized with the rest of the source code you are working on.\n\nTo demonstrate the concept here - Let’s use a basic Java Web application project with a Maven pom.xml as shown in the structure below (this is using GitHub as the SCM but you can do this on SVN or Mercurial too).\n\nThis project has a marker file for Jenkins in the repo - Jenkinsfile. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic1.png\n\nSo, what’s a Jenkinsfile? The Jenkinsfile is essentially your Jenkins Workflow, a script, that defines the CI/CD pipeline logic for a project with steps to build/test/deploy etc. captured in various stages.\n\nSo for our sample Java web application, a basic Jenkinsfile could be something like -\n\nnode {\n   // Mark the code checkout 'stage'....\n   stage 'Checkout'\n\n   // Checkout code from repository\n   checkout scm\n\n   // Get the maven tool.\n   // ** NOTE: This 'M3' maven tool must be configured\n   // **       in the global configuration.\n   def mvnHome = tool 'M3'\n\n   // Mark the code build 'stage'....\n   stage 'Build'\n   // Run the maven build\n   sh \"${mvnHome}/bin/mvn clean install\"\n}\n\nJust having this file in the source code repo root would mean that -\n\nJenkins will automatically recognize this branch and create appropriate jobs by itself.\n\nQuick, 1-step code checkout using: “checkout scm” in your workflow\n\nEvery time a new change is pushed to this branch, the branch is built and the commit status gets updated.\n\nWhen the branch is destroyed in the repository, or if Jenkinsfile is removed, the corresponding job gets destroyed from Jenkins automatically ( You can retain these jobs and/or archive the builds for audit/compliance requirements using the retention property - Orphan Item strategy)\n\nthere are various mechanisms to promote reuse of Workflow scripts, such as the Workflow Global Library.\n\nRequired Jenkins configuration\n\nMake sure you’ve the latest Workflow and (v1.11 as of writing this blog) Workflow Multibranch plugins installed on your Jenkins instance image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic2.png\n\nAlso, ensure that other dependencies, like SCM plugins and build tools, are met:\n\nEither SVN/Git/Mercurial (depending on your SCM)\n\nGitHub Branch Source Plugin (optimized to use the GitHub API and improve performance)\n\nMaven build tool\n\nFinally, make sure you’ve created the required Webhook from your SCM (Github in this case) to Jenkins.\nHere’s how to do that:\n\nSetting up GitHub Webhooks in Jenkins\n\nStep-by-step guide to setting up Jenkins for GitHub projects\n\nThen create a new Multibranch Workflow Job with configuration as shown below - mainly selecting the Branch Sources (Git, in this example) and providing the branch/repo URL with credentials.\n\nBranch sources (Git) - https://github.com/kishorebhatia/pipeline-as-code-demo (or a repo where you’ve cloned this source code with Jenkinsfile)\n\nLeave all other properties default and Save. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic3.png\n\nYou’ll observe that Jenkins would perform Branch Indexing on that “cd” job folder and start the workflow for the master branch, with an automatically created new job, named master, under the “cd” folder.\n\nThe workflow does a dummy step for application deploys to the environments in this sequence Staging -> Waits for manual approval -> PROD\n\nNow, let’s create a new branch off of this master branch in your cloned git repo:\n\n$ git branch newBranch (create a newBranch)\n\n$ git checkout newBranch (switches to newBranch)\n\n$ git push --set-upstream origin newBranch (pushes newBranch)\n\nYou’ll observe that your Jenkins instance automatically picks up this newBranch and starts running the workflow (with the Jenkinsfile in this newBranch) to build/test/deploy the code. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic4.png\n\nNext, if you now delete this newBranch ( git branch -D newBranch), Jenkins will automatically remove the orphan Workflow job for newBranch. You can retain these jobs even after the branches are deleted using the Orphaned Item Strategy property in the main \"cd\" job’s configuration.\n\nSo we observed the following benefits of this pipeline-as-code approach:\n\nOverall job definition is a script (Jenkinsfile)\n\nCalls your build tools and scripts for details\n\nThe build script can be versioned alongside project sources\n\nJenkins handles feature/experimental branches automatically\n\nKeep less configuration in $JENKINS_HOME\n\nDockerized Demo environment\n\nYou can also use the following docker image to run this demo with a preconfigured Jenkins environment and the sample job: jenkinsci/workflow-demo (i.e. docker pull jenkinsci/workflow-demo)\n\nThis docker container includes Jenkins with Workflow and Workflow Multibranch plugins, a local git repo with the aforementioned Java web application and Jetty to demonstrate a continuous delivery pipeline of this application deployed and tested across multiple environments in the pipeline with an approval gate before promoting to PROD (like QA, Staging and PROD).\n\nThere’s a \"cd\" job pre-configured as a multibranch Workflow job.\n\nLaunch the docker demo as: docker run -p 8080:8080 -p 8081:8081 -p 9418:9418 -ti jenkinsci/workflow-demo\n\nNow, you can access Jenkins on port 8080 and Jetty on port 8081 from localhost or the IP of your boot2docker/docker-machine environment.\n\nThe demo container has a local git repo so you can clone: git://localhost/repo. When creating new branches, each branch automatically creates a matching subproject in Jenkins and triggers the build for that branch. The workflow:\n\nChecks out source code from the same repository and commit as Jenkinsfile.\n\nBuilds sources via Maven with unit testing.\n\nRuns two parallel integration tests that involve deploying the app to ephemeral server instances, which get thrown away when tests are done (this is done by using auto-deployment of Jetty)\n\nOnce integration tests are successful, the webapp gets to the staging server at localhost:8081/staging (or your docker-machine/boot2docker instance IP)\n\nrequires a human to Manually inspect the staging instance, and when ready, approves the deployment to the production server at http://localhost:8081/production/\n\nReferences\n\nDeveloper blog by jglick introducing multibranch support\n\nworkflow plugin tutorial\n\nworkflow plugin presentations\n\nworkflow plugin demo readme","title":"Pipeline-as-code with Multibranch Workflows in Jenkins","tags":["general","guest post","tutorial","pipeline","workflow"],"authors":[]}},{"node":{"date":"2015-12-02T00:00:00.000Z","id":"225e35ac-aaf9-5523-a569-3d9679163b6e","slug":"/blog/2015/12/02/hacksgiving-left-overs/","strippedHtml":"Last week we hosted our first Hacksgiving event, a two-day virtual hackathon with a number of recorded sessions and plenty of pull requests submitted, I would say it was a success! I would like to thank everybody who took the time to watch, chat and present in the Hacker Hangout.\n\nNow that everybody has had time to recover from the turkey and travel, we have some videos of the sessions sliced out and ready for publication.\n\nIn addition to the recorded sessions, there were a number of notes captured with useful links associated with practically each session. You can find those notes at the bottom of the Hacksgiving page.\n\nThe following videos are all available in this YouTube playlist\n\nIntro to the Jenkins project\n\nThis session was hosted by rtyler and meant to provide a cursory overview of where to get started with contributing to the Jenkins project\n\nIntro to Plugin Development Workshop\n\nThis session was given both days of Hacksgiving by schristou and does a really great job of introducing the viewer to getting started with developing a Jenkins plugin with Java.\n\nWorkflow Q&A and Demo Session\n\nThis session was not originally scheduled, but some folks on the Jenkins IRC channel had some Workflow questions and Jesse Glick jumped into the Hacker Hangout to help us out!\n\nInternationalization Live Coding / Q&A\n\nAnother impromptu session, this time with danielbeck hosting. In this session Daniel walks through a plugin he was working on for Hacksgiving and adds internationalization support while answering a few questions here and there.\n\nIntro to the new static site\n\nKicking off day two of Hacksgiving, rtyler hosted a session on the new statically-generated Jenkins site. The new site will dramatically lower the barrier to entry for contribution to Jenkins documentation and blogs, by pushing everything through GitHub.\n\nPlugin Developer Open Q&A\n\nThis was the last session of Hacksgiving, hosted by abayer and ended up being more like a casual discussion of the current status and future work in the plugin development ecosystem.","title":"Hacksgiving Left-overs","tags":["general","meetup","video","pipeline","workflow"],"authors":[]}},{"node":{"date":"2015-10-28T00:00:00.000Z","id":"f9383f6c-7ac4-510a-ba69-7c342cd84479","slug":"/blog/2015/10/28/jenkins-2-0-proposal-pipeline-as-code-front-and-center/","strippedHtml":"We have been featuring a few proposals this week for what \" Jenkins\n2.0\" is going to include, today we’re discussing my personal favorite, which I believe will have a tremendously positive impact for years to come (not to be too biased!): moving the \"Pipeline as Code\" support in Jenkins to the front and center.\n\nThus far in this blog series we have reviewed proposals covering:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nToday’s proposal comes from project founder Kohsuke Kawaguchi titled \" Pipeline as code front and center \" and represents perhaps the most important and dramatic shift we hope to make in Jenkins 2.0.\n\nThis functionality has existed through the workflow plugin, which we have discussed at various Jenkins events before but if you’re not aware of some of the power behind it, check out this presentation from Jesse Glick :\n\nThe proposal in JENKINS-31152 expands on the problem we aim to address:\n\nThe default interaction model with Jenkins has been very web UI driven, requiring users to manually create jobs, then manually fill in the details through a web browser. This requires large amounts of effort to create and manage jobs to test and build multiple projects and keeps the actual configuration of a job to build/test/deploy a project separate from the actual code being built/tested/deployed. This prevents users from applying their existing CI/CD best practices to the job configurations themselves.\n\nTo address this, Kohsuke is proposing that we :\n\nIntroduce a new subsystem in Jenkins that:\n\nlets you design a whole pipeline, not just a single linear set of tasks\n\nstores the said pipeline configuration as human-editable Jenkinsfile in your SCM\n\nmakes it automatic to set up new pipelines when Jenkinsfile is added\n\ndifferentiates multiple branches in the same repository\n\nThis is the key new feature that positions Jenkins for continuous delivery use cases and other more complex automations of today.\n\nKohsuke’s proposal is largely about bringing together a lot of already existing pieces together to provide a very compelling experience for new and existing users alike. I hope it is clear now why this proposal is so exciting to me.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-31152, which itself have some additional tickets linked under it, and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for a couple more posts covering proposals to improve the Jenkins interface and user experience!","title":"Jenkins 2.0 Proposal: Pipeline as Code front and center","tags":["general","core","pipeline","workflow","feedback"],"authors":[]}},{"node":{"date":"2015-09-30T00:00:00.000Z","id":"431cf8b3-f367-5fd0-b8fe-a612aca17838","slug":"/blog/2015/09/30/bay-area-jam/","strippedHtml":"+\nimage:https://jenkins-ci.org/sites/default/files/images/Screen%20Shot%202015-09-30%20at%202.15.54%20PM_0.png[image,width=320] +\n\n+\n+\n\nLast week, the first Jenkins Area Meetup (JAM) took place in San Jose, CA on Wednesday, Sept 23. What a way to kick off the first JAM other than to have Docker, John Willis as our guest speaker. John talked about immutable infrastructure and its benefits and role of containers.\n\n+\n+\n\nKohsuke discussed Jenkins Workflow, the motivation behind the same and latest features of Jenkins Workflow like multi branch support followed by docker use cases. The highlight of the meetup was definitely Kohsuke breaking the news about Jenkins 2.0 and his vision and motivation behind it.\n\n+\n+\n\nThe next Bay Area JAM is slated for Oct 21. Be sure to check HERE for the agenda. We’d love to have you join us if you’re in the area. If you’re interested in speaking, or become a food & bev, venue, or recording sponsor please send email to the organizer or events@lists.jenkins-ci.org.","title":"Bay Area JAM","tags":["general","cia","meetup","pipeline","workflow"],"authors":[]}},{"node":{"date":"2015-09-29T00:00:00.000Z","id":"6734ef0b-9219-5517-9b5b-8529be8d41cd","slug":"/blog/2015/09/29/gui-improvements-on-the-horizon/","strippedHtml":"This past Thursday, September 24th, 2015, I presented a couple of prototypes of what I hope will be the future of the Jenkins GUI. Or perhaps more correctly, close enough to the future to start generating positive feedback from you the community that improving the Jenkins GUI is important and some pieces that I am showing are going in the right direction. If you have ~45 minutes to spare, I recommend the video (the narrator’s voice is very soothing). If not, I offer the following as a reasonable summary.\n\nJenkins has a lot of strengths as tool. Its robust user community along with its thoughtful and extensible design are two of the most immediate. They are the two pillars that have made Jenkins the leader in the CD/CI space and the de facto choice for most of us looking to automate our build and test processes. But let’s face it, by today’s standards, the GUI doesn’t really sing. I will even go so far as to say, I believe it is a platform liability at the moment, and even among we the Jenkins faithful, few of us look forward to using it.\n\nIn an effort to turn that tide, I traveled to this year’s 3 main JUC events, in DC, London, and Santa Clara, pushing the idea that enhancement is possible and providing an evolving sketch of what that might look like. The three main areas of enhancement I have targeted for a first round of improvement are these:\n\nItem creation and configuration\n\nPlugin selection\n\nWorkflow construction\n\nSoon to follow, but not yet prototyped by me would be pieces dedicated to monitoring jobs in Jenkins as well as node and resource utilization and efficiency. Rightly or wrongly, I have started with the create and configure side of the GUI, as I see it as somewhat primary in a typical job creation scenario (you have to create a job before you can monitor it), but this second piece is no less important. Sadly, lips service is all I can offer you today, but more prototypes and video demonstrations are on the way.\n\nItem Creation and Configuration in Jenkins\n\nIn most use cases, item creation means creating a freestyle job, so that is what I use as my base use case example. It is important to note, however, that most configuration in Jenkins happens through a shared set of GUI components. These components are a blend of Jelly files and Javascript and can be found in the …​/main/resources/lib/form directory in the Jenkins source code. In operating on these pieces, I have the opportunity to effectively enhance broad areas of the Jenkins experience, including aspects of plugin use that share these components. This greatly increases the upside of the effort as well as the possible drama and side effects, which I will go into more detail on later.\n\nAs for the upside piece, the first bit of improvement I am looking to attain is breaking up the many 'toilet paper' style unbroken configuration lists sprinkled throughout Jenkins. The first example of this appears in item creation. On first installation, this issue is not immediately obvious, but if you have installed a variety of plugins or chosen to purchase CloudBee’s Jenkins Enterprise product, you will find that Jenkins can have quite a few types of items to create. While they do have descriptive text, I still find them difficult to differentiate and almost impossible to casually scan. Thus, my first suggestion is to add some form of categorization to the item types. For this to function correctly, the GUI will need to be smart enough to apply the categories only when item counts are sufficient to justify them (if you only have 4 item creation types, it doesn’t make sense to have 8 categories with which to sort them). But if you are a long time Jenkins user with many plugins you may also know it is possible to have more than a dozen item types. So if nothing else, an extension point that allowed for the categorization of item types seems helpful.\n\nThe configuration form itself, it also can become incredibly long with few landmarks or visual differentiation points. As a remedy, I propose calling out and clearly boxing each of the existing configuration sections and making sure that their names are as meaningful as possible. As an added step, I make the sections collapsible. This allows the user to jump to specific points in the form and tuck other areas out of the way. In some cases, we can make specific sections open by link context or even by user context.\n\nPlugin Selection\n\nAnother essential piece of the Jenkins experience is plugin configuration. Today, if you are looking to add plugins to your Jenkins environment, you are almost certainly using Google to find a 3rd party review site, collecting the name of the plugin you want and then either linking to it on this website, or filtering for it in the Plugin Manager GUI.\n\nNeither in the product nor on this website is there a particularly good resource for comparing plugins and evaluating which you might add.\n\nInstead, I am looking to add something akin to an application store experience to both this website and the product UI. You should be able to group sort and compare plugins by a variety of criteria, including author, installation base, and user review. You should also have a set of general use categories that fits user needs and expectations, rather than the free ranging labels that plugin authors have arbitrarily applied today.\n\nWorkflow Script Builder\n\nFinally, I have a GUI that allows for a sort of Drag-n-drop assembly of Workflows. A major tenant of the utility of Workflows as opposed to Freestyle jobs is that they can be completely separated from the Jenkins GUI and stored in a source repository. None-the-less, with absolutely no GUI, there is little to guide the user who is looking to get started without a upfront learning investment. As it turns out, a Workflow/Groovy script is pretty straight forward, but you don’t really know that until you have made one. Also, Workflow allows for the orchestration of jobs across multiple nodes of hardware resources, making it a potentially involved little bit of configuration. Thus, my goal here is two fold. Allow the user to model a workflow quickly and easily and showcase a few of the more advanced features workflow enables. The result is this script builder. My hope is to host the prototype somewhere you all might be able to use it directly, but in the meantime, my hope is that my video pretty well explains how it works. Please take a look and post whatever comments you see fit.\n\n…​and really send along feedback…​\n\nSo with all things community related, please, please, send back whatever feedback makes sense. I can be reached via Twitter @gusreiber.\n\nOther places you can find me include, IRC (freenode/#jenkins) and https://plus.google.com/GusReiberUI[Google ( https://plus.google.com/+GusReiberUI)]. I would love to hear from you.\n\nQuestions and Answers from the talk:\n\nHow likely is it that any of these UI changes will make it into the core open source Jenkins? When would we start seeing them there?\nMost will be OSS. An exact schedule has not been determined, but most of it is still about a year away. Likely we will have an experimental wars for download along the way.\n\nIs there anyway to determine which GUI attributes are contributed by which plugin?\nI take it that is a bit of a feature request? It came up at JUC West as well. Should be something that can be surfaced in the GUI. I agree, it would be helpful.\n\nWhat is the difference between ANT and Jenkins?\nAnt is a good bit more bare-bones than Jenkins. In fact, you can add an Ant plugin to your Jenkins environment. You would typically use Ant to compile java source files. Jenkins orchestrates the fetching of the source files from some particular repository, the building of those files (often Jenkins uses Ant via its plugin to do this), running and reporting some suite of tests against that build, and then archiving or deploying the artifacts to wherever. Often times this requires navigating several computers with their own security constraints, so Jenkins helps you manage that as well.\n\nWhat version of the Jenkins it is?\nThis isn’t available today, but I am building against 1.621-SNAPSHOT currently, but will upgrade with Jenkins to the coming December LTS. I’m interested in seeing the list of 100 plugins that you mentioned (by Daniel?) Me too. :^) He and the community (which can be you if want to join IRC freenode.net/#jenkins and attend the hangouts and governance meetings: https://jenkins.ci.org)\n\nFor IRC, I assume the server is freenode.net?\nYes.\n\nWill there be any dashboard kind of feature for the build history in the new GUI?\nSo far, I have been focusing on the create and configuration portion of the Jenkins UX as I see it as a barrier to entry for new users. The read/report/analyze half of the Jenkins UX I actually see as the portion with more long term value, as you tend to read more often than you write, so I am eager to jump in here as well. …​.however, in its core today, Jenkins the tool seems to me to really want to see the world in the same context of flat XML files in folders as it actually persists its configuration data. To really make meaningful dashboards, it needs to be possible to query job configurations and build artifacts by a wide set of criteria that is not at all related to the folder in which the xml file happens to be stored. Also, some of the things you care about in the Jenkins universe are compute resources (controller/agents/exactures). These are also not the same as config files in folders and need to be queryable as their own first class type of entity. …​so what I am saying with a lot of words is that I see the config piece as a somewhat more immediate and urgent fix. The broccoli of the meal, if you will. I will want to get that out as fast as possible to get it out of the way. The reporting piece is actually the wine. At the moment, we are giving you Bartles and Jaymes in paper cups. …​so a lot of work is still needed there.\n\nHave you investigated Google Polymer as UI components for jenkins UI?\nI have not, but will now. I am actually quite a google fan-boy in much the way a lot of kids love Apple. (I also love Apple… being from Seattle, I even love MS). But, for the super near term, we are most focused on getting JQuery cleanly into core and Prototype.JS deprecated. Walk first, is my feeling.\n\nAre there any tutorials on Jenkins workflow?\nJesse Glick or KK are better people to ask about that, really. They are also on IRC: freenode.net/#jenkins. Daniel Beck as well, might be a good person to ask. My little workflow demo is still really just fiction. Will there be a 'Expand All' and 'Collapse All' buttons for the accordions in new configure GUI? (I would probably inject one if not by default) Yes. Also, they should be URL controllable so that they can be set by link or user context easily. Maybe they should also remember what you had open last? …​stuff to tinker with that really needs to be right.\n\nWhat impact does the UI changes have on job configuration behind the scenes? Is configuration still stored in XML format?\nNone. The post string stays the same and from then on, Jenkins is Jenkins.\n\nCan the create item screen be configurable? At the moment, no, but ideally yes. It is still a big hand wave at the moment about how those categories are created, managed, and updated. The same categories ought to bubble back up when searching for the plugins to help relate what plugins generate what UI. I am hoping for guidance from the community. How will workflow fit in with new UI?\nIn some respects, the new configuration page is about enhancing the more traditional freestyle job and not workflow. However, the last bit of my presentation with the script builder is exclusively about workflow. The plugin manager is about plugins, so it would apply to both.\n\nHow is a human notified for the wait for approval step in this workflow?\nSo workflow approval can be done via the web GUI. But to get real notification, you would program that into your workflow Jenkins has a fairly large set of notification plugins. So you can use Jenkins to trigger email, or SMS, or HipChat, or Slack, or pretty much whatever. As these plugins are increasingly customized for workflow, you will get nice and nice workflow syntax for instantiating those actions. When my script builder is adopted, you would have a friendly button you could drag into the stage and it would notify you prior to the manual checkpoint.\n\nCustom plugins still supported?\nYes. Though there is supported and supported. The highest level of support for a plugin would be a custom DSL for workflow that would make for streamlined syntax in workflow for interacting with that plugin via Groovy. But existing plugins do not need that level of support to be used within a Jenkins file / Groovy script. Instead, the syntax for accessing the plugin is likely to be more complicated. ….some plugins are freestyle specific, in which case, they no longer make sense in workflow. ….Daniel Beck or Jesse Glick are probably better suited to answering this question, however…​\n\nWill there be an improvement in performance with docker builds, sonar scanning? From my experience sonar takes 20+ mins with jenkins plugin where as it takes 3 mins with maven plugin\nIs this times it is taking the GUI to render, or the actual build to run? I am not sure I am following the question exactly, but regardless, I am not well equipped to answer many questions about performance issues in Jenkins. I know of a fairly major performance issue specifically in the configuration form that I believe will be fixed in the new GUI, but that isn’t build performance, it is just form rendering performance.\n\nI like the graphical configuration. Thanks. The scripting of a complex workflow looked a bit daunting.\nCool. Yeah, my main and first goal is to get something out there that would allow folks to quickly sketch and deploy an actual working workflow that reasonably reflects an 80%ish use case. No GUI can ever be as fully flexible as a script, but I don’t think most people need the 95% case to get started and see the benefit of a versionable and robust config file format.\n\nWill there be any effort to make the UI mobile friendly for the admin on the go?\nAbsolutely. Especially on the TBD read/reporting end of the UI, but everything new needs to meet a reasonably high bar of device responsiveness. Today, the Jenkins GUI is just not responsive. Which is terrible.\n\nAs a plugin developer do I need to change implementing the ui source from jelly or groovy to some other language/technique or will it be compatible?\nSo you will not NEED to change from whatever you are doing, except if you have built a plugin GUI that has custom script that either relies directly on behavior.js, hudson-behavior.js, or the particulars of the existing DOM structure (you do something in the client that requires your or some other input to be in a particular TABLE TR TD DOM traversal path). …​I believe 2 things are going to continue to happen at a faster and faster rate. New plugin authors are not going to want to write GUIs in Jelly and Prototype.js, but instead use some more modern client side MVC approaches like Angular, where the GUI interacts with a REST api instead of being a dom directly rendered from the server. It is a bit of a different mode of working than Jelly, and maybe slightly less direct, but it is a lot easier to find doc on how to do things with JQuery, Agile, Handlebars and the like, than it is to find doc on Jelly. And the responsiveness and breadth of gestures and controls in Jelly are already terribly behind what is now the main stream of web UI development. So I think plugin builders are, if they aren’t already, going to want better tools available to them. I also think that people are going to gravitate towards workflow or something similar. Since the UI for workflow is foremost a script, making a GUI for a plugin that works with it might be a fundamentally different beast. …​depending on what the plugin is trying to do… So again, new plugins or even upgrading existing plugins to work with workflow are likely want a new technology set, not just because the existing Jenkins GUI is changing, but because new plugins will want to do different and better stuff.\n\nAre there connectors for other source control tools like CVS and Dimensions?\nI am not sure exactly which connector plugins are already supporting Workflow or how deeply that support goes. Because Jenkins has plugins that provide access to these SCMs, you can use workflow to go and fetch those source trees. A greater level of support for workflow from these plugins would mean a more elegant workflow syntax for that interaction. At the moment, my GUI script builder is still fiction. My plan would be to add GUI buttons for whatever are the most popular SCMs and I will attempt to mask the syntax regardless of its clumsiness. ….the way I am constructing my initial prototype, there is already a reasonably clear extension point for adding buttons that generate some chunk of Groovy syntax when it is dragged into a stage. So I will add the initial set based on community feedback and then the community can continue to add their own.\n\nWhat are the compatibility issues existing plugin developers needs to be aware of?\nFor plugins that interact with freestyle jobs, or really most job types that aren’t workflow, plugin developers should expect the page DOM structure to change. If for whatever reason, they find they are busting into some custom script to traverse the DOM to compare 1 setting to another, that will break. Also, hudson-behaviors.js itself has a number of functions in it that do DOM traversing, like “findFollowingTR”. In some cases the signatures of those functions might need to change and the DOM structure that they return might also change. If a plugin uses what were meant to have been internal functions, they are likely to break. Finally, the page geometry is going to change. This may seem so superficial and obvious that, who cares, but sometimes changing a column width translates into an important part of a GUI being hidden or otherwise inaccessible. That ends up being as critical a break as any other. …​so to combat these points of possible breakage, we are going to be looking for a handful somewhere between 20 and 100 plugins that we will want to test against. We haven’t made that list yet, let alone run any tests, so that is really a critical next step. For the plugin manager changes, I don’t see much if any of a braking issue, although I would like to add additional sorting and display power to the GUI, which means the GUI will need more metadata than currently exists, if the plugins want to take advantage of that new power in the GUI. This won’t break things, but plugin authors might want to go back to their plugins and fill in whatever the new bits of metadata end up being…. most likely they would be things like, richer descriptions, better category selections, and possibly icons.\n\nI’ve not seen a lot of Jenkins but what I had I didn’t really get, was awkward for all the reasons Gus mentioned. This looks brilliant. When can we have it?\nTom and I, and now our junior pledge, Keith (not actually junior at all, just more fit than me), are busily typing as fast as we can as well as lobbying the community that our vision is more or less a correct one. We have a very interesting initial plugin selection GUI that might make this years final LTS (which I did not demo), which is none-the-less a nice step forward for Jenkins. In it will be a lot of the JS library bundling that will enable most of what I have shown in this demo. Our hope is that with each LTS we will be able to push out an additional piece of the GUI puzzle. Likely starting with the job create and configure GUI, which would be the mid year LTS. I am hoping that a year from now this will be how Jenkins looks and acts. ….in the meantime, we are grappling with how best to push preview releases so people can play with it and send me hate mail.\n\nIs there any way to test front end of Jenkins plugins? And will that improve too?\nA major and almost blocking portion of this work used to be the custom and somewhat broken version of HTMLUnit that was in core, which greatly hampered including libraries other than Prototype in Jenkins and writing code using those libraries in some sort of testable way. Our new approach to rebuilding the Jelly controls which are the foundation of the Jenkins config page and in general are shared by all plugins that need to post data back to Jenkins, already have a testing strategy backed into our design. Those Jelly form controls are extensible in Jenkins today and would remain so. Our hope would be that any plugin adding custom controls would follow our same design and test pattern we are building in core. ….so that was a long answer, but the short answer YES! Today, building GUI parts into your Jenkins plugin is a bit of a mystery, where most people copy something they saw someone else did, hack it, and the only test is, well…. it worked for me. That is no good and a fundamental piece we are looking to change. ….still a long answer… Node.js and Jasmine are the specific tools we using.\n\nWhat’s the estimated rollout date for this workflow feature?\nThe workflow feature is the newest concept I demonstrated, but in a lot of ways may also be the easiest to ship. As a script generator, exclusively, it could be hosted anywhere, and then you just paste your generated workflow script into the whatever existing Jenkins GUI better, submit into your source code. ….but at the moment, it isn’t actually on an official roadmap yet. Assuming the response to it remain positive, I would expect that to change fairly quickly.","title":"GUI improvements on the horizon","tags":["general","core","feedback","video","workflow"],"authors":[]}},{"node":{"date":"2015-09-03T00:00:00.000Z","id":"54daf997-6adf-5784-ac6a-b0973df0dead","slug":"/blog/2015/09/03/jenkins-user-conference-west-day-1/","strippedHtml":"+\nimage:https://pbs.twimg.com/media/CN6MLZnUsAAj0RD.jpg[image,width=300] +\n\n+\n+\n\n+\nBoy, what a day! This is the 5th annual JUC in San Francisco bay area, and the crowd is getting bigger. +\n\n+\n+\n\n+\nI brought the LEGO Jenkins + CloudBees logo mosaic that we built at the CloudBees San Jose office:\n\n+\n+\n\n+\nimage:https://pbs.twimg.com/media/CN6Cid3UEAEx5xK.jpg[image,width=500] +\n\n+\n+\n\n+\nThe community booth was very busy. We have people like Dean Yu (board), Andrew Bayer (board), Mark Waite (git), Jesse Glick (workflow and core), Daniel Beck (core), Vincent Latombe (literate), Steven Christou (subversion) and Owen Mehegan (community outreach) talking to people all day long.\n\n+\n+\n\n+\nIf you are here, make sure to stop by, and if you are not, follow news with https://twitter.com/search?q=%23jenkinsconf[#jenkinsconf].","title":"Jenkins User Conference West Day 1","tags":["general","juc","pipeline","workflow"],"authors":[]}}]}},"pageContext":{"tag":"workflow","limit":8,"skip":0,"numPages":3,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}