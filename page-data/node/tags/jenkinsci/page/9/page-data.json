{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/jenkinsci/page/9",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2010-06-22T00:00:00.000Z","id":"eeba7b34-9702-5bc1-9a90-39f977507f69","slug":"/blog/2010/06/22/hudson-1-363-released/","strippedHtml":"Last Friday the Hudson team released release 1.363 which is yet another mixed bag of enhancements and bug fixes. Along with the usual bunch of fixes, this release includes a number of localization updates courtesy of a team of Hudson community volunteers participating in the Hudson Internationalization project.\n\nIt is also worth noting that this post is being published on Tuesday, contrary to the schedule that I operated on with Continuous Blog, I will no longer be posting release updates on Monday morning. Traditionally Hudson is released Friday afternoon (PST), meaning any potential regressions are reported early on Monday morning after our European users start to upgrade. Publishing this release announcement on Tuesday gives me more time to test out the release so I can report with greater confidence in the reliability of the update. ( Note : This may change in the future as we push for easier RC testing capabilities within Hudson)\n\nIf you’re a regular reader of the Hudson Labs blog, you may also notice that this change log looks eerily similar to the 1.362 announcement from last week. Turns out I had mistakenly taken the upcoming changes from 1.363 and reported them as fixes in 1.362; I’ve since updated the post regarding 1.362’s change log.\n\nBug Fixes\n\nFix queue handling to close locking gap between removing job from queue and starting build, to prevent unintended concurrent builds (refactor of change first made in 1.360). ( report)\n\nAllow multiple dependencies between same two projects, as they may trigger under different conditions and with different parameters. ( issue 5708)\n\nTimeline on build trend page should use server timezone instead of always GMT. ( issue 6692)\n\nDon’t mask the cause of the checkout related exception.\n\n\"who am I?\" page should be visible to everyone.\n\nReinstall a JDK when a different version is selected. ( issue 5551)\n\nEnhancements\n\nAvoid pointless and harmful redirection when downloading agent.jar. ( issue 5752)\n\nCache downloaded JDKs.\n\nIntegrated community-contributed translations (Germany, Greek, Spanish, Finnish, Hungarian, Italian, Japanese, French, Russian, Slovenian, Dutch, Traditional Chinese, Swedish, Ukrainian, and Portuguese.)\n\nUpgraded bundled Ant to version 1.8.1. ( issue 6562)\n\nYou can go grab the latest .war file straight from our OSL mirror or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.363 Released!","tags":["general","releases","jenkinsci"],"authors":[]}},{"node":{"date":"2010-06-14T00:00:00.000Z","id":"ef5f2989-305a-5f4b-a2d2-d08b6728341a","slug":"/blog/2010/06/14/hudson-1-362-released/","strippedHtml":"The 1.362 release of Hudson has a few bug-fixes and a few minor enhancements, all together a good stabilization release. Not too much interesting to discuss so straight on to the changelog!\n\nBugs\n\nRestored optional container-based authentication for CLI. ( issue 6587)\n\nFix javascript error when a plugin uses an empty dropdownList, resulting in LOADING overlay being left up. ( issue 6542)\n\nEnhancements\n\nAdd setting so job views may show only enabled or disabled jobs. ( issue 6673)\n\nFile parameters can now be downloaded from the build Parameters page. ( issue 6719)\n\nAdded an ability to point to different update sites.\n\nAdded a new extension point to plug in custom utility to kill processes.\n\nAdded a proactive error diagnostics to look for a broken reverse proxy setup. ( report)\n\nYou can go grab the latest .war file straight from our OSL mirror or if you’re using a native package, use your package manager to upgrade.\n\nImage courtesy of Hudson’s Grill","title":"Hudson 1.362 Released","tags":["general","core","releases","jenkinsci"],"authors":[]}},{"node":{"date":"2010-06-10T00:00:00.000Z","id":"47ba57bf-9dea-510b-9ec1-8e71951d4fd8","slug":"/blog/2010/06/10/subversion-repository-change-notification-push-vs-pull/","strippedHtml":"People often configure Hudson to start a new build whenever a change is made to the repository. In fact, this is often considered central to the practice of continuous integration.\n\nThere are two ways to achieve this. One is the \"pull\" model, where Hudson periodically reaches out to a Subversion repository to see if there is any changes. The other is the \"push\" model, where you make the Subversion repository reach out to Hudson.\n\nBoth approaches have trade-offs. The pull model is easier to configure, since you can do this entirely from Hudson. But this comes at the expense of increased load to the Subversion server. Even though the overhead of Subversion polling is relatively low, as you add more projects to Hudson and increase the polling frequency, the overhead may get non-trivial (imagine the number of Hudson pollings that the poor java.net Subversion server gets, for example.) A more serious downside, in my opinion, is that this increases the delay from your commit to a build. For example, if your build just takes 5 mins, then even if you poll every minute, you pay on average 30 seconds delay before a build starts — a 10% overhead!\n\nThe push approach eliminates those two downsides, but it requires a post-commit hook configuration in the Subversion repository, which has to be done manually by the administrator, because those scripts are not exposed to external systems like Hudson.\n\nWith that said, if you do have an access to the Subversion repository post-commit hook, I highly recommend the push approach, and in Hudson we made it as easy as possible to configure the set up. Here’s the script you’ll need in your post-commit hook:\n\nREPOS=\"$1\" REV=\"$2\" UUID=\\`svnlook uuid $REPOS\\` /usr/bin/wget \\\n       --header \"Content-Type:text/plain;charset=UTF-8\" \\\n       --post-data \"\\`svnlook changed --revision $REV $REPOS\\`\" \\\n       --output-document \"-\" \\\n       https://server/hudson/subversion/${UUID}/notifyCommit?rev=$REV\n\nThis script basically just tells Hudson that there was a change in a repository. Hudson will then check this information against all the jobs that have a polling configured, and schedule the builds accordingly. The beauty of this approach is two-folds:\n\nThe script doesn’t change when you add/remove/rename jobs.\n\nThe overhead is constant regardless of the number of jobs.\n\nIf you haven’t configured a push setup yet, now is the time to do so!","title":"Subversion repository change notification: push vs pull","tags":["general","jenkinsci"],"authors":[]}},{"node":{"date":"2010-03-30T00:00:00.000Z","id":"dfb2c4b6-2ae7-5b02-9f3d-09cbbdc998bf","slug":"/blog/2010/03/30/resurgence-of-releng/","strippedHtml":"A few weeks ago I passed a job listing that I had found through one of my many Google Alerts for Hudson-related queries to Andrew ( abayer), following up on one of those job listings Andrew recently signed an offer to join the nice folks over at Digg to be their resident \"build guy.\" On its own I thought \"great for Andrew!\" and nothing more, then I saw this thread on reddit which poses the question:\n\nAnyone here a build engineer, or part of the build team? Could you please share your experience?\n\nIt seems, to me at least, the notion of \"release engineering\" is making a come-back, particularly in the aging \"Web 2.0\" world where companies like Digg, Facebook, Reddit, Twitter, etc are anywhere from five to ten years old. As these companies have aged a couple of important things have happened, their code-base has aged increasing the possibility of bitrot, but they have also expanded in terms of headcount. Start-ups that might have once slighted larger corporations like Oracle, Cisco VMWare and IBM for their burdensome process and longer release schedules now find themselves ensnared with massive code bases, larger development teams and complicated deployments. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/hudson_vs_buildbot.png\n\nOver the past few months we’ve seen Hudson being used in a number of different contexts, it was pitched at PyCon as part of a larger appeal to the Python community to get on the continuous integration bandwagon, we’ve seen a few posts from developers using Hudson for testing and packaging Android and iPhone apps, .NET developers are jumping on board as well. Across the board it feels like Hudson is being more and more widely used, it is no longer the mainstay of the Java shop’s toolkit, it’s become a must have for all developers.\n\nWith the allure of continuous deployment and Hudson’s lowered barrier to entry for testing, packaging and automating releases, is release engineering making a comeback?","title":"Resurgence of Releng","tags":["guest post","jenkinsci"],"authors":[]}},{"node":{"date":"2010-03-12T00:00:00.000Z","id":"2e3fcf5d-0940-5303-9f5b-1bbcab9c1f50","slug":"/blog/2010/03/12/want-some-hudson-stickers/","strippedHtml":"Rarely do I ever get mail, let alone mail I like, so I was quite excited when a shipment of stickers from Hudson HQ arrived yesterday.  I’m certain you’re thinking to yourself \"what does this guy need hundreds of Hudson stickers for?\" Fact is, I don’t! They’re not for me, they’re for you!\n\nI am willing to mail stickers vast distances to you ( with some conditions)\n\nConferences\n\nIf you’re presenting at a conference or otherwise would like some Hudson stickers to go around, email me with a rough estimate of how many you need. The only condition being that you tell me all about the event and how Hudson was received after the fact (this may involve an interview).\n\nUser Groups\n\nIf you email me requesting some stickers for a user group, I’ll need an estimate of how many folks attend meetings. Depending on supplies, I may send you a little more than requested to be shared.\n\nCompanies\n\nIf your company wants some Hudson stickers, I’d be happy to oblige, and of course I always appreciate stickers, pens, branded bouncy balls, etc (see: swag) in return!\n\nPeople who like stickers\n\nIf you’re just a fan of Hudson, stickers, or both, I’ll still gladly mail you a few stickers with the condition that you take pictures of where the stickers end up (and maybe of your Hudson install) and either email me some cool pictures or post them to Flickr (tagged: \" hudsonstickers\")\n\nI will be stuffing envelopes in my free time, so there may be a slight delay. You can email me at tyler at linux dot com requesting stickers, I’ll need:\n\nHow many: (estimate)\nWhat for: (conference|usergroup|company|iwantsomeokay)\nMailing Address:","title":"Want some Hudson stickers?","tags":["core","jenkinsci"],"authors":[]}},{"node":{"date":"2010-03-02T00:00:00.000Z","id":"31d1bdea-cbcb-5089-9c3f-a31f5f071484","slug":"/blog/2010/03/02/call-for-testers-the-older-the-better/","strippedHtml":"A couple weeks ago in the post outlining the release of Hudson 1.347 I mentioned that Alan Harder (a.k.a. mindless) had undertaken a deprecation-crusade; that is to say Alan has taken it upon himself to rid Hudson’s code-base, particularly in the plugin area, of older code. One of Alan’s branches old-data-monitor was merged into trunk with r28147 bringing with it some changes to help migrate older plugin datasets to newer formats.\n\nWhen I reached out to Alan earlier today on IRC ( #hudson on the Freenode) about the subject he agreed that polling the community for beta testers would be a good idea; this is where you come in. Per Alan’s message to the dev@ mailing list:\n\nVisit your \"Manage Hudson\" screen to see if the notice about old/unreadable data appears. I’ll be curious to see which of the old deprecated data structures are actually out there in people’s XML files.\n\nInstead of waiting for the release candidate to be packaged Wednesday evening, I’ve gone ahead and published the artifact from build #4544 which can be downloaded here: hudson.war\n\nIf you have an old Hudson installation with, testing this build would be incredibly useful. Alan went on to say:\n\nIf people find issues with OldDataMonitor, they should file them at issues.hudson-ci.org in \"core\" component and assign them to \"mindless\".\n\nThis change does not mutate any data (or at least it shouldn’t) so it should be safe, be on the look out for exceptions in Hudson’s log on startup.","title":"Call for Testers: The older the better","tags":["development","core","jenkinsci"],"authors":[]}},{"node":{"date":"2010-03-02T00:00:00.000Z","id":"5a7bffdc-f11e-53ee-9d7f-afdabc2a847d","slug":"/blog/2010/03/02/what-new-features-do-you-want-to-see/","strippedHtml":"Michael Donohue, a Hudson developer who has taken on the role of master bug triage guy for Hudson, does something regularly which I’ve really come to appreciate as a Hudson developer myself: he sends out emails to the dev list with the top 10 voted issues at that time. This gives those of us in the Hudson development community a good sense of what’s really important to our users, which in turn helps us decide where to focus our efforts. If you’re interested, you can see the top voted issues over at our JIRA server.\n\nA good number of those issues have been high on the list for a while - I’m actually in the early stages of work on a plugin to answer HUDSON-682, the current #1 most voted-for issue, two and a half years after it was opened. But I’m sure there are some equally useful features Hudson users would like to see added which aren’t on that list. So I’m asking you, dear readers: what are you looking for in Hudson that isn’t already there? Take a look around the existing issues - you may find a request that fits what you want lurking just out of the top 10, needing only your vote to push it into the spotlight. If no one’s yet created an issue requesting your desired feature, well, create one.\n\nOr, better still, write a plugin or contribute a patch yourself!\n\nEditor’s Note: If you’re interested in writing a plugin, you can check out Hudson’s wiki and/or this guide on the subject.\n\nAndrew Bayer ( abayer) has been a contributor to Hudson since early 2009, contributing to the ClearCase plugin, Hudson’s core and a small number of other plugins. Andrew also helps Kohsuke with a lot of Hudson’s project infrastructure, most notably the migration from Bugzilla on Java.net to JIRA running at issues.hudson-ci.org.","title":"What new features do you want to see?","tags":["infrastructure","development","core","just for fun","jenkinsci"],"authors":[]}},{"node":{"date":"2010-02-23T00:00:00.000Z","id":"943afd45-3e98-53a3-9907-bdd50716654f","slug":"/blog/2010/02/23/would-you-run-hudson-in-the-cloud/","strippedHtml":"One of my favorite bloggers on the subject of continuous integration, The Build Doctor, posed this question in a recent post :\n\nContinuous Integration in the cloud: good idea?\n\nThe topic of running a CI server in a virtualized environment, such as with Amazon’s EC2 service, is an interesting issue, particularly in the Hudson community. About 10 months ago Kohsuke announced the Hudson EC2 plugin which has seen slow, but steady development since then, including support for the Ubuntu Enterprise Cloud which was added to the plugin in a release last Monday.\n\nAs The Build Doctor and his readers point out, continuous integration is a difficult task to offload into the cloud because of the immense hardware demands constant building and testing presents. That said, Hudson does very effectively manage spinning agents up and down on demand if you’ve configured it as such. Implication being: running Hudson in the cloud may be more efficient to meet peak demands without needing to run a large farm of machines.\n\nIf you’re interested in trying out the EC2 plugin, check out Sonatype’s post on Nexus Open Source and Hudson on EC2 might be a good start.\n\nWould you run Hudson in the cloud?","title":"Would you run Hudson in the cloud?","tags":["jenkinsci"],"authors":[]}}]}},"pageContext":{"tag":"jenkinsci","limit":8,"skip":64,"numPages":9,"currentPage":9}},
    "staticQueryHashes": ["3649515864"]}