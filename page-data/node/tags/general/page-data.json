{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/general",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-08-04T00:00:00.000Z","id":"784b9495-ce55-533e-bf33-ddb9b2de1fea","slug":"/blog/2020/08/04/cdf-graduation/","strippedHtml":"We are happy to announce that the Jenkins project has achieved the graduated status in\nthe Continuous Delivery Foundation (CDF).\nThis status is officially effective Aug 03, 2020.\nJenkins is the first project to graduate in the CD Foundation.\nThanks to all contributors who made our graduation possible!\n\nIn this article, we will discuss what the CD Foundation membership and graduation mean to the Jenkins community.\nWe will also talk about what changed in Jenkins as a part of the graduation,\nand what are the future steps for the project.\n\nTo know more about the Jenkins graduation,\nsee also the announcement on the CD Foundation website.\nAlso see the special edition of the CD Foundation Newsletter for Jenkins user success stories and some surprise content.\nThe press release is available here.\n\nHow does CDF membership help us?\n\nAbout 18 months ago, Jenkins became one of the CDF founding projects, along with Jenkins X, Spinnaker and Tekton.\nA new foundation was formed to provide a vendor-neutral home for open source projects used for Continuous Delivery and Continuous Integration.\nSpecial interest groups were started to foster collaboration between projects and end user companies,\nmost notably:\nInteroperability,\nMLOps and\nSecurity SIGs.\nAlso, a Community Ambassador role was created to organize local meetups and to provide public-facing community representatives.\nMany former Jenkins Ambassadors and other contributors are now CDF Ambassadors, and they promote Jenkins and other projects there.\n\nThanks to this membership we addressed key project infrastructure needs.\nStarting from Jan 2020, CDF covers a significant part of the infrastructure costs\nincluding our services and CI/CD instances running on Microsoft Azure.\nThe CD Foundation provided us with legal assistance required to get code signing keys for the Jenkins project.\nThanks to that, we were able to switch to a new Jenkins Release Infrastructure.\nThe foundation sponsors the Zoom account we use for Jenkins Online Meetups and community meetings.\nIn the future we will continue to review ways of reducing maintenance overhead by switching some of our self-hosted services to equivalents provided by the Linux Foundation to CDF members.\n\nAnother important CDF membership benefit is community outreach and marketing.\nIt helped us to establish connections with other CI/CD projects and end user companies.\nThrough the foundation we have access to the DevStats service\nthat provides community contribution statistics and helps us track trends and discover areas for improvement.\nOn the marketing side, the foundation organizes webinars, podcasts and newsletters.\nJenkins is regularly represented there.\nThe CD Foundation also runs the meetup.com professional account which is used by local Jenkins communities for\nCI/CD and Jenkins Area Meetups.\nLast but not least, the Jenkins community is also represented at virtual conferences where CDF has a booth.\nAll of that helps to grow Jenkins visibility and to highlight new features and initiatives in the project.\n\nWhy did we graduate?\n\nThe Jenkins project has a long history of open governance which is a key part of today’s project success.\nStarting from 2011, the project has introduced the governance meeting which are open to anyone.\nMost of the discussions and decision making happen publicly in the mailing lists.\nIn 2015 we introduced teams, sub-projects and officer roles.\nIn 2017 we introduced the Jenkins Enhancement Proposal process which helped us to make the key architecture and governance decisions more open and transparent to the community and the Jenkins users.\nIn 2018 we introduced special interest groups that focus on community needs.\nIn 2019 we have expanded the Jenkins governance board\nso that it got more bandwidth to facilitate initiatives in the project.\n\nSince the Jenkins project inception 15 years ago, it has been steadily growing.\nNow it has millions of users and thousands of contributors.\nIn 2019 it has seen 5,433 contributors from 111 countries and 272 companies,\n67 core and 2,654 plugin releases,\n45,484 commits, 7,000+ pull requests.\nIn 2020 Q2 the project has seen 21% growth in pull requests numbers compared to 2019 Q2, bots excluded.\n\nOne may say that the Jenkins project already has everything needed to succeed.\nIt is a result of continuous work by many community members,\nand this work will never end as long as the project remains active.\nLike in any other industry, the CI/CD ecosystem changes every day and sets new expectations from the automation tools in this domain.\nJust as the tools evolve, open source communities need to evolve so that they can address expectations, and onboard more users and contributors.\nThe CDF graduation process helped us to discover opportunities for improvement,\nand address them.\nWe reviewed the project processes and compared them with the Graduated Project criteria defined in the CDF project lifecycle.\nBased on this review, we made changes in our processes and documentation.\nIt should improve the experience of Jenkins users,\nand help to make the Jenkins community more welcoming to existing and newcomer contributors.\n\nWhat changed for the project?\n\nBelow you can find a few key changes we have applied during the graduation process:\n\nPublic roadmap\n\nWe introduced a new public roadmap for the Jenkins project.\nThis roadmap aggregates key initiatives in all community areas: features, infrastructure, documentation, community, etc.\nIt makes the project more transparent to all Jenkins users and adopters,\nand at the same time helps potential contributors find the hot areas and opportunities for contribution.\nThe roadmap is driven by the Jenkins community and it has a fully public process documented in jep:14[].\n\nMore details about the public roadmap are coming next week, stay tuned for a separate blogpost.\nOn July 10th we had an online contributor meetup about the roadmap\nand you can find more information in its materials\n( slides, video recording).\n\nUser Documentation\n\nJenkins Weekly Release line is now documented on our website ( here).\nWe have also reworked the downloads page and added guidelines explaining how to verify downloads.\n\nA new list of Jenkins adopters was introduced on jenkins.io.\nThis list highlights Jenkins users and references their case studies and success stories,\nincluding ones submitted through the Jenkins Is The Way portal.\nPlease do not hesitate to add your company there!\n\nCommunity\n\nWe passed the Core Infrastructure Initiative (CII) certification.\nThis certification helps us to verify compliance with open source best practices\nand to make adjustments in the project (see the bullets below).\nIt also provides Jenkins users and adopters with a public summary about compliance with each best practice.\nDetails are on the Jenkins core page.\n\nJenkins Code of Conduct was updated\nto the new version of Contributor Covenant.\nIn particular, it sets best practices of behavior in the community, and expands definitions of unacceptable behavior.\n\nThe default Jenkins contributing template was updated to cover more common cases for plugin contributors.\nThis page provides links to the Participate and Contribute guidelines hosted on our website,\nand helps potential contributors to easily access the documentation.\n\nThe Jenkins Core maintainer guide was updated to include maintenance and issues triage guidelines.\nIt should help us to deliver quality releases and to timely triage and address issues reported by Jenkins users.\n\nWhat’s next?\n\nIt an honor to be the first project to reach the graduated stage in the Continuous Delivery Foundation,\nbut it is also a great responsibility for the project.\nAs a project, we plan to continue participating in the CDF activities and to work with other projects and end users to maintain the Jenkins' leader role in the CI/CD space.\n\nWe encourage everyone to join the project and participate in evolving the Jenkins project and driving its roadmap.\nIt does not necessarily mean committing code or documentation patches;\nuser feedback is also very important to the project.\nIf you are interested to contribute or to share your feedback,\nplease contact us in the Jenkins community channels ( mailing lists, chats)!\n\nAcknowledgements\n\nCDF graduation work was a major effort in the Jenkins community.\nCongratulations and thanks to the dozens of contributors who made our graduation possible.\nI would like to thank\nAlex Earl,\nAlyssa Tong,\nDan Lorenc,\nDaniel Beck,\nJeff Thompson,\nMarky Jackson,\nMark Waite,\nOlivier Vernin,\nTim Jacomb,\nTracy Miranda,\nUllrich Hafner,\nWadeck Follonier,\nand all other contributors who helped with reviews and provided their feedback!\n\nAlso thanks to the Continuous Delivery Foundation marketing team (Jacqueline Salinas, Jesse Casman and Roxanne Joncas) for their work on promoting the Jenkins project and, specifically, its graduation.\n\nAbout the Continuous Delivery Foundation\n\nThe Continuous Delivery Foundation (CDF) serves as the vendor-neutral home of many of the fastest-growing projects for continuous delivery, including Jenkins, Jenkins X, Tekton, and Spinnaker,\nas well as fosters collaboration between the industry’s top developers, end users and vendors to further continuous delivery best practices.\nThe CDF is part of the Linux Foundation, a nonprofit organization.\nFor more information about the foundation, please visit its website.\n\nMore information\n\nTo know more about the Jenkins graduation in the Continuous Delivery Foundation,\nsee the announcement on the CD Foundation website.\nAlso see the special edition of the CD Foundation Newsletter for Jenkins user success stories and some surprise content.\nThe press release is available here.","title":"Jenkins graduates in the Continuous Delivery Foundation","tags":["announcement","cdf","general","community"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2019-08-30T00:00:00.000Z","id":"ddc369d5-a5e4-57f5-8fb7-5ebe49126b06","slug":"/blog/2019/08/30/jenkins-cli/","strippedHtml":"As a developer, I usually use Jenkins like this:\n\nFind a job which is related with my current work\n\nTrigger that job\n\nCheck the output of the build log\n\nSometimes, I might need to check the update center. Maybe a new plugin is needed, or I need to update an existing plugin.\nOr, I want to upload a plugin from my computer. For all these cases, I just don’t need a UI or even a browser.\nI like to use a CLI to complete most of my tasks. For example, I use kubectl to manage my Kubernetes cluster,\nto create or modify the kubernetes resources. So, I start to think, 'Why not use a CLI to manage my Jenkins?'.\n\nWhy create a new one?\n\nFirst, I almost forgot about the existing Jenkins CLI, written in Java. Let me introduce how to use that one.\n\nVisit Jenkins page from http://localhost:8080/jenkins/cli/ . You’ll see a command like java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ help. So, a jar file needs to be download.\nWe can use this command to complete this task wget http://localhost:8080/jenkins/jnlpJars/jenkins-cli.jar .\n\nNow you can see that this is not a Linux-style CLI. Please consider some points below:\n\nThe users must have a JRE. This is not convenient for developers who don’t use Java.\n\nThe CLI is too wordy. We always need to type java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ as the initial command.\n\nCannot install it by some popular package manager, like brew or yum.\n\nOf course, the Java CLI client is more native with Jenkins. But I’d like to use this more easily.\nSo I decided to create a new CLI tool which would be written in Go and which would natively run on modern platforms.\n\nThat’s the story of creating jcli.\n\nFeatures\n\nEasy to maintain config file for jcli\n\nMultiple Jenkins support\n\nPlugins management (list, search, install, upload)\n\nJob management (search, build, log)\n\nOpen your Jenkins with a browser\n\nRestart your Jenkins\n\nConnection with proxy support\n\nHow to get it?\n\nYou can clone jcli from the jenkins-cli repo. For now, we support\nthese three most popular OS platforms: MacOS, Linux, and Windows.\n\nMacOS\n\nYou can use brew to install jcli.\n\nbrew tap jenkins-zh/jcli\nbrew install jcli\n\nLinux\n\nIt’s very simple to install jcli into your Linux OS. Just need to execute a command line at below:\n\ncurl -L https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-linux-amd64.tar.gz|tar xzv\nsudo mv jcli /usr/local/bin/\n\nWindows\n\nYou can find the latest version by clicking here. Then download the tar file, cp the uncompressed jcli directory into your system path.\n\nHow to get started?\n\nIt’s very simple to use this. Once you get jcli on your computer, use this command to generate a sample configuration:\n\n$ jcli config generate\ncurrent: yourServer\njenkins_servers:\n- name: yourServer\n  url: http://localhost:8080/jenkins\n  username: admin\n  token: 111e3a2f0231198855dceaff96f20540a9\n  proxy: \"\"\n  proxyAuth: \"\"\n# Goto 'http://localhost:8080/jenkins/me/configure', then you can generate your token.\n\nIn most cases, you should modify three fields which are url, username and token. OK, I believe you’re ready. Please check whether you install the github plugin in your Jenkins:\n\njcli plugin list --filter name=github\n\nThat’s the end. It’s still in very early development stage. Any contribution is welcome.","title":"Managing Jenkins with jcli","tags":["general","jcli","cli","tools"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"LinuxSuRen","html":"<div class=\"paragraph\">\n<p>Rick is a big fan of Jenkins, also as a contributor leading the Jenkins China community.</p>\n</div>","id":"linuxsuren","irc":null,"linkedin":"linuxsuren","name":"赵晓杰(Rick)","slug":"/blog/author/linuxsuren","twitter":"LinuxSuRen"}]}},{"node":{"date":"2019-07-25T00:00:00.000Z","id":"c8dcfc2d-fe9b-51ed-b1d8-8da5973e144c","slug":"/blog/2019/07/25/azure-artifact-manager/","strippedHtml":"Jenkins stores all generated artifacts on the controller server filesystem. This presents a couple of challenges especially when you try to run Jenkins in the cloud:\n\nAs the number of artifacts grow, your Jenkins controller will run out of disk space. Eventually, performance can be impacted.\n\nFrequent transfer of files between agents and controller may cause load, CPU or network issues which are always hard to diagnose.\n\nSeveral existing plugins allow you to manage your artifacts externally. To use these plugins, you need to know how they work and perform specific steps in your job’s configuration. And if you are new to Jenkins, you may find it hard to follow existing samples in Jenkins tutorial like Recording tests and artifacts.\n\nSo, if you are running Jenkins in Azure, you can consider automatically managing new artifacts on Azure Storage. The new Azure Artifact Management plugin allows you to store artifacts in Azure blob storage and simplify your existing Jenkins jobs that contain Jenkins general artifacts management steps. This approach will give you all the advantages of a cloud storage, with less effort on your part to maintain your Jenkins instance.\n\nConfiguration\n\nAzure storage account\n\nFirst, you need to have an Azure Storage account. You can skip this section if you already have one. Otherwise, create an Azure storage account for storing your artifacts. Follow this tutorial to quickly create one. Then navigate to Access keys in the Settings section to get the storage account name and one of its keys.\n\nExisting Jenkins instance\n\nFor existing Jenkins instance, make sure you install the Azure Artifact Manager plugin. Then you can go to your Jenkins System Configuration page and locate the Artifact Management for Builds section. Select the Add button to configure an Azure Artifact Storage. Fill in the following parameters:\n\nStorage Type: Azure storage supports several storage types like blob, file, queue etc. This plugin currently supports blob storage only.\n\nStorage Credentials: Credentials used to authenticate with Azure storage. If you do not have an existing Azure storage credential in you Jenkins credential store, click the Add button and choose Microsoft Azure Storage kind to create one.\n\nAzure Container Name: The container under which to keep your artifacts. If the container name does not exist in the blob, this plugin automatically creates one for you when artifacts are uploaded to the blob.\n\nBase Prefix: Prefix added to your artifact paths stored in your container, a forward slash will be parsed as a folder. In the following screenshot, all your artifacts will be stored in the “staging” folder in the container “Jenkins”.\n\nNew Jenkins instance\n\nIf you need to create a new Jenkins controller, follow this tutorial to quickly create an Jenkins instance on Azure. In the Integration Settings section, you can now set up Azure Artifact Manager directly. Note that you can change any of the configuration after your Jenkins instance is created. Azure storage account and credential, in this case, are still prerequisites.\n\nUsage\n\nJenkins Pipeline\n\nHere are a few commonly used artifact related steps in pipeline jobs; all are supported to push artifacts to the Azure Storage blob specified.\n\nYou can use archiveArtifacts step to archive target artifacts into Azure storage. For more details about archiveArtifacts step, see the Jenkins archiveArtifacts setp documentation.\n\nnode {\n  //...\n  stage('Archive') {\n    archiveArtifacts \"pattern\"\n  }\n}\n\nYou can use the unarchive step to retrieve the artifacts from Azure storage. For more details about unarchive step, please see unarchive step documentation.\n\nnode {\n  //...\n  stage('Unarchive') {\n    unarchive mapping: [\"pattern\": '.']\n  }\n}\n\nTo save a set of files so that you can use them later in the same build (generally on another node or workspace), you can use stash step to store files into Azure storage for later use. Stash step documentation can be found here.\n\nnode {\n  //...\n  stash name: 'name', includes: '*'\n}\n\nYou can use unstash step to retrieve the files saved with stash step from Azure storage to the local workspace. Unstash documentation can be found here.\n\nnode {\n  //...\n  unstash 'name'\n}\n\nFreeStyle Job\n\nFor a FreeStyle Jenkins job, you can use Archive the artifacts step in Post-build Actions to upload the target artifacts into Azure storage.\n\nThis Azure Artifact Manager plugin is also compatible with some other popular management plugins, such as the Copy Artifact plugin. You can still use these plugins without changing anything.\n\nTroubleshooting\n\nIf you have any problems or suggestions when using Azure Artifact Manager plugin, you can file a ticket on Jenkins JIRA for the azure-artifact-manager-plugin component.\n\nConclusion\n\nThe Azure Artifact Manager enables a more cloud-native Jenkins. This is the first step in the Cloud Native project. We have a long way to go to get Jenkins to run on cloud environments as a true “Cloud Native” application. We need help and welcome your participation and contributions to make Jenkins better. Please start contributing and/or give us feedback!","title":"Managing Jenkins Artifacts with the Azure Artifact Manager Plugin","tags":["general","azure","plugin"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"gavinfish","html":"<div class=\"paragraph\">\n<p>Software engineer at Microsoft. Focusing on DevOps and cloud native.</p>\n</div>","id":"jshen","irc":null,"linkedin":null,"name":"Jie Shen","slug":"/blog/author/jshen","twitter":null}]}},{"node":{"date":"2019-05-09T00:00:00.000Z","id":"38964a5b-f559-5f17-9f39-7c96117907bb","slug":"/blog/2019/05/09/chinese-localization/","strippedHtml":"Since 2017, I started to do some contributions to the Jenkins community. As a beginner, translation might be\nthe easiest way to help the project. You don’t need to understand the whole context, even to create a ticket in the\nissue tracker system. Improvement of localization usually is minor. But some problems occurred soon,\nthere isn’t a native speaker of Chinese that could review my PRs. So, sometimes my PRs\nare delayed from being merged into master.\n\nSome contributors told me that I can start a thread at the mailing list. Normally, discussing at the mailing list\nis the open source community way. We got a lot of ideas for the localization from there. As a result,\nwe achieved some goals that I’d like to share here.\n\nJEP-216\n\nPreviously, language localization files were distributed in core and in each plugin.\nFor this proposal, each language has a single localization plugin, such as Chinese Localization plugin.\nFinally, Localization Support Plugin and\nChinese Localization plugin are able to support\nall types of localization resource files. From the plugins website,\nyou can see that there are already 13 000 installations.\nWe removed all Chinese localization files at the PR-4008.\n\nI really appreciate Daniel Beck for helping me to add localization support,\nLiam Newman helping me to review JEP-216, and many other community members.\n\nChinese Localization SIG\n\nWe believe that this SIG could help to improve Jenkins experience for Chinese users and gather more contributors\nfrom China. This SIG is responsible for maintaining the Chinese Jenkins website,\npromoting the Jenkins community in China in the social media with WeChat account. We publish translated blog\narticles, Jenkins release notes, JAM or other events at the WeChat account. For now, there are 1800 followers that can\nread our news from the last half a year.\n\nEspecially, I want to say thanks to Wang Donghui, Zhai Zhijun, and other contributors. They did a lot of contributions.\nI wish I could see more and more folks join us.","title":"A Big Step of the Chinese Localization","tags":["general","community","localization","chinese"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"LinuxSuRen","html":"<div class=\"paragraph\">\n<p>Rick is a big fan of Jenkins, also as a contributor leading the Jenkins China community.</p>\n</div>","id":"linuxsuren","irc":null,"linkedin":"linuxsuren","name":"赵晓杰(Rick)","slug":"/blog/author/linuxsuren","twitter":"LinuxSuRen"}]}},{"node":{"date":"2019-05-09T00:00:00.000Z","id":"8e971fb0-7d4b-559d-a327-05b99fb4739e","slug":"/blog/2019/05/09/templating-engine/","strippedHtml":"Implementing DevSecOps practices at the enterprise scale is challenging. With multiple programming languages, automated testing frameworks, and security compliance tools being used by different applications within your organization, it becomes difficult to build and maintain pipelines for each team.\n\nMost pipelines are going to follow the same generic workflow regardless of which specific tech stack is employed by an application.  The Templating Engine Plugin (abbreviated as JTE for Jenkins Templating Engine) allows you to capture this efficiency by creating tool-agnostic, templated workflows to be reused by every team.\n\nAs technology consultants with clients in both the public and private sectors, at Booz Allen we found ourselves building DevSecOps pipelines from scratch for every new project.  Through developing the Jenkins Templating Engine, we’ve seen pipeline development decrease from months to days now that we can reuse tool integrations while bringing a new level of governance to Jenkins pipelines.\n\nPipeline Templating\n\nOrganizations benefit from letting application developers focus on what they do best: building applications. Supporting this means building a centralized DevOps team responsible for maintaining platform infrastructure and creating CI/CD pipelines utilized by development teams.\n\nWith the rise of microservice-based architectures, a centralized DevOps teams can support many different development teams simultaneously; all of whom may be leveraging different programming languages and automated testing tools.\n\nWhile the tools may differ between development teams, the workflow is often the same: unit test, static code analysis, build and publish an artifact, deploy it, and then perform different types of testing against the deployed application.\n\nThe Templating Engine Plugin allows you to remove the Jenkinsfile from each repository by defining a common workflow for teams to inherit.  Instead of an entire pipeline definition in each repository, teams supply a configuration file specifying which tools to use for the workflow.\n\nJTE in Action\n\nLet’s walk through a bare bones example to demonstrate the reusability of templates:\n\nExample Pipeline Template:\n\nunit_test()\nbuild()\nstatic_code_analysis()\n\nTemplates leverage Steps contributed by Libraries to outline a workflow teams must implement.  While a template does get executed just like any other Jenkinsfile (meaning that the standard scripted and declarative syntax is supported), the goal of a template should be to read like plain English and avoid any technical implementation.\n\nLeveraging templates in this way lets you separate the business logic (what should happen when) of your pipeline from the\ntechnical implementation (what’s actually going to happen).  The result of this is a CI/CD pipeline that’s proven to be\nsignificantly easier to manage when supporting multiple teams simultaneously.\n\nThe steps outlined by this template ( unit_test, build, and static_code_analysis) have been named generically on purpose. This way teams can specify different libraries to use while sharing the same pipeline.\n\nImplementing the Template\n\nImplementing a shareable pipeline with the Templating Engine requires a few key components:\n\nPipeline Template : Outline the workflow to be performed\n\nLibraries : Provide technical implementations of the steps of the workflow\n\nConfiguration Files : Specify which libraries to use and their configuration\n\nStep 1: Create a Pipeline Configuration Repository\n\nA Pipeline Configuration Repository is used to store common configurations and pipeline templates inherited by teams.\n\nThis example Pipeline Configuration Repository will later be configured as part of a Governance Tier : the mechanism in JTE that allows you to build hierarchical configurations representing your organization.\n\nA Governance Tier holds three things:\n\nPipeline Templates\n\nA list of Library Sources\n\nThe tier’s configuration file ( pipeline_config.groovy)\n\nThe pipeline templates and the configuration file for a Governance Tier are stored in the pipeline configuration repository.\n\nWhen configuring the Governance Tier in Jenkins, you will provide a source code management location for a repository that contains the above components as well as the base directory where these artifacts can be found.\n\nStep 2: Create the Pipeline Template\n\nNext, we’ll create a Jenkinsfile for the Governance Tier.  In JTE, the Jenkinsfile is the default pipeline template that an execution will use.\n\nJenkinsfile\n\nunit_test()\nbuild()\nstatic_code_analysis()\n\nStep 3: Create the Libraries\n\nThe Templating Engine Plugin has implemented a version of Jenkins Shared Libraries to enhance the reusability of libraries.  A library is a root directory within a source code repository that has been configured as a Library Source on a Governance Tier.\n\nIn our example, the pipeline template needs to perform unit testing, package an artifact, and run static code analysis.\n\nLet’s assume that we have some teams using gradle and some teams using maven to build and test their application but they will both use SonarQube to perform static code analysis.\n\nIn this scenario, we should create gradle, maven, and sonarqube libraries.\n\n|- gradle/\n  \\-- build.groovy\n  \\-- unit_test.groovy\n|- maven/\n  \\-- build.groovy\n  \\-- unit_test.groovy\n|- sonarqube/\n  \\-- static_code_analysis.groovy\n\nStep 4: Implement the Steps\n\nImplementing a library step is exactly the same as just writing regular global variables as part of the default Jenkins Shared Libraries.\n\nFor the purposes of this demonstration, we will just have each step print out the step name and contributing library.\n\ngradle/build.groovy\n\nvoid call(){\n    println \"gradle: build()\"\n}\n\nRead more about Library Development within JTE.\n\nStep 5: Create the Configuration Files\n\nThe configuration file for JTE is named pipeline_config.groovy.\n\nIn the Governance Tier we’ll create a configuration file specifying common configurations between the applications. In this case, both applications are using the sonarqube library:\n\npipeline_config.groovy\n\nlibraries{\n  merge = true // allow individual apps to contribute additional libraries\n  sonarqube\n}\n\nNext, we’ll create two more repositories representing the maven and gradle applications. Within those repositories all we’ll need is an application-specific pipeline_config.groovy file.\n\nThese repositories both contain an application pipeline_config.groovy configuration file.\n\nmaven app: pipeline_config.groovy\n\nlibraries{\n    maven\n}\n\ngradle app: pipeline_config.groovy\n\nlibraries{\n    gradle\n}\n\nStep 6: Configure the Governance Tier in Jenkins\n\nNow that we have a Pipeline Configuration Repository and a Library Source Repository, we can configure a Governance Tier in Jenkins:\n\nThis configuration shown in the image above can be found under Manage Jenkins >> Configure System\n\nThrough the Templating Engine, you can create a pipeline governance hierarchy matching your organization’s taxonomy by representing this structure via Folders in Jenkins.\n\nStep 7: Create a Multibranch Pipeline for Both Applications\n\nWhen creating Multibranch Pipeline Projects for each app, the Templating Engine plugin supplies a new Project Recognizer\ncalled Jenkins Templating Engine.  This sets the project to use the Templating Engine framework for all branches within the\nrepository.\n\nYou can also set the Jenkins Templating Engine project recognizer for a GitHub Organization project, enabling you to easily share the same pipeline across an entire Github Organization!\n\nStep 8: Run the Pipelines\n\nThat’s it!  Now, both applications will leverage the exact same pipeline template while having the flexibility to select which\ntools should be used during each phase of the workflow.\n\nBelow is sample output from the console log from both applications pipeline runs:\n\nGradle:\n\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-gradle.git\n[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git\n[JTE] Loading Library gradle from git https://github.com/steven-terrana/example-jte-libraries.git\n...\n[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration\n[JTE][Step - gradle/unit_test]\n[Pipeline] echo\ngradle: unit_test()\n[JTE][Step - gradle/build]\n[Pipeline] echo\ngradle: build()\n[JTE][Step - sonarqube/static_code_analysis]\n[Pipeline] echo\nsonarqube: static_code_analysis()\n[Pipeline] End of Pipeline\n\nMaven:\n\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration\n[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-maven.git\n[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git\n[JTE] Loading Library maven from git https://github.com/steven-terrana/example-jte-libraries.git\n...\n[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration\n[JTE][Step - maven/unit_test]\n[Pipeline] echo\nmaven: unit_test()\n[JTE][Step - maven/build]\n[Pipeline] echo\nmaven: build()\n[JTE][Step - sonarqube/static_code_analysis]\n[Pipeline] echo\nsonarqube: static_code_analysis()\n[Pipeline] End of Pipeline\n\nBenefits of the Templating Engine\n\nApply Organizational Governance\n\nLeveraging the Templating Engine Plugin will allow you to define enterprise-scale, approved\nworkflows that can be used by teams regardless of what tools are being used.  This top-down\napproach makes scaling and enforcing DevSecOps principles significantly easier within your organization.\n\nOptimize Code Reuse\n\nThere’s really no need for every team in your organization to figure out how to do the same things over\nand over again.  At Booz Allen, we have seen pipeline development time decrease from months to days as\nwe have continuously reused and expanded upon our Templating Engine library portfolio as part of our Solutions\nDelivery Platform.\n\nSimplify Pipeline Maintainability\n\nOften DevOps engineers find themselves building and supporting pipelines for multiple development teams at\nthe same time.  By decoupling the workflow from the technical implementation and consolidating the pipeline\ndefinition to a centralized location, the Templating Engine plugin allows DevOps engineers to scale much faster.\n\nGet Involved!\n\nThe Templating Engine Plugin has been open sourced and made available in the Jenkins Update Center.\n\nWe always appreciate feedback and contributions! If you have an interesting use case or would like to ask questions, try the templating-engine-plugin on Gitter.\n\nAdvanced Features\n\nConfiguration File Conditional Inheritance\n\nExternalize Library Configurations\n\nAspect Oriented LifeCycle Hooks\n\nMultiple Pipeline Templates\n\nDefault Step Implementation\n\nConfiguration File DSL Sandboxing\n\nMore Resources\n\nFor this Demonstration\n\nPipeline Configuration Repository\n\nSample Libraries\n\nSample Maven Repository\n\nSample Gradle Repository\n\nAdditional Resources\n\nTemplating Engine Documentation\n\nSource Code\n\nBooz Allen’s SDP Pipeline Libraries\n\nBooz Allen Hamilton","title":"Introducing the Jenkins Templating Engine!","tags":["general","pipeline","plugin","pipeline-authoring"],"authors":[{"avatar":null,"blog":null,"github":"steven-terrana","html":"","id":"steven-terrana","irc":null,"linkedin":null,"name":"Steven Terrana","slug":"/blog/author/steven-terrana","twitter":null}]}},{"node":{"date":"2019-03-12T00:00:00.000Z","id":"8eccd6b4-7a2d-5929-8547-14557b2a4ad8","slug":"/blog/2019/03/12/cdf-launch/","strippedHtml":"Today Linux Foundation, along with CloudBees, Google, and a number of other companies, launched a new open-source software foundation called Continuous Delivery Foundation (CDF.) The CDF believes in the power of Continuous Delivery, and it aims to foster and sustain the ecosystem of open-source, vendor neutral projects.\n\nJenkins contributors have decided that our project should join this new foundation. This discussion happened over a period of time, with a relatively succinct summary of the motivation comes from here.\n\nNow, as a user, what does this mean?\n\nFirst, there will be no big disruption/discontinuity. The same people are still here, no URL is changing, releases will come out like they’ve always been. We will make the decisions the same way as we’ve been making, and pull requests land the same way. Changes will happen continuously over the period of time.\n\nThis is yet another testament to the maturity and the importance of the Jenkins project in this space. With a quarter million Jenkins running around the globe, it’s truly rocking the world of software development from IoT to games, cloud native webapps to machine learning projects. It makes Jenkins such an obvious, safe choice for anyone seeking open heterogeneous DevOps strategy.\n\nThe CDF creates a level playing field that is well-understood to organized contributors, which further, translate into more contributors, hence resulting in a better Jenkins, faster. Over the past years, the Jenkins project has been steadily growing more structures that provide this clarity, and this is the newest step on this trajectory.\n\nAny serious dev teams are combining multiple tools and services to cover the whole software development spectrum. A lot of work gets reinvented in those teams to integrate those tools together. Jenkins will be working more closely with other projects under the umbrella of the CDF, which would result in better aligned software with less overlap.\n\nOur users are practitioners trying to improve the software development process in their organizations. They get that CI/CD/automation which unlocks the productivity that their organizations need, but that’s not always obvious to their organizations as a whole. So our users often struggle to get the necessary support. The CDF will advocate for the practice of Continuous Delivery, and because it’s not coming from a vendor or a project, it will reach the people who can lend that support.\n\nSo I hope you can see why we are so excited about this!\n\nIn fact, for us, this is an idea that we’ve been cooking for close to two years. I don’t think I’m exaggerating much to say the whole idea of the CDF started from the Jenkins project.\n\nA lot of people have done so much work behind the scene to make this happen. But a few people played such instrumental roles that I have to personally thank them namely, Chris Aniszczyk for his patience and persistence, R. Tyler Croy for cooking and evolving the idea, and Tracy Miranda for bringing this idea into a reality.","title":"Jenkins is joining the Continuous Delivery Foundation","tags":["cdf","general","community"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2017-04-27T00:00:00.000Z","id":"c3440bc5-c7e2-5c2b-b6e6-f923222e2902","slug":"/blog/2017/04/27/colombia/","strippedHtml":"The Jenkins project has learned that a company is trying to register \"Jenkins\" as a trademark in Colombia. This is alarming for us, and we are trying to oppose it. In order to do this effectively, we need to hear from Colombian users of Jenkins.\n\nFigure 1. South American visitors to jenkins.io for 2017\n\nThe Jenkins project owns a trademark \"Jenkins\" in the U.S., through a non-profit entity SPI Inc. According to experts on the subject citing the \"Washington Convention\", our trademark registration in the U.S. does give us some strength in the argument to oppose this. To successfully mount this argument however, we need to be able to show that Jenkins has significant usage and awareness in Colombia. Users, installations, meetups, conference talks, anything of that nature will help.\n\nThose of you with the project for a long time might recall that the name \"Jenkins\" was born because of a trademark issue with Oracle. So we are particularly sensitive to the issue is trademarks. We want to make sure the same tragedy won’t happen again.\n\nIf you know anything about the usage and the name recognition of Jenkins in Colombia, please let us know by submitting the information here . We know that Jenkins is popular in Colombia, because our website traffic shows that Colombian Jenkins users are the third most frequent visitors to jenkins.io in South America after Brazil and Argentina.\n\nThis information will be only shared with the Jenkins project board and those involved in the defense, and for the sole purpose of defending the trademark and nothing more.\n\nPlease help us spread the word. Thanks!\n\nEl proyecto Jenkins se ha enterado de que una compañía está intentando registrar \"Jenkins\" como marca registrada en Colombia. Esto es alarmante y estamos tratando de oponernos. Para hacerlo de manera efectiva, necesitamos escuchar a los usuarios colombianos de Jenkins.\n\nEl proyecto Jenkins posee una marca registrada \"Jenkins\" en los Estados Unidos, a través de una entidad sin ánimo de lucro SPI Inc. Según los expertos en la materia citando la \"Convención de Washington\", nuestro registro de marca en los EE.UU. nos da algo de fuerza para oponernos. Sin embargo, para argumentar con éxito, tenemos que ser capaces de demostrar que Jenkins tiene un uso significativo y es conocido en Colombia. Usuarios, instalaciones, encuentros, conferencias, cualquier cosa de ese tipo ayudará.\n\nAquellos que llevan mucho tiempo con el proyecto pueden recordar que el nombre \"Jenkins\" nació debido a un problema de marca con Oracle. Por lo tanto, estamos especialmente sensibles al tema de las marcas registradas. Queremos asegurarnos de que el mismo problema no vuelva a ocurrir.\n\nSi sabe algo sobre el uso y el reconocimiento del nombre Jenkins en Colombia, por favor háganoslo saber enviando la información aquí . Sabemos que Jenkins es popular en Colombia, porque nuestro sitio web de tráfico muestra que los usuarios colombianos de Jenkins son los terceros visitantes más frecuentes a jenkins.io en América del Sur después de Brasil y Argentina.\n\nEsta información sólo se compartirá con el comité de proyecto de Jenkins y los involucrados en la defensa, y con el único propósito de defender la marca y nada más.\n\nPor favor, ayúdenos a difundir la palabra. ¡Gracias!","title":"Calling for Colombian Jenkins users!","tags":["feedback","general"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2017-02-07T00:00:00.000Z","id":"3d993b8f-320e-5137-8e5b-be2cc83d0195","slug":"/blog/2017/02/07/gsoc2017-announcement/","strippedHtml":"On behalf of the GSoC Org Admin team I am happy to announce that we are going to apply to\nGoogle Summer of Code (GSoC) again this year.\nIn GSoC high-profile students work in open-source projects for several months under mentorship of organization members.\n\nWe are looking for mentors and project ideas.\nSo yes, we are looking for you :)\n\nConditions\n\nAs a mentor, you will be asked to:\n\nlead the project in the area of their interest\n\nactively participate in the project during student selection, community bonding and coding phases (March - August)\n\nwork in teams of 2+ mentors per 1 each student\n\ndedicate a consistent and significant amount of time, especially during the coding phase ( ~5 hours per week in the team of two mentors)\n\nMentorship does not require strong expertise in Jenkins plugin development.\nThe main objective is to guide students and to get them involved into the Jenkins community.\nIf your mentor team requires any specific expertise, GSoC org admins will do their best in order to find advisors.\n\nWhat do you get?\n\nA student, who works within the area of your interest on full-time for several months\n\nJoint projects with Jenkins experts, lots of fun and ability to study something together\n\nLimited edition of swags from Google and Jenkins project\n\nMaybe: Participation in GSoC Mentor Summit in California with expense coverage (depends on project results and per-project quotas)\n\nRequirements\n\nYou are:\n\npassionate about Jenkins\n\ninterested in being a mentor or advisor\n\nready to dedicate time && have no major unavailability periods planned to this summer\n\nWe expect mentors to be available by email during 75% of working days in the May-August timeframe\n\nYour project idea is:\n\nabout code (though it may and likely should include some documentation and testing work)\n\nabout Jenkins (plugins, core, infrastructure, etc.)\n\npotentially doable by a student in 3-4 months\n\nHow to apply\n\nIf you are interested, drop the Email to the Jenkins Developer mailing list with the GSoC2017 prefix.\n\nBriefly describe your project idea (a couple of sentences) and required qualifications from students. Examples: GSoC2016, GSoC2017 - current project ideas\n\nIf you already have a co-mentor(s), please mention them\n\nHaving several project ideas is fine. Having no specific ideas is also fine.\n\nDisclaimer: We cannot guarantee that all projects happen, it depends on student application results and the number of project slots.\n\nLinks\n\nGoogle Summer of Code page\n\nJenkins GSoC Page\n\nGSoC2016 project ideas\n\nGSoC2016 page (project results and more info)","title":"Google Summer Of Code 2017: Call for mentors","tags":["gsoc","events","general","gsoc2017"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"general","limit":8,"skip":0,"numPages":33,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}