{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/developer",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-06-04T00:00:00.000Z","id":"ae4a71c1-cb70-5ef0-9944-ab05566b6516","slug":"/blog/2021/06/04/digester-removal/","strippedHtml":"Keeping up with our goal to clean up some of the technical debt inside Jenkins Core and reduce the maintenance overheads, we are happy to report we were able to remove a long-deprecated Apache Commons Digester library.\n\nJenkins Core does not depend anymore on Apache Commons Digester v.2.1, a version that has been released in 2010.\n\nSome plugins will require update to operate properly after the Jenkins core upgrade.\nSee JEP-231 for the full list of the affected plugins.\nBelow there is the list of plugins that did not have their fix released at the time of writing.\nThey will start to break with the weekly on the 7th of June, expected to be the 2.297.\n\nteamconcert\n\nvs-code-metrics\n\nBlameSubversion\n\njavatest-report\n\nvss\n\nsynergy\n\nconfig-rotator\n\nharvest\n\ncmvc\n\nIn addition to these still-served plugins, a few others will break.\nNote however that these were already suspended [ 1 ] for various reasons, so we do recommend to move away from using them or step up as maintainers.\nThe IDs for these plugins are: tfs, svn-release-mgr, cpptest, cflint, script-scm, rtc.\n\nIt is always a good idea to update all your plugins before upgrading Jenkins core.\n\nPlease reach out on the developers’ list with any questions or suggestions.\n\nGetting fixes in the affected plugins\n\nFor all affected plugins we have submitted pull requests with compatibility patches.\nThese plugins seem to have no active maintainer, and hence we cannot commit on delivering those fixes.\nIn mean time you can build a custom patch locally to resolve the issue on your instances.\nIf you use any of those plugins, consider stepping up and adopting them so that the fixes could be released.\nWe will appreciate any contributions!\n\nResources\n\nPR-5320\n\nremoving commons-digester:2.1.\nThis also contains a complete list of impacted plugins and their PRs and statuses.\n\nJEP-231\n\ndescribing this change.\n\n1. this means these plugins are not served anymore by the Jenkins Project’s hosting service. Even if they were released, the releases would not show up until additional issues are fixed.","title":"Apache Commons Digester library removal (breaking changes!)","tags":["jenkins","core","developer","announcement"],"authors":[]}},{"node":{"date":"2020-12-16T00:00:00.000Z","id":"c4aebfbd-d38b-5f0a-9232-aed83e29625f","slug":"/blog/2020/12/16/call-for-mentors/","strippedHtml":"Google Summer of Code (GSoC)\nis a program where students are paid a stipend by Google to work on a free open source project.\nStudents work on the project for three months (June to August).\nPrior to the coding phase, there is a month of community bonding, to welcome students to the Jenkins community and acquaint them with the projects processes for communication and collaboration.\nMentors are actively involved with students from March when students start to work on and submit their applications.\n(see the timeline)\n\nWe are looking for project ideas and mentors to participate in GSoC 2021.\nGSoC project ideas are coding projects that university or college students can accomplish in about three months.\nThe coding projects can be new features, plugins, test frameworks, infrastructure, etc.\nAnyone can submit a project idea, but of course we like it even better if you offer to mentor your project idea.\n\nWe accept new project ideas at any time,\nHowever, project ideas need to be finalised before February 19th, 2021 at 7pm UTC,\nwhich is the deadline for the Jenkins organization to apply to the GSoC program.\nPlease send us your project ideas before the beginning of February so they can get a proper review by the GSoC committee and by the community.\n\nHow to submit a project idea\n\nCreate a pull-request with your idea in a.adoc file\nin the project ideas.\nIt is not necessary to submit a Google Doc, but it will still work if you want to do that.\nSee the instructions on submitting ideas which include an.adoc template and some examples.\n\nCurrent list of ideas\n\nWe currently have a list of project ideas for students to browse.\nNote that this list is subject to change.\n\nWhat does mentoring involve?\n\nPotential mentors are invited to read the information for mentors.\nNote that being a GSoC mentor does not require expert knowledge of Jenkins.\nMentors do not work alone. We make sure that every project has at least two mentors.\nGSoC org admins will help to find technical advisers, so you can study together with your students.\n\nMentoring takes about 5 to 8 hours of work per week (more at the start, less at the end).\nMentors provide guidance, coaching, and sometimes a bit of cheerleading.\nThey review student proposals, pull-requests and the students presentations\nat the evaluation phase.\nThey fill in the Google provided evaluation report form at the end of coding periods.\n\nWhat do you get in exchange?\n\nIn return of mentoring, a student works on your project full time for three months.\nThink about the projects that you’ve always wanted to do but never had the time…​\n\nMentoring is also an opportunity to improve your management and people skills, while giving back to the community.\n\nThere will be a Google Mentor Summit which takes place every year.\nIn 2020, the Mentor Summit was virtual, but in previous years the summit has taken place in person.\n\nSee this post\nabout the 2019 in person Mentor Summit.\n\nGSoC is a fantastic program and the Jenkins project is happy to participate in GSoC again in 2021!\n\nFor any question, you can find the GSoC Org Admins,\nmentors and participants on the GSoC SIG Gitter chat.","title":"Google Summer of Code 2021 call for Project Ideas and Mentors","tags":["gsoc","gsoc2021","community","events","developer"],"authors":[]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"4a81cf3c-4ca0-511f-9197-d77a776ede34","slug":"/blog/2020/11/10/spring-xstream/","strippedHtml":"Cleaning up technical debt is a perennial topic among Jenkins core developers,\nand one of the most visible issues is the use of obsolete and/or forked third-party libraries.\nIn a world where Dependabot is offering updates to libraries released just hours before,\nit is unpleasant to be working with dependencies that are many years old.\nSince large organizations in particular are unhappy to install software using obsolete or nonstandard versions,\nmy employer (CloudBees) gave its blessing for me to spend some time cleaning up some of the worst offenders.\n\nThe toughest nut to crack was the Acegi Security library used for authentication,\nwhich has long since been replaced by Spring Security\n(and Jenkins was also bundling a long-outdated version of some Spring Framework dependencies).\njep:227[] tracks the complicated task of updating to Spring Security\nwithout breaking the numerous plugins that interact with authentication,\nespecially those offering a Security Realm.\n\nAnother longstanding problem was the XStream library which Jenkins uses to read and write XML configuration files.\nThis had been forked long ago by what was then the Hudson project and a few fixes applied.\nUnfortunately, some of those fixes were rejected upstream as invalid (representing unsupported usage patterns),\nand the fork fell behind the upstream version.\njep:228[] describes the impact of switching to the upstream library in a more standard usage mode,\nincluding fixes to a smaller number of plugins which would otherwise be incompatible.\n\nNow that the Jenkins 2.266 weekly release includes both updates,\nit is important for both Jenkins administrators and plugin maintainers to check for actual or potential incompatibilities.\nThere are two tables listing the impact of these changes on plugins:\n\nSpring Security compatibility\n\nXStream compatibility\n\nIf you use Jenkins then it is a good idea before upgrading to take a look at these tables\nto see if you are running any plugins considered incompatible.\nIf so, try not to rely on that plugin, or find out if there is an active maintainer who could help.\nFor entries marked unknown, it would be appreciated if you could do a sanity check after upgrading\nand offer a pull request to the table page (click Edit this file) with a more informative status.\n\nIf you find a regression in a plugin, please file a bug report in Jira and link to it from the table.\nAlso please add a JEP-227 or JEP-228 label as appropriate, for ease of tracking:\n\nOpen JEP-227 issues\n\nOpen JEP-228 issues\n\nIt is a good idea to update all your plugins before upgrading Jenkins core.\nIn the case of the Spring Security update, some security realm plugins including LDAP and Active Directory must be updated in advance.\n(You can safely run the new plugin versions on Jenkins releases prior to this change.)\nOtherwise, you risk being unable to log in to Jenkins—and thus unable to update those plugins from the GUI!\nThe LDAP plugin additionally has a new version available only after the core upgrade, but there is no rush in switching to that.\n\nIf you maintain a Jenkins plugin then please check whether it is marked anything less than compatible.\nIn some cases, there are already pull requests awaiting merge.\nIn other cases, some minor aspects of the source code have been identified that could be edited to improve compatibility.\n\nWe expect to see a bit of disruption from these changes\nbut hope that in the long run they will save time for core and plugin developers\nand lead to a more secure and stable tool.\nPlease reach out on the developers’ list with any questions or suggestions.","title":"Spring and XStream updates (breaking changes!)","tags":["jenkins","core","developer"],"authors":[]}},{"node":{"date":"2020-08-31T00:00:00.000Z","id":"6bac69c5-68d0-5291-8064-51a2296a084b","slug":"/blog/2020/08/31/github-checks-api-plugin-coding-phase-3/","strippedHtml":"This blog post is about our phase 3 progress on GitHub Checks API Project, you can find our previous blog posts for phase 1 and phase 2.\n\nAt the end of this summer, the GSoC journey for GitHub Checks API Project comes to an end as well.\nIn this blog post, I’ll show you our works during the last month:\n\nPipeline Support\n\nRerun Request Support\n\nGit SCM Support\n\nDocumentation\n\nAll the above features will be available in our planned 1.0.0 version of Checks API Plugin and GitHub Checks Plugin.\n\nCoding Phase 3 Demo\n\nPipeline Support\n\nThe pipeline support allows users to directly publish checks in their pipeline script without depending on any other consumers.\n\nThe check in the above screenshot is published by script:\n\npublishChecks name: 'pipeline check', title: 'pipeline ', summary: '# A pipeline check example',\n        text: \"## This check is published through the pipeline script\",\n        detailsURL: 'https://ci.jenkins.io'\n\nIf you want to publish checks to GitHub, please install the GitHub implementation and refer to the GitHub API documentation for the requirements for each field. A default value (build link) for detailsURL will be provided automatically.\n\nThis feature can be useful when many stages exist in your pipeline script and each takes a long time: you can publish a check for each stage to keep track of the build.\n\nRerun Request Support\n\nThe rerun request allows GitHub users to rerun the failed builds. When a build failed (which leads to a failed check), a Re-run button will be added automatically by GitHub.\n\nBy clicking the Re-run button, Jenkins will reschedule a build for the last commit of this branch.\n\nSince all checks of a commit are produced by a single build, you don’t have to rerun all failed checks, just rerun any one of the failed check will refresh all checks.\n\nGit SCM Support\n\nThanks to Ullrich 's great help, the GitHub Checks Plugin now supports Git SCM.\nThis means now you can publish checks for your freestyle project or any other projects that use Git SCM.\n\nDocument\n\nConsumers Guide and Implementation Guide are now available.\nAs a Jenkins developer, you can now start consuming our API or even providing an implementation for other SCM platforms beside GitHub.\n\nAcknowledgment\n\nThe whole GitHub Checks API project is started as a Google Summer of Code project. Much appreciate my mentors ( Tim and Ullrich) for their great help during the whole summer. Also huge thanks to the Jenkins GSoC SIG and the whole community for the technique support and resources.\n\nResources\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nProject Page\n\nGitter Channel","title":"GitHub Checks API Plugin Project - Coding Phase 3","tags":["github","api","plugins","developer","gsoc","gsoc2020"],"authors":[]}},{"node":{"date":"2020-08-29T00:00:00.000Z","id":"a6cfa2b5-a75a-5920-892a-2548994c1318","slug":"/blog/2020/08/29/git-performance-improvement-phase3/","strippedHtml":"Since the beginning of the project, the core value which drove its progress was \"To enhance the user experience for running Jenkins jobs by reducing the overall execution time\".\n\nTo achieve this goal, we laid out a path:\n\nCompare the two existing git implementations i.e CliGitAPIImpl and JGitAPIImpl using performance benchmarking\n\nUse the results to create a feature which would improve the overall performance of git plugin\n\nAlso, fix existing user reported performance issues\n\nLet’s take a journey to understand how we’ve built the new features. If you’d like to skip the journey part, you can directly go to the [major performance improvements] section and the [minor performance section] to see what we’ve done!\n\nJourney to release\n\nThe project started with deciding to choose a git operation and then trying to compare the performance of that operation by using command line git and then with JGit.\n\nStage 1: Benchmark results with git fetch\n\nThe performance of git fetch (average execution time/op) is strongly correlated to the size of a repository\n\nThere exists an inflection point on the scale of repository size after which the nature of JGit performance changes (it starts to degrade)\n\nAfter running multiple benchmarks, it is safe to say that for a large sized repository command line git would be a better choice of implementation.\n\nWe can use this insight to implement a feature which avoids JGit with large repositories.\n\nStage 2: Comparing platforms\n\nThe project was also concerned that there might be important differences between operating systems.\nFor example, what if command line Git for Windows performed very differently than command line Git on Linux or FreeBSD?\nBenchmarks were run to compare fetch performance on several platforms.\n\nRunning git fetch operation for a 400 MiB sized repository on:\n\nAMD64 Microsoft Winders\n\nAMD64 FreeBSD\n\nIBM PowerPC 64 LE Ubuntu 18\n\nIBM System 390 Ubuntu 18\n\nThe result of running this experiment is given below:\n\nThe difference in performance between git and JGit remains constant across all platforms.\n\nBenchmark results on one platform are applicable to all platforms.\n\nStage 3: Performance of git fetch and repository structure\n\nThe area of the circle enclosing each parameter signifies the strength of the positive correlation between the performance of a git fetch operation and that parameter. From the diagram:\n\nSize of the aggregated objects is the dominant player in determining the execution time for a git fetch\n\nNumber of branches and Number of tags play a similar role but are strongly overshadowed by size of repository\n\nNumber of commits has a negligible effect on the performance of running git fetch\n\nAfter running these experiments from Stage-1 to Stage-3, we developed a solution called the GitToolChooser which is explained in the next stage\n\nStage 4: Faster checkout with Git tool chooser\n\nThis feature takes the responsibility of choosing the optimal implementation from the user and hands it to the plugin. It takes the decision of recommending an implementation on the basis of the size of the repository. Here is how it works.\n\nThe image above depicts the performance enhancements we have performed over the course of the GSoC project. These improvements have enabled the checkout step to be finished within half of what it used to take earlier in some cases.\n\nLet’s talk about performance improvements in two parts.\n\nMajor performance improvements\n\nBuilding Tensorflow (~800 MiB) using a Jenkins pipeline, there is over 50% reduction in overall time spent in completing a job!\nThe result is consistent multiple platforms.\n\nThe reason for such a decrease is the fact that JGit degrades in performance when we are talking about large sized repositories. Since the GitToolChooser is aware of this fact, it chooses to recommend command line git instead which saves the user some time.\n\nMinor performance improvements\n\nNote: Enable JGit before using the new performance features to let GitToolChooser work with more options → Here’s how\n\nBuilding the git plugin (~ 20 MiB) using a Jenkins pipeline, there is a drop of a second across all platforms when performance enhancement is enabled. Also, eliminating a redundant fetch reduces unnecessary load on git servers.\n\nThe reason for this change is the fact that JGit performs better than command line git for small sized repositories (<50MiB) as an already warmed up JVM favors the native Java implementation.\n\nReleases\n\nGit Plugin 4.4.0\n\nAdd GitToolChooser\n\nRemove redundant fetch\n\nGit Client Plugin 3.4.0\n\nAdd support to communicate compatibility of JGit with certain additional SCM behaviors\n\nThe road ahead\n\nSupport from other branch source plugins\n\nPlugins like the GitHub Branch Source Plugin or GitLab Branch Source Plugin need to extend an extension point provided by the git plugin to facilitate the exchange of information related to size of a remote repository hosted by the particular git provider\n\nJENKINS-63519 : GitToolChooser predicts the wrong implementation\n\nAddition of this feature to GitSCMSource\n\nDetection of lock related delays accessing the cache directories present on the controller\n\nThis issue was reported by the plugin maintainer Mark Waite, there is a need to reproduce the issue first and then find a possible solution.\n\nReaching out\n\nFeel free to reach out to us for any questions or feedback on the project’s\nGitter Channel or the\nJenkins Developer Mailing list.\nReport an issue at Jenkins Jira.\n\nUseful Links\n\nPhase 1 Blog: https://www.jenkins.io/blog/2020/07/09/git-performance-improvement-phase1/\n\nPhase 2 Blog: https://www.jenkins.io/blog/2020/07/29/git-performance-improvement-phase2/\n\nProject Page: https://www.jenkins.io/projects/gsoc/2020/projects/git-plugin-performance/\n\nDemonstration","title":"Git Plugin Performance Improvement: Final Phase and Release","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[]}},{"node":{"date":"2020-08-25T00:00:00.000Z","id":"7a744457-8457-529e-9c68-1e00d5e790df","slug":"/blog/2020/08/25/external-fingerprint-storage-phase-3/","strippedHtml":"The final phase for the External Fingerprint Storage\nProject has come to an end and to finish off, we release one more fingerprint storage plugin:\nthe PostgreSQL Fingerprint Storage Plugin!\n\nThis post highlights the progress made during phase-3.\nTo understand what the project is about and the past progress, please refer to the\nphase-1 post and the\nphase-2 post.\n\nIntroducing the PostgreSQL Fingerprint Storage Plugin\n\nWhy PostgreSQL?\n\nThere were several reasons why it made sense to build another reference implementation, especially backed by PostgreSQL.\n\nRedis is a key-value storage, and hence stores the fingerprints as blobs.\nThe PostgreSQL plugin defines a relational structure for fingerprints.\nThis offers a more powerful way to query the database for fingerprint information.\nFingerprint facets can store extra information inside the fingerprints, which cannot be queried in Redis directly.\nPostgreSQL plugin allows powerful (indexing) and efficient querying strategies which can even query the facet metadata.\n\nAnother reason for building this plugin was to provide a basis for other relational database plugins to be built.\nIt also validates the flexibility and design of our external fingerprint storage API.\n\nSince PostgreSQL is a traditional disk storage database, it is more suitable for systems storing a massive number of\nfingerprints.\n\nAmong relational databases, PostgreSQL is quite popular, has extensive support, and is open-source.\nWe expect the new implementation to drive more adoption, and prove to be beneficial to the community.\n\nInstallation:\n\nThe plugin can be installed using the\nexperimental update center.\nFollow along the following steps after running Jenkins to download and install the plugin:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nGo to Advanced tab\n\nConfigure the Update Site URL as: https://updates.jenkins.io/experimental/update-center.json\n\nClick on Submit, and then press the Check Now button.\n\nGo to Available tab.\n\nSearch for PostgreSQL Fingerprint Storage Plugin and check the box along it.\n\nClick on Install without restart\n\nThe plugin should now be installed on the system.\n\nUsage\n\nOnce the plugin has been installed, you can configure the PostgreSQL server details by following the steps below:\n\nSelect Manage Jenkins\n\nSelect Configure System\n\nScroll to the section Fingerprints and choose PostgreSQL Fingerprint Storage in the dropdown for\nFingerprint Storage Engine.\n\nConfigure the following parameters to connect to your PostgreSQL instance:\n\nHost - Enter hostname where PostgreSQL is running\n\nPort - Specify the port on which PostgreSQL is running\n\nSSL - Click if SSL is enabled\n\nDatabase Name - Specify the database name inside the PostgreSQL instance to be used. Please note that the database\nwill not be created by the plugin, the user has to create the database.\n\nConnection Timeout - Set the connection timeout duration in seconds.\n\nSocket Timeout - Set the socket timeout duration in seconds.\n\nCredentials - Configure authentication using username and password to the PostgreSQL instance.\n\nUse the Test PostgreSQL Connection button to verify that the details are correct and Jenkins is able to connect to\nthe PostgreSQL instance.\n\n[IMPORTANT] When configuring the plugin for the first time, it is highly important to press the Perform PostgreSQL\nSchema Initialization button. It will automatically perform schema initialization and create the necessary indexes.\nThe button can also be used in the case the database is wiped out and schema needs to be recreated.\n\nPress the Save button.\n\nNow, all the fingerprints produced by this Jenkins instance should be saved in the configured PostgreSQL instance!\n\nQuerying the Fingerprint Database\n\nDue to the relational structure defined by PostgreSQL, it allows users/developers to query the fingerprint data which\nwas not possible using the Redis fingerprint storage plugin.\n\nThe fingerprint storage can act as a consolidated storage for multiple Jenkins instances.\nFor example, to search for a fingerprint id across Jenkins instances using the file name, the following query could be\nused:\n\nSELECT fingerprint_id FROM fingerprint.fingerprint\nWHERE filename = 'random_file';\n\nA sample query is provided which can be tweaked depending on the parameters to be searched:\n\nSELECT * FROM fingerprint.fingerprint\nWHERE fingerprint_id = 'random_id'\n        AND instance_id = 'random_jenkins_instance_id'\n        AND filename = 'random_file'\n        AND original_job_name = 'random_job'\n        AND original_job_build_number = 'random_build_number'\n        AND timestamp BETWEEN '2019-12-01 23:59:59'::timestamp AND now()::timestamp\n\nThe facets are stored in the database as jsonb.\nPostgreSQL offers support to query jsonb.\nThis is especially useful for querying the information stored inside fingerprint facets.\nAs an example, the Docker Traceability Plugin stores information like the name of Docker images inside these\nfacets.\nThese can be queried across Jenkins instances like so:\n\n>'imageName' = 'random_container';\n\nAt the moment these queries require working knowledge of the database.\nIn future, these queries can be abstracted away by plugins and the features made available to users directly inside\nJenkins.\n\nDemo\n\nExternal Fingerprint Storage Demo\n\nSlide deck\n\nReleases 🚀\n\nWe released the 0.1-alpha-1 version for the\nPostgreSQL Fingerprint Storage Plugin.\nPlease refer to the\n\nchangelog for more information.\n\nRedis Fingerprint Storage Plugin 1.0-rc-3 was also\nreleased.\nThe\n\nchangelog provides more details.\n\nA few API changes made in the Jenkins core were released in Jenkins-2.253.\nIt mainly includes exposing fingerprint range set serialization methods for plugins.\n\nFuture Directions\n\nThe relational structure of the plugin allows some performance improvements that can be made when implementing\ncleanup, as well as improving the performance of Fingerprint#add(String job, int buildNumber).\nThese designs were discussed and are a scope of future improvement.\n\nThe current external fingerprint storage API supports configuring multiple Jenkins instances to a single storage.\nThis opens up the possibility of developing traceability plugins which can track fingerprints across Jenkins instances.\n\nPlease consider reaching out to us if you feel any of the use cases would benefit you, or if you would like to share\nsome new use cases.\n\nAcknowledgements\n\nThe PostgreSQL Fingerprint Storage Plugin and the Redis Fingerprint Storage plugin are maintained by the\nGoogle Summer of Code (GSoC) Team for External\nFingerprint Storage for Jenkins.\nSpecial thanks to Oleg Nenashev,\nAndrey Falko, Mike Cirioli,\nTim Jacomb, and the entire Jenkins community for all the contribution to this project.\n\nAs we wrap up, we would like to point out that there are plenty of future directions and use cases for the externalized\nfingerprint storage, as mentioned in the previous section, and we welcome everybody to contribute.\n\nReaching Out\n\nFeel free to reach out to us for any questions, feedback, etc. on the project’s\nGitter Channel or the\nJenkins Developer Mailing list.\nWe use Jenkins Jira to track issues.\nFeel free to file issues under either the postgresql-fingerprint-storage-plugin or the\nredis-fingerprint-storage-plugin component depending on the plugin.\n\nOther Links\n\nPhase 1 Post\n\nPhase 2 Post\n\nPostgreSQL Fingerprint Storage Plugin\n\nRedis Fingerprint Storage Plugin\n\njep:226[]\n\nGitter Channel\n\nProject Page","title":"External Fingerprint Storage Phase-3 Update: Introducing the PostgreSQL Fingerprint Storage Plugin","tags":["plugins","fingerprint","cloud-native","external-storage","developer","PostgreSQL","gsoc","gsoc2020"],"authors":[]}},{"node":{"date":"2020-08-03T00:00:00.000Z","id":"1a966f1b-f29c-510f-943e-ff264acdf7dd","slug":"/blog/2020/08/03/github-checks-api-plugin-coding-phase-2/","strippedHtml":"Another great coding phase for GitHub Checks API Project ends!\nIn this phase, we focused on consuming the checks API in two widely used plugins:\n\nWarnings NG Plugin\n\nCode Coverage API Plugin\n\nBesides the external usage, we have also split the general checks API from its GitHub implementation and released both of the plugins:\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nCoding Phase 2 Demo [starts from 25:20]\n\nWarning Checks\n\nThe newly released Warnings NG plugin 8.4.0 will use checks API to publish different check runs for different static analysis tools.\nWithout leaving GitHub, users are now able to see the analysis report they interested in.\n\nOn GitHub’s conversation tab for each PR, users will see summaries for those checks like the screenshot above. The summaries will include:\n\nThe status that indicates the quality gate\n\nThe name of the analysis tool used\n\nA short message that indicates statistics of new and total issues\n\nMore fine-grained statistics can be found in the Details page.\n\nAnother practical feature is the annotation for specific lines of code. Users can now review the code alone with the annotations.\n\nTry It\n\nIn Wanings NG plugin 8.4.0, the warning checks is set as a default feature only for GitHub.\nFor other SCM platforms, a NullPublisher will be used which does nothing.\nTherefore, you can get those checks for your own GitHub project just in a few steps:\n\nUpdate Warnings NG plugin to 8.4.0\n\nInstall GitHub Checks plugin on your Jenkins instance\n\nFollow the GitHub app authentication guide to configure the credentials for the multi-branch project or GitHub organization project you are going to use\n\nUse warnings-ng plugin in your Jenkinsfile for the project you configured in the last step, e.g.\n\nnode {\n    stage ('Checkout') {\n        checkout scm\n    }\n\n    stage ('Build and Static Analysis') {\n        sh 'mvn -V -e clean verify -Dmaven.test.failure.ignore'\n\n        recordIssues tools: [java(), javaDoc()], aggregatingResults: 'true', id: 'java', name: 'Java'\n        recordIssues tool: errorProne(), healthy: 1, unhealthy: 20\n        recordIssues tools: [checkStyle(pattern: 'target/checkstyle-result.xml'),\n            spotBugs(pattern: 'target/spotbugsXml.xml'),\n            pmdParser(pattern: 'target/pmd.xml'),\n            cpd(pattern: 'target/cpd.xml')],\n            qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]\n    }\n}\n\nFor more about the pipeline usage of warnings-ng plugin, please see the official documentation.\n\nHowever, if you don’t want to publish the warnings to GitHub, you can either uninstall the GitHub Checks plugin or disable it by adding skipPublishingChecks: true.\n\nrecordIssues enabledForFailure: true, tools: [java(), javaDoc()], skipPublishingChecks: true\n\nCoverage Checks\n\nThe coverage checks are achieved by consuming the API in Code Coverage API plugin.\nFirst, in the conversation tab of a PR, users will be able to see the summary about the coverage difference compared to previous builds.\n\nThe Details page will contain some other things:\n\nLinks to the reference build, including the target branch build from the master branch and the last successful build from this branch\n\nCoverage healthy score (the default value is 100% if the threshold is not configured)\n\nCoverages and trends of different types in table format\n\nThe pull request for this feature will soon be merged and will be included in the next release of Coverage Checks API plugin. After that, you can use it by adding the below section to your pipeline script:\n\nnode {\n    stage ('Checkout') {\n        checkout scm\n    }\n\n    stage ('Line and Branch Coverage') {\n        publishCoverage adapters: [jacoco('**/*/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_ALL_BUILD')\n    }\n}\n\nLike the warning checks, you can also disable the coverage checks by setting the field skipPublishingChecks, e.g.\n\npublishCoverage adapters: [jacoco('**/*/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_ALL_BUILD'), skipPublishingChecks: true\n\nNext Phase\n\nIn the next phase, we will turn our attention back to Checks API Plugin and GitHub Checks Plugin and add the following features in future versions:\n\nPipeline Support\n\nUsers can publish checks directly in a pipeline script without requiring a consumer plugin that supports the checks.\n\nRe-run Request\n\nUsers can re-run Jenkins build through Checks API.\n\nLastly, it is exciting to inform that we are currently making the checks feature available on ci.jenkins.io for all plugins hosted in the jenkinsci GitHub organization, please see INFRA-2694 for more details.\n\nResources\n\nChecks API Plugin\n\nGitHub Checks Plugin\n\nProject Page\n\nGitter Channel","title":"GitHub Checks API Plugin Project - Coding Phase 2","tags":["github","api","plugins","developer","gsoc","gsoc2020"],"authors":[]}},{"node":{"date":"2020-07-29T00:00:00.000Z","id":"84676949-9b05-55b1-b843-435c0ff0696d","slug":"/blog/2020/07/29/git-performance-improvement-phase2/","strippedHtml":"The second phase of the Git Plugin Performance Improvement project has been great in terms of the progress we have achieved in implementing performance improvement insights\nderived from the phase one JMH micro-benchmark experiments.\n\nWhat we’ve learned so far in this project is that a git fetch is highly correlated to the size of the remote repository. In order to make fetch improvements in this plugin, our task was to find the difference in performance for the two available git implementations in the Git Plugin, git and JGit.\n\nOur major finding was that git performs much better than JGit when it comes to a large sized repository (>100 MiB). Interestingly, JGit performs better than git when size of the repository is less than 100 MiB.\n\nIn this phase, we were successful in coding this derived knowledge from the benchmarks into a new functionality called the\nGitToolChooser.\n\nGitToolChooser\n\nThis class aims to add the functionality of recommending a git implementation on the basis of the size of a repository which has a strong correlation to the performance of git fetch (from performance Benchmarks).\n\nIt utilizes two heuristics to calculate the size:\n\nUsing cached .git dir from multibranch projects to estimate the size of a repository\n\nProviding an extension point which, upon implementation, can use REST APIs exposed by git service providers like Github, GitLab, etc to fetch the size of the remote repository.\n\nWill it optimize your Jenkins instance?\nThat requires one of the following:\n\nyou have a multibranch project in your Jenkins instance, the plugin can use that to recommend the optimal git implementation\n\nyou have a branch Source Plugin installed in the Jenkins instance, the particular branch source plugin will recommend a git implementation using REST APIs provided by GitHub or GitLab respectively.\n\nThe architecture and code for this class is at: PR-931\n\nNote : This functionality is an upcoming feature in the subsequent Git Plugin release.\n\nJMH benchmarks in multiple environments\n\nThe benchmarks were being executed on Linux and macOS machines frequently but there was a need to check if the results gained from those benchmarks would hold true across more platforms to ensure that the solution (GitToolChooser) is generally platform-agnostic.\n\nTo test this hypothesis, we performed an experiment:\n\nRunning git fetch operation for a 400 MiB sized repository on:\n\nWindows\n\nFreeBSD 12\n\nppc64le\n\ns390x\n\nThe result of running this experiment is given below:\n\nObservations:\n\nppc64le and s390x are able to run the operation in almost half the time it takes for the Windows or FreeBSD 12 machine. This behavior may be attributed to the increased computational power of those machines.\n\nThe difference in performance between git and JGit remains constant across all platforms which is a positive sign for the GitToolChooser as its recommendation would be consistent across multiple devices and operating systems.\n\nRelease Plan 🚀\n\nJENKINS-49757 - Avoid double fetch from Git checkout step\nThis issue was fixed in phase one, avoids the second fetch in redundant cases.\nIt will be shipped with some benchmarks on the change in performance due to the removal of the second fetch.\n\nPR-574\n\nPR-904\n\nGitToolChooser\n\nPR-931\nThis pull request is under review, will be shipped in one of the subsequent Git Plugin releases.\n\nCurrent Challenges with GitToolChooser\n\nImplement the extension point to support GitHub Branch Source Plugin, Gitlab Branch Source Plugin and Gitea Plugin.\n\nThe current version of JGit doesn’t support LFS checkout and sparse checkout, need to make sure that the recommendation doesn’t break existing use cases.\n\nFuture Work\n\nIn phase three, we wish to:\n\nRelease a new version of the Git and Git Client Plugin with the features developed during the project\n\nContinue to explore more areas for performance improvement\n\nAdd a new git operation: git clone (Stretch Goal)\n\nReaching Out\n\nFeel free to reach out to us for any questions or feedback on the project’s Gitter Channel or the Jenkins\nDeveloper Mailing list.\n\nProject Page\n\nPhase 1 Blog Post","title":"Git Plugin Performance Improvement Phase-2 Progress","tags":["plugins","git","platform-sig","developer","performance","gsoc","gsoc2020"],"authors":[]}}]}},"pageContext":{"tag":"developer","limit":8,"skip":0,"numPages":5,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}