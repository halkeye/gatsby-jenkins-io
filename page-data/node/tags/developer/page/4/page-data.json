{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/developer/page/4",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-12-26T00:00:00.000Z","id":"14d2c0a3-cdcd-532e-847f-8b8c1d9171e1","slug":"/blog/2018/12/26/gsoc-2019-call-for-mentors/","strippedHtml":"Google Summer of Code\nis as program where students are paid a stipend by Google to work on a free open source project like Jenkins,\nat full-time for four months (May to August).\nMentors get actively involved with students starting at the end of February when students start to apply\n(see the timeline).\n\nWe are looking for mentors and project ideas to participate in the 15th edition of the Google Summer of Code program!\nWe have until February 6th, 2019 at 8pm UTC to submit the application on behalf the Jenkins Organization, but obviously,\nwe want to be ready before that.\n\nThe first step in the process is to have mentors and project ideas.\nThen we will apply to Google.\nWe need Google to accept Jenkins' application to the program itself.\nAnd for this to happen, we need project proposals and mentors.\n\nWe currently have a list of project idea proposals,\nand we are looking for new project proposals, mentors, technical advisers, and subject matter experts.\nGSoC projects may be about anything around code: new features, plugins, test frameworks, infrastructure, etc., etc.\n\nMaking a project idea proposal is easy, you can read the instructions here.\nQuick start:\n\nCopy the project proposal template,\nadd a short description of your project idea\n\nOpen the document for public view and comments, reference communication channels there (if any)\n\nLet us know about the project idea via our gitter channel or the\nmailing list.\n\nAfter getting initial feedback from org admins, share your idea with other contributors who might be interested\n(via the developer mailing list, chats, or special interest groups)\n\nPotential mentors are invited to read the information for mentors for more information about the project.\nNote that being a GSoC mentor does not require expert knowledge of Jenkins.\nGSoC org admins will help to find technical advisors, so you can study together with your students.\n\nMentoring takes about 5 to 6 hours of work per week (more at the start, less at the end).\nIn return, a student works on your project full time for four months.\nThink about the projects that you’ve always wanted to do but could not find the time…​\nThere are also many opportunities to engage with the Jenkins community (meetups, knowledge sharing, communications) and with other projects (e.g. going to the GSoC Mentor Summit).\nGSoC is a pretty good return on the investment!\n\nFor any question, you can find the GSoC admins,\nmentors and participants on the GSoC SIG Gitter chat.\n\nThe Jenkins GSoC Org Admin Team 2019","title":"Google Summer of Code 2019. Call for Project ideas and Mentors","tags":["gsoc","gsoc2019","community","events","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#7898d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png","srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/4c2a5/martinda.png 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/8bef2/martinda.png 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/2864c/martinda.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/5abcf/martinda.webp 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/410d2/martinda.webp 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/6f814/martinda.webp 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/ca864/martinda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":136}}},"blog":null,"github":"martinda","html":"<div class=\"paragraph\">\n<p>Martin is a Jenkins community member. He participates since 2016 in the Jenkins GSoC program as a mentor, and more recently as an organization admin.\nHe currrently works in ASIC/FPGA Development Automation, using Jenkins, Gradle, Make, Artifactory, and a million other tools and languages.</p>\n</div>","id":"martinda","irc":"martinda","linkedin":null,"name":"Martin d'Anjou","slug":"/blog/authors/martinda","twitter":"martindanjou14"}]}},{"node":{"date":"2018-12-14T00:00:00.000Z","id":"cc052415-dba7-5a62-91d8-3f6906f485d9","slug":"/blog/2018/12/14/java11-preview-availability/","strippedHtml":"Please refer to Running Jenkins on Java 11 documentation to have the up-to-date details on how to run Jenkins on Java 11.\n\nThis is a joint blogpost prepared by the Java 11 Support Team.\nOn Dec 18 (4PM UTC) we will be also presenting the Java 11 Preview Support at the Jenkins Online Meetup\n( link)\n\nJenkins, one of the leading open-source automation servers, still supports only Java 8.\nOn September 25 OpenJDK 11 was released.\nThis is a Long-Term-Support which will stay around for years,\nand in the Jenkins project we are interested to offer a full support of this version.\nOver the last year many contributors have been working towards enabling support for Java 11 in the project (Jenkins JEP-211).\nIt was a thorny path,\nbut now, on behalf of the Jenkins Platform SIG,\nwe are happy to announce preview availability of Java 11 support in Jenkins weekly releases!\n\nWhy do we need preview availability for Java 11?\nIt offers Jenkins contributors and early adopters a way\nto try out the changes before the general availability release happens early next year.\nIt should help us to get more exploratory testing and, hopefully,\nresolve most of the issues before Java 11 is officially supported in Jenkins.\n\nIn this blog post we will describe how to run with Java 11,\nand how to investigate compatibility issues and report them.\n\nBackground\n\nAs you probably remember,\nin June 2018 we had an online hackathon targeting Java 10+ support in Jenkins.\nAs a part of the hackathon,\nwe provided the experimental support of Java 11.\nThis event was a big success for us,\nand we were able to get Jenkins running with Java 10 and 11-ea,\nincluding major features like Jenkins Pipeline, JobDSL, Docker/Kubernetes plugins, Configuration as Code, BlueOcean, etc.\nIt gave us confidence that we can provide Java 11 support in Jenkins without major breaking changes.\nAfter the hackathon, Oleg Nenashev created\njep:211[\"Java 10+ support in Jenkins\"] (was later adjusted to target Java 11 only).\nPlatform Special Interest Group\nhas been also founded to coordinate the Java 11 support work\nand other platform support efforts (packaging, operating system support, etc.).\n\nA group of contributors continued working on Java 11 support,\nmostly focusing on upstreaming functional patches,\nenabling Java 11 support in development tools,\ntesting and addressing known compatibility issues.\nSee the Platform SIG meeting notes for detailed status updates.\nStarting from Jenkins 2.148, Jenkins successfully runs with latest OpenJDK 11 releases on various Linux and Windows platforms.\nWe performed a LOT of automated and exploratory tests, Jenkins plugins appear to work well with some exceptions (see below).\nThere is ongoing test automation effort towards the GA releases,\nbut we were able to successfully run Jenkins core tests,\nfull Acceptance Test Harness,\nand Plugin Compat Tester for recommended plugins.\nWe also deployed a temporary\nExperimental Update Center for Java 11\nwhich allows quickly delivering fixes for Java 11 early adopters.\nJenkins 2.155+ defaults to this update center when running with Java 11,\nand that’s why we announce preview availability for this version.\n\nOn Nov 19, 2018 we presented the current Java 11 support status at the Platform SIG meeting\nslides,\nand we agreed that we would like to proceed with the preview availability so that\nwe can offer something for evaluation to Jenkins users.\nBy the next meeting on Dec 04, all blockers have been addressed,\nand the Platform SIG meeting signed off the Java 11 preview availability.\n\nRunning Jenkins and Java 11 in Docker\n\nStarting from Jenkins 2.155, we provide Docker images for the Jenkins controller and agent.\nAll these images are based on the official\nopenjdk:11-jdk image maintained by the Docker Community.\nThere were discussions about migrating to other base images,\nbut we decided to exclude it from the Preview Availability scope.\nSimilarly, we do not provide Alpine images for now.\n\nJenkins controller image\n\nJava 11 support is now provided as a part of the official\njenkins/jenkins image.\nYou can run the Jenkins with Java 11 simply as:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:jdk11\n\nThe following tags are available:\n\njdk11 - Latest weekly release with Java 11 support\n\n2.155-jdk11 - Weekly releases packaged with Java 11\n\nThe image is fully compatible with\njenkins/jenkins documentation,\ne.g. you can use plugins.txt to install plugins, mount volumes and pass extra options via environment variables.\n\nAgent images\n\nIf you use containerized agents via Docker or Kubernetes plugins,\nwe have also released official Docker images for Jenkins agents:\n\njenkins/agent\n\njenkins/inbound-agent\n\njenkins/ssh-build-agent\n\nAll images use the latest-jdk11 image tag for JDK11 bundles.\nAnd sorry for the obsolete names!\n\nExperimental Jenkins controller images\n\nIn order to simplify testing, we also provide some experimental images on DockerHub.\nWe set up a continuous delivery flow for them,\nso you can get patches without waiting for Jenkins weekly releases.\n\njenkins4eval/blueocean-platform-support -\nEquivalent of jenkinsci/blueocean\n\nTag: latest-jdk11\n\nThe image bundles all Jenkins Pipeline and Blue Ocean patches required to run on Java 11\n\nIf you want to try Pipeline, use this image\n\njenkins/jenkins-experimental -\nEquivalent of jenkins/jenkins\n\nTag: latest-jdk11\n\nThe image is released from the java11-support feature branch in the Jenkins core\n\nThe branch may be slightly ahead or behind the master branch,\nwe may use the branch to quickly deliver patches to Java 11 users\n\nEventually we will move the experimental flow to the new jenkins4eval organization\nbeing created as a part of jep:217[].\n\nRunning jenkins.war with Java 11\n\nRunning without Docker is not that trivial,\nbecause Jenkins depends on some modules which have been removed from Java 11.\nWe plan to address it in the General Availability release somehow (see jira:JENKINS-52186[]),\nbut for now some manual actions are required to run Jenkins WAR with Java 11.\n\nDownload Jenkins WAR for 2.155\n\nDownload the following libraries to the same directory as jenkins.war\n\njaxb-api-2.3.0.jar (save as jaxb-api.jar)\n\njaxb-core-2.3.0.1.jar (save as jaxb-core.jar)\n\njaxb-impl-2.3.0.1.jar (save as jaxb-impl.jar)\n\njavax.activation v.1.2.0 (save as javax.activation.jar)\n\nRun the following command:\n\nRun Jenkins with ${JAVA11_HOME}/bin/java \\\n    -p jaxb-api.jar:javax.activation.jar --add-modules java.xml.bind,java.activation \\\n    -cp jaxb-core.jar:jaxb-impl.jar \\\n    -jar jenkins.war --enable-future-java --httpPort=8080 --prefix=/jenkins\n\nKnown compatibility issues\n\nTo help users to track down the compatibility issues,\nwe have created a new Known Java 11 Compatibility Issues Wiki page.\n\nSeveral important issues and obstacles:\n\nPipeline: Support Plugin has a known issue\nwith context persistency when running with Java 11 (jira:JENKINS-51998[])\n\nWe have deployed a temporary fix to the\nExperimental Update Center for Java 11.\n Fix version: 3.0-java11-alpha-1\n\nIf you use Jenkins Pipeline, make sure you run with this fix.\nOtherwise the jobs will fail almost immediately\n\nWhen updating instances to Java 11, make sure there is no running Pipelines\n\njira:JENKINS-54305[] -\nJDK Tool Plugin does not offer installers for JDK 11\n\njira:JENKINS-52282[] -\nJava Web Start is no longer available in Java 11, so it is no longer possible to start agents from Web UI.\nWe do not plan to provide a replacement.\n\nWe also know about some minor incompatibilities in other plugins,\nbut we do not consider them as blockers for preview availability.\n\nReporting compatibility issues\n\nIf you discover any Java 11 incompatibilities, please\nreport issues in our bugtracker.\nPlease set java11-compatibility labels for such issues\nso that they automatically appear on the Wiki page and get triaged.\n\nFor the security issues please use the standard\nvulnerability reporting process.\nAlthough we will be fixing Java 11 specific issues in public while it is in the preview,\nfollowing the security process will help us to investigate impact on Java 8 users.\n\nJava 11 Support Team\n\nOnce Java 11 support is released, we expect reports of regressions in plugins and Jenkins core.\nOne of the concerns are exotic platforms with native libraries, and of course other Java versions.\nThere is also a risk of 3rd-party library incompatibilities with Java 11.\nTo mitigate the risks, we have created a\nJava 11 Support Team.\nThis team will be focusing on triaging the incoming issues,\nhelping to review pull requests and, in some cases, delivering the fixes.\nThe process for this team is documented in JEP-211.\n\nWe do not expect the Java 11 Support Team to be able to fix all discovered issues,\nand we will be working with Jenkins core and plugin maintainers to get the fixes delivered.\nIf you are interested to join the team,\nreach out to us in the Platform SIG Gitter Channel.\n\nContributing\n\nWe will appreciate any kind of contributions in the Java 11 effort,\nincluding trying out Jenkins with Java 11, reporting and fixing compatibility issues.\n\nIf you want to do the exploratory testing,\nwe recommend to try out Java 11 support at one of your test instances.\nSuch testing will be much appreciated,\nespecially if you use some service integration plugins or exotic platforms.\nThe issue reporting guidelines are provided above\n\nIf you are a plugin developer/maintainer,\nwe would appreciate if you could test your plugin with Java 11.\nIn order to help with that, we have created a Wiki page with\nJava 11 Developer guidelines.\nThis page explains how to build and test plugins with Java 11,\nand it also lists known issues in development tools\n\nWhatever you do, please let us know about your experience by sending a message to\nthe Platform SIG mailing list.\nSuch information will help us a lot to track changes and contributions.\nAny other feedback about the migration complexity will be appreciated!\n\nWhat’s next?\n\nOn Dec 18 (4PM UTC) we will be presenting the Java 11 Preview Support at the Jenkins Online Meetup\n( link).\nAt this meetup we will summarize the current Java 11 Preview support status.\nIf you are a plugin developer, we will also organize separate sessions about testing plugins with Java 11 and about common best practices for fixing compatibility issues.\nPlease follow the Platform SIG announcements if you are interested.\n\nIn the next weeks we will focus on addressing feedback from early adopters and\nfixing the discovered compatibility issues.\nWe will also continue working on Java 11 support patches towards the general availability next year (jira:JENKINS-51805[]).\nIn addition to that, we will start working on Java 11 support in subprojects,\nincluding Jenkins X and Jenkins Evergreen.\n\nLinks\n\nJEP-211: Java 11 support in Jenkins\n\nJava requirements in Jenkins\n\nKnown Java 11 Compatibility Issues\n\nJava 11 Developer guidelines\n\nPlatform Special Interest Group","title":"Java 11 Support Preview is available in Jenkins 2.155+","tags":["core","developer","java11","community","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-07-19T00:00:00.000Z","id":"e791a263-9144-5400-9cc7-12e369131b87","slug":"/blog/2018/07/19/jenkins-x-accelerate/","strippedHtml":"Jenkins X uses Capabilities identified by the \"Accelerate:  The Science Behind Devops\"\n\nJenkins X is a reimagined CI/CD implementation for the Cloud which is heavily influence by the\nState of DevOps reports and more recently the book\n\"Accelerate: The Science Behind Devops\" by\nNicole Forsgren,\nJez Humble and\nGene Kim\n\nYears of gathering data from real world teams and organisations which has been analyzed by inspiring thought leaders and data\nscientists from the DevOps world, \"Accelerate\" recommends a number of capabilities that Jenkins X is implementing so\nusers gain the scientifically proven benefits, out of the box. We’ve started documenting the capabilities that are available\ntoday and will continue as more become available.\n\nCredit: thanks to tracymiranda for the image\n\nUse version control for all artifacts\n\nThe Weaveworks folks coined the term GitOps which we love.  Any change to an environment, whether it be a new application,\nversion upgrade, resource limit change or simple application configuration should be raised as a Pull Request to Git, have\nchecks run against it like a form of CI for environments and approved by a team that has control over what goes into the\nrelated environment.  We can now enable governance and have full traceability for any change to an environment.\n\nRelated Accelerate capability:  Use version control for all production artifacts\n\nAutomate your deployment process\n\nEnvironments\n\nJenkins X will automatically create Git backed environments during installation and makes it easy to add new ones using\njx create environment.  Additionally when creating new applications via a quickstart ( jx create quickstart), Java based\nSpringBoot ( jx create spring) or importing existing applications ( jx import), Jenkins X will both automatically add\nCI / CD pipelines and setup the jobs, git repos and webhooks to enable an automated deployment process.\n\nOut of the box Jenkins X creates Staging and Production (this is customisable) permanent environments as well as temporary\nenvironments for preview applications from Pull Requests.\n\nPreviews Environments\n\nWe are trying to move as much testing, security, validation and experimentation for a change before it’s merged to master.\nWith the use of temporary dynamically created Preview Environments any pull request can have a preview version built and\ndeployed, including libraries that feed into a downstream deployable application.  This means we can code review, test,\ncollaborate better with all teams that are involved in agreeing that change can go live.\n\nUltimately Jenkins X wants to provide a way that developers, testers, designers and product managers can be as sure as they\ncan that when a change is merged to master it works as expected.  We want to be confident the proposed change does not\nnegatively affect any service or feature as well as deliver the value it is intended to.\n\nWhere Preview Environments get really interesting is when we are able to progress a PR through various stages of maturity and\nconfidence where we begin to direct a percentage of real production traffic like beta users to it.  We can then analyse the\nvalue of the proposed change and possible run multiple automated experiments over time using Hypothesis Driven Development.\nThis helps give us better understanding of how the change will perform when released to all users.\n\nRelated Accelerate capability: Foster and enable team experimentation\n\nUsing preview environments is a great way to introduce better test automation.  While Jenkins X enables this we don’t yet\nhave examples of automated tests being run against a preview environment.  A simple test would be to ensure the application\nstarts ok and Kubernetes liveness check pass for an amount of time. This relates to\n\nRelated Accelerate capability: Implement Test Automation\nRelated Accelerate capability: Automate your deployment process\n\nPermanent Environments\n\nIn software development we’re used to working with multiple environments in the lead up to a change being promoted to a live\nproduction environment.  Whilst this seems business as usual it can cause significant delays to other changes if for any\nreason that it is deemed not fit via some process that didn’t happen pre merge to master.  Subsequent commits then become\nblocked and can cause delay of urgent changes being promoted to production.\n\nAs above Jenkins X wants any changes and experiments to be validated before it is merged to master.  We would like changes in\na staging environment to be held there for a short amount of time before being promoted, ideally in an automated fashion.\n\nThe default Jenkins X pipelines provide deployment automation via environments.  These are customisable to suite your own\nCI / CD pipeline requirements.\n\nJenkins X recommends Staging should act as a near as possible reflection on production, ideally with real production data\nshadowed to it using a service mesh to understand the behaviour.  This also helps when developing changes in preview where we\ncan link to non production services in staging.\n\nRelated Accelerate capability: Automate your deployment process\n\nUse trunk-based development\n\nThe Accelerate book found that teams which use trunk based development with short lived branches performed better.  This has\nalways worked for the Jenkins X core team members so this was an easy capability for Jenkins X to implement when setting up\nGit repositories and CI/CD jobs.\n\nImplement Continuous Integration\n\nJenkins X sees CI as the effort of validating a proposed change via pull requests before it is merged to controller.  Jenkins X\nwill automatically configure source code repositories, Jenkins and Kubernetes to provide Continuous Integration of the box.\n\nImplement Continuous Delivery\n\nJenkins X sees CD as the effort of taking that change after it’s been merged to controller through to running in a live\nenvironment.  Jenkins X automates many parts in a release pipeline:\n\nJenkins X advocates the use of semantic versioning.  We use git tags to calculate the next release version which means we\ndon’t need to store the latest release version in the controller branch.  Where release systems do store the last or next version\nin Git repos it means CD becomes hard, as a commit in a release pipeline back to controller triggers a new release.  This results\nin a recursive release trigger.  Using a Git tag helps avoid this situation which Jenkins X completely automates.\n\nJenkins X will automatically create a released version on every merge to master which can then potentially progress\nthrough to production.\n\nUse loosely coupled architecture\n\nBy targeting Kubernetes users of Jenkins X can take advantage of many of the cloud features that help design and develop\nloosely coupled solutions.  Service discovery, fault tolerance, scalability, health checks, rolling upgrades, container\nscheduling and orchestration to name just a few examples of where Kubernetes helps.\n\nArchitect for empowered teams\n\nJenkins X aims to help polyglot application developers.  Right now Jenkins X has quickstarts and automated CI/CD setup with\nlanguage detection for Golang, Java, NodeJS, .Net, React, Angular, Rust, Swift and more to come.  What this also does is\nprovide a consistent Way of Working so developers can concentrate on developing.\n\nJenkins X also provides many addons, for example Grafana and Prometheus for automated metrics collection and visualisation.\nIn this example centralised metrics help understand how your applications behave when built and deployed on Kubernetes.\n\nDevPods are another feature which enables developers to edit source code in their\nlocal IDE, behind the scenes it is then synced to the cloud and rapidly built and redeployed.\n\nJenkins X believes providing developers automation that helps them experiment in the cloud, with different technologies and\nfeedback empowers them to make the best decisions - faster.\n\nFancy a closer look?\n\nMyself, James Strachan and\nRob Davies are going to be presenting and running workshops at\nDevOps World  | Jenkins World.  We’ll also be hanging out at the Jenkins X demo\narea so come and say hello and see what’s the latest cool and exiting things to come out of Jenkins X.  Use JWFOSS for 30%\ndiscount off registration\n\nWant to get involved?\n\nJenkins X is open source, the community mainly hangs out in the\nJenkins X Kubernetes slack channels and for tips on being more involved with Jenkins X\ntake a look at our contributing docs.  We’ve been helping lots of folks get into open source, learn\nnew technoligies and languages like golang.  Why not get involved?\n\nDemo\n\nIf you’ve not already seen it here’s a video showing a spring boot quickstart with automatic CI/CD pipelines and preview environments.","title":"Accelerate with Jenkins X","tags":["jenkinsx","developer","kubernetes"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8e8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg","srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/77b35/jrawlings.jpg 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/d4a57/jrawlings.jpg 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/19e71/jrawlings.jpg 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/68974/jrawlings.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/ef6ff/jrawlings.webp 32w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/8257c/jrawlings.webp 64w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/6766a/jrawlings.webp 128w,\n/gatsby-jenkins-io/static/8f3e9e2f521cb211e3ccac77dc47d04f/22bfc/jrawlings.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"rawlingsj","html":"<div class=\"paragraph\">\n<p>James has a passion for continuous delivery and software automation in general.  Continually looking at\nways to help improve developers experience for the cloud.  James works on the OSS project <a href=\"https://jenkins-x.io/\">Jenkins X</a></p>\n</div>","id":"jrawlings","irc":null,"linkedin":null,"name":"James Rawlings","slug":"/blog/authors/jrawlings","twitter":"jdrawlings"}]}},{"node":{"date":"2018-06-27T00:00:00.000Z","id":"fdf34f60-9243-5d28-b9d3-ea140833ede2","slug":"/blog/2018/06/27/lessons-java10-hackathon/","strippedHtml":"Last week I participated in the\nJenkins & Java 10 Online Hackathon.\nIt was my first Jenkins hackathon and I roped in\nJonah Graham to do some pair-programming.\nThe hackathon featured JDK Project Jigsaw committers Mandy Chung and Paul Sandoz,\nas well as Jenkins creator Kohsuke Kawaguchi.\nIt was a great opportunity for me to learn a lot about Jenkins and Java 10.\n\nWhy Java 10?\n\nWith the\nJava 8 EoL data looming,\nthe focus was on the current available version of Java, Java 10.\nJava 10 offers some nice new features and APIs, not least\nimproved docker container integration.\nWe learned from Paul of a number of projects with Java 10 migration success stories including Elasticsearch, Kafka & Netty.\n\nAt the beginning of the hackathon week, the Jenkins Pipeline feature would crash out when using Java 10.\nThis was resolved with a number of fixes including the upgrade of the\nASM library.\nThen it was nice to see things\nup and running with Java 10.\n\nGetting up & running\n\nThe first steps were to do some exploratory testing using\nJenkins with Java 10 via Docker, thanks to\nOleg for providing clear instructions.\nThis was boringly straightforward as most things worked and we only found one\nissue to report.\nNext to try to get some patches in, we needed to set-up a dev environment.\nThe live session gave us what we needed to set up a\nplugin or\ncore dev environment.\nOne open question we had was whether Jenkins has semantic versioning and\nAPI tools\nto help identify when you might be breaking backwards compatibility.\nOverall it was straightforward to get a dev environment up and running.\n\nJava 10 New APIs\n\nThe next step was to find an issue which we could help resolve.\nMany of the Java 10 issues were related to 'Illegal reflective access' from various plugins or third-party libraries.\nHowever after investigating a couple, removing these warnings required a good architectural knowledge of the plugin or core code itself.\nIn the end we decided that messing around with classloaders or attempting to upgrade version of jdom was not one for the newbies.\n\nInstead we looked at\nremoving reflection\nin cases of isAccessible calls.\nWe found the\nProcessHandle\napi very useful and a good replacement for some misuse of reflection, and even better it made the code work on Windows too.\nMandy also pointed us to look at the\nLookup api\nas possible alternate to findClass calls.\n\nMulti-Release JAR Builds\n\nUsing new APIs is all well and good but presents a problem when you want to maintain backwards compatibility with Java 8.\nHence the need for some sort of multi-jar solution -\nNicolas De loof proposed one such solution for\nmulti-release jars with Maven for this case.\n\nsun.misc.Signal\n\nThe Java Signal API is being deprecated, but so far no replacement APIs\nare available for signal handling.\nJenkins makes use of the Signal APIs so a big question for the Jigsaw team was whether this would be replaced going forward.\nKohsuke pointed out how it is important for Java to maintain this UNIX like behaviour as it shouldn’t matter to end users that Jenkins is written in Java.\nIt seems these APIs will be replaced in due course, they just\naren’t there right now.\n\nCollaboration, Collaboration, Collaboration\n\nIt was great to have the discussions with the Jigsaw team.\nThey reminded us how they need to know the Java use cases out there and how their team uses these to feed into their development process.\nIn turn, the hackathon had Jenkins community members participate, for instance\neasy-jenkins was up and running with Java 10 by the end of the week.\nThe hackathon had a great feeling of community spirit and was a reminder why collaborations with communities and also between different communities can be powerful and fun for all involved.\n\nAt the end of the week Jonah and I were both happy that we made our first Jenkins contributions (which were reviewed and merged quickly).\nThanks to all who participated and made it highly enjoyable, especially Oleg for great organization.\nI look forward to the next one!","title":"What I learned from the Jenkins & Java 10+ Hackathon","tags":["events","community","developer","java10","java11"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}}},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda","twitter":"tracymiranda"}]}},{"node":{"date":"2018-06-27T00:00:00.000Z","id":"c68773a2-1f81-56bc-af65-71e0703df409","slug":"/blog/2018/06/27/new-login-page/","strippedHtml":"This blog post gives an introduction to the new design for the login and signup forms and Jenkins is (re)starting pages introduced in Jenkins 2.128.\nThe first part of the blog post is an introduction to the new design and UX for Jenkins users.\nThe later part is talking about extensibility in a more technical manner, aimed at plugin developers.\n\nOverview\n\nThe recent changes to some core pages provide new design and UX and further dropping all external dependencies to prevent\nany possible malicious javascript introduced by third party libraries.\nTo be clear, this never was an issue with previous releases of Jenkins, but having read this article, this author believes that the article has good points and leading by example may raise awareness of data protection.\n\nThis meant to drop the usage of the jelly layout lib (aka xmlns:l=\"/lib/layout\") and as well the page decorators it\nsupported. However there is a new SimplePageDecorator extension point (discussed below) which can be used to modify the look and feel for the login and sign up page.\n\nThe following pages have given a new design:\n\nJenkins is (re)starting pages\n\nLogin\n\nSign up\n\nUX enhancement\n\nForm validation has changed to give inline feedback about data validation errors in the same form.\n\nLogin\n\nSign up\n\nThe above image shows that the validation is now done on all input fields instead of before breaking on the\nfirst error found, which should lead to fewer retry cycles.\n\nInstead of forcing the user to repeat the password, the new UX introduces the possibility to display the password in\nclear text. Further a basic password strength meter indicates password strength to the user while she enters the password.\n\nCustomizing the UI\n\nThe re-/starting screens do not support the concept of decorators very well, hence the decision to not support them for these pages.\n\nThe SimplePageDecorator is the key component for customization and uses three different files to\nallow overriding the look and feel of the login and signup pages.\n\nsimple-head.jelly\n\nsimple-header.jelly\n\nsimple-footer.jelly\n\nAll of the above SimplePageDecorator Jelly files are supported in the login page. The following snippet is a minimal excerpt\nof the login page, showing how it makes use of SimplePageDecorator.\n\nThe sign-up page only supports the simple-head.jelly:\n\nSimplePageDecorator - custom implementations\n\nHave a look at Login Theme Plugin, which allows you to\nconfigure your own custom content to be injected into the new login/sign-up page.\n\nTo allow easy customisation the decorator only implements one instance by the principal \"first-come-first-serve\".\nIf jenkins finds an extension of the SimplePageDecorator it will use the Jelly files provided by that plugin.\nOtherwise Jenkins will fall back to the default implementation.\n\n@Extension\npublic class MySimplePageDecorator extends SimplePageDecorator {\n   public String getProductName() {\n     return \"MyJenkins\";\n   }\n}\n\nThe above will take override over the default because the default implementation has a very low ordinal ( @Extension(ordinal=-9999))\nIf you have competing plugins implementing SimplePageDecorator, the implementation with the highest ordinal will be used.\n\nAs a simple example, to customize the logo we display in the login page, create a simple-head.jelly with the following content:\n\nTo customize the login page further, create a simple-header.jelly like this:\n\nWelcome to ${it.productName}!\n\nFor example, I used this technique to create a prototype of a login page for a CloudBees product I am working on:\n\nConclusion\n\nWe hope you like the recent changes to some core pages and as well the new design and UX. We further hope you feel enabled to\ncustomize the look and feel to adopt your needs with the SimplePageDecorator.","title":"New design, UX and extensibility digest for login page et. al.","tags":["core","developer","ux"],"authors":[{"avatar":null,"blog":null,"github":"scherler","html":"<div class=\"paragraph\">\n<p>Thorsten Scherler has a broad background in open source consulting, training and solutions since 2002.\nHe&#8217;s an engineer at CloudBees, working full time on the <a href=\"https://jenkins.io/projects/blueocean/\">Blue Ocean</a> front end.\nHe left Germany in 2003 after finishing his university degrees and has been living in sunny Seville ever since.</p>\n</div>","id":"scherler","irc":null,"linkedin":null,"name":"Thorsten Scherler","slug":"/blog/authors/scherler","twitter":"thorScherler"}]}},{"node":{"date":"2018-06-21T00:00:00.000Z","id":"f197eae4-55a6-578b-aa6b-0f8809ef8608","slug":"/blog/2018/06/21/jenkins-x-devpods/","strippedHtml":"I use macOS day to day, and often struggle to keep my devtools up to date.\nThis isn’t any fault of packaging or tools, more just that I get tired of seeing the beachball:\n\nThe demands on dev machines grow, developers are now working across a more diverse\nset of technologies than just a JVM or a single scripting language these days.\n\nThis keeping up to date is a drag on time (and thus money).\nThere are lots of costs involved with development, and I\nhave written about\nabout the machine cost for development (how using something like GKE can be much\ncheaper than buying a new machine) but there is also the cost of a developer’s time.\nThankfully, there are ways to apply the same smarts here to save time as well as money.\n And time is money, or money is time?\n\nGiven all the work done in automating the detection and installation of required\ntools, environments, and libraries that goes on when you run ‘jx import’ in\nJenkins X,\nit makes sense to also make those available for development time,\nand the concept of “DevPods” was born.\n\nThe pod part of the name comes from the Kubernetes concept of pods (but you don’t have to know about Kubernetes or pods to use Jenkins X. There is a lot to Kubernetes but Jenkins X aims to provide a developer experience that doesn’t require you to understand it).\n\nWhy not use Jenkins X from code editing all the way to production,\nbefore you even commit the code or open a pull request?\nAll the tools are there, all the environments are there, ready to use (as they are used at CI time!).\n\nThis rounds out the picture: Jenkins X aims to deal with the whole lifecycle for you,\nfrom ideas/issues, change requests, testing, CI/CD, security and compliance verification,\nrollout and monitoring. So it totally makes sense to include the actual dev time tools.\n\nIf you have an existing project, you can create a DevPod by running (with the jx command):\n\njx create devpod\n\nThis will detect what type of project is (using build packs) and create a DevPod\nfor you with all the tools pre-installed and ready to go.\n\nObviously, at this point you want to be able to make changes to your app and try it out.\nEither run unit tests in the DevPod, or perhaps see some dev version of the app running in your browser (if it is a web app).\nWeb-based code editors have been a holy grail for some time, but never have quite taken off in the mainstream of developers (despite there being excellent ones out there, most developers prefer to develop on their desktop).\nIronically, the current crop of popular editors are based around\n“electron” which is actually a web technology stack,\nbut it runs locally (Visual Studio Code is my personal favourite at the moment),\nin fact Visual Studio Code has a Jenkins X extension (but you don’t have to use it):\n\nTo get your changes up to the Dev Pod, in a fresh shell run (and leave it running):\n\njx sync\n\nThis will watch for any changes locally (say you want to edit files locally on your desktop)\nand sync them to the Dev Pod.\n\nFinally, you can have the Dev Pod automatically deploy an “edit” version of the\napp on every single change you make in your editor:\n\njx create devpod --sync --reuse\n./watch.sh\n\nThe first command will create or reuse an existing Dev Pod and open a shell to it,\nthen the watch command will pick up any changes, and deploy them to your “edit” app.\nYou can keep this open in your browser, make a change, and just refresh it.\nYou don’t need to run any dev tools locally, or any manual commands in the Dev Pod to do this, it takes care of that.\n\nYou can have many DevPods running (jx get devpods), and you could stop them at the end of the day (jx delete devpod), start them at the beginning, if you like (or as I say: keep them running in the hours between coffee and beer). A pod uses resources on your cluster, and as the Jenkins X project fleshes out its support for dev tools (via things like VS Code extensions) you can expect even these few steps to be automated away in the near future, so many of the above instructions will not be needed!\n\nEnd-to-end experience\n\nSo bringing it all together, let me show a very wide (you may need to zoom out) screen shot of this workflow:\n\nFrom Left to Right :\n\nI have my editor (if you look closely, you can see the Jenkins X extension showing the state of apps,\npipelines and the environments it is deployed to).\n\nIn the middle I have jx sync running, pushing changes up to the cloud from the editor,\nand also the ‘watch’ script running in the DevPod. This means every change I make in my editor,\na temporary version of the app (and its dependencies are deployed).\n\nOn the right is my browser open to the “edit” version of the app.\nJenkins X automatically creates an “edit” environment for live changes,\nso if I make a change to my source on the left, the code is synced,\nbuild/tested and updated so I can see the change on the right\n(but I didn’t build anything locally, it all happens in the DevPod on Jenkins X).\n\nOn visual studio code: The Jenkins X extension for visual studio code can automate the creation of devpods and syncing for you. Expect richer support soon for this editor and others.\n\nExplaining things with pictures\n\nTo give a big picture of how this hangs together:\n\nIn my example, GitHub is still involved, but I don’t push any changes back to it until I am happy with the state of my “edit app” and changes.\nI run the editor on my local workstation and jx takes care of the rest.\nThis gives a tight feedback loop for changes. Of course, you can use any editor you like,\nand build and test changes locally (there is no requirement to use DevPods to make use of Jenkins X).\n\nJenkins X comes with some ready to go environments: development, staging and production (you can add more if you like).\nThese are implemented as Kubernetes namespaces to avoid the wrong app things talking to the wrong place.\nThe development environment is where the dev tools live: and this is also where the DevPods can live!\nThis makes sense as all the tools are available, and saves the hassle of you having slightly different\nversions of tools on your local workstation than what you are using in your pipeline.\n\nDevPods are an interesting idea, and at the very least a cool name!\nThere will be many more improvements/enhancements in this area, so keep an eye out for them.\nThey are a work in progress, so do check the documentation page for better ways to use them.\n\nSome more reading:\n\nDocs on DevPods on jenkins-x.io\n\nThe Visual Studio Code extension\nfor Jenkins X (what a different world: an open source editor by Microsoft!)\n\nJames Strachan’s great intro\nto Jenkins X talk at Devoxx-UK also   includes a DevPod demo","title":"Using Jenkins X DevPods for development","tags":["jenkinsx","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale","twitter":"michaelneale"}]}},{"node":{"date":"2018-06-20T00:00:00.000Z","id":"c6c81158-09c3-5db5-9f8e-8e8ad25bd805","slug":"/blog/2018/06/20/anchore-image-scanning/","strippedHtml":"(adapted from this blog post by Daniel Nurmi)\n\nAs more and more Jenkins users ship docker containers, it is worth thinking about the security implications of this model, where the variance in software being included by developers has increased dramatically from previous models. Security implications in this context include what makes up the image, but also the components of the app that get bundled into your image. Docker images are increasingly becoming a “unit of deployment”, and if you look at a typical app (especially if it is a microservice), much of the components, libraries, and system are someone else’s code.\n\nAnchore exists to provide technology to act as a last line of defense, verifying the contents of these new deployable units against user specified policies to enforce security and compliance requirements. In this blog you will get a quick tour of this capability, and how to add the open-source Anchore Engine API service into your pipeline to validate that the flow of images you are shipping comply with your specific requirements, from a security point of view.\n\nKey among the fundamental tenets of agile development is the notion of “fail fast, fail often”, which is where CI/CD comes in: A developer commits code into the source code repository, such as git, that automatically triggers Jenkins to perform a build of the application that is then run through automated tests. If these tests fail the developer is notified immediately and can quickly correct the code. This level of automation increases the overall quality of code and speeds development.\n\nWhile some may feel that “fail fast” sounds rather negative (especially regarding security), you could better describe this process as “learn fast” as mistakes are found earlier in the development cycle and can be easily corrected. The increased use of CI/CD platforms such as Jenkins has helped to improve the efficiency of development teams and streamlined the testing process. We can leverage the same CI/CD infrastructure to improve the security of our container deployments.\n\nFor many organizations the last step before deploying an application is for the security team to perform an audit. This may entail scanning the image for vulnerable software components (like outdated packages that contain known security vulnerabilities) and verifying that the applications and OS are correctly configured. They may also check that the organization’s best practices and compliance policies have been correctly implemented.\n\nIn this post we walk through adding security and compliance checking into the CI/CD process so you can “learn fast” and correct any security or compliance issues early in the development cycle. This document will outline the steps to deploy Anchore’s open source security and compliance scanning engine with Jenkins to add analytics, compliance and governance to your CI/CD pipeline.\n\nAnchore has been designed to plug seamlessly into the CI/CD workflow, where a developer commits code into the source code management system, which then triggers Jenkins to start a build that creates a container image. In the typical workflow this container image is then run through automated testing. If an image does not meet your organization’s requirements for security or compliance then it makes little sense to invest the time required to perform automated tests on the image, it would be better to “learn fast” by failing the build and returning the appropriate reports back to the developer to allow the issue to be addressed.\n\nAnchore has published a plugin for Jenkins which, along with Anchore’s open source engine or Enterprise offering, allows container analysis and governance to be added quickly into the CI/CD process.\n\nRequirements\n\nThis guide presumes the following prerequisites have been met:\n\nJenkins 2.x installed and running on a virtual machine or physical server.\n\nAnchore-Engine installed and running, with accessible engine API URL (later referred to as) and credentials (later referred to as and) available - see Anchore Engine overview and installation.\n\nAnchore’s Jenkins plugin can work with single node installations or installations with multiple worker nodes.\n\nStep 1: Install the Anchore plugin\n\nThe Anchore plugin has been published in the Jenkins plugin registry and is available for installation on any Jenkins server. From the main Jenkins menu select Manage Jenkins, then Manage Plugins, select the Available tab, select and install Anchore Container Image Scanner.\n\nStep 2: Configure Anchore Plugin.\n\nOnce the Anchore Container Image Scanner plugin is installed - select Manage Jenkins menu click Configure System, and locate the Anchore Configuration section.  Select and enter the following parameters in this section:\n\nClick Enable Anchore Scanning\n\nSelect Engine Mode\n\nEnter your in the Engine URL text box - for example: http://your-anchore-engine.com:8228/v1\n\nEnter your and in the Engine Username and Engine Password fields, respectively\n\nClick Save\n\nAn example of a filled out configuration section is below, where we’ve used “http://192.168.1.3:8228/v1” as, “admin” as and “foobar” as :\n\nAt this point the Anchore plugin is configured on Jenkins, and is available to be accessed by any project to perform Anchore security and policy checks as part of your container image build pipeline.\n\nStep 3: Add Anchore image scanning to a pipeline build.\n\nIn the Pipeline model the entire build process is defined as code. This code can be created, edited and managed in the same way as any other artifact of your software project, or input via the Jenkins UI.\n\nPipeline builds can be more complex including forks/joins and parallelism. The pipeline is more resilient and can survive the controller node failure and restarts. To add an Anchore scan you need to add a simple code snippet to any existing pipeline code that first builds an image and pushes it to a docker registry. Once the image is available in a registry accessible by your installed Anchore Engine, a pipeline script will instruct the Anchore plugin to:\n\nSend an API call to the Anchore Engine to add the image for analysis\n\nWait for analysis of the image to complete by polling the engine\n\nSend an API call to the Anchore Engine service to perform a policy evaluation\n\nRetrieve the evaluation result and potentially fail the build if the plugin is configured to fail the build on policy evaluation STOP result (by default it will)\n\nProvide a report of the policy evaluation for review\n\nBelow is an example end-to-end script that will make a Dockerfile, use the docker plugin to build and push the a docker container image to dockerhub, perform an Anchore image analysis on the image and the result, and cleanup the built container.  In this example, we’re using a pre-configured docker-exampleuser named dockerhub credential for dockerhub access, and exampleuser/examplerepo:latest as the image to build and push.  These values would need to be changed to reflect your own local settings, or you can use the below example to extract the analyze stage to integrate an anchore scan into any pre-existing pipeline script, any time after a container image is built and is available in a docker registry that your anchore-engine service can access.\n\npipeline {\n    agent any\n    stages {\n        stage('build') {\n            steps {\n                sh'''\n                    echo 'FROM debian:latest’ > Dockerfile\n                    echo ‘CMD [\"/bin/echo\", \"HELLO WORLD....\"]' >> Dockerfile\n                '''\n                script {\n                    docker.withRegistry('https://index.docker.io/v1/', 'docker-exampleuser') {\n                        def image = docker.build('exampleuser/examplerepo:latest')\n                        image.push()\n                    }\n                }\n            }\n        }\n        stage('analyze') {\n            steps {\n                sh 'echo \"docker.io/exampleuser/examplerepo:latest `pwd`/Dockerfile\" > anchore_images'\n                anchore name: 'anchore_images'\n            }\n        }\n        stage('teardown') {\n            steps {\n                sh'''\n                    for i in `cat anchore_images | awk '{print $1}'`;do docker rmi $i; done\n                '''\n            }\n        }\n    }\n}\n\nThis code snippet writes out the anchore_images file that is read by the plugin to determine which image is to be added to Anchore Engine for scanning.\n\nThis code snippet can be crafted by hand or built using the Jenkins UI, for any Pipeline project. In the project configuration, select Pipeline Syntax from the Project.\n\nThis will launch the Snippet Generator where you can enter the available plugin parameters and press the Generate Pipeline Script button which will produce a snippet that you can use as a starting point.\n\nUsing our example from above, next we save the project:\n\nNote that once you are happy with your script, you could also check it into a Jenkinsfile, alongside the source code.\n\nStep 4: Run the build and review the results.\n\nFinally, we run the build, which will generate a report.  In the below screenshots, we’ve scanned the image docker.io/library/debian:latest to demonstrate some example results.  Once the build completes, the final build report will have some links that will take you to a page that describes the result of the Anchore Engine policy evaluation and security scan:\n\nIn this case, since we left the Fail build on policy STOP result as its default (True), the build has failed due to anchore-engine reporting a policy violation.  In order to see the results, click the Anchore Report (STOP) link:\n\nHere, we can see that there is a single policy check that has generated a ‘STOP’ action, which triggered due to a high severity vulnerability being found against a package installed in the image.  If there were only ‘WARN’ or ‘GO‘ check results here, they would also be displayed, but the build would have succeeded.\n\nWith the combination of Jenkins pipeline project capabilities, plus the Anchore scanner plugin, it’s quick and easy to add container image security scanning and policy checking to your Jenkins project.  In this example, we provide the mechanism for adding scanning to a Jenkins pipeline project using a simple policy that is doing an OS package vulnerability scan, but there are many more policy options that can be configured and loaded into Anchore Engine ranging from security checks to your own site-specific best practice checks (software licenses, package whitelist/blacklist, dockerfile checks, and many more).  For more information about the breadth of Anchore policies, you can find information about Anchore Engine configuration and usage here.\n\nFor more information on Jenkins Pipelines and Anchore Engine, check out the following information sources:\n\nhttps://anchore.com/\n\nhttps://anchore.com/opensource/\n\nhttps://github.com/anchore/anchore-engine\n\nhttps://anchore.freshdesk.com/support/home\n\nChat on Anchore open source slack","title":"Securing your Jenkins CI/CD Container Pipeline with Anchore (in under 10 minutes)","tags":["community","developer","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale","twitter":"michaelneale"}]}},{"node":{"date":"2018-06-19T00:00:00.000Z","id":"4e634674-53af-534b-ad3d-0fb231791ac9","slug":"/blog/2018/06/19/jenkins-java10-hackathon-day2/","strippedHtml":"This week we have a\nJenkins & Java 10 Online Hackathon.\nThis is an open online event, where we work together on Jenkins core and plugins in order\nto find and fix compatibility issues, share experiences and have some fun.\nEverybody is welcome to join, independently of their Jenkins experience and amount of time they have available.\n\nAfter the kick off on Monday\nJenkins contributors have been working on Java 10 and Java 11 support in Jenkins.\nWe have already received contributions from 12 hackathon participants, and the number keeps growing.\nThere are still 3 days ahead, but we have already achieved some important results we want to share.\n\nJenkins Pipeline\n\nOne of our major efforts over last 2 days was to get Jenkins Pipeline working on\nJava 10+.\nWhen the hackathon started Jenkins Pipeline was not working at all,\nand it was a major blocker for Java support and for exploratory testing in particular.\nWe’ve been working together with Sam van Oort and Devin Nusbaum to fix the libraries in\nthe Jenkins core, Pipeline: Support plugin and Docker packaging.\n\nJust to summarize the result of two days in one screenshot…​\n\nYes, we have got it running!\nOver two days we have got from the \"Pipeline Crashes Immediately\"\nstate to the situation when the most of key Pipeline features are operational,\nincluding Scripted and Declarative Pipeline, Blue Ocean, shared libraries and\ndozens of plugins being used in the Jenkins plugin build flow.\n\nThere is still a lot of work to do to get the changes finalized,\nbut Jenkins Pipeline is available for testing on Java 10 and 11 now.\nIf you want to try it out, you can use a new jenkins/jenkins-experimental:blueocean-jdk10\nimage we have created.\nIt bundles all the required patches, so you can just run the following command to get started:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins-experimental:blueocean-jdk10\n\nIf you want to try more complex scenarions, see the\nRunning Jenkins with Java 10 and 11 blogpost\nand List of Required patches.\n\nWhat else?\n\nAlthough Pipeline is the most visible change,\nthere are other ongoing activities:\n\nDevin Nusbaum explored plugin startup issues we had with JDK 11ea+17\nand confirmed that we need to upgrade our images to JDK 11ea+18\n\nGianpaolo Macario is working on adopting the Java 10 experimental images in his\neasy-jenkins project\n\nSam van Oort and Devin Nusbaum are working on getting plugin build and test flows\nwhen using JDK 10 with Maven\n\nNicolas de Loof is working on cleaning up Illegal reflective access warnings in Jenkins components,\nusing the new Fields micro-library\n\nOlivier Lamy and Nicolas de Loof are updating the\nAnimal Sniffer plugin for Maven\nto make it compatible with Java 9 and above\n\nKohsuke Kawaguchi has released a repackaged version of ASM 6.2 we use in the project\n\nLast but not least, Liam Newman and Tracy Miranda helped us a lot to run the meetings\nand to get this hackathon organized\n\nThere are also other contributors working on exploratory testing and reporting\ndefects they discover.\nSee our status doc\nfor the full list.\n\nWhat’s next?\n\nTomorrow we will have 2 sessions:\n\nAt 8AM UTC we will have a sync-up.\nAccording to the requests from hackathon paticipants, we will have an intro session to Jenkins development for newcomers\n\nYouTube link\n\nAt 4PM UTC we will have a meeting with key JDK Project Jigsaw committers\n\nMark Reinhold, Mandy Chung and Paul Sandoz will join us to talk about\nJava 10/11 adoption\n\nYouTube link\n\nWe will also post participant links in our Gitter channel\n15 minutes before the meetings.\nIf you have any questions, please join the meetings or raise questions in the chat during the call.\n\nCan I still join the hackathon?\n\nYes, you can!\nIt is possible to hop in and hop off at any time.\nJust respond to the registration form,\njoin our Gitter channel and start hacking/testing.\n\nWe also have a number of\nnewbie-friendly issues\nyou can start from.\nSee our Kick-off session and\nslides for quick start guidelines.\n\nLinks\n\nDeveloper mailing list\n\nHackathon sync-up document\n\nRunning Jenkins with Java 10 and 11\n\nJenkins Online Meetup page","title":"Jenkins & Java 10+ Online Hackathon. Day 2 Update","tags":["events","community","developer","java10","java11"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"developer","limit":8,"skip":24,"numPages":5,"currentPage":4}},
    "staticQueryHashes": ["3649515864"]}