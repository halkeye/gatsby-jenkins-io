{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/developer/page/4",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-07-19T00:00:00.000Z","id":"e791a263-9144-5400-9cc7-12e369131b87","slug":"/blog/2018/07/19/jenkins-x-accelerate/","strippedHtml":"Jenkins X uses Capabilities identified by the \"Accelerate:  The Science Behind Devops\"\n\nJenkins X is a reimagined CI/CD implementation for the Cloud which is heavily influence by the\nState of DevOps reports and more recently the book\n\"Accelerate: The Science Behind Devops\" by\nNicole Forsgren,\nJez Humble and\nGene Kim\n\nYears of gathering data from real world teams and organisations which has been analyzed by inspiring thought leaders and data\nscientists from the DevOps world, \"Accelerate\" recommends a number of capabilities that Jenkins X is implementing so\nusers gain the scientifically proven benefits, out of the box. We’ve started documenting the capabilities that are available\ntoday and will continue as more become available.\n\nCredit: thanks to tracymiranda for the image\n\nUse version control for all artifacts\n\nThe Weaveworks folks coined the term GitOps which we love.  Any change to an environment, whether it be a new application,\nversion upgrade, resource limit change or simple application configuration should be raised as a Pull Request to Git, have\nchecks run against it like a form of CI for environments and approved by a team that has control over what goes into the\nrelated environment.  We can now enable governance and have full traceability for any change to an environment.\n\nRelated Accelerate capability:  Use version control for all production artifacts\n\nAutomate your deployment process\n\nEnvironments\n\nJenkins X will automatically create Git backed environments during installation and makes it easy to add new ones using\njx create environment.  Additionally when creating new applications via a quickstart ( jx create quickstart), Java based\nSpringBoot ( jx create spring) or importing existing applications ( jx import), Jenkins X will both automatically add\nCI / CD pipelines and setup the jobs, git repos and webhooks to enable an automated deployment process.\n\nOut of the box Jenkins X creates Staging and Production (this is customisable) permanent environments as well as temporary\nenvironments for preview applications from Pull Requests.\n\nPreviews Environments\n\nWe are trying to move as much testing, security, validation and experimentation for a change before it’s merged to master.\nWith the use of temporary dynamically created Preview Environments any pull request can have a preview version built and\ndeployed, including libraries that feed into a downstream deployable application.  This means we can code review, test,\ncollaborate better with all teams that are involved in agreeing that change can go live.\n\nUltimately Jenkins X wants to provide a way that developers, testers, designers and product managers can be as sure as they\ncan that when a change is merged to master it works as expected.  We want to be confident the proposed change does not\nnegatively affect any service or feature as well as deliver the value it is intended to.\n\nWhere Preview Environments get really interesting is when we are able to progress a PR through various stages of maturity and\nconfidence where we begin to direct a percentage of real production traffic like beta users to it.  We can then analyse the\nvalue of the proposed change and possible run multiple automated experiments over time using Hypothesis Driven Development.\nThis helps give us better understanding of how the change will perform when released to all users.\n\nRelated Accelerate capability: Foster and enable team experimentation\n\nUsing preview environments is a great way to introduce better test automation.  While Jenkins X enables this we don’t yet\nhave examples of automated tests being run against a preview environment.  A simple test would be to ensure the application\nstarts ok and Kubernetes liveness check pass for an amount of time. This relates to\n\nRelated Accelerate capability: Implement Test Automation\nRelated Accelerate capability: Automate your deployment process\n\nPermanent Environments\n\nIn software development we’re used to working with multiple environments in the lead up to a change being promoted to a live\nproduction environment.  Whilst this seems business as usual it can cause significant delays to other changes if for any\nreason that it is deemed not fit via some process that didn’t happen pre merge to master.  Subsequent commits then become\nblocked and can cause delay of urgent changes being promoted to production.\n\nAs above Jenkins X wants any changes and experiments to be validated before it is merged to master.  We would like changes in\na staging environment to be held there for a short amount of time before being promoted, ideally in an automated fashion.\n\nThe default Jenkins X pipelines provide deployment automation via environments.  These are customisable to suite your own\nCI / CD pipeline requirements.\n\nJenkins X recommends Staging should act as a near as possible reflection on production, ideally with real production data\nshadowed to it using a service mesh to understand the behaviour.  This also helps when developing changes in preview where we\ncan link to non production services in staging.\n\nRelated Accelerate capability: Automate your deployment process\n\nUse trunk-based development\n\nThe Accelerate book found that teams which use trunk based development with short lived branches performed better.  This has\nalways worked for the Jenkins X core team members so this was an easy capability for Jenkins X to implement when setting up\nGit repositories and CI/CD jobs.\n\nImplement Continuous Integration\n\nJenkins X sees CI as the effort of validating a proposed change via pull requests before it is merged to controller.  Jenkins X\nwill automatically configure source code repositories, Jenkins and Kubernetes to provide Continuous Integration of the box.\n\nImplement Continuous Delivery\n\nJenkins X sees CD as the effort of taking that change after it’s been merged to controller through to running in a live\nenvironment.  Jenkins X automates many parts in a release pipeline:\n\nJenkins X advocates the use of semantic versioning.  We use git tags to calculate the next release version which means we\ndon’t need to store the latest release version in the controller branch.  Where release systems do store the last or next version\nin Git repos it means CD becomes hard, as a commit in a release pipeline back to controller triggers a new release.  This results\nin a recursive release trigger.  Using a Git tag helps avoid this situation which Jenkins X completely automates.\n\nJenkins X will automatically create a released version on every merge to master which can then potentially progress\nthrough to production.\n\nUse loosely coupled architecture\n\nBy targeting Kubernetes users of Jenkins X can take advantage of many of the cloud features that help design and develop\nloosely coupled solutions.  Service discovery, fault tolerance, scalability, health checks, rolling upgrades, container\nscheduling and orchestration to name just a few examples of where Kubernetes helps.\n\nArchitect for empowered teams\n\nJenkins X aims to help polyglot application developers.  Right now Jenkins X has quickstarts and automated CI/CD setup with\nlanguage detection for Golang, Java, NodeJS, .Net, React, Angular, Rust, Swift and more to come.  What this also does is\nprovide a consistent Way of Working so developers can concentrate on developing.\n\nJenkins X also provides many addons, for example Grafana and Prometheus for automated metrics collection and visualisation.\nIn this example centralised metrics help understand how your applications behave when built and deployed on Kubernetes.\n\nDevPods are another feature which enables developers to edit source code in their\nlocal IDE, behind the scenes it is then synced to the cloud and rapidly built and redeployed.\n\nJenkins X believes providing developers automation that helps them experiment in the cloud, with different technologies and\nfeedback empowers them to make the best decisions - faster.\n\nFancy a closer look?\n\nMyself, James Strachan and\nRob Davies are going to be presenting and running workshops at\nDevOps World  | Jenkins World.  We’ll also be hanging out at the Jenkins X demo\narea so come and say hello and see what’s the latest cool and exiting things to come out of Jenkins X.  Use JWFOSS for 30%\ndiscount off registration\n\nWant to get involved?\n\nJenkins X is open source, the community mainly hangs out in the\nJenkins X Kubernetes slack channels and for tips on being more involved with Jenkins X\ntake a look at our contributing docs.  We’ve been helping lots of folks get into open source, learn\nnew technoligies and languages like golang.  Why not get involved?\n\nDemo\n\nIf you’ve not already seen it here’s a video showing a spring boot quickstart with automatic CI/CD pipelines and preview environments.","title":"Accelerate with Jenkins X","tags":["jenkinsx","developer","kubernetes"],"authors":[]}},{"node":{"date":"2018-06-27T00:00:00.000Z","id":"fdf34f60-9243-5d28-b9d3-ea140833ede2","slug":"/blog/2018/06/27/lessons-java10-hackathon/","strippedHtml":"Last week I participated in the\nJenkins & Java 10 Online Hackathon.\nIt was my first Jenkins hackathon and I roped in\nJonah Graham to do some pair-programming.\nThe hackathon featured JDK Project Jigsaw committers Mandy Chung and Paul Sandoz,\nas well as Jenkins creator Kohsuke Kawaguchi.\nIt was a great opportunity for me to learn a lot about Jenkins and Java 10.\n\nWhy Java 10?\n\nWith the\nJava 8 EoL data looming,\nthe focus was on the current available version of Java, Java 10.\nJava 10 offers some nice new features and APIs, not least\nimproved docker container integration.\nWe learned from Paul of a number of projects with Java 10 migration success stories including Elasticsearch, Kafka & Netty.\n\nAt the beginning of the hackathon week, the Jenkins Pipeline feature would crash out when using Java 10.\nThis was resolved with a number of fixes including the upgrade of the\nASM library.\nThen it was nice to see things\nup and running with Java 10.\n\nGetting up & running\n\nThe first steps were to do some exploratory testing using\nJenkins with Java 10 via Docker, thanks to\nOleg for providing clear instructions.\nThis was boringly straightforward as most things worked and we only found one\nissue to report.\nNext to try to get some patches in, we needed to set-up a dev environment.\nThe live session gave us what we needed to set up a\nplugin or\ncore dev environment.\nOne open question we had was whether Jenkins has semantic versioning and\nAPI tools\nto help identify when you might be breaking backwards compatibility.\nOverall it was straightforward to get a dev environment up and running.\n\nJava 10 New APIs\n\nThe next step was to find an issue which we could help resolve.\nMany of the Java 10 issues were related to 'Illegal reflective access' from various plugins or third-party libraries.\nHowever after investigating a couple, removing these warnings required a good architectural knowledge of the plugin or core code itself.\nIn the end we decided that messing around with classloaders or attempting to upgrade version of jdom was not one for the newbies.\n\nInstead we looked at\nremoving reflection\nin cases of isAccessible calls.\nWe found the\nProcessHandle\napi very useful and a good replacement for some misuse of reflection, and even better it made the code work on Windows too.\nMandy also pointed us to look at the\nLookup api\nas possible alternate to findClass calls.\n\nMulti-Release JAR Builds\n\nUsing new APIs is all well and good but presents a problem when you want to maintain backwards compatibility with Java 8.\nHence the need for some sort of multi-jar solution -\nNicolas De loof proposed one such solution for\nmulti-release jars with Maven for this case.\n\nsun.misc.Signal\n\nThe Java Signal API is being deprecated, but so far no replacement APIs\nare available for signal handling.\nJenkins makes use of the Signal APIs so a big question for the Jigsaw team was whether this would be replaced going forward.\nKohsuke pointed out how it is important for Java to maintain this UNIX like behaviour as it shouldn’t matter to end users that Jenkins is written in Java.\nIt seems these APIs will be replaced in due course, they just\naren’t there right now.\n\nCollaboration, Collaboration, Collaboration\n\nIt was great to have the discussions with the Jigsaw team.\nThey reminded us how they need to know the Java use cases out there and how their team uses these to feed into their development process.\nIn turn, the hackathon had Jenkins community members participate, for instance\neasy-jenkins was up and running with Java 10 by the end of the week.\nThe hackathon had a great feeling of community spirit and was a reminder why collaborations with communities and also between different communities can be powerful and fun for all involved.\n\nAt the end of the week Jonah and I were both happy that we made our first Jenkins contributions (which were reviewed and merged quickly).\nThanks to all who participated and made it highly enjoyable, especially Oleg for great organization.\nI look forward to the next one!","title":"What I learned from the Jenkins & Java 10+ Hackathon","tags":["events","community","developer","java10","java11"],"authors":[]}},{"node":{"date":"2018-06-27T00:00:00.000Z","id":"c68773a2-1f81-56bc-af65-71e0703df409","slug":"/blog/2018/06/27/new-login-page/","strippedHtml":"This blog post gives an introduction to the new design for the login and signup forms and Jenkins is (re)starting pages introduced in Jenkins 2.128.\nThe first part of the blog post is an introduction to the new design and UX for Jenkins users.\nThe later part is talking about extensibility in a more technical manner, aimed at plugin developers.\n\nOverview\n\nThe recent changes to some core pages provide new design and UX and further dropping all external dependencies to prevent\nany possible malicious javascript introduced by third party libraries.\nTo be clear, this never was an issue with previous releases of Jenkins, but having read this article, this author believes that the article has good points and leading by example may raise awareness of data protection.\n\nThis meant to drop the usage of the jelly layout lib (aka xmlns:l=\"/lib/layout\") and as well the page decorators it\nsupported. However there is a new SimplePageDecorator extension point (discussed below) which can be used to modify the look and feel for the login and sign up page.\n\nThe following pages have given a new design:\n\nJenkins is (re)starting pages\n\nLogin\n\nSign up\n\nUX enhancement\n\nForm validation has changed to give inline feedback about data validation errors in the same form.\n\nLogin\n\nSign up\n\nThe above image shows that the validation is now done on all input fields instead of before breaking on the\nfirst error found, which should lead to fewer retry cycles.\n\nInstead of forcing the user to repeat the password, the new UX introduces the possibility to display the password in\nclear text. Further a basic password strength meter indicates password strength to the user while she enters the password.\n\nCustomizing the UI\n\nThe re-/starting screens do not support the concept of decorators very well, hence the decision to not support them for these pages.\n\nThe SimplePageDecorator is the key component for customization and uses three different files to\nallow overriding the look and feel of the login and signup pages.\n\nsimple-head.jelly\n\nsimple-header.jelly\n\nsimple-footer.jelly\n\nAll of the above SimplePageDecorator Jelly files are supported in the login page. The following snippet is a minimal excerpt\nof the login page, showing how it makes use of SimplePageDecorator.\n\nThe sign-up page only supports the simple-head.jelly:\n\nSimplePageDecorator - custom implementations\n\nHave a look at Login Theme Plugin, which allows you to\nconfigure your own custom content to be injected into the new login/sign-up page.\n\nTo allow easy customisation the decorator only implements one instance by the principal \"first-come-first-serve\".\nIf jenkins finds an extension of the SimplePageDecorator it will use the Jelly files provided by that plugin.\nOtherwise Jenkins will fall back to the default implementation.\n\n@Extension\npublic class MySimplePageDecorator extends SimplePageDecorator {\n   public String getProductName() {\n     return \"MyJenkins\";\n   }\n}\n\nThe above will take override over the default because the default implementation has a very low ordinal ( @Extension(ordinal=-9999))\nIf you have competing plugins implementing SimplePageDecorator, the implementation with the highest ordinal will be used.\n\nAs a simple example, to customize the logo we display in the login page, create a simple-head.jelly with the following content:\n\nTo customize the login page further, create a simple-header.jelly like this:\n\nWelcome to ${it.productName}!\n\nFor example, I used this technique to create a prototype of a login page for a CloudBees product I am working on:\n\nConclusion\n\nWe hope you like the recent changes to some core pages and as well the new design and UX. We further hope you feel enabled to\ncustomize the look and feel to adopt your needs with the SimplePageDecorator.","title":"New design, UX and extensibility digest for login page et. al.","tags":["core","developer","ux"],"authors":[]}},{"node":{"date":"2018-06-21T00:00:00.000Z","id":"f197eae4-55a6-578b-aa6b-0f8809ef8608","slug":"/blog/2018/06/21/jenkins-x-devpods/","strippedHtml":"I use macOS day to day, and often struggle to keep my devtools up to date.\nThis isn’t any fault of packaging or tools, more just that I get tired of seeing the beachball:\n\nThe demands on dev machines grow, developers are now working across a more diverse\nset of technologies than just a JVM or a single scripting language these days.\n\nThis keeping up to date is a drag on time (and thus money).\nThere are lots of costs involved with development, and I\nhave written about\nabout the machine cost for development (how using something like GKE can be much\ncheaper than buying a new machine) but there is also the cost of a developer’s time.\nThankfully, there are ways to apply the same smarts here to save time as well as money.\n And time is money, or money is time?\n\nGiven all the work done in automating the detection and installation of required\ntools, environments, and libraries that goes on when you run ‘jx import’ in\nJenkins X,\nit makes sense to also make those available for development time,\nand the concept of “DevPods” was born.\n\nThe pod part of the name comes from the Kubernetes concept of pods (but you don’t have to know about Kubernetes or pods to use Jenkins X. There is a lot to Kubernetes but Jenkins X aims to provide a developer experience that doesn’t require you to understand it).\n\nWhy not use Jenkins X from code editing all the way to production,\nbefore you even commit the code or open a pull request?\nAll the tools are there, all the environments are there, ready to use (as they are used at CI time!).\n\nThis rounds out the picture: Jenkins X aims to deal with the whole lifecycle for you,\nfrom ideas/issues, change requests, testing, CI/CD, security and compliance verification,\nrollout and monitoring. So it totally makes sense to include the actual dev time tools.\n\nIf you have an existing project, you can create a DevPod by running (with the jx command):\n\njx create devpod\n\nThis will detect what type of project is (using build packs) and create a DevPod\nfor you with all the tools pre-installed and ready to go.\n\nObviously, at this point you want to be able to make changes to your app and try it out.\nEither run unit tests in the DevPod, or perhaps see some dev version of the app running in your browser (if it is a web app).\nWeb-based code editors have been a holy grail for some time, but never have quite taken off in the mainstream of developers (despite there being excellent ones out there, most developers prefer to develop on their desktop).\nIronically, the current crop of popular editors are based around\n“electron” which is actually a web technology stack,\nbut it runs locally (Visual Studio Code is my personal favourite at the moment),\nin fact Visual Studio Code has a Jenkins X extension (but you don’t have to use it):\n\nTo get your changes up to the Dev Pod, in a fresh shell run (and leave it running):\n\njx sync\n\nThis will watch for any changes locally (say you want to edit files locally on your desktop)\nand sync them to the Dev Pod.\n\nFinally, you can have the Dev Pod automatically deploy an “edit” version of the\napp on every single change you make in your editor:\n\njx create devpod --sync --reuse\n./watch.sh\n\nThe first command will create or reuse an existing Dev Pod and open a shell to it,\nthen the watch command will pick up any changes, and deploy them to your “edit” app.\nYou can keep this open in your browser, make a change, and just refresh it.\nYou don’t need to run any dev tools locally, or any manual commands in the Dev Pod to do this, it takes care of that.\n\nYou can have many DevPods running (jx get devpods), and you could stop them at the end of the day (jx delete devpod), start them at the beginning, if you like (or as I say: keep them running in the hours between coffee and beer). A pod uses resources on your cluster, and as the Jenkins X project fleshes out its support for dev tools (via things like VS Code extensions) you can expect even these few steps to be automated away in the near future, so many of the above instructions will not be needed!\n\nEnd-to-end experience\n\nSo bringing it all together, let me show a very wide (you may need to zoom out) screen shot of this workflow:\n\nFrom Left to Right :\n\nI have my editor (if you look closely, you can see the Jenkins X extension showing the state of apps,\npipelines and the environments it is deployed to).\n\nIn the middle I have jx sync running, pushing changes up to the cloud from the editor,\nand also the ‘watch’ script running in the DevPod. This means every change I make in my editor,\na temporary version of the app (and its dependencies are deployed).\n\nOn the right is my browser open to the “edit” version of the app.\nJenkins X automatically creates an “edit” environment for live changes,\nso if I make a change to my source on the left, the code is synced,\nbuild/tested and updated so I can see the change on the right\n(but I didn’t build anything locally, it all happens in the DevPod on Jenkins X).\n\nOn visual studio code: The Jenkins X extension for visual studio code can automate the creation of devpods and syncing for you. Expect richer support soon for this editor and others.\n\nExplaining things with pictures\n\nTo give a big picture of how this hangs together:\n\nIn my example, GitHub is still involved, but I don’t push any changes back to it until I am happy with the state of my “edit app” and changes.\nI run the editor on my local workstation and jx takes care of the rest.\nThis gives a tight feedback loop for changes. Of course, you can use any editor you like,\nand build and test changes locally (there is no requirement to use DevPods to make use of Jenkins X).\n\nJenkins X comes with some ready to go environments: development, staging and production (you can add more if you like).\nThese are implemented as Kubernetes namespaces to avoid the wrong app things talking to the wrong place.\nThe development environment is where the dev tools live: and this is also where the DevPods can live!\nThis makes sense as all the tools are available, and saves the hassle of you having slightly different\nversions of tools on your local workstation than what you are using in your pipeline.\n\nDevPods are an interesting idea, and at the very least a cool name!\nThere will be many more improvements/enhancements in this area, so keep an eye out for them.\nThey are a work in progress, so do check the documentation page for better ways to use them.\n\nSome more reading:\n\nDocs on DevPods on jenkins-x.io\n\nThe Visual Studio Code extension\nfor Jenkins X (what a different world: an open source editor by Microsoft!)\n\nJames Strachan’s great intro\nto Jenkins X talk at Devoxx-UK also   includes a DevPod demo","title":"Using Jenkins X DevPods for development","tags":["jenkinsx","developer"],"authors":[]}},{"node":{"date":"2018-06-20T00:00:00.000Z","id":"c6c81158-09c3-5db5-9f8e-8e8ad25bd805","slug":"/blog/2018/06/20/anchore-image-scanning/","strippedHtml":"(adapted from this blog post by Daniel Nurmi)\n\nAs more and more Jenkins users ship docker containers, it is worth thinking about the security implications of this model, where the variance in software being included by developers has increased dramatically from previous models. Security implications in this context include what makes up the image, but also the components of the app that get bundled into your image. Docker images are increasingly becoming a “unit of deployment”, and if you look at a typical app (especially if it is a microservice), much of the components, libraries, and system are someone else’s code.\n\nAnchore exists to provide technology to act as a last line of defense, verifying the contents of these new deployable units against user specified policies to enforce security and compliance requirements. In this blog you will get a quick tour of this capability, and how to add the open-source Anchore Engine API service into your pipeline to validate that the flow of images you are shipping comply with your specific requirements, from a security point of view.\n\nKey among the fundamental tenets of agile development is the notion of “fail fast, fail often”, which is where CI/CD comes in: A developer commits code into the source code repository, such as git, that automatically triggers Jenkins to perform a build of the application that is then run through automated tests. If these tests fail the developer is notified immediately and can quickly correct the code. This level of automation increases the overall quality of code and speeds development.\n\nWhile some may feel that “fail fast” sounds rather negative (especially regarding security), you could better describe this process as “learn fast” as mistakes are found earlier in the development cycle and can be easily corrected. The increased use of CI/CD platforms such as Jenkins has helped to improve the efficiency of development teams and streamlined the testing process. We can leverage the same CI/CD infrastructure to improve the security of our container deployments.\n\nFor many organizations the last step before deploying an application is for the security team to perform an audit. This may entail scanning the image for vulnerable software components (like outdated packages that contain known security vulnerabilities) and verifying that the applications and OS are correctly configured. They may also check that the organization’s best practices and compliance policies have been correctly implemented.\n\nIn this post we walk through adding security and compliance checking into the CI/CD process so you can “learn fast” and correct any security or compliance issues early in the development cycle. This document will outline the steps to deploy Anchore’s open source security and compliance scanning engine with Jenkins to add analytics, compliance and governance to your CI/CD pipeline.\n\nAnchore has been designed to plug seamlessly into the CI/CD workflow, where a developer commits code into the source code management system, which then triggers Jenkins to start a build that creates a container image. In the typical workflow this container image is then run through automated testing. If an image does not meet your organization’s requirements for security or compliance then it makes little sense to invest the time required to perform automated tests on the image, it would be better to “learn fast” by failing the build and returning the appropriate reports back to the developer to allow the issue to be addressed.\n\nAnchore has published a plugin for Jenkins which, along with Anchore’s open source engine or Enterprise offering, allows container analysis and governance to be added quickly into the CI/CD process.\n\nRequirements\n\nThis guide presumes the following prerequisites have been met:\n\nJenkins 2.x installed and running on a virtual machine or physical server.\n\nAnchore-Engine installed and running, with accessible engine API URL (later referred to as) and credentials (later referred to as and) available - see Anchore Engine overview and installation.\n\nAnchore’s Jenkins plugin can work with single node installations or installations with multiple worker nodes.\n\nStep 1: Install the Anchore plugin\n\nThe Anchore plugin has been published in the Jenkins plugin registry and is available for installation on any Jenkins server. From the main Jenkins menu select Manage Jenkins, then Manage Plugins, select the Available tab, select and install Anchore Container Image Scanner.\n\nStep 2: Configure Anchore Plugin.\n\nOnce the Anchore Container Image Scanner plugin is installed - select Manage Jenkins menu click Configure System, and locate the Anchore Configuration section.  Select and enter the following parameters in this section:\n\nClick Enable Anchore Scanning\n\nSelect Engine Mode\n\nEnter your in the Engine URL text box - for example: http://your-anchore-engine.com:8228/v1\n\nEnter your and in the Engine Username and Engine Password fields, respectively\n\nClick Save\n\nAn example of a filled out configuration section is below, where we’ve used “http://192.168.1.3:8228/v1” as, “admin” as and “foobar” as :\n\nAt this point the Anchore plugin is configured on Jenkins, and is available to be accessed by any project to perform Anchore security and policy checks as part of your container image build pipeline.\n\nStep 3: Add Anchore image scanning to a pipeline build.\n\nIn the Pipeline model the entire build process is defined as code. This code can be created, edited and managed in the same way as any other artifact of your software project, or input via the Jenkins UI.\n\nPipeline builds can be more complex including forks/joins and parallelism. The pipeline is more resilient and can survive the controller node failure and restarts. To add an Anchore scan you need to add a simple code snippet to any existing pipeline code that first builds an image and pushes it to a docker registry. Once the image is available in a registry accessible by your installed Anchore Engine, a pipeline script will instruct the Anchore plugin to:\n\nSend an API call to the Anchore Engine to add the image for analysis\n\nWait for analysis of the image to complete by polling the engine\n\nSend an API call to the Anchore Engine service to perform a policy evaluation\n\nRetrieve the evaluation result and potentially fail the build if the plugin is configured to fail the build on policy evaluation STOP result (by default it will)\n\nProvide a report of the policy evaluation for review\n\nBelow is an example end-to-end script that will make a Dockerfile, use the docker plugin to build and push the a docker container image to dockerhub, perform an Anchore image analysis on the image and the result, and cleanup the built container.  In this example, we’re using a pre-configured docker-exampleuser named dockerhub credential for dockerhub access, and exampleuser/examplerepo:latest as the image to build and push.  These values would need to be changed to reflect your own local settings, or you can use the below example to extract the analyze stage to integrate an anchore scan into any pre-existing pipeline script, any time after a container image is built and is available in a docker registry that your anchore-engine service can access.\n\npipeline {\n    agent any\n    stages {\n        stage('build') {\n            steps {\n                sh'''\n                    echo 'FROM debian:latest’ > Dockerfile\n                    echo ‘CMD [\"/bin/echo\", \"HELLO WORLD....\"]' >> Dockerfile\n                '''\n                script {\n                    docker.withRegistry('https://index.docker.io/v1/', 'docker-exampleuser') {\n                        def image = docker.build('exampleuser/examplerepo:latest')\n                        image.push()\n                    }\n                }\n            }\n        }\n        stage('analyze') {\n            steps {\n                sh 'echo \"docker.io/exampleuser/examplerepo:latest `pwd`/Dockerfile\" > anchore_images'\n                anchore name: 'anchore_images'\n            }\n        }\n        stage('teardown') {\n            steps {\n                sh'''\n                    for i in `cat anchore_images | awk '{print $1}'`;do docker rmi $i; done\n                '''\n            }\n        }\n    }\n}\n\nThis code snippet writes out the anchore_images file that is read by the plugin to determine which image is to be added to Anchore Engine for scanning.\n\nThis code snippet can be crafted by hand or built using the Jenkins UI, for any Pipeline project. In the project configuration, select Pipeline Syntax from the Project.\n\nThis will launch the Snippet Generator where you can enter the available plugin parameters and press the Generate Pipeline Script button which will produce a snippet that you can use as a starting point.\n\nUsing our example from above, next we save the project:\n\nNote that once you are happy with your script, you could also check it into a Jenkinsfile, alongside the source code.\n\nStep 4: Run the build and review the results.\n\nFinally, we run the build, which will generate a report.  In the below screenshots, we’ve scanned the image docker.io/library/debian:latest to demonstrate some example results.  Once the build completes, the final build report will have some links that will take you to a page that describes the result of the Anchore Engine policy evaluation and security scan:\n\nIn this case, since we left the Fail build on policy STOP result as its default (True), the build has failed due to anchore-engine reporting a policy violation.  In order to see the results, click the Anchore Report (STOP) link:\n\nHere, we can see that there is a single policy check that has generated a ‘STOP’ action, which triggered due to a high severity vulnerability being found against a package installed in the image.  If there were only ‘WARN’ or ‘GO‘ check results here, they would also be displayed, but the build would have succeeded.\n\nWith the combination of Jenkins pipeline project capabilities, plus the Anchore scanner plugin, it’s quick and easy to add container image security scanning and policy checking to your Jenkins project.  In this example, we provide the mechanism for adding scanning to a Jenkins pipeline project using a simple policy that is doing an OS package vulnerability scan, but there are many more policy options that can be configured and loaded into Anchore Engine ranging from security checks to your own site-specific best practice checks (software licenses, package whitelist/blacklist, dockerfile checks, and many more).  For more information about the breadth of Anchore policies, you can find information about Anchore Engine configuration and usage here.\n\nFor more information on Jenkins Pipelines and Anchore Engine, check out the following information sources:\n\nhttps://anchore.com/\n\nhttps://anchore.com/opensource/\n\nhttps://github.com/anchore/anchore-engine\n\nhttps://anchore.freshdesk.com/support/home\n\nChat on Anchore open source slack","title":"Securing your Jenkins CI/CD Container Pipeline with Anchore (in under 10 minutes)","tags":["community","developer","security"],"authors":[]}},{"node":{"date":"2018-06-19T00:00:00.000Z","id":"4e634674-53af-534b-ad3d-0fb231791ac9","slug":"/blog/2018/06/19/jenkins-java10-hackathon-day2/","strippedHtml":"This week we have a\nJenkins & Java 10 Online Hackathon.\nThis is an open online event, where we work together on Jenkins core and plugins in order\nto find and fix compatibility issues, share experiences and have some fun.\nEverybody is welcome to join, independently of their Jenkins experience and amount of time they have available.\n\nAfter the kick off on Monday\nJenkins contributors have been working on Java 10 and Java 11 support in Jenkins.\nWe have already received contributions from 12 hackathon participants, and the number keeps growing.\nThere are still 3 days ahead, but we have already achieved some important results we want to share.\n\nJenkins Pipeline\n\nOne of our major efforts over last 2 days was to get Jenkins Pipeline working on\nJava 10+.\nWhen the hackathon started Jenkins Pipeline was not working at all,\nand it was a major blocker for Java support and for exploratory testing in particular.\nWe’ve been working together with Sam van Oort and Devin Nusbaum to fix the libraries in\nthe Jenkins core, Pipeline: Support plugin and Docker packaging.\n\nJust to summarize the result of two days in one screenshot…​\n\nYes, we have got it running!\nOver two days we have got from the \"Pipeline Crashes Immediately\"\nstate to the situation when the most of key Pipeline features are operational,\nincluding Scripted and Declarative Pipeline, Blue Ocean, shared libraries and\ndozens of plugins being used in the Jenkins plugin build flow.\n\nThere is still a lot of work to do to get the changes finalized,\nbut Jenkins Pipeline is available for testing on Java 10 and 11 now.\nIf you want to try it out, you can use a new jenkins/jenkins-experimental:blueocean-jdk10\nimage we have created.\nIt bundles all the required patches, so you can just run the following command to get started:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins-experimental:blueocean-jdk10\n\nIf you want to try more complex scenarions, see the\nRunning Jenkins with Java 10 and 11 blogpost\nand List of Required patches.\n\nWhat else?\n\nAlthough Pipeline is the most visible change,\nthere are other ongoing activities:\n\nDevin Nusbaum explored plugin startup issues we had with JDK 11ea+17\nand confirmed that we need to upgrade our images to JDK 11ea+18\n\nGianpaolo Macario is working on adopting the Java 10 experimental images in his\neasy-jenkins project\n\nSam van Oort and Devin Nusbaum are working on getting plugin build and test flows\nwhen using JDK 10 with Maven\n\nNicolas de Loof is working on cleaning up Illegal reflective access warnings in Jenkins components,\nusing the new Fields micro-library\n\nOlivier Lamy and Nicolas de Loof are updating the\nAnimal Sniffer plugin for Maven\nto make it compatible with Java 9 and above\n\nKohsuke Kawaguchi has released a repackaged version of ASM 6.2 we use in the project\n\nLast but not least, Liam Newman and Tracy Miranda helped us a lot to run the meetings\nand to get this hackathon organized\n\nThere are also other contributors working on exploratory testing and reporting\ndefects they discover.\nSee our status doc\nfor the full list.\n\nWhat’s next?\n\nTomorrow we will have 2 sessions:\n\nAt 8AM UTC we will have a sync-up.\nAccording to the requests from hackathon paticipants, we will have an intro session to Jenkins development for newcomers\n\nYouTube link\n\nAt 4PM UTC we will have a meeting with key JDK Project Jigsaw committers\n\nMark Reinhold, Mandy Chung and Paul Sandoz will join us to talk about\nJava 10/11 adoption\n\nYouTube link\n\nWe will also post participant links in our Gitter channel\n15 minutes before the meetings.\nIf you have any questions, please join the meetings or raise questions in the chat during the call.\n\nCan I still join the hackathon?\n\nYes, you can!\nIt is possible to hop in and hop off at any time.\nJust respond to the registration form,\njoin our Gitter channel and start hacking/testing.\n\nWe also have a number of\nnewbie-friendly issues\nyou can start from.\nSee our Kick-off session and\nslides for quick start guidelines.\n\nLinks\n\nDeveloper mailing list\n\nHackathon sync-up document\n\nRunning Jenkins with Java 10 and 11\n\nJenkins Online Meetup page","title":"Jenkins & Java 10+ Online Hackathon. Day 2 Update","tags":["events","community","developer","java10","java11"],"authors":[]}},{"node":{"date":"2018-06-17T00:00:00.000Z","id":"2a47e8d0-b919-50d2-9fe2-b9937f8d85bc","slug":"/blog/2018/06/17/running-jenkins-with-java10-11/","strippedHtml":"Please refer to Running Jenkins on Java 11 documentation to have the up-to-date details on how to run Jenkins on Java 11.\n\nGuidelines in this blogpost are rendered obsolete by the Java 11 Support Preview Availability\nannouncement on Dec 13, 2018 and by the Java 11 GA release on Sep 25, 2018.\nSee the Java support page\nfor up-to-date information about running Jenkins with Java 11.\nThe Jenkins project also no longer ships preview versions for Java 10.\n\nAs you probably know, we will have a\nJenkins and Java 10+ online hackathon this week.\nIn order to enable early adopters to try out Jenkins with new Java versions,\nwe have updated Jenkins core and Docker packages.\nStarting from Jenkins 2.127,\nweekly releases can be launched with Java 10 and Java 11 (preview).\nAlthough there are some known compatibility issues,\nthe packages are ready for evaluation and exploratory testing.\n\nThis article explains how to run Jenkins with Java 10 and 11 using Docker images and WAR files.\nIt also lists known issues and provides contributor guidelines.\n\nRunning in Docker\n\nIn order to simplify testing, we have created a new\njenkins/jenkins-experimental\nrepository on DockerHub.\nThis repository includes various Jenkins Core images, including Java 10 and Java 11 images.\nWe have also set up development branches and continuous delivery flows for Jenkins core,\nso now we can deliver patches for these images without waiting for weekly releases.\n\nYou can run the image simply as:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins-experimental:latest-jdk11\n\nThe following tags are available:\n\n2.127-jdk10, 2.128-jdk10 - Weekly releases packaged with Java 10\n\n2.127-jdk11, 2.128-jdk11 - Weekly releases packaged with Java 11\n\nlatest-jdk10 - Jenkins core build from the java10-support branch\n\nlatest-jdk11 - Automatic build from the core’s java11-support branch.\n\nblueocean-jdk10, blueocean-jdk11 - Experimental build, which bundles all Jenkins Pipeline and\nBlue Ocean patches required to run on Java 11.\nIf you want to try Pipeline, use this image\n\nJava 10/11 images are fully compatible with the official\njenkins/jenkins\nDocker image documentation,\ne.g. you can use plugins.txt to install plugins, mount volumes and pass extra options via environment variables.\n\nRunning Jenkins without Docker\n\nJava 10\n\nDownload Jenkins WAR for 2.127 or above\n(or build the experimental branch)\n\nRun WAR with the following command:\n\n${JAVA10_HOME}/bin/java --add-modules java.xml.bind -jar jenkins.war \\\n    --enable-future-java --httpPort=8080 --prefix=/jenkins\n\nJava 11\n\nDownload Jenkins WAR for 2.127 or above\n(or build the experimental branch)\n\nDownload the following libraries to the same directory as jenkins.war\n\njaxb-api-2.3.0.jar (save as jaxb-api.jar)\n\njaxb-core-2.3.0.1.jar (save as jaxb-core.jar)\n\njaxb-impl-2.3.0.1.jar (save as jaxb-impl.jar)\n\njavax.activation v.1.2.0 (save as javax.activation.jar)\n\nRun the following command:\n\nRun Jenkins with ${JAVA11_HOME}/bin/java \\\n    -p jaxb-api.jar:javax.activation.jar --add-modules java.xml.bind,java.activation \\\n    -cp jaxb-core.jar:jaxb-impl.jar \\\n    -jar jenkins.war --enable-future-java --httpPort=8080 --prefix=/jenkins\n\nCurrent state\n\nAs of June 17, we have achieved the following state:\n\nJenkins 2.127+ starts up successfully with\nOpenJDK 10.0.1 and\nOpenJDK 11+17-Debian-2 (preview)\n\nIt is possible to configure and run simple Freestyle jobs\n\nJenkins agents are able to start on Java 10, to connect to the controller and to execute Freestyle jobs\n\nAgents can be connected using Docker Plugin and Yet Another Docker Plugin\n\nJob DSL plugin works well on demo projects\n\nMaven Integration plugin can build\nplugin-pom -based\nJenkins plugins when running on agents with JDK 8\n\nIt is possible to create Folders and manage items in them\n\nIt is possible to configure Jenkins using Configuration-as-Code plugin\n\nJenkins is able to execute Groovy scripts in Script Console and\nGroovy Hooks\n\nKnown issues\n\nSo far we know about the following issues:\n\nPipeline crashes immediately on Java 10 and 11 ( JENKINS-46602)\n\nWorkaround: Pipeline: Support plugin should be updated to version 3.0-java11-alpha-1-rc684.d802f5d9aeed from the Incrementals repo\n( download)\n\nFIXED - Git Client plugin 2.7.2 cannot be installed when running with Java 11 build 18ea\n\nThere are many warnings about Illegal reflective access during execution\n(linked in JENKINS-40689).\n\nIn current Java 10 and 11 releases it does not lead to failures,\nbut we want to cleanup these warnings anyway\n\nFIXED - Configuration-as-Code plugin fails to export configurations on Java 10\n( JENKINS-51991)\n\nWe anticipate to discover and report more issues during the hackathon this week.\n\nContributing\n\nIf you discover incompatibilities in plugins, please\nreport issues in our bugtracker.\nWe have java10 and java11 labels for such issues.\n\nIf you are interested to try out Jenkins with Java 10 and 11 before June 22nd,\nyou may be interested to sign-up to the Jenkins and Java 10+ online hackathon.\nEverybody is welcome to join, independently of their Jenkins experience and amount of time they have available.\nExploratory testing is also within the hackathon’s scope.\nDuring this event, please also use the java10_hackathon label.\nIt will help us to track contributions and send folks some small \"thank you\" gifts for participating (details will be figured out during the hackathon).\n\nIf you want to contribute patches to the core,\nplease submit pull requests to java10-support or\njava11-support branches.\nIf the patches are compatible with Java 8, we will try to upstream them to weekly releases.\nFor plugin patches please create pull requests against main branches and then follow guidelines from plugin maintainers.\nIf you need additional reviews and you are a member of the jenkinsci organization,\nfeel free to mention the @jenkinsci/java10-support team in your PRs.\n\nLinks:\n\nDocker: jenkins/jenkins-experimental images\n\nJIRA: Java 10 compatibility\n\nJIRA: Java 11 compatibility\n\nJenkins and Java 10+ online hackathon","title":"Running Jenkins with Java 10 and 11 (experimental support)","tags":["core","developer","java10","java11"],"authors":[]}},{"node":{"date":"2018-06-08T00:00:00.000Z","id":"f46b46ad-a0ad-590a-a614-37ad7eaf1e7d","slug":"/blog/2018/06/08/jenkins-java10-hackathon/","strippedHtml":"On behalf of the Jenkins Events Team,\nI would like to invite you to the “Jenkins & Java 10 Online Hackathon” which will take place from June 18th to 22nd.\nWe will be working together on Jenkins core and plugins in order\nto find and fix compatibility issues, share experiences and have some fun.\nEverybody is welcome to join, independently of their Jenkins experience and amount of time they have available.\n\nIf you are interested in participating in the hackathon, please sign-up in\nthis form.\n\nBackground\n\nJava 9 has recently been end-of-lifed, Java 10 is in GA, and Java 11 is in early beta.\nJenkins project currently requires Java 8 to run reliably,\nand there are some known compatibility issues with higher Java versions.\n\nDuring the Jenkins World 2017 Hackathon,\nMark Waite and\nBaptiste Mathus spent some time exploring Java 9 compatibility in Jenkins.\nWe are currently tracking compatibility issues in the\nJENKINS-40689 EPIC,\nbut there are likely many unknown issues in Jenkins core, plugins and in libraries we use in the project.\nWe would like to continue their effort and work on Java 10+ support.\n\nObjectives and Scope\n\nAs I have said above,\nthe goals are to explore/fix compatibility issues, share experiences and have fun.\nWe DO NOT plan to make Jenkins fully compatible with Java 10+\nduring the hackathon,\nbut we will try to integrate fixes and make them available.\n\nSince the announcement of the Hackathon in the mailing list,\nwe have got a number of registrations from contributors working on several project areas.\nWe will split our work to several areas:\n\nJenkins core and Remoting\n\nPipeline Engine\n\nPlugins (e.g. Git plugin or any plugin you want to work on)\n\nExploratory testing for Java 10 and beyond\n\nIn order to organize the effort, we have created a\njava10_hackathon label\nin Jenkins JIRA.\nIf you are interested in particular tasks,\nplease assign them to yourself and add the label.\n\nOrganization\n\nCurrently the event is in the planning stage.\nWe will be using the Developer mailing list\nfor synchronization before the event.\n\nWhat will we have?\n\nCommunications in #jenkins-hackhouse IRC and in the\nJenkins Gitter channel\n\nDaily recorded sync-up calls in Hangouts\n\nKnowledge transfer sessions during the event\n\nWe also want to prepare some special swag for active participants.\nIf you have reached this part of the blogpost,\nyou have probably seen the logo ;)\n\nLinks\n\nRegistration\n\nDeveloper mailing list\n\nHackathon sync-up document\n\nRunning Jenkins with Java 10 and 11\n\nJIRA: Java 10 compatibility\n\nJIRA: Java 11 compatibility\n\nJIRA: Hackathon tasks","title":"Jenkins & Java 10+ Online Hackathon (Jun 18-22)","tags":["events","community","developer","java10","java11"],"authors":[]}}]}},"pageContext":{"tag":"developer","limit":8,"skip":24,"numPages":5,"currentPage":4}},
    "staticQueryHashes": ["3649515864"]}