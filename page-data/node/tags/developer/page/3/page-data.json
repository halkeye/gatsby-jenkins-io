{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/developer/page/3",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-07-11T00:00:00.000Z","id":"0f6a7c3f-b06c-5c30-a7c4-31c396c5fecf","slug":"/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/","strippedHtml":"I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. This is the first time I have contributed for Jenkins and I am very excited to announce the features that have been done in Phase 1.\n\nProject Introduction\n\nCurrent version of Remoting over Apache Kafka plugin requires users to manually configure the entire system which includes Zookeeper, Kafka and remoting agents. It also doesn’t support dynamic agent provisioning so scalability is harder to achieve. My project aims to solve two problems:\n\nOut-of-the-box solution to provision Apache Kafka cluster.\n\nDynamic agent provisioning in a Kubernetes cluster.\n\nCurrent State\n\nKubernetes connector with credentials supported.\n\nApache Kafka provisioning in Kubernetes feature is fully implemented.\n\nHelm chart is partially implemented.\n\nApache Kafka provisioning in Kubernetes\n\nThis feature is part of 2.0 version so it is not yet released officially. You can try out the feature by using the Experimental Update Center to update to 2.0.0-alpha version or building directly from master branch:\n\ngit clone https://github.com/jenkinsci/remoting-kafka-plugin.git\ncd remoting-kafka-plugin/plugin\nmvn hpi:run\n\nOn the Global Configuration page, users can input Kubernetes server information and credentials. Then they can start Apache Kafka with only one button click.\n\nWhen users click Start Kafka on Kubernetes button, Jenkins will create a Kubernetes client from the information and then apply Zookeeper and Kafka YAML specification files from resources.\n\nHelm Chart\n\nHelm chart for Remoting over Apache Kafka plugin is based on stable/jenkins chart and incubator/kafka chart. As of now, the chart is still a Work in Progress because it is still waiting for Cloud API implementation in Phase 2. However, you can check out the demo chart with a single standalone Remoting Kafka Agent:\n\ngit clone -b demo-helm-phase-1 https://github.com/longngn/remoting-kafka-plugin.git\ncd remoting-kafka-plugin\nK8S_NODE=./helm/jenkins-remoting-kafka/do.sh start\n\nThe command do.sh start will do the following steps:\n\nInstall the chart (with Jenkins and Kafka).\n\nLaunch a Kafka computer on Jenkins controller by applying the following JCasC.\n\njenkins:\n  nodes:\n    - permanent:\n        name: \"test\"\n        remoteFS: \"/home/jenkins\"\n        launcher:\n          kafka: {}\n\nLaunch a single Remoting Kafka Agent pod.\n\nYou can check the chart state by running kubectl, for example:\n\n$ kubectl get all -n demo-helm\nNAME                                    READY   STATUS    RESTARTS   AGE\npod/demo-jenkins-998bcdfd4-tjmjs        2/2     Running   0          6m30s\npod/demo-jenkins-remoting-kafka-agent   1/1     Running   0          4m10s\npod/demo-kafka-0                        1/1     Running   0          6m30s\npod/demo-zookeeper-0                    1/1     Running   0          6m30s\n\nNAME                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE\nservice/demo-0-external           NodePort    10.106.254.187 19092:31090/TCP              6m30s\nservice/demo-jenkins              NodePort    10.101.84.33 8080:31465/TCP               6m31s\nservice/demo-jenkins-agent        ClusterIP   10.97.169.65 50000/TCP                    6m31s\nservice/demo-kafka                ClusterIP   10.106.248.10 9092/TCP                     6m30s\nservice/demo-kafka-headless       ClusterIP   None 9092/TCP                     6m30s\nservice/demo-zookeeper            ClusterIP   10.109.222.63 2181/TCP                     6m30s\nservice/demo-zookeeper-headless   ClusterIP   None 2181/TCP,3888/TCP,2888/TCP   6m31s\n\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/demo-jenkins   1/1     1            1           6m30s\n\nNAME                                     DESIRED   CURRENT   READY   AGE\nreplicaset.apps/demo-jenkins-998bcdfd4   1         1         1       6m30s\n\nNAME                              READY   AGE\nstatefulset.apps/demo-kafka       1/1     6m30s\nstatefulset.apps/demo-zookeeper   1/1     6m30s\n\nNext Phase Plan\n\nImplement Cloud API to provision Remoting Kafka Agent. ( JENKINS-57668)\n\nIntegrate Cloud API implementation with Helm chart. ( JENKINS-58288)\n\nUnit tests and integration tests.\n\nRelease version 2.0 and address feedbacks. ( JENKINS-58289)\n\nLinks\n\nPhase 1 Demo Video\n\nPhase 1 Presentation Slides\n\nRemoting over Apache Kafka plugin\n\nProject Page\n\nGitter Channel","title":"Remoting over Apache Kafka plugin with Kafka launcher in Kubernetes","tags":["remoting","kafka","kubernetes","helm","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg","srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/77b35/longnguyen.jpg 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/d4a57/longnguyen.jpg 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/19e71/longnguyen.jpg 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/68974/longnguyen.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/ef6ff/longnguyen.webp 32w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/8257c/longnguyen.webp 64w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/6766a/longnguyen.webp 128w,\n/gatsby-jenkins-io/static/1100ce9c7d4d77539be043dff3d058aa/22bfc/longnguyen.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"longngn","html":"<div class=\"paragraph\">\n<p>Long is a Software Engineering student at FPT University, Vietnam. He started to contribute for Jenkins from Google Summer of Code 2019 for the project <a href=\"https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/\">Remoting over Apache Kafka with Kubernetes features</a></p>\n</div>","id":"longnguyen","irc":null,"linkedin":null,"name":"Long Nguyen","slug":"/blog/author/longnguyen","twitter":null}]}},{"node":{"date":"2019-06-29T00:00:00.000Z","id":"7b06e02e-ca3c-5b58-8850-3e214fd8268e","slug":"/blog/2019/06/29/phase-1-multibranch-pipeline-support-for-gitlab/","strippedHtml":"This is one of the Jenkins project in GSoC 2019. We are working on adding support\nfor Multi-branch\nPipeline Jobs and Folder Organisation in GitLab. The plan is to create the following\nplugins:\n\nGitLab API Plugin - Wraps GitLab Java APIs.\n\nGitLab Branch Source Plugin - Contains two packages:\n\nio.jenkins.plugins.gitlabserverconfig - Manages server configuration and web hooks management.\nIdeally should reside inside another plugin with name GitLab Plugin. In future, this package should\nbe moved into a new plugin.\n\nio.jenkins.plugins.gitlabbranchsource - Adds GitLab Branch Source for Multi-branch Pipeline Jobs (including\nMerge Requests) and Folder organisation.\n\nPresent State\n\nFreeStyle Job and Pipeline(Single Branch) Job are fully supported.\n\nMulti-branch Pipeline Job is partially supported (no MRs detection).\n\nGitLab Folder Organisation is not supported.\n\nGoals of this project\n\nImplement a lightweight GitLab Plugin that depends on GitLab API Plugin.\n\nFollow convention of 3 separate plugins i.e. GitLab Plugin, GitLab API Plugin, GitLab Branch Source Plugin.\n\nImplement GitLab Branch Source Plugin with support for Multi-branch Pipeline Jobs.\n\nSupport new Jenkins features such as\nJenkins Code as Configuration (JCasC),\nIncremental Tools.\n\nClear & Efficient design.\n\nSupport new SCM Trait APIs.\n\nSupport Java 8 and above.\n\nBuilding the plugin\n\nNo binaries are available for this plugin as the plugin is in the very early alpha stage, and not ready for the general\npublic quite yet.  If you want to jump in early, you can try building it yourself from source.\n\nInstallation:\n\nCheckout source code to your local machine:\n\ngit clone https://github.com/baymac/gitlab-branch-source-plugin.git\n\ncd gitlab-branch-source-plugin\n\nInstall the plugin:\n\nmvn clean install\n\nmvn clean install -DskipTests # to skip tests\n\nRun the plugin:\n\nmvn hpi:run # runs a Jenkins instance at localhost:8080\n\nmvn hpi:run -Djetty.port= # to run on your desired port number\n\nIf you want to test it with your Jenkins server, after mvn clean install follow these steps in your Jenkins instance:\n\nSelect Manage Jenkins\n\nSelect Manage Plugins\n\nSelect Advanced tab\n\nIn Upload Plugin section, select Choose file\n\nSelect $ /target/gitlab-branch-source.hpi\n\nSelect Upload\n\nSelect Install without restart\n\nUsage\n\nAssuming plugin installation has done been already.\n\nSetting up GitLab Server Configuration on Jenkins\n\nOn jenkins, select Manage Jenkins\n\nSelect Configure System\n\nScroll down to find the GitLab section\n\nSelect Add GitLab Server | Select GitLab Server\n\nNow you will now see the GitLab Server Configuration options.\n\nThere are 4 fields that needs to be configured:\n\nName - Plugin automatically generates an unique server name for you. User may want to configure this field\nto suit their needs but should make sure it is sufficiently unique. We recommend to keep it as it is.\n\nServer URL - Contains the URL to your GitLab Server. By default it is set to \"https://gitlab.com\". User can\nmodify it to enter their GitLab Server URL e.g. https://gitlab.gnome.org/, http://gitlab.example.com:7990. etc.\n\nCredentials - Contains a list of credentials entries that are of type GitLab Personal Access Token. When\nno credential has been added it shows \"-none-\". User can add a credential by clicking \"Add\" button.\n\nWeb Hook - This field is a checkbox. If you want the plugin to setup a webhook on your GitLab project(s)\nrelated jobs, check this box. The plugin listens to a URL for the concerned GitLab project(s) and when an event\noccurs in the GitLab Server, the server sends an event trigger to the URL where the web hook is setup. If you\nwant continuous integration (or continuous delivery) on your GitLab project then you may want to automatically\nset it up.\n\nAdding a Personal Access Token Credentials (To automatically generate Personal Access Token see\nnext section):\n\nUser is required to add a GitLab Personal Access Token type credentials entry to securely persist the token\ninside Jenkins.\n\nGenerate a Personal Access Token on your GitLab Server:\n\nSelect profile dropdown menu from top-right corner\n\nSelect Settings\n\nSelect Access Token from left column\n\nEnter a name | Set Scope to api, read_user, read_repository\n\nSelect Create Personal Access Token\n\nCopy the token generated\n\nReturn to Jenkins | Select Add in Credentials field | Select Jenkins\n\nSet Kind to GitLab Personal Access Token\n\nEnter Token\n\nEnter a unique id in ID\n\nEnter a human readable description\n\nSelect Add\n\nTesting connection:\n\nSelect your desired token in the Credentials dropdown\n\nSelect Test Connection\n\nIt should return something like Credentials verified for user\n\nSelect Apply (at the bottom)\n\nGitLab Server is now setup on Jenkins\n\nCreating Personal Access Token within Jenkins\n\nAlternatively, users can generate a GitLab Personal Access Token within Jenkins itself and automatically add the\nGitLab Personal Access Token credentials to Jenkins server credentials.\n\nSelect Advanced at the bottom of GitLab Section\n\nSelect Manage Additional GitLab Actions\n\nSelect Convert login and password to token\n\nSet the GitLab Server URL\n\nThere are 2 options to generate token;\n\nFrom credentials - To select an already persisting Username Password Credentials or add an Username Password\ncredential to persist it.\n\nFrom login and password - If this is a one time thing then you can directly enter you credentials to the text boxes\nand the username/password credential is not persisted.\n\nAfter setting your username/password credential, select Create token credentials.\n\nThe token creator will create a Personal Access Token in your GitLab Server for the given user with the\nrequired scope and also create a credentials for the same inside Jenkins server. You can go back to the GitLab Server\nConfiguration to select the new credentials generated (select \"-none-\" first then new credentials will appear). For\nsecurity reasons this token is not revealed as plain text rather returns an id. It is a 128-bit long UUID-4 string\n(36 characters).\n\nConfiguration as Code\n\nNo need for messing around in the UI. Jenkins Configuration as Code (JCasC) or simply Configuration as Code Plugin\nallows you to configure Jenkins via a yaml file. If you are a first time user, you can learn more about JCasC\nhere.\n\nAdd configuration YAML:\n\nThere are multiple ways to load JCasC yaml file to configure Jenkins:\n\nJCasC by default searches for a file with the name jenkins.yaml in $JENKINS_ROOT.\n\nThe JCasC looks for an environment variable CASC_JENKINS_CONFIG which contains the path\nfor the configuration yaml file.\n\nA path to a folder containing a set of config files e.g. /var/jenkins_home/casc_configs.\n\nA full path to a single file e.g. /var/jenkins_home/casc_configs/jenkins.yaml.\n\nA URL pointing to a file served on the web e.g. /jenkins.yaml\" class=\"bare\">https:// /jenkins.yaml .\n\nYou can also set the configuration yaml path in the UI. Go to /configuration-as-code.\nEnter path or URL to jenkins.yaml and select Apply New Configuration.\n\nAn example of configuring GitLab server via jenkins.yaml :\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - gitlabPersonalAccessToken:\n              scope: SYSTEM\n              id: \"i<3GitLab\"\n              token: \"XfsqZvVtAx5YCph5bq3r\" # gitlab personal access token\n\nunclassified:\n  gitLabServers:\n    servers:\n      - credentialsId: \"i<3GitLab\"\n        manageHooks: true\n        name: \"gitlab.com\"\n        serverUrl: \"https://gitlab.com\"\n\nFor better security, see handling secrets\nsection in JCasC\ndocumentation.\n\nFuture Scope of work\n\nThe second phase of GSoC will be utilized to develop GitLab Branch Source. The new feature is a work in progress, but\nthe codebase is unstable and requires lot of bugfixes. Some features like Multibranch Pipeline Jobs are functioning\nproperly. More about it at the end of second phase.\n\nIssue Tracking\n\nThis project uses Jenkins JIRA to track issues. You can file issues under\ngitlab-branch-source-plugin component.\n\nAcknowledgements\n\nThis plugin is built and maintained by the Google Summer of Code (GSoC) Team for\nMulti-branch Pipeline\nSupport for GitLab. A lot of inspiration was drawn from GitLab Plugin, Gitea Plugin and GitHub Plugin.\n\nOur team consists of: baymac, LinuxSuRen,\nMarky, Joseph,\nJustin, Jeff.\n\nWith support from: Oleg, Greg,\nOwen.\n\nAlso thanks to entire Jenkins community for contributing with technical expertise and inspiration.\n\nLinks\n\nPhase 1 demo\n\nPresentation slides\n\nGitLab API Plugin\n\nGitLab Branch Source Plugin\n\nGitLab API Plugin Wiki\n\nIssue Tracker for Phase 1\n\nBlog","title":"Multi-branch Pipeline Jobs Support for GitLab SCM","tags":["gitlab","plugins","pipeline","credentials","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg","srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/eb017/baymac.jpg 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/ed0e7/baymac.jpg 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/20305/baymac.jpg 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/b3c75/baymac.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/bcdad/baymac.webp 32w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/21187/baymac.webp 64w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/33025/baymac.webp 128w,\n/gatsby-jenkins-io/static/f0b1fd16f8bec9a14b57a0b0108486f1/d386c/baymac.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":192}}},"blog":null,"github":"baymac","html":"<div class=\"paragraph\">\n<p>GSoC 2019 student under Jenkins project. Maintainer of GitLab Branch Source Plugin. Software Developer at Udaan, India.</p>\n</div>","id":"baymac","irc":null,"linkedin":"parichay.barpanda","name":"Parichay Barpanda","slug":"/blog/author/baymac","twitter":"baymac04"}]}},{"node":{"date":"2019-06-21T00:00:00.000Z","id":"b06db1a3-a822-5949-960f-cb7f3e69c3da","slug":"/blog/2019/06/21/performance-testing-jenkins/","strippedHtml":"I have been working on improving the performance of the Role Strategy Plugin as a part of my Google Summer of Code project.\nSince there was no existing way to measure performance and do benchmarks on Jenkins Plugins,\nmy work for the first phase of the project was to create a framework for running\nbenchmarks in Jenkins plugins with a Jenkins instance available. To make our job a bit easier,\nwe chose Java Microbenchmark Harness for running these benchmarks. This\nallows us to reliably measure performance of our time-critical functions and will help make Jenkins perform faster\nfor everyone.\n\nThe micro-benchmarking framework was recently released in the Jenkins Unit Test Harness 2.50.\nThe blog post below shows how to run benchmarks in your plugins.\n\nIntroduction\n\nThe framework runs works by starting a temporary Jenkins instance for each fork of the JMH benchmark,\njust like JenkinsRule from Jenkins Test Harness. Benchmarks are run directly from your JUnit Tests which allows\nyou to fail builds on the fly and easily run benchmarks from your IDE, just like unit tests. You can easily\nconfigure your benchmarks by either using your Java methods, or by using Jenkins Configuration-as-Code plugin\nand passing the path to your YAML file.\n\nTo run benchmarks from your plugins, you need to do the following:\n\nbump up the minimum required Jenkins version to 2.60.3 or above\n\nbump Plugin-POM to a version ≥ 3.46 or manually upgrade to Jenkins Test Harness ≥ 2.51.\n\nNow, to run the benchmarks, you need to have a benchmark runner that contains a @Test so it can run\nlike a JUnit test. From inside a test method, you can use the OptionsBuilder provided by JMH to\nconfigure your benchmarks. For example:\n\npublic class BenchmarkRunner {\n    @Test\n    public void runJmhBenchmarks() throws Exception {\n        ChainedOptionsBuilder options = new OptionsBuilder()\n                .mode(Mode.AverageTime)\n                .forks(2)\n                .result(\"jmh-report.json\");\n\n        // Automatically detect benchmark classes annotated with @JmhBenchmark\n        new BenchmarkFinder(getClass()).findBenchmarks(options);\n        new Runner(options.build()).run();\n    }\n}\n\nSample benchmarks\n\nNow, you can write your first benchmark:\n\nWithout any special setup\n\n@JmhBenchmark\npublic class JmhStateBenchmark {\n    public static class MyState extends JmhBenchmarkState {\n    }\n\n    @Benchmark\n    public void benchmark(MyState state) {\n        // benchmark code goes here\n        state.getJenkins().setSystemMessage(\"Hello world\");\n    }\n}\n\nUsing Configuration as Code\n\nTo use configuration as code, apart from the dependencies above you also need to add the following\nto your pom.xml :\n\nio.jenkins\nconfiguration-as-code\n1.21\ntrue\n\nio.jenkins\nconfiguration-as-code\n1.21\ntests\ntest\n\nNow configuring a benchmark is as simple as providing path to your YAML file and specifying the class\ncontaining the benchmark state.\n\n@JmhBenchmark\npublic class SampleBenchmark {\n    public static class MyState extends CascJmhBenchmarkState {\n        @NonNull\n        @Override\n        protected String getResourcePath() {\n            return \"config.yml\";\n        }\n\n        @NonNull\n        @Override\n        protected Class getEnclosingClass() {\n            return SampleBenchmark.class;\n        }\n    }\n\n    @Benchmark\n    public void benchmark(MyState state) {\n        Jenkins jenkins = state.getJenkins(); // jenkins is configured and ready to be benchmarked.\n        // your benchmark code goes here...\n    }\n}\n\nMore Samples\n\nAs a part of this project, a few benchmarks have been created in the Role Strategy Plugin which show\nconfiguring the instances for various situations. You can find them\nhere.\n\nRunning Benchmarks\n\nRunning benchmarks from Maven\n\nTo easily run benchmarks from Maven, a Maven profile to run the benchmarks has been created\nand is available starting Plugin-POM version 3.45. You can then run your benchmarks from the\ncommand line using mvn test -Dbenchmark.\n\nRunning benchmarks on ci.jenkins.io\n\nIf you have your plugins hosted on ci.jenkins.io, you can easily run benchmarks directly from your Jenkinsfile\nby using the runBenchmarks() method after the buildPlugin() step in your which is now available in\nJenkins Pipeline library.\nThis function also accepts the path to your generated JMH benchmark reports as an optional\nparameter and archives the benchmark results. Running benchmarks in pull request builds allows you to constantly\nmonitor the performance implications of a given change. For example, the Jenkinsfile from Role Strategy Plugin:\n\nbuildPlugin()\nrunBenchmarks('jmh-report.json')\n\nVisualizing benchmark results\n\nBenchmark reports generated (in JSON) can be visualized using the either the JMH Report Plugin\nor by passing the benchmark reports to the JMH visualizer web service. As an example, here is\na visualized report of some benchmarks from the Role Strategy Plugin:\n\nThese improvements seen above were obtained through a small pull request\nto the plugin and shows how even seemingly small changes can bring major performance improvements. Microbenchmarks\nhelp to find these hot-spots and estimate the impact of changes.\n\nSome tips and tricks\n\nSince BenchmarkRunner class name in the example above does not qualify as a test according to Maven surefire plugin’s\nnaming conventions, the benchmarks will not interfere with your JUnit tests.\n\nBenchmark methods need to be annotated by @Benchmark for JMH to detect them.\n\nClasses containing benchmarks are found automatically by the BenchmarkFinder\nwhen annotated with @JmhBenchmark.\n\nA reference to the Jenkins instance is available through either JmhBenchmarkState#getJenkins() or through\nJenkins.getInstance() like you would otherwise do.\n\nJmhBenchmarkState provides setup() and tearDown() methods which can be overridden to configure the\nJenkins instance according to your benchmark’s requirements.\n\nThe benchmark builds on ci.jenkins.io are currently throttled because of the limited availability of highmem nodes.\n\nThe benchmark framework was made available in Jenkins Test Harness 2.50, it is recommended to use version 2.51 as it includes some bug fixes.\n\nLinks and Feedback\n\nIf you have any feedback, comments or questions, please feel free to reach out to me through either\nthe Role Strategy Plugin Gitter chat or through\nthe Jenkins Developer Mailing list.\n\nPresentation slides\n\nDemo at Platform SIG meeting\n\nDocumentation for the micro-benchmark framework:\n\nWriting benchmarks (Jenkins Test Harness)\n\nPreconfiguring benchmarks using JCasC\n\nRunning benchmarks using Plugin POM profile\n\nBuild Step for running benchmarks on ci.jenkins.io","title":"Micro-benchmarking Framework for Jenkins Plugins","tags":["jmh","plugins","benchmark","performance","developer","gsoc","gsoc2019"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg","srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f4523/abhyudayasharma.jpg 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1e7bb/abhyudayasharma.jpg 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/ff5b9/abhyudayasharma.jpg 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/b48b6/abhyudayasharma.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/1fd06/abhyudayasharma.webp 32w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/9edd6/abhyudayasharma.webp 64w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/f5f75/abhyudayasharma.webp 128w,\n/gatsby-jenkins-io/static/a1ce355d937f34af4ad5cbf6a6d79f30/05d06/abhyudayasharma.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":null,"github":"AbhyudayaSharma","html":"<div class=\"paragraph\">\n<p>Abhyudaya is a Computer Science student at Shiv Nadar University, India.\nHe is participating in Google Summer of Code 2019 to improve the performance\nof the <a href=\"https://github.com/jenkinsci/role-strategy-plugin\">Role Strategy Plugin</a>.</p>\n</div>","id":"abhyudayasharma","irc":null,"linkedin":null,"name":"Abhyudaya Sharma","slug":"/blog/author/abhyudayasharma","twitter":null}]}},{"node":{"date":"2019-05-30T00:00:00.000Z","id":"0cba81fa-0a2a-5225-8fdf-6ce66f9aa4d5","slug":"/blog/2019/05/30/becoming-contributor-newbie-tickets/","strippedHtml":"Two months ago I published an introductory article on\nthe journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about\nthe multiple ways in which we can participate and contribute. Then, a first—​basic—​contribution I made to the site\nrepository was described.\n\nNow, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.\n\nGetting started with tickets and processes\n\nBeginners guide to contributing and Jenkins Jira\n\nReviewing the developer section in jenkins.io is probably the best starting point, and a\nreference link to keep handy. The beginners guide to contributing to Jenkins\ncan also be useful, since it points to different repositories, tools (such as the issue tracker) and governance documents.\nBesides, it describes best practices for commit messages, code style conventions, PR guidelines, etc.\n\nOnce we get a general understanding of the former and want to actually start coding, we may get stuck trying to come up\nwith something to work on.\n\nVisiting the Jenkins issue tracker, feels like the natural next\nstep, since it is full of potential bugs and enhancements that have already been reported by the community. However, it\nis quite easy to feel overwhelmed by the possibilities listed there. Bear in mind that in a 10+-year-old project like\nthis, most of the things that are reported are tricky for a newcomer to work on. For that reason, filtering by\nnewbie-friendly tickets is probably\nthe best idea.\n\nFigure 1. Screenshot displaying the list of newbie-friendly tickets in the Jenkins Jira\n\nSelecting a ticket\n\nIn my case, I spent some time reviewing the newbie-friendly tickets, until I found one\nthat seemed interesting to me and also looked like something I would be able to fix:\n\nFigure 2. Screenshot of the ticket I decided to work on\n\nProcesses\n\nAt this stage, when we have decided to take ownership of a ticket, it’s a good practice to let the rest of the community\nknow that we are planning to start working on it. We can do so easily, by assigning the ticket to ourselves (see the\n“ Assign ” button below the ticket summary).\n\nAssigning the ticket to ourselves in the Jenkins Jira will allow any other contributors to know that we are planning to\ntake care of the ticket; and in case they are also interested in contributing to it, they will know who to reach if they\nwant to coordinate work or ask for status. That said, it is worth mentioning that assigning a ticket to yourself does\nnot mean that other contributors cannot work on it from then onwards. Jenkins is an open-source project and anyone is\nwelcome to create their own PRs, so anybody can propose their own solution to the ticket. But as you can guess, if the\nticket is assigned to somebody, most people will probably reach the assignee before starting to work on it.\n\nRelated to the former, it is also important to bear in mind that we should not postpone work on the ticket for too long\nonce we have assigned the ticket to ourselves. Other potential contributors might be ignoring the ticket because they\nsee yourself assigned to it.\n\nOnce we are about to actually start working on the ticket, it is also a good practice to click the “ Start Progress ”\nbutton. This action will change the status to “ In progress ”, signaling to the community that we are currently working\non this particular ticket.\n\nSetting up the necessary stuff on our computer\n\nConfiguring, installing and testing\n\nAs described in the first article of this journey, the\ninitial step to start contributing to a particular repository is to fork it to our GitHub account, and then clone it to\nour local computer.\n\nAs usual, in the Jenkins core repository the CONTRIBUTING file\ndescribes the necessary steps to get the repository working locally. This includes installing the necessary development\ntools: Java Development Kit ( OpenJDK is the recommended choice), Maven and any IDE supporting\nMaven projects. Note that instructions to install JDK and Maven are linked in the contributing guidelines.\n\nOnce we have all the necessary tools installed and configured, we are ready to build Jenkins locally\nand also to run tests.\n\nGetting down to business\n\nReviewing ticket details\n\nNow that I was ready to start working on the ticket, I had to review it in more detail, to fully understand the problem.\n\nThe description of the ticket I was planning to work on included two links. The first one was to\na screenshot that showed the actual bug. It showed\nhow several non-compatible plugins were being selected when clicking “ All ”, even though the intended behavior was to\nonly select the compatible plugins. The second link was a reference to a code fragment\nthat showed other validations that had to be taken into account when checking if a plugin update was compatible or not\nwith the current installation.\n\nReproducing the issue locally\n\nEven though I had now understood the issue in better detail, I had not seen it myself live yet, so it seemed to me that\nthe next logical step was to reproduce it locally.\n\nTo reproduce the issue locally in our computer, we can either use the local war file that we can generate by\nbuilding Jenkins from the source code\nor we can download the latest Jenkins version available and run it locally. When I worked\non this ticket, the latest available version was 2.172 and, when I built if from the sources I saw version 2.173-SNAPSHOT,\nwhich was the next version, in which the community was already working on.\n\nIn general it is a good idea to reproduce bugs locally, not only to get a better understanding, but also to make sure\nthey are actual issues. It could always be an issue happening only on the reporter’s end (e.g. some user misconfiguration).\nOr it could be a ticket referencing an old issue that has been fixed already. This latest possibility didn’t sound that\nstrange to me, since the ticket was one month old. It could have been handled by someone else in the meantime, without\nnoticing the ticket existed. Or the contributor might have forgotten to update the ticket in the issue tracker after the\nfix was committed.\n\nSo, for all the reasons above, I ran the latest Jenkins version locally. From a terminal, I went to the\nfolder in which the war file was placed, and ran java -jar jenkins.war, which starts Jenkins locally on http://localhost:8080.\n\nFrom the home page I navigated to the Plugin Manager (clicking the “ Manage Jenkins ” link in the left hand side and\nthen selecting “ Manage Plugins ” in the list).\n\nIn the Manage Plugins page, the list of plugin updates appears. In my case, since I re-used an old JENKINS_HOME\nfrom an older installation, several plugins showed up in the list, requiring updates. That allowed me to test the behavior\nthat was supposed to be failing.\n\nWhen I clicked on the “Select all” option at the bottom, this is what I got:\n\nFigure 3. Screenshot showing the error, reproduced locally, after clicking “Select All”\n\nAs it had been reported in the ticket, the behavior was inconsistent. In a previous version, the behavior of the “ All ”\nselector had been changed (with the best intent), aiming to only check the compatible plugins. However, as can be seen\nin the screenshot, the behavior was not the expected one. Now, neither “all” nor “only compatible” plugins were being\nselected, since some plugins with compatibility issues were also being checked, unintentionally.\n\nFiguring out a fix\n\nWhen reading the conversation in the original PR in which the behavior of the “ All ” selector had been changed, I saw a\nsuggestion of having a separate “ Compatible ” selector, thus leaving the “ All ” selector with the traditional behavior.\nI liked the idea, so I decided to include it as part of my proposed change.\n\nAt this stage, I had a clear picture of the different things I needed to change. These included: 1) The UI, to add a new\nselector for “Compatible” plugins only, 2) the JS code that applied the changes to the interface when the selectors were\nclicked and 3) probably the back-end method that was determining if a plugin was compatible or not.\n\nApplying the change\n\nAs usual, and as it is also recommended in the contributing guidelines, I created a separate feature branch to work on\nthe ticket.\n\nAfter reviewing the code, I spent some time figuring out which pieces I needed to change, both in the back-end and also\nin the front-end. For more details about the changes I had to make, you can take a look at the changes in my PR.\n\nAs a basic summary, I learned that the classic Jenkins UI was built using Jelly\nand, after understanding its basics, I modified the index.jelly file to include the new selector, assigning the\nfunction that checked the compatible plugins to this new selector, and re-using the existing “toggle” function to set\nall checkboxes to true in the case of “ All ”. I also had to modify the behavior of the checkPluginsWithoutWarnings\nJavaScript function, to un-check the incompatible ones, since there was now an actual “ All ” selector that was not there\npreviously, and that un-check case was not being taken into account. Then, I created a new back-end Java method\nisCompatible, inside the UpdateSite.java class, which now calls all the different methods that check different\ncompatibilities and returns the combined boolean result. For this change, I included an automated test to verify the\ncorrect behavior of the method, contributing to the test coverage of the project. Finally, I modified the table.jelly\nfile to call the new back-end method from the UI, replacing the existing one that was not taking all cases into account.\n\nAs you can see, the change involved touching different technologies, but even if you face a similar situation in which\nyou are not familiar with some of them, my advice would be carry on, don’t let that stop you. As software engineers, we\nshould focus on our evergreen skills, rather than on knowing\nspecific technologies; adapting to whatever framework we have to use at a given moment, learning whatever we need about\nthe new technology to complete the task and applying cross-framework principles and best practices to provide a quality\nsolution.\n\nResult\n\nAfter the changes described above, the resulting UI includes a new option, and the corresponding behaviors of the three\nselectors work as expected:\n\nFigure 4. Screenshot of the new version, displaying the behavior achieved by clicking the new “Compatible” selector\n\nPublishing the change\n\nSubmitting a Pull Request\n\nIn the contributing guidelines of the Jenkins core repository there is also a section about proposing changes,\nwhich describes the necessary steps that have to be followed in order to create a Pull Request (PR) with our change.\n\nFurthermore, there is a PR template in\nthe repository, which will be loaded automatically when creating a new PR and that will serve as a basis for us to provide\nthe necessary information for the reviewers. We are expected to: include a link to the ticket, list the proposed changelog\nentries describing our changes, complete the submitter checklist and add mentions to the desired reviewers (if any).\n\nIn my case, I followed the template when creating my PR,\ncompleting all sections. I linked the Jira ticket, provided two proposed changelog entries, completed the submitter\nchecklist and added three desired reviewers (explaining why I thought their reviews would be valuable). I also linked\nthe original PR that was referenced in the ticket, to provide further context.\n\nFigure 5. Screenshot of the PR I submitted\n\nThe approve and merge process\n\nAs stated in the contributing guidelines, typically two approvals are needed for the PR to be merged; and it can take\nfrom a few days to a couple of weeks to get them. Sometimes, one approval from a reviewer and a 1-week delay without\nextra reviews is considered enough to set the PR as ready-for-merge. However, both the time-to-merge and the number\nof approvals necessary might vary, depending on the complexity of the change or the area of Jenkins core that it affects.\n\nAfter the necessary approvals have been received, a Jenkins core maintainer will set the PR as ready-for-merge, which\nwill lead to it being merged into the master branch when one of the following releases are being prepared.\n\nIn my case, I received a review by Daniel (the reporter of the ticket and one of my “desired reviewers”) the very day I\nsubmitted the PR (April 14th). He made several very useful suggestions, which led to changes from my side. After those\nchanges, Daniel made minor remarks and my PR got another review, which was its first approval. After a week had passed\nwithout further news, I added the remaining minor suggestions from Daniel and a few days later received another approval,\nto which Daniel’s final approval was added, leading the PR to be labeled ready-for-merge, being later merged the same\nday (April 26th).\n\nFigure 6. Screenshot of the final state of the PR, after being merged\n\nRelease\n\nFor every new release, repository maintainers will select a set of PRs that have already been labeled ready-for-merge,\nmerge them to master, prepare changelogs (often using the suggestions included in the PRs by the authors) and proceed with\nthe creation of the new release. There is no additional action required from Pull Request authors at this point.\n\nEvery week a new version of Jenkins is released, so when your PR is merged, your changes will—​most likely—​become part\nof the following weekly release of Jenkins.\n\nEventually, your changes will also reach the Long-term support (LTS) release, which is\na different release line, aimed for more conservative users. This release line gets synced with the weekly release by\npicking, every 12 weeks, a relatively recent weekly release as baseline for the new LTS release. In between, intermediate\nLTS releases are created only to include important bug fixes, cherry-picked from the weekly releases. New features are\ntypically delayed until the next baseline for the LTS release is defined.\n\nRegarding the example described in this post, it was released in Jenkins 2.175 (weekly release), soon after being\nmerged. And will probably be included in the next LTS, which should be released next month (June 2019).\n\nDone!\n\nAnd that’s it! We have now covered the whole lifecycle of a new proposed change to Jenkins core. We have reviewed the\nprocess from the very beginning, picking a ticket from the Jenkins issue tracker; all the way to the end, having our\nchange released in a new Jenkins version.\n\nIf you have never contributed but are willing to do so, I hope this article motivates you to go back to the list of\nnewbie-friendly tickets, find one that looks interesting to you, and follow the steps described above, until you see\nyour own change released in a new Jenkins version.\n\nRemember, don’t try to solve a complicated issue as your first ticket, there are plenty of easier ways in which you can\ncontribute, and every little helps!","title":"Becoming a Jenkins contributor: Newbie-friendly tickets","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg","srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/3af71/romenrg.jpg 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/1e7bb/romenrg.jpg 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/7b60f/romenrg.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/bf13b/romenrg.webp 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/9edd6/romenrg.webp 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/f5f75/romenrg.webp 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff962/romenrg.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/author/romenrg","twitter":"romenrg"}]}},{"node":{"date":"2019-03-29T00:00:00.000Z","id":"994d7fe1-0a77-5a87-a6ff-1ab920df5676","slug":"/blog/2019/03/29/becoming-contributor-intro/","strippedHtml":"As a software engineer, for many years I have used open source software (frameworks, libraries, tools…​) in the\ndifferent companies I have worked at. However, I had never been able to engage in an open-source project as a\ncontributor, until now.\n\nSince I made my first—​ridiculously simple—​commit into Jenkins, six months ago (in September, 2018), I have been\nattempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,\nchallenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often\ndifficult to know where to start and also difficult to come up with a plan to keep moving forward and contributing\nregularly, and in more meaningful ways over time.\n\nWhen it comes to the Jenkins project, I have encountered challenges that others trying to get into the community are\nlikely to encounter. For that reason, I have decided to go ahead and share my journey of becoming a more engaged Jenkins\ncontributor.\n\nI plan to publish roughly 1 post per month, describing this journey. I will attempt to start contributing to the pieces\nthat are easier to start with, transitioning towards more complex contributions over time.\n\nWhere to start\n\njenkins.io\n\nTo become a Jenkins contributor, the most obvious place to start looking at is jenkins.io. In the\ntop navbar there is a Community dropdown, with several links to different sections. The first entry,\nOverview, takes us to the “Participate and contribute” section.\n\nIn this section we get lots of information about the many ways in which we can engage with the Jenkins project and\ncommunity. Even though the intention is to display all the possible options, allowing the reader to choose, it can feel\na bit overwhelming.\n\nThe page is divided into two columns, the column on the left shows the different options to participate, while the\ncolumn on the right shows the different options to contribute.\n\nSuggestions to Participate\n\nIn the left column of the “Participate and contribute” page, there are several ideas on how to engage with the community,\nranging from communicating to reviewing changes or providing feedback.\n\nOne of the pieces that got me confused at first in this area were the communication channels. There are many different\nchannels for communication. There are several mailing lists and there are also IRC\nand Gitter channels.\n\nDuring my first attempts to get involved, I subscribed to many of the mailing lists and several IRC and Gitter channels,\nbut I quickly noticed that there is significant communication going on; and that most threads in the most active lists\nand channels are specific to issues users or developers have. So, unless your goal is to support other users right away\n(if you are an experienced Jenkins user already it might be the case) or you plan to ask questions that you already\nhave in mind, I would advise against spending too much time on this at first.\n\nEven though it is great to see how the community members support each other, the amount of communication might be\noverwhelming for a newcomer, and if you are also trying to contribute to the project (either with translations,\ndocumentation or code), following these conversations might not be the best way to start.\n\nSuggestions to Contribute\n\nIn the right column of the “Participate and contribute” page there are several ideas on how to contribute, mostly\ngrouped into: writing code, translating, documenting and testing.\n\nIn following posts, I will be going through all of these types of contributions, as well as through some of the\nsuggestions to participate, which include reviewing Pull Requests (PRs) or providing feedback (either reporting new\nissues or replicating cases other users have already described, providing additional information to help the maintainer\nreproduce and fix them).\n\nMy first contribution in this journey\n\nWhen looking at the “Participate and contribute” page, I noticed a couple of things in that page that I could help\nimprove. And I was actually planning to pick one of those as the first example of a contribution for this post. But\nwhen I was reading the contributing guidelines of the repository, I found an even easier contribution I could make,\nwhich I thought would be a great example to illustrate how simple it could be to start contributing. So I decided to go\nahead with it.\n\nThe website repository\n\nIn the ”Document” section there is a link to the\ncontributing guidelines of the jenkins.io repository.\nThe CONTRIBUTING file is a common file present in the root folder of most open-source-project repositories.\n\nFollowing the link to that file, I reached the jenkins.io repository, which is the one that contains the sources for\nthe corresponding website—​which also includes this blog. And, in fact, the contributing file was the first file I\nwanted to review, in order to learn more about how to contribute to the website.\n\nFound a broken link\n\nWhen reading the contributing file, I learned about the Awestruct static site generator, which is the tool used to\ntransform the AsciiDoc source files in the repo into a website. However, when I clicked the link to learn more about it, I noticed it was broken. The domain had expired.\n\nWhy not fix it?\n\nThis was the opportunity I chose to show other newcomers how easy it can be to start contributing.\n\nForking the repository\n\nThe first step, as usual, would be to fork the repository and clone it to my machine.\n\nApplying the change\n\nThe next step would be to apply the change to the corresponding file. To do so, I created a new branch\n“alternative-awestruct-link” and applied the change there:\n\nMaking sure everything builds correctly and tests pass\n\nEven though in this case my contribution was not to the actual website, but to the contributing guidelines (and for\nthat reason was unlikely to break anything), it is a best practice to get used to the regular process every\ncontribution should follow, making sure everything builds correctly after any change.\n\nAs stated in the contributing guidelines themselves, in order to build this repository we just have to run the default\n“make” target, in the root of the repository.\n\nOnce the command execution finishes, if everything looks good, we are ready to go to the next step: creating the PR.\n\nCreating the PR\n\nOnce my change had been committed and pushed to my repository, I just had to create the PR. We have an easy way to do so\nby just clicking the link that we get in our git logs once the push is completed, although we can create the PR directly\nthrough the GitHub UI, if we prefer so; or even use “hub”, the GitHub CLI, to do it.\n\nIn this case, I just clicked the link, which took me to the PR creation page on GitHub. Once there, I added a\ndescription and created the PR.\n\nWhen a PR to this repository is created, we notice there are some checks that start running. Jenkins repositories are\nconfigured to notify the “Jenkins on Jenkins”, which runs the corresponding CI pipelines for\neach repository, as described in the corresponding Jenkinsfile.\n\nOnce the checks are completed, we can see the result in the PR:\n\nAnd if we want to see the details of the execution, we can follow the “Show all checks” link:\n\nPR Review\n\nNow that the PR has been created and all automated checks are passing, we only have to wait for peer code reviews.\n\nOnce someone approves the PR and it is later merged, your contribution is integrated into the master branch of the\nrepository, becoming part of the next release.\n\nI have contributed!\n\nThis contribution I made is a trivial one, with very little complexity and it might not be the most interesting one if\nyou are trying to contribute code to the Jenkins project itself.\n\nHowever, for me, as the contributor, it was a great way to get familiar with the repository, its contributing\nguidelines, the technology behind the jenkins.io website; and, above anything else, to start “losing the fear” of\ncontributing to an open source project like Jenkins.\n\nSo, if you are in the same position I was, do not hesitate. Go ahead and find your own first contribution. Every little\ncounts!","title":"The journey of becoming a Jenkins contributor: Introduction","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg","srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/3af71/romenrg.jpg 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/1e7bb/romenrg.jpg 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/7b60f/romenrg.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/bf13b/romenrg.webp 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/9edd6/romenrg.webp 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/f5f75/romenrg.webp 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff962/romenrg.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/author/romenrg","twitter":"romenrg"}]}},{"node":{"date":"2019-03-11T00:00:00.000Z","id":"c9f62da3-bfb4-5c14-b822-339fc3c213da","slug":"/blog/2019/03/11/let-s-celebrate-java-11-support/","strippedHtml":"This is a joint blog post prepared by the Java 11 Support Team: Adrien Lecharpentier, Ashton Treadway, Baptiste Mathus, Jenn Briden, Kevin Earls, María Isabel Vilacides, Mark Waite, Ramón León and Oleg Nenashev.\n\nWe have worked hard for this and it’s now here.\nWe are thrilled to announce full support for Java 11 in Jenkins starting from Jenkins 2.164 (released on Feb 10, 2019) and LTS 2.164.1 (ETA: March 14th).\nThis means you can now run your Jenkins controllers and agents with a Java 11 JVM.\n\nStarting in June 2018, many events were organized to improve Jenkins code base and add Java 11 support.\nBeyond these events, Core/Plugins maintainers and many other contributors have worked hard to make sure they discover and solve as many issues as possible related to Java 11 support.\n\nThe effort to support Java 11 led to the creation of the JEP-211: Java 10+ support in Jenkins.\nIt also spurred the creation of the Platform Special Interest Group to coordinate the Java 11 work and other platform support efforts.\n\nCelebration\n\nWe’d like to take a moment to thank everyone involved in these tasks: code contributors, issue reporters, testers, event planners and attendees and all those in the community who have generously lent their time and support to this effort.\nThank you all!\n\nHere are some of the contributors who helped with this task (alphabetical order):\n\nAlex Earl,\nAlyssa Tong,\nAshton Treadway,\nBaptiste Mathus,\nCarlos Sanchez,\nDaniel Beck,\nDavid Aldrich,\nDenis Digtyar,\nDevin Nusbaum,\nEmeric Vernat,\nEvaristo Gutierrez,\nGavin Mogan,\nGianpaolo Macario,\nIsabel Vilacides,\nJames Howe,\nJeff Pearce,\nJeff Thompson,\nJenn Briden,\nJesse Glick,\nJonah Graham,\nKevin Earls,\nKsenia Nenasheva,\nKohsuke Kawaguchi,\nLiam Newman,\nMandy Chung,\nMark Waite,\nNicolas De Loof,\nOleg Nenashev,\nOliver Gondža,\nOlivier Lamy,\nOlivier Vernin,\nParker Ennis,\nPaul Sandoz,\nRamón León,\nSam Van Oort,\nTobias Getrost,\nTracy Miranda,\nUlli Hafner,\nVincent Latombe,\nWadeck Follonier\n\n(We are deeply sorry if we missed anyone in this list.)\n\nGuidelines\n\nIn order to keep it simple, here is how you can start Jenkins on Java 11 using the Docker image.\nYou can select a Java 11 based image by suffixing the tag of the image with -jdk11.\nIf you are upgrading an existing instance please read the Upgrading Jenkins Java version from 8 to 11 page before upgrading.\n\nSo you can run Jenkins on Java 11 with:\n\ndocker run -p 50000:50000 -p 8080:8080 jenkins/jenkins:2.164-jdk11\n\nHowever, and as always, you can still start Jenkins with other methods.\nPlease see the more detailed documentation at Running Jenkins on Java 11.\n\nDeveloper guidelines\n\nFor developers involved in Jenkins development, you can find details on developing and testing Jenkins to run on Java 11 on the Java 11 Developer Guidelines.\n\nThis resource regroups the modifications which might need to be done in order to validate the compatibility of plugins for Java 11.\n\nWhat’s next\n\nEven though this is a big achievement, we still have work to do.\n\nOur first priority is adding Java 11 support to JenkinsFile Runner project.\nFrom there, we will move on to port Java 11 support to the Jenkins X project and the Evergreen project.\n\nSo, even if this is a big deal to us, this is not the end of the story.\nIt is a major step that will benefit users, developers, and members of the Jenkins community.\n\nReference links\n\nRunning Jenkins on Java 11\n\nhttps://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues\n\nhttps://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines\n\njep:211[Java 11 support in Jenkins]","title":"Let's celebrate Java 11 Support on Jenkins","tags":["core","developer","java11","community","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/19e71/alecharp.jpg","srcSet":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/77b35/alecharp.jpg 32w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/d4a57/alecharp.jpg 64w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/19e71/alecharp.jpg 128w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/68974/alecharp.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/ef6ff/alecharp.webp 32w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/8257c/alecharp.webp 64w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/6766a/alecharp.webp 128w,\n/gatsby-jenkins-io/static/9fd1095809dca5695255e3ed0f90a2f3/22bfc/alecharp.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://alecharp.fr","github":"alecharp","html":"<div class=\"paragraph\">\n<p>Adrien is a Jenkins user and plugins developer since 2009 and maintains several plugins.\nCurrently, Adrien works at <a href=\"https://www.cloudbees.com\">CloudBees</a> as a software engineer, involved in open-source code development.</p>\n</div>","id":"alecharp","irc":null,"linkedin":null,"name":"Adrien Lecharpentier","slug":"/blog/author/alecharp","twitter":"alecharp"}]}},{"node":{"date":"2018-12-26T00:00:00.000Z","id":"14d2c0a3-cdcd-532e-847f-8b8c1d9171e1","slug":"/blog/2018/12/26/gsoc-2019-call-for-mentors/","strippedHtml":"Google Summer of Code\nis as program where students are paid a stipend by Google to work on a free open source project like Jenkins,\nat full-time for four months (May to August).\nMentors get actively involved with students starting at the end of February when students start to apply\n(see the timeline).\n\nWe are looking for mentors and project ideas to participate in the 15th edition of the Google Summer of Code program!\nWe have until February 6th, 2019 at 8pm UTC to submit the application on behalf the Jenkins Organization, but obviously,\nwe want to be ready before that.\n\nThe first step in the process is to have mentors and project ideas.\nThen we will apply to Google.\nWe need Google to accept Jenkins' application to the program itself.\nAnd for this to happen, we need project proposals and mentors.\n\nWe currently have a list of project idea proposals,\nand we are looking for new project proposals, mentors, technical advisers, and subject matter experts.\nGSoC projects may be about anything around code: new features, plugins, test frameworks, infrastructure, etc., etc.\n\nMaking a project idea proposal is easy, you can read the instructions here.\nQuick start:\n\nCopy the project proposal template,\nadd a short description of your project idea\n\nOpen the document for public view and comments, reference communication channels there (if any)\n\nLet us know about the project idea via our gitter channel or the\nmailing list.\n\nAfter getting initial feedback from org admins, share your idea with other contributors who might be interested\n(via the developer mailing list, chats, or special interest groups)\n\nPotential mentors are invited to read the information for mentors for more information about the project.\nNote that being a GSoC mentor does not require expert knowledge of Jenkins.\nGSoC org admins will help to find technical advisors, so you can study together with your students.\n\nMentoring takes about 5 to 6 hours of work per week (more at the start, less at the end).\nIn return, a student works on your project full time for four months.\nThink about the projects that you’ve always wanted to do but could not find the time…​\nThere are also many opportunities to engage with the Jenkins community (meetups, knowledge sharing, communications) and with other projects (e.g. going to the GSoC Mentor Summit).\nGSoC is a pretty good return on the investment!\n\nFor any question, you can find the GSoC admins,\nmentors and participants on the GSoC SIG Gitter chat.\n\nThe Jenkins GSoC Org Admin Team 2019","title":"Google Summer of Code 2019. Call for Project ideas and Mentors","tags":["gsoc","gsoc2019","community","events","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#7898d8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png","srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/4c2a5/martinda.png 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/8bef2/martinda.png 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/7b80f/martinda.png 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/2864c/martinda.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/5abcf/martinda.webp 32w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/410d2/martinda.webp 64w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/6f814/martinda.webp 128w,\n/gatsby-jenkins-io/static/54282c2d627080ad398fbe9d5907bbf1/ca864/martinda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":136}}},"blog":null,"github":"martinda","html":"<div class=\"paragraph\">\n<p>Martin is a Jenkins community member. He participates since 2016 in the Jenkins GSoC program as a mentor, and more recently as an organization admin.\nHe currrently works in ASIC/FPGA Development Automation, using Jenkins, Gradle, Make, Artifactory, and a million other tools and languages.</p>\n</div>","id":"martinda","irc":"martinda","linkedin":null,"name":"Martin d'Anjou","slug":"/blog/author/martinda","twitter":"martindanjou14"}]}},{"node":{"date":"2018-12-14T00:00:00.000Z","id":"cc052415-dba7-5a62-91d8-3f6906f485d9","slug":"/blog/2018/12/14/java11-preview-availability/","strippedHtml":"Please refer to Running Jenkins on Java 11 documentation to have the up-to-date details on how to run Jenkins on Java 11.\n\nThis is a joint blogpost prepared by the Java 11 Support Team.\nOn Dec 18 (4PM UTC) we will be also presenting the Java 11 Preview Support at the Jenkins Online Meetup\n( link)\n\nJenkins, one of the leading open-source automation servers, still supports only Java 8.\nOn September 25 OpenJDK 11 was released.\nThis is a Long-Term-Support which will stay around for years,\nand in the Jenkins project we are interested to offer a full support of this version.\nOver the last year many contributors have been working towards enabling support for Java 11 in the project (Jenkins JEP-211).\nIt was a thorny path,\nbut now, on behalf of the Jenkins Platform SIG,\nwe are happy to announce preview availability of Java 11 support in Jenkins weekly releases!\n\nWhy do we need preview availability for Java 11?\nIt offers Jenkins contributors and early adopters a way\nto try out the changes before the general availability release happens early next year.\nIt should help us to get more exploratory testing and, hopefully,\nresolve most of the issues before Java 11 is officially supported in Jenkins.\n\nIn this blog post we will describe how to run with Java 11,\nand how to investigate compatibility issues and report them.\n\nBackground\n\nAs you probably remember,\nin June 2018 we had an online hackathon targeting Java 10+ support in Jenkins.\nAs a part of the hackathon,\nwe provided the experimental support of Java 11.\nThis event was a big success for us,\nand we were able to get Jenkins running with Java 10 and 11-ea,\nincluding major features like Jenkins Pipeline, JobDSL, Docker/Kubernetes plugins, Configuration as Code, BlueOcean, etc.\nIt gave us confidence that we can provide Java 11 support in Jenkins without major breaking changes.\nAfter the hackathon, Oleg Nenashev created\njep:211[\"Java 10+ support in Jenkins\"] (was later adjusted to target Java 11 only).\nPlatform Special Interest Group\nhas been also founded to coordinate the Java 11 support work\nand other platform support efforts (packaging, operating system support, etc.).\n\nA group of contributors continued working on Java 11 support,\nmostly focusing on upstreaming functional patches,\nenabling Java 11 support in development tools,\ntesting and addressing known compatibility issues.\nSee the Platform SIG meeting notes for detailed status updates.\nStarting from Jenkins 2.148, Jenkins successfully runs with latest OpenJDK 11 releases on various Linux and Windows platforms.\nWe performed a LOT of automated and exploratory tests, Jenkins plugins appear to work well with some exceptions (see below).\nThere is ongoing test automation effort towards the GA releases,\nbut we were able to successfully run Jenkins core tests,\nfull Acceptance Test Harness,\nand Plugin Compat Tester for recommended plugins.\nWe also deployed a temporary\nExperimental Update Center for Java 11\nwhich allows quickly delivering fixes for Java 11 early adopters.\nJenkins 2.155+ defaults to this update center when running with Java 11,\nand that’s why we announce preview availability for this version.\n\nOn Nov 19, 2018 we presented the current Java 11 support status at the Platform SIG meeting\nslides,\nand we agreed that we would like to proceed with the preview availability so that\nwe can offer something for evaluation to Jenkins users.\nBy the next meeting on Dec 04, all blockers have been addressed,\nand the Platform SIG meeting signed off the Java 11 preview availability.\n\nRunning Jenkins and Java 11 in Docker\n\nStarting from Jenkins 2.155, we provide Docker images for the Jenkins controller and agent.\nAll these images are based on the official\nopenjdk:11-jdk image maintained by the Docker Community.\nThere were discussions about migrating to other base images,\nbut we decided to exclude it from the Preview Availability scope.\nSimilarly, we do not provide Alpine images for now.\n\nJenkins controller image\n\nJava 11 support is now provided as a part of the official\njenkins/jenkins image.\nYou can run the Jenkins with Java 11 simply as:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:jdk11\n\nThe following tags are available:\n\njdk11 - Latest weekly release with Java 11 support\n\n2.155-jdk11 - Weekly releases packaged with Java 11\n\nThe image is fully compatible with\njenkins/jenkins documentation,\ne.g. you can use plugins.txt to install plugins, mount volumes and pass extra options via environment variables.\n\nAgent images\n\nIf you use containerized agents via Docker or Kubernetes plugins,\nwe have also released official Docker images for Jenkins agents:\n\njenkins/agent\n\njenkins/inbound-agent\n\njenkins/ssh-build-agent\n\nAll images use the latest-jdk11 image tag for JDK11 bundles.\nAnd sorry for the obsolete names!\n\nExperimental Jenkins controller images\n\nIn order to simplify testing, we also provide some experimental images on DockerHub.\nWe set up a continuous delivery flow for them,\nso you can get patches without waiting for Jenkins weekly releases.\n\njenkins4eval/blueocean-platform-support -\nEquivalent of jenkinsci/blueocean\n\nTag: latest-jdk11\n\nThe image bundles all Jenkins Pipeline and Blue Ocean patches required to run on Java 11\n\nIf you want to try Pipeline, use this image\n\njenkins/jenkins-experimental -\nEquivalent of jenkins/jenkins\n\nTag: latest-jdk11\n\nThe image is released from the java11-support feature branch in the Jenkins core\n\nThe branch may be slightly ahead or behind the master branch,\nwe may use the branch to quickly deliver patches to Java 11 users\n\nEventually we will move the experimental flow to the new jenkins4eval organization\nbeing created as a part of jep:217[].\n\nRunning jenkins.war with Java 11\n\nRunning without Docker is not that trivial,\nbecause Jenkins depends on some modules which have been removed from Java 11.\nWe plan to address it in the General Availability release somehow (see jira:JENKINS-52186[]),\nbut for now some manual actions are required to run Jenkins WAR with Java 11.\n\nDownload Jenkins WAR for 2.155\n\nDownload the following libraries to the same directory as jenkins.war\n\njaxb-api-2.3.0.jar (save as jaxb-api.jar)\n\njaxb-core-2.3.0.1.jar (save as jaxb-core.jar)\n\njaxb-impl-2.3.0.1.jar (save as jaxb-impl.jar)\n\njavax.activation v.1.2.0 (save as javax.activation.jar)\n\nRun the following command:\n\nRun Jenkins with ${JAVA11_HOME}/bin/java \\\n    -p jaxb-api.jar:javax.activation.jar --add-modules java.xml.bind,java.activation \\\n    -cp jaxb-core.jar:jaxb-impl.jar \\\n    -jar jenkins.war --enable-future-java --httpPort=8080 --prefix=/jenkins\n\nKnown compatibility issues\n\nTo help users to track down the compatibility issues,\nwe have created a new Known Java 11 Compatibility Issues Wiki page.\n\nSeveral important issues and obstacles:\n\nPipeline: Support Plugin has a known issue\nwith context persistency when running with Java 11 (jira:JENKINS-51998[])\n\nWe have deployed a temporary fix to the\nExperimental Update Center for Java 11.\n Fix version: 3.0-java11-alpha-1\n\nIf you use Jenkins Pipeline, make sure you run with this fix.\nOtherwise the jobs will fail almost immediately\n\nWhen updating instances to Java 11, make sure there is no running Pipelines\n\njira:JENKINS-54305[] -\nJDK Tool Plugin does not offer installers for JDK 11\n\njira:JENKINS-52282[] -\nJava Web Start is no longer available in Java 11, so it is no longer possible to start agents from Web UI.\nWe do not plan to provide a replacement.\n\nWe also know about some minor incompatibilities in other plugins,\nbut we do not consider them as blockers for preview availability.\n\nReporting compatibility issues\n\nIf you discover any Java 11 incompatibilities, please\nreport issues in our bugtracker.\nPlease set java11-compatibility labels for such issues\nso that they automatically appear on the Wiki page and get triaged.\n\nFor the security issues please use the standard\nvulnerability reporting process.\nAlthough we will be fixing Java 11 specific issues in public while it is in the preview,\nfollowing the security process will help us to investigate impact on Java 8 users.\n\nJava 11 Support Team\n\nOnce Java 11 support is released, we expect reports of regressions in plugins and Jenkins core.\nOne of the concerns are exotic platforms with native libraries, and of course other Java versions.\nThere is also a risk of 3rd-party library incompatibilities with Java 11.\nTo mitigate the risks, we have created a\nJava 11 Support Team.\nThis team will be focusing on triaging the incoming issues,\nhelping to review pull requests and, in some cases, delivering the fixes.\nThe process for this team is documented in JEP-211.\n\nWe do not expect the Java 11 Support Team to be able to fix all discovered issues,\nand we will be working with Jenkins core and plugin maintainers to get the fixes delivered.\nIf you are interested to join the team,\nreach out to us in the Platform SIG Gitter Channel.\n\nContributing\n\nWe will appreciate any kind of contributions in the Java 11 effort,\nincluding trying out Jenkins with Java 11, reporting and fixing compatibility issues.\n\nIf you want to do the exploratory testing,\nwe recommend to try out Java 11 support at one of your test instances.\nSuch testing will be much appreciated,\nespecially if you use some service integration plugins or exotic platforms.\nThe issue reporting guidelines are provided above\n\nIf you are a plugin developer/maintainer,\nwe would appreciate if you could test your plugin with Java 11.\nIn order to help with that, we have created a Wiki page with\nJava 11 Developer guidelines.\nThis page explains how to build and test plugins with Java 11,\nand it also lists known issues in development tools\n\nWhatever you do, please let us know about your experience by sending a message to\nthe Platform SIG mailing list.\nSuch information will help us a lot to track changes and contributions.\nAny other feedback about the migration complexity will be appreciated!\n\nWhat’s next?\n\nOn Dec 18 (4PM UTC) we will be presenting the Java 11 Preview Support at the Jenkins Online Meetup\n( link).\nAt this meetup we will summarize the current Java 11 Preview support status.\nIf you are a plugin developer, we will also organize separate sessions about testing plugins with Java 11 and about common best practices for fixing compatibility issues.\nPlease follow the Platform SIG announcements if you are interested.\n\nIn the next weeks we will focus on addressing feedback from early adopters and\nfixing the discovered compatibility issues.\nWe will also continue working on Java 11 support patches towards the general availability next year (jira:JENKINS-51805[]).\nIn addition to that, we will start working on Java 11 support in subprojects,\nincluding Jenkins X and Jenkins Evergreen.\n\nLinks\n\nJEP-211: Java 11 support in Jenkins\n\nJava requirements in Jenkins\n\nKnown Java 11 Compatibility Issues\n\nJava 11 Developer guidelines\n\nPlatform Special Interest Group","title":"Java 11 Support Preview is available in Jenkins 2.155+","tags":["core","developer","java11","community","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"developer","limit":8,"skip":16,"numPages":5,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}