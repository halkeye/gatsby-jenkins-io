{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/ux",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-06-08T00:00:00.000Z","id":"347b5134-2053-52fa-9696-e62715a7ff78","slug":"/blog/2020/06/08/hackfest-docs-results/","strippedHtml":"Documentation is not glamorous, but it is goodness.\n\n— Thomas Otter\n\nJenkins technical documentation is an important part of our project as it is key to using Jenkins well.\nGood documentation guides users and encourages good implementation choices.\nIt is a crucial part of the user experience.\n\nIn the recent Jenkins UI/UX hackfest, documentation was a specific track to improve the Jenkins user experience.\nWe received many improvements from experienced Jenkins contributors and newcomers alike.\nContributors from all around the world submitted pull requests for documentation on installing, managing, administering, and operating Jenkins.\n\nDocumentation migration from Wiki\n\nThe Jenkins Wiki pages have collected 15 years of experience and wisdom for Jenkins users.\nHowever, that experience and wisdom is intermixed with inaccurate, incomplete, and outdated information.\n\nThe Jenkins Wiki migration project identified the 50 most accessed pages on the Jenkins wiki and created GitHub issues to track the migration of those pages to www.jenkins.io.\nThis was our first large scale experiment using GitHub issues for documentation.\nThe results have been overwhelmingly positive.\nHackfest contributors added new sections to many documentation chapters, including:\n\nUsing Jenkins\n\nPipeline\n\nManaging Jenkins\n\nSystem Administration\n\nThe Hackfest closed 19 of the wiki migration issues.\nWork is in progress on an additional 25 wiki migration issues.\nWe’ve made great progress and look forward to even better results in the future.\nNew contributors used the \"good first issue\" label very effectively.\nWe started the Hackfest with most of the 25 \"good first issues\" unassigned and completed the Hackfest with 14 closed and 10 others in progress.\nWe’ll provide more \"good first issues\" as we use the Jenkins Wiki migration to welcome new documentation contributors.\n\nMigrating plugin documentation\n\nPlugin documentation is also in transition.\nSince November 2019, plugins have been moving their documentation into the GitHub repository that hosts the plugin source code.\nThis\"documentation as code\" approach allows plugin maintainers to include documentation improvements in the same pull requests that implement new capabilities.\nIt assures that documentation changes are reviewed by the same maintainers who review and approve new capabilities.\n\nHackfest participants submitted pull requests to migrate plugin documentation to GitHub.\n10 plugin pull requests are in progress from the Hackfest.\n5 plugin pull requests from the Hackfest have been already merged and are awaiting the release of the plugin.\n\nChuck Norris uses documentation as code\n\nIn the spirit of fun and adventure, Oleg Nenashev migrated the \"Chuck Norris plugin\" to GitHub documentation as code in a live Hackfest presentation May 26, 2020.\nLinks to the recording, the plugin migration guide, and the export tool are available from\"Migrating plugins to documentation-as-code\".\n\nDocumentation updates\n\nJenkins works with other technologies to solve automation challenges in many different environments.\nWe describe those environments in our\"Solution Pages\".\nAs part of the Hackfest, we’ve started a series of improvements to the solution pages.\n\nThe Docker solutions page now includes updated videos and a better page layout for easier reading and better navigation.\nOther solution pages will receive similar improvements in the future.\n\nSystem properties\n\nThe global configuration of Jenkins can be modified at startup by defining Java properties.\nSystem properties can change system defaults and can provide compatibility \"escape hatches\" when a new default configuration might be incompatible with existing installations.\n\nDaniel Beck has improved the navigation and user experience of the system properties page as part of the Hackfest.\nIt is now much easier to read and to reference, with embeddable links available with a mouse-over to the right of every property and labels that categorize and classify each property.\n\nPlugin site improvements\n\nDuring the Hackfest, Gavin Mogan has continued his efforts to improve the Jenkins Plugins Site so that users can easily access plugin changelogs and reported issues.\nOnce this pull request is merged, it will greatly improve the experience of those Jenkins users who want to update plugins and look for documentation about what has changed in them and what are the possible issues they might experience.\n\nExample of the incoming UI for the Jira plugin:\n\nWhat’s next?\n\nThere is still much to do in Jenkins documentation and we need your help to do it.\nThere are many ways to participate in the Jenkins project, including documentation.\nSee the contributing guidelines for detailed instructions.\nJoin the documentation chat for personalized help and encouragement.\n\nThe Jenkins project has been also accepted to Google Season of Docs this year.\nThis open-source mentorship program brings together open source and technical writers communities for the benefit of both.\nWe are looking for technical writers who are interested to contribute to the project in September-December 2020.\nIt is a great opportunity to study Documentation-as-code tools and to learn more about contributing to open-source projects.\nYou can find Jenkins project ideas and more information here.","title":"Jenkins User Experience Hackfest Documentation Results","tags":["ux","documentation","community","outreach-programs","jenkins-is-the-way"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}},"publicURL":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/markewaite.jpg"},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"},{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg","srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/6105b/tracymiranda.jpg 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/9d80c/tracymiranda.jpg 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/f84eb/tracymiranda.jpg 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a5e1e/tracymiranda.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/a4758/tracymiranda.webp 32w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fec68/tracymiranda.webp 64w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/fe590/tracymiranda.webp 128w,\n/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/c2c8e/tracymiranda.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":116}},"publicURL":"/gatsby-jenkins-io/static/36f2862463dddd3649a3901f5cb4f6ed/tracymiranda.jpg"},"blog":"https://tracymiranda.com/","github":"tracymiranda","html":"<div class=\"paragraph\">\n<p>Tracy is the Director of Open Source Community at CloudBees, long time open source contributor and evangelist.</p>\n</div>","id":"tracymiranda","irc":"tracymiranda","linkedin":null,"name":"Tracy Miranda","slug":"/blog/authors/tracymiranda","twitter":"tracymiranda"}]}},{"node":{"date":"2020-05-12T00:00:00.000Z","id":"96c5da12-e5e0-51af-86a5-d619e4901dae","slug":"/blog/2020/05/12/uiux-hackfest-announcement/","strippedHtml":"This event is over, thanks a lot to all contributors!\nPlease the event page for results.\n\nOn behalf of the Jenkins User Experience, Documentation and Advocacy and Outreach special interest groups,\nwe are happy to announce the online UI/UX hackfest on May 25-29!\nEveryone is welcome to participate, regardless of their Jenkins development experience.\n\nThe goal is to get together and work on improving Jenkins user experience,\nincluding but not limited to user interface and user documentation.\nWe also invite you to share experiences about Jenkins and to participate in UX testing.\nThe event follows the Jenkins is the Way theme and the\nmost active contributors will get special edition swag and prizes!\n\nEvent plan\n\nThis hackfest is NOT a hackathon.\nWe do not expect participants to dedicate all their time during the event timeframe, but hop-in/hop-out as their time allows.\nEverybody can spend as much time as they are willing to dedicate.\nSpending a few days or just a few hours is fine, any contributions matter regardless of their size.\nJenkins development experience is not required,\nwe have newcomer-friendly stories for those who want to start contributing to the project.\nWe will also have a 24/7 jenkinsci/hackfest Gitter chat for Q&A and coordination between contributors.\n\nThere will be 3 main tracks :\n\nUser Interface -\nImprove look&feel and accessibility for Jenkins users,\nwork on new read-only interface for instances managed with configuration as code,\ncreate and update Jenkins themes,\nand many other topics.\nThis track is coordinated by the UX SIG.\n\nUser Documentation -\nImprove and create new user documentation, tutorials and solution pages.\nAlso, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\nThis track is coordinated by the Documentation SIG.\n\nSpread the word -\nWrite user stories for Jenkins Is The Way site and the Jenkins blog,\npost about your Jenkins user experience and new features,\nrecord overview and HOWTO videos, etc.\nThis track is coordinated by the Advocacy and Outreach SIG.\n\nWe are working on publishing project ideas and issues for the listed tracks.\nThe current list can be found on the UI / UX hackfest event page,\nthis list will be finalized by the beginning of the hackfest.\nYou are welcome to propose your own projects within the User Experience theme.\n\nDuring the event, we will organize online meetups and ad-hoc training sessions in different timezones.\nAll these sessions will be recorded and shared on our YouTube channel.\nThere are no mandatory sessions you must attend, you are welcome to join ones remotely or watch the recordings.\nAfter the event we will invite participants to demo their projects at online meetings or recorded sessions.\n\nRegistration\n\nThis event is over, thanks a lot to all contributors!\n\nP.S: Note that the registration form has a question top 3 things we could change in Jenkins to improve your user experience.\nWe would appreciate your response there!\n\nContacts\n\nPlease use the following contacts to contact organizers:\n\nGitter chat\n\nMailing list\n\nResources\n\nEvent Page\n\nRegistration form.\n\nProject ideas (work-in-progress).\nThe full list will be published by the beginning of the event.\n\nFrequently Asked Questions\n\nContributing to Jenkins\n\nCode of Conduct\n\nSwag and Prizes\n\nThanks to our sponsors ( CloudBees, Inc. and Continuous Delivery Foundation),\nwe are happy to offer swag to active contributors!\n\n50 most-active contributors will get an exclusive \"Jenkins Is The Way\" T-shirt and stickers\n\nActive contributors will get Jenkins stickers and socks\n\nWe are working on special prizes for top contributors, to be announced later\n\nAcknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\nCloudBees, Inc. and\nContinuous Delivery Foundation (CDF).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our online meetup platform which we will be using for the event.\n\n.","title":"Join us for online UI/UX hackfest on May 25-29!","tags":["announcement","event","ui","ux","documentation","outreach-programs","advocacy-and-outreach","jenkins-is-the-way","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/oleg_nenashev.png"},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-03-17T00:00:00.000Z","id":"d79e4a42-13d6-5155-8cc3-c8c31c9738ff","slug":"/blog/2020/03/17/ui-plugins/","strippedHtml":"This article has been presented in an recorded online session\nduring the Jenkins 2020 UI/UX Hackfest.\n\nFor Jenkins a large number of plugins are available that visualize the results of a wide variety of build steps. There\nare plugins available to render the test results, the code coverage, the static analysis and so on. All of these plugins\ntypically pick up the build results of a given build step and show them in the user interface. In order to render these\ndetails most of the plugins use static HTML pages, since this type of user interface is the standard visualization in\nJenkins since its inception in 2007.\n\nIn order to improve the look and feel and the user experience of these plugins it makes sense to move forward and\nincorporate some modern Java Script libraries and components. Since development of Blue Ocean has been stopped (see\nJenkins mailing list post)\nplugin authors need to decide on their own, which UI technologies are helpful for that task. However, the universe of\nmodern UI components is so overwhelming that it makes sense to pick up only a small set of components that are proven\nto be useful and compatible with Jenkins underlying web technologies. Moreover, the initial setup of\nincorporating such a new component is quite large so it would be helpful if that work needs to be done only once.\n\nThis guide introduces a few UI components\nthat make sense to be used by all plugin authors in the future to provide a rich user interface for reports in Jenkins.\nIn order to simplify the usage of these libraries in the context of Jenkins as a Java based web application, these\nJava Script libraries and components have been packaged as ordinary Jenkins plugins.\n\nIn the following sections, these new components will be introduced step by step. In order to see how these components\ncan be used a plugin, I demonstrate the new features while enhancing the existing\nForensics Plugin with a new user\ninterface. Since the Warnings Next Generation Plugin also uses these new components, you can see additional examples\nin the documentation of the warnings plugin\nor in our public ci.jenkins.io instance, that\nalready is using these components in the detail views of the warnings plugin.\n\n1. New user interface plugins\n\nThe following UI components are provided as new Jenkins plugins:\n\njquery3-api-plugin :\nProvides jQuery 3 for Jenkins Plugins.\njQuery is — as described on their home page — a fast, small, and feature-rich JavaScript library. It makes things\nlike HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API\nthat works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the\nway that millions of people write JavaScript.\n\nbootstrap4-api-plugin :\nProvides Bootstrap 4 for Jenkins Plugins. Bootstrap is — according to their self-perception — the world’s most popular front-end component library to build responsive, mobile-first projects on the web. It is\nan open source toolkit for developing with HTML, CSS, and JS. Developers can quickly prototype their ideas or\nbuild entire apps with their Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful plugins\nbuilt on jQuery.\n\ndata-tables-api-plugin :\nProvides DataTables for Jenkins Plugins.\nDataTables is a plug-in for the jQuery Javascript library. It is a highly flexible tool, built upon the foundations\nof progressive enhancement, that adds all of these advanced features to any HTML table:\n\nPrevious, next and page navigation\n\nFilter results by text search\n\nSort data by multiple columns at once\n\nDOM, Javascript, Ajax and server-side processing\n\nEasily theme-able\n\nMobile friendly\n\necharts-api-plugin :\nProvides ECharts for Jenkins Plugins. ECharts is an open-sourced\nJavaScript visualization tool to create intuitive, interactive, and highly-customizable charts. It\ncan run fluently on PC and mobile devices and it is compatible with most modern\nWeb Browsers.\n\nfont-awesome-api-plugin :\nProvides Font Awesome for Jenkins Plugins. Font Awesome has vector icons and social logos,\naccording to their self-perception it is the web’s most popular icon set and toolkit. Currently, it contains more than\n1,500 free icons.\n\npopper-api-plugin\nProvides Popper.js for Jenkins Plugins. Popper can\neasily position tooltips, popovers or anything else with just a line of code.\n\nplugin-util-api-plugin : This small plugin provides\nsome helper and base classes to simplify the creation of reporters in Jenkins. This plugin also\nprovides a set of architecture rules that can be included in an architecture test suite of your plugin.\n\n2. Required changes for a plugin POM\n\nIn order to use these plugins you need to add them as dependencies in your plugin pom. You can use the following snippet\nto add them all:\n\npom.xml\n\n[...]\n\n1.0.2\n5.12.0-7\n4.4.1-10\n4.6.0-8\n1.10.20-13\n[...]\n\nio.jenkins.plugins\nplugin-util-api\n${plugin-util-api.version}\n\nio.jenkins.plugins\nfont-awesome-api\n${font-awesome-api.version}\n\nio.jenkins.plugins\nbootstrap4-api\n${bootstrap4-api.version}\n\nio.jenkins.plugins\necharts-api\n${echarts-api.version}\n\nio.jenkins.plugins\ndata-tables-api\n${data-tables-api.version}\n\n[...]\n\n[...]\n\nAlternatively, you have a look at the POM files of the\nWarnings Next Generation Plugin or the\nForensics API Plugin which already use these\nplugins.\n\n3. General structure of a reporter\n\nIn this section I will explain some fundamentals of the design of Jenkins, i.e. the Java model and the associated\nuser interface elements. If you are already familiar on how to implement the corresponding extension points of a\nreporter plugin (see section Extensibility in Jenkins'\ndeveloper guide), then you can skip this section and head directly to Section 3.1.\n\nJenkins organizes projects using the static object model structure shown in Figure 1.\n\nFigure 1. Jenkins design - high level view of the Java model\n\nThe top level items in Jenkins user interface are jobs (at least the top level items\nwe are interested in). Jenkins contains several jobs of different types (Freestyle jobs, Maven Jobs, Pipelines, etc.).\n\nEach of these jobs contains an arbitrary number of builds (or more technically, runs). Each build is identified by its\nunique build number. Jenkins plugins can attach results to these builds, e.g. build artifacts, test results,\nanalysis reports, etc. In order to attach such a result, a plugin technically needs to implement and create an action\nthat stores these results.\n\nThese Java objects are visualized in several different views, which are described in more detail in the following\nsections. The top-level view that shows all available Jobs is shown in Figure 2.\n\nFigure 2. Jenkins view showing all available jobs\n\nPlugins can also contribute UI elements in these views, but this is out of scope of this guide.\n\nEach job has a detail view, where plugins can extend corresponding extension points and provide summary boxes and\ntrend charts. Typically, summary boxes for reporters are not required on the job level, so I describe only trend charts\nin more detail, see section Section 5.5.2.\n\nFigure 3. Jenkins view showing details about a job\n\nEach build has a detail view as well. Here plugins can provide summary boxes similar to the boxes for the job details\nview. Typically, plugins show here only a short summary and provide a link to detailed results, see Figure 4 for\nan example.\n\nFigure 4. Jenkins view showing details about a build\n\nThe last element in the view hierarchy actually is a dedicated view that shows the results of a specific plugin. E.g.,\nthere are views to show the test results, the analysis results, and so on. It is totally up to a given plugin what\nelements should be shown there. In the next few sections I will introduce some new UI components that can be used\nto show the corresponding results in a pleasant way.\n\n3.1. Extending Jenkins object model\n\nSince reporters typically are composed in a similar way, I extended Jenkins' original object model\n(see Figure 1) with some additional elements, so it will be much simpler to create or implement\na new reporter plugin. This new model is shown in Figure 5. The central element is a build action that\nwill store the results of a plugin reporter. This action will be attached to each build and will hold (and persist) the\nresults for a reporter. The detail data of each action will be automatically stored in an additional file, so the\nmemory footprint of Jenkins can be kept small if the details are never requested by users. Additionally, this\naction is also used to simplify the creation of project actions and trend charts, see Section 5.5.2.\n\nFigure 5. Jenkins reporter design - high level view of the model for reporter plugins\n\n4. Git Forensics plugin\n\nThe elements in this tutorial will be all used in the new\nForensics API Plugin (actually the plugin is not new, it is a dependency of the\nWarnings Next Generation Plugin). You can download the plugin content\nand see in more detail how these new components can be used in practice. Or you can change this plugin just to see\nhow these new components can be parametrized.\n\nIf you are using Git as source code management system then this plugin will mine\nthe repository in the style of\nCode as a Crime Scene\n(Adam Tornhill, November 2013) to determine statistics of the contained source code files:\n\ntotal number of commits\n\ntotal number of different authors\n\ncreation time\n\nlast modification time\n\nThe plugin provides a new step (or post build publisher) that starts the repository mining and stores\nthe collected information in a Jenkins action (see Figure 5). Afterwards you get a new\nbuild summary that shows the total number of scanned files (as trend and as build result). From\nhere you can navigate to the details view that shows the scanned files in a table that can be\nsimply sorted and filtered. You also will get some pie charts that show important aspects of the\ncommit history.\n\nPlease note that this functionality of the plugin still is a proof of concept: the performance of this step heavily\ndepends on the size and the number of commits of your Git repository. Currently it scans the whole repository in each\nbuild. In the near future I hope to find a volunteer who is interested in replacing this dumb algorithm with an incremental scanner.\n\n5. Introducing the new  UI components\n\nAs already mentioned in Section 3, a details view is plugin specific. What is shown and how these\nelements are presented is up to the individual plugin author. So in the next sections I provide some examples\nand new concepts that plugins can use as building blocks for their own content.\n\n5.1. Modern icons\n\nJenkins plugins typically do not use icons very frequently. Most plugins provide an icon for the actions and that’s it.\nIf you intend to use icons in other places, plugin authors are left on their own: the recommended Tango icon set is more\nthan 10 years old and too limited nowadays. There are several options available, but the most popular is the\nFont Awesome Icon Set. It provides more than 1500 free icons that follow the same\ndesign guidelines:\n\nFigure 6. Font Awesome icons in Jenkins plugins\n\nIn order to use Font Awesome icons in a plugin you simply need a dependency to the corresponding\nfont-awesome-api-plugin. Then you can use any of the solid icons\nby using the new tag svg-icon in your jelly view:\n\nindex.jelly\n\n[...]\n\n[...]\n\nIf you are generating views using Java code, then you also can use the class SvgTag to generate the\nHTML markup for such an icon.\n\n5.2. Grid layout\n\nJenkins currently includes in all views an old and patched version of Boostrap’s grid system (with 24 columns). This version\nis not compatible with Boostrap 4 or any of the JS libraries that depend on Bootstrap4. In order to use Bootstrap 4\nfeatures we need to replace the Jenkins provided layout.jelly file with a patched version, that does not load\nthe broken grid system. I’m planning to create a PR that fixes the grid in Jenkins core, but that will take some time.\nUntil then you will need to use the provided layout.jelly of the Boostrap4 plugin, see below.\n\nThe first thing to decide is, which elements should be shown on a plugin page and how much space each element\nshould occupy. Typically, all visible components are mapped on the available space using a simple grid.\nIn a Jenkins view we have a fixed header and footer and a navigation bar on the left\n(20 percent of the horizontal space). The rest of a screen can be used by\na details view. In order to simplify the distribution of elements in that remaining space we use\nBootstrap’s grid system.\n\nFigure 7. Jenkins layout with a details view that contains a grid system\n\nThat means, a view is split into 12 columns and and arbitrary number of rows. This grid system is simple to use\n(but complex enough to also support fancy screen layouts) - I won’t go into\ndetails here, please refer to the Bootstrap documentation\nfor details.\n\nFor the forensics detail view we use a simple grid of two rows and two columns. Since the number of columns always is 12\nwe need to create two \"fat\" columns that fill 6 of the standard columns.\nIn order to create such a view in our\nplugin we need to create a view given as a jelly file and a corresponding Java view model object. A view with this layout\nis shown in the following snippet:\n\nindex.jelly\n\n(1)\n\n(2)\n(3)\n\n(4)\n(5)\nContent of column 1 in row 1\n\n(6)\nContent of column 2 in row 1\n\n(7)\n(8)\nContent of row 2\n\n1\nUse a custom layout based on Bootstrap: since Jenkins core contains an old version of Bootstrap,\nwe need to replace the standard layout.jelly file.\n\n2\nImport Bootstrap 4: Importing of JS and CSS components is done using the adjunct concept,\nwhich is the preferred way of referencing static resources within Jenkins' Stapler Web framework.\n\n3\nThe whole view will be placed into a fluid container that fills up the whole screen (100% width).\n\n4\nA new row of the view is specified with class row. The additional class py-3 defines the padding to use for\nthis row, see Bootstrap Spacing for more details.\n\n5\nSince Bootstrap automatically splits up a row into 12 equal sized columns we define here\nthat the first column should occupy 6 of these 12 columns. You can also leave off the detailed numbers, then Bootstrap will\nautomatically distribute the content in the available space. Just be aware that this not what you want in most of the times.\n\n6\nThe second column uses the remaining space, i.e. 6 of the 12 columns.\n\n7\nThe second row uses the same layout as row 1.\n\n8\nThere is only one column for row 1, it will fill the whole available space.\n\nYou can also specify different column layouts for one row, based on the actual visible size of the screen.\nThis helps to improve the layout for larger screens. In the warnings plugin you will find\nan example: on small devices, there is one card visible that shows one pie chart in a carousel. If you are\nopening the same page on a larger device, then two of the pie charts are shown side by side and the carousel is hidden.\n\n5.3. Cards\n\nWhen presenting information of a plugin as a block, typically plain text elements are shown. This will normally result\nin some kind of boring web pages. In order to create a more appealing interface, it makes sense to present such information\nin a card, that has a border, a header, an icon, and so on. In order to create such a\nBootstrap card a small jelly tag has been provided by the new\nBootstrap plugin that simplifies this task for a plugin.\nSuch a card can be easily created in a jelly view in the following way:\n\nContent of the card\n\nIn Figure 8 examples of such cards are shown. The cards in the upper row contain pie charts that show the\ndistribution of the number of authors and commits in the whole repository. The card at the bottom shows the detail\ninformation in a DataTable. The visualization is not limited to charts or tables, you can\nshow any kind of HTML content in there. You can show any icon of your\nplugin in these cards, but it is recommended to use one of the existing Font Awesome icons\nto get a consistent look and feel in Jenkins' plugin ecosystem.\n\nFigure 8. Bootstraps cards in Jenkins plugins\n\nNote that the size of the cards is determined by the grid configuration, see Section 5.2.\n\n5.4. Tables\n\nA common UI element to show plugin details is a table control. Most plugins (and Jenkins core) typically use\nplain HTML tables. However, if the table should show a large number of rows then using a more sophisticated control\nlike DataTables makes more sense. Using this JS based table control provides additional\nfeatures at no cost:\n\nfilter results by text search\n\nprovide pagination of the result set\n\nsort data by multiple columns at once\n\nobtain table rows using Ajax calls\n\nshow and hide columns based on the screen resolution\n\nIn order to use DataTables in a view there are two options, you can either decorate existing\nstatic HTML tables (see Section 5.4.1) or populate the table content using Ajax (see Section 5.4.2).\n\n5.4.1. Tables with static HTML content\n\nThe easiest way of using DataTables is by creating a static HTML table that will be decorated by simply calling the\nconstructor of the datatable. This approach involves no special handling on the Java and Jelly side, so I think it is\nsufficient to follow the example in the DataTables\ndocumentation. Just make sure that after building the table in your Jelly file you need to decorate the table\nwith the following piece of code:\n\n[...]\n\n[...]\n\n[...]\n\n1\nreplace id with the ID of your HTML table element\n\nIn the Forensics plugin no such static table is used so far, but you can have a look at the\ntable that shows fixed warnings\nin the warnings plugin to see how such a table can be decorated.\n\n5.4.2. Tables with dynamic model based content\n\nWhile static HTML tables are easy to implement, they have several limitations. So it makes sense to follow a more\nsophisticated approach. Typically, tables in user interfaces are defined by using a corresponding table (and row) model.\nJava Swing successfully provides such a\ntable model concept since the early days of Java.\nI adapted these concepts for Jenkins and DataTables as well. In order to create a table in a Jenkins view a plugin\nneeds to provide a table model class, that provides the following information:\n\nthe ID of the table (since there might be several tables in the view)\n\nthe model of the columns (i.e., the number, type, and header labels of the columns)\n\nthe content of the table (i.e. the individual row objects)\n\nYou will find an example of such a table in the Forensics plugin: here a table lists\nthe files in your Git repository combined with the corresponding commit statistics (number of authors,\nnumber of commits, last modification, first commit). A screenshot of that table is shown in Figure 9.\n\nFigure 9. Dynamic Table in the Forensics plugin\n\nIn order to create such a table in Jenkins, you need to create a table model class that derives from TableModel.\nIn Figure 10 a diagram of the corresponding classes in the Forensics plugin is shown.\n\nFigure 10. Table model of the Forensics plugin\n\nTable column model\n\nThis first thing a table model class defines is a model of the available columns by creating corresponding\nTableColumn instances. For each column you need to specify a header label and the name of the bean property that\nshould be shown in the corresponding column (the row elements are actually Java beans: each column will\nshow one distinct property of such a bean, see next section). You can\nuse any of the supported column types by simply providing a\nString or Integer based column.\n\nTable rows content\n\nAdditionally, a table model class provides the content of the rows. This getRows() method\nwill be invoked asynchronously using an Ajax call. Typically, this method simply returns a list of Java Bean instances,\nthat provide the properties of each column (see previous section). These objects will be converted automatically\nto an array of JSON objects, the basic data structure required for the DataTables API.\nYou will find a fully working example table model\nimplementation in the Git repository of the forensics plugin in the class\nForensicsTableModel.\n\nIn order to use such a table in your plugin view you need to create the table in the associated\nJelly file using the new table tag:\n\nindex.jelly\n\n[...]\n\n(1)\n[...]\n\n1\nreplace id with the id of your table\n\nThe only parameter you need to provide for the table is the model — it is typically part of the corresponding\nJenkins view model class (this object is referenced with ${it} in the view).\nIn order to connect the corresponding Jenkins view model class with the table, the view model class needs to\nimplement the AsyncTableContentProvider interface. Or even simpler, let your view model class derive from\nDefaultAsyncTableContentProvider. This relationship is required, so that Jenkins can automatically create\nand bind a proxy for the Ajax calls that will automatically fill the table content after the HTML page has been created.\n\nIf we put all those pieces together, we are required to define a model similar to the model of the Forensics plugin,\nthat is shown in Figure 11.\n\nFigure 11. Jenkins reporter design - high level view of the model for reporter plugins\n\nAs already described in Figure 5 the plugin needs to attach a BuildAction to each build. The\nForensics plugin attaches a ForensicBuildAction to the build. This action stores a RepositoryStatistics instance,\nthat contains the repository results for a given build. This action delegates all Stapler requests to a new\nstaplerdoc:org.kohsuke.stapler.StaplerProxy[Stapler proxy instance] so we can keep the\naction clean of user interface code. This ForensicsViewModel class then acts as view model that provides the server\nside model for the corresponding Jelly view given by the file index.jelly.\n\nWhile this approach looks quite complex at a first view, you will see that the actual implementation part\nis quite small. Most of the boilerplate code is already provided by the base classes and you need to implement\nonly a few methods. Using this concept also provides some additional features, that are part of the DataTables plugin:\n\nOrdering of columns is persisted automatically in the browser local storage.\n\nPaging size is persisted automatically in the browser local storage.\n\nThe Ajax calls are actually invoked only if a table will become visible. So if you have\nseveral tables hidden in tabs then the content will be loaded on demand only, reducing the amount of data\nto be transferred.\n\nThere is an option available to provide an additional details row that can be expanded with a + symbol,\nsee warnings plugin table for details.\n\n5.5. Charts\n\nA plugin reporter typically also reports some kind of trend from build to build. Up to now Jenkins core provides only a\nquite limited concept of rendering such trends as trend charts. The\nJFreeChart framework offered by Jenkins core is a server\nside rendering engine that creates charts as static PNG images that will be included on the job and details pages.\nNowadays, several powerful JS based charting libraries are available, that do the same job\n(well actually an even better job) on the client side. That has the advantage that these charts can be customized\non each client without affecting the server performance. Moreover, you get a lot of additional\nfeatures (like zooming, animation, etc.) for free. Additionally, these charting libraries not only support the typical\nbuild trend charts but also a lot of additional charts types that can be used to improve the user experience of\na plugin.\nOne of those charting libraries is ECharts : this library has a powerful API\nand supports literally every chart type one can image of. You can get some impressions of the features on the\nexamples page of the library.\n\nIn order to use these charts one can embed charts that use this library by importing the corresponding JS files and by\ndefining the chart in the corresponding Jelly file. While that already works quite well it\nwill be still somewhat cumbersome to provide the corresponding model for these charts from Jenkins build results. So\nI added a powerful Java API that helps to create the model for these charts on the Java side. This API provides the\nfollowing features:\n\nCreate trend charts based on a collection of build results.\n\nSeparate the chart type from the aggregation in order to simplify unit testing of the chart model.\n\nToggle the type of the X-Axis between build number or build date (with automatic aggregation of results that\nhave been recorded at the same day).\n\nAutomatic conversion of the Java model to the required JSON model for the JS side.\n\nSupport for pie and line charts (more to come soon).\n\nThose charts can be used as trend chart in the project page (see Figure 3) or as information chart in the details\nview of a plugin (see Section 5).\n\n5.5.1. Pie charts\n\nA simple but still informative chart is a pie chart that illustrates numerical proportions of plugin data. In the Forensics\nplugin I am using this chart to show the numerical proportions of the number of authors or commits for the\nsource code files in the Git repository (see Figure 8). In the warnings plugin I use this chart to show the\nnumerical proportions of the new, outstanding, or fixed warnings, see Figure 12.\n\nFigure 12. Pie chart in the Warnings plugin\n\nIn order to include such a chart in your details view, you can use the provided pie-chart tag.\nIn the following snippet you see this tag in action (embedded in a Bootstrap card, see Section 5.3):\n\nindex.jelly\n\n[...]\n<c:pie-chart id=\"authors\" model=\"${it.authorsModel}\" height=\"256\" />\n\n[...]\n\nYou need to provide a unique ID for this chart and the corresponding model value. The model must be the JSON\nrepresentation of a corresponding PieChartModel instance. Such a model can be created with a couple of lines:\n\nViewModel.java\n\n[...]\n    PieChartModel model = new PieChartModel(\"Title\");\n\n    model.add(new PieData(\"Segment 1 name\", 10), Palette.RED);\n    model.add(new PieData(\"Segment 2 name\", 15), Palette.GREEN);\n    model.add(new PieData(\"Segment 3 name\", 20), Palette.YELLOW);\n\n    String json = new JacksonFacade().toJson(model);\n    [...]\n\n5.5.2. Trend charts on the job level view\n\nIn order to show a trend that renders a line chart on the job page (see Figure 3) you need to provide a so called\nfloating box (stored in the file floatingBox.jelly of your job action (see Section 3)).\nThe content of this file is quite simple and contains just a trend-chart tag:\n\nfloatingBox.jelly\n\n<c:trend-chart it=\"${from}\" title=\"${%SCM Files Count Trend}\" enableLinks=\"true\"/>\n\nOn the Java side the model for the chart needs to be provided in the corresponding sub class of JobAction (which is\nthe owner of the floating box). Since the computation of trend charts is quite expensive on the server side as well\n(several builds need to be read from disk and the interesting data points need to be computed) this process has been\nput into a separate background job. Once the computation is done the result is shown via an Ajax call. In order to\nhide these details for plugin authors you should simply derive your JobAction class from the corresponding\nAsyncTrendJobAction class, that already contains the boilerplate code. So your static plugin object model will actually\nbecome a little bit more complex:\n\nFigure 13. Jenkins chart model design\n\nBasically, you need to implement the method LinesChartModel createChartModel() to create the line\nchart. This method is quite simple to implement, since most of the hard work is provided by the library: you will\ninvoke with an iterator of your build actions, starting with the latest build. The iterator advances from build to build\nuntil no more results are available (or the maximum number of builds to consider has been reached). The most important\nthing to implement in your plugin is the way how data points are computed for a given BuildAction. Here is an example of\nsuch a SeriesBuilder implementation in the Forensics Plugin:\n\nFilesCountSeriesBuilder.java\n\npackage io.jenkins.plugins.forensics.miner;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport edu.hm.hafner.echarts.SeriesBuilder;\n\n/**\n * Builds one x-axis point for the series of a line chart showing the number of files in the repository.\n *\n * @author Ullrich Hafner\n */\npublic class FilesCountSeriesBuilder extends SeriesBuilder {\n    static final String TOTALS_KEY = \"total\";\n\n    @Override\n    protected Map computeSeries(final ForensicsBuildAction current) {\n        Map series = new HashMap<>();\n        series.put(TOTALS_KEY, current.getNumberOfFiles());\n        return series;\n    }\n}\n\nYou are not limited to a single line chart. You can show several lines in a single chart, you can show stacked values,\nor even the delta between some values. You can also have a look at the\ncharts of the warnings plugin\nto see some of these features in detail.\n\nFigure 14. Trend chart with several lines in the Warnings plugin\n\nFigure 15. Trend chart with stacked lines in the Warnings plugin","title":"Hands On: Beautify the user interface of Jenkins reporter plugins","tags":["ui","ux","plugins","developer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg","srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/77b35/uhafner.jpg 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/d4a57/uhafner.jpg 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/19e71/uhafner.jpg 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/68974/uhafner.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/ef6ff/uhafner.webp 32w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/8257c/uhafner.webp 64w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/6766a/uhafner.webp 128w,\n/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/22bfc/uhafner.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/0fb8b41130558af9f99633c80520b3dc/uhafner.jpg"},"blog":null,"github":"uhafner","html":"<div class=\"paragraph\">\n<p>Ullrich Hafner is an active contributor in the Jenkins project since 2007, mostly in the acceptance test harness and\nthe static code analysis suite (which is now replaced by the Warnings Next Generation Plugin).</p>\n</div>\n<div class=\"paragraph\">\n<p>He is a professor for Software Engineering at the University of Applied Sciences Munich. In his role as professor\nhe tries to win new Jenkins contributors by letting students develop new features and test cases in their student\nprojects and theses.</p>\n</div>","id":"uhafner","irc":null,"linkedin":null,"name":"Ullrich Hafner","slug":"/blog/authors/uhafner","twitter":null}]}},{"node":{"date":"2018-06-27T00:00:00.000Z","id":"c68773a2-1f81-56bc-af65-71e0703df409","slug":"/blog/2018/06/27/new-login-page/","strippedHtml":"This blog post gives an introduction to the new design for the login and signup forms and Jenkins is (re)starting pages introduced in Jenkins 2.128.\nThe first part of the blog post is an introduction to the new design and UX for Jenkins users.\nThe later part is talking about extensibility in a more technical manner, aimed at plugin developers.\n\nOverview\n\nThe recent changes to some core pages provide new design and UX and further dropping all external dependencies to prevent\nany possible malicious javascript introduced by third party libraries.\nTo be clear, this never was an issue with previous releases of Jenkins, but having read this article, this author believes that the article has good points and leading by example may raise awareness of data protection.\n\nThis meant to drop the usage of the jelly layout lib (aka xmlns:l=\"/lib/layout\") and as well the page decorators it\nsupported. However there is a new SimplePageDecorator extension point (discussed below) which can be used to modify the look and feel for the login and sign up page.\n\nThe following pages have given a new design:\n\nJenkins is (re)starting pages\n\nLogin\n\nSign up\n\nUX enhancement\n\nForm validation has changed to give inline feedback about data validation errors in the same form.\n\nLogin\n\nSign up\n\nThe above image shows that the validation is now done on all input fields instead of before breaking on the\nfirst error found, which should lead to fewer retry cycles.\n\nInstead of forcing the user to repeat the password, the new UX introduces the possibility to display the password in\nclear text. Further a basic password strength meter indicates password strength to the user while she enters the password.\n\nCustomizing the UI\n\nThe re-/starting screens do not support the concept of decorators very well, hence the decision to not support them for these pages.\n\nThe SimplePageDecorator is the key component for customization and uses three different files to\nallow overriding the look and feel of the login and signup pages.\n\nsimple-head.jelly\n\nsimple-header.jelly\n\nsimple-footer.jelly\n\nAll of the above SimplePageDecorator Jelly files are supported in the login page. The following snippet is a minimal excerpt\nof the login page, showing how it makes use of SimplePageDecorator.\n\nThe sign-up page only supports the simple-head.jelly:\n\nSimplePageDecorator - custom implementations\n\nHave a look at Login Theme Plugin, which allows you to\nconfigure your own custom content to be injected into the new login/sign-up page.\n\nTo allow easy customisation the decorator only implements one instance by the principal \"first-come-first-serve\".\nIf jenkins finds an extension of the SimplePageDecorator it will use the Jelly files provided by that plugin.\nOtherwise Jenkins will fall back to the default implementation.\n\n@Extension\npublic class MySimplePageDecorator extends SimplePageDecorator {\n   public String getProductName() {\n     return \"MyJenkins\";\n   }\n}\n\nThe above will take override over the default because the default implementation has a very low ordinal ( @Extension(ordinal=-9999))\nIf you have competing plugins implementing SimplePageDecorator, the implementation with the highest ordinal will be used.\n\nAs a simple example, to customize the logo we display in the login page, create a simple-head.jelly with the following content:\n\nTo customize the login page further, create a simple-header.jelly like this:\n\nWelcome to ${it.productName}!\n\nFor example, I used this technique to create a prototype of a login page for a CloudBees product I am working on:\n\nConclusion\n\nWe hope you like the recent changes to some core pages and as well the new design and UX. We further hope you feel enabled to\ncustomize the look and feel to adopt your needs with the SimplePageDecorator.","title":"New design, UX and extensibility digest for login page et. al.","tags":["core","developer","ux"],"authors":[{"avatar":null,"blog":null,"github":"scherler","html":"<div class=\"paragraph\">\n<p>Thorsten Scherler has a broad background in open source consulting, training and solutions since 2002.\nHe&#8217;s an engineer at CloudBees, working full time on the <a href=\"https://jenkins.io/projects/blueocean/\">Blue Ocean</a> front end.\nHe left Germany in 2003 after finishing his university degrees and has been living in sunny Seville ever since.</p>\n</div>","id":"scherler","irc":null,"linkedin":null,"name":"Thorsten Scherler","slug":"/blog/authors/scherler","twitter":"thorScherler"}]}},{"node":{"date":"2017-04-12T00:00:00.000Z","id":"de6a7833-33e4-5a1b-8942-62eba9d0e88e","slug":"/blog/2017/04/12/welcome-to-blue-ocean-dashboard/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI used the Blue Ocean Activity View to track the state of branches and\nPull Requests in one project.\nIn this video, I’ll use the Blue Ocean Dashboard get a personalized view of the\nareas that of my project that are most important to me,\nand also to monitor multiple projects.\nPlease Enjoy!","title":"Getting Started with the Blue Ocean Dashboard","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-11T00:00:00.000Z","id":"9d6e30d7-7295-5fb0-b863-4e1db0a6fa14","slug":"/blog/2017/04/11/welcome-to-blue-ocean-pipeline-activity/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI showed how easy it is to create and edit Declarative Pipelines using the Blue Ocean Visual Pipeline Editor.\nIn this video, I’ll use the Blue Ocean Activity View to track the\nstate of branches and Pull Requests in one project.\nBlue Ocean makes it so much easier to find the logs I need to triage failures.\n\nPlease Enjoy!  In my\nnext video,\nI’ll switch from looking at a single project to monitoring multiple projects with\nthe Blue Ocean Dashboard.","title":"Getting Started with Blue Ocean's Activity View","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-06T00:00:00.000Z","id":"f6b5f809-47da-5d3d-b7ca-7f843a8917d9","slug":"/blog/2017/04/06/welcome-to-blue-ocean-editor/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI explained how to install Blue Ocean on your local Jenkins instance and switch to using Blue Ocean.\nAs promised, here’s a screencast that picks up where that post left off.\nStarting from a clean Jenkins install, the video below will guide you through\ncreating and running your first Pipeline in Blue Ocean with the Visual Pipeline Editor.\n\nPlease Enjoy! In my next video, I’ll go over the\nBlue Ocean Pipeline Activity View.","title":"Getting Started with Blue Ocean's Visual Pipeline Editor","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#382818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg","srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/77b35/lnewman.jpg 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/d4a57/lnewman.jpg 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/19e71/lnewman.jpg 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/68974/lnewman.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/ef6ff/lnewman.webp 32w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/8257c/lnewman.webp 64w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/6766a/lnewman.webp 128w,\n/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/22bfc/lnewman.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}},"publicURL":"/gatsby-jenkins-io/static/9717c5c33fe8f4903eec2f2b5a8d1532/lnewman.jpeg"},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/authors/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-05T00:00:00.000Z","id":"a861a6c5-914d-5da6-9d4b-4b250827f304","slug":"/blog/2017/04/05/say-hello-blueocean-1-0/","strippedHtml":"Back in May 2016 we announced our intent\nto rethink the Jenkins User experience with the Blue Ocean project and today\nthe Jenkins project are pleased to announce the general\navailability of Blue Ocean 1.0.\n\nBlue Ocean is an entirely new, modern and fun way for developers to use Jenkins\nthat has been built from the ground up to help teams of any size approach\nContinuous Delivery. Easily installed as a plugin for Jenkins and integrated\nwith Jenkins Pipeline, it is available from today for production use.\n\nSince the start of the beta at Jenkins World 2016 in September there are now\nover 7400+ installations making use of Blue Ocean. This wouldn’t be possible\nwithout the support of the entire Jenkins developer and\nuser community - so thank you for your support!\n\nBlue Ocean is available today from the update center and also as a\nDocker image - why not give it a try?\n\nVisual Pipeline Editing - Team members of any skill level can create continuous\ndelivery pipelines from start to finish, with just several clicks, using the\nintuitive, visual pipeline editor. Any pipeline created with the visual editor\ncan also be edited in your favorite text editor\nbringing all the benefits of Pipeline as Code.\n\nPipeline Visualization - Developers can visually represent pipelines in a way\nthat anyone on the team can understand - even your boss’s boss - improving\nclarity into the continuous delivery process for the whole organization.\nThe visualization helps you focus on what the pipeline does, not how it does it.\n\nPinpoint Troubleshooting - Blue Ocean enables developers to locate automation\nproblems instantly, without endlessly scanning through logs or navigating\nthrough many screens, so you can get back to building the next big thing.\n\nGitHub and Git Integration - Pipelines are created for all feature branches\nand pull requests, with their status reported back to GitHub.\nThe whole team has visibility into whether changes need work or are good to go.\n\nPersonalization – Every team member can make Jenkins their own by customizing\nthe dashboard so that they only see those pipelines that matter to them.\nFavoriting any pipeline or branch in Blue Ocean will show a favourite card on\nthe dashboard so you can see its status at a glance.\n\nJust one more thing – I’d like to pay special thanks to:\n\nThe Core team – to Keith Zantow, Thorsten Scherler, Tom Fennelly,\nIvan Meredith, Josh McDonald, Vivek Pandey, Brody Maclean and Cliff Meyers.\nEach of and everyone of you have brought your own passion, expertise and flair\nto the project – and it shows. It’s been crazy fun and I hope working on\nBlue Ocean is something you look back on fondly.\n\nJenkins Developers past and present – we recognise that we are standing on\nthe shoulders of giants and none of this wouldn’t be possible without your\nhard work and dedication to free & open source software and Jenkins.\nHere’s to the next 10 years 🍻 !\n\nCloudBees – in particular, Sacha Labourey (CEO), Harpreet Singh\n(VP of Product) and Spike Washburn (VP of Engineering) whose dedication to\nJenkins, Open Source and continued faith in the vision and team made all of\nthis possible, and of course Bob Bickel (Advisor) who dared us to dream big.\n\nMichael Neale – who drank all the kool-aide and is just as obsessed with\nand dedicated to Blue Ocean as I am. This project would never have shipped\nwithout his hand steady at the tiller. I couldn’t ask for a better friend\nand partner-in-crime.\n\nTyler Croy – for guiding the project and myself on how to do open source\nThe Right Way™. Tyler works tirelessly behind the scenes to to make Jenkins\nawesome and it wouldn’t be possible to keep this show running without\nhis help and sage-like advice.\n\nKohsuke Kawaguchi – For creating Jenkins, getting Blue Ocean off of\nthe ground, his tour of Tokyo and above all, his trust.\n\nJenkins Users – your enthusiasm for better development tools which\nkept our spirits and momentum up when the days grew long and things\nlooked tough. We couldn’t ask for a better, more appreciative or\npassionate group of people. Hopefully we’ve done our job and you can get\nback to building your next big thing!\n\nNext stop, some well needed rest & recovery then back to to making\nJenkins one of the experiences for software developers worldwide!\n\nIf you’re interested in joining us to make Blue Ocean a great user experience\nfor Jenkins, please join the Blue Ocean development\nteam on Gitter!","title":"Say hello to Blue Ocean 1.0","tags":["blueocean","ux","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/authors/i386","twitter":"i386"}]}}]}},"pageContext":{"tag":"ux","limit":8,"skip":0,"numPages":2,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}