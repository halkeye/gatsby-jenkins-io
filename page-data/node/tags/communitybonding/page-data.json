{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/communitybonding",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-07-27T00:00:00.000Z","id":"0b676e9e-8bca-5401-ad70-50c30452b445","slug":"/blog/2020/07/27/machine-learning-plugin-coding-phase2/","strippedHtml":"Welcome back folks!\n\nThis blog post is about my coding phase 2 in Jenkins Machine Learning Plugin for this GSoC 2020.\nAfter successfully passing the evaluation and demo in the phase 1, our team went ahead for facing the challenges in phase 2.\n\nSummary\n\nThis phase of coding was well spent by documentation and by fixing many bugs.\nAs the main feature of connecting to an IPython Kernel is done in phase 1, we were able to focus on fixing minor/major bugs and documenting for the users.\nAccording to the JENKINS-62927 issue, a Docker agent was built to facilitate users without concerning plugin dependencies in python.\nIn the act of deprecation of Python 2, we ported our plugin to support Python 3.\nWe have tested our plugin in Conda, venv and Windows environments.\nMachine learning plugin has successfully passed the end to end test. A feature for a code editor is needed for further discussion/analysis as we have done a simple editor that may be useful in other ways in the future. PR#35\n\nMain features of Machine Learning plugin\n\nRun Jupyter notebook, (Zeppelin) JSON and Python files\n\nRun Python code directly\n\nConvert Jupyter Notebooks to Python and JSON\n\nConfigure IPython kernel properties\n\nSupport to execute Notebooks/Python on Agent\n\nSupport for Windows and Linux\n\nUpcoming features\n\nExtract graph/map/images from the code\n\nSave artifacts according to the step name\n\nGenerate reports for corresponding build\n\nFuture improvements\n\nUsage of JupyterRestClient\n\nSupport for multiple language kernels\n\nNote : There is no commitment on future improvements during GSoC period\n\nDocker agent\n\nThe following Dockerfile can be used to build the Docker container as an agent for the Machine Learning plugin. This docker agent can be used to run  notebooks or python scripts.\n\nDockerfile\n\nFROM jenkins/agent:latest\n\nMAINTAINER Loghi\n\nUSER root\n\nRUN apt update && apt install --no-install-recommends python3 -y \\\n    python3-pip \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.txt /requirements.txt\n\nRUN pip3 install --upgrade pip setuptools && \\\n    pip3 install --no-cache-dir -r /requirements.txt && \\\n    ln -sf /usr/bin/python3 /usr/bin/python && \\\n    ln -sf /usr/bin/pip3 /usr/bin/pip\n\nUSER jenkins\n\nPorted to Python 3\n\nAs discussed in the previous meeting, we concluded that the plugin should support Python 3 as Python 2.7+ has been deprecated since the beginning of 2020. Pull request for docker agent should be also ported to Python 3 support.\n\nJupyter Rest Client API\n\nThe Jupyter Notebook server API seemed to be promising that it can be also used to run notebooks and codes. There were 3 api implementations that were merged in the master. But we had to focus on what was proposed in the design document and had to finish all must-have issues/works. Jupyter REST client was left for future implementation. It is also a good start to contribute to the plugin from the community.\n\nFixed bugs for running in agent\n\nThere were a few bugs related to the file path of notebooks while building a job. The major problem was caused by the python dependencies needed to connect to a IPython kernel. All issues/bugs were fixed before the timeline given.\n\nR support as a future improvement\n\nThis is what we tried to give a glimpse of knowledge that this plugin can be extended for multi language support in the future. There was a conclusion that the kernel should be selected dynamically using extension of the script file(like eval_model.rb or train_model.r), instead of scripting the same code for each kernel.\n\nDocumentation and End to End testing\n\nA well explained documentation was published in the repository. A guided tutorial to run a notebook checked out from a git repo in an agent was included in the docs page. Mentors helped to test our plugin in both Linux and Windows.\n\nCode editor with rebuild feature\n\nCode editor was filtered as a nice to have feature in the design document. After grabbing the idea of Jenkinsfile replay editor, I could do the same for the code. At the same time, when we are getting the source code from git, it is not an elegant way of editing code in the original code. After the discussion, we had to leave the PR open that may have use cases in the future if needed.\n\nJenkins LTS update\n\nThe plugin has been updated to support Jenkins LTS 2.204.1 as 2.164.3 had some problems with installing pipeline supported API/plugin\n\nInstallation for experimental version\n\nEnable the experimental update center\n\nSearch for Machine Learning Plugin and check the box along it.\n\nClick on Install without restart\n\nThe plugin should now be installed on your system.\n\nResources\n\nCommunity Bonding blog post\n\nPhase 1 blog post\n\nGithub\n\nProject page\n\nDesign document","title":"Machine Learning Plugin project - Coding Phase 2 blog post","tags":["machinelearning","datascience","plugins","communitybonding","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"blog/author/loghijiaha","twitter":"loghi5"}]}},{"node":{"date":"2020-06-30T00:00:00.000Z","id":"9a5f343b-e83f-526e-aab4-05c8c88ea996","slug":"/blog/2020/06/30/machine-learning-plugin-coding-phase1/","strippedHtml":"Welcome back !\n\nThis blog post is briefing my coding phase 1 in Jenkins Machine Learning Plugin for this GSoC 2020.\n\nAfter a fresh introduction of community bonding, On June 1st, coding of GSoC had started officially with phase 1. At this point, every GSoC student should be expected to have a rigid plan with their entire project. With the guidance of mentors I was able to complete a design document and timeline which can be slightly adjustable during the coding. The coding phase was more about coding and discussion.\n\nQuick review\n\nPull Requests\n21\n\nJira Issues\n11\n\nMajor Tasks\n3\n\nCompleted\n3\n\nIn progress\n0\n\nWeek 1\n\nI have to ensure that I have a solid architecture for implementing the core of this plugin such that perhaps I or future community will be able to develop R and Julia kernels for this plugin. Factory method design patterns are suitable when users need different types of products ( Python, R and Julia) without knowing much about the internal infrastructure ( Manager of these interpreters ).\n\nAll the base classes were implemented this week.\n\nDesign the Kernel connectors\n\nInitiate the interpreter\n\nClose the connection\n\nAdd simple tests\n\nUpdate pom.xml\n\nMore than these changes, repo was updated with pull request template and licence header. Readme was extended a little at the end of the week.\n\nIssues and Challenges\n\nGit rebase and squash\n\nTests invokes ipython client in the server failed during the CI build\n\nWeek 2\n\nWith the help of a design document, I had a plan to do the configurations globally and using the Abstract Folder property I could save the configuration and retrieve for the job configuartion. I used to reference some other well developed plugin for the structure of code. That helped me a lot while I was coding. Our first official contributor has popped out his pull request.\n\nForm validations and helper html will be a great help in the user point of view as well as developers. A minor bug was fixed with the guidance of mentors by writing tests with ‘Jenkins WebClient`. Until the end of the week, builder class of the plugin has been implemented with lots of research and discussion. Finally,  Test connection was added to the global configuration page to start the connection and test it. A single issue that blocked me using py4j authentication about zeppelin-python was reported in Jira.\n\nServer Configuration\n\nIssues and challenges\n\nBackend depends on Apache zeppelin-python API to connect IPython\n\nFind relevant extension points to extend the plugin\n\nWeek 3\n\nEarlier in this week, we were trying to merge our IPython builder PR without any memory leaks or bugs that will cause the system to be devastating while running this plugin. Later, this whole week I was implementing a file parser that could copy the necessary files and had the ability to accomplish the file conversion.\n\nSupported file types\n\nPython (.py)\n\nJSON (Zeppelin notebooks format)\n\nIPython builder was able to run Jupyter Notebooks and Zeppelin formatted JSON files at the end of the 3rd week. Minor issues were fixed in the code. We used ANSI color plugin to fix the abnormal view of error messages produced by the ipython kernel.\n\nCopying and converting Jupyter Notebook\n\nIssues and Challenges\n\nPython error messages could not be displayed in rich format\nIf a job is running at user level, but if the python code access file/file path which is not authorized to the user, it returns a permission denied message.\nWhile running on agent, notebook has to be written/copied to agent workspace\nArtifacts should be maintained/reachable from controller after build.\n\nWeek 4\n\nAs all the major tasks has done, the demo preparation and plan for a experimental release was carried during the last week. There were lots of research on how to connect to a existing kernel in remote. Demo and presentation were prepared along the week.\n\nIssues and Challenges\n\nReleasing the first version was bit late\n\nKnowledge transfer\n\nHow to debug the code through IntelliJ\n\nEdit configuration → Add new Configuration → Maven\n\nCommand line → type hpi:run\n\nClick the debug icon on the toolbar or go to Run menu then Debug\n\nHow to setup to test the plugin\n\nSetup JDK 8 and Maven 3.5.*\n\nCreate a directory $ mkdir machine-learning-plugin\n\nCreate a virtual environment $ virtualenv venv\n\nActivate your virtual environment $ source venv/bin/activate\n\nRun $ which python to ensure your python path\n\n$ git clone https://github.com/jenkinsci/machine-learning-plugin.git\n\nRun $ mvn clean install from the machine-learning-plugin directory\n\nRun $ mvn hpi:run to start Jenkins with the plugin\n\nSet up the builder with localhost and other parameters\n\nCreate a job\n\nWrite python code like print(“plugin works”)\n\nBuild the job\n\nIssues and bugs\n\nJENKINS-62528 Issues on Jenkins build in the plugin repository\n\nJENKINS-62621 Global configuration for IPython servers\n\nJENKINS-62649 Implementation of IPython Builder\n\nJENKINS-62711 File parser to copy source files to workspace\n\nJENKINS-62733 Python errors are not displayed properly in console log\n\nJENKINS-62735 Send/Receive necessary files from controller/agent to agent/controller\n\nJENKINS-62593 Improve the documentation\n\nJENKINS-62742 Increase Test coverage\n\nResources and Links\n\nGithub\n\nProject page\n\nDesign document","title":"Machine Learning Plugin project - coding phase 1 blog post","tags":["machinelearning","datascience","plugins","communitybonding","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"blog/author/loghijiaha","twitter":"loghi5"}]}},{"node":{"date":"2020-06-03T00:00:00.000Z","id":"d34ea0a7-91c1-5a7d-b78e-94d7cfb9e85b","slug":"/blog/2020/06/03/machine-learning-plugin-community-bonding/","strippedHtml":"Hello everyone !\n\nThis is one of the Jenkins project in GSoC 2020. We are working this new Machine Learning Plugin for this GSoC 2020.\nThis is my story about the community bonding of GSoC 2020. I am happy to share my journey with you.\n\nIntroducing Myself and my Fantastic 4 Mentors\n\nI am Loghi Perinpanayagam from University of Moratuwa. I was selected for GSoC 2020 for Machine Learning Plugin in Jenkins. I am glad to introduce my mentors to this project. I was assigned with four mentors who are really enthusiastic to help me on kicking off this summer of code.\n\nStudent\n\nLoghi Perinpanayagam\n\nMentors\n\nBruno P. Kinoshita\n\nIoannis Moutsatsos\n\nMarky Jackson\n\nShivay Lamba\n\nHow was my preparation last year ?\n\nI learned about this open source program in my second year. But atleast I tried last year on a different organization’s project that was related to Data Visualization Recommendation for Data Science. But the problem was I did not contribute as much as this year and was too late in the application process. As usual Machine learning related projects have a lot of competition compared to other projects. I prepared on learning Data visualization in Machine Learning and existing Models for the recommendation system. Finally I wrote a proposal with the SeqToSeq model without much knowledge on neural networks at that time. And I did not communicate much through the dedicated slack channel.  That may be one of the reasons for the failure. But the main reason was my latency for GSoC 2019.\n\nHow did I hurdle GSoC 2020 ?\n\nSince the time I realized how open source is needed and helpful for the community, I have been passionate about contributing to open source projects. At the instance, I finished my internship in Bangalore, India in 2019, I immediately focused on participating in GSoC. This is my last year (2020) as a student of my BSc Computer Science life, I wanted to get selected this year as a student.\n\nThere was a guidance seminar organized by our department, I got to know that Jenkins had opened their project ideas. That was an extremely impressive beginning of my GSoC 2020 journey. I walked through all the draft and accepted projects in the Jenkins.io page. As I am already interested in Machine Learning and I am familiar with Java, I picked the most impressive idea for me that does not have an initial repo. That means I wanted to use my knowledge to think and research a lot with this project. But I had to contribute and want to know about the infrastructure of Jenkins codebase. Because that makes the selection panel easy to pick up the student for the project.  Then I repeatedly searched to contribute to Jenkins. I found issues that were easy for me to work from the git plugin and git client plugin. I started to contribute some test issues on git plugin and git client plugin. After I got a clear knowledge on how a plugin works in Jenkins, I started working on the POC with the hint provided in the project idea page. Actually, that was fun to code.\n\nMentors have helped many students during the application process. I was able to do a working POC that had a minimum capability to do the task of the project. Finally mentors opened for proposal submission. I hurried to prepare a draft proposal. After I got reviews from mentors, I started to improve the proposal. At the end of the proposal submission, I was able to deliver a good proposal for this project. As I was curious about this plugin, I dug into more on how to integrate Jupyter notebook with this plugin. I published an medium article as a result of my research during the acceptance waiting period.\n\nResults released\n\nThe result was going to be announced on 4th May, I believed in my project proposal and POC and I got selected for this GSoC 2020. Whoa ! That was a goosebumping moment in my entire life. The feeling was like Something I achieved. As a result of my hard work, I deserved that.\nFor example, I spent 7 days continuously making the POC work without any collision between maven artifacts.\n\nCommunity Bonding\n\nAfter the release of results, I was preparing myself for the community bonding. There are lots of interactions happening between me and mentors than before.I had to update my project page and my profile in Jenkins.io. We had our first meeting with lots of excitement and love on 10th of May. Mentors and I introduced ourselves even though we know each other. We discussed the high level view of GSoC and I asked some questions that I had in my mind. As my plugin was a new repository, most of the discussion was related to the repository and its name. I had  to find a name for the new plugin. We had regular conversations about the blogpost and presentations at the end.\n\nIn the second meeting, We discussed the process for hosting a new plugin in Jenkins, tracking issues with JIRA, blog posts and high level road map for the project. And I suggested some interesting plugin names but they were not matching to the goal of the project, mentors told me to try other names which perfectly describe the project. I was advised to read all the research guidelines and plugin naming conventions. We discussed how code reviews will be done and source code management through the git. After this meeting, our meeting has shifted to the official Jenkins Zoom account.\n\nOur third meeting was quite serious about our project planning. I had been preparing my design document for the project with the help of mentors before the meeting day. Hence I got lots of reviews and useful examples for my future work on phase 1. At this point, we decided with the plugin name Machine Learning Plugin which was accepted by all mentors and I created the repo and requested a Jira ticket for the plugin hosting request. We were planning to remind the Jira ticket within the next 3 days. Mentors want me to make sure I updated the Jenkins GSoC page before the community period ends. Lots of discussion carried about the design document that I had been preparing last week before the meeting. Some important points from the meeting notes follows :\n\nDefine features in the design document\n\nDiagrams for the operations\n\nHow plugin works in distributed environment\n\nCode editor library\n\nRequirements for the first Plugin release\n\nBlog post draft document\n\nToDo works for me for next week\n\nTherefore, I had to work hard after this meeting, this made me involved in the project more. I have to put my huge effort to make this opportunity golden. Our team has the willingness to complete this project and will definitely help the Data Science community with this plugin.\nKudos to my team for the amazing work so far!!!\n\nThis was my entire journey until now. Hope you enjoyed it and hope you learned the mistakes I made last year and corrected in this summer.\nThanks for reading, and Stay tuned I will be uploading blog posts for those of you interested.\n\nResources and Links\n\nProject page\n\nDesign document","title":"Machine Learning Plugin project - community bonding blog post","tags":["machinelearning","datascience","plugins","communitybonding","gsoc","gsoc2020"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"loghijiaha","html":"<div class=\"paragraph\">\n<p>Computer Science and Engineering Student at University of Moratuwa, Sri Lanka. He has been selected for Machine Learning plugin for Data Science in GSoC 2020 for Jenkins project. Hightly interested and contributing on open source projects.</p>\n</div>","id":"loghijiaha","irc":null,"linkedin":"loghi","name":"Loghi Perinpanayagam","slug":"blog/author/loghijiaha","twitter":"loghi5"}]}}]}},"pageContext":{"tag":"communitybonding","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}