{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/jenkins/page/3",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-11-22T00:00:00.000Z","id":"add1d65a-e5d3-5a51-85db-aba3b7ead937","slug":"/blog/2019/11/22/jenkins-health-advisor-by-cloudbees/","strippedHtml":"Managing any software presents its own unique challenges. Jenkins controllers are no exception. For example,\n\nHow do you keep a finger on the pulse of everything going on in your Jenkins environment? Are you looking at every new defect opened in the issue tracker?\n\nHow do you make sure that your controllers or agents don’t silently fail? Are you monitoring its logs? All of its internal components? If something does go wrong, how do you fix it??\n\nHow do you avoid the infamous “angry Jenkins” logo?\n\nThat’s why we created Jenkins Health Advisor by CloudBees.\n\nHere at CloudBees, we have years of experience supporting our customers who are using Jenkins, including our proprietary products build on top of Jenkins like CloudBees Core.\nAs a result, our support team is made up of automation experts with Jenkins knowledge you can’t get anywhere else.\n\nAutomated health checks started when our support engineers created a platform so they could write rules to detect known issues on support bundles provided by our customers, and redirect them to the required knowledge source to diagnose and resolve the issue.\n\nAfter years of internal usage we decided to share this service with the community and we are pleased to introduce a new free  (as in beer) service available to every Jenkins user : Jenkins Health Advisor by CloudBees .\n\nJenkins Health Advisor by CloudBees automatically analyzes your Jenkins environment, proactively identifies potential issues and advises you of solutions with detailed email reports.\n\nJenkins Health Advisor by CloudBees can detect a large range of issues from simple configuration issues to security and best practices concerns - all critical elements of Jenkins implementations.\nGetting started is done in 3 steps, and within 24 hours you will receive your first report.\n\nWe hope that you will appreciate this service and it will help you to keep your controllers healthy.\n\nTake a few minutes to read our documentation, discover the service and don’t hesitate to contact us on the Jenkins community channels ( Gitter, jenkinsci-users@googlegroups.com, …​).\n\nDon’t miss also the opportunity to meet our support team on the \"Ask the experts\" booth at DevOps World | Jenkins World 2019.\n\nUseful links:\n\nPlugin Documentation\n\nJenkins Plugin Site\n\nCloudBees Jenkins Support","title":"Jenkins Health Advisor by CloudBees is here!","tags":["jenkins","health","healthcheck","stability"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/bf8e1/aheritier.png","srcSet":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/914ee/aheritier.png 32w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/1c9ce/aheritier.png 64w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/bf8e1/aheritier.png 128w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/acb7c/aheritier.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/ef6ff/aheritier.webp 32w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/8257c/aheritier.webp 64w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/6766a/aheritier.webp 128w,\n/gatsby-jenkins-io/static/46f2893d7fec12965d775eace17259f5/22bfc/aheritier.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://aheritier.net","github":"aheritier","html":"<div class=\"paragraph\">\n<p>Specialised in <a href=\"https://www.linkedin.com/in/aheritier\">software development and process automation</a>, he has been contributing for many years to various open source projects such as <a href=\"https://jenkins.io\">Jenkins</a>, <a href=\"https://maven.apache.org\">Apache Maven</a> and to various communities around Java and DevOps.\nMember of <a href=\"https://lescastcodeurs.com\">Les Cast Codeurs</a> podcast (a french podcast dedicated to IT in general and Java ecosystem), he regularly speaks at various conferences, users groups and participates in the organisation of <a href=\"https://devoxx.fr/what-is-devoxx-france\">Devoxx France</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In 2015, he joined <a href=\"http://www.cloudbees.com\">CloudBees, Inc.</a>, where he is now managing the Support Tooling development activity.</p>\n</div>","id":"aheritier","irc":null,"linkedin":null,"name":"Arnaud Héritier","slug":"/blog/authors/aheritier","twitter":"aheritier"}]}},{"node":{"date":"2019-10-08T00:00:00.000Z","id":"1aef3427-db0e-553e-8196-ae1a3516d783","slug":"/blog/2019/10/08/google-summer-of-code-mentor-and-org-admin-perspective/","strippedHtml":"I was fortunate enough to participate in the Google Summer of Code 2019 as a mentor and org admin. This was great\nand I wanted to share in hopes of encouraging more people to join.\nYou can learn more about the Google Summer of Code here: https://jenkins.io/projects/gsoc/\n\nCommunity Bonding\n\nThe first phase of the project is the community bonding phase. This is where the student and other mentors come together\nto lay out the plan for the project. It is important to set expectations and ensure that the student is well aware of\nwhat will take place and also made to feel welcome.\n\nParichay Barpanda was the student and he was super awesome from the get go. The project he was working on was the Gitlab\nBranch Source Plugin. More can be found here: jenkinsci/gitlab-branch-source-plugin\n\nFrom the mentor side it was myself and Justin Harringa. Justin was just amazing throughout this project and I seriously\ncould not have done this without him. He was encouraging, empathetic and just all around great. I would gladly serve\nwith him again.\n\nWe laid out our plan and guidance and got to work.\n\nFirst Evaluations\n\nThe first evaluation was quickly upon us and Parichay was ready!\nThe work he put in was nothing shy of amazing. We did our 1st demo and he really rocked it. A video of that demo can be\nfound on : Youtube\n\nSecond Evaluations\n\nThere was not much time to rest before we realized that phase II end was upon us but Parichay was ready. Again, he\nnailed it.\n\nThat demo can be found here\n\nMentors Submit Final Evaluations\n\nWe had our final evaluation and at this point Parichay was seasoned. He was getting issues assigned to him, working on\nlittle bug fixes and setting his roadmap for features. He absolutely blew Justin and I away.\n\nParichay’s final evaluation demo can be seen here\n\nAt the conclusion of the final demo’s, Justin and I met and went over Parichay’s final evaluation. At this point we had\nmet twice a week for several months, we have reviewed code daily, we had community involvement and most of all we had\nseen Parichay grow into a seasoned software developer.\n\nJustin and I were without a doubt passing Parichay on his entire body of work. I am actually tearing up typing this\nbecause I am so proud of Parichay.\n\nOrg Admin\n\nBeing an org admin for the 2019 Google Summer of Code project for the Jenkins organization was truly rewarding and couldn’t\nhave been accomplished without the help from Oleg Nenashev, Martin d’Anjou, Jeff Pearce and Lloyd Chang.\n\nAs an org admin we handled issues with mentors, community members and disagreements involving work. These items were only\na few and as a team we handled them accordingly.\n\nWe regularly met to discuss and plan. Coordinating and dealing with a project like Google Summer of Code is no small feat\nbut this team made it super easy and I am so thankful for them and all that I learned.\n\nClosing\n\nIn looking back at this experience I am so grateful for the opportunity I was given. This was such a rewarding experience\nto not only be able to mentor but also be an org admin. Not only will I be back next year (we are already in the\nplanning stages) but I highly encourage people reading this to consider joining. You will not be disappointed.\n\nI am so thankful for all the students, mentors and fellow org admins. Your dedication to open source is so valued. You\nshowed and continue to show what this project is all about, and that is being welcoming, open and transparent. Helping\npeople grow as individuals while learning skills is what I love about this community.\n\nThank you to everyone and I hope your futures are bright!","title":"Google Summer of Code Mentor and Org Admin Perspective","tags":["gsoc","gsoc2019","jenkins","community","events","mentor"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png","srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/914ee/markyjackson-taulia.png 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/1c9ce/markyjackson-taulia.png 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/acb7c/markyjackson-taulia.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/ef6ff/markyjackson-taulia.webp 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/8257c/markyjackson-taulia.webp 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/6766a/markyjackson-taulia.webp 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/22bfc/markyjackson-taulia.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"/blog/authors/markyjackson-taulia","twitter":"markyjackson5"}]}},{"node":{"date":"2019-05-30T00:00:00.000Z","id":"0cba81fa-0a2a-5225-8fdf-6ce66f9aa4d5","slug":"/blog/2019/05/30/becoming-contributor-newbie-tickets/","strippedHtml":"Two months ago I published an introductory article on\nthe journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about\nthe multiple ways in which we can participate and contribute. Then, a first—​basic—​contribution I made to the site\nrepository was described.\n\nNow, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.\n\nGetting started with tickets and processes\n\nBeginners guide to contributing and Jenkins Jira\n\nReviewing the developer section in jenkins.io is probably the best starting point, and a\nreference link to keep handy. The beginners guide to contributing to Jenkins\ncan also be useful, since it points to different repositories, tools (such as the issue tracker) and governance documents.\nBesides, it describes best practices for commit messages, code style conventions, PR guidelines, etc.\n\nOnce we get a general understanding of the former and want to actually start coding, we may get stuck trying to come up\nwith something to work on.\n\nVisiting the Jenkins issue tracker, feels like the natural next\nstep, since it is full of potential bugs and enhancements that have already been reported by the community. However, it\nis quite easy to feel overwhelmed by the possibilities listed there. Bear in mind that in a 10+-year-old project like\nthis, most of the things that are reported are tricky for a newcomer to work on. For that reason, filtering by\nnewbie-friendly tickets is probably\nthe best idea.\n\nFigure 1. Screenshot displaying the list of newbie-friendly tickets in the Jenkins Jira\n\nSelecting a ticket\n\nIn my case, I spent some time reviewing the newbie-friendly tickets, until I found one\nthat seemed interesting to me and also looked like something I would be able to fix:\n\nFigure 2. Screenshot of the ticket I decided to work on\n\nProcesses\n\nAt this stage, when we have decided to take ownership of a ticket, it’s a good practice to let the rest of the community\nknow that we are planning to start working on it. We can do so easily, by assigning the ticket to ourselves (see the\n“ Assign ” button below the ticket summary).\n\nAssigning the ticket to ourselves in the Jenkins Jira will allow any other contributors to know that we are planning to\ntake care of the ticket; and in case they are also interested in contributing to it, they will know who to reach if they\nwant to coordinate work or ask for status. That said, it is worth mentioning that assigning a ticket to yourself does\nnot mean that other contributors cannot work on it from then onwards. Jenkins is an open-source project and anyone is\nwelcome to create their own PRs, so anybody can propose their own solution to the ticket. But as you can guess, if the\nticket is assigned to somebody, most people will probably reach the assignee before starting to work on it.\n\nRelated to the former, it is also important to bear in mind that we should not postpone work on the ticket for too long\nonce we have assigned the ticket to ourselves. Other potential contributors might be ignoring the ticket because they\nsee yourself assigned to it.\n\nOnce we are about to actually start working on the ticket, it is also a good practice to click the “ Start Progress ”\nbutton. This action will change the status to “ In progress ”, signaling to the community that we are currently working\non this particular ticket.\n\nSetting up the necessary stuff on our computer\n\nConfiguring, installing and testing\n\nAs described in the first article of this journey, the\ninitial step to start contributing to a particular repository is to fork it to our GitHub account, and then clone it to\nour local computer.\n\nAs usual, in the Jenkins core repository the CONTRIBUTING file\ndescribes the necessary steps to get the repository working locally. This includes installing the necessary development\ntools: Java Development Kit ( OpenJDK is the recommended choice), Maven and any IDE supporting\nMaven projects. Note that instructions to install JDK and Maven are linked in the contributing guidelines.\n\nOnce we have all the necessary tools installed and configured, we are ready to build Jenkins locally\nand also to run tests.\n\nGetting down to business\n\nReviewing ticket details\n\nNow that I was ready to start working on the ticket, I had to review it in more detail, to fully understand the problem.\n\nThe description of the ticket I was planning to work on included two links. The first one was to\na screenshot that showed the actual bug. It showed\nhow several non-compatible plugins were being selected when clicking “ All ”, even though the intended behavior was to\nonly select the compatible plugins. The second link was a reference to a code fragment\nthat showed other validations that had to be taken into account when checking if a plugin update was compatible or not\nwith the current installation.\n\nReproducing the issue locally\n\nEven though I had now understood the issue in better detail, I had not seen it myself live yet, so it seemed to me that\nthe next logical step was to reproduce it locally.\n\nTo reproduce the issue locally in our computer, we can either use the local war file that we can generate by\nbuilding Jenkins from the source code\nor we can download the latest Jenkins version available and run it locally. When I worked\non this ticket, the latest available version was 2.172 and, when I built if from the sources I saw version 2.173-SNAPSHOT,\nwhich was the next version, in which the community was already working on.\n\nIn general it is a good idea to reproduce bugs locally, not only to get a better understanding, but also to make sure\nthey are actual issues. It could always be an issue happening only on the reporter’s end (e.g. some user misconfiguration).\nOr it could be a ticket referencing an old issue that has been fixed already. This latest possibility didn’t sound that\nstrange to me, since the ticket was one month old. It could have been handled by someone else in the meantime, without\nnoticing the ticket existed. Or the contributor might have forgotten to update the ticket in the issue tracker after the\nfix was committed.\n\nSo, for all the reasons above, I ran the latest Jenkins version locally. From a terminal, I went to the\nfolder in which the war file was placed, and ran java -jar jenkins.war, which starts Jenkins locally on http://localhost:8080.\n\nFrom the home page I navigated to the Plugin Manager (clicking the “ Manage Jenkins ” link in the left hand side and\nthen selecting “ Manage Plugins ” in the list).\n\nIn the Manage Plugins page, the list of plugin updates appears. In my case, since I re-used an old JENKINS_HOME\nfrom an older installation, several plugins showed up in the list, requiring updates. That allowed me to test the behavior\nthat was supposed to be failing.\n\nWhen I clicked on the “Select all” option at the bottom, this is what I got:\n\nFigure 3. Screenshot showing the error, reproduced locally, after clicking “Select All”\n\nAs it had been reported in the ticket, the behavior was inconsistent. In a previous version, the behavior of the “ All ”\nselector had been changed (with the best intent), aiming to only check the compatible plugins. However, as can be seen\nin the screenshot, the behavior was not the expected one. Now, neither “all” nor “only compatible” plugins were being\nselected, since some plugins with compatibility issues were also being checked, unintentionally.\n\nFiguring out a fix\n\nWhen reading the conversation in the original PR in which the behavior of the “ All ” selector had been changed, I saw a\nsuggestion of having a separate “ Compatible ” selector, thus leaving the “ All ” selector with the traditional behavior.\nI liked the idea, so I decided to include it as part of my proposed change.\n\nAt this stage, I had a clear picture of the different things I needed to change. These included: 1) The UI, to add a new\nselector for “Compatible” plugins only, 2) the JS code that applied the changes to the interface when the selectors were\nclicked and 3) probably the back-end method that was determining if a plugin was compatible or not.\n\nApplying the change\n\nAs usual, and as it is also recommended in the contributing guidelines, I created a separate feature branch to work on\nthe ticket.\n\nAfter reviewing the code, I spent some time figuring out which pieces I needed to change, both in the back-end and also\nin the front-end. For more details about the changes I had to make, you can take a look at the changes in my PR.\n\nAs a basic summary, I learned that the classic Jenkins UI was built using Jelly\nand, after understanding its basics, I modified the index.jelly file to include the new selector, assigning the\nfunction that checked the compatible plugins to this new selector, and re-using the existing “toggle” function to set\nall checkboxes to true in the case of “ All ”. I also had to modify the behavior of the checkPluginsWithoutWarnings\nJavaScript function, to un-check the incompatible ones, since there was now an actual “ All ” selector that was not there\npreviously, and that un-check case was not being taken into account. Then, I created a new back-end Java method\nisCompatible, inside the UpdateSite.java class, which now calls all the different methods that check different\ncompatibilities and returns the combined boolean result. For this change, I included an automated test to verify the\ncorrect behavior of the method, contributing to the test coverage of the project. Finally, I modified the table.jelly\nfile to call the new back-end method from the UI, replacing the existing one that was not taking all cases into account.\n\nAs you can see, the change involved touching different technologies, but even if you face a similar situation in which\nyou are not familiar with some of them, my advice would be carry on, don’t let that stop you. As software engineers, we\nshould focus on our evergreen skills, rather than on knowing\nspecific technologies; adapting to whatever framework we have to use at a given moment, learning whatever we need about\nthe new technology to complete the task and applying cross-framework principles and best practices to provide a quality\nsolution.\n\nResult\n\nAfter the changes described above, the resulting UI includes a new option, and the corresponding behaviors of the three\nselectors work as expected:\n\nFigure 4. Screenshot of the new version, displaying the behavior achieved by clicking the new “Compatible” selector\n\nPublishing the change\n\nSubmitting a Pull Request\n\nIn the contributing guidelines of the Jenkins core repository there is also a section about proposing changes,\nwhich describes the necessary steps that have to be followed in order to create a Pull Request (PR) with our change.\n\nFurthermore, there is a PR template in\nthe repository, which will be loaded automatically when creating a new PR and that will serve as a basis for us to provide\nthe necessary information for the reviewers. We are expected to: include a link to the ticket, list the proposed changelog\nentries describing our changes, complete the submitter checklist and add mentions to the desired reviewers (if any).\n\nIn my case, I followed the template when creating my PR,\ncompleting all sections. I linked the Jira ticket, provided two proposed changelog entries, completed the submitter\nchecklist and added three desired reviewers (explaining why I thought their reviews would be valuable). I also linked\nthe original PR that was referenced in the ticket, to provide further context.\n\nFigure 5. Screenshot of the PR I submitted\n\nThe approve and merge process\n\nAs stated in the contributing guidelines, typically two approvals are needed for the PR to be merged; and it can take\nfrom a few days to a couple of weeks to get them. Sometimes, one approval from a reviewer and a 1-week delay without\nextra reviews is considered enough to set the PR as ready-for-merge. However, both the time-to-merge and the number\nof approvals necessary might vary, depending on the complexity of the change or the area of Jenkins core that it affects.\n\nAfter the necessary approvals have been received, a Jenkins core maintainer will set the PR as ready-for-merge, which\nwill lead to it being merged into the master branch when one of the following releases are being prepared.\n\nIn my case, I received a review by Daniel (the reporter of the ticket and one of my “desired reviewers”) the very day I\nsubmitted the PR (April 14th). He made several very useful suggestions, which led to changes from my side. After those\nchanges, Daniel made minor remarks and my PR got another review, which was its first approval. After a week had passed\nwithout further news, I added the remaining minor suggestions from Daniel and a few days later received another approval,\nto which Daniel’s final approval was added, leading the PR to be labeled ready-for-merge, being later merged the same\nday (April 26th).\n\nFigure 6. Screenshot of the final state of the PR, after being merged\n\nRelease\n\nFor every new release, repository maintainers will select a set of PRs that have already been labeled ready-for-merge,\nmerge them to master, prepare changelogs (often using the suggestions included in the PRs by the authors) and proceed with\nthe creation of the new release. There is no additional action required from Pull Request authors at this point.\n\nEvery week a new version of Jenkins is released, so when your PR is merged, your changes will—​most likely—​become part\nof the following weekly release of Jenkins.\n\nEventually, your changes will also reach the Long-term support (LTS) release, which is\na different release line, aimed for more conservative users. This release line gets synced with the weekly release by\npicking, every 12 weeks, a relatively recent weekly release as baseline for the new LTS release. In between, intermediate\nLTS releases are created only to include important bug fixes, cherry-picked from the weekly releases. New features are\ntypically delayed until the next baseline for the LTS release is defined.\n\nRegarding the example described in this post, it was released in Jenkins 2.175 (weekly release), soon after being\nmerged. And will probably be included in the next LTS, which should be released next month (June 2019).\n\nDone!\n\nAnd that’s it! We have now covered the whole lifecycle of a new proposed change to Jenkins core. We have reviewed the\nprocess from the very beginning, picking a ticket from the Jenkins issue tracker; all the way to the end, having our\nchange released in a new Jenkins version.\n\nIf you have never contributed but are willing to do so, I hope this article motivates you to go back to the list of\nnewbie-friendly tickets, find one that looks interesting to you, and follow the steps described above, until you see\nyour own change released in a new Jenkins version.\n\nRemember, don’t try to solve a complicated issue as your first ticket, there are plenty of easier ways in which you can\ncontribute, and every little helps!","title":"Becoming a Jenkins contributor: Newbie-friendly tickets","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg","srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/3af71/romenrg.jpg 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/1e7bb/romenrg.jpg 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/7b60f/romenrg.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/bf13b/romenrg.webp 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/9edd6/romenrg.webp 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/f5f75/romenrg.webp 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff962/romenrg.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/authors/romenrg","twitter":"romenrg"}]}},{"node":{"date":"2019-03-29T00:00:00.000Z","id":"994d7fe1-0a77-5a87-a6ff-1ab920df5676","slug":"/blog/2019/03/29/becoming-contributor-intro/","strippedHtml":"As a software engineer, for many years I have used open source software (frameworks, libraries, tools…​) in the\ndifferent companies I have worked at. However, I had never been able to engage in an open-source project as a\ncontributor, until now.\n\nSince I made my first—​ridiculously simple—​commit into Jenkins, six months ago (in September, 2018), I have been\nattempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,\nchallenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often\ndifficult to know where to start and also difficult to come up with a plan to keep moving forward and contributing\nregularly, and in more meaningful ways over time.\n\nWhen it comes to the Jenkins project, I have encountered challenges that others trying to get into the community are\nlikely to encounter. For that reason, I have decided to go ahead and share my journey of becoming a more engaged Jenkins\ncontributor.\n\nI plan to publish roughly 1 post per month, describing this journey. I will attempt to start contributing to the pieces\nthat are easier to start with, transitioning towards more complex contributions over time.\n\nWhere to start\n\njenkins.io\n\nTo become a Jenkins contributor, the most obvious place to start looking at is jenkins.io. In the\ntop navbar there is a Community dropdown, with several links to different sections. The first entry,\nOverview, takes us to the “Participate and contribute” section.\n\nIn this section we get lots of information about the many ways in which we can engage with the Jenkins project and\ncommunity. Even though the intention is to display all the possible options, allowing the reader to choose, it can feel\na bit overwhelming.\n\nThe page is divided into two columns, the column on the left shows the different options to participate, while the\ncolumn on the right shows the different options to contribute.\n\nSuggestions to Participate\n\nIn the left column of the “Participate and contribute” page, there are several ideas on how to engage with the community,\nranging from communicating to reviewing changes or providing feedback.\n\nOne of the pieces that got me confused at first in this area were the communication channels. There are many different\nchannels for communication. There are several mailing lists and there are also IRC\nand Gitter channels.\n\nDuring my first attempts to get involved, I subscribed to many of the mailing lists and several IRC and Gitter channels,\nbut I quickly noticed that there is significant communication going on; and that most threads in the most active lists\nand channels are specific to issues users or developers have. So, unless your goal is to support other users right away\n(if you are an experienced Jenkins user already it might be the case) or you plan to ask questions that you already\nhave in mind, I would advise against spending too much time on this at first.\n\nEven though it is great to see how the community members support each other, the amount of communication might be\noverwhelming for a newcomer, and if you are also trying to contribute to the project (either with translations,\ndocumentation or code), following these conversations might not be the best way to start.\n\nSuggestions to Contribute\n\nIn the right column of the “Participate and contribute” page there are several ideas on how to contribute, mostly\ngrouped into: writing code, translating, documenting and testing.\n\nIn following posts, I will be going through all of these types of contributions, as well as through some of the\nsuggestions to participate, which include reviewing Pull Requests (PRs) or providing feedback (either reporting new\nissues or replicating cases other users have already described, providing additional information to help the maintainer\nreproduce and fix them).\n\nMy first contribution in this journey\n\nWhen looking at the “Participate and contribute” page, I noticed a couple of things in that page that I could help\nimprove. And I was actually planning to pick one of those as the first example of a contribution for this post. But\nwhen I was reading the contributing guidelines of the repository, I found an even easier contribution I could make,\nwhich I thought would be a great example to illustrate how simple it could be to start contributing. So I decided to go\nahead with it.\n\nThe website repository\n\nIn the ”Document” section there is a link to the\ncontributing guidelines of the jenkins.io repository.\nThe CONTRIBUTING file is a common file present in the root folder of most open-source-project repositories.\n\nFollowing the link to that file, I reached the jenkins.io repository, which is the one that contains the sources for\nthe corresponding website—​which also includes this blog. And, in fact, the contributing file was the first file I\nwanted to review, in order to learn more about how to contribute to the website.\n\nFound a broken link\n\nWhen reading the contributing file, I learned about the Awestruct static site generator, which is the tool used to\ntransform the AsciiDoc source files in the repo into a website. However, when I clicked the link to learn more about it, I noticed it was broken. The domain had expired.\n\nWhy not fix it?\n\nThis was the opportunity I chose to show other newcomers how easy it can be to start contributing.\n\nForking the repository\n\nThe first step, as usual, would be to fork the repository and clone it to my machine.\n\nApplying the change\n\nThe next step would be to apply the change to the corresponding file. To do so, I created a new branch\n“alternative-awestruct-link” and applied the change there:\n\nMaking sure everything builds correctly and tests pass\n\nEven though in this case my contribution was not to the actual website, but to the contributing guidelines (and for\nthat reason was unlikely to break anything), it is a best practice to get used to the regular process every\ncontribution should follow, making sure everything builds correctly after any change.\n\nAs stated in the contributing guidelines themselves, in order to build this repository we just have to run the default\n“make” target, in the root of the repository.\n\nOnce the command execution finishes, if everything looks good, we are ready to go to the next step: creating the PR.\n\nCreating the PR\n\nOnce my change had been committed and pushed to my repository, I just had to create the PR. We have an easy way to do so\nby just clicking the link that we get in our git logs once the push is completed, although we can create the PR directly\nthrough the GitHub UI, if we prefer so; or even use “hub”, the GitHub CLI, to do it.\n\nIn this case, I just clicked the link, which took me to the PR creation page on GitHub. Once there, I added a\ndescription and created the PR.\n\nWhen a PR to this repository is created, we notice there are some checks that start running. Jenkins repositories are\nconfigured to notify the “Jenkins on Jenkins”, which runs the corresponding CI pipelines for\neach repository, as described in the corresponding Jenkinsfile.\n\nOnce the checks are completed, we can see the result in the PR:\n\nAnd if we want to see the details of the execution, we can follow the “Show all checks” link:\n\nPR Review\n\nNow that the PR has been created and all automated checks are passing, we only have to wait for peer code reviews.\n\nOnce someone approves the PR and it is later merged, your contribution is integrated into the master branch of the\nrepository, becoming part of the next release.\n\nI have contributed!\n\nThis contribution I made is a trivial one, with very little complexity and it might not be the most interesting one if\nyou are trying to contribute code to the Jenkins project itself.\n\nHowever, for me, as the contributor, it was a great way to get familiar with the repository, its contributing\nguidelines, the technology behind the jenkins.io website; and, above anything else, to start “losing the fear” of\ncontributing to an open source project like Jenkins.\n\nSo, if you are in the same position I was, do not hesitate. Go ahead and find your own first contribution. Every little\ncounts!","title":"The journey of becoming a Jenkins contributor: Introduction","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg","srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/3af71/romenrg.jpg 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/1e7bb/romenrg.jpg 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/7b60f/romenrg.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/bf13b/romenrg.webp 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/9edd6/romenrg.webp 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/f5f75/romenrg.webp 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff962/romenrg.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/authors/romenrg","twitter":"romenrg"}]}},{"node":{"date":"2019-02-28T00:00:00.000Z","id":"9905a0f3-35a6-5676-b4b5-b69b913d1b36","slug":"/blog/2019/02/28/serverless-jenkins/","strippedHtml":"My job is to work on a Jenkins pipeline specific to SAP S/4HANA extensions running on SAP Cloud Platform.\nSee the original blog post here.\n\nJenkins is a powerful tool for automation, and we heavily rely on the codified pipeline syntax introduced in Jenkins 2.\n\nWith regards to operations, we minimized the need for care with the cx-server life-cycle management greatly.\nStill, you need to run that Jenkins server.\nThis means you’ll need to update the server and plugins (simplified by our life-cycle management), and scale as the number of builds grows.\nUser administration and backups are also required in a productive setup.\n\nIs this really required, or is there an alternative approach?\n\nIn this blog post, I’ll introduce a prototype I did to get rid of that long running pet Jenkins instance.\nRather, we’ll have cattle Jenkins instances, created and destroyed on demand.\n“Serverless” Jenkins in the sense that we don’t have to provision the server for Jenkins to run.\n\nThe setup described in this post is highly experimental. I encourage you to try this out in a demo project, but be very cautious until further notice to use this on productive code. In this proof of concept, I’ll use a public GitHub repository and the free open-source offering by TravisCI. This setup is not suitable for commercial software.\n\nThe pets vs cattle metaphor describes how approaches in managing servers differ.\nWhile you care for pets and treat them when they are unwell, cattle can be easily replaced.\nYour traditional Jenkins server is a pet because it is often configured manually, and replacing it is a major effort.\nFor more background on this metaphor, click here.\n\nBefore we’re getting into the technical details, let’s discuss why we would want to try this out in the first place.\nRunning Jenkins on arbitrary CI/CD services, such as TravisCI seems very odd on first sight.\nOn such services you’ll usually invoke your build tools like Maven or npm in a small script, and that will do your build.\nBut in the enterprise world, both inside SAP and in the community, Jenkins has a huge market share.\nThere are many shared libraries for Jenkins, providing pre-made build steps which would be expensive to re-implement for other platforms.\nAdditionally, SAP S/4HANA Cloud SDK Pipeline is a ready to use pipeline based on Jenkins where you as the developer of an SAP S/4HANA extension application do not need to write and maintain the pipeline yourself.\nThis means reduced costs and effort for you, while the quality of your application improves, for example due to the many cloud qualities which are checked out of the box.\n\nLet me show you an experiment to see if we can get the best of both worlds.\nThe goal is to get all the quality checks and the continuous delivery that the SAP S/4HANA Cloud SDK Pipeline provides us, without the need for a pet Jenkins server.\n\nHow do we do that? The Jenkins project has a project called Jenkinsfile runner.\nIt is a command line tool that basically boots up a stripped-down Jenkins instance, creates and runs a single job, and throws away that instance once the job is done. As you might guess, there is some overhead in that process.\nThis will add about 20 seconds to each build, which I found to be surprisingly fast, considering the usual startup time of a Jenkins server.\nFor convenient consumption, we have packaged Jenkinsfile runner as a Docker image which includes the Jenkins plugins that are required for SAP S/4HANA Cloud SDK Pipeline.\n\nWe also utilize the quite new Configuration as Code plugin for Jenkins, which allows to codify the Jenkins configuration as YAML files.\nAs you will see in a minute, both Jenkinsfile runner and Configuration as Code are a perfect match.\n\nIf you want to follow along, feel free to use our provided Address Manager example application.\nYou may fork the repository, or create your own repository and activate it on TravisCI.\n\nBased on the existing Address Manager, let’s add a small.travis.yml file to instruct the build:\n\nlanguage: minimal\nservices:\n- docker\nscript: docker run -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:/workspace -v /tmp -e CASC_JENKINS_CONFIG=/workspace/jenkins.yml -e CF_PW -e ERP_PW -e BRANCH_NAME=$TRAVIS_BRANCH ppiper/jenkinsfile-runner\n\nThe script line has quite a few things going on, let’s see what is there.\n\nWe run a Docker container based on the ppiper/jenkinsfile-runner image.\nWe need to mount the Docker socket, so that our container can spawn sibling containers for tooling such as Maven or the CloudFoundry CLI.\nWe also need to mount the current directory (root of our project) to /workspace, and tell the Jenkins Configuration as Code Plugin where to find the configuration file.\nWe’ll come to that file in a minute. Also be sure to pass your secret variables here.\nTravis will mask them, so they are not in plain text in your build log.\nTake note to change the names of the variables according to your requirements.\nYou might wonder that we need a BRANCH_NAME environment variable.\nThis is required for the Pipeline to check if you’re working on the “productive branch”, where a productive deployment to SAP Cloud Platform is supposed to happen.\nIf you omit passing this variable, the pipeline will still run but never in the productive mode, and hence not deploy to SAP Cloud Platform.\n\nYou might need some secrets in the build, for example in integration tests or for deployment to SAP Cloud Platform.\nYou can make use of the travis command line tool to encrypt them on your local machine as documented here.\nTake care that this might add your secret in plain text to the shell history on your machine.\n\ntravis encrypt CF_PW=supersecret --add\ntravis encrypt ERP_PW=alsosupersecret --add\n\nThis command will add a line to your.travis.yml file with the encrypted secret value.\nBe sure to commit this change.\nAlso take note of the name of your variable, which must match the environment parameter, and your Jenkins configuration.\nYou should be aware of this TravisCI document on secrets.\n\nWe’ll also need to add a jenkins.yml file to our project.\nHere we need to configure two shared libraries which are required for the SAP S/4HANA Cloud SDK Pipeline, and the credentials that are required for our pipeline.\nBe sure not to put your secrets in plain text in here, but use the variables you used before via the travis cli tool.\nTravisCI will decrypt the password on the fly for you.\n\njenkins:\n  numExecutors: 10\nunclassified:\n  globallibraries:\n    libraries:\n    - defaultVersion: \"master\"\n      name: \"s4sdk-pipeline-library\"\n      retriever:\n        modernSCM:\n          scm:\n            git:\n              remote: \"https://github.com/SAP/cloud-s4-sdk-pipeline-lib.git\"\n    - defaultVersion: \"master\"\n      name: \"piper-library-os\"\n      retriever:\n        modernSCM:\n          scm:\n            git:\n              remote: \"https://github.com/SAP/jenkins-library.git\"\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"MY-ERP\"\n              username: MY_USER\n              password: ${ERP_PW}\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"cf\"\n              username: P12344223\n              password: ${CF_PW}\n\nYou might add more configuration to this file as you need it.\n\nCommit both files to your repo and push.\nIf the travis build works, you’ll see the build integration on GitHub.\n\nOn travis, you can follow the progress of your build live, and get the full text log of your Jenkins build.\nIf all went well, you will be greeted with a green build after a few minutes.\n\nCongratulations. You’re running a serverless Jenkins build with all the qualities checked by the SAP S/4HANA Cloud SDK Pipeline, without hosting your own Jenkins instance.\n\nKeep in mind this is a proof of concept at this point.\nThe serverless Jenkins ecosystem is currently evolving, and neither Jenkinsfile runner, nor Configuration as Code are in a mature state as of February 2019.\nOne downside of this approach is that we lose the Jenkins user interface, so we can’t see our pipeline in blue ocean, and we don’t get the nice build summary.\nWe can get the whole log output from TravisCI, so this can be mitigated, but this is arguable not the best user experience.\n\nBut on the contrary, we don’t have to care for our pet Jenkins, we don’t need to update plugins or backup the configuration or build logs.","title":"Run your Jenkins pipeline without operating a Jenkins instance","tags":["jenkins","serverless"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/79d32/fwilhe.jpg","srcSet":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/b8799/fwilhe.jpg 32w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/8532e/fwilhe.jpg 64w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/79d32/fwilhe.jpg 128w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/97a5e/fwilhe.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/c9eb6/fwilhe.webp 32w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/3ea93/fwilhe.webp 64w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/bf8fb/fwilhe.webp 128w,\n/gatsby-jenkins-io/static/7ee4588ea0f87b2f7130bee3a5fddd17/e7a87/fwilhe.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":125}}},"blog":null,"github":"fwilhe","html":"<div class=\"paragraph\">\n<p>Software Developer working on CI/CD at SAP Innovation Center in Potsdam. I am employed by SAP, but thoughts here are my own.\n---</p>\n</div>","id":"fwilhe","irc":null,"linkedin":null,"name":"Florian Wilhelm","slug":"/blog/authors/fwilhe","twitter":"fwilhe"}]}},{"node":{"date":"2019-02-26T00:00:00.000Z","id":"c5e445a3-8d1e-5054-be35-b27be24516a0","slug":"/blog/2019/02/26/jenkins-alexa-voice-controlled-cicd/","strippedHtml":"Integrating Jenkins with Alexa to launch your pipelines and obtain results\nabout your deployments through voice is easier than you think.  Learn how Alexa\nChampion, Kesha Williams', latest side project teaches Alexa to deploy code to\nthe cloud.\n\nAlexa (named after the ancient library of Alexandria) is Amazon’s Artificial\nIntelligence (AI) powered intelligent voice assistant that runs in the cloud.\nSoftware engineers make Alexa smarter by creating apps, called skills.  From\nthe time that I developed my first Alexa skill, I dreamed of deploying my Java\nprojects to the cloud via voice.  For me, telling Alexa to deploy my code is\nthe ultimate level of cool!  I recently made my dream a reality when I devoted\na weekend to developing my newest Alexa skill, DevOps Pal.  In this blog, I\nwill show you how I developed DevOps Pal and hopefully inspire you to build\nyour own version.\n\nWhy Choose Voice to Deploy Code\n\nVoice-first technology is revolutionizing how we interact with technology because the interaction is simple, frictionless, and time-saving.\nFor me, voice is an easier way to control Jenkins and retrieve results about my deployments without having to touch a keyboard.\nIn this use case, voice is another access point for data and is a way to further automate the process of building, testing, and deploying a Java project to the cloud, improving efficiency.\n\nContinuous Integration and Continuous Delivery (CI/CD)\n\nIf you’re working with DevOps, you understand the need for Continuous Integration and Continuous Delivery (CI/CD) to automate the software delivery pipeline in a reproducible way.\nCI/CD is the practice of continuously building, testing, and deploying code once it’s committed to version control.\nDevOps and CI/CD provides software engineering teams with confidence in the code being pushed to production and shorter development lifecycles, which in the end produces happier users, clients, and customers.\n\nDevOps Pal Overview\n\nDevOps Pal is a private Alexa for Business skill that is used to kick off a Jenkins pipeline job.\nAlexa for Business was the perfect way for me to distribute DevOps Pal since I have the ability to enable the skill on an organization-by-organization basis, which gives me complete control over who has access.\nOnce DevOps Pal invokes the job, the pipeline status displays in real-time via the Blue Ocean Pipeline Run Details View Page.\n\nDevOps Pal Architecture\n\nI used several components and tools to create DevOps Pal. Let’s review the architecture in detail.\n\nThe flow begins by saying, \"Alexa, open DevOps Pal and deploy my code\", to the Echo device.\n\nThe Echo device listens for the wake word (e.g. Alexa, Echo, Computer, or Amazon), which employs deep learning technology running on the device to recognize the wake word the user has chosen.\nOnce the wake word is detected, what I say is recorded and sent to the Alexa Voice Service (AVS), which uses speech to text and natural language understanding (NLU) to identify my intent.\nMy intent is sent to DevOps Pal; the skill acts accordingly by kicking off the Jenkins job and sending a response back using text-to-speech synthesis (TTS), which makes the response natural sounding.\n\nLet’s explore each component in more detail:\n\nAlexa Voice Service (AVS) - I often refer to the Alexa Voice Service as the \"Alexa brain that runs in the cloud\". The AVS is a suite of services built around a voice-controlled AI assistant. The AVS is flexible enough to allow third parties to add intelligent voice control to any connected product that has a microphone and speaker, so Alexa is not limited to just Echo devices.\n\nAlexa Skills Kit (ASK) - ASK is the \"SDK\" (Software Development Kit) that allows developers to build custom skills for Alexa.\n\nAlexa Developer Portal - An Alexa skill includes a voice user interface, or VUI, to understand user intents, and a back-end cloud service to process intents by telling Alexa how to respond. The VUI and the integration with the back-end service is setup and configured through the Alexa Developer Portal.\n\nAWS Lambda - A chunk of code that runs in the cloud. Developers can run their code without having to provision or manage servers. Applications created with AWS Lambda are considered to be serverless. Lambda supports several popular languages like Python, Java, Node.js, Go, C#, etc.\n\nGitHub - A version control system for the Java project source code.\n\nJenkins on EC2 - I use Jenkins to build, test, and deploy my Java Application Programming Interface (API). Elastic Cloud Computer (EC2) is the virtual server where Jenkins is installed. Jenkins works alongside several other tools:\n\nMaven - A build automation tool for Java projects.\n\nJunit - A testing framework for Java projects.\n\nAWS Command Line Interface (CLI) - This is a command line tool that allows developers to access their Amazon Web Services (AWS) account.\n\nBlue Ocean - This is a plugin for Jenkins that provides an easy to use interface to create and monitor Jenkins pipelines.\n\nAWS Elastic Beanstalk - This is an orchestration service that allows developers to deploy and manage web applications in the AWS cloud.\n\nPostman - This is an HTTP client for testing APIs and web services.\n\nVoice Interaction Model\n\nThe Voice User Interface (VUI) describes the overall conversational flow and is setup via the Alexa Developer Console.\n\nA few important components of the VUI are the Invocation Name (how users launch your skill) and the Intents (phrases a user says to \"talk to\" or interact with your skill).\n\nSpecifically, the \"DeployCodeIntent\" is invoked when a user says one of several phrases (e.g. run jenkins pipeline, run jenkins job, deploy the code, deploy code, or deploy ) or a variation of the phrase like, \"deploy my code\".\n\nThe endpoint is the destination where the skill requests are sent for fulfillment.\nIn this case, the backend logic is an AWS Lambda authored in Python.\nThe business logic in the Python Lambda uses the Jenkins remote access API to trigger the job remotely.\nThe format of the URL to trigger the job is jenkins_url/job/job_name/build.\nThe API call uses BASIC authentication and a Jenkins Crumb passed in the HTTP request header for CSRF protection.\nAlternatively, since Jenkins 2.96, you can use an API token instead of a Jenkins Crumb and password to authenticate your API call.\n\nJenkins Job\n\nThe Jenkins job, 'alexa-cicd', is the job invoked from DevOps Pal.\nAlthough, the Jenkins Classic User Interface (UI) is functional, I prefer the Blue Ocean interface because it rethinks the user experience of Jenkins by making it visually intuitive.\nBlue Ocean is easily enabled via a plugin and leaves the option to continue using the Jenkins Classic UI should you so choose.\n\nAfter Alexa kicks off the 'alexa-cicd' job, I navigate to the Pipeline Run Details View Page, which allows me to watch the job status in realtime.\nThis job has four stages: Initialize, Build, Test, and Deploy.\nThe final stage, Deploy, uses the AWS Command Line Interface (CLI) on the Jenkins server to copy the artifact to Amazon Simple Storage Service (S3) and create a new Elastic Beanstalk application version based on the artifact located on S3.\n\nCool Features to Add\n\nThe ability to deploy code with voice is just the beginning.\nThere are several cool features that can easily be added:\n\nDevOps Pal can be updated to prompt the user for the specific Jenkins pipeline job name. This adds a level of flexibility that will really empower DevOps teams.\n\nAlexa Notifications can be integrated with DevOps Pal to send a notification to the Echo device when the Jenkins job is finished or when it fails. If the job fails, more information about where the job failed and exactly why will be provided. This will prove useful for long running jobs or for getting timely updates regarding the job status.\n\nDevOps Pal can be updated to answer direct questions about the real-time status of a specific job.\n\nWant to Learn More\n\nI hope you’ve enjoyed learning more about the architecture of DevOps Pal and deploying code to the cloud using Jenkins and voice.\nFor more detailed steps, I’ve collaborated with Cloud Academy to author a course, AWS Alexa for CI/CD on the subject.","title":"Jenkins + Alexa: Say Hello to Voice Controlled CI/CD","tags":["jenkins","alexa"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/f84e8/keshawilliams.jpg","srcSet":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/5c08a/keshawilliams.jpg 32w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/4a6e8/keshawilliams.jpg 64w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/f84e8/keshawilliams.jpg 128w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/d158b/keshawilliams.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/ad81f/keshawilliams.webp 32w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/10333/keshawilliams.webp 64w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/ba2bd/keshawilliams.webp 128w,\n/gatsby-jenkins-io/static/98fc8317a8d993f9d7e4610ea3fcc96f/b679b/keshawilliams.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":179}}},"blog":"http://www.kesha.tech/","github":"ProfessorKesha","html":"<div class=\"paragraph\">\n<p>Kesha Williams is an award-winning software engineering manager at Chick-fil-A with over 20 years' experience.\nShe has trained and mentored thousands of software developers in the US, Europe, and Asia while teaching at the university level.\nShe routinely leads innovation teams in proving out emerging technologies and shares her learnings at conferences across the globe.\nShe has published several Alexa skills, was featured during Amazon&#8217;s \"Alexa Women of Voice\" campaign, and recently named an Alexa Champion.\nIn her spare time, she leads the Georgia chapter of Technovation and mentors women in tech.</p>\n</div>","id":"keshawilliams","irc":null,"linkedin":null,"name":"Kesha Williams","slug":"/blog/authors/keshawilliams","twitter":"keshawillz"}]}},{"node":{"date":"2019-01-09T00:00:00.000Z","id":"2bba9081-9075-5138-b4bd-6bcf248a769e","slug":"/blog/2019/01/09/jenkins-user-conference-china-shenzhen-update/","strippedHtml":"On November 3rd, 2018 the Jenkins User Conference China (JUCC) met Jenkins users in Shenzhen which is the most burgeoning city in China.\nIt was the first time to hold JUCC in Shenzhen.\nWe held JUCC along with DevOps International Summit, which is the biggest DevOps event in China.\nMore than 200 attendees gathered at JUCC Shenzhen to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.\n\nBelow, I am sharing pictures and some of the topics discussed at the event:\n\nYu Gu from Accenture presented New challenges for DevOps in Cloud Native.\n\nPeng Wang from Meituan which is the biggest group-buying website in China much like Groupon presented\nThe continuous delivery toolchains based on Jenkins for ten thousand times build per day.\n\nGuangming Zhou from Ctrip who is a Jenkins expert in China presented CD system in Ctrip.\n\nJiaqi Guo Jiaqi Guo from Kingston presented DevOps practices in large manufacturing industry.\n\nYaxing Li from Tencent presented How to support the CI CD requirements for thousands of products in Tencent based on Jenkins.\n\nMei Xiao from ZTE presented Fast integration practice for Android.\n\nJohn Willis presented Next Generation Infrastructure which included Kubernetes and  Istio practices.\n\nBC Shi from JD.com who is also a Jenkins Ambassador and the co-organizer of JUCC presented Pipeline 3.0  for DevOps toolchains.\nHe introduced the practices based on Jenkins and Jenkins X to build an end to end pipeline for DevOps from requirement to online service.\n\nWe’ve also released a DevOps tool map to recommend an excellent tool to the community.\n\nLastly, myself, Forest Jing co-organizer of JUCC and also am a Jenkins Ambassador interacted with the attendees.\n\nWe also organized the Jenkins workshop and Open space for the attendees.\nRuddy Li ,Yunhua Li , Yu Gu and Dingan Liang have worked together to run an open space to lead the attendees to discuss problems they met in DevOps and CD.\n\nHuaqiang Li who is a Certified Jenkins Engineer and CCJE has led the attendees to practice Jenkins functions for a whole afternoon.\n\nHere are more photos from our event, it was a fantastic JUCC in Shenzhen.\nThere were so much interest and appetite to learn about Jenkins and DevOps.\nWe are looking forward to doing this again next year.\n\nSlides from the event can be downloaded at PPT Download Address, password: sepe (the website is in Chinese).\n\nThank you to Alyssa and Maxwell’s help to organize this event.\nJenkins User Conference China continues and we hope to see many of you next year in China for our next JUCC.\nLet’s be Kung fu Jenkins!","title":"Jenkins User Conference China - Shenzhen Update","tags":["jenkins","jenkinsuserconference","chinese"],"authors":[{"avatar":null,"blog":null,"github":"ijyun","html":"","id":"ijyun","irc":null,"linkedin":null,"name":"Forest Jing（景韵）","slug":"/blog/authors/ijyun","twitter":null}]}},{"node":{"date":"2019-01-07T00:00:00.000Z","id":"4187a71c-adb8-54ce-90c9-c412101f2f56","slug":"/blog/2019/01/07/webhook-firewalls/","strippedHtml":"In this post I wanted to show how you can run Jenkins behind a firewall (which could be a corporate firewall, a NAT’ed network like you have at home) but still receive webhooks in real time from GitHub.com. You can generalise this to other services too - such as BitBucket or DockerHub, or anything really that emits webhooks, but the instructions will be for GitHub projects hosted on github.com.\n\nWhat are webhooks\n\nJust a very quick refresher on what webhooks are: Messages (often JSON, but not always) typically posted by HTTP(S) from a server to a client that is listening for events.\n\nThe events flow left to right, Jenkins sits there happily listing on paths like /github-webhook/ or /dockerhub-webhook/ etc for some HTTP request to tell it to wake up and do some work.\n\nGitHub/BitBucket may be reporting a new commit or PR, or DockerHub reporting an upstream image has changed. What all these things have in common is that they push to Jenkins, and expect to be able to push to it (ie that Jenkins is visible to them). This works great when the network is open - say GitHub Enterprise, or Jenkins is listening on the web.\n\nNot on the web\n\nThe trick is when something gets in the middle, say a firewall:\n\n( As is industry standard, all firewalls have to be a wall on fire. Please don’t somehow set bricks on fire in your organisation)\n\nThis is just the same when you fire up Jenkins on your laptop, and want to receive webhooks from github.com (a legitimate thing, perhaps to test out your setup, perhaps to run builds for iOS on a mac, or some corner of a network that is not exposed to the web). Unless your laptop is addressable to the whole web that is (not likely), or your network is configured just right, the webhooks won’t be able to flow.\n\nThis is fine - we can fall back to polling for changes. Except this is terrible. You burn through API quotas, and you don’t get changes in real time, and really no one is happy.\n\nSome problems are opportunities\n\nWe can both solve this problem, but also, view this is an opportunity. Having things not addressable on the web, or locked down in some default way is a feature, not a bug. You massively reduce your attack surface, and can have defence in depth:\n\nA Webhook forwarding service\n\nEnter the memorably named Smee. This is an OSS project provided by GitHub and also helpfully hosted as a service by GitHub. This can capture and forward webhooks for you. I’ll try to explain it with a diagram:\n\nGitHub pushes an event (via HTTPS/json in this case) to Smee.io (the funny thing with circles, which is on the public web and accessible from GitHub.com) - and Jenkins in turn subscribes to Smee with an outgoing connection from a client. Note the direction of the arrows: Jenkins only makes an outbound connection.\n\nThis is the important point: this will work as long as the firewall is one way (like a NAT typically is, and many networks). If the Jenkins side can’t connect to anything on the outside world - well, this won’t help with that of course (but that is not often the case).\n\nSetting it up\n\nStep 1: Firstly - go to https://smee.io/ and click “Start a new channel”:\n\nThis will give you a unique URL (which you should copy for later use):\n\nNext you should install the smee client next to where you have the Jenkins server running:\n\nnpm install --global smee-client\n\n(This will make the smee client/command available to receive and forward webhooks).\n\nNow start the smee client and point it to your Jenkins server. In this case I have it running on port 8080 (the default if you fire it up on your laptop, change both the port and the smee URL as needed):\n\nsmee --url https://smee.io/GSm1B40sRfBvSjYS --path /github-webhook/ --port 8080\n\nThis says to connect to the smee service, and forward webhooks to /github-webhook/ (that trailing slash is important, don’t miss it). Once this is running, you will see it log that it is connected and forwarding webhooks. Leave this command running for as long as you want to receive webhooks.\n\nNext, you need to configure a pipeline that makes use of github. In this case I set up one from scratch. You can skip this if you already have a pipeline setup:\n\nI then chose “GitHub” as the where the code is:\n\nThen choose your repository. This will set things up ready to receive webhooks from GitHub. (also if you have an existing pipeline setup, and it is using GitHub as the SCM source, that is also fine).\n\nThe final step is to tell GitHub to post webhook events for that repository (or organization, you can do that too) to Smee (which ultimately means Jenkins will receive them).\n\nGo to the settings tab for your GitHub repository, and then click “add webhook”:\n\nNext, configure the webhook:\n\nPaste in the “smee” URL you copied from the step above.\n\nChoose application/json as the content type\n\nTell it to send everything (you can pick and choose what events, but I just did that as simpler).\n\nPress Add Webhook (or update)\n\nIt should look something like this:\n\nOK - webhooks should be flowing now. You can make a change to your repository, and check that a build starts soon after:\n\nGood luck!","title":"Triggering builds with webhooks behind a secure firewall","tags":["jenkins","webhooks","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale","twitter":"michaelneale"}]}}]}},"pageContext":{"tag":"jenkins","limit":8,"skip":16,"numPages":5,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}