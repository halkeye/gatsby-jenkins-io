{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/jenkins/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-12-22T00:00:00.000Z","id":"c343609c-9f27-5839-9053-d4fffab8550f","slug":"/blog/2020/12/22/gsoc-report/","strippedHtml":"With the mentor summit and the project retrospectives finished in October,\nnow we can call Google Summer of Code 2020 officially over in the Jenkins community.\nOn behalf of the Jenkins org team, we would like to thank all participants: students, mentors, applicants, and dozens of other contributors who participated in the project this year.\nGoogle Summer of Code would not be successful without the active participation of the Jenkins community.\n\nIf you follow the Jenkins blog, you may have already seen many GSoC 2020 articles created by the project teams.\nHere I would like to focus on the key highlights from the project.\n\nProjects\n\nIn 2020 we had seven students working in the Jenkins mentoring organization.\nWe had 6 projects focused on Jenkins and one project focused on Jenkins X.\nAs usual, in GSoC we focused on problems important to the Jenkins users and community members.\nThe projects delivered highly anticipated new features and key architecture changes\nneeded for long-term evolution of Jenkins.\n\nHere are the projects we had this year:\n\nCustom Jenkins distribution build service by Sladyn Nunes\n\nExternal Fingerprint Storage by Sumit Sarin\n\nGit Plugin Performance Improvements by Rishabh Budhouliya\n\nGitHub Checks API for Jenkins Plugins by Kezhi Xiong\n\nJenkins X: Apps/Addons consolidation by Zixuan Liu\n\nMachine Learning Plugins for Data Science by Loghi Perinpanayagam\n\nJenkins Windows Services: YAML Configuration Support by Buddhika Chathuranga\n\nPlease refer to the project pages for more information, links to the blog posts, and project demos.\nLet’s focus on the results instead.\nThis is the first ever time in Jenkins when all GSoC students have reached the final evaluation and successfully passed it.\nIt was an incredible effort by all the project members and, most importantly, by the students. Thanks a lot to them!\n\n.\n\nThanks a lot to all mentors who were guiding students during their projects:\nZhao Xiaojie,\nKristin Whetstone,\nParichay Barpanda,\nMartin d’Anjou,\nOleg Nenashev,\nAndrey Falko,\nMike Cirioli,\nMark Waite,\nFrancisco Fernandez,\nJustin Harringa,\nOmkar Deshpande,\nUlli Hafner,\nTim Jacomb,\nKara de la Marck,\nJames Strachan,\nNeha Gupta,\nOscar Medina,\nNikhil Da Rocha,\nSahil Kalra,\nBruno P. Kinoshita,\nIoannis Moutsatsos,\nMarky Jackson,\nShivay Lamba, and\nNext Turn.\n\nGSoC 2020 Org admin team:\nKara de la Marck,\nMartin d’Anjou,\nMarky Jackson,\nOleg Nenashev.\n\nEvents\n\nThanks to the GSoC organization stipend from Google and other donations,\nthe Jenkins project usually provides travel grants to successful students so that they can visit a major community event, meet their mentors and community members in person, and present their work there.\nHere are some notes about the GSoC 2019 travel.\nUnfortunately this year it was not possible, and GSoC went completely virtual this year.\n\nOnline meetups\n\nIn August we organized Jenkins Online Meetups where students have presented their projects\n( part 1, part 2).\nYou can find recordings of these presentations in this playlist on the Jenkins YouTube channel.\n\nDevOps World\n\nThis year CloudBees, one of the Jenkins corporate sponsors, invited all students to participate in the DevOps World virtual conference on September 23-25.\nGSoC students did lighting talks about their projects, attended other conference talks, and joined the Continuous Delivery Foundation booth which represented the project at the conference.\nYou can find recordings of the talks and all materials here.\nAlthough the conference was in September, the talks were pre-recorded in early August.\nPlease refer to the Jenkins online meetup recordings for the recent versions.\n\nGSoC Mentor summit\n\nThis is a regular gathering for Google Summer of Code mentors and org admins where they share their experiences about GSoC, outreach programs, community management, and tools.\nUsually it is organized as a multi-day unconference after the end of GSoC, with 2-3 representatives from each project.\nIt has been a great learning experience to participate in it.\nThis year it was a single-day virtual event, and all mentors were able to attend.\nShivay Lamba, one of the GSoC 2020 mentors, also did a lightning talk about the GSoC projects he was working on in Jenkins and CNCF ( slides).\n\nSwag\n\nAll Google Summer of Code students and mentors get swag from Google.\nThis year, Contrinuos Delivery Foundation (CDF) has sponsored swag for 50 most active GSoC participants:\nall students, mentors, and many other contributors who participated and helped the projects to succeed.\nThis is the third year when the Jenkins organization sends extra GSoC swag,\nIn the previous years the swag logistics was one of the most challenging tasks for org admins during the entire project.\nand we highly appreciate help from CDF with this part.\nAs DevOps World presenters, the students have also received special edition speaker swag from CloudBees.\n\nThanks a lot to Google, Contrinuos Delivery Foundation (CDF) and CloudBees!\n\nRetrospective\n\nAfter completion of the coding phases,\norg admins have reached out to all GSoC 2020 participants to gather their feedback and suggestions.\nWe also recommended that project teams hold their own retrospective meetings.\nSuch information is instrumental to continuously improving GSoC in the Jenkins community.\nWe thank all contributors who shared their feedback!\n\nThe organization-wide retrospective was organized as a survey and a series of retrospective meetings.\nYou can find aggregated results in this Google Doc.\nOverall, we received very positive feedback from students and mentors.\nThe GSoC framework in Jenkins has matured significantly during the previous years.\nThe effort we invested to create guidelines and recommendations for all parties helped a lot because all the expectations were known in advance.\nAs usual, there is much to improve, especially with regards to the community bonding phases and cross-project communications.\nWe are processing the feedback, and we will expand our documentation and the contributor onboarding plans next year.\n\nSome personal notes\n\nI have been involved in leading and coordinating Google Summer of Code in open source projects since 2016.\nThis year I visited the GSoC stand at FOSDEM and met a few organizers and former students.\nA few days after, I proposed participating in GSoC at the Jenkins contributor summit in Brussels,\nand several contributors supported this idea.\nWe spent several hours to create the first Jenkins GSoC page and brainstorm on project ideas.\nWe submitted our application and were accepted.\nThanks a lot to the Google team that gave us a chance!\n\nIt is great to work with the students and see how they explore the open source community and grow professionally as engineers.\nIt is also awesome to see how some of them stay in the project and keep contributing,\nincluding becoming plugin maintainers and GSoC mentors.\nBut, for me, Google Summer of Code is not just about mentoring.\nIt also helps a lot with the community bonding…​ for the existing community like Jenkins which has a lot of isolated sub-communities in plugins.\nMany maintainers work alone, and it can be quite lonely working to maintain a plugin without feedback, developer ideas, and user interactions.\nWhen plugin contributors become project mentors, they join the wider community effort and work in teams.\nIn many cases they start contributing to the organization-wide activities and goals,\nand it grows the \"backbone\" of the Jenkins community.\nLike other community-driven projects, we need such backbone to scale the community and onboard more contributors to the countless Jenkins components.\nSo far it works really well and GSoC excels among outreach programs in this regard.\n\nI would like to thank the Google Open Source team, students and all Jenkins community members for the great Google Summer of Code this year.\nWe also thank the Continuous Delivery Foundation for their help to recognize contributors and allow organization administrators to focus on projects.\nLast but not least, I would like to thank the Jenkins org admin team:\nMartin d’Anjou,\nMarky Jackson, and\nKara de la Marck.\nThis was a crazy year for everyone. Regardless of that, the org admins stepped up and took responsibility for students and mentors involved in the project, with a serious time commitment.\nNot all work by the organizers is publicly visible (applications, project selection, resolving conflicts),\nbut this work is essential to the project’s success.\nThanks a lot to org admins and mentors who helped with the administrative tasks this year!\n\nWhat’s about GSoC 2021?\n\nYes, we plan to participate in Google Summer of Code 2021.\nThe application period for organizations will start in a few months,\nbut we have already started preparing for the next GSoC session.\nWe are looking for mentors, org admins and project ideas.\nPlease contact us if you are interested!\n\nCall for Mentors and Project Ideas\n\nGSoC 2021 project ideas\n\nHOWTO: Propose a project idea\n\nInformation for mentors : guidelines and expectations\n\nWe invite potential students to start exploring the project and the available project ideas.\nOriginal ideas are always welcome in the project, and starting early is a great opportunity to\nget introduced to the Jenkins community, collect more information about the problem areas,\nand to create a good proposal.\n\"Start early\" is the most popular recommendation from GSoC 2020 participants to future GSoC students,\nand we encourage you to follow this advice!","title":"Google Summer of Code 2020 summary","tags":["gsoc","gsoc2020","jenkins","community","events","mentor"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2020-12-17T00:00:00.000Z","id":"9753ae32-51e9-5bc8-9342-e525dab1f74c","slug":"/blog/2020/12/17/jira-upgrade-for-the-jenkins-project/","strippedHtml":"The Jenkins project has used Jira to track issues for many years.\nJenkins core, Jenkins modules, Jenkins infrastructure, and many Jenkins plugins manage their issue reports with our Jira server.\n\nJira helps the Jenkins project manage issues and tasks related to over 250 000 Jenkins installations.\nIt tracks bugs, enhancement requests, tasks, and security issues.\nIt is used regularly by users around the world.\n\nWe’re grateful for the long-standing contribution that Atlassian provides by donating the Jira license to the Jenkins project.\nWe’re grateful to the Oregon State University Open Source Lab for their donation of equipment and bandwidth to host the server.\n\nUpgrade Timeline\n\nWe were running Jira 7.13 and had been managing that installation for a few years.\nAtlassian announced that Jira 7.13 would end its support life on November 28, 2020.\nWe needed to upgrade from Jira 7.13 to a more recent version of Jira.\nAs part of our membership in the Continuous Delivery Foundation, a Linux Foundation initiative, we could use their project services team to manage our Jira server.\nWe decided to move from hosting our own Jira server to having the Jira experts at the Linux Foundation host it.\n\nThe upgrade timeline looked like this:\n\nNovember 2019 - Infrastructure team begins discussions about the November 2020 end of support for Jira 7.13\n\nAugust 2020 - First conversations with Linux Foundation to host Jira for the Jenkins project.  Draft of the upgrade plan assembled and shared with the community\n\nSeptember 2020 - Schedule for testing week and final transition week proposed.  Authentication options evaluated and selected\n\nOctober 2020 - Test upgrade performed and tested\n\nNovember 2020 - Final upgrade completed and verified\n\nConfronting the Complications\n\nInitial discussions between the Jenkins infrastructure team and the Linux Foundation identified complications related to authentication and SSL certificates.\nWe planned, negotiated, and tested our assumptions throughout the project.\n\nAuthentication\n\nJira servers at the Linux Foundation typically use Linux Foundation accounts for user access.\nUnfortunately, the Jenkins LDAP database includes over 100,000 users and for many of them, Linux Foundation username doesn’t correspond to Jenkins account username.\nIt was not feasible to transition 100,000 user accounts from the Jenkins LDAP database to the Linux Foundation accounts system and still complete the Jira upgrade before the November 28, 2020 deadline.\n\nThe Linux Foundation Project Services team evaluated authentication alternatives and confirmed that they could use the Jenkins LDAP server.\nUsing the Jenkins LDAP server spared us from two transitions, LDAP and Jira, and kept the project timeline feasible.\n\nSSL Certificates\n\nJira servers at the Linux Foundation use Let’s Encrypt to generate SSL certificates for HTTPS.\nThe Linux Foundation uses the DNS method to obtain SSL certificates.\nUnfortunately, the Jenkins project uses the HTTP method to obtain SSL certificates.\n\nThankfully, Olivier Vernin of the Jenkins project and Anton Baranov of the Linux Foundation found a solution.\nThey created an ACME record in the Jenkins DNS server and pointed the issues.jenkins.io DNS record at the new Linux Foundation Jira server.\n\nBuilding the Prototype\n\nAnton Baranov created a prototype Jira server, restored an older Jenkins Jira backup, and upgraded it to Jira 8.13.\nThat first restore detected that we had not provided the Jira attachments or the Jira avatars.\nThat attachments and avatars added multiple gigabytes to the initial backup data and were vital to complete the update.\n\nTesting the Upgrade\n\nA group of volunteers including Jenkins users, security team members, and infrastructure team members tested the upgrade during the week of October 26, 2020.\nThe tests confirmed that authentication worked as expected and that the Jira prototype was functioning as expected.\n\nWe thank the test team, including:\n\nDaniel Beck\n\nTim Jacomb\n\nOlivier Vernin\n\nMark Waite\n\nThe tests included:\n\nCreating and routing issues\n\nCommenting on issues\n\nViewing dashboards with the expected content\n\nLDAP settings\n\nEmail notification\n\nThe tests detected minor issues that Anton was able to correct in preparation for the final upgrade.\nThe testing team agreed that the tests were successful.\n\nDeploying the Upgrade\n\nOlivier Vernin announced the final upgrade by email to the Jenkins infra list with details of the changes happening during the upgrade.\nMonday, November 9, 2020, the final backup of the existing Jira server was copied into the new Linux Foundation server.\n\nThe final upgrade encountered issues that we had not seen during the initial tests.\nThe \"bumps and bruises\" from the unexpected issues were resolved by Anton Baranov as he used a multi-step upgrade process.\nThe steps included:\n\nRestore the earlier backup to Jira 7.13\n\nRestore the most recent backup\n\nUpgrade to Jira 8.13\n\nInstall avatars, attachments, and other images\n\nUpdate DNS entries to point to the new Jenkins Jira server\n\nLessons from the Upgrade\n\nLessons were related to timing, estimation, and communication.\n\nScheduling the Upgrade\n\nThe test upgrade started the week of October 19, 2020.\nIt took several days longer than originally expected.\nThankfully, we had allowed an extra week between the test upgrade and the production upgrade.\n\nThe originally announced schedule for the final upgrade was intentionally placed in a week that would not include a long term support release.\nThat reduced the risk of disruption if the upgrade took longer than required or failed and we had to roll back.\n\nEstimating the Work\n\nDiscussions with the Jenkins project Jira administrators and the Linux Foundation Jira experts provided very reasonable estimates of time to complete the work.\nWe intentionally allowed additional time between first test and final upgrade.\nWe needed that additional time and used it well as the testing week.\n\nCommunicating the Plan\n\nThe distributed nature of the Jenkins project makes communication challenging for major changes.\nWe communicated plans at various stages but still found occasions where the communication was insufficient.\nIn this case, the adage held true that it is, \"impossible to communicate too much\".\n\nThanks for your patience during the upgrade and thanks to the Linux Foundation for administering the Jenkins Jira server.","title":"Jira upgrade for the Jenkins project","tags":["jenkins","infrastructure","jira"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"4a81cf3c-4ca0-511f-9197-d77a776ede34","slug":"/blog/2020/11/10/spring-xstream/","strippedHtml":"Cleaning up technical debt is a perennial topic among Jenkins core developers,\nand one of the most visible issues is the use of obsolete and/or forked third-party libraries.\nIn a world where Dependabot is offering updates to libraries released just hours before,\nit is unpleasant to be working with dependencies that are many years old.\nSince large organizations in particular are unhappy to install software using obsolete or nonstandard versions,\nmy employer (CloudBees) gave its blessing for me to spend some time cleaning up some of the worst offenders.\n\nThe toughest nut to crack was the Acegi Security library used for authentication,\nwhich has long since been replaced by Spring Security\n(and Jenkins was also bundling a long-outdated version of some Spring Framework dependencies).\njep:227[] tracks the complicated task of updating to Spring Security\nwithout breaking the numerous plugins that interact with authentication,\nespecially those offering a Security Realm.\n\nAnother longstanding problem was the XStream library which Jenkins uses to read and write XML configuration files.\nThis had been forked long ago by what was then the Hudson project and a few fixes applied.\nUnfortunately, some of those fixes were rejected upstream as invalid (representing unsupported usage patterns),\nand the fork fell behind the upstream version.\njep:228[] describes the impact of switching to the upstream library in a more standard usage mode,\nincluding fixes to a smaller number of plugins which would otherwise be incompatible.\n\nNow that the Jenkins 2.266 weekly release includes both updates,\nit is important for both Jenkins administrators and plugin maintainers to check for actual or potential incompatibilities.\nThere are two tables listing the impact of these changes on plugins:\n\nSpring Security compatibility\n\nXStream compatibility\n\nIf you use Jenkins then it is a good idea before upgrading to take a look at these tables\nto see if you are running any plugins considered incompatible.\nIf so, try not to rely on that plugin, or find out if there is an active maintainer who could help.\nFor entries marked unknown, it would be appreciated if you could do a sanity check after upgrading\nand offer a pull request to the table page (click Edit this file) with a more informative status.\n\nIf you find a regression in a plugin, please file a bug report in Jira and link to it from the table.\nAlso please add a JEP-227 or JEP-228 label as appropriate, for ease of tracking:\n\nOpen JEP-227 issues\n\nOpen JEP-228 issues\n\nIt is a good idea to update all your plugins before upgrading Jenkins core.\nIn the case of the Spring Security update, some security realm plugins including LDAP and Active Directory must be updated in advance.\n(You can safely run the new plugin versions on Jenkins releases prior to this change.)\nOtherwise, you risk being unable to log in to Jenkins—and thus unable to update those plugins from the GUI!\nThe LDAP plugin additionally has a new version available only after the core upgrade, but there is no rush in switching to that.\n\nIf you maintain a Jenkins plugin then please check whether it is marked anything less than compatible.\nIn some cases, there are already pull requests awaiting merge.\nIn other cases, some minor aspects of the source code have been identified that could be edited to improve compatibility.\n\nWe expect to see a bit of disruption from these changes\nbut hope that in the long run they will save time for core and plugin developers\nand lead to a more secure and stable tool.\nPlease reach out on the developers’ list with any questions or suggestions.","title":"Spring and XStream updates (breaking changes!)","tags":["jenkins","core","developer"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/authors/jglick","twitter":"tyvole"}]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"a4d05a2d-a0a0-5795-a164-1b18cbfae9a3","slug":"/blog/2020/11/10/major-changes-in-weekly-releases/","strippedHtml":"Recently we have selected Jenkins 2.263 as a new baseline for the LTS release line, with ETA in December 2020.\nIt allows delivering significant and in some cases breaking changes which have been previously on hold.\nBeginning with the Jenkins 2.264 release on October 27, 2020, we’ve entered a period where the Jenkins weekly releases will include more significant changes than usual.\nThat period of more significant changes is expected to continue for a month or more.\nAs you may have seen from the release community ratings, there might be regressions and instabilities during this period.\n\nWe’re excited for the changes.\nThey help to improve user experience and to address the technical debt accumulated in the Jenkins core.\nWe invite Jenkins users to evaluate those changes and provide feedback.\nThis is an especially valuable time for users and administrators to test the weekly releases and report issues with them,\nespecially on Jenkins test environments.\nIn the Jenkins project we have invested a lot in test coverage for the main functionality,\nbut in many cases we rely on user feedback for exotic plugins and environments not yet covered by our test automation.\n\nThe most notable changes include:\n\nConfiguration UI - Tables to Divs\n\nCore - Spring Security replaces Acegi Security\n\nCore - XStream unfork\n\nUI - JQuery upgrade\n\nConfiguration UI - Tables to Divs\n\nJenkins 2.264 is the first weekly release to include the \"Tables to Divs migration\" user interface work of Josh Soref, Tim Jacomb, and Felix Queiruga.\nIt is a significant step to improve forms in the Jenkins user interface (configuration pages, build parameters, etc.), especially for users on narrow devices like tablets and phones.\n\nA better user interface\n\nThe transition from using HTML table tags to using HTML div tags provides a more attractive user interface for all users and a much better experience for users on narrower devices.\nBefore the conversion from table tags to div tags, the\"Manage Jenkins\" page looked like this in a 1024x768 window:\n\nAfter the conversion, the\"Manage Jenkins\" page now looks like this:\n\nThe user interface improvements from the transition are a nice step forward for Jenkins.\nHowever, because the user interface improvements require changes in plugins, we need your help.\n\nWe need users to test the latest weekly Jenkins releases with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\nPlease add the tables-to-divs-regression label to the issues.\nThe tables-to-divs-regression label makes it easier to find issues related to the tables to divs transition.\n\nPlugin developers\n\nSeveral plugins have already been identified that may need changes.\nSee the Jira epic for plugins that are likely to need changes for the new user interface layout.\nThe list of open tables-to-divs-regression issues can also be used to see plugins that need changes.\n\nIf you can assist with plugin testing and code changes, select one of the plugins from that epic, test it, and propose a pull request to help with this user interface transition.\nIf you’re not comfortable proposing a pull request, describe the problems you see in a bug report.\n\nA tables to divs migration guide is available.\nIt describes areas that typically need to be changed as part of the migration from tables to divs.\nIt also includes detailed examples that allow the plugin to continue supporting older Jenkins versions with table layouts and use div layouts for newer Jenkins versions.\n\nCore - Spring Security replaces Acegi Security\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the Spring Security libraries from the Acegi security libraries that Jesse Glick has proposed and developed through jep:227[Jenkins Enhancement Proposal 227].\n\nThis upgrade replaces the Acegi Security library with the current release of the Spring Security library.\nDetails of the change are described in jep:227[] and in the pull request.\n\nWe need users to test the latest Jenkins weekly releases with their plugins and watch for issues related to authentication.\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the Spring Security compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the Spring Security upgrade.\n\nCore - XStream unfork\n\nJenkins has been using a fork of the XStream serialization library to read and write XML files.\nThe XStream library was forked over 10 years ago and had a few fixes applied to it.\nUnfortunately, at that time the fixes were rejected by the upstream maintainers of XStream (unsupported patterns of API use) and the fork fell behind the upstream version.\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the upstream version of the XStream library that Jesse Glick has proposed and developed through jep:228[Jenkins Enhancement Proposal 228].\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the XStream compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the XStream upgrade.\n\nUI - JQuery upgrade\n\nJenkins uses a 1.x version of the jQuery user interface library for some of its components.\nFelix Queiruga has started the work to update that library to a current jQuery version.\n\nIt will arrive in a future Jenkins weekly release.\nWhen it arrives, it will be noted in the Jenkins weekly changelog.\n\nWhen the jQuery update arrives, We will need users to test the Jenkins weekly release with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\n\nCall to test\n\nThis is a great time to help the Jenkins project by testing the weekly releases.\nWe encourage you to test the user interface and the interactions that are most important to you.\nIf you find an issue, please report the issue so that others can benefit from your discovery.","title":"Jenkins 2.264+: Major changes in the weekly release line","tags":["jenkins","core","testing","ui"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-11-04T00:00:00.000Z","id":"507874d6-f29d-5e57-82cd-0383757359fc","slug":"/blog/2020/11/04/codeql/","strippedHtml":"A little over a month ago, GitHub announced the general availability of its code scanning solution.\nIt’s based on CodeQL, which makes it pretty easy to write queries for it and run them using the CodeQL GitHub action, CodeQL command line tools, or on lgtm.com.\n\nMany of the security vulnerabilities discovered in Jenkins plugins are fairly similar to each other, and unfortunately they’re usually specific to Jenkins, which means existing generic tools would not be able to discover them.\nSo I decided to write CodeQL queries for Jenkins-specific issues and invited maintainers to sign their plugins up for a \"private beta\" of code scanning for these issues.\n\nToday’s security advisory is the first one that includes findings discovered through that initiative.\nAll these issues were discovered with assistance by this tooling:\n\nSECURITY-2101 in AWS Global Configuration Plugin,\n\nSECURITY-2102 and SECURITY-2103 in Kubernetes Plugin,\n\nSECURITY-2104 and SECURITY-2115 in Mercurial Plugin,\n\nSECURITY-2110 in Azure Key Vault Plugin, and\n\nSECURITY-2126 in Active Directory Plugin\n\nWhile there were of course also false positives we had to review and mark as ignored, the integration with the GitHub UI made this pretty straightforward.\nOverall I’m very happy with the results so far, especially considering how new this initiative is.\n\nInterested in making the plugin you are maintaining more secure?\nSign up now by filing an INFRA issue in the github component and list the plugin repositories you’d like to have scanned.","title":"First results from using GitHub CodeQL to discover security vulnerabilities in Jenkins plugins","tags":["jenkins","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and member of the <a href=\"/security/#team\">Jenkins security team</a>.\nHe was the inaugural Jenkins security officer from 2015 to 2021.\nHe sometimes contributes to developer documentation and project infrastructure in his spare time.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2020-08-27T00:00:00.000Z","id":"ab88123c-a9df-5bf7-97c3-bc6cd5656a55","slug":"/blog/2020/08/27/winsw-yaml-support/","strippedHtml":"Hello, world! GSoC 2020 Phase 3 has ended now and it was a great period for the Jenkins Windows Services - YAML Configuration Support project.\nIn this blog post, I will announce the updates during the GSoC 2020 - Phase 2 and Phase 3. If you are not already aware of this project,\nI would recommend reading this blog post which was published after GSoC 2020 - Phase 1.\n\nProject Scope\n\nWindows Service Wrapper - YAML configuration support\n\nYAML schema validation\n\nNew CLI\n\nXML Schema validation\n\nYAML Configuration Support\n\nUnder WinSW - YAML configurations support, these tasks will be done.\n\nYAML to Object mapping\n\nAt the moment YAML object mapping is finished and merged.\nYou can find all the implementations in this Pull Request.\n\nExtend WinSW to support both XML and YAML\n\nThis task is already done and merged. Find the implementation in this Pull Request.\n\nYAML Configuration support for Extensions\n\nAt the moment there are 2 internal plugins in WinSW. RunAwayProcessKiller and SharedDirectoryMapper.\nWe allow users to provide configurations for those plugins in the same XML and YAML configuration file which is used to configure WinSW. This task is merged as well.\nPull Request\n\nYAML schema validation\n\nUsers can validate YAML configuration file against JSON schema file.\nUsers can use YAML utility tool from Visual Studio market place to validate YAML config file against JSON schema.\n\nKey updates in Phase 2 and Phase 3\n\nYAML Configuration structure\n\nEnvironment variables\n\nNow users can provide environment variables as a sequence of dictionaries that contains name and value for environment variables.\n\nTimeStamp values\n\nUsers can specify timestamp values in the same manner used in XML (e.g. 10 ms, 5 sec, 3 min)\n\nYAML configuration document was published. YAML Configuration Specification\n\nExtend the WinSW to support both XML and YAML\n\nYAML support for extensions\n\nYAML schema validation against JSON schema\n\nSample YAML Configuration File\n\nid: jenkins\nname: Jenkins\ndescription: This service runs Jenkins automation server.\nenv:\n    - name: JENKINS_HOME\n      value: '%LocalAppData%\\Jenkins.jenkins'\n    - name: LM_LICENSE_FILE\n      value: host1;host2\nexecutable: java\narguments: >-\n    -Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"E:\\Winsw Test\\yml6\\jenkins.war\" --httpPort=8081\nlog:\n    mode: rotate\nonFailure:\n    - action: restart\n      delay: 10 sec\n    - action: reboot\n      delay: 1 hour\nextensions:\n    - id: killOnStartup\n      enabled: yes\n      classname: WinSW.Plugins.RunawayProcessKiller.RunawayProcessKillerExtension\n      settings:\n            pidfile: '%BASE%\\pid.txt'\n            stopTimeOut: 5000\n            StoprootFirst: false\n    - id: mapNetworDirs\n      enabled: yes\n      classname: WinSW.Plugins.SharedDirectoryMapper.SharedDirectoryMapper\n      settings:\n            mapping:\n                - enabled: false\n                  label: N\n                  uncpath: \\\\UNC\n                - enabled: false\n                  label: M\n                  uncpath: \\\\UNC2\n\nNew CLI\n\nLet me explain in brief, why we need a new CLI.\nIn WinSW, we will keep both XML and YAML configuration support.\nBut according to the current implementation, the user can’t specify the configurations file explicitly.\nAlso, we want to let the user skip the schema validation as well.\nSo We decided to move into new CLI which is more structured with commands and options.\nPlease read my previous blog post to learn more about commands and options in the new CLI.\n\nKey updates in Phase 2 and Phase 3\n\nRemove the /redirect command\n\ntestwait command was removed and add the wait option to the test command.\n\nstopwait command was removed and add the wait option to the stop command.\n\nHow to try\n\nUser can configure the Windows Service Wrapper by both XML and YAML configuration files using the following steps.\n\nCreate the configuration file (XML or YAML).\n\nSave it with the same name as the Windows Service Wrapper executable name.\n\nPlace the configuration file inside the directory(or in a parent directory), where the Windows Service Wrapper executable is located.\n\nIf there are both XML and YAML configuraiton files, Windows Service Wrapper will be configured by the XML configuration file.\n\nGSoC 2020 Phase 2 Demo\n\nGSoC 2020 Phase 3 Demo\n\nFuture Works\n\nXML Schema validation\n\nXML configuration file will be validated with the XSD file.\nI have started working on this feature and you can find the implementation in this Pull Request.\n\nYAML Configuration validate on startup\n\nHow to contribute\n\nYou can find the GitHub repository in this link.\nIssues and Pull requests are always welcome. Also, you can communicate with us in the WinSW Gitter channel,\nwhich is a great way to get in touch and there are project sync up meetings every Tuesday at 13:30 UTC on the Gitter channel.\n\nSome useful links\n\nPresentation Slides\n\nProject Page\n\nProject Repository\n\nFeature preview\n\nGitter Channel\n\nYamlDotNet library\n\nCommand Line Parser library","title":"Jenkins Windows Services: YAML Configuration Support - GSoC Project Results","tags":["winsw","windows","jenkins","gsoc","gsoc2020","platform-sig"],"authors":[{"avatar":null,"blog":null,"github":"buddhikac96","html":"","id":"buddhikac96","irc":null,"linkedin":null,"name":"Buddhika Chathuranga","slug":"/blog/authors/buddhikac96","twitter":null}]}},{"node":{"date":"2020-07-08T00:00:00.000Z","id":"e374d21c-96c4-5212-b662-0867a675e5a2","slug":"/blog/2020/07/08/winsw-yaml-support/","strippedHtml":"Hello all, I am Buddhika Chathuranga from Sri Lanka and I am a final year undergraduate at the Faculty of IT, University of Moratuwa. I am participating in GSoC 2020 with Jenkins.\nI am working on the Windows Service Wrapper Project.\nSo the Coding Phase 01 of GSoC 2020 is now over and this blog post describes what I have done so far.\n\nWindows Service Wrapper is an executable, which we can use to run applications as Windows Services on Windows machines, which has almost one million downloads.\nIn Jenkins, we use Windows service wrapper to run Jenkins server and agents as Windows services to gain more robustness.\nThis feature is bundled into Jenkins’s core. Currently, the Windows Service wrapper is configured by an XML file.\nHowever, there is a limited number of configuration checks and there is no XML schema.\n\nXML is not such a human-friendly way to do that. It is quite verbose and not easy to identify the schema without some effort.\nUsually, users misconfigure the service wrapper. This is a sample XML configuration file that we can use to provide configurations to Windows Service Wrapper.\n\nSample XML Configuration File\n\njenkins\nJenkins\nThis service runs Jenkins automation server.\n\nC:\\Program Files\\Java\\jdk1.8.0_201\\bin\\java.exe\n-Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"C:\\Program Files\\Jenkins\\jenkins.war\" --httpPort=8081 --webroot=\"%LocalAppData%\\Jenkinswar\"\nrotate\n\n%LocalAppData%\\Jenkinsjenkins.pid\n10000\nfalse\n\nThe usage of YAML could simplify configuration management in Jenkins, especially when automated and configuration management tools are used.\nSo what we are doing under GSoC - 2020 is to update the Windows Service Wrapper to support YAML configurations.\nAfter finishing this project, users will be able to provide configurations to the Windows Service Wrapper as a YAML file.\n\nThis is a sample YAML configuration file for Windows Service Wrapper and you can see it is less verbose than XML or JSON and much more human friendly.\nUsers can read and edit this without a big effort.\n\nSample YAML Configuration File\n\nid: jenkins\nname: Jenkins\ndescription: This service runs Jenkins automation server.\nenv:\n    _name: JENKINS_HOME\n    _value: '%LocalAppData%\\Jenkins.jenkins'\nexecutable: 'C:\\Program Files\\Java\\jdk1.8.0_201\\bin\\java.exe'\narguments: >-\n    -Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle\n    -jar \"C:\\Program Files\\Jenkins\\jenkins.war\" --httpPort=8081 --webroot=\"%LocalAppData%\\Jenkinswar\"\nlogmode: rotate\nonfailure:\n    _action: restart\nextensions:\n    -\n        pidfile: '%LocalAppData%\\Jenkinsjenkins.pid'\n        stopTimeout: '10000'\n        stopParentFirst: 'false'\n        _enabled: 'true'\n        _className: winsw.Plugins.RunawayProcessKiller.RunawayProcessKillerExtension\n        _id: killOnStartup\n\nAdvantages of YAML as a configuration file\n\nIt is less verbose and much more human friendly than XML.\n\nSince YAML is not using extra delimiters, it is lightweight.\n\nNowadays YAML has become more popular among configuration management tools.\n\nProject Scope\n\nDuring this project, I will add the following features to Windows Service Wrapper.\n\nYAML Configuration support\n\nYAML Schema validation\n\nNew CLI for the Windows Service Wrapper\n\nSupport for XML Schema validation via XML Schema Definition (XSD)\n\nPhase 01 Updates\n\nIn GSoC - 2020 phase 01, I have done the following updates to the Windows Service Wrapper.\n\nProject Structure overview document. (Published)\n\nYAML configurations support (Not released yet) - Pull Request\n\nNew CLI (Not released yet) - Pull Request\n\nXML Schema validation (Not released yet) - Pull Request\n\nYou can find Phase 01 Demo slides in this link.\n\nBelow you can find more details about the deliverables listed above.\n\nProject Structure overview\n\nThe project structure overview document describes how files and directories are organized in the Windows Service Wrapper project.\nIt will help contributors as well as users, to understand the codebase easily.\nAlso, it helps me a lot to understand the codebase. You can find the document from the given link.\n\nYAML configurations support\n\nAs I explained before, in this project, configurations will be provided as a YAML file.\nI used YamlDotNet library which has more than 2.2k stars on GitHub, to deserialize the YAML file into an Object graph.\nIn this YAML file, users can specify configurations in a more structured way than in XML configuration files.\nAs an example, now users can specify all the log related configurations under the log config.\nUsers can specify all service account related configurations under serviceaccount config etc.\n\nAt the moment, I am working on a design document for YAML configuration support. I will add it to the GitHub Issue once ready\n\nNew CLI\n\nBefore moving into Phase 01 updates, it’s better to explain why we needed a new CLI for Windows Service Wrapper.\nIn the early phases of Windows Service Wrapper, we will keep the XML configuration support as well.\nSo we should allow users to specify the configurations file separately.\nThe current approach is, configurations file should be in the same directory, where Windows Service Wrapper executable exists and the file name of the XML file should be the same as the Windows Service Wrapper executable file name.\nAlso, users should be able to redirect logs if they need to and they should be allowed to elevate command prompt using Windows Service Wrapper.\nAlso, we thought that it’s better to allow users to skip schema validation if they needed. So we decided to move into a new CLI.\n\nAs I explained, after releasing this, users will have options in addition to commands.\nIt will make the WinSW CLI more flexible so that we can easily extend it later. These are the options users are allowed to use.\nThese options are available with all the commands except help and version\n\n--redirect / -r [string]\n\nUsers can specify the redirect path for the logs if needed\n\nNot required | Default value is null\n\n--elevated / -e [boolean]\n\nElevate the command prompt before executing the command\n\nNot required | Default value is false\n\n--configFile / -c [string]\n\nUsers can specify the configurations file as a path\n\nNot Required | Default value is null\n\n--skipConfigValidation / -s [boolean]\n\nUsers can skip schema validation for configurations file if needed\n\nNot required | Default value is true\n\n--help / -h\n\nUser can find what options are available with a particular command with this option\n\nThis option is available with the install command\n\n--profile / -f [boolean]\n\nIf this option is true, then users can provide a service account for installation explicitly.\n\nNot required | Default value is false\n\nWe used commandlineparser/commandline library to parse the command line argument which has more than 2k stars in GitHub. At a glance, the library is compatible with .NET Framework 4.0+, Mono 2.1+ Profile, .NET Standard, and .NET Core.\n\nXML Schema validation\n\nAs I mentioned before, there was no schema validation for XML in Windows Service Wrapper.\nHence, I was working on schema validation for XML. I use XSD to validate XML files. The XSD file will be shipped as an embedded resource with the executable.\nYou can find the XSD file in my pull request.\n\nFuture updates\n\nIn the next phase, for GSoC 2020 the listed deliverables features will be released and the YAML schema validation feature will be added.\nAlso, we hope to publish a design document for the new features, which will help contributors.\n\nHow to contribute\n\nYou can find the GitHub repository in this link. Issues and Pull requests are always welcome.\nAlso, you can communicate with us in the WinSW Gitter channel, which is a great way to get in touch and there are project sync up meetings every Tuesday at 13:30 UTC on the Gitter channel.\n\nSome useful links\n\nProject Page\n\nProject Repository\n\nGitter Channel\n\nYamlDotNet library\n\nCommand Line Parser library","title":"Windows Service Wrapper : YAML Configuration Support - GSoC Phase - 01 Updates","tags":["winsw","windows","jenkins","gsoc","gsoc2020"],"authors":[{"avatar":null,"blog":null,"github":"buddhikac96","html":"","id":"buddhikac96","irc":null,"linkedin":null,"name":"Buddhika Chathuranga","slug":"/blog/authors/buddhikac96","twitter":null}]}},{"node":{"date":"2020-03-30T00:00:00.000Z","id":"479ec095-b427-5e47-95a5-1bca6fbc97c5","slug":"/blog/2020/03/30/azure-key-vault-cred-provider/","strippedHtml":"Azure Key Vault is a product for securely managing keys, secrets and certificates.\n\nI’m happy to announce two new features in the Azure Key Vault plugin:\n\na credential provider to tightly link Jenkins and Azure Key Vault.\n\nhuge thanks to Jie Shen for contributing this\n\nintegration with the configuration-as-code plugin.\n\nThese changes were released in v1.8 but make sure to run the latest version of the plugin, there has been some fixes since then.\n\nSome advantages of using the credential provider rather than your own scripts:\n\nyour Jenkins jobs consume the credentials with no knowledge of Azure Key Vault, so they stay vendor-independent.\n\nthe provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Slack Notifications plugin.\n\ncredential usage is recorded in the central Jenkins credentials tracking log.\n\nJenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Azure Key Vault while consuming other credentials from your existing providers.\n\nNote: Currently only secret text credentials are supported via the credential provider, you can use the configuration-as-code integration to load the secret from Azure Key Vault into the System Credential Provider to work around this limitation.\n\nGetting started\n\nInstall the Azure Key Vault plugin\n\nThen you will need to configure the plugin.\n\nAzure authentication\n\nThere’s two types of authentication you can use 'Microsoft Azure Service Principal' or 'Managed Identities for Azure Resources'\n\nThe easiest one to set this up quickly with is the 'Microsoft Azure Service Principal',\n\n$ az ad sp create-for-rbac --name http://service-principal-name\nCreating a role assignment under the scope of \"/subscriptions/ff251390-d7c3-4d2f-8352-f9c6f0cc8f3b\"\n  Retrying role assignment creation: 1/36\n  Retrying role assignment creation: 2/36\n{\n  \"appId\": \"021b5050-9177-4268-a300-7880f2beede3\",\n  \"displayName\": \"service-principal-name\",\n  \"name\": \"http://service-principal-name\",\n  \"password\": \"d9d0d1ba-d16f-4e85-9b48-81ea45a46448\",\n  \"tenant\": \"7e593e3e-9a1e-4c3d-a26a-b5f71de28463\"\n}\n\nIf this doesn’t work then take a look at the Microsoft documentation for creating a service principal.\n\nNote: for production 'Managed Identities for Azure Resources' is more secure as there’s no password involved and you don’t need to worry about the service principal’s password or certificate expiring.\n\nVault setup\n\nYou need to create a vault and give your service principal access to it:\n\nRESOURCE_GROUP_NAME=my-resource-group\naz group create --location uksouth --name $RESOURCE_GROUP_NAME\n\nVAULT=my-vault # you will need a unique name for the vault\naz keyvault create --resource-group $RESOURCE_GROUP_NAME --name $VAULT\naz keyvault set-policy --resource-group $RESOURCE_GROUP_NAME --name $VAULT \\\n  --secret-permissions get list --spn http://service-principal-name\n\nJenkins credential\n\nThe next step is to configure the credential in Jenkins:\n\nclick 'Credentials'\n\nclick 'System' (it’ll appear below the Credentials link in the side bar)\n\nclick 'Global credentials (unrestricted)'\n\nclick 'Add Credentials'\n\nselect 'Microsoft Azure Service Principal'\n\nfill out the form from the credential created above, appId is 'Client ID', password is 'Client Secret'\n\nclick 'Verify Service Principal', you should see 'Successfully verified the Microsoft Azure Service Principal'.\n\nclick 'Save'\n\nJenkins Azure Key Vault plugin configuration\n\nYou now have a credential you can use to interact with Azure resources from Jenkins, now you need to configure the plugin:\n\ngo back to the Jenkins home page\n\nclick 'Manage Jenkins'\n\nclick 'Configure System'\n\nsearch for 'Azure Key Vault Plugin'\n\nenter your vault url and select your credential\n\nclick 'Save'\n\nStore a secret in Azure Key Vault\n\nFor the step after this you will need a secret, so let’s create one now:\n\n$ az keyvault secret set --vault-name $YOUR_VAULT --name secret-key --value my-super-secret\n\nCreate a pipeline\n\nInstall the Pipeline plugin if you don’t already have it.\n\nFrom the Jenkins home page, click 'New item', and then:\n\nenter a name, i.e. 'key-vault-test'\n\nclick on 'Pipeline'\n\nadd the following to the pipeline definition:\n\n// Declarative //\npipeline {\n  agent any\n  environment {\n    SECRET_KEY = credentials('secret-key')\n  }\n  stages {\n    stage('Foo') {\n      steps {\n        echo SECRET_KEY\n        echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n      }\n    }\n  }\n}\n\n// Scripted //\nwithCredentials([string(credentialsId: 'secret-key', variable: 'SECRET_KEY')]) {\n    echo SECRET_KEY\n    echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n}\n\nYou have now successfully retrieved a credential from Azure Key Vault using native Jenkins credentials integration.\n\nconfiguration-as-code integration\n\nThe Configuration as Code plugin has been designed as an opinionated way to configure Jenkins based on human-readable declarative configuration files. Writing such a file should be easy without being a Jenkins expert.\n\nFor many secrets the credential provider is enough,\nbut when integrating with other plugins you will likely need more than string credentials.\n\nYou can use the configuration-as-code plugin (aka JCasC) to allow integrating with other credential types.\n\nconfigure authentication\n\nAs the JCasC plugin runs during initial startup the Azure Key Vault credential provider needs to be configured before JCasC runs during startup.\n\nThe easiest way to do that is via environment variables set before Jenkins starts up:\n\nexport AZURE_KEYVAULT_URL=https://my.vault.azure.net\nexport AZURE_KEYVAULT_SP_CLIENT_ID=...\nexport AZURE_KEYVAULT_SP_CLIENT_SECRET=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\n\nSee the azure-keyvault documentation for other authentication options.\n\nYou will now be able to refer to Azure Key Vault secret IDs in your jenkins.yaml file:\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n        - usernamePassword:\n            description: \"GitHub\"\n            id: \"jenkins-github\"\n            password: \"${jenkins-github-apikey}\"\n            scope: GLOBAL\n            username: \"jenkinsadmin\"\n\nThanks for reading, send feedback on twitter using the tweet button in the top right, any issues or feature requests use GitHub issues.","title":"Introducing the Azure Key Vault Credentials Provider for Jenkins","tags":["jenkins","pipeline","security","azure","credentials","credential-provider","configuration-as-code"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja","twitter":"Tjaynz"}]}}]}},"pageContext":{"tag":"jenkins","limit":8,"skip":8,"numPages":5,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}