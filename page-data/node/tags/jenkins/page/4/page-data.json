{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/jenkins/page/4",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-01-09T00:00:00.000Z","id":"2bba9081-9075-5138-b4bd-6bcf248a769e","slug":"/blog/2019/01/09/jenkins-user-conference-china-shenzhen-update/","strippedHtml":"On November 3rd, 2018 the Jenkins User Conference China (JUCC) met Jenkins users in Shenzhen which is the most burgeoning city in China.\nIt was the first time to hold JUCC in Shenzhen.\nWe held JUCC along with DevOps International Summit, which is the biggest DevOps event in China.\nMore than 200 attendees gathered at JUCC Shenzhen to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.\n\nBelow, I am sharing pictures and some of the topics discussed at the event:\n\nYu Gu from Accenture presented New challenges for DevOps in Cloud Native.\n\nPeng Wang from Meituan which is the biggest group-buying website in China much like Groupon presented\nThe continuous delivery toolchains based on Jenkins for ten thousand times build per day.\n\nGuangming Zhou from Ctrip who is a Jenkins expert in China presented CD system in Ctrip.\n\nJiaqi Guo Jiaqi Guo from Kingston presented DevOps practices in large manufacturing industry.\n\nYaxing Li from Tencent presented How to support the CI CD requirements for thousands of products in Tencent based on Jenkins.\n\nMei Xiao from ZTE presented Fast integration practice for Android.\n\nJohn Willis presented Next Generation Infrastructure which included Kubernetes and  Istio practices.\n\nBC Shi from JD.com who is also a Jenkins Ambassador and the co-organizer of JUCC presented Pipeline 3.0  for DevOps toolchains.\nHe introduced the practices based on Jenkins and Jenkins X to build an end to end pipeline for DevOps from requirement to online service.\n\nWe’ve also released a DevOps tool map to recommend an excellent tool to the community.\n\nLastly, myself, Forest Jing co-organizer of JUCC and also am a Jenkins Ambassador interacted with the attendees.\n\nWe also organized the Jenkins workshop and Open space for the attendees.\nRuddy Li ,Yunhua Li , Yu Gu and Dingan Liang have worked together to run an open space to lead the attendees to discuss problems they met in DevOps and CD.\n\nHuaqiang Li who is a Certified Jenkins Engineer and CCJE has led the attendees to practice Jenkins functions for a whole afternoon.\n\nHere are more photos from our event, it was a fantastic JUCC in Shenzhen.\nThere were so much interest and appetite to learn about Jenkins and DevOps.\nWe are looking forward to doing this again next year.\n\nSlides from the event can be downloaded at PPT Download Address, password: sepe (the website is in Chinese).\n\nThank you to Alyssa and Maxwell’s help to organize this event.\nJenkins User Conference China continues and we hope to see many of you next year in China for our next JUCC.\nLet’s be Kung fu Jenkins!","title":"Jenkins User Conference China - Shenzhen Update","tags":["jenkins","jenkinsuserconference","chinese"],"authors":[{"avatar":null,"blog":null,"github":"ijyun","html":"","id":"ijyun","irc":null,"linkedin":null,"name":"Forest Jing（景韵）","slug":"/blog/authors/ijyun","twitter":null}]}},{"node":{"date":"2019-01-07T00:00:00.000Z","id":"4187a71c-adb8-54ce-90c9-c412101f2f56","slug":"/blog/2019/01/07/webhook-firewalls/","strippedHtml":"In this post I wanted to show how you can run Jenkins behind a firewall (which could be a corporate firewall, a NAT’ed network like you have at home) but still receive webhooks in real time from GitHub.com. You can generalise this to other services too - such as BitBucket or DockerHub, or anything really that emits webhooks, but the instructions will be for GitHub projects hosted on github.com.\n\nWhat are webhooks\n\nJust a very quick refresher on what webhooks are: Messages (often JSON, but not always) typically posted by HTTP(S) from a server to a client that is listening for events.\n\nThe events flow left to right, Jenkins sits there happily listing on paths like /github-webhook/ or /dockerhub-webhook/ etc for some HTTP request to tell it to wake up and do some work.\n\nGitHub/BitBucket may be reporting a new commit or PR, or DockerHub reporting an upstream image has changed. What all these things have in common is that they push to Jenkins, and expect to be able to push to it (ie that Jenkins is visible to them). This works great when the network is open - say GitHub Enterprise, or Jenkins is listening on the web.\n\nNot on the web\n\nThe trick is when something gets in the middle, say a firewall:\n\n( As is industry standard, all firewalls have to be a wall on fire. Please don’t somehow set bricks on fire in your organisation)\n\nThis is just the same when you fire up Jenkins on your laptop, and want to receive webhooks from github.com (a legitimate thing, perhaps to test out your setup, perhaps to run builds for iOS on a mac, or some corner of a network that is not exposed to the web). Unless your laptop is addressable to the whole web that is (not likely), or your network is configured just right, the webhooks won’t be able to flow.\n\nThis is fine - we can fall back to polling for changes. Except this is terrible. You burn through API quotas, and you don’t get changes in real time, and really no one is happy.\n\nSome problems are opportunities\n\nWe can both solve this problem, but also, view this is an opportunity. Having things not addressable on the web, or locked down in some default way is a feature, not a bug. You massively reduce your attack surface, and can have defence in depth:\n\nA Webhook forwarding service\n\nEnter the memorably named Smee. This is an OSS project provided by GitHub and also helpfully hosted as a service by GitHub. This can capture and forward webhooks for you. I’ll try to explain it with a diagram:\n\nGitHub pushes an event (via HTTPS/json in this case) to Smee.io (the funny thing with circles, which is on the public web and accessible from GitHub.com) - and Jenkins in turn subscribes to Smee with an outgoing connection from a client. Note the direction of the arrows: Jenkins only makes an outbound connection.\n\nThis is the important point: this will work as long as the firewall is one way (like a NAT typically is, and many networks). If the Jenkins side can’t connect to anything on the outside world - well, this won’t help with that of course (but that is not often the case).\n\nSetting it up\n\nStep 1: Firstly - go to https://smee.io/ and click “Start a new channel”:\n\nThis will give you a unique URL (which you should copy for later use):\n\nNext you should install the smee client next to where you have the Jenkins server running:\n\nnpm install --global smee-client\n\n(This will make the smee client/command available to receive and forward webhooks).\n\nNow start the smee client and point it to your Jenkins server. In this case I have it running on port 8080 (the default if you fire it up on your laptop, change both the port and the smee URL as needed):\n\nsmee --url https://smee.io/GSm1B40sRfBvSjYS --path /github-webhook/ --port 8080\n\nThis says to connect to the smee service, and forward webhooks to /github-webhook/ (that trailing slash is important, don’t miss it). Once this is running, you will see it log that it is connected and forwarding webhooks. Leave this command running for as long as you want to receive webhooks.\n\nNext, you need to configure a pipeline that makes use of github. In this case I set up one from scratch. You can skip this if you already have a pipeline setup:\n\nI then chose “GitHub” as the where the code is:\n\nThen choose your repository. This will set things up ready to receive webhooks from GitHub. (also if you have an existing pipeline setup, and it is using GitHub as the SCM source, that is also fine).\n\nThe final step is to tell GitHub to post webhook events for that repository (or organization, you can do that too) to Smee (which ultimately means Jenkins will receive them).\n\nGo to the settings tab for your GitHub repository, and then click “add webhook”:\n\nNext, configure the webhook:\n\nPaste in the “smee” URL you copied from the step above.\n\nChoose application/json as the content type\n\nTell it to send everything (you can pick and choose what events, but I just did that as simpler).\n\nPress Add Webhook (or update)\n\nIt should look something like this:\n\nOK - webhooks should be flowing now. You can make a change to your repository, and check that a build starts soon after:\n\nGood luck!","title":"Triggering builds with webhooks behind a secure firewall","tags":["jenkins","webhooks","security"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg","srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/77b35/michaelneale.jpg 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/d4a57/michaelneale.jpg 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/19e71/michaelneale.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/ef6ff/michaelneale.webp 32w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/8257c/michaelneale.webp 64w,\n/gatsby-jenkins-io/static/75c8520897a1db139d524965f5bb7ccc/6766a/michaelneale.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"michaelneale","html":"<div class=\"paragraph\">\n<p>Michael is a CD enthusiast with a interest in User Experience.\nHe is a co-founder of CloudBees and a long time OSS developer, and can often be found\nlurking around the jenkins-dev mailing list or #jenkins on irc (same nick as twitter name).\nBefore CloudBees he worked at Red Hat.</p>\n</div>","id":"michaelneale","irc":null,"linkedin":null,"name":"Michael Neale","slug":"/blog/authors/michaelneale","twitter":"michaelneale"}]}},{"node":{"date":"2018-09-12T00:00:00.000Z","id":"4f66e646-7f00-5fcb-825e-a751b21abc62","slug":"/blog/2018/09/12/2018-community-survey/","strippedHtml":"Take the 5th Annual DevOps and Jenkins Community Survey\n\nWith DevOps World | Jenkins World San Francisco right around the corner, CloudBees is excited to sponsor the 2018 DevOps and Jenkins Community Survey. We want to capture the details of your DevOps experience in order to provide valuable insights to the Jenkins Community and beyond. Our community is stronger together - and this look at our collective experience will reveal the big picture and shine a light on key trends. This year, as the Jenkins project continues to evolve with Jenkins X , Configuration as Code and more, your input is more critical than ever.\n\nLet’s look at what we learned in 2016 and 2017:\n\nIn 2016 we found that:\n\nJenkins continued to hold the position as a company standard orchestration solution.\n\n29% of respondents companies use Jenkins on more than 50 projects\n\nIn regards to SCM tools, Git continued the march to dominance:\n\nGit usage increased to 85%\n\nSubversion usage decreased to 35%\n\nWhen it comes to practices, Agile and CI seemed to be the standard, and CD adoption still had a ways to go:\n\n85% practiced Agile\n\n82% practiced CI\n\n61% practiced DevOps\n\n46% practiced CD\n\nIn 2017 respondents reported that:\n\nJenkins Pipeline gained widespread adoption with 89% of survey takers used pipeline or planned to use in 6 months or less.\n\nContainer technology was cemented as a key part of the CD/DevOps ecosystem, yet Kubernetes usage was just starting gain momentum at 20.15%:\n\nJenkins, CD, and DevOps are getting more attention from Architects with 39% of respondents identified as Architects, nearly double the previous year\n\nGit was the clear SCM of choice at 90%, increasing nearly 5% over last the previous year\n\nWhat will you and the community tell us this year?  Are more people practicing DevOps?  Is Kubernetes the leader in container orchestration?  Is pipeline the standard for creating workflows?  Take the survey and let’s find out!\n\nAs always, your personal information (name, email address and company) will NOT be used by CloudBees for sales or marketing and the survey results will be made publicly available to the Jenkins Community. We will also be publishing a blog series analyzing trends over the last 5 years and offering  predictions on the evolution of DevOps. If you’re curious about what insights your input will provide, see the results of last year’s 2017 survey.\n\nAs an added incentive to participate, CloudBees will enter participants into a drawing for a free pass to DevOps World | Jenkins World 2019 (1st prize, $1,199.00 value) or a $100 Amazon gift card (2nd prize)!\n\nThe survey will close at the end of October so grab a cup of coffee get started. We promise the survey will be done before your latte is.\n\nTake me to the survey.\n\nThere are laws that govern prize giveaways and eligibility; CloudBees has compiled all those fancy terms and conditions here.","title":"2018 DevOps|Jenkins Community Survey Now Open","tags":["jenkins","devops","jenkinsworld2018"],"authors":[{"avatar":null,"blog":null,"github":"bvdawson","html":"<div class=\"paragraph\">\n<p>DevOps dude at CloudBees.\nJenkins Marketing Manager.\nTools geek.</p>\n</div>","id":"bvdawson","irc":null,"linkedin":null,"name":"Brian Dawson","slug":"/blog/authors/bvdawson","twitter":"brianvdawson"}]}},{"node":{"date":"2018-08-29T00:00:00.000Z","id":"edd1abcd-b413-5696-b610-a81a6a7fdd9f","slug":"/blog/2018/08/29/day-of-jenkins-and-other-chances-to-meet-jcasc/","strippedHtml":"The Jenkins Configuration as Code plugin is reaching a stage when it is almost ready to be used in a production environment.\nAs a matter of fact, I know some living-on-the-edge users are already doing that.\nThe first release candidates are out and the official 1.0 is just around the corner.\n\nI’d like to use this chance to invite you to meet us and contribute to the plugin.\nThere will be plenty of opportunities this autumn.\n\nJenkins Configuration as Code (also called \"JCasC\") is a Jenkins plugin that allows you to store and maintain all your Jenkins configuration in yaml file.\nIt’s like Pipeline or Job DSL but for managing Jenkins.\n\nIn one of my blogposts,\nJenkins Configuration as Code - Automating an automation server,\nI provide a longer explanation of the plugin, and answer questions like\n“why did we decided to develop it?” and “why you may want to use it?”.\nI recommend you to read that one if you’re not familiar with the project yet.\n\nThe plugin has been presented at a number of meetups - by me but also other contributors.\nThis is the first open source project that I’ve actively participated in and I’m quite shocked - positively - to see how many people decided to join the effort and actively develop the plugin with us.\nNow it’s time to take it to the bigger stage and broader audience.\nSo together with Nicolas de Loof I’m gonna present the plugin at DevOps World | Jenkins World in San Francisco (19th of September)  and in Nice (24th of October) - yes, Jenkins World is coming to Europe.\n\nBut that’s not all!\nPraqma - the company I work for -\nhas organised a number of “Day of Jenkins” events around Scandinavia in past years.\nThis October they have decided to bring the events back with a theme: Day of Jenkins 2018 is\nDay of Jenkins [as code] .\nIt’s a two track one day event with presentations and hands-on sessions for users and a hackathon for contributors - in that specific case Configuration as Code Plugin’s contributors.\n\nDetailed agenda is available on the\nevent page -\nJenkins X, Jenkins Evergreen, Jenkins Configuration as Code and more waiting for you!\n\nI really can’t wait to hear what Kohsuke has to say and to introduce you to the plugin during the hands-on session I’ll run.\n\nHope to see you at least at one of those events!\n\nCome meet the Configuration as Code contributors, Nicolas de Loof and Ewelina Wilkosz at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Day of Jenkins, and other chances to meet JCasC","tags":["jenkins","jcasc","configuration as code"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/ba454d4a58aacd36c9c453da55b0a22a/ff5b9/ewelinawilkosz.jpg","srcSet":"/gatsby-jenkins-io/static/ba454d4a58aacd36c9c453da55b0a22a/3af71/ewelinawilkosz.jpg 32w,\n/gatsby-jenkins-io/static/ba454d4a58aacd36c9c453da55b0a22a/1e7bb/ewelinawilkosz.jpg 64w,\n/gatsby-jenkins-io/static/ba454d4a58aacd36c9c453da55b0a22a/ff5b9/ewelinawilkosz.jpg 128w,\n/gatsby-jenkins-io/static/ba454d4a58aacd36c9c453da55b0a22a/7b60f/ewelinawilkosz.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/ba454d4a58aacd36c9c453da55b0a22a/bf13b/ewelinawilkosz.webp 32w,\n/gatsby-jenkins-io/static/ba454d4a58aacd36c9c453da55b0a22a/9edd6/ewelinawilkosz.webp 64w,\n/gatsby-jenkins-io/static/ba454d4a58aacd36c9c453da55b0a22a/f5f75/ewelinawilkosz.webp 128w,\n/gatsby-jenkins-io/static/ba454d4a58aacd36c9c453da55b0a22a/ff962/ewelinawilkosz.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":null,"github":"ewelinawilkosz","html":"<div class=\"paragraph\">\n<p>Jenkins Contributor since 2017, when she got involved in Jenkins Configuration as Code Plugin development.\nVoted Most Valuable Contributor in 2018.\nShe has 14 years of experience in IT, currently working as a DevOps Engineer in Customer Success and Developer Relations at Merkely.\nBefore joining Merkely she spent 6 years working as a CI/CD Consultant. In that role she focused on solving numerous issues Jenkins users are facing daily - as developers, administrators, maintainers.\nJenkins Governance Board member.</p>\n</div>","id":"ewelinawilkosz","irc":null,"linkedin":null,"name":"Ewelina Wilkosz","slug":"/blog/authors/ewelinawilkosz","twitter":"WilkoszEwelina"}]}},{"node":{"date":"2018-04-25T00:00:00.000Z","id":"e34fdb6b-09c7-5772-a251-10cec0ccef26","slug":"/blog/2018/04/25/configuring-jenkins-pipeline-with-yaml-file/","strippedHtml":"A few years ago our CTO wrote about building a\nContinuous Integration server for Ruby On Rails using Jenkins and docker.\nThe solution has been our CI pipeline for the past years until we recently decided to\nmake an upgrade. Why?\n\nJenkins version was way out of date and it was getting difficult to\nupgrade\n\nWolox has grown significantly over the past years\nand we’ve been experiencing scaling issues\n\nVery few people knew how to fix any issues with the server\n\nConfiguring jobs was not an easy task and that made our project\nkickoff process slower\n\nMaking changes to the commands that each job runs was not easy and not\nmany people had permissions to do so. Wolox has a wide range of\nprojects, with a wide variety of languages which made this problem even\nbigger.\n\nTaking into account these problems, we started digging into the newest\nversion of Jenkins to see how we could improve our CI. We needed to\nbuild a new CI that could, at least, address the following:\n\nProjects must be built using Docker. Our projects depend on one or\nmultiple docker images to run (app, database, redis, etc)\n\nEasy to configure and replicate if necessary\n\nEasy to add a new project\n\nEasy to change the building steps. Everyone working on the project\nshould be able to change if they want to run npm install or yarn\ninstall.\n\nInstalling Jenkins and Docker\n\nInstalling Jenkins is straightforward. You can visit\nJenkins Installation page and choose the\noption that best suits your needs.\n\nHere are the steps we followed to install Jenkins in AWS:\n\nsudo rpm — import https://pkg.jenkins.io/debian/jenkins.io.key\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\nsudo yum install java-1.8.0 -y\nsudo yum remove java-1.7.0-openjdk -y\nsudo yum install jenkins -y\nsudo yum update -y\nsudo yum install -y docker\n\nAutomatically adding projects from Github\n\nAdding projects automatically from Github can be achieved using the\nGitHub Branch Source Plugin.\nIt allows Jenkins to scan a GitHub organization\nfor projects that match certain rules and add them to Jenkins\nautomatically. The only constraint that all branches must meet in order\nto be added is that they contain a Jenkinsfile that explains how to\nbuild the project.\n\nEasy to change configuration\n\nNot so easy to change configuration\n\nOne of the biggest pains we had with our previous Jenkins was the\ndifficulty of changing the steps necessary to build the project. If you\nlooked at a project’s build steps, you would find something like this:\n\n#!/bin/bash +x\nset -e\n\n# Remove unnecessary files\necho -e \"\\033[34mRemoving unnecessary files...\\033[0m\"\nrm -f log/*.log &> /dev/null || true &> /dev/null\nrm -rf public/uploads/* &> /dev/null || true &> /dev/null\n\n# Build Project\necho -e \"\\033[34mBuilding Project...\\033[0m\"\ndocker-compose --project-name=${JOB_NAME} build\n\n# Prepare test database\nCOMMAND=\"bundle exec rake db:drop db:create db:migrate\"\necho -e \"\\033[34mRunning: $COMMAND\\033[0m\"\ndocker-compose --project-name=${JOB_NAME} run  \\\n\t-e RAILS_ENV=test web $COMMAND\n\n# Run tests\nCOMMAND=\"bundle exec rspec spec\"\necho -e \"\\033[34mRunning: $COMMAND\\033[0m\"\nunbuffer docker-compose --project-name=${JOB_NAME} run web $COMMAND\n\n# Run rubocop lint\nCOMMAND=\"bundle exec rubocop app spec -R --format simple\"\necho -e \"\\033[34mRunning: $COMMAND\\033[0m\"\nunbuffer docker-compose --project-name=${JOB_NAME} run -e RUBYOPT=\"-Ku\" web $COMMAND\n\nAnd some post build steps that cleaned up the docker:\n\n#!/bin/bash +x\ndocker-compose --project-name=${JOB_NAME} stop &> /dev/null || true &> /dev/null\ndocker-compose --project-name=${JOB_NAME} rm --force &> /dev/null || true &> /dev/null\ndocker stop `docker ps -a -q -f status=exited` &> /dev/null || true &> /dev/null\ndocker rm -v `docker ps -a -q -f status=exited` &> /dev/null || true &> /dev/null\ndocker rmi `docker images --filter 'dangling=true' -q --no-trunc` &> /dev/null || true &> /dev/null\n\nAlthough these commands are not complex, changing any of them required\nsomeone with permissions to modify the job and an understanding ofwhat\nneeded to be done.\n\nJenkinsfile to the rescue…​ or not\n\nWith the current Jenkins version, we can take advantage of\nJenkins Pipeline and model our build\nflow in a file. This file is checked into the repository and, therefore,\nanyone with access to it can change the build steps. Yay!\n\nJenkins Pipeline even has support for:\n\nDocker and\nmultiple\nimages can be used for a build!\n\nSetting environment variables with withEnv and many other built -in\nfunctions that can be found\nhere.\n\nThis makes a perfect case for Wolox. We can have\nour build configuration in a file that’s checked into the repository and\ncan be changed by anyone with write access to it. However, a Jenkinsfile\nfor a simple rails project would look something like this:\n\n# sample Jenkinsfile. Might not compile\nnode {\n    checkout scm\n    withEnv(['MYTOOL_HOME=/usr/local/mytool']) {\n        docker.image(\"postgres:9.2\").withRun() { db ->\n            withEnv(['DB_USERNAME=postgres', 'DB_PASSWORD=', \"DB_HOST=db\", \"DB_PORT=5432\"]) {\n                docker.image(\"redis:X\").withRun() { redis ->\n                    withEnv([\"REDIS_URL=redis://redis\"]) {\n                        docker.build(imageName, \"--file .woloxci/Dockerfile .\").inside(\"--link ${db.id}:postgres --link ${redis.id}:redis\") {\n                            sh \"rake db:create\"\n                            sh \"rake db:migrate\"\n                            sh \"bundle exec rspec spec\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nThis file is not only difficult to read, but also difficult to change.\nIt’s quite easy to break things if you’re not familiar with Groovy and\neven easier if you know nothing about how Jenkins’ pipeline works.\nChanging or adding a new Docker image isn’t straightforward and might\nlead to confusion.\n\nConfiguring Jenkins Pipeline via YAML\n\nPersonally, I’ve always envied simple configuration files for CIs and\nthis time it was our chance to build CI that could be configured using a\nYAML file. After some analysis we concluded that a YAML like this one\nwould suffice:\n\nconfig:\n  dockerfile: .woloxci/Dockerfile\n  project_name: some-project-name\n\nservices:\n  - postgresql\n  - redis\n\nsteps:\n  analysis:\n    - bundle exec rubocop -R app spec --format simple\n    - bundle exec rubycritic --path ./analysis --minimum-score 80 --no-browser\n  setup_db:\n    - bundle exec rails db:create\n    - bundle exec rails db:schema:load\n  test:\n    - bundle exec rspec\n  security:\n    - bundle exec brakeman --exit-on-error\n  audit:\n    - bundle audit check --update\n\n\nenvironment:\n  RAILS_ENV: test\n  GIT_COMMITTER_NAME: a\n  GIT_COMMITTER_EMAIL: b\n  LANG: C.UTF-8\n\nIt outlines some basic configuration for the project, environment\nvariables that need to be present during the run, dependentservices, and\nour build steps.\n\nJenkinsfile + Shared Libraries = WoloxCI\n\nAfter investigating for a while about Jenkins and the pipeline, we found\nthat we could extend it with\nshared libraries.\nShared libraries are written in groovy and can be imported\ninto the pipeline and executed when necessary.\n\nIf you look carefully at this Jenkinsfile,\nwe see that the code is a chain of methods calls that receive a\nclosure, where we execute another method passing a new closure to it.\n\n# sample Jenkinsfile. Might not compile\nnode {\n    checkout scm\n    withEnv(['MYTOOL_HOME=/usr/local/mytool']) {\n        docker.image(\"postgres:9.2\").withRun() { db ->\n            withEnv(['DB_USERNAME=postgres', 'DB_PASSWORD=', \"DB_HOST=db\", \"DB_PORT=5432\"]) {\n                docker.image(\"redis:X\").withRun() { redis ->\n                    withEnv([\"REDIS_URL=redis://redis\"]) {\n                        docker.build(imageName, \"--file .woloxci/Dockerfile .\").inside(\"--link ${db.id}:postgres --link ${redis.id}:redis\") {\n                            sh \"rake db:create\"\n                            sh \"rake db:migrate\"\n                            sh \"bundle exec rspec spec\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nGroovy is flexible enough to allow this same declarative code to be\ncreated at runtime, making our dream of using a YAML to configure our\njob come true!\n\nIntroducing Wolox-CI\n\nThat’s how wolox-ci was born- our\nshared library for Jenkins!\n\nWith wolox-ci, our Jenkinsfile is now\nreduced to:\n\n@Library('wolox-ci') _\n\nnode {\n\n  checkout scm\n\n  woloxCi('.woloxci/config.yml');\n}\n\nNow it simply checks out the code and then calls wolox-ci. The library\nreads yaml file like this one\n\nconfig:\n  dockerfile: .woloxci/Dockerfile\n  project_name: some-project-name\n\nservices:\n  - postgresql\n  - redis\n\nsteps:\n  analysis:\n    - bundle exec rubocop -R app spec --format simple\n    - bundle exec rubycritic --path ./analysis --minimum-score 80 --no-browser\n  setup_db:\n    - bundle exec rails db:create\n    - bundle exec rails db:schema:load\n  test:\n    - bundle exec rspec\n  security:\n    - bundle exec brakeman --exit-on-error\n  audit:\n    - bundle audit check --update\n\n\nenvironment:\n  RAILS_ENV: test\n  GIT_COMMITTER_NAME: a\n  GIT_COMMITTER_EMAIL: b\n  LANG: C.UTF-8\n\nand builds the Jenkinsfile to get your job running on the fly.\n\nThe nice part about having a shared library is that we can extend and\nfix our library in a centralized way. Once we add new code, the library\nis automatically updated in Jenkins which will notify all of our jobs\nwith the update.\n\nSince we have projects in different languages we use Docker to build the\ntesting environment. WoloxCI assumes there is a Dockerfile to build and\nwill run all the specified commands inside the container.\n\nWoloxci config.yml\n\nConfig\n\nThe first part of the config.yml file specifies some basic\nconfiguration: project’s name and Dockerfile location. The Dockerfile is\nused to build the image where the commands will be run.\n\nServices\n\nThis section describes which services will be exposed to the container.\nOut of the box, WoloxCI has support for postgresql, mssql and\nredis. You can also specify the docker image version you want! It is\nnot hard to add a new service. You just need to add the corresponding\nfile at\n\nhttps://github.com/Wolox/wolox-ci/tree/development/vars\n\nand modify how the services are parsed\n\nhttps://github.com/Wolox/wolox-ci/blob/development/src/com/wolox/parser/ConfigParser.groovy#L76\n\nSteps\n\nThe listed commands in this section will run inside the Docker\ncontainer. As a result, you’ll see each of the steps on the Jenkins UI.\n\nEnvironment\n\nIf you need some environment variables during your build, you can\nspecify them here. Whatever variable you set will be available inside\nthe Docker container when your commands listed in the steps section\ndescribed above.\n\nWrapping up\n\nWoloxCI is still being tested with a not-so-small sample of our\nprojects. The possibility of changing the build steps through a YAML\nfile makes it accessible for everyone and that is a great improvement in\nour CI workflow.\n\nDocker gives us the possibility of easily changing the programming\nlanguage without making any changes to our Jenkins installation and\nJenkins’ Github Organization feature automatically adds new projects\nwhen a new repository with a Jenkinsfile is detected.\n\nAll of these improvements have reduced the time we spend maintaining\nJenkins significantly and give us the possibility of easily scaling\nwithout any extra configuration.\n\nThis library is working in our CI but it still can be improved.\nIf you would like to add features, feel free to\ncontribute!","title":"Configuring a Jenkins Pipeline using a YAML file","tags":["jenkins","pipelines","yaml","sharedlibrary"],"authors":[{"avatar":null,"blog":null,"github":"mdesanti","html":"<div class=\"paragraph\">\n<p>Head of Infrastructure &amp; Cloud at <a href=\"https://www.wolox.com.ar\">Wolox</a></p>\n</div>","id":"mdesanti","irc":null,"linkedin":null,"name":"Matias De Santi","slug":"/blog/authors/mdesanti","twitter":"mdsanti"}]}},{"node":{"date":"2018-01-21T00:00:00.000Z","id":"4b83704c-93fe-50dd-86b2-f971dac01a43","slug":"/blog/2018/01/21/overhaul-of-manage-jenkins-page/","strippedHtml":"Overview\n\nRecently some UI improvements around the Manage Jenkins page have been introduced. The visual changes are very subtle but behind them, there are interesting benefits.\n\nSome of the goals that we have tried to achieve:\n\nApplying a semantic HTML\n\nRemoving the tag usage for implementing layouts and content structures. Read this article if you want to know reasons and/or arguments.\n\nSmall re-styling focused on spacing, margins, composition, etc..\n\nAccessibility\n\nIn order to provide a quick overview of the visual changes, let’s take a look at these screenshots.\n\nSystem tray with administrative messages (before)\n\nSystem tray with administrative messages (after)\n\nManage Jenkins page (before)\n\nManage Jenkins page (after)\n\nInformation about how this change can affect the current implementations of Administrative Monitors can be found in the following section\n\nFor core developers\n\nLet’s use a real example for showing how this proposal works.\n\nThis is the original UI implementation of HudsonHomeDiskUsageMonitor.java :\n\n${%blurb(app.rootDir)}\n\nAnd this is the proposed change:\n\n${%blurb(app.rootDir)}\n\nSome highlights:\n\nNo more ad hoc UI compositions\n\nNo more custom CSS classes when Jenkins project is already using Bootstrap for many different things\n\nBased on Bootstrap Alert\n\nAll administrative monitors defined in Jenkins core have been adapted as part of this proposal.\n\nFor plugin developers\n\nNo changes are really needed, but we do recommend you to adapt your plugins to this proposal so Jenkins users have a better user experience.\n\nTaking into account that you want to keep backward compatibility, you will need some changes.\n\nIn your implementation of Administrative Monitor, add this helper method:\n\n/**\n * This method can be removed when the baseline is updated to 2.103\n *\n * @return If this version of the plugin is running on a Jenkins version where JENKINS-43786 is included.\n */\n @Restricted(DoNotUse.class)\n public boolean isTheNewDesignAvailable() {\n    if (Jenkins.getVersion().isNewerThan(new VersionNumber(\"2.103\"))) {\n        return true;\n    }\n    return false;\n}\n\nIn your view (a.k.a. Jelly file or Groovy file):\n\nSSH Host Key Verifiers are not configured for all SSH agents on this Jenkins instance. This could leave these agents open to man-in-the-middle attacks. Update your agent configuration to resolve this.\n\nSSH Host Key Verifiers are not configured for all SSH agents on this Jenkins instance. This could leave these agents open to man-in-the-middle attacks. Update your agent configuration to resolve this.\n\nIf you don’t want to keep a strict backward compatibility, the impact is minimal. In fact, you can see an example on GitHub Plugin.\n\nSome helpful references:\n\nJIRA issue where the proposal was tracked\n\nPull Request with the change in Jenkins core. You can find several screenshots\n\nPull Request for adapting SSH Agent Plugin\n\nDo not hesitate to ping me if you decide to adapt your Administrative Monitors.","title":"Overhaul of Manage Jenkins page","tags":["jenkins","ui","restyling","upgrade"],"authors":[{"avatar":null,"blog":null,"github":"recena","html":"","id":"recena","irc":null,"linkedin":null,"name":"Manuel Recena","slug":"/blog/authors/recena","twitter":null}]}},{"node":{"date":"2017-08-29T00:00:00.000Z","id":"76ba3f00-38ff-54a3-ba40-edf86486b934","slug":"/blog/2017/08/29/2017-community-survey/","strippedHtml":"This is a guest post by Brian\nDawson on behalf of CloudBees, where he works as a DevOps Evangelist\nresponsible for developing and sharing continuous delivery and DevOps best\npractices. He also serves as the CloudBees Product Marketing Manager for\nJenkins.\n\nOnce again it’s that time of year when CloudBees sponsors the\nJenkins Community Survey to\nassist the community with gathering objective insights into how jenkins is\nbeing used and what users would like to see in the Jenkins project.\n\nYour personal information (name, email address and company) will NOT be used by CloudBees for\nsales or marketing.\n\nAs an added incentive to take the survey, CloudBees will enter participants\ninto a drawing for a free pass to Jenkins World 2018 (1st prize) and a $100\nAmazon Gift Card (2nd prize). The survey will close at the end of September, so\nclick the link at the end of the blog post to get started!\n\nAll participants will be able to access reports summarizing survey results. If\nyou’re curious about what insights your input will provide, see the results of\nlast year’s 2016 survey:\n\n2016 Community Survey Results\n\nYour feedback helps capture a bigger picture of\ncommunity trends and needs. There are laws that govern prize giveaways and\neligibility; CloudBees has compiled all those fancy\nterms and conditions here.\n\nPlease take the survey and let your voice be heard - it will take less than 10\nminutes.\n\nTake me to the survey","title":"Take the 2017 Jenkins Survey!","tags":["jenkins"],"authors":[{"avatar":null,"blog":null,"github":"bvdawson","html":"<div class=\"paragraph\">\n<p>DevOps dude at CloudBees.\nJenkins Marketing Manager.\nTools geek.</p>\n</div>","id":"bvdawson","irc":null,"linkedin":null,"name":"Brian Dawson","slug":"/blog/authors/bvdawson","twitter":"brianvdawson"}]}},{"node":{"date":"2017-07-21T00:00:00.000Z","id":"215b578b-be74-5ce1-b9f3-38b9bfc35f5c","slug":"/blog/2017/07/21/scaling-jenkins-with-kubernetes-on-google-container-engine/","strippedHtml":"This is a guest post by Guillaume Laforge,\nDeveloper Advocate for Google Cloud\n\nLast week, I had the pleasure to speak at the\nJenkins Community Day conference, in Paris,\norganized by my friends from JFrog,\nprovider of awesome tools for software management and distribution.\nI covered how to scale Jenkins with Kubernetes on\nGoogle Container Engine.\n\nFor the impatient, here are the slides of the presentation I’ve given:\n\nBut let’s step back a little. In this article, I’d like to share with you why you would want to run Jenkins in the cloud,\nas well as give you some pointers to interesting resources on the topic.\n\nWhy running Jenkins in the cloud?\n\nSo why running Jenkins in the cloud? First of all, imagine your small team, working on a single project.\nYou have your own little server, running under a desk somewhere, happily building your application on each commit,\na few times a day. So far so good, your build machine running Jenkins isn’t too busy, and stays idle most of the day.\n\nLet’s do some bottom of the napkin calculations. Let’s say you have a team of 3 developers,\ncommitting roughly 4 times a day, on one single project, and the build takes roughly 10 minutes to go.\n\n3 developers * 4 commits / day / developer * 10 minutes build time * 1 project = 1 hour 20 minutes\n\nSo far so good, your server indeed stays idle most of the day. Usually, at most,\nyour developers will wait just 10 minutes to see the result of their work.\n\nBut your team is growing to 10 persons, the team is still as productive, but the project becoming bigger,\nthe build time goes up to 15 minutes:\n\n10 developers * 4 commits / day / developer * 15 minutes build time * 1 project = 10 hours\n\nYou’re already at 10 hours build time, so your server is busy the whole day, and at times,\nyou might have several build going on at the same time, using several CPU cores in parallel.\nAnd instead of building in 15 minutes, sometimes, the build might take longer, or your build might be queued.\nSo in theory, it might be 15 minutes, but in practice, it could be half an hour because of the length of the queue\nor the longer time to build parallel projects.\n\nNow, the company is successful, and has two projects instead of one (think a backend and a mobile app).\nYour teams grow further up to 20 developers per project. The developers are a little less productive\nbecause of the size of the codebase and project, so they only commit 3 times a day.\nThe build takes more time too, at 20 minutes (in ideal time). Let’s do some math again:\n\n20 developers * 3 commits / day / developer * 20 minutes build time * 2 projects = 40 hours\n\nWoh, that’s already 40 hours of total build time, if all the builds are run serially.\nFortunately, our server is multi-core, but still, there are certainly already many builds that are enqueued,\nand many of them, perhaps up to 2-3 or perhaps even 4 could be run in parallel.\nBut as we said, the build queue increases further, the real effective time of build is certainly longer than 30 minutes.\nPerhaps at times, developers won’t see the result of their developments before at least an hour, if not more.\n\nOne last calculation? With team sizes of 30 developers, decreased productivity of 2 commits, 25 build time,\nand 3 projects? And you’ll get 75 hours total build time. You may start creating a little build farm,\nwith a controller and several build agents. But you also increase the burden of server management.\nAlso, if you move towards a full Continuous Delivery or Continuous Deployment approach,\nyou may further increase your build times to go up to deployment, make more but smaller commits, etc.\nYou could think of running builds less often, or even on a nightly basis, to cope with the demand, but then,\nyour company is less agile, and the time-to-market for fixes of new features might increase,\nand your developers may also become more frustrated because they are developing in the blind,\nnot knowing before the next day if their work was successful or not.\n\nWith my calculations, you might think that it makes more sense for big companies, with tons of projects and developers.\nThis is quite true, but when you’re a startup, you also want to avoid taking care of local server management,\nprovisioning, etc. You want to be agile, and use only compute resources you need for the time you need them.\nSo even if you’re a small startup, a small team, it might still make sense to take advantage of the cloud.\nYou pay only for the actual time taken by your builds as the build agent containers are automatically provisioned\nand decommissioned. The builds can scale up via Kubernetes, as you need more (or less) CPU time for building everything.\n\nAnd this is why I was happy to dive into scaling Jenkins in the cloud. For that purpose,\nI decided to go with building with containers, with Kubernetes, as my app was also containerized as well.\nGoogle Cloud offers Container Engine, which is basically just Kubernetes in the cloud.\n\nUseful pointers\n\nI based my presentation and demo on some great solutions that are published on the Google Cloud documentation portal.\nLet me give you some pointers.\n\nOverview of Jenkins on Container Engine\n\nSetting up Jenkins on Container Engine\n\nConfiguring Jenkins for Container Engine\n\nContinuous Deployment to Container Engine using Jenkins\n\nLab: Build a Continuous Deployment Pipeline with Jenkins and Kubernetes\n\nThe latter one is the tutorial I actually followed for the demo that I presented during the conference.\nIt’s a simple Go application, with a frontend and backend.\nIt’s continuously build, on each commit (well, every minute to check if there’s a new commit),\nand deployed automatically in different environments: dev, canary, production.\nThe sources of the project are stored in Cloud Source Repository (it can be mirrored from Github, for example).\nThe containers are stored in Cloud Container Registry.\nAnd both the Jenkins controller and agents, as well as the application are running inside Kubernetes clusters in Container Engine.\n\nSummary and perspective\n\nDon’t bother with managing servers! Quickly, you’ll run out of CPU cycles,\nand you’ll have happier developers with builds that are super snappy!\n\nAnd for the record, at Google, dev teams are also running Jenkins!\nThere was a presentation ( video and\nslides\navailable) given last year by David Hoover at Jenkins World\ntalking about how developers inside Google are running hundreds of build agents to build projects on various platforms.","title":"Scaling Jenkins with Kubernetes on Google Container Engine","tags":["jenkins","kubernetes","jenkins-community-day-paris"],"authors":[{"avatar":null,"blog":"https://glaforge.appspot.com/","github":"glaforge","html":"","id":"glaforge","irc":null,"linkedin":null,"name":"Guillaume Laforge","slug":"/blog/authors/glaforge","twitter":"glaforge"}]}}]}},"pageContext":{"tag":"jenkins","limit":8,"skip":24,"numPages":5,"currentPage":4}},
    "staticQueryHashes": ["3649515864"]}