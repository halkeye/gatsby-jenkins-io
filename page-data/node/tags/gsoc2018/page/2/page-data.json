{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/gsoc2018/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-06-15T00:00:00.000Z","id":"099fdcfb-2f30-562a-9c7c-67ed48398003","slug":"/blog/2018/06/15/simple-pull-request-plugin/","strippedHtml":"About me\n\nI am Abhishek Gautam, 3rd year student from Visvesvaraya National Institute of\ntechnology, India, Nagpur. I was a member of ACM Chapter and Google student developer club of my\ncollege. I am passionate about automation.\n\nMentors\n\nOleg Nenashev (Org Admin)\n\nMartin d’Anjou\n\nKristin Whetstone\n\nJeff Knurek\n\nProject Summary\n\nThis is a GSoC 2018 project.\n\nThis project aims to develop a pull request Job Plugin. Users should be able to\nconfigure job type using YAML file placed in root directory of the\nGit repository being the subject of the pull request. The plugin should interact with various\nplatforms like Bitbucket, Github, Gitlab, etc whenever a pull request is created or updated.\n\nPlugin detects the presence of certain types of the report at conventional locations,\nand publish them automatically. If the reports are not present at conventional location,\ncan specify the location using the YAML file.\n\nBenefits to the community\n\nProject administrators will be able to handle builds for pull requests more easily.\n\nBuild specifications for pull request can be written in a concise declarative format.\n\nBuild reports will be automatically published to Github, Bitbucket, etc.\n\nBuild status updates will be sent to git servers automatically.\n\nUsers will not have to deal with pipeline code.\n\nIf there will be no merge conflicts or build failures, the PR can be merged into target branch.\n\nPrior work\n\nTravis YML Plugin :\nDesigned to run .travis.yml as Jenkins pipeline job.\nTravis-CI does not support external pull requests. Jenkins environment\nis different than Travis and does not always make sense to use configurations\ndefined for other environment in Jenkins. Also maintenance of this is slowed\ndown and last commit for this plugin was on 14 Nov 2016.\nClick here to check.\n\nCodeShip Plugin :\nThis plugin is designed to convert codeship \"steps.yaml\" and\n\"services.yaml\" to scripted pipeline code. This plugin has never been released.\n\nJenkins pipeline builder :\nThis is a external non-Java-based tool, which cannot be easily converted to a Jenkins plugin.\n\nDesign\n\nThis plugin will be developed on the top of the MultiBranch Pipeline plugin.\n\nFor now the plugin is bulding branches and Pull request both using Jenkinsfile.yaml,\nbut this plugin is inclined to use for pull requests. This will be fixed in next coding phase.\n\nThis plugin is following below steps for now:\n\nclone target repo\n\ncheckout to target branch\n\nfetch the source branch\n\nmerge source-branch\n\ncall user call user script to build the repo.\n\npush changes of pull request to target branch\n\npublish test reports\n\nPlugin will start above steps if and only if the pull request is\nmergeable, to avoid merge conflicts while merging the source branch to target\nbranch. Pull request’s payload contains information if the pull request changes\nare mergeable or not hence, the pull request is mergebale or not can also be\ndecided by the payload of webhook also.\n\nHow to run the Plugin\n\nSee How to run the demo\nand set credentials, owner and repository on your own and you will be good to go.\n\nExample branch-source configuration.\n\nPhase 1 features\n\nUsers are able to select the Jenkinsfile.yaml file as the source for the Pipeline configuration.\n\nGit Push step\n\nharvest results and reports (and post in the pull request)\n\njunit()\n\nfindbugs()\n\narchiveArtifacts()\n\nBasic interface to parse and get build specifications from YAML file.\n\nThings decided\n\nTo build the plugin on the top of multibranch pipeline plugin. As that plugin has implementation of\n\nNice interface to show different branch and pull requests build separately with use of suitable plugins like Github, Bitbucket.\n\nDetect trusted revisions in a repository.\n\nPublishing of build status to the repository.\n\nConvert the YAML configuration to declarative pipeline.\n\nUser will provide path to the script relative to the root directory of the repository\nwithout extension (.sh or .bat) in the YAML file. The plugin will generate pipeline script to detect the\nplatform and call .sh or .bat script.\n\nExample:\n  Path provided: ./scripts/hello\n  a. On UNIX machine “./scripts/hello.sh” will be called\n  b. On non-UNIX machine “./scripts/hello.bat” will be called.\n\nImplementations till now\n\nA first prototype of the plugin is ready. It supports all features of Multi-Branch Pipeline and offers the following features.\n\nBuild description is defined via YAML file stored within the SCM repo. This plugin\nwill depend on GitHub plugin, Bitbucket plugin, Gitlab plugin if users will be\nusing respective paltfroms for their repositories.\n\nBasic conversion of YAML to Declarative Pipeline: A class YamlToPipeline\nis written which will load the \"Jenkinsfile.yaml\" and make use of PipelineSnippetGenerator class\nto generate Declarative pipeline code.\n\nReporting of results.\n\nPlugin is using Yaml from target branch right now. (Maybe this needs some discussion, example:\nwhat if pull request contains changes in Jenkinsfile.yaml)\n\nGit Push step: To push the changes of pull request to the target branch. This is implemented\nusing git-plugin, PushCommand is used for this from git-plugin. credentialId,\nbranch name and repository url for intracting with Github, Bitbucket, etc\nwill be taken automatically from \"Branch-Source\" (Users have to fill thes\ndetails of branch source in job configuration UI). (You can see\nHow to run the demo)\n\nJenkinsfile.yaml example\n\nFor the phase 1 prototype demonstration, the following yaml file was used.\nNote that this format is subject to change in the next phases of the project,\nas we formalise the yaml format definition.\n\nagent:\n    dockerImage: maven:3.5.3-jdk-8\n    args: -v /tmp:/tmp\n\ntestResultPaths:\n    - target/surefire-reports/*.xml\n\nfindBugs: target/*.xml\n\nstages:\n    - name: First\n      scripts:\n        -   ./scripts/hello\n    - name: Build\n      scripts:\n        -   ./scripts/build\n    - name: Tests\n      scripts:\n        -   ./scripts/test\n\narchiveArtifacts:\n    - Jenkinsfile.yaml\n    - scripts/hello.sh\n\nFrom the yaml file shown above, the plugin generates the following pipeline code:\n\npipeline {\n  agent {\n    docker {\n      image 'maven:3.5.3-jdk-8'\n      args '-v /tmp:/tmp'\n      alwaysPull false\n      reuseNode false\n    }\n  }\n  stages {\n    stage('First') {\n      steps {\n        script {\n          if (isUnix()) {\n            sh './scripts/hello.sh'\n          } else {\n            bat './scripts/hello.bat'\n          }\n        }\n      }\n    }\n    stage('Build') {\n      steps {\n        script {\n          if (isUnix()) {\n            sh './scripts/build.sh'\n          } else {\n            bat './scripts/build.bat'\n          }\n        }pipeline\n      }\n      post {\n        success {\n          archiveArtifacts artifacts: '**/target/*.jar'\n          archiveArtifacts artifacts: 'Jenkinsfile.yaml'\n          archiveArtifacts artifacts: 'scripts/hello.sh'\n        }\n      }\n    }\n    stage('Tests') {\n      steps {\n        script {\n          if (isUnix()) {\n            sh './scripts/test.sh'\n          } else {\n            bat './scripts/test.bat'\n          }\n        }\n      }\n      post {\n        success {\n          junit 'target/surefire-reports/*.xml'\n        }\n        always {\n          findbugs pattern: 'target/*.xml'\n        }\n      }\n    }\n  }\n}\n\nPipeline view in Jenkins instance\n\nCoding Phase 2 plans\n\nDecide a proper YAML format to use for Jenkinsfile.yaml\n\nCreate Step Configurator for SPRP plugin. Jenkins-51637.\nThis will enable users to use Pipeline steps in Jenkinsfile.yaml.\n\nAutomatic indentation generation in the generated Pipeline SnipperGenerator class.\n\nWrite tests for the plugin.\n\nJira Epic\n\nHow to reach me\n\nEmail: gautamabhishek46@gmail.com\n\nGitter room: https://gitter.im/Jenkinsci/simple-pull-request-job-plugin\n\nReferences\n\nInitial proposal of the project\n\nProject repository\n\nProject page\n\nGitter chat\n\nBug Tracker\n\nDemo Repository\n\nPhase 1 Presentation video (June 14, 2018)\n\nPhase 1 Presentation Slides (June 14, 2018)","title":"GSoC Project Intro: Pipeline as YAML","tags":["gsoc2018","gsoc","plugin","pipeline","yaml"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg","srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/77b35/abhishek_gautam.jpg 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/d4a57/abhishek_gautam.jpg 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/19e71/abhishek_gautam.jpg 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/68974/abhishek_gautam.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/ef6ff/abhishek_gautam.webp 32w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/8257c/abhishek_gautam.webp 64w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/6766a/abhishek_gautam.webp 128w,\n/gatsby-jenkins-io/static/e91e42ab16b3d1ec82ed0c692425a50e/22bfc/abhishek_gautam.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"gautamabhishek46","html":"<div class=\"paragraph\">\n<p>Abhishek is a 3rd year Computer Science student from Visvesvaraya National\nInstitute of Technology, Nagpur, India. He has done some website projects for\nhis college technical festival. He is also a regular competitive programmer\n(abhishekg1128 at codechef). He has done two internships as a Game Programmer\nas well. He was a member of ACM Chapter and Google student developer club of his\ncollege. His interest in automation motivated his participation in the Jenkins\nGSOC 2018 program.</p>\n</div>","id":"abhishek_gautam","irc":"abhishekg","linkedin":null,"name":"Abhishek Gautam","slug":"/blog/authors/abhishek_gautam","twitter":null}]}},{"node":{"date":"2018-06-13T00:00:00.000Z","id":"a1c90a56-ed3d-57e4-bd0b-1397798cc5ea","slug":"/blog/2018/06/13/code-coverage-api-plugin/","strippedHtml":"About me\n\nMy name is Shenyu Zheng, and I am an undergraduate student in Computer Science and Technology at Henan University from China.\n\nI am very excited that I can participate in GSoC to work on Code Coverage API plugin with the Jenkins community and to contribute to the open source world. It is my greatest pleasure to write a plugin that many developers will use.\n\nMy mentors are Steven Christou, Supun Wanniarachchi, Jeff Pearce and Oleg Nenashev.\n\nAbstract\n\nThere are a lot of plugins which currently implement code coverage, however, they all use similar config, charts, and content. So it will be much better if we can have an API plugin which does the most repeated work for those plugins and offers a unified APIs which can be consumed by other plugins and external tools.\n\nThis API plugin will mainly do these things:\n\nFind coverage reports according to the user’s config.\n\nUse adapters to convert reports into the our standard format.\n\nParse standard format reports, and aggregate them.\n\nShow parsed result in a chart.\n\nSo, we can implement code coverage publishing by simply writing an adapter, and such adapter only needs to do one thing — convert a coverage report into the standard format. The implementation is based on extension points, so new adapters can be created in separate plugins. In order to simplify conversion for XML reports, there is also an abstraction layer which allows creating XSLT-based converters.\n\nCurrent Progress - Alpha Version\n\nI have developed an alpha version for this plugin. It currently integrates two different coverage tools - Cobertura and Jacoco. Also, it implements many basic functionalities like threshold, auto-detect, trend chart and so on.\n\nConfiguration Page\n\nconfig plugin\n\nWe can input the path pattern for auto detect, so that plugin will automatically find reports and group them using a corresponding converter. That makes config simpler and the user doesn’t need to fully specify the report name. Also, if we want, we can manually specify each coverage report.\n\nWe also have global and per-report threshold configurations, which makes the plugin more flexible than existing plugins (e.g. global threshold for a multi-language project that has several reports).\n\nPipeline Support\n\nIn addition to configuring the Code Coverage API plugin from the UI page, we also have pipeline support.\n\nnode {\n   publishCoverage(autoDetectPath: '**/*.xml', adapters: [jacoco(path: 'jacoco.xml')], globalThresholds: [[thresholdTarget: 'GROUPS', unhealthyThreshold: 20.0, unstableThreshold: 0.0]])\n}\n\nReport Defects\n\nAs we can see in Configuration page, we can set healthy threshold and stable threshold for each metric. The Code Coverage API plugin will report healthy score according to the healthy threshold we set.\n\nthreshold config\n\nresult\n\nAlso, we have a group of options which can fail the build if coverage falls below a particular threshold.\n\nCoverage Result Page\n\nThe coverage result page now has a modernized UI which shows coverage results more clearly.\nThe result page includes three parts - Trend chart, Summary chart, Child Summary chart.\n\nTrend Chart\n\nIn the Trend chart, we can see the coverage trend of the selected coverage metrics.\n\nSummary Chart\n\nIn the summary chart we can see the coverage summary of current coverage metric.\n\nChild Summary Chart\n\nIn the Child summary chart, we can see the coverage summary of each child, also, we can use the range handler to filter item we want to see to reduce the chart size.\n\nBy using those more modernized chart components, we can easily focus on the information we want to know.\n\nExtensibility\n\nWe provide several extension points to make our plugin more extensible and flexible. Also, we have a series of abstract layers to help us implementing these extension points much easier.\n\nCoverageReportAdapter\n\nWe can implement a coverage tool by implementing CoverageReportAdapter extension point. For example, by using the provided abstract layer, we can implement Jacoco simple like this:\n\npublic final class JacocoReportAdapter extends JavaXMLCoverageReportAdapter {\n\n    @DataBoundConstructor\n    public JacocoReportAdapter(String path) {\n        super(path);\n    }\n\n    @Override\n    public String getXSL() {\n        return \"jacoco-to-standard.xsl\";\n    }\n\n    @Override\n    public String getXSD() {\n        return null;\n    }\n\n    @Symbol(\"jacoco\")\n    @Extension\n    public static final class JacocoReportAdapterDescriptor extends CoverageReportAdapterDescriptor {\n\n        public JacocoReportAdapterDescriptor() {\n            super(JacocoReportAdapter.class, \"jacoco\");\n        }\n    }\n}\n\nAll we need is to extend an abstract layer for XML-based Java report and provide an XSL file to convert the report to our Java standard format. There are also other extension points which are under development.\n\nOther Extension points\n\nWe also plan to provide extension points for coverage threshold and report detector. Once it completed, we can have more control over our coverage report process.\n\nNext Phase Plan\n\nThe Alpha version now has many parts which still need to be implemented before the final release. So in next phase, I will mainly do those things.\n\nAPIs which can be used by others\n\nIntegrate Cobertura Plugin with Code Coverage API (JENKINS-51424).\n\nProvide API for getting coverage information. E.g. summary information about coverage (percentages, trends) (JENKINS-51422), (JENKINS-51423).\n\nImplementing abstract layer for other report formats like JSON. (JENKINS-51732).\n\nSupporting converters for non-Java languages. (JENKINS-51924).\n\nSupporting combining reports within a build(e.g. after parallel() execution in Pipeline) (JENKINS-51926).\n\nAdding source code navigation in Coverage Result Page (JENKINS-51988).\n\nRefactoring the configuration page to make it more user-friendly (JENKINS-51927).\n\nHow to Try It Out\n\nAlso, I have released the Alpha version in the Experimental Update Center. If you can give me some of your valuable advice about it, I will very appreciate.\n\nLinks\n\nJIRA Component\n\nProject Page\n\nProject Repository\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Intro: Code Coverage API Plugin","tags":["plugins","gsoc","gsoc2018"],"authors":[{"avatar":null,"blog":null,"github":"cizezsy","html":"<div class=\"paragraph\">\n<p>Shenyu comes from China. He is a third year student now, and his major is\nComputer Science and technology. He has participated in GSoC 2018 for\n<a href=\"https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/\">Code Coverage API Plugin</a></p>\n</div>","id":"shenyu_zheng","irc":"cizezsy","linkedin":null,"name":"Shenyu Zheng","slug":"/blog/authors/shenyu_zheng","twitter":null}]}},{"node":{"date":"2018-05-01T00:00:00.000Z","id":"29e7f29f-403c-5601-b053-b8a3c4a7dcee","slug":"/blog/2018/05/01/gsoc2018-projects-announcement/","strippedHtml":"On behalf of the Jenkins GSoC team and mentors,\nI would like to welcome\nShenyu Zheng,\nUdara De Silva,\nPham Vu Tuan and\nAbhishek Gautam.\nThey will be working on Google Summer of Code projects in the Jenkins organization,\nand they have already done some contributions.\n\nThis year we have the following projects:\n\nCode Coverage API Plugin -\ncreate a new API Plugin to unify existing Code Coverage plugins and provide new features.\n\nStudent: Shenyu Zheng from Henan University, Kaifeng, China\n\nMentors: Steven Christou and Supun Wanniarachchi\n\nElectronic Design Automation Plugins -\ncreate plugins for open-source Electronic Design Automation tools for synthesis, simulation and coverage analysis (iVerilog, covered, Yosys).\n\nStudent: Udara De Silva from University of Akron, Ohio, USA\n\nMentors: Martin d’Anjou and Oleg Nenashev\n\nJenkins Remoting over Message Bus/Queue -\nadd support of a popular message queue/bus technology (RabbitMQ or Kafka) as a fault-tolerant communication layer in Jenkins.\n\nStudent: Pham Vu Tuan from Nanyang Technological University, Singapore\n\nMentors: Oleg Nenashev and Supun Wanniarachchi\n\nSimple Pull-Request Job Plugin -\nadd ability to define Jenkins jobs as YAML files stored in SCM, integrate it with existing plugin ecosystem.\n\nStudent: Abhishek Gautam from Visvesvaraya National Institute of Technology, Nagpur, India\n\nMentors: Jeff Knurek, Kristin Whetstone and\nWilly Aguirre\n\nDuring next 4 weeks project teams will be reaching out to potential stakeholders in order to establish connections and\nto get comments regarding their project designs.\nIf you are interested in the projects, please join discussions in the\nDeveloper mailing lists and project meetings once they get scheduled.\nPlease also expect expect more detailed blogposts about the projects soon.\n\nIf you are interested to know more about GSoC in Jenkins, you can find information, timeline and communication channels\nhere.","title":"Welcome Google Summer of Code 2018 students!","tags":["gsoc","gsoc2018","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-02-19T00:00:00.000Z","id":"d1b0a235-d051-5787-9aab-f43b8d0a68ca","slug":"/blog/2018/02/19/gsoc2018-announcement/","strippedHtml":"We are happy to announce that Jenkins project has been accepted to\nGoogle Summer of Code 2018.\nThis year we invite students and mentors to join the Jenkins community and work together\non various initiatives: core, plugins, development tools and infrastructure.\n\nOur mentors have already created some project ideas.\nFor example, you are welcome to work on the new Configuration-as-Code initiative or\nto help creating standard API for Code Coverage plugins.\nIf you like test automation, there is a proposal to\nJenkins Acceptance Test Harness.\nOver the next weeks we plan to extend this list by new even more project ideas.\n\nAll information about the Jenkins GSoC is available on its subproject page.\n\nI am a student. How do I apply?\n\nSee Information for students for application guidelines.\n\nFirst step is to join discussions in the mailing lists in order to introduce yourself, establish connections with the community and potential mentors.\nThe application period starts on March 12 and ends on March 27, but don’t let it misguide you!\nUse time before application to discuss project ideas/proposals with mentors and to process their feedback.\nTo create a better proposal, we also recommend to study Jenkins and to do some contributions in the area of your project proposal.\n\nNot satisfied by the current project ideas?\nYou can propose your own idea\nin the developer mailing list.\n\nI want to be a mentor. Is it too late?\n\nIt’s not!\nIf you are passionate about open-source and Jenkins, we invite you to join the mentors team.\nYou can either propose a new project idea or join an existing one.\nSee Call for Mentors and Information for mentors for details.\n\nThis year mentorship does NOT require strong expertise in Jenkins development.\nThe objective is to guide students and to get involved into the Jenkins community.\nGSoC org admins will help to find advisers if special expertise is required.\n\nImportant dates\n\nMar 05 - deadline for new GSoC project idea proposals\n\nMar 12 - student application period starts\n\nMar 27 - deadline for student applications\n\nApr 23 - accepted projects announced, community bonding starts\n\nMay 14 - coding period starts\n\nAug 06 - end of the coding period\n\nSee the GSoC Timeline for more info.\nIn the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).\n\nP.S: I am going to create a special GSoC 2018 edition of swags for mentors and students. Do not miss them ;)","title":"Jenkins is accepted to Google Summer Of Code 2018, join us!","tags":["gsoc","gsoc2018","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-01-06T00:00:00.000Z","id":"13c78108-0ad3-594f-90c8-5073ecaa09cc","slug":"/blog/2018/01/06/gsoc2018-call-for-mentors/","strippedHtml":"This year the Jenkins project is interested in participating in\nGoogle Summer of Code (GSoC).\nAs in 2016/2017, we are looking for mentors.\nSo yes, we are looking for you :)\n\nWhat is GSoC?\n\nGSoC is an annual international program which encourages\ncollege-aged students to participate with open source projects during the summer\nbreak between classes.\n\nStudents accepted into the program receive a stipend,\npaid by Google, to work on well-defined projects to improve or enhance the Jenkins\nproject.\nIn exchange, numerous Jenkins community members volunteer as mentors\nfor students to help integrate them into the open source community and succeed\nin completing their summer projects.\n\nWhat do mentors get?\n\nA student who works full-time in the area of your interest for several months\n\nJoint projects with Jenkins experts, lots of fun and ability to study something together\n\nLimited-edition of swags from Google and Jenkins project\n\nMaybe: Participation in GSoC Mentor Summit and other GSoC events/meetups\n\nConditions\n\nMentors are expected to…​\n\nBe passionate about Jenkins\n\nLead the project in the area of their interest\n\nActively participate in the project during student selection, community bonding and coding phases (March - August)\n\nWork in teams of 2+ mentors per 1 each student\n\nDedicate a consistent and significant amount of time, especially during the coding phase ( ~5 hours per week in a team of two mentors)\n\nMentorship does NOT require strong expertise in Jenkins plugin development.\nThe main objective is to guide students and to get them involved into the Jenkins community.\nGSoC org admins will help to find advisors if a special expertise is needed.\n\nDisclaimer: We cannot guarantee that the Jenkins organization gets accepted to GSoC.\nEven if it gets accepted, we may need to select projects depending on student applications\nand the number of allocated project slots.\n\nTimeline\n\nDec 2017 - started collecting project ideas\n\nJan 17 - Status review at the Jenkins Governance Meeting.\nOutcome: decision whether we apply to GSoC in 2018.\n\nJan 21 - Application to GSoC (deadline - Jan 23)\n\nFeb 12 - List of accepted mentoring organizations published\n\nMar 05 - Deadline for project idea proposals\n\nNext - GSoC Timeline\n\nHow to apply?\n\nIf you are interested in proposing a project or joining an existing one, please respond to\nthis thread\nin the Jenkins Developer mailing list.\nWe aggregate/review proposals in\nthis document\nwhere you just need to describe the idea and introduce yourself.\n\nPlease propose new project ideas for discussion until March 05.\nYou can join an existing project at any time, including community bonding and coding periods.\n\nProject requirements\n\nGSoC is about code (though it may and likely should include some documentation and testing work)\n\nProjects should be about Jenkins (plugins, core, infrastructure, integrations, etc.)\n\nProjects should be potentially doable by a student in 3-4 months\n\nYou can find more information about requirements and practices in the\nGSoC Mentor Guide.\n\nLinks\n\nJenkins GSoC subproject page\n\nInformation for mentors\n\nGoogle Summer of Code page\n\nGSoC Mentor Guide\n\nGSoC Timeline","title":"Google Summer Of Code 2018: Call for mentors","tags":["gsoc","gsoc2018","events","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member, open source software and open hardware advocate, TOC chair in the Continuous Delivery Foundation.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he maintains [Jenkinsfile Runner](<a href=\"https://github.com/jenkinsci/jenkinsfile-runner/\" class=\"bare\">https://github.com/jenkinsci/jenkinsfile-runner/</a>),\ncontributes to several Jenkins <a href=\"/sigs\">SIGs</a> and outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>)\nand organizes <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works on open source programs and [Keptn](<a href=\"https://keptn.sh/\" class=\"bare\">https://keptn.sh/</a>) at the [Dynatrace](<a href=\"https://dynatrace.com\" class=\"bare\">https://dynatrace.com</a>), Open Source Program Office.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/authors/oleg_nenashev","twitter":"oleg_nenashev"}]}}]}},"pageContext":{"tag":"gsoc2018","limit":8,"skip":8,"numPages":2,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}