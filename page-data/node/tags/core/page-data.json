{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/core",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-06-04T00:00:00.000Z","id":"ae4a71c1-cb70-5ef0-9944-ab05566b6516","slug":"/blog/2021/06/04/digester-removal/","strippedHtml":"Keeping up with our goal to clean up some of the technical debt inside Jenkins Core and reduce the maintenance overheads, we are happy to report we were able to remove a long-deprecated Apache Commons Digester library.\n\nJenkins Core does not depend anymore on Apache Commons Digester v.2.1, a version that has been released in 2010.\n\nSome plugins will require update to operate properly after the Jenkins core upgrade.\nSee JEP-231 for the full list of the affected plugins.\nBelow there is the list of plugins that did not have their fix released at the time of writing.\nThey will start to break with the weekly on the 7th of June, expected to be the 2.297.\n\nteamconcert\n\nvs-code-metrics\n\nBlameSubversion\n\njavatest-report\n\nvss\n\nsynergy\n\nconfig-rotator\n\nharvest\n\ncmvc\n\nIn addition to these still-served plugins, a few others will break.\nNote however that these were already suspended [ 1 ] for various reasons, so we do recommend to move away from using them or step up as maintainers.\nThe IDs for these plugins are: tfs, svn-release-mgr, cpptest, cflint, script-scm, rtc.\n\nIt is always a good idea to update all your plugins before upgrading Jenkins core.\n\nPlease reach out on the developers’ list with any questions or suggestions.\n\nGetting fixes in the affected plugins\n\nFor all affected plugins we have submitted pull requests with compatibility patches.\nThese plugins seem to have no active maintainer, and hence we cannot commit on delivering those fixes.\nIn mean time you can build a custom patch locally to resolve the issue on your instances.\nIf you use any of those plugins, consider stepping up and adopting them so that the fixes could be released.\nWe will appreciate any contributions!\n\nResources\n\nPR-5320\n\nremoving commons-digester:2.1.\nThis also contains a complete list of impacted plugins and their PRs and statuses.\n\nJEP-231\n\ndescribing this change.\n\n1. this means these plugins are not served anymore by the Jenkins Project’s hosting service. Even if they were released, the releases would not show up until additional issues are fixed.","title":"Apache Commons Digester library removal (breaking changes!)","tags":["jenkins","core","developer","announcement"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"blog/author/batmat","twitter":"bmathus"}]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"a4d05a2d-a0a0-5795-a164-1b18cbfae9a3","slug":"/blog/2020/11/10/major-changes-in-weekly-releases/","strippedHtml":"Recently we have selected Jenkins 2.263 as a new baseline for the LTS release line, with ETA in December 2020.\nIt allows delivering significant and in some cases breaking changes which have been previously on hold.\nBeginning with the Jenkins 2.264 release on October 27, 2020, we’ve entered a period where the Jenkins weekly releases will include more significant changes than usual.\nThat period of more significant changes is expected to continue for a month or more.\nAs you may have seen from the release community ratings, there might be regressions and instabilities during this period.\n\nWe’re excited for the changes.\nThey help to improve user experience and to address the technical debt accumulated in the Jenkins core.\nWe invite Jenkins users to evaluate those changes and provide feedback.\nThis is an especially valuable time for users and administrators to test the weekly releases and report issues with them,\nespecially on Jenkins test environments.\nIn the Jenkins project we have invested a lot in test coverage for the main functionality,\nbut in many cases we rely on user feedback for exotic plugins and environments not yet covered by our test automation.\n\nThe most notable changes include:\n\nConfiguration UI - Tables to Divs\n\nCore - Spring Security replaces Acegi Security\n\nCore - XStream unfork\n\nUI - JQuery upgrade\n\nConfiguration UI - Tables to Divs\n\nJenkins 2.264 is the first weekly release to include the \"Tables to Divs migration\" user interface work of Josh Soref, Tim Jacomb, and Felix Queiruga.\nIt is a significant step to improve forms in the Jenkins user interface (configuration pages, build parameters, etc.), especially for users on narrow devices like tablets and phones.\n\nA better user interface\n\nThe transition from using HTML table tags to using HTML div tags provides a more attractive user interface for all users and a much better experience for users on narrower devices.\nBefore the conversion from table tags to div tags, the\"Manage Jenkins\" page looked like this in a 1024x768 window:\n\nAfter the conversion, the\"Manage Jenkins\" page now looks like this:\n\nThe user interface improvements from the transition are a nice step forward for Jenkins.\nHowever, because the user interface improvements require changes in plugins, we need your help.\n\nWe need users to test the latest weekly Jenkins releases with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\nPlease add the tables-to-divs-regression label to the issues.\nThe tables-to-divs-regression label makes it easier to find issues related to the tables to divs transition.\n\nPlugin developers\n\nSeveral plugins have already been identified that may need changes.\nSee the Jira epic for plugins that are likely to need changes for the new user interface layout.\nThe list of open tables-to-divs-regression issues can also be used to see plugins that need changes.\n\nIf you can assist with plugin testing and code changes, select one of the plugins from that epic, test it, and propose a pull request to help with this user interface transition.\nIf you’re not comfortable proposing a pull request, describe the problems you see in a bug report.\n\nA tables to divs migration guide is available.\nIt describes areas that typically need to be changed as part of the migration from tables to divs.\nIt also includes detailed examples that allow the plugin to continue supporting older Jenkins versions with table layouts and use div layouts for newer Jenkins versions.\n\nCore - Spring Security replaces Acegi Security\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the Spring Security libraries from the Acegi security libraries that Jesse Glick has proposed and developed through jep:227[Jenkins Enhancement Proposal 227].\n\nThis upgrade replaces the Acegi Security library with the current release of the Spring Security library.\nDetails of the change are described in jep:227[] and in the pull request.\n\nWe need users to test the latest Jenkins weekly releases with their plugins and watch for issues related to authentication.\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the Spring Security compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the Spring Security upgrade.\n\nCore - XStream unfork\n\nJenkins has been using a fork of the XStream serialization library to read and write XML files.\nThe XStream library was forked over 10 years ago and had a few fixes applied to it.\nUnfortunately, at that time the fixes were rejected by the upstream maintainers of XStream (unsupported patterns of API use) and the fork fell behind the upstream version.\n\nThe Jenkins 2.266 release on November 10, 2020 will include the migration to the upstream version of the XStream library that Jesse Glick has proposed and developed through jep:228[Jenkins Enhancement Proposal 228].\n\nRefer to Jesse Glick’s blog post that introduces the details of the change and provides links to the XStream compatibility table.\nJesse’s blog post provides specific instructions for those who report bugs related to this change.\nPlease use those instructions as you submit bug reports related to the XStream upgrade.\n\nUI - JQuery upgrade\n\nJenkins uses a 1.x version of the jQuery user interface library for some of its components.\nFelix Queiruga has started the work to update that library to a current jQuery version.\n\nIt will arrive in a future Jenkins weekly release.\nWhen it arrives, it will be noted in the Jenkins weekly changelog.\n\nWhen the jQuery update arrives, We will need users to test the Jenkins weekly release with the plugins and configurations that are most important to them.\nWhen users detect an issue, we need them to report the issue with enough detail that a plugin maintainer can fix the issue.\n\nCall to test\n\nThis is a great time to help the Jenkins project by testing the weekly releases.\nWe encourage you to test the user interface and the interactions that are most important to you.\nIf you find an issue, please report the issue so that others can benefit from your discovery.","title":"Jenkins 2.264+: Major changes in the weekly release line","tags":["jenkins","core","testing","ui"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"blog/author/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2020-11-10T00:00:00.000Z","id":"4a81cf3c-4ca0-511f-9197-d77a776ede34","slug":"/blog/2020/11/10/spring-xstream/","strippedHtml":"Cleaning up technical debt is a perennial topic among Jenkins core developers,\nand one of the most visible issues is the use of obsolete and/or forked third-party libraries.\nIn a world where Dependabot is offering updates to libraries released just hours before,\nit is unpleasant to be working with dependencies that are many years old.\nSince large organizations in particular are unhappy to install software using obsolete or nonstandard versions,\nmy employer (CloudBees) gave its blessing for me to spend some time cleaning up some of the worst offenders.\n\nThe toughest nut to crack was the Acegi Security library used for authentication,\nwhich has long since been replaced by Spring Security\n(and Jenkins was also bundling a long-outdated version of some Spring Framework dependencies).\njep:227[] tracks the complicated task of updating to Spring Security\nwithout breaking the numerous plugins that interact with authentication,\nespecially those offering a Security Realm.\n\nAnother longstanding problem was the XStream library which Jenkins uses to read and write XML configuration files.\nThis had been forked long ago by what was then the Hudson project and a few fixes applied.\nUnfortunately, some of those fixes were rejected upstream as invalid (representing unsupported usage patterns),\nand the fork fell behind the upstream version.\njep:228[] describes the impact of switching to the upstream library in a more standard usage mode,\nincluding fixes to a smaller number of plugins which would otherwise be incompatible.\n\nNow that the Jenkins 2.266 weekly release includes both updates,\nit is important for both Jenkins administrators and plugin maintainers to check for actual or potential incompatibilities.\nThere are two tables listing the impact of these changes on plugins:\n\nSpring Security compatibility\n\nXStream compatibility\n\nIf you use Jenkins then it is a good idea before upgrading to take a look at these tables\nto see if you are running any plugins considered incompatible.\nIf so, try not to rely on that plugin, or find out if there is an active maintainer who could help.\nFor entries marked unknown, it would be appreciated if you could do a sanity check after upgrading\nand offer a pull request to the table page (click Edit this file) with a more informative status.\n\nIf you find a regression in a plugin, please file a bug report in Jira and link to it from the table.\nAlso please add a JEP-227 or JEP-228 label as appropriate, for ease of tracking:\n\nOpen JEP-227 issues\n\nOpen JEP-228 issues\n\nIt is a good idea to update all your plugins before upgrading Jenkins core.\nIn the case of the Spring Security update, some security realm plugins including LDAP and Active Directory must be updated in advance.\n(You can safely run the new plugin versions on Jenkins releases prior to this change.)\nOtherwise, you risk being unable to log in to Jenkins—and thus unable to update those plugins from the GUI!\nThe LDAP plugin additionally has a new version available only after the core upgrade, but there is no rush in switching to that.\n\nIf you maintain a Jenkins plugin then please check whether it is marked anything less than compatible.\nIn some cases, there are already pull requests awaiting merge.\nIn other cases, some minor aspects of the source code have been identified that could be edited to improve compatibility.\n\nWe expect to see a bit of disruption from these changes\nbut hope that in the long run they will save time for core and plugin developers\nand lead to a more secure and stable tool.\nPlease reach out on the developers’ list with any questions or suggestions.","title":"Spring and XStream updates (breaking changes!)","tags":["jenkins","core","developer"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"blog/author/jglick","twitter":"tyvole"}]}},{"node":{"date":"2020-02-02T00:00:00.000Z","id":"bd7439b7-9ac0-59cd-a51c-c1739abb74ee","slug":"/blog/2020/02/02/web-socket/","strippedHtml":"I am happy to report that jep:222[] has landed in Jenkins weeklies,\nstarting in 2.217.\nThis improvement brings experimental WebSocket support to Jenkins,\navailable when connecting inbound agents or when running the CLI.\nThe WebSocket protocol allows bidirectional, streaming communication over an HTTP(S) port.\n\nWhile many users of Jenkins could benefit,\nimplementing this system was particularly important for CloudBees\nbecause of how CloudBees Core on modern cloud platforms\n(i.e., running on Kubernetes) configures networking.\nWhen an administrator wishes to connect an inbound (formerly known as “JNLP”) external agent to a Jenkins controller,\nsuch as a Windows virtual machine running outside the cluster and using the agent service wrapper,\nuntil now the only option was to use a special TCP port.\nThis port needed to be opened to external traffic using low-level network configuration.\nFor example, users of the nginx ingress controller\nwould need to proxy a separate external port for each Jenkins service in the cluster.\nThe instructions to do this are complex and hard to troubleshoot.\n\nUsing WebSocket, inbound agents can now be connected much more simply when a reverse proxy is present:\nif the HTTP(S) port is already serving traffic,\nmost proxies will allow WebSocket connections with no additional configuration.\nThe WebSocket mode can be enabled in agent configuration,\nand support for pod-based agents in the Kubernetes plugin is coming soon.\nYou will need an agent version 4.0 or later,\nwhich is bundled with Jenkins in the usual way (Docker images with this version are coming soon).\n\nAnother part of Jenkins that was troublesome for reverse proxy users was the CLI.\nBesides the SSH protocol on port 22, which again was a hassle to open from the outside,\nthe CLI already had the ability to use HTTP(S) transport.\nUnfortunately the trick used to implement that confused some proxies and was not very portable.\nJenkins 2.217 offers a new -webSocket CLI mode which should avoid these issues;\nagain you will need to download a new version of jenkins-cli.jar to use this mode.\n\nThe WebSocket code has been tested against a sample of Kubernetes implementations (including OpenShift),\nbut it is likely that some bugs and limitations remain,\nand scalability of agents under heavy build loads has not yet been tested.\nTreat this feature as beta quality for now and let us know how it works!","title":"WebSocket","tags":["core","remoting","agents","cli"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"blog/author/jglick","twitter":"tyvole"}]}},{"node":{"date":"2019-05-05T00:00:00.000Z","id":"7783e32b-2866-5124-b6e5-a89740fbfd19","slug":"/blog/2019/05/05/telemetry-success/","strippedHtml":"Half a year ago we delivered a security fix for Jenkins that had the potential to break the entire Jenkins UI.\nWe needed to change how Jenkins, through the Stapler web framework, handled HTTP requests, tightening the rules around what requests would be processed by Jenkins.\nIn the six months since, we didn’t receive notable reports of problems resulting from this change, and it’s thanks to the telemetry we gathered beforehand.\n\nThe Problem\n\nJenkins uses the Stapler web framework for HTTP request handling.\nStapler’s basic premise is that it uses reflective access to code elements matching its naming conventions.\nFor example, any public method whose name starts with get, and that has a String, int, long, or no argument can be invoked this way on objects that are reachable through these means.\nAs these naming conventions closely match common code patterns in Java, accessing crafted URLs could invoke methods never intended to be invoked this way.\n\nA simple example of that is a URL every Jenkins user would be familiar with: /job/jobname.\nThis ends up invoking a method called #getJob(String), with the argument being\"jobname\", on the root application object, and having it handle the rest of the URL, if any.\nOf course, this is a URL intended to be accessed this way.\nHow about invoking Object#getClass(), followed by Class#getClassLoader(), by accessing the URL /class/classLoader?\nWhile this particular chain would not result in a useful response, this doesn’t change that the methods were invoked.\nWe identified a number of URLs that could be abused to access otherwise inaccessible jobs, or even invoke internal methods in the web application server to invalidate all sessions.\nThe security advisory provides an overview of the issues we’d identified by then.\n\nThe Idea\n\nTo solve this problem inherent in the Stapler framework’s design, we defined rules that restrict invocation beyond what would be allowed by Stapler.\nFor example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.\nOtherwise, the type wouldn’t be aware of Stapler, and couldn’t produce a meaningful response anyway.\n\nThis meant that getters just declaring Object (or List, Map, etc.) would no longer be allowed by default.\nIt was clear to the developers working on this problem that we needed the ability to be able to override the default rules for specific getters.\nBut allowing plugin developers to adapt their plugins after we published the fix wasn’t going to cut it;\nJenkins needed to ship with a comprehensive default whitelist for methods known to not conform to the new rules, so that updating would not result in problems for users.\n\nThe Solution\n\nWhile there is tooling like Plugin Compatibility Tester and Acceptance Test Harness, many Jenkins plugins do not have comprehensive tests of their UI — the Jenkins UI is fairly stable after all.\nWe did not expect to have sufficient test coverage to deliver a change like this with confidence.\nThe only way we would be able to build such a comprehensive whitelist would be to add telemetry to Jenkins.\n\nWhile Jenkins instances periodically report usage statistics to the Jenkins project, the information included is very bare bones and mostly useful to know the number of installations, the popularity of plugins, and the general size of Jenkins instances through number and types of jobs and agents.\nWe also didn’t want to just collect data without a clear goal, so we set ourselves some limitations — collect as little data as possible, no personally identifiable information, have a specific purpose for each kind of information we would collect, and define an end date for the collection in advance.\nWe defined all of this in JEP-214, created the Uplink service that would receive submissions, and added the basic client framework to Jenkins.\nThe implementation is fairly basic — we just submit an arbitrary JSON object with some added metadata to a service.\nThis system would inform tweaks to a security fix we were anxious to get out, after all.\n\nStarting in mid October for weekly releases, and early November for LTS, tens of thousands of Jenkins instances would submit Stapler request dispatch telemetry daily, and we would keep identifying code incompatible with the new rules and amending the fix.\nUltimately, the whitelist would include a few dozen entries, preventing serious regressions in popular plugins like Credentials Plugin, JUnit Plugin, or the Pipeline plugins suite, down to Google Health Check Plugin, a plugin with just 80 installations when we published the fix.\n\nLearning what requests would result in problems also allowed us to write better developer documentation — we already knew what code patterns would break, and how popular each of them was in the plugin ecosystem.\n\nThe Overhaul\n\nI wrote above:\n\nFor example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.\n\nWhile this was true for the fix during most of development, it isn’t how the fix that we published actually works.\nAbout a month before the intended release date, internal design/code review feedback criticized the complicated and time-consuming implementation that at the time required scanning the class path of Jenkins and all plugins and looking for related resources, and suggested a different approach.\n\nSo we tried to require that the declared type or any of its ancestors be annotated with the new annotation @StaplerAccessibleType, annotated a bunch of types in Jenkins itself ( ModelObject being the obvious first choice), and ran our scripts that check to see whether Stapler would be allowed to dispatch methods identified in telemetry.\nWe’d long since automated the daily update of dispatch telemetry processing, so it was a simple matter of changing which Jenkins build we were working with.\n\nAfter a few iterations of adding the annotation to more classes, the results were very positive: Very few additional types needed whitelisting, while many more were no longer (unnecessarily) allowed to be dispatched to.\nThis experiment, late during development, ended up being essentially the fix we delivered.\nWe didn’t need to perform costly scanning of the class path on startup — we didn’t need to scan the class path at all — , and the rules governing request dispatch in Stapler, while different from before, are still pretty easy to understand and independent of how components are packaged.\n\nThe Outcome\n\nAs usual when delivering a fix we expect could result in regressions in plugins, we created a wiki page that users could report problems on.\nRight now, there’s one entry on that wiki page.\nIt is one we were aware of well before release, decided against whitelisting it, and the affected, undocumented feature in Git Plugin ended up being removed.\nThe situation in our issue tracker is only slightly worse, with two apparently minor issues having been reported in Jira.\n\nWithout telemetry, delivering a fix like this one would have been difficult to begin with.\nTinkering with the implementation just a few weeks before release and having any confidence in the result?\nNot causing any significant regressions?\nI think this would simply be impossible.","title":"First successful use of Jenkins telemetry","tags":["core","security","telemetry"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2019-03-11T00:00:00.000Z","id":"c9f62da3-bfb4-5c14-b822-339fc3c213da","slug":"/blog/2019/03/11/let-s-celebrate-java-11-support/","strippedHtml":"This is a joint blog post prepared by the Java 11 Support Team: Adrien Lecharpentier, Ashton Treadway, Baptiste Mathus, Jenn Briden, Kevin Earls, María Isabel Vilacides, Mark Waite, Ramón León and Oleg Nenashev.\n\nWe have worked hard for this and it’s now here.\nWe are thrilled to announce full support for Java 11 in Jenkins starting from Jenkins 2.164 (released on Feb 10, 2019) and LTS 2.164.1 (ETA: March 14th).\nThis means you can now run your Jenkins controllers and agents with a Java 11 JVM.\n\nStarting in June 2018, many events were organized to improve Jenkins code base and add Java 11 support.\nBeyond these events, Core/Plugins maintainers and many other contributors have worked hard to make sure they discover and solve as many issues as possible related to Java 11 support.\n\nThe effort to support Java 11 led to the creation of the JEP-211: Java 10+ support in Jenkins.\nIt also spurred the creation of the Platform Special Interest Group to coordinate the Java 11 work and other platform support efforts.\n\nCelebration\n\nWe’d like to take a moment to thank everyone involved in these tasks: code contributors, issue reporters, testers, event planners and attendees and all those in the community who have generously lent their time and support to this effort.\nThank you all!\n\nHere are some of the contributors who helped with this task (alphabetical order):\n\nAlex Earl,\nAlyssa Tong,\nAshton Treadway,\nBaptiste Mathus,\nCarlos Sanchez,\nDaniel Beck,\nDavid Aldrich,\nDenis Digtyar,\nDevin Nusbaum,\nEmeric Vernat,\nEvaristo Gutierrez,\nGavin Mogan,\nGianpaolo Macario,\nIsabel Vilacides,\nJames Howe,\nJeff Pearce,\nJeff Thompson,\nJenn Briden,\nJesse Glick,\nJonah Graham,\nKevin Earls,\nKsenia Nenasheva,\nKohsuke Kawaguchi,\nLiam Newman,\nMandy Chung,\nMark Waite,\nNicolas De Loof,\nOleg Nenashev,\nOliver Gondža,\nOlivier Lamy,\nOlivier Vernin,\nParker Ennis,\nPaul Sandoz,\nRamón León,\nSam Van Oort,\nTobias Getrost,\nTracy Miranda,\nUlli Hafner,\nVincent Latombe,\nWadeck Follonier\n\n(We are deeply sorry if we missed anyone in this list.)\n\nGuidelines\n\nIn order to keep it simple, here is how you can start Jenkins on Java 11 using the Docker image.\nYou can select a Java 11 based image by suffixing the tag of the image with -jdk11.\nIf you are upgrading an existing instance please read the Upgrading Jenkins Java version from 8 to 11 page before upgrading.\n\nSo you can run Jenkins on Java 11 with:\n\ndocker run -p 50000:50000 -p 8080:8080 jenkins/jenkins:2.164-jdk11\n\nHowever, and as always, you can still start Jenkins with other methods.\nPlease see the more detailed documentation at Running Jenkins on Java 11.\n\nDeveloper guidelines\n\nFor developers involved in Jenkins development, you can find details on developing and testing Jenkins to run on Java 11 on the Java 11 Developer Guidelines.\n\nThis resource regroups the modifications which might need to be done in order to validate the compatibility of plugins for Java 11.\n\nWhat’s next\n\nEven though this is a big achievement, we still have work to do.\n\nOur first priority is adding Java 11 support to JenkinsFile Runner project.\nFrom there, we will move on to port Java 11 support to the Jenkins X project and the Evergreen project.\n\nSo, even if this is a big deal to us, this is not the end of the story.\nIt is a major step that will benefit users, developers, and members of the Jenkins community.\n\nReference links\n\nRunning Jenkins on Java 11\n\nhttps://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues\n\nhttps://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines\n\njep:211[Java 11 support in Jenkins]","title":"Let's celebrate Java 11 Support on Jenkins","tags":["core","developer","java11","community","platform-sig"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://alecharp.fr","github":"alecharp","html":"<div class=\"paragraph\">\n<p>Adrien is a Jenkins user and plugins developer since 2009 and maintains several plugins.\nCurrently, Adrien works at <a href=\"https://www.cloudbees.com\">CloudBees</a> as a software engineer, involved in open-source code development.</p>\n</div>","id":"alecharp","irc":null,"linkedin":null,"name":"Adrien Lecharpentier","slug":"blog/author/alecharp","twitter":"alecharp"}]}},{"node":{"date":"2019-02-17T00:00:00.000Z","id":"a79ea93c-0082-5a4a-a338-9fde01ae88b1","slug":"/blog/2019/02/17/remoting-cli-removed/","strippedHtml":"Close to two years ago, we announced in\nNew, safer CLI in 2.54\nthat the traditional “Remoting” operation mode of the Jenkins command-line interface\nwas being deprecated for a variety of reasons, especially its very poor security record.\nToday in Jenkins 2.165 support for this mode is finally being removed altogether,\nin both the server and bundled jenkins-cli.jar client.\nThe projected June 5th LTS release will reflect this removal,\nat which point the Jenkins project will no longer maintain this feature\nnor investigate security vulnerabilities in it.\n\nThis change makes the code in Jenkins core related to the CLI considerably simpler and more maintainable.\n(There are still two transports —HTTP(S) and SSH—but they have similar capabilities and behavior.)\nIt also reduces the “attack surface” the Jenkins security team must consider.\nAmong other issues, a compromised server could freely attack a developer’s laptop if -remoting were used.\n\nThe\n2.46.x upgrade guide\nalready urged administrators to disable Remoting mode on the server.\nThose Jenkins users who rely on the CLI for remote scripting (as opposed to the HTTP(S) REST APIs)\nwould be affected only if they were still using the -remoting CLI flag,\nsince the default has long been to use HTTP(S) mode.\n\nMost CLI features have long worked fine without -remoting,\nin some cases using slightly different syntax such as requiring shell redirects to access local files.\nAs part of this change, some CLI commands, options, and option types in Jenkins core have been removed, other than -remoting itself:\n\nThe login and logout commands, and the --username and --password options.\n\nThe -p option to select a proxy. (The CLI in default -http mode accesses Jenkins no differently than any other HTTP client.)\n\nThe install-tool, set-build-parameter, and set-build-result commands relied on a fundamentally insecure idiom that is no longer supportable.\n\nCommand options or arguments which took either a local file or = for standard input/output (e.g., install-plugin, build -p, support) now only accept the latter.\n\nSome features of relatively little-used plugins will no longer work, such as:\n\nDistFork\n\nRemote Terminal Access\n\nBuild Env Propagator","title":"Remoting-based CLI removed from Jenkins","tags":["core","security","remoting"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"blog/author/jglick","twitter":"tyvole"}]}},{"node":{"date":"2019-02-05T00:00:00.000Z","id":"9488675b-0d5a-5055-8c7d-1ab61e7ad642","slug":"/blog/2019/02/05/jenkins-new-year-in-china/","strippedHtml":"At the time of the Spring Festival. I want to make a summary of some activities in the last year.\nYou might already notice that more and more Chinese contributors emerge in the Jenkins community.\nWe have a GSoC champion who is Shenyu Zheng.\nHe is a great example for other students. With the effort of three skilled engineers,\nmany Jenkins users could learn the edge technologies and useful use cases.\nThey co-organized several Jenkins Meetups in a couple of cities in China.\n\nThere are two workshops about Jenkins and Jenkins X in the DevOps International Summit. James Rawlings gave us a wonderful view of the Jenkins X. Many people start to know this project. The Chinese website of jx would be helpful to those people.\n\nOn November 3rd, 2018 the Jenkins User Conference China(JUCC) was hosted in Shenzhen. More than 200 attendees gathered at JUCC to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.\n\nThere was a Jenkins workshop to teach users to develop a plugin in October. It was during the Hacktoberfest 2018. So some people got a beautiful T-shirt at this meetup. We’ll keep this event in 2019. I hope more users and developers could join us.\n\nThank you all folks. And other friendly contributors.\n\nChinese is our main communication language. A large number of the Jenkins users are not a proficient English speaker.\nSo letting most of Chinese Jenkins users could easily use Jenkins as their CI/CD platform is the final mission of Chinese Localization SIG.\nYou can find three participants on the page. But that’s not the full list.\nMore exciting thing is that Alauda giving a big support which as a startup company.\n\nWeChat is the greatest social media channel in China. WeChat has one billion users.\nAlmost everyone in China has a WeChat account. It must be a perfect place to publish articles and events.\nThere are over 1k people subscribed the Jenkins official WeChat Subscription Account in the last three months.\n\nIn the new year, I’m looking forward to growing up with you all!","title":"Jenkins new year in China","tags":["core","community","chinese"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"LinuxSuRen","html":"<div class=\"paragraph\">\n<p>Rick is a big fan of Jenkins, also as a contributor leading the Jenkins China community.</p>\n</div>","id":"linuxsuren","irc":null,"linkedin":"linuxsuren","name":"赵晓杰(Rick)","slug":"blog/author/linuxsuren","twitter":"LinuxSuRen"}]}}]}},"pageContext":{"tag":"core","limit":8,"skip":0,"numPages":15,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}