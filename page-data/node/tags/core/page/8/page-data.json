{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/core/page/8",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2014-04-01T00:00:00.000Z","id":"5310f9d3-4ee4-5c01-b1d2-55f71e342385","slug":"/blog/2014/04/01/your-java-web-start-slaves-will-be-always-clean/","strippedHtml":"+ +\n\n+\n+\n\n+\nIf you have agents that connect through https://wiki.jenkins.io/display/JENKINS/Distributed+builds#Distributedbuilds-LaunchslaveagentviaJavaWebStart[Java Web Start] (such as https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallSlaveasaWindowsservice%28require.NET2.0framework%29[agents installed as Windows services]), we have a good news for you. +\n +\n\n+\nIn case of a connection loss, this type of agents has been designed to automatically attempt to reconnect to the controller. This makes sense because you want these agents to remain online all the time, even if your janitor trips over the ethernet cable. Unfortunately, it also means that over the time, these agents accumulate gunk, such as mutated static states, any left-over threads or memory leaks, or https://issues.jenkins.io/browse/JENKINS-20913[native libraries that are loaded into JVM]. +\n +\n\n+\nTo prevent that, a better approach is to https://issues.jenkins.io/browse/JENKINS-19055[restart the agent JVM (JENKINS-19055)] and have the new JVM reconnect, instead of having the same JVM reconnect. That would ensure that the agent always stays clean. I've planned to make this change for a while now, and I'm happy to report that this change is finally landing to the upcoming 1.559. +\n +\n\n+\nRestarting JVM is easy on Unix, where I could just https://man7.org/linux/man-pages/man3/exec.3.html[exec(3)] to itself. We've been doing this for ages on controllers, for example when you update a plugin and tell Jenkins to restart. +\n +\n\n+\nThe hard part is to do this for Windows, where the most of the time was spent. I had to improve https://github.com/kohsuke/winsw[windows service wrapper] to support self-restarting services, which turned out to be trickier because Windows service control manager doesn't provide \"restart\" as an atomic operation. It also kills not just the service process itself but all the processes in the group. So I had to double-fork the service wrapper into a separate process group just to restart a service from within itself. +\n +\n\n+\nIn any case, the end result is that if https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallSlaveasaWindowsservice%28require.NET2.0framework%29[you have installed a service through GUI], be it on Windows, Unix, or OS X, agents will restart themselves every time it gets disconnected from the controller. +\n +\n\n+\nI've also taken the opportunity to make `+jenkins-slave.exe+` on the agent self-updating. Every time it connects to the controller, it gets the latest version from the controller. +\n +\n\n+\nIf you have installed Web Start agents as services, make sure to update the local copy of `+agent.jar+` on these agents to 2.37 or later. This \"restart on reconnect\" feature only kicks in when you are running this very recent version of `+agent.jar+`. And yes, we realize it'd be nice for `+agent.jar+` to update itself, which is tracked as https://issues.jenkins.io/browse/JENKINS-22454[JENKINS-22454]. But that's a work for another day. +\n +","title":"Your Java Web Start slaves will be always clean","tags":["development","core"],"authors":[]}},{"node":{"date":"2014-03-21T00:00:00.000Z","id":"9dfcdd00-24d6-5a91-b965-88e536161260","slug":"/blog/2014/03/21/call-for-sponsors-2014-jenkins-user-conferences/","strippedHtml":"Jenkins User Conference (JUC) season is upon us! It’s a busy year for the Butler — he’s hosting conferences all over and looking for sponsors to help:\n\nBoston — June 18\n\nBerlin — June 25\n\nHerzelia, Israel — July 16\n\nBay Area (California) — October (date TBD)\n\nMr. Jenkins and the JUC Organizing Committee want to invite you and your company to sponsor a JUC this year. Show your support for the Jenkins community and help keep costs low for attendees*. The funds go to are put to good use: conferences are two full tracks. Lunch, light breakfast, coffee and a coveted Jenkins t-shirt are also included.\n\nSponsors get all sorts of thanks from the Jenkins community:\n\nYour logo on the conference t-shirt and all other conference communication (emails, website, signage, etc.)\n\nA blog featuring sponsors\n\nFree passes\n\nSilver and Gold sponsors get a table to talk to folks and hand out swag\n\nGold sponsors get either a speaking slot, happy hour sponsorship or a dedicated room for demos\n\nAnd more, but most especially, you get to support JenkinsCI. Just let us know if you’re interested to get the details. We’d love to have you join us. Friendly reminder: We are looking for speakers for all four cities. Call for Papers ends March 30 for Boston, Berlin and Israel. Submit your abstract now and come share your expertise with the Jenkins community. We hope to see you at a JUC this year! Lisa, Alyssa and the JUC Organizing Committee *PS - Registration just opened for Boston and early-bird tickets are only $59.","title":"Call for Sponsors: 2014 Jenkins User Conferences","tags":["general","core","news","jenkinsci","juc"],"authors":[]}},{"node":{"date":"2013-07-24T00:00:00.000Z","id":"09e534e0-e44f-586f-90d1-da7658ecc78a","slug":"/blog/2013/07/24/faster-slave-classloading/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Chloride[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Calcium_chloride_CaCl2.jpg/320px-Calcium_chloride_CaCl2.jpg[image]] +\n\n+\n+\n\n+\nJenkins comes with https://github.com/jenkinsci/remoting[the remoting library] that it uses to communicate between a controller and agents. This is a pretty awesome library, I think, which served us well. +\n +\n\n+\nOne of the things this remoting layer does it to transfer the Java byte code on demand from the controller to agents on demand. This approach helps us keep agent deployment simple, as you don't have to keep the controller and all the agents in sync, but it also made the agent start-up slower, because none of the byte code loaded to agents are kept around. It was all forgotten once the agent gets disconnected. +\n +\n\n+\nWhen agents are static and stays online for hours, this wasn't a problem at all. But as more and more agents become elastic (think EC2 or CloudBees DEV@cloud), This delay is becoming more and more noticeable. A similar issue happens when the Maven project type, which uses the same remoting library to talk to the running Maven build. +\n +\n\n+\nAnother related performance bottleneck is the round-trip latency. When your agent is far away from a controller, every classloading would incur a network round-trip, and it can add up quickly. This is because Java classloading abstraction is funamentally chatty. +\n +\n\n+\nJesse and I https://issues.jenkins.io/browse/JENKINS-15120[started seriously thinking about this problem] last year, and we've https://github.com/jenkinsci/remoting/pull/10[kept a branch going] to address this problem. +\n +\n\n+\nAfter several trans-atlantic hacking during flights, we were finally able to release this in 1.519. +\n +\n\n+\nStarting this version, the remoting layer uses a local jar file cache to store jar files that were downloaded from the controller. This pretty much eliminated the need to send class files over the wire. +\n +\n\n+\nIn addition, the controller will analyze class files as a agent request them and \"push down\" information about how related other classes should be loaded by the agent. This speculative \"prefetching\" saves the agent from making an expensive network round trip to the controller. +\n +\n\n+\nIn https://jenkins-ci.361315.n4.nabble.com/Efficient-class-jar-prefetching-in-remoting-td4665943.html[my benchmark using Maven builds, the prefetching cut the # of roundtrips to about half]. +\n +\n\n+\nIf you do a lot of Maven builds, or if you have elastic agents, we highly encourage you to upgrade. +\n +\n +\n +\n +","title":"Faster agent classloading","tags":["development","core"],"authors":[]}},{"node":{"date":"2013-07-24T00:00:00.000Z","id":"4e7a1585-88fc-5af9-bed4-a44535c9067f","slug":"/blog/2013/07/24/jenkins-user-event-in-copenhagen-on-september-6/","strippedHtml":"Seize the opportunity to join the Jenkins community!\n\nJust like last year, the Scandinavian Jenkins Conference will be in Copenhagen, Denmark, hosted by Praqma and sponsored by CloudBees, Sony, Switch::Gears, and PRQA. The open source community will gather on September 6th for a full day of networking and knowledge sharing at The Department of Computer Science at The University of Copenhagen.\n\nBased on last year’s success, Jenkins developers, architects, business managers, etc. from all over the world will gather to exchange experiences and promote the open source platform. As a special feature the conference will include an opening keynote from Jenkins founder Kohsuke Kawaguchi as well as other industry pioneers, who will take the podium to present findings within the latest technology, best practice, hand-on experiences, etc.\n\nTo get updates on the conference follow the JCI13Blog where you can view the latest news on venue and speakers.","title":"Jenkins User Event in Copenhagen on September 6","tags":["general","core","meetup","news","juc"],"authors":[]}},{"node":{"date":"2013-05-06T00:00:00.000Z","id":"d09b3edf-14fb-5979-adf4-e44e21565cba","slug":"/blog/2013/05/06/giving-back-to-the-community-3-ways-to-keep-jenkins-growing/","strippedHtml":"With more than 600 plugins, Jenkins has a vibrant community and we’re dependent on YOU to keep it that way. Here are 3 ways you can give back to the community to ensure that everyone benefits and Jenkins keeps growing…​\n\nGiving it back to the community #1: vendor+community=win\n\n+\nJenkins is becoming ubiquitous enough that tool vendors and service providers often find their users asking them to provide Jenkins plugins. The challenge for these companies is that they don’t necessarily possess the necessary Jenkins expertise to do one. +\n +\n\n+\nHere at the Jenkins project, what we are trying to do is to work with these people to deliver a plugin. It gets the job done a whole lot more quickly if the vendor brings in their expertise on their tool/services and we bring in our expertise on Jenkins plugin development. +\n +\n\n+\nFor example, we recently worked with https://www.soasta.com/press-releases/soasta-and-cloudbees-partner-to-deliver-first-jenkins-plugin-for-continuous-integration-on-mobile-platforms/[SOASTA] to help them open-source the plugin they developed in house, then help them add a whole bunch of new functionalities. By open-sourcing a plugin in the Jenkins project, vendors win as the community helps fix bugs and improve plugins. The Jenkins project wins by building relationship with vendors. And finally the users win by having more integrations. +\n +\n\n+\nSo the next time you ask your vendor to provide a Jenkins integration, please tell them to drop us a note, and we are happy to talk. +\n +\n\nGiving it back to the community #2: scratch your itch and take credit\n\n+\n\n+\nIf you are working for a company and hacking some Jenkins plugins for your team, then you should definitely consider contributing those changes back. Let’s take https://developer.sonymobile.com/2012/11/22/sony-contributes-to-jenkins-software-tool/[Robert and Tomas] for example, who contributed a number of significant plugins from Sony Mobile. +\n +\n\n+\nThe company wins, because it shows off their technical excellence. Plus the flexibility to let engineers work on these OSS projects helps them retain and attract high-caliber developers. It also lets the community shoulder some of the burdens of maintaining plugins.\n\n+\nYou win, because now you have more things to show to future employers. After all, GitHub is your new resume! And when you aren’t sure how to go about implementing a feature or fixing a bug, open-sourcing your plugin lets us jump in and get you unstuck.\n\n+\nThe community wins, thanks to your new awesome plugin.\n\n+\nBesides all of those pragmatic reasons, when you share something with others and they tell you how much it helped them, even if it’s just one or two people, it’s a deeply moving experience.\n\n+\n+\n\n+\nIt just has so many advantages, it’s a no brainer! +\n +\n\nGiving it back to the community #3: contribute by proxy\n\n+\n\n+\nIf you are working for a company, wanting to see particular features/integrations in Jenkins but don’t have time to do it yourself, there’s yet another way, and that’s to contribute by proxy. +\n +\n\n+\nThe idea is that you contract with those who already know how to develop Jenkins plugins, and you have them produce/improve Jenkins plugins in open-source. https://wiki.jenkins.io/display/JENKINS/Praqma[Praqma] is a great example of one such company. They are well connected in the community, with lots of experience under their belts, and your company takes the credit for the work. There are also a number of individuals who can do this for you. +\n +\n\n+\nWhy give it away something for free when you paid for it, you might ask. That’s because the code sitting in house rots when it’s not maintained by anybody. In contrast, when the rest of the world can hack on your code, you get occasional random bug fixes by strangers (the worst case), and sometimes it gets its own life (the best case.) +\n +\n\n+\nIf this way of giving back suits you better, feel free to send an e-mail to https://jenkins.361315.n4.nabble.com/Jenkins-dev-f387835.html[the dev list].","title":"Giving Back to the Community:  3 Ways to Keep Jenkins Growing","tags":["development","core","feedback"],"authors":[]}},{"node":{"date":"2012-12-13T00:00:00.000Z","id":"18a1c49c-f61d-53b6-b0ae-88d9b4ed9f31","slug":"/blog/2012/12/13/office-hours-next-week-metadata-plugin/","strippedHtml":"+\nhttps://wiki.jenkins.io/display/JENKINS/Office+Hours[The last Jenkins office hour of the year] hosts Robert Sandell and Tomas Westling, who will go over https://wiki.jenkins.io/display/JENKINS/Metadata+plugin[newly open-sourced metadata plugin] from Sony Mobile Communications (https://developer.sonymobile.com/2012/11/22/sony-contributes-to-jenkins-software-tool/[more about this story on their website]). This team from Sony Mobile has been known for several other popular plugins, including https://wiki.jenkins.io/display/JENKINS/Gerrit+Trigger[the Gerrit trigger plugin]. And I think this latest batch of plugins will not disappoint! +\n +\n\n+\nAs I understand, this plugin is a https://wiki.jenkins.io/label/JENKINS/plugin-library[library plugin], which is primarily meant to be consumed by other plugins. With help of other plugins using this plugin, it can classify jobs and agents by adding metadata tags to them. This in turn enables more intelligent scheduling, views, access control, and so on. +\n +\n\n+\nPersonally, I'm very interested in integrating https://wiki.jenkins.io/display/JENKINS/iOS+Device+Connector+Plugin[the iOS device connector plugin], so that one could say \"run this job on a Mac where iPad2 is connected\", etc. The other piece is to integrate this with https://wiki.jenkins.io/display/JENKINS/External+Resource+Dispatcher[the external resource dispatcher] so that Jenkins can grant exclusive device access to jobs while they are running so that tests don't end up trying to use the same device. +\n +\n\n+\nIf you are a plugin developer, hopefully this gets you excited. See you https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Office+Hours&iso=20121219T11&p1=283&ah=1[Dec 19th 11am PST]. +","title":"Office hours next week: metadata plugin","tags":["development","core","plugins"],"authors":[]}},{"node":{"date":"2012-03-26T00:00:00.000Z","id":"4c90dc2c-3ba4-5227-ae38-b5bf0bf26126","slug":"/blog/2012/03/26/announcing-the-jenkins-cia/","strippedHtml":"For years, we’ve been hearing about covert installations of Jenkins by groups\nof developers within larger companies. Rogue engineers, frustrated by the lack\nof continuous integration would download jenkins.war and run it off their\nworkstation. As time went on, word-of-mouth within the organization spread\nJenkins far and wide.\n\nToday we announce an initiative to help support these rogue agents: the\nJenkins CIA. CIA being short for Continuous\nIntegration Ambassador of course.\n\nIf you’re going to be speaking at a JUG or another event where you will have\nthe opportunity to promote and teach people about Jenkins, you too can join the\nCIA:\n\nSend us an email telling us about the event and how many people you expect\n\nWrite us a guest blog post ahead of time, talking about the event\n\nWe dispatch Jenkins stickers and a CIA Agent shirt for you to wear.\n\nWrite up a summary blog post about the event afterwards\n\nRepeat!\n\nIn the coming months, we’ll start collaborating and creating standard\npresentations that can be easily re-used to introduce people not only to\nJenkins, but continuous integration in general, so stay tuned.\n\nIf you’re not the speaking type but instead prefer to work behind the scenes,\nyou can join the OSS by checking out the Beginner’s Guide to contributing\nto Jenkins.\n\nAgent Dero, over and out.\n\nThis message will self-destruct in 5.\n\n4.\n\n3.\n\n2.\n\n1.\n\npoof .","title":"Announcing the Jenkins CIA","tags":["general","core"],"authors":[]}},{"node":{"date":"2012-03-06T00:00:00.000Z","id":"84e982b8-32fd-5c71-9923-2f8e688aebff","slug":"/blog/2012/03/06/critical-security-advisory-in-jenkins-core/","strippedHtml":"+\nWe've identified and fixed a critical security vulnerabilities in +\nJenkins core. This affects all the releases of Jenkins to date (main line releases up to 1.452 and LTS up to 1.424.3.) Please upgrade to the new releases at your earliest convenience, especially if your Jenkins is internet facing. +\n +\n\nFor more details about the vulnerabilities, affected versions, and so on, please consult the security advisory.\n\n(See our page about security advisories about how we do these.)","title":"Critical security advisory in Jenkins core","tags":["development","core"],"authors":[]}}]}},"pageContext":{"tag":"core","limit":8,"skip":56,"numPages":15,"currentPage":8}},
    "staticQueryHashes": ["3649515864"]}