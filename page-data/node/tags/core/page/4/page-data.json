{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/core/page/4",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-01-13T00:00:00.000Z","id":"b30f609a-7e4a-56ef-93e3-f8629da662cd","slug":"/blog/2018/01/13/jep-200/","strippedHtml":"There is a newer version of the announcement for Jenkins administrators.\nPlease see this blogpost.\n\nOverview\n\nJEP-200 has been integrated into Jenkins weekly builds\nand (if all goes well) will be a part of the next LTS line.\nIn a nutshell, this change is a security hardening measure\nto be less permissive about deserializing Java classes defined in the Java Platform or libraries bundled with Jenkins.\nFor several years now, Jenkins has specifically blacklisted certain classes and packages according to known or suspected exploits;\nnow it will reject all classes not explicitly mentioned in a whitelist, or defined in Jenkins core or plugins.\n\nFor Jenkins administrators\n\nBefore upgrade\n\nBack up your Jenkins instance prior to upgrade so you have any easy way of rolling back.\nIf you are running any of the plugins listed in\nPlugins affected by fix for JEP-200,\nupdate them after taking the backup but before upgrading Jenkins core.\n\nIf you have a way of testing the upgrade in an isolated environment before applying it to production,\ndo so now.\n\nUsing backups and a staging server is good advice before any upgrade but especially this one,\nwith a relatively high risk of regression.\n\nAfter upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nIf you do encounter a java.lang.SecurityException: Rejected: some.pkg.and.ClassName in the Jenkins UI or logs,\nyou may have found a case where an unusual plugin, or an unusual usage mode of a common plugin,\nviolates the existing whitelist.\nThis will be visible in the Jenkins system log as a message from jenkins.security.ClassFilterImpl like the following:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nwhere the link would direct you here.\n\nIf you find such a case, please report it in the Jenkins issue tracker, under the appropriate plugin component.\nLink it to JENKINS-47736 and add the JEP-200 label.\nIf at all possible, include complete steps to reproduce the problem from scratch.\nJenkins developers will strive to evaluate the reason for the violation and offer a fix in the form of a core and/or plugin update.\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nSimply make note of any class name(s) mentioned in such log messages,\nand run Jenkins with this startup option (details will depend on your installation method):\n\n-Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName\n\nFor plugin developers\n\nTesting plugins against Jenkins 2.102 and above\n\nAs a plugin developer encountering this kind of error,\nyour first task is to ensure that it is reproducible in a functional ( JenkinsRule) test\nwhen running Jenkins 2.102 or newer to reproduce the error.\n\nmvn test -Djenkins.version=2.102 -Denforcer.skip=true\n\nThe above assumes you are using a recent 2.x or 3.x parent Plugin POM.\nFor certain cases you may need to use Plugin Compat Tester (PCT)\nto run tests against Jenkins core versions newer than your baseline.\n\nRunning PCT against the latest Jenkins core:\n\njava -jar pct-cli.jar -reportFile $(pwd)/out/pct-report.xml \\\n    -workDirectory $(pwd)/work -skipTestCache true -mvn $(which mvn) \\\n    -includePlugins ${ARTIFACT_ID} -localCheckoutDir ${YOUR_PLUGIN_REPO}\n\nYou may need to run tests using an agent or force saves of plugin settings.\n\nFor maven plugins you can also specify custom Jenkins versions in Jenkinsfile to run tests against JEP-200:\n\nbuildPlugin(jenkinsVersions: [null, '2.102'])\n\n(again picking whatever version you need to test against)\nso that the test is included during CI builds, even while your minimum core baseline predates JEP-200.\n\nIf your plugins are built with Gradle, your mileage may vary.\n\nMaking plugins compatible with Jenkins 2.102 or above\n\nIf you discover a compatibility issue in your plugin,\nyou then have several choices for fixing the problem:\n\nIdeally, simplify your code so that the mentioned class is not deserialized via Jenkins Remoting or XStream to begin with:\n\nIf the problem occurred when receiving a response from an agent, change your Callable (or FileCallable) to return a plainer type.\n\nIf the problem occurred when saving an XML file (such as a config.xml or build.xml), use a plainer type in non- transient fields in your persistable plugin classes.\n\nIf the class(es) are defined in the Java Platform or some library bundled in Jenkins core, propose a pull request adding it to core/src/main/resources/jenkins/security/whitelisted-classes.txt in jenkinsci/jenkins.\n\nIf the class(es) are defined in a third-party library bundled in your plugin, create a resource file META-INF/hudson.remoting.ClassFilter listing them. ( example)\n\nYou may also do this for Java or Jenkins core library classes, as a hotfix until your core baseline includes the whitelist entry proposed above.\n\nIf the class(es) are defined in a JAR you build and then bundle in your plugin’s *.jpi, add a Jenkins-ClassFilter-Whitelisted: true manifest entry. This whitelists every class in the JAR. ( example)","title":"JEP-200: Remoting / XStream whitelist integrated into Jenkins core","tags":["core","security","remoting","upgrade"],"authors":[]}},{"node":{"date":"2017-12-14T00:00:00.000Z","id":"46206425-c22d-532b-b23f-d107881ab35a","slug":"/blog/2017/12/14/security-update/","strippedHtml":"We just released security updates to Jenkins, versions 2.95 and 2.89.2, that fix two security vulnerabilities.\nFor an overview of what was fixed, see the security advisory.\n\nWe usually announce core security updates well in advance on the jenkinsci-advisories mailing list, to give Jenkins administrators time to schedule a maintenance.\nAdditionally, we try to align security updates with the regular LTS schedule.\nWe have chosen not to do so in this case for two reasons:\n\nThe random failure to set up Jenkins is very noticeable, and given that we’ve seen automated exploits for unprotected Jenkins instances in the past we consider it important to fix that issue as soon as possible, so that users setting up new instances of Jenkins can be confident they won’t start up insecurely.\n\nThe CSRF issue appears to only affect instances for a very short (seconds at most, if at all) time period immediately after startup, so administrators could apply the fix during the next scheduled Jenkins downtime, rather than immediately.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[]}},{"node":{"date":"2017-11-08T00:00:00.000Z","id":"c98aa373-9dff-5895-b312-e24c5459a752","slug":"/blog/2017/11/08/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.89 and 2.73.3, that fix two low-severity security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[]}},{"node":{"date":"2017-10-11T00:00:00.000Z","id":"3b2aeb32-59cd-5469-815d-78144c195889","slug":"/blog/2017/10/11/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.84 and 2.73.2, that fix several security vulnerabilities.\nAdditionally, we published a new release of Swarm Plugin whose client contains a security fix, and Maven Plugin 3.0 was recently released to resolve a security issue.\nUsers of Swarm Plugin and Maven Plugin should update these to their respective newest versions.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nWe also published information about a vulnerability in Speaks! Plugin.\nThere is no fix available and we recommend it be uninstalled.\nIts distribution has been suspended.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Important security updates for Jenkins core and plugins","tags":["core","security","plugins"],"authors":[]}},{"node":{"date":"2017-08-11T00:00:00.000Z","id":"4d1723b9-7ca9-59e6-a301-6c0e75388381","slug":"/blog/2017/08/11/remoting-update/","strippedHtml":"Updated on Jan 10, 2019: The deprecated protocols were removed in Remoting 3.40+ and Jenkins 2.214+.\nSee jira:JENKINS-60381[Remove old, deprecated Remoting protocols] for more information and links.\n\nThere are upcoming changes in Jenkins \"core\" which may require extra steps\nwhen upgrading Jenkins.  If you use configuration management for Jenkins\nagents, please read this announcement carefully.\n\nIf you have ever seen messages like \"Channel is already closed\" or \"Remote call failed\" in your build logs,\nyou have already met Jenkins Remoting.\n\nRemoting is an agent executable and a library implementing the communication layer between Jenkins controllers and their agents (including communication protocols, distributed calls and classloading).\nIt is also used in several other cases: Maven Integration Plugin, Remoting-based CLI, etc.\n\nIn order to make it clear what’s changing in Jenkins Remoting, I have documented the various components on\nthe Remoting’s sub-project page, and will try to publish regular updates about the status of\nRemoting to this site and the developer mailing list.\n\nIn this post I would like to provide an update on the Remoting roadmap and to announce two major incoming changes: deprecation of old protocols and upgrade to Java 8.\nBoth changes will take place in one of the next Weekly releases.\nETA is Jenkins 2.75 on Aug 20, 2017.\n\nBelow are details on the incoming changes and compatibility notes.\n\nOld Remoting Protocols Deprecation\n\nIt has been almost one year since the release of JNLP4-connect protocol in Remoting 3.0.\nThis protocol has been enabled by default since 2.46.x, and so far it demonstrates good stability being compared to JNLP2 and JNLP3 protocols.\n\nAt the governance meeting\nwe decided to disable old Remoting protocols (JNLP/JNLP2 + CLI1) in new installations by default.\nThere are 3 reasons for it:\n\nMaintenance of multiple protocols takes a lot of extra effort.\nThe JNL2 NIO engine is complex and barely diagnosable.\n\nThere are known issues in JNLP2 connection management (see the protocol’s Errata). In many cases update to JNLP4 was a resolution\n\nJNLP1/JNLP2/CLI1 are unencrypted, and it is not something Jenkins users may expect in 2017\n\nIt is tracked as JENKINS-45841 in Jenkins JIRA.\n\nHow?\n\nWhen Jenkins is started in the new installation mode with enabled Installation Wizard, old protocols will be disabled\n\nJenkins shows an administrative warning when obsolete protocols are enabled\n\nCompatibility notes\n\nOlder instances won’t be affected by the disabling of the older JNLP1/JNLP2 protocols, which will still be enabled for them.\nNewly created instances which skip, or disable, the Setup Wizard will not be affected either.\n\n\"New\" Jenkins instances installed via setup wizard may be affected in edge cases. For example:\n\nAgents with Remoting older than 3.0 will be unable to connect.\n\nMitigation: Before updating make sure Remoting is not bundled custom Docker images, AMIs, etc.\n\nSwarm Plugin: old versions of Swarm Client (before 3.3) will be unable to connect to Jenkins, because Remoting 2.x is bundled\n\nMitigation : Update Swarm Client\n\nVery old jenkins-cli.jar without CLI2 support will be unable to connect.\n\nMitigation : Do not use Remoting-based CLI on new instances (see this blogpost)\n\nUpgrade to Java 8\n\nStarting with version 2.54, Jenkins requires Java 8 to run\n( announcement blog post).\nThis version is also required for Jenkins LTS 2.60.1.\n\nRemoting continued to support Java 7 for a while for backporting purposes,\nbut it will be also upgraded to Java 8 in the Remoting 3.11 release.\nThis Rremoting version is expected to be available in Jenkins 2.75 (ETA: Aug 20, 2017).\nThis change is tracked as JENKINS-43985.\n\nCompatibility notes\n\nThe update does not cause compatibility issues in common use-cases.\nHowever, there may be issues in custom Jenkins core builds and packaging.\nThere are several examples below.\n\nJenkins instances with built-in Remoting versions will NOT be affected, Java 8 is already required there\n\nUsers of community-provided Docker packages ( docker-agent,\ndocker-inbound-agent) will NOT be affected,\nJava 8 is already required there\n\nCustom Jenkins WAR file builds targeting Java 7 may fail to build/run if they bundle Remoting 3.11 or later\n\nCustom Jenkins agent instances (manually installed hosts, VM snapshots, Docker packages, AMIs, etc.) may fail if they download the latest Remoting version and use Java 7\n\nJava 9 support\n\nAs with Jenkins core, Java 9 not supported and not tested in Remoting.\nIt may work in some configurations, but it is not guaranteed.\n\nAs a consequence, it is not recommended to run Remoting with Java 9 right now.\nIt is also not recommended to use Maven Integration Plugin to run builds on Java 9.\n\nWhat’s next?\n\nThere are some ongoing activities in the Remoting sub-project:\n\nStability and Diagnosability improvements\n( JENKINS-38833)\n\nWhy? When it comes to Remoting issues, it is really hard to diagnose them\n\nRecently I have published some slides about preventing and diagnosing issues, but I want the behavior to be more stable by default\n\nThis Epic lists my plans about Remoting issues and papercuts I would like to fix this year\n\nRemoting Work Directories\n( JENKINS-44108)\n\nFor a long time logging was disabled by default in Java Web Start (JNLP) and SSH agents, because Remoting had no option to determine where to store such data before connecting to the controller\n\nThe new Remoting Work Directory feature (since Remoting 3.8) offers such storage, which is also used for storing JAR caches and for checking workspace writeability before accepting builds.\n\nThis Epic is about enabling Remoting work directories by default in common Agent launcher types.\n\nRemoting Upgradeability\n( JENKINS-44099)\n\nRight now Remoting is not being upgraded automatically on JNLP agents, it is supported only for Windows service agents starting from Jenkins 2.50\n\nOn the Jenkins controller side it is required to upgrade the Jenkins core in order to pick Remoting fixes.\n\nThis Epic aims simplifying the upgrade procedure for most common cases.\n\nIf you are interested in contributing to these tasks, or others in the Remoting\nsub-project, please feel free to reach out via the issue tracker or\n#jenkins IRC channel.\n\nIf you are coming to Jenkins World, you can also find me at the \"Ask the Experts\" booth there.\nSee more info about Ask the Experts here.\n\nUseful links\n\nRemoting Sub-Project on Jenkins website\n\nRemoting Release Notes\n\nRemoting documentation on GitHub\n\nMy slides about Remoting issues troubleshooting","title":"Remoting Update. Protocols deprecation, Java 8 requirement and plans","tags":["remoting","agents","upgrade","core"],"authors":[]}},{"node":{"date":"2017-04-26T00:00:00.000Z","id":"d81f1582-c3e8-5662-bd12-92e53401c9f2","slug":"/blog/2017/04/26/security-advisory/","strippedHtml":"We just released security updates to Jenkins, versions 2.57 and 2.46.2, that fix several security vulnerabilities, including a critical one.\n\nThat critical vulnerability is an unauthenticated remote code execution via the remoting-based CLI.\nWhen I announced the fix for the previous vulnerability of this kind, I announced our plans to revisit the design of the CLI that enabled this class of vulnerabilities.\n\nSince Jenkins 2.54, we now have a new CLI implementation that isn’t based on remoting, and deprecated its remoting mode.\nDespite it being a major feature, we decided to backport it to 2.46.2, so LTS users can also disable the unsafe remoting mode while retaining almost all of the CLI’s existing functionality.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\nI recommend you read these documents, especially if you’re using the CLI with Jenkins LTS, as there are possible side effects of these fixes.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Important security updates for Jenkins core","tags":["core","security"],"authors":[]}},{"node":{"date":"2017-02-01T00:00:00.000Z","id":"b68e4a15-e617-5570-bc2d-5ff59160e388","slug":"/blog/2017/02/01/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.44 and 2.32.2, that fix a high severity and several medium and low severity issues.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\nI strongly recommend you read these documents, as there are a few possible side effects of these fixes.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[]}},{"node":{"date":"2017-01-10T00:00:00.000Z","id":"977904eb-252b-582f-a038-4682f4224260","slug":"/blog/2017/01/10/security-warnings/","strippedHtml":"Jenkins 2.40 was released earlier this week, and readers of the\nchangelog\nwill have noticed that it now includes the ability to show security warnings\npublished by the configured update site.  But what does that mean?\n\nIn the past, we’ve notified users about security issues in Jenkins and in\nplugins through various means: Emails to the\njenkinsci-advisories mailing list\n(which I recommend you subscribe to), blog posts, and, recently, emails to the\noss-security mailing list.  But I still wanted to increase the reach of our\nnotifications, to make sure Jenkins admins are informed quickly about possible\nsecurity problems on their instances.  The logical next step was to include\nthese notifications in Jenkins itself, and that feature has been added in\nJenkins 2.40.\n\nToday we enabled the publication of warnings on our update sites: Once Jenkins\n2.40 (or newer) refreshes its cache of update site metadata, it may now inform\nyou that you’re using a vulnerable plugin that should be updated or removed.\nRight now, these aren’t previously unknown warnings, but reference security\nadvisories for plugin vulnerabilies that have been published over the past few\nyears.\n\nWe will of course continue to publish security advisories using the mailing\nlist of the same name, as well other means.\n\nStay safe!","title":"Security warnings in Jenkins","tags":["core","security"],"authors":[]}}]}},"pageContext":{"tag":"core","limit":8,"skip":24,"numPages":15,"currentPage":4}},
    "staticQueryHashes": ["3649515864"]}