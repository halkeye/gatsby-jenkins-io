{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/core/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-12-25T00:00:00.000Z","id":"c8d9b205-2db8-5364-a27b-52588cce2a9d","slug":"/blog/2018/12/25/year-in-review/","strippedHtml":"The end of a year is a great time to step back from the daily grind to look at the big picture.\n\nAcross the industry, the relentless march toward more automation still continues on. We are writing software faster than ever, but the demand for software seems to be going up even more, and I feel more and more businesses and executives are keenly aware that software and developers are king. At the ground level, every team I meet sees the software delivery automation to be a critical part of their \"software factory,\" and it’s important for them to create and manage them with unhinged flexibility and visibility.\n\nJenkins continues to play a major role in making this possible, after 14+ years since its birth, and if anything the pace of growth seems to be accelerating. In this dog year industry, that’s truly remarkable. Being a part of this achievement truly makes me proud.\n\nBuilding Jenkins, being a tool that everyone uses, comes with a great responsibility. So within the Jenkins community, we’ve been hard at work. In fact, 2018 has been the single most innovative year in the history of the whole project across the field, at multiple levels.\n\nAs we got bigger, we needed better ways to drive initiatives that cut across multiple people. This thinking led to JEPs and SIGs, and 2018 saw these formats getting great traction. After a year of operating them, I think we’ve learnt a lot, and I hope we will continue to improve them based on the learning.\n\nThese new formats gave rise to new collaborations. For example, Chinese Localization SIG resulted in our WeChat presence and localized website. Platform SIG was instrumental in Java 11 support.\n\nI’m also very happy to see new batch of leaders. In fear of missing out some people, I’m not going to list them individually, but we celebrated many of them as Jenkins Ambassadors this fall (and please nominate more for the next year!) Those people who lead key efforts are often people who are new to those roles.\n\nSome of the new leaders led other efforts that unlock new contributors. It’s about consciously thinking which segment of our potential contributors we aren’t tapping today and understanding why. Something any business does all the time. Ours resulted in Google Summer of Code and Outreachy participations.\n\nOur security process and the pace of fixes have gone up considerably this year again, reflecting our stepping up to the trust our users gave to us. For example, this year we rolled out a telemetry system that informs us to develop better fixes more quickly.\n\nNow, where these community improvements ultimately matter is what impact we are creating to software that you use. On that front, I think we did great in 2018, resulting in what I call\"5 super powers\" :\n\nJenkins X is probably the most visible innovation of this year, making it much easier to create modern cloud applications on Kubernetes. This also represents the significant expansion of the Jenkins community and its mission.\n\nJenkins Configuration as Code hit a major milestone \"1.0\" this year, and it’s continuing to gain more momentum and traction.\n\n\"Cloud Native Jenkins\" is the term I gave to a new effort that I’m calling to transform Jenkins into general purpose CI/CD engine that runs at scale on Kubernetes. There’s still much to be defined here, but you can already see some great things like Serverless Jenkins.\n\nEvergreen is another young and upcoming project that has ambitious thesis --- drastically simplifying the adoption and operation of Jenkins.\n\nPipeline effort formed a new SIG and I’m looking forward to the impact this will drive in 2019.\n\nThe not-so-secret sauce of the Jenkins community that threads together all these improvements from user visible changes to the community improvements is our ability to evolve. As I look forward to 2019, no doubt these things I mentioned will evolve, morph, merge, and split as we continue to learn and adopt.\n\nSo please, follow @jenkinsci and @jenkinsxio on Twitter to get updates on how we will evolve, and join our community to together build the software that rocks the world. How many open-source projects can say that?","title":"2018 in Review: A year of innovation","tags":["core","community","new-year-blogpost"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2018-12-14T00:00:00.000Z","id":"cc052415-dba7-5a62-91d8-3f6906f485d9","slug":"/blog/2018/12/14/java11-preview-availability/","strippedHtml":"Please refer to Running Jenkins on Java 11 documentation to have the up-to-date details on how to run Jenkins on Java 11.\n\nThis is a joint blogpost prepared by the Java 11 Support Team.\nOn Dec 18 (4PM UTC) we will be also presenting the Java 11 Preview Support at the Jenkins Online Meetup\n( link)\n\nJenkins, one of the leading open-source automation servers, still supports only Java 8.\nOn September 25 OpenJDK 11 was released.\nThis is a Long-Term-Support which will stay around for years,\nand in the Jenkins project we are interested to offer a full support of this version.\nOver the last year many contributors have been working towards enabling support for Java 11 in the project (Jenkins JEP-211).\nIt was a thorny path,\nbut now, on behalf of the Jenkins Platform SIG,\nwe are happy to announce preview availability of Java 11 support in Jenkins weekly releases!\n\nWhy do we need preview availability for Java 11?\nIt offers Jenkins contributors and early adopters a way\nto try out the changes before the general availability release happens early next year.\nIt should help us to get more exploratory testing and, hopefully,\nresolve most of the issues before Java 11 is officially supported in Jenkins.\n\nIn this blog post we will describe how to run with Java 11,\nand how to investigate compatibility issues and report them.\n\nBackground\n\nAs you probably remember,\nin June 2018 we had an online hackathon targeting Java 10+ support in Jenkins.\nAs a part of the hackathon,\nwe provided the experimental support of Java 11.\nThis event was a big success for us,\nand we were able to get Jenkins running with Java 10 and 11-ea,\nincluding major features like Jenkins Pipeline, JobDSL, Docker/Kubernetes plugins, Configuration as Code, BlueOcean, etc.\nIt gave us confidence that we can provide Java 11 support in Jenkins without major breaking changes.\nAfter the hackathon, Oleg Nenashev created\njep:211[\"Java 10+ support in Jenkins\"] (was later adjusted to target Java 11 only).\nPlatform Special Interest Group\nhas been also founded to coordinate the Java 11 support work\nand other platform support efforts (packaging, operating system support, etc.).\n\nA group of contributors continued working on Java 11 support,\nmostly focusing on upstreaming functional patches,\nenabling Java 11 support in development tools,\ntesting and addressing known compatibility issues.\nSee the Platform SIG meeting notes for detailed status updates.\nStarting from Jenkins 2.148, Jenkins successfully runs with latest OpenJDK 11 releases on various Linux and Windows platforms.\nWe performed a LOT of automated and exploratory tests, Jenkins plugins appear to work well with some exceptions (see below).\nThere is ongoing test automation effort towards the GA releases,\nbut we were able to successfully run Jenkins core tests,\nfull Acceptance Test Harness,\nand Plugin Compat Tester for recommended plugins.\nWe also deployed a temporary\nExperimental Update Center for Java 11\nwhich allows quickly delivering fixes for Java 11 early adopters.\nJenkins 2.155+ defaults to this update center when running with Java 11,\nand that’s why we announce preview availability for this version.\n\nOn Nov 19, 2018 we presented the current Java 11 support status at the Platform SIG meeting\nslides,\nand we agreed that we would like to proceed with the preview availability so that\nwe can offer something for evaluation to Jenkins users.\nBy the next meeting on Dec 04, all blockers have been addressed,\nand the Platform SIG meeting signed off the Java 11 preview availability.\n\nRunning Jenkins and Java 11 in Docker\n\nStarting from Jenkins 2.155, we provide Docker images for the Jenkins controller and agent.\nAll these images are based on the official\nopenjdk:11-jdk image maintained by the Docker Community.\nThere were discussions about migrating to other base images,\nbut we decided to exclude it from the Preview Availability scope.\nSimilarly, we do not provide Alpine images for now.\n\nJenkins controller image\n\nJava 11 support is now provided as a part of the official\njenkins/jenkins image.\nYou can run the Jenkins with Java 11 simply as:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:jdk11\n\nThe following tags are available:\n\njdk11 - Latest weekly release with Java 11 support\n\n2.155-jdk11 - Weekly releases packaged with Java 11\n\nThe image is fully compatible with\njenkins/jenkins documentation,\ne.g. you can use plugins.txt to install plugins, mount volumes and pass extra options via environment variables.\n\nAgent images\n\nIf you use containerized agents via Docker or Kubernetes plugins,\nwe have also released official Docker images for Jenkins agents:\n\njenkins/agent\n\njenkins/inbound-agent\n\njenkins/ssh-build-agent\n\nAll images use the latest-jdk11 image tag for JDK11 bundles.\nAnd sorry for the obsolete names!\n\nExperimental Jenkins controller images\n\nIn order to simplify testing, we also provide some experimental images on DockerHub.\nWe set up a continuous delivery flow for them,\nso you can get patches without waiting for Jenkins weekly releases.\n\njenkins4eval/blueocean-platform-support -\nEquivalent of jenkinsci/blueocean\n\nTag: latest-jdk11\n\nThe image bundles all Jenkins Pipeline and Blue Ocean patches required to run on Java 11\n\nIf you want to try Pipeline, use this image\n\njenkins/jenkins-experimental -\nEquivalent of jenkins/jenkins\n\nTag: latest-jdk11\n\nThe image is released from the java11-support feature branch in the Jenkins core\n\nThe branch may be slightly ahead or behind the master branch,\nwe may use the branch to quickly deliver patches to Java 11 users\n\nEventually we will move the experimental flow to the new jenkins4eval organization\nbeing created as a part of jep:217[].\n\nRunning jenkins.war with Java 11\n\nRunning without Docker is not that trivial,\nbecause Jenkins depends on some modules which have been removed from Java 11.\nWe plan to address it in the General Availability release somehow (see jira:JENKINS-52186[]),\nbut for now some manual actions are required to run Jenkins WAR with Java 11.\n\nDownload Jenkins WAR for 2.155\n\nDownload the following libraries to the same directory as jenkins.war\n\njaxb-api-2.3.0.jar (save as jaxb-api.jar)\n\njaxb-core-2.3.0.1.jar (save as jaxb-core.jar)\n\njaxb-impl-2.3.0.1.jar (save as jaxb-impl.jar)\n\njavax.activation v.1.2.0 (save as javax.activation.jar)\n\nRun the following command:\n\nRun Jenkins with ${JAVA11_HOME}/bin/java \\\n    -p jaxb-api.jar:javax.activation.jar --add-modules java.xml.bind,java.activation \\\n    -cp jaxb-core.jar:jaxb-impl.jar \\\n    -jar jenkins.war --enable-future-java --httpPort=8080 --prefix=/jenkins\n\nKnown compatibility issues\n\nTo help users to track down the compatibility issues,\nwe have created a new Known Java 11 Compatibility Issues Wiki page.\n\nSeveral important issues and obstacles:\n\nPipeline: Support Plugin has a known issue\nwith context persistency when running with Java 11 (jira:JENKINS-51998[])\n\nWe have deployed a temporary fix to the\nExperimental Update Center for Java 11.\n Fix version: 3.0-java11-alpha-1\n\nIf you use Jenkins Pipeline, make sure you run with this fix.\nOtherwise the jobs will fail almost immediately\n\nWhen updating instances to Java 11, make sure there is no running Pipelines\n\njira:JENKINS-54305[] -\nJDK Tool Plugin does not offer installers for JDK 11\n\njira:JENKINS-52282[] -\nJava Web Start is no longer available in Java 11, so it is no longer possible to start agents from Web UI.\nWe do not plan to provide a replacement.\n\nWe also know about some minor incompatibilities in other plugins,\nbut we do not consider them as blockers for preview availability.\n\nReporting compatibility issues\n\nIf you discover any Java 11 incompatibilities, please\nreport issues in our bugtracker.\nPlease set java11-compatibility labels for such issues\nso that they automatically appear on the Wiki page and get triaged.\n\nFor the security issues please use the standard\nvulnerability reporting process.\nAlthough we will be fixing Java 11 specific issues in public while it is in the preview,\nfollowing the security process will help us to investigate impact on Java 8 users.\n\nJava 11 Support Team\n\nOnce Java 11 support is released, we expect reports of regressions in plugins and Jenkins core.\nOne of the concerns are exotic platforms with native libraries, and of course other Java versions.\nThere is also a risk of 3rd-party library incompatibilities with Java 11.\nTo mitigate the risks, we have created a\nJava 11 Support Team.\nThis team will be focusing on triaging the incoming issues,\nhelping to review pull requests and, in some cases, delivering the fixes.\nThe process for this team is documented in JEP-211.\n\nWe do not expect the Java 11 Support Team to be able to fix all discovered issues,\nand we will be working with Jenkins core and plugin maintainers to get the fixes delivered.\nIf you are interested to join the team,\nreach out to us in the Platform SIG Gitter Channel.\n\nContributing\n\nWe will appreciate any kind of contributions in the Java 11 effort,\nincluding trying out Jenkins with Java 11, reporting and fixing compatibility issues.\n\nIf you want to do the exploratory testing,\nwe recommend to try out Java 11 support at one of your test instances.\nSuch testing will be much appreciated,\nespecially if you use some service integration plugins or exotic platforms.\nThe issue reporting guidelines are provided above\n\nIf you are a plugin developer/maintainer,\nwe would appreciate if you could test your plugin with Java 11.\nIn order to help with that, we have created a Wiki page with\nJava 11 Developer guidelines.\nThis page explains how to build and test plugins with Java 11,\nand it also lists known issues in development tools\n\nWhatever you do, please let us know about your experience by sending a message to\nthe Platform SIG mailing list.\nSuch information will help us a lot to track changes and contributions.\nAny other feedback about the migration complexity will be appreciated!\n\nWhat’s next?\n\nOn Dec 18 (4PM UTC) we will be presenting the Java 11 Preview Support at the Jenkins Online Meetup\n( link).\nAt this meetup we will summarize the current Java 11 Preview support status.\nIf you are a plugin developer, we will also organize separate sessions about testing plugins with Java 11 and about common best practices for fixing compatibility issues.\nPlease follow the Platform SIG announcements if you are interested.\n\nIn the next weeks we will focus on addressing feedback from early adopters and\nfixing the discovered compatibility issues.\nWe will also continue working on Java 11 support patches towards the general availability next year (jira:JENKINS-51805[]).\nIn addition to that, we will start working on Java 11 support in subprojects,\nincluding Jenkins X and Jenkins Evergreen.\n\nLinks\n\nJEP-211: Java 11 support in Jenkins\n\nJava requirements in Jenkins\n\nKnown Java 11 Compatibility Issues\n\nJava 11 Developer guidelines\n\nPlatform Special Interest Group","title":"Java 11 Support Preview is available in Jenkins 2.155+","tags":["core","developer","java11","community","platform-sig"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8e8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png","srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/914ee/oleg_nenashev.png 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/1c9ce/oleg_nenashev.png 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/bf8e1/oleg_nenashev.png 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/acb7c/oleg_nenashev.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/ef6ff/oleg_nenashev.webp 32w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/8257c/oleg_nenashev.webp 64w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/6766a/oleg_nenashev.webp 128w,\n/gatsby-jenkins-io/static/611f92ce782a36a3a1454a29c79753db/22bfc/oleg_nenashev.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-12-05T00:00:00.000Z","id":"f0b2bc67-df2c-5d35-83cb-1f19d82bdcd8","slug":"/blog/2018/12/05/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.154 and LTS 2.150.1, that fix multiple security vulnerabilities.\nSince 2.150.1 is the first release in the new LTS line, we also released 2.138.4, a security update for the previous LTS line.\nThis allows administrators to install today’s security fixes without having to upgrade to the new LTS line immediately.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes, see our LTS 2.138.4 upgrade guide.\n\nA note on previously released changes related to this fix\n\nIn the Jenkins core security updates released in August and October, we also included security improvements that can be disabled by setting various system properties.\nThose changes are an essential part of the SECURITY-595 fix, so we strongly recommend not disabling them for any reason.\nPreviously published documentation has been updated.","title":"Important security updates for Jenkins","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2018-10-10T00:00:00.000Z","id":"c142077a-cf17-5ac3-a33f-2658b51ec566","slug":"/blog/2018/10/10/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.146 and 2.138.2, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nFurther improvements\n\nIn addition to the security fixes listed in the security advisory, we also applied multiple improvements that make future security vulnerabilities more difficult, or even impossible to exploit.\n\nOne such improvement concerns cross-site scripting vulnerabilities, and comes with a risk of regressions.\n\nJenkins uses a fork of Jelly for the vast majority of the views it renders.\nSince 2011, it includes a feature that lets view authors opt in or out of automatic escaping of variable values for rendering in HTML, and since 2016, the plugin build tooling requires that views explicitly specify whether to apply this automatic escaping.\nDetails are available in the developer documentation.\n\nUntil now, if views do not declare whether to automatically escape, they were rendered without automatic escaping, and developers were expected to explicitly escape every variable reference that was not supposed to contain markup.\nThis has resulted in a number of cross-site scripting (XSS) vulnerabilities, most recently SECURITY-1130 in Job Config History Plugin.\n\nFor that reason, we have decided to enable this automatic escaping by default if plugins do not specify a preference.\nThis can result in problems with some plugins if they need their output to remain unescaped.\nWe expect that those plugins will adapt pretty quickly to this change, as the fix is typically straightforward.\nWe track known affected plugins and their status on the Jenkins wiki.\n\nIn the mean time, users can set the system property org.kohsuke.stapler.jelly.CustomJellyContext.escapeByDefault to false to disable this additional protection.","title":"Important security updates for Jenkins","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2018-10-09T00:00:00.000Z","id":"5b555e56-ade0-57d9-9cb9-c98ec50c81bf","slug":"/blog/2018/10/09/telemetry/","strippedHtml":"One of the major strengths of Jenkins is its customizability and extensibility.\nWith its plugin ecosystem and long list of (possibly hidden) options, Jenkins can be used for a wide range of use cases.\n\nThe downside of all this flexibility is that, not knowing how people use Jenkins, we mostly rely on issues filed in our bug tracker to know when things go wrong.\nAnd over the years, quite a few things have gone wrong.\nThe worst of these have been security fixes that have had unintended side effects.\nUnlike regular changes, it’s not really feasible to roll back security fixes, so users have sometimes had to choose between security and functionality.\nBut even changes developed in the open, such as the introduction of JEP-200, haven’t gone as smoothly as we hoped.\nWith big changes in the works, it’s more important than ever for us to have a better idea how Jenkins is used, so that we can deliver major changes safely.\n\nJenkins Evergreen solves this to some degree by being always connected to the Jenkins project and reporting back telemetry (mostly errors) allowing us to quickly react and provide fixes.\nBut that project is still pretty new, and its goal of being a more standardized Jenkins does not represent the breadth of configurations of the general user base.\n\nUplink telemetry\n\nSo we recently extended the existing, very limited anonymous usage statistics by adding a simple, extensible telemetry reporting client.\nWe’re calling it Uplink telemetry, based on the name of the service it reports its data to.\nIt made its debut in Jenkins 2.143.\n\nUplink telemetry is designed to collect data in trials, which are defined as:\n\na well defined set of technical data with a specific purpose\n\na start and end date of the collection\n\nDetailed information explaining the scope and purpose of currently active trials is available in the inline help for the usage statistics control in the global configuration.\n\nOf course, opting out of anonymous usage statistics there also disables the submission of Uplink telemetry.\nAnd while Uplink trials report a per-instance UUID to help with collation (e.g. removal of duplicate submissions), that UUID is exclusively used for this purpose, and independent of all other properties of an instance.\nThis prevents us from correlating reported data with specific instances.\nThese measures are in place to strike a balance between the need to understand how Jenkins is used and respecting users' privacy.\n\nImproving Jenkins through real-world data\n\nWe’re already created our first trial.\nJenkins 2.143 includes a trial to gather information about how common it is for instances to use Java system properties to disable (parts of) security fixes.\nWhen we publish a security fix and we’re not completely certain it is safe to apply for everyone, we add another of these options — just in case.\nAs you can imagine, quite a few of these hidden options exist.\nUntil now, user feedback in our issue tracker was the only way we could estimate the need for any of these options.\nWith Uplink, Jenkins will report that information to us.\n\nThe trial is scheduled to run for the next six weeks, enough to hopefully gather this information from a large number of users of both LTS and weekly releases.\nOur hope is that we will be able to remove some of these options entirely, as they might not be needed after all.\nFor others, we might need to consider elevating them to supported features, or finding better solutions obviating the need for them.\n\nIn the future, I will publish of some of what we have learned from the first trial running through Uplink telemetry.\nI look forward to Jenkins continuing to improve with real-world data informing our future decisions.","title":"Improving Jenkins Release Quality using Uplink Telemetry\n","tags":["core"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2018-08-31T00:00:00.000Z","id":"0d561c02-de0c-5799-a5a4-74b3cc361577","slug":"/blog/2018/08/31/shifting-gears/","strippedHtml":"Kohsuke here. This is a message for my fellow Jenkins developers.\n\nJenkins has been on an amazing run, but I believe we are trapped in a local optimum, and losing appeal to people who fall outside of our traditional sweet spot.\nWe need to take on new efforts to solve this. One is “cloud native Jenkins” that creates a flavor of Jenkins that runs well on Kubernetes.\nThe other is “gear shift”, where we take an evolutionary line from the current Jenkins 2, but with breaking changes in order to gain higher development speed.\n\nI say it’s time we tackle these problems head on. I’ve been talking to various folks, and I think we need to take on two initiatives.\nOne is what I call \"Cloud Native Jenkins,\" and the other is to insert a jolt in Jenkins.\n\nSome of you have already seen the presentation I posted on the Jenkins YouTube channel.  In this post, I’ll expand on that with some additional details.\n\nJenkins: Shifting Gears Presentation ( Slides)\n\nCome hear more in Kohsuke’s keynote at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.\n\nOur Amazing Success\n\nOur project has been an amazing success over the past 10+ years, thanks to you all. What started as my hobby project became a huge community that boasts thousands of contributors and millions of users.\nWhen I think about what enabled this amazing journey, I can think of several magic sauces:\n\nExtensible:\nthe ability to take the system, or a portion of the system, then build on top of it to achieve what you need, without anyone else’s permission.\nHere, I’m not talking about the specific technical mechanism of Guice, extension point, etc, but rather I’m talking more broadly about the governance, culture, distribution mechanism, and so on.\n\nGeneral purpose:\nAt the base level, Jenkins can be used for any kind of automation around the area of software development.\nThis matched the reality of the software engineering world well.\nCombined with extensibility, this general purpose system that is Jenkins can specialize into any domain, much like Linux and JetBrains IDEs.\n\nCommunity:\nTogether we created a community where different people push envelopes in different directions and share the fruits with others.\nThis meant everyone can benefit from somebody else’s work, and great ideas and best practices spread more quickly.\n\nOur Challenges\n\nThe way we set up our community meant that collectively we were able to work toward solving certain kinds of problems locally and organically, such as Android application development, new UX, more expressive pipeline description language, …​\n\nBut at the same time, the incremental, autonomous nature of our community made us demonstrably unable to solve certain kinds of problems.\nAnd after 10+ years, these unsolved problems are getting more pronounced, and they are taking a toll — segments of users correctly feel that the community doesn’t get them, because we have shown an inability to address some of their greatest difficulties in using Jenkins.\nAnd I know some of those problems, such as service instability, matter to all of us.\n\nIn a way, we are stuck in a local optimum, and that is a dangerous place to be when there is growing competition from all sides.\nSo we must solve these problems to ensure our continued relevance and popularity in the space.\n\nSolving those problems starts with correctly understanding them, so let’s look at those.\n\nService Instability\n\nCI/CD service was once a novelty and a nice-to-have.\nToday, it is very much a mission critical service, in no small part because of us!\nIncreasingly, people are running bigger and bigger workloads, loading up more and more plugins, and expect higher and higher availability.\n\nAdmins today are unable to meet that heightened expectation using Jenkins easily enough.\nA Jenkins instance, especially a large one, requires too much overhead just to keep it running.\nIt’s not unheard of that somebody restarts Jenkins every day.\n\nAdmins expect errors to be contained and not impact the entire service.\nThey expect Jenkins to defend itself better from issues such as pipeline execution problems, run-away processes, over resource consumption so that they don’t have to constantly babysit the service.\n\nEvery restart implies degraded service for the software delivery teams where they have to wait longer for their builds to start or complete.\n\nBrittle Configuration\n\nEvery Jenkins admin must have been burnt at least once in the past by making changes that have caused unintended side effects.\nBy “changes,” I’m talking about installing/upgrading plugins, tweaking job settings, etc.\n\nAs a result, too many admins today aren’t confident that they can make changes safely.\nThey fear that their changes might cause issues for their software delivery teams, that those teams will notice regressions before they do, and that they may not be able to back out somes changes easily.\nIt feels like touching a Jenga tower for them, even when a change is small.\n\nUpgrading Jenkins and plugins is an important sub case of this, where admins often do not have understanding of the impact.\nThis decreases the willingness to upgrade, which in turn makes it difficult for the project to move forward more rapidly, and instead we get trapped with the long tail of compatibility burden.\n\nAssembly Required\n\nI’ve often described Jenkins as a bucket full of LEGO blocks — you can build any car you want, but everyone first has to assemble their own car in order to drive one.\n\nAs CI/CD has gone mainstream, this is no longer OK.\nPeople want something that works out of the box, something that gets people to productivity within 5 clicks in 5 minutes.\nToo many choices are confusing users, and we are not helping them toward “the lit path.”\nEveryone feels uncertain if they are doing the right thing, contributors are spread thin, and the whole thing feels a bit like a Frankenstein.\n\nThis is yet another problem we can’t solve by “writing more plugins.”\n\nReduced Development Velocity\n\nThis one is a little different from others that our users face, but nonetheless a very important one, because it impacts our ability to expand and sustain the developer community, and influences how fast we can solve challenges that our users face.\n\nSome of these problems are not structural and rather just a matter of doing it (for example, Java 11 upgrade), but there are some problems here that are structural.\n\nI think the following ones are the key ones:\n\nAs a contributor, a change that spans across multiple plugins is difficult.\nTooling gets in the way, users might not always upgrade a group of changes together, reviewing changes is hard.\n\nAs a contributor, the tests that we have do not give me enough confidence to ship code.\nNot enough of them run automatically, coverage is shallow, and there just isn’t anything like production workload of real users/customers.\n\nThese core problems create other downstream problems, for example:\n\nAs a non-regular contributor, what I think of as a small and reasonable change takes forever and a 100 comments going back & forth to get in. I get discouraged from ever doing it again.\n\nAs a regular contributor, I feel people are throwing crap over the wall, and if they cause problems after a release, I’m on the hook to clean up that mess.\n\nAs a user, I get a half-baked change that wreaks havoc, which results in loss of their confidence to Jenkins, an even slower pace of change, etc. This is a vicious cycle as it makes us even more conservative, and slow down the development velocity.\n\nPath Forward\n\nIn the past, my frustration and regret is that we couldn’t take on an effort of this magnitude.\nBut that is NO MORE!\nAs CTO of CloudBees, I’m excited that these challenges are important enough for CloudBees now that we want to solve these efforts within the Jenkins project.\n\nI’ve been talking to many of you, and there are a number of existing efforts going on that touch this space already.\nFrom there, the vision emerged is that we organize around two key efforts:\n\nCloud Native Jenkins: a general purpose CI/CD engine that runs on Kubernetes, and embraces a fundamentally different architecture and extensibility mechanism.\n\nJolt in Jenkins: continue the incremental trajectory of Jenkins 2 today, but with renegotiated “contract” with users to gain what we really need, such as faster pace of development and better stability.\n\nCloud Native Jenkins\n\nIn order to solve these problems that we can’t solve incrementally,\nI’m proposing the “Cloud Native Jenkins” sub-project in the context of the\nCloud Native SIG\nwith Carlos, who is the leader of this SIG.\n\nWe don’t have all the answers, that’s something we’ll discuss and figure out collectively, but based on numerous conversations with various folks, I think there are many clear pieces of puzzles.\n\nKubernetes as the Runtime\n\nJust like Java was the winning server application platform in the early 2000s, today, Kubernetes is the dominant, winning platform.\nCloud Native Jenkins should embrace the paradigm this new platform encourages. For example,\n\nServerless / function-as-a-service build execution (ala\nJenkinsfile runner)\nthat are isolated.\n\nVarious pieces of functionalities deployed as separate microservices.\n\nServices interacting through\nKubernetes CRDs\nin order to promote better reuse and composability.\n\nThese are the design principles that enable highly desirable properties like infinite scalability, pay-as-you-go cost model, immutability, zero down time operability, etc.\n\nNew Extensibility Mechanism\n\nWe need to introduce a new mechanism of extensibility in order to retain the magic sauces, and continue our incredible ecosystem.\n\nFor example, microservice or container-based extensibility avoids the service instability problem (ala\nKnative builder\nand the\nuserspace-scm work.)\nPipeline shared libraries is another example that concretely shows how extensibility mechanism can go beyond plugin, though it hasn’t fully flourished as one just yet.\n\nData on Cloud Managed Data Services\n\nThe long-term data storage must be moved from the file system to data services backed by cloud managed services, in order to achieve high availability and horizontal scalability, without burdening admins with additional operational responsibilities.\n\nConfiguration as Code\n\nJenkins Configuration as Code\nhas been incredibly well received, in part because it helps to solve some of the brittle configuration problems.\nIn Cloud Native Jenkins, JCasC must play a more central role, which in turn also helps us reduce the surface area for Blue Ocean to cover by eliminating many configuration screens.\n\nEvergreen\n\nJenkins Evergreen\nis another well received effort that’s already underway, which aims to solve the brittleness problem and developer velocity problem. This is a key piece of the puzzle that allows us to move faster without throwing users under the bus.\n\nSecure by Default Design\n\nOver the past years, we’ve learned that several different areas of Jenkins codebase, such as Remoting, are inherently prone to security vulnerabilities because of their design. Cloud Native Jenkins must address those problems by flipping those to “secure by design.”\n\nFollowing Footsteps of Jenkins X\n\nJenkins X\nhas been pioneering the use of Jenkins on Kubernetes for a while now, and it has been very well received, too.\nSo naturally, part of the aim of Cloud Native Jenkins is to grow and morph Jenkins into a shape that really works well for Jenkins X.\nCloud Native Jenkins will be the general purpose CI/CD engine that runs on Kubernetes, which Jenkins X uses to create an opinionated CD experience for developing cloud native apps.\n\nAll The Same Good Things, with New Foundation\n\nAnd then on top of these foundations, we need to rebuild or transplant all the good things that people love about Jenkins today, and all the good things people expect, such as:\n\nGreat “batteries included” onboarding experience for new users, where we are present in all the marketplaces, 5 clicks to get going and easy integration with key services.\n\nModern lovable UX in the direction of front-end web apps that Blue Ocean pioneered.\n\nGeneral purpose software that is useful for all sorts of software development.\n\nCloud Native Jenkins MVP\n\nAs I wrote, a number of good efforts are already ongoing today. Thus in order to get this effort off the ground, I believe the first MVP that we aim toward is pretty clear, which is to build a function-as-a-service style Jenkins build engine  that can be used underneath Jenkins X.\n\nCloud Native Jenkins MVP combines the spirits of Jenkins Pipeline, Jenkins Evergreen, Jenkinsfile Runner, and Jenkins Configuration as Code.\nIt consists of:\n\nWebhook receiver:\na service that receives webhooks from GitHub and triggers a build engine.\n\nBuild Engine:\ntake Jenkinsfile Runner and evolve it so that it can run as a “function” that carries out a pipeline execution, with some CasC sprinkled together in order to control Jenkins configuration and plugins  used.\nThis way, Jenkinsfile works as-is for the most part.\n\nContinuously delivered through Evergreen:\nIt allows us to solve the combinatorial version explosion problem, allow us to develop changes that span multiple plugins faster, and develop changes more confidently.\nOf all the projects out there, ours should be the community that believes in the value of Continuous Delivery and Evergreen is how we bring continuous delivery to the development of Cloud Native Jenkins itself.\n\nThis solves some of the key challenges listed above that are really hard to achieve today, so it’s already incredibly useful.\n\nThe catch is that this MVP has no GUI. There’s no Blue Ocean UI to look at. No parsing of test reports, no build history. It uses no persistent volumes, it keeps no record of builds. The only thing permanent at the end of a build is whatever data is pushed out from Jenkins Pipeline, such as images pushed to a Docker registry, email notifications, and GitHub commit status updates.  Load of other features in Jenkins will not be available here.\n\nThis is not that far from how some sophisticated users are deploying Jenkins today. All in all, I think this is the right trade off for the first MVP. As you can see, we have most of the pieces already.\n\nFrom here, the build engine will get continuously more polished and more cloud native, other services will get added to regain features that were  lost, new extensibility will get introduced to reduce the role of current in-VM plugins, and so on.\n\nJolt in Jenkins\n\nCloud Native Jenkins is a major effort and in particular initially it’s not usable for everyone; it only targets a subset of Jenkins functionalities, and it requires a platform whose adoption is still limited today.\nSo in parallel, we need to continue the incremental evolution of Jenkins 2, but in an accelerated speed. Said differently, we need to continue to serve the majority of production workload on Jenkins 2 today, but we are willing to break some stuff to gain what we really need, such as faster pace of development and better stability, in ways that were previously not possible. This requires us injecting a jolt in Jenkins.\n\nRelease Model Change\n\nThe kind of jolts that we need will almost certainly means we need to renegotiate the expectation around new releases with our users.\nMy inspiration source is what happened to the development of Java SE. It changed the release model and started moving faster, by shedding off more pieces faster, in ways that they haven’t done before.\nAgain, Jenkins Evergreen is the key piece that achieves this without throwing users under a bus, for the reasons I described in the Cloud Native MVP above.\n\nCompatibility\n\nThis jolt is aimed to put us on a different footing, one where our current “forever compatibility” expectation does not hold. If that requires us to use a new major version number, such as Jenkins 3, or new major version number every N months, I’m open to that.\n\nOf course, whatever move we do has to make sense to users. The accelerated pace of value delivery needs to justify any inconvenience we put on users, such as migration, breaking changes, and so on.\n\nIn practice, what that means is that we need to be largely compatible. We have to protect users’ investment into their existing job definitions as much as possible. We continue to run freestyle jobs, etc…​\n\nIngredients\n\nOther proposals CloudBees is putting forward with the intent to staff the effort are:\n\nConfiguration as Code: accelerate that and make it a more central  part of Jenkins.\n\nDeveloper experience improvements through buildpack style auto-detection of project types.\n\nContinued evolution of Jenkins Pipeline\n\nThere’s an effort going on to remove CPS execution of Pipeline and isolate any failures during pipeline execution.\n\nContinue to evolve Jenkins Pipeline toward the sweet spot that works well with the Cloud Native Jenkins effort.\n\nContinued tactical bug-by-bug improvements of Pipeline.\n\nEvergreen: I already talked about this above.\n\nPlugin spring cleaning: let’s actively guide users more toward the sweet spot of Jenkins and reduce our feature surface area, so that we can focus our contributors’ effort to important parts of Jenkins. I expect this to be a combination of governance and technical efforts.\n\nTable stakes service integration: let’s look at what kind of tablestake tool/service integrations today’s user need, and\nsee if we are meeting/exceeding the competition.\nWhere we fall short, let’s add/reimplement what are needed.\n\nUI Effort\n\nThe Web UI will be likely done differently in Cloud Native Jenkins, as its own app and not a plugin in Jenkins. JCasC will also play a bigger role in Cloud Native Jenkins, reducing UI surface area from Jenkins.\n\nGiven that, CloudBees will reconsider where to spend its effort in Blue Ocean. The current work where parts of Blue Ocean are made reusable as NPM modules is one example that aligns well with this new vision.\n\nConclusion\n\nThis document lays out the key directions and approaches in a broad stroke, which I discussed with a number of you in the past. Hopefully, this gives you the big picture of how I envision where to move Jenkins forward, not just as the creator of Jenkins but as the CTO of CloudBees, who employs a number of key contributors to the Jenkins project.\n\nCome meet Kohsuke and chat with him about the direction of Jenkins at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins: Shifting Gears","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2018-08-15T00:00:00.000Z","id":"09b0e766-f69d-5d93-bda5-3729f028d501","slug":"/blog/2018/08/15/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.138 and 2.121.3, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Jenkins 2.121.3 and 2.138 security updates","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2018-07-18T00:00:00.000Z","id":"4f74ad43-7236-5f3c-bf1f-5c49dd133357","slug":"/blog/2018/07/18/security-updates/","strippedHtml":"We just released security updates to Jenkins, versions 2.133 and 2.121.2, that fix multiple security vulnerabilities.\n\nFor an overview of what was fixed, see the security advisory.\nFor an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.\n\nSubscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security.","title":"Security updates for Jenkins core","tags":["core","security"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}}]}},"pageContext":{"tag":"core","limit":8,"skip":8,"numPages":15,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}