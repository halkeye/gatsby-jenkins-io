{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/community/page/6",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-09-23T00:00:00.000Z","id":"c729ed47-ed8f-594c-a5e9-e523cff8ffd2","slug":"/blog/2019/09/23/outreachy-audit-log-release/","strippedHtml":"Thanks to our Outreachy interns over the past year, I’m proud to announce the initial release of the Audit Log plugin for Jenkins.\nThis plugin is the first major project completed related to Outreachy, and I’d like to give a brief overview of the functionality that was developed for this release.\nThe primary goal of this plugin is to introduce an audit trail of various Jenkins events using structured logging and related audit logging standards.\nInitially, this plugin covers audit events related to core Jenkins concepts like user accounts, jobs, builds, nodes, and credentials usage.\nMore specifically, this tracks:\n\nUser login and logout events\n\nCredentials usage\n\nUser creation (when using the Jenkins user database as a security realm)\n\nUser password updates (ditto)\n\nStarts and ends of builds\n\nCreation/modification/deletion/copying of items (which correspond to projects, pipelines, folders, etc.)\n\nCreation/modification/deletion of nodes.\n\nThis plugin defines and exports standardized log event classes and schemas corresponding to these events.\nOther plugins can add audit-log as a dependency to define their own audit events using Apache Log4j Audit and its catalog editor; then they can use the Maven plugin for generating the audit event classes for use in the plugin.\n\nThe other major feature of this plugin is configuring where to output these audit logs.\nBy default, audit logs will be written in HTML files (rotated once per day) to $JENKINS_HOME/logs/html/audit.html which are viewable through the \"Audit Logs\" root action link.\nIn the system settings, a section for audit logging is added where the main audit log output can be configured.\nThis can initially be configured to output via either a JSON log file in $JENKINS_HOME/logs/audit.log by default or to a syslog server using RFC5424 encoding.\n\nOverall, this experience has been rather interesting.\nBesides having an opportunity to mentor new contributors, Outreachy has helped open my eyes to the struggles that developers from around the world are dealing with which can be improved upon to help expand our communities.\nFor example, many countries do not have reliable internet or electricity, so the use of synchronous videoconferencing and other heavyweight, synchronous processes common to more corporate-style development are inadequate in this international context.\nThis doesn’t even begin to account for the difference in timezones which is not always an issue, though both problems are addressable by using asynchronous communication methods like chat and email.\nThis notion of asynchronous communication is an important aspect of the Apache Way, for example, which emphasises processes that allow for vendor neutral communities to form and thrive around a project.\n\nThis mentoring project was valuable to myself as well.\nAs a software engineer myself, project management is not my specialty, so this gave me a great opportunity to develop my own PM skills and technical leadership.\nMy own typical discovery process for feature development involves experimenting directly with the code to see what features make sense to prioritize and which would take a vast effort to implement.\nChanging my own discovery process to avoid implementing the features myself was difficult to adjust to, though I did defer any of my own feature contributions to this plugin until after the initial release.\nIn order to appropriately scope the project, I still had to spend a bit of time reading through the Jenkins codebase to determine which tasks could be implemented simply (e.g., good newbie-friendly issues), which tasks might require changes to Jenkins itself (previously discovered to take too long for these relatively short Outreachy rounds), and which tasks would require intimate familiarity with Jenkins and would likely be infeasible for new developers to Jenkins.\nThanks to the work done in discovery and delivery, I’ve also identified potential features for Log4j itself which could be used in future versions of this plugin.\n\nOverall, I think we did a good job of balancing the scope of this project without spending too much time in any specific area.\nThe first release of this plugin is now available in the Jenkins Update Center.\nIn the future, I hope to learn more about developing Jenkins UI components so that we can create a more dynamic and Jenkins-like configuration page for choosing where logs are output.\nWhile I don’t intend on using this plugin for further Outreachy rounds, I do hope to see more interest in it over time as the more security-conscious users out there discover this new plugin.","title":"Audit Log Plugin for Jenkins Releases 1.0","tags":["outreachy","logging","security","plugin","community"],"authors":[{"avatar":null,"blog":"https://musigma.blog/","github":"jvz","html":"<div class=\"paragraph\">\n<p>Mathematician, software engineer, and free software evangelist.\nWorks for CloudBees on the <a href=\"https://jenkins.io/security/\">Jenkins Security Team</a> along with other Jenkins community work since 2018.\nPMC Chair of the <a href=\"https://logging.apache.org/\">Apache Logging Services project</a> and Secretary for the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.</p>\n</div>","id":"jvz","irc":null,"linkedin":null,"name":"Matt Sicker","slug":"/blog/authors/jvz","twitter":"jvz"}]}},{"node":{"date":"2019-08-25T00:00:00.000Z","id":"d12bee04-3e3b-5a23-9775-d800d9abf794","slug":"/blog/2019/08/25/jenkinsworld-contrib-summit-ask-the-expert-booth/","strippedHtml":"Jenkins turns 15 years old!\nJenkins World brings together DevOps thought leaders, IT executives, continuous delivery practitioners and the Jenkins\ncommunity and ecosystem in one global event, providing attendees with the opportunity to learn, explore, network\nface-to-face and help shape the next evolution of Jenkins development and solutions for DevOps.\n\nThere is also the Jenkins Contributor Summit in San Francisco. The Jenkins Contributor Summit is the place where\ncurrent and future contributors get together to discuss, learn and collaborate on the latest and greatest efforts within\nJenkins project. The morning portion of the summit is a mix of presentations by the core contributors. The\npresentations highlight what each effort is about and what community members can do to help. In the\nafternoon breakout sessions with  Birds of a Feather tables for in-depth discussion, and collaboration with sub-project\ncontributors.\n\nI feel very honored to have been a part of this.\n\nDay 1\n\nDay one started with the contributor summit. This was a chance for everyone to get together and talk about\ncontributions and put faces to names. Most people I had only met via video chat or on gitter so I was super excited.\nWe gathered to hear about the start of the Jenkins open source landscape.\n\nNext up was the BoF/Unconference. I was leading these sessions and I felt they went really well.\nWe had fellow org admins Martin d’Anjou and Jeff Pearce give a talk about Google Summer of Code projects.\n\nGoogle Summer of Code student Natasha Stopa presented her project, Plugin Installation Manager Library/CLI Tool. This is\na super cool project and very well received in the community.\n\nWe closed out the session with a presentation from Steven Terrana from Booz Allen Hamilton and the awesome Jenkins\nTemplating Engine. If you have not had a chance to try this, please make sure you do at https://github.com/boozallen/jenkins-templating-engine.\n\nMain Expo Hall\n\nDay two and onward saw me and other Jenkins org admins in the Ask the Expert booth for the Jenkins community.\n\nThis was a really cool experience and gave me a chance to hear about things the community is working on and help with\nissues they are facing.\nThere were a range of questions from Jenkins X to many of the plugins I maintain such and the Jenkins Prometheus and the\nSysdig Secure Scanning plugins.\nThere were also a lot of Kubernetes questions. There is a lot of marketing data regarding the increased usage of\nKubernetes but I was seriously surprised by the massive interest in Jenkins on Kubernetes.\nOf course there were opportunities for selfie requests.\n\nLunch time demos got underway and we had a busy schedule.\nFirst up was the awesome Mark Waite to talk about the\nGit plugin. A lot of people use git in\nJenkins.\nThank you so much for all that you do Mark.\n\nJenkins org admin Martin d’Anjou was next on deck to talk about the Google Summer of Code. So amazing to think that the\nGoogle Summer of Code is also in its 15th year like Jenkins!\n\nNatasha Stopa is a Google Summer of Code student and she presented her project Plugin Installation Manager Library/CLI Tool.\nNatasha really put a lot of hard work in to this plugin and it was really awesome to see the turn out and support during\nher presentation.\n\nFinally there was me. I presented the Sysdig Secure Scanning Jenkins plugin which I am a maintainer of. I thank everyone who attended\n\nRight after the lunch time demos I also oversaw the Jenkins open space. This was an opportunity for the community to talk\nabout items and let them flow organically. I really enjoyed this session and felt it was also well received.\n\nWe closed out the day and the event with a picture of some of the Jenkins org admins and Google Summer of Code students.\nMissing from this photos are fellow org admins, Lloyd Chang and Oleg Nenashev\n\nClosing\n\nThis was an amazing experience. Huge thanks to CloudBees, the Jenkins community, Google Summer of Code, Tracy Miranda,\nAlyssa Tong and my employer Sysdig.\n\nTo think Jenkins is 15 years old is amazing! There has been so much accomplished and the future is so bright. I am so\nthankful for the opportunity to serve and be a part of the open source community.\nHere’s to 15 more years all!\n\nIf you are interested in joining any one of the Jenkins open source special interest groups, look here. We can use your\nhelp: https://jenkins.io/sigs/\n\nIf you are interested in joining the Summer of Code, look here: https://jenkins.io/projects/gsoc/\nIf you want to chat with us, find us here: https://jenkins.io/chat/\nOr if you want to email us, reach out at: https://jenkins.io/mailing-lists/\n\nSome photos outtakes:","title":"Jenkins World Contributor Summit and Ask the Expert booth","tags":["jenkinsworld","devopsworld2019","gsoc","gsoc2019","community","opensource","events","contributorsummit","asktheexpert"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png","srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/914ee/markyjackson-taulia.png 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/1c9ce/markyjackson-taulia.png 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/bf8e1/markyjackson-taulia.png 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/acb7c/markyjackson-taulia.png 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/ef6ff/markyjackson-taulia.webp 32w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/8257c/markyjackson-taulia.webp 64w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/6766a/markyjackson-taulia.webp 128w,\n/gatsby-jenkins-io/static/2513553514518e745b05cc49f8778553/22bfc/markyjackson-taulia.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"markyjackson-taulia","html":"<div class=\"paragraph\">\n<p>Hi! Super happy you found me here. I’m Marky Jackson and I am a lover of family, friends and a die-hard San Francisco Giants fan. I left my heart in San Francisco in the summer of 2020 and now reside in San Diego, California.\nI am a senior software engineer at Equinix Metal working on the Tinkerbell project.\nI am a graduate student studying Data Science &amp; Machine Learning under Michal Fabinger.\nI was previously a Jenkins Goverence Board as well as the Jenkins Events Officer, a Kubernetes Org member, a Kubernetes Release Manager Associate, a Continuous Delivery Foundation Ambassador, a Jenkins core contributor, a Jenkins Google Summer of Code org admin and mentor, a Google Summer of Docs org admin and mentor, and helped with software development and community management on the Ortelius Project.\nI have had profiles in the CNCF and other mediums. In the past I have spoken publicly and enjoyed writing blogs on technical topics. Previously, I was named the Most Valuable Jenkins Advocate.\nFinally, I was previously a mentoring lead within the Kubernetes project as well as a previous Kubernetes Outreachy coordinator for the Kubernetes project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find me on Twitter @markyjackson5\nIn January 2021, I decided to step back from open-source projects for the foreseeable future and focus on mental health, family, work and graduate school.</p>\n</div>","id":"markyjackson-taulia","irc":"markyjackson_","linkedin":"markyjackson5","name":"Marky Jackson","slug":"/blog/authors/markyjackson-taulia","twitter":"markyjackson5"}]}},{"node":{"date":"2019-08-22T00:00:00.000Z","id":"9628d1b5-66f4-59a3-9d83-6daecb429bb8","slug":"/blog/2019/08/22/devops-world/","strippedHtml":"Last week I had the privilege of attending DevOps World - Jenkins World in San\nFrancisco to present my Google Summer of Code project for plugin management. It was\nan amazing experience getting to meet people from all over world who are trying\nto make the development and release process easier and more efficient. I enjoyed\nlearning more about industry tools, processes, and standards, and meeting CI/CD\nexperts and contributors in the open source community.\n\nBelow is a summary of my experience. Thank you to the Jenkins project and CloudBees for making\n my trip and attendance possible!\n\nDay 1\n\nMonday was the Continuous Delivery Contributor Summit, which focused on projects\nunder the CDF umbrella.  After checking in and grabbing my badge, I was able to\nmeet up with some of the Google Summer of Code org admins. It was great\nbeing able to actually meet them in person after talking to them over video\nconferencing and chats all summer!\n\nTracy Miranda started the summit out by introducing the Continuous Delivery Foundation,\nwhich aims to provide a vendor neutral home to help and sustain open source projects\nfocusing on all aspects of continuous delivery.  Currently, Jenkins, Tekton, Spinnaker,\nand JenkinsX have joined the foundation.  Project updates were given for Jenkins,\nTekton, and JenkinsX.  In the afternoon, attendees split into different groups for\nunconference sessions.  I presented my project to the Jenkins group.  Afterwards,\nthere was free time to chat with other attendees about my project and the other Jenkins\nprojects. Lastly, lightning talks were given before everyone headed to the contributor\nappreciation event to grab some food and drinks.\n\nDay 2\n\nI attended the Jenkins Pipeline Fundamentals Short Course in the morning. Even\nthough I’m working on a project for Jenkins, there’s still a lot I don’t know so\nI just wanted to try to learn more.\n\nA lot of the afternoon sessions filled up, so I spent the afternoon trying to meet\nother people at the conference, before heading to the keynote. The keynote\ntalked more about the CDF and some of the backstory behind its origin.  This year is also a big anniversary for Jenkins - it has now been\naround for 15 years.\n\nAfter the keynote, I checked out a Women in Tech mixer and\nthe opening of the exibition hall. Probably my favorite swag I picked up was the\n\"Will Code for Beer\" stickers and a bottle of hot sauce.\n\nDay 3\n\nThe morning began with another keynote. Shawn Ahmed of CloudBees talked about the\nchallenges of visibility into bottlenecks of the development process and Rajeev Mahajan\ndiscussed how HSBC tackled DevOps.  The rest of the day I attended different sessions\non container tooling, implementing CI/CD in a cloud native environment, running\nJenkins on Jenkins, and database DevOps.\n\nAfter the sessions finished, I wandered\naround the expo until it closed, then joined some of the other conference attendees\nto have some fun at a ping pong bar nearby.\n\nDay 4\n\nThe final and last day of the conference was probably my favorite.  The morning\nkeynote revealed that Zhao Xiaojie had won an award for his work on Jenkins advocacy,\nsome other DevOps award panelists talked about their approaches to different challenges,\nthen David Stanke gave an enjoyable presentation about cloud native CI/CD. I was\nable to present my summer project and attend a few more sessions, including one\nabout DevOps at scale, and another about use cases for machine learning in CI/CD pipelines.\n\nThe last keynote given by James Governor was a thoughtful look into the current and\nfuture states of tech. How does tech look like it will scale in the coming years\nin the U.S. and across the world? How can we make tech more inclusive and accessible?\nWhat can we do to minimize our environmental footprint?  In particular, his points\non welcoming people from a non-traditional computer science background resonated with\nme since I’m currently undergoing my own career transition to tech.\n\nAfter the conference ended, I said goodbye to the remaining GSoC org admins before\nmeeting an old friend for dinner and bringing along some new friends I met at the\nconference.  I spent the remaining part of the night singing karaoke with\nthem before heading out of San Francisco the next morning.\n\nThanks again to everyone who supported me and encouraged me leading up to and during\nmy presentation, patiently answered my questions as I tried to gather more context\nabout CI/CD tools and practices, and made my first DevOps conference so enjoyable!","title":"My DevOps World - Jenkins World 2019 Experience","tags":["pluginmanagement","devopsworld2019","gsoc","gsoc2019","community","events"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#280818","images":{"fallback":{"src":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg","srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/405b9/stopalopa.jpg 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7b6be/stopalopa.jpg 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/7f211/stopalopa.jpg 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/ebcfb/stopalopa.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/0ade5/stopalopa.webp 32w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/5b0b1/stopalopa.webp 64w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/96834/stopalopa.webp 128w,\n/gatsby-jenkins-io/static/55656e58d7dc5462c696501b0b08bd16/805f6/stopalopa.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":184}}},"blog":null,"github":"stopalopa","html":"<div class=\"paragraph\">\n<p>Natasha is a Master&#8217;s student at Penn State University. She was accepted to Google Summer of Code 2019 for a project on creating <a href=\"https://jenkins.io/projects/gsoc/2019/plugin-installation-manager-tool-cli/\">a plugin management tool</a>.\nIn her spare time she enjoys spending time outdoors, listening to podcasts and cuddling with her cat.</p>\n</div>","id":"stopalopa","irc":null,"linkedin":null,"name":"Natasha Stopa","slug":"/blog/authors/stopalopa","twitter":"stopamine"}]}},{"node":{"date":"2019-05-30T00:00:00.000Z","id":"0cba81fa-0a2a-5225-8fdf-6ce66f9aa4d5","slug":"/blog/2019/05/30/becoming-contributor-newbie-tickets/","strippedHtml":"Two months ago I published an introductory article on\nthe journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about\nthe multiple ways in which we can participate and contribute. Then, a first—​basic—​contribution I made to the site\nrepository was described.\n\nNow, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.\n\nGetting started with tickets and processes\n\nBeginners guide to contributing and Jenkins Jira\n\nReviewing the developer section in jenkins.io is probably the best starting point, and a\nreference link to keep handy. The beginners guide to contributing to Jenkins\ncan also be useful, since it points to different repositories, tools (such as the issue tracker) and governance documents.\nBesides, it describes best practices for commit messages, code style conventions, PR guidelines, etc.\n\nOnce we get a general understanding of the former and want to actually start coding, we may get stuck trying to come up\nwith something to work on.\n\nVisiting the Jenkins issue tracker, feels like the natural next\nstep, since it is full of potential bugs and enhancements that have already been reported by the community. However, it\nis quite easy to feel overwhelmed by the possibilities listed there. Bear in mind that in a 10+-year-old project like\nthis, most of the things that are reported are tricky for a newcomer to work on. For that reason, filtering by\nnewbie-friendly tickets is probably\nthe best idea.\n\nFigure 1. Screenshot displaying the list of newbie-friendly tickets in the Jenkins Jira\n\nSelecting a ticket\n\nIn my case, I spent some time reviewing the newbie-friendly tickets, until I found one\nthat seemed interesting to me and also looked like something I would be able to fix:\n\nFigure 2. Screenshot of the ticket I decided to work on\n\nProcesses\n\nAt this stage, when we have decided to take ownership of a ticket, it’s a good practice to let the rest of the community\nknow that we are planning to start working on it. We can do so easily, by assigning the ticket to ourselves (see the\n“ Assign ” button below the ticket summary).\n\nAssigning the ticket to ourselves in the Jenkins Jira will allow any other contributors to know that we are planning to\ntake care of the ticket; and in case they are also interested in contributing to it, they will know who to reach if they\nwant to coordinate work or ask for status. That said, it is worth mentioning that assigning a ticket to yourself does\nnot mean that other contributors cannot work on it from then onwards. Jenkins is an open-source project and anyone is\nwelcome to create their own PRs, so anybody can propose their own solution to the ticket. But as you can guess, if the\nticket is assigned to somebody, most people will probably reach the assignee before starting to work on it.\n\nRelated to the former, it is also important to bear in mind that we should not postpone work on the ticket for too long\nonce we have assigned the ticket to ourselves. Other potential contributors might be ignoring the ticket because they\nsee yourself assigned to it.\n\nOnce we are about to actually start working on the ticket, it is also a good practice to click the “ Start Progress ”\nbutton. This action will change the status to “ In progress ”, signaling to the community that we are currently working\non this particular ticket.\n\nSetting up the necessary stuff on our computer\n\nConfiguring, installing and testing\n\nAs described in the first article of this journey, the\ninitial step to start contributing to a particular repository is to fork it to our GitHub account, and then clone it to\nour local computer.\n\nAs usual, in the Jenkins core repository the CONTRIBUTING file\ndescribes the necessary steps to get the repository working locally. This includes installing the necessary development\ntools: Java Development Kit ( OpenJDK is the recommended choice), Maven and any IDE supporting\nMaven projects. Note that instructions to install JDK and Maven are linked in the contributing guidelines.\n\nOnce we have all the necessary tools installed and configured, we are ready to build Jenkins locally\nand also to run tests.\n\nGetting down to business\n\nReviewing ticket details\n\nNow that I was ready to start working on the ticket, I had to review it in more detail, to fully understand the problem.\n\nThe description of the ticket I was planning to work on included two links. The first one was to\na screenshot that showed the actual bug. It showed\nhow several non-compatible plugins were being selected when clicking “ All ”, even though the intended behavior was to\nonly select the compatible plugins. The second link was a reference to a code fragment\nthat showed other validations that had to be taken into account when checking if a plugin update was compatible or not\nwith the current installation.\n\nReproducing the issue locally\n\nEven though I had now understood the issue in better detail, I had not seen it myself live yet, so it seemed to me that\nthe next logical step was to reproduce it locally.\n\nTo reproduce the issue locally in our computer, we can either use the local war file that we can generate by\nbuilding Jenkins from the source code\nor we can download the latest Jenkins version available and run it locally. When I worked\non this ticket, the latest available version was 2.172 and, when I built if from the sources I saw version 2.173-SNAPSHOT,\nwhich was the next version, in which the community was already working on.\n\nIn general it is a good idea to reproduce bugs locally, not only to get a better understanding, but also to make sure\nthey are actual issues. It could always be an issue happening only on the reporter’s end (e.g. some user misconfiguration).\nOr it could be a ticket referencing an old issue that has been fixed already. This latest possibility didn’t sound that\nstrange to me, since the ticket was one month old. It could have been handled by someone else in the meantime, without\nnoticing the ticket existed. Or the contributor might have forgotten to update the ticket in the issue tracker after the\nfix was committed.\n\nSo, for all the reasons above, I ran the latest Jenkins version locally. From a terminal, I went to the\nfolder in which the war file was placed, and ran java -jar jenkins.war, which starts Jenkins locally on http://localhost:8080.\n\nFrom the home page I navigated to the Plugin Manager (clicking the “ Manage Jenkins ” link in the left hand side and\nthen selecting “ Manage Plugins ” in the list).\n\nIn the Manage Plugins page, the list of plugin updates appears. In my case, since I re-used an old JENKINS_HOME\nfrom an older installation, several plugins showed up in the list, requiring updates. That allowed me to test the behavior\nthat was supposed to be failing.\n\nWhen I clicked on the “Select all” option at the bottom, this is what I got:\n\nFigure 3. Screenshot showing the error, reproduced locally, after clicking “Select All”\n\nAs it had been reported in the ticket, the behavior was inconsistent. In a previous version, the behavior of the “ All ”\nselector had been changed (with the best intent), aiming to only check the compatible plugins. However, as can be seen\nin the screenshot, the behavior was not the expected one. Now, neither “all” nor “only compatible” plugins were being\nselected, since some plugins with compatibility issues were also being checked, unintentionally.\n\nFiguring out a fix\n\nWhen reading the conversation in the original PR in which the behavior of the “ All ” selector had been changed, I saw a\nsuggestion of having a separate “ Compatible ” selector, thus leaving the “ All ” selector with the traditional behavior.\nI liked the idea, so I decided to include it as part of my proposed change.\n\nAt this stage, I had a clear picture of the different things I needed to change. These included: 1) The UI, to add a new\nselector for “Compatible” plugins only, 2) the JS code that applied the changes to the interface when the selectors were\nclicked and 3) probably the back-end method that was determining if a plugin was compatible or not.\n\nApplying the change\n\nAs usual, and as it is also recommended in the contributing guidelines, I created a separate feature branch to work on\nthe ticket.\n\nAfter reviewing the code, I spent some time figuring out which pieces I needed to change, both in the back-end and also\nin the front-end. For more details about the changes I had to make, you can take a look at the changes in my PR.\n\nAs a basic summary, I learned that the classic Jenkins UI was built using Jelly\nand, after understanding its basics, I modified the index.jelly file to include the new selector, assigning the\nfunction that checked the compatible plugins to this new selector, and re-using the existing “toggle” function to set\nall checkboxes to true in the case of “ All ”. I also had to modify the behavior of the checkPluginsWithoutWarnings\nJavaScript function, to un-check the incompatible ones, since there was now an actual “ All ” selector that was not there\npreviously, and that un-check case was not being taken into account. Then, I created a new back-end Java method\nisCompatible, inside the UpdateSite.java class, which now calls all the different methods that check different\ncompatibilities and returns the combined boolean result. For this change, I included an automated test to verify the\ncorrect behavior of the method, contributing to the test coverage of the project. Finally, I modified the table.jelly\nfile to call the new back-end method from the UI, replacing the existing one that was not taking all cases into account.\n\nAs you can see, the change involved touching different technologies, but even if you face a similar situation in which\nyou are not familiar with some of them, my advice would be carry on, don’t let that stop you. As software engineers, we\nshould focus on our evergreen skills, rather than on knowing\nspecific technologies; adapting to whatever framework we have to use at a given moment, learning whatever we need about\nthe new technology to complete the task and applying cross-framework principles and best practices to provide a quality\nsolution.\n\nResult\n\nAfter the changes described above, the resulting UI includes a new option, and the corresponding behaviors of the three\nselectors work as expected:\n\nFigure 4. Screenshot of the new version, displaying the behavior achieved by clicking the new “Compatible” selector\n\nPublishing the change\n\nSubmitting a Pull Request\n\nIn the contributing guidelines of the Jenkins core repository there is also a section about proposing changes,\nwhich describes the necessary steps that have to be followed in order to create a Pull Request (PR) with our change.\n\nFurthermore, there is a PR template in\nthe repository, which will be loaded automatically when creating a new PR and that will serve as a basis for us to provide\nthe necessary information for the reviewers. We are expected to: include a link to the ticket, list the proposed changelog\nentries describing our changes, complete the submitter checklist and add mentions to the desired reviewers (if any).\n\nIn my case, I followed the template when creating my PR,\ncompleting all sections. I linked the Jira ticket, provided two proposed changelog entries, completed the submitter\nchecklist and added three desired reviewers (explaining why I thought their reviews would be valuable). I also linked\nthe original PR that was referenced in the ticket, to provide further context.\n\nFigure 5. Screenshot of the PR I submitted\n\nThe approve and merge process\n\nAs stated in the contributing guidelines, typically two approvals are needed for the PR to be merged; and it can take\nfrom a few days to a couple of weeks to get them. Sometimes, one approval from a reviewer and a 1-week delay without\nextra reviews is considered enough to set the PR as ready-for-merge. However, both the time-to-merge and the number\nof approvals necessary might vary, depending on the complexity of the change or the area of Jenkins core that it affects.\n\nAfter the necessary approvals have been received, a Jenkins core maintainer will set the PR as ready-for-merge, which\nwill lead to it being merged into the master branch when one of the following releases are being prepared.\n\nIn my case, I received a review by Daniel (the reporter of the ticket and one of my “desired reviewers”) the very day I\nsubmitted the PR (April 14th). He made several very useful suggestions, which led to changes from my side. After those\nchanges, Daniel made minor remarks and my PR got another review, which was its first approval. After a week had passed\nwithout further news, I added the remaining minor suggestions from Daniel and a few days later received another approval,\nto which Daniel’s final approval was added, leading the PR to be labeled ready-for-merge, being later merged the same\nday (April 26th).\n\nFigure 6. Screenshot of the final state of the PR, after being merged\n\nRelease\n\nFor every new release, repository maintainers will select a set of PRs that have already been labeled ready-for-merge,\nmerge them to master, prepare changelogs (often using the suggestions included in the PRs by the authors) and proceed with\nthe creation of the new release. There is no additional action required from Pull Request authors at this point.\n\nEvery week a new version of Jenkins is released, so when your PR is merged, your changes will—​most likely—​become part\nof the following weekly release of Jenkins.\n\nEventually, your changes will also reach the Long-term support (LTS) release, which is\na different release line, aimed for more conservative users. This release line gets synced with the weekly release by\npicking, every 12 weeks, a relatively recent weekly release as baseline for the new LTS release. In between, intermediate\nLTS releases are created only to include important bug fixes, cherry-picked from the weekly releases. New features are\ntypically delayed until the next baseline for the LTS release is defined.\n\nRegarding the example described in this post, it was released in Jenkins 2.175 (weekly release), soon after being\nmerged. And will probably be included in the next LTS, which should be released next month (June 2019).\n\nDone!\n\nAnd that’s it! We have now covered the whole lifecycle of a new proposed change to Jenkins core. We have reviewed the\nprocess from the very beginning, picking a ticket from the Jenkins issue tracker; all the way to the end, having our\nchange released in a new Jenkins version.\n\nIf you have never contributed but are willing to do so, I hope this article motivates you to go back to the list of\nnewbie-friendly tickets, find one that looks interesting to you, and follow the steps described above, until you see\nyour own change released in a new Jenkins version.\n\nRemember, don’t try to solve a complicated issue as your first ticket, there are plenty of easier ways in which you can\ncontribute, and every little helps!","title":"Becoming a Jenkins contributor: Newbie-friendly tickets","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg","srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/3af71/romenrg.jpg 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/1e7bb/romenrg.jpg 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/7b60f/romenrg.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/bf13b/romenrg.webp 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/9edd6/romenrg.webp 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/f5f75/romenrg.webp 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff962/romenrg.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/authors/romenrg","twitter":"romenrg"}]}},{"node":{"date":"2019-05-22T00:00:00.000Z","id":"50433d34-f53f-56da-b4f5-354c5b873ee1","slug":"/blog/2019/05/22/outreachy-audit-log-project/","strippedHtml":"The Audit Log Plugin for Jenkins is an in development project to integrate standardized audit logging trails to various core actions in Jenkins.\nThis project integrates the recently released Apache Log4j Audit library to allow for a vast array of possible audit logging destinations and configuration.\nWe began this plugin not long after Log4j Audit 1.0.0 was released last year by partnering with Outreachy where we mentored two interns who laid the foundations of the project.\nThis year, we applied to Outreachy again to continue the project, and we were able to accept two more Outreachy interns: Aarthi Rajaraman and Gayathri Rajendar.\nBoth have already been adding new features and improving the plugin over the past couple months, and the internship officially began on 20 May.\n\nThis round has some ambitious goals of various features and documentation we wish to create.\nAfter having added audit log support for several built-in event listeners in Jenkins around the lifecycle of projects, builds, nodes, and authentication during both the previous internship and the applications to this one, we would like to accomplish the following:\n\nMake a 1.0 release of the plugin for the Jenkins Update Center. #34\n\nAdd documentation on supported audit log types and configuration options. #40\n\nAdd audit logs for credential usage and lifecycle events. #35, #36\n\nAdd audit logs for user property lifecycle events. #37\n\nDefine or document an API for other plugins to use to define and log their own audit events. #30\n\nEnsure audit log events use consistent vocabulary with the Jenkins UI. #33\n\nAdd an audit log event recorder/viewer comparable to the Jenkins logger recorder administrative UI. #32\n\nAdd support for configuring a syslog-compatible log server for writing audit logs. #29\n\nAdd support for configuring a relational database such as PostgreSQL for writing audit logs. #31\n\nImprove unit test coverage and pay down technical debt. #38\n\nBegin discovery on alternative ways to manage the underlying Log4j Core configuration such as via the upcoming integration with Spring Cloud Configuration. #39\n\nIn the future, we hope to participate with more projects and mentors.\nGoing on concurrently with Outreachy right now is Google Summer of Code 2019 where we are mentoring several more projects and students.\nPlease extend a warm welcome to all our new contributors and community members from Outreachy and GSoC!","title":"Audit Logging in Jenkins: An Outreachy Project","tags":["community","logging","outreachy"],"authors":[{"avatar":null,"blog":"https://musigma.blog/","github":"jvz","html":"<div class=\"paragraph\">\n<p>Mathematician, software engineer, and free software evangelist.\nWorks for CloudBees on the <a href=\"https://jenkins.io/security/\">Jenkins Security Team</a> along with other Jenkins community work since 2018.\nPMC Chair of the <a href=\"https://logging.apache.org/\">Apache Logging Services project</a> and Secretary for the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.</p>\n</div>","id":"jvz","irc":null,"linkedin":null,"name":"Matt Sicker","slug":"/blog/authors/jvz","twitter":"jvz"}]}},{"node":{"date":"2019-05-11T00:00:00.000Z","id":"958e77ed-5f61-569f-b036-053c7e4e1e6e","slug":"/blog/2019/05/11/docs-sig-announcement/","strippedHtml":"We’re pleased to announce the formation of the Jenkins Documentation Special Interest Group.\nThe Docs SIG encourages contributors and external communities to create and review Jenkins documentation.\n\nSee the Special Interest Group Overview for more details and plans.\n\nHow can I help?\n\nThe Jenkins Documentation SIG would love to have your help with:\n\nreviewing and fixing open bug reports\n\nreviewing Jenkins documentation pull requests\n\nreviewing Jenkins X documentation pull requests\n\nHow can I fix a documentation bug?\n\nInstructions for contributing to the Jenkins documentation are in the CONTRIBUTING file of the site repository.\nFollow the instructions in that file and submit pull requests for review.\n\nInstructions for contributing to the Jenkins X documentation are on the Jenkins X documentation site.\nFollow the instructions in that file and submit pull requests for review.\n\nHow can I evaluate a pull request?\n\nPull requests for the Jenkins project are reviewed in the Jenkins documentation repository.\nLog in to GitHub with your credentials and add your review comments to pull requests.\n\nPull requests for the Jenkins X project are reviewed in the Jenkins X documentation repository.\nLogin to GitHub with your credentials and add your review comments to pull requests.","title":"Jenkins Documentation Special Interest Group","tags":["documentation","docs","community"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#786888","images":{"fallback":{"src":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg","srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/f4523/markewaite.jpg 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/6859a/markewaite.jpg 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/60e20/markewaite.jpg 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/57001/markewaite.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1fd06/markewaite.webp 32w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/a7803/markewaite.webp 64w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/1a87d/markewaite.webp 128w,\n/gatsby-jenkins-io/static/b6d1673d3033c967ff61ee8d4c73aefc/27a57/markewaite.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":140}}},"blog":null,"github":"markewaite","html":"<div class=\"paragraph\">\n<p>Mark is the <a href=\"/project/team-leads/#documentation\">Jenkins Documentation Officer</a>, a long-time Jenkins user and contributor, and maintains the <a href=\"https://plugins.jenkins.io/git\">git plugin</a> and the <a href=\"https://plugins.jenkins.io/git-client\">git client plugin</a>.\nHe is active in <a href=\"/sigs/\">Jenkins special interest groups</a> including the <a href=\"/sigs/docs/\">Docs SIG</a>, <a href=\"/sigs/platform\">Platform SIG</a>, and <a href=\"/sigs/advocacy-and-outreach\">Advocacy SIG</a>.</p>\n</div>","id":"markewaite","irc":"markewaite","linkedin":"markwaite","name":"Mark Waite","slug":"/blog/authors/markewaite","twitter":"MarkEWaite"}]}},{"node":{"date":"2019-05-09T00:00:00.000Z","id":"38964a5b-f559-5f17-9f39-7c96117907bb","slug":"/blog/2019/05/09/chinese-localization/","strippedHtml":"Since 2017, I started to do some contributions to the Jenkins community. As a beginner, translation might be\nthe easiest way to help the project. You don’t need to understand the whole context, even to create a ticket in the\nissue tracker system. Improvement of localization usually is minor. But some problems occurred soon,\nthere isn’t a native speaker of Chinese that could review my PRs. So, sometimes my PRs\nare delayed from being merged into master.\n\nSome contributors told me that I can start a thread at the mailing list. Normally, discussing at the mailing list\nis the open source community way. We got a lot of ideas for the localization from there. As a result,\nwe achieved some goals that I’d like to share here.\n\nJEP-216\n\nPreviously, language localization files were distributed in core and in each plugin.\nFor this proposal, each language has a single localization plugin, such as Chinese Localization plugin.\nFinally, Localization Support Plugin and\nChinese Localization plugin are able to support\nall types of localization resource files. From the plugins website,\nyou can see that there are already 13 000 installations.\nWe removed all Chinese localization files at the PR-4008.\n\nI really appreciate Daniel Beck for helping me to add localization support,\nLiam Newman helping me to review JEP-216, and many other community members.\n\nChinese Localization SIG\n\nWe believe that this SIG could help to improve Jenkins experience for Chinese users and gather more contributors\nfrom China. This SIG is responsible for maintaining the Chinese Jenkins website,\npromoting the Jenkins community in China in the social media with WeChat account. We publish translated blog\narticles, Jenkins release notes, JAM or other events at the WeChat account. For now, there are 1800 followers that can\nread our news from the last half a year.\n\nEspecially, I want to say thanks to Wang Donghui, Zhai Zhijun, and other contributors. They did a lot of contributions.\nI wish I could see more and more folks join us.","title":"A Big Step of the Chinese Localization","tags":["general","community","localization","chinese"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#989898","images":{"fallback":{"src":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg","srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/77b35/linuxsuren.jpg 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/d4a57/linuxsuren.jpg 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/19e71/linuxsuren.jpg 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/68974/linuxsuren.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/ef6ff/linuxsuren.webp 32w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/8257c/linuxsuren.webp 64w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/6766a/linuxsuren.webp 128w,\n/gatsby-jenkins-io/static/e862ae9393b3993a9bb02d848cf1c9ab/22bfc/linuxsuren.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":null,"github":"LinuxSuRen","html":"<div class=\"paragraph\">\n<p>Rick is a big fan of Jenkins, also as a contributor leading the Jenkins China community.</p>\n</div>","id":"linuxsuren","irc":null,"linkedin":"linuxsuren","name":"赵晓杰(Rick)","slug":"/blog/authors/linuxsuren","twitter":"LinuxSuRen"}]}},{"node":{"date":"2019-03-29T00:00:00.000Z","id":"994d7fe1-0a77-5a87-a6ff-1ab920df5676","slug":"/blog/2019/03/29/becoming-contributor-intro/","strippedHtml":"As a software engineer, for many years I have used open source software (frameworks, libraries, tools…​) in the\ndifferent companies I have worked at. However, I had never been able to engage in an open-source project as a\ncontributor, until now.\n\nSince I made my first—​ridiculously simple—​commit into Jenkins, six months ago (in September, 2018), I have been\nattempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,\nchallenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often\ndifficult to know where to start and also difficult to come up with a plan to keep moving forward and contributing\nregularly, and in more meaningful ways over time.\n\nWhen it comes to the Jenkins project, I have encountered challenges that others trying to get into the community are\nlikely to encounter. For that reason, I have decided to go ahead and share my journey of becoming a more engaged Jenkins\ncontributor.\n\nI plan to publish roughly 1 post per month, describing this journey. I will attempt to start contributing to the pieces\nthat are easier to start with, transitioning towards more complex contributions over time.\n\nWhere to start\n\njenkins.io\n\nTo become a Jenkins contributor, the most obvious place to start looking at is jenkins.io. In the\ntop navbar there is a Community dropdown, with several links to different sections. The first entry,\nOverview, takes us to the “Participate and contribute” section.\n\nIn this section we get lots of information about the many ways in which we can engage with the Jenkins project and\ncommunity. Even though the intention is to display all the possible options, allowing the reader to choose, it can feel\na bit overwhelming.\n\nThe page is divided into two columns, the column on the left shows the different options to participate, while the\ncolumn on the right shows the different options to contribute.\n\nSuggestions to Participate\n\nIn the left column of the “Participate and contribute” page, there are several ideas on how to engage with the community,\nranging from communicating to reviewing changes or providing feedback.\n\nOne of the pieces that got me confused at first in this area were the communication channels. There are many different\nchannels for communication. There are several mailing lists and there are also IRC\nand Gitter channels.\n\nDuring my first attempts to get involved, I subscribed to many of the mailing lists and several IRC and Gitter channels,\nbut I quickly noticed that there is significant communication going on; and that most threads in the most active lists\nand channels are specific to issues users or developers have. So, unless your goal is to support other users right away\n(if you are an experienced Jenkins user already it might be the case) or you plan to ask questions that you already\nhave in mind, I would advise against spending too much time on this at first.\n\nEven though it is great to see how the community members support each other, the amount of communication might be\noverwhelming for a newcomer, and if you are also trying to contribute to the project (either with translations,\ndocumentation or code), following these conversations might not be the best way to start.\n\nSuggestions to Contribute\n\nIn the right column of the “Participate and contribute” page there are several ideas on how to contribute, mostly\ngrouped into: writing code, translating, documenting and testing.\n\nIn following posts, I will be going through all of these types of contributions, as well as through some of the\nsuggestions to participate, which include reviewing Pull Requests (PRs) or providing feedback (either reporting new\nissues or replicating cases other users have already described, providing additional information to help the maintainer\nreproduce and fix them).\n\nMy first contribution in this journey\n\nWhen looking at the “Participate and contribute” page, I noticed a couple of things in that page that I could help\nimprove. And I was actually planning to pick one of those as the first example of a contribution for this post. But\nwhen I was reading the contributing guidelines of the repository, I found an even easier contribution I could make,\nwhich I thought would be a great example to illustrate how simple it could be to start contributing. So I decided to go\nahead with it.\n\nThe website repository\n\nIn the ”Document” section there is a link to the\ncontributing guidelines of the jenkins.io repository.\nThe CONTRIBUTING file is a common file present in the root folder of most open-source-project repositories.\n\nFollowing the link to that file, I reached the jenkins.io repository, which is the one that contains the sources for\nthe corresponding website—​which also includes this blog. And, in fact, the contributing file was the first file I\nwanted to review, in order to learn more about how to contribute to the website.\n\nFound a broken link\n\nWhen reading the contributing file, I learned about the Awestruct static site generator, which is the tool used to\ntransform the AsciiDoc source files in the repo into a website. However, when I clicked the link to learn more about it, I noticed it was broken. The domain had expired.\n\nWhy not fix it?\n\nThis was the opportunity I chose to show other newcomers how easy it can be to start contributing.\n\nForking the repository\n\nThe first step, as usual, would be to fork the repository and clone it to my machine.\n\nApplying the change\n\nThe next step would be to apply the change to the corresponding file. To do so, I created a new branch\n“alternative-awestruct-link” and applied the change there:\n\nMaking sure everything builds correctly and tests pass\n\nEven though in this case my contribution was not to the actual website, but to the contributing guidelines (and for\nthat reason was unlikely to break anything), it is a best practice to get used to the regular process every\ncontribution should follow, making sure everything builds correctly after any change.\n\nAs stated in the contributing guidelines themselves, in order to build this repository we just have to run the default\n“make” target, in the root of the repository.\n\nOnce the command execution finishes, if everything looks good, we are ready to go to the next step: creating the PR.\n\nCreating the PR\n\nOnce my change had been committed and pushed to my repository, I just had to create the PR. We have an easy way to do so\nby just clicking the link that we get in our git logs once the push is completed, although we can create the PR directly\nthrough the GitHub UI, if we prefer so; or even use “hub”, the GitHub CLI, to do it.\n\nIn this case, I just clicked the link, which took me to the PR creation page on GitHub. Once there, I added a\ndescription and created the PR.\n\nWhen a PR to this repository is created, we notice there are some checks that start running. Jenkins repositories are\nconfigured to notify the “Jenkins on Jenkins”, which runs the corresponding CI pipelines for\neach repository, as described in the corresponding Jenkinsfile.\n\nOnce the checks are completed, we can see the result in the PR:\n\nAnd if we want to see the details of the execution, we can follow the “Show all checks” link:\n\nPR Review\n\nNow that the PR has been created and all automated checks are passing, we only have to wait for peer code reviews.\n\nOnce someone approves the PR and it is later merged, your contribution is integrated into the master branch of the\nrepository, becoming part of the next release.\n\nI have contributed!\n\nThis contribution I made is a trivial one, with very little complexity and it might not be the most interesting one if\nyou are trying to contribute code to the Jenkins project itself.\n\nHowever, for me, as the contributor, it was a great way to get familiar with the repository, its contributing\nguidelines, the technology behind the jenkins.io website; and, above anything else, to start “losing the fear” of\ncontributing to an open source project like Jenkins.\n\nSo, if you are in the same position I was, do not hesitate. Go ahead and find your own first contribution. Every little\ncounts!","title":"The journey of becoming a Jenkins contributor: Introduction","tags":["jenkins","community","developer","contributing","newcomer"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg","srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/3af71/romenrg.jpg 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/1e7bb/romenrg.jpg 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff5b9/romenrg.jpg 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/7b60f/romenrg.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/bf13b/romenrg.webp 32w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/9edd6/romenrg.webp 64w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/f5f75/romenrg.webp 128w,\n/gatsby-jenkins-io/static/9662f4841febd48036eb9f74e29d97cc/ff962/romenrg.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":142}}},"blog":"https://www.romenrg.com","github":"romenrg","html":"<div class=\"paragraph\">\n<p>Romén is a lifelong learner, software engineer and former digital entrepreneur. He lives in the Canary Islands,\nfrom where he currently works as a Training Engineer at CloudBees.</p>\n</div>","id":"romenrg","irc":null,"linkedin":null,"name":"Romén Rodríguez-Gil","slug":"/blog/authors/romenrg","twitter":"romenrg"}]}}]}},"pageContext":{"tag":"community","limit":8,"skip":40,"numPages":10,"currentPage":6}},
    "staticQueryHashes": ["3649515864"]}