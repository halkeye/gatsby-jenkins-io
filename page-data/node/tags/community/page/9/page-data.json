{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/community/page/9",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-07-02T00:00:00.000Z","id":"0c991121-dfec-5b10-a945-33a402cf3ddd","slug":"/blog/2018/07/02/new-api-token-system/","strippedHtml":"About API tokens\n\nJenkins API tokens are an authentication mechanism that allows a tool (script, application, etc.) to impersonate a user\nwithout providing the actual password for use with the Jenkins API or CLI.\nThis is especially useful when your security realm is based on a central directory, like Active Directory or LDAP,\nand you don’t want to store your password in scripts.\nRecent versions of Jenkins also make it easier to use the remote API when using API tokens to authenticate,\nas no CSRF tokens need to be provided even with CSRF protection enabled.\nAPI tokens are not meant to — and cannot — replace the regular password for the Jenkins UI.\n\nPrevious problems\n\nWe addressed two major problems with the existing API token system in Jenkins 2.129:\n\nFirst, reported in JENKINS-32442,\nuser accounts in Jenkins have an automatically generated API token by default.\nAs these tokens can be used to authenticate as a given user, they increase the attack surface of Jenkins.\n\nThe second problem was reported in JENKINS-32776 :\nThe tokens were previously stored on disk in an encrypted form.\nThis meant that they could be decrypted by unauthorized users by leveraging another security vulnerability,\nor obtained, for example, from improperly secured backups, and used to impersonate other users.\n\nNew approach\n\nThe main objective of this new system is to provide API tokens that are stored in a unidirectional way on the disk,\ni.e. using a hashing algorithm (in this particular case SHA-256).\n\nWhile this means that you will not be able to see the actual API tokens anymore after you’ve created them,\nseveral features were added to mitigate this potential problem:\n\nYou can have multiple active API tokens at the same time.\nIf you don’t remember an API token’s value anymore, just revoke it.\n\nYou can name your tokens to know where they are used (and rename them after creation if desired).\nWe recommend that tokens use a name that indicates where (for example the application, script, or host) where it will be used.\n\nYou can track the usage of your tokens.\nEvery token keeps a record of the number of uses and the date of the last use.\nThis will allow you to better know which tokens are really used and which are no longer actively required.\nJenkins also encourages users to rotate old API tokens by highlighting their creation date in orange after six months, and in red after twelve months.\nThe goal is to remind the user that tokens are more secure when you regenerate them often:\nThe longer a token is around, perhaps passed around in script files and stored on shared drives,\nthe greater the chance it’s going to be accessed by someone not authorized to use it.\n\nFigure 1. Token usage tracking\n\nYou can revoke API tokens.\nWhen you know that you are not using a given token anymore, you can revoke it to reduce the risk of it getting used by unauthorized users.\nSince you can have multiple API tokens, this allows fine-grained control over which scripts, hosts, or applications are allowed to use Jenkins as a given user.\n\nMigrating to new API tokens\n\nTo help administrators migrate their instances progressively, the legacy behavior is still available, while new system is also usable.\n\nOn the user configuration page, the legacy token is highlighted with a warning sign,\nexplaining that users should revoke it and generate a new one (if needed) to increase security.\n\nFigure 2. Legacy token renewal still possible\n\nNew options for administrators\n\nIn order to let administrators control the pace of migration to the new API token system,\nwe added two global configuration options in the \"Configure Global Security\" page in the brand new \"API Token\" section:\n\nAn option to disable the creation of legacy API tokens on user creation.\n\nAn option to disable the recreation of legacy API tokens by users, forcing them to only use the new, unrecoverable API tokens.\n\nBoth options are disabled by default for new installations (the safe default), while they’re enabled when Jenkins is upgraded from before 2.129.\n\nFigure 3. Security Configuration options\n\nFigure 4. Remove legacy token and disable the re-creation\n\nNew administrator warnings\n\nWhen upgrading to Jenkins 2.129, an administrative monitor informs admins about the new options described above, and recommend disabling them.\n\nAnother administrative warnings shows up if at least one user still has a legacy API token.\nIt provides central control over legacy tokens still configured in the Jenkins instance, and allows revoking them all.\n\nFigure 5. Legacy token monitoring page\n\nSummary\n\nJenkins API tokens are now much more flexible: They allow and even encourage better security practices.\nWe recommend you revoke legacy API tokens as soon as you can, and only use the newly introduced API tokens.","title":"Security Hardening: New API token system in Jenkins 2.129+","tags":["community","core","security","upgrade"],"authors":[]}},{"node":{"date":"2018-06-27T00:00:00.000Z","id":"fdf34f60-9243-5d28-b9d3-ea140833ede2","slug":"/blog/2018/06/27/lessons-java10-hackathon/","strippedHtml":"Last week I participated in the\nJenkins & Java 10 Online Hackathon.\nIt was my first Jenkins hackathon and I roped in\nJonah Graham to do some pair-programming.\nThe hackathon featured JDK Project Jigsaw committers Mandy Chung and Paul Sandoz,\nas well as Jenkins creator Kohsuke Kawaguchi.\nIt was a great opportunity for me to learn a lot about Jenkins and Java 10.\n\nWhy Java 10?\n\nWith the\nJava 8 EoL data looming,\nthe focus was on the current available version of Java, Java 10.\nJava 10 offers some nice new features and APIs, not least\nimproved docker container integration.\nWe learned from Paul of a number of projects with Java 10 migration success stories including Elasticsearch, Kafka & Netty.\n\nAt the beginning of the hackathon week, the Jenkins Pipeline feature would crash out when using Java 10.\nThis was resolved with a number of fixes including the upgrade of the\nASM library.\nThen it was nice to see things\nup and running with Java 10.\n\nGetting up & running\n\nThe first steps were to do some exploratory testing using\nJenkins with Java 10 via Docker, thanks to\nOleg for providing clear instructions.\nThis was boringly straightforward as most things worked and we only found one\nissue to report.\nNext to try to get some patches in, we needed to set-up a dev environment.\nThe live session gave us what we needed to set up a\nplugin or\ncore dev environment.\nOne open question we had was whether Jenkins has semantic versioning and\nAPI tools\nto help identify when you might be breaking backwards compatibility.\nOverall it was straightforward to get a dev environment up and running.\n\nJava 10 New APIs\n\nThe next step was to find an issue which we could help resolve.\nMany of the Java 10 issues were related to 'Illegal reflective access' from various plugins or third-party libraries.\nHowever after investigating a couple, removing these warnings required a good architectural knowledge of the plugin or core code itself.\nIn the end we decided that messing around with classloaders or attempting to upgrade version of jdom was not one for the newbies.\n\nInstead we looked at\nremoving reflection\nin cases of isAccessible calls.\nWe found the\nProcessHandle\napi very useful and a good replacement for some misuse of reflection, and even better it made the code work on Windows too.\nMandy also pointed us to look at the\nLookup api\nas possible alternate to findClass calls.\n\nMulti-Release JAR Builds\n\nUsing new APIs is all well and good but presents a problem when you want to maintain backwards compatibility with Java 8.\nHence the need for some sort of multi-jar solution -\nNicolas De loof proposed one such solution for\nmulti-release jars with Maven for this case.\n\nsun.misc.Signal\n\nThe Java Signal API is being deprecated, but so far no replacement APIs\nare available for signal handling.\nJenkins makes use of the Signal APIs so a big question for the Jigsaw team was whether this would be replaced going forward.\nKohsuke pointed out how it is important for Java to maintain this UNIX like behaviour as it shouldn’t matter to end users that Jenkins is written in Java.\nIt seems these APIs will be replaced in due course, they just\naren’t there right now.\n\nCollaboration, Collaboration, Collaboration\n\nIt was great to have the discussions with the Jigsaw team.\nThey reminded us how they need to know the Java use cases out there and how their team uses these to feed into their development process.\nIn turn, the hackathon had Jenkins community members participate, for instance\neasy-jenkins was up and running with Java 10 by the end of the week.\nThe hackathon had a great feeling of community spirit and was a reminder why collaborations with communities and also between different communities can be powerful and fun for all involved.\n\nAt the end of the week Jonah and I were both happy that we made our first Jenkins contributions (which were reviewed and merged quickly).\nThanks to all who participated and made it highly enjoyable, especially Oleg for great organization.\nI look forward to the next one!","title":"What I learned from the Jenkins & Java 10+ Hackathon","tags":["events","community","developer","java10","java11"],"authors":[]}},{"node":{"date":"2018-06-20T00:00:00.000Z","id":"c6c81158-09c3-5db5-9f8e-8e8ad25bd805","slug":"/blog/2018/06/20/anchore-image-scanning/","strippedHtml":"(adapted from this blog post by Daniel Nurmi)\n\nAs more and more Jenkins users ship docker containers, it is worth thinking about the security implications of this model, where the variance in software being included by developers has increased dramatically from previous models. Security implications in this context include what makes up the image, but also the components of the app that get bundled into your image. Docker images are increasingly becoming a “unit of deployment”, and if you look at a typical app (especially if it is a microservice), much of the components, libraries, and system are someone else’s code.\n\nAnchore exists to provide technology to act as a last line of defense, verifying the contents of these new deployable units against user specified policies to enforce security and compliance requirements. In this blog you will get a quick tour of this capability, and how to add the open-source Anchore Engine API service into your pipeline to validate that the flow of images you are shipping comply with your specific requirements, from a security point of view.\n\nKey among the fundamental tenets of agile development is the notion of “fail fast, fail often”, which is where CI/CD comes in: A developer commits code into the source code repository, such as git, that automatically triggers Jenkins to perform a build of the application that is then run through automated tests. If these tests fail the developer is notified immediately and can quickly correct the code. This level of automation increases the overall quality of code and speeds development.\n\nWhile some may feel that “fail fast” sounds rather negative (especially regarding security), you could better describe this process as “learn fast” as mistakes are found earlier in the development cycle and can be easily corrected. The increased use of CI/CD platforms such as Jenkins has helped to improve the efficiency of development teams and streamlined the testing process. We can leverage the same CI/CD infrastructure to improve the security of our container deployments.\n\nFor many organizations the last step before deploying an application is for the security team to perform an audit. This may entail scanning the image for vulnerable software components (like outdated packages that contain known security vulnerabilities) and verifying that the applications and OS are correctly configured. They may also check that the organization’s best practices and compliance policies have been correctly implemented.\n\nIn this post we walk through adding security and compliance checking into the CI/CD process so you can “learn fast” and correct any security or compliance issues early in the development cycle. This document will outline the steps to deploy Anchore’s open source security and compliance scanning engine with Jenkins to add analytics, compliance and governance to your CI/CD pipeline.\n\nAnchore has been designed to plug seamlessly into the CI/CD workflow, where a developer commits code into the source code management system, which then triggers Jenkins to start a build that creates a container image. In the typical workflow this container image is then run through automated testing. If an image does not meet your organization’s requirements for security or compliance then it makes little sense to invest the time required to perform automated tests on the image, it would be better to “learn fast” by failing the build and returning the appropriate reports back to the developer to allow the issue to be addressed.\n\nAnchore has published a plugin for Jenkins which, along with Anchore’s open source engine or Enterprise offering, allows container analysis and governance to be added quickly into the CI/CD process.\n\nRequirements\n\nThis guide presumes the following prerequisites have been met:\n\nJenkins 2.x installed and running on a virtual machine or physical server.\n\nAnchore-Engine installed and running, with accessible engine API URL (later referred to as) and credentials (later referred to as and) available - see Anchore Engine overview and installation.\n\nAnchore’s Jenkins plugin can work with single node installations or installations with multiple worker nodes.\n\nStep 1: Install the Anchore plugin\n\nThe Anchore plugin has been published in the Jenkins plugin registry and is available for installation on any Jenkins server. From the main Jenkins menu select Manage Jenkins, then Manage Plugins, select the Available tab, select and install Anchore Container Image Scanner.\n\nStep 2: Configure Anchore Plugin.\n\nOnce the Anchore Container Image Scanner plugin is installed - select Manage Jenkins menu click Configure System, and locate the Anchore Configuration section.  Select and enter the following parameters in this section:\n\nClick Enable Anchore Scanning\n\nSelect Engine Mode\n\nEnter your in the Engine URL text box - for example: http://your-anchore-engine.com:8228/v1\n\nEnter your and in the Engine Username and Engine Password fields, respectively\n\nClick Save\n\nAn example of a filled out configuration section is below, where we’ve used “http://192.168.1.3:8228/v1” as, “admin” as and “foobar” as :\n\nAt this point the Anchore plugin is configured on Jenkins, and is available to be accessed by any project to perform Anchore security and policy checks as part of your container image build pipeline.\n\nStep 3: Add Anchore image scanning to a pipeline build.\n\nIn the Pipeline model the entire build process is defined as code. This code can be created, edited and managed in the same way as any other artifact of your software project, or input via the Jenkins UI.\n\nPipeline builds can be more complex including forks/joins and parallelism. The pipeline is more resilient and can survive the controller node failure and restarts. To add an Anchore scan you need to add a simple code snippet to any existing pipeline code that first builds an image and pushes it to a docker registry. Once the image is available in a registry accessible by your installed Anchore Engine, a pipeline script will instruct the Anchore plugin to:\n\nSend an API call to the Anchore Engine to add the image for analysis\n\nWait for analysis of the image to complete by polling the engine\n\nSend an API call to the Anchore Engine service to perform a policy evaluation\n\nRetrieve the evaluation result and potentially fail the build if the plugin is configured to fail the build on policy evaluation STOP result (by default it will)\n\nProvide a report of the policy evaluation for review\n\nBelow is an example end-to-end script that will make a Dockerfile, use the docker plugin to build and push the a docker container image to dockerhub, perform an Anchore image analysis on the image and the result, and cleanup the built container.  In this example, we’re using a pre-configured docker-exampleuser named dockerhub credential for dockerhub access, and exampleuser/examplerepo:latest as the image to build and push.  These values would need to be changed to reflect your own local settings, or you can use the below example to extract the analyze stage to integrate an anchore scan into any pre-existing pipeline script, any time after a container image is built and is available in a docker registry that your anchore-engine service can access.\n\npipeline {\n    agent any\n    stages {\n        stage('build') {\n            steps {\n                sh'''\n                    echo 'FROM debian:latest’ > Dockerfile\n                    echo ‘CMD [\"/bin/echo\", \"HELLO WORLD....\"]' >> Dockerfile\n                '''\n                script {\n                    docker.withRegistry('https://index.docker.io/v1/', 'docker-exampleuser') {\n                        def image = docker.build('exampleuser/examplerepo:latest')\n                        image.push()\n                    }\n                }\n            }\n        }\n        stage('analyze') {\n            steps {\n                sh 'echo \"docker.io/exampleuser/examplerepo:latest `pwd`/Dockerfile\" > anchore_images'\n                anchore name: 'anchore_images'\n            }\n        }\n        stage('teardown') {\n            steps {\n                sh'''\n                    for i in `cat anchore_images | awk '{print $1}'`;do docker rmi $i; done\n                '''\n            }\n        }\n    }\n}\n\nThis code snippet writes out the anchore_images file that is read by the plugin to determine which image is to be added to Anchore Engine for scanning.\n\nThis code snippet can be crafted by hand or built using the Jenkins UI, for any Pipeline project. In the project configuration, select Pipeline Syntax from the Project.\n\nThis will launch the Snippet Generator where you can enter the available plugin parameters and press the Generate Pipeline Script button which will produce a snippet that you can use as a starting point.\n\nUsing our example from above, next we save the project:\n\nNote that once you are happy with your script, you could also check it into a Jenkinsfile, alongside the source code.\n\nStep 4: Run the build and review the results.\n\nFinally, we run the build, which will generate a report.  In the below screenshots, we’ve scanned the image docker.io/library/debian:latest to demonstrate some example results.  Once the build completes, the final build report will have some links that will take you to a page that describes the result of the Anchore Engine policy evaluation and security scan:\n\nIn this case, since we left the Fail build on policy STOP result as its default (True), the build has failed due to anchore-engine reporting a policy violation.  In order to see the results, click the Anchore Report (STOP) link:\n\nHere, we can see that there is a single policy check that has generated a ‘STOP’ action, which triggered due to a high severity vulnerability being found against a package installed in the image.  If there were only ‘WARN’ or ‘GO‘ check results here, they would also be displayed, but the build would have succeeded.\n\nWith the combination of Jenkins pipeline project capabilities, plus the Anchore scanner plugin, it’s quick and easy to add container image security scanning and policy checking to your Jenkins project.  In this example, we provide the mechanism for adding scanning to a Jenkins pipeline project using a simple policy that is doing an OS package vulnerability scan, but there are many more policy options that can be configured and loaded into Anchore Engine ranging from security checks to your own site-specific best practice checks (software licenses, package whitelist/blacklist, dockerfile checks, and many more).  For more information about the breadth of Anchore policies, you can find information about Anchore Engine configuration and usage here.\n\nFor more information on Jenkins Pipelines and Anchore Engine, check out the following information sources:\n\nhttps://anchore.com/\n\nhttps://anchore.com/opensource/\n\nhttps://github.com/anchore/anchore-engine\n\nhttps://anchore.freshdesk.com/support/home\n\nChat on Anchore open source slack","title":"Securing your Jenkins CI/CD Container Pipeline with Anchore (in under 10 minutes)","tags":["community","developer","security"],"authors":[]}},{"node":{"date":"2018-06-19T00:00:00.000Z","id":"4e634674-53af-534b-ad3d-0fb231791ac9","slug":"/blog/2018/06/19/jenkins-java10-hackathon-day2/","strippedHtml":"This week we have a\nJenkins & Java 10 Online Hackathon.\nThis is an open online event, where we work together on Jenkins core and plugins in order\nto find and fix compatibility issues, share experiences and have some fun.\nEverybody is welcome to join, independently of their Jenkins experience and amount of time they have available.\n\nAfter the kick off on Monday\nJenkins contributors have been working on Java 10 and Java 11 support in Jenkins.\nWe have already received contributions from 12 hackathon participants, and the number keeps growing.\nThere are still 3 days ahead, but we have already achieved some important results we want to share.\n\nJenkins Pipeline\n\nOne of our major efforts over last 2 days was to get Jenkins Pipeline working on\nJava 10+.\nWhen the hackathon started Jenkins Pipeline was not working at all,\nand it was a major blocker for Java support and for exploratory testing in particular.\nWe’ve been working together with Sam van Oort and Devin Nusbaum to fix the libraries in\nthe Jenkins core, Pipeline: Support plugin and Docker packaging.\n\nJust to summarize the result of two days in one screenshot…​\n\nYes, we have got it running!\nOver two days we have got from the \"Pipeline Crashes Immediately\"\nstate to the situation when the most of key Pipeline features are operational,\nincluding Scripted and Declarative Pipeline, Blue Ocean, shared libraries and\ndozens of plugins being used in the Jenkins plugin build flow.\n\nThere is still a lot of work to do to get the changes finalized,\nbut Jenkins Pipeline is available for testing on Java 10 and 11 now.\nIf you want to try it out, you can use a new jenkins/jenkins-experimental:blueocean-jdk10\nimage we have created.\nIt bundles all the required patches, so you can just run the following command to get started:\n\ndocker run -p 8080:8080 -p 50000:50000 jenkins/jenkins-experimental:blueocean-jdk10\n\nIf you want to try more complex scenarions, see the\nRunning Jenkins with Java 10 and 11 blogpost\nand List of Required patches.\n\nWhat else?\n\nAlthough Pipeline is the most visible change,\nthere are other ongoing activities:\n\nDevin Nusbaum explored plugin startup issues we had with JDK 11ea+17\nand confirmed that we need to upgrade our images to JDK 11ea+18\n\nGianpaolo Macario is working on adopting the Java 10 experimental images in his\neasy-jenkins project\n\nSam van Oort and Devin Nusbaum are working on getting plugin build and test flows\nwhen using JDK 10 with Maven\n\nNicolas de Loof is working on cleaning up Illegal reflective access warnings in Jenkins components,\nusing the new Fields micro-library\n\nOlivier Lamy and Nicolas de Loof are updating the\nAnimal Sniffer plugin for Maven\nto make it compatible with Java 9 and above\n\nKohsuke Kawaguchi has released a repackaged version of ASM 6.2 we use in the project\n\nLast but not least, Liam Newman and Tracy Miranda helped us a lot to run the meetings\nand to get this hackathon organized\n\nThere are also other contributors working on exploratory testing and reporting\ndefects they discover.\nSee our status doc\nfor the full list.\n\nWhat’s next?\n\nTomorrow we will have 2 sessions:\n\nAt 8AM UTC we will have a sync-up.\nAccording to the requests from hackathon paticipants, we will have an intro session to Jenkins development for newcomers\n\nYouTube link\n\nAt 4PM UTC we will have a meeting with key JDK Project Jigsaw committers\n\nMark Reinhold, Mandy Chung and Paul Sandoz will join us to talk about\nJava 10/11 adoption\n\nYouTube link\n\nWe will also post participant links in our Gitter channel\n15 minutes before the meetings.\nIf you have any questions, please join the meetings or raise questions in the chat during the call.\n\nCan I still join the hackathon?\n\nYes, you can!\nIt is possible to hop in and hop off at any time.\nJust respond to the registration form,\njoin our Gitter channel and start hacking/testing.\n\nWe also have a number of\nnewbie-friendly issues\nyou can start from.\nSee our Kick-off session and\nslides for quick start guidelines.\n\nLinks\n\nDeveloper mailing list\n\nHackathon sync-up document\n\nRunning Jenkins with Java 10 and 11\n\nJenkins Online Meetup page","title":"Jenkins & Java 10+ Online Hackathon. Day 2 Update","tags":["events","community","developer","java10","java11"],"authors":[]}},{"node":{"date":"2018-06-08T00:00:00.000Z","id":"f46b46ad-a0ad-590a-a614-37ad7eaf1e7d","slug":"/blog/2018/06/08/jenkins-java10-hackathon/","strippedHtml":"On behalf of the Jenkins Events Team,\nI would like to invite you to the “Jenkins & Java 10 Online Hackathon” which will take place from June 18th to 22nd.\nWe will be working together on Jenkins core and plugins in order\nto find and fix compatibility issues, share experiences and have some fun.\nEverybody is welcome to join, independently of their Jenkins experience and amount of time they have available.\n\nIf you are interested in participating in the hackathon, please sign-up in\nthis form.\n\nBackground\n\nJava 9 has recently been end-of-lifed, Java 10 is in GA, and Java 11 is in early beta.\nJenkins project currently requires Java 8 to run reliably,\nand there are some known compatibility issues with higher Java versions.\n\nDuring the Jenkins World 2017 Hackathon,\nMark Waite and\nBaptiste Mathus spent some time exploring Java 9 compatibility in Jenkins.\nWe are currently tracking compatibility issues in the\nJENKINS-40689 EPIC,\nbut there are likely many unknown issues in Jenkins core, plugins and in libraries we use in the project.\nWe would like to continue their effort and work on Java 10+ support.\n\nObjectives and Scope\n\nAs I have said above,\nthe goals are to explore/fix compatibility issues, share experiences and have fun.\nWe DO NOT plan to make Jenkins fully compatible with Java 10+\nduring the hackathon,\nbut we will try to integrate fixes and make them available.\n\nSince the announcement of the Hackathon in the mailing list,\nwe have got a number of registrations from contributors working on several project areas.\nWe will split our work to several areas:\n\nJenkins core and Remoting\n\nPipeline Engine\n\nPlugins (e.g. Git plugin or any plugin you want to work on)\n\nExploratory testing for Java 10 and beyond\n\nIn order to organize the effort, we have created a\njava10_hackathon label\nin Jenkins JIRA.\nIf you are interested in particular tasks,\nplease assign them to yourself and add the label.\n\nOrganization\n\nCurrently the event is in the planning stage.\nWe will be using the Developer mailing list\nfor synchronization before the event.\n\nWhat will we have?\n\nCommunications in #jenkins-hackhouse IRC and in the\nJenkins Gitter channel\n\nDaily recorded sync-up calls in Hangouts\n\nKnowledge transfer sessions during the event\n\nWe also want to prepare some special swag for active participants.\nIf you have reached this part of the blogpost,\nyou have probably seen the logo ;)\n\nLinks\n\nRegistration\n\nDeveloper mailing list\n\nHackathon sync-up document\n\nRunning Jenkins with Java 10 and 11\n\nJIRA: Java 10 compatibility\n\nJIRA: Java 11 compatibility\n\nJIRA: Hackathon tasks","title":"Jenkins & Java 10+ Online Hackathon (Jun 18-22)","tags":["events","community","developer","java10","java11"],"authors":[]}},{"node":{"date":"2018-05-17T00:00:00.000Z","id":"ae3ff15b-6a37-56b0-89c0-ca24db87819d","slug":"/blog/2018/05/17/tracymiranda-intro/","strippedHtml":"I’m Tracy Miranda, and I’m really excited to have joined CloudBees this month leading the open source program. CloudBees’ contributions to Jenkins include developing Pipeline and Blue Ocean, staffing the infrastructure team, advocacy and events work, as well as security efforts. My focus is on making sure there is a great relationship between the Jenkins community and CloudBees, which means strong communication, help get traction on things the community wants, and generally working to make Jenkins and the community thrive and stay awesome in an ever-changing tech landscape.\n\nHere’s a little background on me: I come from an electronics/EDA background but switched to software early in my career when I first got involved with open source software. I’ve been part of the Eclipse community for around 15 years, definitely from before git was even a thing. I love being involved with all levels: project committer, conference chair, steering committee for working groups and more recently board of directors.\n\nOn a personal note, I …\n\nLive in the UK with my husband and 2 young kids\n\nGrew up in Kenya\n\nEnjoy playing badminton, love good food & am always first at any buffets\n\nI am looking forward to getting to know the Jenkins community well, and really getting a feel for your Jenkins stories, good and bad. Please feel free to let me know:\n\nWhat you love about the Jenkins community & how you are using Jenkins\n\nWhat you’re working on doing with Jenkins\n\nWhat you don’t like and want improved\n\nYou can find me on the mailing lists or via:\n\nTwitter @tracymiranda\n\nEmail: tmiranda@cloudbees.com\n\nIRC: tracymiranda\n\nAlso I’ll be at the upcoming events: DevOps World - Jenkins World in San Francisco, California and Nice, France so if you plan to attend do come and say hi. The Jenkins community is the real force behind Jenkins. And in turn Jenkins powers so much of the software out there. It is an honour to be joining this wonderful community.","title":"Introducing Tracy Miranda as the CloudBees Open Source Program Lead","tags":["community"],"authors":[]}},{"node":{"date":"2018-05-01T00:00:00.000Z","id":"29e7f29f-403c-5601-b053-b8a3c4a7dcee","slug":"/blog/2018/05/01/gsoc2018-projects-announcement/","strippedHtml":"On behalf of the Jenkins GSoC team and mentors,\nI would like to welcome\nShenyu Zheng,\nUdara De Silva,\nPham Vu Tuan and\nAbhishek Gautam.\nThey will be working on Google Summer of Code projects in the Jenkins organization,\nand they have already done some contributions.\n\nThis year we have the following projects:\n\nCode Coverage API Plugin -\ncreate a new API Plugin to unify existing Code Coverage plugins and provide new features.\n\nStudent: Shenyu Zheng from Henan University, Kaifeng, China\n\nMentors: Steven Christou and Supun Wanniarachchi\n\nElectronic Design Automation Plugins -\ncreate plugins for open-source Electronic Design Automation tools for synthesis, simulation and coverage analysis (iVerilog, covered, Yosys).\n\nStudent: Udara De Silva from University of Akron, Ohio, USA\n\nMentors: Martin d’Anjou and Oleg Nenashev\n\nJenkins Remoting over Message Bus/Queue -\nadd support of a popular message queue/bus technology (RabbitMQ or Kafka) as a fault-tolerant communication layer in Jenkins.\n\nStudent: Pham Vu Tuan from Nanyang Technological University, Singapore\n\nMentors: Oleg Nenashev and Supun Wanniarachchi\n\nSimple Pull-Request Job Plugin -\nadd ability to define Jenkins jobs as YAML files stored in SCM, integrate it with existing plugin ecosystem.\n\nStudent: Abhishek Gautam from Visvesvaraya National Institute of Technology, Nagpur, India\n\nMentors: Jeff Knurek, Kristin Whetstone and\nWilly Aguirre\n\nDuring next 4 weeks project teams will be reaching out to potential stakeholders in order to establish connections and\nto get comments regarding their project designs.\nIf you are interested in the projects, please join discussions in the\nDeveloper mailing lists and project meetings once they get scheduled.\nPlease also expect expect more detailed blogposts about the projects soon.\n\nIf you are interested to know more about GSoC in Jenkins, you can find information, timeline and communication channels\nhere.","title":"Welcome Google Summer of Code 2018 students!","tags":["gsoc","gsoc2018","events","community"],"authors":[]}},{"node":{"date":"2018-03-19T00:00:00.000Z","id":"38e42feb-38b4-5fe4-a4e2-04f6086cd0bc","slug":"/blog/2018/03/19/password-audit/","strippedHtml":"Last year, news of compromised passwords being used for accounts able to distribute NPM packages made the rounds.\n\nTheir system looks similar to how publishing of plugins works in the Jenkins project:\n\nAccounts are protected by passwords chosen by users.\n\nIndividual contributors have permission to release the components they maintain.\n\nThe components they release are used by millions of developers around the world to deliver their software.\n\nIn other words, weak passwords are a problem for us just as much as for NPM, and what happened to them could happen to us.\n\nTo address this problem, the Jenkins security and infra teams have recently collaborated on a password audit.\nThe audit covered all accounts with permissions to upload plugins and components, and on accounts with other levels of privileged infrastructure access.\nWe ran brute force tools on salted password hashes of those accounts looking for \"weak\" passwords — passwords present in a set of publicly available password lists we chose for this audit.\n\nWe checked the password of every qualifying account for every unsafe password rather than trying to match them to any previous password leaks' email/password pairs.\nUsers with weak account passwords were notified via email a few weeks ago and were asked to change their password to something stronger.\n\nWe performed the same checks over the previous weekend, but this time we only checked the passwords of accounts whose passwords were deemed weak during our first check.\nWe then invalidated the password of any account whose password was still not considered \"strong\" (i.e. their password was unchanged or had been changed to another weak password).\nUsers of those accounts will need to request a password reset before signing in again.\n\nWe plan to implement further safeguards, including improving the account management app at https://accounts.jenkins.io to reject weak passwords.\nIf you’re interested in helping the security team make Jenkins more secure, let us know on the jenkinsci-dev mailing list, or request to join the security team.","title":"Jenkins community account password audit","tags":["security","community"],"authors":[]}}]}},"pageContext":{"tag":"community","limit":8,"skip":64,"numPages":10,"currentPage":9}},
    "staticQueryHashes": ["3649515864"]}