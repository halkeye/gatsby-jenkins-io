{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/feedback",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2017-04-27T00:00:00.000Z","id":"c3440bc5-c7e2-5c2b-b6e6-f923222e2902","slug":"/blog/2017/04/27/colombia/","strippedHtml":"The Jenkins project has learned that a company is trying to register \"Jenkins\" as a trademark in Colombia. This is alarming for us, and we are trying to oppose it. In order to do this effectively, we need to hear from Colombian users of Jenkins.\n\nFigure 1. South American visitors to jenkins.io for 2017\n\nThe Jenkins project owns a trademark \"Jenkins\" in the U.S., through a non-profit entity SPI Inc. According to experts on the subject citing the \"Washington Convention\", our trademark registration in the U.S. does give us some strength in the argument to oppose this. To successfully mount this argument however, we need to be able to show that Jenkins has significant usage and awareness in Colombia. Users, installations, meetups, conference talks, anything of that nature will help.\n\nThose of you with the project for a long time might recall that the name \"Jenkins\" was born because of a trademark issue with Oracle. So we are particularly sensitive to the issue is trademarks. We want to make sure the same tragedy won’t happen again.\n\nIf you know anything about the usage and the name recognition of Jenkins in Colombia, please let us know by submitting the information here . We know that Jenkins is popular in Colombia, because our website traffic shows that Colombian Jenkins users are the third most frequent visitors to jenkins.io in South America after Brazil and Argentina.\n\nThis information will be only shared with the Jenkins project board and those involved in the defense, and for the sole purpose of defending the trademark and nothing more.\n\nPlease help us spread the word. Thanks!\n\nEl proyecto Jenkins se ha enterado de que una compañía está intentando registrar \"Jenkins\" como marca registrada en Colombia. Esto es alarmante y estamos tratando de oponernos. Para hacerlo de manera efectiva, necesitamos escuchar a los usuarios colombianos de Jenkins.\n\nEl proyecto Jenkins posee una marca registrada \"Jenkins\" en los Estados Unidos, a través de una entidad sin ánimo de lucro SPI Inc. Según los expertos en la materia citando la \"Convención de Washington\", nuestro registro de marca en los EE.UU. nos da algo de fuerza para oponernos. Sin embargo, para argumentar con éxito, tenemos que ser capaces de demostrar que Jenkins tiene un uso significativo y es conocido en Colombia. Usuarios, instalaciones, encuentros, conferencias, cualquier cosa de ese tipo ayudará.\n\nAquellos que llevan mucho tiempo con el proyecto pueden recordar que el nombre \"Jenkins\" nació debido a un problema de marca con Oracle. Por lo tanto, estamos especialmente sensibles al tema de las marcas registradas. Queremos asegurarnos de que el mismo problema no vuelva a ocurrir.\n\nSi sabe algo sobre el uso y el reconocimiento del nombre Jenkins en Colombia, por favor háganoslo saber enviando la información aquí . Sabemos que Jenkins es popular en Colombia, porque nuestro sitio web de tráfico muestra que los usuarios colombianos de Jenkins son los terceros visitantes más frecuentes a jenkins.io en América del Sur después de Brasil y Argentina.\n\nEsta información sólo se compartirá con el comité de proyecto de Jenkins y los involucrados en la defensa, y con el único propósito de defender la marca y nada más.\n\nPor favor, ayúdenos a difundir la palabra. ¡Gracias!","title":"Calling for Colombian Jenkins users!","tags":["feedback","general"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2017-03-21T00:00:00.000Z","id":"5bf5cbad-49a8-533f-b9db-60dff41a2193","slug":"/blog/2017/03/21/toulousejam-pipeline-workshop/","strippedHtml":"Earlier this month, a full-day event about Jenkins Pipeline was organized in Toulouse, France with the Toulouse JAM.\n\nAfter a warm-up on the previous Tuesday where Michaël Pailloncy had given a talk at the local Toulouse Devops user group about Jenkins Pipeline ecosystem, we were ready for more digging :-).\n\nThe agenda\n\nWe had planned the day in two parts:\n\nMorning would be a more driven workshop with slides & exercises to be completed\n\nPizzas & beverages to split the day :-)\n\nAfternoon would be somehow like an Unconference, where people basically decide by themselves what they want to work on.\n\nWe planned to have 30 attendees. We ended up having 25.\nWe considered having more people, but finally decided that for a first time it would be better to start not too big.\n\nInfrastructure\n\nInfrastructure was sponsored by DigitalOcean.\n\nFor each attendee, we provisioned :\n\nOne Controller, preconfigured to be able to dynamically provision agents.\n\nOne staging environment\n\nOne production environment\n[ 1 ]\n\nOne SonarQube instance\n\nWorkshop content & infrastructure\n\nAfter an initial quick presentation to settle context and remind some general things about Continuous Delivery and Jenkins, we started the workshop per se.\n\nIt is composed of 3 parts, which are readable here [ 2 ], but very few people were able to start the part 3.\n\nHackergarten / Unconference\n\nSo we let people decide what they wanted to work on during the afternoon.\n\nWe decided to use post-its: each attendee would write down what they wanted to work on, one idea per post-it (max 2 per person).\nThen, we dropped those onto a white-board and tried grouping those by theme.\n\nIn the end, overall, the following themes went out:\n\nHack on Jenkins development & Contribute to Jenkins\n\nComplete the workshops\n\nWork on use-case oriented things\n\nWork on Docker & Pipeline join usages\n\nHackergarten\n\nMany Jenkins accounts were created, and many JIRA and pull requests were filed.\nIt was nice to see people asking questions like: \"so, should I create a JIRA issue for this?\" or \"how do I interact with people\".\nPretty generic \"how do I work on open source software\" questions sometimes, but important because you felt like people were genuinely interested and needed not much to start contributing.\n\nHere are the pull requests filed during this afternoon:\n\nblueocean-pipeline-editor-plugin#30\n\njenkins#2785\n\njenkins#2786\n\njenkins#2787\n\njenkins#2788\n\nYou can see that though most of the PRs were typo-related, the one that got merged first was the one about code :-).\n\nSo, Jeremie Violas wins the Bobble Head as promised!\n\nWhy so many typo-related PRs?\n\nSimply because people were somehow encouraged to find some to get used to the\nround trip of: fixing an issue and filing the associated pull request, rinse &\nrepeat.\n\nI do think this is also a pretty nice and simple first step to understand how\nto build Jenkins and start interacting with the community.\n\nThe result\n\nPeople seemed pretty happy and we got some nice comments like \"now I have a clearer vision of what this Pipeline thing is about\".\nSome attendees also dropped nice comments on the meetup page.\nSo it’s cool because when you’re doing such things on your free time, it’s the main reward you can get.\n\nIf you’re an attendee to such events, don’t forget to thank people organizing\nthose, and more importantly to provide constructive feedback.  We are generally\neager to know what could be done better for next time.\n\nConclusion\n\nOverall we are very happy with the energy of that day, and we definitely plan to set up a new session in the next few months, probably with a bit more people.\n\nSome thoughts:\n\nInfrastructure: when you plan to have many VM per attendee, double-check the limits your Cloud Provider may have by default. I had bumped it to 250 the day before the workshop, and asked for another one to 500 during the workshop (though in the end, 250 was probably enough, but this’ll give room for the next time with more people :-)).\n\nLogistics: warning, secret ahead: this is very time consuming.\nNot necessarily the amount of work itself, more that it implies very big latency.\nFor instance, give it 2 to 3 weeks minimum to have answers about sponsoring in general. Pinging again in case of no answer after 2 days would probably be seen as rude, and possibly lead to make things worse for obvious reasons, so plan ahead.\n\nThank you\n\nDigitalOcean for sponsoring the Infrastructure\n\nWe got way more than 100 VMs running at the same time during the day thanks to their help!\n\nHarryCow Coworking for hosting the event\n\nTo CloudBees for sponsoring the food for all the participants\n\nAlso for providing a bunch of goodies: stickers and T-Shirts for everybody\n\nGitHub for providing stickers\n\n1. For the sake of the simplicity of the workshop, those environments were actually a single VM: the goal was here to illustrate what we could do using Jenkins Pipeline, discussing scalability or more involved deployment techniques was obviously out of scope.\n\n2. in French only for now, but translating it into English to make it possibly shared and reusable among JAMs is being discussed","title":"Pipeline Workshop & Hackergarten @ ToulouseJAM Feedback","tags":["hackergarten","jam","meetup","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://batmat.net","github":"batmat","html":"<div class=\"paragraph\">\n<p>Baptiste has been using and contributing to Jenkins since it was called differently, and is a huge proponent of the Agile, Devops &amp; Continuous Delivery movements.\nHe loves to discuss not only the technical aspects, but also the even more essential cultural aspects of this all, working together to improve the value provided to customers in a great inclusive and blameless environment.</p>\n</div>","id":"batmat","irc":null,"linkedin":null,"name":"Baptiste Mathus","slug":"blog/author/batmat","twitter":"bmathus"}]}},{"node":{"date":"2015-10-30T00:00:00.000Z","id":"4ad0c927-4f88-5a6a-a4fc-a4477db179f3","slug":"/blog/2015/10/30/jenkins-2-0-proposal-improved-out-of-the-box-user-experience/","strippedHtml":"This week we have featured a number of proposals for what we would like to see in \" Jenkins\n2.0\", the vision of which is to make Jenkins users more efficient, productive and happy. We started with some more internally facing changes and have slowly progressed from the \"inside-out\" to today’s topic: improving the out of the box user experience. That is to say, the experience that a brand-new Jenkins user has when getting started with the server.\n\nJust to recap, so far we’ve reviewed:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nPipeline as code front and center\n\nUser experience improvements (part one)\n\nThe subject of today’s proposal is captured in JENKINS-31157 , which, like yesterday’s proposal, contains a few issues linked from it with more details.\n\nAt a high level, the problem aiming to be solved is:\n\nWhen a new user installs Jenkins, they are greeted with the main, empty, dashboard which suggests that they \"create jobs.\" This makes no mention of plugins or the configuration options that are relevant to helping the user make Jenkins match their needs.\n\nIn past and current versions of Jenkins, if you know what you’re looking for it’s relatively easy to move around the interface. If you’ve never used Jenkins before, it can be very challenging to find your way around or even know what it is possible to do with Jenkins.\n\nThe proposed changes aim to address this initial confusion:\n\nInstead of changing the post-install defaults, which may not properly represent the user’s needs, the first-time user experience should help guide the user through configuration and plugin installation quickly so they can use Jenkins for their needs. Effectively it should be as easy as possible for a user to arrive at a good configuration for their usage.\n\nJenkins contributor Tom Fennelly, who has led this discussion on the mailing lists in the past, has posted a good prototype screencast of what some of this might entail:\n\nProviding Feedback\n\nWe’re asking you to read the issues linked from JENKINS-31157 and comment and vote on those issues accordingly.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nThis concludes this week’s blog series highlighting some of the Jenkins 2.0 proposals we felt were important to discuss with the broader Jenkins user audience. Many of these, and other minor proposals, can be found on the Jenkins 2.0 wiki page.","title":"Jenkins 2.0 Proposal: Improved \"Out of the box\" user experience","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-10-29T00:00:00.000Z","id":"adc91b34-7269-5628-87ae-4bc68cb38e9f","slug":"/blog/2015/10/29/jenkins-2-0-proposal-ux-improvements-part-one/","strippedHtml":"We have been featuring a few proposals this week for what \" Jenkins\n2.0\" is going to include. Today we’ll be diving into the most noticeable changes being proposed for Jenkins 2.0: the User Experience (UX) improvements\n\nThus far in this blog series we have reviewed proposals covering:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nPipeline as code front and center\n\nThe UX improvements being proposed aren’t necessarily as uniform as the proposals from earlier in the week but represent a large amount of prototype and exploratory work done by folks like Tom Fennelly, Gus Reiber and a few others. Those following the dev list may have already seen some of these proposals in some of the \"mega threads\" that we have had discussing potential UI/UX improvements previously.\n\nThe improvements proposed for 2.0 can be found under JENKINS-31156 . The most promising proposal under this issue is to update the plugin manager experience.\n\nAnother very important proposal for 2.0 worth mentioning is the proposal to update UI work well on mobile devices.\n\nProviding Feedback\n\nWe’re asking you to read the issues linked from JENKINS-31156 and comment and vote on those issues accordingly.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for tomorrow’s post covering the remainder of the proposed user experience changes!","title":"Jenkins 2.0 Proposal: UX Improvements (Part One)","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-10-28T00:00:00.000Z","id":"f9383f6c-7ac4-510a-ba69-7c342cd84479","slug":"/blog/2015/10/28/jenkins-2-0-proposal-pipeline-as-code-front-and-center/","strippedHtml":"We have been featuring a few proposals this week for what \" Jenkins\n2.0\" is going to include, today we’re discussing my personal favorite, which I believe will have a tremendously positive impact for years to come (not to be too biased!): moving the \"Pipeline as Code\" support in Jenkins to the front and center.\n\nThus far in this blog series we have reviewed proposals covering:\n\nIntroducing a policy for API deprecation\n\nSplitting Groovy out of 'core'\n\nToday’s proposal comes from project founder Kohsuke Kawaguchi titled \" Pipeline as code front and center \" and represents perhaps the most important and dramatic shift we hope to make in Jenkins 2.0.\n\nThis functionality has existed through the workflow plugin, which we have discussed at various Jenkins events before but if you’re not aware of some of the power behind it, check out this presentation from Jesse Glick :\n\nThe proposal in JENKINS-31152 expands on the problem we aim to address:\n\nThe default interaction model with Jenkins has been very web UI driven, requiring users to manually create jobs, then manually fill in the details through a web browser. This requires large amounts of effort to create and manage jobs to test and build multiple projects and keeps the actual configuration of a job to build/test/deploy a project separate from the actual code being built/tested/deployed. This prevents users from applying their existing CI/CD best practices to the job configurations themselves.\n\nTo address this, Kohsuke is proposing that we :\n\nIntroduce a new subsystem in Jenkins that:\n\nlets you design a whole pipeline, not just a single linear set of tasks\n\nstores the said pipeline configuration as human-editable Jenkinsfile in your SCM\n\nmakes it automatic to set up new pipelines when Jenkinsfile is added\n\ndifferentiates multiple branches in the same repository\n\nThis is the key new feature that positions Jenkins for continuous delivery use cases and other more complex automations of today.\n\nKohsuke’s proposal is largely about bringing together a lot of already existing pieces together to provide a very compelling experience for new and existing users alike. I hope it is clear now why this proposal is so exciting to me.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-31152, which itself have some additional tickets linked under it, and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for a couple more posts covering proposals to improve the Jenkins interface and user experience!","title":"Jenkins 2.0 Proposal: Pipeline as Code front and center","tags":["general","core","pipeline","workflow","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-10-27T00:00:00.000Z","id":"1fbfba77-6c14-503d-b574-e7815dd7c2b5","slug":"/blog/2015/10/27/jenkins-2-0-proposal-split-groovy-out-of-core/","strippedHtml":"As I mentioned in yesterday’s post, there’s been a lot of discussion recently about what \" Jenkins\n2.0\" means. In a recent \"Office Hours\" session, Kohsuke Kawaguchi presented his\nvision for Jenkins 2.0 in a office\nhours session, the slides for\nwhich can be found in this Google\nPresentation.\nRoughly paraphrasing Kohsuke’s vision, 2.0 is primarily about making things\nbetter for the thousands of users out there.\n\nThis week, we’ll be reviewing some key areas of the \"Jenkins 2.0\" proposal.\nAsking you, the user community, to provide feedback on these proposals, going\nfrom Jenkins internals to user interface.\n\nThus far we’ve covered:\n\nIntroducing a policy for API deprecation\n\nToday’s post involves a proposal originally from community member Jesse Glick who has proposed in JENKINS-29068 that Groovy be split out from the \"core\" Jenkins distribution. The linked issue expands on what the problem is here:\n\nCurrently Jenkins embeds a distribution of Groovy into \"core\" for a variety of scripting and management tasks. This version of Groovy is locked into core in such a way that users cannot upgrade Groovy independently from Jenkins itself. If the Jenkins-bundled version were upgraded to a different major version, it may break users' custom scripts as well as plugins that use Groovy due to API changes.\n\nThe proposal is relatively straight-forward and affects the many different users and use-cases for the embedded Groovy scripting support in Jenkins:\n\nFor ease of maintenance and modularity it would be useful to split Jenkins' use of Groovy into a library plugin; different clients could request 1.x and 2.x simultaneously by using different versions of the library, etc.\n\nStuff in core using Groovy that would need to either be put in this library (if infrastructure for other features) or put in another plugin depending on it (if first-class features themselves):\n\nI selected this proposal to feature on this blog, despite its rather technical underpinnings, it will affect core developers, plugin developers, power and casual users alike. I encourage everybody to read through the proposal and its potential impact on the issue tracker.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-29068 and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned for the rest of the week as we keep with our theme of going \"from the inside out\" and help us make Jenkins 2.0 great!","title":"Jenkins 2.0 Proposal: Split Groovy out of \"core\"","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-10-25T00:00:00.000Z","id":"78143bf1-03da-5815-8439-43425e0258cc","slug":"/blog/2015/10/25/jenkins-2-0-proposal-introduce-a-policy-for-api-deprecation/","strippedHtml":"Over the past few weeks there has been a vibrant discussion happening on the\njenkinsci-dev@ mailing\nlist as to what \" Jenkins 2.0\" means.  While\nJenkins does not currently adhere to semantic versioning,\nthe change of a major version number does indicate a major milestone for the community.\n\nProject founder, Kohsuke Kawaguchi presented his\nvision for Jenkins 2.0 in a office\nhours session, the slides for\nwhich can be found in this Google\nPresentation.\nRoughly paraphrasing Kohsuke’s vision, 2.0 is primarily about making things\nbetter for the thousands of users out there.\n\nThis week, we’ll be reviewing some key areas of the \"Jenkins 2.0\" proposal.\nAsking you, the user community, to provide feedback on these proposals, going\nfrom Jenkins internals to user interface.\n\nToday’s post involves a proposal to introduce a policy for API\ndeprecation from community members Oliver\nGondža and Daniel\nBeck. Extensibility is the heart of Jenkins, but over the past ten\nyears we’ve not had a proper API deprecation policy other than \"try not to\nbreak plugins, ever.\"\n\nDaniel, expanding more on the problem wrote:\n\nWe have no backward compatibility policy besides \"compatibility matters\".\nWith 1000+ plugins and basically the entire core being available to\nplugins, a lot of difficult or impossible to remove cruft has accumulated over\nthe last ten years. This limits both what can be changed in core, and makes\ndocumentation difficult to use for plugin developers.\n\nThe two have put together a detailed proposal under\nJENKINS-31035 which\nsuggests we:\n\nlimit the availability in APIs (classes, methods, fields, …​) provided by core\nto a number of releases. Depending on the feature, this can range from a few\nmonths, to a few years (e.g. two years being about 100 releases of Jenkins and\neight LTS baselines).\n\n[…​]\n\nI highly encourage you to read the entire proposal on the issue\ntracker, where we are\ntrying to collect feedback/history.\n\nProviding Feedback\n\nWe’re asking you to read the proposal in\nJENKINS-31035 and provide\nfeedback if you have it.\n\nIf you have ever logged in to the issue\ntracker or the\nwiki, you have a \"Jenkins user account\" which\nmeans you’ll be able to log into the issue tracker and vote for, or comment on\nthe issue linked above.\n\n( note : if you have forgotten your password, use the account\napp to reset it.)\n\nWe’re going to review feedback, make any necessary adjustments and either\napprove or reject the proposal two weeks from today.\n\nStay tuned, and help make Jenkins 2.0 great!","title":"Jenkins 2.0 Proposal: Introduce a policy for API deprecation","tags":["general","core","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-09-29T00:00:00.000Z","id":"6734ef0b-9219-5517-9b5b-8529be8d41cd","slug":"/blog/2015/09/29/gui-improvements-on-the-horizon/","strippedHtml":"This past Thursday, September 24th, 2015, I presented a couple of prototypes of what I hope will be the future of the Jenkins GUI. Or perhaps more correctly, close enough to the future to start generating positive feedback from you the community that improving the Jenkins GUI is important and some pieces that I am showing are going in the right direction. If you have ~45 minutes to spare, I recommend the video (the narrator’s voice is very soothing). If not, I offer the following as a reasonable summary.\n\nJenkins has a lot of strengths as tool. Its robust user community along with its thoughtful and extensible design are two of the most immediate. They are the two pillars that have made Jenkins the leader in the CD/CI space and the de facto choice for most of us looking to automate our build and test processes. But let’s face it, by today’s standards, the GUI doesn’t really sing. I will even go so far as to say, I believe it is a platform liability at the moment, and even among we the Jenkins faithful, few of us look forward to using it.\n\nIn an effort to turn that tide, I traveled to this year’s 3 main JUC events, in DC, London, and Santa Clara, pushing the idea that enhancement is possible and providing an evolving sketch of what that might look like. The three main areas of enhancement I have targeted for a first round of improvement are these:\n\nItem creation and configuration\n\nPlugin selection\n\nWorkflow construction\n\nSoon to follow, but not yet prototyped by me would be pieces dedicated to monitoring jobs in Jenkins as well as node and resource utilization and efficiency. Rightly or wrongly, I have started with the create and configure side of the GUI, as I see it as somewhat primary in a typical job creation scenario (you have to create a job before you can monitor it), but this second piece is no less important. Sadly, lips service is all I can offer you today, but more prototypes and video demonstrations are on the way.\n\nItem Creation and Configuration in Jenkins\n\nIn most use cases, item creation means creating a freestyle job, so that is what I use as my base use case example. It is important to note, however, that most configuration in Jenkins happens through a shared set of GUI components. These components are a blend of Jelly files and Javascript and can be found in the …​/main/resources/lib/form directory in the Jenkins source code. In operating on these pieces, I have the opportunity to effectively enhance broad areas of the Jenkins experience, including aspects of plugin use that share these components. This greatly increases the upside of the effort as well as the possible drama and side effects, which I will go into more detail on later.\n\nAs for the upside piece, the first bit of improvement I am looking to attain is breaking up the many 'toilet paper' style unbroken configuration lists sprinkled throughout Jenkins. The first example of this appears in item creation. On first installation, this issue is not immediately obvious, but if you have installed a variety of plugins or chosen to purchase CloudBee’s Jenkins Enterprise product, you will find that Jenkins can have quite a few types of items to create. While they do have descriptive text, I still find them difficult to differentiate and almost impossible to casually scan. Thus, my first suggestion is to add some form of categorization to the item types. For this to function correctly, the GUI will need to be smart enough to apply the categories only when item counts are sufficient to justify them (if you only have 4 item creation types, it doesn’t make sense to have 8 categories with which to sort them). But if you are a long time Jenkins user with many plugins you may also know it is possible to have more than a dozen item types. So if nothing else, an extension point that allowed for the categorization of item types seems helpful.\n\nThe configuration form itself, it also can become incredibly long with few landmarks or visual differentiation points. As a remedy, I propose calling out and clearly boxing each of the existing configuration sections and making sure that their names are as meaningful as possible. As an added step, I make the sections collapsible. This allows the user to jump to specific points in the form and tuck other areas out of the way. In some cases, we can make specific sections open by link context or even by user context.\n\nPlugin Selection\n\nAnother essential piece of the Jenkins experience is plugin configuration. Today, if you are looking to add plugins to your Jenkins environment, you are almost certainly using Google to find a 3rd party review site, collecting the name of the plugin you want and then either linking to it on this website, or filtering for it in the Plugin Manager GUI.\n\nNeither in the product nor on this website is there a particularly good resource for comparing plugins and evaluating which you might add.\n\nInstead, I am looking to add something akin to an application store experience to both this website and the product UI. You should be able to group sort and compare plugins by a variety of criteria, including author, installation base, and user review. You should also have a set of general use categories that fits user needs and expectations, rather than the free ranging labels that plugin authors have arbitrarily applied today.\n\nWorkflow Script Builder\n\nFinally, I have a GUI that allows for a sort of Drag-n-drop assembly of Workflows. A major tenant of the utility of Workflows as opposed to Freestyle jobs is that they can be completely separated from the Jenkins GUI and stored in a source repository. None-the-less, with absolutely no GUI, there is little to guide the user who is looking to get started without a upfront learning investment. As it turns out, a Workflow/Groovy script is pretty straight forward, but you don’t really know that until you have made one. Also, Workflow allows for the orchestration of jobs across multiple nodes of hardware resources, making it a potentially involved little bit of configuration. Thus, my goal here is two fold. Allow the user to model a workflow quickly and easily and showcase a few of the more advanced features workflow enables. The result is this script builder. My hope is to host the prototype somewhere you all might be able to use it directly, but in the meantime, my hope is that my video pretty well explains how it works. Please take a look and post whatever comments you see fit.\n\n…​and really send along feedback…​\n\nSo with all things community related, please, please, send back whatever feedback makes sense. I can be reached via Twitter @gusreiber.\n\nOther places you can find me include, IRC (freenode/#jenkins) and https://plus.google.com/GusReiberUI[Google ( https://plus.google.com/+GusReiberUI)]. I would love to hear from you.\n\nQuestions and Answers from the talk:\n\nHow likely is it that any of these UI changes will make it into the core open source Jenkins? When would we start seeing them there?\nMost will be OSS. An exact schedule has not been determined, but most of it is still about a year away. Likely we will have an experimental wars for download along the way.\n\nIs there anyway to determine which GUI attributes are contributed by which plugin?\nI take it that is a bit of a feature request? It came up at JUC West as well. Should be something that can be surfaced in the GUI. I agree, it would be helpful.\n\nWhat is the difference between ANT and Jenkins?\nAnt is a good bit more bare-bones than Jenkins. In fact, you can add an Ant plugin to your Jenkins environment. You would typically use Ant to compile java source files. Jenkins orchestrates the fetching of the source files from some particular repository, the building of those files (often Jenkins uses Ant via its plugin to do this), running and reporting some suite of tests against that build, and then archiving or deploying the artifacts to wherever. Often times this requires navigating several computers with their own security constraints, so Jenkins helps you manage that as well.\n\nWhat version of the Jenkins it is?\nThis isn’t available today, but I am building against 1.621-SNAPSHOT currently, but will upgrade with Jenkins to the coming December LTS. I’m interested in seeing the list of 100 plugins that you mentioned (by Daniel?) Me too. :^) He and the community (which can be you if want to join IRC freenode.net/#jenkins and attend the hangouts and governance meetings: https://jenkins.ci.org)\n\nFor IRC, I assume the server is freenode.net?\nYes.\n\nWill there be any dashboard kind of feature for the build history in the new GUI?\nSo far, I have been focusing on the create and configuration portion of the Jenkins UX as I see it as a barrier to entry for new users. The read/report/analyze half of the Jenkins UX I actually see as the portion with more long term value, as you tend to read more often than you write, so I am eager to jump in here as well. …​.however, in its core today, Jenkins the tool seems to me to really want to see the world in the same context of flat XML files in folders as it actually persists its configuration data. To really make meaningful dashboards, it needs to be possible to query job configurations and build artifacts by a wide set of criteria that is not at all related to the folder in which the xml file happens to be stored. Also, some of the things you care about in the Jenkins universe are compute resources (controller/agents/exactures). These are also not the same as config files in folders and need to be queryable as their own first class type of entity. …​so what I am saying with a lot of words is that I see the config piece as a somewhat more immediate and urgent fix. The broccoli of the meal, if you will. I will want to get that out as fast as possible to get it out of the way. The reporting piece is actually the wine. At the moment, we are giving you Bartles and Jaymes in paper cups. …​so a lot of work is still needed there.\n\nHave you investigated Google Polymer as UI components for jenkins UI?\nI have not, but will now. I am actually quite a google fan-boy in much the way a lot of kids love Apple. (I also love Apple… being from Seattle, I even love MS). But, for the super near term, we are most focused on getting JQuery cleanly into core and Prototype.JS deprecated. Walk first, is my feeling.\n\nAre there any tutorials on Jenkins workflow?\nJesse Glick or KK are better people to ask about that, really. They are also on IRC: freenode.net/#jenkins. Daniel Beck as well, might be a good person to ask. My little workflow demo is still really just fiction. Will there be a 'Expand All' and 'Collapse All' buttons for the accordions in new configure GUI? (I would probably inject one if not by default) Yes. Also, they should be URL controllable so that they can be set by link or user context easily. Maybe they should also remember what you had open last? …​stuff to tinker with that really needs to be right.\n\nWhat impact does the UI changes have on job configuration behind the scenes? Is configuration still stored in XML format?\nNone. The post string stays the same and from then on, Jenkins is Jenkins.\n\nCan the create item screen be configurable? At the moment, no, but ideally yes. It is still a big hand wave at the moment about how those categories are created, managed, and updated. The same categories ought to bubble back up when searching for the plugins to help relate what plugins generate what UI. I am hoping for guidance from the community. How will workflow fit in with new UI?\nIn some respects, the new configuration page is about enhancing the more traditional freestyle job and not workflow. However, the last bit of my presentation with the script builder is exclusively about workflow. The plugin manager is about plugins, so it would apply to both.\n\nHow is a human notified for the wait for approval step in this workflow?\nSo workflow approval can be done via the web GUI. But to get real notification, you would program that into your workflow Jenkins has a fairly large set of notification plugins. So you can use Jenkins to trigger email, or SMS, or HipChat, or Slack, or pretty much whatever. As these plugins are increasingly customized for workflow, you will get nice and nice workflow syntax for instantiating those actions. When my script builder is adopted, you would have a friendly button you could drag into the stage and it would notify you prior to the manual checkpoint.\n\nCustom plugins still supported?\nYes. Though there is supported and supported. The highest level of support for a plugin would be a custom DSL for workflow that would make for streamlined syntax in workflow for interacting with that plugin via Groovy. But existing plugins do not need that level of support to be used within a Jenkins file / Groovy script. Instead, the syntax for accessing the plugin is likely to be more complicated. ….some plugins are freestyle specific, in which case, they no longer make sense in workflow. ….Daniel Beck or Jesse Glick are probably better suited to answering this question, however…​\n\nWill there be an improvement in performance with docker builds, sonar scanning? From my experience sonar takes 20+ mins with jenkins plugin where as it takes 3 mins with maven plugin\nIs this times it is taking the GUI to render, or the actual build to run? I am not sure I am following the question exactly, but regardless, I am not well equipped to answer many questions about performance issues in Jenkins. I know of a fairly major performance issue specifically in the configuration form that I believe will be fixed in the new GUI, but that isn’t build performance, it is just form rendering performance.\n\nI like the graphical configuration. Thanks. The scripting of a complex workflow looked a bit daunting.\nCool. Yeah, my main and first goal is to get something out there that would allow folks to quickly sketch and deploy an actual working workflow that reasonably reflects an 80%ish use case. No GUI can ever be as fully flexible as a script, but I don’t think most people need the 95% case to get started and see the benefit of a versionable and robust config file format.\n\nWill there be any effort to make the UI mobile friendly for the admin on the go?\nAbsolutely. Especially on the TBD read/reporting end of the UI, but everything new needs to meet a reasonably high bar of device responsiveness. Today, the Jenkins GUI is just not responsive. Which is terrible.\n\nAs a plugin developer do I need to change implementing the ui source from jelly or groovy to some other language/technique or will it be compatible?\nSo you will not NEED to change from whatever you are doing, except if you have built a plugin GUI that has custom script that either relies directly on behavior.js, hudson-behavior.js, or the particulars of the existing DOM structure (you do something in the client that requires your or some other input to be in a particular TABLE TR TD DOM traversal path). …​I believe 2 things are going to continue to happen at a faster and faster rate. New plugin authors are not going to want to write GUIs in Jelly and Prototype.js, but instead use some more modern client side MVC approaches like Angular, where the GUI interacts with a REST api instead of being a dom directly rendered from the server. It is a bit of a different mode of working than Jelly, and maybe slightly less direct, but it is a lot easier to find doc on how to do things with JQuery, Agile, Handlebars and the like, than it is to find doc on Jelly. And the responsiveness and breadth of gestures and controls in Jelly are already terribly behind what is now the main stream of web UI development. So I think plugin builders are, if they aren’t already, going to want better tools available to them. I also think that people are going to gravitate towards workflow or something similar. Since the UI for workflow is foremost a script, making a GUI for a plugin that works with it might be a fundamentally different beast. …​depending on what the plugin is trying to do… So again, new plugins or even upgrading existing plugins to work with workflow are likely want a new technology set, not just because the existing Jenkins GUI is changing, but because new plugins will want to do different and better stuff.\n\nAre there connectors for other source control tools like CVS and Dimensions?\nI am not sure exactly which connector plugins are already supporting Workflow or how deeply that support goes. Because Jenkins has plugins that provide access to these SCMs, you can use workflow to go and fetch those source trees. A greater level of support for workflow from these plugins would mean a more elegant workflow syntax for that interaction. At the moment, my GUI script builder is still fiction. My plan would be to add GUI buttons for whatever are the most popular SCMs and I will attempt to mask the syntax regardless of its clumsiness. ….the way I am constructing my initial prototype, there is already a reasonably clear extension point for adding buttons that generate some chunk of Groovy syntax when it is dragged into a stage. So I will add the initial set based on community feedback and then the community can continue to add their own.\n\nWhat are the compatibility issues existing plugin developers needs to be aware of?\nFor plugins that interact with freestyle jobs, or really most job types that aren’t workflow, plugin developers should expect the page DOM structure to change. If for whatever reason, they find they are busting into some custom script to traverse the DOM to compare 1 setting to another, that will break. Also, hudson-behaviors.js itself has a number of functions in it that do DOM traversing, like “findFollowingTR”. In some cases the signatures of those functions might need to change and the DOM structure that they return might also change. If a plugin uses what were meant to have been internal functions, they are likely to break. Finally, the page geometry is going to change. This may seem so superficial and obvious that, who cares, but sometimes changing a column width translates into an important part of a GUI being hidden or otherwise inaccessible. That ends up being as critical a break as any other. …​so to combat these points of possible breakage, we are going to be looking for a handful somewhere between 20 and 100 plugins that we will want to test against. We haven’t made that list yet, let alone run any tests, so that is really a critical next step. For the plugin manager changes, I don’t see much if any of a braking issue, although I would like to add additional sorting and display power to the GUI, which means the GUI will need more metadata than currently exists, if the plugins want to take advantage of that new power in the GUI. This won’t break things, but plugin authors might want to go back to their plugins and fill in whatever the new bits of metadata end up being…. most likely they would be things like, richer descriptions, better category selections, and possibly icons.\n\nI’ve not seen a lot of Jenkins but what I had I didn’t really get, was awkward for all the reasons Gus mentioned. This looks brilliant. When can we have it?\nTom and I, and now our junior pledge, Keith (not actually junior at all, just more fit than me), are busily typing as fast as we can as well as lobbying the community that our vision is more or less a correct one. We have a very interesting initial plugin selection GUI that might make this years final LTS (which I did not demo), which is none-the-less a nice step forward for Jenkins. In it will be a lot of the JS library bundling that will enable most of what I have shown in this demo. Our hope is that with each LTS we will be able to push out an additional piece of the GUI puzzle. Likely starting with the job create and configure GUI, which would be the mid year LTS. I am hoping that a year from now this will be how Jenkins looks and acts. ….in the meantime, we are grappling with how best to push preview releases so people can play with it and send me hate mail.\n\nIs there any way to test front end of Jenkins plugins? And will that improve too?\nA major and almost blocking portion of this work used to be the custom and somewhat broken version of HTMLUnit that was in core, which greatly hampered including libraries other than Prototype in Jenkins and writing code using those libraries in some sort of testable way. Our new approach to rebuilding the Jelly controls which are the foundation of the Jenkins config page and in general are shared by all plugins that need to post data back to Jenkins, already have a testing strategy backed into our design. Those Jelly form controls are extensible in Jenkins today and would remain so. Our hope would be that any plugin adding custom controls would follow our same design and test pattern we are building in core. ….so that was a long answer, but the short answer YES! Today, building GUI parts into your Jenkins plugin is a bit of a mystery, where most people copy something they saw someone else did, hack it, and the only test is, well…. it worked for me. That is no good and a fundamental piece we are looking to change. ….still a long answer… Node.js and Jasmine are the specific tools we using.\n\nWhat’s the estimated rollout date for this workflow feature?\nThe workflow feature is the newest concept I demonstrated, but in a lot of ways may also be the easiest to ship. As a script generator, exclusively, it could be hosted anywhere, and then you just paste your generated workflow script into the whatever existing Jenkins GUI better, submit into your source code. ….but at the moment, it isn’t actually on an official roadmap yet. Assuming the response to it remain positive, I would expect that to change fairly quickly.","title":"GUI improvements on the horizon","tags":["general","core","feedback","video","workflow"],"authors":[{"avatar":null,"blog":null,"github":"gusreiber","html":"","id":"gusreiber","irc":null,"linkedin":null,"name":"Gus Reiber","slug":"blog/author/gusreiber","twitter":null}]}}]}},"pageContext":{"tag":"feedback","limit":8,"skip":0,"numPages":8,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}