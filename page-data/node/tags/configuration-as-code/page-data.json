{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/configuration-as-code",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2020-05-25T00:00:00.000Z","id":"bbaf3958-fe7d-5fd6-a06c-16651d385923","slug":"/blog/2020/05/25/read-only-jenkins-announcement/","strippedHtml":"I’m excited to announce that the 'read-only' Jenkins feature is now available for preview.\nThis feature allows restricting configuration UIs and APIs while providing access to essential Jenkins system configuration, diagnostics, and self-monitoring tools through Web UI.\nSuch mode is critical for instances managed as code, e.g. with Jenkins Configuration-as-Code plugin.\nIt is delivered as a part of the jep:224[Readonly system configuration] effort.\n\nYou will want to use at least Jenkins 2.238 to have all the features mentioned in this post.\n\nRead-only Jenkins currently allows users to have access to:\n\njob configuration\n\nsystem configuration\n\nplugin manager\n\nsystem logs\n\ncloud configuration\n\nagent configuration\n\nagent logs\n\nFor more planned integrations see the jira:JENKINS-12548[] epic.\n\nRead-only Jenkins is split into three permissions:\n\nJob/ExtendedRead - Read-only access to job configurations\n\nexisted since 2009 but the UI didn’t do anything to indicate to the users\nthat they couldn’t edit the job configuration page.\nThis has now been adapted to the new read-only engine.\n\nAgent/ExtendedRead - Read-only access to agent configurations\n\nexisted since 2013 but it was undocumented and only allowed access to API and no UI\n\nUI support added in Jenkins 2.238\n\nOverall/SystemRead - Read-only access to Jenkins system configuration.\nIt is very useful for Jenkins instances managed as code, e.g. with help of the Jenkins Configuration as Code Plugin.\n\nIntroduced in Jenkins 2.222 as a part of jep:224[Readonly system configuration]\n\nYou can selectively grant the permission(s) as you wish.\n\nWhy do I want this?\n\nGiven the rise of the configuration-as-code plugin a lot of Jenkins instances are fully managed as code,\nwhich means that no changes are allowed through the UI.\n\nThe problem with this is you don’t know when new plugin versions are available and in order to see what other configuration options are available to a plugin you currently need the 'Administer' permission.\n\nRead-only access to system administration information allows users who are not administrators to more easily debug build issues.\nFor example, given a 'Jenkins' error message in a build the user can check:\n\nwhich plugins are installed\n\nthe version of the plugin\n\nThis can allow the user to solve their issue themselves and makes it easier for the user to report an issue with a plugin directly to the maintainers.\n\nWhat can I expect\n\nAll built in UI controls have been adapted to clearly distinguish between\nan editable control and a control you don’t have permission to edit:\n\nEditable:\n\nNon editable:\n\nNote: there are other controls such as in the credentials and pipeline plugins that have\nnot been updated yet.\n\nAction buttons, (Such as 'Save' and 'Apply') have been hidden in most cases.\n\nWork will continue on read-only configuration.  Some plugins need support added and certain controls\ncould have some improvements done to render better.\n\nHow can I use it?\n\nThese permissions are currently available in beta and for now disabled by default.\nYou can enable them by installing the Extended read permission plugin v3.2 or above.\n\nThen you will need to add the following permissions to a user / group depending on your use case:\n\nOverall/SystemRead\n\nJob/ExtendedRead\n\nAgent/ExtendedRead\n\nNote: You will need to set the Overall/Read and Job/Read permissions as well.  You might\nwant to consider creating a role containing the required permissions.\n\nHere is an example using the Configuration as Code plugin and the Folder-based Authorization Strategy plugin :\n\njenkins:\n  authorizationStrategy:\n    folderBased:\n      globalRoles:\n        - name: \"admin\"\n          permissions:\n            - id: \"Overall/Administer\"\n          sids:\n            - \"admin\"\n        - name: \"global read\"\n          permissions:\n            - id: \"Agent/ExtendedRead\"\n            - id: \"Overall/SystemRead\"\n            - id: \"Overall/Read\"\n            - id: \"Job/Read\"\n            - id: \"Job/ExtendedRead\"\n          sids:\n            - \"reader\"\n\nI can’t see a configuration that I think should be allowed\n\nMost of Jenkins itself has been updated to support read-only Jenkins, but not very many plugins.\nPlease create an enhancement issue on the plugins issue tracker.\nIf the plugin uses Jira to track issues, then you can add it to the jira:JENKINS-12548[] epic.\n\nHow do I update my plugin to support it\n\nSee the Read only view section of the developer documentation.\n\nWhat’s next\n\nIn this release we introduce a foundation feature which is already supported in all key Jenkins core controls and in some plugins.\nThere are many plugins which contribute to global configurations and diagnostics which still need to be adapted to support the new mode.\nWe will keep working on this feature and its adoption so that the next LTS baseline in September provides a full-fledged user experience for Jenkins admins.\n\nSystem read permission is a featured project in the UI/UX Hackfest\nhappening May 25-29 2020. If you want to get involved please check it out!","title":"Read-only Jenkins Configuration","tags":["system-read","extended-read","configuration-as-code","announcement"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/author/timja","twitter":"Tjaynz"}]}},{"node":{"date":"2020-03-30T00:00:00.000Z","id":"479ec095-b427-5e47-95a5-1bca6fbc97c5","slug":"/blog/2020/03/30/azure-key-vault-cred-provider/","strippedHtml":"Azure Key Vault is a product for securely managing keys, secrets and certificates.\n\nI’m happy to announce two new features in the Azure Key Vault plugin:\n\na credential provider to tightly link Jenkins and Azure Key Vault.\n\nhuge thanks to Jie Shen for contributing this\n\nintegration with the configuration-as-code plugin.\n\nThese changes were released in v1.8 but make sure to run the latest version of the plugin, there has been some fixes since then.\n\nSome advantages of using the credential provider rather than your own scripts:\n\nyour Jenkins jobs consume the credentials with no knowledge of Azure Key Vault, so they stay vendor-independent.\n\nthe provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Slack Notifications plugin.\n\ncredential usage is recorded in the central Jenkins credentials tracking log.\n\nJenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Azure Key Vault while consuming other credentials from your existing providers.\n\nNote: Currently only secret text credentials are supported via the credential provider, you can use the configuration-as-code integration to load the secret from Azure Key Vault into the System Credential Provider to work around this limitation.\n\nGetting started\n\nInstall the Azure Key Vault plugin\n\nThen you will need to configure the plugin.\n\nAzure authentication\n\nThere’s two types of authentication you can use 'Microsoft Azure Service Principal' or 'Managed Identities for Azure Resources'\n\nThe easiest one to set this up quickly with is the 'Microsoft Azure Service Principal',\n\n$ az ad sp create-for-rbac --name http://service-principal-name\nCreating a role assignment under the scope of \"/subscriptions/ff251390-d7c3-4d2f-8352-f9c6f0cc8f3b\"\n  Retrying role assignment creation: 1/36\n  Retrying role assignment creation: 2/36\n{\n  \"appId\": \"021b5050-9177-4268-a300-7880f2beede3\",\n  \"displayName\": \"service-principal-name\",\n  \"name\": \"http://service-principal-name\",\n  \"password\": \"d9d0d1ba-d16f-4e85-9b48-81ea45a46448\",\n  \"tenant\": \"7e593e3e-9a1e-4c3d-a26a-b5f71de28463\"\n}\n\nIf this doesn’t work then take a look at the Microsoft documentation for creating a service principal.\n\nNote: for production 'Managed Identities for Azure Resources' is more secure as there’s no password involved and you don’t need to worry about the service principal’s password or certificate expiring.\n\nVault setup\n\nYou need to create a vault and give your service principal access to it:\n\nRESOURCE_GROUP_NAME=my-resource-group\naz group create --location uksouth --name $RESOURCE_GROUP_NAME\n\nVAULT=my-vault # you will need a unique name for the vault\naz keyvault create --resource-group $RESOURCE_GROUP_NAME --name $VAULT\naz keyvault set-policy --resource-group $RESOURCE_GROUP_NAME --name $VAULT \\\n  --secret-permissions get list --spn http://service-principal-name\n\nJenkins credential\n\nThe next step is to configure the credential in Jenkins:\n\nclick 'Credentials'\n\nclick 'System' (it’ll appear below the Credentials link in the side bar)\n\nclick 'Global credentials (unrestricted)'\n\nclick 'Add Credentials'\n\nselect 'Microsoft Azure Service Principal'\n\nfill out the form from the credential created above, appId is 'Client ID', password is 'Client Secret'\n\nclick 'Verify Service Principal', you should see 'Successfully verified the Microsoft Azure Service Principal'.\n\nclick 'Save'\n\nJenkins Azure Key Vault plugin configuration\n\nYou now have a credential you can use to interact with Azure resources from Jenkins, now you need to configure the plugin:\n\ngo back to the Jenkins home page\n\nclick 'Manage Jenkins'\n\nclick 'Configure System'\n\nsearch for 'Azure Key Vault Plugin'\n\nenter your vault url and select your credential\n\nclick 'Save'\n\nStore a secret in Azure Key Vault\n\nFor the step after this you will need a secret, so let’s create one now:\n\n$ az keyvault secret set --vault-name $YOUR_VAULT --name secret-key --value my-super-secret\n\nCreate a pipeline\n\nInstall the Pipeline plugin if you don’t already have it.\n\nFrom the Jenkins home page, click 'New item', and then:\n\nenter a name, i.e. 'key-vault-test'\n\nclick on 'Pipeline'\n\nadd the following to the pipeline definition:\n\n// Declarative //\npipeline {\n  agent any\n  environment {\n    SECRET_KEY = credentials('secret-key')\n  }\n  stages {\n    stage('Foo') {\n      steps {\n        echo SECRET_KEY\n        echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n      }\n    }\n  }\n}\n\n// Scripted //\nwithCredentials([string(credentialsId: 'secret-key', variable: 'SECRET_KEY')]) {\n    echo SECRET_KEY\n    echo SECRET_KEY.substring(0, SECRET_KEY.size() - 1) // shows the right secret was loaded, don't do this for real secrets unless you're debugging\n}\n\nYou have now successfully retrieved a credential from Azure Key Vault using native Jenkins credentials integration.\n\nconfiguration-as-code integration\n\nThe Configuration as Code plugin has been designed as an opinionated way to configure Jenkins based on human-readable declarative configuration files. Writing such a file should be easy without being a Jenkins expert.\n\nFor many secrets the credential provider is enough,\nbut when integrating with other plugins you will likely need more than string credentials.\n\nYou can use the configuration-as-code plugin (aka JCasC) to allow integrating with other credential types.\n\nconfigure authentication\n\nAs the JCasC plugin runs during initial startup the Azure Key Vault credential provider needs to be configured before JCasC runs during startup.\n\nThe easiest way to do that is via environment variables set before Jenkins starts up:\n\nexport AZURE_KEYVAULT_URL=https://my.vault.azure.net\nexport AZURE_KEYVAULT_SP_CLIENT_ID=...\nexport AZURE_KEYVAULT_SP_CLIENT_SECRET=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\nexport AZURE_KEYVAULT_SP_SUBSCRIPTION_ID=...\n\nSee the azure-keyvault documentation for other authentication options.\n\nYou will now be able to refer to Azure Key Vault secret IDs in your jenkins.yaml file:\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n        - usernamePassword:\n            description: \"GitHub\"\n            id: \"jenkins-github\"\n            password: \"${jenkins-github-apikey}\"\n            scope: GLOBAL\n            username: \"jenkinsadmin\"\n\nThanks for reading, send feedback on twitter using the tweet button in the top right, any issues or feature requests use GitHub issues.","title":"Introducing the Azure Key Vault Credentials Provider for Jenkins","tags":["jenkins","pipeline","security","azure","credentials","credential-provider","configuration-as-code"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/author/timja","twitter":"Tjaynz"}]}},{"node":{"date":"2018-08-23T00:00:00.000Z","id":"409d4d90-3aa4-5eba-ac07-97d9486bc294","slug":"/blog/2018/08/23/speaker-blog-casc-part-1/","strippedHtml":"This blog post is part 1 of a Configuration-as-Code series\n\nJenkins is highly flexible and is today the de facto standard for implementing CI/CD, with an active community to maintain plugins for almost any combination of tools and use-cases.\nBut flexibility has a cost: in addition to Jenkins core, many plugins require some system-level configuration to be set so they can do their job.\n\nIn some circumstances, \"Jenkins Administrator\" is a full time position.\nOne person is responsible for both maintaining the infrastructure, and also pampering a huge Jenkins controller with hundred installed plugins and thousands hosted jobs.\nMaintaining up-to-date plugin versions is a challenge and failover is a nightmare.\n\nThis is like years ago when system administrators had to manage dedicated machines per service.\nIn 2018, everything is managed as code using infrastructure automation tools and virtualization.\nNeed a fresh new application server as staging environment for your application? Just deploy a Docker container.\nInfrastructure is missing resources? Apply a Terraform recipe to allocate more on your favourite Cloud.\n\nWhat about the Jenkins administrator role in this context? Should they still spend hours in the web UI, clicking checkboxes on web forms? Maybe they already adopted some automation, relying on Groovy script voodoo, or some home-made XML templating?\n\nEarly this year we announced the first alpha release of “Jenkins Configuration-as-Code” (JCasC), a fresh new approach to Jenkins configuration management, based on YAML configuration files and automatic model discovery.\n“JCasC” has been promoted as a\ntop-level Jenkins project, and the corresponding\nJenkins Enhancement Proposal has been accepted.\n\nWhat can JCasC do for our Jenkins Administrator?\n\nJCasC allows us to apply a set of YAML files on our Jenkins controller at startup or on-demand via the web UI.\nThose configuration files are very concise and human readable compared to verbose XML files the Jenkins uses to actually store configuration.\nThe files also have user-friendly naming conventions making it easy for administrators to configure all Jenkins components.\n\nHere’s an example:\n\njenkins:\n systemMessage: \"Jenkins managed by Configuration as Code\"\n\n securityRealm:\n   ldap:\n     configurations:\n       - server: ldap.acme.com\n         rootDN: dc=acme,dc=fr\n         managerPasswordSecret: ${LDAP_PASSWORD}\n     cache:\n       size: 100\n       ttl: 10\n     userIdStrategy: CaseInsensitive\n     groupIdStrategy: CaseSensitive\n\nAs you can see, you don’t need long explanation to understand how this YAML file will setup your Jenkins controller.\n\nBenefits\n\nThe most immediate benefit of JCasC is reproducibility.\nAn administrator can now bootstrap a new Jenkins controller with the exact same configuration with a trivial setup.\nThis allows them to create a test instance and check the impact of plugin upgrades in a sandboxed environment.\nThis also lets them be more confident with failover and disaster recovery scenarios.\n\nFurther benefits come when administrators start managing their Jenkins’ YAML configuration files in source control, like they do with Terraform configuration.\nDoing so gives them auditing and reversibility of their Jenkins controller configuration.\nTheycan establish a sane configuration change workflow that runs a test Jenkins instance and ensures configuration is healthy before actually applying any change to their production Jenkins controller.\n\nLast but not least, with ability to quickly setup Jenkins controllers and control them from a set of shared YAML configuration files, administrators can now offer per-team Jenkins instances, with more flexibility on installed plugins.\nA controller becomes more or less a transient piece of infrastructure for your team, as long as they also manage build definition with Jenkinsfiles.\n\nWith Configuration-as-Code we can stop having to treat our Jenkins controller like a pet we need to pamper, and start managing Jenkins controllers as cattle you can replace without effort nor impacts.\nWelcome in the “as-code” world.\n\nFigure 1. They are still cute though, right?\n\nOk, so what’s next?\n\nYou can read more about the Jenkins Configuration-as-Code plugin on the project’s\ngithub repository.\nTo chat with the community and contributors join our\ngitter channel,\nor come see us in person at\nlink: Jenkins World to discuss the JCasC project and its future!\n\nAlso don’t miss next post from the Configuration-as-Code series, where we’ll look at how JCasC works with sensitive data like passwords and other credentials.\n\nCome meet the Configuration as Code contributors, Nicolas de Loof and Ewelina Wilkosz at\nJenkins World on September 16-19th,\nregister with the code JWFOSS for a 30% discount off your pass.","title":"Jenkins Configuration-as-Code: Look ma, no hands","tags":["configuration-as-code","jenkinsworld","jenkinsworld2018"],"authors":[{"avatar":null,"blog":null,"github":"ndeloof","html":"","id":"ndeloof","irc":null,"linkedin":null,"name":"Nicolas De Loof","slug":"/blog/author/ndeloof","twitter":null}]}}]}},"pageContext":{"tag":"configuration-as-code","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}