{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/documentation",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-04-07T00:00:00.000Z","id":"4420f416-6666-56da-a0b5-3d25e4c667e3","slug":"/blog/2021/04/07/contributhon-participants/","strippedHtml":"The She Code Africa Contributhon started April 1, 2021.\nThe She Code Africa Contributhon is a boot camp where African women are paid to work with open source organizations on selected projects with dedicated mentors.\nThis program aims to create a more diverse, inclusive, and innovative culture within the African open source ecosystem by matching African women in technology with sponsor and mentor open source organizations.\nThe 5 mentees joining the Jenkins project come from Nigeria, Kenya, and Rwanda.\n\nThe Jenkins project has been accepted as a Contributhon mentoring organization.\nOur project idea will introduce mentees to Jenkins and plugin development as they create Pipeline examples and create Pipeline help for Jenkins Pipeline plugins.\n\nTwice weekly mentoring sessions are scheduled with the mentees and are listed in the events calendar.\nWe’ve already received the first pull request to improve the embedded documentation that generates the Steps Reference and provides contextual help in the Snippet Generator.\nWe’re looking forward to more pull requests and more improvements throughout April, 2021.\n\nWe’d like to introduce our mentees so that you recognize them and can welcome them during code review and online chat.\n\nOnyinye Ezike\n\nOnyinye is based in Lagos, Nigeria.\nShe’s a junior fullstack software developer who is very passionate about learning.\nShe uses Angular, React, Nodejs, and Spring Boot.\nShe has spent the last two years building up herself in software development and she’s hoping to become a world-class software developer.\n\nYou’ll recognize her contributions as Onyimatics on GitHub and on the Jenkins issue tracker.\n\nSharon Jebitok\n\nSharon is based in Kenya.\nShe’s a software development student at Microverse, a remote school for software developers.\nShe has been an active member of She Code Africa and she’s presently a mentee on She Code Africa’s Contributhon Program with the Jenkins project.\nShe has spent one year in the software industry since she switched her career into tech, learning to write meaningful code and collaborate with other developers/designers and the tech community.\n\nYou’ll recognize her contributions as jebitok-dev on GitHub and as jebitok16_ on the Jenkins issue tracker.\n\nEsther Ejidike\n\nEsther is a frontend developer based in Lagos, Nigeria.\nShe is one of the participants in the She Code Africa Contributhon Open Source Program working with Jenkins and will be contributing to the nodes and processes plugin.\nShe loves to convert designs to exact replicas in the form of webpages and she likes to learn new things in her free time.\n\nYou’ll recognize her contributions as Queen-esther01 on GitHub and as esther101 on the Jenkins issue tracker.\n\nCynthia Iradukunda\n\nCynthia Iradukunda is based in Kigali, Rwanda.\nShe is currently a junior Computing student at the African Leadership University (ALU) in Mauritius.\nShe wants to be a software engineer because it will help her solve real-world problems while also allowing her to use her coding skills.\nHer coding skills include but not limited to Java, JavaScript, and attention to detail.\nBy contributing to the Git plugin, she hopes to help users have a smooth process using its documentation, get involved with the project, and connect with other community members.\n\nYou’ll recognize her contributions as ciradu2204 on GitHub and as ciradu2204 on the Jenkins issue tracker.\n\nLucy Karimi\n\nLucy is based in Nairobi, Kenya.\nShe is a software developer with experience in mobile app development.\nShe is very passionate about tech and is currently involved in the SheCodeAfrica Contributhon.\n\nYou’ll recognize her contributions as luciahroyalty101 on GitHub and as luciahroyalty101 on the Jenkins issue tracker.\n\nAbout the Contributhon projects\n\nSee the previous blog post for more information about She Code Africa, the Contributhon, and the plans for Jenkins.\n\nJenkins development tasks\n\nShe Code Africa Contributhon mentoring organizations\n\nShe Code Africa Contributhon\n\nShe Code Africa\n\nConversations related to the Contributhon are happening in a Continuous Delivery Foundation slack channel.\n\nMentors\n\nWe’re very grateful to the mentors from the Jenkins project that are hosting mentoring sessions, reviewing pull requests, and encouraging the mentees.\nThanks to:\n\nMeg McRoberts\n\nMark Waite\n\nKristin Whetstone\n\nOleg Nenashev\n\nAngélique Jard\n\nWe also thank Zainab Abubakar of She Code Africa for her efforts to facilitate the Contributhon and encourage participation.","title":"Welcome the She Code Africa Contributhon participants!","tags":["events","community","documentation","outreach-programs","contributing"],"authors":[]}},{"node":{"date":"2020-12-04T00:00:00.000Z","id":"7f63955e-c485-543c-8e96-4de3b98e74a9","slug":"/blog/2020/12/04/gsod-project-report/","strippedHtml":"Jenkins is the world’s leading open-source automation server used by companies large and small around the globe to implement continuous integration and continuous delivery.\nKubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.\nKubernetes is compatible with the majority of CI/CD tools which allow developers to run tests, deploy builds in Kubernetes and update applications with no downtime.\nOne of the most popular CI/CD tools now is Jenkins thereby making Jenkins on Kubernetes a popular theme for Jenkins users.\n\nDuring the Google Season Of Docs program, I worked with the Jenkins organization on the project - Document Jenkins on Kubernetes.\nThe original proposal for this project can be found here.\n\nProject Goals\n\nAfter my proposal was accepted by the Jenkins organization, my mentors and I agreed on the expectations for the Google Season of Docs project.\nThe goal of this project was to create a new Kubernetes Volume which would describe the concepts, techniques, and choices for Kubernetes users running Jenkins thereby providing the following advantages:\n\nImprove the user experience of Jenkins on Kubernetes users by giving them a one-stop-shop for information on Jenkins on Kubernetes.\n\nMake it easy to track, update and maintain information on Jenkins on Kubernetes\n\nReference the existing community documentation for Jenkins on K8s (plugins and tools/integrations).\n\nHow to guides, tutorials and explanations of concepts and techniques in Jenkins on Kubernetes.\n\nJust-In-Time documentation which means that rather than documenting every feature comprehensively, we produce and release documentation in bits but continuously based on popular questions, feedback and area of interests gathered from the community and users.\n\nCommunity Bonding: Planning the solution\n\nFind below an outline of my activities during the community bonding phase:\n\nSetting up communication channels: meetings, mailings, chats: My mentors and I agreed on the right time and channel for communication due to time difference.\nWe agreed to meet twice weekly, on Mondays and Thursdays at 7:00 PM GMT +1 and use Jenkins documentation gitter channel for other communications.\n\nContacting Stakeholders and onboarding contributors: The project was  announced on social media and different Jenkins channels.\nI wrote a blog post to announce the project and created a project page on Jenkins.io.\n\nKnowledge transfer: I and my mentors planned knowledge sharing sessions and fixed tentative dates based on the availability of the trainers.\nMy mentors also shared useful resources to help me prepare for the project.\n\nGetting permissions: I and my mentors agreed I didn’t need any special permissions from the beginning, however, this topic was left open for discussion if the need arose later on in the project.\n\nPre-planning of the project: I refined my goals and set expectations with my mentor and also learned more about the community(Jenkins).\nI also had to ensure that the proposed documentation structure I drafted was in line with the goals of the organization so my mentors vetted it and we finalized on the proposed sections that I was supposed to work on.\n\nDocumentation Development Phase\n\nKnowledge Sharing Sessions\n\nDuring the development phase, my mentors hosted two knowledge sharing sessions:\n\nKatacoda and Helm by Marky Jackson\n\nSee the slides\n\nHelm by Torsten Walter\n\nSee the slides\n\nThese sessions gave me an in-depth understanding of concepts and tools needed for the project.\n\nJenkins on Kubernetes Documentation Skeleton\n\nAt the application phase, I drafted a structure describing the proposed Jenkins on Kubernetes section.\nMy intention was to use it as a guide during the implementation phase of the project, but when the development phase kicked off, my mentors and I thought of a better approach to creating a new Jenkins on Kubernetes section which was to add the Jenkins on Kubernetes contents to existing related sections for easier navigation and better user experience.\nAn example of this approach would be creating the Installing Jenkins on Kubernetes section under the Installing Jenkins section rather than putting it under an entirely new section.\nWith this new approach, I was assigned a task to create a skeleton with all the proposed Jenkins on Kubernetes sections on Jenkins.io and mark these sections as\nWork In Progress (WIP).\nThe Plan was to use this skeleton as a guide throughout the GSOD Project.\nThe Jenkins on Kubernetes skeleton PR can be found here.\n\nDocumenting Jenkins on Kubernetes\n\nWhile working on this project, I had to do a lot of research and test all the documented steps locally before pushing the documentation out for review.\nI also made sure to use updated terms and terminologies where necessary like Controller instead of Master and Agents instead of Slave.\n\nDuring the documentation phase, I was able to work on documenting Installing Jenkins on Kubernetes with three sections Helm, Set of Yaml files and Jenkins Operator.\nI also worked on creating a directory for Jenkins on kubernetes sample files in Jenkins.io repository, documenting Scaling Jenkins on Kubernetes and Jenkins on AWS which is still in progress.\n\nWork Done\n\nPull Requests : All the pull requests I submitted to Jenkins.io documentation can be found here.\nThis spreadsheet contains links to the published documentation on Jenkins.io.\nThe spreadsheet also highlights the initial proposed tasks and the status of each of them.\n\nIf you would like to contribute to the Jenkins on Kubernetes documentation, you can check out pending tasks here and reach out in the Jenkins documentation gitter channel.\n\nChallenges\n\nUsing a Windows computer was a bit of a challenge for me.\nTo run Jenkins.io locally, the project uses GNU/Make and Docker in order to generate the fully statically generated jenkins.io web site.\nThe key tool for converting source code into the site is the Awestruct static site generator, which is downloaded automatically as part of the build process.\nTo achieve this, I needed to have GNU/Make and Docker available on my machine.\nDocker was not a problem, but to achieve the latter, I needed to use Windows Subsystem for Linux (WSL).\nWSL had two versions WSL1 and WSL2. Using WSL2 would have been much more convenient, but my version of windows wasn’t compatible with WSL2 as it required Version 1903 or higher, with Build 18362 or higher for x64 systems.\nWith this obstacle, I had to stick to making WSL1 work but I still couldn’t get this to work, a series of issues came up which I was able to pass through with the help of my mentors until I got stuck at permission issues.\nI raised the issue with my mentor and after looking through the issue with me and trying to solve it to no avail, he suggested setting up an Ubuntu VM in Hyper-V.\nThis article helped me achieve this and that solved my problem.\n\nWhat did I learn?\n\nI learned a lot more about the Jenkins project, Kubernetes, helm package manager, Jenkins Operator and much more.\nThis project also gave me the opportunity to work with cloud providers like AWS which was totally new to me and also learn from field experts through knowledge sharing sessions and weekly meetings with my mentors and org admin.\nMy technical writing skill and communication skill have definitely become better and I owe it to this project.\n\nOverall, contributing to the Jenkins.io project is an amazing experience for me.\nI have been using Jenkins, and the fact that I was able to contribute to the organization and collaborate with the community is an honor.","title":"GSOD Project Report: Document Jenkins on Kubernetes","tags":["kubernetes","helm","documentation","gsod","gsod2020"],"authors":[]}},{"node":{"date":"2020-11-05T00:00:00.000Z","id":"048474b0-1674-5ecc-b72f-376e9c14e52a","slug":"/blog/2020/11/05/installing-jenkins-on-kubernetes/","strippedHtml":"We are super excited to announce that the Document Jenkins on Kubernetes Project recently merged its first PR into Jenkins.io.\nThis PR adds a new Kubernetes section to the existing Installing Jenkins chapter of Jenkins.io.\n\nThis new section describes two options to install/run Jenkins on Kubernetes, how to setup a minikube cluster on which to run your Jenkins deployment and finally a bonus segment that explains some Post-installation setups such as unlocking Jenkins, customizing Jenkins with plugins and creating your first administrator user.\n\nThe first installation option covered in this section is helm a package manager for Kubernetes whose package format is called a chart. The helm section covers the prerequisites for installing Jenkins on Kubernetes using Helm, installing and configuring helm, creating a persistent volume and service account, and finally, Installing Jenkins.\n\nThe second option describes how to install Jenkins using a set of yaml files.\nThis section explains how to create a Jenkins deployment file, Deploy Jenkins, grant access to jenkins service, and finally access your Jenkins dashboard after installation.\n\nSplitting the Installing Jenkins Chapter\n\nThe addition of the Kubernetes section highlighted a long-standing challenge with the Installing Jenkins chapter.\nIt was too long and contained too many topics, making it difficult and unpleasant for\nmost users to navigate.\nTo top the icing on the cake and further improve the experience on Jenkins documentation users, another PR was merged into Jenkins.io to split the Installing Jenkins chapter into smaller chapters for better separation of concerns and easy navigation. This PR also redirects bookmarks that linked to the previous locations like https://www.jenkins.io/doc/book/installing/#debianubuntu using Javascript.\n\nThe image above is a snapshot of what the Installing Jenkins chapter looked like before the PR.\nAll sections of this chapter such as docker, Kubernetes and others were lumped up on the same page making it too long with so much information thereby making it difficult to navigate or even find information on this page.\n\nThis snapshot shows what the Installing Jenkins chapter looks like after the PR.\nWith this chapter split into smaller sections, it’s neater, clearer and most importantly easier to navigate to the section of interest without having to scroll through so much information that’s not necessarily needed.\n\nTesting, Participating and Contributing\n\nThe Jenkins Community invites the general public to try out these documentation updates and give feedback to help us further improve the documentation.\nIf you have any feedback, suggestions, or would like to contribute to the Jenkins on Kubernetes project,  drop a message indicating your interest in the Jenkins documentation Gitter channel.\nYou can also find the Google season of docs office hour notes and recordings for Jenkins on Kubernetes here.\nGSOD office hours take place twice a week on Mondays and Thursdays between 6 pm GMT+1 and 7 pm GMT+1, if you would like to be part of these meetings, you can indicate interest in the Jenkins Documentation Gitter channel and we would be happy to have you.\n\nAdditional Resources\n\nInstalling Jenkins on Kubernetes PR\n\nSplitting Installing Jenkins Chapter PR\n\nDocument Jenkins on Kubernetes Project\n\nGSoD Proposal\n\nGSoD Office Hours Notes\n\nGoogle Season of Docs - Startup\n\nGoogle Season of Docs on jenkins.io\n\nDocs SIG for Google Season of Docs startup ( video)","title":"Document Jenkins on Kubernetes: Installing Jenkins on Kubernetes Documentation Release","tags":["kubernetes","helm","documentation","gsod","gsod2020"],"authors":[]}},{"node":{"date":"2020-09-25T00:00:00.000Z","id":"0691e7e4-2e97-54ec-ab3c-e0f175b8a679","slug":"/blog/2020/09/25/document-jenkins-on-kubernetes-introduction/","strippedHtml":"I’m thrilled to announce that I will be participating in Google Season of Docs (GSoD)\n2020 with the Jenkins project. I started contributing to Jenkins documentation during the technical writer\nexploration phase for Google Season of Docs 2020 and I must say, my journey so far\nhas been nothing short of amazing majorly because of the supportive community behind this project.\nI chose the Jenkins project because I understood this project from a user point of view as I had been exposed to setting up, configuring,\nand using Jenkins to automate CI/CD processes. I piqued interest in two of Jenkins project ideas,\nPlugin documentation migration and update and Document Jenkins on Kubernetes, submitted proposals for these two projects and to my utmost joy, the latter was selected.\n\nIn this article, I’m going to be explaining what my selected project is about and why this project is important to the Jenkins community and its users.\n\nIntroduction\n\nKubernetes is a platform-agnostic container orchestration tool created by Google and heavily supported\nby the open-source community as a project of the Cloud Native Computing Foundation.\nIt allows you to use container instances and manage them for scaling and fault tolerance.\nIt also handles a wide range of management activities that would otherwise require separate solutions or custom code,\nincluding request routing, container discovery, health checks, and rolling updates.\n\nKubernetes is compatible with the majority of CI/CD tools which allow developers to run tests,\ndeploy builds in Kubernetes and update applications with no downtime.\nOne of the most popular CI/CD tools now is Jenkins for the following reasons:\n\nIt is open-source and free.\n\nit is user-friendly, easy to install and does not require additional installations or components.\n\nJenkins is also quite easy to configure, modify and extend.\n\nIt deploys code and generates test reports.\n\nIt also boasts a rich plugin ecosystem. The extensive pool of plugins makes Jenkins flexible and allows building, deploying and automating across various platforms.\n\nJenkins can be configured according to the requirements for continuous integrations and continuous delivery.\n\nJenkins is available for all platforms and different operating systems, whether it is OS X, Windows or Linux.\n\nMost of the integration work is automated. Hence fewer integration issues. This saves both time and money over the lifespan of a project.\n\nThe following reasons have made Jenkins on Kubernetes a popular theme for Jenkins users, however,\nthere’s currently no central location for documentation describing Jenkins on Kubernetes,\nthereby making it difficult for Jenkins on Kubernetes users to navigate and find information.\nThis project would create a new Kubernetes Volume on Jenkins.io which would describe the concepts,\ntechniques, and choices for Kubernetes users running Jenkins.\n\nCurrent State\n\nThere are a lot of presentations and articles about running Jenkins on Kubernetes, however,\nthere’s no central location for describing Jenkins on Kubernetes. This makes it difficult for:\n\nJenkins on Kubernetes users to navigate and find information\n\nTrack, update and maintain information on Jenkins on Kubernetes\n\nProject Improvements\n\nTo solve the existing issue with Jenkins on Kubernetes documentation,\na new Kubernetes volume will be created on Jenkins.io.\nThis Volume is going to aggregate user guides, information on cloud providers and demos on Jenkins on Kubernetes.\nYou can find the proposed contents for the new volume here.\nFeel free to comment on any suggestions you might have in the proposed content doc.\n\nThis project will also provide the following advantages:\n\nImprove the user experience of Jenkins on Kubernetes users by giving them a one-stop-shop for information on Jenkins on Kubernetes.\n\nMake it easy to track, update and maintain information on Jenkins on Kubernetes using the Solutions page\n\nReference the existing community documentation for Jenkins on K8s (plugins and tools/integrations).\n\nHow to guides, tutorials and explanations of concepts and techniques in Jenkins on Kubernetes.\n\nJust-In-Time documentation which means that rather than documenting every feature comprehensively,\nwe will produce and release documentation in bits but continuously based on popular questions,\nfeedback and area of interests gathered from the community and users.\n\nProject Timeline\n\nFind below a summary of the project timeline.\n\nCommunity bonding ( August 17 - September 13 )\n\nSet up a communication channel and time (due to time difference).\n\nRefine my goals and set expectations on both sides.\n\nLearn more about the community and Jenkins.\n\nGather and thoroughly study existing resources that will be useful and helpful to the project.\n\nPre-planning of the project\n\nContacting Stakeholders and onboarding contributors\n\nDocumentation Period\n\nThis period is going to be focused on creating contents which include user guides,\ntutorials, demos, etc. for Jenkins on Kubernetes.\nSome of the topics to be covered include Installing Jenkins on Kubernetes,\nAdministering Jenkins on Kubernetes, Cloud providers and much more.\n\nDocumentation Timeline\n\n1st Month (September - October)\n\nSome basic prerequisites for installing jenkins on kubernetes include docker, a kubernetes cluster, and optionally Helm or the Jenkins Operator for Kubernetes.\n\nHelm is a package manager which automates the process of installing, configuring, upgrading, and removing complex Kubernetes application. A Helm chart defines several Kubernetes resources as a set. Helm can make deployments easier and repeatable because all resources for an application are deployed by running one command.\n\nHelm has two elements, a client (helm) and a server (Tiller). The server element runs inside a Kubernetes cluster and manages the installation of charts. With Helm, configuration settings are kept in values.yaml file separate from the manifest formats. The configuration values can be changed according to application need without touching the rest of the manifest.\n\nOn the other hand, the Jenkins operator is a Kubernetes native operator which fully manages Jenkins on Kubernetes. It is easy to install with just a few manifests and allows users to configure and manage Jenkins on Kubernetes. To run jenkins-operator, you need to have a running Kubernetes cluster and kubectl installed.\n\nThe Jenkins Operator provides out of the box:\n\nIntegration with Kubernetes — preconfigured kubernetes-plugin for provisioning dynamic Jenkins Slaves as Pods\n\nPipelines as Code — declarative way to version your pipelines in VCS\n\nExtensibility via Groovy scripts or Configuration as Code plugin-customize your Jenkins, configure OAuth authorization and more\n\nSecurity and Hardening — an initial security hardening of Jenkins instance via Groovy scripts to prevent security vulnerabilities\n\nIn the first month, the focus will be on documenting an introductory section.\nThis section will include but is not limited to Setting up Kubernetes cluster, Installing Jenkins on Kubernetes, exploring the various approaches by which this can be achieved such as using helm package manager or the Jenkins Operator as explained above and Administering Jenkins on Kubernetes.\n\n2nd Month (October - November)\n\nIn the second month, the focus will be on documenting how to setup up CI/CD pipelines using Jenkins and Kubernetes on different cloud providers.\nSome of the cloud providers we will be looking at include but are not limited to:\n\nAmazon Web Service (AWS)\n\nAzure Kubernetes Service\n\nGoogle Cloud\n\n3rd Month (November - December)\n\nIn the final month, the focus will be on creating demos and tutorials,\nsubmitting project report, evaluation of mentors and finally,\npublishing a report of my experience as a participant in Season of Docs.\n\nConclusion\n\nJenkins community is actively working towards improving its documentation to create a better\nexperience for Jenkins users and invites technical writers to join the community and contribute to the Jenkins on Kubernetes project.\n\nTo contribute to the Jenkins on Kubernetes project, simply join the Jenkins documentation Gitter channel and drop a message,\nyou can also find the Google season of docs office hour notes and recordings for Jenkins on Kubernetes here.\nGSOD office hours take place twice a week on Mondays and Thursdays between 6pm GMT+1 and 7pm GMT+1,\nif you would like to be part of these meetings, you can indicate interest in the Jenkins Documentation\nGitter channel and we would be happy to have you.\n\nIf you are also a newcomer and would like to contribute to Jenkins, documentation is a great place to contribute.\nA lot of small patches can be done from the GitHub web interface even without cloning repositories locally.\nYou can find some good first issues to get started with here.\n\nFind more information on contributing to Jenkins documentation here.\nIf you have further questions about the Jenkins on Kubernetes project or contributing to Jenkins,\nyou can reach out on the Jenkins documentation Gitter channel.\n\nAdditional Resources\n\nGSoD Proposal\n\nGSoD Office Hours Notes\n\nGoogle Season of Docs - Startup\n\nGoogle Season of Docs on jenkins.io\n\nDocs SIG for Google Season of Docs startup ( video)","title":"Documenting Jenkins on Kubernetes Introduction","tags":["kubernetes","documentation","gsod","gsod2020"],"authors":[]}},{"node":{"date":"2020-06-18T00:00:00.000Z","id":"e3d886d7-5e78-54d1-8574-c544fa957395","slug":"/blog/2020/06/18/terminology-update/","strippedHtml":"In 2016, the Jenkins community decided to start removing offensive terminology within the project.\nThe \"slave\" term was deprecated in Jenkins 2.0 and replaced by the \"agent\" term.\nOther terminology was slated for review after the cleanup of the \"slave\" term which was considered as most problematic one.\nIn 2017, the project began tracking areas for correction.\nWork has been done on renaming the SSH build agent plugin as well as gradual removal of offensive naming in services and repositories.\nThis year, a group of core contributors continued addressing this critical work.\n\nThe Advocacy & Outreach SIG met to discuss and prioritize the continued work. The governance board has also met and there will be more information coming regarding removal of offensive terminology.\nLast week we took another step towards removing offensive terminology within the project by updating previous blog posts and removing offensive terminology in old blogs, cleaning up some references in Jenkins built-in documetation and localization, etc.\nThe meeting minutes are available here and a recording of the meeting here\nThere is more work to do. The core team is working to address terms such as \"Master\", \"whitelist\" and \"blacklist\" as well addressing git branching terminology.\n\nWe could use your help\nWe continue to do this much needed work and would like to remind everyone that the Jenkins project is governed by the Code of Conduct.\n\nSincerely,\nMarky Jackson","title":"On Jenkins Terminology Updates","tags":["community","opensource","governance","documentation"],"authors":[]}},{"node":{"date":"2020-06-08T00:00:00.000Z","id":"347b5134-2053-52fa-9696-e62715a7ff78","slug":"/blog/2020/06/08/hackfest-docs-results/","strippedHtml":"Documentation is not glamorous, but it is goodness.\n\n— Thomas Otter\n\nJenkins technical documentation is an important part of our project as it is key to using Jenkins well.\nGood documentation guides users and encourages good implementation choices.\nIt is a crucial part of the user experience.\n\nIn the recent Jenkins UI/UX hackfest, documentation was a specific track to improve the Jenkins user experience.\nWe received many improvements from experienced Jenkins contributors and newcomers alike.\nContributors from all around the world submitted pull requests for documentation on installing, managing, administering, and operating Jenkins.\n\nDocumentation migration from Wiki\n\nThe Jenkins Wiki pages have collected 15 years of experience and wisdom for Jenkins users.\nHowever, that experience and wisdom is intermixed with inaccurate, incomplete, and outdated information.\n\nThe Jenkins Wiki migration project identified the 50 most accessed pages on the Jenkins wiki and created GitHub issues to track the migration of those pages to www.jenkins.io.\nThis was our first large scale experiment using GitHub issues for documentation.\nThe results have been overwhelmingly positive.\nHackfest contributors added new sections to many documentation chapters, including:\n\nUsing Jenkins\n\nPipeline\n\nManaging Jenkins\n\nSystem Administration\n\nThe Hackfest closed 19 of the wiki migration issues.\nWork is in progress on an additional 25 wiki migration issues.\nWe’ve made great progress and look forward to even better results in the future.\nNew contributors used the \"good first issue\" label very effectively.\nWe started the Hackfest with most of the 25 \"good first issues\" unassigned and completed the Hackfest with 14 closed and 10 others in progress.\nWe’ll provide more \"good first issues\" as we use the Jenkins Wiki migration to welcome new documentation contributors.\n\nMigrating plugin documentation\n\nPlugin documentation is also in transition.\nSince November 2019, plugins have been moving their documentation into the GitHub repository that hosts the plugin source code.\nThis\"documentation as code\" approach allows plugin maintainers to include documentation improvements in the same pull requests that implement new capabilities.\nIt assures that documentation changes are reviewed by the same maintainers who review and approve new capabilities.\n\nHackfest participants submitted pull requests to migrate plugin documentation to GitHub.\n10 plugin pull requests are in progress from the Hackfest.\n5 plugin pull requests from the Hackfest have been already merged and are awaiting the release of the plugin.\n\nChuck Norris uses documentation as code\n\nIn the spirit of fun and adventure, Oleg Nenashev migrated the \"Chuck Norris plugin\" to GitHub documentation as code in a live Hackfest presentation May 26, 2020.\nLinks to the recording, the plugin migration guide, and the export tool are available from\"Migrating plugins to documentation-as-code\".\n\nDocumentation updates\n\nJenkins works with other technologies to solve automation challenges in many different environments.\nWe describe those environments in our\"Solution Pages\".\nAs part of the Hackfest, we’ve started a series of improvements to the solution pages.\n\nThe Docker solutions page now includes updated videos and a better page layout for easier reading and better navigation.\nOther solution pages will receive similar improvements in the future.\n\nSystem properties\n\nThe global configuration of Jenkins can be modified at startup by defining Java properties.\nSystem properties can change system defaults and can provide compatibility \"escape hatches\" when a new default configuration might be incompatible with existing installations.\n\nDaniel Beck has improved the navigation and user experience of the system properties page as part of the Hackfest.\nIt is now much easier to read and to reference, with embeddable links available with a mouse-over to the right of every property and labels that categorize and classify each property.\n\nPlugin site improvements\n\nDuring the Hackfest, Gavin Mogan has continued his efforts to improve the Jenkins Plugins Site so that users can easily access plugin changelogs and reported issues.\nOnce this pull request is merged, it will greatly improve the experience of those Jenkins users who want to update plugins and look for documentation about what has changed in them and what are the possible issues they might experience.\n\nExample of the incoming UI for the Jira plugin:\n\nWhat’s next?\n\nThere is still much to do in Jenkins documentation and we need your help to do it.\nThere are many ways to participate in the Jenkins project, including documentation.\nSee the contributing guidelines for detailed instructions.\nJoin the documentation chat for personalized help and encouragement.\n\nThe Jenkins project has been also accepted to Google Season of Docs this year.\nThis open-source mentorship program brings together open source and technical writers communities for the benefit of both.\nWe are looking for technical writers who are interested to contribute to the project in September-December 2020.\nIt is a great opportunity to study Documentation-as-code tools and to learn more about contributing to open-source projects.\nYou can find Jenkins project ideas and more information here.","title":"Jenkins User Experience Hackfest Documentation Results","tags":["ux","documentation","community","outreach-programs","jenkins-is-the-way"],"authors":[]}},{"node":{"date":"2020-05-12T00:00:00.000Z","id":"96c5da12-e5e0-51af-86a5-d619e4901dae","slug":"/blog/2020/05/12/uiux-hackfest-announcement/","strippedHtml":"This event is over, thanks a lot to all contributors!\nPlease the event page for results.\n\nOn behalf of the Jenkins User Experience, Documentation and Advocacy and Outreach special interest groups,\nwe are happy to announce the online UI/UX hackfest on May 25-29!\nEveryone is welcome to participate, regardless of their Jenkins development experience.\n\nThe goal is to get together and work on improving Jenkins user experience,\nincluding but not limited to user interface and user documentation.\nWe also invite you to share experiences about Jenkins and to participate in UX testing.\nThe event follows the Jenkins is the Way theme and the\nmost active contributors will get special edition swag and prizes!\n\nEvent plan\n\nThis hackfest is NOT a hackathon.\nWe do not expect participants to dedicate all their time during the event timeframe, but hop-in/hop-out as their time allows.\nEverybody can spend as much time as they are willing to dedicate.\nSpending a few days or just a few hours is fine, any contributions matter regardless of their size.\nJenkins development experience is not required,\nwe have newcomer-friendly stories for those who want to start contributing to the project.\nWe will also have a 24/7 jenkinsci/hackfest Gitter chat for Q&A and coordination between contributors.\n\nThere will be 3 main tracks :\n\nUser Interface -\nImprove look&feel and accessibility for Jenkins users,\nwork on new read-only interface for instances managed with configuration as code,\ncreate and update Jenkins themes,\nand many other topics.\nThis track is coordinated by the UX SIG.\n\nUser Documentation -\nImprove and create new user documentation, tutorials and solution pages.\nAlso, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\nThis track is coordinated by the Documentation SIG.\n\nSpread the word -\nWrite user stories for Jenkins Is The Way site and the Jenkins blog,\npost about your Jenkins user experience and new features,\nrecord overview and HOWTO videos, etc.\nThis track is coordinated by the Advocacy and Outreach SIG.\n\nWe are working on publishing project ideas and issues for the listed tracks.\nThe current list can be found on the UI / UX hackfest event page,\nthis list will be finalized by the beginning of the hackfest.\nYou are welcome to propose your own projects within the User Experience theme.\n\nDuring the event, we will organize online meetups and ad-hoc training sessions in different timezones.\nAll these sessions will be recorded and shared on our YouTube channel.\nThere are no mandatory sessions you must attend, you are welcome to join ones remotely or watch the recordings.\nAfter the event we will invite participants to demo their projects at online meetings or recorded sessions.\n\nRegistration\n\nThis event is over, thanks a lot to all contributors!\n\nP.S: Note that the registration form has a question top 3 things we could change in Jenkins to improve your user experience.\nWe would appreciate your response there!\n\nContacts\n\nPlease use the following contacts to contact organizers:\n\nGitter chat\n\nMailing list\n\nResources\n\nEvent Page\n\nRegistration form.\n\nProject ideas (work-in-progress).\nThe full list will be published by the beginning of the event.\n\nFrequently Asked Questions\n\nContributing to Jenkins\n\nCode of Conduct\n\nSwag and Prizes\n\nThanks to our sponsors ( CloudBees, Inc. and Continuous Delivery Foundation),\nwe are happy to offer swag to active contributors!\n\n50 most-active contributors will get an exclusive \"Jenkins Is The Way\" T-shirt and stickers\n\nActive contributors will get Jenkins stickers and socks\n\nWe are working on special prizes for top contributors, to be announced later\n\nAcknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\nCloudBees, Inc. and\nContinuous Delivery Foundation (CDF).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our online meetup platform which we will be using for the event.\n\n.","title":"Join us for online UI/UX hackfest on May 25-29!","tags":["announcement","event","ui","ux","documentation","outreach-programs","advocacy-and-outreach","jenkins-is-the-way","community"],"authors":[]}},{"node":{"date":"2019-10-21T00:00:00.000Z","id":"b2fe0751-2a13-5720-ba79-3c07e09417b5","slug":"/blog/2019/10/21/plugin-docs-on-github/","strippedHtml":"In September 2019 we announced\nsupport of GitHub as a source of documentation for the Jenkins Plugin Site.\nThanks to Zbynek Konecny and Olivier Vernin and other contributors,\nnow it is possible to store plugin documentation right inside plugin repositories instead of Jenkins Wiki which was historically difficult to maintain for plugin maintainers and for the Jenkins infrastructure team.\n\nThis blogpost may be interesting to plugin maintainers and to those who want to contribute to the Jenkins documentation.\nI will describe how to migrate plugin documentation to GitHub and to get pages like this one:\n\nWhy?\n\nBy using plugin GitHub repositories for documentation,\nplugin maintainers can follow the Documentation-as-code approach and make documentation changes a part of the pull requests so that documentation follow-ups do not get forgotten.\nIt also gives an opportunity to review the documentation changes and to add documentation contributor recognition, especially if the story is combined with Release Drafter.\n\nUnfortunately, before September 2019 usage of GitHub documentation was causing some issues.\nFirst of all, many plugin maintainers have already moved their documentation to GitHub, and it caused fragmentation of the documentation (Wiki, GitHub, jenkins.io).\nTo address it, plugin maintainers still had to maintain stub Wiki pages with redirects,\nand users had to spend some time to find out where the real documentation is located.\nBy supporting GitHub as a documentation source, we allow maintainers to phase out the plugin Wiki pages while improving the user experience.\n\nAnd there are even more pressing reasons to do the migration now…​\nIf you are subscribed to the developer mailing list,\nyou may have also seen an announcement by R. Tyler Croy about Jenkins Wiki stability issues\nand making it read-only as a temporary measure to stabilize the instance\n( mailing list thread).\nAlthough the functionality has been partially restored afterwards,\nthere is a consensus in the Infrastructure team that we should gradually move to alternate solutions.\n\nExamples\n\nSince the announcement in September, more than 50 plugins were moved from Wiki to GitHub.\nFew examples:\n\nConfiguration as Code Plugin\n\nMailer Plugin\n\nGradle Plugin\n\nRole Strategy Plugin\n\nHow to enable GitHub documentation for your plugin?\n\nConvert documentation from Wiki to GitHub Asciidoc or Markdown format if you have not done it yet.\n\nIt can be easily done in a semi-automatic way using Jenkins Wiki Exporter\n\nSee the guidelines\nhere.\n\nChange the field in pom.xml so that it points to GitHub\n( guide).\n Examples of valid links:\n\nhttps://github.com/jenkinsci/mailer-plugin - plugin site will use GitHub REST API to extract README\n\nhttps://github.com/jenkinsci/ssh-credentials-plugin/blob/master/doc/README.md - extraction of a plugin page from a custom location\n\nOptional: Add badges to the page to improve look&feel and to provide quick links for users.\nThere are standard badges for changelogs, chats, plugin site, and installation numbers.\n\nExample for Markdown\n\nExample for Asciidoc\n\nRelease the new plugin version\n\nWait a few hours till the change propagates.\nAfter that, the Jenkins Plugin Site will show the new documentation from GitHub.\n\nWhat’s next?\n\nThe story is tracked as jira:WEBSITE-406[] which is a part of the wider subproject for using GitHub as a source of data for the Jenkins plugin site and update managers (jira:WEBSITE-637[]).\nLater steps include support showing changelogs from GitHub releases, pulling plugin tags from GitHub, showing plugin logos, and using Repository Permission Updater as a source of the maintainer information.\n\nHow to contribute?\n\nOctober is a great time to contribute!\nPlugin documentation is one of the featured projects for Hacktoberfest,\nand we will welcome all contributions to the documentation and to the codebase.\n\nContributing to Documentation\n\nWe are looking for contributors who are interested to improve plugin documentation and to help us with migration from Wiki to GitHub.\nFor dozens of plugins the documentation is already in GitHub,\nand you are welcome to submit pull requests against any repository.\n\nMigrating documentation:\n\nMigrating plugin documentation from Wiki to GitHub\n\nMoving documentation from Jenkins Wiki to jenkins.io\n\njira:JENKINS-59467[Template issue for plugin docs migration]\n\nNewbie-friendly documentation tasks\n\nIf you have any questions about contributing to the documentation,\nplease see this page or reach out to us in the Docs SIG Gitter chat.\n\nCode contributions\n\nWould you like to write some code in Java or JavaScript?\nOr would you like to work on CSS styles and improve Jenkins design?\nIn such case you are welcome to contribute to the Jenkins Plugin Site.\nIt is our own plugin marketplace implementation, and we invite contributions to this area.\nThe plugin site is really easy to develop.\n\njira:WEBSITE-637[] - EPIC for Plugin site and GitHub integrations\n\njenkins-infra/plugin-site - Frontend (JavaScript, React, XSS, YARN)\n\njenkins-infra/plugin-site-api - Plugin site API and Docker packaging (Java, Maven, Docker)\n\nUseful links\n\nPlugin Documentation\n\nJenkins Plugin Site\n\nJenkins Wiki Exporter tool","title":"Plugin Documentation-as-Code: Moving docs to GitHub","tags":["hacktoberfest","developer","documentation","wiki","contributors"],"authors":[]}}]}},"pageContext":{"tag":"documentation","limit":8,"skip":0,"numPages":2,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}