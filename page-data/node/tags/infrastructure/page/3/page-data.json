{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/infrastructure/page/3",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2011-12-28T00:00:00.000Z","id":"1c024cc8-c856-5493-a407-dae59c0cc292","slug":"/blog/2011/12/28/adding-diagrams-to-wiki/","strippedHtml":"Thanks to the kindness from Gliffy, we can now add diagrams to Wiki pages, in a way that enables collaborative edits.\n\nSee more info, including a sample diagram in a Wiki page.","title":"Adding diagrams to Wiki","tags":["infrastructure","tutorial"],"authors":[]}},{"node":{"date":"2011-12-20T00:00:00.000Z","id":"ddf872d6-16ad-50ce-a070-97365575b03b","slug":"/blog/2011/12/20/thanks-for-the-support-pagerduty/","strippedHtml":"Over drinks this evening Kohsuke pointed out that he never saw a blog post about PagerDuty. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/images/pagerduty_logo.png\n\nIf you’ve never worked in a sysadmin role or in any other position that would require an on-call rotation, then you may have never seen PagerDuty.\n\nIn essence the service provides a great series of integration points with Pingdom or Nagios for handling monitoring. As an infrastructure guy (part time), I can honestly say it’s a great tool and I’m grateful to PagerDuty for supporting Jenkins with our own account to help manage project infrastructure.\n\nA couple weekends ago I finished setting up Nagios (read-only username/password: jenkins / jenkins) for critical project services which by itself is a good step forward. Combine that with PagerDuty’s Nagios integration and a solid on-call rotation, and I’m more confident than I’ve ever been that Kohsuke or myself could actually take a vacation!\n\nCheck them out, and be sure to thank them on Twitter at @PagerDuty for supporting Jenkins!","title":"Thanks for the support PagerDuty!","tags":["infrastructure","meta"],"authors":[]}},{"node":{"date":"2011-07-18T00:00:00.000Z","id":"68b30e7a-bc62-5d0d-b11b-63127be962fc","slug":"/blog/2011/07/18/mirror-mirror-on-the-wall/","strippedHtml":"Let me preface this entire post with this: I love\nContegix .\n\nWhile working on some infrastructure tasks I had long-since put-off for the\nJenkins project, I noticed something this weekend that scared the hell out of\nme.\n\nAt some undetermined time, our MirrorBrain\ninstallation stopped redirecting to our mirror network. Absolutely zero\ndownloads were being redirected, meaning that cucumber, the 1U machine\ngraciously colocated by Contegix had served up\nfar more bits than I ever wanted it to.\n\nAs such, I would like to publicly apologize to Contegix on behalf of the\nJenkins project. Their support for the project has been tremendous but\nthis glitch caused such an incredible amount of traffic to be pushed through\ntheir network that I feel exceptionally bad about it (turns out, Jenkins is pretty popular!)\n\nNow, for the good news. In diagnosing and debugging this issue (in a\ncaffeine-fueled frenzy I might add) I managed to do a couple things:\n\nI corrected the redirection relatively easily\n\nI fixed our long-standing geo-location issue, finally enabling redirection to our european\nand asian mirrors!\n\nWithin 30 minutes of correcting the error, I was able to add two mirrors in\nGermany, re-enable one from Taiwan and add a new mirror in Japan!\n\nI’m hoping to add even more mirrors in even more regions as volunteers with\nbandwidth step-forward, if you’re interested in hosting a mirror you can drop\nme a line at tyler@linux.com.","title":"Mirror, mirror on the wall","tags":["infrastructure","news"],"authors":[]}},{"node":{"date":"2011-06-09T00:00:00.000Z","id":"0c33dc09-9f84-5a65-b80d-4f055dd6f65b","slug":"/blog/2011/06/09/a-big-thanks-to-rackspace/","strippedHtml":"This post is long over-due and I really apologize for that.\n\nSome months ago we put out the call for \"more agent machines!\" through the\nmailing lists, sky-writers and twitter. We had a serious problem, for a\ncontinuous integration project, a large number of our plugins and\ndependencies weren’t being built in a continuous and automated fashion!\n\nWe had some builds on a couple of flakey machines on home connections\ncontributed by various individuals, until Rackspace stepped up in a big\nway and donated an infrastructure server for the project to use. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/rackspace.jpg\n\nFor months now, just about all plugins and core have been built and tested on spinach,\nthe always-on machine in the Rackspace Cloud. Dutifully chugging away building\ncore, plugin after plugin and occasionally getting flooded with work from Frederic\nCamblor’s plugin compatibility tester!\n\nIn hindsight, having a powerful infrastructure machine for nothing other than\nbuilds has helped us build great software faster; I can’t imagine how difficult\nthings might be otherwise.\n\nI’ve personally had a lot of interaction with Rackspace engineers through the OpenStack\nproject and have a number of friends who operate businesses on\nRackspace/Rackspace Cloud hybrid infrastructures.\n\nThe folks at Rackspace are\ntop notch and I can’t thank them enough for contributing to the Jenkins\nproject.","title":"A big thanks to Rackspace","tags":["infrastructure","meta"],"authors":[]}},{"node":{"date":"2011-02-04T00:00:00.000Z","id":"8dc709a8-2fd4-557e-b0fb-05621d884c64","slug":"/blog/2011/02/04/the-first-24-hours-in-downloads/","strippedHtml":"As I had mentioned in a previous post back when Jenkins was called something else, who can remember what anymore, I spent a lot of time working on a mirroring network. With our departure from any and all Oracle infrastructure, this mirroring network has now become our sole distribution mechanism for pushing out all releases and all plugins, in short, lots and lots of bits.\n\nJust how much data are we now distributing through the Jenkins mirror network?\n\nOver 52GB in 24 hours\n\nHere’s the following in terms of a loose breakdown of the number of files served over the past day:\n\n788.war\n\n447.deb\n\n290.rpm\n\n1759.hpi (plugins)\n\nWe’re off to a great start! I’d like to extend my thanks again to the OSUOSL and XMission for their help getting the Jenkins mirrors functional as soon as possible","title":"The first 24 hours in downloads","tags":["infrastructure","just for fun"],"authors":[]}},{"node":{"date":"2010-11-23T00:00:00.000Z","id":"c5e8fd3b-289a-5f11-885d-d34c2ca04dc7","slug":"/blog/2010/11/23/java-net-migration-status-update/","strippedHtml":"+\nMonday morning I came into work and discovered that I cannot commit to the Hudson Subversion repository. Initially I wasn't worried — I thought it was just another java.net outage that will resolve itself in a few hours — but a little research a bit later revealed that Hudson was locked down and being https://weblogs.java.net/blog/communitymanager/archive/2010/11/03/javanet-begins-migration-collabnet-kenai-infrastructure[migrated to new java.net infrastructure]. +\n +\n\n+\nI and the whole community was quite surprised by this, as we are supposed to be \"notified as soon as we assign a date for [our] projects to move.\" But by the time the developer community noticed, the project was already locked down, repository is read-only, and mailing lists can stop functioning any time. My immediate action was to contact the folks who are doing migration to get Hudson out of this cycle of the migration, but I was told that the ship has sailed and it was too late. +\n +\n\n+\nEven worse, there's no ETA — it'll definitely take a week, but since this is a Thanksgiving weekend, it can take longer, Oracle said. +\n +\n\n+\nI find this situation plain unacceptable, and https://java.net/projects/jersey/lists/dev/archive/2010-11/message/3[e-mails from the earlier migration effort] made me doubt if the new infrastructure is any better. I also had a pleasure of working closely with CollabNet folks over the past years and I was also involved in some earlier conversation and experiments about the new java.net infrastructure, and when it comes to performance and monitoring, CollabNet folks really knew what they are doing. So I had multiple reasons to worry if the new infrastructure can handle the load of java.net, which the old CollabNet-hosted one couldn't handle. +\n +\n\n+\nBut fortunately, since the general java.net migration has been announced, we've https://hudson.361315.n4.nabble.com/Mailing-list-change-proposal-td3047548.html[discussed] the migration of some of the project infrastructure. So we've accelerated the plan and implemented it, so as not to lose the critical project infrastructure services. +\n +\n +\n\nMailing Lists\n\n+\n\n+\nHudson mailing lists are moved to Google Groups. See https://hudson-labs.org/content/mailing-lists[more details here] and https://wiki.jenkins.io/display/JENKINS/Mailing%20List[here]. The new mailing lists provide a real search capability, decent UI for archives, and it makes it easier for people with multiple e-mail addresses to post from multiple addresses and receive just one copy. The stability of the service is also much better. +\n +\n\nSource code\n\n+\n\n+\nHudson core source code has been long synced to GitHub. We've been getting several contributions through that already, and people have been asking https://hudson.361315.n4.nabble.com/On-the-future-of-Hudson-hosting-and-infrastructure-td393278i20.html[for] https://hudson.361315.n4.nabble.com/Git-repository-for-Hudson-td394409.html#a394412[Git] https://hudson.361315.n4.nabble.com/hudson-plugins-git-repository-td1477941.html[migration] https://hudson.361315.n4.nabble.com/Hudson-on-github-td2252960.html[for] https://hudson.361315.n4.nabble.com/Expose-the-Hudson-SVN-as-a-GIT-repository-td391333.html[long] https://hudson.361315.n4.nabble.com/version-control-for-hudson-source-bidirectional-git-lt-gt-svn-td978706.html[time] anyway. So going forward I'll be committing to and producing releases from https://github.com/hudson/hudson[the Hudson repository on GitHub] at `+https://kohsuke@github.com/hudson/hudson.git+`. +\n +\n\n+\nThe new Git-based repository would be far snappier to work with, and it'll make it easier for people to maintain private changes and contribute changes back. There's also a work in progress to set up Gerrit to streamline the patch review process to the core. So I think this further reduces the barrier of entry to the Hudson project and accelerate the progress. +\n +\n\n+\nThe migration of Hudson plugin repositories still needs to be discussed, so stay tuned for the updates in https://groups.google.com/group/hudson-dev[the dev list] today or tomorrow. I've developed a bulk import program whose output can be seen https://github.com/HudsonLabs[here], so I'm going to propose this as the migration strategy. +\n +\n +\n\nConclusions\n\n+\n\n+\nMy apologies that these changes had to happen quickly — I'm just as frustrated as you are, but given the circumstances, I think this is the best course of action. Hopefully everything will be in place within a few days. And in the mean time, thanks for your patience. +","title":"Java.net migration status update","tags":["infrastructure","core"],"authors":[]}},{"node":{"date":"2010-08-02T00:00:00.000Z","id":"39857c82-9e13-5cee-bbe3-208d7d4e51d5","slug":"/blog/2010/08/02/dogfooding-hudson-were-looking-for-slaves/","strippedHtml":"As you may have noticed, thanks to the link on this and the other pages here at hudson-labs.org, the Hudson development community has recently introduced ci.hudson-labs.org, the official Hudson-on-Hudson instance. We’re currently building Hudson proper, the Hudson core RC branch, individual builds for the various Hudson plugins and Gerrit, as well as various libraries and infrastructure jobs Hudson depends on.\n\nWe’re currently running all those builds on a dedicated Linux agent, generously provided to the Hudson project by Digg, my employer. This has been great - except for the day when I’d just added all the individual plugin jobs for the first time, we haven’t had real problems with capacity. But we are limited in the environments we can run our tests on as a result of only having a Linux agent. We’re currently playing with a temporary Windows agent, but we’d really like to have at least one more permanent Windows agent, and a Mac agent as well, so that we can run Hudson’s core integration tests on those platforms as well. Since this is Hudson we’re talking about, we don’t need the agent to be in any given physical location - we just need it to be running the agent process and talking to our server. If you’re interested in helping us out with this, please contact me at andrew dot bayer at gmail dot com. Thanks!","title":"Dogfooding Hudson - We're Looking for Agents!","tags":["infrastructure","core","meta","jenkinsci"],"authors":[]}},{"node":{"date":"2010-04-12T00:00:00.000Z","id":"2e9993c3-3c9d-5d86-9f68-2a23c7450ae0","slug":"/blog/2010/04/12/pre-tested-commits-with-git/","strippedHtml":"At the first Bay Area Hackathon in mid-2009, the topic du jour was \" pre-tested commits.\" As potential implementations of the concept were discussed over burgers from Brickhouse in downtown San Francisco, we realized as a group a few things: first, those burgers were delicious, but more importantly: pre-testing commits is very-SCM dependent and involves a lot of moving parts. One of the positive changes that came out shortly after the meet up was the support for \"Concurrent Builds\", allowing a job to be executed concurrently on different agents, a precursor to pre-tested commit support. Fervor for the pre-tested commit feature lowered as time went on, the feature being too dependent on the SCM itself was generally accepted as the reasoning behind the feature languishing.\n\nChances are the feature is in fact too large for Hudson to support alone. It requires Hudson, the SCM and likely a third tool to work in concert together to perform such a feat.\n\nWith Git, and the phenomenal code review tool Gerrit, and the Gerrit plugin by intrepid plugin developer, Jyrki Puttonen, pre-tested commits with Hudson, Git and Gerrit are possible.\nFor Git users more familiar with the distributed Git workflows, working with Gerrit should seem familiar. Gerrit has JGit, a Java implementation of Git embedded within it, along with an sshd stack, meaning Gerrit can masquerade as a \"regular\" Git remote repository. Developers can push and pull to the repository just as they can with any other Git repository (provided they have permissions of course). I won’t delve too much into using Gerrit specifically here, but the pre-tested workflow with Gerrit and Hudson would look something like this:\n\nDev creates a topic branch to work on a change\n\nCode is written (and hopefully tested) and committed locally\n\nDev pushes commit(s) to Gerrit\n\nHudson job (set to Poll SCM) picks up the patch, runs the job and marks it as \"+1 Verified\" or \"-1 Fails\"\n\nIf the job fails or is unstable, the change should be reworked or corrected (typically with git-rebase(1))\n\nIf Hudson says the change is good to go, it can be cherry-picked or pulled directly from Gerrit.\n\nFor example: image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/gerrit_patch.png\n\nTo learn more about Gerrit, check out the project page on Google Code; information on the Gerrit plugin can be found on the wiki.","title":"Pre-tested commits with Git","tags":["infrastructure","feedback","jobs","tutorial"],"authors":[]}}]}},"pageContext":{"tag":"infrastructure","limit":8,"skip":16,"numPages":4,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}