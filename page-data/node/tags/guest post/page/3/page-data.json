{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/guest post/page/3",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2010-07-22T00:00:00.000Z","id":"08e48751-f7b4-532a-b55b-cdc118c5acc2","slug":"/blog/2010/07/22/continuous-deployment-on-the-new-digg/","strippedHtml":"In my capacity as Build Guy at Digg, I’ve written up a blog post on our new continuous deployment/code review/pre-tested commit workflow. We’re using a combination of Hudson, Git and Gerrit, Selenium and more to make sure that every change going to Digg’s new site has been thoroughly tested.\n\nRead the whole post, with all the juicy details over on Digg’s Technology Blog!","title":"Continuous Deployment on the new Digg","tags":["general","core","guest post","links","plugins","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"<div class=\"paragraph\">\n<p>Andrew was a core committer to Hudson and the author of numerous plugins.</p>\n</div>","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"/blog/author/abayer","twitter":"abayer"}]}},{"node":{"date":"2010-07-08T00:00:00.000Z","id":"2261a8e4-1548-5ee0-99d2-1450dc19da3f","slug":"/blog/2010/07/08/a-python-love-story-virtualenv-and-hudson/","strippedHtml":"Over the past year Hudson has grown tremendously, both within the Java community and outside of it. Partially thanks to ( Titus Brown)'s PyCon 2010 Atlanta coverage of continuous integration for Python (which we’ve covered before), Hudson has made great strides within the Python community as well. In my experience, the majority of Python developers are not using Hudson to build anything, unless they have C extensions, but rather to test their packages, which presents its own set of specific requirements for jobs. Jobs for testing Python code need to be able to reliaby reproduce an environment with the same set of dependencies from one run to the next in order to provide consistent testing. Unlike their Java counterparts, Python developers cannot rely on a powerful system like Maven2 for enumerating build/test targets or defining their project’s dependencies in their jobs; fortunately, w e can have something close: virtualenv and pip. Virtualenv does exactly what you might expect it to, it creates a \"virtual environment\" with custom site-packages directory, and modified python executable. Using virtualenv you can create a staged environment to use for running unit and integration tests. Adding pip alongside that and you have a fantastic Python package manager/installer to use with the virtual environment. Below, I’ve outlined the steps required to use virtualenv and pip to automatically manage a custom environment for your Python jobs.\n\nThe Recipe\n\nFor this recipe to work, you should make sure that your agent machines all have virtualenv and pip installed and accessible from your agent agent’s $PATH. For Mac OS X users, sudo easy_install virtualenv should do the trick, Linux users should be able to run sudo [aptitude/yum/zypper] install python-virtualenv with your respective package manager. You will also need the SetEnv Plugin installed in Hudson.\n\nStep 1\n\nInside of the job’s configuration page ( http;//hudson/job/configure), we need to define an environment variable for the job. Using the SetEnv plugin, define a new $PATH : `PATH=.env/bin:$PATH\n\nWhat this will do is modify the $PATH environment variable for all of the \"Execute shell\" build steps in your job. As you might have guessed, we’re going to install the virtualenv in.env in the workspace root directory.\n\nStep 2\n\nTo set up the virtualenv, you want to add a build step of type \"Execute shell\" and paste the following commands into the text area:\n\nif [ -d \".env\" ]; then\n  echo \"**> virtualenv exists\"\nelse\n  echo \"**> creating virtualenv\"\n  virtualenv .env\nfi\n\nThis will create a virtualenv the first time the job runs on a particular agent, a virtualenv that will persist until the workspace is cleared. Since we’re going to install dependencies in the virtualenv, we want to keep it around between jobs to reduce the amount of network hits to download packages.\n\nStep 3\n\nWith our virtualenv and our $PATH properly set up, the job can now properly install dependencies into its virtualenv, this is where pip shines. A little known feature of pip allows you to define a \"requirements file\" which enumerates the packages to install. In my example project, I defined the following requirements in a file called pip-requires.txt\n\neventlet>=0.9.9\nnose>=0.11.3\nMySQL-python>=1.2.3c1\n\nIn my hypothetical example, I’ll need nose to run my tests, while eventlet and MySQL-python are required for my project to properly run. With the pip-requires.txt file in the root of my source repository, I can add an additional \"Execute shell\" build step that does the following:\n\npip install -r pip-requires.txt\n\nAssuming the $PATH environment variable was properly defined, this will use the virtualenv’s version of pip and it will install the packages defined in pip-requires.txt into the virtualenv! With the dependencies all properly installed in the virtualenv, I can now configure the remainder of my job to build my project and execute the tests. Pretty snazzy if you ask me!","title":"A Python Love Story: Virtualenv and Hudson","tags":["general","guest post","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-03-30T00:00:00.000Z","id":"dfb2c4b6-2ae7-5b02-9f3d-09cbbdc998bf","slug":"/blog/2010/03/30/resurgence-of-releng/","strippedHtml":"A few weeks ago I passed a job listing that I had found through one of my many Google Alerts for Hudson-related queries to Andrew ( abayer), following up on one of those job listings Andrew recently signed an offer to join the nice folks over at Digg to be their resident \"build guy.\" On its own I thought \"great for Andrew!\" and nothing more, then I saw this thread on reddit which poses the question:\n\nAnyone here a build engineer, or part of the build team? Could you please share your experience?\n\nIt seems, to me at least, the notion of \"release engineering\" is making a come-back, particularly in the aging \"Web 2.0\" world where companies like Digg, Facebook, Reddit, Twitter, etc are anywhere from five to ten years old. As these companies have aged a couple of important things have happened, their code-base has aged increasing the possibility of bitrot, but they have also expanded in terms of headcount. Start-ups that might have once slighted larger corporations like Oracle, Cisco VMWare and IBM for their burdensome process and longer release schedules now find themselves ensnared with massive code bases, larger development teams and complicated deployments. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/hudson_vs_buildbot.png\n\nOver the past few months we’ve seen Hudson being used in a number of different contexts, it was pitched at PyCon as part of a larger appeal to the Python community to get on the continuous integration bandwagon, we’ve seen a few posts from developers using Hudson for testing and packaging Android and iPhone apps, .NET developers are jumping on board as well. Across the board it feels like Hudson is being more and more widely used, it is no longer the mainstay of the Java shop’s toolkit, it’s become a must have for all developers.\n\nWith the allure of continuous deployment and Hudson’s lowered barrier to entry for testing, packaging and automating releases, is release engineering making a comeback?","title":"Resurgence of Releng","tags":["guest post","jenkinsci"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-02-17T00:00:00.000Z","id":"8c069e9b-d471-5bea-86b9-a057759e2c8c","slug":"/blog/2010/02/17/getting-started-building-android-apps-with-hudson/","strippedHtml":"In this post I’ll show a very basic tips on how to compile an Android project using Hudson. Specifically how  I use Hudson to create release versions of my apps.\n\nDebug vs Release\n\nI’m assuming that you are using Eclipse with the ADT plugin. During development you can test your app on the emulator or a device and resources like R.java and aidl files are compiled for you automatically by the plugin. When it’s time to release your app, you’ll need to go through some steps:\n\nYou must sign your app using a certificate\n\nYou must update your AndroidManifest.xml to remove the android:debuggable attribute\n\nReplace your Google Maps API debug key with the one belonging to your release certificate (if you are using a MapView)\n\nGenerate an apk package for the release and test it on a device or emulator\n\nIt would be nice to automate a few of these steps, and this is where Hudson comes in.\n\nAutomated builds: Ant\n\nFor automated builds the Android SDK uses Apache Ant, which Hudson has great support for. To generate a template build.xml you can use the android tool from the SDK using the following command:\n\nandroid create project -n template -t android-7 -p template -k dummy.pkg -a Dummy\n\nThe target is specified as \"android-7\" meaning that we are building for Android 2.1. For apps that use MapView we would use \"Google Inc.:Google APIs:7\". It is a good idea to always target the latest SDK. From this template project we’ll grab the build.properties and the build.xml and copy those to the Android project that we want to build. Edit build.xml and set the project name to your Android project name.\n\nThe local.properties file contains the path to the SDK root and shouldn’t be checked in to version control. For our use we’ll set the properties that are in that file on the Hudson job configuration page.\n\nRunning the build in Hudson\n\nThis part is easy: create a new freestyle job and let it be build with ant. The targets that we want to execute are clean release. Release will compile, package and sign your apk. Now to get this working right, some custom properties should be set (use the Advanced button).\n\nsdk.dir=/Users/hugo/Code/android-sdk-mac\ntarget=Google Inc.:Google APIs:7\nkey.store=certs/rd-release.keystore\nkey.alias=rainydays\nkey.store.password=thisisnotmypassword\nkey.alias.password=thisisnotmypassword\n\nThe sdk.dir should point to the Android SDK root on your Hudson node. In my case I’m running Hudson locally on my machine.  The target property refers to the SDK we want to use as mentioned earlier.  The key. properties are related to signing of the apk. My strategy is to have a separate key store and private key for each application that I develop. I also check that keystore in to SVN. I also archive the -release.apk artifact so that I can download the latest release apk directly from Hudson.  After completing these steps, you should be able to build your Android app with Hudson.\n\nUpdating the AndroidManifest for release\n\n…​But we’re not done yet :) Remember what I said about updating the AndroidManifest.xml? For that we need to edit the build.xml, which by default contains nothing more then a tag to pull in the Android SDK ant target definitions. For my Rainy Days application, I adjusted build.xml like this:\n\n...\n\nRemoving debug attribute from AndroidManifest.xml\n\nSetting release maps key\n\nWhat the above snippet does is removing the android:debuggable attribute from the AndroidManifest.xml and replacing the maps API key in res/layout/maplayout.xml with the correct key for release. The -package-resources target is pulled in from the Android android_rules.xml file.\n\nNow when Hudson builds my app I get a ready to release apk that I can install on my device or emulator, which is pretty nice.\n\nThere is are some issues with this approach however. As you might have noticed:\n\nReplacements are done in the workspace, we are not really building exactly what’s in svn\n\nEach new build should start out fresh for that reason, for example by using the svn revert option.\n\nAdditionally I can not yet tag the release version with the updated files, because the subversion tagging plugin doesn’t support this by design. This could be worked around by adding svn statements in the build.xml however.  For now I don’t really mind as I make minor changes to the resource files, but I’ll be looking at improving this situation.\n\nThings to add: unit testing, coverage…​\n\nOne thing that I’d really like to add is unit testing. This is a little bit more complicated though, since unit tests require a running emulator and a running emulator requires a gui. The Hudson Xvnc plugin could be very helpful here.\n\nThe Android build scripts for test projects already include EMMA output, it shouldn’t be to hard to use the Hudson plugin for that.\n\nWhen Hudson is running on a local machine, the Batch task plugin can automate installing the apk on a device to automate things further.\n\nSummary\n\nBuilding Android applications with Hudson is not that hard, since the builds are based on Ant. By hooking in to the standard Android build targets it’s easy to update files like AndroidManifest.xml which in turn makes sure the release process is controlled and predictable.\nAndroid unit tests depend on the emulator which is a little bit more challenging to set up, but Hudson already has some plugins available to make this easier.\n\nEditor’s Note: Hugo Visser is the developer of Rainy Days and Engine Watch for Android. You can\nfollow him on Twitter and on his blog.","title":"Getting started: Building Android apps with Hudson","tags":["general","guest post","jobs","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2010-02-10T00:00:00.000Z","id":"bf65fc5d-5128-5381-a704-e7da235ac78d","slug":"/blog/2010/02/10/keeping-your-configuration-and-data-in-subversion/","strippedHtml":"We all know that keeping important files in version control is critical, as it ensures problematic changes can be reverted and can serve as a backup mechanism as well. Code and resources are often kept in version control, but it can be easy to forget your continuous integration (CI) server itself! If a disk were to die or fall victim to a misplaced rm -rf, you could lose all the history and configuration associated with the jobs your CI server manages.\n\nIt’s pretty simple to create a repository, but it isn’t obvious which parts of your $HUDSON_HOME you’ll want to backup. You’ll also want to have some automation so new projects get added to the repository, and deleted ones get removed. Luckily we have a great tool to handle this: Hudson!\n\nWe have a Hudson job which runs nightly, performs the appropriate SVN commands, and checks in. The high-level overview of this job is basically:\n\nAdd any new jobs, users, plugin configurations, et cetera: svn add -q --parents.xml jobs/ /config.xml users/ /config.xml userContent/\n\nRemove anything from SVN that no longer exists (such as a deleted job): svn status | grep '!' | awk '{print $2;}' | xargs -r svn rm\n\nCheck it in! svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\"\nYou’ll want to make sure to use the --non-interactive option for any automated svn operations, as this ensures Subversion won’t hang asking a question but instead fail immediately. You may also need to provide your password with the --password option.\n\nTo make such a Hudson job, create a new job, tie it to the controller (since this is where the configuration files are), set it to build periodically (we use “@midnight”), and add an “Execute shell” build step. Here’s the full script we use, to put into the build step:\n\n# Change into your HUDSON_HOME.\ncd /opt/hudson\n# Add any new conf files, jobs, users, and content.\nsvn add -q --parents *.xml jobs/*/config.xml users/*/config.xml userContent/*\n# Ignore things in the root we don't care about.\necho -e \"warnlogn*.logn*.tmpn*.oldn*.bakn*.jarn*.json\" > myignores\nsvn propset svn:ignore -F myignores . && rm myignores\n# Ignore things in jobs/* we don't care about.\necho -e \"buildsnlast*nnext*n*.txtn*.lognworkspace*ncoberturanjavadocnhtmlreportsnncoverndoclinks\" > myignores\nsvn propset svn:ignore -F myignores jobs/* && rm myignores\n# Remove anything from SVN that no longer exists in Hudson.\nsvn status | grep '!' | awk '{print $2;}' | xargs -r svn rm\n# And finally, check in of course, showing status before and after for logging.\nsvn st && svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\" && svn st\n\nYou’ll notice this does some extra things like set the svn:ignores property to provide a relatively clean svn st which it shows before and after the commit for logging purposes. One thing this job doesn’t do is put the build results of your jobs in version control. Because historical build logs and artifacts will never change and are also potentially large, a periodic (daily or weekly) cp or rsync of the jobs directory will still give you restorability while keeping your repository lean.\n\nNow you can sleep well at night knowing that your CI server is safe and sound. If you are doing a similar thing with Hudson or another CI system, let us know about your solution!\n\nEditor’s Note: Mike Rooney is a Software Engineer at Genius.com, provider of real-time marketing automation software connecting marketing and sales. You can read more posts from Mike and other Geniuses at eng.genius.com","title":"Keeping your configuration and data in Subversion","tags":["development","guest post","jobs","just for fun","tutorial"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/author/rtyler","twitter":"agentdero"}]}}]}},"pageContext":{"tag":"guest post","limit":8,"skip":16,"numPages":3,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}