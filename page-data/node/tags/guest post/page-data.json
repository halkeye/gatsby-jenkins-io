{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/guest post",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2015-12-03T00:00:00.000Z","id":"51e550d9-2ab9-5be8-be79-96bef6d8ca1a","slug":"/blog/2015/12/03/pipeline-as-code-with-multibranch-workflows-in-jenkins/","strippedHtml":"Note: This is a guest post by Kishore Bhatia. Kishore works for CloudBees, building custom frameworks with Open Source software and helping customers solve engineering problems around continuous delivery and DevOps at scale.\n\nThis year some great new Jenkins features came out of the butler’s goodie bag - amongst them, the most important one being the ability to realize continuous delivery pipeline as code!\nThe features like Workflow Multibranch, pipeline-as-code (with a marker file that Jenkins looks for in your application’s SCM repository/branch, aptly named Jenkinsfile) are the foundations to making Jenkins super intelligent to automagically create workflows (rather, a CI/CD pipeline) to build your code and orchestrate the work required to drive your application from concept to delivery!\n\nOverview\n\nThe Workflow Multibranch feature (provided by the workflow plugin) provides the following key abilities:\n\nAutomatic Workflow (job) creation in Jenkins per new branch in the repo (assuming webhooks are registered from GH to Jenkins).\n\nBuild specific to that child-branch and its unique scm change and build history.\n\nAutomatic job pruning/deletion for branches deleted from the repository, according to the settings.\n\nFlexibility to individually configure branch properties, by overriding the parent properties, if required.\n\nJenkins pipeline-as-code (concept) enables you to maintain your CI/CD workflow logic in the project/application source code repo with no additional configuration to be maintained per branch in Jenkins.\n\nThe Workflow script to build/test/deploy your code is always synchronized with the rest of the source code you are working on.\n\nTo demonstrate the concept here - Let’s use a basic Java Web application project with a Maven pom.xml as shown in the structure below (this is using GitHub as the SCM but you can do this on SVN or Mercurial too).\n\nThis project has a marker file for Jenkins in the repo - Jenkinsfile. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic1.png\n\nSo, what’s a Jenkinsfile? The Jenkinsfile is essentially your Jenkins Workflow, a script, that defines the CI/CD pipeline logic for a project with steps to build/test/deploy etc. captured in various stages.\n\nSo for our sample Java web application, a basic Jenkinsfile could be something like -\n\nnode {\n   // Mark the code checkout 'stage'....\n   stage 'Checkout'\n\n   // Checkout code from repository\n   checkout scm\n\n   // Get the maven tool.\n   // ** NOTE: This 'M3' maven tool must be configured\n   // **       in the global configuration.\n   def mvnHome = tool 'M3'\n\n   // Mark the code build 'stage'....\n   stage 'Build'\n   // Run the maven build\n   sh \"${mvnHome}/bin/mvn clean install\"\n}\n\nJust having this file in the source code repo root would mean that -\n\nJenkins will automatically recognize this branch and create appropriate jobs by itself.\n\nQuick, 1-step code checkout using: “checkout scm” in your workflow\n\nEvery time a new change is pushed to this branch, the branch is built and the commit status gets updated.\n\nWhen the branch is destroyed in the repository, or if Jenkinsfile is removed, the corresponding job gets destroyed from Jenkins automatically ( You can retain these jobs and/or archive the builds for audit/compliance requirements using the retention property - Orphan Item strategy)\n\nthere are various mechanisms to promote reuse of Workflow scripts, such as the Workflow Global Library.\n\nRequired Jenkins configuration\n\nMake sure you’ve the latest Workflow and (v1.11 as of writing this blog) Workflow Multibranch plugins installed on your Jenkins instance image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic2.png\n\nAlso, ensure that other dependencies, like SCM plugins and build tools, are met:\n\nEither SVN/Git/Mercurial (depending on your SCM)\n\nGitHub Branch Source Plugin (optimized to use the GitHub API and improve performance)\n\nMaven build tool\n\nFinally, make sure you’ve created the required Webhook from your SCM (Github in this case) to Jenkins.\nHere’s how to do that:\n\nSetting up GitHub Webhooks in Jenkins\n\nStep-by-step guide to setting up Jenkins for GitHub projects\n\nThen create a new Multibranch Workflow Job with configuration as shown below - mainly selecting the Branch Sources (Git, in this example) and providing the branch/repo URL with credentials.\n\nBranch sources (Git) - https://github.com/kishorebhatia/pipeline-as-code-demo (or a repo where you’ve cloned this source code with Jenkinsfile)\n\nLeave all other properties default and Save. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic3.png\n\nYou’ll observe that Jenkins would perform Branch Indexing on that “cd” job folder and start the workflow for the master branch, with an automatically created new job, named master, under the “cd” folder.\n\nThe workflow does a dummy step for application deploys to the environments in this sequence Staging -> Waits for manual approval -> PROD\n\nNow, let’s create a new branch off of this master branch in your cloned git repo:\n\n$ git branch newBranch (create a newBranch)\n\n$ git checkout newBranch (switches to newBranch)\n\n$ git push --set-upstream origin newBranch (pushes newBranch)\n\nYou’ll observe that your Jenkins instance automatically picks up this newBranch and starts running the workflow (with the Jenkinsfile in this newBranch) to build/test/deploy the code. image:https://web.archive.org/web/*/https://agentdero.cachefly.net/continuousblog/pipeline-as-code-guest-blog/Pic4.png\n\nNext, if you now delete this newBranch ( git branch -D newBranch), Jenkins will automatically remove the orphan Workflow job for newBranch. You can retain these jobs even after the branches are deleted using the Orphaned Item Strategy property in the main \"cd\" job’s configuration.\n\nSo we observed the following benefits of this pipeline-as-code approach:\n\nOverall job definition is a script (Jenkinsfile)\n\nCalls your build tools and scripts for details\n\nThe build script can be versioned alongside project sources\n\nJenkins handles feature/experimental branches automatically\n\nKeep less configuration in $JENKINS_HOME\n\nDockerized Demo environment\n\nYou can also use the following docker image to run this demo with a preconfigured Jenkins environment and the sample job: jenkinsci/workflow-demo (i.e. docker pull jenkinsci/workflow-demo)\n\nThis docker container includes Jenkins with Workflow and Workflow Multibranch plugins, a local git repo with the aforementioned Java web application and Jetty to demonstrate a continuous delivery pipeline of this application deployed and tested across multiple environments in the pipeline with an approval gate before promoting to PROD (like QA, Staging and PROD).\n\nThere’s a \"cd\" job pre-configured as a multibranch Workflow job.\n\nLaunch the docker demo as: docker run -p 8080:8080 -p 8081:8081 -p 9418:9418 -ti jenkinsci/workflow-demo\n\nNow, you can access Jenkins on port 8080 and Jetty on port 8081 from localhost or the IP of your boot2docker/docker-machine environment.\n\nThe demo container has a local git repo so you can clone: git://localhost/repo. When creating new branches, each branch automatically creates a matching subproject in Jenkins and triggers the build for that branch. The workflow:\n\nChecks out source code from the same repository and commit as Jenkinsfile.\n\nBuilds sources via Maven with unit testing.\n\nRuns two parallel integration tests that involve deploying the app to ephemeral server instances, which get thrown away when tests are done (this is done by using auto-deployment of Jetty)\n\nOnce integration tests are successful, the webapp gets to the staging server at localhost:8081/staging (or your docker-machine/boot2docker instance IP)\n\nrequires a human to Manually inspect the staging instance, and when ready, approves the deployment to the production server at http://localhost:8081/production/\n\nReferences\n\nDeveloper blog by jglick introducing multibranch support\n\nworkflow plugin tutorial\n\nworkflow plugin presentations\n\nworkflow plugin demo readme","title":"Pipeline-as-code with Multibranch Workflows in Jenkins","tags":["general","guest post","tutorial","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg","srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/77b35/rtyler.jpg 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/d4a57/rtyler.jpg 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/19e71/rtyler.jpg 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/68974/rtyler.jpg 256w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/ef6ff/rtyler.webp 32w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/8257c/rtyler.webp 64w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/6766a/rtyler.webp 128w,\n/gatsby-jenkins-io/static/c98b6de76465e89f9f5e5b331e9abfea/22bfc/rtyler.webp 256w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":128}}},"blog":"http://unethicalblogger.com","github":"rtyler","html":"<div class=\"paragraph\">\n<p>R&#46; Tyler Croy has been part of the Jenkins project for the past seven years.\nWhile avoiding contributing any Java code, Tyler is involved in many of the\nother aspects of the project which keep it running, such as this website,\ninfrastructure, governance, etc.</p>\n</div>","id":"rtyler","irc":null,"linkedin":null,"name":"R. Tyler Croy","slug":"/blog/authors/rtyler","twitter":"agentdero"}]}},{"node":{"date":"2015-07-28T00:00:00.000Z","id":"9ec1d79b-4f06-5a53-916d-bcc4f9f5e267","slug":"/blog/2015/07/28/reinforcements-for-the-subversion-plugin/","strippedHtml":"This is a guest post by Manuel Recena Soto (aka recena).\n\nUsers of the plug-in know that it has undergone very important changes in the last two years.\n\nUnfortunately, some of these changes resulted in regressions for some users that weren’t properly addressed in subsequent releases. Many users were therefore forced to keep using an older release of the plugin to keep their instances running.\n\nTo fix this difficult situation I’ve decided to dedicate my spare time to improving the plug-in and attempting to restore the stability that an essential plug-in like this requires.\n\nIn order to do so, me, my colleague Steven Christou and other members of the community have drawn up a plan.\n\nIn the coming weeks we will be focusing our efforts on:\n\nGoing through the Jira tickets\n\nChecking whether they are duplicated\n\nChecking whether they are still relevant\n\nAsking for more information from the people who reported them\n\nEstablishing their priority\n\nReviewing pull requests\n\nInvestigating bug reports and try to reproduce them\n\nFixing serious bugs\n\nRefactoring the plugin to improve its maintainability.\n\nWe’re planning to publish a new 2.5.x bugfix release once a fortnight. We are not considering the inclusion of new features or improvements. The priority now must be to obtain a stable and reliable plug-in, one that will allow us to take things up again in the future with greater security and peace of mind.\n\nInterested in helping? Just send us a message!","title":"Reinforcements for the Subversion Plugin","tags":["development","guest post","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2015-07-14T00:00:00.000Z","id":"05213c44-844d-51ea-b951-aeb37606e84b","slug":"/blog/2015/07/14/juseppe-a-custom-update-site-for-jenkins/","strippedHtml":"This is a guest post by Kirill Merkushev at Yandex. I met him at JUC Europe where he showed me the project he was working on: Juseppe. It looked really interesting, so I asked him to write this guest post.\n\nWhen you write your first custom Jenkins plugin for internal use, it’s easy enough to deploy it on one or maybe two Jenkins instances. You can save it on your local drive and upload the HPI file via the Jenkins Plugin Manager as needed. It’s easy to do this for a few releases. But as your experience grows, the number of plugins and their releases grows as well. The plugins directory on your local drive soon looks like a garbage dump, and it’s difficult to find that most recent version of any plugin. And if you have a lot of Jenkins instances coordinating updates of your plugins may cause a lot of pain.\n\nA similar situation is when you contribute a much-needed patch to an existing plugin, but you don’t have the time to wait until your pull request is be merged and a new release is cut. Or you may need to patch a plugin in ways not suitable for distribution, and decide to effectively fork the plugin for use on your Jenkins instances. How are you going to do this?\n\nA solution avoiding the problems from these situations is to set up your own update site to serve your private plugin builds. Juseppe allows you to do this quickly and easily.\n\nWhat is Juseppe?\n\nJuseppe is an acronym for Jenkins Update Site Embedded for Plugin Publishing Easily. Juseppe can help you set up a Jenkins update site in just a few minutes.\n\nFeatures\n\nGenerates signed update-center.json and release-history.json\n\nWorks with HPI files directly (stored in one folder), no need to set up a Maven repository\n\nWatches for changes in the plugin folder and regenerates JSON files when changes are detected\n\nServes generated files and plugin files with built-in Jetty web server\n\nCan be run in a \"generate-only\" mode when you want to use a different web server for these files.\n\nHow can I get Juseppe?\n\nIt ships as a Docker container, or can be built from source. Visit the GitHub project page to learn more. The complete user guide is available in the GitHub project wiki.","title":"Juseppe, a custom update site for Jenkins","tags":["general","guest post"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/authors/daniel-beck","twitter":null}]}},{"node":{"date":"2015-03-06T00:00:00.000Z","id":"903172dd-2b46-5e97-beaa-f5ef62e66756","slug":"/blog/2015/03/06/google-apps-sso-no-longer-supported-in-jenkins-openid-plugin/","strippedHtml":"+\n_This is a guest post from Owen Mehegan (aka autojack)_ +\n +\n\n+\n\n+\nhttps://commons.wikimedia.org/wiki/Sunset[image:https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Sunset_Marina.JPG/320px-Sunset_Marina.JPG[image,width=200]] +\n\n+\n\n+\nIn 2014 Google announced that they will be shutting down their OpenID 2.0 authentication endpoint and replacing it with Google+ Sign-in, a library built on top of OpenID Connect. *The old Google endpoint will shut down on April 20th, 2015!* Accordingly, if you are using the Jenkins OpenID plugin to authenticate users with the ‘Google Apps SSO’ feature (typically when Google hosts your personal or corporate email), you need to upgrade. Ryan Campbell took the initiative to develop the new Google Login plugin which implements the Google+ Sign-in functionality. This is the recommended solution going forward. Follow the steps https://wiki.jenkins.io/display/JENKINS/Google+Login+Plugin[here] to configure it for your site. *Note that you DON’T need to have a Google+ social network account/profile. Any Google account can be used.* +\n +\n\n+\nIf you find yourself locked out of your Jenkins system after the old endpoint is shut down you will need to follow the steps https://wiki.jenkins.io/display/JENKINS/Disable+security[here] to disable Jenkins security temporarily. Then you can connect without authentication and switch to the Google Login plugin. You will probably want to uninstall the old OpenID plugin at that point as well. +\n +\n\nReferences:\n\n+\n\nShutdown announcement from Google\n\nJENKINS-23431, bug tracking this fix\n\nOld OpenID plugin\n\nNew Google Login plugin\n\n+","title":"Google Apps SSO no longer supported in Jenkins OpenID plugin","tags":["development","guest post","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-10-20T00:00:00.000Z","id":"94f28977-b270-5a37-b70b-89623666a600","slug":"/blog/2014/10/20/freebsd-project-use-of-jenkins-for-os-testing/","strippedHtml":"This is a guest post by Craig Rodrigues\n\nThe FreeBSD project produces a modern operating system derived from BSD Unix.\n\nIn the past 6 months, we have set up Jenkins at https://jenkins.freebsd.org/, to continuously build FreeBSD as developers add new code to the project. This has helped us identify and fix build breaks very quickly.\n\nWe have gone even farther by integrating Jenkins, Kyua,\nand Bhyve.\nKyua is a testing framework for infrastructure software.\nBhyve is the native hypervisor that comes with FreeBSD (similar to KVM on Linux).\n\nWe use the Build Flow plugin in this example Build flow to do the following:\n\nBuild the FreeBSD kernel and userland on amd64 whenever someone checks in new code to https://svn.freebsd.org\n\nCreate a bootable FreeBSD disk image with makefs\n\nBoot the image under bhyve\n\nRun these commands inside the bhyve VM:\n\ncd /usr/tests; kyua test; kyua report-junit --output=test-output.xml\n\nShut down the bhyve VM\n\nImports test-output.xml into Jenkins.\n\nProduces a full native test report in Jenkins\n\nThe results of this work were presented at the Bay Area FreeBSD Users Group\nin this presentation in October 2014.\n\nJenkins has been very easy to set up and use under FreeBSD.   We hope that by using\nJenkins to run OS-level unit tests, we will be able to improve the quality of FreeBSD.\nFor further information, please feel free to contact us at freebsd-testing@FreeBSD.org.","title":"FreeBSD project use of Jenkins for OS testing","tags":["general","feedback","guest post"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-10-06T00:00:00.000Z","id":"6d0461f6-898e-51fd-93b3-8b25ee763309","slug":"/blog/2014/10/06/gradle-fy-your-jenkins-plugin-project/","strippedHtml":"(This is a guest post from Daniel Spilker)\n\nJenkins supports building plugins using Gradle for a while now. Last week a new version of the Gradle JPI plugin has been released to iron out some issues.\n\nThe Gradle JPI plugin enables a 100% groovy plugin development environment with Groovy as primary programming language, Spock for writing tests and Gradle as build system. Have a look at the Job DSL plugin for an example.\n\nAn existing Maven build can be converted to Gradle by using the build.gradle template from the Gradle JPI plugin’s README. For instance, the POM from the Gradle plugin translates to this build.gradle file:\n\nbuildscript {\n    repositories {\n        mavenCentral()\n        maven {\n            url 'https://repo.jenkins-ci.org/releases/'\n        }\n    }\n    dependencies {\n        classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.6.0'\n    }\n}\n\napply plugin: 'jpi'\n\ngroup = 'org.jenkins-ci.plugins'\nversion = '1.25-SNAPSHOT'\n\njenkinsPlugin {\n    coreVersion = '1.480'\n    displayName = 'Jenkins Gradle plugin'\n    url = 'https://wiki.jenkins.io/display/JENKINS/Gradle+Plugin'\n    gitHubUrl = 'https://github.com/jenkinsci/gradle-plugin'\n\n    developers {\n        developer {\n            id 'gbois'\n            name 'Gregory Boissinot'\n            timezone '+1'\n        }\n    }\n}\n\ndependencies {\n    compile 'org.jenkins-ci.lib:dry-run-lib:0.1'\n}\n\nUsage of the Gradle JPI plugin is similar to working with the Maven HPI plugin. Use gradle jpi to build the plugin file. gradle check runs the tests, gradle install copies the plugin into the local Maven repository, gradle uploadArchives deploys the plugin to the Jenkins Maven repository and gradle server starts a Jenkins development server with the plugin installed.\n\nIt is recommended to use Gradle 1.8 because that is the version used to build and test the Gradle JPI plugin.\n\nFor the next release it is planned to do some maintenance like fixing code style issues and adding tests. After that more issues need to be addressed to bring the plugin on par with the Maven HPI plugin, most notably fixing the test dependencies ( JENKINS-17129) and publishing the plugin’s JAR ( JENKINS-25007). Updating Gradle to 2.x and getting the plugin on the Gradle plugin portal is also on the wishlist.","title":"Gradle-fy your Jenkins Plugin Project","tags":["general","guest post","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-08-11T00:00:00.000Z","id":"2235bd0e-d668-56ae-9fb4-d4d03b916fac","slug":"/blog/2014/08/11/user-interface-refresh/","strippedHtml":"+\nThis is a guest post from https://github.com/tfennelly[Tom Fennelly] +\n\n+\n+\n\n+\nOver the last number of weeks we've been trying to \"refresh\" the Jenkins UI, modernizing the look and feel a bit. This has been a real community effort, with collaboration from lots of people, both in terms of implementation and in terms of providing honest/critical feedback. Lots of people deserve credit but, in particular, a big thanks to https://github.com/kevinburke[Kevin Burke] and https://github.com/daniel-beck[Daniel Beck]. +\n +\n\n+\nYou're probably familiar with how the Jenkins UI currently looks, but for the sake of comparison I think it's worth showing a screenshot of the current/old UI alongside a screnshot of the new UI. +\n +\n\n+\nhttps://jenkins-ci.org/sites/default/files/images/current.png[ +\nimage:https://jenkins-ci.org/sites/default/files/images/current.preview.png[image,width=500] +\n] +\n\n+\n*_Current / Old Look & Feel_* +\n\n+\nhttps://jenkins-ci.org/sites/default/files/images/new.png[ +\nimage:https://jenkins-ci.org/sites/default/files/images/new.preview.png[image,width=500] +\n] +\n\n+\n*_New Look & Feel_* +\n\n+\n+\n\n+\nAmong other things, you'll see: +\n\nA new responsive layout based on elements (as opposed to elements). Try resizing the screen or viewing on a smaller device. More to come on this though, we hope.\n\nUpdated default font from Verdana to Helvetica.\n\nNicer form elements and nicer buttons.\n\nSmoother side panels e.g. Build Executors, Build Queues and Build History panes.\n\nSmoother project views with more modern tabs.\n\n+\n+\n\n+\nYou might already be seeing these changes if you're using the latest and greatest code from Jenkins. If not, you should see them in the next LTS release. +\n +\n\n+\nWe've been trying to make these changes without breaking existing features and plugins and, so far, we think we've been successful but if you spot anything you think we might have had a negative effect on, then https://issues.jenkins.io[please log a JIRA] and we'll try to address it. +\n +\n\n+\nOne thing we've \"sort of\" played with too is cleaning up of the Job Config page - breaking into sections and making it easier to navigate etc. This is a big change and something we've been shying away from because of the effect it will have on plugins and form submission. That said, I think we'll need to bite the bullet and tackle this sooner or later because it's a big usability issue. +","title":"User Interface Refresh","tags":["development","core","guest post","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-07-03T00:00:00.000Z","id":"92b15951-9b65-5ab7-ba96-b57a784cc0d0","slug":"/blog/2014/07/03/jenkins-user-event-and-code-camp-2014-copenhagen/","strippedHtml":"+\nThis is a guest post from Adam Henriques. +\n +\n\n+\n+\n\n+\nOn August 22nd Jenkins CI enthusiasts will gather in Copenhagen, Denmark for the 3rd consecutive year for a day of networking and knowledge sharing. Over the past two years the event has grown and this year we are expecting a record number of participants representing Jenkins CI experts, enthusiasts, and users from all over the world. +\n +\n\n+\n+\n\n+\nhttps://www.praqma.com/events/jcicph14[The Jenkins CI User Event Copenhagen] has become cynosure for the Scandinavian Jenkins community to come together and share new ideas, network, and harness inspiration from peers. The program offers invited as well as contributed speaks, tech talks, case stories, and facilitated Open Space discussions on best practice and application of continuous integration and agile development with Jenkins. +\n +\n\nThe Jenkins CI Code Camp 2014\n\n+\n+\n\n+\nThe Jenkins CI User Event will be kicked off by https://www.praqma.com/events/jcicodecamp14[The Jenkins CI Code Camp] on August 21st, the day before the User Event. Featuring Jenkins frontrunners, this full day community driven event has become very popular, where Jenkins peers band together to contribute content back to the community. The intended audience is both experienced Jenkins developers and developers who are looking to get started with Jenkins plugin development. +\n +\n\n+\nFor more information please visit the https://www.praqma.com/events/jcicph14[Jenkins CI User Event 2014, Copenhagen website]. +\n\n+\nimage:https://www.praqma.com/sites/default/files/img/DSC_0045_scaled.jpg[image,scaledwidth=40.0%] +","title":"Jenkins User Event & Code Camp 2014, Copenhagen","tags":["general","guest post","meetup"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/authors/kohsuke","twitter":"kohsukekawa"}]}}]}},"pageContext":{"tag":"guest post","limit":8,"skip":0,"numPages":3,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}