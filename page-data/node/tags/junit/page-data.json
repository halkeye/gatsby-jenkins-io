{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/junit",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2021-10-28T00:00:00.000Z","id":"bb5b6b61-0b2c-523e-9fa6-6f2912642e51","slug":"/blog/2021/10/28/introducing-junit-external-storage/","strippedHtml":"In common CI/CD use-cases a lot of the space is consumed by test reports.\nThis data is stored within JENKINS_HOME,\nand the current storage format requires huge overheads when retrieving statistics and, especially, trends.\nIn order to display trends, each report has to be loaded and then processed in-memory.\n\nThe main purpose of externalising Test Results is to optimize Jenkins performance and storage\nby querying the desired data from external storages.\n\nI’m please to announce that the JUnit Plugin external storage is now available for use.\n\nGetting started\n\nInstall your database vendor specific plugin, you can use the Jenkins plugin site to search for it:\n\nhttps://plugins.jenkins.io/ui/search/?labels=database\n\ne.g. you could install the PostgreSQL Database plugin.\n\nWe currently support PostgreSQL or MySQL, but can support others, just create an issue or send a pull request.\n\nFrom Jenkins UI\n\nNavigate to: Manage Jenkins → Configure System → Junit\n\nIn the dropdown select 'SQL Database'\n\nNow configure your Database connection details.\n\nSearch for 'Global Database' on the same 'Configure System' page.\n\nSelect the database implementation you want to use and click 'Test Connection' to verify Jenkins can connect\n\nClick 'Save'\n\nConfiguration as code\n\nIf you want to configure the plugin via Configuration as Code then see the below sample:\n\nunclassified:\n  globalDatabaseConfiguration:\n    database:\n      postgreSQL:\n        database: \"jenkins\"\n        hostname: \"${DB_HOST_NAME}\"\n        password: \"${DB_PASSWORD}\"\n        username: \"${DB_USERNAME}\"\n        validationQuery: \"SELECT 1\"\n  junitTestResultStorage:\n    storage: \"database\"\n\nUsing the plugin\n\nNow run some builds, here’s an example pipeline configuration to get you started if you’re just trying out the plugin:\n\nnode {\n  writeFile file: 'x.xml', text: '''\n\n'''\n  junit 'x.xml'\n}\n\nYou will see a test result trend appear like below on the builds project page:\n\nIf you check on the controller’s file system you will see no junitResult.xml for new builds.\n\nIf you connect to your database and run:\n\nSELECT * FROM caseresults;\n\nYou will see a number of test results in the database.\n\nWhat happens to existing test results?\n\nExisting test results will stay on disk but will not be loaded.\n\nCurrently there is no migration scripts or plugin functionality to do this, if you need it then please raise an issue.\n\nHow are test results cleaned up\n\nWhen a job or build is deleted the related test results are removed.\n\nThis is expected to be done as part of a 'Build Discarder'.\n\nIf you wish to keep your results longer than this you can disable this feature by enabling:\n\nSkip cleanup of test result on build deletion on the system configuration page.\n\nIf you need more complex cleanup strategies built into the plugin then please raise an issue.\n\nAPI\n\nThe API is defined at:\n\njenkinsdoc:junit:io.jenkins.plugins.junit.storage.JunitTestResultStorage[]\n\njenkinsdoc:junit:io.jenkins.plugins.junit.storage.JunitTestResultStorageDescriptor[]\n\njenkinsdoc:junit:io.jenkins.plugins.junit.storage.TestResultImpl[]\n\nJunitTestResultStorage#load is passed a job name and build which can be used to construct an instance of the external storage implementation.\n\nThis implementation will then act on that job and build except for the optimised calls that act across all builds.\n\nThe API contains the basic methods like getFailCount, getSkipCount, but also APIs that are optimised for retrieving data for the trend graphs on the job page and the test result history page.\n\nThese allow single API calls to be made for what used to be a lot of work for Jenkins to look up before.\n\nFeedback\n\nI would love to hear your feedback & suggestions for this feature.\n\nPlease create an issue at https://github.com/jenkinsci/junit-plugin or provide feedback on https://community.jenkins.io","title":"Introducing external storage for JUnit test results","tags":["cloud-native","pluggable-storage","junit"],"authors":[{"avatar":null,"blog":null,"github":"timja","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer, along with slack, azure-keyvault and configuration-as-code plugins.\nTim started using Jenkins in 2013 and became an active contributor in 2018.\nTim enjoys working on open source software in his “free” time.</p>\n</div>","id":"timja","irc":null,"linkedin":"tim-jacomb-98043174","name":"Tim Jacomb","slug":"/blog/authors/timja","twitter":"Tjaynz"}]}}]}},"pageContext":{"tag":"junit","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}