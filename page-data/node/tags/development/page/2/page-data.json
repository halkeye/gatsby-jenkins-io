{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/development/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2015-07-28T00:00:00.000Z","id":"9ec1d79b-4f06-5a53-916d-bcc4f9f5e267","slug":"/blog/2015/07/28/reinforcements-for-the-subversion-plugin/","strippedHtml":"This is a guest post by Manuel Recena Soto (aka recena).\n\nUsers of the plug-in know that it has undergone very important changes in the last two years.\n\nUnfortunately, some of these changes resulted in regressions for some users that weren’t properly addressed in subsequent releases. Many users were therefore forced to keep using an older release of the plugin to keep their instances running.\n\nTo fix this difficult situation I’ve decided to dedicate my spare time to improving the plug-in and attempting to restore the stability that an essential plug-in like this requires.\n\nIn order to do so, me, my colleague Steven Christou and other members of the community have drawn up a plan.\n\nIn the coming weeks we will be focusing our efforts on:\n\nGoing through the Jira tickets\n\nChecking whether they are duplicated\n\nChecking whether they are still relevant\n\nAsking for more information from the people who reported them\n\nEstablishing their priority\n\nReviewing pull requests\n\nInvestigating bug reports and try to reproduce them\n\nFixing serious bugs\n\nRefactoring the plugin to improve its maintainability.\n\nWe’re planning to publish a new 2.5.x bugfix release once a fortnight. We are not considering the inclusion of new features or improvements. The priority now must be to obtain a stable and reliable plug-in, one that will allow us to take things up again in the future with greater security and peace of mind.\n\nInterested in helping? Just send us a message!","title":"Reinforcements for the Subversion Plugin","tags":["development","guest post","plugins"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}},{"node":{"date":"2015-07-15T00:00:00.000Z","id":"a188685e-dcce-5f7f-85b9-9acf0cbfe59b","slug":"/blog/2015/07/15/advancing-the-jenkins-gui-configuring-items-in-jenkins/","strippedHtml":"https://youtu.be/1Qn4jEwAeGc\n\nAbove is the screencast associated with this blog post\n\nIf you have ever used Jenkins you are familiar with what I am about to described, wading your way through job configuration page, looking for the settings that are important, and, depending on your plugin use, wondering where all these other setting came from and what they do.\n\n+\nDepending on how long you have used Jenkins, your negative opinion of this experience may vary. If you are a long-time user, you might even view the configuration page with that same reassuring nostalgia seeing a Facebook post from your ugly room mate induces. ‘Yup,he is still ugly and backwards, but we had some good times, back then.’ If you are a newer Jenkins user, it may well send you off to search the web for a viable alternative tool. +\n\n+\nThe good news is that CloudBees, in cooperation with the greater Jenkins community, is looking to make some long overdue progress sorting through this user interaction in a way that is both approachable to new users and amenable to existing users who have grown comfortable with a great tool and a ‘stalwart friend’ in a world of otherwise clunky world of IT tools. ( that really is the swiss army knife of build automation.) +\n\n+\n\nIf you happen to have had the opportunity to have attended any of the recent Jenkins User Conferences in Washington, DC, or London, you may have seen Tom and my presentation, which served as our initial introduction of this effort to the Jenkins Community. In this article and the associated video, I will be focusing specifically on the Create and Configuration screens in Jenkins, discussing some of the larger proposed changes, providing some context for the changes and examining their possible repercussions on existing plugins and future plugin development.\n\n+\n+\n\nHistory of Jenkins\n\n+\n\n+\nFor newer Jenkins users, I have found the following visual a helpful guide to understanding the history of Jenkins and how its graphical user interfaces has evolved:\n\n+\n +\nimage:/sites/default/files/images/history-jenkins_590.jpg[Jenkins timeline: a long history] +\n\n+\nThe first thing to notice here, is that Jenkins has been around for a long time and in a lot of ways is really fundamental to the art of creating software. Back in 2005, the then Hudson project was using pretty much the same cave chalk as everyone else. 6 years later, the code and community underwent its most substantial transformation to date, as Jenkins emerged as the dominant fork of the Hudson project. If you look closely, you will see the GUI reflected that transformation by….. changing the picture of the butler. In recent times, the interface has taken a few additional steps forward, most notably by moving to a responsive CSS driven layout from its table based origin, but the pace of these changes has been very much akin to the pace of evolution. Slow. +\n\n+\nIn our next phase of graphic interface development, however, Tom and I are looking to be a little more directed in our efforts and push the GUI toward a blend of strategic and tactical advancements that will help Jenkins take advantage of some of the advances in web design and browser technologies that have happened over the last 10 years. Our first major push will be in the job creation and configuration tasks. +\n\n+\n\nCreating and Configuring\n\n+\n\n[image]\n\n+\n\n+\n\n+\n\nIn addition to a bit of a refresh of the look of these forms, this new effort focuses on the importance of dividing information and presentation into clear categories that ideally are meaningful to both new and veteran users of Jenkins alike.\n\n+\n+\n\nIn some cases, Jenkins has these categories already in the GUI, but misses the mark in clarification and emphasis. In other cases, additional categorizing concepts will need to be added. Compare the above screens to the existing screens.\n\n+\n\n[image]\n\n+\n\n[image]\n\n+\n\nThe first thing you are likely to notice when comparing these two sets of screens is that in the existing screens, there is very little in the way of visual markers segmenting the form input choices on either the item type selection screens (fig 4 vs 2) or the configuration pages (fig 5 vs 3). Adding each new plugin progressively aggravates the situation, and consequently, as your Jenkins installation grows in sophistication and robustness, the average users ability to find the fundamental configuration settings in the sea of ad-hoc options diminishes. While adding functionality typically adds some amount of additional complexity to a UI, by giving each configuration option a visually distinguishable space in the form, the challenge can be greatly diminished and the pattern of creating an ever growing scrolling of toilet paper list of form elements can be avoided.\n\n+\n\nFor figures 2 and 4, you might also notice that I have chosen Jenkins instances that already have several plugins installed as the basis for my example screens. You might rightly argue that for a basic install, there are not a lot of item types to create, so categorizing them adds a needless layer of complexity. Fair enough. It is my belief, though, that our software can be smart enough to count the item types available for creation and count the number within each category and handle the categorization as necessary. Counting and sorting is something that computers do incredibly well and is not the sort of thing busy people need to be overly burdened with.\n\n+\n\nIn addition to the code being intelligent about when to present grouping categories to the user, The screen interaction can be similarly intelligent in how it enables the user to selectively show and hide the categories of interest. The following screenshot shows the configuration page focused in on CVS a particular option configuration in the source code management section of the configuration page. It, in turn, has its own sub settings for additional modules and locations (see fig 6).\n\n+\n\n[image]\n\n+\n\n…​and wait for it…​ …​for comparison, here is today’s CVS settings page…​\n\n+\n\n[image]\n\n+\n\nDespite some serious indentation, the existing page offers significantly less clarity about which settings pertain specifically to CVS instead of other aspects of a Jenkins job.\n\n+\n\n[image]\n\n+\n\nIdentifying which settings go with which segment becomes all the more confusing when sub-sections can be re-ordered. To show you what I mean and fit the screen on a single printed page, I am needing to muck with the aspect ratio of today’s screen.\n\n+\n\nThe image on the left (fig 7) shows a 2 step build process, each with sub parameters.\n\n+\n\nThere are some fascinating looking red delete buttons in here, I hope I know exactly what part of the build step I am about to blow away…​. Did I mention these segments can be re-ordered? Care to guess which form inputs will move with which steps?\n\n+\n\n[image]\n\n+\n\nBy contrast, the above screen shows the same 2 build steps with the same parameters. We still have our friend, Mr. Red Delete button, but now it is a good bit clearer who will get blown away.\nAlso, it is considerably clearer which block will be reordered, should I choose to do so.\n\n+\n\nWhat about plugins?\n\n+\n\nIf you are a long-time Jenkins user, you may have a guess as to why some of these changes have been slow in coming, and if you are a plugin developer, you definitely know. These input controls have a lot of extension points in them that allow plugins to influence the content of this configuration screen. As a result, how plugins will respond to even the most minor layout changes is somewhat of a mystery. Further, the GUI control elements that make up the form are available to plugin authors to embed as they see fit in their own GUI elements. As a consequence, we have some serious compatibility issues ahead. These challenges are not at all trivial.\n\n+\n\nFortunately, however, I believe with some careful manipulation and diligent testing we can overcome these challenges. The first set of changes are likely to revolve around a file called “hudson-behavior.js”. This file does most of the Jenkins client-side UI magic. If there is data to be bound to a control, this is the file that is likely to handle it. The difficulty with this file stems from two factors, its age (it is written following Yahoo UI framework patterns which have since been abandoned by Yahoo and the rest of the industry), and a presumption that the page layout will be governed by a single giant HTML table (likely due to the table renaissance happening around the same time, thanks to the emergence of GWT). Regardless of this bit of history trivia, these two issues combine to make changes to the HTML DOM structure of any Jenkins page problematic. Methods such as “findFollowingTR” assume a very rigid parent-child element positioning based on page layout rather than on the logical relationship between the data elements. The good news here is that despite some of their unfortunate names, can be refactored to both find the relevant element based on today’s table structure as well as a future logical nesting of related elements. With that change in place, Jenkins will continue to function as it always has and a future configuration DOM structure can share the same infrastructure.\n\n+\n\n+\nThe second step here will be finding efficient ways to integrate more modern Javascript libraries, such as JQuery and Bootstrap into the Jenkins GUI. We will want these libraries to be easier and cleaner for plugin authors to access than PrototypeJS and Yahoo UI are today. Likely this will involve using a Browserify/Requirejs like pattern to control script inclusion in page to avoid naming conflicts, excessively file attachment and global space pollution.\n\n+\n\nThe final step would then be to begin amending, replacing and augmenting the Jelly based form control set, and thus, transforming the look and behavior of the Jenkins UI. As always, Jenkins is an open community, and we at CloudBees view that as a cherished cornerstone of our own corporate culture. Thus, at every phase of this undertaking we are eager to solicit feedback from and encourage participation by you the members of the community. Feel free to comment directly on this article. Additionally, I am maintaining and active thread on the Jenkins Developer group ( https://groups.google.com/forum/#!topic/jenkinsci-dev/6BdWZt35dTQ). I am looking forward to hearing from you.","title":"Advancing the Jenkins GUI: Configuring Items in Jenkins","tags":["video","screencast","juc","core","releases","feedback","development","just for fun","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"gusreiber","html":"","id":"gusreiber","irc":null,"linkedin":null,"name":"Gus Reiber","slug":"/blog/author/gusreiber","twitter":null}]}},{"node":{"date":"2015-04-06T00:00:00.000Z","id":"84d17108-8937-564b-9bc9-c4e94077a9fe","slug":"/blog/2015/04/06/good-bye-java6/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/6_(number)[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/6/62/U%2B2678_DejaVu_Sans.svg/200px-U%2B2678_DejaVu_Sans.svg.png[image] +\n] +\n\n+\n+\n\n+\nAbout two years ago, we bumped our runtime JRE requirement https://github.com/jenkinsci/jenkins/commit/3431a7cba[from Java5 to Java6]. And so the time has come once again for us to finally move on to Java7. Because of all the new language features, https://groups.google.com/forum/#!topic/jenkinsci-dev/sw_WepGw0Pk[many of us the developers really wanted to move right on to Java8], but after much discussion we settled to move to Java7 first and then to Java8. +\n +\n\n+\nSo here is the plan: +\n +\n\nStarting Jenkins 1.608, we start advertising that we will be moving on to Java7, which is why you are reading this.\n\nStarting Jenkins 1.610 (2 weeks from now), we will ship so-called 51.0 class files that will only load on Java7+. This gives some more warnings to those who don’t read our blog.\n\nUnless we hear uproar from users, starting around 1.614 (6 weeks from now), core developers will start linking directly to new Java7 APIs. We will move on to servlet 3.0 at this time as well.\n\nThe current 1.596 line of LTS will remain compatible with Java6, and most likely the next LTS line will also remain compatible with Java6. So LTS users have additional 3 months before upgrading to Java7.\n\n+\n+\n\n+\nJava7 has more NIO improvements that allow us to do some file I/O in more portable manner. Similarly, servlet 3.0 will help us build more interactive UI. +\n +\n\n+\nYour Jenkins controller and all the build agents need to be running on Java7+. Similarly, those who are using the Maven2 job type must also run Maven with Java7+. However, this does not prevent you from using Jenkins to build your applications that are targeted to earlier versions of Java. According to our research, most platforms people run Jenkins on has been already shipping Java7 for quite some time now. But if you have a good reason why we shouldn't force everyone to Java7, please let us know ASAP. +\n +\n\n+\nTo put this into context, https://www.java.com/en/download/faq/java_7.xml[Oracle will not release updates to Java7 past April 2015]. We have always recommended users to run the latest general release according to Oracle, which is currently Java8. As I said, I suspect we will be requiring Java8 pretty soon. So if you are still running Java6, you should definitely upgrade to Java8. +","title":"Good bye Java6","tags":["development","core","feedback"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2015-03-06T00:00:00.000Z","id":"903172dd-2b46-5e97-beaa-f5ef62e66756","slug":"/blog/2015/03/06/google-apps-sso-no-longer-supported-in-jenkins-openid-plugin/","strippedHtml":"+\n_This is a guest post from Owen Mehegan (aka autojack)_ +\n +\n\n+\n\n+\nhttps://commons.wikimedia.org/wiki/Sunset[image:https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Sunset_Marina.JPG/320px-Sunset_Marina.JPG[image,width=200]] +\n\n+\n\n+\nIn 2014 Google announced that they will be shutting down their OpenID 2.0 authentication endpoint and replacing it with Google+ Sign-in, a library built on top of OpenID Connect. *The old Google endpoint will shut down on April 20th, 2015!* Accordingly, if you are using the Jenkins OpenID plugin to authenticate users with the ‘Google Apps SSO’ feature (typically when Google hosts your personal or corporate email), you need to upgrade. Ryan Campbell took the initiative to develop the new Google Login plugin which implements the Google+ Sign-in functionality. This is the recommended solution going forward. Follow the steps https://wiki.jenkins.io/display/JENKINS/Google+Login+Plugin[here] to configure it for your site. *Note that you DON’T need to have a Google+ social network account/profile. Any Google account can be used.* +\n +\n\n+\nIf you find yourself locked out of your Jenkins system after the old endpoint is shut down you will need to follow the steps https://wiki.jenkins.io/display/JENKINS/Disable+security[here] to disable Jenkins security temporarily. Then you can connect without authentication and switch to the Google Login plugin. You will probably want to uninstall the old OpenID plugin at that point as well. +\n +\n\nReferences:\n\n+\n\nShutdown announcement from Google\n\nJENKINS-23431, bug tracking this fix\n\nOld OpenID plugin\n\nNew Google Login plugin\n\n+","title":"Google Apps SSO no longer supported in Jenkins OpenID plugin","tags":["development","guest post","plugins"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-12-03T00:00:00.000Z","id":"fadbff98-025d-5ffb-9418-de5aacfe3546","slug":"/blog/2014/12/03/workflow-plugin-is-1-0/","strippedHtml":"Jenkins started with a notion of jobs and builds at heart. One script is one job, and as you repeatedly execute jobs, it creates builds as records. As the use case of Jenkins gets more sophisticated, people started combining jobs to orchestrate ever more complex activities.\n\nA number of plugins have been developed to enable all sorts of different ways to compose jobs, and many are used quite successfully in production. But this resulted in a certain degree of complexity for users to figure out how to assemble these plugins.\n\nSo we felt the need to develop a single unified solution that subsumes all these different ways to orchestrate activities that may span across multiple build agents, code repositories, etc. Various inputs from users as well as other plugin developers played a key role.\n\nThe result of this is the workflow plugin, which is what a number of us, including Jesse Glick an myself, are focused on in the past few months.\n\nThe plugin approaches the problem by defining a DSL for you to describe an execution of a job. Various convenient primitives are available, such as executing shell scripts, checking out the source code, obtaining an executor or a build workspace, etc. All sorts of classic existing plugins contribute their functionalities into this DSL, such as recording test results, fingerprints, or calling into other existing jobs. This allows you to leverage higher-level functionalities and report comprehension capability into a workflow. Similarly, you can leverage the ability of Groovy, the host language of workflow DSL, to define control flows, abstractions, and reuse.\n\nA key feature of a workflow execution is that it’s suspendable. That is, while the workflow is running your script, you can shut down Jenkins or lose a connectivity to a agent. When it comes back, Jenkins will still remember what it was doing, and your workflow script resumes execution as if it was never interrupted. A technique known as the \" continuation-passing style\" execution plays a key role in achieving this.\n\nI’m very happy to report that the workflow plugin is finally 1.0. This version runs on the latest 1.580-based LTS. and we created a docker image for you to play with too. There’s also a JUC presentation that explains this. We are working toward 1.0 release within this year, and in the meantime, the syntax is stable enough to allow you to start designing workflows today.\n\nWe’ve been hearing a lot of good feedbacks and enthusiasm for this new effort. Please let us know what you think.","title":"Workflow plugin is 1.0","tags":["development","plugins","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-08-28T00:00:00.000Z","id":"9b8568a6-9659-597e-80e4-a3f253035618","slug":"/blog/2014/08/28/workflow-plugin-code-walk-through/","strippedHtml":"Jesse and I will walk through the source code of the workflow plugin, highlights key abstractions and extension points, and discuss how they are put together.\n\nIf you are interested in developing or retrofitting plugins to work with workflows, I think you’ll find this session interesting.\n\nThe event will be on Google Hangout tomorrow. The time of the day is the same as usual office hours.","title":"Workflow plugin code walk-through","tags":["development","meetup","plugins","screencast","tutorial","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-08-12T00:00:00.000Z","id":"4d06a8ac-058a-5589-bb0d-1d1c493fbfd1","slug":"/blog/2014/08/12/official-jenkins-lts-docker-image/","strippedHtml":"+\n(This is a guest post from https://twitter.com/michaelneale[Michael Neale]) +\n\n+\n+\n\n+\nRecently at the Docker Conference (DockerCon) the https://hub.docker.com[Docker Hub] was announced.\n\n+\n+\n\nThe hub (which includes their image building and storage service) also provides some \"official\" images (sometimes they call them repositories - they are really just sets of images).\n\n+\nSo after talking with all sorts of people we decided to create an official https://registry.hub.docker.com/_/jenkins/[Jenkins image] - which is hosted by the docker hub simply as \"jenkins\".\n\n+\n+\n\nSo when you run \"docker pull jenkins\" - it will be grabbing this image. This is based on the current LTS (and will be kept up to date with the LTS) - but does not include the weekly releases (yet). Having a jenkins image that is fairly basic (it includes enough to run some basic builds, as well as jenkins itself) built on the LTS, on the latest LTS of Ubuntu seemed quite convenient - and easy to maintain using the official Ubuntu/Debian packaging of Jenkins.\n\n+\n\n+\nDocker is a great way to try and use server based systems - it brings all the dependencies needed and the images actually are portable (ie anywhere docker runs you can run docker images). There are official images for many popular server platforms (redis, mysql, all the linux distros and so on) so it seemed crazy to not include Jenkins along with this list. +\n\"docker run -p 8080:8080 jenkins\" is all you need to get going with LTS Jenkins now. +\nYou can also use \"docker run jenkins:1.554\" to get the latest of that lineage of LTS releases, or pick a specific one: \"docker run jenkins:1.554.3\" if you like. Leaving off a version assumes the latest. Check the https://registry.hub.docker.com/_/jenkins/tags/manage/[tags] page to see what is available. +\n\n+\n+\n\n+\nYou can read more and see how you https://registry.hub.docker.com/_/jenkins/[can use it here.] +\n\n+\n+\n\n+\nThere has been some questions and discussions on how to make use of Jenkins with the docker hub for creating new and interesting docker image based workflows for deployment. +\nIn fact, Jenkins featured in one of the first slides of the first keynote of docker con: +\n +\nimage:https://3.bp.blogspot.com/-qAC-f6ceVho/U5rfqpzj3VI/AAAAAAAAC8w/Ta4pzEhm-8A/s1600/Screen+Shot+2014-06-13+at+8.34.10+pm.png[image] +\n +\nTo make this dream a reality some additional https://wiki.jenkins.io/display/JENKINS/DockerHub+Plugin[plugins] had to be created - but this leaves the possibility of working with the docker hub (builds, stores images) and Jenkins (workflow, testing, deployment) to build out some kind of a continuous pipeline for handling docker based apps. I attempted to describe this more https://developer-blog.cloudbees.com/2014/07/announcing-dockerhub-jenkins-plugin.html[here]. +\n\n+\n+\n\n+\nThis image is maintained in this github https://github.com/cloudbees/jenkins-ci.org-docker[repo] and the official images are build by the https://github.com/docker/stackbrew[\"stackbrew\" system]. (We may move this repo to the jenkinsci github group shortly so keep an eye out). +\n\n+\n+\n\nIt will be interesting to watch this grow and change.\n\n+","title":"Official Jenkins LTS docker image","tags":["development","core","lts","docker"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-08-11T00:00:00.000Z","id":"2235bd0e-d668-56ae-9fb4-d4d03b916fac","slug":"/blog/2014/08/11/user-interface-refresh/","strippedHtml":"+\nThis is a guest post from https://github.com/tfennelly[Tom Fennelly] +\n\n+\n+\n\n+\nOver the last number of weeks we've been trying to \"refresh\" the Jenkins UI, modernizing the look and feel a bit. This has been a real community effort, with collaboration from lots of people, both in terms of implementation and in terms of providing honest/critical feedback. Lots of people deserve credit but, in particular, a big thanks to https://github.com/kevinburke[Kevin Burke] and https://github.com/daniel-beck[Daniel Beck]. +\n +\n\n+\nYou're probably familiar with how the Jenkins UI currently looks, but for the sake of comparison I think it's worth showing a screenshot of the current/old UI alongside a screnshot of the new UI. +\n +\n\n+\nhttps://jenkins-ci.org/sites/default/files/images/current.png[ +\nimage:https://jenkins-ci.org/sites/default/files/images/current.preview.png[image,width=500] +\n] +\n\n+\n*_Current / Old Look & Feel_* +\n\n+\nhttps://jenkins-ci.org/sites/default/files/images/new.png[ +\nimage:https://jenkins-ci.org/sites/default/files/images/new.preview.png[image,width=500] +\n] +\n\n+\n*_New Look & Feel_* +\n\n+\n+\n\n+\nAmong other things, you'll see: +\n\nA new responsive layout based on elements (as opposed to elements). Try resizing the screen or viewing on a smaller device. More to come on this though, we hope.\n\nUpdated default font from Verdana to Helvetica.\n\nNicer form elements and nicer buttons.\n\nSmoother side panels e.g. Build Executors, Build Queues and Build History panes.\n\nSmoother project views with more modern tabs.\n\n+\n+\n\n+\nYou might already be seeing these changes if you're using the latest and greatest code from Jenkins. If not, you should see them in the next LTS release. +\n +\n\n+\nWe've been trying to make these changes without breaking existing features and plugins and, so far, we think we've been successful but if you spot anything you think we might have had a negative effect on, then https://issues.jenkins.io[please log a JIRA] and we'll try to address it. +\n +\n\n+\nOne thing we've \"sort of\" played with too is cleaning up of the Job Config page - breaking into sections and making it easier to navigate etc. This is a big change and something we've been shying away from because of the effect it will have on plugins and form submission. That said, I think we'll need to bite the bullet and tackle this sooner or later because it's a big usability issue. +","title":"User Interface Refresh","tags":["development","core","guest post","news"],"authors":[{"avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg","srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/f81fe/kohsuke.jpg 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/01b1b/kohsuke.jpg 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/edb43/kohsuke.jpg 128w","sizes":"(min-width: 128px) 128px, 100vw"},"sources":[{"srcSet":"/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/035c3/kohsuke.webp 32w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/273f8/kohsuke.webp 64w,\n/gatsby-jenkins-io/static/dd191cfa3b1158515bff16d455e6117b/e3840/kohsuke.webp 128w","type":"image/webp","sizes":"(min-width: 128px) 128px, 100vw"}]},"width":128,"height":148}}},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"/blog/author/kohsuke","twitter":"kohsukekawa"}]}}]}},"pageContext":{"tag":"development","limit":8,"skip":8,"numPages":9,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}