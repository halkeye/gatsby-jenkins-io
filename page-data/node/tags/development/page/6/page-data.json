{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/development/page/6",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2011-08-08T00:00:00.000Z","id":"34e23e7c-2907-539a-934f-3d4a07f89787","slug":"/blog/2011/08/08/jruby-branch-merged/","strippedHtml":"Yesterday, Kohsuke announced that the 'jruby' branch of jenkins-core had been merged to master.\n\nThis doesn’t mean that we’re done and that you can go forth and write pure ruby plugins…​ not by any stretch of the imagination. Instead, what it does mean, is that the Jenkins mainline is much more friendly to runtime analysis of classes with which it is not familiar.\n\nThe problem\n\nWhen analyzing plugin classes, Jenkins uses just about every kind of metadata you can think of to get information about them: Class name, Field names, method names, member modifiers, annotations, you name it. It even uses the containing class relationship for inner classes to match Descriptors with what they describe.\n\nIt’s all a great example of convention over configuration (CoC). In fact, I’ve never really seen CoC implemented in a Java project before as successfully as it has been in Jenkins. Plugin authors don’t have to duplicate any metadata that Jenkins can figure out for you — and it’s alot! The drawback though, is that extensions depend very heavily on conforming to the structure of a conventional Java class.\n\nThe changes in this merge, and in several of the modules on which Jenkins depends, allow more than ever to get this information by asking an object directly rather than querying its private class structure.\n\nThe Kicker\n\nMany of theses changes aren’t even JRuby specific! While they do enable JRuby integration, They’re really just making things more friendly for dynamic languages in general. So, in theory, it should pave the way for others like JavaScript and Python.\n\nWhere now?\n\nWe’re still working on the ruby runtime and tools which will provide as crisp a Ruby development experience as we can. I don’t want to proffer an estimate of when those will begin to be useable, but it is important to mark this very important milestone and explain what it does and does not mean.\n\nWe need you!\n\nThere is still much work to be done to enable a writing Jenkins plugins in Ruby, we are looking for people who know Ruby and feel like pitching in: writing Rake tasks, improving the glue layer, documentation, etc.\n\nIf you’re interested, most of the action is happening on the jenkinsrb@googlegroups.com mailing list, so join us!","title":"JRuby Branch merged!","tags":["development","core","jenkinsci","ruby","jruby"],"authors":[{"avatar":null,"blog":null,"github":"cowboyd","html":"","id":"cowboyd","irc":null,"linkedin":null,"name":"Charles Lowell","slug":"blog/author/cowboyd","twitter":null}]}},{"node":{"date":"2011-06-24T00:00:00.000Z","id":"cb3ffe27-cb69-54a2-a9a7-d1b0c74e1071","slug":"/blog/2011/06/24/ruby-plugins-hack-session-notes-6-23-2011/","strippedHtml":"You know that the night is going to be productive whenever @kohsukekawa shows up, and last night was no exception. We talked about problems on the horizon, potential solutions, and then I spent the last half hour ripping a bit of code.\n\nThe truth of the matter is that most of the changes that have to be done to Jenkins core have already been made, so now the bulk of the heavy lifting falls to the Ruby side of things (right now, me).\n\nAnyhow, on to the notes!\n\nAttendees\n\n@kohsukekawa, @cowboyd\n\nextract more stuff into the jenkins-plugins.rb support library (@cowboyd)\n\nWe’re in the process of extracting, normalizing, documenting all the goop that’s currently residing in the ruby plugins playground into a formal plugin support gem called jenkins-plugins https://github.com/cowboyd/jenkins-plugins.rb\n\nrecruit Rubyists to implement non-Jenkins specific code (@kohsukekawa)\n\nIf you know Ruby and would like to be able to write Jenkins plugins with it, but don’t know the first thing about Jenkins and/or JRuby, that’s OK. You can help by implementing some of the cucumber features found in that repo\n\n@kohsukekawa is going to be knocking on your door to ask if you’re ready to step up, so I hope you’ve been nice this year!\n\ntesting strategy (@cowboyd, @kohsukekawa)\n\nRuby folk love their tests, and a plugin develompent solution won’t be complete unless testing is a breeze. That means that as we extract the plugin support library, we take make sure you can test plugin classes in isolation.\n\nOn the Jenkins side, KK will think about how to run tests that require a full Jenkins environment. A system like this exists currently for testing java plugins, but some thought might be required on how to do this for Ruby.\n\npackaging reloaded (@kohsukekawa)\n\nKK is going to jump in and write some rake tasks to take a ruby plugin structure and package it into a valid .hpi file, and with no maven involved.  According to him, Ruby plugins aren’t the only system that wants to run maven-free. There is desire to be able to do plugin development with Gradle (another Java build system), so this could be a double win.\n\ndifferent schedule (@kohsukekawa)\n\n8:30pm Central in North America, doesn’t seem to be a very good time. Especially for hackers in Asia Pacific. KK will investigate a new time that works for everybody and encourages more participation.","title":"Ruby Plugins Hack Session Notes 6/23/2011","tags":["development","core","ruby","jruby"],"authors":[{"avatar":null,"blog":null,"github":"cowboyd","html":"","id":"cowboyd","irc":null,"linkedin":null,"name":"Charles Lowell","slug":"blog/author/cowboyd","twitter":null}]}},{"node":{"date":"2011-05-27T00:00:00.000Z","id":"02fff5f5-8fad-51e9-8cac-746108f3440f","slug":"/blog/2011/05/27/ruby-plugins-hack-session-5-27-2011/","strippedHtml":"After a one week hiatus, we returned to the weekly hack session on a mission light up the sky with fire!\n\nAttendees\n\nCharles Lowell, Rasheed Abdul-Aziz, Hiroshi Nakamura\n\nDiscussion/Accomplished\n\nHow to manage the different ScriptingContainers inside the Jenkins\n\nrenamed the experimental repo where we’ve been doing all of our development from fog.hpi to the more aptly name [ https://github.com/cowboyd/jenkins-ruby-plugins-playground ]\n\nstarted a separate gem for housing the support libraries for jenkins here [ https://github.com/cowboyd/jenkins-plugins.rb ]\n\nstarted with more formal definition of the plugin API there.","title":"Ruby Plugins Hack Session 5/27/2011","tags":["development","core","ruby","jruby"],"authors":[{"avatar":null,"blog":null,"github":"cowboyd","html":"","id":"cowboyd","irc":null,"linkedin":null,"name":"Charles Lowell","slug":"blog/author/cowboyd","twitter":null}]}},{"node":{"date":"2011-05-12T00:00:00.000Z","id":"a0c76b9b-3d19-504c-99d6-871e82deabe5","slug":"/blog/2011/05/12/ruby-plugins-hack-session-5-12-2011/","strippedHtml":"[ Editor’s Note: For the past few weeks Jenkins community member Charles Lowell has been working with Kohsuke on adding support for building plugins in Ruby. As part of this effort, Charles has been hosting weekly hack sessions via WebEx ]\n\nAs always, last night’s Ruby Plugins hack session was a pleasure. Below is a quick notation of what items were discussed and/or accomplished followed by next steps to be taken my those in attendance.\n\nDiscussion/Accomplished\n\nRuby Plugin project structure and how to bundle into an .hpi file.\n\nReview of the new XSTREAM serialization method\n\nAPI for marking fields as transient\n\nWhat mods, if any, are required to get .hpl to work with Ruby plugin\n\nNext Steps\n\nCharles\n\nto research what can be shared between JRuby ScriptingContainer s\n\nAPI for unmarshaling hooks on serialized ruby objects\n\nChange the name of the repo :)\n\nDocument…​ something!\n\nKohsuke\n\ntest more view functions\n\nadd debug mode outside of hpi:run","title":"Ruby Plugins Hack Session 5/12/2011","tags":["development","core","plugins","ruby"],"authors":[{"avatar":null,"blog":null,"github":"cowboyd","html":"","id":"cowboyd","irc":null,"linkedin":null,"name":"Charles Lowell","slug":"blog/author/cowboyd","twitter":null}]}},{"node":{"date":"2011-05-04T00:00:00.000Z","id":"b21dd15f-4260-56c9-b4eb-4908a153c45a","slug":"/blog/2011/05/04/hamburg-hackathon-a-great-success/","strippedHtml":"+\nThanks to the kindness of https://www.bigpoint.net/[BigPoint GmbH] and Kutzi, we had the first Jenkins Hackathon in Europe, in a very large and airly conference room in their Hamburg campus, on a nice sunny Sunday of May 1st. About 10 people came, including the https://wiki.jenkins.io/display/JENKINS/Static+Code+Analysis+Plug-ins[static code analysis plugin] fame Ullrich Hafner, https://wiki.jenkins.io/display/JENKINS/Android+Emulator+Plugin[Androd emulator plugin] fame https://twitter.com/orrc[Christopher Orr], the https://wiki.jenkins.io/display/JENKINS/Instant+Messaging+Plugin[instant messenger plugin] (and others) fame https://twitter.com/#!/kutzi[Christoph Kutzinski]. Some of us came from pretty far away places like Munich, Bonn, and Netherland. There was a good mix of existing developers and new developers, too. +\n +\n\n+\nDuring the hackathon, new folks developed whopping three plugins — a security realm that connects to https://github.com/jenkinsci/kerberos-authenticator-plugin[Kerberos (password entering kind, not SSO)], https://github.com/jenkinsci/builton-column-plugin[a plugin that adds a list view column to show where the last build was done], and https://github.com/jenkinsci/extra-columns-plugin/[another plugin that attempts to collect small list view column implmentations]. German translations were improved, automated installation of Android SDKs are discussed and its implementation strategies explained. I've done my share of contribution by working on https://github.com/jenkinsci/jruby-xstream[XStream support for JRuby], which is one of the ground work necessary for JRuby-based Jenkins plugin development, and I also showed the prototype Groovy-based templating that can potentially supercede Jelly. There were additional exchange of tips and tricks, how you do this and that. +\n +\n\n+\nStrong coffee and engaged conversations kept me awake all day, although German keyboard layout (on top of usual IDE difference + Mac/PC difference) made it hard to code on other people's computers, but all in all it was a very productive hackathon. In fact, the best ever. We wrapped up around 7pm and headed to a seafood restaurant near Elbe river, stayed there until 11pm-ish. +\n +\n\n+\nThe next hackathon is planned in Paris toward the end of the month. I'm looking forward to another productive Hackathon, so if you are nearby, please https://www.meetup.com/jenkinsmeetup/events/17178842/[RSVP and join us]. +","title":"Hamburg hackathon a great success!","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2011-03-13T00:00:00.000Z","id":"8e9624ea-c26b-5ad5-a5d4-3668368eba52","slug":"/blog/2011/03/13/jenkins-hits-1-400/","strippedHtml":"+\nhttps://jenkins-ci.org/[Jenkins] is now at 1.400 (as of last Monday, yes, I know. But better late than never...). As with https://weblogs.java.net/blog/2009/04/22/hudson-hits-1300?force=752[1.300] and https://weblogs.java.net/blog/kohsuke/archive/2008/03/hudson_hits_120.html?force=824[1.200], this release doesn't particularly signify any substantial major release, but nonetheless it is a milestone for those of us who are involved in the project — I think repeating something 400 times is something one can be proud of. It's a bit like climbing a mountain. Left foot, right foot, left foot, right foot, ... and when you look up, voila! +\n +\n\n+\nIn 2 years since 1.300, which was April 2009, we've added a lot of features. We now have a CLI to manipulate the server, auto-installation of JDK/Ant/Maven to simplify cluster management, concurrent builds of the same job, community-contributed localizations to 20+ languages, boolean expression over the job/label assignment control, parallel initialization based on a dynamically built acyclic directed graph, console annotations to enrich the build output, far more extensible queue (that enabled a lot of plugins), Windows 7 / Vista support, improved controller/agent communication stability, Maven 3 support, and then all around performance improvements, in memory footprint, in startup time, and in page rendering speed. +\n +\n\n+\nAnd of course, we had to change the name of the project. That was a real distraction, but now that the divorce is over, things have been https://bobbickel.blogspot.com/2011/03/jenkins-vs-hudson-time-to-upgrade.html[moving well] for Jenkins. I guess any organization (including any sizable OSS project) is really more than sum of all individuals. If you take a store of Target and replace all its workers by those of nearby Staples, it'll probably not work out well. I think https://jenkins-ci.org/why[people understand that]. +\n +\n\n+\nAnd on the positive side, I do think we came out stronger. We are now running https://jenkins-ci.org/node/280[governance meetings on IRC], we now have https://jenkins-ci.org/content/jenkins[somewhat more formal governance structure]. The core development is actually accelarating with the help of https://github.com/jenkinsci/jenkins/graphs/impact[many new developers], such as Olivier Lamy, (scroll to the right), and https://twitter.com/#!/jenkins_release[plugin releases kept coming at amazing rate] — we are now at 350+ plugins, more than doubled since 1.300. +\n +\n\n+\nLooking at future, we are working on a number of new initiatives in the community, too. For example, Arnaud Héritier is working on revisiting https://issues.jenkins.io/[our JIRA project structure], Andrew Bayer is running a contest for new logo, Tyler is in process of getting additional hardwares at OSUOSL for the project. I'm also doing a lot of things, but for example, I'm going to write a proposal to start a stable patch releases of Jenkins that only consists of backported important bug fixes, in addition to the current weekly release model. Several large users maintain private branches of Jenkins, and so I think it makes a lot of sense for those folks to align their efforts around this release line. I'm also thinking that we could launch a community acceptance testing (CAT) effort around this, much like https://qa.netbeans.org/processes/cat/67/faqs.html[NetBeans] and https://glassfish.java.net/quality/portal/[GlassFish] have done it. I think the first stable release line would branch off from 1.400, so if anything that's another reason you should upgrade to 1.400. +\n +\n\n+\nWhen I reflect on the project, I'm surprised at just how much work there is to be done, after so much that has been achived. But I'm still excited at what we can do with this platform. I thank everyone for their continued patoronage of Jenkins, and I hope to see more of you in the mailing lists, in the chat rooms, and in the meet-up events. And here is https://en.wikipedia.org/wiki/Buzz_Lightyear[to infinity and beyond!] +\n +\n\n+\n(Cross-posted to https://kohsuke.org/2011/03/13/jenkins-hits-1-400/[Kohsuke's blog])","title":"Jenkins hits 1.400","tags":["development","core"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-09-02T00:00:00.000Z","id":"9cbddb28-b3f3-50db-851e-8dc3b544dec7","slug":"/blog/2010/09/02/recent-label-and-matrix-project-improvement/","strippedHtml":"Today, I’d highlight two recent improvements to the label and matrix projects.\n\nWhen you have multiple agents in your Hudson build farm, you can use labels to classify agents by their capability/environment/architecture/etc. For example, your one agent might have “32bit” and “windows” label, while another one might have “linux”, “ubuntu”, and “64bit.” (with plugins like platform-labeler plugin, you can attach labels automatically, too.) Or if you do Selenium testing, you might add browser names as labels to indicate which agent has which browser available.\n\nWith such set up, you then specify that such and such jobs can be only run on such and such labels. For example, you might say your “test-foo” job requires the “windows” label, while your “compile-bar” job might require the “macos” label.\nStarting 1.372, Hudson now lets you use boolean expressions here, instead of just specifying one label as the requirement. For example, your “seleniumTest-zot” job can now say it requires “windows&&firefox” since it’s meant to run on Windows with Firefox. Or if your job requires a shell script, you might say “!windows” to indicate that it has to be run somewhere that’s not Windows.\n\nLabels are also often used in the context of the multi-configuration project (a.k.a. matrix project.) In a multi-configuration project, you specify what to execute to build your project, then specify a number of “axes” that represents the variable and their possible values to execute a build. There are several different kinds of axes (and this is of course extensible), and one of them is the label axis.\n\nFor example, say you have a test suite that you want to run on Windows, Linux, and Solaris, to make sure it works correctly under all these environments. In such a case, you define one label axis, and tell Hudson that you have three possible values “windows”, “linux”, and “solaris.” When you build this project, Hudson will run your build three times by finding appropriate agent that carries the specified label.\n\nIn 1.373, you can now specify multiple label axes. For example, you might have a C++ project that needs to be compiled on various platforms. In such a case, you can define one label axis to be “windows”, “linux”, “solaris”, and you can define another label axis to be “32bit” and “64bit”. This will generate 3x2=6 combinations to be executed.\n\nSometimes the exhaustive combinations do not make sense. In such a case, you can use a filter boolean expression to eliminate some values. You can also use the same mechanism to create a sparse matrix — that is, you tell Hudson to reduce the coverage to 33%, and Hudson will eliminate every 2 out of 3 combinations.\n\nFinally, I’d like to thank Sandia National Laboratories for sponsoring this work, which made it possible for InfraDNA to provide this feature to the community. People often think that contributing code is the only way to give back to the project, but sponsoring features like this is another great way to do it.","title":"Recent label and matrix project improvement","tags":["development","core","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2010-07-28T00:00:00.000Z","id":"a07fba72-78a8-535c-9379-13f2b06ac4db","slug":"/blog/2010/07/28/hosting-your-hudson-plugin-at-github/","strippedHtml":"For as long as Hudson’s had a plugin model and development community, we’ve provided source code and binary hosting through our Subversion repo at java.net. But what if you’re a plugin developer and you don’t want to use Subversion? Well, we have an alternative for your source code: host it with Hudson on GitHub.\n\nTo get this in place, send an email to dev@hudson.dev.java.net (or ask in the IRC channel) asking to get a repository created for your plugin at Github. Make sure to include the name of the plugin and your Github username (and the Github usernames of any other developers who’ll be pushing to your plugin’s repo). If your plugin is already in Github, include the URL for the existing repo so that we can fork it. One of the Hudson admins will create the repository (forking if appropriate) and add the user(s) to the list of users with push access to the Hudson-hosted repositories at Github. Once you hear back from them, you’ll be able to push code to the new repository.\n\nYou will need to make a few changes to your plugin’s POM, as compared to what works for a plugin POM in the java.net Subversion tree.\n\nFirst, add the following to the ++ section:\n\norg.apache.maven.plugins\nmaven-release-plugin\n2.0\n\norg.apache.maven.scm\nmaven-scm-provider-gitexe\n1.3\n\nThis is needed to make sure we’re overriding the parent POM’s SCM provider settings. Next, add the following to the ++ section:\n\norg.jvnet.wagon-svn\nwagon-svn\n1.9\n\nThis is needed because we’re still going to be using wagon-svn to deploy the artifacts in the release process. Lastly, add an ` section, within the ` section of the POM, like the following:\n\nscm:git:git://github.com/hudson/your-plugin-repo.git\nscm:git:git@github.com:hudson/your-plugin-repo.git\nhttps://github.com/hudson/your-plugin-repo\n\nAs with the first section, this is needed to override the default SCM settings in the parent POM. Make sure to change \"your-plugin-repo\" to your actual plugin repository name, of course! It’d also be a good idea to put a link to your Github repo on your plugin’s wiki page at the Hudson wiki, since the default source link will go to Subversion.\n\nNow, with these changes in place, committed and pushed to the master branch in your plugin’s repository, you should be able to run \"mvn release:prepare release:perform\" just as you would if the plugin were hosted in Subversion, with your plugin showing up in the Update Center within a few hours. Be sure that you’ve configured the login information for the java.net Maven repository, as detailed here - this is still needed for plugins hosted at and released from Github, since Hudson’s Maven repository still lives at java.net. If you run into any issues releasing your plugin from Github, first be sure to review the wiki page on plugin hosting, which addresses many of the issues you may encounter when running the Maven release plugin.\n\nIf you’re still stumped, feel free to email the Hudson developer list or ask in the IRC channel for help.","title":"Hosting your Hudson plugin at Github","tags":["development","meta","plugins","tutorial","jenkinsci"],"authors":[{"avatar":null,"blog":null,"github":"abayer","html":"<div class=\"paragraph\">\n<p>Andrew was a core committer to Hudson and the author of numerous plugins.</p>\n</div>","id":"abayer","irc":null,"linkedin":null,"name":"Andrew Bayer","slug":"blog/author/abayer","twitter":"abayer"}]}}]}},"pageContext":{"tag":"development","limit":8,"skip":40,"numPages":9,"currentPage":6}},
    "staticQueryHashes": ["3649515864"]}