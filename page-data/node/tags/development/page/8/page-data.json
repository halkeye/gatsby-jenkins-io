{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/development/page/8",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2010-03-02T00:00:00.000Z","id":"5a7bffdc-f11e-53ee-9d7f-afdabc2a847d","slug":"/blog/2010/03/02/what-new-features-do-you-want-to-see/","strippedHtml":"Michael Donohue, a Hudson developer who has taken on the role of master bug triage guy for Hudson, does something regularly which I’ve really come to appreciate as a Hudson developer myself: he sends out emails to the dev list with the top 10 voted issues at that time. This gives those of us in the Hudson development community a good sense of what’s really important to our users, which in turn helps us decide where to focus our efforts. If you’re interested, you can see the top voted issues over at our JIRA server.\n\nA good number of those issues have been high on the list for a while - I’m actually in the early stages of work on a plugin to answer HUDSON-682, the current #1 most voted-for issue, two and a half years after it was opened. But I’m sure there are some equally useful features Hudson users would like to see added which aren’t on that list. So I’m asking you, dear readers: what are you looking for in Hudson that isn’t already there? Take a look around the existing issues - you may find a request that fits what you want lurking just out of the top 10, needing only your vote to push it into the spotlight. If no one’s yet created an issue requesting your desired feature, well, create one.\n\nOr, better still, write a plugin or contribute a patch yourself!\n\nEditor’s Note: If you’re interested in writing a plugin, you can check out Hudson’s wiki and/or this guide on the subject.\n\nAndrew Bayer ( abayer) has been a contributor to Hudson since early 2009, contributing to the ClearCase plugin, Hudson’s core and a small number of other plugins. Andrew also helps Kohsuke with a lot of Hudson’s project infrastructure, most notably the migration from Bugzilla on Java.net to JIRA running at issues.hudson-ci.org.","title":"What new features do you want to see?","tags":["infrastructure","development","core","just for fun","jenkinsci"],"authors":[]}},{"node":{"date":"2010-03-01T00:00:00.000Z","id":"7adb69a7-a296-50f6-b048-51a522d7b06b","slug":"/blog/2010/03/01/hudson-1-348-released/","strippedHtml":"The latest release, 1.348 of Hudson was pushed out to the repositories on the 26th of Feb. This release is primarily a bugfix release containing a number of fixes (listed below) and a few localization corrections\n\nBugs fixed\n\nFixed a performance problem of the job/build top page when there are too many artifacts.\n\nImproved /etc/shadow permission checks.\n\nDisable auto-refresh in Groovy script console ( issue 5729)\n\nContributors\n\nThis release of Hudson contained 19 commits from 5 different contributors to \"core\":\n\nhttps://twitter.com/ godin [godin]\n\nkohsuke\n\nswiest\n\nmanuel_carrasco\n\nrseguy\n\nAs usual, you can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.348 Released ","tags":["development","feedback","just for fun","links"],"authors":[]}},{"node":{"date":"2010-02-22T00:00:00.000Z","id":"f3a9b5ed-57ae-5584-924b-67bf0b9b498a","slug":"/blog/2010/02/22/hudson-1-347-released/","strippedHtml":"The release of Hudson 1.347 last friday, February 19th, was a relatively \"minor\" one insofar that it contained an assortment of smaller fixes instead of fixes to major regressions (they weren’t any to be fixed) or major features added. There were however some notable commits in this release cycle that didn’t make the changelog just yet, for example https://twitter.com/ godin [godin] committed an ebuild which will allow for a native package of Hudson for Gentoo Linux, joining the ranks of the existing packages for Debian/Ubuntu, FreeBSD, OpenSolaris, openSUSE and RedHat/Fedora Linux. The bundled Subversion plugin was updated and thanks to sogabe and wyukawa the Japanese translations for Hudson got some updates as well.\n\nFor Hudson developers, both plugin and core, this release contains some notable changes from mindless (a.k.a Alan Harder), a number of calls which have been deprecated for over two years have finally been pruned from the code base:\n\nHudson.addListener(JobListener), Hudson.removeListener(JobListener)\n\nEntire listeners.JobListener class (replaced by ItemListener)\n\nOne form of DirectoryBrowser constructor\n\nOne form of Descriptor.configure() (with HttpServletRequest param)\n\nDescriptor.convert(Map) and 4 implementations of this method, and code calling it in Descriptor.readResolve() (this code called save() whenever updating data, so there should be no remaining cases out there)\n\nAlan’s quest for removing deprecated code will likely continue for a while, but this is a good step in the right direction, keeping Hudson’s internals in good working order. Worth mentioning, the influx of plugin releases in the This Week in Plugins from a couple weeks ago, was driven largely by Alan, rummaging through the code of older plugins, updating plugins left and right.\nNow the breakdown for this release:\n\nBugs fixed\n\nFix javascript problem showing test failure detail for test name with a quote character. ( issue 1544)\n\nHudson can incorrectly configure labels for the controller when bleeding edge EC2 plugin is used.\n\nFixed the regression wrt the whitespace trimming caused by 1.346. ( issue 5633)\n\nUnder some circumstances, Hudson can incorrectly delete the temporary directory itself. ( issue 5642)\n\nNewlines in MAVEN_OPTS environment variable can cause problems in other contexts. ( issue 5651)\n\nEnhancements\n\nImproved the form validation mechanism to support multiple controls. ( issue 5610)\n\nAdded message to agent log when it has successfully come online. ( issue 5630)\n\nContributors\n\nThis release of Hudson contained 36 commits from 7 different contributors to \"core\":\n\nabayer\n\nhttps://twitter.com/ godin [godin]\n\nhuybrechts\n\nkohsuke\n\nmindless\n\nsogabe\n\nwyukawa\n\nAs usual, you can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Hudson 1.347 Released","tags":["development","feedback","just for fun","links"],"authors":[]}},{"node":{"date":"2010-02-16T00:00:00.000Z","id":"d8a54963-98f5-5089-94f4-d01ae20a6094","slug":"/blog/2010/02/16/performance-improvements-in-1-346/","strippedHtml":"From time to time, we get a report of out of memory problems in Hudson. It’s frequent enough that we have a dedicated Wiki page that talks about how to obtain information to help devs work on the problem.\n\nSo the latest thread from David Woon was assumed to be one of those ordinary trouble-shooting sessions, but thanks to Gustaf Lundh, it turned out to be a very interesting exercise.\n\nWhat we discovered was that the profiler I was using ( Your Kit Profiler), was basically eliminating all the weak/soft references from the picture entirely. If we are looking for leaks, this was the right thing, as those references will be cleared before VM chokes with OutOfMemoryError. But because of this elimination, I was completely blind to the wasteful memory usage in Jelly, which are only reachable via soft references.\n\nSo I used Eclipse Memory Analyzer and YJP side by side to look into Jelly’s memory usage, and based on that insight, I was able to substantially improve the memory usage and speed of Jelly.\n\nI monitor my production Hudson deployment with VisualGC, and the result was quite noticable. And I hope you’ll notice that the response from Hudson is also snappier.\n\nAll these changes are a part of the latest 1.346 release.\n\nEditor’s Note: Kohsuke Kawaguchi a senior engineer at Oracle (formerly Sun) and is the founder and author of the Hudson project. To learn more about Kohsuke, you can follow him on Twitter or subscribe to his blog.","title":"Performance improvements in 1.346","tags":["development"],"authors":[]}},{"node":{"date":"2010-02-15T00:00:00.000Z","id":"14568d6a-fed2-5300-b85e-0b16bfc36af4","slug":"/blog/2010/02/15/hudson-1-346-released/","strippedHtml":"After some scrambling earlier in the week to get 1.345 out the door, correcting some regressions in 1.344, the Hudson team still rolled out a 1.346 release last Friday, February 12th, 2010. Similar to the past couple releases, 1.346 had a good number of bug fixes, including a a performance fix when dealing with larger build submissions and a substantial revision of the SCM polling code to fix a long-standing issue with the quiet period blocking the build from running ( issue 2180), there were also some additionally memory improvements made to Jelly, the library with which the majority of Hudson’s web interface is rendered, that Kohsuke will detail in a later post.\n\nHere’s the breakdown:\n\nBugs fixed\n\nMaven modules should not be buildable when the parent project is disabled. ( issue 1375)\n\nFixed the broken quiet period implementation when polling interval is shorter than the quiet period. (Changes in SCM impls are needed for this to take effect.) ( issue 2180)\n\nEscape username in URLs in case it contains special characters such as \"#\". ( issue 2610)\n\nFix sidepanel link for People to be visible and show view-specific info when appropriate. ( issue 5443)\n\nImproved HTML rendering, not using closing tags that do not exist in HTML. ( issue 5458)\n\nShow better error message for missing view type selection when creating a view. ( issue 5469)\n\nHudson wasn’t properly streaming a large external build submission, which can result in OOME and unresponsiveness.\n# Enhancements\n\nUse fixed-width font in text area for shell/batch build steps. ( issue 5471)\n\nUse user selected icon size on People page. ( issue 5447)\n\nSpeed/footprint improvement in the HTML rendering.\n\n# Contributors This release of Hudson contained 37 commits from 3 different contributors to \"core\": * kohsuke * mindless * sogabe\nAs usual, you can go grab the [latest .war file]( http://mirrors.jenkins.io/war-stable/latest/jenkins.war) straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade. ---- Updated: Added the \"official\" changelog notes","title":"Hudson 1.346 Released","tags":["development","feedback","just for fun","links"],"authors":[]}},{"node":{"date":"2010-02-10T00:00:00.000Z","id":"bf65fc5d-5128-5381-a704-e7da235ac78d","slug":"/blog/2010/02/10/keeping-your-configuration-and-data-in-subversion/","strippedHtml":"We all know that keeping important files in version control is critical, as it ensures problematic changes can be reverted and can serve as a backup mechanism as well. Code and resources are often kept in version control, but it can be easy to forget your continuous integration (CI) server itself! If a disk were to die or fall victim to a misplaced rm -rf, you could lose all the history and configuration associated with the jobs your CI server manages.\n\nIt’s pretty simple to create a repository, but it isn’t obvious which parts of your $HUDSON_HOME you’ll want to backup. You’ll also want to have some automation so new projects get added to the repository, and deleted ones get removed. Luckily we have a great tool to handle this: Hudson!\n\nWe have a Hudson job which runs nightly, performs the appropriate SVN commands, and checks in. The high-level overview of this job is basically:\n\nAdd any new jobs, users, plugin configurations, et cetera: svn add -q --parents.xml jobs/ /config.xml users/ /config.xml userContent/\n\nRemove anything from SVN that no longer exists (such as a deleted job): svn status | grep '!' | awk '{print $2;}' | xargs -r svn rm\n\nCheck it in! svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\"\nYou’ll want to make sure to use the --non-interactive option for any automated svn operations, as this ensures Subversion won’t hang asking a question but instead fail immediately. You may also need to provide your password with the --password option.\n\nTo make such a Hudson job, create a new job, tie it to the controller (since this is where the configuration files are), set it to build periodically (we use “@midnight”), and add an “Execute shell” build step. Here’s the full script we use, to put into the build step:\n\n# Change into your HUDSON_HOME.\ncd /opt/hudson\n# Add any new conf files, jobs, users, and content.\nsvn add -q --parents *.xml jobs/*/config.xml users/*/config.xml userContent/*\n# Ignore things in the root we don't care about.\necho -e \"warnlogn*.logn*.tmpn*.oldn*.bakn*.jarn*.json\" > myignores\nsvn propset svn:ignore -F myignores . && rm myignores\n# Ignore things in jobs/* we don't care about.\necho -e \"buildsnlast*nnext*n*.txtn*.lognworkspace*ncoberturanjavadocnhtmlreportsnncoverndoclinks\" > myignores\nsvn propset svn:ignore -F myignores jobs/* && rm myignores\n# Remove anything from SVN that no longer exists in Hudson.\nsvn status | grep '!' | awk '{print $2;}' | xargs -r svn rm\n# And finally, check in of course, showing status before and after for logging.\nsvn st && svn ci --non-interactive --username=mrhudson -m \"automated commit of Hudson configuration\" && svn st\n\nYou’ll notice this does some extra things like set the svn:ignores property to provide a relatively clean svn st which it shows before and after the commit for logging purposes. One thing this job doesn’t do is put the build results of your jobs in version control. Because historical build logs and artifacts will never change and are also potentially large, a periodic (daily or weekly) cp or rsync of the jobs directory will still give you restorability while keeping your repository lean.\n\nNow you can sleep well at night knowing that your CI server is safe and sound. If you are doing a similar thing with Hudson or another CI system, let us know about your solution!\n\nEditor’s Note: Mike Rooney is a Software Engineer at Genius.com, provider of real-time marketing automation software connecting marketing and sales. You can read more posts from Mike and other Geniuses at eng.genius.com","title":"Keeping your configuration and data in Subversion","tags":["development","guest post","jobs","just for fun","tutorial"],"authors":[]}},{"node":{"date":"2010-02-09T00:00:00.000Z","id":"985837f3-6dcc-5a5d-bb91-8dd351a4bd3c","slug":"/blog/2010/02/09/whats-going-on-with-the-hudsons-infrastructure/","strippedHtml":"A lot has changed in the Hudson development and distribution infrastructure since last summer - we’ve made a distinct effort to get the quality of our infrastructure to match the quality of Hudson itself. We owe a special thanks to the wonderful folks over at Atlassian - we’re taking advantage of their generous open source license for our bug tracking ( JIRA), wiki ( Confluence), and source repository browser ( FishEye). Obviously, there’s a lot more we can improve going forward - I’ll have another post up soon, looking at some of the ideas we’re kicking around. But for now, take a look at what we’ve already done, below the fold.\n\nThe Hudson war and plugin downloads have all moved off of the unreliable java.net to our own [hudson-ci.org]( https://hudson-ci.org) with the downloads being powered by the same system used for distributing Java, OpenSolaris, and NetBeans. Downloading Hudson and/or plugins is now easier and more reliable.\n\nWe’ve moved issue tracking from java.net’s system to our own JIRA instance, at [issues.hudson-ci.org]( https://issues.hudson-ci.org). As with moving downloads off java.net, we’ve made reporting and browsing Hudson’s issues much faster, easier and more reliable, while still using the same authentication on the back-end as our Subversion and Maven repositories. We’re still working out some kinks in the system but since we’re running our own issue tracker now, rather than using one we didn’t have control over, we’ve got the flexibility we need to adapt our tools to best serve the developer and user communities.\n\nSpeaking of tools we now run ourselves, we’ve put up our own FishEye instance at [fisheye.hudson-ci.org]( https://fisheye.hudson-ci.org) - until that was in place, we’d been relying on Atlassian’s public FishEye instance, which has many other open source projects' repositories available. Getting our own server up means we don’t have to bug the generous folks over at Atlassian every time the java.net SVN server confuses FishEye into failing to update. It also opens the door for us to use Crucible for code review in the future.\n\nHudson’s moved onto Twitter more and more over the last 6-9 months - we’ve got the always fabulous @hudsonci, tweeting new releases, Hudson-related tweets, and more, as well as the #hudsonci hashtag.\n\nThis may not strictly be infrastructure but it’s worth mentioning that we’ve now got native packages and distribution for Hudson for Ubuntu/Debian, Red Hat/Fedora/CentOS, openSUSE, OpenSolaris/Nevada, and FreeBSD.\n\nThis is all in addition to key parts of our infrastructure that haven’t changed: our official wiki, our user and developer mailing lists, our Subversion repository (and a Git mirror on GitHub) and our IRC channel over on Freenode.\n\nOh, and I hear there’s a blog now too.\n\nEditor’s Note: *Andrew Bayer ( abayer) has been a contributor to Hudson since early 2009, contributing to the ClearCase plugin, Hudson’s core and a small number of other plugins. Andrew also helps Kohsuke with a lot of Hudson’s project infrastructure, most notably the migration from Bugzilla on Java.net to JIRA running at issues.hudson-ci.org *","title":"What's going on with the Hudson's infrastructure","tags":["development","core","feedback","just for fun"],"authors":[]}},{"node":{"date":"2010-02-08T00:00:00.000Z","id":"169135b2-865a-557a-8f1e-c315eb236bb2","slug":"/blog/2010/02/08/breaking-hudson-1-345-released/","strippedHtml":"As I mentioned in the footer of the post on the Hudson 1.344 release, there were a couple big regressions in the 1.344 release that were causing a number of users issues (such as issue 5536 and issue 5546).\n\nAs a result, Kohsuke and the team have quickly pushed out a hot-fix release: 1.345. Here’s the break down:\n\nBugs fixed:\n\nUpdate center retrieval, \"build now\" link, and real-time console update was broken in 1.344 ( issue 5536)\n\nFixed the backward incompatibility introduced in HUDSON-5391 fix in 1.344. ( issue 5391)\n\nIf you have already updated to 1.344, your \"Update Center\" is most likely busted and you’ll need to download the hudson.war file manually.\n\nYou can go grab the latest .war file straight from hudson-ci.org or if you’re using a native package, use your package manager to upgrade.","title":"Breaking! Hudson 1.345 Released!","tags":["development","feedback","just for fun","links"],"authors":[]}}]}},"pageContext":{"tag":"development","limit":8,"skip":56,"numPages":9,"currentPage":8}},
    "staticQueryHashes": ["3649515864"]}