{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/development/page/4",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2014-04-01T00:00:00.000Z","id":"5310f9d3-4ee4-5c01-b1d2-55f71e342385","slug":"/blog/2014/04/01/your-java-web-start-slaves-will-be-always-clean/","strippedHtml":"+ +\n\n+\n+\n\n+\nIf you have agents that connect through https://wiki.jenkins.io/display/JENKINS/Distributed+builds#Distributedbuilds-LaunchslaveagentviaJavaWebStart[Java Web Start] (such as https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallSlaveasaWindowsservice%28require.NET2.0framework%29[agents installed as Windows services]), we have a good news for you. +\n +\n\n+\nIn case of a connection loss, this type of agents has been designed to automatically attempt to reconnect to the controller. This makes sense because you want these agents to remain online all the time, even if your janitor trips over the ethernet cable. Unfortunately, it also means that over the time, these agents accumulate gunk, such as mutated static states, any left-over threads or memory leaks, or https://issues.jenkins.io/browse/JENKINS-20913[native libraries that are loaded into JVM]. +\n +\n\n+\nTo prevent that, a better approach is to https://issues.jenkins.io/browse/JENKINS-19055[restart the agent JVM (JENKINS-19055)] and have the new JVM reconnect, instead of having the same JVM reconnect. That would ensure that the agent always stays clean. I've planned to make this change for a while now, and I'm happy to report that this change is finally landing to the upcoming 1.559. +\n +\n\n+\nRestarting JVM is easy on Unix, where I could just https://man7.org/linux/man-pages/man3/exec.3.html[exec(3)] to itself. We've been doing this for ages on controllers, for example when you update a plugin and tell Jenkins to restart. +\n +\n\n+\nThe hard part is to do this for Windows, where the most of the time was spent. I had to improve https://github.com/kohsuke/winsw[windows service wrapper] to support self-restarting services, which turned out to be trickier because Windows service control manager doesn't provide \"restart\" as an atomic operation. It also kills not just the service process itself but all the processes in the group. So I had to double-fork the service wrapper into a separate process group just to restart a service from within itself. +\n +\n\n+\nIn any case, the end result is that if https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallSlaveasaWindowsservice%28require.NET2.0framework%29[you have installed a service through GUI], be it on Windows, Unix, or OS X, agents will restart themselves every time it gets disconnected from the controller. +\n +\n\n+\nI've also taken the opportunity to make `+jenkins-slave.exe+` on the agent self-updating. Every time it connects to the controller, it gets the latest version from the controller. +\n +\n\n+\nIf you have installed Web Start agents as services, make sure to update the local copy of `+agent.jar+` on these agents to 2.37 or later. This \"restart on reconnect\" feature only kicks in when you are running this very recent version of `+agent.jar+`. And yes, we realize it'd be nice for `+agent.jar+` to update itself, which is tracked as https://issues.jenkins.io/browse/JENKINS-22454[JENKINS-22454]. But that's a work for another day. +\n +","title":"Your Java Web Start slaves will be always clean","tags":["development","core"],"authors":[]}},{"node":{"date":"2013-09-23T00:00:00.000Z","id":"897493a6-04e7-556a-b3c1-fe8522ac41a9","slug":"/blog/2013/09/23/literate-builds-wtf/","strippedHtml":"(This is a guest post by Stephen Connolly)\n\nEvery developer, at some stage, will be handed a project to maintain that somebody else was responsible for. If you are lucky, the developer will not have left the organization yet and you get a brief Knowledge Transfer as the developer packs up their desk before heading on to their new job. If you are unlucky, you don’t even get given the details of where the source code is hiding.\n\nNow begins the detective work, as you try to figure out how to build and release the project, set up Jenkins jobs to build the project and run the tests…​\n\nIt doesn’t have to be this way, you know!\n\nWhat if I told you there was a file sitting at the top level that told you exactly how to build the project and do the important things? You’d be interested, wouldn’t you?\n\nWhen I tell you it’s the README file? “But that’s all lies. Nobody keeps that up to date. Argh!!!”\n\nBut what if Jenkins reads the README file and uses it for the build definition? Now you not only have a CI system ensuring that the build definition is correct, but you have less work to do setting up the job.\n\nWhat if, because the build definition is now in Source Control, you can have Jenkins create jobs for each branch with ease? The joy of cheap branches that modern source control systems such as GIT and Mercurial give us, no longer comes with the pain of having to create Jenkins jobs for each branch (and more pain having to remember to tidy up when the branch is gone.)\n\nThat is the promise delivered by the Literate plugin.\n\nHow does it work?\n\nFirst of all, because Jenkins will be looking at all your branches, you need a way to tell Jenkins which branches it makes sense to try and build. For example, if your project lives on GitHub, you are unlikely to want the gh-pages branch to be treated like a branch of your actual code, and there are going to be branches that have a README file, but not one that Jenkins understands, so we will want to ignore them too.\n\nYou tell Jenkins that a branch is one to build by putting a marker file in the root of the branch. By default the marker file is called.cloudbees.md. If the marker file is present and empty, then the literate job type will assume the build instructions are in README.md. If the marker file is present and has build instructions, then the literate job type will just use those instructions.\n\nIn order to make it easy to provide the instructions, there is rather minimal formatting requirements for a literate description of a project’s build commands.\n\nThe minimal description is just a section with the word build and a verbatim code block in that section. Here is the obligatory minimal “hello world” project description:\n\n# Build\n\n    echo hello world\n\nor if you don’t like indenting you could use the GitHub style triple-back-tick\n\n# Build\n\n```\necho hello world\n```\n\nPart of what makes this a literate style of build description is that you can freely intersperse the description of what and why the commands do with the actual commands, e.g.\n\n# Build\n\nWe will greet the world with our great literate project description\n\n    echo -n \"Hello\"\n\nNow that we have announced our intention to greet some people, we need to qualify exactly who we are greeting\n\n    echo \" world\"\n\nThat was just perfect. Time for a cup of tea\n\nThe first section heading containing the word build identifies the section that is assumed to be the build instructions. (The keyword that is searched for is configurable, but not yet exposed in the literate plugin’s UI). The following is also a valid README.md for printing hello world:\n\nOur super hello world project\n=============================\n\nThis is a project to say hello to the world\n\nHow to build\n------------\n\nYou can build this project by running the following command:\n\n    echo hello world\n\nCredits\n-------\n\nThis project would not have been possible without the existence of Assam loose leaf tea.\n\nNow this is all very well, but what about if you need different instructions for building on Windows versus on Linux, and for that matter how does Jenkins know where we should build this project. Plus Mr Joe Random needs to know what he needs to install on his machine to build it for himself.\n\nThe first section containing the word environment identifies the section that contains the details of the environments to run the build on.\n\nHello world project\n===================\n\nThis is a simple hello world literate project\n\nEnvironment requirements\n------------------------\n\nThe project is built and tested by Jenkins on the following build environments, so it is known that the build instructions work on the following environments:\n\n* `windows`\n* `linux`\n\nHow to build\n------------\n\nThe build instructions are platform dependent:\n\n* On `windows`:\n\n        echo \"hello world\"\n\n* On `linux`:\n\n        echo hello\\ world\n\nWhen Jenkins sees bullet points in the environment section it assumes each bullet point corresponds to an environment to run the build on. Each environment is specified by at least one code snippet which helps define the requirements of the environment. By default Jenkins will look for tool installers with the same name as the labels. If it cannot find any matching tool installers it assumes that the labels are Jenkins agent node labels. (The strategy is plugable, but not yet exposed in the UI of literate builds)\n\nWhen you have multiple environments on which to build and test, you have two choices on your build instructions. You can either:\n\nHave one and only one set of commands that work on all environments; or\n\nHave bullet points that cover all the specified environments.\n\nSo for example, if you are building on the following environments:\n\nwindows, java-1.6, ant-1.7\n\nwindows, java-1.6, ant-1.8\n\nwindows, java-1.7, ant-1.8\n\nlinux, java-1.7, ant-1.7\n\nlinux, java-1.7, ant-1.8\n\nYou need to have bullet points in your build section that can match each of those options, but as long as there is a match for every option you are ok. So for example:\n\nANT version finder\n==================\n\nFinding out the version of ANT on various platforms\n\nEnvironments\n------------\n\nNesting bullet points multiplies out the options\n\n* `windows`\n    * `java-1.6`\n        * `ant-1.6`\n        * `ant-1.7`\n    * `java-1.7`, `ant-1.8`\n* `linux`, `java-1.7`\n    * `ant-1.7`\n    * `ant-1.8`\n\nBuild\n-----\n\nThe first match with the highest number of matches wins, so we want windows to get special treatment:\n\n* `windows`\n\n        call ant.bat -version\n\n* `java-1.7`\n\n        ant -version\n\nWe could have picked `linux` for the above if we wanted, but this matching will have the same effect and better illustrates how matching works.\n\nThat is a mostly complete detail of how the build and environment sections work. In general everything except verbatim code blocks and bullet points with code snippets get ignored.\n\nThere are other sections that the literate project type allows for, these are called “task” sections. We haven’t written the code to support them yet, but the idea is that these will work a bit like basic build promotions with the promoted builds plugin. There will be a UI in Jenkins that lets you kick off any of the task sections that you define as being valid for the job type, in pretty much exactly the same was as the promoted builds plugin works.\n\nAfter that, everything else in the README.md is ignored.\n\nHow do I get the test results into Jenkins?\n\nJenkins is not just about build and test. A lot of the utility in Jenkins comes from the additional reporting plugins that are available for Jenkins. (The build step ones are less relevant with literate style projects because you want to give people consuming the content instructions they can also follow)\n\nSo there is additional metadata about your project that you want to give to Jenkins. We put that metadata into a folder called.jenkins in the root of your source control.\n\nThere are two levels of integration that a Publisher/Notifier can have with the literate project type. The first level is a basic XML description of the plugin configuration. If you have ever looked at the config.xml of a Jenkins job, you will be familiar with this format.\n\nIf we have a Maven project and we want to collect the Unit test results in Jenkins we might have a README.md like this:\n\nMaven project with tests\n========================\n\nEnvironments\n------------\n\n* `java-1.7`, `maven-3.0.5`\n\nBuild\n-----\n\n```\nmvn clean verify\n```\n\nAnd then we create a.jenkins/hudson.tasks.junit.JUnitResultArchiver.xml file with the following:\n\n**/target/surefire-reports/*.xml, **/target/failsafe-reports/*.xml\ntrue\n\nThe literate plugin adds an Action to all Free-style projects that allows exporting these XML configuration snippets in a.zip file for unpacking into your project’s source control. Each publisher/notifier has its own file, so it should be easy to mix and match configuration across different projects and enable/disable specific publishers just by adding/removing each publisher’s file.\n\nThe XML itself can be a bit ugly, so there is a second level integration, where a Publisher/Notifier plugin can implement its own DSL. The literate plugin ships with two such DSLs. One for archiving artifacts and the other for JUnit test results. So the above XML file could be replaced by a.jenkins/junit.lst file with the following contents\n\n**/target/surefire-reports/*.xml\n**/target/failsafe-reports/*.xml\n\nNot everything makes sense in source control though…​\n\nThere are always going to be things that you need to configure in Jenkins. So for example there may be some sources of branches that you don’t trust. A good example would be pull requests on GitHub. We have a concept of branch properties in the literate project type that will allow defining what exactly a trusted branch source should be allowed do and what an untrusted branch source should be allowed do. It does not make sense for that information to be embedded within the untrusted branch itself.\n\nSimilarly coordination between different Jenkins projects is something that does not make sense in source control. The names of those Jenkins projects (and even their existence) is not knowable from source control. It does not make sense to keep that information in source control.\n\nInformation about how to map the description of the build environment in the README.md file to the build environments available to Jenkins does not make sense in source control because your Jenkins node configuration details may change over time.\n\nIn other words, literate projects do not remove the need to configure things in Jenkins. They do however remove a lot of the need, and especially the need to tweak the exact build commands and the location of where build results should be picked up from.\n\nWhat’s not done yet?\n\nHere is a list of some things I want to see for literate builds:\n\nA literate build step so that people can use some of the literate magic in their free-style projects while they migrate them to literate-style\n\nSupport for literate task promotion flows (I think Kohsuke has signed up to help deliver this)\n\nExposing the configuration points such as the marker file name (a global config option as well as per-project override) and the keywords to search for in the README.md (this is mostly UI work)\n\nAdding in some support for other markup languages (I’d really like to see AsciiDoc formatted README parsing, e.g. README.asc)\n\nBranch properties for untrusted builds (to do things like restrict the build execution to one explicit environment, put an elastic build timeout in place, wrap the shell commands in a chroot jail, etc)\n\nBranch properties for build secrets (So that the production and staging branches can get the keys to deploy into their respective environments.\n\nCollapsing the intermediate level in the UI when there is only one build environment.\n\nEliminating the double SCM checkout when the backing SCM supports the SCMFileSystem API so that builds work even faster\n\nReusing the GIT repository cache when using GIT branch sources.\n\nSome nicer integration with GitHub (I have most of this done, but I think it would be irresponsible to release this without having the Untrusted branch properties implemented as otherwise Pull Requests could become a vector for abuse)\n\nFinishing the support for Subversion credentials migration from the legacy credentials storage mechanism to the new Credentials plugin storage mechanism (not strictly literate project related, but Subversion is still a popular SCM and until this gets done we cannot release a version of the Subversion plugin with literate project support)\n\nAdding nice DSLs for all the Publishers and Notifiers\n\nAdding SCM support to all the SCM plugins\n\nAdding branch property support for the Build Wrapper / Build Environment / Job Property plugins where that makes sense.\n\nHaving said all that, the core functionality works right now for GIT/Subversion/Mercurial on Jenkins 1.509+, and it is only by playing with this functionality that you can see how this could change the way you use Jenkins.\n\nHow do I try this out myself\n\nLast week Kohsuke set up a new “Experimental” update center in Jenkins OSS. The reason for this new update center is that we have a lot of (potentially disruptive) changes to many plugins and if we started cutting releases, users may get annoyed if they end up upgrading to these plugins until they have all been better tested.\n\nThe “Experimental” update center includes plugins that have alpha or beta in their version number, while the other update centers now exclude those plugin versions.\n\nSo if you want to play with these plugins you need to change your Jenkins instance’s update center URI to:\n\nhttps://updates.jenkins-ci.org/experimental/update-center.json\n\nI would recommend that you use a test Jenkins instance for playing with.\n\n(WARNING: shameless plug) You could also just fire up a Jenkins in the cloud using CloudBee’s DEV@cloud service and follow these handy instructions to enable access to the experimental plugins:\n\nThe 10 best bug reports on literate builds before the Jenkins User Conference next month will receive a prise from CloudBees, Inc. I was able to get a commitment that the prise would be at least a T-shirt. I am hoping to get some more swag added to the prize pool. CloudBees employees or relatives of CloudBees employees are not eligible for the bug report prise!","title":"Literate builds, WTF?","tags":["development","plugins","javaone"],"authors":[]}},{"node":{"date":"2013-09-09T00:00:00.000Z","id":"95af2bb9-3830-5c68-9b16-482e5c1e65e7","slug":"/blog/2013/09/09/loader-io-plugin-developer-interview/","strippedHtml":"This is a guest post by Mike Rowan, VP R&D at SendGrid.\n\n+\n\n+\nimage:https://jenkins-ci.org/sites/default/files/images/loaderio.png[image,width=150,height=150] +\n\n+\n+\n\n+\n*Q: Tell us a bit about what your service and plugin do. Who is it for? What are the highlights of your plugin?* +\n +\n\n+\nA: https://loader.io[Loader.io] is a simple-to-use cloud-based load testing service. The service is designed for developers and people who need to ensure applications are performing as they should. It allows developers to perform large-scale load tests on demand, which lets them understand the scalability and performance of their applications. We realize Jenkins is the preferred build service for a lot of our users, and we know providing a way for them to implement, measure and improve application performance during the continuous build cycle is important. So we wrote a Jenkins plugin that allows load testing to be brought into the continuous build and deployment process with ease. +\n +\n\n+\nQ: Did you have to convince your boss/lawyers to open-source your plugin? What was the pitch?*\n\n+\nA: No, at SendGrid our focus is always to help make developers’ lives easier, and when we can, we like to provide tools that they can hack on. Since the Jenkins platform is itself an open source project, following the same model to provide our plugin made perfect sense. In addition, we encourage others to build on our work, help improve it and ultimately make it better for everyone using it. +\n +\n\n+\nQ: How did you learn how to write a plugin?\n\n+\n+\n\n+\nA: We use the Jenkins platform ourselves, and we leverage a number of the plugins available. Having access to these and the Jenkins documentation gave us a great head start. It was an easy decision to write the Jenkins plugin for loader.io, and the Jenkins community provided both detailed instructions as well as support when we needed it. +\n +\n\n+\nQ: Any gotchas in the experience of developing a plugin that you want to share?\n\n*\n\n+\nA: The overall process of developing the plugin was straightforward and simple, but we did run into some scope creep in the middle of the dev process. We found that since the platform was so easy to write for, it made us keep adding more and more features. Usually this is good, but in the case of our project, we wanted to provide the most value as quickly as possible. So we scaled back, focused on solid execution for the most important features, and are already preparing to launch a new version with the things we reserved for post v1 availability. +\n +\n +\n\n+\nQ: What is the reaction from users so far?\n\n+\n+\n\n+\nA: The users we’ve spoken with love the plugin. In addition we’ve already gotten great feedback from some community members on “nice to have’s” in the plugin, some of which we’re already working on. +\n +\n\n+\nQ: What tips do you share to those who are interested in writing plugins?\n\n+\n+\n\n+\nA: If you have a service that provides value in the build, deployment and post deployment process, then you should be writing a Jenkins plugin. Two things are important for anyone writing a plugin: 1) be sure the plugin you’re writing is going to provide true value (if you need it yourself this is a good sign), and 2) make sure you understand the scope of the project and deliver core features and value first, then focus on some extra things. Providing a valuable plugin sooner than later will help you identify all the right additional features to include, especially when collecting live community feedback. +\n +\n\n+\nSome of the things we focused on early in the process were to identify the core features, and more importantly to make it very easy for users of Jenkins to install, use and interpret the loader.io plugin and results. We wanted to allow users to leverage our plugin for multiple environments and builds with system and global credentials. To do this, we decided to make use of the Credentials plugin (https://wiki.jenkins.io/display/JENKINS/Credentials+Plugin), which is a heavily-adopted plugin that provides a standardized API for plugins to store and retrieve credentials. This plugin allows our users to add and use different credentials in one single Jenkins environment. In addition, we created a new re-run feature which, when used with continuous build and testing, provides a deep view into the performance of an application over time. Finally, we wanted to bring the same UI experience users have in our environment into Jenkins, which we did by preserving the load test report model and making it function the same in the Jenkins UI. Doing this makes it easy for users to have consistency between the UIs and more easily understand the results regardless of where they’re viewing them. +\n +\n\n+\nIt’s very easy to write a Jenkins plugin - I hope these insights will encourage you to write your own. +\n +\n\n+\nps - We’d love your feedback too. Check out our newly-released https://wiki.jenkins.io/display/JENKINS/loaderio[Jenkins plugin] for loader.io and let us know what you think.","title":"Loader.io plugin developer interview","tags":["development","guest post","interview","plugins"],"authors":[]}},{"node":{"date":"2013-09-05T00:00:00.000Z","id":"3e06cc8d-87c3-5968-b579-1eed57d37062","slug":"/blog/2013/09/05/extreme-feedback-lamp-switch-gear-style/","strippedHtml":"+\nThis is a guest post by https://twitter.com/dvaske[Aske Olsson] +\n +\n\n+\nExtreme feedback is an incredibly powerful way to drive quality and accelerate your developer fast feedback loop. +\n +\n\n+\nHaving eXtreme Feedback Devices (XFDs) hooked up to your Jenkins jobs gives everyone on your team instant insight into the current software state. At customer after customer we've seen extreme feedback devices drive significant incremental productivity gains, so about a year ago we started talking about taking the concept mainstream and making it easily available to any development team. So, as a small side-project, we've decided to scratch our own itch and developed an easy-to-deploy, Linux-based, laser-cut, extreme feedback device, specifically designed for Jenkins. It infers a feeling of urgency when the build is broken, and a better sense of a achievement once the problem is fixed. Just connect the XFD to your network, install the \"extreme feedback plugin\" on your Jenkins server and configure which jobs to feedback extremely. +\n +\n +\n\n+\nAt the Jenkins Code Camp in Copenhagen today (with Kohsuke) we've made the lamp speak the name of the developer who broke the build :), improved the plugin's UI in Jenkins, and gotten the the lamp's display to list all the developers who contributed to the last change. Of course you can contribute too, just fork the repositories at https://github.com/switchgears/extremefeedbacklamp[here] and https://github.com/switchgears/extreme-feedback-plugin[here] and create a pull request. +\n +\n\n+\nIf you're interested in trying out extreme feedback in your own team you can order https://web.archive.org/web/20180826231109/https://gitgear.com/xfd/[your own XFD lamp] +\n +\n\n+","title":"Extreme Feedback Lamp, Switch Gear style","tags":["development","feedback","guest post","news"],"authors":[]}},{"node":{"date":"2013-08-01T00:00:00.000Z","id":"ed0ec999-88b5-523c-8e18-21dc59122d1c","slug":"/blog/2013/08/01/2-version-control-plugins-in-beta-testing-before-a-major-release/","strippedHtml":"+\nimage:https://upload.wikimedia.org/wikipedia/commons/4/49/Testing22222.jpg[image,width=150,height=160] +\n\n+\n+\n\n+\nhttps://wiki.jenkins.io/display/JENKINS/Git+plugin+2.0+beta+testing[Git plugin] and https://wiki.jenkins.io/display/JENKINS/TFS+plugin+2.0+beta+testing[TFS plugin] are calling for interested parties to try out their 2.0 beta binaries before they get released. +\n +\n\n+\nGit plugin 2.0 contains a major refactoring and UI simplifications, and TFS plugin contains a rewritten polling logic that does not require a workspace. +\n +\n\n+\nIf you think you'd benefit from these changes, please head to their respective beta testing page and try out the new bits, while we can still change them.","title":"2 version control plugins in beta testing before a major release","tags":["development","feedback","releases","jenkinsci"],"authors":[]}},{"node":{"date":"2013-07-24T00:00:00.000Z","id":"09e534e0-e44f-586f-90d1-da7658ecc78a","slug":"/blog/2013/07/24/faster-slave-classloading/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Chloride[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Calcium_chloride_CaCl2.jpg/320px-Calcium_chloride_CaCl2.jpg[image]] +\n\n+\n+\n\n+\nJenkins comes with https://github.com/jenkinsci/remoting[the remoting library] that it uses to communicate between a controller and agents. This is a pretty awesome library, I think, which served us well. +\n +\n\n+\nOne of the things this remoting layer does it to transfer the Java byte code on demand from the controller to agents on demand. This approach helps us keep agent deployment simple, as you don't have to keep the controller and all the agents in sync, but it also made the agent start-up slower, because none of the byte code loaded to agents are kept around. It was all forgotten once the agent gets disconnected. +\n +\n\n+\nWhen agents are static and stays online for hours, this wasn't a problem at all. But as more and more agents become elastic (think EC2 or CloudBees DEV@cloud), This delay is becoming more and more noticeable. A similar issue happens when the Maven project type, which uses the same remoting library to talk to the running Maven build. +\n +\n\n+\nAnother related performance bottleneck is the round-trip latency. When your agent is far away from a controller, every classloading would incur a network round-trip, and it can add up quickly. This is because Java classloading abstraction is funamentally chatty. +\n +\n\n+\nJesse and I https://issues.jenkins.io/browse/JENKINS-15120[started seriously thinking about this problem] last year, and we've https://github.com/jenkinsci/remoting/pull/10[kept a branch going] to address this problem. +\n +\n\n+\nAfter several trans-atlantic hacking during flights, we were finally able to release this in 1.519. +\n +\n\n+\nStarting this version, the remoting layer uses a local jar file cache to store jar files that were downloaded from the controller. This pretty much eliminated the need to send class files over the wire. +\n +\n\n+\nIn addition, the controller will analyze class files as a agent request them and \"push down\" information about how related other classes should be loaded by the agent. This speculative \"prefetching\" saves the agent from making an expensive network round trip to the controller. +\n +\n\n+\nIn https://jenkins-ci.361315.n4.nabble.com/Efficient-class-jar-prefetching-in-remoting-td4665943.html[my benchmark using Maven builds, the prefetching cut the # of roundtrips to about half]. +\n +\n\n+\nIf you do a lot of Maven builds, or if you have elastic agents, we highly encourage you to upgrade. +\n +\n +\n +\n +","title":"Faster agent classloading","tags":["development","core"],"authors":[]}},{"node":{"date":"2013-07-01T00:00:00.000Z","id":"f1db07c0-565b-5067-b0a9-2002cb14ebb5","slug":"/blog/2013/07/01/office-hours-this-week-git-plugin-refactoring/","strippedHtml":"This Wednesday’s Jenkins office hours is all about the Git plugin refactoring that’s going on.\n\nGit plugin is one of the most popular plugins out there, and it’s been around for quite some time. Combine that with the fact that there are so many different ways to use Git, it was inevitable that Git plugin became quite a capable but complex plugin over time. It has more than a dozen options and switches, and it was becoming harder to use and harder to maintain.\n\nAs early as 2010, some of us have already been saying that we should refactor this plugin, but none of us have managed. The good news is, I finally started tackling this problem last month while I was in London, and I’ve made a steadily progress since then and I’m ready for a wider review.\n\nSo we’ll spend this Wednesday going over the changes. I’ll show you how the new version looks, what changes are made internally, and what it’ll enable us in the future.\n\nIf the Git plugin is important to you, and you want to see what’s cooking, please join us in the office hours on Google Hangout.\n\nLooking forward to seeing you!","title":"Office hours this week: Git plugin refactoring","tags":["development","plugins"],"authors":[]}},{"node":{"date":"2013-06-21T00:00:00.000Z","id":"24926dd2-b6f9-5057-9f68-59a583212c04","slug":"/blog/2013/06/21/reducing-the-of-threads-in-jenkins-ssh-slaves/","strippedHtml":"+\nAs the usage of Jenkins expands, we started seeing users who run multiple 100s of agents on one controller, and thus it became a lot more important for us to scale well to even larger number of agents. +\n +\n\n+\nWhile I was looking at the thread dump of a large system, I started noticing that there are a large number of threads lying around pumping `+InputStream+` and writing to another `+OutputStream+`. On Linux, each thread occupies 2MB just for its stack size, so if we can eliminate some of them, it'd be a good saving. +\n +\n\n+\nSo this morning, I tackled one source of such waste. +\n +\n\n+\nJenkins has https://wiki.jenkins.io/display/JENKINS/SSH+Slaves+plugin[the ability to launch agent on a remote server via SSH] for the longest time, and to simplify this, we've been using a https://github.com/jenkinsci/trilead-ssh2[pure-Java implementation of SSH client]. +\n +\n\n+\nTo cut the long story short, I was able to eliminate two pump threads per every SSH connection. Furthermore, when it runs on the upcoming Jenkins 1.521, it'll save one more thread per every SSH connection. So if you have 100 agents connected through SSH, this alone saves up 600MB of memory. That's pretty good for a few hours work! +\n +\n\n+\nIf you run a lot of agents, be sure to pick up version 0.27 of https://wiki.jenkins.io/display/JENKINS/SSH+Slaves+plugin[the SSH agents plugin] to take advantages of this! +","title":"Reducing the # of threads in Jenkins: SSH agents","tags":["development","news","plugins","releases"],"authors":[]}}]}},"pageContext":{"tag":"development","limit":8,"skip":24,"numPages":9,"currentPage":4}},
    "staticQueryHashes": ["3649515864"]}