{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/development/page/3",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2014-07-08T00:00:00.000Z","id":"ec480fa0-5d1f-5a81-b4c7-c06613ec897a","slug":"/blog/2014/07/08/workflow-plugin-tutorial-writing-a-step-impl/","strippedHtml":"+\nThe other day I was explaining how to implement a new workflow primitive to https://github.com/vivek[Vivek Pandey], and I captured it as a recording. +\n +\n +\n +\n\n+\nThe recording goes over how to implement the `+Step+` extension point, which is the workflow equivalent of `+BuildStep+` extension point. If you are interested in jumping on the workflow plugin hacking, this might be useful (and don't forget to get in touch with us so that we can help you!) +\n +\n\n+\nimage:https://www.thatvideogameblog.com/wp-content/uploads/2012/11/Link-Dangerous-to-Go-Alone.jpg[image,width=310,height=206] +","title":"Workflow plugin tutorial: writing a Step impl","tags":["development","plugins","screencast","video","pipeline","workflow"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-06-09T00:00:00.000Z","id":"f1f036eb-db08-5222-9222-c3a1f80d792e","slug":"/blog/2014/06/09/thinking-about-moving-on-to-servlet-3-0/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Subaru_Legacy[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Subaru_Legacy_V_Kombi_rear_20100402.jpg/320px-Subaru_Legacy_V_Kombi_rear_20100402.jpg[image,width=240,height=156] +\n] +\n\n+\n+\n\n+\nOne of the current efforts under way in the dev list is driven by https://github.com/tfennelly[Tom Fennelly] et al, who is working on introducing a series of small ball improvements to the user interface in Jenkins. If this is something you are interested in (and who aren't?), you should see https://gist.github.com/kevinburke/9d4f127a7005eaa9d970[Kevin Burke's manifest] that sets out the plan of attack, and https://groups.google.com/forum/#!topic/jenkinsci-dev/zDaX4yiWLLw[This mega thread on the dev list] for the discussion. +\n +\n\n+\nThere are numerous sub-conversations born out of this, and one of them is the minimum required servlet spec version for Jenkins. +\n +\n\n+\nJenkins devs are thinking about ways to update page contents post load, for example so that the list view will keep updating as stuff happens. https://en.wikipedia.org/wiki/Websocket[WebSocket] was discussed as an option, and then https://en.wikipedia.org/wiki/Server-sent_events[server-side events], which seems to be the current favorite. +\n +\n\n+\nTo use any of those async HTTP features, we need servlet 3.0. Unfortunately, if we are to do it, Jenkins will not run on earlier versions of the container. There's no graceful fallback that works with servlet 2.5 containers due to the way servlet 3.0 is written. +\n +\n\n+\nSo I looked into https://docs.google.com/spreadsheets/d/14YzFgKBB6BvbRU_1OjChC3efECWPs77TEGTU09t3KGw/edit#gid=873989456[the impact of this change to the users]. +\n +\nIt turns out that the most users run Jenkins through `+java -jar jenkins.war+`, which are already running servlet 3.0 compatible Winstone 2.x (based on Jetty 8.) And people running newer version of Jenkins tends to run newer version of containers. When I look at people who are running >=1.509 and later, 70% of them run on servlet 3 compatible container. The number for >=1.532 is 84%, then for >=1.554 it's 94%. +\n +\n\n+\nWhen I look at which container is dragging us down as of >= 1.554, you see that there's a sizable Tomcat6 deployments (2.5%). If we start requiring Servlet 3.0 these people will be in a nasty surprise. Then there's about 1.8% who claims to be running on Winstone 0.9.10, which is really puzzling, but I'm assuming these people are getting OEM-ed Jenkins of a sort (multiple large companies are known to do this), so these people will likely be able to update to Winstone 2.x automatically by virtue of getting a new jenkins.war from their upstream. So all in all I'd say if we start requiring servlet 3.0 today, there'll be about 3% user base who will be impacted. +\n +\n\n+\nThis post is a trial balloon to see the community reaction to this idea. If you have reasons to argue against us moving to servlet 3.0, we'd like to hear from you — https://issues.jenkins.io/browse/JENKINS-23378[please share your thoughts on our issue tracker]! +","title":"Thinking about moving on to Servlet 3.0","tags":["development","core","feedback"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-05-27T00:00:00.000Z","id":"63a8754b-9610-5783-a10e-e6ab1d4d4438","slug":"/blog/2014/05/27/acceptance-test-project-progress-report/","strippedHtml":"+\nOver the past 30 days or so, https://github.com/jenkinsci/acceptance-test-harness/[the acceptance test project] has made a great progress. +\n +\n\n+\nThis project consists of a reusable harness that can be used by plugin developers and users to write functional test cases. These tests can be run against Jenkins instances that are deployed in https://github.com/jenkinsci/acceptance-test-harness/blob/master/docs/CONTROLLER.md[all sorts of different ways], and can interact with https://github.com/jenkinsci/acceptance-test-harness/blob/master/docs/FIXTURES.md[complex real fixtures]. These tests can be also run with specific version of Jenkins core and a combination of plugins. +\n +\n\n+\nThe number of tests have https://jenkins.ci.cloudbees.com/job/core/job/acceptance-test-harness/[steadily increased to above 300]. Several of those are by https://github.com/eidottermihi[Michael Prankl], where he tests https://github.com/jenkinsci/acceptance-test-harness/blob/master/src/test/java/plugins/LdapPluginTest.java[the LDAP plugin with the real OpenLDAP server instance] that runs inside Docker — a kind of test that just wasn't possible before can be now easily written. +\n +\n\n+\nhttps://github.com/jenkinsci/acceptance-test-harness/graphs/contributors[More than a dozen people] have contributed. https://github.com/jenkinsci/acceptance-test-harness/commits/master[A dozen changes are going in every single day], and more are coming — for example, Stephen is working on modularizing this harness and adding new pieces that allow people to do scalability and load testing. That'll be a part of this effort soon. +\n +\n\n+\nIf you are one of the large scale users who are interested in automating some of your Jenkins acceptance testing, please https://groups.google.com/forum/#!forum/jenkinsci-dev[drop us a note at the DEV list] so that we can work together. You can also watch the recording of our last https://wiki.jenkins.io/display/JENKINS/Office+Hours[office hours] where I demoed how you'd develop a test on top of this: +\n +\n +\n +\n\n+\nI think we all agree that this is an important effort/ Looking forward to joining the efforts with more people in the community! +\n +","title":"Acceptance test project progress report","tags":["development","feedback","news","tutorial","lts","video"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-05-19T00:00:00.000Z","id":"eed180da-45db-59c1-a6f0-28b8e0843f8d","slug":"/blog/2014/05/19/jenkins-office-hour-tutorial-on-writing-an-acceptance-test/","strippedHtml":"+\nimage:https://wiki.jenkins.io/download/attachments/57181939/hangout.png?version=1&modificationDate=1361998218000[image,width=200] +\n\n+\n+\n\n+\nThis week I'm going to do an office hour on how to write an acceptance test in https://github.com/jenkinsci/acceptance-test-harness[Jenkins acceptance test harness]. The event is on https://www.timeanddate.com/worldclock/fixedtime.html?msg=Jenkins+Office+Hours&iso=20140519T11&p1=283&ah=1[Wednesday 11am PT]. +\n +\n\n+\nThis new Selenium-based test harness is full of page objects and other abstractions that let you write blackbox integration tests on Jenkins and its plugins, as well as how they behave under various environments. +\n +\n\n+\nUnlike our regular office hours, https://plus.google.com/u/0/events/cpr7lhq3d544rj5uqid4rin3deg[the event is done through Hangout on air]. But I do want at least several people to join Hangout interactively, not just watch the event in a read-only mode. +\n +\n\n+\nTo join the event interactively (as opposed to read-only), I think you need to https://plus.google.com/hangouts/_/hoaevent/AP36tYeeXozAE_RiZWtTfX-O-sEtxJ3qhu4Asnfy7tZOZf3hs3jX1Q[come here] (but since Hangout URL can change, please check back on this post right before the office hour begins, so that I can post an up-to-date URL.) +","title":"Jenkins Office Hour: Tutorial on writing an acceptance test","tags":["development","screencast","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-16T00:00:00.000Z","id":"0ec96a9f-b23f-50d8-805d-75b5682f95aa","slug":"/blog/2014/04/16/active-directory-plugin-improvements/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Active_Directory[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Active-directory.svg/170px-Active-directory.svg.png[image] +\n] +\n\n+\n+\n\n+\nOne of the few plugins that I still personally maintain is https://wiki.jenkins.io/display/JENKINS/Active+Directory+plugin[Active Directory plugin]. In the past few months, I've been making steady improvements in this plugin, thanks to various inputs and bug reports given to me from the ClodBees customers. +\n +\n\n+\nOne of the recent fixes was to get https://issues.jenkins.io/browse/JENKINS-9258[the \"remember me\" feature] finally working for Active Directory. This requires a relatively new Jenkins 1.556, but it eliminates the need to having to constantly type the password in. +\n +\n\n+\nThen I've rebumped the version of https://github.com/kohsuke/com4j[COM4J], which was https://issues.jenkins.io/browse/JENKINS-16429[causing a thread leak] when Jenkins runs on Windows. If you are running a Windows deployment with lots of active users, this probably would have contributed to the instability of Jenkins. +\n +\n\n+\nAnd then lastly, a small but crucial improvement was made to the way we search group membership, so that we can avoid recursively searching AD. This should result in a significant speed improvement when you are logging into Jenkins through AD. +\n +\n\n+\nThe latest version of the plugin as of writing is 1.37. I hope you'll have a chance to update the plugin soon. +","title":"Active Directory plugin improvements","tags":["development","plugins"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-11T00:00:00.000Z","id":"a05eb16d-08fa-5675-ae96-e0b6498905ff","slug":"/blog/2014/04/11/jenkins-1-532-3-lts-is-released/","strippedHtml":"+\nThe final LTS release of the 1.532.x line is out today. You can download it from http://mirrors.jenkins-ci.org/[the usual location]. Changelog is https://jenkins-ci.org/changelog-stable[here]. +\n +\n\n+\nStarting with the next 1.554.x LTS, the release model will https://wiki.jenkins.io/display/JENKINS/LTS+Release+Line[switch to the train model], where we commit to dates and get whatever we can ship by that date. +\n +\n\n+\nYou can see https://jenkins-ci.org/content/event-calendar[the scheduled dates in our event calendar]. Backporting window for 1.554.1 is almost closing, so if you want to have your favorite issues nominated for it, please see https://wiki.jenkins.io/display/JENKINS/LTS+Release+Line[the process] in the Wiki and hurry!","title":"Jenkins 1.532.3 LTS is released","tags":["development","core","releases","lts"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-09T00:00:00.000Z","id":"541f26ae-79be-5b99-9931-1a1e249be540","slug":"/blog/2014/04/09/more-scalable-slaves/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Nio[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Nikko_Toshogu_Nio_M3043.jpg/160px-Nikko_Toshogu_Nio_M3043.jpg[image] +\n] +\n\nNio\n\n+\n\n+\n+\n\n+\nhttps://en.wikipedia.org/wiki/New_I/O[NIO]-based https://wiki.jenkins.io/display/JENKINS/Distributed+builds#Distributedbuilds-LaunchslaveagentviaJavaWebStart[Java Web Start (JNLP) agent handling] is coming to 1.560. This will help you run a large number of JNLP agents more efficiently. A connected JNLP agent used to occupy one thread on the controller, but now it occupies none. Combined with the earlier change that eliminated threads from idle executors, now you can connect thousands of agents. +\n +\n\n+\nAll you have to do is to use the latest `+agent.jar+` from Jenkins 1.560. No other changes are necessary on users' part. +\n +\n\n+\nA bulk of this is implemented in https://github.com/jenkinsci/remoting[remoting 2.38], and a good part of it was implemented about a year ago on the airplane on the way to Europe. +\n +\n\n+\nWe plan to make CLI connections take advantages of this too, which helps those who use that a lot. That's not in 1.560, but hopefully it'll be in the near future. This change also paves a way for multi-participant bus-topology communication, which I think would be an useful building block for https://github.com/jenkinsci/master-to-master-api-plugin/[the work-in-progress controller-to-controller API].","title":"More scalable agents","tags":["development","core","news"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}},{"node":{"date":"2014-04-04T00:00:00.000Z","id":"1b4b4540-c205-5a24-bbcd-53c64d62a457","slug":"/blog/2014/04/04/maven-job-type-performance-improvements-in-maven-plugin-2-2/","strippedHtml":"+\nhttps://en.wikipedia.org/wiki/Grumman_F-14_Tomcat[ +\nimage:https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/US_Navy_040925-N-0295M-030_An_F-14D_Tomcat_conducts_a_high_speed_flyby_during_the_tactical_air_power_demonstration_at_the_2004_Naval_Air_Station_Oceana_Air_Show.jpg/300px-thumbnail.jpg[image]] +\n\n+\n+\n\n+\nI recently had an opportunity to visit a big Jenkins user on site, and one of the things they've told me is that building projects in the Maven job type is substantially slower than doing the same with the freestyle project type. +\n +\n\n+\nThis is partly expected, because this job type does more for you. For example, it automatically archives your build artifacts, fingerprints all the relevant information, and so on. These are good things, and naturally, it cost time. +\n +\n\n+\nBut the slow down they are seeing was substantial, and this is a complaint I've heard from others as well. So I started looking into it. +\n +\n\n+\nWith a help of https://linux.die.net/man/8/tc[artificial delay] induced to my network interface and several custom scripts to probe into the running processes, I was able to understand what was going on and make some good improvements. +\n +\n\n+\nFirst, in Maven plugin 2.0, we've made a change in the way we archive artifacts from Maven. Previously, the artifacts were copied between the controller and the Maven JVM, and for a reason I'll mention later, this was very slow, especially in a network that has a large latency. With Maven plugin 2.0 and onward, artifacts are archived between the controller and the agent JVM. +\n +\n\n+\nThe second problem that I discovered was that the spy program we put inside Maven is causing excessive amount of unnecessary classloading. Some classes have static initializers that too eagerly refer to other classes, which in turn brings in other classes, and so on. Despite https://jenkins-ci.org/content/faster-slave-classloading[the jar file caching that we do], these classloading still sometimes requires precious roundtrips to the controller, which costs in the order of 10s of ms. I was able to make various changes in Jenkins core to cut this down, and these fixes will land in Jenkins 1.559 (ETA is April 14th.) The classloading overhead is independent of the size of your Maven build, so this improvement is more for people who have lots of small Maven builds, like https://ci.jenkins.io/[Jenkins building Jenkins plugins]. +\n +\n\n+\nNow, on to the biggest fruit of this investigation I was able to discover and fix. Imagine the Maven JVM has a lot of data to send to the controller, say you are archiving test reports or code coverage report. A good implementation would send these data as fast as possible to the controller, paying respect to the limit of flow control to avoid overwhelming the controller. +\n +\n\n+\nIt turns out that the way we set up this communication channel was far from optimal. Instead of having the Maven JVM push data with flow control, we were relying on the controller to pull data. That is, controller has to send out a request to the agent to fetch the next batch of data (8KB), then once it receives that data, it sends out another request to fetch the next batch of data, and so on. If your network latency is 10ms, this scheme only lets us send 500KB/sec, even if you have a gigabit ethernet. No wonder it was so slow! +\n +\n\n+\nThis fix is in in Maven plugin 2.2. See https://issues.jenkins.io/browse/JENKINS-22354[JENKINS-22354] if you want to know more about the actual diffs and such. +\n +\nUnfortunately, none of these are available for those who are on 1.532.x LTS, but http://meetings.jenkins-ci.org/jenkins/2014/jenkins.2014-04-02-18.02.html[the next 1.554.1 LTS] will be able to run the newer Maven 2.2 plugin. So the help is on the way! +\n +","title":"Maven job type performance improvements in Maven plugin 2.2","tags":["development","plugins","releases"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"kohsuke","html":"<div class=\"paragraph\">\n<p>Kohsuke is the creator of Jenkins.</p>\n</div>","id":"kohsuke","irc":null,"linkedin":null,"name":"Kohsuke Kawaguchi","slug":"blog/author/kohsuke","twitter":"kohsukekawa"}]}}]}},"pageContext":{"tag":"development","limit":8,"skip":16,"numPages":9,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}