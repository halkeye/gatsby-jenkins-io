{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/gsoc2019/page/3",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-06-21T00:00:00.000Z","id":"b06db1a3-a822-5949-960f-cb7f3e69c3da","slug":"/blog/2019/06/21/performance-testing-jenkins/","strippedHtml":"I have been working on improving the performance of the Role Strategy Plugin as a part of my Google Summer of Code project.\nSince there was no existing way to measure performance and do benchmarks on Jenkins Plugins,\nmy work for the first phase of the project was to create a framework for running\nbenchmarks in Jenkins plugins with a Jenkins instance available. To make our job a bit easier,\nwe chose Java Microbenchmark Harness for running these benchmarks. This\nallows us to reliably measure performance of our time-critical functions and will help make Jenkins perform faster\nfor everyone.\n\nThe micro-benchmarking framework was recently released in the Jenkins Unit Test Harness 2.50.\nThe blog post below shows how to run benchmarks in your plugins.\n\nIntroduction\n\nThe framework runs works by starting a temporary Jenkins instance for each fork of the JMH benchmark,\njust like JenkinsRule from Jenkins Test Harness. Benchmarks are run directly from your JUnit Tests which allows\nyou to fail builds on the fly and easily run benchmarks from your IDE, just like unit tests. You can easily\nconfigure your benchmarks by either using your Java methods, or by using Jenkins Configuration-as-Code plugin\nand passing the path to your YAML file.\n\nTo run benchmarks from your plugins, you need to do the following:\n\nbump up the minimum required Jenkins version to 2.60.3 or above\n\nbump Plugin-POM to a version ≥ 3.46 or manually upgrade to Jenkins Test Harness ≥ 2.51.\n\nNow, to run the benchmarks, you need to have a benchmark runner that contains a @Test so it can run\nlike a JUnit test. From inside a test method, you can use the OptionsBuilder provided by JMH to\nconfigure your benchmarks. For example:\n\npublic class BenchmarkRunner {\n    @Test\n    public void runJmhBenchmarks() throws Exception {\n        ChainedOptionsBuilder options = new OptionsBuilder()\n                .mode(Mode.AverageTime)\n                .forks(2)\n                .result(\"jmh-report.json\");\n\n        // Automatically detect benchmark classes annotated with @JmhBenchmark\n        new BenchmarkFinder(getClass()).findBenchmarks(options);\n        new Runner(options.build()).run();\n    }\n}\n\nSample benchmarks\n\nNow, you can write your first benchmark:\n\nWithout any special setup\n\n@JmhBenchmark\npublic class JmhStateBenchmark {\n    public static class MyState extends JmhBenchmarkState {\n    }\n\n    @Benchmark\n    public void benchmark(MyState state) {\n        // benchmark code goes here\n        state.getJenkins().setSystemMessage(\"Hello world\");\n    }\n}\n\nUsing Configuration as Code\n\nTo use configuration as code, apart from the dependencies above you also need to add the following\nto your pom.xml :\n\nio.jenkins\nconfiguration-as-code\n1.21\ntrue\n\nio.jenkins\nconfiguration-as-code\n1.21\ntests\ntest\n\nNow configuring a benchmark is as simple as providing path to your YAML file and specifying the class\ncontaining the benchmark state.\n\n@JmhBenchmark\npublic class SampleBenchmark {\n    public static class MyState extends CascJmhBenchmarkState {\n        @NonNull\n        @Override\n        protected String getResourcePath() {\n            return \"config.yml\";\n        }\n\n        @NonNull\n        @Override\n        protected Class getEnclosingClass() {\n            return SampleBenchmark.class;\n        }\n    }\n\n    @Benchmark\n    public void benchmark(MyState state) {\n        Jenkins jenkins = state.getJenkins(); // jenkins is configured and ready to be benchmarked.\n        // your benchmark code goes here...\n    }\n}\n\nMore Samples\n\nAs a part of this project, a few benchmarks have been created in the Role Strategy Plugin which show\nconfiguring the instances for various situations. You can find them\nhere.\n\nRunning Benchmarks\n\nRunning benchmarks from Maven\n\nTo easily run benchmarks from Maven, a Maven profile to run the benchmarks has been created\nand is available starting Plugin-POM version 3.45. You can then run your benchmarks from the\ncommand line using mvn test -Dbenchmark.\n\nRunning benchmarks on ci.jenkins.io\n\nIf you have your plugins hosted on ci.jenkins.io, you can easily run benchmarks directly from your Jenkinsfile\nby using the runBenchmarks() method after the buildPlugin() step in your which is now available in\nJenkins Pipeline library.\nThis function also accepts the path to your generated JMH benchmark reports as an optional\nparameter and archives the benchmark results. Running benchmarks in pull request builds allows you to constantly\nmonitor the performance implications of a given change. For example, the Jenkinsfile from Role Strategy Plugin:\n\nbuildPlugin()\nrunBenchmarks('jmh-report.json')\n\nVisualizing benchmark results\n\nBenchmark reports generated (in JSON) can be visualized using the either the JMH Report Plugin\nor by passing the benchmark reports to the JMH visualizer web service. As an example, here is\na visualized report of some benchmarks from the Role Strategy Plugin:\n\nThese improvements seen above were obtained through a small pull request\nto the plugin and shows how even seemingly small changes can bring major performance improvements. Microbenchmarks\nhelp to find these hot-spots and estimate the impact of changes.\n\nSome tips and tricks\n\nSince BenchmarkRunner class name in the example above does not qualify as a test according to Maven surefire plugin’s\nnaming conventions, the benchmarks will not interfere with your JUnit tests.\n\nBenchmark methods need to be annotated by @Benchmark for JMH to detect them.\n\nClasses containing benchmarks are found automatically by the BenchmarkFinder\nwhen annotated with @JmhBenchmark.\n\nA reference to the Jenkins instance is available through either JmhBenchmarkState#getJenkins() or through\nJenkins.getInstance() like you would otherwise do.\n\nJmhBenchmarkState provides setup() and tearDown() methods which can be overridden to configure the\nJenkins instance according to your benchmark’s requirements.\n\nThe benchmark builds on ci.jenkins.io are currently throttled because of the limited availability of highmem nodes.\n\nThe benchmark framework was made available in Jenkins Test Harness 2.50, it is recommended to use version 2.51 as it includes some bug fixes.\n\nLinks and Feedback\n\nIf you have any feedback, comments or questions, please feel free to reach out to me through either\nthe Role Strategy Plugin Gitter chat or through\nthe Jenkins Developer Mailing list.\n\nPresentation slides\n\nDemo at Platform SIG meeting\n\nDocumentation for the micro-benchmark framework:\n\nWriting benchmarks (Jenkins Test Harness)\n\nPreconfiguring benchmarks using JCasC\n\nRunning benchmarks using Plugin POM profile\n\nBuild Step for running benchmarks on ci.jenkins.io","title":"Micro-benchmarking Framework for Jenkins Plugins","tags":["jmh","plugins","benchmark","performance","developer","gsoc","gsoc2019"],"authors":[]}},{"node":{"date":"2019-03-04T00:00:00.000Z","id":"d85f9019-be6e-5fed-9a43-5cc4d0781ec3","slug":"/blog/2019/03/04/gsoc2019-announcement/","strippedHtml":"On behalf of the Jenkins GSoC org team,\nI am happy to announce that the Jenkins project has been accepted to\nGoogle Summer of Code 2019.\nThis year we invite students and mentors to join the Jenkins community and work together\non enhancing the Jenkins ecosystem.\n\nJust to provide some numbers, this is the biggest GSoC ever, 206 organizations will participate in GSoC this year.\nAnd it will be hopefully the biggest year for Jenkins as well.\nWe have 25 project ideas\nand more than 30 potential mentors (and counting!).\nIt is already more than in 2016 and 2018 combined.\nThere are many plugins, SIGs and sub-projects which have already joined GSoC this year.\nAnd we have already received messages and first contributions from dozens of students, yey!\n\nWhat’s next?\nGSoC is officially announced, and please expect more students to contact projects in our\nGitter channels and mailing lists.\nMany communications will also happen in SIG and sub-project channels.\nWe will be working hard in order to help students to find interesting projects, to explore the area,\nand to prepare their project proposals before the deadline on April 9th.\nThen we will process the applications, select projects and assign mentor teams.\n\nAll information about the Jenkins GSoC is available on its sub-project page.\n\nI am a student. How do I apply?\n\nSee the Information for students page for full application guidelines.\n\nWe encourage interested students to reach out to the Jenkins community early and to start exploring project ideas.\nAll project ideas have chats and mailing lists referenced on their pages.\nWe will be also organizing office hours for students,\nand you can use these meetings to meet org admins and mentors and to ask questions.\nAlso, join our Gitter channel and the\nmailing list\nto receive information about such incoming events in the project.\n\nThe application period starts on March 25th, but you can prepare now!\nUse the time before the application period to discuss and improve your project proposals.\nWe also recommend that you become familiar with Jenkins and start exploring your proposal areas.\nProject ideas include quick-start guidelines and reference newbie-friendly issues\nwhich may help with initial study.\nIf you do not see anything interesting,\nyou can propose your own project idea\nor check out ideas proposed by other organizations\nparticipating in GSoC.\n\nI want to be a mentor. Is it too late?\n\nIt’s not!\nWe are looking for more project ideas and for Jenkins contributors/users\nwho are passionate about Jenkins and want to mentor students.\nNo hardcore experience required, mentors can study the project internals together with students and technical advisors.\nWe are especially interested in ideas beyond the Java stack, and in ideas focusing new technologies and areas\n(e.g. Kubernetes, IoT, Python, Go, whatever).\n\nYou can either propose a new project idea or join an existing one.\nSee the Call for Mentors post\nand Information for mentors for details.\nIf you want to propose a new project,\nplease do so by March 11th so that students have time to explore them and to prepare their proposals.\n\nThis year mentorship does NOT require strong expertise in Jenkins development.\nThe objective is to guide students and to get involved into the Jenkins community.\nGSoC org admins will help to find advisers if special expertise is required.\n\nImportant dates\n\nMar 11 - deadline for new GSoC project idea proposals\n\nApr 09 - deadline for student applications\n\nMay 06 - accepted projects announced, teams start community bonding and coding\n\nAug 26 - coding period ends\n\nSep 03 - Results announced\n\nSee the GSoC Timeline for more info.\nIn the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).","title":"Jenkins is accepted to Google Summer Of Code 2019!","tags":["gsoc","gsoc2019","events","community"],"authors":[]}},{"node":{"date":"2018-12-26T00:00:00.000Z","id":"14d2c0a3-cdcd-532e-847f-8b8c1d9171e1","slug":"/blog/2018/12/26/gsoc-2019-call-for-mentors/","strippedHtml":"Google Summer of Code\nis as program where students are paid a stipend by Google to work on a free open source project like Jenkins,\nat full-time for four months (May to August).\nMentors get actively involved with students starting at the end of February when students start to apply\n(see the timeline).\n\nWe are looking for mentors and project ideas to participate in the 15th edition of the Google Summer of Code program!\nWe have until February 6th, 2019 at 8pm UTC to submit the application on behalf the Jenkins Organization, but obviously,\nwe want to be ready before that.\n\nThe first step in the process is to have mentors and project ideas.\nThen we will apply to Google.\nWe need Google to accept Jenkins' application to the program itself.\nAnd for this to happen, we need project proposals and mentors.\n\nWe currently have a list of project idea proposals,\nand we are looking for new project proposals, mentors, technical advisers, and subject matter experts.\nGSoC projects may be about anything around code: new features, plugins, test frameworks, infrastructure, etc., etc.\n\nMaking a project idea proposal is easy, you can read the instructions here.\nQuick start:\n\nCopy the project proposal template,\nadd a short description of your project idea\n\nOpen the document for public view and comments, reference communication channels there (if any)\n\nLet us know about the project idea via our gitter channel or the\nmailing list.\n\nAfter getting initial feedback from org admins, share your idea with other contributors who might be interested\n(via the developer mailing list, chats, or special interest groups)\n\nPotential mentors are invited to read the information for mentors for more information about the project.\nNote that being a GSoC mentor does not require expert knowledge of Jenkins.\nGSoC org admins will help to find technical advisors, so you can study together with your students.\n\nMentoring takes about 5 to 6 hours of work per week (more at the start, less at the end).\nIn return, a student works on your project full time for four months.\nThink about the projects that you’ve always wanted to do but could not find the time…​\nThere are also many opportunities to engage with the Jenkins community (meetups, knowledge sharing, communications) and with other projects (e.g. going to the GSoC Mentor Summit).\nGSoC is a pretty good return on the investment!\n\nFor any question, you can find the GSoC admins,\nmentors and participants on the GSoC SIG Gitter chat.\n\nThe Jenkins GSoC Org Admin Team 2019","title":"Google Summer of Code 2019. Call for Project ideas and Mentors","tags":["gsoc","gsoc2019","community","events","developer"],"authors":[]}}]}},"pageContext":{"tag":"gsoc2019","limit":8,"skip":16,"numPages":3,"currentPage":3}},
    "staticQueryHashes": ["3649515864"]}