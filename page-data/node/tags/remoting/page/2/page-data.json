{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/remoting/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-06-18T00:00:00.000Z","id":"88647b04-059d-549e-a712-a9dfe1d2427e","slug":"/blog/2018/06/18/remoting-over-message-bus/","strippedHtml":"About me\n\nMy name is Pham Vu Tuan, I am a final year undergraduate student from Singapore. This is the first time I participate in Google Summer of Code and contribute to an open-source organization. I am very excited to contribute this summer.\n\nMentors\n\nI have GSoC mentors who help me in this project Oleg Nenashev and Supun Wanniarachchi. Besides that, I also receive great support from developers in remoting project Devin Nusbaum and Jeff Thompson.\n\nOverview\n\nCurrent versions of Jenkins Remoting are based on the TCP protocol. If it fails, the agent connection and the build fails as well. There are also issues with traffic prioritization and multi-agent communications, which impact Jenkins stability and scalability.\n\nThis project aims to develop a plugin in order to add support of a popular message queue/bus technology (Kafka) as a fault-tolerant communication layer in Jenkins.\n\nWhy Kafka?\n\nWhen planning for this project, we want to use traditional message queue system such as ActiveMQ or RabbitMQ. However, after some discussion, we decided to have a try with Kafka with more suitable features with this project:\n\nKafka itself is not a queue like ActiveMQ or RabbitMQ, it is a distributed, replicated commit log. This helps to remove message delivery complexity we have in traditional queue system.\n\nWe need to support data streaming as a requirement, and Kafka is good at this aspect, which RabbitMQ is lack of.\n\nKafka is said to have a better scalability and good support from the development community.\n\nCurrent State\n\nThe project is reaching the end of the first phase and here are things we have achieved so far:\n\nSetup project as a set of Docker Compose components: Kafka cluster, Jenkins controller (with plugin) and a custom agent (JAR).\n\nCreate a PoC with new command transport implementation to support Kafka, which involves of command invocation, RMI, classloading and data streaming.\n\nMake neccessary changes in Remoting and Jenkins core to make them extensible for the use of this project.\n\nDecide to use Kafka as a suitable final implementation.\n\nWe planned to release an alpha version of this plugin by the end of this phase, but decided to move this release to the second phase because we need to wait for remoting and core patches to be released.\n\nArchitecture Overview\n\nThe project consists of multiple components:\n\nKafka Client Library - new command transport implementation, producer and consumer client logic.\n\nRemoting Kafka Plugin - plugin implementation with KafkaGlobalConfiguration and KafkaComputerLauncher.\n\nRemoting Kafka Agent - A custom JAR agent with remoting JAR packaged together with a custom Engine implementation to setup a communication channel with Kafka.\n\nAll the components are packaged together with Docker Compose.\n\nThe below diagram is the overview of the current architecture:\n\nWith this design, controller is not communicating with agent using direct TCP communication anymore, all the communication commands are transfered with Kafka.\n\nFeatures\n\n1. Kafka Global Configuration\n\n2. Custom agent start up as a JAR\n\nUser can start running an agent with the following command:\n\n3. Launch agents with Kafka\n\n4. Commands transferred between controller and agent over Kafka\n\nRemoting operations are being executed over Kafka. In the log you may see:\n\nClassloading (Classloader.fetch())\n\nLog streaming (Pipe.chunk())\n\n5. Run jobs with remoting Kafka\n\nIt is possible to run jobs on Agents connected over Kafka\n\nNext Phase Plan\n\nHere are the tasks planned for the next phase:\n\nSupport security for controller-agent connection:\n\nKafka authentication/authorization ( JENKINS-51472, JENKINS-51473).\n\nAgent secrets ( JENKINS-51470).\n\nImprove Kafka producer-consumer model to ensure reliability ( JENKINS-51942).\n\nBug fixing.\n\nRelease alpha version and address feedback ( JENKINS-51713).\n\nHow to run demo\n\nYou can try to run a demo of the plugin by following the instruction.\n\nLinks\n\nGitHub Repository\n\nProject Page\n\nPhase 1 Presentation Video\n\nPhase 1 Presentation Slides","title":"GSoC Project Intro: Jenkins Remoting over Message Bus/Queue","tags":["plugins","gsoc","gsoc2018","remoting"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"pvtuan10","html":"<div class=\"paragraph\">\n<p>Pham Vu Tuan is a developer from Singapore.\nHe starts contributing to Jenkins from Google Summer of Code 2018 for <a href=\"https://jenkins.io/projects/gsoc/2018/remoting-over-message-bus/\">Jenkins Remoting over Message Bus/Queue</a></p>\n</div>","id":"pvtuan10","irc":"pvtuan10","linkedin":null,"name":"Pham Vu Tuan","slug":"/blog/author/pvtuan10","twitter":null}]}},{"node":{"date":"2018-03-15T00:00:00.000Z","id":"f1ff4387-7033-572c-9fef-b871cfb88ad0","slug":"/blog/2018/03/15/jep-200-lts/","strippedHtml":"This is a post about a major change in Jenkins, which is available starting\nfrom Jenkins 2.102 and Jenkins LTS 2.107.1.\nThis is a change with a serious risk of regressions in plugins.\nIf you are a Jenkins administrator, please read this blogpost and\nupgrade guidelines\nBEFORE upgrading.\n\nI would like to provide some heads-up about the\nJEP-200 change,\nwhich is included into the new Jenkins LTS 2.107.x baseline.\n\nBackground\n\nFor many years Jenkins used to specifically blacklist certain classes and packages according to known or suspected exploits.\nThis approach has been proven unsustainable due to the risk of deserialization attacks via unknown classes\nfrom 3rd-party components, after the\nSECURITY-429/CVE-2017-1000353 fix in 2.46.2\nit was decided to replace blacklists by more restrictive whitelists.\nIn October 2017 Jesse Glick proposed a Jenkins Enhancement Proposal,\nwhich finally got accepted as JEP-200.\n\nThe change implies a risk of regressions in plugins serializing non-whitelisted Java-internal and 3rd-party classes,\nand thatâ€™s why it is so important to follow the upgrade guidelines for this release.\n\nCurrent state\n\nJEP-200 was first integrated in Jenkins 2.102 (released in January 2018), and it has got a lot of testing since that.\nSee this blogpost for the original announcement.\n\nOver the last two months we received more than 75 issues from users of Jenkins weekly releases.\nAll these issues have been triaged, and we have released most of the fixes.\nMore than 50 plugins were fixed in total, and many more plugins were updated in order to enable compatibility testing.\nA significant part of the discovered regressions were caused by real defects which were causing performance and stability\nissues in plugins.\nThanks a lot to all the Jenkins contributors and plugin maintainers who helped deliver timely changes for this effort!\n\nOver last 6 weeks Jenkins weekly releases had positive community ratings,\nthe overall JEP-200 adoption reached ~12% of all Jenkins installations on March 01.\nAll major plugins have been also tested directly or verified in the wild on weekly releases.\nSo we are confident that the change is ready to be released in LTS.\n\nOn the other hand, we continue to receive JEP-200 regression reports.\nThey are mostly caused by niche plugins which are not widely used in weekly releases,\nand unfortunately not all fixes have been released yet (see the Wiki page for up-to-date info).\nWe anticipate more regressions to be reported after the LTS release and broader adoption.\n\nIn order to simplify the upgrade to the new LTS baseline,\nI have prepared some helpful materials together with Liam Newman\nand Jesse Glick.\nBelow you can find the embedded slide deck and video, or scroll down to see the key information\nin the text form.\n\nVideo:\n\nFor Jenkins administrators\n\nUpgrading to a core with JEP-200 requires a special update procedure, which is described below.\n\nUpgrading Jenkins\n\nJEP-200 is not the only major change in 2.107.1, please read\nthe full upgrade guide carefully\n\nIf you have a way of testing the upgrade before applying it to production, do it\n\nBack up your instance so you have any easy way of rolling back\n\nUpdate all affected plugins.\nSee this Wiki page for the list of affected plugins,\nfix statuses and workarounds\n\nApply workarounds for non-released patches if needed (see below)\n\nUpdate to the new version of the Jenkins core\n\nUsing backups and staging servers is good advice before any upgrade but especially this one,\ngiven the relatively high risk of regression.\nDue to the nature of the changes, some plugins may refuse to load after the upgrade and cause your Jenkins service to fail to start.\n\nAfter the upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nStill, it is highly advised to monitor your system after the upgrade, especially the following:\n\nJenkins System log (especially during the startup)\n\nJob/Build logs\n\nIf you do encounter a log message referencing the https://jenkins.io/redirect/class-filter/ URL,\nmost likely it is a JEP-200 regression.\nExample:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nIf you see this kind of message, we highly recommend reporting it so that it can be investigated and probably fixed quickly.\n\nReporting JEP-200 issues\n\nStarting from May 01, JEP-200 issues are triaged by plugin and core maintainers.\nJEP-200 maintainers are available for code reviews if needed,\nbut they will not be reviewing cases in JIRA and searching for miscategorized issues on a daily basis.\nIf you experience new JEP-200 regressions, please follow the guidelines below.\n\nPlease report any issues you encounter matching the above pattern in the\nJenkins issue tracker, under the appropriate plugin component.\nBefore reporting please check whether this issue has already been reported.\n\nAdd the JEP-200 label\n\nInclude the stacktrace you see in the log\n\nIf possible, include complete steps to reproduce the problem from scratch\n\nYou can find examples of previously reported issues using this query.\n\nJenkins developers will evaluate issues and strive to offer a fix in the form of a core and/or plugin update.\nRight after the feature release there was be a special team triaging the reports.\nStarting from May 01 the issues will be triaged by plugin and core maintainers.\nSee JEP-200 Maintenance plan for more info.\n\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nApplying workarounds\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nNote the class name(s) mentioned in the JEP-200 log messages,\nand run Jenkins with the hudson.remoting.ClassFilter startup option, e.g.:\n\njava -Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName -jar jenkins.war ...\n\nThis workaround process may require several iterations, because classes whitelisted in the workaround may also\ninclude fields with types requiring whitelisting.\n\nFor plugin developers\n\nIf you are a plugin developer, please see the original JEP-200 announcement.\nThat blog post provides guidelines for testing and fixing plugin compatibility after the JEP-200 changes.\nThe presentation above also provides some information about what needs to be tested.","title":"Security hardening: Jenkins LTS 2.107.1 switches XStream / Remoting blacklists to whitelists (JEP-200)","tags":["core","security","remoting","upgrade"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2018-01-13T00:00:00.000Z","id":"b30f609a-7e4a-56ef-93e3-f8629da662cd","slug":"/blog/2018/01/13/jep-200/","strippedHtml":"There is a newer version of the announcement for Jenkins administrators.\nPlease see this blogpost.\n\nOverview\n\nJEP-200 has been integrated into Jenkins weekly builds\nand (if all goes well) will be a part of the next LTS line.\nIn a nutshell, this change is a security hardening measure\nto be less permissive about deserializing Java classes defined in the Java Platform or libraries bundled with Jenkins.\nFor several years now, Jenkins has specifically blacklisted certain classes and packages according to known or suspected exploits;\nnow it will reject all classes not explicitly mentioned in a whitelist, or defined in Jenkins core or plugins.\n\nFor Jenkins administrators\n\nBefore upgrade\n\nBack up your Jenkins instance prior to upgrade so you have any easy way of rolling back.\nIf you are running any of the plugins listed in\nPlugins affected by fix for JEP-200,\nupdate them after taking the backup but before upgrading Jenkins core.\n\nIf you have a way of testing the upgrade in an isolated environment before applying it to production,\ndo so now.\n\nUsing backups and a staging server is good advice before any upgrade but especially this one,\nwith a relatively high risk of regression.\n\nAfter upgrade\n\nTo the extent that advance testing of the impact of this change on popular plugins has been completed,\nmost users (and even plugin developers) should not notice any difference.\nIf you do encounter a java.lang.SecurityException: Rejected: some.pkg.and.ClassName in the Jenkins UI or logs,\nyou may have found a case where an unusual plugin, or an unusual usage mode of a common plugin,\nviolates the existing whitelist.\nThis will be visible in the Jenkins system log as a message from jenkins.security.ClassFilterImpl like the following:\n\nsome.pkg.and.ClassName in file:/var/lib/jenkins/plugins/some-plugin-name/WEB-INF/lib/some-library-1.2.jar might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\n\nwhere the link would direct you here.\n\nIf you find such a case, please report it in the Jenkins issue tracker, under the appropriate plugin component.\nLink it to JENKINS-47736 and add the JEP-200 label.\nIf at all possible, include complete steps to reproduce the problem from scratch.\nJenkins developers will strive to evaluate the reason for the violation and offer a fix in the form of a core and/or plugin update.\nFor more details and current status, see\nPlugins affected by fix for JEP-200.\n\nAssuming you see no particular reason to think that the class in question has dangerous deserialization semantics, which is rare,\nit is possible to work around the problem in your own installation as a temporary expedient.\nSimply make note of any class name(s) mentioned in such log messages,\nand run Jenkins with this startup option (details will depend on your installation method):\n\n-Dhudson.remoting.ClassFilter=some.pkg.and.ClassName,some.pkg.and.OtherClassName\n\nFor plugin developers\n\nTesting plugins against Jenkins 2.102 and above\n\nAs a plugin developer encountering this kind of error,\nyour first task is to ensure that it is reproducible in a functional ( JenkinsRule) test\nwhen running Jenkins 2.102 or newer to reproduce the error.\n\nmvn test -Djenkins.version=2.102 -Denforcer.skip=true\n\nThe above assumes you are using a recent 2.x or 3.x parent Plugin POM.\nFor certain cases you may need to use Plugin Compat Tester (PCT)\nto run tests against Jenkins core versions newer than your baseline.\n\nRunning PCT against the latest Jenkins core:\n\njava -jar pct-cli.jar -reportFile $(pwd)/out/pct-report.xml \\\n    -workDirectory $(pwd)/work -skipTestCache true -mvn $(which mvn) \\\n    -includePlugins ${ARTIFACT_ID} -localCheckoutDir ${YOUR_PLUGIN_REPO}\n\nYou may need to run tests using an agent or force saves of plugin settings.\n\nFor maven plugins you can also specify custom Jenkins versions in Jenkinsfile to run tests against JEP-200:\n\nbuildPlugin(jenkinsVersions: [null, '2.102'])\n\n(again picking whatever version you need to test against)\nso that the test is included during CI builds, even while your minimum core baseline predates JEP-200.\n\nIf your plugins are built with Gradle, your mileage may vary.\n\nMaking plugins compatible with Jenkins 2.102 or above\n\nIf you discover a compatibility issue in your plugin,\nyou then have several choices for fixing the problem:\n\nIdeally, simplify your code so that the mentioned class is not deserialized via Jenkins Remoting or XStream to begin with:\n\nIf the problem occurred when receiving a response from an agent, change your Callable (or FileCallable) to return a plainer type.\n\nIf the problem occurred when saving an XML file (such as a config.xml or build.xml), use a plainer type in non- transient fields in your persistable plugin classes.\n\nIf the class(es) are defined in the Java Platform or some library bundled in Jenkins core, propose a pull request adding it to core/src/main/resources/jenkins/security/whitelisted-classes.txt in jenkinsci/jenkins.\n\nIf the class(es) are defined in a third-party library bundled in your plugin, create a resource file META-INF/hudson.remoting.ClassFilter listing them. ( example)\n\nYou may also do this for Java or Jenkins core library classes, as a hotfix until your core baseline includes the whitelist entry proposed above.\n\nIf the class(es) are defined in a JAR you build and then bundle in your pluginâ€™s *.jpi, add a Jenkins-ClassFilter-Whitelisted: true manifest entry. This whitelists every class in the JAR. ( example)","title":"JEP-200: Remoting / XStream whitelist integrated into Jenkins core","tags":["core","security","remoting","upgrade"],"authors":[{"avatar":null,"blog":null,"github":"jglick","html":"<div class=\"paragraph\">\n<p>Jesse has been developing Jenkins core and plugins for years.\nHe is the coauthor with Kohsuke of the core infrastructure of the Pipeline system.</p>\n</div>","id":"jglick","irc":null,"linkedin":null,"name":"Jesse Glick","slug":"/blog/author/jglick","twitter":"tyvole"}]}},{"node":{"date":"2017-08-11T00:00:00.000Z","id":"4d1723b9-7ca9-59e6-a301-6c0e75388381","slug":"/blog/2017/08/11/remoting-update/","strippedHtml":"Updated on Jan 10, 2019: The deprecated protocols were removed in Remoting 3.40+ and Jenkins 2.214+.\nSee jira:JENKINS-60381[Remove old, deprecated Remoting protocols] for more information and links.\n\nThere are upcoming changes in Jenkins \"core\" which may require extra steps\nwhen upgrading Jenkins.  If you use configuration management for Jenkins\nagents, please read this announcement carefully.\n\nIf you have ever seen messages like \"Channel is already closed\" or \"Remote call failed\" in your build logs,\nyou have already met Jenkins Remoting.\n\nRemoting is an agent executable and a library implementing the communication layer between Jenkins controllers and their agents (including communication protocols, distributed calls and classloading).\nIt is also used in several other cases: Maven Integration Plugin, Remoting-based CLI, etc.\n\nIn order to make it clear whatâ€™s changing in Jenkins Remoting, I have documented the various components on\nthe Remotingâ€™s sub-project page, and will try to publish regular updates about the status of\nRemoting to this site and the developer mailing list.\n\nIn this post I would like to provide an update on the Remoting roadmap and to announce two major incoming changes: deprecation of old protocols and upgrade to Java 8.\nBoth changes will take place in one of the next Weekly releases.\nETA is Jenkins 2.75 on Aug 20, 2017.\n\nBelow are details on the incoming changes and compatibility notes.\n\nOld Remoting Protocols Deprecation\n\nIt has been almost one year since the release of JNLP4-connect protocol in Remoting 3.0.\nThis protocol has been enabled by default since 2.46.x, and so far it demonstrates good stability being compared to JNLP2 and JNLP3 protocols.\n\nAt the governance meeting\nwe decided to disable old Remoting protocols (JNLP/JNLP2 + CLI1) in new installations by default.\nThere are 3 reasons for it:\n\nMaintenance of multiple protocols takes a lot of extra effort.\nThe JNL2 NIO engine is complex and barely diagnosable.\n\nThere are known issues in JNLP2 connection management (see the protocolâ€™s Errata). In many cases update to JNLP4 was a resolution\n\nJNLP1/JNLP2/CLI1 are unencrypted, and it is not something Jenkins users may expect in 2017\n\nIt is tracked as JENKINS-45841 in Jenkins JIRA.\n\nHow?\n\nWhen Jenkins is started in the new installation mode with enabled Installation Wizard, old protocols will be disabled\n\nJenkins shows an administrative warning when obsolete protocols are enabled\n\nCompatibility notes\n\nOlder instances wonâ€™t be affected by the disabling of the older JNLP1/JNLP2 protocols, which will still be enabled for them.\nNewly created instances which skip, or disable, the Setup Wizard will not be affected either.\n\n\"New\" Jenkins instances installed via setup wizard may be affected in edge cases. For example:\n\nAgents with Remoting older than 3.0 will be unable to connect.\n\nMitigation: Before updating make sure Remoting is not bundled custom Docker images, AMIs, etc.\n\nSwarm Plugin: old versions of Swarm Client (before 3.3) will be unable to connect to Jenkins, because Remoting 2.x is bundled\n\nMitigation : Update Swarm Client\n\nVery old jenkins-cli.jar without CLI2 support will be unable to connect.\n\nMitigation : Do not use Remoting-based CLI on new instances (see this blogpost)\n\nUpgrade to Java 8\n\nStarting with version 2.54, Jenkins requires Java 8 to run\n( announcement blog post).\nThis version is also required for Jenkins LTS 2.60.1.\n\nRemoting continued to support Java 7 for a while for backporting purposes,\nbut it will be also upgraded to Java 8 in the Remoting 3.11 release.\nThis Rremoting version is expected to be available in Jenkins 2.75 (ETA: Aug 20, 2017).\nThis change is tracked as JENKINS-43985.\n\nCompatibility notes\n\nThe update does not cause compatibility issues in common use-cases.\nHowever, there may be issues in custom Jenkins core builds and packaging.\nThere are several examples below.\n\nJenkins instances with built-in Remoting versions will NOT be affected, Java 8 is already required there\n\nUsers of community-provided Docker packages ( docker-agent,\ndocker-inbound-agent) will NOT be affected,\nJava 8 is already required there\n\nCustom Jenkins WAR file builds targeting Java 7 may fail to build/run if they bundle Remoting 3.11 or later\n\nCustom Jenkins agent instances (manually installed hosts, VM snapshots, Docker packages, AMIs, etc.) may fail if they download the latest Remoting version and use Java 7\n\nJava 9 support\n\nAs with Jenkins core, Java 9 not supported and not tested in Remoting.\nIt may work in some configurations, but it is not guaranteed.\n\nAs a consequence, it is not recommended to run Remoting with Java 9 right now.\nIt is also not recommended to use Maven Integration Plugin to run builds on Java 9.\n\nWhatâ€™s next?\n\nThere are some ongoing activities in the Remoting sub-project:\n\nStability and Diagnosability improvements\n( JENKINS-38833)\n\nWhy? When it comes to Remoting issues, it is really hard to diagnose them\n\nRecently I have published some slides about preventing and diagnosing issues, but I want the behavior to be more stable by default\n\nThis Epic lists my plans about Remoting issues and papercuts I would like to fix this year\n\nRemoting Work Directories\n( JENKINS-44108)\n\nFor a long time logging was disabled by default in Java Web Start (JNLP) and SSH agents, because Remoting had no option to determine where to store such data before connecting to the controller\n\nThe new Remoting Work Directory feature (since Remoting 3.8) offers such storage, which is also used for storing JAR caches and for checking workspace writeability before accepting builds.\n\nThis Epic is about enabling Remoting work directories by default in common Agent launcher types.\n\nRemoting Upgradeability\n( JENKINS-44099)\n\nRight now Remoting is not being upgraded automatically on JNLP agents, it is supported only for Windows service agents starting from Jenkins 2.50\n\nOn the Jenkins controller side it is required to upgrade the Jenkins core in order to pick Remoting fixes.\n\nThis Epic aims simplifying the upgrade procedure for most common cases.\n\nIf you are interested in contributing to these tasks, or others in the Remoting\nsub-project, please feel free to reach out via the issue tracker or\n#jenkins IRC channel.\n\nIf you are coming to Jenkins World, you can also find me at the \"Ask the Experts\" booth there.\nSee more info about Ask the Experts here.\n\nUseful links\n\nRemoting Sub-Project on Jenkins website\n\nRemoting Release Notes\n\nRemoting documentation on GitHub\n\nMy slides about Remoting issues troubleshooting","title":"Remoting Update. Protocols deprecation, Java 8 requirement and plans","tags":["remoting","agents","upgrade","core"],"authors":[{"avatar":{"childImageSharp":null},"blog":"https://oleg-nenashev.github.io/","github":"oleg-nenashev","html":"<div class=\"paragraph\">\n<p>Jenkins core maintainer and board member.\nOleg started using Hudson for Hardware/Embedded projects in 2008 and became an active Jenkins contributor in 2012.\nNowadays he leads several Jenkins <a href=\"/sigs\">SIGs</a>, outreach programs (<a href=\"/projects/gsoc\">Google Summer of Code</a>, <a href=\"/events/hacktoberfest\">Hacktoberfest</a>) and <a href=\"/projects/jam/\">Jenkins meetups</a> in Switzerland and Russia.\nOleg works for <a href=\"https://www.cloudbees.com/\">CloudBees</a> and focuses on key projects in the community.</p>\n</div>","id":"oleg_nenashev","irc":"oleg_nenashev","linkedin":"onenashev","name":"Oleg Nenashev","slug":"/blog/author/oleg_nenashev","twitter":"oleg_nenashev"}]}},{"node":{"date":"2017-04-11T00:00:00.000Z","id":"a9284a81-2902-5a91-9618-c11ceca70747","slug":"/blog/2017/04/11/new-cli/","strippedHtml":"In response to the zero-day vulnerability we fixed in November, I wrote the following:\n\nMoving forward, the Jenkins security team is revisiting the design of the Jenkins CLI over the coming weeks to prevent this class of vulnerability in the future.\nIf you are interested in participating in that discussion, please join in on the jenkinsci-dev@ mailing list.\n\nIn early February, several project contributors met after FOSDEM for a one day hackathon.\nI looked into the feasibility of a purely SSH-based CLI.\nWhile I considered the experiment to be a success, it was far from ready to be used in a production environment.\n\nA few weeks later, long-time contributor and Jenkins security team member Jesse Glick took over, and published a detailed proposal for a new, simple CLI protocol without remoting.\n\nIn just a month, he implemented his proposal, and Iâ€™m very happy to announce that this new implementation of the Jenkins CLI has now made it into 2.54!\n\nExisting jenkins-cli.jar clients should continue working as before, unless an administrator disables the remoting connection mode in Configure Global Security.\nThat said, we recommend you download the new jenkins-cli.jar in Jenkins, and use its new -http mode.\nWith few (now deprecated) exceptions, CLI commands work like before.\nThis will allow you to disable the remoting mode for the CLI on the Jenkins controller to prevent similar vulnerabilities in the future.\n\nSSH-based CLI use should be unaffected by this change.\nNote that new Jenkins instances now start with the SSH server port disabled, and the configuration option for that was moved into Configure Global Security.\n\nYou can learn all about the CLI and its new behavior in the Jenkins handbook.","title":"New, safer CLI in 2.54","tags":["plugins","security","remoting"],"authors":[{"avatar":null,"blog":null,"github":"daniel-beck","html":"<div class=\"paragraph\">\n<p>Daniel is a Jenkins core maintainer and, as security officer, leads the <a href=\"/security/#team\">Jenkins security team</a>.\nHe sometimes contributes to developer documentation and project infrastructure.</p>\n</div>","id":"daniel-beck","irc":null,"linkedin":null,"name":"Daniel Beck","slug":"/blog/author/daniel-beck","twitter":null}]}}]}},"pageContext":{"tag":"remoting","limit":8,"skip":8,"numPages":2,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}