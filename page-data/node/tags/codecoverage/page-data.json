{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/codecoverage",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2019-07-21T00:00:00.000Z","id":"e7a046ff-9ae1-585e-826a-dc8f41a2ab04","slug":"/blog/2019/07/21/Jenkins-code-coverage-diff-for-pull-request/","strippedHtml":"Hello.\n\nAs you may know, during the last year GSoC Mr. Shenyu Zheng was working on the Jenkins Code Coverage API Plugin. With Mr. Zheng we made a change so the plugin now is able to check the difference in code coverage between pull requests and target branches.\n\nIn lots of projects it is a common practice to track if unit tests code coverage doesnâ€™t decrease. So, with this plugin, you may skip separate services that track code coverage and have this feature right in your favorite CI system.\n\nHow it works\n\nWhen you build a PR in Jenkins, using plugins like Github or Bitbucket Branch Source, that use SCM API Plugin, your PR knows what target branch commit it is based on. (The commit may change because of Discover pull requests from origin strategies). To calculate the diff, when you publish your coverage from PR, it looks for the target branch build for the commit that your PR was based on. If it finds the build on the target branch, it looks for any published code coverage for this target branch build. In case the build has it, the plugin calculates the percentage diff for the line coverage and shows it on the pull request build page. Also, it gives you a link to the target branch build that was used for the comparison.\n\nThat it how it looks like:\n\nDecreased coverage\n\nIncreased coverage\n\nHow to enable code coverage diff for pull requests\n\nTo enable this behavior you need to publish your code coverage with the calculateDiffForChangeRequests flag equals true, like this:\n.Jenkinsfile\n\nnode(...) {\n  ...\n  // Here we are using the istanbulCoberturaAdapter\n  publishCoverage adapters: [istanbulCoberturaAdapter('cobertura-coverage.xml')],\n    sourceFileResolver: sourceFiles('NEVER_STORE'),\n    calculateDiffForChangeRequests: true\n\n  ...\n}\n\nLinks and Feedback\n\nIf you have some questions about this behavior, please ask me in email.\n\nYou are free to contribute to this plugin to make it better for everyone. There are a lot of interesting features that can be added and issues that can be solved. Also, you can write some new plugins for other code coverage formats that use the Code Coverage API plugin as a base.\n\nHere is the repo of the plugin - Code Coverage API Plugin\n\nThank you.","title":"Jenkins code coverage diff in pull requests","tags":["plugins","codecoverage"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"tempora-mutantur","html":"<div class=\"paragraph\">\n<p>Software developer from Minsk, Belarus.</p>\n</div>","id":"asavanchuk","irc":null,"linkedin":null,"name":"Aliaksei Savanchuk","slug":"/blog/author/asavanchuk","twitter":null}]}}]}},"pageContext":{"tag":"codecoverage","limit":8,"skip":0,"numPages":1,"currentPage":1}},
    "staticQueryHashes": ["3649515864"]}