{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/pipeline/page/6",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2017-05-18T00:00:00.000Z","id":"231f2272-acd6-5bb2-beae-e3871de86c48","slug":"/blog/2017/05/18/pipeline-dev-tools/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nI’ve only been working with Pipeline for about a year.\nPipeline in and of itself has been a huge improvement over old-style Jenkins projects.\nAs a developer, it has been so great be able work with Jenkins Pipelines\nusing the same tools I use for writing any other kind of code.\n\nI’ve also found a number of tools that are super helpful specifically\nfor developing pipelines. Some were easy to find like the\nbuilt-in documentation\nand the\nSnippet Generator.\nOthers were not as obvious or were only recently released.\nIn this post, I’ll show how a few of those tools make working with Pipelines\neven better.\n\nThe Blue Ocean Pipeline Editor\n\nThe best way to start this list is with the most recent and coolest\narrival in this space: the Blue Ocean Pipeline Editor.  The editor only works\nwith Declarative Pipelines, but it brings a sleek new user experience to writing\nPipelines.  My recent screencast, released as part of the Blue Ocean Launch,\ngives good sense of how useful the editor is:\n\nCommand-line Pipeline Linter\n\nOne of the neat features of the Blue Ocean Pipeline Editor is that it does basic\nvalidation on our Declarative Pipelines before they are even committed or Run.\nThis feature is based on the\nDeclarative Pipeline Linter\nwhich can be accessed from the command-line even if you don’t have Blue Ocean\ninstalled.\n\nWhen I was working on the\nDeclarative Pipeline: Publishing HTML Reports\nblog post, I was still learning the declarative syntax and I made a lot lot of mistakes.\nGetting quick feedback about the whether my Pipeline was in a sane state made writing that blog much easier.\nI wrote a simple shell script that would run my Jenkinsfile through the Declarative Pipeline Linter.\n\npipelint.sh - Linting via HTTP POST using curl\n\n# curl (REST API)\n# User\nJENKINS_USER=bitwisenote-jenkins1\n\n# Api key from \"/me/configure\" on my Jenkins instance\nJENKINS_USER_KEY=--my secret, get your own--\n\n# Url for my local Jenkins instance.\nJENKINS_URL=http://$JENKINS_USER:$JENKINS_USER_KEY@localhost:32769 (1)\n\n# JENKINS_CRUMB is needed if your Jenkins controller has CRSF protection enabled (which it should)\nJENKINS_CRUMB=`curl \"$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\\\":\\\",//crumb)\"`\ncurl -X POST -H $JENKINS_CRUMB -F \"jenkinsfile=\n\n1\nThis is not secure.  I’m running this locally only.\nSee Jenkins CLI for details on how to do this securely.\n\nWith this script, I was able to find the error in this this Pipeline without\nhaving to take the time to run it in Jenkins: (Can you spot the mistake?)\n\n#!groovy\n\npipeline {\n  agent any\n\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      step {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      echo \"Send notifications for result: ${currentBuild.result}\"\n    }\n  }\n}\n\nWhen I ran my pipelint.sh script on this pipeline it reported this error:\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   3831      0 --:--:-- --:--:-- --:--:--  4181\nErrors encountered validating Jenkinsfile:\nWorkflowScript: 30: Unknown stage section \"step\". Starting with version 0.5, steps in a stage must be in a steps block. @ line 30, column 5.\n       stage ('Test') {\n       ^\n\nWorkflowScript: 30: Nothing to execute within stage \"Test\" @ line 34, column 5.\n       stage ('Test') {\n       ^\n\nDoh. I forgot the \"s\" on steps on line 35. Once I added the \"s\" and ran\npipelint.sh again, I got an all clear.\n\n$ pipelint.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    46  100    46    0     0   5610      0 --:--:-- --:--:-- --:--:--  5750\nJenkinsfile successfully validated.\n\nThis didn’t mean there weren’t other errors, but for a two second smoke test I’ll take it.\n\nReplay\n\nI love being able to use source control to track changes to my Pipelines\nright alongside the rest of the code in a project.  There are also times,\nwhen prototyping or debugging, that I need to iterate quickly on a series\nof possible Pipeline changes.\nThe Replay feature let’s me do that and see the results,\nwithout committing those changes to source control.\n\nWhen I wanted to take the previous Pipeline from agent any to using Docker via\nthe docker { …​ } directive, I used the Replay feature to test it out:\n\nSelected the previously completed run in the build history\n\nClicked \"Replay\" in the left menu\n\nMade modifications and click \"Run\". In this example, I replaced any with the docker { …​ } directive.\n\nChecked the results of changes looked good.\n\nOnce I worked any bugs out of my Pipeline,\nI used Replay to view the Pipeline for the last run and copy it back to my\nJenkinsfile and create a commit for that change.\n\nConclusion\n\nThis is far from a complete list of the tools out there for working with Pipeline.\nThere are many more and the number is growing.\nFor example, one tool  I just recently heard about and haven’t had a chance to delve into\nis the\nPipeline Unit Testing Framework,\nwhich promises the ability to test Pipelines before running them.\nIt’s been a fun year and I can’t wait to see what the next year holds for Pipeline.\n\nHow do you work with Pipeline?\nDo you have a tool that you feel has greatly improved your development experience\nwith Pipeline?  I’m interested in hear about others Jenkins user’s favorite ways\nof working with Pipeline.  Drop me a line via\nemail or on the\n#jenkins IRC channel.","title":"Pipeline Development Tools","tags":["blueocean","pipeline","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-12T00:00:00.000Z","id":"de6a7833-33e4-5a1b-8942-62eba9d0e88e","slug":"/blog/2017/04/12/welcome-to-blue-ocean-dashboard/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI used the Blue Ocean Activity View to track the state of branches and\nPull Requests in one project.\nIn this video, I’ll use the Blue Ocean Dashboard get a personalized view of the\nareas that of my project that are most important to me,\nand also to monitor multiple projects.\nPlease Enjoy!","title":"Getting Started with the Blue Ocean Dashboard","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-11T00:00:00.000Z","id":"9d6e30d7-7295-5fb0-b863-4e1db0a6fa14","slug":"/blog/2017/04/11/welcome-to-blue-ocean-pipeline-activity/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI showed how easy it is to create and edit Declarative Pipelines using the Blue Ocean Visual Pipeline Editor.\nIn this video, I’ll use the Blue Ocean Activity View to track the\nstate of branches and Pull Requests in one project.\nBlue Ocean makes it so much easier to find the logs I need to triage failures.\n\nPlease Enjoy!  In my\nnext video,\nI’ll switch from looking at a single project to monitoring multiple projects with\nthe Blue Ocean Dashboard.","title":"Getting Started with Blue Ocean's Activity View","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-06T00:00:00.000Z","id":"f6b5f809-47da-5d3d-b7ca-7f843a8917d9","slug":"/blog/2017/04/06/welcome-to-blue-ocean-editor/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 is now live!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nIn my previous post,\nI explained how to install Blue Ocean on your local Jenkins instance and switch to using Blue Ocean.\nAs promised, here’s a screencast that picks up where that post left off.\nStarting from a clean Jenkins install, the video below will guide you through\ncreating and running your first Pipeline in Blue Ocean with the Visual Pipeline Editor.\n\nPlease Enjoy! In my next video, I’ll go over the\nBlue Ocean Pipeline Activity View.","title":"Getting Started with Blue Ocean's Visual Pipeline Editor","tags":["blueocean","ux","pipeline","tutorial","screencast"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-04-05T00:00:00.000Z","id":"a861a6c5-914d-5da6-9d4b-4b250827f304","slug":"/blog/2017/04/05/say-hello-blueocean-1-0/","strippedHtml":"Back in May 2016 we announced our intent\nto rethink the Jenkins User experience with the Blue Ocean project and today\nthe Jenkins project are pleased to announce the general\navailability of Blue Ocean 1.0.\n\nBlue Ocean is an entirely new, modern and fun way for developers to use Jenkins\nthat has been built from the ground up to help teams of any size approach\nContinuous Delivery. Easily installed as a plugin for Jenkins and integrated\nwith Jenkins Pipeline, it is available from today for production use.\n\nSince the start of the beta at Jenkins World 2016 in September there are now\nover 7400+ installations making use of Blue Ocean. This wouldn’t be possible\nwithout the support of the entire Jenkins developer and\nuser community - so thank you for your support!\n\nBlue Ocean is available today from the update center and also as a\nDocker image - why not give it a try?\n\nVisual Pipeline Editing - Team members of any skill level can create continuous\ndelivery pipelines from start to finish, with just several clicks, using the\nintuitive, visual pipeline editor. Any pipeline created with the visual editor\ncan also be edited in your favorite text editor\nbringing all the benefits of Pipeline as Code.\n\nPipeline Visualization - Developers can visually represent pipelines in a way\nthat anyone on the team can understand - even your boss’s boss - improving\nclarity into the continuous delivery process for the whole organization.\nThe visualization helps you focus on what the pipeline does, not how it does it.\n\nPinpoint Troubleshooting - Blue Ocean enables developers to locate automation\nproblems instantly, without endlessly scanning through logs or navigating\nthrough many screens, so you can get back to building the next big thing.\n\nGitHub and Git Integration - Pipelines are created for all feature branches\nand pull requests, with their status reported back to GitHub.\nThe whole team has visibility into whether changes need work or are good to go.\n\nPersonalization – Every team member can make Jenkins their own by customizing\nthe dashboard so that they only see those pipelines that matter to them.\nFavoriting any pipeline or branch in Blue Ocean will show a favourite card on\nthe dashboard so you can see its status at a glance.\n\nJust one more thing – I’d like to pay special thanks to:\n\nThe Core team – to Keith Zantow, Thorsten Scherler, Tom Fennelly,\nIvan Meredith, Josh McDonald, Vivek Pandey, Brody Maclean and Cliff Meyers.\nEach of and everyone of you have brought your own passion, expertise and flair\nto the project – and it shows. It’s been crazy fun and I hope working on\nBlue Ocean is something you look back on fondly.\n\nJenkins Developers past and present – we recognise that we are standing on\nthe shoulders of giants and none of this wouldn’t be possible without your\nhard work and dedication to free & open source software and Jenkins.\nHere’s to the next 10 years 🍻 !\n\nCloudBees – in particular, Sacha Labourey (CEO), Harpreet Singh\n(VP of Product) and Spike Washburn (VP of Engineering) whose dedication to\nJenkins, Open Source and continued faith in the vision and team made all of\nthis possible, and of course Bob Bickel (Advisor) who dared us to dream big.\n\nMichael Neale – who drank all the kool-aide and is just as obsessed with\nand dedicated to Blue Ocean as I am. This project would never have shipped\nwithout his hand steady at the tiller. I couldn’t ask for a better friend\nand partner-in-crime.\n\nTyler Croy – for guiding the project and myself on how to do open source\nThe Right Way™. Tyler works tirelessly behind the scenes to to make Jenkins\nawesome and it wouldn’t be possible to keep this show running without\nhis help and sage-like advice.\n\nKohsuke Kawaguchi – For creating Jenkins, getting Blue Ocean off of\nthe ground, his tour of Tokyo and above all, his trust.\n\nJenkins Users – your enthusiasm for better development tools which\nkept our spirits and momentum up when the days grew long and things\nlooked tough. We couldn’t ask for a better, more appreciative or\npassionate group of people. Hopefully we’ve done our job and you can get\nback to building your next big thing!\n\nNext stop, some well needed rest & recovery then back to to making\nJenkins one of the experiences for software developers worldwide!\n\nIf you’re interested in joining us to make Blue Ocean a great user experience\nfor Jenkins, please join the Blue Ocean development\nteam on Gitter!","title":"Say hello to Blue Ocean 1.0","tags":["blueocean","ux","pipeline"],"authors":[{"avatar":null,"blog":null,"github":"i386","html":"","id":"i386","irc":null,"linkedin":null,"name":"James Dumay","slug":"/blog/author/i386","twitter":"i386"}]}},{"node":{"date":"2017-04-05T00:00:00.000Z","id":"ef0f71cf-7b8f-528c-bdbf-cb7997704db5","slug":"/blog/2017/04/05/welcome-to-blue-ocean/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nWelcome to Blue Ocean 1.0!\n\nIn case you’ve been heads down on other projects\nfor the past 10 months,\nBlue Ocean is a new user experience for Jenkins,\nand version 1.0 was released today!\nBlue Ocean makes Jenkins, and continuous delivery, approachable to all team members.\nI’ve been working with it for the past several months, and I can tell you it is amazing.\nI wish all the interactions with Jenkins were as easy as this:\n\n10 minutes to Blue Ocean\n\nBlue Ocean is simple to install and will work on basically any Jenkins 2 instance (version 2.7 or later).\nEven better, it runs side-by-side with the existing Jenkins web UI -\nyou can switch back and forth between them whenever you like.\nThere’s really no risk.\nIf you have a Jenkins instance and a good network connection,\nin 10 minutes you could be using Blue Ocean.\n\nLogin to your Jenkins server\n\nClick Manage Jenkins in the sidebar then Manage Plugins\n\nChoose the Available tab and use the search bar to find Blue Ocean\n\nClick the checkbox in the Install column\n\nClick either Install without restart or Download now and install after\nrestart\n\nAfter you install Blue Ocean, you can start using it\nby clicking on Open Blue Ocean in the navigation bar of the\nJenkins web UI, or you can navigate directly to Blue Ocean by adding\n/blue to your Jenkins URL, for example https://ci.jenkins.io/blue .\n\nIf you have to go back to the \"classic\" Jenkins UI,\nthere’s an \"exit\" icon located at the top of every page in Blue Ocean.\n\nDive in!\n\nThat’s it! You now have a working Blue Ocean installation.\nTake a look around at your Pipelines and activity, or try creating a new Pipeline.\nI think you’ll be pleasantly surprised at how intuitive and helpful Blue Ocean can be.\nBlue Ocean is so cool, I never want to leave it.\nOver the next few days, I’ll be publishing a series of videos,\nshowing some common Jenkins use cases and how Blue Ocean makes them clearer and easier than ever before.\n\nStay Tuned!","title":"Getting Started with Blue Ocean","tags":["blueocean","ux","pipeline","tutorial"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-02-23T00:00:00.000Z","id":"4617d4e9-51f3-58b1-8cf1-558aa14ce01d","slug":"/blog/2017/02/23/declarative-saucelabs-xunit/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nDeclare Your Pipelines!\nDeclarative Pipeline 1.0 is here!\nThis is the fourth post in a series showing some of the cool features of\nDeclarative Pipeline.\n\nIn the\nprevious post,\nwe integrated several notification services into a Declarative Pipeline.\nWe kept our Pipeline clean and easy to understand\nby using a shared library to make a custom step called sendNotifications\nthat we called at the start and end of our Pipeline.\n\nIn this blog post, we’ll start by translating the Scripted Pipeline in the sample project I worked with\nin\n\" Browser-testing with Sauce OnDemand and Pipeline\"\nand\n\" xUnit and Pipeline\"\nto Declarative.\nWe’ll make our Pipeline clearer by adding an environment directive\nto define some environment variables, and then moving some code to a shared library.\nFinally, we’ll look at using the when directive to add simple conditional behavior to our Pipeline.\n\nSetup\n\nThe setup for this post uses the same repository as the two posts above,\nmy fork\nof the\nJS-Nightwatch.js sample project.\nI’ve once again created a branch specifically for this blog post,\nthis time called\nblog/declarative/sauce .\n\nLike the two posts above, this Pipeline will use the\nxUnit and\nSauce OnDemand plugins.\nThe xUnit plugin only needs to be installed, the Sauce OnDemand needs additional configuration.\nFollow\nSauce Labs' configuration instructions\nto create an account with Sauce Labs and add your Sauce Labs credentials to Jenkins.\nThe Sauce OnDemand plugin will automatically install\nSauce Connect\nfor us when we call it from our Pipeline.\n\nBe sure to you have the latest version of the\nSauce OnDemand plugin (1.160 or newer).\nIt has several fixes required for this post.\n\nFor a shared library, I’ve still got the one from the\nprevious post.\nTo set up this \"Global Pipeline Library,\" navigate to \"Manage Jenkins\" → \"Configure System\"\nin the Jenkins web UI.\nOnce there, under \"Global Pipeline Libraries\", add a new library.\nThen set the name to bitwiseman-shared, point it at my repository,\nand set the default branch for the library to master.\n\nReducing Complexity with Declarative\n\nIf you’ve been following along through this series,\nthis first step will be quite familiar by now.\nWe’ll start from the Pipeline we had at the end of the xUnit post\nand translate it to Declarative.\n\n// Declarative //\npipeline {\n    agent any\n    options {\n        // Nightwatch.js supports color ouput, so wrap add his option\n        ansiColor colorMapName: 'XTerm'\n    }\n    stages {\n        stage (\"Build\") {\n            steps {\n                // Install dependencies\n                sh 'npm install'\n            }\n        }\n        stage (\"Test\") {\n            steps {\n                // Add sauce credentials\n                sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n                    // Start sauce connect\n                    sauceconnect() {\n                        // Run selenium tests using Nightwatch.js\n                        // Ignore error codes. The junit publisher will cover setting build status.\n                        sh \"./node_modules/.bin/nightwatch -e chrome,firefox,ie,edge --test tests/guineaPig.js || true\"\n                    }\n                }\n            }\n            post {\n                always {\n                    step([$class: 'XUnitBuilder',\n                        thresholds: [\n                            [$class: 'SkippedThreshold', failureThreshold: '0'],\n                            // Allow for a significant number of failures\n                            // Keeping this threshold so that overwhelming failures are guaranteed\n                            //     to still fail the build\n                            [$class: 'FailedThreshold', failureThreshold: '10']],\n                        tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\n                    saucePublisher()\n                }\n            }\n        }\n    }\n// Scripted //\nnode {\n    stage \"Build\"\n    checkout scm\n\n    // Install dependencies\n    sh 'npm install'\n\n    stage \"Test\"\n    // Add sauce credentials\n    sauce('f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a') {\n        // Start sauce connect\n        sauceconnect() {\n\n            // List of browser configs we'll be testing against.\n            def platform_configs = [\n                'chrome',\n                'firefox',\n                'ie',\n                'edge'\n            ].join(',')\n\n            // Nightwatch.js supports color ouput, so wrap this step for ansi color\n            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {\n                // Run selenium tests using Nightwatch.js\n                // Ignore error codes. The junit publisher will cover setting build status.\n                sh \"./node_modules/.bin/nightwatch -e ${platform_configs} --test tests/guineaPig.js || true\"\n            }\n\n            step([$class: 'XUnitBuilder',\n                thresholds: [\n                    [$class: 'SkippedThreshold', failureThreshold: '0'],\n                    // Allow for a significant number of failures\n                    // Keeping this threshold so that overwhelming failures are guaranteed\n                    //     to still fail the build\n                    [$class: 'FailedThreshold', failureThreshold: '10']],\n                tools: [[$class: 'JUnitType', pattern: 'reports/**']]])\n\n            saucePublisher()\n        }\n    }\n}\n\nBlue Ocean doesn’t support displaying SauceLabs test reports yet\n(see JENKINS-42242).\nTo view the report above, I had to switch back to the stage view of this run.\n\nElevating Settings using environment\n\nEach time we’ve moved a project from Scripted Pipeline to Declarative,\nwe’ve found the cleaner format of Declarative Pipeline highlights the less\nclear parts of the existing Pipeline.\nIn this case, the first thing that jumps out at me is that the parameters of the\nSaucelabs and Nightwatch execution are hardcoded and buried down in the middle of our Pipeline.\nThis is a relatively short Pipeline, so it isn’t terribly hard to find them,\nbut as this pipeline grows and changes it would be better if those values were kept separate.\nIn Scripted, we’d have defined some variables,\nbut Declarative doesn’t allow us to define variables in the usual Groovy sense.\n\nThe environment directive let’s us set some environment variables\nand use them later in our pipeline.\nAs you’d expect, the environment directive is just a set of name-value pairs.\nEnvironment variables are accessible in Pipeline via env.variableName (or just variableName)\nand in shell scripts as standard environment variables, typically $variableName.\n\nLet’s move the list of browsers, the test filter, and the sauce credential string to environment variables.\n\nJenkinsfile\n\nenvironment {\n        saucelabsCredentialId = 'f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a'\n        sauceTestFilter = 'tests/guineaPig.js'\n        platformConfigs = 'chrome,firefox,ie,edge'\n    }\n    stages {\n        /* ... unchanged ... */\n        stage (\"Test\") {\n            steps {\n                // Add sauce credentials\n                sauce(saucelabsCredentialId) {\n                    // Start sauce connect\n                    sauceconnect() {\n                        // Run selenium tests using Nightwatch.js\n                        // Ignore error codes. The junit publisher will cover setting build status.\n                        sh \"./node_modules/.bin/nightwatch -e ${env.platformConfigs} --test ${env.sauceTestFilter} || true\" (1)\n}\n                }\n            }\n            post { /* ... unchanged ... */ }\n        }\n    }\n}\n\n1\nThis double-quoted string causes Groovy to replace the variables with their\nliteral values before passing to sh.\nThis could also be written using singe-quotes:\nsh './node_modules/.bin/nightwatch -e $platformConfigs --test $sauceTestFilter || true'.\nWith a single quoted string, the string is passed as written to the shell,\nand then the shell does the variable substitution.\n\nMoving Complex Code to Shared Libraries\n\nNow that we have settings separated from the code, we can do some code clean up.\nUnlike the previous post, we don’t have any repeating code,\nbut we do have some distractions.\nThe nesting of sauce, sauceconnect, and sh nightwatch seems excessive,\nand that xUnit step is a bit ugly as well.\nLet’s move those into our shared library as custom steps with parameters.\nWe’ll change the Jenkinsfile in our main project,\nand add the custom steps to a branch named\nblog/declarative/sauce in our library repository.\n\nJenkinsfile\n\n@Library('bitwiseman-shared@blog/declarative/sauce') _\n\n/* ... unchanged ... */\n\nstage (\"Test\") {\n    steps {\n        sauceNightwatch saucelabsCredentialId,\n            platformConfigs,\n            sauceTestFilter\n    }\n    post {\n        always {\n            xUnitPublishResults 'reports/**',\n                /* failWhenSkippedExceeds */ 0,\n                /* failWhenFailedExceeds */ 10\n\n            saucePublisher()\n        }\n    }\n}\n\nvars/sauceNightwatch.groovy\n\ndef call(String sauceCredential, String platforms = null, String testFilter = null) {\n    platforms = platforms ? \"-e '\" + platforms + \"'\" : ''\n    testFilter = testFilter ? \"--test '\" + testFilter + \"'\" : ''\n\n    // Add sauce credentials\n    sauce(sauceCredential) {\n        // Start sauce connect\n        sauceconnect() {\n            // Run selenium tests using Nightwatch.js\n            // Ignore error codes. The junit publisher will cover setting build status.\n            sh \"./node_modules/.bin/nightwatch ${platforms} ${testFilter} || true\" (1)\n}\n    }\n}\n\n1\nIn this form, this could not be written using a literal single-quoted string.\nHere, platforms and testFilter are groovy variables, not environment variables.\n\nvars/xUnitPublishResults.groovy\n\ndef call(String pattern, Integer failWhenSkippedExceeds,\n        Integer failWhenFailedExceeds) {\n    step([$class: 'XUnitBuilder',\n        thresholds: [\n            [$class: 'SkippedThreshold', failureThreshold: failWhenSkippedExceeds.toString()],\n            // Allow for a significant number of failures\n            // Keeping this threshold so that overwhelming failures are guaranteed\n            //     to still fail the build\n            [$class: 'FailedThreshold', failureThreshold: failWhenFailedExceeds.toString()]],\n        tools: [[$class: 'JUnitType', pattern: pattern]]])\n}\n\nRunning Conditional Stages using when\n\nThis is a sample web testing project.\nWe probably wouldn’t deploy it like we would production code,\nbut we might still want to deploy somewhere,\nby publishing it to an artifact repository, for example.\nThis project is hosted on GitHub and uses feature branches and pull requests to make changes.\nI’d like to use the same Pipeline for feature branches, pull requests, and the master branch,\nbut I only want to deploy from master.\n\nIn Scripted, we’d wrap a stage in an if-then and check if the branch for\nthe current run is named \"master\".\nDeclarative doesn’t support that kind of general conditional behavior.\nInstead, it provides a\nwhen directive\nthat can be added to stage sections.\nThe when directive supports several types of conditions, including a branch condition,\nwhere the stage will run when the branch name matches the specified pattern.\nThat is exactly what we need here.\n\nJenkinsfile\n\nstages {\n    /* ... unchanged ... */\n    stage ('Deploy') {\n        when {\n            branch 'master'\n        }\n        steps {\n             echo 'Placeholder for deploy steps.'\n        }\n    }\n}\n\nWhen we run our Pipeline with this new stage, we get the following outputs:\n\nLog output for 'feature/test' branch\n\n...\nFinished Sauce Labs test publisher\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Deploy)\nStage 'Deploy' skipped due to when conditional\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n...\n\nLog output for 'master' branch\n\n...\nFinished Sauce Labs test publisher\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] stage\n[Pipeline] { (Deploy)\n[Pipeline] echo\nPlaceholder for deploy steps.\n[Pipeline] }\n[Pipeline] // stage\n[Pipeline] }\n...\n\nConclusion\n\nI have to say, our latest Declarative Pipeline turned out extremely well.\nI think someone coming from Freestyle jobs, with little to no experience with Pipeline or Groovy,\nwould still be able to look at this Declarative Pipeline and make sense of what it is doing.\nWe’ve added new functionality to our Pipeline while making it easier to understand\nand maintain.\n\nI hope you’ve learned as much as I have during this blog series.\nI’m excited to see that even in the the short time since Declarative 1.0 was released,\nteams are already using it in make improvements similar to what those we’ve covered in this series.\nThanks for reading!\n\nLinks\n\nxUnit\n\nSauce OnDemand\n\nDeclarative Pipeline plugin\n\nDeclarative Pipeline Syntax Reference\n\nPipeline source for this post\n\nPipeline Shared Library source for this post","title":"Browser testing and conditional logic in Declarative Pipeline","tags":["pipeline","plugins","xunit","nightwatch","saucelabs","selenium","declarative"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}},{"node":{"date":"2017-02-15T00:00:00.000Z","id":"76a4ff94-6194-5d56-a94c-3287ec832681","slug":"/blog/2017/02/15/declarative-notifications/","strippedHtml":"This is a guest post by Liam Newman,\nTechnical Evangelist at CloudBees.\n\nDeclare Your Pipelines!\nDeclarative Pipeline 1.0 is here!\nThis is the third post in a series showing some of the cool features of\nDeclarative Pipeline.\n\nIn the\nprevious post,\nwe converted a Scripted Pipeline to a Declarative Pipeline, adding descriptive stages\nand post sections.  In one of those post blocks, we included a placeholder for\nsending notifications.\n\nIn this blog post, we’ll repeat what I did in\n\" Sending Notifications in Pipeline\nbut this time in Declarative Pipeline.\nFirst we’ll integrate calls to notification services Slack, HipChat, and Email into our Pipeline.\nThen we’ll refactor those calls into a single Step in a Shared Library, which\nwe’ll reuse as needed, keeping our Jenkinsfile concise and understandable.\n\nSetup\n\nThe setup for this post is almost the same as\nmy previous Declarative Pipeline post.\nI’ve used a new branch in\nmy fork of the\nHermann project :\nblog/declarative/notifications .\nI’d already set up a Multibranch Pipeline and pointed it at my repository,\nso the new branch will be picked up and built automatically.\n\nI still have my notification targets (where we’ll send notifications) that I created for the\n\" Sending Notifications in Pipeline\" blog post.\nTake a look at that post to review how I setup the\nSlack,\nHipChat,\nand Email-ext\nplugins to use those channels.\n\nAdding Notifications\n\nWe’ll start from the same Pipeline we had at the end of the previous post.\n\nThis Pipeline works quite well, except it doesn’t print anything at the start of\nthe run, and that final always directive only prints a message to the console log.\nLet’s start by getting the notifications working like we did in the original post.\nWe’ll just copy-and-paste the three notification steps (with different parameters)\nto get the notifications working for started, success, and failure.\n\npipeline {\n  /* ... unchanged ... */\n  stages {\n    stage ('Start') {\n      steps {\n        // send build started notifications\n        slackSend (color: '#FFFF00', message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n        // send to HipChat\n        hipchatSend (color: 'YELLOW', notify: true,\n            message: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n          )\n\n        // send to email\n        emailext (\n            subject: \"STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n            body: \"\"\" STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n            recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n          )\n      }\n    }\n    /* ... unchanged ... */\n  }\n  post {\n    success {\n      slackSend (color: '#00FF00', message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n      hipchatSend (color: 'GREEN', notify: true,\n          message: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n        )\n\n      emailext (\n          subject: \"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n          body: \"\"\" SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n          recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n        )\n    }\n\n    failure {\n      slackSend (color: '#FF0000', message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\n      hipchatSend (color: 'RED', notify: true,\n          message: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\"\n        )\n\n      emailext (\n          subject: \"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n          body: \"\"\" FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\",\n          recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n        )\n    }\n  }\n}\n\nMoving Notifications to Shared Library\n\nThis new Pipeline works and our Declarative Pipeline sends notifications; however,\nit is extremely ugly. In the original post using Scripted Pipeline,\nI defined a single method that I called at both the start and end of the pipeline.\nI’d like to do that here as well, but Declarative doesn’t support creating methods\nthat are accessible to multiple stages.\nFor this, we’ll need to turn to\nShared Libraries.\n\nShared Libraries, as the name suggests,\nlet Jenkins Pipelines share code instead of copying it to each new project.\nShared Libraries are not specific to Declarative; they were released in their\ncurrent form several months ago and were useful in Scripted Pipeline.\nDue to Declarative Pipeline’s lack of support for defining methods,\nShared Libraries take on a vital role.  They are the only supported way within\nDeclarative Pipeline to define methods or classes that we want to use in more than one stage.\n\nThe lack of support for defining methods that are accessible in multiple stages,\nis a known issue, with at least two JIRA tickets:\nJENKINS-41335 and\nJENKINS-41396.\nFor this series, I chose to stick to using features that are fully supported\nin Declarative Pipeline at this time.\nThe internet has plenty of hacked together solutions that happen to work today,\nbut I wanted to highlight current best practices and dependable solutions.\n\nSetting up a Shared Library\n\nI’ve created a simple shared library repository for this series of posts, called\njenkins-pipeline-shared.\nThe shared library functionality has too many configuration options to cover in one post.\nI’ve chosen to configure this library as a \"Global Pipeline Library,\"\naccessible from any project on my Jenkins controller.\nTo setup a \"Global Pipeline Library,\" I navigated to \"Manage Jenkins\" → \"Configure System\"\nin the Jenkins web UI.\nOnce there, under \"Global Pipeline Libraries\", I added a new library.\nI then set the name to bitwiseman-shared, pointed it at my repository,\nand set the default branch for the library to master,\nbut I’ll override that in my Jenkinsfile.\n\nMoving the Code to the Library\n\nAdding a Step to a library involves creating a file with the name of our Step,\nadding our code to a call() method inside that file,\nand replacing the appropriate code in our Jenkinsfile with the new Step calls.\nLibraries can be set to load \"implicitly,\"\nmaking their default branch automatically available to all Pipelines,\nor they can be loaded manually using a @Library annotation.\nThe branch for implicitly loaded libraries can also be overridden using the @Library annotation.\n\nThe minimal set of dependencies for sendNotifications means we can\nbasically copy-and-paste the code from the original blog post.\nWe’ll check this change into a branch in the library named\nblog/declarative/notifications, the same as my branch in the hermann repository.\nThis will let us make changes on the master branch later without breaking this example.\nWe’ll then use the @Library directive to tell Jenkins to use that branch’s version\nof the library with this Pipeline.\n\nJenkinsfile\n\n// Declarative //\n#!groovy\n@Library('bitwiseman-shared@blog/declarative/notifications') _ (1)\n\npipeline {\n  agent {\n    // Use docker container\n    docker {\n      image 'ruby:2.3'\n    }\n  }\n  options {\n    // Only keep the 10 most recent builds\n    buildDiscarder(logRotator(numToKeepStr:'10'))\n  }\n  stages {\n    stage ('Start') {\n      steps {\n        // send build started notifications\n        sendNotifications 'STARTED'\n      }\n    }\n    stage ('Install') {\n      steps {\n        // install required bundles\n        sh 'bundle install'\n      }\n    }\n    stage ('Build') {\n      steps {\n        // build\n        sh 'bundle exec rake build'\n      }\n\n      post {\n        success {\n          // Archive the built artifacts\n          archive includes: 'pkg/*.gem'\n        }\n      }\n    }\n    stage ('Test') {\n      steps {\n        // run tests with coverage\n        sh 'bundle exec rake spec'\n      }\n\n      post {\n        success {\n          // publish html\n          publishHTML target: [\n              allowMissing: false,\n              alwaysLinkToLastBuild: false,\n              keepAll: true,\n              reportDir: 'coverage',\n              reportFiles: 'index.html',\n              reportName: 'RCov Report'\n            ]\n        }\n      }\n    }\n  }\n  post {\n    always {\n      sendNotifications currentBuild.result\n    }\n  }\n}\n// Scripted //\n\n1\nThe _ here is intentional.\nJava/Groovy Annotations\nsuch as @Library must be applied to an element.\nThat is often a using statement, but that isn’t needed here so by convention we use an \\_.\n\nvars/sendNotifications.groovy\n\n#!/usr/bin/env groovy\n\n/**\n * Send notifications based on build status string\n */\ndef call(String buildStatus = 'STARTED') {\n  // build status of null means successful\n  buildStatus = buildStatus ?: 'SUCCESS'\n\n  // Default values\n  def colorName = 'RED'\n  def colorCode = '#FF0000'\n  def subject = \"${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\"\n  def summary = \"${subject} (${env.BUILD_URL})\"\n  def details = \"\"\" ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nCheck console output at \" ${env.JOB_NAME} [${env.BUILD_NUMBER}]\"\"\"\"\n\n  // Override default values based on build status\n  if (buildStatus == 'STARTED') {\n    color = 'YELLOW'\n    colorCode = '#FFFF00'\n  } else if (buildStatus == 'SUCCESS') {\n    color = 'GREEN'\n    colorCode = '#00FF00'\n  } else {\n    color = 'RED'\n    colorCode = '#FF0000'\n  }\n\n  // Send notifications\n  slackSend (color: colorCode, message: summary)\n\n  hipchatSend (color: color, notify: true, message: summary)\n\n  emailext (\n      to: 'bitwiseman@bitwiseman.com',\n      subject: subject,\n      body: details,\n      recipientProviders: [[$class: 'DevelopersRecipientProvider']]\n    )\n}\n\nConclusion\n\nIn this post we added notifications to our Declarative Pipeline.\nWe wanted to move our repetitive notification code into a method;\nhowever, Declarative Pipeline prevented us from defining a method in our Jenkinsfile.\nInstead, with the help of the Shared Library feature,\nwe were able to define a sendNotifications Step that we could call from our Jenkinsfile.\nThis maintained the clarity of our Pipeline and will let us easily reuse this Step in other projects.\nI was pleased to see how little the resulting Pipeline differed from where we started.\nThe changes were restricted to the start and end of the file with no reformatting elsewhere.\n\nIn the next post, we’ll cover more about shared libraries and how to\nrun Sauce OnDemand with xUnit Reporting in Declarative Pipeline.\n\nLinks\n\nDeclarative Pipeline plugin\n\nDeclarative Pipeline Syntax Reference\n\nShared Library reference\n\nPipeline source for this post\n\nPipeline Shared Library source for this post","title":"Declarative Pipeline: Notifications and Shared Libraries","tags":["tutorial","pipeline","declarative","plugins","notifications","slack","hipchat","emailext"],"authors":[{"avatar":{"childImageSharp":null},"blog":null,"github":"bitwiseman","html":"<div class=\"paragraph\">\n<p>Liam started his software career as a tester, which might explain why he&#8217;s such a fan of CI/CD and Pipeline as Code.\nHe has spent the majority of his software engineering career implementing Continuous Integration systems at companies big and small.\nHe is a Jenkins project contributor and an expert in Jenkins Pipeline, both Scripted and Declarative.\nLiam currently works as a Jenkins Evangelist at <a href=\"https://cloudbees.com\">CloudBees</a>.\nWhen not at work, he enjoys testing gravity by doing Aikido.</p>\n</div>","id":"lnewman","irc":null,"linkedin":null,"name":"Liam Newman","slug":"/blog/author/lnewman","twitter":"bitwiseman"}]}}]}},"pageContext":{"tag":"pipeline","limit":8,"skip":40,"numPages":13,"currentPage":6}},
    "staticQueryHashes": ["3649515864"]}