{
    "componentChunkName": "component---src-templates-tag-blog-list-template-js",
    "path": "/node/tags/performance/page/2",
    "result": {"data":{"allBlog":{"edges":[{"node":{"date":"2018-02-22T00:00:00.000Z","id":"d0c104fc-7582-5b71-ae72-ad7781b4796d","slug":"/blog/2018/02/22/cheetah/","strippedHtml":"Table of Contents\n\nIntroducing \"Project Cheetah\"\nYes, but what does it DO?\nHow Do I Set Speed/Durability Settings?\n\n1. Globally, you can choose a global default durability setting:\n2. Each Pipeline can get a custom Durability Setting:\n3. Multibranch Projects can use a new BranchProperty to customize the Durability Setting.\n\nWill Performance-Optimized Mode Help Me?\nOther Goodies\nHow Did You Do It?\nWhat Next?\n\nSince it launched, Pipeline has had a bit of a Dr. Jekyll and Mr. Hyde performance problem.  In certain circumstances, Pipeline can turn from a mild-mannered CI/CD assistant into a monster.  It will happily eat storage read/write capacity like popcorn without caring about the other concerns of our friendly butler.  When combined with other additional factors, this can result in real-world stability problems.  For example, combining slow storage with a spike in running Pipelines has brought down production Jenkins at more than one organization.  Similarly, users see issues if a busy controller gets hit with an extra source of stress; past culprits have been heavy automated (ab)use of Jenkins APIs, now-solved user lookup bugs, backup jobs, and plugins run crazy that load excessive numbers of builds.  Symptoms ranged from visible slowdowns in the UI to unresponsive jobs and \"hung\" controllers.\n\nNow I’m not saying this to scare people or to criticize the technology we’ve built. Implementing Pipeline scalability best practices coupled with SSD storage keeps Jenkins in a happy place.  We just need context on the weaknesses to see why it’s important to address them.\n\nIntroducing \"Project Cheetah\"\n\nToday we’re announcing the first major results of \"Project Cheetah\", our long-running effort to address these challenges and improve Pipeline scalability.  More broadly, Cheetah aims to help in 3 places:\n\nSmall-scale containers: Pipeline needs to run leanly in resource-constrained containers, to enable easy scale-out without consuming excessive resources on shared container hosts.\n\nEnterprise systems: Pipeline needs to effectively serve high-scale Jenkins instances that are central to many large companies.\n\nGeneral case: run Pipelines a bit more quickly on average, and allow users to get much-stronger performance in worst-case scenarios.\n\nThese changes are implemented across many of the Pipeline plugins.\n\nYes, but what does it DO?\n\nProject Cheetah offers several things, but the most important is Durability Settings for all Pipelines, and especially the Performance-Optimized setting.  This setting avoids several potentially unexpected performance \"surprises\" that may strike users.  In the general case, it greatly reduces the disk IO needs for Pipeline.  How much?  Below is a graph of storage utilization with legacy Pipeline versions (think early 2017) and with the latest version using the Performance-Optimized mode.  These are tested on an AWS instance backed by an EBS volume provisioned with 300 IOPs.\n\nBefore and After:\n\nAs you can see, storage utilization goes down by a lot.  While the exact number will vary, across the benchmark testcases this results in Pipeline throughput of 2x to 6x the previous before becoming IO-bound. This also increases stability of Jenkins controllers because they will tolerate unexpected load.\n\nThis comes with a major drop in CPU IOWait as well:\n\nAnd of course the rate at which data is written to disk and number of writes/s is also reduced:\n\nFor enterprise users, timing stats often show 10-20% of normal builds is serializing the Program and writing the record of steps run (\"FlowNodes\") - the performance optimized durability setting will cut this to almost nothing (for standard pipelines, 1/100 or less) - so builds will complete faster, especially complex ones.\n\nPlease see the Pipeline Scalability documentation for deeper information on the new Durability Settings, how to use them, and which plugin versions are required to gain these features.\n\nAlso, users may see a reduction in hung Pipelines because new test utilities made it possible to identify and correct a variety of bugs.\n\nHow Do I Set Speed/Durability Settings?\n\nThere are 3 ways to configure the durability setting:\n\n1. Globally, you can choose a global default durability setting:\n\nUnder \"Manage Jenkins\" > \"Configure System\", labelled \"Pipeline Speed/Durability Settings\".  You can override these with the more specific settings below.\n\n2. Each Pipeline can get a custom Durability Setting:\n\nThis is one of the job properties located at the top of the job configuration, labelled \"Custom Pipeline Speed/Durability Level.\" This overrides the global setting. Or, use a \"properties\" step - the setting will apply to the NEXT run after the step is executed (same result).\n\n// Script //\nproperties([durabilityHint('PERFORMANCE_OPTIMIZED')])\n// Declarative //\npipeline {\n    agent any\n    stages {\n        stage('Example') {\n            steps {\n                echo 'Hello World'\n            }\n        }\n    }\n    options {\n        durabilityHint('PERFORMANCE_OPTIMIZED')\n    }\n}\n\n3. Multibranch Projects can use a new BranchProperty to customize the Durability Setting.\n\nUnder the SCM you can configure a custom Branch Property Strategy and add a property for Custom Pipeline Speed/Durability Level.  This overrides the global Durability Setting and will apply to each branch at the next run.  You can also use a \"properties\" step to override the setting, but remember that you may have to run the step again to undo this.\n\nDurability settings will take effect with the next applicable Pipeline run, not immediately.  The setting will be displayed in the log.\n\nThere is a slight durability trade-off for using the Performance-Optimized mode — the appropriate section of the Pipeline Scalability documentation has the specifics.\nFor most uses we do not expect this to be important, but there are a few specific cases where users may wish to use a slower/higher-durability setting. The Best Practices are documented.\n\nWe recommend using Performance-Optimized by default, but because it does represent a slight behavioral change the initial \"Cheetah\" plugin releases defaults to maintain previous behavior. We expect to switch this default in the future with appropriate notice once people have a chance to get used to the new settings.\n\nWill Performance-Optimized Mode Help Me?\n\nYes, if your Jenkins instance uses NFS, magnetic storage, runs many Pipelines at once, or shows high iowait (above 5%)\n\nYes, if you are running Pipelines with many steps (more than several hundred).\n\nYes, if your Pipeline stores large files or complex data to variables in the script, keeps that variable in scope for future use, and then runs steps.  This sounds oddly specific but happens more than you’d expect.\n\nFor example: readFile step with a large XML/JSON file, or using configuration information from parsing such a file with One of the Utility Steps.\n\nAnother common pattern is a \"summary\" object containing data from many branches (logs, results, or statistics). Often this is visible because you’ll be adding to it often via an add/append or Map.put() operations.\n\nLarge arrays of data or Maps of configuration information are another common example of this situation.\n\nNo, if your Pipelines spend almost all their time waiting for a few shell/batch steps to finish.  This ISN’T a magic \"go fast\" button for everything!\n\nNo, if Pipelines are writing massive amounts of data to logs (logging is unchanged).\n\nNo, if you are not using Pipelines, or your system is loaded down by other factors.\n\nNo, if you don’t enable higher-performance modes for pipelines.  See above for how!\n\nOther Goodies\n\nUsers can now set an optional job property so that individual Pipelines fail cleanly rather than resuming upon restarting the controller.  This is useful for niche cases where some Pipelines are considered disposable and users would value a clean restart over Pipeline durability.\n\nWe’ve reduced classloading and reflection quite significantly, which improves scaling and reduces CPU use:\n\nScript Security (as of version 1.41) has gotten optimizations to reduce the performance overhead of Sandbox mode and eliminate lock contention so Pipeline multithreads better.\n\nPipeline Step data uses up less space on disk (regardless of the durability setting) - this should be 30% smaller.  Assume it’s a few MB per 1000 steps - but for every build after the change.\n\nEven in the low-performance/high-durability modes, some redundant writes have been removed, which decreases the number of writes by 10-20%.\n\nHow Did You Do It?\n\nThat’s probably material for another blog post or Jenkins World talk.\n\nThe short answer is: first we built a tool to simulate a full production environment and provide detailed metrics collection at scale.  Then we profiled Jenkins to identify bottlenecks and attacked them.  Rinse and repeat.\n\nWhat Next?\n\nThe next big change, which I’m calling Cheetah Part 2 is to address Pipeline’s logging. For every Step run, Pipeline writes one or more small log files. These log files are then copied into the build log content, but are retained to make it possible to easily fetch logs for each step.\n\nThis copying process means every log line is written twice, greatly reducing performance, and writing to many small files is orders of magnitude slower than appending to one big log file.\n\nWe’re going to remove this duplication and data fragmentation and use a more efficient mechanism to find per-step logs. This should further improve the ability to run Pipelines on NFS mounts and hard-drive-backed storage, and should significantly improve performance at scale.\n\nBesides this, there’s a variety of different tactical improvements to improve scaling behavior and reduce resource needs.\n\nThe Project Cheetah work doesn’t free users to completely ignore Pipeline scaling best practices and previous suggestions.  Nor does it eliminate the need for efficient GC settings.  But this and other enhancements from the last year can significantly improve the storage situation for most users and reduce the penalties for worst-case behaviors.  When you add all the pieces together, the result is a faster, leaner, more reliable Pipeline experience.","title":"Project Cheetah - Faster, Leaner Pipeline That Can Keep Up With Demand","tags":["pipeline","performance","scalability"],"authors":[]}},{"node":{"date":"2017-02-01T00:00:00.000Z","id":"aa509c7b-3f24-5cce-8519-dda84cd1233e","slug":"/blog/2017/02/01/pipeline-scalability-best-practice/","strippedHtml":"This is a guest post by Sam Van Oort,\nSoftware Engineer at CloudBees and contributor to\nthe Jenkins project.\n\nToday I’m going to show you best practices to write scalable and robust Jenkins Pipelines. This is drawn from a\ncombination of work with the internals of Pipeline and observations with large-scale users.\n\nPipeline code works beautifully for its intended role of automating\nbuild/test/deploy/administer tasks.  As it is pressed into more complex roles\nand unanticipated uses, some users hit issues.  In these cases, applying the\nbest practices can make the difference between:\n\nA single controller running\nhundreds\nof concurrent builds on low end hardware (4 CPU cores and 4 GB of\nheap)\n\nRunning a couple dozen builds and bringing a controller to its knees or\ncrashing it…​even with 16+ CPU cores and 20+ GB of heap!\n\nThis has been seen in the wild.\n\nFundamentals\n\nTo understand Pipeline behavior you must understand a few points about\nhow it executes.\n\nExcept for the steps themselves, all of the Pipeline logic, the Groovy conditionals, loops, etc execute on the controller. Whether simple or complex! Even inside a node block!\n\nSteps may use executors to do work where appropriate, but each\nstep has a small on-controller overhead too.\n\nPipeline code is written as Groovy but the execution model is\nradically transformed at compile-time to Continuation Passing Style\n(CPS).\n\nThis transformation provides valuable safety and durability\nguarantees for Pipelines, but it comes with trade-offs:\n\nSteps can invoke Java and execute fast and efficiently, but Groovy\nis much slower to run than normal.\n\nGroovy logic requires far more memory, because an object-based\nsyntax/block tree is kept in memory.\n\nPipelines persist the program and its state frequently to be able to\nsurvive failure of the controller.\n\nFrom these we arrive at a set of best practices to make pipelines more\neffective.\n\nBest Practices For Pipeline Code\n\nThink of Pipeline code as glue: just enough Groovy code to connect\ntogether the Pipeline steps and integrate tools, and no more.\n\nThis makes code easier to maintain, more robust against bugs, and\nreduces load on controllers.\n\nKeep it simple: limit the amount of complex logic embedded in the\nPipeline itself (similarly to a shell script) and avoid treating it as a\ngeneral-purpose programming language.\n\nPipeline restricts all variables to Serializable types, so keeping\nPipeline logic simple helps avoid a NotSerializableException - see\nappendix at the bottom.\n\nUse @NonCPS -annotated functions for slightly more complex work.\nThis means more involved processing, logic, and transformations. This\nlets you leverage additional Groovy & functional features for more\npowerful, concise, and performant code.\n\nThis still runs on controllers so be mindful of complexity, but is much\nfaster than native Pipeline code because it doesn’t provide durability\nand uses a faster execution model. Still, be mindful of the CPU cost and\noffload to executors for complex work (see below).\n\n@NonCPS functions can use a much broader subset of the Groovy\nlanguage, such as iterators and functional features, which makes them\nmore terse and fast to write.\n\n@NonCPS functions should not use Pipeline steps internally, however\nyou can store the result of a Pipeline step to a variable and use it\nthat as the input to a @NonCPS function.\n\nGotcha: It’s not guaranteed that use of a step will generate an\nerror (there is an open RFE to implement that), but you should not rely\non that behavior. You may see improper handling of exceptions, in\nparticular.\n\nWhile normal Pipeline is restricted to serializable local variables\n(see appendix at bottom), @NonCPS functions can use more complex,\nnonserializable types internally (for example regex matchers, etc). Parameters\nand return types should still be Serializable, however.\n\nGotcha: improper usages are not guaranteed to raise an error with\nnormal Pipeline (optimizations may mask the issue), but it is unsafe to\nrely on this behavior.\n\nPrefer external scripts/tools for complex or CPU-expensive\nprocessing rather than Groovy language features. This offloads work\nfrom the controller to external executors, allowing for easy scale-out of\nhardware resources. It is also generally easier to test because these\ncomponents can be tested in isolation without the full on-controller\nexecution environment.\n\nMany software vendors will provide easy command-line clients for\ntheir tools in various programming languages. These are often robust,\nperformant, and easy to use. Plugins offer another option (see below).\n\nShell or batch steps are often the easiest way to integrate these\ntools, which can be written in any language. For example: sh “java -jar\nclient.jar $endPointUrl $inputData” for a Java client, or sh “python\njiraClient.py $issueId $someParam” for a Python client.\n\nGotcha: especially avoid Pipeline XML or JSON parsing using Groovy’s XmlSlurper and JsonSlurper!  Strongly prefer command-line tools or scripts.\n\nThe Groovy implementations are complex and as a result more brittle in Pipeline use.\n\nXmlSlurper and JsonSlurper can carry a high memory and CPU cost in pipelines\n\nxmllint and xmlstartlet are command-line tools offering XML extraction via xpath\n\njq offers the same functionality for JSON\n\nThese extraction tools may be coupled to curl or wget for fetching information from an HTTP API\n\nExamples of other places to use command-line tools:\n\nTemplating large files\n\nNontrivial integration with external APIs (for bigger vendors,\nconsider a Jenkins plugin if a quality offering exists)\n\nSimulations/complex calculations\n\nBusiness logic\n\nConsider existing plugins for external integrations. Jenkins has a\nwealth of plugins, especially for source control, artifact management,\ndeployment systems, and systems automation. These can greatly reduce the\namount of Pipeline code to maintain. Well-written plugins may be\nfaster and more robust than Pipeline equivalents.\n\nConsider both plugins and command-line clients (above) — one may be\neasier than the other.\n\nPlugins may be of widely varying quality. Look at the number of installations and how frequently and recently updates appear in the changelog. Poorly-maintained plugins\nwith limited installations may actually be worse than writing a little\ncustom Pipeline code.\n\nAs a last resort, if there is a good-quality plugin that is not\nPipeline-enabled, it is fairly easy to write a Pipeline wrapper to\nintegrate it or write a custom step that will invoke it.\n\nAssume things will go wrong: don’t rely on workspaces being clean\nof the remnants from previous executions, clean explicitly where needed.\nMake use of timeouts and retry steps (that’s what they’re there for).\n\nWithin a git repository, git clean -fdx is a good way to\naccomplish this and reduces the amount of SCM cloning\n\nDO use parameterized Pipelines and variables to make your Pipeline\nscripts more reusable. Passing in parameters is especially helpful for\nhandling different environments and should be preferred to applying\nconditional lookup logic; however, try to limit parameterized pipelines invoking each other.\n\nTry to limit business logic embedded in Pipelines. To some extent\nthis is inevitable, but try to focus on tasks to complete instead,\nbecause this yields more maintainable, reusable, and often more\nperformant Pipeline code.\n\nOne code smell that points to a problem is many hard-coded\nconstants. Consider taking advantage of the options above to refactor\ncode for better composability.\n\nFor complex cases, consider using Jenkins integration options\n(plugins, Jenkins API calls, invoking input steps externally) to offload\nimplementation of more complex business rules to an external system if\nthey fit more naturally there.\n\nPlease, think of these as guidelines, not strict rules – Jenkins\nPipeline provides a great deal of power and flexibility, and it’s there\nto be used.\n\nBreaking enough of these rules at scale can cause controllers to fail by\nplacing an unsustainable load on them.\n\nFor additional guidance, I also recommend\nthis\nJenkins World talk\non how to engineer Pipelines for speed and performance:\n\nAppendix: Serializable vs. Non-Serializable Types:\n\nTo assist with Pipeline development, here are common serializable and\nnon-serializable types, to assist with deciding if your logic can be CPS\nor should be in a @NonCPS function to avoid issues.\n\nCommon Serializable Types (safe everywhere):\n\nAll primitive types and their object wrappers: byte, boolean, int,\ndouble, short, char\n\nStrings\n\nenums\n\nArrays of serializable types\n\nArrayLists and normal Groovy Lists\n\nSets: HashSet\n\nMaps: normal Groovy Map, HashMap, TreeMap\n\nExceptions\n\nURLs\n\nDates\n\nRegex Patterns (compiled patterns)\n\nCommon non-Serializable Types (only safe in @NonCPS functions):\n\nIterators: this is a common problem. You need to use C-style loop, i.e.\nfor(int i=0; i\n\nRegex Matchers (you can use the\nbuilt-in functions in String, etc, just not the Matcher itself)\n\nImportant: JsonObject, JsonSlurper, etc in Groovy 2+ (used in some 2.x+\nversions of Jenkins).\n\nThis is due to an internal implementation change — earlier versions may serialize.","title":"Best Practices for Scalable Pipeline Code","tags":["pipeline","performance","scalability"],"authors":[]}},{"node":{"date":"2016-11-21T00:00:00.000Z","id":"bf6fcc51-7017-5159-91de-3d955a72998d","slug":"/blog/2016/11/21/gc-tuning/","strippedHtml":"This is a\ncross\npost by Sam Van Oort, Software Engineer at\nCloudBees and contributor to the Jenkins project.\n\nToday I’m going to show you how easy it is to tune Jenkins Java settings to\nmake your controllers more responsive and stable, especially with large heap sizes.\n\nThe Magic Settings:\n\nBasics: -server -XX:+AlwaysPreTouch\n\nGC Logging: -Xloggc:$JENKINS_HOME/gc-%t.log -XX:NumberOfGCLogFiles=5 -XX:+UseGCLogFileRotation -XX:GCLogFileSize=20m -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCCause -XX:+PrintTenuringDistribution -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy\n\nG1 GC settings: -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1\n\nHeap settings: set your minimum heap size ( -Xms) to at least 1/2 of your maximum size ( -Xmx).\n\nNow, let’s look at where those came from!  We’re going to focus on garbage\ncollection (GC) here and dig fast and deep to strike for gold; if you’re not\nfamiliar with GC fundamentals\ntake a look at this source.\n\nBecause performance tuning is data driven, I’m going to use real-world data\nselected three very large Jenkins instances that I help support.\n\nWhat we’re not going to do: Jenkins basics, or play with max heap.  See the\nsection \"what should I do before tuning.\"  This is for cases where we really\ndo need a big heap and can’t easily split our Jenkins controllers into smaller\nones.\n\nThe Problem: Hangups\n\nSymptom: Users report that the Jenkins instance periodically hangs, taking\nseveral seconds to handle normally fast requests.  We may even see lockups or\ntimeouts from systems communicating with the Jenkins controller (build agents,\netc).  In long periods of heavy load, users may report Jenkins running slowly.\nApplication monitoring shows that during lockups all or most of the CPU cores\nare fully loaded, but there’s not enough activity to justify it.  Process and\nJStack dumps will reveal that the most active Java threads are doing garbage\ncollection.\n\nWith Instance A, they had this problem.  Their Jenkins Java arguments are very\nclose to the default, aside from sizing the heap:\n\n24 GB max heap, 4 GB initial, default GC settings (ParallelGC)\n\nA few flags set (some coming in as defaults): -XX:-BytecodeVerificationLocal -XX:-BytecodeVerificationRemote -XX:+ReduceSignalUsage -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation\n\nAfter enabling garbage collection (GC) logging we see the following rough stats:\n\n.\n\nDiving deeper, we get this chart of GC pause durations:\n\nKey stats:\n\nThroughput: 99.64%  (percent of time spent executing application code, not doing garbage collection)\n\nAverage GC time: 348 ms (ugh!)\n\nGC cycles over 2 seconds: 36 (2.7%)\n\nMinor/Full GC average time: 263 ms / 2.803 sec\n\nObject creation & promotion rate: 42.4 MB/s & 1.99 MB/s\n\nExplanations:\n\nAs you can see, young GC cycles very quickly clear away freshly-created\ngarbage, but the deeper old-gen GC cycles run very slowly: 2-4 seconds. This is\nwhere our problems happen.  The default Java garbage collection algorithm\n(ParallelGC) pauses everything when it has to collect garbage (often called a\n\"stop the world pause\"). During that period, Jenkins is fully halted: normally\n(with small heaps) these pauses are too brief to be an issue.  With heaps of 4\nGB or larger, the time required becomes long enough to be a problem: several\nseconds over short windows, and over a longer interval you occasionally see\nmuch longer pauses (tens of seconds, or minutes.)\n\nThis is where the user-visible hangs and lock-ups happen.  It also adds\nsignificant latency to those build/deploy tasks.  In periods of heavy load, the\nsystem was even experiencing hangs of 30+ seconds for a single full GC cycle.\nThis was long enough to trigger network timeouts (or internal Jenkins thread\ntimeouts) and cause even larger problems.\n\nFortunately there’s a solution: the concurrent low-pause garbage collection\nalgorithms, Concurrent Mark Sweep (CMS) and Garbage First (G1). These attempt\nto do much of the garbage collection concurrently with application threads,\nresulting in much shorter pauses (at a slight cost in extra CPU use).  We’re\ngoing to focus on G1, because it is slated to become the default in Java 9 and\nis the official recommendation for large heap sizes.\n\nLet’s see what happens when someone uses G1 on a similarly-sized Jenkins\ncontroller with Instance B (17 GB heap):\n\nTheir settings:\n\n16 GB max heap, 0.5 GB initial size\n\nJava flags (mostly defaults, except for G1): -XX:+UseG1GC -XX:+UseCompressedClassPointers -XX:+UseCompressedOops\n\nAnd the GC log analysis:\n\nKey stats:\n\nThroughput: 98.76%  (not great, but still only slowing things down a bit)\n\nAverage GC time: 128 ms\n\nGC cycles over 2 seconds: 11, 0.27%\n\nMinor/Full GC average time: 122 ms / 1 sec 232 ms\n\nObject creation & promotion rate: 132.53 MB/s & 522 KB/s\n\nOkay, much better : some improvement may be expected from a 30% smaller\nheap, but not as much as we’ve seen.  Most of the GC pauses are well\nunder 2 seconds, but we have 11 outliers - long Full GC pauses of 2-12 seconds.\nThose are troubling; we’ll take a deeper dive into their causes in a second.\nFirst, let’s look at the big picture and at how Jenkins behaves with G1 GC for\na second instance.\n\nG1 Garbage Collection with Instance C (24 GB heap):\n\nTheir settings:\n\n24 GB max heap, 24 GB initial heap, 2 GB max metaspace\n\nSome custom flags: `-XX:+UseG1GC -XX:+AlwaysPreTouch -XX:+UseStringDeduplication  -XX:+UseCompressedClassPointers -XX:+UseCompressedOops `\n\nClearly they’ve done some garbage collection tuning and optimization.  The\nAlwaysPreTouch pre-zeros allocated heap pages, rather than waiting until\nthey’re first used. This is suggested especially for large heap sizes, because\nit trades slightly slower startup times for improved runtime performance.  Note\nalso that they pre-allocated the whole heap.  This is a common optimization.\n\nThey also enabled StringDeduplication, a G1 option introduced in Java 8 Update\n20 that transparently replaces identical character arrays with pointers to the\noriginal, reducing memory use (and improving cache performance).  Think of it\nlike String.intern() but it silently happens during garbage collection.  This\nis a concurrent operation added on to normal GC cycles, so it doesn’t pause the\napplication.  We’ll look at its impacts later.\n\nLooking at the basics:\n\nSimilar picture to Instance B, but it’s hidden by the sheer number of points\n(this is a longer period here, 1 month).  Those same occasional Full GC\noutliers are present!\n\nKey stats:\n\nThroughput: 99.93%\n\nAverage GC time: 127 ms\n\nGC cycles over 2 seconds: 235 (1.56%)\n\nMinor/Full GC average time: 56 ms / 3.97 sec\n\nObject creation & promotion rate: 34.06 MB/s & 286 kb/s\n\nOverall fairly similar to Instance B: ~100 ms GC cycles, all the minor GC\ncycles are very fast.  Object promotion rates sound similar.\n\nRemember those random long pauses?\n\nLet’s find out what caused them and how to get rid of them.  Instance B had 11\nsuper-long pause outliers.  Let’s get some more detail, by opening GC Logs in\nGCViewer.\nThis tool gives a tremendous amount of information.  Too much, in fact —  I\nprefer to use\nGCEasy.io\nexcept where needed.  Since GC logs do not contain compromising information\n(unlike heap dumps or some stack traces), web apps are a great tool for\nanalysis.\n\nWhat we care about are at the Full GC times in the middle (highlighted).  See\nhow much longer they are vs. the young and concurrent GC cycles up top (2\nseconds or less)?\n\nNow, I lied a bit earlier - sorry!  For concurrent garbage collectors, there\nare actually 3 modes: young GC, concurrent GC, and full GC.  Concurrent GC\nreplaces the Full GC mode in Parallel GC with a faster concurrent operation\nthat runs in parallel with the application.  But in a few cases, we are\nforced to fall back to a non-concurrent Full GC operation, which will use the\nserial  (single-threaded) garbage collector.  That means that even if we have\n30+ CPU cores, only one is working. This is what is happening here, and on a\nlarge-heap, multicore system it is S  L  O  W.  How slow?  280 MB/s vs. 12487\nMB/s for Instance B (for instance C, the difference is also about 50:1).\n\nWhat triggers a full GC instead of concurrent:\n\nExplicit calls to System.gc() (most common culprit, often tricky to trace down)\n\nMetadata GC Threshold: Metaspace (used for Class data mostly) has hit the\ndefined size to force garbage collection or increase it.  Documentation is\nterrible for this,\nStack Overflow\nwill be your friend.\n\nConcurrent mode failure: concurrent GC can’t complete fast enough to keep up\nwith objects the application is creating (there are JVM arguments to trigger\nconcurrent GC earlier)\n\nHow do we fix this?\n\nFor explicit GC:\n\n-XX:+DisableExplicitGC will turn off Full GC triggered by System.gc().  Often set in production, but the below option is safer.\n\nWe can trigger a concurrent GC in place of a full one with -XX:+ExplicitGCInvokesConcurrent - this will take the explicit call as a hint to do deeper cleanup, but with less performance cost.\n\nGotcha for people who’ve used CMS: if you have used CMS in the past, you\nmay have used the option -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses — which does what it says.  This option will silently fail in G1, meaning you\nstill see the very long pauses from Full GC cycles as if it wasn’t set (no\nwarning is generated).  I have logged a JVM bug for this issue.\n\nFor the Metadata GC threshold:\n\nIncrease your initial metaspace to the final amount to avoid resizing. For example: -XX:MetaspaceSize=500M\n\nInstance C also suffered the same problem with explicit GC calls, with almost\nall our outliers accounted for (230 out of 235) by slow, nonconcurrent Full GC\ncycles (all from explicit System.gc() calls, since they tuned metaspace):\n\nHere’s what GC pause durations look like if we remove the log entries for the\nexplicit System.gc() calls, assuming that they’ll blend in with the other\nconcurrent GC pauses (not 100% accurate, but a good approximation):\n\nInstance B:\n\nThe few long Full GC cycles at the start are from metaspace expansion — they\ncan be removed by increasing initial Metaspace size, as noted above. The\nspikes?  That’s when we’re about to resize the Java heap, and memory pressure\nis high. You can avoid this by setting the minimum/initial heap to at least\nhalf of the maximum, to limit resizing.\n\nStats:\n\nThroughput: 98.93%\n\nAverage GC time: 111 ms\n\nGC cycles over 2 seconds: 3\n\nMinor & Full or concurrent GC average time: 122 ms / 25 ms (yes, faster than minor!)\n\nObject creation & promotion rate: 132.07 MB/s & 522 kB/s\n\nInstance C:\n\nStats:\n\nThroughput: 99.97%\n\nAverage GC time: 56 ms\n\nGC cycles over 2 seconds: 0 (!!!)\n\nMinor & Full or concurrent GC average time: 56 ms & 10 ms (yes, faster than minor!)\n\nObject creation & promotion rate: 33.31 MB/s & 286 kB/s\n\nSide point: GCViewer is claiming GC performance of 128 GB/s (not unreasonable, we clear ~10 GB of young generation in under 100 ms usually)\n\nOkay, so we’ve tamed the long worst-case pauses!\n\nBut What About Those Long Minor GC Pauses We Saw?\n\nOkay, now we’re in the home stretch!  We’ve tamed the old-generation GC pauses\nwith concurrent collection, but what about those longer young-generation\npauses?  Lets look at stats for the different phases and causes again in\nGCViewer.\n\nHighlighted in yellow we see the culprit: the remark phase of G1 garbage\ncollection. This stop-the-world phase ensures we’ve identified all live\nobjects, and process references (\nmore info).\n\nLet’s look at a sample execution to get more info:\n\n2016-09-07T15:28:33.104+0000: 26230.652: [GC remark 26230.652: [GC ref-proc, 1.7204585 secs], 1.7440552 secs]\n\n [Times: user=1.78 sys=0.03, real=1.75 secs]\n\nThis turns out to be typical for the GC log: the longest pauses are spent in\nreference processing. This is not surprising because Jenkins internally uses\nreferences heavily for caching, especially weak references, and the default\nreference processing algorithm is single-threaded.  Note that user (CPU) time\nmatches real time, and it would be higher if we were using multiple cores.\n\nSo, we add the GC flag -XX:+ParallelRefProcEnabled which enables us to use the multiple cores more effectively.\n\nTuning young-generation GC further based on Instance C:\n\nBack to GCViewer we go, to see what’s time consuming with the GC for Instance C.\n\nThat’s good, because most of the time is just sweeping out the trash\n(evacuation pause).  But the 1.8 second pause looks odd.  Let’s look at the raw\nGC log for the longest pause:\n\n2016-09-24T16:31:27.738-0700: 106414.347: [GC pause (G1 Evacuation Pause) (young), 1.8203527 secs]\n[Parallel Time: 1796.4 ms, GC Workers: 8]\n [GC Worker Start (ms): Min: 106414348.2, Avg: 106414348.3, Max: 106414348.6, Diff: 0.4]\n[Ext Root Scanning (ms): Min: 0.3, Avg: 1.7, Max: 5.7, Diff: 5.4, Sum: 14.0]\n  [Update RS (ms): Min: 0.0, Avg: 7.0, Max: 19.6, Diff: 19.6, Sum: 55.9]\n    [Processed Buffers: Min: 0, Avg: 45.1, Max: 146, Diff: 146, Sum: 361]\n [Scan RS (ms): Min: 0.2, Avg: 0.4, Max: 0.7, Diff: 0.6, Sum: 3.5]\n [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.2]\n [Object Copy (ms): Min: 1767.1, Avg: 1784.4, Max: 1792.6, Diff: 25.5, Sum: 14275.2]\n [Termination (ms): Min: 0.3, Avg: 2.4, Max: 3.5, Diff: 3.2, Sum: 19.3]\n    [Termination Attempts: Min: 11, Avg: 142.5, Max: 294, Diff: 283, Sum: 1140]\n [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.4, Diff: 0.3, Sum: 0.8]\n [GC Worker Total (ms): Min: 1795.9, Avg: 1796.1, Max: 1796.2, Diff: 0.3, Sum: 14368.9]\n [GC Worker End (ms): Min: 106416144.4, Avg: 106416144.5, Max: 106416144.5, Diff: 0.1]\n\n…​oh, well dang. Almost the entire time (1.792 s out of 1.820) is walking\nthrough the live objects and copying them.  And wait, what about this line,\nshowing the summary statistics:\n\nEden: 13.0G(13.0G)->0.0B(288.0M) Survivors: 1000.0M->936.0M Heap: 20.6G(24.0G)->7965.2M(24.0G)]\n\nGood grief, we flushed out 13 GB (!!!) of freshly-allocated garbage in one\nswoop and compacted the leftovers!  No wonder it was so slow.  I wonder how we\naccumulated so much…​\n\nOh, right…​ we set up for 24 GB of heap initially, and each minor GC clears\nmost of the young generation.  Okay, so we’ve set aside tons of space for trash\nto collect, which means longer but less frequent GC periods.  This also gets\nthe best performance from Jenkins memory caches which are using WeakReferences\n(survives until collected by GC) and SoftReferences (more long-lived). Those\ncaches boost performance a lot.\n\nWe could take actions to prevent those rare longer pauses. The best ways are to\nlimit total heap size or reduce the value of -XX:MaxGCPauseMillis=200 from\nits default (200).  A more advanced way (if those don’t help enough) is to\nexplicitly set the maximum size of the young generation smaller (say\n-XX:G1MaxNewSizePercent=45 instead of the default of 60).  We could also\nthrow more CPUs at the problem.\n\nBut if we look up, most pauses are around 100 ms (200 ms is the default value\nfor MaxGCPauseMillis).  For Jenkins on this hardware, this appears to work\njust fine and a rare longer pause is OK as long as they don’t get too\nbig.  Also remember, if this happens often, G1 GC will try to autotune for\nlower pauses and more predictable performance.\n\nA Few Final Settings\n\nWe mentioned StringDeduplication was on with Instance C, what is the impact?\nThis only triggers on Strings that have survived a few generations (most of our\ngarbage does not), has limits on the CPU time it can use, and replaces\nduplicate references to their immutable backing character arrays.\nFor more info, look here.\nSo, we should be trading a little CPU time for improved memory efficiently\n(similarly to string interning).\n\nAt the beginning, this has a huge impact:\n\n[GC concurrent-string-deduplication, 375.3K->222.5K(152.8K), avg 63.0%, 0.0     024966 secs]\n[GC concurrent-string-deduplication, 4178.8K->965.5K(3213.2K), avg 65.3%, 0     .0272168 secs]\n[GC concurrent-string-deduplication, 36.1M->9702.6K(26.6M), avg 70.3%, 0.09     65196 secs]\n[GC concurrent-string-deduplication, 4895.2K->394.9K(4500.3K), avg 71.9%, 0     .0114704 secs]\n\nThis peaks at an average of about ~90%:\n\nAfter running for a month, less of an impact - many of the strings that can be\ndeduplicated already are:\n\n[GC concurrent-string-deduplication, 138.7K->39.3K(99.4K), avg 68.2%, 0.0007080 secs]\n[GC concurrent-string-deduplication, 27.3M->21.5M(5945.1K), avg 68.1%, 0.0554714 secs]\n[GC concurrent-string-deduplication, 304.0K->48.5K(255.5K), avg 68.1%, 0.0021169 secs]\n[GC concurrent-string-deduplication, 748.9K->407.3K(341.7K), avg 68.1%, 0.0026401 secs]\n[GC concurrent-string-deduplication, 3756.7K->663.1K(3093.6K), avg 68.1%, 0.0270676 secs]\n[GC concurrent-string-deduplication, 974.3K->17.0K(957.3K), avg 68.1%, 0.0121952 secs]\n\nHowever it’s cheap to use: in average, each dedup cycle takes 8.8 ms and\nremoves 2.4 kB of duplicates.  The median takes 1.33 ms and removes 17.66 kB\nfrom the old generation.  A small change per cycle, but in aggregate it adds up\nquickly — in periods of heavy load, this can save hundreds of megabytes of\ndata. But that’s still small, relative to multi-GB heaps.\n\nConclusion: turn string deduplication on string deduplication is fairly\ncheap to use, and reduces the steady-state memory needed for Jenkins.  That\nfrees up more room for the young generation, and should overall reduce GC time\nby removing duplicate objects.  I think it’s worth turning on.\n\nSoft reference flushing: Jenkins uses soft references for caching build\nrecords and in pipeline FlowNodes.  The only guarantee for these is that they\nwill be removed instead of causing an OutOfMemoryError…​ however Java\napplications can slow to a crawl from memory pressure long before that happens.\nThere’s an option that provides a hint to the JVM based on time & free memory,\ncontrolled by -XX:SoftRefLRUPolicyMSPerMB (default 1000).  The SoftReferences\nbecome eligible for garbage collection after this many milliseconds have\nelapsed since last touch…​ per MB of unused heap (vs the maximum).  The\nreferenced objects don’t count towards that target.  So, with 10 GB of heap\nfree and the default 1000 ms setting, soft references stick around for ~2.8\nhours (!).\n\nIf the system is continuously allocating more soft references, it may trigger\nheavy GC activity, rather than clearing out soft references. See the open bug\nJDK-6912889\nfor more details.\n\nIf Jenkins consumes excessive old generation memory, it may help to make soft\nreferences easier to flush  by reducing -XX:SoftRefLRUPolicyMSPerMB from its\ndefault (1000) to something smaller (say 10-200).  The catch is that\nSoftReferences are often used for objects that are relatively expensive to\nload, such lazy-loaded build records and pipeline FlowNode data.\n\nCaveats\n\nG1 vs. CMS:\n\nG1 was available on later releases of JRE 7, but unstable and slow. If you\nuse it you absolutely must be using JRE 8, and the later the release the better\n(it’s gotten a lot of patches).  Googling around will show horrible G1 vs CMS\nbenchmarks from around 2014: these are probably best ignored, since the G1\nimplementation was still immature then. There’s probably a niche for CMS use\nstill, especially on midsized heaps (1-3 GB) or where settings are already\ntuned.  With appropriate tuning it can still perform generally well for\nJenkins (which mostly generates short-lived garbage), but CMS eventually suffer\nfrom heap fragmentation and need a slow, non-concurrent Full GC to clear this.\nIt also needs considerably more tuning than G1.\n\nGeneral GC tuning caveats :\n\nNo single setting is perfect for everybody.  We avoid tweaking settings that we\ndon’t have strong evidence for here, but there are of course many additional\nsettings to tweak.  One shouldn’t change them without evidence though, because\nit can cause unexpected side effects.  The GC logs we enabled earlier will\ncollect this evidence.  The only setting that jumps out as a likely candidate\nfor further tuning is G1 region size (too small and there are many humungous\nobject allocations, which hurt performance).  Running on smaller systems,\nI’ve seen evidence that regions shouldn’t be smaller than 4 MB because\nthere are 1-2 MB objects allocated somewhat regularly — but it’s not\nenough to make solid guidance without more data.\n\nWhat Should I Do Before Tuning Jenkins GC:\n\nIf you’ve seen\nStephen Connolly’s excellent Jenkins World talk,\nyou know that most Jenkins instances can and should get by with 4 GB or less of\nallocated heap, even up to very large sizes.  You will want to turn on GC\nlogging (suggested above) and look at stats over a few weeks (remember\nGCeasy.io).\nIf you’re not seeing periodic longer pause times, you’re probably okay.\n\nFor this post we assume we’ve already done the basic performance work for Jenkins:\n\nJenkins is running on fast, SSD-backed storage.\n\nWe’ve set up build rotation for your Jobs, to delete old builds so they don’t pile up.\n\nThe weather column is already disabled for folders.\n\nAll builds/deploys are running on build agents not on the controller. If the controller has executors allocated, they are exclusively used for backup tasks.\n\nWe’ve verified that Jenkins really does need the large heap size and can’t easily be split into separate controllers.\n\nIf not, we need to do that FIRST before looking at GC tuning, because those will have larger impacts.\n\nConclusions\n\nWe’ve gone from:\n\nAverage 350 ms pauses (bad user experience) including less frequent 2+ second generation pauses\n\nTo an average pause of ~50 ms, with almost all under 250 ms\n\nReduced total memory footprint from String deduplication\n\nHow:\n\nUse Garbage First (G1) garbage collection, which performs generally very well for Jenkins.  Usually there’s enough spare CPU time to enable concurrent running.\n\nEnsure explicit System.gc() and metaspace resizing do not trigger a Full GC because this can trigger a very long pause\n\nTurn on parallel reference processing for Jenkins to use all CPU cores fully.\n\nUse String deduplication, which generates a tidy win for Jenkins\n\nEnable GC logging, which can then be used for the next level of tuning and diagnostics, if needed.\n\nThere’s still a little unpredictability, but using appropriate settings gives a\nmuch more stable, responsive CI/CD server…​ even up to 20 GB heap sizes!\n\nFurther Reading:\n\nG1GC fundamentals\n\nMechanicalSympathy: Garbage Collection Distilled\n\nOracle Garbage First Garbage Collector Tuning\n\nOne additional thing\n\nI’ve added -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 to our\noptions above.  This is covering a complex and usually infrequent case where G1\nself-tuning can trigger bad performance for Jenkins — but that’s material for\nanother post…​","title":"Tuning Jenkins GC For Responsiveness and Stability with Large Instances","tags":["performance","scalability","administration"],"authors":[]}}]}},"pageContext":{"tag":"performance","limit":8,"skip":8,"numPages":2,"currentPage":2}},
    "staticQueryHashes": ["3649515864"]}